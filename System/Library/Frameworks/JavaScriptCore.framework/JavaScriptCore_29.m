_QWORD ***JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>::operator()(_QWORD ***result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    v8 = a2 >> 15;
    v9 = (unint64_t)a2 >> 15;
    v10 = result[2][1];
    v11 = (unint64_t)(a2 >> 15) >> 32;
    if ((_DWORD)v11 == 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        if (*((_DWORD *)*result + 15))
        {
          if (~((unint64_t)a2 >> 15) >= (unint64_t)*(unsigned int *)(*(*result)[6] + 92))
            return result;
LABEL_32:
          v12 = v8 & 0xFFFFFFFF00000000;
LABEL_33:
          if (v12 == 0x200000000)
          {
            v14 = *((unsigned int *)v10 + 4) + (uint64_t)(int)v8 + *((unsigned int *)v10 + 5);
          }
          else
          {
            v13 = ((unint64_t)a2 >> 15);
            if ((a2 & 0x400000000000) != 0)
              v14 = (v13 ^ 0xFFFFFFFFLL) + *((unsigned int *)v10 + 4);
            else
              v14 = (int)v13 - 5;
          }
          *(_BYTE *)(*v10 + v14) = 0;
          return result;
        }
        goto LABEL_47;
      }
    }
    else if (!(_DWORD)v11 && v9 >= 5)
    {
      if (*((_DWORD *)*result + 15))
      {
        if ((v8 - 5) >= (unint64_t)*(unsigned int *)(*(*result)[6] + 88))
          return result;
        goto LABEL_32;
      }
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x19852AAA0);
    }
    v12 = v8 & 0xFFFFFFFF00000000;
    if ((v8 & 0xFFFFFFFF00000000) != 0x200000000 && v9 < 5)
      return result;
    goto LABEL_33;
  }
  if (a2 == 16386)
  LOWORD(v2) = a2;
  while (1)
  {
    v3 = v2 & 0x3FFF;
    if (v3 == 1)
      break;
    if (v3 == 2)
      v4 = 16385;
    else
      v4 = 16387;
    if ((v2 & 0x4000) != 0)
      v2 = v4;
    else
      v2 = v3 | 0x4000u;
    if (v3 == 40)
      v2 = 16385;
    if (v3 == 3)
      v2 = 16385;
    if (v2 == 16386)
  }
  LOWORD(v5) = 16386;
  while (1)
  {
    v6 = v5 & 0x3FFF;
    if (v6 == 1)
      break;
    if (v6 == 2)
      v7 = 16385;
    else
      v7 = 16387;
    if (v6 == 3)
      v5 = 16385;
    else
      v5 = v7;
    if (v5 == a2)
  }
  return result;
}

_QWORD *JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&)::{lambda(void)#1} const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
}

_QWORD *JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>::operator()(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19852AC9CLL);
    }
    v8 = a2 >> 15;
    v9 = (unint64_t)a2 >> 15;
    v10 = (uint64_t *)result[3];
    v12 = *v10;
    v11 = v10[1];
    v13 = (unint64_t)(a2 >> 15) >> 32;
    if ((_DWORD)v13 == 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        if (!*(_DWORD *)(*result + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x19852ACD4);
        }
        if (~((unint64_t)a2 >> 15) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48)
                                                                                              + 92))
          return result;
LABEL_32:
        v14 = v8 & 0xFFFFFFFF00000000;
LABEL_33:
        if (*(unsigned __int16 *)(*(_QWORD *)v12 + 18) - 98 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19852ACCCLL);
        }
        if (v14 == 0x200000000)
        {
          v16 = *(unsigned int *)(v11 + 16) + (uint64_t)(int)v8 + *(unsigned int *)(v11 + 20);
        }
        else
        {
          v15 = ((unint64_t)a2 >> 15);
          if ((a2 & 0x400000000000) != 0)
            v16 = (v15 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v11 + 16);
          else
            v16 = (int)v15 - 5;
        }
        *(_BYTE *)(*(_QWORD *)v11 + v16) = 0;
        return result;
      }
    }
    else if (!(_DWORD)v13 && v9 >= 5)
    {
      if (!*(_DWORD *)(*result + 60))
      {
LABEL_51:
        __break(0xC471u);
        JUMPOUT(0x19852AB60);
      }
      if ((v8 - 5) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48) + 88))
        return result;
      goto LABEL_32;
    }
    v14 = v8 & 0xFFFFFFFF00000000;
    if ((v8 & 0xFFFFFFFF00000000) != 0x200000000 && v9 < 5)
      return result;
    goto LABEL_33;
  }
  if (a2 == 16386)
    goto LABEL_51;
  LOWORD(v2) = a2;
  while (1)
  {
    v3 = v2 & 0x3FFF;
    if (v3 == 1)
      break;
    if (v3 == 2)
      v4 = 16385;
    else
      v4 = 16387;
    if ((v2 & 0x4000) != 0)
      v2 = v4;
    else
      v2 = v3 | 0x4000u;
    if (v3 == 40)
      v2 = 16385;
    if (v3 == 3)
      v2 = 16385;
    if (v2 == 16386)
      goto LABEL_51;
  }
  LOWORD(v5) = 16386;
  while (1)
  {
    v6 = v5 & 0x3FFF;
    if (v6 == 1)
      return result;
    if (v6 == 2)
      v7 = 16385;
    else
      v7 = 16387;
    if (v6 == 3)
      v5 = 16385;
    else
      v5 = v7;
    if (v5 == a2)
      goto LABEL_51;
  }
}

_QWORD ***JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>::readTop(_QWORD ***result)
{
  _QWORD ***v1;
  unint64_t v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  BOOL v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD **v33[2];
  _QWORD **v34[2];
  _QWORD ***v35;
  _QWORD ***v36;

  v1 = result;
  v36 = result;
  v34[0] = &v36;
  v34[1] = &v35;
  v35 = result;
  v33[0] = result;
  v33[1] = v34;
  v2 = (unint64_t)result[1];
  v3 = *(unsigned __int16 *)(v2 + 18);
  if (v3 <= 0x114)
  {
    if (*(unsigned __int16 *)(v2 + 18) > 0xFBu)
    {
      if ((v3 - 275) < 2)
        goto LABEL_62;
      if (v3 != 252)
      {
        if (v3 == 263)
      }
    }
    else
    {
      if (*(unsigned __int16 *)(v2 + 18) <= 0x63u)
      {
        if ((v3 - 96) < 2)
          goto LABEL_62;
      }
      if (v3 == 100)
        goto LABEL_24;
      if (v3 != 246 && v3 != 248)
    }
    v2 = (unint64_t)v1[1];
    v3 = *(unsigned __int16 *)(v2 + 18);
    goto LABEL_24;
  }
  if (*(unsigned __int16 *)(v2 + 18) <= 0x160u)
  {
    switch(v3)
    {
      case 277:
        v11 = *(_QWORD *)(v2 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v12 = *(unsigned __int16 *)(v11 + 0x12);
        if (v12 > 0x15B)
        {
          if (v12 != 355 && v12 - 348 >= 4)
          {
            if (v12 == 352)
              return result;
          }
        }
        else
        {
          v13 = v12 - 278;
          v8 = v13 > 0xC;
          v14 = (1 << v13) & 0x15F1;
          if (v8 || v14 == 0)
        }
        v16 = (_QWORD *)(*(_QWORD *)v11 & 0xFFFFFFFF8);
        if ((*(_QWORD *)v11 & 1) != 0)
          v16 = (_QWORD *)*v16;
        v17 = *(unsigned int *)(v11 + 72);
      case 347:
        goto LABEL_62;
      case 348:
        goto LABEL_36;
    }
  }
  if (*(unsigned __int16 *)(v2 + 18) <= 0x165u)
  {
    if ((v3 - 353) < 2)
      goto LABEL_62;
    if (v3 == 355)
    {
LABEL_36:
      if (((*result)[3][2] & 0xFFFFFFFE) != 4)
        goto LABEL_62;
      return result;
    }
  }
  if (v3 != 358)
  {
    if (v3 == 372)
    {
LABEL_24:
      v4 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
      if (v4 && (v3 - 96) >= 5 && (v3 - 371) > 1)
        goto LABEL_62;
      if (v3 <= 98)
      {
        if ((v3 - 96) < 3)
        {
          v5 = (_QWORD *)(v2 + 24);
          goto LABEL_61;
        }
      }
      else
      {
        if ((v3 - 99) < 2)
        {
          v5 = (_QWORD *)(v2 + 32);
LABEL_61:
          if ((*v5 & 0xFF00FFFFFFFFFFFFLL) == 0)
            goto LABEL_62;
          if (*(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v2) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 351
            || *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v1[1]) & 0xFF00FFFFFFFFFFFFLL)
                        + 0x12) == 350)
          {
            v26 = *(unsigned __int16 *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v1[1]) & 0xFF00FFFFFFFFFFFFLL)
                                      + 0x12);
            v2 = *(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v1[1]) & 0xFF00FFFFFFFFFFFFLL;
            if (v26 != 351)
          }
          v2 = (unint64_t)v1[1];
          v3 = *(unsigned __int16 *)(v2 + 18);
LABEL_62:
          v18 = v3 - 245;
          v19 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
          if (v19 && (v3 - 96) >= 5 && (v3 - 371) > 1)
            goto LABEL_69;
          if (v3 <= 98)
          {
            if ((v3 - 96) >= 3)
              goto LABEL_103;
            v22 = (_QWORD *)(v2 + 24);
          }
          else
          {
            if ((v3 - 99) < 2)
            {
              v22 = (_QWORD *)(v2 + 32);
              goto LABEL_81;
            }
            v24 = v18 > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
            if (v24 && (v3 - 371) >= 2)
            {
LABEL_103:
              __break(0xC471u);
              JUMPOUT(0x19852B0A0);
            }
            v22 = (_QWORD *)(v2 + 40);
          }
LABEL_81:
          if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
LABEL_69:
            v20 = *(_QWORD *)v2;
LABEL_70:
            v21 = (_QWORD *)(v20 & 0xFFFFFFFF8);
            if ((v20 & 1) != 0)
              v21 = (_QWORD *)*v21;
            if ((v3 & 0xFFFE) == 0x60)
              v17 = *(unsigned int *)(v2 + 72);
            else
              v17 = 0;
            result = v35;
            v16 = v21;
          }
          if (v3 <= 98)
          {
            if ((v3 - 96) < 3)
            {
              v23 = (_QWORD *)(v2 + 24);
              goto LABEL_93;
            }
          }
          else
          {
            if ((v3 - 99) < 2)
            {
              v23 = (_QWORD *)(v2 + 32);
LABEL_93:
              v20 = *(_QWORD *)(*v23 & 0xFF00FFFFFFFFFFFFLL);
              goto LABEL_70;
            }
            if (v18 <= 7 && ((1 << (v3 + 11)) & 0xCF) != 0 || (v3 - 371) < 2)
            {
              v23 = (_QWORD *)(v2 + 40);
              goto LABEL_93;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x19852B13CLL);
        }
        v25 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
        if (!v25 || (v3 - 371) < 2)
        {
          v5 = (_QWORD *)(v2 + 40);
          goto LABEL_61;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19852B174);
    }
  }
  v6 = (_QWORD *)(*(_QWORD *)v2 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v2 & 1) != 0)
    v6 = (_QWORD *)*v6;
  LODWORD(v7) = *(_DWORD *)(v2 + 72);
  if (v6)
  {
    if (*v6)
    {
      if (*(_DWORD *)*v6 > v7)
      {
        v27 = v7 + (HIDWORD(v6[3]) & 0xFFFFF | ((int)(v6[3] >> 28) >> 24 << 20));
        v28 = v27 + 5;
        if (v27 < 0xFFFFFFFB)
        {
          v29 = result[2][1];
          if ((v28 & 0x80000000) != 0)
            v30 = (v28 ^ 0xFFFFFFFFLL) + *((unsigned int *)v29 + 4);
          else
            v30 = (int)v28 - 5;
          *(_BYTE *)(*v29 + v30) = 0;
        }
      }
    }
    v31 = HIDWORD(v6[3]) & 0xFFFFF | ((int)(v6[3] >> 28) >> 24 << 20);
    v32 = (v31 + 4);
    if (v32 >= 5)
    {
      v9 = result[2][1];
      if (v31 < -4)
      {
        v10 = v32 ^ 0xFFFFFFFFLL;
        goto LABEL_123;
      }
      LODWORD(v7) = v31 - 1;
LABEL_127:
      v7 = (int)v7;
      goto LABEL_124;
    }
  }
  else
  {
    v8 = v7 >= *((_DWORD *)(*result)[4] + 7) || v7 > 0xFFFFFFFA;
    if (!v8)
    {
      v9 = result[2][1];
      if ((int)v7 < -5)
      {
        v10 = (v7 + 5) ^ 0xFFFFFFFFLL;
LABEL_123:
        v7 = v10 + *((unsigned int *)v9 + 4);
LABEL_124:
        *(_BYTE *)(*v9 + v7) = 0;
        return result;
      }
      goto LABEL_127;
    }
  }
  return result;
}

_QWORD *JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>::readTop(void)::{lambda(JSC::DFG::Node *)#1}::operator()(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  unsigned int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(*result + 32);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 64) + 68) & 1) == 0)
  {
    v19 = *(_DWORD *)(v2 + 28);
    if (v19)
    {
      v20 = v19 - 1;
      do
      {
        if (v20 < 0xFFFFFFFB)
        {
          v21 = *(_QWORD *)(result[2] + 8);
          if (((v20 + 5) & 0x80000000) != 0)
            v22 = ((v20 + 5) ^ 0xFFFFFFFFLL) + *(unsigned int *)(v21 + 16);
          else
            v22 = (int)v20;
          *(_BYTE *)(*(_QWORD *)v21 + v22) = 0;
        }
      }
      while (v20--);
    }
  }
  v3 = (_DWORD *)(*a2 & 0xFFFFFFFF8);
  if ((*a2 & 1) != 0)
    v3 = *(_DWORD **)v3;
  while (v3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 64) + 68) & 1) == 0)
    {
      if (*(_QWORD *)v3)
      {
        v14 = **(_DWORD **)v3;
        if (v14)
        {
          v15 = v14 + 4;
          do
          {
            v16 = v15
                + (HIDWORD(*((_QWORD *)v3 + 3)) & 0xFFFFF | ((int)(*((_QWORD *)v3 + 3) >> 28) >> 24 << 20));
            if (v16 >= 5)
            {
              v17 = *(_QWORD *)(result[2] + 8);
              if ((v16 & 0x80000000) != 0)
                v18 = (v16 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v17 + 16);
              else
                v18 = (int)v16 - 5;
              *(_BYTE *)(*(_QWORD *)v17 + v18) = 0;
            }
            --v15;
          }
          while (v15 != 4);
        }
      }
    }
    v4 = *((_QWORD *)v3 + 3);
    if ((v3[8] & 1) != 0)
    {
      v24 = HIDWORD(v4) & 0xFFFFF | ((int)(v4 >> 28) >> 24 << 20);
      v25 = (v24 + 3);
      if (v25 >= 5)
      {
        v26 = *(_QWORD *)(result[2] + 8);
        if (v24 >= -3)
          v27 = v24 - 2;
        else
          v27 = (v25 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v26 + 16);
        *(_BYTE *)(*(_QWORD *)v26 + v27) = 0;
        v4 = *((_QWORD *)v3 + 3);
      }
    }
    v5 = HIDWORD(v4) & 0xFFFFF | ((int)(v4 >> 28) >> 24 << 20);
    v6 = (v5 + 4);
    if ((v4 >> 60) - 3 <= 2 && v6 >= 5)
    {
      v28 = *(_QWORD *)(result[2] + 8);
      if (v5 >= -4)
        v29 = v5 - 1;
      else
        v29 = (v6 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v28 + 16);
      *(_BYTE *)(*(_QWORD *)v28 + v29) = 0;
    }
    do
    {
      v8 = *((_QWORD *)v3 + 2);
      v9 = *((_QWORD *)v3 + 3) >> 60;
      v10 = (_DWORD **)(v8 & 0xFFFFFFFF8);
      v3 = (_DWORD *)(v8 & 0xFFFFFFFF8);
      if ((v8 & 1) != 0)
        v3 = *v10;
      v11 = (v9 < 0xC) & (0x824u >> v9);
      if (v3)
        v12 = v11;
      else
        v12 = 0;
    }
    while ((v12 & 1) != 0);
    if ((v8 & 1) != 0)
      v13 = v11;
    else
      v13 = 1;
    if (v11)
      v3 = 0;
    else
      v3 = v10;
    if ((v13 & 1) == 0)
      v3 = *v10;
  }
  return result;
}

_QWORD ***JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>::readTop(void)::{lambda(JSC::DFG::Node *)#3}::operator()(_QWORD ***result, uint64_t a2)
{
  unsigned int v2;
  _QWORD ***v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  unint64_t v13;

  v2 = *(_DWORD *)(a2 + 32);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = (uint64_t *)*result;
    v7 = *(uint64_t **)(a2 + 72);
    do
    {
      v8 = (unint64_t *)(2 * *v7);
      if (*v7 < 0)
        v9 = 63;
      else
        v9 = *v8;
      if (v9 > v5)
      {
        v10 = (uint64_t *)(v8 + 1);
        v11 = *v7 >= 0 ? v10 : v7;
        if (((*(unint64_t *)((char *)v11 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v12 = (_DWORD *)*v6;
          v13 = v5 + *(_QWORD *)(a2 + 24);
          if (*(_DWORD *)(*v6 + 164) <= v13)
          {
            __break(0xC471u);
            return result;
          }
          if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)v12 + 19) + 8 * v13) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          {
            v2 = *(_DWORD *)(a2 + 32);
          }
        }
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

_QWORD ***JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>::readTop(void)::{lambda(JSC::DFG::Node *)#2}::operator()(_QWORD ***result, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;

  v2 = a2[3] & 0xFF00FFFFFFFFFFFFLL;
  v3 = *(unsigned __int16 *)(v2 + 0x12);
  if (v3 <= 0x15B)
  {
    v4 = v3 - 278;
    v5 = v4 > 0xC;
    v6 = (1 << v4) & 0x15F1;
    if (!v5 && v6 != 0)
      goto LABEL_6;
  }
  if (v3 != 355 && v3 - 348 >= 4)
  {
    if (v3 == 352)
      return result;
  }
LABEL_6:
  v8 = (_QWORD *)(*(_QWORD *)v2 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v2 & 1) != 0)
    v8 = (_QWORD *)*v8;
}

_QWORD *JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>::readTop(void)::{lambda(JSC::InlineCallFrame *,unsigned int)#1}::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      v3 = **(_DWORD **)a2;
      if (v3 > a3)
      {
        do
        {
          v4 = a3 + (HIDWORD(*(_QWORD *)(a2 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(a2 + 24) >> 28) >> 24 << 20));
          v5 = v4 + 5;
          if (v4 < 0xFFFFFFFB)
          {
            v6 = *(_QWORD *)(result[2] + 8);
            if ((v5 & 0x80000000) != 0)
              v7 = (v5 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v6 + 16);
            else
              v7 = (int)v5 - 5;
            *(_BYTE *)(*(_QWORD *)v6 + v7) = 0;
          }
          LODWORD(a3) = a3 + 1;
        }
        while (v3 != (_DWORD)a3);
      }
    }
    v8 = *(_QWORD *)(a2 + 24);
    v9 = HIDWORD(v8) & 0xFFFFF | ((int)(v8 >> 28) >> 24 << 20);
    v10 = (v9 + 4);
    if ((v8 >> 60) - 3 < 3 && v10 >= 5)
    {
      v17 = *(_QWORD *)(result[2] + 8);
      if (v9 >= -4)
        v18 = v9 - 1;
      else
        v18 = (v10 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v17 + 16);
      *(_BYTE *)(*(_QWORD *)v17 + v18) = 0;
    }
  }
  else
  {
    v12 = *(unsigned int *)(*(_QWORD *)(*result + 32) + 28);
    if (v12 > a3)
    {
      v13 = a3 << 32;
      v14 = a3;
      do
      {
        if (v14 <= 0xFFFFFFFA)
        {
          v15 = *(_QWORD *)(result[2] + 8);
          if ((int)v14 >= -5)
            v16 = v13 >> 32;
          else
            v16 = ((v14 + 5) ^ 0xFFFFFFFF) + *(unsigned int *)(v15 + 16);
          *(_BYTE *)(*(_QWORD *)v15 + v16) = 0;
        }
        ++v14;
        v13 += 0x100000000;
      }
      while (v12 != v14);
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::Operand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Operand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Operand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (uint64_t *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *WTF::Vector<JSC::DFG::SSACalculator::Def *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::SSACalculator::Def *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t *a3, _QWORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  unint64_t v20;
  char *v21;
  JSC::DFG::Node *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  int v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  char v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  char v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  char v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  int v141;
  char v142;
  char v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  int v150;
  char v151;
  char v152;
  int v153;
  char v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  int v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  int v170;
  char v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  int v199;
  char v200;
  uint64_t v201;
  char v202;
  int v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  int v214;
  char v215;
  uint64_t v216;
  char v217;
  int v218;
  char v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  char v228;
  int v229;
  char v230;
  _DWORD *v231;
  int v232;
  int v233;
  uint64_t v234;
  char v235;
  int v236;
  char v237;
  char v238;
  int v239;
  char v240;
  uint64_t v241;
  char v242;
  int v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  int v248;
  char v249;
  int v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  unsigned int v256;
  BOOL v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v261;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int v293;
  WTF *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _DWORD *v309;
  int v310;
  int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _DWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  BOOL v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  int v336;
  BOOL v337;
  int v338;
  BOOL v339;
  unint64_t v340;
  unsigned int v341;
  unsigned int v342;
  uint64_t *v343;
  int v344;
  int v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  BOOL v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  _QWORD *v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  const char *v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  char v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  int v398;
  int v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  char v414;
  char v415;
  char v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  char v420;
  char v421;
  char v422;
  char v423;
  WTF *v424;
  uint64_t v425;
  char v426;
  char v427;
  char v428;
  char v429;
  char v430;
  char v431;
  char v432;
  char v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  char v440;
  char v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  char v448;
  char v449;
  char v450;
  char v451;
  char v452;
  char v453;
  char v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  _QWORD v461[3];
  uint64_t v462;

  v13 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v13 = *(_QWORD *)v13;
  while (v13)
  {
    v15 = *(_QWORD *)(v13 + 24);
    if ((*(_BYTE *)(v13 + 32) & 1) != 0)
    {
      v20 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 3;
      v15 = *(_QWORD *)(v13 + 24);
    }
    if ((v15 >> 60) - 3 <= 2)
    {
      v26 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 4;
    }
    v16 = *(_QWORD *)(v13 + 16);
    v13 = v16 & 0xFFFFFFFF8;
    if ((v16 & 1) != 0)
      v13 = *(_QWORD *)v13;
  }
  if (*((_BYTE *)this + 960))
  {
    v340 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
  }
  v461[0] = a5;
  v461[1] = a3;
  v461[2] = a4;
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v341 = *((unsigned __int16 *)a2 + 9);
    if (v341 > 0xC9)
    {
      if (v341 - 202 > 0x3E || ((1 << (v341 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v342 = v341 - 333;
        if (v342 > 0x3A || ((1 << v342) & 0x7A8000000000003) == 0)
        {
LABEL_892:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19852EBCCLL);
        }
      }
      goto LABEL_219;
    }
    v393 = v341 - 101;
    if (v341 - 101 > 0x3E)
      goto LABEL_891;
    if (((1 << v393) & 0x7E0070000000000FLL) != 0)
    {
LABEL_219:
      return;
    }
    if (((1 << v393) & 0x18000000000) == 0)
    {
LABEL_891:
      if (v341 - 92 >= 2)
        goto LABEL_892;
      goto LABEL_219;
    }
  }
  v14 = *((unsigned __int16 *)a2 + 9);
  if (v14 - 20 >= 8)
  {
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x48:
      case 0x4A:
      case 0x5B:
      case 0x86:
      case 0x94:
      case 0x95:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xB6:
      case 0xB7:
      case 0xB9:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x117:
      case 0x118:
      case 0x127:
      case 0x128:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x153:
      case 0x154:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x175:
      case 0x17B:
      case 0x17C:
      case 0x183:
      case 0x188:
      case 0x189:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19F:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
        return;
      case 6:
        v245 = *a3;
        v424 = (WTF *)16423;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v246 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v247 = 2;
        while (1)
        {
          v248 = v247 & 3;
          if (v248 == 1)
            break;
          if (v248 == 2)
            v249 = 1;
          else
            v249 = 3;
          if (v248 == 3)
            v247 = 1;
          else
            v247 = v249;
        }
        return;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x8E:
      case 0x8F:
      case 0xA7:
      case 0xA8:
      case 0xB0:
      case 0xB1:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD8:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x124:
      case 0x125:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x147:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x155:
      case 0x156:
      case 0x181:
      case 0x185:
      case 0x186:
      case 0x19B:
        goto LABEL_54;
      case 0xD:
        v205 = *((_QWORD *)a2 + 9);
        if (v205)
        {
          v290 = (HIDWORD(*(_QWORD *)(v205 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v205 + 24) >> 28) >> 24 << 20)) + 4;
          v37 = ((unint64_t)v290 << 15) | ((unint64_t)(v290 >> 31) << 47) | 2;
        }
        else
        {
          v37 = 131074;
        }
        goto LABEL_51;
      case 0xF:
        v364 = (_QWORD *)*((_QWORD *)a2 + 9);
        v365 = v364;
        do
        {
          v366 = v365;
          v365 = (_QWORD *)*v365;
        }
        while (v365);
        if (v366 != v364)
          *v364 = v366;
        v367 = (_QWORD *)*((_QWORD *)a2 + 9);
        v368 = v367;
        do
        {
          v369 = v368;
          v368 = (_QWORD *)*v368;
        }
        while (v368);
        if (v369 != v367)
          *v367 = v369;
        v21 = &v451;
        goto LABEL_526;
      case 0x10:
        v370 = (_QWORD *)*((_QWORD *)a2 + 9);
        v371 = v370;
        do
        {
          v372 = v371;
          v371 = (_QWORD *)*v371;
        }
        while (v371);
        if (v372 != v370)
          *v370 = v372;
        v373 = (_QWORD *)*((_QWORD *)a2 + 9);
        v374 = v373;
        do
        {
          v375 = v374;
          v374 = (_QWORD *)*v374;
        }
        while (v374);
        if (v375 != v373)
          *v373 = v375;
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v450;
        goto LABEL_527;
      case 0x11:
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v448;
        goto LABEL_527;
      case 0x12:
        v54 = *((_QWORD *)a2 + 9);
        v55 = 2;
        goto LABEL_103;
      case 0x13:
        v21 = &v449;
        goto LABEL_526;
      case 0x1C:
        v376 = (_QWORD *)*((_QWORD *)a2 + 9);
        v377 = v376;
        do
        {
          v378 = v377;
          v377 = (_QWORD *)*v377;
        }
        while (v377);
        if (v378 != v376)
          *v376 = v378;
        v227 = (v378[3] << 15) | 2;
        v226 = (_QWORD *)*a3;
        goto LABEL_466;
      case 0x21:
        v35 = *((unsigned int *)a2 + 18);
        v36 = 35;
        goto LABEL_50;
      case 0x22:
        return;
      case 0x28:
        v17 = 2;
        while (1)
        {
          v18 = v17 & 3;
          if (v18 == 1)
            break;
          if (v18 == 2)
            v19 = 1;
          else
            v19 = 3;
          if (v18 == 3)
            v17 = 1;
          else
            v17 = v19;
        }
        return;
      case 0x29:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
          goto LABEL_219;
        return;
      case 0x2A:
      case 0x142:
      case 0x143:
        v28 = *((_BYTE *)a2 + 30);
        goto LABEL_36;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v114 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        switch((_DWORD)v114)
        {
          case 0x1A:
            v224 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v225 = 0x68000000000000;
            break;
          case 0x1C:
            v224 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v225 = 0x70000000000000;
            break;
          case 0x1B:
            v224 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v225 = 0x6C000000000000;
            break;
          default:
            goto LABEL_219;
        }
        if (v224 != v225)
          goto LABEL_219;
LABEL_465:
        v226 = (_QWORD *)*a3;
        v227 = 16385;
LABEL_466:
        goto LABEL_606;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        if ((*((_BYTE *)a2 + 30) & 0xFC) != 0 && (*((_BYTE *)a2 + 38) & 0xFC) != 0)
          return;
LABEL_54:
        v24 = *a3;
        v25 = 16385;
        goto LABEL_237;
      case 0x3F:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
          goto LABEL_219;
        return;
      case 0x40:
      case 0x42:
      case 0x44:
        v45 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v45 == 49 || (_DWORD)v45 == 1 || (_DWORD)v45 == 52)
          return;
        if ((_DWORD)v45)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19852BD68);
        }
        goto LABEL_219;
      case 0x41:
        v206 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v206 != 49 && (_DWORD)v206 != 1 && (_DWORD)v206 != 52)
          goto LABEL_219;
        return;
      case 0x46:
        v287 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v287 != 49 && (_DWORD)v287 != 1)
          goto LABEL_219;
        return;
      case 0x49:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x131:
        v146 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v147 = 0xC4000000000000;
        goto LABEL_308;
      case 0x4B:
        return;
      case 0x52:
      case 0x53:
        v324 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v324 > 0x34)
          goto LABEL_686;
        if (!v324)
          goto LABEL_219;
        if (((1 << v324) & 0x1200001C000002) == 0)
        {
LABEL_686:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19852DD84);
        }
        return;
      case 0x5C:
      case 0x5D:
        v29 = *((_DWORD *)a2 + 18);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v30 = 13;
              break;
            case 4:
              v30 = 17;
              break;
            case 5:
              v30 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x19852ECF4);
            default:
              __break(0xC471u);
              JUMPOUT(0x19852ED24);
          }
        }
        else
        {
          v30 = 21;
        }
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 0x17u:
          case 0x18u:
            goto LABEL_219;
          case 3u:
            v143 = 2;
            while (1)
            {
              v144 = v143 & 3;
              if (v144 == 1)
                break;
              if (v144 == 2)
                v145 = 1;
              else
                v145 = 3;
              if (v144 == 3)
                v143 = 1;
              else
                v143 = v145;
            }
            return;
          case 5u:
            if (BYTE2(v29) - 3 <= 1)
              goto LABEL_219;
            return;
          case 6u:
            return;
          case 7u:
            if (BYTE2(v29) > 3u || BYTE2(v29) == 2)
              goto LABEL_219;
            v110 = *a3;
            v424 = (WTF *)16388;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v111 = *a3;
            v424 = (WTF *)16400;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v112 = *((_DWORD *)a2 + 6);
            v113 = *((_DWORD *)this + 41);
            if (v113 <= v112)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EE3CLL);
            }
            if (v113 <= v112 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852C2ACLL);
            }
            return;
          case 8u:
            if (BYTE2(v29) >= 2u && BYTE2(v29) != 3)
              goto LABEL_219;
            v116 = *a3;
            v424 = (WTF *)16388;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v117 = *a3;
            v424 = (WTF *)16401;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v118 = *((_DWORD *)a2 + 6);
            v119 = *((_DWORD *)this + 41);
            if (v119 <= v118)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EE34);
            }
            if (v119 <= v118 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852C3DCLL);
            }
            return;
          case 9u:
            if (BYTE2(v29) >= 2u && BYTE2(v29) != 3)
              goto LABEL_219;
            v31 = *a3;
            v424 = (WTF *)16388;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v32 = *a3;
            v424 = (WTF *)16402;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v33 = *((_DWORD *)a2 + 6);
            v34 = *((_DWORD *)this + 41);
            if (v34 <= v33)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EDE4);
            }
            if (v34 <= v33 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852BBC8);
            }
            return;
          case 0xAu:
          case 0xBu:
            if (BYTE2(v29) <= 1u)
              goto LABEL_727;
            goto LABEL_219;
          case 0xCu:
            if (BYTE2(v29) > 1u)
              goto LABEL_219;
            v312 = *((_QWORD *)a2 + 3);
            v313 = *((_DWORD *)this + 41);
            if (v313 <= v312)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EEE4);
            }
            if (v313 <= (int)v312 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EEECLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v446, v30, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(&v445, a2);
            if (v446 == 36 && (v447 & 0x3FFF) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19852DB3CLL);
            }
            return;
          case 0xDu:
            v379 = *((_QWORD *)a2 + 3);
            v380 = *((_DWORD *)this + 41);
            if (v380 <= v379)
            {
              __break(0xC471u);
              JUMPOUT(0x19852F038);
            }
            if (v380 <= (int)v379 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852F040);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v443, v30, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(&v442, a2);
            if (v443 == 36 && (v444 & 0x3FFF) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19852E86CLL);
            }
            return;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
            v57 = *a3;
            v424 = (WTF *)16406;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v58 = *a3;
            v424 = (WTF *)16423;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            if ((v29 & 0x40000000) != 0)
              goto LABEL_741;
            v59 = *((_DWORD *)a2 + 6);
            v60 = *((_DWORD *)this + 41);
            if (v60 <= v59)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EE04);
            }
            if (v60 <= v59 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852BEA4);
            }
            return;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x19852E8B4);
          default:
            __break(0xC471u);
            JUMPOUT(0x19852E8D4);
        }
        return;
      case 0x60:
      case 0x61:
      case 0x113:
      case 0x166:
        return;
      case 0x62:
      case 0xC3:
      case 0xD9:
      case 0xDB:
      case 0xDC:
      case 0x108:
      case 0x14A:
      case 0x184:
      case 0x187:
        goto LABEL_219;
      case 0x63:
        v231 = (_DWORD *)*((_QWORD *)a2 + 9);
        v232 = v231[6];
        if (v232)
        {
          v233 = v232 - 1;
          do
          {
            --v233;
          }
          while (v233 != -1);
        }
        return;
      case 0x64:
        v309 = (_DWORD *)*((_QWORD *)a2 + 9);
        v310 = v309[6];
        if (v310)
        {
          v311 = v310 - 1;
          do
          {
            --v311;
          }
          while (v311 != -1);
        }
        return;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v46 = *((_DWORD *)a2 + 6);
        v47 = *((_DWORD *)this + 41);
        if (v47 <= v46)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EDECLL);
        }
        if (v47 <= v46 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EDF4);
        }
        if (v47 <= v46 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EDFCLL);
        }
        v48 = *((_DWORD *)a2 + 18);
        v49 = *((_DWORD *)a2 + 14) & 7;
        if (v49 >= 2 && v49 - 3 >= 3)
        {
          if (v49 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x19852C48CLL);
          }
          __break(0xC471u);
          JUMPOUT(0x19852ED44);
        }
        if (*((_DWORD *)a2 + 18) - 14 >= 9)
        {
          switch(*((_DWORD *)a2 + 18))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
            case 5u:
            case 6u:
            case 0xCu:
            case 0xDu:
            case 0x17u:
            case 0x18u:
              goto LABEL_219;
            case 3u:
              goto LABEL_606;
            case 7u:
              if (BYTE2(v48) - 3 <= 1)
                goto LABEL_219;
              v284 = *a4;
              v285 = 16400;
              goto LABEL_592;
            case 8u:
              if (BYTE2(v48) - 3 <= 1)
                goto LABEL_219;
              v284 = *a4;
              v285 = 16401;
              goto LABEL_592;
            case 9u:
              if (BYTE2(v48) - 3 <= 1)
                goto LABEL_219;
              v122 = *a3;
              v424 = (WTF *)16388;
              v462 = 16386;
              if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
              v123 = *a3;
              v424 = (WTF *)16389;
              v462 = 16386;
              if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
              v124 = *a3;
              v424 = (WTF *)16402;
              v462 = 16386;
              if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
              v125 = 2;
              while (1)
              {
                v126 = v125 & 3;
                if (v126 == 1)
                  break;
                if (v126 == 2)
                  v127 = 1;
                else
                  v127 = 3;
                if (v126 == 3)
                  v125 = 1;
                else
                  v125 = v127;
              }
              goto LABEL_593;
            case 0xAu:
              if (BYTE2(v48) - 3 <= 1)
                goto LABEL_219;
              v284 = *a4;
              v285 = 16403;
LABEL_592:
LABEL_593:
              if (*((_WORD *)a2 + 9) == 146)
                v286 = *((_DWORD *)a2 + 20);
              else
                v286 = *((_DWORD *)a2 + 18);
              if ((v286 & 0xFE0000) != 0)
              break;
            case 0xBu:
              if ((v48 & 0xFE0000) != 0)
                goto LABEL_219;
              break;
            case 0x19u:
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
              __break(0xC471u);
              JUMPOUT(0x19852EA70);
            default:
              __break(0xC471u);
              JUMPOUT(0x19852EC24);
          }
        }
        else
        {
          v50 = *a3;
          if ((v48 & 0x40000000) != 0)
          {
            goto LABEL_750;
          }
          v424 = (WTF *)16423;
          v462 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
          v51 = 2;
          while (1)
          {
            v52 = v51 & 3;
            if (v52 == 1)
              break;
            if (v52 == 2)
              v53 = 1;
            else
              v53 = 3;
            if (v52 == 3)
              v51 = 1;
            else
              v51 = v53;
          }
        }
        return;
      case 0x6D:
        v288 = *a4;
        v289 = 16423;
        goto LABEL_605;
      case 0x84:
      case 0x85:
        goto LABEL_236;
      case 0x87:
        v41 = *a3;
        v424 = (WTF *)16396;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v42 = 2;
        while (1)
        {
          v43 = v42 & 3;
          if (v43 == 1)
            break;
          if (v43 == 2)
            v44 = 1;
          else
            v44 = 3;
          if (v43 == 3)
            v42 = 1;
          else
            v42 = v44;
        }
        LOBYTE(v43) = 2;
        while (v43 != 1)
          LOBYTE(v43) = 1;
        LOBYTE(v43) = 2;
        while (v43 != 1)
          LOBYTE(v43) = 1;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
          goto LABEL_739;
        return;
      case 0x88:
      case 0x89:
        v148 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v149 = 2;
        while (1)
        {
          v150 = v149 & 3;
          if (v150 == 1)
            break;
          if (v150 == 2)
            v151 = 1;
          else
            v151 = 3;
          if (v150 == 3)
            v149 = 1;
          else
            v149 = v151;
        }
        return;
      case 0x8A:
        v24 = *a3;
        v25 = 16396;
        goto LABEL_237;
      case 0x8B:
        v152 = 2;
        while (1)
        {
          v153 = v152 & 3;
          if (v153 == 1)
            break;
          if (v153 == 2)
            v154 = 1;
          else
            v154 = 3;
          if (v153 == 3)
            v152 = 1;
          else
            v152 = v154;
        }
        LOBYTE(v153) = 2;
        while (v153 != 1)
          LOBYTE(v153) = 1;
        return;
      case 0x8C:
      case 0x8D:
        v120 = *a3;
        v121 = 16393;
        goto LABEL_234;
      case 0x90:
        goto LABEL_746;
      case 0x91:
      case 0x92:
        v137 = *a3;
        v424 = (WTF *)16394;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v138 = *a3;
        v424 = (WTF *)16393;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v139 = *a3;
        v424 = (WTF *)16396;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v140 = 2;
        while (1)
        {
          v141 = v140 & 3;
          if (v141 == 1)
            break;
          if (v141 == 2)
            v142 = 1;
          else
            v142 = 3;
          if (v141 == 3)
            v140 = 1;
          else
            v140 = v142;
        }
        LOBYTE(v141) = 2;
        while (v141 != 1)
          LOBYTE(v141) = 1;
        LOBYTE(v141) = 2;
        while (v141 != 1)
          LOBYTE(v141) = 1;
        LOBYTE(v141) = 2;
        while (v141 != 1)
          LOBYTE(v141) = 1;
        return;
      case 0x93:
      case 0x12B:
      case 0x12C:
      case 0x135:
        v24 = *a3;
        v25 = 16423;
        goto LABEL_237;
      case 0x96:
        v21 = &v453;
        goto LABEL_526;
      case 0x97:
        v21 = &v452;
        goto LABEL_526;
      case 0x98:
      case 0x99:
        if (*((int *)this + 238) < 2)
          return;
        v21 = &v435;
        goto LABEL_526;
      case 0x9A:
        v69 = *a3;
        v424 = (WTF *)16394;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v70 = *a3;
        v424 = (WTF *)16396;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        if (*((int *)this + 238) < 2)
          return;
        v21 = &v434;
        goto LABEL_526;
      case 0x9B:
        if (*((int *)this + 238) < 2)
          return;
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v432;
        goto LABEL_527;
      case 0x9C:
        v128 = *a3;
        v424 = (WTF *)16394;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v129 = *a3;
        v424 = (WTF *)16396;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v130 = *((_QWORD *)a2 + 9);
        v131 = *(unsigned int *)(v130 + 20);
        v132 = (v131 << 6) - 64;
        v133 = v132;
        do
        {
          if (v133 == -64)
            goto LABEL_273;
          v134 = *(_DWORD *)(*(_QWORD *)(v130 + 8) + v133) - 2;
          v133 -= 64;
        }
        while (v134 > 3);
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
LABEL_273:
        while (v131)
        {
          if (--v131 >= (unint64_t)*(unsigned int *)(v130 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19852EE44);
          }
          v135 = v132 - 64;
          v136 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v130 + 8) + v132));
          v132 = v135;
          if (v136)
          {
            v235 = 2;
            while (1)
            {
              v236 = v235 & 3;
              if (v236 == 1)
                break;
              if (v236 == 2)
                v237 = 1;
              else
                v237 = 3;
              if (v236 == 3)
                v235 = 1;
              else
                v235 = v237;
            }
            break;
          }
        }
        if (*((int *)this + 238) < 2)
          return;
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v433;
        goto LABEL_527;
      case 0x9D:
        if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
          return;
LABEL_739:
        return;
      case 0x9E:
        v23 = *((_DWORD *)a2 + 18);
        switch((char)v23)
        {
          case 3:
            goto LABEL_606;
          case 5:
            return;
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            v24 = *a3;
            v25 = 16388;
            goto LABEL_237;
          case 12:
          case 13:
            v21 = &v431;
            goto LABEL_526;
          case 25:
            goto LABEL_917;
          default:
            v395 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
            if (v395 == 12 || !v395)
            {
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
              __break(0xC471u);
              JUMPOUT(0x19852F0C4);
            }
LABEL_917:
            v396 = *a3;
            v424 = (WTF *)16423;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            if ((v23 & 0x40000000) != 0)
              goto LABEL_750;
            return;
        }
      case 0x9F:
        v269 = *((_DWORD *)a2 + 18);
        if (v269 != 25)
        {
          v397 = JSC::DFG::toTypedArrayType(v269);
          if (v397 == 12 || !v397)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x19852EEDCLL);
          }
        }
        if ((v269 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x19852D2E0);
        }
        return;
      case 0xA0:
        v361 = *((_DWORD *)a2 + 18);
        if (v361 == 25)
          goto LABEL_820;
        v399 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v399 == 12 || !v399)
        {
          if (v361 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19852EFCCLL);
          }
          goto LABEL_606;
        }
        if (v361 == 3)
          goto LABEL_606;
LABEL_820:
        if ((v361 & 0x40000000) != 0)
          goto LABEL_750;
        v21 = &v430;
        goto LABEL_526;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE24);
        }
        v21 = &v429;
        goto LABEL_526;
      case 0xA2:
        v344 = *((unsigned __int8 *)a2 + 72);
        if (v344 == 25)
          goto LABEL_765;
        v398 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v398 == 12 || !v398)
        {
          if (v344 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19852EF68);
          }
          goto LABEL_606;
        }
        if (v344 == 3)
          goto LABEL_606;
LABEL_765:
        if (*((_WORD *)a2 + 9) == 146)
          v345 = *((_DWORD *)a2 + 20);
        else
          v345 = *((_DWORD *)a2 + 18);
        if ((v345 & 0x40000000) == 0)
        {
          v21 = &v438;
          goto LABEL_526;
        }
        goto LABEL_750;
      case 0xA3:
        v362 = *((unsigned __int8 *)a2 + 72);
        if (v362 == 25)
          goto LABEL_823;
        v400 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v400 != 12 && v400)
        {
          if (v362 != 3)
          {
LABEL_823:
            if (*((_WORD *)a2 + 9) == 146)
              v363 = *((_DWORD *)a2 + 20);
            else
              v363 = *((_DWORD *)a2 + 18);
            if ((v363 & 0x40000000) != 0)
            {
LABEL_750:
            }
            else
            {
              v21 = &v437;
LABEL_526:
              v22 = a2;
LABEL_527:
              JSC::DFG::LazyNode::LazyNode(v21, v22);
            }
            return;
          }
        }
        else if (v362 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19852F030);
        }
LABEL_606:
        return;
      case 0xAA:
      case 0x129:
        return;
      case 0xAB:
        v35 = *((unsigned int *)a2 + 18);
        v36 = 21;
        goto LABEL_50;
      case 0xAC:
        v54 = *((unsigned int *)a2 + 18);
        v55 = 21;
        goto LABEL_103;
      case 0xAD:
      case 0xAE:
        v35 = *((_QWORD *)a2 + 9);
        v36 = 36;
        goto LABEL_50;
      case 0xAF:
        v54 = *((_QWORD *)a2 + 9);
        v55 = 36;
        goto LABEL_103;
      case 0xB2:
        v288 = *a4;
        v289 = 16422;
LABEL_605:
        goto LABEL_606;
      case 0xB3:
        v24 = *a3;
        v25 = 16398;
        goto LABEL_237;
      case 0xB4:
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v428;
        goto LABEL_527;
      case 0xB5:
        goto LABEL_576;
      case 0xB8:
      case 0xBA:
        v38 = 2;
        while (1)
        {
          v39 = v38 & 3;
          if (v39 == 1)
            break;
          if (v39 == 2)
            v40 = 1;
          else
            v40 = 3;
          if (v39 == 3)
            v38 = 1;
          else
            v38 = v40;
        }
        return;
      case 0xBE:
        v21 = &v441;
        goto LABEL_526;
      case 0xC1:
        v282 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v282 != 21 && (_DWORD)v282 != 49 && (_DWORD)v282 != 1)
          goto LABEL_219;
        v283 = *((_QWORD *)a2 + 4);
        if ((v283 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
LABEL_589:
        v146 = v283 & 0xFC000000000000;
        v147 = 0x4000000000000;
        goto LABEL_308;
      case 0xC2:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          goto LABEL_219;
        v21 = &v436;
        goto LABEL_526;
      case 0xC4:
        v322 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v322 == 11)
        {
          return;
        }
        if ((_DWORD)v322)
        {
          __break(0xC471u);
          JUMPOUT(0x19852E194);
        }
        goto LABEL_219;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        if (v14 - 202 >= 0xA || ((0x3EFu >> (v14 + 54)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EDCCLL);
        }
        v325 = dword_199156474[(__int16)(v14 - 202)];
        v326 = (_DWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v392 = v325 + *v326;
          if (*((_DWORD *)this + 41) <= v392)
          {
            __break(0xC471u);
            JUMPOUT(0x19852F048);
          }
          v327 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v392);
        }
        else
        {
          v327 = &v326[2 * v325];
        }
        if ((*v327 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_219;
        goto LABEL_693;
      case 0xCE:
        v343 = (uint64_t *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v394 = *v343;
          if (*((_DWORD *)this + 41) <= v394)
          {
            __break(0xC471u);
            JUMPOUT(0x19852F0CCLL);
          }
          v343 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v394);
        }
        v283 = *v343;
        goto LABEL_589;
      case 0xD6:
        goto LABEL_565;
      case 0xD7:
        if (*((_WORD *)a2 + 9) == 146)
          v273 = *((_DWORD *)a2 + 20);
        else
          v273 = *((_DWORD *)a2 + 18);
        switch(v273)
        {
          case 9u:
            break;
          case 7u:
            break;
          case 8u:
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19852E9B4);
        }
        return;
      case 0xDA:
      case 0xDE:
LABEL_576:
        return;
      case 0xDD:
        return;
      case 0xDF:
      case 0xE0:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
          || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
          || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
        {
          goto LABEL_219;
        }
        v196 = *a3;
        v424 = (WTF *)16408;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v197 = *a3;
        v424 = (WTF *)16398;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v198 = 2;
        while (1)
        {
          v199 = v198 & 3;
          if (v199 == 1)
            break;
          if (v199 == 2)
            v200 = 1;
          else
            v200 = 3;
          if (v199 == 3)
            v198 = 1;
          else
            v198 = v200;
        }
        LOBYTE(v199) = 2;
        while (v199 != 1)
          LOBYTE(v199) = 1;
        return;
      case 0xE1:
        v328 = *((_QWORD *)a2 + 5);
        goto LABEL_696;
      case 0xE6:
        v234 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((v234 - 1) < 2)
          return;
        if ((_DWORD)v234)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19852CF28);
        }
        goto LABEL_219;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        v27 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v27 == 21)
        {
          if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x54000000000000)
          {
            v65 = *a3;
            v424 = (WTF *)16407;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v66 = 2;
            while (1)
            {
              v67 = v66 & 3;
              if (v67 == 1)
                break;
              if (v67 == 2)
                v68 = 1;
              else
                v68 = 3;
              if (v67 == 3)
                v66 = 1;
              else
                v66 = v68;
            }
          }
          return;
        }
        if (!(_DWORD)v27)
        {
          v28 = *((_BYTE *)a2 + 38);
LABEL_36:
          if ((v28 & 0xFC) == 0)
            goto LABEL_219;
        }
        return;
      case 0x101:
      case 0x102:
        goto LABEL_606;
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x10C:
      case 0x10E:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x116:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
        v61 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v62 = 2;
        while (1)
        {
          v63 = v62 & 3;
          if (v63 == 1)
            break;
          if (v63 == 2)
            v64 = 1;
          else
            v64 = 3;
          if (v63 == 3)
            v62 = 1;
          else
            v62 = v64;
        }
        return;
      case 0x106:
        v81 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v88 = 2;
        while (1)
        {
          v89 = v88 & 3;
          if (v89 == 1)
            break;
          if (v89 == 2)
            v90 = 1;
          else
            v90 = 3;
          if (v89 == 3)
            v88 = 1;
          else
            v88 = v90;
        }
        v91 = *((_QWORD *)a2 + 4);
        v92 = v91;
        if ((v91 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v91) + 0x2000000000000, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v91 | 0xFFFE000000000000, v82, v83, v84, v85, v86, v87);
          if (!(_DWORD)v91)
            return;
        }
        v99 = *((unsigned __int16 *)a2 + 9);
        switch(v99)
        {
          case 267:
            goto LABEL_602;
          case 264:
            v100 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_602:
            v100 = *((_DWORD *)a2 + 21);
            break;
          default:
            v100 = *((_DWORD *)a2 + 18);
            goto LABEL_183;
        }
        LOBYTE(v100) = v100 & 0xF;
LABEL_183:
        if (v100 - 4 < 6
          || v100 <= 0x19u && ((1 << v100) & 0x2A00000) != 0)
        {
          v101 = *((unsigned int *)this + 107);
          if (v91 >= v101)
          {
            if ((_DWORD)v101)
            {
              v220 = (unsigned int *)*((_QWORD *)this + 52);
              v221 = 4 * v101;
              do
              {
                v222 = *v220;
                if (v222 < v91)
                {
                  if (*((_DWORD *)this + 41) <= (v222 + *((_DWORD *)a2 + 6)))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19852EE64);
                  }
                  if ((v222 & 0x80000000) != 0)
                    v223 = COERCE__INT64((double)v222) + 0x2000000000000;
                  else
                    v223 = v222 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v223, v93, v94, v95, v96, v97, v98);
                }
                ++v220;
                v221 -= 4;
              }
              while (v221);
            }
          }
          else
          {
            v102 = 0;
            do
            {
              if (*((_DWORD *)this + 41) <= (v102 + *((_DWORD *)a2 + 6)))
              {
                __break(0xC471u);
                JUMPOUT(0x19852EE2CLL);
              }
              if ((v102 & 0x80000000) != 0)
                v103 = COERCE__INT64((double)v102) + 0x2000000000000;
              else
                v103 = v102 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v103, v93, v94, v95, v96, v97, v98);
              ++v102;
            }
            while (v92 != v102);
          }
        }
        return;
      case 0x107:
        v329 = *((unsigned int *)a2 + 8);
        if (!*((_DWORD *)a2 + 8))
          goto LABEL_567;
        v330 = *((_QWORD *)a2 + 3);
        v331 = *((_DWORD *)this + 41);
        v332 = v331 >= v330;
        LODWORD(v333) = v331 - v330;
        if (v332)
          v333 = v333;
        else
          v333 = 0;
        while (1)
        {
          if (!v333)
          {
            __break(0xC471u);
            JUMPOUT(0x19852EEF4);
          }
          if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v330) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
            break;
          LODWORD(v330) = v330 + 1;
          --v333;
          if (!--v329)
            goto LABEL_567;
        }
LABEL_523:
LABEL_567:
        return;
      case 0x109:
        v201 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v202 = 2;
        while (1)
        {
          v203 = v202 & 3;
          if (v203 == 1)
            break;
          if (v203 == 2)
            v204 = 1;
          else
            v204 = 3;
          if (v203 == 3)
            v202 = 1;
          else
            v202 = v204;
        }
        return;
      case 0x10A:
        v280 = *((unsigned int *)a2 + 20);
        if ((v280 & 0x80000000) != 0)
          v281 = COERCE__INT64((double)v280) + 0x2000000000000;
        else
          v281 = v280 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v281, v274, v275, v276, v277, v278, v279);
        return;
      case 0x10B:
        v162 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v169 = 2;
        while (1)
        {
          v170 = v169 & 3;
          if (v170 == 1)
            break;
          if (v170 == 2)
            v171 = 1;
          else
            v171 = 3;
          if (v170 == 3)
            v169 = 1;
          else
            v169 = v171;
        }
        v172 = (uint64_t *)*((_QWORD *)a2 + 9);
        v173 = *v172;
        v174 = *(unsigned int *)(*v172 + 8);
        if ((v174 & 0x80000000) != 0)
          v175 = COERCE__INT64((double)v174) + 0x2000000000000;
        else
          v175 = v174 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v175, v163, v164, v165, v166, v167, v168);
        v183 = *((unsigned __int16 *)a2 + 9);
        switch(v183)
        {
          case 267:
            goto LABEL_645;
          case 264:
            v184 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_645:
            v184 = *((_DWORD *)a2 + 21);
            break;
          default:
            v184 = *((_DWORD *)a2 + 18);
            goto LABEL_370;
        }
        LOBYTE(v184) = v184 & 0xF;
LABEL_370:
        if (v184 - 4 < 6
          || ((v337 = v184 > 0x19u, v338 = (1 << v184) & 0x2A00000, !v337)
            ? (v339 = v338 == 0)
            : (v339 = 1),
              !v339))
        {
          v185 = *((unsigned int *)this + 107);
          if (v185 <= v174)
          {
            v424 = 0;
            v425 = 0;
            if ((_DWORD)v185)
            {
              v291 = (unsigned int *)*((_QWORD *)this + 52);
              v292 = 4 * v185;
              do
              {
                v293 = *v291;
                LODWORD(v462) = v293;
                if (v293 < v174)
                {
                  if (HIDWORD(v425) == (_DWORD)v425)
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v424, (unint64_t)&v462);
                  }
                  else
                  {
                    *((_DWORD *)v424 + HIDWORD(v425)) = v293;
                    ++HIDWORD(v425);
                  }
                }
                ++v291;
                v292 -= 4;
              }
              while (v292);
              v294 = v424;
              if (HIDWORD(v425))
              {
                v295 = v173 + 16;
                v296 = 4 * HIDWORD(v425);
                do
                {
                  v297 = *(unsigned int *)v294;
                  if ((v297 & 0x80000000) != 0)
                    v298 = COERCE__INT64((double)v297) + 0x2000000000000;
                  else
                    v298 = v297 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v298, v177, v178, v179, v180, v181, v182);
                  if ((*(_BYTE *)(v173 + 4) & 0xE) == 6)
                    v305 = *(_QWORD *)(v295 + 8 * v297) + 0x2000000000000;
                  else
                    v305 = *(_QWORD *)(v295 + 8 * v297);
                  JSC::DFG::Graph::freeze((uint64_t)this, v305, v299, v300, v301, v302, v303, v304);
                  v294 = (WTF *)((char *)v294 + 4);
                  v296 -= 4;
                }
                while (v296);
                v294 = v424;
              }
              if (v294)
              {
                v424 = 0;
                LODWORD(v425) = 0;
                WTF::fastFree((unint64_t)v294, v176, v177, v178, v179, v180, v181, v182);
              }
            }
          }
          else if ((_DWORD)v174)
          {
            v186 = 0;
            v187 = v173 + 16;
            do
            {
              if ((v186 & 0x80000000) != 0)
                v188 = COERCE__INT64((double)v186) + 0x2000000000000;
              else
                v188 = v186 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v188, v177, v178, v179, v180, v181, v182);
              if ((*(_BYTE *)(v173 + 4) & 0xE) == 6)
                v195 = *(_QWORD *)(v187 + 8 * v186) + 0x2000000000000;
              else
                v195 = *(_QWORD *)(v187 + 8 * v186);
              JSC::DFG::Graph::freeze((uint64_t)this, v195, v189, v190, v191, v192, v193, v194);
              ++v186;
            }
            while (v174 != v186);
          }
        }
        return;
      case 0x10D:
        v211 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v211)
          goto LABEL_219;
        if ((_DWORD)v211 != 1 && (_DWORD)v211 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19852CCE8);
        }
        goto LABEL_565;
      case 0x10F:
        v346 = *((_QWORD *)a2 + 3);
        if ((v346 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v346 & 0xFC000000000000) == 0x54000000000000)
          goto LABEL_565;
        goto LABEL_219;
      case 0x114:
        if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
          goto LABEL_219;
        v241 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v242 = 2;
        while (1)
        {
          v243 = v242 & 3;
          if (v243 == 1)
            break;
          if (v243 == 2)
            v244 = 1;
          else
            v244 = 3;
          if (v243 == 3)
            v242 = 1;
          else
            v242 = v244;
        }
        return;
      case 0x115:
        v250 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v250 == 352)
        {
LABEL_746:
          return;
        }
        if (v250 != 349)
          goto LABEL_219;
        goto LABEL_523;
      case 0x123:
        v21 = &v440;
        goto LABEL_526;
      case 0x126:
        return;
      case 0x136:
        v21 = &v454;
        goto LABEL_526;
      case 0x13E:
      case 0x145:
        v115 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v115 > 0x34)
          goto LABEL_224;
        if (((1 << v115) & 0x12026000400002) != 0)
          return;
        if (((1 << v115) & 0x101) != 0)
          goto LABEL_219;
        if (v115 != 24)
        {
LABEL_224:
          __break(0xC471u);
          JUMPOUT(0x19852C350);
        }
        goto LABEL_606;
      case 0x13F:
        v328 = *((_QWORD *)a2 + 3);
LABEL_696:
        v146 = v328 & 0xFC000000000000;
        v147 = 0x54000000000000;
LABEL_308:
        if (v146 != v147)
          goto LABEL_219;
        return;
      case 0x144:
      case 0x16B:
LABEL_565:
        v270 = (_QWORD *)*a3;
        v271 = 16407;
        goto LABEL_566;
      case 0x146:
        v350 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v350 == 28)
          return;
        if ((_DWORD)v350)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19852E3A4);
        }
        goto LABEL_219;
      case 0x157:
        v35 = *((unsigned int *)a2 + 18);
        v36 = 33;
LABEL_50:
        v37 = v36 | (v35 << 15);
        goto LABEL_51;
      case 0x158:
        v54 = *((unsigned int *)a2 + 18);
        v55 = 33;
LABEL_103:
        v56 = v55 | (v54 << 15);
        goto LABEL_104;
      case 0x159:
        v104 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
        if ((v104 & 1) != 0)
          v105 = (v104 >> 1) & 3;
        else
          v105 = *(unsigned __int8 *)(v104 + 4);
        if (v105 != 2)
        v106 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v107 = 2;
        while (1)
        {
          v108 = v107 & 3;
          if (v108 == 1)
            break;
          if (v108 == 2)
            v109 = 1;
          else
            v109 = 3;
          if (v108 == 3)
            v107 = 1;
          else
            v107 = v109;
        }
        return;
      case 0x15A:
        v270 = (_QWORD *)*a3;
        v271 = 16385;
LABEL_566:
        goto LABEL_567;
      case 0x15B:
      case 0x161:
      case 0x162:
        v207 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v208 = 2;
        while (1)
        {
          v209 = v208 & 3;
          if (v209 == 1)
            break;
          if (v209 == 2)
            v210 = 1;
          else
            v210 = 3;
          if (v209 == 3)
            v208 = 1;
          else
            v208 = v210;
        }
        return;
      case 0x15C:
      case 0x163:
        if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
        v212 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v213 = 2;
        while (1)
        {
          v214 = v213 & 3;
          if (v214 == 1)
            break;
          if (v214 == 2)
            v215 = 1;
          else
            v215 = 3;
          if (v214 == 3)
            v213 = 1;
          else
            v213 = v215;
        }
        return;
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
        v216 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v217 = 2;
        while (1)
        {
          v218 = v217 & 3;
          if (v218 == 1)
            break;
          if (v218 == 2)
            v219 = 1;
          else
            v219 = 3;
          if (v218 == 3)
            v217 = 1;
          else
            v217 = v219;
        }
        return;
      case 0x164:
        v21 = &v427;
        goto LABEL_526;
      case 0x165:
        v22 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v21 = &v426;
        goto LABEL_527;
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
        v75 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
        if ((v75 & 1) != 0)
          v76 = (v75 >> 1) & 3;
        else
          v76 = *(unsigned __int8 *)(v75 + 4);
        if (v76 != 2)
        {
          v228 = 2;
          while (1)
          {
            v229 = v228 & 3;
            if (v229 == 1)
              break;
            if (v229 == 2)
              v230 = 1;
            else
              v230 = 3;
            if (v229 == 3)
              v228 = 1;
            else
              v228 = v230;
          }
        }
        v77 = *a3;
        v424 = (WTF *)16407;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v78 = 2;
        while (1)
        {
          v79 = v78 & 3;
          if (v79 == 1)
            break;
          if (v79 == 2)
            v80 = 1;
          else
            v80 = 3;
          if (v79 == 3)
            v78 = 1;
          else
            v78 = v80;
        }
        return;
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x176:
      case 0x177:
        v71 = *a3;
        v424 = (WTF *)16385;
        v462 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        v72 = 2;
        while (1)
        {
          v73 = v72 & 3;
          if (v73 == 1)
            break;
          if (v73 == 2)
            v74 = 1;
          else
            v74 = 3;
          if (v73 == 3)
            v72 = 1;
          else
            v72 = v74;
        }
        return;
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17D:
        return;
      case 0x17E:
        v347 = (_QWORD *)*a3;
        v348 = 16392;
        goto LABEL_775;
      case 0x17F:
        v347 = (_QWORD *)*a3;
        v348 = 16387;
LABEL_775:
        return;
      case 0x180:
      case 0x182:
        if (v14 != 386)
          goto LABEL_655;
        v155 = *((unsigned __int8 *)a2 + 80);
        if (v155 == 2)
        {
          if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19852EE5CLL);
          }
          if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) != 0x20000000000000)
            goto LABEL_219;
          v156 = *a3;
          v424 = (WTF *)16396;
          v462 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
          v120 = *a3;
          v121 = 16399;
LABEL_234:
          v424 = (WTF *)v121;
          v462 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
LABEL_236:
          v24 = *a3;
          v25 = 16394;
LABEL_237:
          v424 = (WTF *)v25;
          v462 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
        }
        else
        {
          if (v155 != 1)
            goto LABEL_219;
LABEL_655:
          v314 = *a3;
          v424 = (WTF *)16396;
          v462 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
          v315 = *((unsigned __int16 *)a2 + 9);
          if (v315 == 146)
            v316 = *((_DWORD *)a2 + 20);
          else
            v316 = *((_DWORD *)a2 + 18);
          if (v315 == 386)
            v317 = 11;
          else
            v317 = 12;
          if (v316 == 9)
          {
            if (BYTE2(v316) > 1u)
              goto LABEL_219;
            v318 = *a3;
            v424 = (WTF *)16388;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v319 = *a3;
            v424 = (WTF *)16402;
            v462 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v424, (unint64_t *)&v462))
            v320 = *((_DWORD *)a2 + 6);
            v321 = *((_DWORD *)this + 41);
            if (v321 <= v320)
            {
              __break(0xC471u);
              JUMPOUT(0x19852EE6CLL);
            }
            if (v321 <= v320 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852DC18);
            }
          }
          else
          {
            switch((char)v316)
            {
              case 3:
                goto LABEL_606;
              case 7:
                if (BYTE2(v316) > 1u)
                  goto LABEL_219;
                v381 = *((_QWORD *)a2 + 3);
                v382 = *((_DWORD *)this + 41);
                if (v382 <= v381)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852F050);
                }
                if (v382 <= (int)v381 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852F058);
                }
                JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v459, v317, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
                JSC::DFG::LazyNode::LazyNode(&v458, a2);
                if (v459 == 36 && (v460 & 0x3FFF) != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852E988);
                }
                return;
              case 8:
                if (BYTE2(v316) > 1u)
                  goto LABEL_219;
                v334 = *((_QWORD *)a2 + 3);
                v335 = *((_DWORD *)this + 41);
                if (v335 <= v334)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852EEFCLL);
                }
                if (v335 <= (int)v334 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852EF04);
                }
                JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v456, v317, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
                JSC::DFG::LazyNode::LazyNode(&v455, a2);
                if (v456 == 36 && (v457 & 0x3FFF) != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852DF04);
                }
                return;
              case 10:
                if (BYTE2(v316) > 1u)
                  goto LABEL_219;
LABEL_727:
                break;
              default:
                goto LABEL_219;
            }
          }
        }
        return;
      case 0x18A:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v37 = 16411;
        else
          v37 = 16412;
LABEL_51:
        return;
      case 0x18B:
        v24 = *a3;
        v25 = 16411;
        goto LABEL_237;
      case 0x18C:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v307 = 16413;
        else
          v307 = 16414;
        v21 = &v423;
        goto LABEL_526;
      case 0x18D:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v306 = 16413;
        else
          v306 = 16414;
        v21 = &v422;
        goto LABEL_526;
      case 0x18E:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v323 = 16413;
        else
          v323 = 16414;
        v21 = &v421;
        goto LABEL_526;
      case 0x18F:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v308 = 16411;
        else
          v308 = 16412;
        v21 = &v420;
        goto LABEL_526;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v360 = 16412;
        else
          v360 = 16411;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v418, 48, v360, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        JSC::DFG::LazyNode::LazyNode(&v417, a2);
        if (v418 == 36 && (v419 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852E5B4);
        }
        return;
      case 0x191:
        if (*((_DWORD *)a2 + 18))
          v352 = 16412;
        else
          v352 = 16411;
        v21 = &v416;
        goto LABEL_526;
      case 0x192:
        if (*((_DWORD *)a2 + 18))
          v349 = 16412;
        else
          v349 = 16411;
        v21 = &v415;
        goto LABEL_526;
      case 0x193:
        if (*((_DWORD *)a2 + 18))
          v351 = 16412;
        else
          v351 = 16411;
        v21 = &v414;
        goto LABEL_526;
      case 0x194:
        v238 = 2;
        while (1)
        {
          v239 = v238 & 3;
          if (v239 == 1)
            break;
          if (v239 == 2)
            v240 = 1;
          else
            v240 = 3;
          if (v239 == 3)
            v238 = 1;
          else
            v238 = v240;
        }
        return;
      case 0x195:
        v157 = *((_DWORD *)a2 + 6);
        v158 = *((_DWORD *)this + 41);
        if (v158 <= v157)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE4CLL);
        }
        if (v158 <= v157 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE54);
        }
        v159 = 2;
        while (1)
        {
          v160 = v159 & 3;
          if (v160 == 1)
            break;
          if (v160 == 2)
            v161 = 1;
          else
            v161 = 3;
          if (v160 == 3)
            v159 = 1;
          else
            v159 = v161;
        }
        return;
      case 0x196:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v56 = 16411;
        else
          v56 = 16412;
        goto LABEL_104;
      case 0x197:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000)
          v272 = 16415;
        else
          v272 = 16416;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v412, 55, v272, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        JSC::DFG::LazyNode::LazyNode(&v411, a2);
        if (v412 == 36 && (v413 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852D420);
        }
        return;
      case 0x198:
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
        {
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v409, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        JSC::DFG::LazyNode::LazyNode(&v408, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
        if (v409 == 36 && (v410 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852E52CLL);
        }
        return;
      case 0x199:
        v263 = *((_QWORD *)a2 + 3);
        v264 = *((_DWORD *)this + 41);
        if (v264 <= v263)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE74);
        }
        v265 = (v263 + 1);
        if (v264 <= v265)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE7CLL);
        }
        v266 = (v263 + 2);
        if (v264 <= v266)
        {
          __break(0xC471u);
          JUMPOUT(0x19852EE84);
        }
        v267 = v263;
        v268 = *((_QWORD *)this + 19);
        if ((*(_QWORD *)(v268 + 8 * v265) & 0xFC000000000000) != 0x2C000000000000)
        {
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v406, 55, 16415, *(_QWORD *)(v268 + 8 * v267), *(_QWORD *)(v268 + 8 * v265), 0);
        JSC::DFG::LazyNode::LazyNode(&v405, (JSC::DFG::Node *)(*(_QWORD *)(v268 + 8 * v266) & 0xFF00FFFFFFFFFFFFLL));
        if (v406 == 36 && (v407 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852D250);
        }
        return;
      case 0x19E:
        goto LABEL_465;
      case 0x1A0:
        v251 = *(unsigned int **)(*((_QWORD *)a2 + 9) + 16);
        if (!v251)
          goto LABEL_219;
        v252 = v251[5];
        v253 = v251[6];
        v254 = (unsigned __int16)v251[5];
        v255 = (unsigned __int16)v251[6];
        v256 = v251[7];
        if (v254 != WORD1(v252))
        {
          v257 = WORD1(v252) == 0xFFFF && v254 == 0;
          v258 = (v252 << 15) | 0x25;
          if (v257)
            v259 = 16385;
          else
            v259 = v258;
        }
        if (v255 != WORD1(v253))
        {
          if (WORD1(v253) == 0xFFFF && v255 == 0)
            v261 = 16387;
          else
            v261 = (v253 << 15) | 0x25;
        }
        if ((_WORD)v256)
        {
          if (v256 >= 0xFFFF0000 && (unsigned __int16)v256 == 0xFFFF)
            return;
        }
        else if (v256 > 0xFFFEFFFF)
        {
          return;
        }
        v21 = &v439;
        goto LABEL_526;
      case 0x1A1:
        v353 = *((_QWORD *)a2 + 9);
        v354 = *(unsigned int *)(v353 + 44);
        v355 = *(unsigned int *)(v353 + 48);
        v356 = (unsigned __int16)*(_DWORD *)(v353 + 44);
        if (v356 != WORD1(v354))
        {
          v357 = WORD1(v354) == 0xFFFF && v356 == 0;
          v358 = (v354 << 15) | 0x25;
          if (v357)
            v359 = 16385;
          else
            v359 = v358;
        }
        if ((unsigned __int16)v355 == WORD1(v355))
          return;
        if (!(_WORD)v355 && WORD1(v355) == 0xFFFF)
        {
        }
        else
        {
          v56 = (v355 << 15) | 0x25;
LABEL_104:
        }
        return;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          goto LABEL_741;
        v336 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v402, v336, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        JSC::DFG::LazyNode::LazyNode(&v401, a2);
        if (v402 == 36 && (v403 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19852E030);
        }
        return;
      case 0x1AD:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_741:
LABEL_693:
        return;
      case 0x1AE:
      case 0x1AF:
        v21 = &v404;
        goto LABEL_526;
      case 0x1B0:
        return;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x19852E46CLL);
      default:
        v424 = (WTF *)JSC::DFG::Graph::opName(v14);
        v425 = v383;
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v424, &v462);
        if (v462)
          v384 = (const char *)(v462 + 16);
        else
          v384 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:518:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:532:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v384);
        WTF::CString::~CString((WTF::CString *)&v462, v385, v386, v387, v388, v389, v390, v391);
        __break(0xC471u);
        JUMPOUT(0x19852EA28);
    }
  }
}

void JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t v8;

  v8 = a2;
  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    {
      return;
    }
    v4 = a2 >> 15;
    v5 = (unint64_t)a2 >> 15;
    v6 = (uint64_t **)a1[2];
    if (HIDWORD(v4) == 1)
    {
      if ((v5 & 0x80000000) == 0)
        goto LABEL_10;
      if (*(_DWORD *)(*a1 + 60))
      {
        if (~(_DWORD)v5 >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*a1 + 48) + 92))
          return;
        goto LABEL_10;
      }
    }
    else
    {
      if (HIDWORD(v4) || v5 < 5)
        goto LABEL_10;
      if (*(_DWORD *)(*a1 + 60))
      {
        if ((v4 - 5) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*a1 + 48) + 88))
          return;
LABEL_10:
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19852F9F4);
  }
  v7 = 16386;
  if (JSC::DFG::AbstractHeap::overlaps(&v8, &v7))
}

_QWORD *JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>> const&)::{lambda(void)#1} const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
}

_QWORD *JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>>::operator()(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19852FBF0);
    }
    v8 = a2 >> 15;
    v9 = (unint64_t)a2 >> 15;
    v10 = (uint64_t *)result[3];
    v12 = *v10;
    v11 = v10[1];
    v13 = (unint64_t)(a2 >> 15) >> 32;
    if ((_DWORD)v13 == 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        if (!*(_DWORD *)(*result + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x19852FC28);
        }
        if (~((unint64_t)a2 >> 15) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48)
                                                                                              + 92))
          return result;
LABEL_32:
        v14 = v8 & 0xFFFFFFFF00000000;
LABEL_33:
        if (*(unsigned __int16 *)(*(_QWORD *)v12 + 18) - 98 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19852FC20);
        }
        if (v14 == 0x200000000)
        {
          v16 = *(unsigned int *)(v11 + 16) + (uint64_t)(int)v8 + *(unsigned int *)(v11 + 20);
        }
        else
        {
          v15 = ((unint64_t)a2 >> 15);
          if ((a2 & 0x400000000000) != 0)
            v16 = (v15 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v11 + 16);
          else
            v16 = (int)v15 - 5;
        }
        *(_BYTE *)(*(_QWORD *)v11 + v16) = 0;
        return result;
      }
    }
    else if (!(_DWORD)v13 && v9 >= 5)
    {
      if (!*(_DWORD *)(*result + 60))
      {
LABEL_51:
        __break(0xC471u);
        JUMPOUT(0x19852FAB4);
      }
      if ((v8 - 5) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48) + 88))
        return result;
      goto LABEL_32;
    }
    v14 = v8 & 0xFFFFFFFF00000000;
    if ((v8 & 0xFFFFFFFF00000000) != 0x200000000 && v9 < 5)
      return result;
    goto LABEL_33;
  }
  if (a2 == 16386)
    goto LABEL_51;
  LOWORD(v2) = a2;
  while (1)
  {
    v3 = v2 & 0x3FFF;
    if (v3 == 1)
      break;
    if (v3 == 2)
      v4 = 16385;
    else
      v4 = 16387;
    if ((v2 & 0x4000) != 0)
      v2 = v4;
    else
      v2 = v3 | 0x4000u;
    if (v3 == 40)
      v2 = 16385;
    if (v3 == 3)
      v2 = 16385;
    if (v2 == 16386)
      goto LABEL_51;
  }
  LOWORD(v5) = 16386;
  while (1)
  {
    v6 = v5 & 0x3FFF;
    if (v6 == 1)
      return result;
    if (v6 == 2)
      v7 = 16385;
    else
      v7 = 16387;
    if (v6 == 3)
      v5 = 16385;
    else
      v5 = v7;
    if (v5 == a2)
      goto LABEL_51;
  }
}

void JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>::readTop(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  BOOL v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30[2];
  uint64_t ****v31[2];
  uint64_t v32;
  uint64_t v33;

  v1 = a1;
  v32 = a1;
  v33 = a1;
  v31[0] = (uint64_t ****)&v33;
  v31[1] = (uint64_t ****)&v32;
  v30[0] = (uint64_t *)a1;
  v30[1] = (uint64_t *)v31;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int16 *)(v2 + 18);
  if (v3 > 0x15A)
  {
    if (*(unsigned __int16 *)(v2 + 18) <= 0x162u)
    {
      if (v3 == 347 || (v3 - 353) < 2)
        goto LABEL_55;
      if (v3 != 348)
        goto LABEL_30;
    }
    else
    {
      if (v3 == 358)
      {
        v6 = (_QWORD *)(*(_QWORD *)v2 & 0xFFFFFFFF8);
        if ((*(_QWORD *)v2 & 1) != 0)
          v6 = (_QWORD *)*v6;
        v7 = *(_DWORD *)(v2 + 72);
        if (v6)
        {
          v29 = v6;
          v27 = (unsigned int *)*v6;
          if (v27 && *v27 > v7)
          {
            v28 = v7 + (HIDWORD(v29[3]) & 0xFFFFF | ((int)(v29[3] >> 28) >> 24 << 20)) + 5;
          }
          v8 = *(uint64_t ***)(v1 + 16);
          v9 = (HIDWORD(v29[3]) & 0xFFFFF | ((int)(v29[3] >> 28) >> 24 << 20)) + 4;
        }
        else
        {
          if (v7 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 28))
            return;
          v8 = *(uint64_t ***)(a1 + 16);
          v9 = v7 + 5;
        }
        return;
      }
      if (v3 == 372)
        goto LABEL_17;
      if (v3 != 355)
        goto LABEL_30;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16) & 0xFFFFFFFE) == 4)
      return;
LABEL_55:
    v18 = v3 - 245;
    v19 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
    if (v19 && (v3 - 96) >= 5 && (v3 - 371) > 1)
      goto LABEL_62;
    if (v3 <= 98)
    {
      if ((v3 - 96) >= 3)
        goto LABEL_96;
      v22 = (_QWORD *)(v2 + 24);
    }
    else
    {
      if ((v3 - 99) < 2)
      {
        v22 = (_QWORD *)(v2 + 32);
        goto LABEL_74;
      }
      v24 = v18 > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
      if (v24 && (v3 - 371) >= 2)
      {
LABEL_96:
        __break(0xC471u);
        JUMPOUT(0x19852FFB8);
      }
      v22 = (_QWORD *)(v2 + 40);
    }
LABEL_74:
    if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0)
    {
LABEL_62:
      v20 = *(_QWORD *)v2;
LABEL_63:
      v21 = (_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 1) != 0)
        v21 = (_QWORD *)*v21;
      if ((v3 & 0xFFFE) == 0x60)
        v17 = *(_DWORD *)(v2 + 72);
      else
        v17 = 0;
      a1 = v32;
      v16 = v21;
      goto LABEL_68;
    }
    if (v3 <= 98)
    {
      if ((v3 - 96) < 3)
      {
        v23 = (_QWORD *)(v2 + 24);
        goto LABEL_86;
      }
    }
    else
    {
      if ((v3 - 99) < 2)
      {
        v23 = (_QWORD *)(v2 + 32);
LABEL_86:
        v20 = *(_QWORD *)(*v23 & 0xFF00FFFFFFFFFFFFLL);
        goto LABEL_63;
      }
      if (v18 <= 7 && ((1 << (v3 + 11)) & 0xCF) != 0 || (v3 - 371) < 2)
      {
        v23 = (_QWORD *)(v2 + 40);
        goto LABEL_86;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198530028);
  }
  if (*(unsigned __int16 *)(v2 + 18) <= 0x106u)
  {
    if (*(unsigned __int16 *)(v2 + 18) <= 0xF5u)
    {
      if ((v3 - 96) < 2)
        goto LABEL_55;
      if (v3 != 100)
        goto LABEL_30;
    }
    else
    {
      if (v3 != 252 && v3 != 246 && v3 != 248)
        goto LABEL_30;
      v2 = *(_QWORD *)(v1 + 8);
      v3 = *(unsigned __int16 *)(v2 + 18);
    }
LABEL_17:
    v4 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
    if (v4 && (v3 - 96) >= 5 && (v3 - 371) > 1)
      goto LABEL_55;
    if (v3 <= 98)
    {
      if ((v3 - 96) >= 3)
        goto LABEL_105;
      v5 = (_QWORD *)(v2 + 24);
    }
    else
    {
      if ((v3 - 99) < 2)
      {
        v5 = (_QWORD *)(v2 + 32);
        goto LABEL_54;
      }
      v25 = (v3 - 245) > 7 || ((1 << (v3 + 11)) & 0xCF) == 0;
      if (v25 && (v3 - 371) >= 2)
      {
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x19853008CLL);
      }
      v5 = (_QWORD *)(v2 + 40);
    }
LABEL_54:
    if ((*v5 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (*(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v2) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 351
        || *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(*(JSC::DFG::Node **)(v1 + 8)) & 0xFF00FFFFFFFFFFFFLL)
                    + 0x12) == 350)
      {
        v26 = *(unsigned __int16 *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(*(JSC::DFG::Node **)(v1 + 8)) & 0xFF00FFFFFFFFFFFFLL)
                                  + 0x12);
        v2 = *(_QWORD *)JSC::DFG::Node::argumentsChild(*(JSC::DFG::Node **)(v1 + 8)) & 0xFF00FFFFFFFFFFFFLL;
        if (v26 != 351)
        {
          return;
        }
        goto LABEL_106;
      }
      v2 = *(_QWORD *)(v1 + 8);
      v3 = *(unsigned __int16 *)(v2 + 18);
    }
    goto LABEL_55;
  }
  if ((v3 - 275) < 2)
    goto LABEL_55;
  if (v3 != 277)
  {
    if (v3 == 263)
    {
LABEL_106:
      return;
    }
    goto LABEL_30;
  }
  v10 = *(_QWORD *)(v2 + 24) & 0xFF00FFFFFFFFFFFFLL;
  v11 = *(unsigned __int16 *)(v10 + 0x12);
  if (v11 <= 0x15B)
  {
    v12 = v11 - 278;
    v13 = v12 > 0xC;
    v14 = (1 << v12) & 0x15F1;
    if (!v13 && v14 != 0)
      goto LABEL_45;
    goto LABEL_30;
  }
  if (v11 == 355 || v11 - 348 < 4)
  {
LABEL_45:
    v16 = (_QWORD *)(*(_QWORD *)v10 & 0xFFFFFFFF8);
    if ((*(_QWORD *)v10 & 1) != 0)
      v16 = (_QWORD *)*v16;
    v17 = *(_DWORD *)(v10 + 72);
LABEL_68:
    return;
  }
  if (v11 != 352)
LABEL_30:
}

void JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>::readTop(void)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t ***a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  unsigned int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (*a1)[4];
  if ((*(_BYTE *)(v4[8] + 68) & 1) == 0)
  {
    v17 = *((unsigned int *)v4 + 7);
    if ((_DWORD)v17)
    {
      v18 = v17 - 1;
      do
      {
        v19 = v18;
        --v18;
      }
      while (v19);
    }
  }
  v5 = *a2;
  v6 = (_DWORD *)(*a2 & 0xFFFFFFFF8);
  if ((v5 & 1) != 0)
    v6 = *(_DWORD **)v6;
  while (v6)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 64) + 68) & 1) == 0)
    {
      if (*(_QWORD *)v6)
      {
        v14 = **(_DWORD **)v6;
        if (v14)
        {
          v15 = v14 + 4;
          do
          {
            v16 = v15
                + (HIDWORD(*((_QWORD *)v6 + 3)) & 0xFFFFF | ((int)(*((_QWORD *)v6 + 3) >> 28) >> 24 << 20));
            --v15;
          }
          while (v15 != 4);
        }
      }
    }
    v7 = *((_QWORD *)v6 + 3);
    if ((v6[8] & 1) != 0)
    {
      v20 = (HIDWORD(v7) & 0xFFFFF | ((int)(v7 >> 28) >> 24 << 20)) + 3;
      v7 = *((_QWORD *)v6 + 3);
    }
    if ((v7 >> 60) - 3 <= 2)
    {
      v21 = (HIDWORD(v7) & 0xFFFFF | ((int)(v7 >> 28) >> 24 << 20)) + 4;
    }
    do
    {
      v8 = *((_QWORD *)v6 + 2);
      v9 = *((_QWORD *)v6 + 3) >> 60;
      v10 = (_DWORD **)(v8 & 0xFFFFFFFF8);
      v6 = (_DWORD *)(v8 & 0xFFFFFFFF8);
      if ((v8 & 1) != 0)
        v6 = *v10;
      v11 = (v9 < 0xC) & (0x824u >> v9);
      if (v6)
        v12 = v11;
      else
        v12 = 0;
    }
    while ((v12 & 1) != 0);
    if ((v8 & 1) != 0)
      v13 = v11;
    else
      v13 = 1;
    if (v11)
      v6 = 0;
    else
      v6 = v10;
    if ((v13 & 1) == 0)
      v6 = *v10;
  }
}

void JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>::readTop(void)::{lambda(JSC::DFG::Node *)#3}::operator()(uint64_t **a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_DWORD *)(a2 + 32);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *(uint64_t **)(a2 + 72);
    do
    {
      v8 = (unint64_t *)(2 * *v7);
      if (*v7 < 0)
        v9 = 63;
      else
        v9 = *v8;
      if (v9 > v5)
      {
        v10 = (uint64_t *)(v8 + 1);
        v11 = *v7 >= 0 ? v10 : v7;
        if (((*(unint64_t *)((char *)v11 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v12 = *v6;
          v13 = v5 + *(_QWORD *)(a2 + 24);
          if (*(_DWORD *)(*v6 + 164) <= v13)
          {
            __break(0xC471u);
            return;
          }
          if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(v12 + 152) + 8 * v13) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          {
            v2 = *(_DWORD *)(a2 + 32);
          }
        }
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

void JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>::readTop(void)::{lambda(JSC::DFG::Node *)#2}::operator()(uint64_t *****a1, uint64_t *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;

  v2 = a2[3] & 0xFF00FFFFFFFFFFFFLL;
  v3 = *(unsigned __int16 *)(v2 + 0x12);
  if (v3 <= 0x15B)
  {
    v4 = v3 - 278;
    v5 = v4 > 0xC;
    v6 = (1 << v4) & 0x15F1;
    if (!v5 && v6 != 0)
      goto LABEL_6;
LABEL_12:
    return;
  }
  if (v3 != 355 && v3 - 348 >= 4)
  {
    if (v3 == 352)
      return;
    goto LABEL_12;
  }
LABEL_6:
  v8 = (_QWORD *)(*(_QWORD *)v2 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v2 & 1) != 0)
    v8 = (_QWORD *)*v8;
}

void JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#6},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#3}>::readTop(void)::{lambda(JSC::InlineCallFrame *,unsigned int)#1}::operator()(uint64_t ***a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = a3;
  if (a2)
  {
    while (*a2 && *(_DWORD *)*a2 > v3)
    {
      v6 = v3 + (HIDWORD(a2[3]) & 0xFFFFF | ((int)(a2[3] >> 28) >> 24 << 20)) + 5;
      ++v3;
    }
    v7 = a2[3];
    if ((v7 >> 60) - 3 < 3)
    {
      v9 = (HIDWORD(v7) & 0xFFFFF | ((int)(v7 >> 28) >> 24 << 20)) + 4;
    }
  }
  else if (*((_DWORD *)(*a1)[4] + 7) > a3)
  {
    v8 = a3;
    do
    {
      ++v8;
    }
    while (v8 < *((unsigned int *)(*a1)[4] + 7));
  }
}

void JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#5}::operator()(uint64_t **a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;

  v3 = a2 & 0xFFFFFFFF00000000;
  if ((a2 & 0xFFFFFFFF00000000) != 0x200000000 && a2 < 5)
    return;
  v6 = a1[3];
  v7 = a1[1];
  if (v3 == 0x200000000)
  {
    v12 = *((unsigned int *)v7 + 4) + (uint64_t)(int)a2 + *((unsigned int *)v7 + 5);
    v9 = *v7;
    v10 = *(unsigned __int8 *)(*v7 + v12);
    if (*(_BYTE *)(*v7 + v12))
      v35 = v10 == 7;
    else
      v35 = 1;
    if (!v35)
    {
      v13 = a1[2];
      v14 = (int)a2 + (unint64_t)*((unsigned int *)v13 + 5) + *((unsigned int *)v13 + 4);
      goto LABEL_20;
    }
LABEL_16:
    *(_BYTE *)(v9 + v12) = 0;
    return;
  }
  if ((a2 & 0x80000000) != 0)
    v8 = (a2 ^ 0xFFFFFFFFLL) + *((unsigned int *)v7 + 4);
  else
    v8 = (int)a2 - 5;
  v9 = *v7;
  v10 = *(unsigned __int8 *)(*v7 + v8);
  if (*(_BYTE *)(*v7 + v8))
    v11 = v10 == 7;
  else
    v11 = 1;
  if (v11)
  {
    if ((a2 & 0x80000000) != 0)
      v12 = (a2 ^ 0xFFFFFFFFLL) + *((unsigned int *)v7 + 4);
    else
      v12 = (int)a2 - 5;
    goto LABEL_16;
  }
  v13 = a1[2];
  if ((a2 & 0x80000000) != 0)
    v14 = (a2 ^ 0xFFFFFFFFLL) + *((unsigned int *)v13 + 4);
  else
    v14 = (int)a2 - 5;
LABEL_20:
  v15 = *(_QWORD *)(*v13 + 8 * v14);
  if (!v15)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v6[4], (JSC::DFG::Node *)**a1, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x1F9, "auto JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()::(anonymous class)::operator()(Operand) const", "incoming");
    __break(0xC471u);
    JUMPOUT(0x198530940);
  }
  v16 = **a1;
  if (*(_WORD *)(v16 + 18) == 22)
  {
    JSC::DFG::NodeOrigin::withExitOK(**a1, 0, (uint64_t)&v60);
    v17 = v60;
  }
  else
  {
    v17 = *(_QWORD *)v16;
    if ((*(_QWORD *)v16 & 1) != 0)
    {
      v42 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      if ((v17 & 2) != 0
        || ((v43 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
          ? (v44 = (_DWORD)v43 == -1)
          : (v44 = 1),
            v44))
      {
        v45 = 2;
      }
      else if (v43 >> 28)
      {
        v55 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v55 = v42;
        *(_DWORD *)(v55 + 8) = v43;
        v45 = 1;
        v42 = v55;
      }
      else
      {
        v45 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
        v42 = v43 << 36;
      }
      v17 = v42 | v45;
    }
    v60 = v17;
    v18 = *(_QWORD *)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v46 = v17;
      v47 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v48 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
          ? (v49 = (_DWORD)v48 == -1)
          : (v49 = 1),
            v49))
      {
        v50 = 2;
      }
      else if (v48 >> 28)
      {
        v56 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v56 = v47;
        *(_DWORD *)(v56 + 8) = v48;
        v50 = 1;
        v47 = v56;
      }
      else
      {
        v50 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v47 = v48 << 36;
      }
      v18 = v47 | v50;
      v17 = v46;
    }
    v61 = v18;
    v62 = *(_WORD *)(v16 + 16);
  }
  v19 = (uint64_t)a1[4];
  v20 = *(unsigned int *)a1[5];
  if ((v17 & 1) != 0)
  {
    v36 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || (v37 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v37 == 0x3FFFFFFF)
      || (_DWORD)v37 == -1)
    {
      v38 = 2;
    }
    else
    {
      v51 = v37;
      if (v37 >> 28)
      {
        v53 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v53 = v36;
        *(_DWORD *)(v53 + 8) = v51;
        v38 = 1;
        v36 = v53;
      }
      else
      {
        v38 = v36;
        v36 = v51 << 36;
      }
    }
    v17 = v36 | v38;
  }
  v57 = v17;
  v21 = v61;
  if ((v61 & 1) != 0)
  {
    v39 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
    if ((v61 & 2) != 0 || (v40 = *(_DWORD *)((v61 & 0xFFFFFFFF8) + 8), v40 == 0x3FFFFFFF) || v40 == -1)
    {
      v41 = 2;
    }
    else
    {
      v52 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8);
      if (v40 >> 28)
      {
        v54 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v54 = v39;
        *(_DWORD *)(v54 + 8) = v52;
        v41 = 1;
        v39 = v54;
      }
      else
      {
        v41 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        v39 = v52 << 36;
      }
    }
    v21 = v39 | v41;
  }
  v58 = v21;
  v59 = v62;
  v22 = v6[4];
  v23 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v23 = a2;
  *(_DWORD *)(v23 + 8) = 0x3FFFFFFF;
  *(_BYTE *)(v23 + 12) = v10;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 592);
  *(_QWORD *)(v22 + 592) = v23;
  if ((v10 - 1) >= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x198530960);
  }
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v19, v20, 0, 0x11u, (uint64_t)&v57, v23, qword_1991564A0[(char)(v10 - 1)] | v15 & 0xFF00FFFFFFFFFFFFLL);
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  v31 = a1[1];
  if (v3 == 0x200000000)
  {
    v33 = *((unsigned int *)v31 + 5);
    v32 = *((unsigned int *)v31 + 4) + (uint64_t)(int)a2;
    goto LABEL_33;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v32 = a2 ^ 0xFFFFFFFFLL;
    v33 = *((unsigned int *)v31 + 4);
LABEL_33:
    v34 = v32 + v33;
    goto LABEL_34;
  }
  v34 = (int)a2 - 5;
LABEL_34:
  *(_BYTE *)(*v31 + v34) = 0;
  if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v61 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v60 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
}

void JSC::DFG::SSAConversionPhase::run(JSC::DFG::SSAConversionPhase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::DFG::InsertionSet *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  JSC::DFG::SSAConversionPhase *v89;
  void *v90;
  WTF **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  WTF *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  WTF *v118;
  WTF **v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  WTF *v127;
  int v128;
  _QWORD *v129;
  unint64_t v130;
  _QWORD *v131;
  unsigned int v132;
  unint64_t StatusReg;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  WTF *v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t *casual;
  unsigned int v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t *v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  WTF *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  BOOL v210;
  JSC::DFG::InsertionSet *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unsigned int v238;
  uint64_t v239;
  BOOL v240;
  unint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const void *v253;
  unint64_t v254;
  WTF *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  size_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  int v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  BOOL v297;
  uint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  WTF *v303;
  WTF *v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int *v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  unint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  unint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  unint64_t *v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  int v360;
  int v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  unint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  JSC::DFG::Graph *v393;
  JSC::DFG::Node *v394;
  _QWORD *v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  WTF *v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  void *v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t v469;
  _QWORD *v471;
  _QWORD *v472;
  uint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v476;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  unsigned int v489;
  unsigned int v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *v519;
  _QWORD *v520;
  uint64_t v521;
  _QWORD *v522;
  _QWORD *v523;
  uint64_t v524;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  int *v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  int *v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  const void *v550;
  void *v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  JSC::DFG::BasicBlock::SSAData *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  JSC::DFG::BasicBlock::SSAData *v573;
  unint64_t v574;
  void *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int *v592;
  unsigned int *v593;
  uint64_t v594;
  unsigned int *v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  unsigned int v602;
  uint64_t *v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unsigned int v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  unsigned int *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  BOOL v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  BOOL v644;
  uint64_t v645;
  __int128 *v646;
  unsigned int v647;
  uint64_t v648;
  unint64_t *v649;
  uint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  BOOL v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  BOOL v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  BOOL v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  BOOL v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  BOOL v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  BOOL v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  BOOL v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  BOOL v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  BOOL v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  BOOL v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  BOOL v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  BOOL v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  BOOL v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  BOOL v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  BOOL v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  BOOL v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  BOOL v731;
  uint64_t v732;
  uint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  void *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  void *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  void *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  void *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _DWORD *v795;
  uint64_t v796;
  unint64_t v797;
  unsigned int *v798;
  int v799;
  uint64_t v800;
  int v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  int v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  int v832;
  int v833;
  char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  int v838;
  int v839;
  WTF *v840;
  size_t v841;
  size_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  _QWORD *v856;
  uint64_t *v857;
  uint64_t v858;
  JSC::DFG::InsertionSet *v859;
  JSC::DFG::InsertionSet *v860;
  JSC::DFG::InsertionSet *v861;
  WTF *v862;
  WTF *v863;
  JSC::DFG::SSAConversionPhase *v864;
  uint64_t v865;
  uint64_t v866;
  __int16 v867;
  uint64_t v868;
  uint64_t v869;
  __int16 v870;
  uint64_t v871;
  uint64_t v872;
  __int16 v873;
  uint64_t v874;
  uint64_t v875;
  char v876;
  char v877;
  uint64_t v878;
  uint64_t v879;
  char v880;
  char v881;
  uint64_t v882;
  uint64_t v883;
  __int16 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  uint64_t v888;
  JSC::DFG *v889;
  _BYTE v890[24];
  uint64_t v891;
  uint64_t v892;
  WTF *v893[2];
  _QWORD v894[17];
  uint64_t v895;
  uint64_t v896;
  __int16 v897;
  uint64_t v898;
  uint64_t v899;
  __int16 v900;
  unsigned int *v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  _QWORD *v907;
  uint64_t v908;
  uint64_t v909;
  char v910;
  char v911;

  v9 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v9 + 944) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198533890);
  }
  if (*(_BYTE *)(v9 + 962))
  {
    __break(0xC471u);
    JUMPOUT(0x1985338B0);
  }
  *(_BYTE *)(v9 + 962) = 1;
  v10 = *(unsigned int *)(v9 + 60);
  if ((_DWORD)v10)
  {
    do
    {
      if (*(_DWORD *)(v9 + 60) <= --v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1985344B8);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v10);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 + 36);
        if (v12)
        {
          v13 = v12 - 1;
          v14 = 8 * v13;
          do
          {
            if (*(_DWORD *)(v11 + 36) <= v13)
            {
              __break(0xC471u);
              JUMPOUT(0x198534470);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + v14) + 88) = 0;
            v14 -= 8;
            --v13;
          }
          while (v13 != -1);
        }
        v15 = *(_DWORD *)(v11 + 220);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = 8 * v16;
          do
          {
            if (*(_DWORD *)(v11 + 220) <= v16)
            {
              __break(0xC471u);
              JUMPOUT(0x198534350);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 208) + v17) + 88) = 0;
            v17 -= 8;
            --v16;
          }
          while (v16 != -1);
        }
      }
    }
    while ((_DWORD)v10);
    v9 = *((_QWORD *)this + 4);
  }
  JSC::DFG::Graph::clearCPSCFGData((JSC::DFG::Graph *)v9, a2, a3, a4, a5, a6, a7, a8);
  v901 = 0;
  v864 = this;
  v25 = *((_QWORD *)this + 4);
  v26 = *(unsigned int *)(v25 + 140);
  *(_DWORD *)(v25 + 864) = v26;
  v27 = *(unsigned int *)(v25 + 460);
  if (v27 >= v26)
  {
    if ((_DWORD)v27 != (_DWORD)v26)
    {
      v790 = *(_QWORD *)(v25 + 448) + 16 * v26;
      v791 = 16 * v27 - 16 * v26;
      do
      {
        v792 = *(_QWORD *)v790;
        if (*(_QWORD *)v790)
        {
          *(_QWORD *)v790 = 0;
          *(_DWORD *)(v790 + 8) = 0;
          WTF::fastFree(v792, v18, v19, v20, v21, v22, v23, v24);
        }
        v790 += 16;
        v791 -= 16;
      }
      while (v791);
    }
  }
  else
  {
    v28 = *(unsigned int *)(v25 + 456);
    if (v28 < v26)
    {
      v29 = v28 + (v28 >> 2);
      if (v29 >= 0x10)
        v30 = v29 + 1;
      else
        v30 = 16;
      if (v30 <= v26)
        v31 = v26;
      else
        v31 = v30;
      if (v31 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198534500);
      }
      v32 = *(_QWORD *)(v25 + 448);
      v33 = WTF::fastMalloc((WTF *)(16 * v31));
      *(_DWORD *)(v25 + 456) = v31;
      *(_QWORD *)(v25 + 448) = v33;
      if ((_DWORD)v27)
      {
        v793 = v33;
        v794 = 16 * v27;
        v795 = (_DWORD *)(v32 + 8);
        do
        {
          *(_QWORD *)v793 = 0;
          *(_QWORD *)(v793 + 8) = 0;
          v796 = *((_QWORD *)v795 - 1);
          *((_QWORD *)v795 - 1) = 0;
          *(_QWORD *)v793 = v796;
          LODWORD(v796) = *v795;
          *v795 = 0;
          *(_DWORD *)(v793 + 8) = v796;
          LODWORD(v796) = v795[1];
          v795[1] = 0;
          *(_DWORD *)(v793 + 12) = v796;
          v797 = *((_QWORD *)v795 - 1);
          if (v797)
          {
            *((_QWORD *)v795 - 1) = 0;
            *v795 = 0;
            WTF::fastFree(v797, v34, v35, v36, v37, v38, v23, v24);
          }
          v795 += 4;
          v793 += 16;
          v794 -= 16;
        }
        while (v794);
      }
      if (v32)
      {
        if (*(_QWORD *)(v25 + 448) == v32)
        {
          *(_QWORD *)(v25 + 448) = 0;
          *(_DWORD *)(v25 + 456) = 0;
        }
        WTF::fastFree(v32, v34, v35, v36, v37, v38, v23, v24);
      }
    }
    v39 = *(_QWORD *)(v25 + 448);
    if (v39)
    {
      v40 = *(unsigned int *)(v25 + 460);
      if ((_DWORD)v40 != (_DWORD)v26)
        bzero((void *)(v39 + 16 * v40), (16 * v26 - 16 * v40) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *(_DWORD *)(v25 + 460) = v26;
  v41 = *((_QWORD *)v864 + 4);
  if (*(_DWORD *)(v41 + 864))
  {
    v42 = 0;
    v43 = (JSC::DFG::SSAConversionPhase *)((char *)v864 + 72);
    while (1)
    {
      if (v42 >= *(unsigned int *)(v41 + 140))
      {
        __break(0xC471u);
        JUMPOUT(0x198534508);
      }
      v44 = *(_QWORD *)(*(_QWORD *)(v41 + 128) + 8 * v42);
      v45 = (uint64_t)v901;
      if (v901
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DFG::BasicBlock *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)&v901),
            (v45 = (uint64_t)v901) != 0))
      {
        v46 = *(_DWORD *)(v45 - 8);
      }
      else
      {
        v46 = 0;
      }
      v47 = 9 * ((v42 + ~((_DWORD)v42 << 15)) ^ ((v42 + ~((_DWORD)v42 << 15)) >> 10));
      v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
      v49 = v46 & (v48 ^ HIWORD(v48));
      v50 = (unsigned int *)(v45 + 16 * v49);
      v51 = *v50;
      if ((_DWORD)v51 != -1)
      {
        v798 = 0;
        v799 = 1;
        while (v42 != v51)
        {
          if (v51 == 4294967294)
            v798 = v50;
          v49 = (v49 + v799) & v46;
          v50 = (unsigned int *)(v45 + 16 * v49);
          v51 = *v50;
          ++v799;
          if ((_DWORD)v51 == -1)
          {
            if (v798)
            {
              *v798 = -1;
              *((_QWORD *)v798 + 1) = 0;
              --*(v901 - 4);
              v50 = v798;
            }
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
LABEL_37:
      *v50 = v42;
      *((_QWORD *)v50 + 1) = v44;
      v52 = (uint64_t)v901;
      if (v901)
        v53 = *(v901 - 3) + 1;
      else
        v53 = 1;
      *(v901 - 3) = v53;
      v54 = (*(_DWORD *)(v52 - 16) + v53);
      v55 = *(unsigned int *)(v52 - 4);
      if (v55 > 0x400)
      {
        if (v55 <= 2 * v54)
LABEL_757:
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DFG::BasicBlock *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)&v901);
      }
      else if (3 * v55 <= 4 * v54)
      {
        goto LABEL_757;
      }
LABEL_41:
      if (!*(_DWORD *)(v44 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x198534510);
      }
      v56 = *(uint64_t ***)(v44 + 208);
      v57 = *v56;
      v58 = **v56;
      if ((v58 & 1) != 0)
      {
        v709 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
        if ((v58 & 2) != 0
          || ((v710 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v710 != 0x3FFFFFFF)
            ? (v711 = (_DWORD)v710 == -1)
            : (v711 = 1),
              v711))
        {
          v712 = 2;
        }
        else if (v710 >> 28)
        {
          v816 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v816 = v709;
          *(_DWORD *)(v816 + 8) = v710;
          v712 = 1;
          v709 = v816;
        }
        else
        {
          v712 = v709;
          v709 = v710 << 36;
        }
        v58 = v709 | v712;
      }
      v59 = v57[1];
      if ((v59 & 1) != 0)
      {
        v713 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0
          || ((v714 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v714 != 0x3FFFFFFF)
            ? (v715 = (_DWORD)v714 == -1)
            : (v715 = 1),
              v715))
        {
          v716 = 2;
        }
        else if (v714 >> 28)
        {
          v817 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v817 = v713;
          *(_DWORD *)(v817 + 8) = v714;
          v716 = 1;
          v713 = v817;
        }
        else
        {
          v716 = v713;
          v713 = v714 << 36;
        }
        v59 = v713 | v716;
      }
      v60 = *((_WORD *)v57 + 8);
      v61 = v58;
      if ((v58 & 1) != 0)
      {
        v717 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
        if ((v58 & 2) != 0
          || ((v718 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v718 != 0x3FFFFFFF)
            ? (v719 = (_DWORD)v718 == -1)
            : (v719 = 1),
              v719))
        {
          v720 = 2;
        }
        else if (v718 >> 28)
        {
          v818 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v818 = v717;
          *(_DWORD *)(v818 + 8) = v718;
          v720 = 1;
          v717 = v818;
        }
        else
        {
          v720 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
          v717 = v718 << 36;
        }
        v61 = v717 | v720;
      }
      v898 = v61;
      v62 = v59;
      if ((v59 & 1) != 0)
      {
        v721 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0
          || ((v722 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v722 != 0x3FFFFFFF)
            ? (v723 = (_DWORD)v722 == -1)
            : (v723 = 1),
              v723))
        {
          v724 = 2;
        }
        else if (v722 >> 28)
        {
          v819 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v819 = v721;
          *(_DWORD *)(v819 + 8) = v722;
          v724 = 1;
          v721 = v819;
        }
        else
        {
          v724 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
          v721 = v722 << 36;
        }
        v62 = v721 | v724;
      }
      v899 = v62;
      v900 = v60;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v43, 0, 0, 418, (uint64_t)&v898, v42, v23, v24);
      if ((v899 & 1) != 0 && (v899 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v899 & 0xFFFFFFFF8, v63, v64, v65, v66, v67, v68, v69);
      if ((v898 & 1) != 0 && (v898 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v898 & 0xFFFFFFFF8, v63, v64, v65, v66, v67, v68, v69);
      v70 = v58;
      if ((v58 & 1) != 0)
      {
        v725 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
        if ((v58 & 2) != 0
          || ((v726 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v726 != 0x3FFFFFFF)
            ? (v727 = (_DWORD)v726 == -1)
            : (v727 = 1),
              v727))
        {
          v728 = 2;
        }
        else if (v726 >> 28)
        {
          v820 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v820 = v725;
          *(_DWORD *)(v820 + 8) = v726;
          v728 = 1;
          v725 = v820;
        }
        else
        {
          v728 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
          v725 = v726 << 36;
        }
        v70 = v725 | v728;
      }
      v895 = v70;
      v71 = v59;
      if ((v59 & 1) != 0)
      {
        v729 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0
          || ((v730 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v730 != 0x3FFFFFFF)
            ? (v731 = (_DWORD)v730 == -1)
            : (v731 = 1),
              v731))
        {
          v732 = 2;
        }
        else if (v730 >> 28)
        {
          v821 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v821 = v729;
          *(_DWORD *)(v821 + 8) = v730;
          v732 = 1;
          v729 = v821;
        }
        else
        {
          v732 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
          v729 = v730 << 36;
        }
        v71 = v729 | v732;
      }
      v896 = v71;
      v897 = v60;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v43, 0, 0, 22, (uint64_t)&v895, v67, v68, v69);
      if ((v896 & 1) != 0 && (v896 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v896 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
      if ((v895 & 1) != 0 && (v895 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v895 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
      JSC::DFG::InsertionSet::execute(v43, (JSC::DFG::BasicBlock *)v44);
      if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v59 & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v23, v24);
      if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v58 & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v23, v24);
      ++v42;
      v41 = *((_QWORD *)v864 + 4);
      v84 = *(unsigned int *)(v41 + 864);
      if (v42 >= v84)
      {
        if (v84 > 1)
        {
          JSC::DFG::BlockInsertionSet::BlockInsertionSet(v893, v41);
          v908 = 0;
          v908 = (uint64_t)JSC::DFG::BlockInsertionSet::insert((JSC::DFG::BlockInsertionSet *)v893, 0, 1.0);
          v733 = *((_QWORD *)v864 + 4);
          v734 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v734[1] = 0;
          v734[2] = 0;
          *v734 = 0;
          v734[2] = *(_QWORD *)(v733 + 992);
          *(_QWORD *)(v733 + 992) = v734;
          LODWORD(v907) = 0;
          v735 = *((_QWORD *)v864 + 4);
          if (!*(_DWORD *)(v735 + 864))
            goto LABEL_1206;
          v736 = (uint64_t)v734;
          v737 = 0;
          do
          {
            v903 = 0;
            if (*(_DWORD *)(v735 + 140) <= v737)
            {
              __break(0xC471u);
              JUMPOUT(0x19853455CLL);
            }
            v738 = *(_QWORD *)(*(_QWORD *)(v735 + 128) + 8 * v737);
            v903 = v738;
            v739 = *(unsigned int *)(v736 + 12);
            if ((_DWORD)v739 == *(_DWORD *)(v736 + 8))
            {
              WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v736, (unint64_t)&v903);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v736 + 8 * v739) = v738;
              *(_DWORD *)(v736 + 12) = v739 + 1;
            }
            v740 = v903;
            v741 = *(unsigned int *)(v903 + 52);
            if ((_DWORD)v741 == *(_DWORD *)(v903 + 48))
            {
              WTF::Vector<JSC::DFG::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v903 + 40, (unint64_t)&v908);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v903 + 40) + 8 * v741) = v908;
              *(_DWORD *)(v740 + 52) = v741 + 1;
            }
            if (*(_BYTE *)(v903 + 20))
              WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::add<JSC::BytecodeIndex&>(&v885, (uint64_t *)(*((_QWORD *)v864 + 4) + 872), (int *)&v907, (_DWORD *)(v903 + 4));
            LODWORD(v907) = ++v737;
            v735 = *((_QWORD *)v864 + 4);
          }
          while (v737 < *(_DWORD *)(v735 + 864));
          if (!*(_DWORD *)(v736 + 12))
          {
LABEL_1206:
            __break(0xC471u);
            JUMPOUT(0x198534564);
          }
          if (!*(_DWORD *)(v735 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x19853456CLL);
          }
          if (**(_QWORD **)v736 != **(_QWORD **)(v735 + 48))
          {
            __break(0xC471u);
            JUMPOUT(0x198534228);
          }
          v891 = 0;
          v892 = 0;
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v885, &v892, &v891, 0);
          if ((v891 & 1) != 0 && (v891 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v891 & 0xFFFFFFFF8, v742, v743, v744, v745, v746, v747, v748);
          if ((v892 & 1) != 0 && (v892 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v892 & 0xFFFFFFFF8, v742, v743, v744, v745, v746, v747, v748);
          v749 = v908;
          v750 = *((_QWORD *)v864 + 4);
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v890, (const JSC::DFG::NodeOrigin *)&v885);
          JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v749, v750, 0, 367, (uint64_t)v890, v736, v751, v752);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v890, v753, v754, v755, v756, v757, v758, v759);
          WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((unint64_t *)(*((_QWORD *)v864 + 4) + 128), v760, v761, v762, v763, v764, v765, v766);
          v774 = *((_QWORD *)v864 + 4);
          v775 = *(unsigned int *)(v774 + 140);
          if ((_DWORD)v775 == *(_DWORD *)(v774 + 136))
          {
            WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v774 + 128, (unint64_t)&v908);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v774 + 128) + 8 * v775) = v908;
            *(_DWORD *)(v774 + 140) = v775 + 1;
          }
          JSC::DFG::BlockInsertionSet::execute((unint64_t **)v893, v767, v768, v769, v770, v771, v772, v773);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v885, v776, v777, v778, v779, v780, v781, v782);
          JSC::DFG::BlockInsertionSet::~BlockInsertionSet((JSC::DFG::BlockInsertionSet *)v893, v783, v784, v785, v786, v787, v788, v789);
          v41 = *((_QWORD *)v864 + 4);
        }
        break;
      }
    }
  }
  v888 = 0;
  v886 = 0u;
  v887 = 0u;
  v885 = 0u;
  v85 = *(unsigned int *)(v41 + 60);
  if ((_DWORD)v85)
  {
    v86 = 16;
    if (v85 > 0x10)
      v86 = *(unsigned int *)(v41 + 60);
    if (v86 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1985344F8);
    }
    v87 = 24 * v86;
    v88 = WTF::fastMalloc((WTF *)(24 * v86));
    LODWORD(v888) = (v87 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)&v887 + 1) = v88;
    if (HIDWORD(v888) != (_DWORD)v85)
      bzero((void *)(v88 + 24 * HIDWORD(v888)), 24 * ((24 * v85 - 24 * (unint64_t)HIDWORD(v888) - 24) / 0x18) + 24);
  }
  HIDWORD(v888) = v85;
  v889 = (JSC::DFG *)v41;
  v89 = v864;
  JSC::DFG::Graph::ensureSSADominators(*((JSC::DFG::Graph **)v864 + 4));
  v97 = *((_QWORD *)v864 + 4);
  v98 = *(_QWORD *)(v97 + 464);
  if (v98)
  {
    v99 = 0;
    v100 = (_QWORD *)((char *)v864 + 248);
    v101 = (uint64_t *)((char *)v864 + 224);
    while (1)
    {
      if (v99 >> 4 >= *(unsigned int *)(v97 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198534408);
      }
      v102 = (WTF *)(*(_QWORD *)(*(_QWORD *)(v97 + 472) + 8 * (v99 >> 4)) + ((v99 & 0xF) << 6));
      if (*(_QWORD *)v102)
        goto LABEL_90;
      v103 = v885;
      *(_QWORD *)&v885 = v885 + 1;
      v104 = v103 >> 3;
      v105 = DWORD1(v886);
      if (v103 >> 3 >= DWORD1(v886))
      {
        v127 = (WTF *)WTF::fastMalloc((WTF *)0xC0);
        v893[0] = v127;
        v128 = DWORD1(v886);
        if (DWORD1(v886) == (_DWORD)v886)
        {
          v131 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v885 + 8, DWORD1(v886) + 1, (unint64_t)v893);
          v128 = DWORD1(v886);
          *(_QWORD *)(*((_QWORD *)&v885 + 1) + 8 * DWORD1(v886)) = *v131;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v885 + 1) + 8 * DWORD1(v886)) = v127;
        }
        v105 = (v128 + 1);
        DWORD1(v886) = v128 + 1;
        v106 = v885 - 1;
        v104 = (unint64_t)(v885 - 1) >> 3;
      }
      else
      {
        v106 = v103;
      }
      if (v104 >= v105)
      {
        __break(0xC471u);
        JUMPOUT(0x198534420);
      }
      v107 = *(_QWORD *)(*((_QWORD *)&v885 + 1) + 8 * v104) + 24 * (v106 & 7);
      *(_QWORD *)v107 = 0;
      *(_QWORD *)(v107 + 8) = 0;
      *(_DWORD *)(v107 + 16) = v103;
      v108 = v885 - 1;
      v109 = (unint64_t)(v885 - 1) >> 3;
      if (v109 >= DWORD1(v886))
      {
        __break(0xC471u);
        JUMPOUT(0x198534428);
      }
      v110 = *(_QWORD *)(*((_QWORD *)&v885 + 1) + 8 * v109);
      v893[0] = v102;
      v111 = *((unsigned int *)v864 + 65);
      if ((_DWORD)v111 == *((_DWORD *)v864 + 64))
      {
        v129 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v111 + 1, (unint64_t)v893);
        v111 = *((unsigned int *)v864 + 65);
        *(_QWORD *)(*((_QWORD *)v864 + 31) + 8 * v111) = *v129;
      }
      else
      {
        *(_QWORD *)(*v100 + 8 * v111) = v102;
      }
      *((_DWORD *)v864 + 65) = v111 + 1;
      v112 = *((_QWORD *)v864 + 28);
      if (v112
        || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(v101, 8uLL, 0, v92, v93, v94, v95, v96), (v112 = *v101) != 0))
      {
        v113 = *(_DWORD *)(v112 - 8);
      }
      else
      {
        v113 = 0;
      }
      v114 = ((unint64_t)v102 + ~((_QWORD)v102 << 32)) ^ (((unint64_t)v102 + ~((_QWORD)v102 << 32)) >> 22);
      v115 = 9 * ((v114 + ~(v114 << 13)) ^ ((v114 + ~(v114 << 13)) >> 8));
      v116 = (v115 ^ (v115 >> 15)) + ~((v115 ^ (v115 >> 15)) << 27);
      v117 = v113 & ((v116 >> 31) ^ v116);
      v91 = (WTF **)(v112 + 16 * v117);
      v118 = *v91;
      if (*v91)
      {
        v119 = 0;
        v120 = 1;
        while (v118 != v102)
        {
          if (v118 == (WTF *)-1)
            v119 = v91;
          v117 = (v117 + v120) & v113;
          v91 = (WTF **)(v112 + 16 * v117);
          v118 = *v91;
          ++v120;
          if (!*v91)
          {
            if (v119)
            {
              *v119 = 0;
              v119[1] = 0;
              --*(_DWORD *)(*v101 - 16);
              v91 = v119;
            }
            goto LABEL_84;
          }
        }
        goto LABEL_90;
      }
LABEL_84:
      *v91 = v102;
      v91[1] = (WTF *)(v110 + 24 * (v108 & 7));
      v121 = *v101;
      if (*v101)
        v122 = *(_DWORD *)(v121 - 12) + 1;
      else
        v122 = 1;
      *(_DWORD *)(v121 - 12) = v122;
      v123 = *v101;
      if (*v101)
        v124 = *(_DWORD *)(v123 - 12);
      else
        v124 = 0;
      v125 = (*(_DWORD *)(v123 - 16) + v124);
      v126 = *(unsigned int *)(v123 - 4);
      if (v126 > 0x400)
      {
        if (v126 <= 2 * v125)
          goto LABEL_97;
      }
      else if (3 * v126 <= 4 * v125)
      {
        if ((_DWORD)v126)
LABEL_97:
          v130 = ((_DWORD)v126 << (6 * *(_DWORD *)(v123 - 12) >= (2 * v126)));
        else
          v130 = 8;
        WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(v101, v130, (uint64_t)v91, v92, v93, v94, v95, v96);
      }
LABEL_90:
      if (++v99 == v98)
      {
        v89 = v864;
        v97 = *((_QWORD *)v864 + 4);
        break;
      }
    }
  }
  v132 = *(_DWORD *)(v97 + 60);
  if (v132)
  {
    v862 = (JSC::DFG::SSAConversionPhase *)((char *)v89 + 72);
    v857 = (uint64_t *)((char *)v89 + 232);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      --v132;
      v134 = *((_QWORD *)v89 + 4);
      if (*(_DWORD *)(v134 + 60) <= v132)
      {
        __break(0xC471u);
        JUMPOUT(0x198534478);
      }
      v135 = *(_QWORD *)(*(_QWORD *)(v134 + 48) + 8 * v132);
      if (v135)
      {
        v136 = *(unsigned int *)(v135 + 220);
        if ((_DWORD)v136)
        {
          v137 = 0;
          while (1)
          {
            v908 = 0;
            v138 = *(WTF **)(*(_QWORD *)(v135 + 208) + 8 * v137);
            v908 = (uint64_t)v138;
            v139 = *((unsigned __int16 *)v138 + 9);
            if (v139 == 16 || v139 == 38)
              break;
LABEL_114:
            if (++v137 >= v136)
              goto LABEL_182;
          }
          v140 = (_QWORD *)*((_QWORD *)v138 + 9);
          v141 = v140;
          do
          {
            v142 = v141;
            v141 = (_QWORD *)*v141;
          }
          while (v141);
          if (v142 != v140)
          {
            *v140 = v142;
            v138 = (WTF *)v908;
            v139 = *(unsigned __int16 *)(v908 + 18);
          }
          v903 = 0;
          if (v139 == 16)
          {
            v903 = *((_QWORD *)v138 + 3) & 0xFF00FFFFFFFFFFFFLL;
            goto LABEL_122;
          }
          v193 = (_QWORD *)*((_QWORD *)v138 + 9);
          v194 = v193;
          do
          {
            v195 = v194;
            v194 = (_QWORD *)*v194;
          }
          while (v194);
          if (v195 != v193)
            *v193 = v195;
          v196 = v195;
          do
          {
            v197 = v196;
            v196 = (_QWORD *)*v196;
          }
          while (v196);
          if (v197 != v195)
            *v195 = v197;
          v859 = (JSC::DFG::InsertionSet *)v197[1];
          v198 = (WTF *)v908;
          v199 = *(_QWORD *)v908;
          if ((*(_QWORD *)v908 & 1) != 0)
          {
            v685 = *(_QWORD *)(v199 & 0xFFFFFFFF8);
            if ((v199 & 2) != 0
              || ((v686 = *(unsigned int *)((v199 & 0xFFFFFFFF8) + 8), (_DWORD)v686 != 0x3FFFFFFF)
                ? (v687 = (_DWORD)v686 == -1)
                : (v687 = 1),
                  v687))
            {
              v688 = 2;
            }
            else if (v686 >> 28)
            {
              v814 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v814 = v685;
              *(_DWORD *)(v814 + 8) = v686;
              v688 = 1;
              v685 = v814;
            }
            else
            {
              v688 = *(_QWORD *)(v199 & 0xFFFFFFFF8);
              v685 = v686 << 36;
            }
            v199 = v685 | v688;
          }
          v882 = v199;
          v200 = *((_QWORD *)v198 + 1);
          if ((v200 & 1) != 0)
          {
            v689 = *(_QWORD *)(v200 & 0xFFFFFFFF8);
            if ((v200 & 2) != 0
              || ((v690 = *(unsigned int *)((v200 & 0xFFFFFFFF8) + 8), (_DWORD)v690 != 0x3FFFFFFF)
                ? (v691 = (_DWORD)v690 == -1)
                : (v691 = 1),
                  v691))
            {
              v692 = 2;
            }
            else if (v690 >> 28)
            {
              v815 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v815 = v689;
              *(_DWORD *)(v815 + 8) = v690;
              v692 = 1;
              v689 = v815;
            }
            else
            {
              v692 = *(_QWORD *)(v200 & 0xFFFFFFFF8);
              v689 = v690 << 36;
            }
            v200 = v689 | v692;
          }
          v883 = v200;
          v884 = *((_WORD *)v198 + 8);
          v201 = *((_QWORD *)v864 + 4);
          v202 = v142[3];
          if (!*((_BYTE *)v142 + 40) && *((_BYTE *)v142 + 43))
          {
            if (*((_DWORD *)v142 + 14) == 1)
            {
              v203 = 3;
            }
            else
            {
              v204 = v142;
              do
              {
                v205 = v204;
                v204 = (_QWORD *)*v204;
              }
              while (v204);
              if (v205 != v142)
                *v142 = v205;
              v206 = v205[2];
              if (!v206)
                goto LABEL_181;
              if ((v206 & 0xFFFFFFFCFFFFFFFFLL) != 0)
              {
                if (!HIDWORD(v202))
                  goto LABEL_202;
                v207 = v142;
                do
                {
                  v208 = v207;
                  v207 = (_QWORD *)*v207;
                }
                while (v207);
                if (v208 != v142)
                  *v142 = v208;
                v209 = v208[2];
                v210 = v209 && (v209 & 0xFFFFFFF0FFFFFFFFLL) == 0;
                if (v210)
                {
                  v203 = 2;
                }
                else
                {
LABEL_202:
                  if ((v206 & 0x2800FFFFFFF7) == 0 || (v206 & 0xFFFFD7FF00000008) != 0)
                  {
                    if (v206 == 0x10000000000)
                      v203 = 5;
                    else
                      v203 = 6;
                  }
                  else
                  {
                    v203 = 4;
                  }
                }
              }
              else
              {
                v203 = 1;
              }
            }
          }
          else
          {
LABEL_181:
            v203 = 6;
          }
          v183 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v183 = v202;
          *(_DWORD *)(v183 + 8) = 0x3FFFFFFF;
          *(_BYTE *)(v183 + 12) = v203;
          *(_QWORD *)(v183 + 16) = 0;
          *(_QWORD *)(v183 + 16) = *(_QWORD *)(v201 + 592);
          *(_QWORD *)(v201 + 592) = v183;
          v903 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v862, v137, (uint64_t)v859, 19, (uint64_t)&v882, v183, v184, v185);
          if ((v883 & 1) != 0 && (v883 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v883 & 0xFFFFFFFF8, v186, v187, v188, v189, v190, v191, v192);
          if ((v882 & 1) != 0 && (v882 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v882 & 0xFFFFFFFF8, v186, v187, v188, v189, v190, v191, v192);
          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v857, &v908, (uint64_t *)&v903, v188, v189, v190, v191, v192, (uint64_t)v893);
LABEL_122:
          v143 = *((_QWORD *)v864 + 28);
          if (v143)
          {
            v144 = *(_DWORD *)(v143 - 8);
            v145 = ((unint64_t)v142 + ~((_QWORD)v142 << 32)) ^ (((unint64_t)v142 + ~((_QWORD)v142 << 32)) >> 22);
            v146 = 9 * ((v145 + ~(v145 << 13)) ^ ((v145 + ~(v145 << 13)) >> 8));
            v147 = (v146 ^ (v146 >> 15)) + ~((v146 ^ (v146 >> 15)) << 27);
            v148 = v144 & ((v147 >> 31) ^ v147);
            v149 = *(_QWORD **)(v143 + 16 * v148);
            if (v149 == v142)
            {
LABEL_124:
              v150 = *(_QWORD *)(v143 + 16 * v148 + 8);
              goto LABEL_125;
            }
            v179 = 1;
            while (v149)
            {
              v148 = ((_DWORD)v148 + v179) & v144;
              v149 = *(_QWORD **)(v143 + 16 * v148);
              ++v179;
              if (v149 == v142)
                goto LABEL_124;
            }
          }
          v150 = 0;
LABEL_125:
          v151 = v903;
          v893[0] = (WTF *)v135;
          v152 = *(_QWORD *)(StatusReg + 752);
          if (v152)
          {
            v153 = (_BYTE *)(v152 + 8488);
            *(_BYTE *)(v152 + 8488) = 1;
            v154 = *(unsigned int *)(v152 + 8504);
            if ((_DWORD)v154)
            {
              *(_DWORD *)(v152 + 8504) = v154 - *(_DWORD *)(v152 + 8508);
              casual = (uint64_t *)(*(_QWORD *)(v152 + 8496) - v154);
              goto LABEL_128;
            }
            v176 = *(_QWORD *)(v152 + 8528);
            v177 = *(_QWORD *)(v152 + 8512);
            if (v176)
            {
LABEL_151:
              v178 = __clz(v176);
              *(_QWORD *)(v152 + 8528) = v176 & ~(0x8000000000000000 >> v178);
              casual = (uint64_t *)(v177 + 16 * v178);
LABEL_128:
              *v153 = 0;
LABEL_129:
              *casual = v150;
              casual[1] = v135;
              casual[2] = v151;
              casual[3] = 0;
              casual[3] = *((_QWORD *)&v886 + 1);
              *((_QWORD *)&v886 + 1) = casual;
              v156 = *(_DWORD *)(v135 + 8);
              if (HIDWORD(v888) <= v156)
              {
                __break(0xC471u);
                JUMPOUT(0x198534438);
              }
              v157 = (uint64_t *)(*((_QWORD *)&v887 + 1) + 24 * v156);
              v158 = *v157;
              if (*v157
                || (WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(v157, 8uLL, 0, v92, v93, v94, v95, v96), (v158 = *v157) != 0))
              {
                v159 = *(_DWORD *)(v158 - 8);
              }
              else
              {
                v159 = 0;
              }
              v160 = (~(v150 << 32) + v150) ^ ((unint64_t)(~(v150 << 32) + v150) >> 22);
              v161 = 9 * ((v160 + ~(v160 << 13)) ^ ((v160 + ~(v160 << 13)) >> 8));
              v162 = (v161 ^ (v161 >> 15)) + ~((v161 ^ (v161 >> 15)) << 27);
              v163 = v159 & ((v162 >> 31) ^ v162);
              v164 = (uint64_t *)(v158 + 16 * v163);
              v165 = *v164;
              if (*v164)
              {
                v174 = 0;
                v175 = 1;
                do
                {
                  if (v165 == v150)
                  {
                    v164[1] = (uint64_t)casual;
                    goto LABEL_142;
                  }
                  if (v165 == -1)
                    v174 = v164;
                  v163 = (v163 + v175) & v159;
                  v164 = (uint64_t *)(v158 + 16 * v163);
                  v165 = *v164;
                  ++v175;
                }
                while (*v164);
                if (v174)
                {
                  *v174 = 0;
                  v174[1] = 0;
                  --*(_DWORD *)(*v157 - 16);
                  v164 = v174;
                }
              }
              *v164 = v150;
              v164[1] = (uint64_t)casual;
              v166 = *v157;
              if (*v157)
                v167 = *(_DWORD *)(v166 - 12) + 1;
              else
                v167 = 1;
              *(_DWORD *)(v166 - 12) = v167;
              v168 = *v157;
              if (*v157)
                v169 = *(_DWORD *)(v168 - 12);
              else
                v169 = 0;
              v170 = (*(_DWORD *)(v168 - 16) + v169);
              v171 = *(unsigned int *)(v168 - 4);
              if (v171 > 0x400)
              {
                if (v171 <= 2 * v170)
                  goto LABEL_205;
              }
              else
              {
                if (3 * v171 > 4 * v170)
                  goto LABEL_139;
                if (!(_DWORD)v171)
                {
                  v182 = 8;
                  goto LABEL_163;
                }
LABEL_205:
                v182 = ((_DWORD)v171 << (6 * *(_DWORD *)(v168 - 12) >= (2 * v171)));
LABEL_163:
                WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(v157, v182, (uint64_t)v164, v92, v93, v94, v95, v96);
              }
LABEL_139:
              v172 = *(unsigned int *)(v150 + 12);
              if ((_DWORD)v172 == *(_DWORD *)(v150 + 8))
              {
                v180 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v150, v172 + 1, (unint64_t)v893);
                v181 = *(unsigned int *)(v150 + 12);
                v173 = v181 + 1;
                *(_QWORD *)(*(_QWORD *)v150 + 8 * v181) = *v180;
              }
              else
              {
                v173 = v172 + 1;
                *(_QWORD *)(*(_QWORD *)v150 + 8 * v172) = v135;
              }
              *(_DWORD *)(v150 + 12) = v173;
LABEL_142:
              v136 = *(unsigned int *)(v135 + 220);
              goto LABEL_114;
            }
            if (*(_BYTE *)(v152 + 8493) == 6)
            {
              v647 = *(_DWORD *)(v152 + 8524);
              v648 = *(unsigned int *)(v152 + 8520);
              if (v648 < v647)
              {
                *(_QWORD *)&v153[8 * v648 + 56] = 0;
                v649 = (unint64_t *)(v152 + 8 * v648 + 8552);
                v650 = v647 - 1 - v648;
                while (v650)
                {
                  v177 += 1024;
                  v652 = *v649++;
                  v651 = v652;
                  LODWORD(v648) = v648 + 1;
                  --v650;
                  if (v652)
                  {
                    v176 = __rbit64(v651);
                    *(_DWORD *)(v152 + 8520) = v648;
                    *(_QWORD *)(v152 + 8512) = v177;
                    goto LABEL_151;
                  }
                }
                *(_DWORD *)(v152 + 8520) = v647;
              }
            }
            *v153 = 0;
          }
          casual = (uint64_t *)bmalloc_allocate_casual(32, 1);
          goto LABEL_129;
        }
LABEL_182:
        JSC::DFG::InsertionSet::execute(v862, (JSC::DFG::BasicBlock *)v135);
      }
      v89 = v864;
    }
    while (v132);
  }
  if (!*((_QWORD *)v889 + 98))
  {
    JSC::DFG::Graph::logAssertionFailure(v889, 0, (const WTF::CString *)"./dfg/DFGSSACalculator.h", (const char *)0xB2, "void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGSSAConversionPhase.cpp:170:13)]", "m_graph.m_ssaDominators");
    __break(0xC471u);
    JUMPOUT(0x198533E88);
  }
  v860 = (JSC::DFG::InsertionSet *)v885;
  if (!(_QWORD)v885)
    goto LABEL_342;
  v211 = 0;
  do
  {
    if ((unint64_t)v211 >> 3 >= DWORD1(v886))
    {
      __break(0xC471u);
      JUMPOUT(0x198534440);
    }
    v212 = *(_QWORD *)(*((_QWORD *)&v885 + 1) + 8 * ((unint64_t)v211 >> 3));
    v213 = v212 + 24 * (v211 & 7);
    v214 = *((_QWORD *)v889 + 98);
    v902 = 0x8000000000000000;
    v215 = *(unsigned int *)(v213 + 12);
    v904 = 0;
    if (!(_DWORD)v215)
      goto LABEL_283;
    if (v215 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198534468);
    }
    v216 = (void *)WTF::fastMalloc((WTF *)(8 * v215));
    LODWORD(v904) = v215;
    v903 = (unint64_t)v216;
    v855 = v212 + 24 * (v211 & 7);
    memcpy(v216, *(const void **)v213, 8 * *(unsigned int *)(v213 + 12));
    while (2)
    {
      v217 = *(_QWORD *)(v903 + 8 * v215 - 8);
      HIDWORD(v904) = v215 - 1;
      v893[0] = (WTF *)v894;
      LODWORD(v893[1]) = 16;
      v894[0] = v217;
      LODWORD(v218) = 1;
      do
      {
        v219 = *((_QWORD *)v893[0] + v218 - 1);
        HIDWORD(v893[1]) = v218 - 1;
        v220 = *(unsigned int *)(v219 + 220);
        if ((_DWORD)v220)
        {
          v221 = 8 * v220;
          while (1)
          {
            v222 = *(_QWORD *)(*(_QWORD *)(v219 + 208) - 8 + v221);
            v223 = *(unsigned __int16 *)(v222 + 18);
            if ((v223 - 364) < 0xC)
              break;
            if ((v223 - 28) < 2 || (v223 - 23) <= 2)
            {
              v221 -= 8;
              if (v221)
                continue;
            }
            goto LABEL_305;
          }
        }
        else
        {
LABEL_305:
          v222 = 0;
        }
        v224 = 1;
        switch(*(_WORD *)(v222 + 18))
        {
          case 0x16C:
            goto LABEL_223;
          case 0x16D:
            v224 = 2;
            goto LABEL_223;
          case 0x16E:
            v224 = *(_DWORD *)(*(_QWORD *)(v222 + 72) + 12) + 1;
            goto LABEL_261;
          case 0x16F:
            v224 = *(_DWORD *)(*(_QWORD *)(v222 + 72) + 12);
LABEL_261:
            if (!v224)
              goto LABEL_262;
LABEL_223:
            v225 = 0;
            v226 = 0;
            v227 = (uint64_t *)(v222 + 72);
            break;
          default:
            goto LABEL_262;
        }
        do
        {
          v228 = *(unsigned __int16 *)(v222 + 18);
          if (v228 == 366)
          {
            v237 = (_QWORD *)*v227;
            v238 = *(_DWORD *)(*v227 + 12);
            if (v238 <= v225)
            {
              if (v238 != v225)
              {
                __break(0xC471u);
                JUMPOUT(0x198533524);
              }
              v229 = (uint64_t)(v237 + 2);
            }
            else
            {
              v229 = *v237 + 32 * v226 + 16;
            }
          }
          else if (v228 == 367)
          {
            if (*(_DWORD *)(*v227 + 12) <= v225)
            {
              __break(0xC471u);
              JUMPOUT(0x1985342A0);
            }
            v229 = *(_QWORD *)*v227 + 8 * v226;
          }
          else if (v225)
          {
            if (v225 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198533F94);
            }
            v229 = *v227 + 16;
          }
          else
          {
            v229 = v222 + 72;
            if (v228 != 364)
              v229 = *v227;
          }
          v230 = *(_QWORD *)v229;
          v231 = *(unsigned int *)(*(_QWORD *)v229 + 8);
          v232 = *(_DWORD *)(v214 + 20);
          if (v232 <= v231)
          {
            __break(0xC471u);
            JUMPOUT(0x198534180);
          }
          v233 = *(unsigned int *)(v217 + 8);
          if (v232 <= v233)
          {
            __break(0xC471u);
            JUMPOUT(0x198534188);
          }
          v234 = *(_QWORD *)(v214 + 8);
          v235 = v234 + 32 * v231;
          v236 = v234 + 32 * v233;
          if (*(_DWORD *)(v235 + 24) <= *(_DWORD *)(v236 + 24) || *(_DWORD *)(v235 + 28) >= *(_DWORD *)(v236 + 28))
          {
            v905 = v230;
            v298 = v902;
            if ((v902 & 0x8000000000000000) != 0)
              v244 = 63;
            else
              v244 = *(_QWORD *)(2 * v902);
            if (v244 <= v231)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v902, v231 + 1, 0);
              v298 = v902;
            }
            v239 = 2 * v298 + 8;
            v240 = v298 < 0;
            v241 = &v902;
            if (!v240)
              v241 = (unint64_t *)v239;
            v242 = (v231 >> 3) & 0x1FFFFFF8;
            v243 = *(unint64_t *)((char *)v241 + v242);
            *(unint64_t *)((char *)v241 + v242) = v243 | (1 << v231);
            if ((v243 & (1 << v231)) == 0)
            {
              v245 = *(unsigned int *)(v855 + 16);
              if (*((_DWORD *)v864 + 65) <= v245)
              {
                __break(0xC471u);
                JUMPOUT(0x198534288);
              }
              v246 = *(_QWORD *)(*((_QWORD *)v864 + 31) + 8 * v245);
              v247 = *(_QWORD *)(v246 + 24);
              if (HIDWORD(v247) == 2)
                v248 = *(unsigned int *)(v230 + 88) + (uint64_t)(int)v247 + *(unsigned int *)(v230 + 92);
              else
                v248 = (v247 & 0x80000000) != 0
                     ? (*(_QWORD *)(v246 + 24) ^ 0xFFFFFFFFLL) + *(unsigned int *)(v230 + 88)
                     : (uint64_t)(((unint64_t)v247 << 32) - 0x500000000) >> 32;
              v249 = *(_QWORD *)(*(_QWORD *)(v230 + 72) + 8 * v248);
              if (v249)
              {
                v258 = *(_QWORD **)(v249 + 72);
                v259 = v258;
                do
                {
                  v260 = v259;
                  v259 = (_QWORD *)*v259;
                }
                while (v259);
                if (v260 != v258)
                  *v258 = v260;
                if (v260 == (_QWORD *)v246)
                {
                  v261 = *((_QWORD *)v864 + 4);
                  v257 = (_QWORD *)v246;
                  do
                  {
                    v256 = v257;
                    v257 = (_QWORD *)*v257;
                  }
                  while (v257);
                  if (v256 != (_QWORD *)v246)
                    *(_QWORD *)v246 = v256;
                  if (!*(_DWORD *)(v230 + 220))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198534298);
                  }
                  v263 = v256[1];
                  v264 = **(_QWORD **)(v230 + 208);
                  v265 = *(_QWORD *)v264;
                  if ((*(_QWORD *)v264 & 1) != 0)
                  {
                    v677 = *(_QWORD *)(v265 & 0xFFFFFFFF8);
                    if ((v265 & 2) != 0
                      || ((v678 = *(unsigned int *)((v265 & 0xFFFFFFFF8) + 8), (_DWORD)v678 != 0x3FFFFFFF)
                        ? (v679 = (_DWORD)v678 == -1)
                        : (v679 = 1),
                          v679))
                    {
                      v680 = 2;
                    }
                    else if (v678 >> 28)
                    {
                      v844 = v263;
                      v849 = v261;
                      v838 = *(_DWORD *)((v265 & 0xFFFFFFFF8) + 8);
                      v841 = **(_QWORD **)(v230 + 208);
                      v835 = *(_QWORD *)(v265 & 0xFFFFFFFF8);
                      v812 = WTF::fastMalloc((WTF *)0x10);
                      v264 = v841;
                      v263 = v844;
                      *(_QWORD *)v812 = v835;
                      *(_DWORD *)(v812 + 8) = v838;
                      v680 = 1;
                      v677 = v812;
                      v261 = v849;
                    }
                    else
                    {
                      v680 = *(_QWORD *)(v265 & 0xFFFFFFFF8);
                      v677 = v678 << 36;
                    }
                    v265 = v677 | v680;
                  }
                  v908 = v265;
                  v266 = *(_QWORD *)(v264 + 8);
                  if ((v266 & 1) != 0)
                  {
                    v681 = *(_QWORD *)(v266 & 0xFFFFFFFF8);
                    if ((v266 & 2) != 0
                      || ((v682 = *(unsigned int *)((v266 & 0xFFFFFFFF8) + 8), (_DWORD)v682 != 0x3FFFFFFF)
                        ? (v683 = (_DWORD)v682 == -1)
                        : (v683 = 1),
                          v683))
                    {
                      v684 = 2;
                    }
                    else if (v682 >> 28)
                    {
                      v845 = v263;
                      v850 = v261;
                      v839 = *(_DWORD *)((v266 & 0xFFFFFFFF8) + 8);
                      v842 = v264;
                      v836 = *(_QWORD *)(v266 & 0xFFFFFFFF8);
                      v813 = WTF::fastMalloc((WTF *)0x10);
                      v264 = v842;
                      v263 = v845;
                      *(_QWORD *)v813 = v836;
                      *(_DWORD *)(v813 + 8) = v839;
                      v684 = 1;
                      v681 = v813;
                      v261 = v850;
                    }
                    else
                    {
                      v684 = *(_QWORD *)(v266 & 0xFFFFFFFF8);
                      v681 = v682 << 36;
                    }
                    v266 = v681 | v684;
                  }
                  v909 = v266;
                  v911 = HIBYTE(*(_WORD *)(v264 + 16));
                  v910 = 0;
                  v846 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v261, v263, 27, (uint64_t)&v908, v93, v94, v95, v96);
                  if ((v909 & 1) != 0 && (v909 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v909 & 0xFFFFFFFF8, v267, v268, v269, v270, v271, v272, v273);
                  if ((v908 & 1) != 0 && (v908 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v908 & 0xFFFFFFFF8, v267, v268, v269, v270, v271, v272, v273);
                  if (!*(_BYTE *)(v246 + 40) && *(_BYTE *)(v246 + 43))
                  {
                    if (*(_DWORD *)(v246 + 56) == 1)
                    {
                      v274 = 3;
                    }
                    else
                    {
                      v290 = (_QWORD *)v246;
                      do
                      {
                        v291 = v290;
                        v290 = (_QWORD *)*v290;
                      }
                      while (v290);
                      if (v291 != (_QWORD *)v246)
                        *(_QWORD *)v246 = v291;
                      v292 = v291[2];
                      if (!v292)
                        goto LABEL_296;
                      if ((v292 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                      {
                        if (!*(_DWORD *)(v246 + 28))
                          goto LABEL_322;
                        v293 = (_QWORD *)v246;
                        do
                        {
                          v294 = v293;
                          v293 = (_QWORD *)*v293;
                        }
                        while (v293);
                        if (v294 != (_QWORD *)v246)
                          *(_QWORD *)v246 = v294;
                        v295 = v294[2];
                        if (v295 && (v295 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                        {
                          v274 = 5;
                        }
                        else
                        {
LABEL_322:
                          v297 = (v292 & 0x2800FFFFFFF7) == 0;
                          if ((v292 & 0xFFFFD7FF00000008) != 0)
                            v297 = 1;
                          if (v292 != 0x10000000000 || !v297)
                            goto LABEL_296;
                          v274 = 6;
                        }
                      }
                      else
                      {
                        v274 = 4;
                      }
                    }
                  }
                  else
                  {
LABEL_296:
                    v274 = 1;
                  }
                  v275 = *(_DWORD *)(v846 + 56);
                  v276 = v275 | v274;
                  if (v276 != v275)
                    *(_DWORD *)(v846 + 56) = v276;
                  v277 = *(_DWORD *)(v230 + 8);
                  if (HIDWORD(v888) <= v277)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198534290);
                  }
                  v278 = *((_QWORD *)&v887 + 1) + 24 * v277;
                  v279 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                  *v279 = v855;
                  v279[1] = v230;
                  v279[2] = v846;
                  v279[3] = 0;
                  v279[3] = v887;
                  *(_QWORD *)&v887 = v279;
                  v907 = v279;
                  v285 = v278 + 8;
                  v286 = *(unsigned int *)(v278 + 20);
                  v847 = (uint64_t *)v278;
                  if ((_DWORD)v286 == *(_DWORD *)(v278 + 16))
                  {
                    v287 = v278 + 8;
                    v288 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v287, v286 + 1, (unint64_t)&v907);
                    v285 = v287;
                    v286 = *(unsigned int *)(v287 + 12);
                    *(_QWORD *)(*(_QWORD *)v287 + 8 * v286) = *v288;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v285 + 8 * v286) = v279;
                  }
                  *(_DWORD *)(v285 + 12) = v286 + 1;
                  v906 = v855;
                  WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>(v847, &v906, (uint64_t *)&v907, v280, v281, v282, v283, v284, (uint64_t)&v908);
                  v289 = HIDWORD(v904);
                  if (HIDWORD(v904) == (_DWORD)v904)
                  {
                    v299 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v903, HIDWORD(v904) + 1, (unint64_t)&v905);
                    v289 = HIDWORD(v904);
                    *(_QWORD *)(v903 + 8 * HIDWORD(v904)) = *v299;
                  }
                  else
                  {
                    *(_QWORD *)(v903 + 8 * HIDWORD(v904)) = v230;
                  }
                  HIDWORD(v904) = v289 + 1;
                }
              }
            }
          }
          v225 = v226 + 1;
          v226 = (v226 + 1);
        }
        while (v224 != v225);
LABEL_262:
        v250 = *(unsigned int *)(v219 + 8);
        if (*(_DWORD *)(v214 + 20) <= v250)
        {
          __break(0xC471u);
          JUMPOUT(0x198534208);
        }
        v251 = *(_QWORD *)(v214 + 8) + 32 * v250;
        v252 = *(unsigned int *)(v251 + 12);
        v218 = HIDWORD(v893[1]);
        if ((_DWORD)v252)
        {
          v253 = *(const void **)v251;
          v254 = HIDWORD(v893[1]) + v252;
          if (v254 > LODWORD(v893[1]))
          {
            v300 = LODWORD(v893[1]) + ((unint64_t)LODWORD(v893[1]) >> 2);
            if (v300 >= 0x10)
              v301 = v300 + 1;
            else
              v301 = 16;
            if (v301 <= v254)
              v302 = HIDWORD(v893[1]) + v252;
            else
              v302 = v301;
            v303 = v893[0];
            if (v302 < 0x11)
            {
              v304 = (WTF *)v894;
              v893[0] = (WTF *)v894;
              LODWORD(v893[1]) = 16;
            }
            else
            {
              if (v302 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198534410);
              }
              v304 = (WTF *)WTF::fastMalloc((WTF *)(8 * v302));
              LODWORD(v893[1]) = v302;
              v893[0] = v304;
            }
            memcpy(v304, v303, 8 * v218);
            if (v894 != (_QWORD *)v303 && v303)
            {
              if (v893[0] == v303)
              {
                v893[0] = 0;
                LODWORD(v893[1]) = 0;
              }
              WTF::fastFree((unint64_t)v303, v305, v306, v307, v308, v309, v310, v311);
            }
          }
          if (v254 < HIDWORD(v893[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x198534358);
          }
          memcpy((char *)v893[0] + 8 * HIDWORD(v893[1]), v253, 8 * v252);
          HIDWORD(v893[1]) = v218 + v252;
          LODWORD(v218) = v218 + v252;
        }
      }
      while ((_DWORD)v218);
      v255 = v893[0];
      if (v894 != (_QWORD *)v893[0] && v893[0])
      {
        v893[0] = 0;
        LODWORD(v893[1]) = 0;
        WTF::fastFree((unint64_t)v255, v90, (uint64_t)v91, v92, v93, v94, v95, v96);
      }
      LODWORD(v215) = HIDWORD(v904);
      v89 = v864;
      if (HIDWORD(v904))
        continue;
      break;
    }
    v262 = v903;
    if (v903)
    {
      v903 = 0;
      LODWORD(v904) = 0;
      WTF::fastFree(v262, v90, (uint64_t)v91, v92, v93, v94, v95, v96);
    }
LABEL_283:
    if ((v902 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v902, v90, (uint64_t)v91, v92, v93, v94, v95, v96);
    v211 = (JSC::DFG::InsertionSet *)((char *)v211 + 1);
  }
  while (v211 != v860);
LABEL_342:
  v312 = *((_QWORD *)v89 + 4);
  if (!*(_DWORD *)(v312 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x198534518);
  }
  v313 = **(unsigned int ***)(v312 + 48);
  v314 = v313[21];
  v837 = v314;
  v840 = (WTF *)(8 * v314);
  if ((_DWORD)v314)
  {
    if (v314 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198534520);
    }
    v863 = (WTF *)WTF::fastMalloc(v840);
    bzero(v863, (size_t)v840);
    v312 = *((_QWORD *)v89 + 4);
  }
  else
  {
    v863 = 0;
  }
  v315 = v313[22];
  v858 = v313[23];
  JSC::DFG::Graph::blocksInPreOrder((JSC::DFG::Graph *)v312, v90, (uint64_t)v91, v92, v93, v94, v95, v96, (uint64_t)&v908);
  v323 = (_QWORD *)v908;
  if (HIDWORD(v909))
  {
    v834 = (char *)(v908 + 8 * HIDWORD(v909));
    v861 = (JSC::DFG::SSAConversionPhase *)((char *)v89 + 72);
    v830 = (_QWORD *)((char *)v89 + 80);
    v843 = v315;
    while (1)
    {
      v856 = v323;
      v324 = *v323;
      if ((_DWORD)v837)
        bzero(v863, (size_t)v840);
      v325 = *((_QWORD *)v89 + 4);
      if (!*(_DWORD *)(v325 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1985344A8);
      }
      v326 = HIDWORD(v888);
      if ((_DWORD)v837 && v324 != **(_QWORD **)(v325 + 48))
      {
        v327 = v837;
        while (1)
        {
          --v327;
          v328 = *(_QWORD *)(*(_QWORD *)(v324 + 72) + 8 * v327);
          if (!v328)
            goto LABEL_355;
          v329 = *(_QWORD **)(v328 + 72);
          v330 = v329;
          do
          {
            v331 = v330;
            v330 = (_QWORD *)*v330;
          }
          while (v330);
          if (v331 != v329)
            *v329 = v331;
          v332 = *((_QWORD *)v89 + 28);
          if (!v332)
            goto LABEL_1075;
          v333 = *(_DWORD *)(v332 - 8);
          v334 = ((unint64_t)v331 + ~((_QWORD)v331 << 32)) ^ (((unint64_t)v331 + ~((_QWORD)v331 << 32)) >> 22);
          v335 = 9 * ((v334 + ~(v334 << 13)) ^ ((v334 + ~(v334 << 13)) >> 8));
          v336 = (v335 ^ (v335 >> 15)) + ~((v335 ^ (v335 >> 15)) << 27);
          v337 = v333 & ((v336 >> 31) ^ v336);
          v338 = *(_QWORD **)(v332 + 16 * v337);
          if (v338 != v331)
            break;
LABEL_363:
          v339 = *(unint64_t **)(v332 + 16 * v337 + 8);
LABEL_364:
          v340 = *((_QWORD *)v889 + 98);
          v341 = *(unsigned int *)(v324 + 8);
          v342 = *(_DWORD *)(v340 + 20);
          if (v342 <= v341)
          {
            __break(0xC471u);
            JUMPOUT(0x198534418);
          }
          v343 = *(_QWORD *)(v340 + 8);
          v344 = *(_QWORD *)(v343 + 32 * v341 + 16);
          if (v344)
          {
            v345 = ((unint64_t)v339 + ~((_QWORD)v339 << 32)) ^ (((unint64_t)v339 + ~((_QWORD)v339 << 32)) >> 22);
            v346 = 9 * ((v345 + ~(v345 << 13)) ^ ((v345 + ~(v345 << 13)) >> 8));
            v347 = (v346 ^ (v346 >> 15)) + ~((v346 ^ (v346 >> 15)) << 27);
            v348 = (v347 >> 31) ^ v347;
            if (v326 <= v342)
            {
              while (1)
              {
                v349 = *(unsigned int *)(v344 + 8);
                if (v326 <= v349)
                  break;
                v350 = *(_QWORD *)(*((_QWORD *)&v887 + 1) + 24 * v349);
                if (v350)
                {
                  v351 = *(_DWORD *)(v350 - 8);
                  v352 = v351 & v348;
                  v353 = *(unint64_t **)(v350 + 16 * v352);
                  if (v353 == v339)
                  {
LABEL_375:
                    v355 = *(_QWORD *)(v350 + 16 * v352 + 8);
                    if (v355)
                      goto LABEL_616;
                  }
                  else
                  {
                    v354 = 1;
                    while (v353)
                    {
                      v352 = ((_DWORD)v352 + v354) & v351;
                      v353 = *(unint64_t **)(v350 + 16 * v352);
                      ++v354;
                      if (v353 == v339)
                        goto LABEL_375;
                    }
                  }
                }
                v344 = *(_QWORD *)(v343 + 32 * v349 + 16);
                if (!v344)
                  goto LABEL_355;
              }
LABEL_1135:
              __break(0xC471u);
              JUMPOUT(0x198534190);
            }
            do
            {
              v356 = *(unsigned int *)(v344 + 8);
              if (v326 <= v356)
                goto LABEL_1135;
              v357 = *(_QWORD *)(*((_QWORD *)&v887 + 1) + 24 * v356);
              if (v357)
              {
                v358 = *(_DWORD *)(v357 - 8);
                v359 = v358 & v348;
                v317 = *(unint64_t **)(v357 + 16 * v359);
                if (v317 == v339)
                {
LABEL_386:
                  v355 = *(_QWORD *)(v357 + 16 * v359 + 8);
                  if (v355)
                  {
LABEL_616:
                    v527 = *(_QWORD *)(v355 + 16);
                    if (*(_QWORD *)(v527 + 88))
                      v527 = *(_QWORD *)(v527 + 88);
                    *((_QWORD *)v863 + v327) = v527;
                    break;
                  }
                }
                else
                {
                  v360 = 1;
                  while (v317)
                  {
                    v359 = ((_DWORD)v359 + v360) & v358;
                    v317 = *(unint64_t **)(v357 + 16 * v359);
                    ++v360;
                    if (v317 == v339)
                      goto LABEL_386;
                  }
                }
              }
              if (v342 <= v356)
              {
                __break(0xC471u);
                JUMPOUT(0x198534348);
              }
              v344 = *(_QWORD *)(v343 + 32 * v356 + 16);
            }
            while (v344);
          }
LABEL_355:
          if (!v327)
            goto LABEL_392;
        }
        v361 = 1;
        while (v338)
        {
          v337 = ((_DWORD)v337 + v361) & v333;
          v338 = *(_QWORD **)(v332 + 16 * v337);
          ++v361;
          if (v338 == v331)
            goto LABEL_363;
        }
LABEL_1075:
        v339 = 0;
        goto LABEL_364;
      }
LABEL_392:
      v362 = *(_DWORD *)(v324 + 8);
      if (v326 <= v362)
      {
        __break(0xC471u);
        JUMPOUT(0x198534488);
      }
      v363 = *((_QWORD *)&v887 + 1) + 24 * v362;
      v364 = *(unsigned int *)(v363 + 20);
      if ((_DWORD)v364)
        break;
LABEL_394:
      if (!*(_DWORD *)(v324 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1985344B0);
      }
      v365 = **(_QWORD **)(v324 + 208);
      if (*(_BYTE *)(v365 + 16))
      {
        v366 = *(_QWORD *)v365;
        if ((*(_QWORD *)v365 & 1) != 0)
        {
          v663 = *(_QWORD *)(v366 & 0xFFFFFFFF8);
          if ((v366 & 2) != 0
            || ((v664 = *(unsigned int *)((v366 & 0xFFFFFFFF8) + 8), (_DWORD)v664 != 0x3FFFFFFF)
              ? (v665 = (_DWORD)v664 == -1)
              : (v665 = 1),
                v665))
          {
            v666 = 2;
          }
          else if (v664 >> 28)
          {
            v806 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v806 = v663;
            *(_DWORD *)(v806 + 8) = v664;
            v666 = 1;
            v663 = v806;
          }
          else
          {
            v666 = *(_QWORD *)(v366 & 0xFFFFFFFF8);
            v663 = v664 << 36;
          }
          v366 = v663 | v666;
          v89 = v864;
        }
        v871 = v366;
        v367 = *(_QWORD *)(v365 + 8);
        if ((v367 & 1) != 0)
        {
          v667 = *(_QWORD *)(v367 & 0xFFFFFFFF8);
          if ((v367 & 2) != 0
            || ((v668 = *(unsigned int *)((v367 & 0xFFFFFFFF8) + 8), (_DWORD)v668 != 0x3FFFFFFF)
              ? (v669 = (_DWORD)v668 == -1)
              : (v669 = 1),
                v669))
          {
            v670 = 2;
          }
          else if (v668 >> 28)
          {
            v807 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v807 = v667;
            *(_DWORD *)(v807 + 8) = v668;
            v670 = 1;
            v667 = v807;
          }
          else
          {
            v670 = *(_QWORD *)(v367 & 0xFFFFFFFF8);
            v667 = v668 << 36;
          }
          v367 = v667 | v670;
          v89 = v864;
        }
        v872 = v367;
        v873 = *(_WORD *)(v365 + 16);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v861, 0, 0, 22, (uint64_t)&v871, v320, v321, v322);
        if ((v872 & 1) != 0 && (v872 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v872 & 0xFFFFFFFF8, v368, (uint64_t)v317, v318, v319, v320, v321, v322);
        if ((v871 & 1) != 0 && (v871 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v871 & 0xFFFFFFFF8, v368, (uint64_t)v317, v318, v319, v320, v321, v322);
      }
      if (*(_DWORD *)(v324 + 220))
      {
        v369 = 0;
        while (2)
        {
          v370 = *(_QWORD *)(*(_QWORD *)(v324 + 208) + 8 * v369);
          v371 = *((_QWORD *)v89 + 4);
          v372 = *(_DWORD *)(v370 + 56);
          v373 = (unint64_t *)(v370 + 24);
          v374 = *(_QWORD *)(v370 + 24);
          if ((v372 & 0x10) != 0)
          {
            v418 = *(_QWORD *)(v370 + 32);
            if ((int)v418 + (int)v374 > v374)
            {
              LODWORD(v419) = *(_DWORD *)(v371 + 164);
              v420 = *(_QWORD *)(v370 + 24);
              if (v419 <= v374)
                v419 = v374;
              else
                v419 = v419;
              do
              {
                if (v419 == v420)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198534490);
                }
                v421 = *(_QWORD *)(v371 + 152);
                v422 = *(_QWORD *)(v421 + 8 * v420);
                if ((v422 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v423 = *(_QWORD *)((v422 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                  if (v423)
                  {
                    *(_QWORD *)(v421 + 8 * v420) = v423 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v422) << 48);
                    v374 = *(_QWORD *)(v370 + 24);
                    v418 = *(_QWORD *)(v370 + 32);
                  }
                }
                ++v420;
              }
              while (v420 < (v374 + v418));
            }
          }
          else
          {
            if ((v374 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v389 = *(_QWORD *)((v374 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
              if (v389)
              {
                v390 = v389 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v374) << 48);
                *v373 = v390;
                v374 = v390;
              }
            }
            v375 = *(_QWORD *)(v370 + 32);
            if ((v375 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v391 = *(_QWORD *)((v375 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
              if (v391)
                *(_QWORD *)(v370 + 32) = v391 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v375) << 48);
            }
            v376 = *(_QWORD *)(v370 + 40);
            if ((v376 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v392 = *(_QWORD *)((v376 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
              if (v392)
                *(_QWORD *)(v370 + 40) = v392 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v376) << 48);
            }
          }
          v377 = *(unsigned __int16 *)(v370 + 18);
          switch(*(_WORD *)(v370 + 18))
          {
            case 0xF:
              v395 = *(_QWORD **)(v370 + 72);
              v396 = v395;
              do
              {
                v397 = v396;
                v396 = (_QWORD *)*v396;
              }
              while (v396);
              if (v397 != v395)
                *v395 = v397;
              *v373 = 0;
              *(_QWORD *)(v370 + 32) = 0;
              *(_QWORD *)(v370 + 40) = 0;
              JSC::DFG::Node::remove((JSC::DFG::Node *)v370, *((JSC::DFG::Graph **)v89 + 4), v317, v318, v319, v320, v321, v322);
              v398 = v397[3];
              v399 = HIDWORD(v398);
              v400 = v858 + v315 + (int)v398;
              if ((v398 & 0x80000000) == 0)
                v401 = (uint64_t)(((unint64_t)v398 << 32) - 0x500000000) >> 32;
              else
                v401 = (v398 ^ 0xFFFFFFFFLL) + v315;
              if (v399 == 2)
                v401 = v400;
              *(_QWORD *)(v370 + 88) = *((_QWORD *)v863 + v401);
              goto LABEL_424;
            case 0x10:
              v381 = *(_QWORD **)(v370 + 72);
              v382 = v381;
              do
              {
                v383 = v382;
                v382 = (_QWORD *)*v382;
              }
              while (v382);
              if (v383 != v381)
                *v381 = v383;
              if ((v372 & 0x100000) == 0)
              {
                JSC::DFG::Node::remove((JSC::DFG::Node *)v370, (JSC::DFG::Graph *)v371, v317, v318, v319, v320, v321, v322);
                goto LABEL_418;
              }
              v414 = v383[3];
              if (*((_BYTE *)v383 + 40) || !*((_BYTE *)v383 + 43))
                goto LABEL_464;
              if (*((_DWORD *)v383 + 14) == 1)
              {
                v415 = v383[3];
                v416 = 3;
              }
              else
              {
                v471 = v383;
                do
                {
                  v472 = v471;
                  v471 = (_QWORD *)*v471;
                }
                while (v471);
                if (v472 != v383)
                  *v383 = v472;
                v473 = v472[2];
                if (v473)
                {
                  if ((v473 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                  {
                    if (!HIDWORD(v414))
                      goto LABEL_548;
                    v474 = v383;
                    do
                    {
                      v475 = v474;
                      v474 = (_QWORD *)*v474;
                    }
                    while (v474);
                    if (v475 != v383)
                      *v383 = v475;
                    v476 = v475[2];
                    if (v476 && (v476 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                    {
                      v415 = v414;
                      v416 = 2;
                    }
                    else
                    {
LABEL_548:
                      v415 = v414;
                      if ((v473 & 0x2800FFFFFFF7) == 0 || (v473 & 0xFFFFD7FF00000008) != 0)
                      {
                        if (v473 == 0x10000000000)
                          v416 = 5;
                        else
                          v416 = 6;
                      }
                      else
                      {
                        v416 = 4;
                      }
                    }
                  }
                  else
                  {
                    v415 = v414;
                    v416 = 1;
                  }
                }
                else
                {
LABEL_464:
                  v415 = v414;
                  v416 = 6;
                }
              }
              v417 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v417 = v415;
              *(_DWORD *)(v417 + 8) = 0x3FFFFFFF;
              *(_BYTE *)(v417 + 12) = v416;
              *(_QWORD *)(v417 + 16) = 0;
              *(_QWORD *)(v417 + 16) = *(_QWORD *)(v371 + 592);
              *(_QWORD *)(v371 + 592) = v417;
              *(_WORD *)(v370 + 18) = 17;
              *(_DWORD *)(v370 + 56) |= 8u;
              *(_QWORD *)(v370 + 72) = v417;
              *(_QWORD *)(v370 + 80) = 0;
              v89 = v864;
              v315 = v843;
LABEL_418:
              v384 = v383[3];
              v385 = HIDWORD(v384);
              v386 = v858 + v315 + (int)v384;
              if ((v384 & 0x80000000) == 0)
                v387 = (uint64_t)(((unint64_t)v384 << 32) - 0x500000000) >> 32;
              else
                v387 = (v384 ^ 0xFFFFFFFFLL) + v315;
              if (v385 == 2)
                v387 = v386;
              *((_QWORD *)v863 + v387) = v374 & 0xFF00FFFFFFFFFFFFLL;
LABEL_424:
              ++v369;
              v388 = *(unsigned int *)(v324 + 220);
              if (v369 >= v388)
                goto LABEL_552;
              continue;
            case 0x11:
            case 0x12:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              goto LABEL_424;
            case 0x13:
              v424 = **(_QWORD **)(v370 + 72);
              v425 = HIDWORD(v424);
              v426 = v858 + v315 + (int)v424;
              if ((v424 & 0x80000000) == 0)
                v427 = (uint64_t)(((unint64_t)v424 << 32) - 0x500000000) >> 32;
              else
                v427 = (v424 ^ 0xFFFFFFFFLL) + v315;
              if (v425 == 2)
                v427 = v426;
              *((_QWORD *)v863 + v427) = v370;
              goto LABEL_424;
            case 0x14:
              v378 = *(_QWORD *)v370;
              if ((*(_QWORD *)v370 & 1) != 0)
              {
                v638 = *(_QWORD *)(v378 & 0xFFFFFFFF8);
                if ((v378 & 2) != 0
                  || ((v639 = *(unsigned int *)((v378 & 0xFFFFFFFF8) + 8), (_DWORD)v639 != 0x3FFFFFFF)
                    ? (v640 = (_DWORD)v639 == -1)
                    : (v640 = 1),
                      v640))
                {
                  v641 = 2;
                }
                else if (v639 >> 28)
                {
                  v802 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v802 = v638;
                  *(_DWORD *)(v802 + 8) = v639;
                  v641 = 1;
                  v638 = v802;
                }
                else
                {
                  v641 = *(_QWORD *)(v378 & 0xFFFFFFFF8);
                  v638 = v639 << 36;
                }
                v378 = v638 | v641;
              }
              v868 = v378;
              v379 = *(_QWORD *)(v370 + 8);
              if ((v379 & 1) != 0)
              {
                v642 = *(_QWORD *)(v379 & 0xFFFFFFFF8);
                if ((v379 & 2) != 0
                  || ((v643 = *(unsigned int *)((v379 & 0xFFFFFFFF8) + 8), (_DWORD)v643 != 0x3FFFFFFF)
                    ? (v644 = (_DWORD)v643 == -1)
                    : (v644 = 1),
                      v644))
                {
                  v645 = 2;
                }
                else if (v643 >> 28)
                {
                  v803 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v803 = v642;
                  *(_DWORD *)(v803 + 8) = v643;
                  v645 = 1;
                  v642 = v803;
                }
                else
                {
                  v645 = *(_QWORD *)(v379 & 0xFFFFFFFF8);
                  v642 = v643 << 36;
                }
                v379 = v642 | v645;
              }
              v869 = v379;
              v870 = *(_WORD *)(v370 + 16);
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v861, v369, 0, 18, (uint64_t)&v868, *(_QWORD *)(v370 + 72), v321, v322);
              if ((v869 & 1) != 0 && (v869 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v869 & 0xFFFFFFFF8, v380, (uint64_t)v317, v318, v319, v320, v321, v322);
              if ((v868 & 1) != 0 && (v868 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v868 & 0xFFFFFFFF8, v380, (uint64_t)v317, v318, v319, v320, v321, v322);
              *(_BYTE *)(v370 + 16) = 0;
              goto LABEL_424;
            case 0x1C:
              *v373 = 0;
              *(_QWORD *)(v370 + 32) = 0;
              *(_QWORD *)(v370 + 40) = 0;
              v393 = (JSC::DFG::Graph *)*((_QWORD *)v89 + 4);
              v394 = (JSC::DFG::Node *)v370;
              goto LABEL_436;
            case 0x1D:
              v402 = *(_QWORD **)(v370 + 72);
              v403 = v402;
              do
              {
                v404 = v403;
                v403 = (_QWORD *)*v403;
              }
              while (v403);
              if (v404 != v402)
                *v402 = v404;
              v405 = v404[3];
              v406 = HIDWORD(v405);
              v407 = v858 + v315 + (int)v405;
              if ((v405 & 0x80000000) == 0)
                v408 = (uint64_t)(((unint64_t)v405 << 32) - 0x500000000) >> 32;
              else
                v408 = (v405 ^ 0xFFFFFFFFLL) + v315;
              if (v406 == 2)
                v408 = v407;
              v409 = *((_QWORD *)v863 + v408);
              v410 = *(_DWORD *)(v409 + 56) & 7;
              v411 = 0xC4000000000000;
              if (v410 != 3)
                v411 = 0;
              v412 = v409 & 0xFF00FFFFFFFFFFFFLL;
              v210 = v410 == 5;
              v413 = 0xD0000000000000;
              if (!v210)
                v413 = v411;
              *(_QWORD *)(v370 + 24) = v413 | v412;
              goto LABEL_461;
            default:
              if (v377 == 38 || v377 == 39)
              {
LABEL_461:
                v394 = (JSC::DFG::Node *)v370;
                v393 = (JSC::DFG::Graph *)v371;
LABEL_436:
                JSC::DFG::Node::remove(v394, v393, v317, v318, v319, v320, v321, v322);
              }
              goto LABEL_424;
          }
        }
      }
      v388 = 0;
LABEL_552:
      v478 = v388 - 1;
      do
      {
        if (v478 >= v388)
        {
          __break(0xC471u);
          JUMPOUT(0x198534498);
        }
        v479 = *(_QWORD *)(*(_QWORD *)(v324 + 208) + 8 * v478--);
      }
      while (*(unsigned __int16 *)(v479 + 18) - 364 > 0xB);
      v480 = *(_QWORD *)v479;
      if ((*(_QWORD *)v479 & 1) != 0)
      {
        v655 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
        if ((v480 & 2) != 0
          || ((v656 = *(unsigned int *)((v480 & 0xFFFFFFFF8) + 8), (_DWORD)v656 != 0x3FFFFFFF)
            ? (v657 = (_DWORD)v656 == -1)
            : (v657 = 1),
              v657))
        {
          v658 = 2;
        }
        else if (v656 >> 28)
        {
          v804 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v804 = v655;
          *(_DWORD *)(v804 + 8) = v656;
          v658 = 1;
          v655 = v804;
        }
        else
        {
          v658 = v655;
          v655 = v656 << 36;
        }
        v480 = v655 | v658;
      }
      v481 = *(_QWORD *)(v479 + 8);
      if ((v481 & 1) != 0)
      {
        v659 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
        if ((v481 & 2) != 0
          || ((v660 = *(unsigned int *)((v481 & 0xFFFFFFFF8) + 8), (_DWORD)v660 != 0x3FFFFFFF)
            ? (v661 = (_DWORD)v660 == -1)
            : (v661 = 1),
              v661))
        {
          v662 = 2;
        }
        else if (v660 >> 28)
        {
          v805 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v805 = v659;
          *(_DWORD *)(v805 + 8) = v660;
          v662 = 1;
          v659 = v805;
        }
        else
        {
          v662 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
          v659 = v660 << 36;
        }
        v481 = v659 | v662;
      }
      v482 = (v478 + 1);
      v483 = *(unsigned __int16 *)(v479 + 16);
      v484 = *(unsigned int *)(v324 + 220);
      v485 = v484 - 1;
      v89 = v864;
      do
      {
        if (v485 >= v484)
        {
          __break(0xC471u);
          JUMPOUT(0x1985344A0);
        }
        v486 = *(_QWORD *)(*(_QWORD *)(v324 + 208) + 8 * v485--);
      }
      while (*(unsigned __int16 *)(v486 + 18) - 364 > 0xB);
      v848 = v481;
      v487 = 1;
      switch(*(_WORD *)(v486 + 18))
      {
        case 0x16C:
          goto LABEL_562;
        case 0x16D:
          v487 = 2;
          goto LABEL_562;
        case 0x16E:
          v487 = *(_DWORD *)(*(_QWORD *)(v486 + 72) + 12) + 1;
          goto LABEL_626;
        case 0x16F:
          v487 = *(_DWORD *)(*(_QWORD *)(v486 + 72) + 12);
LABEL_626:
          if (!v487)
            goto LABEL_627;
LABEL_562:
          v488 = v481 & 1;
          v489 = v487;
          break;
        default:
LABEL_627:
          v488 = v481 & 1;
          goto LABEL_628;
      }
      do
      {
        v490 = v489--;
        v491 = *(unsigned int *)(v324 + 220);
        v492 = v491 - 1;
        do
        {
          if (v492 >= v491)
          {
            __break(0xC471u);
            JUMPOUT(0x198534458);
          }
          v493 = *(_QWORD *)(*(_QWORD *)(v324 + 208) + 8 * v492);
          v494 = *(unsigned __int16 *)(v493 + 18);
          --v492;
        }
        while ((v494 - 364) > 0xB);
        if (v494 == 366)
        {
          v496 = *(_QWORD *)(v493 + 72);
          v526 = *(_DWORD *)(v496 + 12);
          if (v526 <= v489)
          {
            if (v526 != v489)
            {
              __break(0xC471u);
              JUMPOUT(0x198533EF4);
            }
          }
          else
          {
            v496 = *(_QWORD *)v496 + 32 * v489;
          }
          goto LABEL_573;
        }
        if (v494 == 367)
        {
          v800 = *(_QWORD *)(v493 + 72);
          if (*(_DWORD *)(v800 + 12) <= v489)
          {
            __break(0xC471u);
            JUMPOUT(0x1985344C0);
          }
          v495 = *(_QWORD *)v800 + 8 * v489;
        }
        else
        {
          if (v490 != 1)
          {
            if (v490 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198534104);
            }
            v496 = *(_QWORD *)(v493 + 72);
LABEL_573:
            v495 = v496 + 16;
            goto LABEL_574;
          }
          v495 = v493 + 72;
          if (v494 != 364)
            v495 = *(_QWORD *)v495;
        }
LABEL_574:
        v497 = *(_DWORD *)(*(_QWORD *)v495 + 8);
        if (HIDWORD(v888) <= v497)
        {
          __break(0xC471u);
          JUMPOUT(0x198534460);
        }
        v498 = *((_QWORD *)&v887 + 1) + 24 * v497;
        v499 = *(unsigned int *)(v498 + 20);
        if ((_DWORD)v499)
        {
          v500 = *(_QWORD *)(v498 + 8);
          v831 = v500 + 8 * v499;
          while (2)
          {
            v501 = *(unsigned int *)(**(_QWORD **)v500 + 16);
            if (*((_DWORD *)v864 + 65) <= v501)
            {
              __break(0xC471u);
              JUMPOUT(0x1985344C8);
            }
            v502 = *(_QWORD *)(*(_QWORD *)v500 + 16);
            v503 = *(_QWORD *)(*((_QWORD *)v864 + 31) + 8 * v501);
            if (!*(_BYTE *)(v503 + 40) && *(_BYTE *)(v503 + 43))
            {
              if (*(_DWORD *)(v503 + 56) == 1)
              {
                v504 = 0xC4000000000000;
                goto LABEL_583;
              }
              v519 = *(_QWORD **)(*((_QWORD *)v864 + 31) + 8 * v501);
              do
              {
                v520 = v519;
                v519 = (_QWORD *)*v519;
              }
              while (v519);
              if (v520 != (_QWORD *)v503)
                *(_QWORD *)v503 = v520;
              v521 = v520[2];
              if (v521)
              {
                if ((v521 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                {
                  v504 = 0x8000000000000;
                  goto LABEL_583;
                }
                if (*(_DWORD *)(v503 + 28))
                {
                  v522 = (_QWORD *)v503;
                  do
                  {
                    v523 = v522;
                    v522 = (_QWORD *)*v522;
                  }
                  while (v522);
                  if (v523 != (_QWORD *)v503)
                    *(_QWORD *)v503 = v523;
                  v524 = v523[2];
                  if (v524 && (v524 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                  {
                    v504 = 0xD0000000000000;
                    goto LABEL_583;
                  }
                }
                if ((v521 & 0x2800FFFFFFF7) != 0 && (v521 & 0xFFFFD7FF00000008) == 0)
                {
                  v504 = 0x24000000000000;
                  goto LABEL_583;
                }
                if (v521 == 0x10000000000)
                {
                  v504 = 0x1C000000000000;
LABEL_583:
                  v505 = v480;
                  if ((v480 & 1) != 0)
                  {
                    v671 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                    if ((v480 & 2) != 0
                      || (v672 = *(unsigned int *)((v480 & 0xFFFFFFFF8) + 8), (_DWORD)v672 == 0x3FFFFFFF)
                      || (_DWORD)v672 == -1)
                    {
                      v673 = 2;
                    }
                    else if (v672 >> 28)
                    {
                      v808 = v483;
                      v826 = v504;
                      v828 = v502;
                      v822 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                      v824 = *(_DWORD *)((v480 & 0xFFFFFFFF8) + 8);
                      v809 = WTF::fastMalloc((WTF *)0x10);
                      v504 = v826;
                      v502 = v828;
                      v481 = v848;
                      v483 = v808;
                      *(_QWORD *)v809 = v822;
                      *(_DWORD *)(v809 + 8) = v824;
                      v673 = 1;
                      v671 = v809;
                    }
                    else
                    {
                      v673 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                      v671 = v672 << 36;
                    }
                    v505 = v671 | v673;
                  }
                  v865 = v505;
                  v506 = v481;
                  if (v488)
                  {
                    v674 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                    if ((v481 & 2) != 0
                      || (v675 = *(unsigned int *)((v481 & 0xFFFFFFFF8) + 8), (_DWORD)v675 == 0x3FFFFFFF)
                      || (_DWORD)v675 == -1)
                    {
                      v676 = 2;
                    }
                    else if (v675 >> 28)
                    {
                      v810 = v483;
                      v827 = v504;
                      v829 = v502;
                      v823 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                      v825 = *(_DWORD *)((v481 & 0xFFFFFFFF8) + 8);
                      v811 = WTF::fastMalloc((WTF *)0x10);
                      v504 = v827;
                      v502 = v829;
                      v483 = v810;
                      *(_QWORD *)v811 = v823;
                      *(_DWORD *)(v811 + 8) = v825;
                      v676 = 1;
                      v674 = v811;
                    }
                    else
                    {
                      v676 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                      v674 = v675 << 36;
                    }
                    v506 = v674 | v676;
                  }
                  v866 = v506;
                  v507 = v483;
                  v867 = v483;
                  v508 = *(_QWORD *)(v503 + 24);
                  v509 = HIDWORD(v508);
                  v510 = v858 + v843 + (int)v508;
                  if ((v508 & 0x80000000) == 0)
                    v511 = (uint64_t)(((unint64_t)v508 << 32) - 0x500000000) >> 32;
                  else
                    v511 = (v508 ^ 0xFFFFFFFFLL) + v843;
                  if (v509 == 2)
                    v511 = v510;
                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v861, v482, 0, 0x1Au, (uint64_t)&v865, v502, *((_QWORD *)v863 + v511) & 0xFF00FFFFFFFFFFFFLL | v504);
                  if ((v866 & 1) != 0 && (v866 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v866 & 0xFFFFFFFF8, v512, v513, v514, v515, v516, v517, v518);
                  if ((v865 & 1) != 0 && (v865 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v865 & 0xFFFFFFFF8, v512, v513, v514, v515, v516, v517, v518);
                  v500 += 8;
                  v483 = v507;
                  v315 = v843;
                  v481 = v848;
                  if (v500 == v831)
                    goto LABEL_576;
                  continue;
                }
              }
            }
            break;
          }
          v504 = 0;
          goto LABEL_583;
        }
LABEL_576:
        v89 = v864;
      }
      while (v489);
LABEL_628:
      JSC::DFG::InsertionSet::execute(v861, (JSC::DFG::BasicBlock *)v324);
      if (v488 && (v848 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v848 & 0xFFFFFFFF8, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
      if ((v480 & 1) != 0 && (v480 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v480 & 0xFFFFFFFF8, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
      v323 = v856 + 1;
      if (v856 + 1 == (_QWORD *)v834)
      {
        v323 = (_QWORD *)v908;
        goto LABEL_632;
      }
    }
    v428 = *(uint64_t **)(v363 + 8);
    v429 = &v428[v364];
    while (2)
    {
      v430 = *v428;
      v431 = *(unsigned int *)(*(_QWORD *)*v428 + 16);
      if (*((_DWORD *)v89 + 65) <= v431)
      {
        __break(0xC471u);
        JUMPOUT(0x1985344D8);
      }
      v432 = *(_QWORD *)(*((_QWORD *)v89 + 31) + 8 * v431);
      v433 = *(WTF **)(v430 + 16);
      v893[0] = 0;
      v893[1] = v433;
      v434 = *((unsigned int *)v89 + 23);
      if ((_DWORD)v434 && *(_QWORD *)(*v830 + 16 * v434 - 16))
      {
        JSC::DFG::InsertionSet::insertSlow((uint64_t)v861, (unint64_t *)v893, (uint64_t)v317, v318, v319, v320, v321, v322);
      }
      else
      {
        if ((_DWORD)v434 == *((_DWORD *)v89 + 22))
        {
          v646 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v830, (void *)(v434 + 1), (unint64_t)v893, v318, v319, v320, v321, v322);
          v434 = *((unsigned int *)v89 + 23);
          v435 = *((_QWORD *)v89 + 10);
          v436 = *v646;
        }
        else
        {
          v435 = *((_QWORD *)v89 + 10);
          v436 = *(_OWORD *)v893;
        }
        *(_OWORD *)(v435 + 16 * v434) = v436;
        ++*((_DWORD *)v89 + 23);
      }
      v437 = *(_QWORD *)(v432 + 24);
      v438 = HIDWORD(v437);
      v439 = v858 + v315 + (int)v437;
      if ((v437 & 0x80000000) == 0)
        v440 = (uint64_t)(((unint64_t)v437 << 32) - 0x500000000) >> 32;
      else
        v440 = (v437 ^ 0xFFFFFFFFLL) + v315;
      if (v438 == 2)
        v440 = v439;
      *((_QWORD *)v863 + v440) = *(_QWORD *)(v430 + 16);
      if (!*(_DWORD *)(v324 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1985344E0);
      }
      v441 = **(_QWORD **)(v324 + 208);
      v442 = *(_QWORD *)v441;
      if ((*(_QWORD *)v441 & 1) != 0)
      {
        v693 = *(_QWORD *)(v442 & 0xFFFFFFFF8);
        if ((v442 & 2) != 0
          || ((v694 = *(unsigned int *)((v442 & 0xFFFFFFFF8) + 8), (_DWORD)v694 != 0x3FFFFFFF)
            ? (v695 = (_DWORD)v694 == -1)
            : (v695 = 1),
              v695))
        {
          v696 = 2;
        }
        else if (v694 >> 28)
        {
          v851 = *(_QWORD *)(v442 & 0xFFFFFFFF8);
          v693 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v693 = v851;
          *(_DWORD *)(v693 + 8) = v694;
          v696 = 1;
        }
        else
        {
          v696 = *(_QWORD *)(v442 & 0xFFFFFFFF8);
          v693 = v694 << 36;
        }
        v442 = v693 | v696;
      }
      v878 = v442;
      v443 = *(_QWORD *)(v441 + 8);
      if ((v443 & 1) != 0)
      {
        v697 = *(_QWORD *)(v443 & 0xFFFFFFFF8);
        if ((v443 & 2) != 0
          || ((v698 = *(unsigned int *)((v443 & 0xFFFFFFFF8) + 8), (_DWORD)v698 != 0x3FFFFFFF)
            ? (v699 = (_DWORD)v698 == -1)
            : (v699 = 1),
              v699))
        {
          v700 = 2;
        }
        else if (v698 >> 28)
        {
          v852 = *(_QWORD *)(v443 & 0xFFFFFFFF8);
          v697 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v697 = v852;
          *(_DWORD *)(v697 + 8) = v698;
          v700 = 1;
        }
        else
        {
          v700 = *(_QWORD *)(v443 & 0xFFFFFFFF8);
          v697 = v698 << 36;
        }
        v443 = v697 | v700;
      }
      v879 = v443;
      v881 = HIBYTE(*(_WORD *)(v441 + 16));
      v880 = 0;
      v444 = *(_QWORD *)(v430 + 16);
      v445 = *(_DWORD *)(v444 + 56) & 7;
      v446 = 0xC4000000000000;
      if (v445 != 3)
        v446 = 0;
      v447 = v444 & 0xFF00FFFFFFFFFFFFLL;
      v210 = v445 == 5;
      v448 = 0xD0000000000000;
      if (!v210)
        v448 = v446;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v861, 0, 0, 0x14u, (uint64_t)&v878, *(_QWORD *)(v432 + 24), v448 | v447);
      if ((v879 & 1) != 0 && (v879 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v879 & 0xFFFFFFFF8, v449, v450, v451, v452, v453, v454, v455);
      if ((v878 & 1) != 0 && (v878 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v878 & 0xFFFFFFFF8, v449, v450, v451, v452, v453, v454, v455);
      if (!*(_BYTE *)(v432 + 40) && *(_BYTE *)(v432 + 43))
      {
        if (*(_DWORD *)(v432 + 56) == 1)
        {
          v456 = 3;
        }
        else
        {
          v464 = (_QWORD *)v432;
          do
          {
            v465 = v464;
            v464 = (_QWORD *)*v464;
          }
          while (v464);
          if (v465 != (_QWORD *)v432)
            *(_QWORD *)v432 = v465;
          v466 = v465[2];
          if (!v466)
            goto LABEL_505;
          if ((v466 & 0xFFFFFFFCFFFFFFFFLL) != 0)
          {
            if (!*(_DWORD *)(v432 + 28))
              goto LABEL_530;
            v467 = (_QWORD *)v432;
            do
            {
              v468 = v467;
              v467 = (_QWORD *)*v467;
            }
            while (v467);
            if (v468 != (_QWORD *)v432)
              *(_QWORD *)v432 = v468;
            v469 = v468[2];
            if (v469 && (v469 & 0xFFFFFFF0FFFFFFFFLL) == 0)
            {
              v456 = 2;
            }
            else
            {
LABEL_530:
              if ((v466 & 0x2800FFFFFFF7) == 0 || (v466 & 0xFFFFD7FF00000008) != 0)
              {
                if (v466 == 0x10000000000)
                  v456 = 5;
                else
                  v456 = 6;
              }
              else
              {
                v456 = 4;
              }
            }
          }
          else
          {
            v456 = 1;
          }
        }
      }
      else
      {
LABEL_505:
        v456 = 6;
      }
      if (!*(_DWORD *)(v324 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1985344E8);
      }
      v457 = **(_QWORD **)(v324 + 208);
      v458 = *(_QWORD *)v457;
      if ((*(_QWORD *)v457 & 1) != 0)
      {
        v701 = *(_QWORD *)(v458 & 0xFFFFFFFF8);
        if ((v458 & 2) != 0
          || ((v702 = *(unsigned int *)((v458 & 0xFFFFFFFF8) + 8), (_DWORD)v702 != 0x3FFFFFFF)
            ? (v703 = (_DWORD)v702 == -1)
            : (v703 = 1),
              v703))
        {
          v704 = 2;
        }
        else if (v702 >> 28)
        {
          v853 = *(_QWORD *)(v458 & 0xFFFFFFFF8);
          v832 = *(_DWORD *)((v458 & 0xFFFFFFFF8) + 8);
          v701 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v701 = v853;
          *(_DWORD *)(v701 + 8) = v832;
          v704 = 1;
        }
        else
        {
          v704 = *(_QWORD *)(v458 & 0xFFFFFFFF8);
          v701 = v702 << 36;
        }
        v458 = v701 | v704;
      }
      v874 = v458;
      v459 = *(_QWORD *)(v457 + 8);
      if ((v459 & 1) != 0)
      {
        v705 = *(_QWORD *)(v459 & 0xFFFFFFFF8);
        if ((v459 & 2) != 0
          || ((v706 = *(unsigned int *)((v459 & 0xFFFFFFFF8) + 8), (_DWORD)v706 != 0x3FFFFFFF)
            ? (v707 = (_DWORD)v706 == -1)
            : (v707 = 1),
              v707))
        {
          v708 = 2;
        }
        else if (v706 >> 28)
        {
          v854 = *(_QWORD *)(v459 & 0xFFFFFFFF8);
          v833 = *(_DWORD *)((v459 & 0xFFFFFFFF8) + 8);
          v705 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v705 = v854;
          *(_DWORD *)(v705 + 8) = v833;
          v708 = 1;
        }
        else
        {
          v708 = *(_QWORD *)(v459 & 0xFFFFFFFF8);
          v705 = v706 << 36;
        }
        v459 = v705 | v708;
      }
      v875 = v459;
      v877 = HIBYTE(*(_WORD *)(v457 + 16));
      v876 = 0;
      v460 = *((_QWORD *)v864 + 4);
      v461 = *(_QWORD *)(v432 + 24);
      v462 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v462 = v461;
      *(_DWORD *)(v462 + 8) = 0x3FFFFFFF;
      *(_BYTE *)(v462 + 12) = v456;
      *(_QWORD *)(v462 + 16) = 0;
      *(_QWORD *)(v462 + 16) = *(_QWORD *)(v460 + 592);
      *(_QWORD *)(v460 + 592) = v462;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v861, 0, 0, 0x11u, (uint64_t)&v874, v462, qword_1991564A0[v456 - 1] | *(_QWORD *)(v430 + 16) & 0xFF00FFFFFFFFFFFFLL);
      if ((v875 & 1) != 0 && (v875 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v875 & 0xFFFFFFFF8, v463, (uint64_t)v317, v318, v319, v320, v321, v322);
      if ((v874 & 1) != 0 && (v874 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v874 & 0xFFFFFFFF8, v463, (uint64_t)v317, v318, v319, v320, v321, v322);
      ++v428;
      v89 = v864;
      if (v428 == v429)
        goto LABEL_394;
      continue;
    }
  }
LABEL_632:
  if (v323)
  {
    v908 = 0;
    LODWORD(v909) = 0;
    WTF::fastFree((unint64_t)v323, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
  }
  v528 = *(unsigned int *)(*((_QWORD *)v89 + 4) + 60);
  if ((_DWORD)v528)
  {
    v529 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v530 = &bmalloc_megapage_table;
    while (1)
    {
      --v528;
      v531 = *((_QWORD *)v89 + 4);
      if (*(_DWORD *)(v531 + 60) <= v528)
      {
        __break(0xC471u);
        JUMPOUT(0x198534480);
      }
      v532 = *(_QWORD *)(*(_QWORD *)(v531 + 48) + 8 * v528);
      if (v532)
        break;
LABEL_675:
      v89 = v864;
      if (!(_DWORD)v528)
        goto LABEL_696;
    }
    v533 = *(_DWORD *)(v532 + 36);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          do
          {
            if (!v533)
            {
              if (*(_DWORD *)(v532 + 32))
              {
                if (*(_DWORD *)(v532 + 36))
                  *(_DWORD *)(v532 + 36) = 0;
                v552 = *(_QWORD *)(v532 + 24);
                if (v552)
                {
                  *(_QWORD *)(v532 + 24) = 0;
                  *(_DWORD *)(v532 + 32) = 0;
                  WTF::fastFree(v552, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
                }
              }
              v553 = *(unsigned int *)(v532 + 84);
              if ((_DWORD)v553)
              {
                v554 = 0;
                v555 = 8 * v553;
                do
                {
                  *(_QWORD *)(*(_QWORD *)(v532 + 72) + v554) = 0;
                  v554 += 8;
                }
                while (v555 != v554);
              }
              v556 = *(unsigned int *)(v532 + 108);
              if ((_DWORD)v556)
              {
                v557 = 0;
                v558 = 8 * v556;
                do
                {
                  *(_QWORD *)(*(_QWORD *)(v532 + 96) + v557) = 0;
                  v557 += 8;
                }
                while (v558 != v557);
              }
              JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::clear((uint64_t *)(v532 + 120), v316, (uint64_t)v317, v318, v319, v320, v321, v322);
              JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::clear((uint64_t *)(v532 + 120), v559, v560, v561, v562, v563, v564, v565);
              v566 = (JSC::DFG::BasicBlock::SSAData *)WTF::fastMalloc((WTF *)0x80);
              JSC::DFG::BasicBlock::SSAData::SSAData(v566, (JSC::DFG::BasicBlock *)v532, v567, v568, v569, v570, v571, v572);
              v573 = *(JSC::DFG::BasicBlock::SSAData **)(v532 + 200);
              *(_QWORD *)(v532 + 200) = v566;
              if (v573)
              {
                JSC::DFG::BasicBlock::SSAData::~SSAData(v573, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
                WTF::fastFree(v574, v575, v576, v577, v578, v579, v580, v581);
              }
              goto LABEL_675;
            }
            if (*(_DWORD *)(v532 + 36) <= --v533)
            {
              __break(0xC471u);
              JUMPOUT(0x198534430);
            }
            v534 = *((_QWORD *)v864 + 4);
            v535 = *(_QWORD *)(*(_QWORD *)(v532 + 24) + 8 * v533);
            if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
            {
              if (*(_DWORD *)(v534 + 944) == 2)
              {
                v653 = *(unsigned int *)(v534 + 60);
                if ((_DWORD)v653)
                {
                  v589 = 0;
                  v654 = *(_QWORD *)(v534 + 48);
                  while (!*(_QWORD *)(v654 + 8 * v589))
                  {
                    if (v653 == ++v589)
                      goto LABEL_642;
                  }
                  if ((_DWORD)v653 != (_DWORD)v589)
                  {
                    v589 = v589;
                    do
                    {
                      if (v653 <= v589)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198534448);
                      }
                      v582 = *(_QWORD *)(*(_QWORD *)(v654 + 8 * v589) + 200);
                      v583 = *(unsigned int *)(v582 + 76);
                      if ((_DWORD)v583)
                      {
                        v584 = *(uint64_t **)(v582 + 64);
                        do
                        {
                          v585 = *v584++;
                          if (v585 == v535)
                          {
                            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v864 + 4), *(JSC::DFG::Node **)(*(_QWORD *)(v532 + 24) + 8 * v533), (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A1, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtHead.contains(node)");
                            __break(0xC471u);
                            JUMPOUT(0x19853409CLL);
                          }
                          --v583;
                        }
                        while (v583);
                      }
                      v586 = *(unsigned int *)(v582 + 92);
                      if ((_DWORD)v586)
                      {
                        v587 = *(uint64_t **)(v582 + 80);
                        do
                        {
                          v588 = *v587++;
                          if (v588 == v535)
                          {
                            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v864 + 4), *(JSC::DFG::Node **)(*(_QWORD *)(v532 + 24) + 8 * v533), (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A2, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtTail.contains(node)");
                            __break(0xC471u);
                            JUMPOUT(0x1985340E4);
                          }
                          --v586;
                        }
                        while (v586);
                      }
                      if (v653 > ++v589)
                      {
                        while (!*(_QWORD *)(v654 + 8 * v589))
                        {
                          if (v653 == ++v589)
                            goto LABEL_642;
                        }
                        v589 = v589;
                      }
                    }
                    while (v653 != v589);
                  }
                }
              }
            }
LABEL_642:
            v536 = *(unsigned int *)(v535 + 20);
            v537 = *(_QWORD *)(v534 + 1032);
            if (*(_QWORD *)(v537 + 8 * v536) != v535)
            {
              __break(0xC471u);
              JUMPOUT(0x198533210);
            }
            v538 = *(unsigned int *)(v534 + 1060);
            if ((_DWORD)v538 == *(_DWORD *)(v534 + 1056))
            {
              v545 = v529;
              v546 = v530;
              v547 = v538 + (v538 >> 2);
              if (v547 >= 0x10)
                v548 = v547 + 1;
              else
                v548 = 16;
              if (v548 <= v538 + 1)
                v549 = v538 + 1;
              else
                v549 = v548;
              if (v549 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198534450);
              }
              v550 = *(const void **)(v534 + 1048);
              v551 = (void *)WTF::fastMalloc((WTF *)(8 * v549));
              *(_DWORD *)(v534 + 1056) = v549;
              *(_QWORD *)(v534 + 1048) = v551;
              memcpy(v551, v550, 8 * v538);
              v530 = v546;
              v529 = v545;
              if (v550)
              {
                if (*(const void **)(v534 + 1048) == v550)
                {
                  *(_QWORD *)(v534 + 1048) = 0;
                  *(_DWORD *)(v534 + 1056) = 0;
                }
                WTF::fastFree((unint64_t)v550, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
              }
              v538 = *(unsigned int *)(v534 + 1060);
              *(_QWORD *)(*(_QWORD *)(v534 + 1048) + 8 * v538) = *(unsigned int *)(v535 + 20);
              v537 = *(_QWORD *)(v534 + 1032);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v534 + 1048) + 8 * v538) = v536;
            }
            *(_DWORD *)(v534 + 1060) = v538 + 1;
            v539 = *(unsigned int *)(v535 + 20);
            v540 = *(_QWORD *)(v537 + 8 * v539);
            *(_QWORD *)(v537 + 8 * v539) = 0;
          }
          while (!v540);
          v541 = *(_QWORD *)(v540 + 8);
          if ((v541 & 1) != 0 && (v541 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v541 & 0xFFFFFFFF8, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
          v542 = *(_QWORD *)v540;
          if ((*(_QWORD *)v540 & 1) != 0 && (v542 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v542 & 0xFFFFFFFF8, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
          v543 = *(_QWORD *)(v529 + 752);
          if (v543)
            break;
          pas_try_deallocate_slow_no_cache(v540, (uint64_t)&bmalloc_heap_config, 1);
        }
        if (v540 >> 43
          || ((*(unsigned int *)((char *)v530 + ((v540 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v540)) & 1) == 0)
        {
          break;
        }
LABEL_651:
        v544 = *(unsigned int *)(v543 + 8000);
        if (v544 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v543, v540, (os_unfair_lock_s *)5, v318, v319, v320, v321, v322);
        }
        else
        {
          *(_QWORD *)(v543 + 8 * v544) = v540 | 0x5000000000000;
          *(_DWORD *)(v543 + 8000) = v544 + 1;
        }
      }
      if (v540 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v540 >> 24)
      {
        v318 = 0;
      }
      else
      {
        v318 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v540 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v540) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v318 == 1)
          goto LABEL_651;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v543, v540, 1, v318, v319, v320, v321, v322);
    }
  }
LABEL_696:
  v590 = (uint64_t)v901;
  if (!v901)
  {
    v593 = 0;
    v591 = 0;
LABEL_747:
    v592 = &v901[4 * v591];
    goto LABEL_703;
  }
  v591 = *(v901 - 1);
  v592 = &v901[4 * v591];
  if (!*(v901 - 3))
  {
    v593 = &v901[4 * v591];
    goto LABEL_747;
  }
  v593 = v901;
  if ((_DWORD)v591)
  {
    v594 = 16 * v591;
    v593 = v901;
    while (*v593 >= 0xFFFFFFFE)
    {
      v593 += 4;
      v594 -= 16;
      if (!v594)
      {
        v593 = v592;
        break;
      }
    }
  }
LABEL_703:
  if (v901)
    v595 = &v901[4 * *(v901 - 1)];
  else
    v595 = 0;
  while (v593 != v595)
  {
    v596 = *((_QWORD *)v593 + 1);
    v597 = *(_QWORD *)(*((_QWORD *)v89 + 4) + 440);
    v598 = *(_DWORD *)(v597 - 8);
    v599 = (~(v596 << 32) + v596) ^ ((unint64_t)(~(v596 << 32) + v596) >> 22);
    v600 = 9 * ((v599 + ~(v599 << 13)) ^ ((v599 + ~(v599 << 13)) >> 8));
    v601 = (v600 ^ (v600 >> 15)) + ~((v600 ^ (v600 >> 15)) << 27);
    v602 = v598 & ((v601 >> 31) ^ v601);
    v603 = (uint64_t *)(v597 + 88 * v602);
    v604 = *v603;
    if (*v603 != v596)
    {
      v801 = 1;
      while (v604)
      {
        v602 = (v602 + v801) & v598;
        v603 = (uint64_t *)(v597 + 88 * v602);
        v604 = *v603;
        ++v801;
        if (*v603 == v596)
          goto LABEL_707;
      }
      v603 = (uint64_t *)(v597 + 88 * *(unsigned int *)(v597 - 4));
    }
LABEL_707:
    v605 = *v593;
    v606 = *((_DWORD *)v603 + 5);
    if (v606)
    {
      v607 = WTF::fastMalloc((WTF *)*((unsigned int *)v603 + 5));
      v608 = v607;
      v609 = *((unsigned int *)v603 + 5);
      if ((_DWORD)v609)
      {
        v610 = 0;
        while (1)
        {
          v611 = *((_QWORD *)v864 + 29);
          if (!v611)
            goto LABEL_768;
          v612 = *(_QWORD *)(v603[1] + 8 * v610);
          v613 = *(_DWORD *)(v611 - 8);
          v614 = (~(v612 << 32) + v612) ^ ((unint64_t)(~(v612 << 32) + v612) >> 22);
          v615 = 9 * ((v614 + ~(v614 << 13)) ^ ((v614 + ~(v614 << 13)) >> 8));
          v616 = (v615 ^ (v615 >> 15)) + ~((v615 ^ (v615 >> 15)) << 27);
          v617 = v613 & ((v616 >> 31) ^ v616);
          v618 = *(_QWORD *)(v611 + 16 * v617);
          if (v618 != v612)
            break;
LABEL_712:
          v619 = *(_QWORD *)(v611 + 16 * v617 + 8);
          if (!v619)
            goto LABEL_768;
          *(_BYTE *)(v607 + v610++) = *(_BYTE *)(*(_QWORD *)(v619 + 72) + 12);
          if (v610 == v609)
            goto LABEL_719;
        }
        v620 = 1;
        while (v618)
        {
          v617 = ((_DWORD)v617 + v620) & v613;
          v618 = *(_QWORD *)(v611 + 16 * v617);
          ++v620;
          if (v618 == v612)
            goto LABEL_712;
        }
LABEL_768:
        __break(0xC471u);
        JUMPOUT(0x1985331F0);
      }
    }
    else
    {
      v608 = 0;
      LODWORD(v609) = 0;
    }
LABEL_719:
    v621 = *((_QWORD *)v864 + 4);
    if (*(_DWORD *)(v621 + 460) <= v605)
    {
      __break(0xC471u);
      JUMPOUT(0x198534528);
    }
    v622 = *(_QWORD *)(v621 + 448) + 16 * v605;
    v623 = *(_QWORD *)v622;
    if (*(_QWORD *)v622)
    {
      *(_QWORD *)v622 = 0;
      *(_DWORD *)(v622 + 8) = 0;
      WTF::fastFree(v623, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
    }
    *(_QWORD *)v622 = v608;
    *(_DWORD *)(v622 + 8) = v606;
    *(_DWORD *)(v622 + 12) = v609;
    v624 = v593 + 4;
    v593 = v592;
    v89 = v864;
    if (v624 != v592)
    {
      v593 = v624;
      while (*v593 >= 0xFFFFFFFE)
      {
        v593 += 4;
        if (v593 == v592)
        {
          v593 = v592;
          break;
        }
      }
    }
  }
  v625 = *((_QWORD *)v89 + 4);
  v626 = *(_QWORD *)(v625 + 440);
  if (v626)
  {
    *(_QWORD *)(v625 + 440) = 0;
    v627 = *(unsigned int *)(v626 - 4);
    if ((_DWORD)v627)
    {
      v628 = v626 + 24;
      do
      {
        if (*(_QWORD *)(v628 - 24) != -1)
        {
          v629 = *(_QWORD *)(v628 - 16);
          if (v628 != v629 && v629 != 0)
          {
            *(_QWORD *)(v628 - 16) = 0;
            *(_DWORD *)(v628 - 8) = 0;
            WTF::fastFree(v629, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
          }
        }
        v628 += 88;
        --v627;
      }
      while (v627);
    }
    WTF::fastFree(v626 - 16, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
    v625 = *((_QWORD *)v864 + 4);
  }
  if (!*(_BYTE *)(v625 + 962))
  {
    __break(0xC471u);
    JUMPOUT(0x198533A60);
  }
  *(_BYTE *)(v625 + 962) = 0;
  *(_DWORD *)(v625 + 944) = 2;
  if (v863)
    WTF::fastFree((unint64_t)v863, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
  JSC::DFG::SSACalculator::~SSACalculator((JSC::DFG::SSACalculator *)&v885, v316, (uint64_t)v317, v318, v319, v320, v321, v322);
  if (v590)
    WTF::fastFree(v590 - 16, v631, v632, v633, v634, v635, v636, v637);
}

_QWORD *WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::add<JSC::BytecodeIndex&>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 8 * v27;
        goto LABEL_12;
      }
      if (v16 == -1)
        v25 = v15;
      v14 = (v14 + v26) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v26;
    }
    while (*v15);
    if (v25)
    {
      *v25 = 0xFFFFFFFF00000000;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v25;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_22:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, v15);
    v15 = result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_22;
LABEL_11:
  v23 = v19 + 8 * v22;
  v24 = 1;
LABEL_12:
  *v7 = v15;
  v7[1] = v23;
  *((_BYTE *)v7 + 16) = v24;
  return result;
}

unint64_t *WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(unint64_t *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v9 = result + 2;
    v8 = *result;
    if (result + 2 != (unint64_t *)*result)
    {
      if (!v8)
        goto LABEL_8;
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      v10 = result + 2;
      v11 = result;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      v9 = v10;
      result = v11;
      v8 = *v11;
    }
    if (v8)
      return result;
LABEL_8:
    *result = (unint64_t)v9;
    *((_DWORD *)result + 2) = 1;
  }
  return result;
}

void JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::clear(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[2];

  memset(v17, 0, sizeof(v17));
  if (*((_DWORD *)a1 + 3))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *a1;
      v12 = (uint64_t *)(*a1 + v9);
      v13 = *v12;
      if (v12 != (uint64_t *)v17)
      {
        if ((v13 & 1) != 0)
          WTF::fastFree(v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        if ((v17[0] & 1) == 0 || *(_QWORD *)&v17[0] == 4)
        {
          if ((*(_BYTE *)v12 & 2) != 0)
            v13 = *(_QWORD *)&v17[0] | 2;
          else
            v13 = *(_QWORD *)&v17[0] & 0xFFFFFFFFFFFFFFFDLL;
          *v12 = v13;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v12, v17);
          v13 = *v12;
        }
      }
      if ((v17[0] & 2) != 0)
        v14 = v13 | 2;
      else
        v14 = v13 & 0xFFFFFFFFFFFFFFFDLL;
      v15 = v11 + v9;
      *(_QWORD *)v15 = v14;
      v16 = *(_OWORD *)((char *)v17 + 8);
      *(_QWORD *)(v15 + 24) = *((_QWORD *)&v17[1] + 1);
      *(_OWORD *)(v15 + 8) = v16;
      ++v10;
      v9 += 32;
    }
    while (v10 < *((unsigned int *)a1 + 3));
    if ((v17[0] & 1) != 0)
      WTF::fastFree(*(_QWORD *)&v17[0] & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DFG::BasicBlock *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 *v16;
  __n128 *v17;

  v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    v4 = 0;
    goto LABEL_3;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!(_DWORD)v3)
  {
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v5 = (_DWORD)v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  if (v5)
  {
    v14 = v5;
    v15 = (_QWORD *)(v6 + 24);
    do
    {
      *((_DWORD *)v15 - 2) = -1;
      *v15 = 0;
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v16 = (__n128 *)v2;
    do
    {
      if (v16->n128_u32[0] <= 0xFFFFFFFD)
      {
        v17 = v16;
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DFG::BasicBlock *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(*a1, v16);
        v16 = v17;
      }
      ++v16;
      --v3;
    }
    while (v3);
    goto LABEL_16;
  }
  if (v2)
LABEL_16:
    WTF::fastFree(v2 - 16, v7, v8, v9, v10, v11, v12, v13);
}

__n128 WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DFG::BasicBlock *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DFG::BasicBlock *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((a2->n128_u32[0] + ~(a2->n128_u32[0] << 15)) ^ ((a2->n128_u32[0] + ~(a2->n128_u32[0] << 15)) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(_DWORD *)(a1 + 16 * v6) != -1);
  result = *a2;
  *(__n128 *)(a1 + 16 * v6) = *a2;
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *result;
  _DWORD *v19;
  _QWORD *v20;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v17 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v19 = (_DWORD *)v6;
    do
    {
      if ((*v19 + 1) >= 2)
      {
        v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, v19);
        if (v19 == a3)
          v17 = v20;
      }
      v19 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_11;
  }
  result = 0;
  if (v6)
  {
LABEL_11:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  result = WTF::fastMalloc((WTF *)(8 * a1 + 16)) + 16;
  if (a1)
  {
    v3 = a1;
    v4 = (_QWORD *)result;
    do
    {
      *v4++ = 0xFFFFFFFF00000000;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::BytecodeIndex>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::BytecodeIndex,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(_DWORD *)(a1 + 8 * v6));
  result = (_QWORD *)(a1 + 8 * v6);
  *result = *(_QWORD *)a2;
  return result;
}

uint64_t JSC::DFG::performSSALowering(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  JSC::DFG *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::NodeOrigin *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int hasExitSite;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::DFG::NodeOrigin *v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  WTF::Lock *v68;
  int v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::DFG::NodeOrigin *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  __int16 v148;
  JSC::DFG *v149;
  __int128 v150;
  char v151;
  WTF *v152;
  JSC::DFG *v153;
  WTF *v154;
  uint64_t v155;
  _BYTE v156[128];
  uint64_t v157;
  unint64_t v158;
  JSC::DFG::NodeOrigin *v159;
  _QWORD v160[2];
  __int128 v161;
  double v162;
  char v163;
  _QWORD v164[3];
  __int128 v165;
  __int16 v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v145 = -1;
  v146 = -1;
  v147 = 0;
  v148 = 256;
  v149 = this;
  *(_QWORD *)&v150 = "SSA lowering";
  *((_QWORD *)&v150 + 1) = 13;
  v151 = 0;
  v152 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v145);
  v153 = this;
  v154 = (WTF *)v156;
  v155 = 8;
  v160[0] = "DFG";
  v160[1] = 4;
  v161 = v150;
  v162 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v112 = mach_absolute_time();
    v114 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v114 != -1)
    {
      *(_QWORD *)&v165 = &v163;
      v164[0] = &v165;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v164, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v113) = dword_1ECF4400C;
    v162 = (double)(v112 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v113 * 1000000000.0);
  }
  v3 = v149;
  if (*((_DWORD *)v149 + 236) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1985353D4);
  }
  v4 = *((_DWORD *)v149 + 15);
  if (v4)
  {
    while (1)
    {
      if (*((_DWORD *)v149 + 15) <= --v4)
      {
        __break(0xC471u);
        JUMPOUT(0x198535684);
      }
      v5 = *(_QWORD *)(*((_QWORD *)v149 + 6) + 8 * v4);
      v157 = v5;
      if (v5)
      {
        LODWORD(v158) = 0;
        if (*(_DWORD *)(v5 + 220))
        {
          v6 = 0;
          do
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 8 * v6);
            v159 = (JSC::DFG::NodeOrigin *)v7;
            v8 = *(unsigned __int16 *)(v7 + 18);
            if (v8 > 0x64)
            {
              if (*(unsigned __int16 *)(v7 + 18) <= 0xC9u)
              {
                if (v8 - 101 >= 2)
                  goto LABEL_10;
                v16 = *(_QWORD *)(v7 + 24);
                v17 = *((_DWORD *)v149 + 41);
                if (v17 <= v16)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198535644);
                }
                if (v17 <= (int)v16 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19853564CLL);
                }
                if (v17 <= (int)v16 + 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198535654);
                }
                v18 = *((_QWORD *)v149 + 19);
                v19 = *(_QWORD *)(v18 + 8 * v16);
                v20 = *(_QWORD *)(v18 + 8 * (v16 + 3));
                if ((JSC::DFG::SSALoweringPhase::lowerBoundsCheck((uint64_t)&v145, v19, *(_QWORD *)(v18 + 8 * (v16 + 1)), v20) & 1) != 0)goto LABEL_10;
                v21 = v159;
                v22 = *((unsigned __int16 *)v159 + 9);
                if (v22 == 146)
                  v23 = *((_DWORD *)v159 + 20);
                else
                  v23 = *((_DWORD *)v159 + 18);
                if (v23 != 25)
                {
                  v136 = JSC::DFG::toTypedArrayType(v23);
                  if (!v136 || v136 == 12)
                    goto LABEL_10;
                  v21 = v159;
                  v22 = *((unsigned __int16 *)v159 + 9);
                }
                if (v22 == 146)
                  v24 = *((_DWORD *)v21 + 20);
                else
                  v24 = *((_DWORD *)v21 + 18);
                if (BYTE2(v24) - 3 > 1)
                  goto LABEL_10;
                if (v22 == 146)
                  v25 = *((_DWORD *)v21 + 20);
                else
                  v25 = *((_DWORD *)v21 + 18);
                if ((v25 & 0x20000000) != 0)
                {
LABEL_95:
                  v72 = v158;
                  v73 = *(_QWORD *)v21;
                  if ((*(_QWORD *)v21 & 1) != 0)
                  {
                    v139 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
                    v143 = v158;
                    if ((v73 & 2) != 0
                      || (v128 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v128 == 0x3FFFFFFF)
                      || (_DWORD)v128 == -1)
                    {
                      v129 = 2;
                    }
                    else if (v128 >> 28)
                    {
                      v134 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v134 = v139;
                      *(_DWORD *)(v134 + 8) = v128;
                      v129 = 1;
                      v139 = v134;
                    }
                    else
                    {
                      v129 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
                      v139 = v128 << 36;
                    }
                    v72 = v143;
                    v73 = v139 | v129;
                  }
                  *(_QWORD *)&v165 = v73;
                  v74 = *((_QWORD *)v21 + 1);
                  if ((v74 & 1) != 0)
                  {
                    v140 = *(_QWORD *)(v74 & 0xFFFFFFFF8);
                    v144 = v72;
                    if ((v74 & 2) != 0
                      || (v130 = *(unsigned int *)((v74 & 0xFFFFFFFF8) + 8), (_DWORD)v130 == 0x3FFFFFFF)
                      || (_DWORD)v130 == -1)
                    {
                      v131 = 2;
                    }
                    else if (v130 >> 28)
                    {
                      v135 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v135 = v140;
                      *(_DWORD *)(v135 + 8) = v130;
                      v131 = 1;
                      v140 = v135;
                    }
                    else
                    {
                      v131 = *(_QWORD *)(v74 & 0xFFFFFFFF8);
                      v140 = v130 << 36;
                    }
                    v72 = v144;
                    v74 = v140 | v131;
                  }
                  *((_QWORD *)&v165 + 1) = v74;
                  v166 = *((_WORD *)v21 + 8);
                  if (*((_WORD *)v159 + 9) == 146)
                    v75 = *((unsigned int *)v159 + 20);
                  else
                    v75 = *((unsigned int *)v159 + 18);
                  v83 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)&v153, v72, 0xC00000000, 0xA0u, (uint64_t)&v165, v75, v19, v20);
                  if ((BYTE8(v165) & 1) != 0 && (*((_QWORD *)&v165 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v165 + 1) & 0xFFFFFFFF8, v76, v77, v78, v79, v80, v81, v82);
                  if ((v165 & 1) != 0 && (v165 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v165 & 0xFFFFFFFF8, v76, v77, v78, v79, v80, v81, v82);
                  *(_DWORD *)(v83 + 56) = *(_DWORD *)(v83 + 56) & 0xFFFFFFF8 | 5;
                  v84 = v159;
                  if (*((_WORD *)v159 + 9) == 146)
                    v85 = *((_DWORD *)v159 + 20);
                  else
                    v85 = *((_DWORD *)v159 + 18);
                  if ((v85 & 0x40000000) != 0)
                  {
                    v86 = v158;
                    JSC::DFG::NodeOrigin::withExitOK((uint64_t)v159, 1, (uint64_t)v164);
                    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)&v153, v86, 0, 22, (uint64_t)v164, v87, v88, v89);
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v164, v90, v91, v92, v93, v94, v95, v96);
                    v84 = v159;
                  }
                  v97 = *((_DWORD *)v84 + 6) + 4;
                  if (*((_DWORD *)v149 + 41) <= v97)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198535664);
                  }
                  *(_QWORD *)(*((_QWORD *)v149 + 19) + 8 * v97) = v83 & 0xFF00FFFFFFFFFFFFLL | 0xD0000000000000;
                  goto LABEL_10;
                }
                v26 = *(_QWORD *)v21;
                v27 = *(_QWORD *)v21 & 0xFFFFFFFF8;
                if ((*(_QWORD *)v21 & 1) != 0)
                  v27 = *(_QWORD *)(*(_QWORD *)v21 & 0xFFFFFFFF8);
                if (v27)
                  v28 = *(_QWORD *)(v27 + 8);
                else
                  v28 = *((_QWORD *)v149 + 5);
                if ((v26 & 2) != 0)
                {
                  LODWORD(v29) = -1;
                }
                else if ((v26 & 1) != 0)
                {
                  LODWORD(v29) = *(_DWORD *)((*(_QWORD *)v21 & 0xFFFFFFFF8) + 8);
                }
                else
                {
                  v29 = v26 >> 36;
                }
                v30 = *(_QWORD *)(v28 + 56);
                LODWORD(v164[0]) = v29;
                WORD2(v164[0]) = 9;
                BYTE6(v164[0]) = 0;
                v31 = (unsigned __int8 *)(v30 + 31);
                v167 = 0;
                *((_QWORD *)&v165 + 1) = v30 + 31;
                LOBYTE(v166) = 1;
                if (__ldaxr((unsigned __int8 *)(v30 + 31)))
                {
                  __clrex();
                  goto LABEL_52;
                }
                if (__stxr(1u, v31))
LABEL_52:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
                v167 = 1;
                hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v30 + 96), (uint64_t)&v165, (int *)v164);
                if ((_BYTE)v166)
                {
                  v68 = (WTF::Lock *)*((_QWORD *)&v165 + 1);
                  v69 = __ldxr(*((unsigned __int8 **)&v165 + 1));
                  if (v69 == 1)
                  {
                    if (!__stlxr(0, *((unsigned __int8 **)&v165 + 1)))
                      goto LABEL_54;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(v68, v33, v34, v35, v36, v37, v38, v39);
                }
LABEL_54:
                v21 = v159;
                if (hasExitSite)
                  goto LABEL_95;
                v41 = v158;
                v42 = *(_QWORD *)v159;
                if ((*(_QWORD *)v159 & 1) != 0)
                {
                  v137 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
                  v141 = v158;
                  if ((v42 & 2) != 0
                    || (v124 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v124 == 0x3FFFFFFF)
                    || (_DWORD)v124 == -1)
                  {
                    v125 = 2;
                  }
                  else if (v124 >> 28)
                  {
                    v132 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v132 = v137;
                    *(_DWORD *)(v132 + 8) = v124;
                    v125 = 1;
                    v137 = v132;
                  }
                  else
                  {
                    v125 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
                    v137 = v124 << 36;
                  }
                  v41 = v141;
                  v42 = v137 | v125;
                }
                *(_QWORD *)&v165 = v42;
                v43 = *((_QWORD *)v21 + 1);
                if ((v43 & 1) != 0)
                {
                  v138 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
                  v142 = v41;
                  if ((v43 & 2) != 0
                    || (v126 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v126 == 0x3FFFFFFF)
                    || (_DWORD)v126 == -1)
                  {
                    v127 = 2;
                  }
                  else if (v126 >> 28)
                  {
                    v133 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v133 = v138;
                    *(_DWORD *)(v133 + 8) = v126;
                    v127 = 1;
                    v138 = v133;
                  }
                  else
                  {
                    v127 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
                    v138 = v126 << 36;
                  }
                  v41 = v142;
                  v43 = v138 | v127;
                }
                *((_QWORD *)&v165 + 1) = v43;
                v166 = *((_WORD *)v21 + 8);
                if (*((_WORD *)v159 + 9) == 146)
                  v44 = *((unsigned int *)v159 + 20);
                else
                  v44 = *((unsigned int *)v159 + 18);
                v52 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)&v153, v41, 0x300000000, 0x9Eu, (uint64_t)&v165, v44, v19, v20);
                if ((BYTE8(v165) & 1) != 0 && (*((_QWORD *)&v165 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v165 + 1) & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
                if ((v165 & 1) != 0 && (v165 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v165 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
                v53 = v159;
                if (*((_WORD *)v159 + 9) == 146)
                  v54 = *((_DWORD *)v159 + 20);
                else
                  v54 = *((_DWORD *)v159 + 18);
                if ((v54 & 0x40000000) != 0)
                {
                  v98 = v158;
                  JSC::DFG::NodeOrigin::withExitOK((uint64_t)v159, 1, (uint64_t)v164);
                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)&v153, v98, 0, 22, (uint64_t)v164, v99, v100, v101);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v164, v102, v103, v104, v105, v106, v107, v108);
                  v53 = v159;
                }
                v55 = *((_DWORD *)v53 + 6) + 4;
                if (*((_DWORD *)v149 + 41) <= v55)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19853565CLL);
                }
                *(_QWORD *)(*((_QWORD *)v149 + 19) + 8 * v55) = v52 & 0xFF00FFFFFFFFFFFFLL | 0x8000000000000;
                goto LABEL_10;
              }
              if (v8 == 388)
              {
LABEL_25:
                v10 = *(_QWORD *)(v7 + 24);
                v11 = *((_DWORD *)v149 + 41);
                if (v11 <= v10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19853566CLL);
                }
                if (v11 <= (int)v10 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198535674);
                }
                if (v11 <= (int)v10 + 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19853567CLL);
                }
                v12 = *((_QWORD *)v149 + 19);
                v13 = *(_QWORD *)(v12 + 8 * v10);
                v14 = *(_QWORD *)(v12 + 8 * (v10 + 1));
                v15 = *(_QWORD *)(v12 + 8 * (v10 + 2));
                goto LABEL_29;
              }
              if (v8 == 384)
              {
                v13 = *(_QWORD *)(v7 + 24);
                if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
                {
                  v115 = *((_DWORD *)v149 + 41);
                  if (v115 <= v13)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19853562CLL);
                  }
                  v116 = v13 + 1;
                  if (v115 <= (int)v13 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198535634);
                  }
                  v117 = v13 + 2;
                  if (v115 <= (int)v13 + 2)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19853563CLL);
                  }
                  v118 = *((_QWORD *)v149 + 19);
                  v13 = *(_QWORD *)(v118 + 8 * v13);
                  v70 = (uint64_t *)(v118 + 8 * v116);
                  v71 = (uint64_t *)(v118 + 8 * v117);
                }
                else
                {
                  v70 = (uint64_t *)(v7 + 32);
                  v71 = (uint64_t *)(v7 + 40);
                }
                v14 = *v70;
                v15 = *v71;
                goto LABEL_29;
              }
              v9 = v8 - 202;
              if (v9 <= 9)
              {
                if (((1 << v9) & 0x3CB) != 0)
                {
                  v119 = 3;
                  goto LABEL_110;
                }
                if (v9 == 2)
                {
                  v119 = 4;
LABEL_110:
                  v109 = v7 + 24;
                  v13 = *(_QWORD *)(v7 + 24);
                  if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
                  {
                    v120 = *((_DWORD *)v149 + 41);
                    if (v120 <= v13)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198535614);
                    }
                    v121 = v13 + 1;
                    if (v120 <= (int)v13 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19853561CLL);
                    }
                    v122 = v119 + v13;
                    if (v120 <= v122)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198535624);
                    }
                    v123 = *((_QWORD *)v149 + 19);
                    v13 = *(_QWORD *)(v123 + 8 * v13);
                    v110 = (uint64_t *)(v123 + 8 * v121);
                    v111 = (uint64_t *)(v123 + 8 * v122);
                  }
                  else
                  {
                    v110 = (uint64_t *)(v7 + 32);
                    v111 = (uint64_t *)(v109 + 8 * v119);
                  }
                  v14 = *v110;
                  v15 = *v111;
LABEL_29:
                  JSC::DFG::SSALoweringPhase::lowerBoundsCheck((uint64_t)&v145, v13, v14, v15);
                  goto LABEL_10;
                }
                if (v9 == 5)
                {
                  v119 = 2;
                  goto LABEL_110;
                }
              }
            }
            else if (v8 == 92)
            {
              goto LABEL_25;
            }
LABEL_10:
            v6 = v158 + 1;
            LODWORD(v158) = v6;
            v5 = v157;
          }
          while (*(_DWORD *)(v157 + 220) > v6);
        }
        JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v153, (JSC::DFG::BasicBlock *)v5);
      }
      if (!v4)
      {
        v3 = v149;
        break;
      }
    }
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v56 = (*(_DWORD *)(*((_QWORD *)v3 + 3) + 16) & 0xFFFFFFFE) == 4) : (v56 = 0),
        !v56 ? (v57 = BYTE2(qword_1ECF4C32A) == 0) : (v57 = 0),
        !v57))
  {
    v165 = v150;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v3 + 1088, "Phase ", (uint64_t)&v165, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v160);
  v65 = v154;
  if (v156 != (_BYTE *)v154 && v154)
  {
    v154 = 0;
    LODWORD(v155) = 0;
    WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v151)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v145, (uint64_t)v58, v59, v60, v61, v62, v63, v64);
  v66 = v152;
  v152 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 1)
      WTF::fastFree((unint64_t)v66, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v66;
  }
  return 1;
}

void JSC::DFG::SnippetParams::addSlowPathCallImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, __int16 a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  WTF *v17;
  WTF *v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  _BYTE *v34;
  WTF *v35;
  WTF *v36;
  unsigned int v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  WTF *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  _BYTE v69[24];
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE v73[24];
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  _BYTE v77[24];
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE v81[24];
  _BYTE *v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE v85[24];
  _BYTE *v86;
  unsigned int v87;
  unsigned int v88;
  _BYTE v89[32];

  v10 = *(_QWORD *)(a1 + 64);
  v11 = *((unsigned int *)a2 + 3);
  v67 = (WTF *)v69;
  v68 = v11;
  if (v11 < 3)
  {
    v12 = v69;
    if (!(_DWORD)v11)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v11 >= 0x15555556)
    goto LABEL_73;
  v12 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v11));
  v67 = (WTF *)v12;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v11)
  {
LABEL_6:
    v13 = *a2;
    v14 = *a2 + 12 * v11;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v13;
      *(_QWORD *)(v12 + 4) = *(_QWORD *)(v13 + 4);
      v13 += 12;
      v12 += 12;
    }
    while (v13 != v14);
  }
LABEL_8:
  v15 = v68;
  v70 = (WTF *)v73;
  v71 = 2;
  v72 = v68;
  if (v68 < 3)
  {
    v16 = v73;
    if (!v68)
      goto LABEL_14;
  }
  else
  {
    if (v68 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198535CD4);
    }
    v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v68));
    v71 = 12 * v68 / 0xC;
    v70 = (WTF *)v16;
    v15 = v68;
  }
  v17 = v67;
  v18 = (WTF *)((char *)v67 + 12 * v15);
  do
  {
    *(_DWORD *)v16 = *(_DWORD *)v17;
    *(_QWORD *)(v16 + 4) = *(_QWORD *)((char *)v17 + 4);
    v17 = (WTF *)((char *)v17 + 12);
    v16 += 12;
  }
  while (v17 != v18);
LABEL_14:
  v19 = v72;
  v74 = (WTF *)v77;
  v75 = 2;
  v76 = v72;
  if (v72 < 3)
  {
    v21 = v77;
    if (!v72)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (v72 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x198535CDCLL);
  }
  v20 = 12 * v72;
  v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v72));
  v75 = (v20 & 0xFFFFFFFC) / 0xC;
  v74 = (WTF *)v21;
  v19 = v72;
  if (v72)
  {
LABEL_19:
    v22 = v70;
    v23 = (WTF *)((char *)v70 + 12 * v19);
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v22 + 4);
      v22 = (WTF *)((char *)v22 + 12);
      v21 += 12;
    }
    while (v22 != v23);
  }
LABEL_21:
  v24 = WTF::fastMalloc((WTF *)0xA8);
  v25 = v76;
  v78 = (WTF *)v81;
  v79 = 2;
  v80 = v76;
  if (v76 < 3)
  {
    v27 = v81;
  }
  else
  {
    if (v76 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198535CE4);
    }
    v26 = 12 * v76;
    v27 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v76));
    v79 = (v26 & 0xFFFFFFFC) / 0xC;
    v78 = (WTF *)v27;
    v25 = v76;
  }
  if (v25)
  {
    v28 = v74;
    v29 = (WTF *)((char *)v74 + 12 * v25);
    do
    {
      *(_DWORD *)v27 = *(_DWORD *)v28;
      *(_QWORD *)(v27 + 4) = *(_QWORD *)((char *)v28 + 4);
      v28 = (WTF *)((char *)v28 + 12);
      v27 += 12;
    }
    while (v28 != v29);
  }
  v30 = v80;
  v82 = v85;
  v83 = 2;
  v84 = v80;
  if (v80 < 3)
  {
    v31 = a4;
    v32 = a6;
    v34 = v85;
  }
  else
  {
    if (v80 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198535CECLL);
    }
    v31 = a4;
    v32 = a6;
    v33 = 12 * v80;
    v34 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v80));
    v83 = (v33 & 0xFFFFFFFC) / 0xC;
    v82 = v34;
    v30 = v80;
  }
  if (v30)
  {
    v35 = v78;
    v36 = (WTF *)((char *)v78 + 12 * v30);
    do
    {
      *(_DWORD *)v34 = *(_DWORD *)v35;
      *(_QWORD *)(v34 + 4) = *(_QWORD *)((char *)v35 + 4);
      v35 = (WTF *)((char *)v35 + 12);
      v34 += 12;
    }
    while (v35 != v36);
  }
  v37 = v84;
  v86 = v89;
  v87 = 2;
  v88 = v84;
  if (v84 < 3)
  {
    v39 = v89;
    if (!v84)
      goto LABEL_42;
LABEL_40:
    v40 = v82;
    v41 = &v82[12 * v37];
    do
    {
      *(_DWORD *)v39 = *(_DWORD *)v40;
      *(_QWORD *)(v39 + 4) = *(_QWORD *)(v40 + 4);
      v40 += 12;
      v39 += 12;
    }
    while (v40 != v41);
    goto LABEL_42;
  }
  if (v84 >= 0x15555556)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x198535CCCLL);
  }
  v38 = 12 * v84;
  v39 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v84));
  v87 = (v38 & 0xFFFFFFFC) / 0xC;
  v86 = v39;
  v37 = v84;
  if (v84)
    goto LABEL_40;
LABEL_42:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v24, (uint64_t *)&v86, (_DWORD *)v10);
  v49 = (unint64_t)v86;
  if (v89 != v86 && v86 != 0)
  {
    v86 = 0;
    v87 = 0;
    WTF::fastFree(v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v24 = off_1E358E6F8;
  *(_QWORD *)(v24 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v24 + 100) = 0;
  *(_BYTE *)(v24 + 102) = a5;
  *(_QWORD *)(v24 + 104) = v24 + 120;
  *(_QWORD *)(v24 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v10, 0, v24 + 104, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v47, v48);
  v58 = (unint64_t)v82;
  if (v85 != v82 && v82)
  {
    v82 = 0;
    v83 = 0;
    WTF::fastFree(v58, v51, v52, v53, v54, v55, v56, v57);
  }
  *(_QWORD *)v24 = &off_1E358E6C8;
  *(_QWORD *)(v24 + 152) = v31;
  *(_WORD *)(v24 + 160) = v32;
  v86 = (_BYTE *)v24;
  v59 = v78;
  if (v81 != (_BYTE *)v78 && v78)
  {
    v78 = 0;
    v79 = 0;
    WTF::fastFree((unint64_t)v59, v51, v52, v53, v54, v55, v56, v57);
  }
  v60 = v74;
  if (v77 != (_BYTE *)v74 && v74)
  {
    v74 = 0;
    v75 = 0;
    WTF::fastFree((unint64_t)v60, v51, v52, v53, v54, v55, v56, v57);
  }
  v61 = (_QWORD *)(v10 + 5656);
  v62 = *(unsigned int *)(v10 + 5668);
  if ((_DWORD)v62 == *(_DWORD *)(v10 + 5664))
  {
    v64 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v86);
    v62 = *(unsigned int *)(v10 + 5668);
    v63 = (uint64_t *)(*(_QWORD *)(v10 + 5656) + 8 * v62);
    v24 = *v64;
  }
  else
  {
    v63 = (uint64_t *)(*v61 + 8 * v62);
    v64 = (uint64_t *)&v86;
  }
  *v64 = 0;
  *v63 = v24;
  *(_DWORD *)(v10 + 5668) = v62 + 1;
  v65 = (uint64_t)v86;
  v86 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = v70;
  if (v73 != (_BYTE *)v70 && v70)
  {
    v70 = 0;
    v71 = 0;
    WTF::fastFree((unint64_t)v66, v51, v52, v53, v54, v55, v56, v57);
  }
  if (v69 != (_BYTE *)v67)
  {
    if (v67)
      WTF::fastFree((unint64_t)v67, v51, v52, v53, v54, v55, v56, v57);
  }
}

uint64_t JSC::DFG::performStackLayout(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  unint64_t v3;
  WTF *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::DFG *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27;
  BOOL v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int **v34;
  unint64_t v35;
  unint64_t v36;
  JSC::DFG *v37;
  unint64_t i;
  int v39;
  unint64_t j;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v67;
  int v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  int v115;
  int v116;
  char v117;
  BOOL v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  int v123;
  _DWORD *v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unint64_t v133;
  JSC::DFG *v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  __int16 v155;
  JSC::DFG *v156;
  __int128 v157;
  char v158;
  WTF *v159;
  _QWORD v160[2];
  __int128 v161;
  double v162;
  char v163;
  __int128 *v164;
  __int128 v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v152 = -1;
  v153 = -1;
  v154 = 0;
  v155 = 256;
  v156 = this;
  *(_QWORD *)&v157 = "stack layout";
  *((_QWORD *)&v157 + 1) = 13;
  v158 = 0;
  v159 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v152);
  v160[0] = "DFG";
  v160[1] = 4;
  v161 = v157;
  v162 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v149 = mach_absolute_time();
    v151 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v151 != -1)
    {
      *(_QWORD *)&v165 = &v163;
      v164 = &v165;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v164, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v150) = dword_1ECF4400C;
    v162 = (double)(v149 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v150 * 1000000000.0);
  }
  v2 = *((unsigned int *)v156 + 213);
  v3 = *((unsigned int *)v156 + 212) + v2;
  if (v3)
  {
    v4 = (WTF *)(((v3 + 31) >> 3) & 0x7FFFFFFC);
    v5 = (char *)WTF::fastMalloc(v4);
    bzero(v5, (size_t)v4);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  bzero(v5, (size_t)v4);
  v13 = v156;
  v14 = *((_DWORD *)v156 + 15);
  if (v14)
  {
    v15 = 0;
    while (1)
    {
      if (*((_DWORD *)v13 + 15) <= --v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1985369FCLL);
      }
      v16 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 8 * v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 + 220);
        if (v17)
          break;
      }
LABEL_9:
      if (!v14)
        goto LABEL_40;
    }
    while (1)
    {
      if (*(_DWORD *)(v16 + 220) <= --v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1985369ECLL);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 208) + 8 * v17);
      v19 = *(unsigned __int16 *)(v18 + 18);
      if (v19 > 0x1D)
      {
LABEL_12:
        if (v19 - 99 < 2)
        {
          v124 = *(_DWORD **)(v18 + 72);
          v125 = (int)v124[1];
          v126 = ~(_DWORD)v125;
          if ((int)v125 < 0)
          {
            v127 = ~(_BYTE)v125;
          }
          else
          {
            v126 = v125 - 5;
            v127 = v125 - 5;
          }
          v15 = 1;
          *(_DWORD *)&v5[(v126 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v127;
          if ((*v124 & 0x80000000) != 0)
          {
            v128 = v124[6];
            if (v128)
            {
              v129 = -v128;
              v130 = v128 - 6;
              do
              {
                v131 = v130 + *v124;
                v8 = v131;
                v132 = v129 - *v124;
                if (v131 + 5 < 0)
                  v133 = (v129 - *v124);
                else
                  v133 = v131;
                if (v131 + 5 >= 0)
                  LOBYTE(v132) = v130 + *(_BYTE *)v124;
                v6 = (v133 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
                v15 = 1;
                v7 = *(unsigned int *)&v5[v6];
                *(_DWORD *)&v5[v6] = (1 << v132) | v7;
                --v130;
              }
              while (!__CFADD__(v129++, 1));
            }
          }
        }
        goto LABEL_13;
      }
      if (((1 << v19) & 0x30018000) != 0)
        break;
      if (((1 << v19) & 0xA0000) == 0)
        goto LABEL_12;
      v31 = *(unint64_t **)(v18 + 72);
      if (*((_DWORD *)v31 + 1))
      {
        v29 = *v31;
        if (HIDWORD(v29) == 2)
        {
          v29 = v2 + (int)v29;
          v30 = &v5[4 * (v29 >> 5)];
        }
        else if ((v29 & 0x80000000) != 0)
        {
          LODWORD(v29) = ~(_DWORD)v29;
          v30 = &v5[(v29 >> 3) & 0x1FFFFFFC];
        }
        else
        {
          LODWORD(v29) = v29 - 5;
          v30 = &v5[4 * ((unint64_t)(int)v29 >> 5)];
        }
LABEL_34:
        *(_DWORD *)v30 |= 1 << v29;
      }
LABEL_13:
      if (!v17)
        goto LABEL_9;
    }
    v20 = *(_QWORD **)(v18 + 72);
    v21 = v20;
    do
    {
      v22 = v21;
      v21 = (_QWORD *)*v21;
    }
    while (v21);
    if (v22 != v20)
      *v20 = v22;
    v23 = v22[3];
    v24 = HIDWORD(v23);
    if (!HIDWORD(v23))
      goto LABEL_13;
    v25 = v2 + (int)v23;
    v6 = (uint64_t)&v5[(~(_DWORD)v23 >> 3) & 0x1FFFFFFC];
    v7 = (v23 - 5);
    v8 = (uint64_t)&v5[4 * ((unint64_t)(int)v7 >> 5)];
    v26 = (v23 & 0x80000000) == 0;
    if ((v23 & 0x80000000) != 0)
      v27 = ~(_BYTE)v23;
    else
      v27 = v23 - 5;
    if (v26)
      v6 = (uint64_t)&v5[4 * ((unint64_t)(int)v7 >> 5)];
    v28 = v24 == 2;
    if (v24 == 2)
      LOBYTE(v29) = v25;
    else
      LOBYTE(v29) = v27;
    if (v28)
      v30 = &v5[4 * (v25 >> 5)];
    else
      v30 = (char *)v6;
    goto LABEL_34;
  }
  v15 = 0;
LABEL_40:
  v32 = *(_QWORD *)(*((_QWORD *)v13 + 3) + 128);
  v33 = (*(_DWORD *)v32)++;
  v34 = *(int ***)(v32 + 8);
  if (v33)
  {
    *(_DWORD *)v32 = v33;
  }
  else
  {
    if (v34)
    {
      v103 = *(unint64_t **)(v32 + 8);
      do
      {
        v104 = (unint64_t *)v103[7];
        v105 = v103[2];
        if ((v105 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v105 & 0xFFFFFFFF8, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
        v106 = *v103;
        *v103 = 0;
        if (v106)
          WTF::fastFree(v106, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
        WTF::fastFree((unint64_t)v103, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
        v103 = v104;
      }
      while (v104);
    }
    *(_QWORD *)(v32 + 8) = 0;
    WTF::fastFree(v32, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
  }
  for (; v34; v34 = (int **)v34[7])
  {
    v86 = (unint64_t)v34[3];
    if ((v86 >> 60) - 3 <= 2)
    {
      v115 = HIDWORD(v86) & 0xFFFFF | ((int)(v86 >> 28) >> 24 << 20);
      v116 = v115 - 1;
      v117 = -5 - v115;
      v118 = v115 <= -5;
      if (v115 <= -5)
        v119 = (-5 - v115);
      else
        v119 = v116;
      if (v118)
        LOBYTE(v116) = v117;
      *(_DWORD *)&v5[(v119 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v116;
    }
    if (*v34)
    {
      v87 = **v34;
      if (v87)
      {
        v88 = -5 - v87;
        v89 = v87 - 1;
        do
        {
          v90 = ((unint64_t)v34[3] >> 32) & 0xFFFFF | ((int)((unint64_t)v34[3] >> 28) >> 24 << 20);
          v91 = v89 + v90;
          v92 = v89 + v90 + 5;
          v93 = (v88 - v90);
          v94 = v92 < 0;
          if (v92 < 0)
            v95 = v93;
          else
            v95 = v91;
          if (!v94)
            LOBYTE(v93) = v91;
          *(_DWORD *)&v5[(v95 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v93;
          ++v88;
          --v89;
        }
        while (v89 != -1);
      }
    }
  }
  if (v3)
  {
    if (v3 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198536A2CLL);
    }
    v35 = WTF::fastMalloc((WTF *)(4 * v3));
  }
  else
  {
    v35 = 0;
  }
  v36 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
  if (v36 != -1)
  {
    *(_QWORD *)&v165 = &v163;
    v164 = &v165;
    std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v164, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
  }
  v37 = v156;
  *((_DWORD *)v156 + 214) = (unint64_t)(qword_1EE342E80 + 7) >> 3;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (((*(_DWORD *)&v5[(i >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> i) & 1) != 0)
      {
        v39 = *((_DWORD *)v37 + 214);
        *((_DWORD *)v37 + 214) = v39 + 1;
      }
      else
      {
        v39 = -1;
      }
      *(_DWORD *)(v35 + 4 * i) = v39;
    }
  }
  if (*((_DWORD *)v37 + 116))
  {
    for (j = *((unsigned int *)v37 + 116) - 1; j != -1; --j)
    {
      if (j >> 4 >= *((unsigned int *)v37 + 121))
      {
        __break(0xC471u);
        JUMPOUT(0x1985369F4);
      }
      v43 = *(_QWORD *)(*((_QWORD *)v37 + 59) + 8 * (j >> 4));
      v44 = j & 0xF;
      if (*(_QWORD *)(v43 + (v44 << 6)))
        continue;
      v42 = *(_QWORD *)(v43 + (v44 << 6) + 24);
      if (HIDWORD(v42))
      {
        v45 = v42 & 0xFFFFFFFF00000000;
        v46 = v2 + (int)v42;
        v6 = *(_QWORD *)(v43 + (v44 << 6) + 24) ^ 0xFFFFFFFFLL;
        v47 = (int)v42 - 5;
        if ((v42 & 0x80000000) != 0)
          v47 = *(_QWORD *)(v43 + (v44 << 6) + 24) ^ 0xFFFFFFFFLL;
        if (v45 != 0x200000000)
          v46 = v47;
        if (v46 >= v3 || *(_DWORD *)(v35 + 4 * v46) == -1)
          continue;
        v48 = v2 + (int)v42;
        v6 = *(_QWORD *)(v43 + (v44 << 6) + 24) ^ 0xFFFFFFFFLL;
        if ((v42 & 0x80000000) == 0)
          v49 = (int)v42 - 5;
        else
          v49 = *(_QWORD *)(v43 + (v44 << 6) + 24) ^ 0xFFFFFFFFLL;
        if (v45 == 0x200000000)
          v49 = v48;
        if (v49 >= v3)
        {
          __break(0xC471u);
          JUMPOUT(0x1985360E4);
        }
        v41 = *(_DWORD *)(v35 + 4 * v49);
        if (v41 == -1)
          LODWORD(v42) = 0x3FFFFFFF;
        else
          LODWORD(v42) = ~v41;
      }
      *(_DWORD *)(v43 + (v44 << 6) + 32) = v42;
    }
  }
  v50 = (uint64_t *)*((_QWORD *)v37 + 74);
  if (v50)
  {
    while (1)
    {
      v96 = *((_DWORD *)v50 + 1);
      if (v96 == 1)
        break;
      if (v96)
        goto LABEL_164;
      LODWORD(v98) = *(_DWORD *)v50;
LABEL_174:
      *((_DWORD *)v50 + 2) = v98;
LABEL_175:
      v50 = (uint64_t *)v50[2];
      if (!v50)
        goto LABEL_79;
    }
    if ((*(_DWORD *)v50 & 0x80000000) != 0)
    {
      v97 = ~*(_DWORD *)v50;
      if (v3 <= v97 || *(_DWORD *)(v35 + 4 * v97) == -1)
        goto LABEL_175;
    }
LABEL_164:
    v98 = *v50;
    v99 = HIDWORD(*v50);
    if (v99)
    {
      v100 = v2 + (int)v98;
      if ((int)v98 >= 0)
        v101 = (int)v98 - 5;
      else
        v101 = *v50 ^ 0xFFFFFFFFLL;
      if (v99 == 2)
        v101 = v100;
      if (v101 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x198536A44);
      }
      v102 = *(_DWORD *)(v35 + 4 * v101);
      if (v102 == -1)
        LODWORD(v98) = 0x3FFFFFFF;
      else
        LODWORD(v98) = ~v102;
    }
    goto LABEL_174;
  }
LABEL_79:
  v51 = *((_QWORD *)v37 + 4);
  if (*((_BYTE *)v37 + 960))
  {
    v52 = *(_DWORD *)(v51 + 48);
    if (v52 < 0)
    {
      v53 = ~v52;
      if (v53 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x198536A24);
      }
      v54 = *(_DWORD *)(v35 + 4 * v53);
      if (v54 == -1)
        v52 = 0x3FFFFFFF;
      else
        v52 = ~v54;
    }
  }
  else
  {
    v52 = 0x3FFFFFFF;
  }
  *(_DWORD *)(v51 + 48) = v52;
  v55 = *((unsigned int *)v37 + 161);
  if ((_DWORD)v55)
  {
    v6 = 12;
    v7 = 0x10000000000;
    v8 = 14;
    do
    {
      if (--v55 >= (unint64_t)*((unsigned int *)v156 + 161))
      {
        __break(0xC471u);
        JUMPOUT(0x198536A34);
      }
      v67 = *((_QWORD *)v156 + 79) + 24 * v55;
      v9 = *(_QWORD *)v67;
      v68 = *(_DWORD *)(v67 + 8);
      v10 = *(uint64_t **)(v67 + 16);
      v69 = *(_BYTE *)(v9 + 32);
      v70 = *(_QWORD *)(v9 + 24);
      if ((v70 >> 60) - 3 <= 2)
      {
        v120 = HIDWORD(v70) & 0xFFFFF | ((int)(v70 >> 28) >> 24 << 20);
        if (v120 > -5)
        {
          v123 = v120 + 4;
        }
        else
        {
          v121 = (-5 - v120);
          if (v121 >= v3)
          {
            __break(0xC471u);
            JUMPOUT(0x198536A3CLL);
          }
          v122 = *(_DWORD *)(v35 + 4 * v121);
          if (v122 == -1)
            v123 = 0x3FFFFFFF;
          else
            v123 = ~v122;
        }
        *(_DWORD *)(v9 + 36) = v123;
      }
      if (*(_QWORD *)v9)
      {
        v71 = **(unsigned int **)v9;
        if ((_DWORD)v71)
        {
          while (1)
          {
            v72 = (v68 + --v71);
            if (v72 >> 3 >= *((unsigned int *)v156 + 127))
            {
              __break(0xC471u);
              JUMPOUT(0x198536A0CLL);
            }
            v73 = *(_QWORD *)(*((_QWORD *)v156 + 62) + 8 * (v72 >> 3));
            if (!*(_DWORD *)(v73 + 48 * (((_BYTE)v68 + (_BYTE)v71) & 7) + 28))
            {
LABEL_283:
              LOBYTE(v165) = 17;
              v77 = 10;
              goto LABEL_119;
            }
            v74 = **(_QWORD ***)(v73 + 48 * (((_BYTE)v68 + (_BYTE)v71) & 7) + 16);
            v75 = v74;
            do
            {
              v76 = v75;
              v75 = (_QWORD *)*v75;
            }
            while (v75);
            if (v76 == v74)
            {
              if (!v74)
                goto LABEL_283;
            }
            else
            {
              *v74 = v76;
              v74 = v76;
            }
            v77 = *((unsigned int *)v74 + 8);
            if (!*((_BYTE *)v74 + 40) && *((_BYTE *)v74 + 43))
            {
              if (*((_DWORD *)v74 + 14) == 1)
              {
                LOBYTE(v165) = 12;
                goto LABEL_119;
              }
              v79 = v74;
              do
              {
                v80 = v79;
                v79 = (_QWORD *)*v79;
              }
              while (v79);
              if (v80 != v74)
                *v74 = v80;
              v81 = v80[2];
              if (v81)
              {
                if ((v81 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                {
                  LOBYTE(v165) = 9;
                  goto LABEL_119;
                }
                if (*((_DWORD *)v74 + 7))
                {
                  v82 = v74;
                  do
                  {
                    v83 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                  if (v83 != v74)
                    *v74 = v83;
                  v84 = v83[2];
                  if (v84 && (v84 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                  {
                    LOBYTE(v165) = 10;
                    goto LABEL_119;
                  }
                }
                if ((v81 & 0x2800FFFFFFF7) != 0 && (v81 & 0xFFFFD7FF00000008) == 0)
                {
                  LOBYTE(v165) = 13;
                  goto LABEL_119;
                }
                if (v81 == 0x10000000000)
                {
                  LOBYTE(v165) = 14;
                  goto LABEL_119;
                }
              }
            }
            LOBYTE(v165) = 8;
LABEL_119:
            *(_QWORD *)((char *)&v165 + 1) = v77;
            if (**(_DWORD **)v9 <= v71)
            {
              __break(0xC471u);
              JUMPOUT(0x198536904);
            }
            v78 = *(_QWORD *)v9 + 9 * v71;
            *(_QWORD *)(v78 + 4) = v165;
            *(_BYTE *)(v78 + 12) = 0;
            if (!(_DWORD)v71)
            {
              v69 = *(_BYTE *)(v9 + 32);
              break;
            }
          }
        }
      }
      v11 = v69 & 1;
      v12 = v10 != 0;
      if ((v69 & 1) != (_DWORD)v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198536968);
      }
      if ((v69 & 1) == 0)
      {
        v9 = *(unsigned __int8 *)(v9 + 40);
        if ((_DWORD)v9 != 17)
        {
          __break(0xC471u);
          JUMPOUT(0x198536988);
        }
        continue;
      }
      v107 = v10;
      do
      {
        v11 = (uint64_t)v107;
        v107 = (uint64_t *)*v107;
      }
      while (v107);
      if ((uint64_t *)v11 != v10)
        *v10 = v11;
      v108 = *(unsigned int *)(v11 + 32);
      v12 = *(unsigned __int8 *)(v11 + 40);
      if (!*(_BYTE *)(v11 + 40))
      {
        v12 = *(unsigned __int8 *)(v11 + 43);
        if (*(_BYTE *)(v11 + 43))
        {
          v12 = *(unsigned int *)(v11 + 56);
          if ((_DWORD)v12 == 1)
          {
            v11 = 12;
            LOBYTE(v165) = 12;
            goto LABEL_197;
          }
          v109 = (_QWORD *)v11;
          do
          {
            v110 = v109;
            v109 = (_QWORD *)*v109;
          }
          while (v109);
          if (v110 != (_QWORD *)v11)
            *(_QWORD *)v11 = v110;
          v12 = v110[2];
          if (v12)
          {
            if ((v12 & 0xFFFFFFFCFFFFFFFFLL) == 0)
            {
              LOBYTE(v165) = 9;
              goto LABEL_197;
            }
            if (*(_DWORD *)(v11 + 28))
            {
              v111 = (_QWORD *)v11;
              do
              {
                v112 = v111;
                v111 = (_QWORD *)*v111;
              }
              while (v111);
              if (v112 != (_QWORD *)v11)
                *(_QWORD *)v11 = v112;
              v113 = v112[2];
              if (v113 && (v113 & 0xFFFFFFF0FFFFFFFFLL) == 0)
              {
                v11 = 10;
                LOBYTE(v165) = 10;
                goto LABEL_197;
              }
            }
            if ((v12 & 0x2800FFFFFFF7) != 0)
            {
              v11 = v12 & 0xFFFFD7FF00000008;
              if ((v12 & 0xFFFFD7FF00000008) == 0)
              {
                LOBYTE(v165) = 13;
                goto LABEL_197;
              }
            }
            v11 = 0x10000000000;
            if (v12 == 0x10000000000)
            {
              v11 = 14;
              LOBYTE(v165) = 14;
              goto LABEL_197;
            }
          }
        }
      }
      LOBYTE(v165) = 8;
LABEL_197:
      *(_QWORD *)((char *)&v165 + 1) = v108;
      v10 = (uint64_t *)v165;
      *(_QWORD *)(v9 + 40) = v165;
      *(_BYTE *)(v9 + 48) = 0;
    }
    while (v55);
  }
  if ((v15 & 1) != 0)
  {
    v135 = v156;
    v136 = *((_DWORD *)v156 + 15);
    while (v136)
    {
      if (*((_DWORD *)v135 + 15) <= --v136)
      {
        __break(0xC471u);
        JUMPOUT(0x198536A58);
      }
      v137 = *(_QWORD *)(*((_QWORD *)v135 + 6) + 8 * v136);
      if (v137)
      {
        v138 = *(_DWORD *)(v137 + 220);
        if (v138)
        {
          v139 = v138 - 1;
          v140 = 8 * v139;
          do
          {
            if (*(_DWORD *)(v137 + 220) <= v139)
            {
              __break(0xC471u);
              JUMPOUT(0x198536A14);
            }
            v141 = *(_QWORD *)(*(_QWORD *)(v137 + 208) + v140);
            if (*(unsigned __int16 *)(v141 + 18) - 99 <= 1)
            {
              v142 = *(int **)(v141 + 72);
              v143 = v142[1];
              if (v143 < 0)
              {
                v144 = ~v143;
                if (v3 <= v144)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198536A60);
                }
                v145 = *(_DWORD *)(v35 + 4 * v144);
                if (v145 == -1)
                  v143 = 0x3FFFFFFF;
                else
                  v143 = ~v145;
              }
              v142[3] = v143;
              v146 = *v142;
              if (*v142 < 0)
              {
                v147 = ~v146;
                if (v3 <= v147)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198536A68);
                }
                v148 = *(_DWORD *)(v35 + 4 * v147);
                if (v148 == -1)
                  v146 = 0x3FFFFFFF;
                else
                  v146 = ~v148;
              }
              v142[2] = v146;
            }
            v140 -= 8;
            --v139;
          }
          while (v139 != -1);
        }
      }
    }
  }
  if (v35)
    WTF::fastFree(v35, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
  if (v5)
    WTF::fastFree((unint64_t)v5, (void *)v6, v7, v8, v9, (uint64_t)v10, v11, v12);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v56 = (*(_DWORD *)(*((_QWORD *)v156 + 3) + 16) & 0xFFFFFFFE) == 4) : (v56 = 0),
        !v56 ? (v57 = BYTE2(qword_1ECF4C32A) == 0) : (v57 = 0),
        !v57))
  {
    v165 = v157;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v156 + 1088, "Phase ", (uint64_t)&v165, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v160);
  if (HIBYTE(qword_1ECF4C32A) && !v158)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v152, (uint64_t)v58, v59, v60, v61, v62, v63, v64);
  v65 = v159;
  v159 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v65;
  }
  return 1;
}

uint64_t JSC::DFG::performStoreBarrierClustering(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  JSC::DFG::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  JSC::DFG *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  JSC::DFG::Graph *v87;
  BOOL v88;
  BOOL v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  WTF *v98;
  WTF *v99;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  const void *v104;
  void *v105;
  void *v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  __int16 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  JSC::DFG *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  __int16 v155;
  JSC::DFG *v156;
  __int128 v157;
  char v158;
  WTF *v159;
  JSC::DFG *v160;
  WTF *v161;
  uint64_t v162;
  _BYTE v163[128];
  __int128 __src;
  __int128 v165;
  _QWORD v166[2];
  __int128 v167;
  double v168;
  int64x2_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int16 v174;

  v152 = -1;
  v153 = -1;
  v154 = 0;
  v155 = 256;
  v156 = this;
  *(_QWORD *)&v157 = "store barrier clustering";
  *((_QWORD *)&v157 + 1) = 25;
  v158 = 0;
  v159 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v152);
  v9 = (WTF *)v163;
  v160 = this;
  v161 = (WTF *)v163;
  v162 = 8;
  __src = 0u;
  v165 = 0u;
  v166[0] = "DFG";
  v166[1] = 4;
  v167 = v157;
  v168 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v108 = mach_absolute_time();
    v110 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v110 != -1)
    {
      *(_QWORD *)&v173 = &v171;
      v169.i64[1] = (uint64_t)&v173;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v169.u64[1], (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v109) = dword_1ECF4400C;
    v168 = (double)(v108 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v109 * 1000000000.0);
  }
  v10 = v156;
  v11 = *((unsigned int *)v156 + 15);
  if (!(_DWORD)v11)
    goto LABEL_153;
  v12 = 0;
  v13 = *((_QWORD *)v156 + 6);
  while (!*(_QWORD *)(v13 + 8 * v12))
  {
    v14 = 0;
    if (v11 == ++v12)
      goto LABEL_17;
  }
  if ((_DWORD)v11 == (_DWORD)v12)
  {
LABEL_153:
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v11 <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198537828);
      }
      if (v14 <= *(unsigned int *)(*(_QWORD *)(v13 + 8 * v12) + 220))
        v14 = *(unsigned int *)(*(_QWORD *)(v13 + 8 * v12) + 220);
      v12 = (v12 + 1);
      if (v11 > v12)
      {
        while (!*(_QWORD *)(v13 + 8 * v12))
        {
          if (v11 == ++v12)
            goto LABEL_17;
        }
      }
    }
    while ((_DWORD)v11 != (_DWORD)v12);
  }
LABEL_17:
  v15 = *((_QWORD *)&__src + 1) + 31;
  v16 = v14 + 31;
  if (((*((_QWORD *)&__src + 1) + 31) ^ (v14 + 31)) >= 0x20)
  {
    v17 = v16 >> 5;
    if (v16 >> 5 < v15 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x198537570);
    }
    v18 = v15 >> 5;
    v19 = (char *)WTF::fastMalloc((WTF *)(4 * v17));
    memcpy(v19, (const void *)__src, 4 * v18);
    bzero(&v19[4 * v18], 4 * (v17 - v18));
    if ((_QWORD)__src)
      WTF::fastFree(__src, v20, (uint64_t)v3, v4, v5, v6, v7, v8);
    *(_QWORD *)&__src = v19;
    v10 = v156;
    LODWORD(v11) = *((_DWORD *)v156 + 15);
  }
  *((_QWORD *)&__src + 1) = v14;
  if ((_DWORD)v11)
  {
    v21 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v21))
    {
      if (v11 == ++v21)
      {
        LODWORD(v21) = v11;
        break;
      }
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  if ((_DWORD)v11 != (_DWORD)v21)
  {
    LODWORD(v22) = v11;
    v151 = v10;
    while (1)
    {
      if (v22 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198537820);
      }
      v23 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v21);
      v24 = *(unsigned int *)(v23 + 220);
      if ((_DWORD)v24)
      {
        v25 = -(int)v24;
        v26 = (v24 - 1);
        v27 = 1;
        do
        {
          if (*(_DWORD *)(v23 + 220) <= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x198537780);
          }
          v87 = *(JSC::DFG::Graph **)(*(_QWORD *)(v23 + 208) + 8 * v26);
          if ((JSC::DFG::doesGC(v156, v87, v3, v4, v5, v6, v7, v8) & 1) != 0
            || JSC::DFG::mayExit(v156, v87, v3))
          {
            v27 = 1;
          }
          else if ((((*((_WORD *)v87 + 9) & 0xFFFE) == 382) & v27) == 1)
          {
            v27 = 0;
            *(_DWORD *)(__src + ((v26 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v26;
          }
          --v26;
        }
        while (!__CFADD__(v25++, 1));
        v28 = *(unsigned int *)(v23 + 220);
        if ((_DWORD)v28)
          break;
      }
      v28 = 0;
LABEL_33:
      v29 = HIDWORD(v162);
      if (HIDWORD(v162))
      {
        v34 = v28 + HIDWORD(v162);
        v35 = *(unsigned int *)(v23 + 216);
        if (v34 > v35)
        {
          v150 = v9;
          v101 = v35 + (v35 >> 2);
          if (v101 >= 0x10)
            v102 = v101 + 1;
          else
            v102 = 16;
          if (v102 <= v34)
            v103 = v28 + HIDWORD(v162);
          else
            v103 = v102;
          v104 = *(const void **)(v23 + 208);
          if (v103 < 9)
          {
            v105 = (void *)(v23 + 224);
            *(_QWORD *)(v23 + 208) = v23 + 224;
            *(_DWORD *)(v23 + 216) = 8;
          }
          else
          {
            if (v103 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198537840);
            }
            v105 = (void *)WTF::fastMalloc((WTF *)(8 * v103));
            *(_DWORD *)(v23 + 216) = v103;
            *(_QWORD *)(v23 + 208) = v105;
          }
          memcpy(v105, v104, 8 * v28);
          v107 = (const void *)(v23 + 224) == v104 || v104 == 0;
          v9 = v150;
          if (!v107)
          {
            if (*(const void **)(v23 + 208) == v104)
            {
              *(_QWORD *)(v23 + 208) = 0;
              *(_DWORD *)(v23 + 216) = 0;
            }
            WTF::fastFree((unint64_t)v104, v106, (uint64_t)v3, v4, v5, v6, v7, v8);
          }
        }
        *(_DWORD *)(v23 + 220) = v34;
        if (v29 - 1 >= (unint64_t)HIDWORD(v162))
        {
          __break(0xC471u);
          JUMPOUT(0x198537838);
        }
        v36 = ~v29;
        v37 = v34;
        do
        {
          --v29;
          v38 = *((_QWORD *)v161 + 2 * v29) + v29;
          v39 = v37 - 1;
          if (v37 - 1 > v38)
          {
            v40 = v37 + v36;
            do
            {
              if (v34 <= v40)
              {
                __break(0xC471u);
                JUMPOUT(0x1985377D4);
              }
              if (v34 <= v39)
              {
                __break(0xC471u);
                JUMPOUT(0x1985377DCLL);
              }
              *(_QWORD *)(*(_QWORD *)(v23 + 208) + 8 * v39--) = *(_QWORD *)(*(_QWORD *)(v23 + 208) + 8 * v40--);
            }
            while (v39 > v38);
          }
          if (v34 <= v38)
          {
            __break(0xC471u);
            JUMPOUT(0x198537830);
          }
          *(_QWORD *)(*(_QWORD *)(v23 + 208) + 8 * v38) = *((_QWORD *)v161 + 2 * v29 + 1);
          ++v36;
          v37 = v38;
        }
        while (v29);
        HIDWORD(v162) = 0;
      }
      if (v24 > 0x1F)
      {
        v32 = v24 & 0xFFFFFFE0;
        v33 = (char *)__src;
        v10 = v151;
        if (v32 < v24)
        {
          do
          {
            *(_DWORD *)&v33[(v32 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v32);
            ++v32;
          }
          while (v24 != v32);
        }
        bzero(v33, (v24 >> 3) & 0x1FFFFFFC);
      }
      else
      {
        v10 = v151;
        if ((_DWORD)v24)
        {
          v30 = 0;
          v31 = __src;
          do
          {
            *(_DWORD *)(v31 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v30);
            ++v30;
          }
          while (v24 != v30);
        }
      }
      v21 = (v21 + 1);
      v22 = *((unsigned int *)v10 + 15);
      if (v22 > v21)
      {
        while (!*(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v21))
        {
          if (v22 == ++v21)
          {
            LODWORD(v21) = *((_DWORD *)v10 + 15);
            break;
          }
        }
      }
      if ((_DWORD)v11 == (_DWORD)v21)
      {
        v10 = v156;
        goto LABEL_129;
      }
    }
    v41 = 0;
    while (1)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v23 + 208) + 8 * v41);
      if ((*(_WORD *)(v42 + 18) & 0xFFFE) == 0x17E)
        break;
LABEL_62:
      if (++v41 >= v28)
        goto LABEL_33;
    }
    if (*(_BYTE *)(v42 + 17))
    {
      JSC::DFG::Graph::logAssertionFailure(v156, (JSC::DFG::Node *)v42, (const WTF::CString *)"./dfg/DFGStoreBarrierClusteringPhase.cpp", (const char *)0x7D, "void JSC::DFG::(anonymous namespace)::StoreBarrierClusteringPhase::doBlock(BasicBlock *)", "!node->origin.wasHoisted");
      __break(0xC471u);
      JUMPOUT(0x1985373A0);
    }
    if ((*(_QWORD *)(v42 + 24) & 0xFC000000000000) != 0x24000000000000)
    {
      JSC::DFG::Graph::logAssertionFailure(v156, *(JSC::DFG::Node **)(*(_QWORD *)(v23 + 208) + 8 * v41), (const WTF::CString *)"./dfg/DFGStoreBarrierClusteringPhase.cpp", (const char *)0x7E, "void JSC::DFG::(anonymous namespace)::StoreBarrierClusteringPhase::doBlock(BasicBlock *)", "node->child1().useKind() == KnownCellUse");
      __break(0xC471u);
      JUMPOUT(0x198537818);
    }
    v54 = *(_QWORD *)v42;
    if ((*(_QWORD *)v42 & 1) != 0)
    {
      v111 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
      if ((v54 & 2) != 0
        || ((v112 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v112 != 0x3FFFFFFF)
          ? (v113 = (_DWORD)v112 == -1)
          : (v113 = 1),
            v113))
      {
        v114 = 2;
      }
      else if (v112 >> 28)
      {
        v137 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v137 = v111;
        *(_DWORD *)(v137 + 8) = v112;
        v114 = 1;
        v111 = v137;
      }
      else
      {
        v114 = v111;
        v111 = v112 << 36;
      }
      v54 = v111 | v114;
    }
    *(_QWORD *)&v173 = v54;
    v55 = *(_QWORD *)(v42 + 8);
    if ((v55 & 1) != 0)
    {
      v115 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      if ((v55 & 2) != 0
        || ((v116 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v116 != 0x3FFFFFFF)
          ? (v117 = (_DWORD)v116 == -1)
          : (v117 = 1),
            v117))
      {
        v118 = 2;
      }
      else if (v116 >> 28)
      {
        v138 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
        v115 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v115 = v138;
        *(_DWORD *)(v115 + 8) = v116;
        v118 = 1;
        v54 = v173;
      }
      else
      {
        v118 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
        v115 = v116 << 36;
      }
      v55 = v115 | v118;
    }
    *((_QWORD *)&v173 + 1) = v55;
    v174 = *(_WORD *)(v42 + 16);
    v56 = *(_QWORD *)(v42 + 24);
    v57 = v56 & 0xFF00FFFFFFFFFFFFLL;
    if ((v54 & 1) != 0)
    {
      v119 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
      if ((v54 & 2) != 0
        || ((v120 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v120 != 0x3FFFFFFF)
          ? (v121 = (_DWORD)v120 == -1)
          : (v121 = 1),
            v121))
      {
        v122 = 2;
      }
      else if (v120 >> 28)
      {
        v146 = v119;
        v139 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v139 = v146;
        *(_DWORD *)(v139 + 8) = v120;
        v122 = 1;
        v119 = v139;
      }
      else
      {
        v122 = v119;
        v119 = v120 << 36;
      }
      v54 = v119 | v122;
      v171 = v57;
      if (((v119 | v122) & 1) != 0)
      {
        v123 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
        if ((v54 & 2) != 0
          || ((v124 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v124 != 0x3FFFFFFF)
            ? (v125 = (_DWORD)v124 == -1)
            : (v125 = 1),
              v125))
        {
          v126 = 2;
        }
        else if (v124 >> 28)
        {
          v147 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
          v140 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v140 = v147;
          *(_DWORD *)(v140 + 8) = v124;
          v126 = 1;
          v123 = v140;
        }
        else
        {
          v126 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
          v123 = v124 << 36;
        }
        v58 = 0;
        v59 = v123 | v126;
        goto LABEL_81;
      }
    }
    else
    {
      v171 = v56 & 0xFF00FFFFFFFFFFFFLL;
    }
    v58 = 1;
    v59 = v54;
LABEL_81:
    v172 = v59;
    v60 = HIDWORD(v165);
    if (HIDWORD(v165) == DWORD2(v165))
    {
      v60 = HIDWORD(v165);
      v68 = (_QWORD *)(v165 + 16 * HIDWORD(v165));
      *v68 = *v66;
      v69 = v66[1];
      v66[1] = 0;
      v68[1] = v69;
    }
    else
    {
      v61 = (unint64_t *)(v165 + 16 * HIDWORD(v165));
      *v61 = v171;
      v172 = 0;
      v61[1] = v59;
    }
    HIDWORD(v165) = v60 + 1;
    if ((v172 & 1) != 0 && (v172 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v172 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
    if ((v58 & 1) == 0 && (v54 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v54 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
    JSC::DFG::Node::remove((JSC::DFG::Node *)v42, v156, (unint64_t *)v3, v4, v5, v6, v7, v8);
    if (((*(_DWORD *)(__src + ((v41 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v41) & 1) != 0)
    {
      v62 = 126 - 2 * __clz(HIDWORD(v165));
      if (HIDWORD(v165))
        v63 = v62;
      else
        v63 = 0;
      v84 = (uint64_t *)v165;
      v85 = HIDWORD(v165);
      if (HIDWORD(v165))
      {
        v47 = 0;
        v64 = v165 + 16 * HIDWORD(v165);
        v65 = 16 * HIDWORD(v165) - 16;
        v48 = v165 + 16;
        while (v65 != v47)
        {
          v43 = v47;
          v44 = (_QWORD *)v48;
          v45 = *(_QWORD *)(v165 + v47);
          v46 = *(_QWORD *)(v165 + v47 + 16);
          v47 += 16;
          v48 += 16;
          if (v45 == v46)
          {
            v149 = v9;
            v52 = (_QWORD *)(v165 + v47 - 16);
            if (v65 != v47)
            {
              v53 = 16 * HIDWORD(v165) - v43 - 32;
              do
              {
                v49 = v44[2];
                if (*v52 != v49)
                {
                  v52[2] = v49;
                  if (v44 != v52)
                  {
                    v50 = v52[3];
                    if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v50 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
                    v51 = v44[3];
                    v44[3] = 0;
                    v52[3] = v51;
                  }
                  v52 += 2;
                }
                v44 += 2;
                v53 -= 16;
              }
              while (v53);
              v84 = (uint64_t *)v165;
              v85 = HIDWORD(v165);
            }
            v64 = (uint64_t)(v52 + 2);
            v9 = v149;
            break;
          }
        }
      }
      else
      {
        v85 = 0;
        v64 = v165;
      }
      v70 = (v64 - (uint64_t)v84) >> 4;
      if (v70 != v85)
      {
        v80 = 16 * v85 - 16 * v70;
        v81 = &v84[2 * v70 + 1];
        do
        {
          v83 = *v81;
          v81 += 2;
          v82 = v83;
          if ((v83 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v82 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          v80 -= 16;
        }
        while (v80);
        v84 = (uint64_t *)v165;
      }
      HIDWORD(v165) = v70;
      if ((_DWORD)v70)
      {
        v71 = v84;
        v148 = v9;
        do
        {
          v73 = *v71;
          v72 = v71[1];
          if ((v72 & 1) != 0)
          {
            v127 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
            if ((v72 & 2) != 0
              || ((v128 = *(unsigned int *)((v72 & 0xFFFFFFFF8) + 8), (_DWORD)v128 != 0x3FFFFFFF)
                ? (v129 = (_DWORD)v128 == -1)
                : (v129 = 1),
                  v129))
            {
              v130 = 2;
            }
            else if (v128 >> 28)
            {
              v141 = v127;
              v142 = v128;
              v127 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v127 = v141;
              *(_DWORD *)(v127 + 8) = v142;
              v130 = 1;
              v84 = (uint64_t *)v165;
            }
            else
            {
              v130 = v127;
              v127 = v128 << 36;
            }
            v131 = v127 | v130;
            if (v71 == v84)
              v132 = 383;
            else
              v132 = 382;
            v145 = v127 | v130;
            if ((v131 & 1) != 0)
            {
              v133 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
              if ((v131 & 2) != 0
                || ((v134 = *(unsigned int *)((v131 & 0xFFFFFFFF8) + 8), (_DWORD)v134 != 0x3FFFFFFF)
                  ? (v135 = (_DWORD)v134 == -1)
                  : (v135 = 1),
                    v135))
              {
                v136 = 2;
              }
              else if (v134 >> 28)
              {
                v144 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
                v143 = v132;
                v133 = WTF::fastMalloc((WTF *)0x10);
                v132 = v143;
                *(_QWORD *)v133 = v144;
                *(_DWORD *)(v133 + 8) = v134;
                v136 = 1;
              }
              else
              {
                v136 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
                v133 = v134 << 36;
              }
              v75 = 0;
              v76 = v133 | v136;
            }
            else
            {
              v75 = 1;
              v76 = v127 | v130;
            }
            v74 = v132;
          }
          else
          {
            if (v71 == v84)
              v74 = 383;
            else
              v74 = 382;
            v75 = 1;
            v145 = v71[1];
            v76 = v145;
          }
          v169.i64[0] = v76;
          JSC::DFG::NodeOrigin::withSemantic((uint64_t)&v173, &v169, (uint64_t)v3, v4, v5, v6, v7, v8, (int64x2_t *)&v169.u64[1]);
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v160, v41, 0, v74, (uint64_t)&v169.i64[1], v73 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, v77, v78);
          if ((v170 & 1) != 0 && (v170 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v170 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          if ((v169.i8[8] & 1) != 0 && (v169.i64[1] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v169.i64[1] & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          if ((v169.i8[0] & 1) != 0 && (v169.i64[0] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v169.i64[0] & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          if ((v75 & 1) == 0 && (v145 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v145 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          v71 += 2;
          v84 = (uint64_t *)v165;
          LODWORD(v70) = HIDWORD(v165);
          v9 = v148;
        }
        while (v71 != (uint64_t *)(v165 + 16 * HIDWORD(v165)));
      }
      else
      {
        v71 = &v84[2 * v70];
      }
      if ((_DWORD)v70)
      {
        do
        {
          v79 = v84[1];
          if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v79 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
          v84 += 2;
        }
        while (v84 != v71);
      }
      HIDWORD(v165) = 0;
    }
    if ((BYTE8(v173) & 1) != 0 && (*((_QWORD *)&v173 + 1) & 0xFFFFFFFF8) != 0)
      WTF::fastFree(*((_QWORD *)&v173 + 1) & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
    if ((v173 & 1) != 0 && (v173 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v173 & 0xFFFFFFFF8, v67, (uint64_t)v3, v4, v5, v6, v7, v8);
    v28 = *(unsigned int *)(v23 + 220);
    goto LABEL_62;
  }
LABEL_129:
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v88 = (*(_DWORD *)(*((_QWORD *)v10 + 3) + 16) & 0xFFFFFFFE) == 4) : (v88 = 0),
        !v88 ? (v89 = BYTE2(qword_1ECF4C32A) == 0) : (v89 = 0),
        !v89))
  {
    v173 = v157;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v10 + 1088, "Phase ", (uint64_t)&v173, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v166);
  if (HIDWORD(v165))
  v97 = v165;
  if ((_QWORD)v165)
  {
    *(_QWORD *)&v165 = 0;
    DWORD2(v165) = 0;
    WTF::fastFree(v97, v90, v91, v92, v93, v94, v95, v96);
  }
  if ((_QWORD)__src)
    WTF::fastFree(__src, v90, v91, v92, v93, v94, v95, v96);
  v98 = v161;
  if (v9 != v161 && v161)
  {
    v161 = 0;
    LODWORD(v162) = 0;
    WTF::fastFree((unint64_t)v98, v90, v91, v92, v93, v94, v95, v96);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v158)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v152, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
  v99 = v159;
  v159 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 1)
      WTF::fastFree((unint64_t)v99, v90, v91, v92, v93, v94, v95, v96);
    else
      --*(_DWORD *)v99;
  }
  return 1;
}

uint64_t JSC::DFG::performFastStoreBarrierInsertion(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  JSC::DFG::Node *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::DFG *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::DFG::Graph *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  JSC::DFG *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  BOOL v68;
  BOOL v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  JSC::DFG::InPlaceAbstractState *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  WTF *v102;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  __int128 *v126;
  JSC::DFG *v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  JSC::DFG::Graph *v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  void *__src;
  _QWORD *__srca;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  __int16 v149;
  JSC::DFG *v150;
  __int128 v151;
  char v152;
  WTF *v153;
  JSC::DFG *v154;
  WTF *v155;
  uint64_t v156;
  _BYTE v157[128];
  uint64_t v158;
  JSC::DFG::Graph *v159;
  __int128 v160;
  __int128 v161;
  _QWORD v162[2];
  __int128 v163;
  double v164;
  unsigned __int8 *v165[3];
  uint64_t v166;
  int v167;
  char v168;
  uint64_t *v169;
  _QWORD *v170;
  __int128 v171;
  _QWORD v172[3];

  v146 = -1;
  v147 = -1;
  v148 = 0;
  v149 = 256;
  v150 = this;
  *(_QWORD *)&v151 = "fast store barrier insertion";
  *((_QWORD *)&v151 + 1) = 29;
  v152 = 0;
  v153 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v146);
  v154 = this;
  v155 = (WTF *)v157;
  v156 = 8;
  LODWORD(v158) = 0;
  v160 = 0u;
  v161 = 0u;
  v162[0] = "DFG";
  v162[1] = 4;
  v163 = v151;
  v164 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v133 = mach_absolute_time();
    v135 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v135 != -1)
    {
      *(_QWORD *)&v171 = v172;
      v165[0] = (unsigned __int8 *)&v171;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v165, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v134) = dword_1ECF4400C;
    v164 = (double)(v133 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v134 * 1000000000.0);
  }
  v10 = v150;
  if (*((_DWORD *)v150 + 236) == 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v150, 0, (const WTF::CString *)"./dfg/DFGStoreBarrierInsertionPhase.cpp", (const char *)0x59, "BOOL JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]", "m_graph.m_form != SSA");
    __break(0xC471u);
    JUMPOUT(0x1985384FCLL);
  }
  v11 = *((_DWORD *)v150 + 15);
  if (v11)
  {
    do
    {
      if (*((_DWORD *)v10 + 15) <= --v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1985385E8);
      }
      v12 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v11);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 36);
        if (v13)
        {
          v14 = v13 - 1;
          v15 = 8 * v14;
          do
          {
            if (*(_DWORD *)(v12 + 36) <= v14)
            {
              __break(0xC471u);
              JUMPOUT(0x198538598);
            }
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + v15) + 88) = 0;
            v15 -= 8;
            --v14;
          }
          while (v14 != -1);
        }
        v16 = *(_DWORD *)(v12 + 220);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = 8 * v17;
          do
          {
            if (*(_DWORD *)(v12 + 220) <= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x198538568);
            }
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 208) + v18) + 88) = 0;
            v18 -= 8;
            --v17;
          }
          while (v17 != -1);
        }
      }
    }
    while (v11);
    v19 = *((unsigned int *)v10 + 15);
    if ((_DWORD)v19)
    {
      v20 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v20))
      {
        if (v19 == ++v20)
          goto LABEL_119;
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        LODWORD(v21) = *((_DWORD *)v10 + 15);
        v145 = v21;
        while (1)
        {
          if (v21 <= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x1985385F0);
          }
          v22 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v20);
          v170 = 0;
          v158 = 1;
          if (*(_DWORD *)(v22 + 220))
            break;
LABEL_59:
          v45 = HIDWORD(v156);
          if (HIDWORD(v156))
          {
            v50 = *(unsigned int *)(v22 + 216);
            v51 = *(unsigned int *)(v22 + 220);
            v52 = v51 + HIDWORD(v156);
            if (v52 > v50)
            {
              v104 = v50 + (v50 >> 2);
              if (v104 >= 0x10)
                v105 = v104 + 1;
              else
                v105 = 16;
              if (v105 <= v52)
                v106 = v51 + HIDWORD(v156);
              else
                v106 = v105;
              v141 = v51 + HIDWORD(v156);
              __src = *(void **)(v22 + 208);
              v139 = *(unsigned int *)(v22 + 220);
              if (v106 < 9)
              {
                v107 = (void *)(v22 + 224);
                *(_QWORD *)(v22 + 208) = v22 + 224;
                *(_DWORD *)(v22 + 216) = 8;
              }
              else
              {
                if (v106 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198538630);
                }
                v138 = v106;
                v107 = (void *)WTF::fastMalloc((WTF *)(8 * v106));
                *(_DWORD *)(v22 + 216) = v138;
                *(_QWORD *)(v22 + 208) = v107;
              }
              memcpy(v107, __src, 8 * v139);
              LODWORD(v52) = v141;
              if ((void *)(v22 + 224) != __src && __src != 0)
              {
                if (*(void **)(v22 + 208) == __src)
                {
                  *(_QWORD *)(v22 + 208) = 0;
                  *(_DWORD *)(v22 + 216) = 0;
                }
                WTF::fastFree((unint64_t)__src, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
                LODWORD(v52) = v141;
              }
            }
            *(_DWORD *)(v22 + 220) = v52;
            if (v45 - 1 >= (unint64_t)HIDWORD(v156))
            {
              __break(0xC471u);
              JUMPOUT(0x198538628);
            }
            v53 = v52;
            v54 = ~v45;
            v55 = v52;
            do
            {
              --v45;
              v56 = *((_QWORD *)v155 + 2 * v45) + v45;
              v57 = v55 - 1;
              if (v55 - 1 > v56)
              {
                v58 = v55 + v54;
                do
                {
                  if (v53 <= v58)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985385A0);
                  }
                  if (v53 <= v57)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985385A8);
                  }
                  *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v57--) = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v58--);
                }
                while (v57 > v56);
              }
              if (v53 <= v56)
              {
                __break(0xC471u);
                JUMPOUT(0x198538620);
              }
              *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v56) = *((_QWORD *)v155 + 2 * v45 + 1);
              ++v54;
              v55 = v56;
            }
            while (v45);
            HIDWORD(v156) = 0;
          }
          if (v170)
            WTF::fastFree((unint64_t)(v170 - 2), v3, (uint64_t)v4, v5, v6, v7, v8, v9);
          v20 = (v20 + 1);
          v21 = *((unsigned int *)v10 + 15);
          if (v21 > v20)
          {
            while (!*(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v20))
            {
              if (v21 == ++v20)
              {
                LODWORD(v20) = *((_DWORD *)v10 + 15);
                break;
              }
            }
          }
          if (v145 == (_DWORD)v20)
          {
            v10 = v150;
            goto LABEL_119;
          }
        }
        v23 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v23);
          v159 = (JSC::DFG::Graph *)v24;
          switch(*(_WORD *)(v24 + 18))
          {
            case 0x65:
            case 0x66:
            case 0x67:
              v63 = *(unsigned __int8 *)(v24 + 72);
              if (v63 <= 0x18)
              {
                v64 = 1 << v63;
                if ((v64 & 0xE00) != 0)
                {
                  v65 = *(_QWORD *)(v24 + 24);
                  v66 = *((_DWORD *)v150 + 41);
                  if (v66 <= v65)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985385C8);
                  }
                  if (v66 <= (int)v65 + 2)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985385D0);
                  }
                  v67 = *((_QWORD *)v150 + 19);
                  v46 = *(_QWORD *)(v67 + 8 * v65);
                  v47 = *(_QWORD *)(v67 + 8 * (v65 + 2));
                  goto LABEL_52;
                }
                if ((v64 & 0x1803030) != 0)
                {
                  if (*((_DWORD *)v150 + 41) <= *(_QWORD *)(v24 + 24))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985385C0);
                  }
                  v46 = *(_QWORD *)(*((_QWORD *)v150 + 19) + 8 * *(_QWORD *)(v24 + 24));
                  v109 = *((_QWORD *)v150 + 128);
                  if (!v109)
                    goto LABEL_237;
                  v110 = *(_DWORD *)(v109 - 8);
                  v111 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
                  v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
                  v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
                  v114 = v110 & ((v113 >> 31) ^ v113);
                  v115 = *(_QWORD *)(v109 + 8 * v114);
                  if (v115 != v24)
                  {
                    v116 = 1;
                    do
                    {
                      if (!v115)
                        goto LABEL_237;
                      v114 = (v114 + v116) & v110;
                      v115 = *(_QWORD *)(v109 + 8 * v114);
                      ++v116;
                    }
                    while (v115 != v24);
                  }
                }
              }
              goto LABEL_30;
            case 0x68:
              goto LABEL_220;
            case 0x69:
              if (WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains((uint64_t *)v150 + 128, &v159))
              {
                goto LABEL_30;
              }
              v46 = *((_QWORD *)v159 + 3);
LABEL_237:
              if ((v46 & 0xF8000000000000) != 0x20000000000000)
                goto LABEL_30;
              goto LABEL_55;
            case 0x6A:
            case 0x6C:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x79:
            case 0x87:
            case 0x8B:
            case 0x9C:
            case 0x9D:
            case 0xDC:
              v49 = (unint64_t *)(v24 + 24);
              goto LABEL_81;
            case 0x6B:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x78:
            case 0x7A:
            case 0x7B:
            case 0x7C:
            case 0x7D:
            case 0x7E:
            case 0x7F:
            case 0x80:
            case 0x81:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8C:
            case 0x8D:
            case 0x8E:
            case 0x8F:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9A:
            case 0x9E:
            case 0x9F:
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
            case 0xA5:
            case 0xA6:
            case 0xA7:
            case 0xA8:
            case 0xA9:
            case 0xAA:
            case 0xAB:
            case 0xAD:
            case 0xAE:
            case 0xB0:
            case 0xB1:
            case 0xB2:
            case 0xB3:
            case 0xB6:
            case 0xB7:
            case 0xB8:
            case 0xB9:
            case 0xBA:
            case 0xBB:
            case 0xBC:
            case 0xBD:
            case 0xBE:
            case 0xBF:
            case 0xC0:
            case 0xC1:
            case 0xC2:
            case 0xC3:
            case 0xC4:
            case 0xC5:
            case 0xC6:
            case 0xC7:
            case 0xC8:
            case 0xC9:
            case 0xCA:
            case 0xCB:
            case 0xCC:
            case 0xCD:
            case 0xCE:
            case 0xCF:
            case 0xD0:
            case 0xD1:
            case 0xD2:
            case 0xD3:
            case 0xD5:
            case 0xD6:
            case 0xD7:
            case 0xD8:
            case 0xD9:
            case 0xDA:
            case 0xDB:
            case 0xDD:
            case 0xDE:
            case 0xDF:
            case 0xE0:
            case 0xE1:
            case 0xE2:
            case 0xE3:
            case 0xE4:
            case 0xE5:
            case 0xE6:
            case 0xE7:
            case 0xE8:
            case 0xE9:
            case 0xEA:
            case 0xEB:
            case 0xEC:
            case 0xED:
            case 0xEE:
            case 0xEF:
            case 0xF0:
            case 0xF1:
            case 0xF2:
            case 0xF3:
            case 0xF4:
            case 0xF5:
            case 0xF6:
            case 0xF7:
            case 0xF8:
            case 0xF9:
            case 0xFA:
            case 0xFB:
            case 0xFC:
            case 0xFD:
            case 0xFE:
            case 0xFF:
            case 0x100:
            case 0x101:
            case 0x102:
            case 0x103:
            case 0x104:
            case 0x105:
            case 0x106:
            case 0x107:
            case 0x108:
            case 0x109:
            case 0x10A:
            case 0x10B:
            case 0x10C:
            case 0x10D:
            case 0x10E:
            case 0x10F:
            case 0x110:
            case 0x111:
            case 0x112:
            case 0x113:
            case 0x114:
            case 0x115:
            case 0x116:
            case 0x117:
            case 0x118:
            case 0x119:
            case 0x11A:
            case 0x11B:
            case 0x11C:
            case 0x11D:
            case 0x11E:
            case 0x11F:
            case 0x120:
            case 0x121:
            case 0x122:
            case 0x123:
            case 0x124:
            case 0x125:
            case 0x126:
            case 0x127:
            case 0x128:
            case 0x129:
            case 0x12A:
            case 0x12B:
            case 0x12C:
            case 0x12D:
            case 0x12E:
            case 0x12F:
            case 0x130:
            case 0x131:
            case 0x132:
            case 0x133:
            case 0x134:
            case 0x135:
            case 0x136:
            case 0x137:
            case 0x138:
            case 0x139:
            case 0x13A:
            case 0x13B:
            case 0x13C:
            case 0x13D:
            case 0x13E:
            case 0x13F:
            case 0x140:
            case 0x141:
            case 0x142:
            case 0x143:
            case 0x144:
            case 0x145:
            case 0x146:
            case 0x147:
            case 0x148:
            case 0x149:
            case 0x14A:
            case 0x14B:
            case 0x14C:
            case 0x14D:
            case 0x14E:
            case 0x14F:
            case 0x150:
            case 0x151:
            case 0x152:
            case 0x153:
            case 0x154:
            case 0x156:
            case 0x157:
            case 0x159:
            case 0x15A:
            case 0x15B:
            case 0x15C:
            case 0x15D:
            case 0x15E:
            case 0x15F:
            case 0x160:
            case 0x161:
            case 0x162:
            case 0x163:
            case 0x164:
              goto LABEL_30;
            case 0x82:
            case 0x83:
              v46 = *(_QWORD *)(v24 + 24);
              v129 = (v46 >> 50) & 0x3F;
              if ((v129 - 8) < 2)
                goto LABEL_55;
              v130 = v129 > 0x26;
              v131 = (1 << v129) & 0x7FEAB7F800;
              if (!v130 && v131 != 0)
                goto LABEL_55;
              goto LABEL_30;
            case 0x9B:
              v46 = *(_QWORD *)(v24 + 32);
              v47 = *(_QWORD *)(v24 + 40);
              goto LABEL_52;
            case 0xAC:
            case 0xAF:
            case 0xB4:
            case 0x155:
            case 0x158:
            case 0x165:
              v46 = *(_QWORD *)(v24 + 24);
              v47 = *(_QWORD *)(v24 + 32);
LABEL_52:
              v41 = v47 & 0xFF00FFFFFFFFFFFFLL;
              v42 = *(unsigned __int16 *)(v41 + 18);
              if (v42 <= 0xB5)
              {
                if (v42 >= 3)
                  goto LABEL_54;
LABEL_73:
                v48 = *(__int128 **)(v41 + 72);
                goto LABEL_74;
              }
              if (v42 == 182)
                goto LABEL_73;
              if (v42 != 355 && v42 != 348)
              {
LABEL_54:
                if ((*(_DWORD *)(v41 + 56) & 7u) - 2 < 5)
                  goto LABEL_30;
LABEL_55:
                goto LABEL_30;
              }
              v48 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
              {
                JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                LODWORD(qword_1EE342DB8) = 0;
              }
LABEL_74:
              if ((*(_QWORD *)v48 & 0xFFFE000000000002) == 0)
                goto LABEL_55;
LABEL_30:
              if (JSC::DFG::doesGC(v150, v159, v4, v5, v6, v7, v8, v9))
              {
                LODWORD(v158) = v158 + 1;
                v34 = (uint64_t)v170;
                if (v170)
                {
                  v170 = 0;
                  WTF::fastFree(v34 - 16, v25, v26, v27, v28, v29, v30, v31);
                }
              }
              v136 = 0;
              v137 = v159;
              switch(*((_WORD *)v159 + 9))
              {
                case 0x88:
                case 0x89:
                case 0x103:
                case 0x104:
                case 0x105:
                case 0x106:
                case 0x109:
                case 0x10A:
                case 0x10B:
                case 0x10C:
                case 0x10D:
                case 0x10E:
                case 0x10F:
                case 0x110:
                case 0x111:
                case 0x112:
                case 0x119:
                case 0x121:
                case 0x14B:
                case 0x14C:
                case 0x159:
                case 0x15B:
                case 0x161:
                case 0x162:
                case 0x167:
                case 0x168:
                case 0x169:
                case 0x16A:
                case 0x16B:
                  v136 = v158;
                  break;
                case 0x8A:
                case 0x8B:
                case 0x8C:
                case 0x8D:
                case 0x8E:
                case 0x8F:
                case 0x90:
                case 0x91:
                case 0x92:
                case 0x93:
                case 0x94:
                case 0x95:
                case 0x96:
                case 0x97:
                case 0x98:
                case 0x99:
                case 0x9A:
                case 0x9B:
                case 0x9C:
                case 0x9D:
                case 0x9E:
                case 0x9F:
                case 0xA0:
                case 0xA1:
                case 0xA2:
                case 0xA3:
                case 0xA4:
                case 0xA5:
                case 0xA6:
                case 0xA7:
                case 0xA8:
                case 0xA9:
                case 0xAA:
                case 0xAB:
                case 0xAC:
                case 0xAD:
                case 0xAE:
                case 0xAF:
                case 0xB0:
                case 0xB1:
                case 0xB2:
                case 0xB3:
                case 0xB4:
                case 0xB5:
                case 0xB6:
                case 0xB7:
                case 0xB8:
                case 0xB9:
                case 0xBA:
                case 0xBB:
                case 0xBC:
                case 0xBD:
                case 0xBE:
                case 0xBF:
                case 0xC0:
                case 0xC1:
                case 0xC2:
                case 0xC3:
                case 0xC4:
                case 0xC5:
                case 0xC6:
                case 0xC7:
                case 0xC8:
                case 0xC9:
                case 0xCA:
                case 0xCB:
                case 0xCC:
                case 0xCD:
                case 0xCE:
                case 0xCF:
                case 0xD0:
                case 0xD1:
                case 0xD2:
                case 0xD3:
                case 0xD4:
                case 0xD5:
                case 0xD6:
                case 0xD7:
                case 0xD8:
                case 0xD9:
                case 0xDA:
                case 0xDB:
                case 0xDC:
                case 0xDD:
                case 0xDE:
                case 0xDF:
                case 0xE0:
                case 0xE1:
                case 0xE2:
                case 0xE3:
                case 0xE4:
                case 0xE5:
                case 0xE6:
                case 0xE7:
                case 0xE8:
                case 0xE9:
                case 0xEA:
                case 0xEB:
                case 0xEC:
                case 0xED:
                case 0xEE:
                case 0xEF:
                case 0xF0:
                case 0xF1:
                case 0xF2:
                case 0xF3:
                case 0xF4:
                case 0xF5:
                case 0xF6:
                case 0xF7:
                case 0xF8:
                case 0xF9:
                case 0xFA:
                case 0xFB:
                case 0xFC:
                case 0xFD:
                case 0xFE:
                case 0xFF:
                case 0x100:
                case 0x101:
                case 0x102:
                case 0x107:
                case 0x108:
                case 0x113:
                case 0x114:
                case 0x115:
                case 0x116:
                case 0x117:
                case 0x118:
                case 0x11A:
                case 0x11B:
                case 0x11C:
                case 0x11D:
                case 0x11E:
                case 0x11F:
                case 0x120:
                case 0x122:
                case 0x123:
                case 0x124:
                case 0x125:
                case 0x126:
                case 0x127:
                case 0x128:
                case 0x129:
                case 0x12A:
                case 0x12B:
                case 0x12C:
                case 0x12D:
                case 0x12E:
                case 0x12F:
                case 0x130:
                case 0x131:
                case 0x132:
                case 0x133:
                case 0x134:
                case 0x135:
                case 0x136:
                case 0x137:
                case 0x138:
                case 0x139:
                case 0x13A:
                case 0x13B:
                case 0x13C:
                case 0x13D:
                case 0x13E:
                case 0x13F:
                case 0x140:
                case 0x141:
                case 0x142:
                case 0x143:
                case 0x144:
                case 0x145:
                case 0x146:
                case 0x147:
                case 0x148:
                case 0x149:
                case 0x14A:
                case 0x14D:
                case 0x14E:
                case 0x14F:
                case 0x150:
                case 0x151:
                case 0x152:
                case 0x153:
                case 0x154:
                case 0x155:
                case 0x156:
                case 0x157:
                case 0x158:
                case 0x15A:
                case 0x15C:
                case 0x15D:
                case 0x15E:
                case 0x15F:
                case 0x160:
                case 0x163:
                case 0x164:
                case 0x165:
                case 0x166:
                  break;
                default:
                  if (*((_WORD *)v159 + 9) == 26)
                  {
                    v136 = 0;
                    *(_DWORD *)(*((_QWORD *)v159 + 9) + 88) = 0;
                    v137 = v159;
                  }
                  break;
              }
              *((_DWORD *)v137 + 22) = v136;
              v169 = (uint64_t *)&v170;
              v168 = 0;
              v167 = 0;
              v165[2] = (unsigned __int8 *)&v166;
              v166 = 0;
              v165[0] = (unsigned __int8 *)&v168;
              v165[1] = (unsigned __int8 *)&v167;
              if (!v168)
                goto LABEL_28;
              v32 = v159;
              v33 = *((unsigned __int16 *)v159 + 9);
              if ((v33 - 16) >= 2)
              {
                switch(*((_WORD *)v159 + 9))
                {
                  case 0x87:
                  case 0x9D:
                    break;
                  case 0x88:
                  case 0x89:
                  case 0x8A:
                  case 0x8C:
                  case 0x8D:
                  case 0x8E:
                  case 0x8F:
                  case 0x90:
                  case 0x91:
                  case 0x92:
                  case 0x93:
                  case 0x94:
                  case 0x95:
                  case 0x96:
                  case 0x97:
                  case 0x98:
                  case 0x99:
                  case 0x9A:
                  case 0x9E:
                  case 0x9F:
                  case 0xA0:
                  case 0xA1:
                  case 0xA2:
                  case 0xA3:
                  case 0xA4:
                  case 0xA5:
                  case 0xA6:
                  case 0xA7:
                  case 0xA8:
                  case 0xA9:
                  case 0xAA:
                  case 0xAB:
                    goto LABEL_49;
                  case 0x8B:
                  case 0x9C:
                  case 0xAC:
                    goto LABEL_104;
                  case 0x9B:
                    v35 = *((_QWORD *)v159 + 5);
                    goto LABEL_41;
                  default:
                    if (v33 == 344)
                    {
LABEL_104:
                      v35 = *((_QWORD *)v159 + 4);
LABEL_41:
                      v36 = v35 & 0xFF00FFFFFFFFFFFFLL;
LABEL_42:
                      *(_DWORD *)(v36 + 88) = 0;
                      break;
                    }
LABEL_49:
                    v37 = *((_QWORD *)v159 + 3);
                    if ((*((_BYTE *)v159 + 56) & 0x10) != 0)
                    {
                      v38 = *((_QWORD *)v159 + 4);
                      if ((int)v38 + (int)v37 > v37)
                      {
                        v43 = v150;
                        v39 = *((_QWORD *)v159 + 3);
                        do
                        {
                          if (v39 >= *((unsigned int *)v43 + 41))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1985385E0);
                          }
                          if ((*(_QWORD *)(*((_QWORD *)v43 + 19) + 8 * v39) & 0xFF00FFFFFFFFFFFFLL) != 0)
                          {
                            *(_DWORD *)((*(_QWORD *)(*((_QWORD *)v43 + 19) + 8 * v39) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
                            v37 = *((_QWORD *)v32 + 3);
                            v38 = *((_QWORD *)v32 + 4);
                          }
                          ++v39;
                        }
                        while (v39 < (v37 + v38));
                      }
                    }
                    else
                    {
                      v40 = v37 & 0xFF00FFFFFFFFFFFFLL;
                      if (v40)
                      {
                        *(_DWORD *)(v40 + 88) = 0;
                        if ((*((_QWORD *)v32 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          *(_DWORD *)((*((_QWORD *)v32 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
                          v36 = *((_QWORD *)v32 + 5) & 0xFF00FFFFFFFFFFFFLL;
                          if (v36)
                            goto LABEL_42;
                        }
                      }
                    }
                    break;
                }
              }
              else
              {
                v172[0] = *((_QWORD *)v159 + 3) & 0xFF00FFFFFFFFFFFFLL;
                if (*(_DWORD *)(v172[0] + 88) == (_DWORD)v158)
                {
                  if ((v166 & 0x7FFF) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198538464);
                  }
                  if (v167 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198538484);
                  }
                  WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::AbstractHeap const&,JSC::DFG::Node *&>(&v171, (uint64_t *)&v170, &v166, v172, v6, v7, v8, v9);
                }
              }
LABEL_28:
              v23 = HIDWORD(v158) + 1;
              HIDWORD(v158) = v23;
              if (*(_DWORD *)(v22 + 220) > v23)
                continue;
              v44 = (uint64_t)v170;
              if (v170)
              {
                if (*((_DWORD *)v170 - 3))
                {
                  v59 = *((unsigned int *)v170 - 1);
                  if ((_DWORD)v59)
                  {
                    v60 = 16 * v59;
                    v61 = v170;
                    while (!*v61 || (*v61 & 0x7FFFLL) == 0x4000)
                    {
                      v61 += 2;
                      v60 -= 16;
                      if (!v60)
                        goto LABEL_106;
                    }
                  }
                  else
                  {
                    v61 = v170;
                  }
                  v62 = &v170[2 * v59];
                  if (v62 != v61)
                  {
LABEL_108:
                    *(_DWORD *)(v61[1] + 88) = 0;
                    while (1)
                    {
                      v61 += 2;
                      if (v61 == v62)
                        break;
                      if (*v61 && (*v61 & 0x7FFFLL) != 0x4000)
                      {
                        if (v61 == v62)
                          break;
                        goto LABEL_108;
                      }
                    }
                  }
                }
LABEL_106:
                v170 = 0;
                WTF::fastFree(v44 - 16, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              }
              goto LABEL_59;
            case 0xB5:
              v127 = v150;
              v128 = *(_QWORD *)(v24 + 24);
              if (*((_DWORD *)v150 + 41) <= v128)
              {
                __break(0xC471u);
                JUMPOUT(0x198538518);
              }
              goto LABEL_221;
            case 0xD4:
              v117 = *(unsigned __int8 *)(v24 + 72);
              if ((v117 - 9) >= 3 && v117 != 3)
                goto LABEL_30;
              v119 = (*(_DWORD *)(v24 + 24) + 1);
              if (*((_DWORD *)v150 + 41) <= v119)
              {
                __break(0xC471u);
                JUMPOUT(0x1985385B0);
              }
              v120 = *(_DWORD *)(v24 + 32);
              if (v120 == 2)
                goto LABEL_30;
              v142 = (*(_DWORD *)(v24 + 24) + 1);
              __srca = (_QWORD *)*((_QWORD *)v150 + 19);
              v121 = 2;
              v140 = *(_DWORD *)(v24 + 32);
              break;
            default:
              if (*(_WORD *)(v24 + 18) != 391)
                goto LABEL_30;
LABEL_220:
              v127 = v150;
              v128 = *(_QWORD *)(v24 + 24);
              if (*((_DWORD *)v150 + 41) <= v128)
              {
                __break(0xC471u);
                JUMPOUT(0x1985385D8);
              }
LABEL_221:
              v49 = (unint64_t *)(*((_QWORD *)v127 + 19) + 8 * v128);
LABEL_81:
              v46 = *v49;
              goto LABEL_55;
          }
          break;
        }
        while (1)
        {
          v122 = v121 + *((_DWORD *)v159 + 6);
          if (*((_DWORD *)v150 + 41) <= v122)
          {
            __break(0xC471u);
            JUMPOUT(0x1985385B8);
          }
          v123 = __srca[v119];
          v124 = *(_QWORD *)(*((_QWORD *)v150 + 19) + 8 * v122) & 0xFF00FFFFFFFFFFFFLL;
          v125 = *(unsigned __int16 *)(v124 + 0x12);
          if (v125 > 0xB5)
          {
            if (v125 == 182)
            {
LABEL_210:
              v126 = *(__int128 **)(v124 + 72);
              goto LABEL_211;
            }
            if (v125 == 355 || v125 == 348)
            {
              v126 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
              {
                JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                LODWORD(qword_1EE342DB8) = 0;
              }
LABEL_211:
              if ((*(_QWORD *)v126 & 0xFFFE000000000002) == 0)
                goto LABEL_217;
              goto LABEL_218;
            }
          }
          else if (v125 < 3)
          {
            goto LABEL_210;
          }
          if ((*(_DWORD *)(v124 + 56) & 7u) - 2 >= 5)
          {
LABEL_217:
            v120 = v140;
            v119 = v142;
          }
LABEL_218:
          if (v120 == ++v121)
            goto LABEL_30;
        }
      }
    }
  }
LABEL_119:
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v68 = (*(_DWORD *)(*((_QWORD *)v10 + 3) + 16) & 0xFFFFFFFE) == 4) : (v68 = 0),
        !v68 ? (v69 = BYTE2(qword_1ECF4C32A) == 0) : (v69 = 0),
        !v69))
  {
    v171 = v151;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v10 + 1088, "Phase ", (uint64_t)&v171, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v162);
  v77 = *((_QWORD *)&v161 + 1);
  *((_QWORD *)&v161 + 1) = 0;
  if (v77)
  {
    v78 = *(unsigned int *)(v77 + 12);
    v79 = *(_QWORD **)v77;
    if ((_DWORD)v78)
    {
      v80 = 8 * v78;
      do
      {
        if (*v79)
          WTF::fastFree(*v79 - 16, v70, v71, v72, v73, v74, v75, v76);
        ++v79;
        v80 -= 8;
      }
      while (v80);
      v79 = *(_QWORD **)v77;
    }
    if (v79)
    {
      *(_QWORD *)v77 = 0;
      *(_DWORD *)(v77 + 8) = 0;
      WTF::fastFree((unint64_t)v79, v70, v71, v72, v73, v74, v75, v76);
    }
    WTF::fastFree(v77, v70, v71, v72, v73, v74, v75, v76);
  }
  v81 = v161;
  *(_QWORD *)&v161 = 0;
  if (v81)
  {
    v82 = *(unsigned int *)(v81 + 12);
    v83 = *(_QWORD **)v81;
    if ((_DWORD)v82)
    {
      v84 = 8 * v82;
      do
      {
        if (*v83)
          WTF::fastFree(*v83 - 16, v70, v71, v72, v73, v74, v75, v76);
        ++v83;
        v84 -= 8;
      }
      while (v84);
      v83 = *(_QWORD **)v81;
    }
    if (v83)
    {
      *(_QWORD *)v81 = 0;
      *(_DWORD *)(v81 + 8) = 0;
      WTF::fastFree((unint64_t)v83, v70, v71, v72, v73, v74, v75, v76);
    }
    WTF::fastFree(v81, v70, v71, v72, v73, v74, v75, v76);
  }
  v85 = *((_QWORD *)&v160 + 1);
  *((_QWORD *)&v160 + 1) = 0;
  if (v85)
  {
    v86 = *(uint64_t **)(v85 + 32);
    *(_QWORD *)(v85 + 32) = 0;
    if (v86)
    {
      v87 = *v86;
      if (*v86)
      {
        v88 = *(unsigned int *)(v87 - 4);
        if ((_DWORD)v88)
        {
          v89 = v87 + 24;
          do
          {
            if (*(_QWORD *)(v89 - 24) != -1)
            {
              v90 = *(_QWORD *)(v89 - 16);
              if (v89 != v90 && v90 != 0)
              {
                *(_QWORD *)(v89 - 16) = 0;
                *(_DWORD *)(v89 - 8) = 0;
                WTF::fastFree(v90, v70, v71, v72, v73, v74, v75, v76);
              }
            }
            v89 += 48;
            --v88;
          }
          while (v88);
        }
        WTF::fastFree(v87 - 16, v70, v71, v72, v73, v74, v75, v76);
      }
      WTF::fastFree((unint64_t)v86, v70, v71, v72, v73, v74, v75, v76);
    }
    WTF::fastFree(v85, v70, v71, v72, v73, v74, v75, v76);
  }
  v92 = (JSC::DFG::InPlaceAbstractState *)v160;
  *(_QWORD *)&v160 = 0;
  if (v92)
  {
    JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState(v92, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  v101 = v155;
  if (v157 != (_BYTE *)v155 && v155)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v101, v70, v71, v72, v73, v74, v75, v76);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v152)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v146, (uint64_t)v70, v71, v72, v73, v74, v75, v76);
  v102 = v153;
  v153 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 1)
      WTF::fastFree((unint64_t)v102, v70, v71, v72, v73, v74, v75, v76);
    else
      --*(_DWORD *)v102;
  }
  return 1;
}

uint64_t JSC::DFG::performGlobalStoreBarrierInsertion(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  JSC::DFG::Graph *v3;
  JSC::DFG::InPlaceAbstractState *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG::InPlaceAbstractState *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::Graph *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  JSC::DFG::Graph *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  JSC::DFG::Graph *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  unsigned int v136;
  JSC::DFG::Graph *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  BOOL v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  WTF *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  JSC::DFG::InPlaceAbstractState *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  JSC::DFG::PhiChildren *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  JSC::DFG::PhiChildren *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  __int16 v202;
  JSC::DFG::Graph *v203;
  __int128 v204;
  char v205;
  WTF *v206;
  JSC::DFG *v207;
  WTF *v208;
  uint64_t v209;
  _BYTE v210[128];
  int v211;
  WTF *v212[2];
  WTF *v213[2];
  char v214;
  _QWORD v215[2];
  __int128 v216;
  double v217;
  __int128 v218;
  char v219;
  __int128 *v220;

  v199 = -1;
  v200 = -1;
  v201 = 0;
  v202 = 256;
  v203 = this;
  *(_QWORD *)&v204 = "global store barrier insertion";
  *((_QWORD *)&v204 + 1) = 31;
  v205 = 0;
  v206 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v199);
  v207 = this;
  v208 = (WTF *)v210;
  v209 = 8;
  v211 = 0;
  *(_OWORD *)v212 = 0u;
  *(_OWORD *)v213 = 0u;
  v215[0] = "DFG";
  v215[1] = 4;
  v216 = v204;
  v217 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v193 = mach_absolute_time();
    v195 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v195 != -1)
    {
      *(_QWORD *)&v218 = &v219;
      v220 = &v218;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v220, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v194) = dword_1ECF4400C;
    v217 = (double)(v193 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v194 * 1000000000.0);
  }
  v3 = v203;
  if (*((_DWORD *)v203 + 236) != 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v203, 0, (const WTF::CString *)"./dfg/DFGStoreBarrierInsertionPhase.cpp", (const char *)0x62, "BOOL JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]", "m_graph.m_form == SSA");
    __break(0xC471u);
    JUMPOUT(0x198539A38);
  }
  v4 = (JSC::DFG::InPlaceAbstractState *)WTF::fastMalloc((WTF *)0x60);
  JSC::DFG::InPlaceAbstractState::InPlaceAbstractState(v4, v3);
  v12 = v212[0];
  v212[0] = v4;
  if (v12)
  {
    JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState(v12, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    v4 = v212[0];
  }
  v21 = v203;
  v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v29 = *((_QWORD *)v21 + 4);
  *((_QWORD *)v29 + 1) = v21;
  *((_QWORD *)v29 + 2) = *((_QWORD *)v21 + 2);
  *((_QWORD *)v29 + 3) = v4;
  *((_QWORD *)v29 + 4) = 0;
  if (*((_DWORD *)v21 + 236) == 2)
  {
    v179 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v186 = JSC::DFG::PhiChildren::PhiChildren(v179, v21, v180, v181, v182, v183, v184, v185);
    v187 = (uint64_t *)*((_QWORD *)v29 + 4);
    *((_QWORD *)v29 + 4) = v186;
    if (v187)
    {
      v188 = *v187;
      if (*v187)
      {
        v189 = *(unsigned int *)(v188 - 4);
        if ((_DWORD)v189)
        {
          v190 = v188 + 24;
          do
          {
            if (*(_QWORD *)(v190 - 24) != -1)
            {
              v191 = *(_QWORD *)(v190 - 16);
              if (v190 != v191 && v191 != 0)
              {
                *(_QWORD *)(v190 - 16) = 0;
                *(_DWORD *)(v190 - 8) = 0;
                WTF::fastFree(v191, v22, v23, v24, v25, v26, v27, v28);
              }
            }
            v190 += 48;
            --v189;
          }
          while (v189);
        }
        WTF::fastFree(v188 - 16, v22, v23, v24, v25, v26, v27, v28);
      }
      WTF::fastFree((unint64_t)v187, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  v30 = v212[1];
  v212[1] = v29;
  if (v30)
  {
    v31 = (uint64_t *)*((_QWORD *)v30 + 4);
    *((_QWORD *)v30 + 4) = 0;
    if (v31)
    {
      v32 = *v31;
      if (*v31)
      {
        v33 = *(unsigned int *)(v32 - 4);
        if ((_DWORD)v33)
        {
          v34 = v32 + 24;
          do
          {
            if (*(_QWORD *)(v34 - 24) != -1)
            {
              v35 = *(_QWORD *)(v34 - 16);
              if (v34 != v35 && v35 != 0)
              {
                *(_QWORD *)(v34 - 16) = 0;
                *(_DWORD *)(v34 - 8) = 0;
                WTF::fastFree(v35, v22, v23, v24, v25, v26, v27, v28);
              }
            }
            v34 += 48;
            --v33;
          }
          while (v33);
        }
        WTF::fastFree(v32 - 16, v22, v23, v24, v25, v26, v27, v28);
      }
      WTF::fastFree((unint64_t)v31, v22, v23, v24, v25, v26, v27, v28);
    }
    WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
  }
  v214 = 0;
  v37 = v203;
  v38 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  WTF::Vector<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v38, *((unsigned int *)v37 + 15));
  v46 = v213[0];
  v213[0] = v38;
  if (v46)
  {
    v47 = *((unsigned int *)v46 + 3);
    v48 = *(_QWORD **)v46;
    if ((_DWORD)v47)
    {
      v49 = 8 * v47;
      do
      {
        if (*v48)
          WTF::fastFree(*v48 - 16, v39, v40, v41, v42, v43, v44, v45);
        ++v48;
        v49 -= 8;
      }
      while (v49);
      v48 = *(_QWORD **)v46;
    }
    if (v48)
    {
      *(_QWORD *)v46 = 0;
      *((_DWORD *)v46 + 2) = 0;
      WTF::fastFree((unint64_t)v48, v39, v40, v41, v42, v43, v44, v45);
    }
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  }
  v50 = v203;
  v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v51 = 0;
  *((_QWORD *)v51 + 1) = 0;
  WTF::Vector<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v51, *((unsigned int *)v50 + 15));
  v59 = v213[1];
  v213[1] = v51;
  if (v59)
  {
    v60 = *((unsigned int *)v59 + 3);
    v61 = *(_QWORD **)v59;
    if ((_DWORD)v60)
    {
      v62 = 8 * v60;
      do
      {
        if (*v61)
          WTF::fastFree(*v61 - 16, v52, v53, v54, v55, v56, v57, v58);
        ++v61;
        v62 -= 8;
      }
      while (v62);
      v61 = *(_QWORD **)v59;
    }
    if (v61)
    {
      *(_QWORD *)v59 = 0;
      *((_DWORD *)v59 + 2) = 0;
      WTF::fastFree((unint64_t)v61, v52, v53, v54, v55, v56, v57, v58);
    }
    WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  }
  JSC::DFG::Graph::blocksInPostOrder(v203, (void *)1, v53, v54, v55, v56, v57, v58, (uint64_t)&v218);
  v70 = HIDWORD(v218);
  if (HIDWORD(v218))
  {
    v71 = 0;
    while (1)
    {
      if (HIDWORD(v218) <= --v70)
      {
        __break(0xC471u);
        JUMPOUT(0x198539B18);
      }
      v72 = *(_QWORD *)(v218 + 8 * v70);
      {
        v73 = *(_QWORD *)(v72 + 200);
        v74 = *(unsigned int *)(v73 + 92);
        if ((_DWORD)v74)
          break;
      }
LABEL_78:
      if (!v70)
      {
        if ((v71 & 1) == 0)
          goto LABEL_156;
        v71 = 0;
        v70 = HIDWORD(v218);
        if (!HIDWORD(v218))
          goto LABEL_156;
      }
    }
    v75 = 0;
    v76 = *(uint64_t **)(v73 + 80);
    v77 = &v76[v74];
    while (1)
    {
      v78 = *v76;
      if ((*v76 & 1) == 0)
      {
        v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
        if (*(_DWORD *)((v78 & 0xFFFFFFFFFFFFFFFELL) + 88) != v211)
          break;
      }
LABEL_68:
      if (++v76 == v77)
      {
        if (!v75)
          goto LABEL_78;
        v98 = *(unsigned int *)(v72 + 220);
        if ((_DWORD)v98)
        {
          v99 = 8 * v98;
          while (1)
          {
            v100 = *(_QWORD *)(*(_QWORD *)(v72 + 208) - 8 + v99);
            v101 = *(unsigned __int16 *)(v100 + 18);
            if ((v101 - 364) < 0xC)
              break;
            if ((v101 - 28) < 2 || (v101 - 23) <= 2)
            {
              v99 -= 8;
              if (v99)
                continue;
            }
            goto LABEL_240;
          }
        }
        else
        {
LABEL_240:
          v100 = 0;
        }
        v102 = 1;
        switch(*(_WORD *)(v100 + 18))
        {
          case 0x16C:
            goto LABEL_90;
          case 0x16D:
            v102 = 2;
            goto LABEL_90;
          case 0x16E:
            v102 = *(_DWORD *)(*(_QWORD *)(v100 + 72) + 12) + 1;
            goto LABEL_154;
          case 0x16F:
            v102 = *(_DWORD *)(*(_QWORD *)(v100 + 72) + 12);
LABEL_154:
            if (!v102)
              goto LABEL_155;
LABEL_90:
            v103 = 0;
            v104 = 0;
            v197 = v100;
            v198 = (uint64_t *)(v100 + 72);
            v196 = v102;
            break;
          default:
LABEL_155:
            v71 = 1;
            goto LABEL_78;
        }
        while (2)
        {
          v105 = *(unsigned __int16 *)(v100 + 18);
          if (v105 == 366)
          {
            v135 = (_QWORD *)*v198;
            v136 = *(_DWORD *)(*v198 + 12);
            if (v136 > v103)
            {
              v107 = *v135 + 32 * v104;
              goto LABEL_98;
            }
            if (v136 != v103)
            {
              __break(0xC471u);
              JUMPOUT(0x198539A90);
            }
            v106 = v135 + 2;
          }
          else
          {
            if (v105 != 367)
            {
              if (!v103)
              {
                v106 = v198;
                if (v105 != 364)
                  v106 = (uint64_t *)*v198;
                goto LABEL_99;
              }
              if (v103 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198539AECLL);
              }
              v107 = *v198;
LABEL_98:
              v106 = (uint64_t *)(v107 + 16);
              goto LABEL_99;
            }
            if (*(_DWORD *)(*v198 + 12) <= v103)
            {
              __break(0xC471u);
              JUMPOUT(0x198539B38);
            }
            v106 = (uint64_t *)(*(_QWORD *)*v198 + 8 * v104);
          }
LABEL_99:
          v108 = *(unsigned int *)(v72 + 8);
          if (*((_DWORD *)v213[1] + 3) <= v108)
          {
            __break(0xC471u);
            JUMPOUT(0x198539B28);
          }
          v109 = *(uint64_t **)(*(_QWORD *)v213[1] + 8 * v108);
          if (v109)
          {
            v110 = *((unsigned int *)v109 - 1);
            v111 = &v109[v110];
            if (*((_DWORD *)v109 - 3))
            {
              v112 = v109;
              if ((_DWORD)v110)
              {
                v113 = 8 * v110;
                v112 = v109;
                while ((unint64_t)(*v112 + 1) <= 1)
                {
                  ++v112;
                  v113 -= 8;
                  if (!v113)
                  {
                    v112 = v111;
                    break;
                  }
                }
              }
LABEL_107:
              if (v109)
                v114 = &v109[*((unsigned int *)v109 - 1)];
              else
                v114 = 0;
              if (v114 == v112)
              {
LABEL_141:
                v103 = v104 + 1;
                v104 = (v104 + 1);
                v71 = 1;
                v100 = v197;
                if (v196 == v103)
                  goto LABEL_78;
                continue;
              }
              v115 = *v106;
              while (2)
              {
                v116 = *(unsigned int *)(v115 + 8);
                if (*((_DWORD *)v213[0] + 3) <= v116)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198539B10);
                }
                v117 = *v112;
                v118 = (uint64_t *)(*(_QWORD *)v213[0] + 8 * v116);
                v119 = *v118;
                if (*v118
                  || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v118, 0, v64, v65, v66, v67, v68, v69), (v119 = *v118) != 0))
                {
                  v120 = *(_DWORD *)(v119 - 8);
                }
                else
                {
                  v120 = 0;
                }
                v121 = (~(v117 << 32) + v117) ^ ((unint64_t)(~(v117 << 32) + v117) >> 22);
                v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
                v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
                v124 = v120 & ((v123 >> 31) ^ v123);
                v63 = (uint64_t *)(v119 + 8 * v124);
                v125 = *v63;
                if (*v63)
                {
                  v126 = 0;
                  v127 = 1;
                  while (v125 != v117)
                  {
                    if (v125 == -1)
                      v126 = v63;
                    v124 = (v124 + v127) & v120;
                    v63 = (uint64_t *)(v119 + 8 * v124);
                    v125 = *v63;
                    ++v127;
                    if (!*v63)
                    {
                      if (v126)
                      {
                        *v126 = 0;
                        --*(_DWORD *)(*v118 - 16);
                        v63 = v126;
                      }
                      goto LABEL_122;
                    }
                  }
                }
                else
                {
LABEL_122:
                  *v63 = v117;
                  v128 = *v118;
                  if (*v118)
                    v129 = *(_DWORD *)(v128 - 12) + 1;
                  else
                    v129 = 1;
                  *(_DWORD *)(v128 - 12) = v129;
                  v130 = *v118;
                  if (*v118)
                    v131 = *(_DWORD *)(v130 - 12);
                  else
                    v131 = 0;
                  v132 = (*(_DWORD *)(v130 - 16) + v131);
                  v133 = *(unsigned int *)(v130 - 4);
                  if (v133 > 0x400)
                  {
                    if (v133 > 2 * v132)
                      goto LABEL_128;
                  }
                  else if (3 * v133 > 4 * v132)
                  {
                    goto LABEL_128;
                  }
                  WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v118, v63, v64, v65, v66, v67, v68, v69);
                }
LABEL_128:
                v134 = v112 + 1;
                v112 = v111;
                if (v134 != v111)
                {
                  v112 = v134;
                  while ((unint64_t)(*v112 + 1) <= 1)
                  {
                    if (++v112 == v111)
                    {
                      v112 = v111;
                      break;
                    }
                  }
                }
                if (v112 == v114)
                  goto LABEL_141;
                continue;
              }
            }
            v112 = &v109[v110];
          }
          else
          {
            v112 = 0;
            v110 = 0;
          }
          break;
        }
        v111 = &v109[v110];
        goto LABEL_107;
      }
    }
    v80 = *(unsigned int *)(v72 + 8);
    if (*((_DWORD *)v213[1] + 3) <= v80)
    {
      __break(0xC471u);
      JUMPOUT(0x198539B08);
    }
    v81 = (uint64_t *)(*(_QWORD *)v213[1] + 8 * v80);
    v82 = *v81;
    if (*v81
      || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v81, 0, v64, v65, v66, v67, v68, v69), (v82 = *v81) != 0))
    {
      v83 = *(_DWORD *)(v82 - 8);
    }
    else
    {
      v83 = 0;
    }
    v84 = (v79 + ~(v79 << 32)) ^ ((v79 + ~(v79 << 32)) >> 22);
    v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
    v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
    v87 = v83 & ((v86 >> 31) ^ v86);
    v63 = (uint64_t *)(v82 + 8 * v87);
    v88 = *v63;
    if (*v63)
    {
      v89 = 0;
      v90 = 1;
      do
      {
        if (v88 == v79)
        {
          v97 = 0;
          goto LABEL_67;
        }
        if (v88 == -1)
          v89 = v63;
        v87 = (v87 + v90) & v83;
        v63 = (uint64_t *)(v82 + 8 * v87);
        v88 = *v63;
        ++v90;
      }
      while (*v63);
      if (v89)
      {
        *v89 = 0;
        --*(_DWORD *)(*v81 - 16);
        v63 = v89;
      }
    }
    *v63 = v79;
    v91 = *v81;
    if (*v81)
      v92 = *(_DWORD *)(v91 - 12) + 1;
    else
      v92 = 1;
    *(_DWORD *)(v91 - 12) = v92;
    v93 = *v81;
    if (*v81)
      v94 = *(_DWORD *)(v93 - 12);
    else
      v94 = 0;
    v95 = (*(_DWORD *)(v93 - 16) + v94);
    v96 = *(unsigned int *)(v93 - 4);
    if (v96 > 0x400)
    {
      if (v96 > 2 * v95)
        goto LABEL_66;
    }
    else if (3 * v96 > 4 * v95)
    {
      goto LABEL_66;
    }
    WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v81, v63, v64, v65, v66, v67, v68, v69);
LABEL_66:
    v97 = 1;
LABEL_67:
    v75 = (v97 | v75) != 0;
    goto LABEL_68;
  }
LABEL_156:
  v214 = 1;
  v137 = v203;
  v138 = *((unsigned int *)v203 + 15);
  if ((_DWORD)v138)
  {
    v139 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v203 + 6) + 8 * v139))
    {
      if (v138 == ++v139)
        goto LABEL_170;
    }
    if ((_DWORD)v138 != (_DWORD)v139)
    {
      v140 = v139;
      v141 = *((unsigned int *)v203 + 15);
      do
      {
        if (v141 <= v140)
        {
          __break(0xC471u);
          JUMPOUT(0x198539B30);
        }
        v141 = *((unsigned int *)v137 + 15);
        if (v141 > v140)
        {
          while (!*(_QWORD *)(*((_QWORD *)v137 + 6) + 8 * v140))
          {
            if (v141 == ++v140)
            {
              v140 = *((unsigned int *)v137 + 15);
              goto LABEL_169;
            }
          }
          v140 = v140;
        }
LABEL_169:
        ;
      }
      while (v138 != v140);
    }
  }
LABEL_170:
  v142 = v218;
  if ((_QWORD)v218)
  {
    *(_QWORD *)&v218 = 0;
    DWORD2(v218) = 0;
    WTF::fastFree(v142, v63, v64, v65, v66, v67, v68, v69);
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v143 = (*(_DWORD *)(*((_QWORD *)v203 + 3) + 16) & 0xFFFFFFFE) == 4) : (v143 = 0),
        !v143 ? (v144 = BYTE2(qword_1ECF4C32A) == 0) : (v144 = 0),
        !v144))
  {
    v218 = v204;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v203 + 1088, "Phase ", (uint64_t)&v218, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v215);
  v152 = v213[1];
  v213[1] = 0;
  if (v152)
  {
    v153 = *((unsigned int *)v152 + 3);
    v154 = *(_QWORD **)v152;
    if ((_DWORD)v153)
    {
      v155 = 8 * v153;
      do
      {
        if (*v154)
          WTF::fastFree(*v154 - 16, v145, v146, v147, v148, v149, v150, v151);
        ++v154;
        v155 -= 8;
      }
      while (v155);
      v154 = *(_QWORD **)v152;
    }
    if (v154)
    {
      *(_QWORD *)v152 = 0;
      *((_DWORD *)v152 + 2) = 0;
      WTF::fastFree((unint64_t)v154, v145, v146, v147, v148, v149, v150, v151);
    }
    WTF::fastFree((unint64_t)v152, v145, v146, v147, v148, v149, v150, v151);
  }
  v156 = v213[0];
  v213[0] = 0;
  if (v156)
  {
    v157 = *((unsigned int *)v156 + 3);
    v158 = *(_QWORD **)v156;
    if ((_DWORD)v157)
    {
      v159 = 8 * v157;
      do
      {
        if (*v158)
          WTF::fastFree(*v158 - 16, v145, v146, v147, v148, v149, v150, v151);
        ++v158;
        v159 -= 8;
      }
      while (v159);
      v158 = *(_QWORD **)v156;
    }
    if (v158)
    {
      *(_QWORD *)v156 = 0;
      *((_DWORD *)v156 + 2) = 0;
      WTF::fastFree((unint64_t)v158, v145, v146, v147, v148, v149, v150, v151);
    }
    WTF::fastFree((unint64_t)v156, v145, v146, v147, v148, v149, v150, v151);
  }
  v160 = v212[1];
  v212[1] = 0;
  if (v160)
  {
    v161 = (uint64_t *)*((_QWORD *)v160 + 4);
    *((_QWORD *)v160 + 4) = 0;
    if (v161)
    {
      v162 = *v161;
      if (*v161)
      {
        v163 = *(unsigned int *)(v162 - 4);
        if ((_DWORD)v163)
        {
          v164 = v162 + 24;
          do
          {
            if (*(_QWORD *)(v164 - 24) != -1)
            {
              v165 = *(_QWORD *)(v164 - 16);
              if (v164 != v165 && v165 != 0)
              {
                *(_QWORD *)(v164 - 16) = 0;
                *(_DWORD *)(v164 - 8) = 0;
                WTF::fastFree(v165, v145, v146, v147, v148, v149, v150, v151);
              }
            }
            v164 += 48;
            --v163;
          }
          while (v163);
        }
        WTF::fastFree(v162 - 16, v145, v146, v147, v148, v149, v150, v151);
      }
      WTF::fastFree((unint64_t)v161, v145, v146, v147, v148, v149, v150, v151);
    }
    WTF::fastFree((unint64_t)v160, v145, v146, v147, v148, v149, v150, v151);
  }
  v167 = v212[0];
  v212[0] = 0;
  if (v167)
  {
    JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState(v167, v145, v146, v147, v148, v149, v150, v151);
    WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
  }
  v176 = v208;
  if (v210 != (_BYTE *)v208 && v208)
  {
    v208 = 0;
    LODWORD(v209) = 0;
    WTF::fastFree((unint64_t)v176, v145, v146, v147, v148, v149, v150, v151);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v205)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v199, (uint64_t)v145, v146, v147, v148, v149, v150, v151);
  v177 = v206;
  v206 = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 1)
      WTF::fastFree((unint64_t)v177, v145, v146, v147, v148, v149, v150, v151);
    else
      --*(_DWORD *)v177;
  }
  return 1;
}

uint64_t JSC::DFG::performStrengthReduction(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  JSC::DFG *v48;
  __int128 v49;
  char v50;
  WTF *v51;
  JSC::DFG *v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[128];
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  _QWORD v61[2];
  __int128 v62;
  double v63;
  char v64;
  __int128 *v65;

  v44 = -1;
  v45 = -1;
  v46 = 0;
  v47 = 256;
  v48 = this;
  *(_QWORD *)&v49 = "strength reduction";
  *((_QWORD *)&v49 + 1) = 19;
  v50 = 0;
  v51 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v44);
  v52 = this;
  v53 = (WTF *)v55;
  v54 = 8;
  v61[0] = "DFG";
  v61[1] = 4;
  v62 = v49;
  v63 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v41 = mach_absolute_time();
    v43 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v43 != -1)
    {
      *(_QWORD *)&v60 = &v64;
      v65 = &v60;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v42) = dword_1ECF4400C;
    v63 = (double)(v41 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v42 * 1000000000.0);
  }
  v59 = 0;
  v10 = *((_DWORD *)v48 + 15);
  if (!v10)
    goto LABEL_41;
  do
  {
    if (*((_DWORD *)v48 + 15) <= --v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198539F50);
    }
    v11 = *(_QWORD *)(*((_QWORD *)v48 + 6) + 8 * v10);
    v56 = v11;
    if (v11)
    {
      v57 = 0;
      if (*(_DWORD *)(v11 + 220))
      {
        v12 = 0;
        do
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v12);
          JSC::DFG::StrengthReductionPhase::handleNode((JSC::DFG::StrengthReductionPhase *)&v44, v3, v4, v5, v6, v7, v8, v9);
          v12 = v57 + 1;
          v57 = v12;
          v11 = v56;
        }
        while (*(_DWORD *)(v56 + 220) > v12);
      }
      v13 = HIDWORD(v54);
      if (HIDWORD(v54))
      {
        v14 = *(unsigned int *)(v11 + 216);
        v15 = *(unsigned int *)(v11 + 220);
        v16 = v15 + HIDWORD(v54);
        if (v16 > v14)
        {
          v35 = v14 + (v14 >> 2);
          if (v35 >= 0x10)
            v36 = v35 + 1;
          else
            v36 = 16;
          if (v36 <= v16)
            v37 = v15 + HIDWORD(v54);
          else
            v37 = v36;
          v38 = *(const void **)(v11 + 208);
          if (v37 < 9)
          {
            v39 = (void *)(v11 + 224);
            *(_QWORD *)(v11 + 208) = v11 + 224;
            *(_DWORD *)(v11 + 216) = 8;
          }
          else
          {
            if (v37 >> 29)
              goto LABEL_71;
            v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
            *(_DWORD *)(v11 + 216) = v37;
            *(_QWORD *)(v11 + 208) = v39;
          }
          memcpy(v39, v38, 8 * v15);
          if ((const void *)(v11 + 224) != v38 && v38 != 0)
          {
            if (*(const void **)(v11 + 208) == v38)
            {
              *(_QWORD *)(v11 + 208) = 0;
              *(_DWORD *)(v11 + 216) = 0;
            }
            WTF::fastFree((unint64_t)v38, v3, v4, v5, v6, v7, v8, v9);
          }
        }
        *(_DWORD *)(v11 + 220) = v16;
        if (v13 - 1 >= (unint64_t)HIDWORD(v54))
        {
          __break(0xC471u);
          JUMPOUT(0x198539F60);
        }
        v17 = ~v13;
        v18 = v16;
        while (1)
        {
          --v13;
          v19 = *((_QWORD *)v53 + 2 * v13) + v13;
          v20 = v18 - 1;
          if (v18 - 1 > v19)
            break;
LABEL_19:
          if (v16 <= v19)
          {
            __break(0xC471u);
            JUMPOUT(0x198539F58);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v19) = *((_QWORD *)v53 + 2 * v13 + 1);
          ++v17;
          v18 = v19;
          if (!v13)
          {
            HIDWORD(v54) = 0;
            goto LABEL_9;
          }
        }
        v21 = v18 + v17;
        while (v16 > v21)
        {
          if (v16 <= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x198539F48);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v20--) = *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v21--);
          if (v20 <= v19)
            goto LABEL_19;
        }
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x198539F40);
      }
    }
LABEL_9:
    ;
  }
  while (v10);
  if (!v59)
  {
LABEL_41:
    v24 = 0;
    goto LABEL_33;
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v22 = (*(_DWORD *)(*((_QWORD *)v48 + 3) + 16) & 0xFFFFFFFE) == 4) : (v22 = 0),
        !v22 ? (v23 = BYTE2(qword_1ECF4C32A) == 0) : (v23 = 0),
        !v23))
  {
    v60 = v49;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v48 + 1088, "Phase ", (uint64_t)&v60, " changed the IR.\n", "\n");
  }
  v24 = 1;
LABEL_33:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v61);
  v32 = v53;
  if (v55 != (_BYTE *)v53 && v53)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v50)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v44, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
  v33 = v51;
  v51 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::fastFree((unint64_t)v33, v25, v26, v27, v28, v29, v30, v31);
    else
      --*(_DWORD *)v33;
  }
  return v24;
}

void JSC::DFG::StructureAbstractValue::observeTransition(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void **v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *a1;
  if (*a1 == 4)
    return;
  v11 = (void **)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v8 & 1) != 0)
  {
    v14 = *(unsigned int *)v11;
    if (!(_DWORD)v14)
      return;
    if (v11[1] == a2)
    {
LABEL_17:
      if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(a1, a3))
        return;
      v13 = *a1;
      goto LABEL_19;
    }
    v15 = 0;
    v16 = (unsigned int *)(v11 + 2);
    while (v14 - 1 != v15)
    {
      v17 = *(void ***)&v16[2 * v15++];
      if (v17 == a2)
      {
        if (v15 >= v14)
          return;
        goto LABEL_17;
      }
    }
  }
  else if (v11 == a2 && v11 != (void **)a3)
  {
    if (v11)
    {
      v18 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v18 = 0x400000002;
      v19 = *a1;
      *(_QWORD *)(v18 + 8) = *a1 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(v18 + 16) = a3;
      v13 = v19 & 2 | v18 | 1;
    }
    else
    {
      v13 = *a1 & 2 | a3;
    }
    *a1 = v13;
LABEL_19:
    if ((v13 & 1) != 0 && *(_DWORD *)(v13 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
    {
      WTF::fastFree(v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      *a1 = 4;
    }
  }
}

void JSC::DFG::StructureAbstractValue::observeTransitions(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  if (*a1 == 4)
    return;
  v27 = 0;
  v9 = a2[3];
  if (!v9)
    goto LABEL_19;
  do
  {
    if (a2[3] <= --v9)
    {
      __break(0xC471u);
      return;
    }
    v11 = *(unsigned int **)(*(_QWORD *)a2 + 16 * v9);
    v12 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*a1 & 1) == 0)
    {
      if (v11 != v12)
        continue;
LABEL_8:
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v9 + 8);
      if ((v27 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v27, *(_QWORD *)(*(_QWORD *)a2 + 16 * v9 + 8));
      }
      else if (v13 != (v27 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v27 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v25 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v25 = 0x400000002;
          v26 = v27;
          *(_QWORD *)(v25 + 8) = v27 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v25 + 16) = v13;
          v22 = v26 & 2 | (unint64_t)v25 | 1;
        }
        else
        {
          v22 = v27 & 2 | v13;
        }
        v27 = v22;
      }
      continue;
    }
    v20 = *v12;
    if (!(_DWORD)v20)
      continue;
    if (*((unsigned int **)v12 + 1) == v11)
      goto LABEL_8;
    v15 = 0;
    v21 = v12 + 4;
    while (v20 - 1 != v15)
    {
      v14 = *(unsigned int **)&v21[2 * v15++];
      if (v14 == v11)
      {
        if (v15 >= v20)
          break;
        goto LABEL_8;
      }
    }
  }
  while (v9);
  if ((v27 & 1) != 0)
  {
    if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(a1, &v27))
      goto LABEL_19;
  }
  else
  {
    v16 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v27 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      goto LABEL_19;
    v17 = *a1;
    if ((*a1 & 1) != 0)
    {
      if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(a1, v27 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_19;
    }
    else
    {
      if ((v17 & 0xFFFFFFFFFFFFFFFCLL) == v16)
        goto LABEL_19;
      if ((v17 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v23 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v23 = 0x400000002;
        v24 = *a1;
        *(_QWORD *)(v23 + 8) = *a1 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v23 + 16) = v16;
        v18 = v24 & 2 | v23 | 1;
      }
      else
      {
        v18 = *a1 & 2 | v16;
      }
      *a1 = v18;
    }
  }
  v19 = *a1;
  if ((*a1 & 1) != 0 && *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
  {
    WTF::fastFree(v19 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    *a1 = 4;
  }
LABEL_19:
  if ((v27 & 1) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::StructureAbstractValue::mergeNotTop(JSC::DFG::StructureAbstractValue *this, const JSC::DFG::RegisteredStructureSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)this, a2))
      return 0;
  }
  else
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v9 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      return 0;
    v11 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) != 0)
    {
      if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)this, v10))
        return 0;
    }
    else
    {
      if ((v11 & 0xFFFFFFFFFFFFFFFCLL) == v10)
        return 0;
      if ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v15 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v15 = 0x400000002;
        v16 = *(_QWORD *)this;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v15 + 16) = v10;
        v13 = v16 & 2 | v15 | 1;
      }
      else
      {
        v13 = *(_QWORD *)this & 2 | v10;
      }
      *(_QWORD *)this = v13;
    }
  }
  v14 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0 && *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
  {
    WTF::fastFree(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)this = 4;
  }
  return 1;
}

uint64_t JSC::DFG::StructureAbstractValue::mergeSlow(JSC::DFG::StructureAbstractValue *this, const JSC::DFG::StructureAbstractValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = 0;
  v10 = *(_QWORD *)this;
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)this & 2) == 0 && (v11 & 2) != 0)
  {
    v10 |= 2uLL;
    *(_QWORD *)this = v10;
    v11 = *(_QWORD *)a2;
    v9 = 1;
  }
  if ((v11 & 1) != 0)
  {
    if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)this, a2))
      goto LABEL_8;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v11 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    {
LABEL_8:
      v13 = 0;
      return v13 | v9;
    }
    if ((v10 & 1) != 0)
    {
      if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)this, v11 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_8;
    }
    else
    {
      if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == v12)
        goto LABEL_8;
      if ((v10 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v17 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v17 = 0x400000002;
        v18 = *(_QWORD *)this;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v17 + 16) = v12;
        v15 = v18 & 2 | v17 | 1;
      }
      else
      {
        v15 = v12 | v10 & 2;
      }
      *(_QWORD *)this = v15;
    }
  }
  v16 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0 && *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
  {
    WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)this = 4;
  }
  v13 = 1;
  return v13 | v9;
}

BOOL JSC::DFG::StructureAbstractValue::contains(JSC::DFG::StructureAbstractValue *this, JSC::Structure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL8 v10;
  _DWORD *v13;
  unint64_t v14;
  JSC::Structure *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  JSC::Structure *v23;
  unint64_t v24;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this == 4 || (*(_QWORD *)this & 2) != 0)
    return 1;
  v24 = 0;
  v13 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v8 & 1) == 0)
  {
    if (v13)
    {
      v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_10;
    }
LABEL_29:
    v15 = 0;
    return v15 == a2;
  }
  if (!*v13)
    goto LABEL_29;
  v14 = 0;
  v16 = 0;
  do
  {
    v17 = &v13[2 * v16];
    v18 = *((_QWORD *)v17 + 1);
    if ((v14 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v24, *((_QWORD *)v17 + 1));
      v14 = v24;
    }
    else if (v18 != (v14 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((v14 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v19 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v19 = 0x400000002;
        v20 = v24;
        *(_QWORD *)(v19 + 8) = v24 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v19 + 16) = v18;
        v14 = v20 & 2 | (unint64_t)v19 | 1;
      }
      else
      {
        v14 = v14 & 2 | v18;
      }
      v24 = v14;
    }
    ++v16;
  }
  while (v16 < *v13);
LABEL_10:
  v15 = (JSC::Structure *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v14 & 1) == 0)
    return v15 == a2;
  v21 = *(unsigned int *)v15;
  if ((_DWORD)v21)
  {
    if (*((JSC::Structure **)v15 + 1) == a2)
    {
      v10 = 1;
    }
    else
    {
      v22 = 0;
      while (v21 - 1 != v22)
      {
        v23 = (JSC::Structure *)*((_QWORD *)v15 + v22++ + 2);
        if (v23 == a2)
          goto LABEL_31;
      }
      v22 = *(unsigned int *)v15;
LABEL_31:
      v10 = v22 < v21;
    }
  }
  else
  {
    v10 = 0;
  }
  WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  return v10;
}

uint64_t JSC::DFG::StructureAbstractValue::isSubsetOf(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;

  v2 = *a1;
  if (*a1 == 4 || (*a1 & 2) != 0)
    return 0;
  if ((v2 & 1) != 0)
  {
    v8 = *a2;
    if ((*a2 & 1) != 0)
    {
      v9 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
      v12 = *v9;
      v10 = v9 + 2;
      v11 = v12;
      if (v12)
      {
        v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        v14 = *(unsigned int *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = *(_QWORD *)(v13 + 8);
          v17 = v13 + 16;
          result = 1;
          while (1)
          {
            v18 = *(_QWORD *)&v10[2 * v15];
            if (v16 != v18)
              break;
LABEL_22:
            if (++v15 == v11)
              return result;
          }
          v19 = 0;
          while (v14 - 1 != v19)
          {
            v20 = *(_QWORD *)(v17 + 8 * v19++);
            if (v20 == v18)
            {
              if (v19 >= v14)
                return 0;
              goto LABEL_22;
            }
          }
        }
        return 0;
      }
      return 1;
    }
    if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v25 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_DWORD *)v25 <= 1u)
        return *(_QWORD *)(v25 + 8) == (v8 & 0xFFFFFFFFFFFFFFFCLL);
    }
    return 0;
  }
  v5 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v5)
    return 1;
  v6 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a2 & 1) == 0)
    return v6 == (unsigned int *)v5;
  v21 = *v6;
  if (!(_DWORD)v21)
    return 0;
  if (*((_QWORD *)v6 + 1) == v5)
    return 1;
  v22 = 0;
  v23 = v6 + 4;
  while (v21 - 1 != v22)
  {
    v24 = *(_QWORD *)&v23[2 * v22++];
    if (v24 == v5)
      return v22 < v21;
  }
  v22 = v21;
  return v22 < v21;
}

BOOL JSC::DFG::StructureAbstractValue::isSubClassOf(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL8 result;

  v2 = *a1;
  if (*a1 == 4 || (*a1 & 2) != 0)
    return 0;
  if ((v2 & 1) == 0)
  {
    if (v2 >= 4)
    {
      v4 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      v5 = *(unsigned int *)(v4 + 76);
      result = *(_DWORD *)(v4 + 76) != 0;
      v6 = 16 * v5;
      if ((_DWORD)v5)
        v7 = v6 == a2;
      else
        v7 = 1;
      if (!v7)
      {
        do
        {
          v6 = *(_QWORD *)(v6 + 16);
          result = v6 != 0;
        }
        while (v6 != a2 && v6 != 0);
      }
      return result;
    }
    return 1;
  }
  v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v10)
    return 1;
  v11 = 0;
  v12 = v9 + 8;
  do
  {
    v13 = *(_QWORD *)(v12 + 8 * v11);
    v14 = *(unsigned int *)(v13 + 76);
    result = *(_DWORD *)(v13 + 76) != 0;
    v15 = 16 * v14;
    if ((_DWORD)v14)
      v16 = v15 == a2;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = *(_QWORD *)(v15 + 16);
        result = v15 != 0;
      }
      while (v15 != a2 && v15 != 0);
    }
    ++v11;
  }
  while (result && v11 != v10);
  return result;
}

uint64_t JSC::DFG::StructureAbstractValue::isNotSubClassOf(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  BOOL v11;

  v2 = *a1;
  if (*a1 == 4 || (*a1 & 2) != 0)
    return 0;
  if ((v2 & 1) != 0)
    v5 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v5 = v2 > 3;
  if (!v5)
    return 1;
  for (i = 0; i != v5; ++i)
  {
    v7 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v2 & 1) != 0)
      v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8 + 8 * i);
    v8 = *(unsigned int *)(v7 + 76);
    v9 = *(_DWORD *)(v7 + 76) != 0;
    v10 = 16 * v8;
    if ((_DWORD)v8)
      v11 = v10 == a2;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = *(_QWORD *)(v10 + 16);
        v9 = v10 != 0;
      }
      while (v10 != a2 && v10 != 0);
    }
    if (v9)
      break;
  }
  return !v9;
}

uint64_t JSC::DFG::StructureAbstractValue::equalsSlow(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a1;
  if ((*a1 & 1) != 0)
    v5 = *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v5 = v4 > 3;
  v6 = *a2;
  if ((*a2 & 1) != 0)
    v7 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v7 = v6 > 3;
  if (v5 != v7)
    return 0;
  result = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(a1, a2);
  if ((_DWORD)result)
    return ((*(_BYTE *)a1 & 2) == 0) ^ ((*(_BYTE *)a2 & 2) >> 1);
  return result;
}

void JSC::DFG::StructureAbstractValue::dumpInContext(JSC::DFG::StructureAbstractValue *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t v5;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  _DWORD *v9;
  WTF::PrintStream *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;

  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 2) != 0)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%s", "Clobbered:");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v5 = *(_QWORD *)this;
  }
  if (v5 == 4)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", "TOP");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  else
  {
    v24 = 0;
    v9 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v5 & 1) != 0)
    {
      if (*v9)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = &v9[2 * v19];
          v21 = *((_QWORD *)v20 + 1);
          if ((v18 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v24, *((_QWORD *)v20 + 1));
            v18 = v24;
          }
          else if (v21 != (v18 & 0xFFFFFFFFFFFFFFFCLL))
          {
            if ((v18 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v22 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v22 = 0x400000002;
              v23 = v24;
              *(_QWORD *)(v22 + 8) = v24 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v22 + 16) = v21;
              v18 = v23 & 2 | (unint64_t)v22 | 1;
            }
            else
            {
              v18 = v18 & 2 | v21;
            }
            v24 = v18;
          }
          ++v19;
        }
        while (v19 < *v9);
      }
    }
    else if (v9)
    {
      v24 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    }
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    JSC::StructureSet::dumpInContext((JSC::StructureSet *)&v24, v10, a3);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    if ((v24 & 1) != 0)
      WTF::fastFree(v24 & 0xFFFFFFFFFFFFFFFCLL, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t JSC::DFG::SSALoweringPhase::lowerBoundsCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int hasExitSite;
  unsigned __int16 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::Lock *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unsigned __int16 v139;
  unsigned __int16 v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 v145;
  _BYTE v146[24];
  uint64_t v147;
  uint64_t v148;
  __int16 v149;
  _BYTE v150[24];
  _BYTE v151[24];
  _BYTE v152[24];
  unint64_t v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)(a1 + 240);
  v8 = *((unsigned __int16 *)v7 + 9);
  if (v8 == 146)
    v9 = *((_DWORD *)v7 + 20);
  else
    v9 = *((_DWORD *)v7 + 18);
  v10 = v9 > 0x19u || ((1 << v9) & 0x3FFCF80) == 0;
  if (v10 || (v9 & 0xFE0000) != 0)
    return 0;
  if (v8 == 146)
    v11 = *((_DWORD *)v7 + 20);
  else
    v11 = *((_DWORD *)v7 + 18);
  if (v11 - 6 >= 6)
    a4 = 0;
  if (v11 - 10 < 2)
  {
    v30 = 161;
    goto LABEL_34;
  }
  if (v11 == 5)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGSSALoweringPhase.cpp", (const char *)0x9B, "BOOL JSC::DFG::SSALoweringPhase::lowerBoundsCheck(Edge, Edge, Edge)", "Array::String's base.useKind() is KnownStringUse");
    __break(0xC471u);
    JUMPOUT(0x19853B1A0);
  }
  if (v8 == 146)
    v13 = *((_DWORD *)v7 + 20);
  else
    v13 = *((_DWORD *)v7 + 18);
  if (v13 != 25)
  {
    v136 = JSC::DFG::toTypedArrayType(v13);
    if (!v136)
      goto LABEL_33;
    v30 = 158;
    if (v136 == 12)
      goto LABEL_34;
    v7 = *(uint64_t **)(a1 + 240);
    v8 = *((unsigned __int16 *)v7 + 9);
  }
  if (v8 == 146)
    v14 = *((_DWORD *)v7 + 20);
  else
    v14 = *((_DWORD *)v7 + 18);
  if ((v14 & 0x20000000) != 0)
  {
LABEL_103:
    v85 = *(unsigned int *)(a1 + 232);
    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v152, (const JSC::DFG::NodeOrigin *)v7);
    v86 = *(_QWORD *)(a1 + 240);
    if (*(_WORD *)(v86 + 18) == 146)
      v87 = *(_DWORD *)(v86 + 80);
    else
      v87 = *(_DWORD *)(v86 + 72);
    v88 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(a1 + 72, v85, 0xC00000000, 0xA0u, (uint64_t)v152, v87, a2 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, a4);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v152, v89, v90, v91, v92, v93, v94, v95);
    v96 = *(_QWORD *)(a1 + 240);
    if (*(_WORD *)(v96 + 18) == 146)
      v97 = *(_DWORD *)(v96 + 80);
    else
      v97 = *(_DWORD *)(v96 + 72);
    if ((v97 & 0x40000000) != 0)
    {
      v98 = *(unsigned int *)(a1 + 232);
      JSC::DFG::NodeOrigin::withExitOK(*(_QWORD *)(a1 + 240), 1, (uint64_t)v151);
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(a1 + 72, v98, 0, 22, (uint64_t)v151, v99, v100, v101);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v151, v102, v103, v104, v105, v106, v107, v108);
      v96 = *(_QWORD *)(a1 + 240);
    }
    v109 = *(unsigned int *)(a1 + 232);
    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v150, (const JSC::DFG::NodeOrigin *)v96);
    v57 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>(a1 + 72, v109, 0x300000000, 0xBCu, (uint64_t)v150, a3, v88 & 0xFF00FFFFFFFFFFFFLL | 0xD0000000000000);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v150, v110, v111, v112, v113, v114, v115, v116);
    goto LABEL_48;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v16 = *v7;
  v17 = *v7 & 0xFFFFFFFF8;
  if ((*v7 & 1) != 0)
    v17 = *(_QWORD *)(*v7 & 0xFFFFFFFF8);
  if (v17)
    v15 = *(_QWORD *)(v17 + 8);
  v18 = *(_QWORD *)(v15 + 56);
  if ((v16 & 2) != 0)
  {
    LODWORD(v19) = -1;
  }
  else if ((v16 & 1) != 0)
  {
    LODWORD(v19) = *(_DWORD *)((*v7 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v19 = v16 >> 36;
  }
  LODWORD(v153) = v19;
  WORD2(v153) = 9;
  BYTE6(v153) = 0;
  v20 = (unsigned __int8 *)(v18 + 31);
  v156 = 0;
  *((_QWORD *)&v154 + 1) = v18 + 31;
  LOBYTE(v155) = 1;
  if (__ldaxr((unsigned __int8 *)(v18 + 31)))
  {
    __clrex();
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
    goto LABEL_31;
  }
  if (__stxr(1u, v20))
    goto LABEL_30;
LABEL_31:
  v156 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v18 + 96), (uint64_t)&v154, (int *)&v153);
  if (!(_BYTE)v155)
    goto LABEL_32;
  v68 = (WTF::Lock *)*((_QWORD *)&v154 + 1);
  v69 = __ldxr(*((unsigned __int8 **)&v154 + 1));
  if (v69 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, *((unsigned __int8 **)&v154 + 1)))
LABEL_58:
    WTF::Lock::unlockSlow(v68, v22, v23, v24, v25, v26, v27, v28);
LABEL_32:
  if (hasExitSite)
  {
    v7 = *(uint64_t **)(a1 + 240);
    goto LABEL_103;
  }
LABEL_33:
  v30 = 158;
LABEL_34:
  v31 = *(unsigned int *)(a1 + 232);
  v32 = *(_QWORD *)(a1 + 240);
  v33 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 1) != 0)
  {
    v71 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v72 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
        ? (v73 = (_DWORD)v72 == -1)
        : (v73 = 1),
          v73))
    {
      v74 = 2;
    }
    else if (v72 >> 28)
    {
      v139 = v30;
      v137 = *(unsigned int *)(a1 + 232);
      v128 = v72;
      v129 = WTF::fastMalloc((WTF *)0x10);
      v31 = v137;
      v30 = v139;
      *(_QWORD *)v129 = v71;
      *(_DWORD *)(v129 + 8) = v128;
      v74 = 1;
      v71 = v129;
    }
    else
    {
      v74 = v71;
      v71 = v72 << 36;
    }
    v33 = v71 | v74;
  }
  v147 = v33;
  v34 = *(_QWORD *)(v32 + 8);
  if ((v34 & 1) != 0)
  {
    v75 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
    if ((v34 & 2) != 0
      || ((v76 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v76 != 0x3FFFFFFF)
        ? (v77 = (_DWORD)v76 == -1)
        : (v77 = 1),
          v77))
    {
      v78 = 2;
    }
    else if (v76 >> 28)
    {
      v130 = v75;
      v140 = v30;
      v138 = v31;
      v131 = v76;
      v75 = WTF::fastMalloc((WTF *)0x10);
      v31 = v138;
      v30 = v140;
      *(_QWORD *)v75 = v130;
      *(_DWORD *)(v75 + 8) = v131;
      v78 = 1;
    }
    else
    {
      v78 = v75;
      v75 = v76 << 36;
    }
    v34 = v75 | v78;
  }
  v148 = v34;
  v149 = *(_WORD *)(v32 + 16);
  v35 = *(_QWORD *)(a1 + 240);
  if (*(_WORD *)(v35 + 18) == 146)
    v36 = *(_DWORD *)(v35 + 80);
  else
    v36 = *(_DWORD *)(v35 + 72);
  v44 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(a1 + 72, v31, 0x300000000, v30, (uint64_t)&v147, v36, a2 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, a4);
  if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v148 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v147 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  v45 = *(_QWORD *)(a1 + 240);
  if (*(_WORD *)(v45 + 18) == 146)
    v46 = *(_DWORD *)(v45 + 80);
  else
    v46 = *(_DWORD *)(v45 + 72);
  if ((v46 & 0x40000000) != 0)
  {
    v117 = *(unsigned int *)(a1 + 232);
    JSC::DFG::NodeOrigin::withExitOK(*(_QWORD *)(a1 + 240), 1, (uint64_t)v146);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(a1 + 72, v117, 0, 22, (uint64_t)v146, v118, v119, v120);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v146, v121, v122, v123, v124, v125, v126, v127);
    v45 = *(_QWORD *)(a1 + 240);
  }
  v47 = *(unsigned int *)(a1 + 232);
  v48 = *(_QWORD *)v45;
  if ((*(_QWORD *)v45 & 1) != 0)
  {
    v79 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
    if ((v48 & 2) != 0
      || (v80 = *(unsigned int *)((v48 & 0xFFFFFFFF8) + 8), (_DWORD)v80 == 0x3FFFFFFF)
      || (_DWORD)v80 == -1)
    {
      v81 = 2;
    }
    else if (v80 >> 28)
    {
      v141 = *(unsigned int *)(a1 + 232);
      v132 = v80;
      v133 = WTF::fastMalloc((WTF *)0x10);
      v47 = v141;
      *(_QWORD *)v133 = v79;
      *(_DWORD *)(v133 + 8) = v132;
      v81 = 1;
      v79 = v133;
    }
    else
    {
      v81 = v79;
      v79 = v80 << 36;
    }
    v48 = v79 | v81;
  }
  v143 = v48;
  v49 = *(_QWORD *)(v45 + 8);
  if ((v49 & 1) != 0)
  {
    v82 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
    if ((v49 & 2) != 0
      || (v83 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v83 == 0x3FFFFFFF)
      || (_DWORD)v83 == -1)
    {
      v84 = 2;
    }
    else if (v83 >> 28)
    {
      v142 = v47;
      v134 = v83;
      v135 = WTF::fastMalloc((WTF *)0x10);
      v47 = v142;
      *(_QWORD *)v135 = v82;
      *(_DWORD *)(v135 + 8) = v134;
      v84 = 1;
      v82 = v135;
    }
    else
    {
      v84 = v82;
      v82 = v83 << 36;
    }
    v49 = v82 | v84;
  }
  v144 = v49;
  v145 = *(_WORD *)(v45 + 16);
  v57 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>(a1 + 72, v47, 0x300000000, 0xBBu, (uint64_t)&v143, a3, v44 & 0xFF00FFFFFFFFFFFFLL | 0x8000000000000);
  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v144 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if ((v143 & 1) != 0 && (v143 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
LABEL_48:
  JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 240), (uint64_t (*)(uint64_t))_ZZN3JSC3DFG5Graph18copyVarargChildrenIPFbNS0_4EdgeEEEENS0_13AdjacencyListEPNS0_4NodeET_Ed_NUlS3_E_8__invokeES3_, &v154);
  v63 = *(_QWORD *)(a1 + 32);
  v64 = (_QWORD *)(v63 + 152);
  v153 = v57 & 0xFF00FFFFFFFFFFFFLL;
  v65 = *(unsigned int *)(v63 + 164);
  if ((_DWORD)v65 == *(_DWORD *)(v63 + 160))
  {
    v70 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, (void *)(v65 + 1), (unint64_t)&v153, v58, v59, v60, v61, v62);
    v65 = *(unsigned int *)(v63 + 164);
    *(_QWORD *)(*(_QWORD *)(v63 + 152) + 8 * v65) = *v70;
  }
  else
  {
    *(_QWORD *)(*v64 + 8 * v65) = v57 & 0xFF00FFFFFFFFFFFFLL;
  }
  *(_DWORD *)(v63 + 164) = v65 + 1;
  *((_QWORD *)&v154 + 1) = (DWORD2(v154) + 1);
  v66 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(v66 + 40) = v155;
  *(_OWORD *)(v66 + 24) = v154;
  return 1;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E358E6F8;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E358E6F8;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint8x8_t v24;
  __int32 v25;
  uint8x8_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unsigned __int8 *v45;
  char *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  JSC::AssemblerBuffer *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  void *__dst;
  int v99;
  unsigned int v100;
  _WORD v101[4];
  unint64_t v102;
  unsigned int *v103;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_134;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  __dst = v101;
  v99 = 2;
  if (v15)
  {
    v101[0] = v15;
    v17 = 1;
    v100 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v17 = 0;
  }
  v101[v17++] = v16 | 0x100;
  v100 = v17;
  do
  {
LABEL_15:
    v18 = 0;
    v19 = 0;
    v20 = (char *)__dst;
    v21 = v17;
    do
    {
      if ((*((_BYTE *)__dst + v18 + 1) & 0x40) != 0)
        goto LABEL_134;
      v19 |= 1 << *((_BYTE *)__dst + v18 + 1);
      v18 += 2;
    }
    while (2 * v17 != v18);
    v22 = 0;
    do
    {
      v23 = *((_BYTE *)__dst + v22) & 0x7F;
      if (v23 >= 0x40)
        goto LABEL_134;
      v19 &= ~(1 << v23);
      v22 += 2;
    }
    while (2 * v17 != v22);
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v24.i16[0] = vaddlv_u8(v24);
    v25 = v24.i32[0];
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v19));
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.i32[0] + v25)
    {
      v27 = 0;
      if (v17 <= 1)
        v28 = 1;
      else
        v28 = v17;
      v29 = 2 * v28;
      while (1)
      {
        v30 = *((unsigned __int8 *)__dst + v27 + 1);
        if ((v30 & 0x7Fu) >= 0x40)
          goto LABEL_134;
        if (((v19 >> (v30 & 0x7F)) & 1) != 0)
          break;
        v27 += 2;
        if (v29 == v27)
          goto LABEL_65;
      }
      v31 = *((unsigned __int8 *)__dst + v27);
      if (v31 == v30)
      {
LABEL_63:
        memmove(&v20[v27], &v20[v27 + 2], 2 * v21 - v27 - 2);
        v17 = v100 - 1;
        goto LABEL_64;
      }
      v32 = (char)v31;
      if ((char)v31 == 63)
      {
        v33 = *(_DWORD *)(v8 + 200);
        v34 = *(_DWORD *)(v8 + 192);
        if ((char)v30 != 31)
        {
          v36 = v30 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v33 = *(_DWORD *)(v8 + 200);
        v34 = *(_DWORD *)(v8 + 192);
        v35 = v30 == 31 || v32 == 31;
        if (!v35)
        {
          v36 = v30 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v33 + 4 > v34)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v33 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v33) = v36;
          *(_DWORD *)(v8 + 200) += 4;
          v20 = (char *)__dst;
          v21 = v100;
          goto LABEL_63;
        }
      }
      v36 = (char)v30 | (32 * v32) | 0x91000000;
      goto LABEL_60;
    }
    v37 = *(_BYTE *)__dst;
    v38 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v38, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v100 - 2);
    v39 = v100 - 1;
    v35 = v100 == 1;
    v100 = v39;
    v40 = (unsigned __int8 *)__dst;
    v41 = (unsigned __int8 *)__dst + 2 * v39;
    if (v35)
    {
      v51 = 0;
      v52 = 0;
      v44 = 0;
      a2 = v41;
    }
    else
    {
      v42 = 2 * v39;
      v43 = __dst;
      while (*v43 != v38)
      {
        v43 += 2;
        v42 -= 2;
        if (!v42)
          goto LABEL_43;
      }
      *v43 = v37;
LABEL_43:
      v44 = 0;
      v45 = v40;
      a2 = v41;
      v46 = (char *)v41;
      do
      {
        if (*v40 == v40[1])
        {
          v47 = v40;
          if (v46 != (char *)__dst + 2 * v100)
          {
            v96 = v44;
            v94 = (char *)v41;
            v95 = v40;
            if (v40 == a2)
            {
              v47 = (unsigned __int8 *)v46;
            }
            else
            {
              v48 = v45;
              v49 = v45 - a2;
              v50 = v46;
              memmove(v46, a2, v45 - a2);
              v45 = v48;
              v47 = (unsigned __int8 *)&v50[v49];
            }
            v41 = (unsigned __int8 *)v94;
            v40 = v95;
            v44 = v96;
          }
          a2 = v40 + 2;
          ++v44;
          v46 = (char *)v47;
        }
        v40 += 2;
        v45 += 2;
      }
      while (v40 < v41);
      v40 = (unsigned __int8 *)__dst;
      v51 = v100;
      v52 = v100;
      v41 = (unsigned __int8 *)v46;
    }
    v53 = &v40[2 * v51];
    if (a2 != v53)
    {
      memmove(v41, a2, v53 - a2);
      v52 = v100;
    }
    v17 = v52 - v44;
LABEL_64:
    v100 = v17;
LABEL_65:
    ;
  }
  while (v17);
  v54 = __dst;
  if (v101 != __dst && __dst)
  {
    __dst = 0;
    v99 = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), a3, a4, a5, a6, a7, a8, (int *)&v97);
  *(_QWORD *)(a1 + 92) = v97;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_72:
    v62 = 0;
    LOBYTE(v63) = 0;
    goto LABEL_73;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v56, v57, v58, v59, v60, v61);
    goto LABEL_72;
  }
  v71 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v72 = *(_QWORD *)(v8 + 3960);
  v73 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v73 & 1) != 0)
  {
    v89 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
    if ((v73 & 2) != 0
      || ((v90 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v92 = 1;
      v89 = v93;
    }
    else
    {
      v92 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v73 = v89 | v92;
  }
  v102 = v73;
  v74 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v72, &v102, (uint64_t *)&__dst, &v103, v58, v59, v60, v61);
  if ((v102 & 1) != 0 && (v102 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v102 & 0xFFFFFFFF8, v55, v56, v57, v58, v59, v60, v61);
  if ((v74 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v56, v57, v58, v59, v60, v61);
    LOBYTE(v63) = 0;
    v62 = 0;
    goto LABEL_95;
  }
  v75 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = 16 * v75;
    v78 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v80 = *v78;
      v78 += 16;
      v79 = v80;
      if ((v80 & 0x40) != 0)
        goto LABEL_134;
      v76 |= 1 << v79;
      v77 -= 16;
      if (!v77)
        goto LABEL_104;
    }
  }
  v76 = 0;
LABEL_104:
  if ((v71 & 0x40) != 0)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v62 = 1;
  v81 = v76 | (1 << v71);
  if ((v81 & 2) != 0)
  {
    v82 = (unsigned __int16)~(_WORD)v81 & 0xFFFE;
    if (v82)
    {
      v63 = __clz(__rbit64(v82));
      if (v63 == 1)
      {
        v62 = 1;
      }
      else
      {
        if (v63 == 31)
        {
          v85 = (unsigned int *)(v8 + 200);
          v84 = *(_DWORD *)(v8 + 200);
          v86 = (JSC::AssemblerBuffer *)(v8 + 56);
          v87 = v84 + 4;
          v88 = *(_DWORD *)(v8 + 192);
          v83 = -1862270913;
        }
        else
        {
          v83 = v63 | 0xAA0103E0;
          v85 = (unsigned int *)(v8 + 200);
          v84 = *(_DWORD *)(v8 + 200);
          v86 = (JSC::AssemblerBuffer *)(v8 + 56);
          v87 = v84 + 4;
          v88 = *(_DWORD *)(v8 + 192);
        }
        if (v87 > v88)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v86, (uint64_t)v55, v56, v57, v58, v59, v60, v61);
          v84 = *v85;
        }
        *(_DWORD *)(*(_QWORD *)v86 + v84) = v83;
        *v85 += 4;
        v62 = 1;
      }
    }
    else
    {
      v62 = 1;
      LOBYTE(v63) = -1;
    }
  }
  else
  {
    LOBYTE(v63) = 1;
  }
LABEL_95:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v55, v56, v57, v58, v59, v60, v61);
LABEL_73:
  v64 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v64 == 31)
    {
      v65 = -1862270945;
    }
    else if (v64 == 255)
    {
      v65 = -1442774017;
    }
    else
    {
      v65 = v64 | 0xAA0003E0;
    }
    v67 = (unsigned int *)(v8 + 200);
    v66 = *(_DWORD *)(v8 + 200);
    if (v66 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v55, v56, v57, v58, v59, v60, v61);
      v66 = *v67;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v66) = v65;
    *v67 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_87:
    if (v62)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v63, v56, v57, v58, v59, v60, v61);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v56, v57, v58, v59, v60, v61);
    return;
  }
  v68 = *(_DWORD *)(a1 + 116);
  if (!v68)
  {
LABEL_86:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_87;
  }
  v69 = v68 - 1;
  v70 = 16 * (v68 - 1);
  while (*(_DWORD *)(a1 + 116) > v69)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v70, v56, v57, v58, v59, v60, v61);
    v70 -= 16;
    if (--v69 == -1)
      goto LABEL_86;
  }
LABEL_135:
  __break(0xC471u);
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::StaticExecutionCountEstimationPhase>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  double v13;
  char v14;
  __int128 *v15;

  v11[0] = "DFG";
  v11[1] = 4;
  v12 = *(_OWORD *)(a1 + 40);
  v13 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v7 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 != -1)
    {
      *(_QWORD *)&v10 = &v14;
      v15 = &v10;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v8) = dword_1ECF4400C;
    v13 = (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0);
  }
  v2 = JSC::DFG::StaticExecutionCountEstimationPhase::run((JSC::DFG::Graph **)a1);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v4 = (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 16) & 0xFFFFFFFE) == 4) : (v4 = 0),
          !v4 ? (v5 = BYTE2(qword_1ECF4C32A) == 0) : (v5 = 0),
          !v5))
    {
      v10 = *(_OWORD *)(a1 + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v3 + 1088, "Phase ", (uint64_t)&v10, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v11);
  return v2;
}

uint64_t JSC::DFG::StaticExecutionCountEstimationPhase::run(JSC::DFG::Graph **this)
{
  JSC::DFG::Graph *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  JSC::DFG::Graph::ensureCPSNaturalLoops(this[4]);
  v2 = this[4];
  v3 = *((_DWORD *)v2 + 15);
  if (v3)
  {
    v4 = *((_DWORD *)v2 + 15);
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * --v4);
      if (v5)
      {
        v6 = *((_QWORD *)v2 + 99);
        v7 = *(unsigned int *)(v5 + 8);
        if (*(_DWORD *)(v6 + 484) <= v7)
        {
          __break(0xC471u);
          JUMPOUT(0x19853BF08);
        }
        v8 = *(unsigned int *)(*(_QWORD *)(v6 + 472) + 8 * v7);
        if ((_DWORD)v8 == -1)
          goto LABEL_6;
        v11 = *(unsigned int *)(v6 + 20);
        if (v11 <= v8)
        {
LABEL_39:
          __break(0xC471u);
          JUMPOUT(0x19853BDC0);
        }
        v12 = *(_QWORD *)(v6 + 8);
        if (!v12)
        {
LABEL_6:
          v9 = 0;
        }
        else
        {
          v9 = 1;
          while (1)
          {
            v8 = *(unsigned int *)(v12 + 112 * v8 + 104);
            if ((_DWORD)v8 == -1)
              break;
            ++v9;
            if (v11 <= v8)
              goto LABEL_39;
          }
        }
        v10 = __exp10((double)v9);
        *(float *)(v5 + 192) = v10;
      }
    }
    while (v4);
    v13 = *((_QWORD *)v2 + 6);
    do
    {
      v14 = *(_QWORD *)(v13 + 8 * --v3);
      if (v14)
      {
        v15 = *(unsigned int *)(v14 + 220);
        if ((_DWORD)v15)
        {
          v16 = *(_QWORD *)(v14 + 208);
          v17 = 8 * v15;
          v18 = v16 - 8;
          while (1)
          {
            v19 = *(_QWORD *)(v18 + v17);
            v20 = *(unsigned __int16 *)(v19 + 18);
            if ((v20 - 364) < 0xC)
              break;
            if ((v20 - 28) < 2 || (v20 - 23) <= 2)
            {
              v17 -= 8;
              if (v17)
                continue;
            }
            goto LABEL_33;
          }
        }
        else
        {
LABEL_33:
          v19 = 0;
        }
        v21 = *(unsigned __int16 *)(v19 + 18);
        switch(v21)
        {
          case 365:
            v22 = *(uint64_t **)(v19 + 72);
            *((_DWORD *)v22 + 2) = *(_DWORD *)(*v22 + 192);
            break;
          case 366:
            v22 = *(uint64_t **)(v19 + 72);
            v26 = *((unsigned int *)v22 + 3);
            if ((_DWORD)v26)
            {
              v27 = *v22;
              v24 = v26 - 1;
              do
              {
                v23 = v24;
                *(_DWORD *)(v27 + 32 * v24 + 24) = *(_DWORD *)(*(_QWORD *)(v27
                                                                                         + 32 * v24
                                                                                         + 16)
                                                                             + 192);
                --v24;
              }
              while (v23);
            }
            break;
          case 367:
            JSC::DFG::Graph::logAssertionFailure(v2, (JSC::DFG::Node *)v19, (const WTF::CString *)"./dfg/DFGStaticExecutionCountEstimationPhase.cpp", (const char *)0x54, "BOOL JSC::DFG::StaticExecutionCountEstimationPhase::run()", "Unexpected EntrySwitch in CPS form.");
            __break(0xC471u);
            JUMPOUT(0x19853BF00);
          default:
            continue;
        }
        *((_DWORD *)v22 + 6) = *(_DWORD *)(v22[2] + 192);
      }
    }
    while (v3);
  }
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    return *(_QWORD *)a1 + v6;
  }
  else
  {
  }
  return v3;
}

void WTF::Vector<JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (uint64_t *)(v7 + 16 * v8);
        v18 = (uint64_t *)v7;
        do
        {
          v19 = *v18;
          v20 = v18[1];
          v18[1] = 0;
          *v9 = v19;
          v9[1] = v20;
          v21 = v18[1];
          if ((v21 & 1) != 0)
          {
            v22 = v21 & 0xFFFFFFFF8;
            if (v22)
            {
              v24 = v9;
              v23 = v17;
              WTF::fastFree(v22, v10, v11, v12, v13, v14, v15, v16);
              v17 = v23;
              v9 = v24;
            }
          }
          v18 += 2;
          v9 += 2;
        }
        while (v18 != v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  char v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v20 = *a4;
  if (*a5 < *a4)
  {
    v21 = a4[1];
    *a4 = *a5;
    a4[1] = 0;
    if (a4 != a5)
    {
      v22 = a5[1];
      a5[1] = 0;
      a4[1] = v22;
    }
    *a5 = v20;
    v23 = a5[1];
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v23 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
    a5[1] = v21;
    v24 = *a3;
    if (*a4 < *a3)
    {
      v25 = a3[1];
      *a3 = *a4;
      a3[1] = 0;
      if (a3 != a4)
      {
        v26 = a4[1];
        a4[1] = 0;
        a3[1] = v26;
      }
      *a4 = v24;
      v27 = a4[1];
      if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v27 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
      a4[1] = v25;
      v28 = *a2;
      if (*a3 < *a2)
      {
        v29 = a2[1];
        *a2 = *a3;
        a2[1] = 0;
        if (a2 != a3)
        {
          v30 = a3[1];
          a3[1] = 0;
          a2[1] = v30;
        }
        *a3 = v28;
        v31 = a3[1];
        if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v31 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
        a3[1] = v29;
        v32 = *a1;
        if (*a2 < *a1)
        {
          v33 = a1[1];
          *a1 = *a2;
          a1[1] = 0;
          if (a1 != a2)
          {
            v34 = a2[1];
            a2[1] = 0;
            a1[1] = v34;
          }
          *a2 = v32;
          v35 = a2[1];
          if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v35 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
          a2[1] = v33;
        }
      }
    }
  }
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;

  if (a1 != a2)
  {
    v10 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v11 = 0;
      v12 = a1;
      do
      {
        v13 = v10;
        v14 = v12[2];
        v15 = *v12;
        if (v14 < *v12)
        {
          v16 = v12[3];
          v12[3] = 0;
          v17 = v13[1];
          v18 = v11;
          while (1)
          {
            v19 = v18;
            v20 = (char *)a1 + v18;
            *(unint64_t *)((char *)a1 + v18 + 16) = v15;
            if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            v21 = *((_QWORD *)v20 + 1);
            *((_QWORD *)v20 + 1) = 0;
            *((_QWORD *)v20 + 3) = v21;
            if (!v19)
              break;
            v17 = 0;
            v15 = *(unint64_t *)((char *)a1 + v19 - 16);
            v18 = v19 - 16;
            if (v14 >= v15)
            {
              v22 = (unint64_t *)((char *)a1 + v19);
              goto LABEL_13;
            }
          }
          v22 = a1;
LABEL_13:
          *v22 = v14;
          *(unint64_t *)((char *)a1 + v19 + 8) = v16;
        }
        v10 = v13 + 2;
        v11 += 16;
        v12 = v13;
      }
      while (v13 + 2 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;

  if (a1 != a2)
  {
    v10 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v11 = 0;
      v12 = (uint64_t *)(a1 + 3);
      v13 = -2;
      v14 = 1;
      v15 = a1;
      do
      {
        v16 = v14;
        v17 = *v10;
        if (*v10 < *v15)
        {
          v18 = v15[3];
          v15[3] = 0;
          v19 = a1[2 * v11];
          v20 = v13;
          v21 = v12;
          do
          {
            *(v21 - 1) = v19;
            v22 = *v21;
            if ((*v21 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v22 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            v24 = v21 - 2;
            v23 = *(v21 - 2);
            *(v21 - 2) = 0;
            *v21 = v23;
            if (__CFADD__(v20++, 1))
            {
              __break(1u);
              return;
            }
            v19 = *(v21 - 5);
            v21 -= 2;
          }
          while (v17 < v19);
          *(v24 - 1) = v17;
          v26 = *v24;
          if ((*v24 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v26 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          *v24 = v18;
        }
        v15 = &a1[2 * v16];
        v14 = v16 + 1;
        v10 = &a1[2 * v16 + 2];
        v12 += 2;
        --v13;
        v11 = v16;
      }
      while (v10 != a2);
    }
  }
}

void std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  if (a1 != a2)
  {
    v9 = a2;
    v11 = (char *)a2 - (char *)a1;
    v12 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v13 = (unint64_t)(v12 - 2) >> 1;
      v14 = v13 + 1;
      v15 = &a1[2 * v13];
      do
      {
        v15 -= 2;
        --v14;
      }
      while (v14);
    }
    if (v9 != (unint64_t *)a3)
    {
      v16 = v9;
      do
      {
        v17 = *v16;
        if (*v16 < *a1)
        {
          v18 = v16[1];
          *v16 = *a1;
          v16[1] = 0;
          if (v16 != a1)
          {
            v19 = a1[1];
            a1[1] = 0;
            v16[1] = v19;
          }
          *a1 = v17;
          v20 = a1[1];
          if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          a1[1] = v18;
        }
        v16 += 2;
      }
      while (v16 != (unint64_t *)a3);
    }
    if (v11 >= 17)
    {
      v21 = (unint64_t)v11 >> 4;
      do
      {
        v22 = 0;
        v24 = *a1;
        v23 = a1[1];
        a1[1] = 0;
        v25 = a1;
        do
        {
          v26 = &v25[2 * v22 + 2];
          if (2 * v22 + 2 >= v21)
          {
            v27 = *v26;
            v22 = (2 * v22) | 1;
          }
          else
          {
            v27 = *v26;
            if (*v26 >= v25[2 * v22 + 4])
            {
              v22 = (2 * v22) | 1;
            }
            else
            {
              v27 = v25[2 * v22 + 4];
              v26 = &v25[2 * v22 + 4];
              v22 = 2 * v22 + 2;
            }
          }
          *v25 = v27;
          if (v25 != v26)
          {
            v28 = v25[1];
            if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v28 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            v29 = v26[1];
            v26[1] = 0;
            v25[1] = v29;
          }
          v25 = v26;
        }
        while (v22 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        v30 = v9 - 2;
        if (v26 == v9 - 2)
        {
          *v26 = v24;
          v43 = v26[1];
          if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v43 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v26[1] = v23;
        }
        else
        {
          *v26 = *(v9 - 2);
          v31 = v26[1];
          if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v31 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v32 = *(v9 - 1);
          *(v9 - 1) = 0;
          v26[1] = v32;
          *(v9 - 2) = v24;
          v33 = *(v9 - 1);
          if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v33 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          *(v9 - 1) = v23;
          v34 = (char *)(v26 + 2) - (char *)a1;
          if (v34 >= 17)
          {
            v35 = (((unint64_t)v34 >> 4) - 2) >> 1;
            v36 = &a1[2 * v35];
            v37 = *v36;
            v38 = *v26;
            if (*v36 < *v26)
            {
              v39 = v26[1];
              v26[1] = 0;
              do
              {
                v40 = v36;
                *v26 = v37;
                if (v26 != v36)
                {
                  v41 = v26[1];
                  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v41 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
                  v42 = v40[1];
                  v40[1] = 0;
                  v26[1] = v42;
                }
                if (!v35)
                  break;
                v35 = (v35 - 1) >> 1;
                v36 = &a1[2 * v35];
                v37 = *v36;
                v26 = v40;
              }
              while (*v36 < v38);
              *v40 = v38;
              v44 = v40[1];
              if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v44 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
              v40[1] = v39;
            }
          }
        }
        v9 = v30;
      }
      while (v21-- > 2);
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;

  v10 = *a2;
  v11 = *a1;
  v12 = *a3;
  if (*a2 >= *a1)
  {
    if (v12 < v10)
    {
      v15 = a2[1];
      *a2 = v12;
      a2[1] = 0;
      if (a2 != a3)
      {
        v16 = a3[1];
        a3[1] = 0;
        a2[1] = v16;
      }
      *a3 = v10;
      v17 = a3[1];
      if ((v17 & 1) != 0)
      {
        v26 = v17 & 0xFFFFFFFF8;
        if (v26)
        {
          v27 = a1;
          WTF::fastFree(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          a1 = v27;
        }
      }
      a3[1] = v15;
      v18 = *a1;
      if (*a2 < *a1)
      {
        v19 = a1[1];
        *a1 = *a2;
        a1[1] = 0;
        if (a1 != a2)
        {
          v20 = a2[1];
          a2[1] = 0;
          a1[1] = v20;
        }
        *a2 = v18;
        v21 = a2[1];
        if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v21 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        a2[1] = v19;
      }
    }
  }
  else
  {
    v13 = a1[1];
    a1[1] = 0;
    if (v12 < v10)
    {
      *a1 = v12;
      if (a1 != a3)
      {
        v14 = a3[1];
        a3[1] = 0;
        a1[1] = v14;
      }
LABEL_20:
      *a3 = v11;
      v25 = a3[1];
      if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v25 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      a3[1] = v13;
      return;
    }
    *a1 = v10;
    if (a1 != a2)
    {
      v22 = a2[1];
      a2[1] = 0;
      a1[1] = v22;
    }
    *a2 = v11;
    v23 = a2[1];
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
    {
      WTF::fastFree(v23 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = *a2;
    }
    a2[1] = v13;
    if (*a3 < v11)
    {
      *a2 = *a3;
      a2[1] = 0;
      if (a2 != a3)
      {
        v24 = a3[1];
        a3[1] = 0;
        a2[1] = v24;
      }
      goto LABEL_20;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin *&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin *>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *a1;
  v10 = a1[1];
  *a1 = *a2;
  a1[1] = 0;
  if (a1 != a2)
  {
    v11 = a2[1];
    a2[1] = 0;
    a1[1] = v11;
  }
  *a2 = v9;
  v12 = a2[1];
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  a2[1] = v10;
}

unint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin *,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = *a1;
  v11 = a1[1];
  a1[1] = 0;
  if (v12 < *(a2 - 2))
  {
    v13 = (unint64_t)(a1 + 2);
    while ((unint64_t *)v13 != a2)
    {
      v14 = *(_QWORD *)v13;
      v13 += 16;
      if (v12 < v14)
      {
        v8 = (unint64_t *)(v13 - 16);
        goto LABEL_9;
      }
    }
    goto LABEL_31;
  }
  v13 = (unint64_t)(a1 + 2);
  do
  {
    v8 = (unint64_t *)v13;
    if (v13 >= (unint64_t)a2)
      break;
    v13 += 16;
  }
  while (v12 >= *v8);
LABEL_9:
  v15 = a2;
  if (v8 < a2)
  {
    v15 = a2;
    while (v15 != a1)
    {
      v16 = (_QWORD *)*(v15 - 2);
      v15 -= 2;
      v13 = (unint64_t)v16;
      if (v12 >= (unint64_t)v16)
        goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_13:
  if (v8 < v15)
  {
    v13 = *v8;
    v17 = *v15;
LABEL_15:
    v18 = v8[1];
    *v8 = v17;
    v8[1] = 0;
    v19 = v15[1];
    v15[1] = 0;
    v8[1] = v19;
    *v15 = v13;
    v13 = v15[1];
    if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v15[1] = v18;
    v20 = v8 + 2;
    while (v20 != a2)
    {
      v21 = (_QWORD *)*v20;
      v20 += 2;
      v13 = (unint64_t)v21;
      if (v12 < (unint64_t)v21)
      {
        v8 = v20 - 2;
        while (v15 != a1)
        {
          v22 = *(v15 - 2);
          v15 -= 2;
          v17 = v22;
          if (v12 >= v22)
          {
            if (v8 < v15)
              goto LABEL_15;
            goto LABEL_26;
          }
        }
        break;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    if ((v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_30;
  }
LABEL_26:
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    v23 = a1[1];
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v23 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v24 = *(v8 - 1);
    *(v8 - 1) = 0;
    a1[1] = v24;
  }
  *(v8 - 2) = v12;
  v13 = *(v8 - 1);
  if ((v13 & 1) != 0)
    goto LABEL_32;
LABEL_30:
  *(v8 - 1) = v11;
  return v8;
}

unint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin *,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v9 = a2;
  v11 = 0;
  v13 = *a1;
  v12 = a1[1];
  a1[1] = 0;
  do
  {
    v14 = (unint64_t)&a1[v11 + 2];
    if ((unint64_t *)v14 == a2)
      goto LABEL_29;
    v14 = *(_QWORD *)v14;
    v11 += 2;
  }
  while (v14 < v13);
  v15 = &a1[v11];
  v16 = a2;
  if (v11 != 2)
  {
    while (v16 != a1)
    {
      v17 = *(v16 - 2);
      v16 -= 2;
      if (v17 < v13)
        goto LABEL_10;
    }
    goto LABEL_29;
  }
  do
  {
    if (v15 >= v16)
      break;
    v18 = *(v16 - 2);
    v16 -= 2;
  }
  while (v18 >= v13);
LABEL_10:
  if (v15 < v16)
  {
    v19 = *v16;
    v8 = v15;
    v20 = v16;
LABEL_12:
    v21 = v8[1];
    *v8 = v19;
    v8[1] = 0;
    v22 = v20[1];
    v20[1] = 0;
    v8[1] = v22;
    *v20 = v14;
    v14 = v20[1];
    if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v20[1] = v21;
    v23 = v8 + 2;
    while (v23 != v9)
    {
      v24 = *v23;
      v23 += 2;
      v14 = v24;
      if (v24 >= v13)
      {
        v8 = v23 - 2;
        while (v20 != a1)
        {
          v25 = *(v20 - 2);
          v20 -= 2;
          v19 = v25;
          if (v25 < v13)
          {
            if (v8 < v20)
              goto LABEL_12;
            goto LABEL_24;
          }
        }
        break;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    if ((v14 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
  v8 = &a1[v11];
LABEL_24:
  v9 = v8 - 2;
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    v26 = a1[1];
    if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v26 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v27 = *(v8 - 1);
    *(v8 - 1) = 0;
    a1[1] = v27;
  }
  *(v8 - 2) = v13;
  v14 = *(v8 - 1);
  if ((v14 & 1) != 0)
    goto LABEL_30;
LABEL_28:
  *(v8 - 1) = v12;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BOOL8 result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;

  v10 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v10)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v12 = *(a2 - 2);
      v13 = *a1;
      if (v12 < *a1)
      {
        v14 = a1[1];
        *a1 = v12;
        a1[1] = 0;
        if (a2 - 2 != a1)
        {
          v15 = *(a2 - 1);
          *(a2 - 1) = 0;
          a1[1] = v15;
        }
        *(a2 - 2) = v13;
        v16 = *(a2 - 1);
        if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        *(a2 - 1) = v14;
        return 1;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v17 = a1 + 4;
      v25 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      break;
  }
  while (1)
  {
    v28 = *v25;
    v29 = *v17;
    if (*v25 < *v17)
    {
      v30 = v25[1];
      v25[1] = 0;
      v31 = v26;
      while (1)
      {
        v32 = (unint64_t *)((char *)a1 + v31);
        v33 = *(unint64_t *)((char *)a1 + v31 + 40);
        v32[5] = 0;
        v32[6] = v29;
        v32[7] = v33;
        if (v31 == -32)
          break;
        v29 = v32[2];
        v31 -= 16;
        if (v28 >= v29)
        {
          v34 = (unint64_t *)((char *)a1 + v31 + 48);
          goto LABEL_15;
        }
      }
      v34 = a1;
LABEL_15:
      *v34 = v28;
      v35 = v32[5];
      if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v35 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
      v32[5] = v30;
      if (++v27 == 8)
        return v25 + 2 == a2;
    }
    v17 = v25;
    v26 += 16;
    v25 += 2;
    if (v25 == a2)
      return 1;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v19 = *a3;
  if (*a4 < *a3)
  {
    v20 = a3[1];
    *a3 = *a4;
    a3[1] = 0;
    if (a3 != a4)
    {
      v21 = a4[1];
      a4[1] = 0;
      a3[1] = v21;
    }
    *a4 = v19;
    v22 = a4[1];
    if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v22 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
    a4[1] = v20;
    v23 = *a2;
    if (*a3 < *a2)
    {
      v24 = a2[1];
      *a2 = *a3;
      a2[1] = 0;
      if (a2 != a3)
      {
        v25 = a3[1];
        a3[1] = 0;
        a2[1] = v25;
      }
      *a3 = v23;
      v26 = a3[1];
      if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v26 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
      a3[1] = v24;
      v27 = *a1;
      if (*a2 < *a1)
      {
        v28 = a1[1];
        *a1 = *a2;
        a1[1] = 0;
        if (a1 != a2)
        {
          v29 = a2[1];
          a2[1] = 0;
          a1[1] = v29;
        }
        *a2 = v27;
        v30 = a2[1];
        if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v30 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
        a2[1] = v28;
      }
    }
  }
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin const&)#1} &,JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin*>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = a2 - 2;
  if (a2 >= 2)
  {
    v9 = a3;
    v11 = (uint64_t)a3 - a1;
    v12 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((uint64_t)a3 - a1) >> 4)
    {
      v14 = v11 >> 3;
      v15 = (v11 >> 3) + 1;
      v16 = (unint64_t *)(a1 + 16 * v15);
      v17 = v14 + 2;
      if (v14 + 2 >= a2)
      {
        v18 = *v16;
      }
      else
      {
        v18 = *v16;
        if (*v16 < v16[2])
        {
          v18 = v16[2];
          v16 += 2;
          v15 = v17;
        }
      }
      v19 = *a3;
      if (v18 >= *a3)
      {
        v20 = a3[1];
        a3[1] = 0;
        do
        {
          v21 = v16;
          *v9 = v18;
          if (v9 != v16)
          {
            v22 = v9[1];
            if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v22 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v23 = v21[1];
            v21[1] = 0;
            v9[1] = v23;
          }
          if (v12 < v15)
            break;
          v16 = (unint64_t *)(a1 + 16 * ((2 * v15) | 1));
          if (2 * v15 + 2 >= a2)
          {
            v18 = *v16;
            v15 = (2 * v15) | 1;
          }
          else
          {
            v18 = *v16;
            if (*v16 >= v16[2])
            {
              v15 = (2 * v15) | 1;
            }
            else
            {
              v18 = v16[2];
              v16 += 2;
              v15 = 2 * v15 + 2;
            }
          }
          v9 = v21;
        }
        while (v18 >= v19);
        *v21 = v19;
        v24 = v21[1];
        if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v24 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v21[1] = v20;
      }
    }
  }
}

void WTF::VectorTypeOperations<JSC::DFG::`anonymous namespace'::StoreBarrierClusteringPhase::ChildAndOrigin>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[1];
      if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v9 += 2;
    }
    while (v9 != a2);
  }
}

void JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::considerBarrier(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;

  if (*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x58) != *(_DWORD *)(a1 + 224))
  {
    v10 = *(_DWORD *)(a1 + 228);
    *(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
    v11 = (a2 >> 50) & 0x3F;
    if ((v11 - 8) >= 2 && (v11 > 0x26 || ((1 << v11) & 0x7FEAB7F800) == 0))
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), *(JSC::DFG::Node **)(a1 + 232), (const WTF::CString *)"./dfg/DFGStoreBarrierInsertionPhase.cpp", (const char *)0x27F, "void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::insertBarrier(unsigned int, Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]", "isCell(base.useKind())");
      __break(0xC471u);
      JUMPOUT(0x19853D544);
    }
    v12 = *(_QWORD *)(a1 + 232);
    v13 = *(_QWORD *)v12;
    if ((*(_QWORD *)v12 & 1) != 0)
    {
      v37 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v38 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
          ? (v39 = (_DWORD)v38 == -1)
          : (v39 = 1),
            v39))
      {
        v40 = 2;
      }
      else if (v38 >> 28)
      {
        v61 = *(_QWORD *)(a1 + 232);
        v62 = WTF::fastMalloc((WTF *)0x10);
        v12 = v61;
        *(_QWORD *)v62 = v37;
        *(_DWORD *)(v62 + 8) = v38;
        v40 = 1;
        v37 = v62;
      }
      else
      {
        v40 = v37;
        v37 = v38 << 36;
      }
      v13 = v37 | v40;
    }
    v14 = *(_QWORD *)(v12 + 8);
    if ((v14 & 1) != 0)
    {
      v41 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v42 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
          ? (v43 = (_DWORD)v42 == -1)
          : (v43 = 1),
            v43))
      {
        v44 = 2;
      }
      else if (v42 >> 28)
      {
        v63 = v12;
        v64 = WTF::fastMalloc((WTF *)0x10);
        v12 = v63;
        *(_QWORD *)v64 = v41;
        *(_DWORD *)(v64 + 8) = v42;
        v44 = 1;
        v41 = v64;
      }
      else
      {
        v44 = v41;
        v41 = v42 << 36;
      }
      v14 = v41 | v44;
    }
    v15 = (v10 + 1);
    v16 = *(_WORD *)(v12 + 16);
    if (JSC::DFG::clobbersExitState(*(JSC::DFG **)(a1 + 32), *(JSC::DFG::Graph **)(a1 + 232), a3, a4, a5, a6, a7, a8))
    {
      v24 = v13;
      if ((v13 & 1) != 0)
      {
        v53 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v54 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
            ? (v55 = (_DWORD)v54 == -1)
            : (v55 = 1),
              v55))
        {
          v56 = 2;
        }
        else if (v54 >> 28)
        {
          v67 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v67 = v53;
          *(_DWORD *)(v67 + 8) = v54;
          v56 = 1;
          v53 = v67;
        }
        else
        {
          v56 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          v53 = v54 << 36;
        }
        v24 = v53 | v56;
      }
      v25 = v14;
      if ((v14 & 1) != 0)
      {
        v57 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || ((v58 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
            ? (v59 = (_DWORD)v58 == -1)
            : (v59 = 1),
              v59))
        {
          v60 = 2;
        }
        else if (v58 >> 28)
        {
          v68 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          v57 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v57 = v68;
          *(_DWORD *)(v57 + 8) = v58;
          v60 = 1;
        }
        else
        {
          v60 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          v57 = v58 << 36;
        }
        v25 = v57 | v60;
      }
      v16 &= 0xFF00u;
      if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v13 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
      if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v14 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
      v14 = v25;
      v13 = v24;
    }
    v26 = a2 & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
    v27 = a1 + 72;
    v28 = v13;
    if ((v13 & 1) != 0)
    {
      v45 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v46 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
          ? (v47 = (_DWORD)v46 == -1)
          : (v47 = 1),
            v47))
      {
        v48 = 2;
      }
      else if (v46 >> 28)
      {
        v65 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v65 = v45;
        *(_DWORD *)(v65 + 8) = v46;
        v48 = 1;
        v45 = v65;
      }
      else
      {
        v48 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        v45 = v46 << 36;
      }
      v28 = v45 | v48;
    }
    v69 = v28;
    v29 = v14;
    if ((v14 & 1) != 0)
    {
      v49 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v50 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
          ? (v51 = (_DWORD)v50 == -1)
          : (v51 = 1),
            v51))
      {
        v52 = 2;
      }
      else if (v50 >> 28)
      {
        v66 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v66 = v49;
        *(_DWORD *)(v66 + 8) = v50;
        v52 = 1;
        v49 = v66;
      }
      else
      {
        v52 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v49 = v50 << 36;
      }
      v29 = v49 | v52;
    }
    v70 = v29;
    v71 = v16;
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v27, v15, 0, 383, (uint64_t)&v69, v26, v22, v23);
    if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v70 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
    if ((v69 & 1) != 0 && (v69 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v69 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
    if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
    if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
  }
}

void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1},JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2},JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1},JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2},JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1} const&,JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2} const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t **a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  char v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  BOOL v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  BOOL v198;
  unsigned int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int16 v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  uint64_t v240;
  unsigned int v241;
  _DWORD *v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _BYTE *v343;
  int *v344;
  unint64_t v345;
  unsigned __int8 *v346;
  int v347;
  unint64_t *v348;
  int v349;
  int v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  _DWORD *v377;
  unint64_t v378;
  __int16 v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  int v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  _BYTE *v388;
  int v389;
  int *v390;
  int v391;
  unint64_t *v392;
  int v393;
  unint64_t v394;
  __int16 v395;
  int v396;
  uint64_t v397;
  unint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  _DWORD *v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unsigned int v476;
  JSC::DFG::Node *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t *v486;
  unint64_t v487;
  unsigned int v488;
  unsigned int v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  unsigned int v507;
  uint64_t v508;
  const char *v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char v529;
  uint64_t v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  uint64_t v536;
  char v537;
  _BYTE v538[56];
  uint64_t v539;
  _BYTE v540[56];
  char v541;
  char v542;
  char v543;
  char v544;
  _BYTE v545[56];
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  char v550;
  char v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  char v555;
  char v556;
  char v557;
  char v558;
  char v559;
  char v560;
  char v561;
  char v562;
  _BYTE v563[56];
  uint64_t v564;
  char v565;
  char v566;
  char v567;
  _BYTE v568[56];

  v12 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v12 = *(_QWORD *)v12;
  while (v12)
  {
    v14 = *(_QWORD *)(v12 + 24);
    if ((*(_BYTE *)(v12 + 32) & 1) != 0)
    {
      v52 = (HIDWORD(v14) & 0xFFFFF | ((int)(v14 >> 28) >> 24 << 20)) + 3;
      v546 = ((v52 & 0xFFFFFFFEFFFFFFFFLL | (((v52 >> 31) & 1) << 32)) << 15) | 2;
      v14 = *(_QWORD *)(v12 + 24);
    }
    if ((v14 >> 60) - 3 <= 2)
    {
      v80 = (HIDWORD(v14) & 0xFFFFF | ((int)(v14 >> 28) >> 24 << 20)) + 4;
      v546 = ((v80 & 0xFFFFFFFEFFFFFFFFLL | (((v80 >> 31) & 1) << 32)) << 15) | 2;
    }
    v15 = *(_QWORD *)(v12 + 16);
    v12 = v15 & 0xFFFFFFFF8;
    if ((v15 & 1) != 0)
      v12 = *(_QWORD *)v12;
  }
  if (*((_BYTE *)this + 960))
  {
    v487 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
    v546 = ((v487 & 0xFFFFFFFEFFFFFFFFLL | (((v487 >> 31) & 1) << 32)) << 15) | 2;
  }
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v488 = *((unsigned __int16 *)a2 + 9);
    if (v488 > 0xC9)
    {
      if (v488 - 202 > 0x3E || ((1 << (v488 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v489 = v488 - 333;
        if (v489 > 0x3A || ((1 << v489) & 0x7A8000000000003) == 0)
        {
LABEL_745:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19854028CLL);
        }
      }
LABEL_169:
      v86 = 16385;
LABEL_170:
      v546 = v86;
LABEL_171:
      **a4 = 1;
      return;
    }
    v529 = v488 - 101;
    if (v488 - 101 > 0x3E)
      goto LABEL_744;
    if (((1 << v529) & 0x7E0070000000000FLL) != 0)
      goto LABEL_169;
    if (((1 << v529) & 0x18000000000) == 0)
    {
LABEL_744:
      if (v488 - 92 >= 2)
        goto LABEL_745;
      goto LABEL_169;
    }
  }
  v13 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x117:
    case 0x118:
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return;
    case 6:
      v185 = 16423;
      goto LABEL_314;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      goto LABEL_169;
    case 0xB:
      v54 = 98306;
      goto LABEL_296;
    case 0xC:
      v75 = (uint64_t)a4;
      v76 = 98306;
      goto LABEL_611;
    case 0xD:
      v244 = *((_QWORD *)a2 + 9);
      if (v244)
      {
        v387 = (HIDWORD(*(_QWORD *)(v244 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v244 + 24) >> 28) >> 24 << 20)) + 4;
        v54 = ((unint64_t)v387 << 15) | ((unint64_t)(v387 >> 31) << 47) | 2;
      }
      else
      {
        v54 = 131074;
      }
      goto LABEL_296;
    case 0xE:
      v76 = 131074;
      goto LABEL_254;
    case 0xF:
      v43 = (_QWORD *)*((_QWORD *)a2 + 9);
      v44 = v43;
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
      if (v45 != v43)
        *v43 = v45;
      v46 = (v45[3] << 15) | 2;
      v546 = v46;
      while (1)
      {
        v47 = v46 & 0x3FFF;
        if (v47 == 1)
          break;
        if (v47 == 2)
          v48 = 16385;
        else
          v48 = 16387;
        if ((v46 & 0x4000) != 0)
          v46 = v48;
        else
          v46 = v47 | 0x4000u;
        if (v47 == 40)
          v46 = 16385;
        if (v47 == 3)
          v46 = 16385;
        if (v46 == 16386)
        {
          v49 = *a3;
          v50 = **a3;
          if (v50)
          {
            v176 = *(unsigned int *)(v50 - 4);
            if ((_DWORD)v176)
            {
              v177 = 0;
              v178 = v176 - 1;
              do
              {
                v179 = v178;
                v180 = (_QWORD *)(v50 + 16 * v178);
                if (*v180 && (*v180 & 0x7FFFLL) != 0x4000)
                {
                  if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)(v50 + 16 * v178), &v546))
                  {
                    v179 = v178;
                    *(_DWORD *)(*(_QWORD *)(v50 + 16 * v178 + 8) + 88) = 0;
                    *v180 = 0x4000;
                    ++v177;
                  }
                  else
                  {
                    v179 = v178;
                  }
                }
                --v178;
              }
              while (v179);
              v181 = *v49;
              if (v177)
              {
                *(_DWORD *)(v181 - 16) += v177;
                v410 = *v49;
                if (*v49)
                  v411 = *(_DWORD *)(v410 - 12);
                else
                  v411 = 0;
                *(_DWORD *)(v410 - 12) = v411 - v177;
                v181 = *v49;
              }
              if (v181)
              {
                v182 = *(_DWORD *)(v181 - 4);
                v183 = 6 * *(_DWORD *)(v181 - 12);
                if (v182 >= 9 && v183 < v182)
                  WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::shrinkToBestSize(v49, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              }
            }
          }
          break;
        }
      }
      v27 = (_QWORD *)*((_QWORD *)a2 + 9);
      v51 = v27;
      do
      {
        v29 = v51;
        v51 = (_QWORD *)*v51;
      }
      while (v51);
      goto LABEL_48;
    case 0x10:
      v16 = (_QWORD *)*((_QWORD *)a2 + 9);
      v17 = v16;
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
      if (v18 != v16)
        *v16 = v18;
      v19 = (v18[3] << 15) | 2;
      v20 = (*((_WORD *)v18 + 12) << 15) | 2;
      while (2)
      {
        v21 = v20 & 0x3FFF;
        if (v21 != 1)
        {
          if (v21 != 3)
          {
            v22 = 16385;
            if (v21 == 40)
              goto LABEL_28;
            if ((v20 & 0x4000) == 0)
            {
              v22 = v21 | 0x4000u;
LABEL_28:
              v20 = v22;
              if (v22 == 16387)
              {
LABEL_44:
                v26 = 1;
                goto LABEL_46;
              }
              continue;
            }
            if (v21 != 2)
              goto LABEL_44;
          }
          v22 = 16385;
          goto LABEL_28;
        }
        break;
      }
      LOWORD(v23) = (*((_WORD *)v18 + 12) << 15) | 2;
      while (1)
      {
        v24 = v23 & 0x3FFF;
        if (v24 == 1)
          break;
        if (v24 == 2)
          v25 = 16385;
        else
          v25 = 16387;
        if ((v23 & 0x4000) != 0)
          v23 = v25;
        else
          v23 = v24 | 0x4000u;
        if (v24 == 40)
          v23 = 16385;
        if (v24 == 3)
          v23 = 16385;
        if (v23 == 16386)
          goto LABEL_44;
      }
      v26 = 0;
LABEL_46:
      **a4 |= v26;
      ++*(_DWORD *)a4[1];
      *(_QWORD *)a4[2] = v19;
      v27 = (_QWORD *)*((_QWORD *)a2 + 9);
      v28 = v27;
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
LABEL_48:
      if (v29 != v27)
        *v27 = v29;
      return;
    case 0x11:
      JSC::DFG::LazyNode::LazyNode(&v564, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x12:
      v76 = (*((_QWORD *)a2 + 9) << 15) | 2;
      goto LABEL_254;
    case 0x13:
      v546 = (**((_QWORD **)a2 + 9) << 15) | 2;
      v53 = &v565;
      goto LABEL_586;
    case 0x1C:
      v30 = (_QWORD *)*((_QWORD *)a2 + 9);
      v31 = v30;
      do
      {
        v32 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
      if (v32 != v30)
        *v30 = v32;
      v33 = (v32[3] << 15) | 2;
      v546 = v33;
      while (1)
      {
        v34 = v33 & 0x3FFF;
        if (v34 == 1)
          break;
        if (v34 == 2)
          v35 = 16385;
        else
          v35 = 16387;
        if ((v33 & 0x4000) != 0)
          v33 = v35;
        else
          v33 = v34 | 0x4000u;
        if (v34 == 40)
          v33 = 16385;
        if (v34 == 3)
          v33 = 16385;
        if (v33 == 16386)
        {
          v36 = *a3;
          v37 = **a3;
          if (v37)
          {
            v38 = *(unsigned int *)(v37 - 4);
            if ((_DWORD)v38)
            {
              v39 = 0;
              v40 = v38 - 1;
              do
              {
                v41 = v40;
                v42 = (_QWORD *)(v37 + 16 * v40);
                if (*v42
                  && (*v42 & 0x7FFFLL) != 0x4000
                  && JSC::DFG::AbstractHeap::overlaps((uint64_t *)(v37 + 16 * v40), &v546))
                {
                  *(_DWORD *)(*(_QWORD *)(v37 + 16 * v40 + 8) + 88) = 0;
                  *v42 = 0x4000;
                  ++v39;
                }
                --v40;
              }
              while (v41);
              v165 = *v36;
              if (v39)
              {
                *(_DWORD *)(v165 - 16) += v39;
                v408 = *v36;
                if (*v36)
                  v409 = *(_DWORD *)(v408 - 12);
                else
                  v409 = 0;
                *(_DWORD *)(v408 - 12) = v409 - v39;
                v165 = *v36;
              }
              if (v165)
              {
                v166 = *(_DWORD *)(v165 - 4);
                v167 = 6 * *(_DWORD *)(v165 - 12);
                v168 = v166 < 9 || v167 >= v166;
                if (!v168)
                  WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::shrinkToBestSize(v36, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              }
            }
          }
          return;
        }
      }
      return;
    case 0x21:
      v58 = *((unsigned int *)a2 + 18);
      v59 = 35;
      goto LABEL_111;
    case 0x22:
      v75 = (uint64_t)a4;
      v76 = 16419;
      goto LABEL_611;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
        goto LABEL_169;
      return;
    case 0x2A:
    case 0x142:
    case 0x143:
      v85 = *((_BYTE *)a2 + 30);
      goto LABEL_168;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v195 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v195)
      {
        case 0x1A:
          v196 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v197 = 0x68000000000000;
          break;
        case 0x1C:
          v196 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v197 = 0x70000000000000;
          break;
        case 0x1B:
          v196 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v197 = 0x6C000000000000;
          break;
        default:
          goto LABEL_169;
      }
      if (v196 != v197)
        goto LABEL_169;
LABEL_475:
      v546 = 16385;
      goto LABEL_476;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        goto LABEL_167;
      goto LABEL_169;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
        goto LABEL_169;
      return;
    case 0x40:
    case 0x42:
    case 0x44:
      v88 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v88 == 49 || (_DWORD)v88 == 1 || (_DWORD)v88 == 52)
        return;
      if ((_DWORD)v88)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19853DFA4);
      }
      goto LABEL_169;
    case 0x41:
      v243 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v243 == 49 || (_DWORD)v243 == 1 || (_DWORD)v243 == 52)
        return;
      goto LABEL_169;
    case 0x46:
      v257 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v257 != 49 && (_DWORD)v257 != 1)
        goto LABEL_169;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v186 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v187 = 0xC4000000000000;
      goto LABEL_318;
    case 0x4B:
      v86 = 16409;
      goto LABEL_170;
    case 0x52:
    case 0x53:
      v375 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v375)
        goto LABEL_169;
      if (v375 > 0x34 || ((1 << v375) & 0x1200001C000002) == 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19853F0E0);
      }
      return;
    case 0x5C:
    case 0x5D:
      v65 = *((_DWORD *)a2 + 18);
      if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
      {
        switch(*((_DWORD *)a2 + 14) & 7)
        {
          case 3:
            v66 = 13;
            break;
          case 4:
            v66 = 17;
            break;
          case 5:
            v66 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x1985402BCLL);
          default:
            __break(0xC471u);
            JUMPOUT(0x1985402ECLL);
        }
      }
      else
      {
        v66 = 21;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_169;
        case 3u:
        case 6u:
          return;
        case 5u:
          if (BYTE2(v65) - 3 <= 1)
            goto LABEL_169;
          return;
        case 7u:
          if (BYTE2(v65) > 3u || BYTE2(v65) == 2)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16400;
          v144 = *((_DWORD *)a2 + 6);
          v145 = *((_DWORD *)this + 41);
          if (v145 <= v144)
          {
            __break(0xC471u);
            JUMPOUT(0x1985403B4);
          }
          if (v145 <= v144 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853E39CLL);
          }
          return;
        case 8u:
          if (BYTE2(v65) >= 2u && BYTE2(v65) != 3)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16401;
          v123 = *((_DWORD *)a2 + 6);
          v124 = *((_DWORD *)this + 41);
          if (v124 <= v123)
          {
            __break(0xC471u);
            JUMPOUT(0x1985403A4);
          }
          if (v124 <= v123 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853E1D8);
          }
          return;
        case 9u:
          if (BYTE2(v65) > 3u || BYTE2(v65) == 2)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16402;
          v73 = *((_DWORD *)a2 + 6);
          v74 = *((_DWORD *)this + 41);
          if (v74 <= v73)
          {
            __break(0xC471u);
            JUMPOUT(0x19854037CLL);
          }
          if (v74 <= v73 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853DDCCLL);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v65) <= 1u)
            goto LABEL_572;
          goto LABEL_169;
        case 0xCu:
          if (BYTE2(v65) > 1u)
            goto LABEL_169;
          v546 = 16404;
          v373 = *((_DWORD *)a2 + 6);
          v374 = *((_DWORD *)this + 41);
          if (v374 <= v373)
          {
            __break(0xC471u);
            JUMPOUT(0x19854041CLL);
          }
          if (v374 <= v373 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853F064);
          }
          return;
        case 0xDu:
          v546 = 16405;
          v505 = *((_QWORD *)a2 + 3);
          v506 = *((_DWORD *)this + 41);
          if (v506 <= v505)
          {
            __break(0xC471u);
            JUMPOUT(0x19854060CLL);
          }
          if (v506 <= (int)v505 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198540614);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v563, v66, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v53 = &v562;
          goto LABEL_586;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          v546 = 16406;
          v546 = 16423;
          if ((v65 & 0x40000000) != 0)
            goto LABEL_648;
          v152 = *((_DWORD *)a2 + 6);
          v153 = *((_DWORD *)this + 41);
          if (v153 <= v152)
          {
            __break(0xC471u);
            JUMPOUT(0x1985403ACLL);
          }
          if (v153 <= v152 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853E3ECLL);
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x19853FFB8);
        default:
          __break(0xC471u);
          JUMPOUT(0x19853FF70);
      }
      return;
    case 0x60:
    case 0x61:
    case 0x113:
    case 0x166:
      v54 = 16386;
      goto LABEL_296;
    case 0x63:
      v546 = 16385;
      v343 = *a4;
      **a4 = 1;
      v344 = (int *)*((_QWORD *)a2 + 9);
      v345 = ((v344[1] | ((((unint64_t)v344[1] >> 31) & 1) << 32)) << 15) | 2;
      v346 = a4[1];
      v347 = (*(_DWORD *)v346)++;
      v348 = (unint64_t *)a4[2];
      *v348 = v345;
      v349 = v344[6];
      if (v349)
      {
        v350 = v347 + 2;
        v351 = -v349;
        do
        {
          v352 = *v344;
          *(_DWORD *)v346 = v350++;
          v168 = __CFADD__(v351++, 1);
        }
        while (!v168);
        *v343 = 1;
        *v348 = (((v352 - v351) | ((((unint64_t)(v352 - v351) >> 31) & 1) << 32)) << 15) | 2;
      }
      return;
    case 0x64:
      v546 = 16386;
      v377 = (_DWORD *)*((_QWORD *)a2 + 9);
      v378 = ((v377[1] | ((((unint64_t)v377[1] >> 31) & 1) << 32)) << 15) | 2;
      v379 = v378;
      while (2)
      {
        v380 = v379 & 0x3FFF;
        if (v380 != 1)
        {
          if (v380 != 3)
          {
            v381 = 16385;
            if (v380 == 40)
              goto LABEL_503;
            if ((v379 & 0x4000) == 0)
            {
              v381 = v380 | 0x4000u;
LABEL_503:
              v379 = v381;
              if (v381 == 16387)
              {
LABEL_527:
                v386 = 1;
                goto LABEL_530;
              }
              continue;
            }
            if (v380 != 2)
              goto LABEL_527;
          }
          v381 = 16385;
          goto LABEL_503;
        }
        break;
      }
      v383 = ((v377[1] | ((((unint64_t)v377[1] >> 31) & 1) << 32)) << 15) | 2;
      while (1)
      {
        v384 = v383 & 0x3FFF;
        if (v384 == 1)
          break;
        if (v384 == 2)
          v385 = 16385;
        else
          v385 = 16387;
        if ((v383 & 0x4000) != 0)
          v383 = v385;
        else
          v383 = v384 | 0x4000u;
        if (v384 == 40)
          v383 = 16385;
        if (v384 == 3)
          v383 = 16385;
        if (v383 == 16386)
          goto LABEL_527;
      }
      v386 = 0;
LABEL_530:
      v388 = *a4;
      v389 = **a4 | v386;
      **a4 = v389;
      v390 = (int *)a4[1];
      v391 = *v390 + 1;
      *v390 = v391;
      v392 = (unint64_t *)a4[2];
      *v392 = v378;
      v393 = v377[6];
      if (!v393)
        return;
LABEL_531:
      --v393;
      v394 = (((*v377 + v393) | ((((unint64_t)(*v377 + v393) >> 31) & 1) << 32)) << 15) | 2;
      v395 = v394;
      while (1)
      {
        v396 = v395 & 0x3FFF;
        if (v396 == 1)
        {
          v398 = (((*v377 + v393) | ((((unint64_t)(*v377 + v393) >> 31) & 1) << 32)) << 15) | 2;
          while (1)
          {
            v399 = v398 & 0x3FFF;
            if (v399 == 1)
              break;
            if (v399 == 2)
              v400 = 16385;
            else
              v400 = 16387;
            if ((v398 & 0x4000) != 0)
              v398 = v400;
            else
              v398 = v399 | 0x4000u;
            if (v399 == 40)
              v398 = 16385;
            if (v399 == 3)
              v398 = 16385;
            if (v398 == 16386)
              goto LABEL_554;
          }
          v401 = 0;
LABEL_556:
          v389 |= v401;
          *v390 = ++v391;
          if (!v393)
          {
            *v388 = v389;
            *v392 = v394;
            return;
          }
          goto LABEL_531;
        }
        if (v396 == 3)
          goto LABEL_537;
        v397 = 16385;
        if (v396 != 40)
          break;
LABEL_538:
        v395 = v397;
        if (v397 == 16387)
        {
LABEL_554:
          v401 = 1;
          goto LABEL_556;
        }
      }
      if ((v395 & 0x4000) == 0)
      {
        v397 = v396 | 0x4000u;
        goto LABEL_538;
      }
      if (v396 != 2)
        goto LABEL_554;
LABEL_537:
      v397 = 16385;
      goto LABEL_538;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v89 = *((_DWORD *)a2 + 6);
      v90 = *((_DWORD *)this + 41);
      if (v90 <= v89)
      {
        __break(0xC471u);
        JUMPOUT(0x198540384);
      }
      if (v90 <= v89 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19854038CLL);
      }
      if (v90 <= v89 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198540394);
      }
      v91 = *((_DWORD *)a2 + 18);
      v92 = *((_DWORD *)a2 + 14) & 7;
      if (v92 >= 2 && v92 - 3 >= 3)
      {
        if (v92 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19853E6ECLL);
        }
        __break(0xC471u);
        JUMPOUT(0x19854033CLL);
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 6u:
        case 0xCu:
        case 0xDu:
        case 0x17u:
        case 0x18u:
          goto LABEL_169;
        case 3u:
          return;
        case 7u:
          if (BYTE2(v91) - 3 <= 1)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16389;
          v86 = 16400;
          goto LABEL_170;
        case 8u:
          if (BYTE2(v91) - 3 <= 1)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16389;
          v86 = 16401;
          goto LABEL_170;
        case 9u:
          if (BYTE2(v91) - 3 <= 1)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16389;
          v86 = 16402;
          goto LABEL_170;
        case 0xAu:
          if (BYTE2(v91) - 3 <= 1)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16389;
          v546 = 16403;
          if (*((_WORD *)a2 + 9) == 146)
            v424 = *((_DWORD *)a2 + 20);
          else
            v424 = *((_DWORD *)a2 + 18);
          if ((v424 & 0xFE0000) == 0)
            return;
          v75 = (uint64_t)a4;
          v76 = 16388;
          goto LABEL_611;
        case 0xBu:
          if ((v91 & 0xFE0000) != 0)
            goto LABEL_169;
          v546 = 16388;
          v546 = 16389;
          v546 = 16403;
          v75 = (uint64_t)a4;
          v76 = 16403;
          goto LABEL_611;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v91 & 0x40000000) == 0)
          {
            v86 = 16423;
            goto LABEL_170;
          }
          v546 = 16406;
          v546 = 16423;
          break;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x19853F9F8);
        default:
          __break(0xC471u);
          JUMPOUT(0x1985401ECLL);
      }
      goto LABEL_641;
    case 0x84:
    case 0x85:
    case 0x126:
      goto LABEL_295;
    case 0x87:
      v546 = 16396;
      **a4 = 1;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
        goto LABEL_141;
      return;
    case 0x88:
    case 0x89:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x16B:
      goto LABEL_191;
    case 0x8A:
      v54 = 16396;
      goto LABEL_296;
    case 0x8B:
    case 0xB2:
    case 0xB4:
    case 0x194:
    case 0x196:
      goto LABEL_171;
    case 0x8C:
    case 0x8D:
      v169 = 16393;
      goto LABEL_294;
    case 0x90:
    case 0x93:
    case 0x12B:
    case 0x12C:
    case 0x135:
    case 0x136:
      goto LABEL_562;
    case 0x91:
    case 0x92:
      v546 = 16394;
      v546 = 16393;
      v86 = 16396;
      goto LABEL_170;
    case 0x96:
      v54 = 16390;
      goto LABEL_296;
    case 0x97:
      v546 = 16391;
      v53 = &v566;
      goto LABEL_586;
    case 0x98:
    case 0x99:
      v546 = ((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF;
      if (*((int *)this + 238) < 2)
        return;
      v53 = &v557;
      goto LABEL_586;
    case 0x9A:
      v546 = 16394;
      v546 = 16396;
      v546 = ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF;
      if (*((int *)this + 238) <= 1)
        v53 = &v555;
      else
        v53 = &v556;
      goto LABEL_586;
    case 0x9B:
      v55 = 15;
      while (2)
      {
        v56 = v55 & 0x3FFF;
        if (v56 != 1)
        {
          if (v56 != 3)
          {
            v57 = 16385;
            if (v56 == 40)
              goto LABEL_107;
            if ((v55 & 0x4000) == 0)
            {
              v57 = v56 | 0x4000u;
LABEL_107:
              v55 = v57;
              if (v57 == 16387)
              {
LABEL_125:
                v63 = 1;
                goto LABEL_127;
              }
              continue;
            }
            if (v56 != 2)
              goto LABEL_125;
          }
          v57 = 16385;
          goto LABEL_107;
        }
        break;
      }
      LOWORD(v60) = 15;
      while (1)
      {
        v61 = v60 & 0x3FFF;
        if (v61 == 1)
          break;
        if (v61 == 2)
          v62 = 16385;
        else
          v62 = 16387;
        if ((v60 & 0x4000) != 0)
          v60 = v62;
        else
          v60 = v61 | 0x4000u;
        if (v61 == 40)
          v60 = 16385;
        if (v61 == 3)
          v60 = 16385;
        if (v60 == 16386)
          goto LABEL_125;
      }
      v63 = 0;
LABEL_127:
      **a4 |= v63;
      if (*((int *)this + 238) >= 2)
        JSC::DFG::LazyNode::LazyNode(&v552, (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9C:
      v546 = 16394;
      v546 = 16396;
      v474 = *((_QWORD *)a2 + 9);
      v475 = ((unint64_t)*(unsigned int *)(v474 + 20) << 6) - 64;
      while (v475 != -64)
      {
        v476 = *(_DWORD *)(*(_QWORD *)(v474 + 8) + v475) - 2;
        v475 -= 64;
        if (v476 <= 3)
        {
          v474 = *((_QWORD *)a2 + 9);
          break;
        }
      }
      if (JSC::DFG::MultiPutByOffsetData::reallocatesStorage(v474))
      v477 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      if (*((int *)this + 238) < 2)
        JSC::DFG::LazyNode::LazyNode(&v553, v477);
      else
        JSC::DFG::LazyNode::LazyNode(&v554, v477);
      return;
    case 0x9D:
      v546 = 16394;
      v546 = 16396;
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
LABEL_141:
      v75 = (uint64_t)a4;
      v76 = 16399;
      goto LABEL_611;
    case 0x9E:
      v87 = *((_DWORD *)a2 + 18);
      if (v87 - 6 < 6)
      {
        v54 = 16388;
        goto LABEL_296;
      }
      if (*((_DWORD *)a2 + 18) <= 0xBu)
      {
        if (v87 == 5)
          return;
        if (v87 == 3)
          goto LABEL_476;
        goto LABEL_781;
      }
      if (v87 - 12 < 2)
      {
LABEL_562:
        v54 = 16423;
        goto LABEL_296;
      }
      if (v87 != 25)
      {
LABEL_781:
        v532 = JSC::DFG::toTypedArrayType(v87);
        if (v532 == 12 || !v532)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1985404D8);
        }
      }
      v546 = 16423;
      if ((v87 & 0x40000000) != 0)
        goto LABEL_641;
      v53 = &v551;
      goto LABEL_586;
    case 0x9F:
      v407 = *((_DWORD *)a2 + 18);
      if (v407 != 25)
      {
        v531 = JSC::DFG::toTypedArrayType(v407);
        if (v531 == 12 || !v531)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198540474);
        }
      }
      if ((v407 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x19853F4C8);
      }
      return;
    case 0xA0:
      v461 = *((_DWORD *)a2 + 18);
      if (v461 == 25)
        goto LABEL_666;
      v535 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v535 == 12 || !v535)
      {
        if (v461 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198540604);
        }
        goto LABEL_476;
      }
      if (v461 == 3)
        goto LABEL_476;
LABEL_666:
      v546 = 16423;
      if ((v461 & 0x40000000) != 0)
        goto LABEL_641;
      v53 = &v550;
      goto LABEL_586;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x1985403ECLL);
      }
      v546 = 16389;
      v53 = &v549;
      goto LABEL_586;
    case 0xA2:
      v459 = *((unsigned __int8 *)a2 + 72);
      if (v459 == 25)
        goto LABEL_659;
      v534 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v534 == 12 || !v534)
      {
        if (v459 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1985405A0);
        }
        goto LABEL_476;
      }
      if (v459 == 3)
        goto LABEL_476;
LABEL_659:
      v546 = 16423;
      if (*((_WORD *)a2 + 9) == 146)
        v460 = *((_DWORD *)a2 + 20);
      else
        v460 = *((_DWORD *)a2 + 18);
      if ((v460 & 0x40000000) == 0)
      {
        v53 = &v559;
        goto LABEL_586;
      }
      goto LABEL_641;
    case 0xA3:
      v457 = *((unsigned __int8 *)a2 + 72);
      if (v457 == 25)
        goto LABEL_654;
      v533 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v533 == 12 || !v533)
      {
        if (v457 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19854053CLL);
        }
        goto LABEL_476;
      }
      if (v457 == 3)
      {
LABEL_476:
        v75 = (uint64_t)a4;
        v76 = 16424;
LABEL_611:
        return;
      }
LABEL_654:
      v546 = 16423;
      if (*((_WORD *)a2 + 9) == 146)
        v458 = *((_DWORD *)a2 + 20);
      else
        v458 = *((_DWORD *)a2 + 18);
      if ((v458 & 0x40000000) != 0)
      {
LABEL_641:
        v75 = (uint64_t)a4;
        v76 = 16423;
        goto LABEL_611;
      }
      v53 = &v558;
LABEL_586:
      JSC::DFG::LazyNode::LazyNode(v53, a2);
      return;
    case 0xAA:
    case 0x129:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      v54 = 16385;
      goto LABEL_296;
    case 0xAB:
      v58 = *((unsigned int *)a2 + 18);
      v59 = 21;
      goto LABEL_111;
    case 0xAC:
      v77 = 21;
      while (1)
      {
        v78 = v77 & 0x3FFF;
        if (v78 == 1)
        {
          LOWORD(v81) = 21;
          while (1)
          {
            v82 = v81 & 0x3FFF;
            if (v82 == 1)
              break;
            if (v82 == 2)
              v83 = 16385;
            else
              v83 = 16387;
            if ((v81 & 0x4000) != 0)
              v81 = v83;
            else
              v81 = v82 | 0x4000u;
            if (v82 == 40)
              v81 = 16385;
            if (v82 == 3)
              v81 = 16385;
            if (v81 == 16386)
              goto LABEL_165;
          }
LABEL_381:
          v84 = 0;
LABEL_382:
          **a4 |= v84;
          return;
        }
        if (v78 == 3)
          goto LABEL_148;
        v79 = 16385;
        if (v78 != 40)
          break;
LABEL_149:
        v77 = v79;
        if (v79 == 16387)
          goto LABEL_165;
      }
      if ((v77 & 0x4000) == 0)
      {
        v79 = v78 | 0x4000u;
        goto LABEL_149;
      }
      if (v78 != 2)
        goto LABEL_165;
LABEL_148:
      v79 = 16385;
      goto LABEL_149;
    case 0xAD:
    case 0xAE:
      v58 = *((_QWORD *)a2 + 9);
      v59 = 36;
      goto LABEL_111;
    case 0xAF:
      v203 = 36;
      while (1)
      {
        v204 = v203 & 0x3FFF;
        if (v204 == 1)
        {
          LOWORD(v214) = 36;
          do
          {
            v215 = v214 & 0x3FFF;
            if (v215 == 1)
              goto LABEL_381;
            if (v215 == 2)
              v216 = 16385;
            else
              v216 = 16387;
            if ((v214 & 0x4000) != 0)
              v214 = v216;
            else
              v214 = v215 | 0x4000u;
            if (v215 == 40)
              v214 = 16385;
            if (v215 == 3)
              v214 = 16385;
          }
          while (v214 != 16386);
          goto LABEL_165;
        }
        if (v204 == 3)
          goto LABEL_356;
        v205 = 16385;
        if (v204 != 40)
          break;
LABEL_357:
        v203 = v205;
        if (v205 == 16387)
          goto LABEL_165;
      }
      if ((v203 & 0x4000) == 0)
      {
        v205 = v204 | 0x4000u;
        goto LABEL_357;
      }
      if (v204 != 2)
        goto LABEL_165;
LABEL_356:
      v205 = 16385;
      goto LABEL_357;
    case 0xB3:
      v54 = 16398;
      goto LABEL_296;
    case 0xB5:
      v75 = (uint64_t)a4;
      v76 = 16408;
      goto LABEL_611;
    case 0xBE:
      v546 = 16395;
      v53 = &v561;
      goto LABEL_586;
    case 0xC1:
      v247 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v247 > 0x31 || ((1 << v247) & 0x2000000200002) == 0)
        goto LABEL_169;
      v248 = *((_QWORD *)a2 + 4);
      if ((v248 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
LABEL_416:
      v186 = v248 & 0xFC000000000000;
      v187 = 0x4000000000000;
LABEL_318:
      if (v186 != v187)
        goto LABEL_169;
      return;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_169;
      v546 = 16394;
      v546 = 16396;
      v54 = 16399;
      goto LABEL_296;
    case 0xC4:
      v402 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v402 == 11)
        goto LABEL_191;
      if ((_DWORD)v402)
      {
        __break(0xC471u);
        JUMPOUT(0x19853F3C0);
      }
      goto LABEL_169;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (v13 - 202 >= 0xA || ((0x3EFu >> (v13 + 54)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198540374);
      }
      v429 = dword_199156504[(__int16)(v13 - 202)];
      v430 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v507 = v429 + *v430;
        if (*((_DWORD *)this + 41) <= v507)
        {
          __break(0xC471u);
          JUMPOUT(0x19854061CLL);
        }
        v431 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v507);
      }
      else
      {
        v431 = &v430[2 * v429];
      }
      if ((*v431 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_169;
      v546 = 16406;
      v546 = 16423;
      goto LABEL_630;
    case 0xCE:
      v486 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v530 = *v486;
        if (*((_DWORD *)this + 41) <= v530)
        {
          __break(0xC471u);
          JUMPOUT(0x198540658);
        }
        v486 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v530);
      }
      v248 = *v486;
      goto LABEL_416;
    case 0xD6:
      v546 = 16423;
      v546 = 16393;
      v546 = 16394;
      v546 = 16396;
      v546 = 16388;
      v546 = 16401;
      v546 = 16400;
      v185 = 16402;
      goto LABEL_314;
    case 0xD7:
      v546 = 16423;
      v546 = 16393;
      v546 = 16394;
      v546 = 16396;
      v546 = 16388;
      if (*((_WORD *)a2 + 9) == 146)
        v283 = *((_DWORD *)a2 + 20);
      else
        v283 = *((_DWORD *)a2 + 18);
      switch(v283)
      {
        case 9u:
          v54 = 16402;
          break;
        case 7u:
          v54 = 16400;
          break;
        case 8u:
          v54 = 16401;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19854007CLL);
      }
      goto LABEL_296;
    case 0xDA:
    case 0xDE:
      v86 = 16408;
      goto LABEL_170;
    case 0xDD:
      goto LABEL_363;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_169;
      }
LABEL_363:
      v546 = 16408;
      v86 = 16398;
      goto LABEL_170;
    case 0xE1:
      v186 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v187 = 0x54000000000000;
      goto LABEL_318;
    case 0xE6:
      v258 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v258 - 1) < 2)
        return;
      if ((_DWORD)v258)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19853EB8CLL);
      }
      goto LABEL_169;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v64 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v64 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x54000000000000)
        {
LABEL_191:
          v86 = 16407;
          goto LABEL_170;
        }
        return;
      }
      if ((_DWORD)v64)
        return;
LABEL_167:
      v85 = *((_BYTE *)a2 + 38);
LABEL_168:
      if ((v85 & 0xFC) != 0)
        return;
      goto LABEL_169;
    case 0x101:
    case 0x102:
      goto LABEL_476;
    case 0x106:
      v546 = 16407;
      **a4 = 1;
      v101 = *((_QWORD *)a2 + 4);
      v102 = v101;
      if ((v101 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v101) + 0x2000000000000, v95, v96, v97, v98, v99, v100);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v101 | 0xFFFE000000000000, v95, v96, v97, v98, v99, v100);
        if (!(_DWORD)v101)
          return;
      }
      v109 = *((unsigned __int16 *)a2 + 9);
      switch(v109)
      {
        case 267:
          goto LABEL_482;
        case 264:
          LOBYTE(v110) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_482:
          LOBYTE(v110) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v110 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v110 - 4 < 6
        || v110 <= 0x19u && ((1 << v110) & 0x2A00000) != 0)
      {
        v111 = *((unsigned int *)this + 107);
        if (v101 >= v111)
        {
          if ((_DWORD)v111)
          {
            v199 = (unsigned int *)*((_QWORD *)this + 52);
            v200 = 4 * v111;
            do
            {
              v201 = *v199;
              if (v201 < v101)
              {
                if (*((_DWORD *)this + 41) <= (v201 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985403C4);
                }
                if ((v201 & 0x80000000) != 0)
                  v202 = COERCE__INT64((double)v201) + 0x2000000000000;
                else
                  v202 = v201 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v202, v103, v104, v105, v106, v107, v108);
              }
              ++v199;
              v200 -= 4;
            }
            while (v200);
          }
        }
        else
        {
          v112 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v112 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x19854039CLL);
            }
            if ((v112 & 0x80000000) != 0)
              v113 = COERCE__INT64((double)v112) + 0x2000000000000;
            else
              v113 = v112 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v113, v103, v104, v105, v106, v107, v108);
            ++v112;
          }
          while (v102 != v112);
        }
      }
      return;
    case 0x107:
      v546 = 16407;
      v403 = *((unsigned int *)a2 + 8);
      if (!*((_DWORD *)a2 + 8))
        goto LABEL_171;
      v404 = *((_QWORD *)a2 + 3);
      v405 = *((_DWORD *)this + 41);
      v168 = v405 >= v404;
      LODWORD(v406) = v405 - v404;
      if (v168)
        v406 = v406;
      else
        v406 = 0;
      while (1)
      {
        if (!v406)
        {
          __break(0xC471u);
          JUMPOUT(0x198540414);
        }
        if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v404) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          break;
        LODWORD(v404) = v404 + 1;
        --v406;
        if (!--v403)
          goto LABEL_171;
      }
      v86 = 16386;
      goto LABEL_170;
    case 0x10A:
      v546 = 16407;
      **a4 = 1;
      v212 = *((unsigned int *)a2 + 20);
      if ((v212 & 0x80000000) != 0)
        v213 = COERCE__INT64((double)v212) + 0x2000000000000;
      else
        v213 = v212 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v213, v206, v207, v208, v209, v210, v211);
      return;
    case 0x10B:
      v546 = 16407;
      **a4 = 1;
      v223 = (uint64_t *)*((_QWORD *)a2 + 9);
      v224 = *v223;
      v225 = *(unsigned int *)(*v223 + 8);
      if ((v225 & 0x80000000) != 0)
        v226 = COERCE__INT64((double)v225) + 0x2000000000000;
      else
        v226 = v225 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v226, v217, v218, v219, v220, v221, v222);
      v234 = *((unsigned __int16 *)a2 + 9);
      switch(v234)
      {
        case 267:
          goto LABEL_587;
        case 264:
          LOBYTE(v235) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_587:
          LOBYTE(v235) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v235 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v235 - 4 < 6
        || v235 <= 0x19u && ((1 << v235) & 0x2A00000) != 0)
      {
        v236 = *((unsigned int *)this + 107);
        if (v236 > v225)
        {
          if ((_DWORD)v225)
          {
            v361 = 0;
            v362 = v224 + 16;
            do
            {
              if ((v361 & 0x80000000) != 0)
                v363 = COERCE__INT64((double)v361) + 0x2000000000000;
              else
                v363 = v361 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v363, v228, v229, v230, v231, v232, v233);
              if ((*(_BYTE *)(v224 + 4) & 0xE) == 6)
                v370 = *(_QWORD *)(v362 + 8 * v361) + 0x2000000000000;
              else
                v370 = *(_QWORD *)(v362 + 8 * v361);
              JSC::DFG::Graph::freeze((uint64_t)this, v370, v364, v365, v366, v367, v368, v369);
              ++v361;
            }
            while (v225 != v361);
          }
        }
        else
        {
          v546 = 0;
          v547 = 0;
          if ((_DWORD)v236)
          {
            v237 = 0;
            v238 = 0;
            v239 = (unsigned int *)*((_QWORD *)this + 52);
            v240 = 4 * v236;
            do
            {
              v241 = *v239;
              LODWORD(v536) = v241;
              if (v241 < v225)
              {
                if (v238 == (_DWORD)v547)
                {
                  v242 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v546, v238 + 1, (unint64_t)&v536);
                  v237 = (unsigned int *)v546;
                  *(_DWORD *)(v546 + 4 * HIDWORD(v547)) = *v242;
                }
                else
                {
                  v237[v238] = v241;
                }
                v238 = ++HIDWORD(v547);
              }
              ++v239;
              v240 -= 4;
            }
            while (v240);
            if (v238)
            {
              v284 = v224 + 16;
              v285 = 4 * v238;
              do
              {
                v286 = *v237;
                if ((v286 & 0x80000000) != 0)
                  v287 = COERCE__INT64((double)v286) + 0x2000000000000;
                else
                  v287 = v286 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v287, v228, v229, v230, v231, v232, v233);
                if ((*(_BYTE *)(v224 + 4) & 0xE) == 6)
                  v294 = *(_QWORD *)(v284 + 8 * v286) + 0x2000000000000;
                else
                  v294 = *(_QWORD *)(v284 + 8 * v286);
                JSC::DFG::Graph::freeze((uint64_t)this, v294, v288, v289, v290, v291, v292, v293);
                ++v237;
                v285 -= 4;
              }
              while (v285);
              v237 = (unsigned int *)v546;
            }
            if (v237)
            {
              v546 = 0;
              LODWORD(v547) = 0;
              WTF::fastFree((unint64_t)v237, v227, v228, v229, v230, v231, v232, v233);
            }
          }
        }
      }
      return;
    case 0x10D:
      v382 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v382 == 1)
        goto LABEL_191;
      if (!(_DWORD)v382)
        goto LABEL_169;
      if ((_DWORD)v382 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19853F1E0);
      }
      goto LABEL_191;
    case 0x10F:
      v504 = *((_QWORD *)a2 + 3);
      if ((v504 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v504 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_713;
      goto LABEL_169;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 1) != 0)
        goto LABEL_409;
      goto LABEL_169;
    case 0x115:
      v245 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v245 == 352)
        goto LABEL_562;
      if (v245 != 349)
        goto LABEL_169;
      v246 = 16386;
LABEL_610:
      v546 = v246;
      v75 = (uint64_t)a4;
      v76 = 16407;
      goto LABEL_611;
    case 0x123:
      v546 = 16395;
      v53 = &v560;
      goto LABEL_586;
    case 0x13E:
    case 0x145:
      v137 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v137 > 0x34)
        goto LABEL_722;
      if (((1 << v137) & 0x12026001400002) == 0)
      {
        if (((1 << v137) & 0x101) == 0)
        {
LABEL_722:
          __break(0xC471u);
          JUMPOUT(0x19854005CLL);
        }
        v546 = 16385;
        **a4 = 1;
      }
      return;
    case 0x13F:
      v186 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v187 = 0x54000000000000;
      goto LABEL_318;
    case 0x144:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
LABEL_713:
      v246 = 16407;
      goto LABEL_610;
    case 0x146:
      v491 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v491 == 28)
        return;
      if ((_DWORD)v491)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19853FECCLL);
      }
      goto LABEL_169;
    case 0x157:
      v58 = *((unsigned int *)a2 + 18);
      v59 = 33;
      goto LABEL_111;
    case 0x158:
      v114 = 33;
      break;
    case 0x159:
      v93 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v93 & 1) == 0)
        goto LABEL_210;
      goto LABEL_188;
    case 0x15A:
      v246 = 16385;
      goto LABEL_610;
    case 0x15B:
    case 0x161:
    case 0x162:
      goto LABEL_409;
    case 0x15C:
    case 0x163:
      if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) == 4)
        goto LABEL_191;
LABEL_409:
      v185 = 16386;
LABEL_314:
      v546 = v185;
      goto LABEL_191;
    case 0x164:
      v58 = *((unsigned int *)a2 + 18);
      v59 = 20;
LABEL_111:
      v54 = v59 | (v58 << 15);
      goto LABEL_296;
    case 0x165:
      JSC::DFG::LazyNode::LazyNode(&v548, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v93 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v93 & 1) != 0)
LABEL_188:
        v94 = (v93 >> 1) & 3;
      else
LABEL_210:
        v94 = *(unsigned __int8 *)(v93 + 4);
      if (v94 != 2)
        **a4 = 1;
      goto LABEL_191;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      v546 = 16418;
      v75 = (uint64_t)a4;
      v76 = 16418;
      goto LABEL_611;
    case 0x17E:
      v490 = 16392;
      goto LABEL_699;
    case 0x17F:
      v490 = 16387;
LABEL_699:
      v546 = v490;
      v75 = (uint64_t)a4;
      v76 = 16392;
      goto LABEL_611;
    case 0x180:
    case 0x182:
      if (v13 != 386)
        goto LABEL_272;
      v194 = *((unsigned __int8 *)a2 + 80);
      if (v194 != 2)
      {
        if (v194 != 1)
          goto LABEL_169;
LABEL_272:
        v546 = 16396;
        v154 = *((unsigned __int16 *)a2 + 9);
        if (v154 == 146)
          v155 = *((_DWORD *)a2 + 20);
        else
          v155 = *((_DWORD *)a2 + 18);
        if (v154 == 386)
          v156 = 11;
        else
          v156 = 12;
        if (v155 != 9)
        {
          switch((char)v155)
          {
            case 3:
              return;
            case 7:
              if (BYTE2(v155) > 1u)
                goto LABEL_169;
              v546 = 16388;
              v546 = 16400;
              v484 = *((_QWORD *)a2 + 3);
              v485 = *((_DWORD *)this + 41);
              if (v485 <= v484)
              {
                __break(0xC471u);
                JUMPOUT(0x198540624);
              }
              if (v485 <= (int)v484 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19854062CLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v568, v156, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v53 = &v567;
              goto LABEL_586;
            case 8:
              if (BYTE2(v155) > 1u)
                goto LABEL_169;
              v546 = 16388;
              v546 = 16401;
              v359 = *((_DWORD *)a2 + 6);
              v360 = *((_DWORD *)this + 41);
              if (v360 <= v359)
              {
                __break(0xC471u);
                JUMPOUT(0x19854047CLL);
              }
              if (v360 <= v359 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19853EEC4);
              }
              return;
            case 10:
              if (BYTE2(v155) > 1u)
                goto LABEL_169;
LABEL_572:
              v546 = 16389;
              v54 = 16403;
              goto LABEL_296;
            default:
              goto LABEL_169;
          }
        }
        if (BYTE2(v155) <= 1u)
        {
          v546 = 16388;
          v546 = 16402;
          v163 = *((_DWORD *)a2 + 6);
          v164 = *((_DWORD *)this + 41);
          if (v164 <= v163)
          {
            __break(0xC471u);
            JUMPOUT(0x1985403BCLL);
          }
          if (v164 <= v163 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19853E490);
          }
          return;
        }
        goto LABEL_169;
      }
      if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1985403CCLL);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) != 0x20000000000000)
        goto LABEL_169;
      v546 = 16396;
      v169 = 16399;
LABEL_294:
      v546 = v169;
LABEL_295:
      v54 = 16394;
LABEL_296:
      v546 = v54;
      return;
    case 0x18A:
    case 0x18F:
      v198 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000;
      v54 = 16411;
      goto LABEL_338;
    case 0x18B:
      v54 = 16411;
      goto LABEL_296;
    case 0x18C:
      v86 = 16413;
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x80000000000000)
        v86 = 16414;
      goto LABEL_170;
    case 0x18D:
    case 0x18E:
      v198 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000;
      v54 = 16413;
      goto LABEL_338;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v425 = 16412;
      else
        v425 = 16411;
      v546 = v425;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v545, 48, v425, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v53 = &v544;
      goto LABEL_586;
    case 0x191:
      v427 = 16411;
      if (*((_DWORD *)a2 + 18))
        v427 = 16412;
      v546 = v427;
      v53 = &v543;
      goto LABEL_586;
    case 0x192:
      v426 = 16411;
      if (*((_DWORD *)a2 + 18))
        v426 = 16412;
      v546 = v426;
      v53 = &v542;
      goto LABEL_586;
    case 0x193:
      v428 = 16411;
      if (*((_DWORD *)a2 + 18))
        v428 = 16412;
      v546 = v428;
      v53 = &v541;
      goto LABEL_586;
    case 0x195:
      v255 = *((_DWORD *)a2 + 6);
      v256 = *((_DWORD *)this + 41);
      if (v256 <= v255)
      {
        __break(0xC471u);
        JUMPOUT(0x1985403F4);
      }
      if (v256 <= v255 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19853EB10);
      }
      goto LABEL_171;
    case 0x197:
      v198 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000;
      v54 = 16415;
LABEL_338:
      if (!v198)
        ++v54;
      goto LABEL_296;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
        v546 = 16385;
      }
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v540, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      JSC::DFG::LazyNode::LazyNode(&v539, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x199:
      v371 = *((_DWORD *)a2 + 6);
      v372 = *((_DWORD *)this + 41);
      if (v372 <= v371)
      {
        __break(0xC471u);
        JUMPOUT(0x1985403FCLL);
      }
      if (v372 <= v371 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198540404);
      }
      if (v372 <= v371 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19854040CLL);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v371 + 1)) & 0xFC000000000000) != 0x2C000000000000)
      {
        v546 = 16385;
      }
      goto LABEL_171;
    case 0x19E:
      goto LABEL_475;
    case 0x1A0:
      v128 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v128)
        goto LABEL_169;
      v129 = *(unsigned int *)(v128 + 20);
      v130 = *(unsigned int *)(v128 + 24);
      v131 = (unsigned __int16)*(_DWORD *)(v128 + 20);
      v132 = (unsigned __int16)v130;
      v133 = WORD1(v130);
      if (v131 != WORD1(v129))
      {
LABEL_242:
        if (v131)
          v134 = 0;
        else
          v134 = WORD1(v129) == 0xFFFF;
        if (v134)
          v135 = 16385;
        else
          v135 = (v129 << 15) | 0x25;
        v546 = v135;
      }
LABEL_248:
      if (v132 == v133)
        return;
      if (v132)
        v136 = 0;
      else
        v136 = v133 == 0xFFFF;
      if (v136)
        goto LABEL_171;
      v76 = (v130 << 15) | 0x25;
LABEL_254:
      v75 = (uint64_t)a4;
      goto LABEL_611;
    case 0x1A1:
      v376 = *((_QWORD *)a2 + 9);
      v129 = *(unsigned int *)(v376 + 44);
      v130 = *(unsigned int *)(v376 + 48);
      v131 = (unsigned __int16)*(_DWORD *)(v376 + 44);
      v132 = (unsigned __int16)v130;
      v133 = WORD1(v130);
      if (v131 == WORD1(v129))
        goto LABEL_248;
      goto LABEL_242;
    case 0x1AB:
    case 0x1AC:
      v546 = 16423;
      v546 = 16406;
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_648;
      v450 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v538, v450, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v53 = &v537;
      goto LABEL_586;
    case 0x1AD:
      v546 = 16423;
      v546 = 16406;
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_648:
LABEL_630:
      v75 = (uint64_t)a4;
      v76 = 16406;
      goto LABEL_611;
    case 0x1AE:
    case 0x1AF:
      v54 = 16410;
      goto LABEL_296;
    case 0x1B0:
      v75 = (uint64_t)a4;
      v76 = 16410;
      goto LABEL_611;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x19853FD58);
    default:
      v546 = (unint64_t)JSC::DFG::Graph::opName(v13);
      v547 = v508;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v546, &v536);
      if (v536)
        v509 = (const char *)(v536 + 16);
      else
        v509 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v509);
      WTF::CString::~CString((WTF::CString *)&v536, v510, v511, v512, v513, v514, v515, v516);
      __break(0xC471u);
      JUMPOUT(0x198540168);
  }
  while (1)
  {
    v115 = v114 & 0x3FFF;
    if (v115 == 1)
    {
      LOWORD(v125) = 33;
      do
      {
        v126 = v125 & 0x3FFF;
        if (v126 == 1)
          goto LABEL_381;
        if (v126 == 2)
          v127 = 16385;
        else
          v127 = 16387;
        if ((v125 & 0x4000) != 0)
          v125 = v127;
        else
          v125 = v126 | 0x4000u;
        if (v126 == 40)
          v125 = 16385;
        if (v126 == 3)
          v125 = 16385;
      }
      while (v125 != 16386);
LABEL_165:
      v84 = 1;
      goto LABEL_382;
    }
    if (v115 == 3)
      goto LABEL_217;
    v116 = 16385;
    if (v115 != 40)
      break;
LABEL_218:
    v114 = v116;
    if (v116 == 16387)
      goto LABEL_165;
  }
  if ((v114 & 0x4000) == 0)
  {
    v116 = v115 | 0x4000u;
    goto LABEL_218;
  }
  if (v115 != 2)
    goto LABEL_165;
LABEL_217:
  v116 = 16385;
  goto LABEL_218;
}

uint64_t *JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1}::operator()(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;

  v9 = result;
  if (*a2 == 16386)
  {
LABEL_15:
    v13 = *result;
    if (*result)
    {
      v17 = *(_DWORD *)(v13 - 4);
      if (v17)
      {
        v18 = 0;
        v19 = v17 - 1;
        do
        {
          v20 = v19;
          v21 = (_QWORD *)(v13 + 16 * v19);
          if (*v21)
          {
            if ((*v21 & 0x7FFFLL) != 0x4000)
            {
              result = (uint64_t *)JSC::DFG::AbstractHeap::overlaps((uint64_t *)(v13 + 16 * v19), a2);
              if ((_DWORD)result)
              {
                *(_DWORD *)(*(_QWORD *)(v13 + 16 * v19 + 8) + 88) = 0;
                *v21 = 0x4000;
                ++v18;
              }
            }
          }
          --v19;
        }
        while (v20);
        v22 = *v9;
        if (v18)
        {
          *(_DWORD *)(v22 - 16) += v18;
          v26 = *v9;
          if (*v9)
            v27 = *(_DWORD *)(v26 - 12);
          else
            v27 = 0;
          *(_DWORD *)(v26 - 12) = v27 - v18;
          v22 = *v9;
        }
        if (v22)
        {
          v23 = *(_DWORD *)(v22 - 4);
          v24 = 6 * *(_DWORD *)(v22 - 12);
          if (v23 >= 9 && v24 < v23)
            return (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::shrinkToBestSize(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    v10 = *a2;
    while (1)
    {
      v11 = v10 & 0x3FFF;
      if (v11 == 1)
        break;
      if (v11 == 2)
        v12 = 16385;
      else
        v12 = 16387;
      if ((v10 & 0x4000) != 0)
        v10 = v12;
      else
        v10 = v11 | 0x4000u;
      if (v11 == 40)
        v10 = 16385;
      if (v11 == 3)
        v10 = 16385;
      if (v10 == 16386)
        goto LABEL_15;
    }
    LOWORD(v14) = 16386;
    while (1)
    {
      v15 = v14 & 0x3FFF;
      if (v15 == 1)
        break;
      if (v15 == 2)
        v16 = 16385;
      else
        v16 = 16387;
      if (v15 == 3)
        v14 = 16385;
      else
        v14 = v16;
      if (v14 == *a2)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)0>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2}::operator()(uint64_t result, uint64_t a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  if (a2 == 16387)
  {
    **(_BYTE **)result = 1;
    return result;
  }
  v2 = a2;
  while (1)
  {
    v3 = v2 & 0x3FFF;
    if (v3 == 1)
      break;
    if (v3 == 3)
      goto LABEL_8;
    v4 = 16385;
    if (v3 != 40)
    {
      if ((v2 & 0x4000) == 0)
      {
        v4 = v3 | 0x4000u;
        goto LABEL_9;
      }
      if (v3 != 2)
        goto LABEL_36;
LABEL_8:
      v4 = 16385;
    }
LABEL_9:
    v2 = v4;
    if (v4 == 16387)
      goto LABEL_36;
  }
  LOWORD(v5) = 16387;
  while (1)
  {
    v6 = v5 & 0x3FFF;
    if (v6 == 1)
      break;
    if (v6 == 2)
      v7 = 16385;
    else
      v7 = 16387;
    if (v6 == 3)
      v5 = 16385;
    else
      v5 = v7;
    if (v5 == a2)
      goto LABEL_36;
  }
  if (a2 == 16386)
  {
LABEL_36:
    v11 = 1;
    goto LABEL_48;
  }
  LOWORD(v8) = a2;
  while (1)
  {
    v9 = v8 & 0x3FFF;
    if (v9 == 1)
      break;
    if (v9 == 2)
      v10 = 16385;
    else
      v10 = 16387;
    if ((v8 & 0x4000) != 0)
      v8 = v10;
    else
      v8 = v9 | 0x4000u;
    if (v9 == 40)
      v8 = 16385;
    if (v9 == 3)
      v8 = 16385;
    if (v8 == 16386)
      goto LABEL_36;
  }
  LOWORD(v12) = 16386;
  while (1)
  {
    v13 = v12 & 0x3FFF;
    if (v13 == 1)
      break;
    if (v13 == 2)
      v14 = 16385;
    else
      v14 = 16387;
    if (v13 == 3)
      v12 = 16385;
    else
      v12 = v14;
    if (v12 == a2)
      goto LABEL_36;
  }
  v11 = 0;
LABEL_48:
  **(_BYTE **)result |= v11;
  if ((a2 & 0x7FFF) == 2)
  {
    v15 = *(_QWORD **)(result + 16);
    ++**(_DWORD **)(result + 8);
    *v15 = a2;
  }
  return result;
}

_OWORD *WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::shrinkToBestSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  if (*a1)
    v8 = *(_DWORD *)(*a1 - 12);
  else
    v8 = 0;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * (unint64_t)v8)
      goto LABEL_9;
  }
  else if (3 * v11 > 4 * (unint64_t)v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_9:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_10:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  return WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(a1, v15, 0, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (_QWORD *)(v11 + 16 * v24);
      if (*v25 && (*v25 & 0x7FFFLL) != 0x4000)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (*v25 + ~(*v25 << 32)) ^ ((*v25 + ~(*v25 << 32)) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_17;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_17:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_OWORD *WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::AbstractHeap const&,JSC::DFG::Node *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *a3 + ~(*a3 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        *(_QWORD *)v11 = v20;
        *((_QWORD *)v11 + 1) = v12 + 16 * v32;
        *((_BYTE *)v11 + 16) = 0;
        v20[1] = *a4;
        return result;
      }
      if ((v21 & 0x7FFF) == 0x4000)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v30;
    }
  }
  v22 = *a4;
  *v20 = v15;
  v20[1] = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_11;
    goto LABEL_15;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(a2, v29, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
      v20 = result;
      v25 = *a2;
      if (*a2)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_11;
    }
LABEL_15:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_28;
  }
LABEL_11:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v25 + 16 * v28;
  *((_BYTE *)v11 + 16) = 1;
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  JSC::DFG::AbstractValue *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  int v122;
  uint64_t v123;
  unsigned int *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int i;
  uint64_t v162;
  unsigned int v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[3];
  uint64_t v199;
  int v200;
  char v201;
  uint64_t *v202;
  _QWORD *v203;
  __int128 v204;
  unint64_t v205;

  *(_DWORD *)(a1 + 224) = 1;
  if (!*(_BYTE *)(a2 + 15))
    return 0;
  JSC::DFG::InPlaceAbstractState::beginBasicBlock(*(JSC::DFG::InPlaceAbstractState **)(a1 + 240), (JSC::DFG::BasicBlock *)a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(a2 + 200);
  v18 = *(unsigned int *)(v17 + 76);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD **)(v17 + 64);
    v20 = &v19[v18];
    while ((*v19 & 1) != 0)
    {
LABEL_14:
      if (++v19 == v20)
        goto LABEL_17;
    }
    v21 = *(_QWORD *)(a1 + 256);
    v22 = *(unsigned int *)(a2 + 8);
    if (*(_DWORD *)(v21 + 12) <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198542598);
    }
    v23 = *v19 & 0xFFFFFFFFFFFFFFFELL;
    v24 = *(_QWORD *)(*(_QWORD *)v21 + 8 * v22);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = (v23 + ~(v23 << 32)) ^ ((v23 + ~(v23 << 32)) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(_QWORD *)(v24 + 8 * v29);
      if (v30 == v23)
      {
        v32 = 0;
        goto LABEL_13;
      }
      v31 = 1;
      while (v30)
      {
        v32 = 0;
        v29 = (v29 + v31) & v25;
        v30 = *(_QWORD *)(v24 + 8 * v29);
        ++v31;
        if (v30 == v23)
          goto LABEL_13;
      }
    }
    v32 = *(_DWORD *)(a1 + 224);
LABEL_13:
    *(_DWORD *)(v23 + 88) = v32;
    goto LABEL_14;
  }
LABEL_17:
  v203 = 0;
  *(_DWORD *)(a1 + 228) = 0;
  if (!*(_DWORD *)(a2 + 220))
  {
    v82 = 1;
    goto LABEL_95;
  }
  v33 = 0;
  v34 = a1 + 232;
  do
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v33);
    *(_QWORD *)(a1 + 232) = v35;
    v36 = *(_QWORD *)(a1 + 248);
    *(_BYTE *)(*(_QWORD *)(v36 + 24) + 81) = 0;
    if ((*(_BYTE *)(v35 + 56) & 0x10) != 0)
    {
      if (*(_DWORD *)(v35 + 32) + *(_QWORD *)(v35 + 24) > *(_QWORD *)(v35 + 24))
      {
        v54 = *(_QWORD *)(v36 + 8);
        v55 = *(_QWORD *)(v35 + 24);
        do
        {
          if (v55 >= *(unsigned int *)(v54 + 164))
          {
            __break(0xC471u);
            JUMPOUT(0x198542628);
          }
          v56 = *(_QWORD *)(v54 + 152);
          v57 = *(_QWORD *)(v56 + 8 * v55);
          v58 = (v57 >> 50) & 0x3F;
          if ((v57 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v58 != 0)
          {
            v11 = 0x300000000;
            switch((int)v58)
            {
              case 1:
              case 2:
                break;
              case 3:
                v11 = 0x1300000000;
                break;
              case 4:
                v11 = 0x7300000000;
                break;
              case 5:
                v11 = 0x3300000000;
                break;
              case 6:
              case 7:
                v11 = 0x10000000000;
                break;
              case 8:
              case 9:
                v11 = 0x2C00FFFFFFF7;
                break;
              case 10:
                v11 = 0x2E00FFFFFFF7;
                break;
              case 11:
                v11 = 0x20000FFFFFF7;
                break;
              case 12:
                v11 = 2;
                break;
              case 13:
                v11 = 4;
                break;
              case 14:
                v11 = 1;
                break;
              case 15:
                v11 = 0x100000;
                break;
              case 16:
                v11 = 0x40000;
                break;
              case 17:
                v11 = 0x2000000;
                break;
              case 18:
                v11 = 0x4000000;
                break;
              case 19:
                v11 = 0x22000FFFFFF7;
                break;
              case 20:
                v11 = 0x10000000;
                break;
              case 21:
              case 23:
                v11 = 805306368;
                break;
              case 22:
                v11 = 0x20030000000;
                break;
              case 24:
                v11 = 0x1B73F0000000;
                break;
              case 25:
                v11 = 0x40000000;
                break;
              case 26:
              case 27:
                v11 = 0x80000000000;
                break;
              case 28:
                v11 = 0x100000000000;
                break;
              case 29:
                v11 = 0x80000;
                break;
              case 30:
                v11 = 0x200000;
                break;
              case 31:
                v11 = 0x400000;
                break;
              case 32:
              case 33:
                v11 = 0x8000000;
                break;
              case 34:
                v11 = 0x800000;
                break;
              case 35:
                v11 = 0x1000000;
                break;
              case 36:
                v11 = 0x200000000000;
                break;
              case 37:
                v11 = 0x20000;
                break;
              case 38:
                v11 = 805437440;
                break;
              case 39:
                v11 = -536870913;
                break;
              case 40:
                v11 = -1073741825;
                break;
              case 41:
              case 42:
                v11 = 0xFFFFD3FF00000008;
                break;
              case 43:
                v11 = 0xFFFFFF0FFFFFFFFFLL;
                break;
              case 44:
                v11 = 0xFFFFF70FFFFFFFFFLL;
                break;
              case 45:
                v11 = 0xFFFFF70FCFFFFFFFLL;
                break;
              case 46:
              case 47:
                v11 = 0x20000000000;
                break;
              case 48:
                v11 = 0x30000000000;
                break;
              case 49:
                v11 = 0xF000000000;
                break;
              case 50:
                v11 = 0x3000000000;
                break;
              case 51:
                v11 = 0x1000000000;
                break;
              case 52:
                v11 = 0xC00000000;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x1985425C0);
            }
            v60 = *(_QWORD *)(v36 + 24);
            v61 = *(_QWORD *)(v60 + 8);
            v62 = *(unsigned int *)((v57 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v63 = (uint64_t *)(v61 + 24);
            v64 = (uint64_t *)(v61 + 8);
            if ((v57 & 1) != 0)
              v64 = v63;
            v65 = *v64;
            v66 = (JSC::DFG::AbstractValue *)(*v64 + 32 * v62);
            v67 = *((_QWORD *)v66 + 1);
            if ((v67 & ~v11) != 0)
            {
              *(_QWORD *)(v56 + 8 * v55) = v57 & 0xFFFEFFFFFFFFFFFFLL;
              v142 = *(unsigned int *)(v60 + 88);
              if ((v67 & 0x2800FFFFFFF7) != 0)
              {
                JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v66, (void *)v142, v11, v12, v13, v14, v15, v16);
              }
              else
              {
                *(_DWORD *)(v65 + 32 * v62 + 20) = v142;
                *((_QWORD *)v66 + 1) = v67 & v11;
                if ((v67 & v11) == 0)
                  JSC::DFG::AbstractValue::clear(v66, v142, v11, v12, v13, v14, v15, v16);
              }
            }
            else
            {
              *(_QWORD *)(v56 + 8 * v55) = v57 | 0x1000000000000;
            }
          }
          ++v55;
        }
        while (v55 < (*(_DWORD *)(v35 + 32) + *(_DWORD *)(v35 + 24)));
      }
    }
    else
    {
      v37 = 0;
      v38 = v35 + 24;
      do
      {
        v39 = *(_QWORD *)(v38 + v37);
        if ((v39 & 0xFF00FFFFFFFFFFFFLL) == 0)
          break;
        v40 = (v39 >> 50) & 0x3F;
        if ((_DWORD)v40)
        {
          v11 = 0x300000000;
          switch((int)v40)
          {
            case 1:
            case 2:
              break;
            case 3:
              v11 = 0x1300000000;
              break;
            case 4:
              v11 = 0x7300000000;
              break;
            case 5:
              v11 = 0x3300000000;
              break;
            case 6:
            case 7:
              v11 = 0x10000000000;
              break;
            case 8:
            case 9:
              v11 = 0x2C00FFFFFFF7;
              break;
            case 10:
              v11 = 0x2E00FFFFFFF7;
              break;
            case 11:
              v11 = 0x20000FFFFFF7;
              break;
            case 12:
              v11 = 2;
              break;
            case 13:
              v11 = 4;
              break;
            case 14:
              v11 = 1;
              break;
            case 15:
              v11 = 0x100000;
              break;
            case 16:
              v11 = 0x40000;
              break;
            case 17:
              v11 = 0x2000000;
              break;
            case 18:
              v11 = 0x4000000;
              break;
            case 19:
              v11 = 0x22000FFFFFF7;
              break;
            case 20:
              v11 = 0x10000000;
              break;
            case 21:
            case 23:
              v11 = 805306368;
              break;
            case 22:
              v11 = 0x20030000000;
              break;
            case 24:
              v11 = 0x1B73F0000000;
              break;
            case 25:
              v11 = 0x40000000;
              break;
            case 26:
            case 27:
              v11 = 0x80000000000;
              break;
            case 28:
              v11 = 0x100000000000;
              break;
            case 29:
              v11 = 0x80000;
              break;
            case 30:
              v11 = 0x200000;
              break;
            case 31:
              v11 = 0x400000;
              break;
            case 32:
            case 33:
              v11 = 0x8000000;
              break;
            case 34:
              v11 = 0x800000;
              break;
            case 35:
              v11 = 0x1000000;
              break;
            case 36:
              v11 = 0x200000000000;
              break;
            case 37:
              v11 = 0x20000;
              break;
            case 38:
              v11 = 805437440;
              break;
            case 39:
              v11 = -536870913;
              break;
            case 40:
              v11 = -1073741825;
              break;
            case 41:
            case 42:
              v11 = 0xFFFFD3FF00000008;
              break;
            case 43:
              v11 = 0xFFFFFF0FFFFFFFFFLL;
              break;
            case 44:
              v11 = 0xFFFFF70FFFFFFFFFLL;
              break;
            case 45:
              v11 = 0xFFFFF70FCFFFFFFFLL;
              break;
            case 46:
            case 47:
              v11 = 0x20000000000;
              break;
            case 48:
              v11 = 0x30000000000;
              break;
            case 49:
              v11 = 0xF000000000;
              break;
            case 50:
              v11 = 0x3000000000;
              break;
            case 51:
              v11 = 0x1000000000;
              break;
            case 52:
              v11 = 0xC00000000;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198542580);
          }
          v41 = *(_QWORD *)(v36 + 24);
          v42 = *(_QWORD *)(v41 + 8);
          v43 = *(unsigned int *)((v39 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v44 = (uint64_t *)(v42 + 24);
          v45 = (uint64_t *)(v42 + 8);
          if ((v39 & 1) != 0)
            v45 = v44;
          v46 = *v45;
          v47 = (_QWORD *)(*v45 + 32 * v43);
          v48 = v47 + 1;
          v49 = v47[1];
          if ((v49 & ~v11) != 0)
          {
            *(_QWORD *)(v38 + v37) = v39 & 0xFFFEFFFFFFFFFFFFLL;
            v53 = (void *)*(unsigned int *)(v41 + 88);
            if ((v49 & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v47, v53, v11, v12, v13, v14, v15, v16);
            }
            else
            {
              v154 = v46 + 32 * v43;
              *(_DWORD *)(v154 + 20) = (_DWORD)v53;
              *v48 = v49 & v11;
              if ((v49 & v11) == 0)
              {
                *v48 = 0;
                *(_DWORD *)(v154 + 16) = 0;
                if ((*v47 & 1) != 0)
                  WTF::fastFree(*v47 & 0xFFFFFFFFFFFFFFFCLL, v53, v11, v12, v13, v14, v15, v16);
                *v47 = 0;
                *(_QWORD *)(v46 + 32 * v43 + 24) = 0;
              }
            }
          }
          else
          {
            *(_QWORD *)(v38 + v37) = v39 | 0x1000000000000;
          }
        }
        v37 += 8;
      }
      while (v37 != 24);
    }
    v68 = *(_QWORD *)v34;
    switch(*(_WORD *)(*(_QWORD *)v34 + 18))
    {
      case 0x65:
      case 0x66:
      case 0x67:
        v110 = *(unsigned __int8 *)(v68 + 72);
        if (v110 <= 0x18)
        {
          v111 = 1 << v110;
          if ((v111 & 0xE00) != 0)
          {
            v112 = *(_QWORD *)(a1 + 32);
            v113 = *(_QWORD *)(v68 + 24);
            v114 = *(_DWORD *)(v112 + 164);
            if (v114 <= v113)
            {
              __break(0xC471u);
              JUMPOUT(0x198542630);
            }
            if (v114 <= (int)v113 + 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198542638);
            }
            v115 = *(_QWORD *)(v112 + 152);
            v87 = *(_QWORD *)(v115 + 8 * v113);
            v116 = *(_QWORD *)(v115 + 8 * (v113 + 2));
            v117 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
            v118 = *(_QWORD *)(v117 + 8);
            v91 = *(unsigned int *)((v116 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v119 = (uint64_t *)(v118 + 24);
            v120 = (uint64_t *)(v118 + 8);
            if ((v116 & 1) != 0)
              v121 = v119;
            else
              v121 = v120;
            v95 = *v121;
            v96 = *v121 + 32 * v91;
            v97 = *(_DWORD *)(v117 + 88);
            v99 = (unsigned int *)(v96 + 20);
            v122 = *(_DWORD *)(v96 + 20);
            if (v97 == v122)
              goto LABEL_87;
            if ((*(_QWORD *)(v96 + 8) & 0x2800FFFFFFF7) == 0)
              goto LABEL_165;
            if ((v122 ^ v97) < 2)
              goto LABEL_184;
            v123 = *(_QWORD *)v96;
            if (*(_QWORD *)v96 == 4)
              goto LABEL_183;
            *(_QWORD *)v96 = v123 | 2;
            v124 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v123 & 1) == 0)
              goto LABEL_220;
            v125 = v87;
            v126 = 2 * *v124;
            do
            {
              v87 = v125;
              if (!(v126 * 4))
                goto LABEL_183;
              v127 = *(_QWORD *)&v124[v126];
              if ((*(_BYTE *)(v127 + 19) & 0xC) != 0)
                break;
              v128 = *(_QWORD *)(v127 + 96);
              v129 = (v128 & 1) != 0 ? (v128 >> 1) & 3 : *(unsigned __int8 *)(v128 + 4);
              v126 -= 2;
            }
            while (v129 != 2);
            goto LABEL_287;
          }
          if ((v111 & 0x1803030) != 0)
          {
            v144 = *(_QWORD *)(a1 + 32);
            if (*(_DWORD *)(v144 + 164) <= *(_QWORD *)(v68 + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x198542640);
            }
            v87 = *(_QWORD *)(*(_QWORD *)(v144 + 152) + 8 * *(_QWORD *)(v68 + 24));
            v145 = *(_QWORD *)(v144 + 1024);
            if (!v145)
              goto LABEL_315;
            v146 = *(_DWORD *)(v145 - 8);
            v147 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
            v148 = 9 * ((v147 + ~(v147 << 13)) ^ ((v147 + ~(v147 << 13)) >> 8));
            v149 = (v148 ^ (v148 >> 15)) + ~((v148 ^ (v148 >> 15)) << 27);
            v150 = v146 & ((v149 >> 31) ^ v149);
            v151 = *(_QWORD *)(v145 + 8 * v150);
            if (v151 != v68)
            {
              v152 = 1;
              do
              {
                if (!v151)
                  goto LABEL_315;
                v150 = (v150 + v152) & v146;
                v151 = *(_QWORD *)(v145 + 8 * v150);
                ++v152;
              }
              while (v151 != v68);
            }
          }
        }
        goto LABEL_56;
      case 0x68:
        goto LABEL_230;
      case 0x69:
        if (WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains((uint64_t *)(*(_QWORD *)(a1 + 32) + 1024), (_QWORD *)(a1 + 232)))
        {
          goto LABEL_56;
        }
        v87 = *(_QWORD *)(*(_QWORD *)v34 + 24);
LABEL_315:
        if ((v87 & 0xF8000000000000) != 0x20000000000000)
          goto LABEL_56;
        goto LABEL_88;
      case 0x6A:
      case 0x6C:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x79:
      case 0x87:
      case 0x8B:
      case 0x9C:
      case 0x9D:
      case 0xDC:
        v87 = *(_QWORD *)(v68 + 24);
        goto LABEL_88;
      case 0x6B:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x78:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAD:
      case 0xAE:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x156:
      case 0x157:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x164:
        goto LABEL_56;
      case 0x82:
      case 0x83:
        v87 = *(_QWORD *)(v68 + 24);
        v192 = (v87 >> 50) & 0x3F;
        if ((v192 - 8) < 2)
          goto LABEL_88;
        v193 = v192 > 0x26;
        v194 = (1 << v192) & 0x7FEAB7F800;
        if (!v193 && v194 != 0)
          goto LABEL_88;
        goto LABEL_56;
      case 0x9B:
        v87 = *(_QWORD *)(v68 + 32);
        v88 = *(_QWORD *)(v68 + 40);
        v89 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
        v90 = *(_QWORD *)(v89 + 8);
        v91 = *(unsigned int *)((v88 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v92 = (uint64_t *)(v90 + 24);
        v93 = (uint64_t *)(v90 + 8);
        if ((v88 & 1) != 0)
          v94 = v92;
        else
          v94 = v93;
        v95 = *v94;
        v96 = *v94 + 32 * v91;
        v97 = *(_DWORD *)(v89 + 88);
        v99 = (unsigned int *)(v96 + 20);
        v98 = *(_DWORD *)(v96 + 20);
        if (v97 == v98)
          goto LABEL_87;
        if ((*(_QWORD *)(v96 + 8) & 0x2800FFFFFFF7) == 0)
          goto LABEL_165;
        if ((v98 ^ v97) < 2)
          goto LABEL_184;
        v153 = *(_QWORD *)v96;
        if (*(_QWORD *)v96 == 4)
          goto LABEL_183;
        *(_QWORD *)v96 = v153 | 2;
        v124 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v153 & 1) == 0)
          goto LABEL_220;
        v188 = 2 * *v124;
        break;
      case 0xAC:
      case 0xB4:
      case 0x158:
      case 0x165:
        v87 = *(_QWORD *)(v68 + 24);
        v130 = *(_QWORD *)(v68 + 32);
        v131 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
        v132 = *(_QWORD *)(v131 + 8);
        v91 = *(unsigned int *)((v130 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v133 = (uint64_t *)(v132 + 24);
        v134 = (uint64_t *)(v132 + 8);
        if ((v130 & 1) != 0)
          v135 = v133;
        else
          v135 = v134;
        v95 = *v135;
        v96 = *v135 + 32 * v91;
        v97 = *(_DWORD *)(v131 + 88);
        v99 = (unsigned int *)(v96 + 20);
        v136 = *(_DWORD *)(v96 + 20);
        if (v97 == v136)
          goto LABEL_87;
        if ((*(_QWORD *)(v96 + 8) & 0x2800FFFFFFF7) == 0)
          goto LABEL_165;
        if ((v136 ^ v97) < 2)
          goto LABEL_184;
        v137 = *(_QWORD *)v96;
        if (*(_QWORD *)v96 == 4)
          goto LABEL_183;
        *(_QWORD *)v96 = v137 | 2;
        v124 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v137 & 1) != 0)
        {
          v125 = v87;
          v138 = 2 * *v124;
          do
          {
            v87 = v125;
            if (!(v138 * 4))
              goto LABEL_183;
            v139 = *(_QWORD *)&v124[v138];
            if ((*(_BYTE *)(v139 + 19) & 0xC) != 0)
              break;
            v140 = *(_QWORD *)(v139 + 96);
            v141 = (v140 & 1) != 0 ? (v140 >> 1) & 3 : *(unsigned __int8 *)(v140 + 4);
            v138 -= 2;
          }
          while (v141 != 2);
          goto LABEL_287;
        }
LABEL_220:
        if (!v124)
          goto LABEL_183;
        if ((*((_BYTE *)v124 + 19) & 0xC) == 0)
        {
          v174 = *((_QWORD *)v124 + 12);
          v175 = (v174 & 1) != 0 ? (v174 >> 1) & 3 : *(unsigned __int8 *)(v174 + 4);
          if (v175 != 2)
            goto LABEL_183;
        }
        goto LABEL_225;
      case 0xAF:
        v179 = *(_QWORD *)(v68 + 24);
        v178 = *(_QWORD *)(v68 + 32);
        v180 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
        v181 = *(_QWORD *)(v180 + 8);
        v182 = *(unsigned int *)((v178 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v183 = (_QWORD *)(v181 + 24);
        v184 = (_QWORD *)(v181 + 8);
        if ((v178 & 1) != 0)
          v185 = v183;
        else
          v185 = v184;
        v186 = *v185 + 32 * v182;
        v187 = (void *)*(unsigned int *)(v180 + 88);
        if ((_DWORD)v187 != *(_DWORD *)(v186 + 20))
        {
          if ((*(_QWORD *)(v186 + 8) & 0x2800FFFFFFF7) != 0)
          {
            v197 = v186;
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v186, v187, v11, v12, v13, v14, v15, v16);
            v186 = v197;
          }
          else
          {
            *(_DWORD *)(v186 + 20) = (_DWORD)v187;
          }
        }
        if ((*(_QWORD *)(v186 + 8) & 0x2800FFFFFFF7) == 0)
          goto LABEL_56;
        v100 = a1;
        v87 = v179;
        goto LABEL_89;
      case 0xB5:
        v176 = *(_QWORD *)(a1 + 32);
        v177 = *(_QWORD *)(v68 + 24);
        if (*(_DWORD *)(v176 + 164) <= v177)
        {
          __break(0xC471u);
          JUMPOUT(0x198542500);
        }
        goto LABEL_231;
      case 0xD4:
        v155 = *(unsigned __int8 *)(v68 + 72);
        if ((v155 - 9) < 3 || v155 == 3)
        {
          v157 = *(_QWORD *)(a1 + 32);
          v158 = (*(_DWORD *)(v68 + 24) + 1);
          if (*(_DWORD *)(v157 + 164) <= v158)
          {
            __break(0xC471u);
            JUMPOUT(0x198542648);
          }
          v159 = *(_DWORD *)(v68 + 32);
          if (v159 != 2)
          {
            v160 = *(_QWORD *)(v157 + 152);
            for (i = 2; i != v159; ++i)
            {
              v162 = *(_QWORD *)(a1 + 32);
              v163 = i + *(_DWORD *)(*(_QWORD *)(a1 + 232) + 24);
              if (*(_DWORD *)(v162 + 164) <= v163)
              {
                __break(0xC471u);
                JUMPOUT(0x198542650);
              }
              v164 = *(_QWORD *)(v160 + 8 * v158);
              v165 = *(_QWORD *)(*(_QWORD *)(v162 + 152) + 8 * v163);
              v166 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
              v167 = *(_QWORD *)(v166 + 8);
              v168 = *(unsigned int *)((v165 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v169 = (_QWORD *)(v167 + 24);
              v170 = (_QWORD *)(v167 + 8);
              if ((v165 & 1) != 0)
                v171 = v169;
              else
                v171 = v170;
              v172 = *v171 + 32 * v168;
              v173 = (void *)*(unsigned int *)(v166 + 88);
              if ((_DWORD)v173 != *(_DWORD *)(v172 + 20))
              {
                if ((*(_QWORD *)(v172 + 8) & 0x2800FFFFFFF7) != 0)
                {
                  v196 = v172;
                  JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v172, v173, v11, v12, v13, v14, v15, v16);
                  v172 = v196;
                }
                else
                {
                  *(_DWORD *)(v172 + 20) = (_DWORD)v173;
                }
              }
              if ((*(_QWORD *)(v172 + 8) & 0x2800FFFFFFF7) != 0)
            }
          }
        }
        goto LABEL_56;
      case 0x155:
        goto LABEL_56;
      default:
        if (*(_WORD *)(*(_QWORD *)v34 + 18) != 391)
          goto LABEL_56;
LABEL_230:
        v176 = *(_QWORD *)(a1 + 32);
        v177 = *(_QWORD *)(v68 + 24);
        if (*(_DWORD *)(v176 + 164) <= v177)
        {
          __break(0xC471u);
          JUMPOUT(0x198542658);
        }
LABEL_231:
        v87 = *(_QWORD *)(*(_QWORD *)(v176 + 152) + 8 * v177);
        goto LABEL_88;
    }
    while (v188 * 4)
    {
      v189 = *(_QWORD *)&v124[v188];
      if ((*(_BYTE *)(v189 + 19) & 0xC) == 0)
      {
        v190 = *(_QWORD *)(v189 + 96);
        v191 = (v190 & 1) != 0 ? (v190 >> 1) & 3 : *(unsigned __int8 *)(v190 + 4);
        v188 -= 2;
        if (v191 != 2)
          continue;
      }
      v125 = v87;
LABEL_287:
      WTF::fastFree((unint64_t)v124, (void *)v87, v11, v12, v13, v14, v15, v16);
      v87 = v125;
LABEL_225:
      *(_QWORD *)v96 = 4;
      break;
    }
LABEL_183:
    *(_DWORD *)(v95 + 32 * v91 + 16) = -21020677;
LABEL_184:
    if ((v97 & 1) != 0)
      *(_QWORD *)v96 &= ~2uLL;
LABEL_165:
    *v99 = v97;
LABEL_87:
    if ((*(_QWORD *)(v96 + 8) & 0x2800FFFFFFF7) != 0)
    {
LABEL_88:
      v100 = a1;
LABEL_89:
    }
LABEL_56:
    if (JSC::DFG::doesGC(*(JSC::DFG **)(a1 + 32), *(JSC::DFG::Graph **)(a1 + 232), (JSC::DFG::Node *)v11, v12, v13, v14, v15, v16))
    {
      ++*(_DWORD *)(a1 + 224);
      v86 = (uint64_t)v203;
      if (v203)
      {
        v203 = 0;
        WTF::fastFree(v86 - 16, v69, v70, v71, v72, v73, v74, v75);
      }
    }
    v76 = *(_QWORD *)v34;
    if (*(_WORD *)(*(_QWORD *)v34 + 18) == 26)
    {
      v77 = 0;
      *(_DWORD *)(*(_QWORD *)(v76 + 72) + 88) = 0;
      v76 = *(_QWORD *)v34;
    }
    else
    {
      v77 = 0;
      switch(*(_WORD *)(*(_QWORD *)v34 + 18))
      {
        case 0x88:
        case 0x89:
        case 0x103:
        case 0x104:
        case 0x105:
        case 0x106:
        case 0x109:
        case 0x10A:
        case 0x10B:
        case 0x10C:
        case 0x10D:
        case 0x10E:
        case 0x10F:
        case 0x110:
        case 0x111:
        case 0x112:
        case 0x119:
        case 0x121:
        case 0x14B:
        case 0x14C:
        case 0x159:
        case 0x15B:
        case 0x161:
        case 0x162:
        case 0x167:
        case 0x168:
        case 0x169:
        case 0x16A:
        case 0x16B:
          v77 = *(_DWORD *)(a1 + 224);
          break;
        default:
          break;
      }
    }
    *(_DWORD *)(v76 + 88) = v77;
    v202 = (uint64_t *)&v203;
    v201 = 0;
    v200 = 0;
    v198[2] = &v199;
    v199 = 0;
    v198[0] = &v201;
    v198[1] = &v200;
    if (v201)
    {
      v83 = *(_QWORD *)v34;
      v84 = *(unsigned __int16 *)(*(_QWORD *)v34 + 18);
      if (v84 <= 0x9A)
      {
        if (v84 == 135)
          goto LABEL_60;
        if (v84 - 16 < 2)
        {
          v205 = *(_QWORD *)(v83 + 24) & 0xFF00FFFFFFFFFFFFLL;
          if (*(_DWORD *)(v205 + 88) == *(_DWORD *)(a1 + 224))
          {
            if ((v199 & 0x7FFF) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1985425F8);
            }
            if (v200 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198542618);
            }
            WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::AbstractHeap const&,JSC::DFG::Node *&>(&v204, (uint64_t *)&v203, &v199, &v205, v78, v79, v80, v81);
          }
          goto LABEL_60;
        }
        if (v84 == 139)
          goto LABEL_120;
      }
      else if (*(unsigned __int16 *)(*(_QWORD *)v34 + 18) > 0x9Cu)
      {
        if (v84 == 172 || v84 == 344)
        {
LABEL_120:
          v101 = *(_QWORD *)(v83 + 32);
          goto LABEL_91;
        }
        if (v84 == 157)
          goto LABEL_60;
      }
      else
      {
        if (v84 == 155)
        {
          v101 = *(_QWORD *)(v83 + 40);
LABEL_91:
          v102 = v101 & 0xFF00FFFFFFFFFFFFLL;
LABEL_92:
          *(_DWORD *)(v102 + 88) = 0;
          goto LABEL_60;
        }
        if (v84 == 156)
          goto LABEL_120;
      }
      v50 = *(_QWORD *)(v83 + 24);
      if ((*(_BYTE *)(v83 + 56) & 0x10) != 0)
      {
        v51 = *(_QWORD *)(v83 + 32);
        if ((int)v51 + (int)v50 > v50)
        {
          v106 = *(_QWORD *)(a1 + 32);
          v52 = *(_QWORD *)(v83 + 24);
          do
          {
            if (v52 >= *(unsigned int *)(v106 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x198542620);
            }
            if ((*(_QWORD *)(*(_QWORD *)(v106 + 152) + 8 * v52) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v106 + 152) + 8 * v52) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
              v50 = *(_QWORD *)(v83 + 24);
              v51 = *(_QWORD *)(v83 + 32);
            }
            ++v52;
          }
          while (v52 < (v50 + v51));
        }
      }
      else
      {
        v85 = v50 & 0xFF00FFFFFFFFFFFFLL;
        if (v85)
        {
          *(_DWORD *)(v85 + 88) = 0;
          if ((*(_QWORD *)(v83 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            *(_DWORD *)((*(_QWORD *)(v83 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
            v102 = *(_QWORD *)(v83 + 40) & 0xFF00FFFFFFFFFFFFLL;
            if (v102)
              goto LABEL_92;
          }
        }
      }
    }
LABEL_60:
    v82 = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(*(_QWORD *)(a1 + 248), *(unsigned int *)(a1 + 228), *(_QWORD *)(a1 + 232));
    if (!(_DWORD)v82)
      break;
    v33 = *(_DWORD *)(a1 + 228) + 1;
    *(_DWORD *)(a1 + 228) = v33;
  }
  while (*(_DWORD *)(a2 + 220) > v33);
  v103 = (uint64_t)v203;
  if (v203)
  {
    if (*((_DWORD *)v203 - 3))
    {
      v107 = *((unsigned int *)v203 - 1);
      if ((_DWORD)v107)
      {
        v108 = 16 * v107;
        v109 = v203;
        while (!*v109 || (*v109 & 0x7FFFLL) == 0x4000)
        {
          v109 += 2;
          v108 -= 16;
          if (!v108)
            goto LABEL_170;
        }
      }
      else
      {
        v109 = v203;
      }
      v143 = &v203[2 * v107];
      if (v143 != v109)
      {
LABEL_307:
        *(_DWORD *)(v109[1] + 88) = 0;
        while (1)
        {
          v109 += 2;
          if (v109 == v143)
            break;
          if (*v109 && (*v109 & 0x7FFFLL) != 0x4000)
          {
            if (v109 == v143)
              break;
            goto LABEL_307;
          }
        }
      }
    }
LABEL_170:
    v203 = 0;
    WTF::fastFree(v103 - 16, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_95:
  v104 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(v104 + 72) = 0;
  *(_BYTE *)(v104 + 80) = 0;
  *(_BYTE *)(v104 + 92) = 0;
  *(_BYTE *)(v104 + 82) = 0;
  if (*(_BYTE *)(a1 + 272))
    JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)(a1 + 72), (JSC::DFG::BasicBlock *)a2);
  if (v203)
    WTF::fastFree((unint64_t)(v203 - 2), v10, v11, v12, v13, v14, v15, v16);
  return v82;
}

void JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::considerBarrier(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;

  if (*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x58) != *(_DWORD *)(a1 + 224))
  {
    v9 = *(_DWORD *)(a1 + 228);
    *(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x58) = 0;
    if (*(_BYTE *)(a1 + 272))
    {
      v11 = (a2 >> 50) & 0x3F;
      if ((v11 - 8) >= 2 && (v11 > 0x26 || ((1 << v11) & 0x7FEAB7F800) == 0))
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), *(JSC::DFG::Node **)(a1 + 232), (const WTF::CString *)"./dfg/DFGStoreBarrierInsertionPhase.cpp", (const char *)0x27F, "void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::insertBarrier(unsigned int, Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]", "isCell(base.useKind())");
        __break(0xC471u);
        JUMPOUT(0x198543124);
      }
      v12 = *(_QWORD *)(a1 + 232);
      v13 = *(_QWORD *)v12;
      if ((*(_QWORD *)v12 & 1) != 0)
      {
        v37 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v38 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
            ? (v39 = (_DWORD)v38 == -1)
            : (v39 = 1),
              v39))
        {
          v40 = 2;
        }
        else if (v38 >> 28)
        {
          v61 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v61 = v37;
          *(_DWORD *)(v61 + 8) = v38;
          v40 = 1;
          v37 = v61;
        }
        else
        {
          v40 = v37;
          v37 = v38 << 36;
        }
        v13 = v37 | v40;
      }
      v14 = *(_QWORD *)(v12 + 8);
      if ((v14 & 1) != 0)
      {
        v41 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || ((v42 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
            ? (v43 = (_DWORD)v42 == -1)
            : (v43 = 1),
              v43))
        {
          v44 = 2;
        }
        else if (v42 >> 28)
        {
          v62 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v62 = v41;
          *(_DWORD *)(v62 + 8) = v42;
          v44 = 1;
          v41 = v62;
        }
        else
        {
          v44 = v41;
          v41 = v42 << 36;
        }
        v14 = v41 | v44;
      }
      v15 = (v9 + 1);
      v16 = *(_WORD *)(v12 + 16);
      if (JSC::DFG::clobbersExitState(*(JSC::DFG **)(a1 + 32), *(JSC::DFG::Graph **)(a1 + 232), a3, a4, a5, a6, a7, a8))
      {
        v24 = v13;
        if ((v13 & 1) != 0)
        {
          v53 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          if ((v13 & 2) != 0
            || ((v54 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
              ? (v55 = (_DWORD)v54 == -1)
              : (v55 = 1),
                v55))
          {
            v56 = 2;
          }
          else if (v54 >> 28)
          {
            v65 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v65 = v53;
            *(_DWORD *)(v65 + 8) = v54;
            v56 = 1;
            v53 = v65;
          }
          else
          {
            v56 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
            v53 = v54 << 36;
          }
          v24 = v53 | v56;
        }
        v25 = v14;
        if ((v14 & 1) != 0)
        {
          v57 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          if ((v14 & 2) != 0
            || ((v58 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
              ? (v59 = (_DWORD)v58 == -1)
              : (v59 = 1),
                v59))
          {
            v60 = 2;
          }
          else
          {
            v66 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
            if (v58 >> 28)
            {
              v57 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v57 = v66;
              *(_DWORD *)(v57 + 8) = v58;
              v60 = 1;
            }
            else
            {
              v60 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
              v57 = v58 << 36;
            }
          }
          v25 = v57 | v60;
        }
        v16 &= 0xFF00u;
        if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v13 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
        if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v14 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
        v14 = v25;
        v13 = v24;
      }
      v26 = a2 & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
      v27 = a1 + 72;
      v28 = v13;
      if ((v13 & 1) != 0)
      {
        v45 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v46 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
            ? (v47 = (_DWORD)v46 == -1)
            : (v47 = 1),
              v47))
        {
          v48 = 2;
        }
        else if (v46 >> 28)
        {
          v63 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v63 = v45;
          *(_DWORD *)(v63 + 8) = v46;
          v48 = 1;
          v45 = v63;
        }
        else
        {
          v48 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          v45 = v46 << 36;
        }
        v28 = v45 | v48;
      }
      v67 = v28;
      v29 = v14;
      if ((v14 & 1) != 0)
      {
        v49 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || ((v50 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
            ? (v51 = (_DWORD)v50 == -1)
            : (v51 = 1),
              v51))
        {
          v52 = 2;
        }
        else if (v50 >> 28)
        {
          v64 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v64 = v49;
          *(_DWORD *)(v64 + 8) = v50;
          v52 = 1;
          v49 = v64;
        }
        else
        {
          v52 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          v49 = v50 << 36;
        }
        v29 = v49 | v52;
      }
      v68 = v29;
      v69 = v16;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v27, v15, 0, 383, (uint64_t)&v67, v26, v22, v23);
      if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v68 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
      if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v67 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
      if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v14 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
      if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v13 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
    }
  }
}

void JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::considerBarrier(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a3 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
}

void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1},JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2},JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1},JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2},JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1} const&,JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#2} const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  __int16 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v229;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _DWORD *v341;
  int v342;
  char *v343;
  _DWORD *v344;
  unint64_t *v345;
  char v346;
  unint64_t v347;
  __int16 v348;
  int v349;
  uint64_t v350;
  unint64_t v351;
  int v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  unsigned int *v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  WTF *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _DWORD *v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  _DWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int v443;
  unsigned int v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  int v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  BOOL v468;
  uint64_t v469;
  BOOL v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int v477;
  BOOL v478;
  uint64_t v479;
  int v480;
  int v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  const char *v496;
  void *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  char v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  uint64_t v536;
  char v537;
  _BYTE v538[56];
  uint64_t v539;
  _BYTE v540[56];
  char v541;
  char v542;
  char v543;
  char v544;
  _BYTE v545[56];
  char v546;
  char v547;
  char v548;
  char v549;
  WTF *v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  char v554;
  char v555;
  char v556;
  char v557;
  uint64_t v558;
  uint64_t v559;
  char v560;
  char v561;
  char v562;
  char v563;
  char v564;
  char v565;
  char v566;
  char v567;
  _BYTE v568[56];
  char v569;
  _BYTE v570[56];
  uint64_t v571;
  char v572;
  char v573;
  char v574;
  char v575;
  char v576;
  _BYTE v577[56];
  char v578;
  _BYTE v579[56];

  v12 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v12 = *(_QWORD *)v12;
  while (v12)
  {
    v14 = *(_QWORD *)(v12 + 24);
    if ((*(_BYTE *)(v12 + 32) & 1) != 0)
    {
      v24 = (HIDWORD(v14) & 0xFFFFF | ((int)(v14 >> 28) >> 24 << 20)) + 3;
      v550 = (WTF *)(((v24 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 31) & 1) << 32)) << 15) | 2);
      v14 = *(_QWORD *)(v12 + 24);
    }
    if ((v14 >> 60) - 3 <= 2)
    {
      v37 = (HIDWORD(v14) & 0xFFFFF | ((int)(v14 >> 28) >> 24 << 20)) + 4;
      v550 = (WTF *)(((v37 & 0xFFFFFFFEFFFFFFFFLL | (((v37 >> 31) & 1) << 32)) << 15) | 2);
    }
    v15 = *(_QWORD *)(v12 + 16);
    v12 = v15 & 0xFFFFFFFF8;
    if ((v15 & 1) != 0)
      v12 = *(_QWORD *)v12;
  }
  if (*((_BYTE *)this + 960))
  {
    v442 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
    v550 = (WTF *)(((v442 & 0xFFFFFFFEFFFFFFFFLL | (((v442 >> 31) & 1) << 32)) << 15) | 2);
  }
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v443 = *((unsigned __int16 *)a2 + 9);
    if (v443 > 0xC9)
    {
      if (v443 - 202 > 0x3E || ((1 << (v443 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v444 = v443 - 333;
        if (v444 > 0x3A || ((1 << v444) & 0x7A8000000000003) == 0)
        {
LABEL_749:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x198546080);
        }
      }
      goto LABEL_87;
    }
    v517 = v443 - 101;
    if (v443 - 101 > 0x3E)
      goto LABEL_748;
    if (((1 << v517) & 0x7E0070000000000FLL) != 0)
    {
LABEL_87:
      v49 = 16385;
LABEL_88:
      v550 = (WTF *)v49;
LABEL_89:
      **(_BYTE **)a4 = 1;
      return;
    }
    if (((1 << v517) & 0x18000000000) == 0)
    {
LABEL_748:
      if (v443 - 92 >= 2)
        goto LABEL_749;
      goto LABEL_87;
    }
  }
  v13 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x117:
    case 0x118:
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return;
    case 6:
      v179 = 16423;
      goto LABEL_377;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      goto LABEL_87;
    case 0xB:
      v28 = 98306;
      goto LABEL_45;
    case 0xC:
      v323 = a4;
      v324 = 98306;
      goto LABEL_443;
    case 0xD:
      v214 = *((_QWORD *)a2 + 9);
      if (v214)
      {
        v336 = (HIDWORD(*(_QWORD *)(v214 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v214 + 24) >> 28) >> 24 << 20)) + 4;
        v28 = ((unint64_t)v336 << 15) | ((unint64_t)(v336 >> 31) << 47) | 2;
      }
      else
      {
        v28 = 131074;
      }
      goto LABEL_45;
    case 0xE:
      v324 = 131074;
      goto LABEL_524;
    case 0xF:
      v445 = (_QWORD *)*((_QWORD *)a2 + 9);
      v446 = v445;
      do
      {
        v447 = v446;
        v446 = (_QWORD *)*v446;
      }
      while (v446);
      if (v447 != v445)
        *v445 = v447;
      v550 = (WTF *)((v447[3] << 15) | 2);
      v448 = (_QWORD *)*((_QWORD *)a2 + 9);
      v449 = v448;
      do
      {
        v450 = v449;
        v449 = (_QWORD *)*v449;
      }
      while (v449);
      if (v450 != v448)
        *v448 = v450;
      v25 = &v572;
      goto LABEL_435;
    case 0x10:
      v451 = (_QWORD *)*((_QWORD *)a2 + 9);
      v452 = v451;
      do
      {
        v453 = v452;
        v452 = (_QWORD *)*v452;
      }
      while (v452);
      if (v453 != v451)
        *v451 = v453;
      v454 = (_QWORD *)*((_QWORD *)a2 + 9);
      v455 = v454;
      do
      {
        v456 = v455;
        v455 = (_QWORD *)*v455;
      }
      while (v455);
      if (v456 != v454)
        *v454 = v456;
      JSC::DFG::LazyNode::LazyNode(&v571, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x11:
      v16 = (**((_QWORD **)a2 + 9) << 15) | 2;
      v51 = v16;
      while (2)
      {
        v52 = v51 & 0x3FFF;
        if (v52 != 1)
        {
          if (v52 != 3)
          {
            v53 = 16385;
            if (v52 == 40)
              goto LABEL_102;
            if ((v51 & 0x4000) == 0)
            {
              v53 = v52 | 0x4000u;
LABEL_102:
              v51 = v53;
              if (v53 == 16387)
                goto LABEL_40;
              continue;
            }
            if (v52 != 2)
              goto LABEL_40;
          }
          v53 = 16385;
          goto LABEL_102;
        }
        break;
      }
      v59 = (**((_QWORD **)a2 + 9) << 15) | 2;
      while (1)
      {
        v60 = v59 & 0x3FFF;
        if (v60 == 1)
          goto LABEL_131;
        if (v60 == 2)
          v61 = 16385;
        else
          v61 = 16387;
        if ((v59 & 0x4000) != 0)
          v59 = v61;
        else
          v59 = v60 | 0x4000u;
        if (v60 == 40)
          v59 = 16385;
        if (v60 == 3)
          v59 = 16385;
        if (v59 == 16386)
          goto LABEL_40;
      }
    case 0x12:
      v16 = (*((_QWORD *)a2 + 9) << 15) | 2;
      v17 = v16;
      while (2)
      {
        v18 = v17 & 0x3FFF;
        if (v18 != 1)
        {
          if (v18 != 3)
          {
            v19 = 16385;
            if (v18 == 40)
              goto LABEL_24;
            if ((v17 & 0x4000) == 0)
            {
              v19 = v18 | 0x4000u;
LABEL_24:
              v17 = v19;
              if (v19 == 16387)
              {
LABEL_40:
                v23 = 1;
                goto LABEL_132;
              }
              continue;
            }
            if (v18 != 2)
              goto LABEL_40;
          }
          v19 = 16385;
          goto LABEL_24;
        }
        break;
      }
      v20 = (*((_QWORD *)a2 + 9) << 15) | 2;
      while (1)
      {
        v21 = v20 & 0x3FFF;
        if (v21 == 1)
          break;
        if (v21 == 2)
          v22 = 16385;
        else
          v22 = 16387;
        if ((v20 & 0x4000) != 0)
          v20 = v22;
        else
          v20 = v21 | 0x4000u;
        if (v21 == 40)
          v20 = 16385;
        if (v21 == 3)
          v20 = 16385;
        if (v20 == 16386)
          goto LABEL_40;
      }
LABEL_131:
      v23 = 0;
LABEL_132:
      **(_BYTE **)a4 |= v23;
      ++**(_DWORD **)(a4 + 8);
      **(_QWORD **)(a4 + 16) = v16;
      return;
    case 0x13:
      v26 = **((_QWORD **)a2 + 9);
      v27 = 2;
      goto LABEL_44;
    case 0x1C:
      v482 = (_QWORD *)*((_QWORD *)a2 + 9);
      v483 = v482;
      do
      {
        v484 = v483;
        v483 = (_QWORD *)*v483;
      }
      while (v483);
      if (v484 != v482)
        *v482 = v484;
      v219 = (v484[3] << 15) | 2;
      goto LABEL_371;
    case 0x21:
      v26 = *((unsigned int *)a2 + 18);
      v27 = 35;
      goto LABEL_44;
    case 0x22:
      v323 = a4;
      v324 = 16419;
      goto LABEL_443;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 < 3)
        return;
      goto LABEL_87;
    case 0x2A:
    case 0x142:
    case 0x143:
      v48 = *((_BYTE *)a2 + 30);
      goto LABEL_86;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v120 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v120)
      {
        case 0x1A:
          v121 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v122 = 0x68000000000000;
          break;
        case 0x1C:
          v121 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v122 = 0x70000000000000;
          break;
        case 0x1B:
          v121 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v122 = 0x6C000000000000;
          break;
        default:
          goto LABEL_87;
      }
      if (v121 != v122)
        goto LABEL_87;
LABEL_370:
      v219 = 16385;
LABEL_371:
      v550 = (WTF *)v219;
      goto LABEL_442;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        goto LABEL_85;
      goto LABEL_87;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 < 2)
        return;
      goto LABEL_87;
    case 0x40:
    case 0x42:
    case 0x44:
      v54 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v54 == 49 || (_DWORD)v54 == 1 || (_DWORD)v54 == 52)
        return;
      if ((_DWORD)v54)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198543980);
      }
      goto LABEL_87;
    case 0x41:
      v213 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v213 != 49 && (_DWORD)v213 != 1 && (_DWORD)v213 != 52)
        goto LABEL_87;
      return;
    case 0x46:
      v325 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v325 != 49 && (_DWORD)v325 != 1)
        goto LABEL_87;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v164 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v165 = 0xC4000000000000;
      goto LABEL_276;
    case 0x4B:
      v550 = (WTF *)16409;
      v323 = a4;
      v324 = 16409;
      goto LABEL_443;
    case 0x52:
    case 0x53:
      v397 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v397 > 0x34)
        goto LABEL_556;
      if (!v397)
        goto LABEL_87;
      if (((1 << v397) & 0x1200001C000002) == 0)
      {
LABEL_556:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19854524CLL);
      }
      return;
    case 0x5C:
    case 0x5D:
      v38 = *((_DWORD *)a2 + 18);
      if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
      {
        switch(*((_DWORD *)a2 + 14) & 7)
        {
          case 3:
            v39 = 13;
            break;
          case 4:
            v39 = 17;
            break;
          case 5:
            v39 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x1985461B8);
          default:
            __break(0xC471u);
            JUMPOUT(0x1985461E8);
        }
      }
      else
      {
        v39 = 21;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_87;
        case 3u:
          goto LABEL_442;
        case 5u:
          if (BYTE2(v38) - 3 <= 1)
            goto LABEL_87;
          return;
        case 6u:
          return;
        case 7u:
          if (BYTE2(v38) > 3u || BYTE2(v38) == 2)
            goto LABEL_87;
          v550 = (WTF *)16388;
          v550 = (WTF *)16400;
          v117 = *((_DWORD *)a2 + 6);
          v118 = *((_DWORD *)this + 41);
          if (v118 <= v117)
          {
            __break(0xC471u);
            JUMPOUT(0x198546300);
          }
          if (v118 <= v117 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198543D8CLL);
          }
          return;
        case 8u:
          if (BYTE2(v38) >= 2u && BYTE2(v38) != 3)
            goto LABEL_87;
          v550 = (WTF *)16388;
          v550 = (WTF *)16401;
          v129 = *((_DWORD *)a2 + 6);
          v130 = *((_DWORD *)this + 41);
          if (v130 <= v129)
          {
            __break(0xC471u);
            JUMPOUT(0x1985462F8);
          }
          if (v130 <= v129 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198543E74);
          }
          return;
        case 9u:
          if (BYTE2(v38) >= 2u && BYTE2(v38) != 3)
            goto LABEL_87;
          v550 = (WTF *)16388;
          v550 = (WTF *)16402;
          v46 = *((_DWORD *)a2 + 6);
          v47 = *((_DWORD *)this + 41);
          if (v47 <= v46)
          {
            __break(0xC471u);
            JUMPOUT(0x198546250);
          }
          if (v47 <= v46 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198543814);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v38) <= 1u)
            goto LABEL_588;
          goto LABEL_87;
        case 0xCu:
          if (BYTE2(v38) > 1u)
            goto LABEL_87;
          v550 = (WTF *)16404;
          v434 = *((_QWORD *)a2 + 3);
          v435 = *((_DWORD *)this + 41);
          if (v435 <= v434)
          {
            __break(0xC471u);
            JUMPOUT(0x1985463BCLL);
          }
          if (v435 <= (int)v434 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985463C4);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v570, v39, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v25 = &v569;
          goto LABEL_435;
        case 0xDu:
          v550 = (WTF *)16405;
          v485 = *((_QWORD *)a2 + 3);
          v486 = *((_DWORD *)this + 41);
          if (v486 <= v485)
          {
            __break(0xC471u);
            JUMPOUT(0x1985464F8);
          }
          if (v486 <= (int)v485 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198546500);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v568, v39, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v25 = &v567;
          goto LABEL_435;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          v550 = (WTF *)16406;
          v550 = (WTF *)16423;
          if ((v38 & 0x40000000) != 0)
            goto LABEL_591;
          v71 = *((_DWORD *)a2 + 6);
          v72 = *((_DWORD *)this + 41);
          if (v72 <= v71)
          {
            __break(0xC471u);
            JUMPOUT(0x198546270);
          }
          if (v72 <= v71 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198543AF4);
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x198545D20);
        default:
          __break(0xC471u);
          JUMPOUT(0x198545D9CLL);
      }
    case 0x60:
    case 0x61:
    case 0x113:
    case 0x166:
      v28 = 16386;
      goto LABEL_45;
    case 0x63:
      v550 = (WTF *)16385;
      **(_BYTE **)a4 = 1;
      v381 = (_DWORD *)*((_QWORD *)a2 + 9);
      v382 = v381[6];
      if (v382)
      {
        v383 = v382 - 1;
        do
        {
          --v383;
        }
        while (v383 != -1);
      }
      return;
    case 0x64:
      v550 = (WTF *)16386;
      v341 = (_DWORD *)*((_QWORD *)a2 + 9);
      v342 = v341[6];
      if (!v342)
        return;
      v343 = *(char **)a4;
      v344 = *(_DWORD **)(a4 + 8);
      v345 = *(unint64_t **)(a4 + 16);
      v346 = **(_BYTE **)a4;
      while (1)
      {
        --v342;
        v347 = (((*v341 + v342) | ((((unint64_t)(*v341 + v342) >> 31) & 1) << 32)) << 15) | 2;
        v348 = v347;
        while (1)
        {
          v349 = v348 & 0x3FFF;
          if (v349 == 1)
            break;
          if (v349 == 3)
            goto LABEL_464;
          v350 = 16385;
          if (v349 != 40)
          {
            if ((v348 & 0x4000) == 0)
            {
              v350 = v349 | 0x4000u;
              goto LABEL_465;
            }
            if (v349 != 2)
              goto LABEL_481;
LABEL_464:
            v350 = 16385;
          }
LABEL_465:
          v348 = v350;
          if (v350 == 16387)
          {
LABEL_481:
            v354 = 1;
            goto LABEL_483;
          }
        }
        v351 = (((*v341 + v342) | ((((unint64_t)(*v341 + v342) >> 31) & 1) << 32)) << 15) | 2;
        while (1)
        {
          v352 = v351 & 0x3FFF;
          if (v352 == 1)
            break;
          if (v352 == 2)
            v353 = 16385;
          else
            v353 = 16387;
          if ((v351 & 0x4000) != 0)
            v351 = v353;
          else
            v351 = v352 | 0x4000u;
          if (v352 == 40)
            v351 = 16385;
          if (v352 == 3)
            v351 = 16385;
          if (v351 == 16386)
            goto LABEL_481;
        }
        v354 = 0;
LABEL_483:
        v346 |= v354;
        ++*v344;
        if (!v342)
        {
          *v343 = v346;
          *v345 = v347;
          return;
        }
      }
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v55 = *((_DWORD *)a2 + 6);
      v56 = *((_DWORD *)this + 41);
      if (v56 <= v55)
      {
        __break(0xC471u);
        JUMPOUT(0x198546258);
      }
      if (v56 <= v55 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198546260);
      }
      if (v56 <= v55 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198546268);
      }
      v57 = *((_DWORD *)a2 + 18);
      v58 = *((_DWORD *)a2 + 14) & 7;
      if (v58 >= 2 && v58 - 3 >= 3)
      {
        if (v58 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x198543ECCLL);
        }
        __break(0xC471u);
        JUMPOUT(0x198546208);
      }
      if (*((_DWORD *)a2 + 18) - 14 >= 9)
      {
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xCu:
          case 0xDu:
          case 0x17u:
          case 0x18u:
            goto LABEL_87;
          case 3u:
            goto LABEL_442;
          case 7u:
            if (BYTE2(v57) - 3 <= 1)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16389;
            v320 = 16400;
            goto LABEL_417;
          case 8u:
            if (BYTE2(v57) - 3 <= 1)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16389;
            v320 = 16401;
LABEL_417:
            v550 = (WTF *)v320;
            **(_BYTE **)a4 = 1;
            v321 = *((unsigned __int16 *)a2 + 9);
            if (v321 != 264)
              goto LABEL_418;
            goto LABEL_419;
          case 9u:
            if (BYTE2(v57) - 3 <= 1)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16389;
            v49 = 16402;
            goto LABEL_88;
          case 0xAu:
            if (BYTE2(v57) - 3 <= 1)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16389;
            v550 = (WTF *)16403;
            v321 = *((unsigned __int16 *)a2 + 9);
            if (v321 == 264)
              goto LABEL_419;
LABEL_418:
            if (v321 == 146)
              v322 = *((_DWORD *)a2 + 20);
            else
LABEL_419:
              v322 = *((_DWORD *)a2 + 18);
            if ((v322 & 0xFE0000) == 0)
              return;
            v323 = a4;
            v324 = 16388;
            break;
          case 0xBu:
            if ((v57 & 0xFE0000) != 0)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16389;
            v550 = (WTF *)16403;
            v323 = a4;
            v324 = 16403;
            goto LABEL_443;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x198545F6CLL);
          default:
            __break(0xC471u);
            JUMPOUT(0x1985460F8);
        }
        goto LABEL_443;
      }
      if ((v57 & 0x40000000) == 0)
      {
        v49 = 16423;
        goto LABEL_88;
      }
      v550 = (WTF *)16406;
      v550 = (WTF *)16423;
      goto LABEL_610;
    case 0x6D:
      v550 = (WTF *)16385;
      v334 = a4;
      v335 = 16423;
      goto LABEL_441;
    case 0x84:
    case 0x85:
    case 0x126:
      goto LABEL_218;
    case 0x87:
      v550 = (WTF *)16396;
      **(_BYTE **)a4 = 1;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
        goto LABEL_584;
      return;
    case 0x88:
    case 0x89:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x16B:
      goto LABEL_173;
    case 0x8A:
      v28 = 16396;
      goto LABEL_45;
    case 0x8B:
    case 0xB4:
    case 0x194:
      goto LABEL_89;
    case 0x8C:
    case 0x8D:
      v131 = 16393;
      goto LABEL_217;
    case 0x90:
    case 0x93:
    case 0x12B:
    case 0x12C:
    case 0x135:
      goto LABEL_521;
    case 0x91:
    case 0x92:
      v550 = (WTF *)16394;
      v550 = (WTF *)16393;
      v49 = 16396;
      goto LABEL_88;
    case 0x96:
      v550 = (WTF *)16390;
      v25 = &v574;
      goto LABEL_435;
    case 0x97:
      v550 = (WTF *)16391;
      v25 = &v573;
      goto LABEL_435;
    case 0x98:
    case 0x99:
      v550 = (WTF *)(((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF);
      if (*((int *)this + 238) > 1)
        return;
      v25 = &v561;
      goto LABEL_435;
    case 0x9A:
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      v550 = (WTF *)(((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      if (*((int *)this + 238) > 1)
        return;
      v25 = &v560;
      goto LABEL_435;
    case 0x9B:
      v29 = 15;
      while (2)
      {
        v30 = v29 & 0x3FFF;
        if (v30 != 1)
        {
          if (v30 != 3)
          {
            v31 = 16385;
            if (v30 == 40)
              goto LABEL_53;
            if ((v29 & 0x4000) == 0)
            {
              v31 = v30 | 0x4000u;
LABEL_53:
              v29 = v31;
              if (v31 == 16387)
              {
LABEL_69:
                v35 = 1;
                goto LABEL_71;
              }
              continue;
            }
            if (v30 != 2)
              goto LABEL_69;
          }
          v31 = 16385;
          goto LABEL_53;
        }
        break;
      }
      LOWORD(v32) = 15;
      while (1)
      {
        v33 = v32 & 0x3FFF;
        if (v33 == 1)
          break;
        if (v33 == 2)
          v34 = 16385;
        else
          v34 = 16387;
        if ((v32 & 0x4000) != 0)
          v32 = v34;
        else
          v32 = v33 | 0x4000u;
        if (v33 == 40)
          v32 = 16385;
        if (v33 == 3)
          v32 = 16385;
        if (v32 == 16386)
          goto LABEL_69;
      }
      v35 = 0;
LABEL_71:
      **(_BYTE **)a4 |= v35;
      if (*((int *)this + 238) <= 1)
        JSC::DFG::LazyNode::LazyNode(&v558, (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9C:
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      v153 = 15;
      while (2)
      {
        v154 = v153 & 0x3FFF;
        if (v154 != 1)
        {
          if (v154 != 3)
          {
            v155 = 16385;
            if (v154 == 40)
              goto LABEL_240;
            if ((v153 & 0x4000) == 0)
            {
              v155 = v154 | 0x4000u;
LABEL_240:
              v153 = v155;
              if (v155 == 16387)
              {
LABEL_274:
                v163 = 1;
                goto LABEL_280;
              }
              continue;
            }
            if (v154 != 2)
              goto LABEL_274;
          }
          v155 = 16385;
          goto LABEL_240;
        }
        break;
      }
      LOWORD(v160) = 15;
      while (1)
      {
        v161 = v160 & 0x3FFF;
        if (v161 == 1)
          break;
        if (v161 == 2)
          v162 = 16385;
        else
          v162 = 16387;
        if ((v160 & 0x4000) != 0)
          v160 = v162;
        else
          v160 = v161 | 0x4000u;
        if (v161 == 40)
          v160 = 16385;
        if (v161 == 3)
          v160 = 16385;
        if (v160 == 16386)
          goto LABEL_274;
      }
      v163 = 0;
LABEL_280:
      v166 = *(char **)a4;
      **(_BYTE **)a4 |= v163;
      v167 = *((_QWORD *)a2 + 9);
      v168 = *(unsigned int *)(v167 + 20);
      v169 = (v168 << 6) - 64;
      while (v169 != -64)
      {
        v170 = *(_DWORD *)(*(_QWORD *)(v167 + 8) + v169) - 2;
        v169 -= 64;
        if (v170 <= 3)
        {
          *v166 = 1;
          v167 = *((_QWORD *)a2 + 9);
          v168 = *(unsigned int *)(v167 + 20);
          break;
        }
      }
      v171 = (v168 << 6) - 64;
      while (v168)
      {
        if (--v168 >= (unint64_t)*(unsigned int *)(v167 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x198546308);
        }
        v172 = v171 - 64;
        v173 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v167 + 8) + v171));
        v171 = v172;
        if (v173)
        {
          **(_BYTE **)a4 = 1;
          break;
        }
      }
      if (*((int *)this + 238) <= 1)
        JSC::DFG::LazyNode::LazyNode(&v559, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9D:
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
LABEL_584:
      v323 = a4;
      v324 = 16399;
      goto LABEL_443;
    case 0x9E:
      v50 = *((_DWORD *)a2 + 18);
      if (v50 - 6 < 6)
      {
        v28 = 16388;
        goto LABEL_45;
      }
      if (*((_DWORD *)a2 + 18) > 0xBu)
      {
        if (v50 == 25)
          goto LABEL_433;
        if (v50 - 12 < 2)
        {
          v550 = (WTF *)16423;
          v25 = &v557;
          goto LABEL_435;
        }
      }
      else
      {
        if (v50 == 5)
          return;
        if (v50 == 3)
          goto LABEL_442;
      }
      v532 = JSC::DFG::toTypedArrayType(v50);
      if (v532 == 12 || !v532)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x1985463B4);
      }
LABEL_433:
      v550 = (WTF *)16423;
      if ((v50 & 0x40000000) != 0)
        goto LABEL_610;
      v25 = &v556;
      goto LABEL_435;
    case 0x9F:
      v110 = *((_DWORD *)a2 + 18);
      if (v110 != 25)
      {
        v531 = JSC::DFG::toTypedArrayType(v110);
        if (v531 == 12 || !v531)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1985462F0);
        }
      }
      if ((v110 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x198543D30);
      }
      return;
    case 0xA0:
      v457 = *((_DWORD *)a2 + 18);
      if (v457 == 25)
        goto LABEL_645;
      v533 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v533 == 12 || !v533)
      {
        if (v457 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198546428);
        }
        goto LABEL_442;
      }
      if (v457 == 3)
        goto LABEL_442;
LABEL_645:
      v550 = (WTF *)16423;
      if ((v457 & 0x40000000) != 0)
        goto LABEL_610;
      v25 = &v555;
      goto LABEL_435;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x198546298);
      }
      v550 = (WTF *)16389;
      v25 = &v554;
      goto LABEL_435;
    case 0xA2:
      v480 = *((unsigned __int8 *)a2 + 72);
      if (v480 == 25)
        goto LABEL_709;
      v535 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v535 == 12 || !v535)
      {
        if (v480 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1985464F0);
        }
        goto LABEL_442;
      }
      if (v480 == 3)
        goto LABEL_442;
LABEL_709:
      v550 = (WTF *)16423;
      if (*((_WORD *)a2 + 9) == 146)
        v481 = *((_DWORD *)a2 + 20);
      else
        v481 = *((_DWORD *)a2 + 18);
      if ((v481 & 0x40000000) == 0)
      {
        v25 = &v563;
        goto LABEL_435;
      }
      goto LABEL_610;
    case 0xA3:
      v458 = *((unsigned __int8 *)a2 + 72);
      if (v458 == 25)
        goto LABEL_648;
      v534 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v534 == 12 || !v534)
      {
        if (v458 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19854648CLL);
        }
        goto LABEL_442;
      }
      if (v458 == 3)
        goto LABEL_442;
LABEL_648:
      v550 = (WTF *)16423;
      if (*((_WORD *)a2 + 9) == 146)
        v459 = *((_DWORD *)a2 + 20);
      else
        v459 = *((_DWORD *)a2 + 18);
      if ((v459 & 0x40000000) != 0)
      {
LABEL_610:
        v323 = a4;
        v324 = 16423;
        goto LABEL_443;
      }
      v25 = &v562;
      goto LABEL_435;
    case 0xAA:
    case 0x129:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      v28 = 16385;
      goto LABEL_45;
    case 0xAB:
      v26 = *((unsigned int *)a2 + 18);
      v27 = 21;
      goto LABEL_44;
    case 0xAC:
      v62 = 21;
      while (1)
      {
        v63 = v62 & 0x3FFF;
        if (v63 == 1)
        {
          LOWORD(v73) = 21;
          while (1)
          {
            v74 = v73 & 0x3FFF;
            if (v74 == 1)
              break;
            if (v74 == 2)
              v75 = 16385;
            else
              v75 = 16387;
            if ((v73 & 0x4000) != 0)
              v73 = v75;
            else
              v73 = v74 | 0x4000u;
            if (v74 == 40)
              v73 = 16385;
            if (v74 == 3)
              v73 = 16385;
            if (v73 == 16386)
              goto LABEL_160;
          }
LABEL_361:
          v76 = 0;
LABEL_362:
          **(_BYTE **)a4 |= v76;
          return;
        }
        if (v63 == 3)
          goto LABEL_139;
        v64 = 16385;
        if (v63 != 40)
          break;
LABEL_140:
        v62 = v64;
        if (v64 == 16387)
          goto LABEL_160;
      }
      if ((v62 & 0x4000) == 0)
      {
        v64 = v63 | 0x4000u;
        goto LABEL_140;
      }
      if (v63 != 2)
        goto LABEL_160;
LABEL_139:
      v64 = 16385;
      goto LABEL_140;
    case 0xAD:
    case 0xAE:
      v26 = *((_QWORD *)a2 + 9);
      v27 = 36;
      goto LABEL_44;
    case 0xAF:
      v210 = 36;
      while (1)
      {
        v211 = v210 & 0x3FFF;
        if (v211 == 1)
        {
          LOWORD(v215) = 36;
          do
          {
            v216 = v215 & 0x3FFF;
            if (v216 == 1)
              goto LABEL_361;
            if (v216 == 2)
              v217 = 16385;
            else
              v217 = 16387;
            if ((v215 & 0x4000) != 0)
              v215 = v217;
            else
              v215 = v216 | 0x4000u;
            if (v216 == 40)
              v215 = 16385;
            if (v216 == 3)
              v215 = 16385;
          }
          while (v215 != 16386);
          goto LABEL_160;
        }
        if (v211 == 3)
          goto LABEL_334;
        v212 = 16385;
        if (v211 != 40)
          break;
LABEL_335:
        v210 = v212;
        if (v212 == 16387)
          goto LABEL_160;
      }
      if ((v210 & 0x4000) == 0)
      {
        v212 = v211 | 0x4000u;
        goto LABEL_335;
      }
      if (v211 != 2)
        goto LABEL_160;
LABEL_334:
      v212 = 16385;
      goto LABEL_335;
    case 0xB2:
      v334 = a4;
      v335 = 16422;
LABEL_441:
      goto LABEL_442;
    case 0xB3:
      v28 = 16398;
      goto LABEL_45;
    case 0xB5:
      v323 = a4;
      v324 = 16408;
      goto LABEL_443;
    case 0xBE:
      v550 = (WTF *)16395;
      v25 = &v566;
      goto LABEL_435;
    case 0xC1:
      v326 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v326 != 21 && (_DWORD)v326 != 49 && (_DWORD)v326 != 1)
        goto LABEL_87;
      v327 = *((_QWORD *)a2 + 4);
      if ((v327 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
LABEL_430:
      v164 = v327 & 0xFC000000000000;
      v165 = 0x4000000000000;
LABEL_276:
      if (v164 != v165)
        goto LABEL_87;
      return;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_87;
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      v28 = 16399;
      goto LABEL_45;
    case 0xC4:
      v395 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v395 == 11)
      {
        v550 = (WTF *)16407;
        v323 = a4;
        v324 = 16394;
        goto LABEL_443;
      }
      if ((_DWORD)v395)
      {
        __break(0xC471u);
        JUMPOUT(0x19854565CLL);
      }
      goto LABEL_87;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (v13 - 202 >= 0xA || ((0x3EFu >> (v13 + 54)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198546248);
      }
      v406 = dword_199156504[(__int16)(v13 - 202)];
      v407 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v516 = v406 + *v407;
        if (*((_DWORD *)this + 41) <= v516)
        {
          __break(0xC471u);
          JUMPOUT(0x198546508);
        }
        v408 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v516);
      }
      else
      {
        v408 = &v407[2 * v406];
      }
      if ((*v408 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_87;
      v550 = (WTF *)16406;
      v550 = (WTF *)16423;
      goto LABEL_570;
    case 0xCE:
      v474 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v530 = *v474;
        if (*((_DWORD *)this + 41) <= v530)
        {
          __break(0xC471u);
          JUMPOUT(0x198546544);
        }
        v474 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v530);
      }
      v327 = *v474;
      goto LABEL_430;
    case 0xD6:
      v550 = (WTF *)16423;
      v550 = (WTF *)16393;
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      v550 = (WTF *)16388;
      v550 = (WTF *)16401;
      v550 = (WTF *)16400;
      v179 = 16402;
      goto LABEL_377;
    case 0xD7:
      v550 = (WTF *)16423;
      v550 = (WTF *)16393;
      v550 = (WTF *)16394;
      v550 = (WTF *)16396;
      v550 = (WTF *)16388;
      if (*((_WORD *)a2 + 9) == 146)
        v307 = *((_DWORD *)a2 + 20);
      else
        v307 = *((_DWORD *)a2 + 18);
      switch(v307)
      {
        case 9u:
          v28 = 16402;
          break;
        case 7u:
          v28 = 16400;
          break;
        case 8u:
          v28 = 16401;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198545E48);
      }
      goto LABEL_45;
    case 0xDA:
    case 0xDE:
      v49 = 16408;
      goto LABEL_88;
    case 0xDD:
      v550 = (WTF *)16408;
      v550 = (WTF *)16398;
      v323 = a4;
      v324 = 16398;
      goto LABEL_443;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_87;
      }
      v550 = (WTF *)16408;
      v49 = 16398;
      goto LABEL_88;
    case 0xE1:
      v164 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v165 = 0x54000000000000;
      goto LABEL_276;
    case 0xE6:
      v220 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v220 - 1) < 2)
        return;
      if ((_DWORD)v220)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1985445F8);
      }
      goto LABEL_87;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v36 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v36 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000)
          return;
LABEL_173:
        v49 = 16407;
        goto LABEL_88;
      }
      if ((_DWORD)v36)
        return;
LABEL_85:
      v48 = *((_BYTE *)a2 + 38);
LABEL_86:
      if ((v48 & 0xFC) != 0)
        return;
      goto LABEL_87;
    case 0x101:
    case 0x102:
      goto LABEL_442;
    case 0x106:
      v550 = (WTF *)16407;
      **(_BYTE **)a4 = 1;
      v97 = *((_QWORD *)a2 + 4);
      v98 = v97;
      if ((v97 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v97) + 0x2000000000000, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v97 | 0xFFFE000000000000, v91, v92, v93, v94, v95, v96);
        if (!(_DWORD)v97)
          return;
      }
      v105 = *((unsigned __int16 *)a2 + 9);
      switch(v105)
      {
        case 267:
          goto LABEL_444;
        case 264:
          LOBYTE(v106) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_444:
          LOBYTE(v106) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v106 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v106 - 4 < 6
        || v106 <= 0x19u && ((1 << v106) & 0x2A00000) != 0)
      {
        v107 = *((unsigned int *)this + 107);
        if (v97 >= v107)
        {
          if ((_DWORD)v107)
          {
            v337 = (unsigned int *)*((_QWORD *)this + 52);
            v338 = 4 * v107;
            do
            {
              v339 = *v337;
              if (v339 < v97)
              {
                if (*((_DWORD *)this + 41) <= (v339 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198546340);
                }
                if ((v339 & 0x80000000) != 0)
                  v340 = COERCE__INT64((double)v339) + 0x2000000000000;
                else
                  v340 = v339 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v340, v99, v100, v101, v102, v103, v104);
              }
              ++v337;
              v338 -= 4;
            }
            while (v338);
          }
        }
        else
        {
          v108 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v108 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x198546278);
            }
            if ((v108 & 0x80000000) != 0)
              v109 = COERCE__INT64((double)v108) + 0x2000000000000;
            else
              v109 = v108 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v109, v99, v100, v101, v102, v103, v104);
            ++v108;
          }
          while (v98 != v108);
        }
      }
      return;
    case 0x107:
      v550 = (WTF *)16407;
      v475 = *((unsigned int *)a2 + 8);
      if (!*((_DWORD *)a2 + 8))
        goto LABEL_489;
      v476 = *((_QWORD *)a2 + 3);
      v477 = *((_DWORD *)this + 41);
      v478 = v477 >= v476;
      LODWORD(v479) = v477 - v476;
      if (v478)
        v479 = v479;
      else
        v479 = 0;
      while (1)
      {
        if (!v479)
        {
          __break(0xC471u);
          JUMPOUT(0x198546348);
        }
        if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v476) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          break;
        LODWORD(v476) = v476 + 1;
        --v479;
        if (!--v475)
          goto LABEL_489;
      }
LABEL_520:
      v355 = 16386;
LABEL_488:
      v550 = (WTF *)v355;
LABEL_489:
      v323 = a4;
      v324 = 16407;
LABEL_443:
      return;
    case 0x10A:
      v550 = (WTF *)16407;
      **(_BYTE **)a4 = 1;
      v245 = *((unsigned int *)a2 + 20);
      if ((v245 & 0x80000000) != 0)
        v246 = COERCE__INT64((double)v245) + 0x2000000000000;
      else
        v246 = v245 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v246, v239, v240, v241, v242, v243, v244);
      return;
    case 0x10B:
      v550 = (WTF *)16407;
      **(_BYTE **)a4 = 1;
      v186 = (uint64_t *)*((_QWORD *)a2 + 9);
      v187 = *v186;
      v188 = *(unsigned int *)(*v186 + 8);
      if ((v188 & 0x80000000) != 0)
        v189 = COERCE__INT64((double)v188) + 0x2000000000000;
      else
        v189 = v188 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v189, v180, v181, v182, v183, v184, v185);
      v197 = *((unsigned __int16 *)a2 + 9);
      switch(v197)
      {
        case 267:
          goto LABEL_526;
        case 264:
          LOBYTE(v198) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_526:
          LOBYTE(v198) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v198 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v198 - 4 < 6
        || v198 <= 0x19u && ((1 << v198) & 0x2A00000) != 0)
      {
        v199 = *((unsigned int *)this + 107);
        if (v199 <= v188)
        {
          v550 = 0;
          v551 = 0;
          if ((_DWORD)v199)
          {
            v356 = (unsigned int *)*((_QWORD *)this + 52);
            v357 = 4 * v199;
            do
            {
              v358 = *v356;
              LODWORD(v536) = v358;
              if (v358 < v188)
              {
                if (HIDWORD(v551) == (_DWORD)v551)
                {
                  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v550, (unint64_t)&v536);
                }
                else
                {
                  *((_DWORD *)v550 + HIDWORD(v551)) = v358;
                  ++HIDWORD(v551);
                }
              }
              ++v356;
              v357 -= 4;
            }
            while (v357);
            v361 = v550;
            if (HIDWORD(v551))
            {
              v362 = v187 + 16;
              v363 = 4 * HIDWORD(v551);
              do
              {
                v364 = *(unsigned int *)v361;
                if ((v364 & 0x80000000) != 0)
                  v365 = COERCE__INT64((double)v364) + 0x2000000000000;
                else
                  v365 = v364 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v365, v191, v192, v193, v194, v195, v196);
                if ((*(_BYTE *)(v187 + 4) & 0xE) == 6)
                  v372 = *(_QWORD *)(v362 + 8 * v364) + 0x2000000000000;
                else
                  v372 = *(_QWORD *)(v362 + 8 * v364);
                JSC::DFG::Graph::freeze((uint64_t)this, v372, v366, v367, v368, v369, v370, v371);
                v361 = (WTF *)((char *)v361 + 4);
                v363 -= 4;
              }
              while (v363);
              v361 = v550;
            }
            if (v361)
            {
              v550 = 0;
              LODWORD(v551) = 0;
              WTF::fastFree((unint64_t)v361, v190, v191, v192, v193, v194, v195, v196);
            }
          }
        }
        else if ((_DWORD)v188)
        {
          v200 = 0;
          v201 = v187 + 16;
          do
          {
            if ((v200 & 0x80000000) != 0)
              v202 = COERCE__INT64((double)v200) + 0x2000000000000;
            else
              v202 = v200 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v202, v191, v192, v193, v194, v195, v196);
            if ((*(_BYTE *)(v187 + 4) & 0xE) == 6)
              v209 = *(_QWORD *)(v201 + 8 * v200) + 0x2000000000000;
            else
              v209 = *(_QWORD *)(v201 + 8 * v200);
            JSC::DFG::Graph::freeze((uint64_t)this, v209, v203, v204, v205, v206, v207, v208);
            ++v200;
          }
          while (v188 != v200);
        }
      }
      return;
    case 0x10D:
      v218 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v218)
        goto LABEL_87;
      if ((_DWORD)v218 != 1 && (_DWORD)v218 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198544544);
      }
      goto LABEL_487;
    case 0x10F:
      v473 = *((_QWORD *)a2 + 3);
      if ((v473 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v473 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_487;
      goto LABEL_87;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)
        goto LABEL_486;
      goto LABEL_87;
    case 0x115:
      v374 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v374 == 352)
      {
LABEL_521:
        v28 = 16423;
        goto LABEL_45;
      }
      if (v374 != 349)
        goto LABEL_87;
      goto LABEL_520;
    case 0x123:
      v550 = (WTF *)16395;
      v25 = &v565;
      goto LABEL_435;
    case 0x136:
      v550 = (WTF *)16423;
      v25 = &v575;
      goto LABEL_435;
    case 0x13E:
    case 0x145:
      v119 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v119 > 0x34)
        goto LABEL_437;
      if (((1 << v119) & 0x12026000400002) != 0)
        return;
      if (((1 << v119) & 0x101) != 0)
      {
        v550 = (WTF *)16385;
        **(_BYTE **)a4 = 1;
        return;
      }
      if (v119 != 24)
      {
LABEL_437:
        __break(0xC471u);
        JUMPOUT(0x198544A00);
      }
LABEL_442:
      v323 = a4;
      v324 = 16424;
      goto LABEL_443;
    case 0x13F:
      v164 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v165 = 0x54000000000000;
      goto LABEL_276;
    case 0x144:
      goto LABEL_487;
    case 0x146:
      v460 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v460 == 28)
        return;
      if ((_DWORD)v460)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198545944);
      }
      goto LABEL_87;
    case 0x157:
      v26 = *((unsigned int *)a2 + 18);
      v27 = 33;
LABEL_44:
      v28 = v27 | (v26 << 15);
      goto LABEL_45;
    case 0x158:
      v138 = 33;
      break;
    case 0x159:
      v174 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v174 & 1) != 0)
        v175 = (v174 >> 1) & 3;
      else
        v175 = *(unsigned __int8 *)(v174 + 4);
      if (v175 != 2)
      goto LABEL_173;
    case 0x15A:
      v355 = 16385;
      goto LABEL_488;
    case 0x15B:
    case 0x161:
    case 0x162:
LABEL_486:
      v550 = (WTF *)16386;
LABEL_487:
      v355 = 16407;
      goto LABEL_488;
    case 0x15C:
    case 0x163:
      if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
      {
        v179 = 16386;
LABEL_377:
        v550 = (WTF *)v179;
      }
      goto LABEL_173;
    case 0x164:
      v550 = (WTF *)(((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14);
      v25 = &v553;
      goto LABEL_435;
    case 0x165:
      JSC::DFG::LazyNode::LazyNode(&v552, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v89 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v89 & 1) != 0)
        v90 = (v89 >> 1) & 3;
      else
        v90 = *(unsigned __int8 *)(v89 + 4);
      if (v90 != 2)
        **(_BYTE **)a4 = 1;
      goto LABEL_173;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      v550 = (WTF *)16418;
      v323 = a4;
      v324 = 16418;
      goto LABEL_443;
    case 0x17E:
      v462 = 16392;
      goto LABEL_683;
    case 0x17F:
      v462 = 16387;
LABEL_683:
      v550 = (WTF *)v462;
      v323 = a4;
      v324 = 16392;
      goto LABEL_443;
    case 0x180:
    case 0x182:
      if (v13 != 386)
        goto LABEL_532;
      v176 = *((unsigned __int8 *)a2 + 80);
      if (v176 == 2)
      {
        if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198546318);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) != 0x20000000000000)
          goto LABEL_87;
        v550 = (WTF *)16396;
        v131 = 16399;
LABEL_217:
        v550 = (WTF *)v131;
LABEL_218:
        v28 = 16394;
LABEL_45:
        v550 = (WTF *)v28;
        return;
      }
      if (v176 != 1)
        goto LABEL_87;
LABEL_532:
      v550 = (WTF *)16396;
      v384 = *((unsigned __int16 *)a2 + 9);
      if (v384 == 146)
        v385 = *((_DWORD *)a2 + 20);
      else
        v385 = *((_DWORD *)a2 + 18);
      if (v384 == 386)
        v386 = 11;
      else
        v386 = 12;
      if (v385 != 9)
      {
        switch((char)v385)
        {
          case 3:
            goto LABEL_442;
          case 7:
            if (BYTE2(v385) > 1u)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16400;
            v493 = *((_QWORD *)a2 + 3);
            v494 = *((_DWORD *)this + 41);
            if (v494 <= v493)
            {
              __break(0xC471u);
              JUMPOUT(0x198546510);
            }
            if (v494 <= (int)v493 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198546518);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v579, v386, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v25 = &v578;
            goto LABEL_435;
          case 8:
            if (BYTE2(v385) > 1u)
              goto LABEL_87;
            v550 = (WTF *)16388;
            v550 = (WTF *)16401;
            v404 = *((_QWORD *)a2 + 3);
            v405 = *((_DWORD *)this + 41);
            if (v405 <= v404)
            {
              __break(0xC471u);
              JUMPOUT(0x198546350);
            }
            if (v405 <= (int)v404 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198546358);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v577, v386, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v25 = &v576;
            goto LABEL_435;
          case 10:
            if (BYTE2(v385) > 1u)
              goto LABEL_87;
LABEL_588:
            v550 = (WTF *)16389;
            v28 = 16403;
            goto LABEL_45;
          default:
            goto LABEL_87;
        }
      }
      if (BYTE2(v385) <= 1u)
      {
        v550 = (WTF *)16388;
        v550 = (WTF *)16402;
        v393 = *((_DWORD *)a2 + 6);
        v394 = *((_DWORD *)this + 41);
        if (v394 <= v393)
        {
          __break(0xC471u);
          JUMPOUT(0x198546320);
        }
        if (v394 <= v393 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198545124);
        }
        return;
      }
      goto LABEL_87;
    case 0x18A:
      v156 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000;
      v28 = 16411;
      goto LABEL_244;
    case 0x18B:
      v28 = 16411;
      goto LABEL_45;
    case 0x18C:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v360 = 16413;
      else
        v360 = 16414;
      v550 = (WTF *)v360;
      v25 = &v549;
      goto LABEL_435;
    case 0x18D:
      v359 = 16413;
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x80000000000000)
        v359 = 16414;
      v550 = (WTF *)v359;
      v25 = &v548;
      goto LABEL_435;
    case 0x18E:
      v396 = 16413;
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x80000000000000)
        v396 = 16414;
      v550 = (WTF *)v396;
      v25 = &v547;
      goto LABEL_435;
    case 0x18F:
      v373 = 16411;
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x78000000000000)
        v373 = 16412;
      v550 = (WTF *)v373;
      v25 = &v546;
      goto LABEL_435;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v461 = 16412;
      else
        v461 = 16411;
      v550 = (WTF *)v461;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v545, 48, v461, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v25 = &v544;
      goto LABEL_435;
    case 0x191:
      v471 = 16411;
      if (*((_DWORD *)a2 + 18))
        v471 = 16412;
      v550 = (WTF *)v471;
      v25 = &v543;
      goto LABEL_435;
    case 0x192:
      v472 = 16411;
      if (*((_DWORD *)a2 + 18))
        v472 = 16412;
      v550 = (WTF *)v472;
      v25 = &v542;
      goto LABEL_435;
    case 0x193:
      v463 = 16411;
      if (*((_DWORD *)a2 + 18))
        v463 = 16412;
      v550 = (WTF *)v463;
      v25 = &v541;
      goto LABEL_435;
    case 0x195:
      v177 = *((_DWORD *)a2 + 6);
      v178 = *((_DWORD *)this + 41);
      if (v178 <= v177)
      {
        __break(0xC471u);
        JUMPOUT(0x198546310);
      }
      if (v178 <= v177 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198544298);
      }
      goto LABEL_89;
    case 0x196:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v324 = 16411;
      else
        v324 = 16412;
      goto LABEL_524;
    case 0x197:
      v156 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000;
      v28 = 16415;
LABEL_244:
      if (!v156)
        ++v28;
      goto LABEL_45;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
        v550 = (WTF *)16385;
      }
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v540, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      JSC::DFG::LazyNode::LazyNode(&v539, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x199:
      v231 = *((_DWORD *)a2 + 6);
      v232 = *((_DWORD *)this + 41);
      if (v232 <= v231)
      {
        __break(0xC471u);
        JUMPOUT(0x198546328);
      }
      if (v232 <= v231 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198546330);
      }
      if (v232 <= v231 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198546338);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v231 + 1)) & 0xFC000000000000) != 0x2C000000000000)
      {
        v550 = (WTF *)16385;
      }
      goto LABEL_89;
    case 0x19E:
      goto LABEL_370;
    case 0x1A0:
      v221 = *(unsigned int **)(*((_QWORD *)a2 + 9) + 16);
      if (!v221)
        goto LABEL_87;
      v222 = v221[5];
      v223 = v221[6];
      v224 = (unsigned __int16)v221[6];
      v225 = v221[7];
      if ((unsigned __int16)v221[5] != WORD1(v222))
      {
        if ((unsigned __int16)v221[5])
          v226 = 0;
        else
          v226 = WORD1(v222) == 0xFFFF;
        if (v226)
          v227 = 16385;
        else
          v227 = (v222 << 15) | 0x25;
        v550 = (WTF *)v227;
      }
      if (v224 != WORD1(v223))
      {
        if (WORD1(v223) == 0xFFFF && v224 == 0)
          v229 = 16387;
        else
          v229 = (v223 << 15) | 0x25;
      }
      if ((_WORD)v225)
      {
        if (v225 >= 0xFFFF0000 && (unsigned __int16)v225 == 0xFFFF)
          return;
      }
      else if (v225 > 0xFFFEFFFF)
      {
        return;
      }
      v25 = &v564;
LABEL_435:
      JSC::DFG::LazyNode::LazyNode(v25, a2);
      return;
    case 0x1A1:
      v464 = *((_QWORD *)a2 + 9);
      v465 = *(unsigned int *)(v464 + 44);
      v466 = *(unsigned int *)(v464 + 48);
      v467 = (unsigned __int16)*(_DWORD *)(v464 + 44);
      if (v467 != WORD1(v465))
      {
        if (v467)
          v468 = 0;
        else
          v468 = WORD1(v465) == 0xFFFF;
        if (v468)
          v469 = 16385;
        else
          v469 = (v465 << 15) | 0x25;
        v550 = (WTF *)v469;
      }
      if ((unsigned __int16)v466 == WORD1(v466))
        return;
      if ((_WORD)v466)
        v470 = 0;
      else
        v470 = WORD1(v466) == 0xFFFF;
      if (v470)
        goto LABEL_89;
      v324 = (v466 << 15) | 0x25;
LABEL_524:
      v323 = a4;
      goto LABEL_443;
    case 0x1AB:
    case 0x1AC:
      v550 = (WTF *)16423;
      v550 = (WTF *)16406;
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_591;
      v421 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v538, v421, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v25 = &v537;
      goto LABEL_435;
    case 0x1AD:
      v550 = (WTF *)16423;
      v550 = (WTF *)16406;
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_591:
LABEL_570:
      v323 = a4;
      v324 = 16406;
      goto LABEL_443;
    case 0x1AE:
    case 0x1AF:
      v28 = 16410;
      goto LABEL_45;
    case 0x1B0:
      v323 = a4;
      v324 = 16410;
      goto LABEL_443;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x198545A10);
    default:
      v550 = (WTF *)JSC::DFG::Graph::opName(v13);
      v551 = v495;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v550, &v536);
      if (v536)
        v496 = (const char *)(v536 + 16);
      else
        v496 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:453:33), WriteFunctor = (lambda at ./dfg/DFGStoreBarrierInsertionPhase.cpp:468:34), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v496);
      WTF::CString::~CString((WTF::CString *)&v536, v497, v498, v499, v500, v501, v502, v503);
      __break(0xC471u);
      JUMPOUT(0x198545EBCLL);
  }
  while (1)
  {
    v139 = v138 & 0x3FFF;
    if (v139 == 1)
    {
      LOWORD(v157) = 33;
      do
      {
        v158 = v157 & 0x3FFF;
        if (v158 == 1)
          goto LABEL_361;
        if (v158 == 2)
          v159 = 16385;
        else
          v159 = 16387;
        if ((v157 & 0x4000) != 0)
          v157 = v159;
        else
          v157 = v158 | 0x4000u;
        if (v158 == 40)
          v157 = 16385;
        if (v158 == 3)
          v157 = 16385;
      }
      while (v157 != 16386);
LABEL_160:
      v76 = 1;
      goto LABEL_362;
    }
    if (v139 == 3)
      goto LABEL_228;
    v140 = 16385;
    if (v139 != 40)
      break;
LABEL_229:
    v138 = v140;
    if (v140 == 16387)
      goto LABEL_160;
  }
  if ((v138 & 0x4000) == 0)
  {
    v140 = v139 | 0x4000u;
    goto LABEL_229;
  }
  if (v139 != 2)
    goto LABEL_160;
LABEL_228:
  v140 = 16385;
  goto LABEL_229;
}

uint64_t *JSC::DFG::`anonymous namespace'::StoreBarrierInsertionPhase<(JSC::DFG::`anonymous namespace'::PhaseMode)1>::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::AbstractHeap const&)#1}::operator()(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v26;
  uint64_t *v27;

  if (*a2 == 16386)
  {
LABEL_15:
    if (*result)
    {
      v14 = *(_DWORD *)(*result - 4);
      if (v14)
      {
        v26 = *result;
        v27 = result;
        v15 = 0;
        v16 = v14 - 1;
        do
        {
          v17 = v16;
          v18 = (_QWORD *)(v26 + 16 * v16);
          if (*v18
            && (*v18 & 0x7FFFLL) != 0x4000
            && JSC::DFG::AbstractHeap::overlaps((uint64_t *)(v26 + 16 * v16), a2))
          {
            *(_DWORD *)(*(_QWORD *)(v26 + 16 * v16 + 8) + 88) = 0;
            *v18 = 0x4000;
            ++v15;
          }
          --v16;
        }
        while (v17);
        v19 = *v27;
        if (v15)
        {
          *(_DWORD *)(v19 - 16) += v15;
          v20 = *v27;
          if (*v27)
            v21 = *(_DWORD *)(v20 - 12);
          else
            v21 = 0;
          *(_DWORD *)(v20 - 12) = v21 - v15;
          v19 = *v27;
        }
        result = v27;
        if (v19)
        {
          v22 = *(_DWORD *)(v19 - 4);
          v23 = 6 * *(_DWORD *)(v19 - 12);
          if (v22 >= 9 && v23 < v22)
            return (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::shrinkToBestSize(v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    v8 = *a2;
    while (1)
    {
      v9 = v8 & 0x3FFF;
      if (v9 == 1)
        break;
      if (v9 == 2)
        v10 = 16385;
      else
        v10 = 16387;
      if ((v8 & 0x4000) != 0)
        v8 = v10;
      else
        v8 = v9 | 0x4000u;
      if (v9 == 40)
        v8 = 16385;
      if (v9 == 3)
        v8 = 16385;
      if (v8 == 16386)
        goto LABEL_15;
    }
    LOWORD(v11) = 16386;
    while (1)
    {
      v12 = v11 & 0x3FFF;
      if (v12 == 1)
        break;
      if (v12 == 2)
        v13 = 16385;
      else
        v13 = 16387;
      if (v12 == 3)
        v11 = 16385;
      else
        v11 = v13;
      if (v11 == *a2)
        goto LABEL_15;
    }
  }
  return result;
}

void JSC::DFG::StrengthReductionPhase::handleNode(JSC::DFG::StrengthReductionPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::DFG::Graph *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v39;
  int v40;
  const JSC::CodeOrigin *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  JSC::RecordedStatuses *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 *v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::DFG::Node *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  BOOL v86;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  BOOL v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  JSC::DFG::Graph *v99;
  unsigned int v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  WTF::AtomStringImpl *v119;
  int v120;
  __int16 v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  double v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v165;
  JSC::DFG::Graph *v166;
  unsigned int v167;
  __int128 *v168;
  WTF::StringImpl *v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  unint64_t *v177;
  unint64_t v178;
  const WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  JSC::DFG::Node *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  long double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t inserted;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  __int128 *v218;
  unint64_t v219;
  int v220;
  __int16 v221;
  unint64_t v222;
  BOOL v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  unint64_t v227;
  unsigned int v228;
  uint64_t v229;
  BOOL v230;
  uint64_t *v231;
  unint64_t v232;
  char v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  JSC::DFG::Graph *v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  char v247;
  char v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 *v282;
  unint64_t v283;
  int v284;
  __int16 v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  BOOL v296;
  unint64_t v298;
  JSC::DFG::Graph *v299;
  unsigned int v300;
  __int128 *v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  char v315;
  char v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t *v321;
  unint64_t v322;
  double v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned __int8 *v328;
  uint64_t v330;
  uint64_t v331;
  char hasExitSite;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  JSC::DFG::Graph *v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  __int16 v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  unint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  __int128 *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  __int128 *v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int8x16_t v386;
  unint64_t v387;
  WTF::Lock *v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  BOOL v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  BOOL v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __int16 v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  unint64_t v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  __int128 *v422;
  unint64_t v423;
  JSC::DFG::Graph *v424;
  int v425;
  __int128 *v426;
  int v427;
  unsigned __int16 *v428;
  int v429;
  int v430;
  signed int v431;
  int v432;
  int v433;
  int v434;
  signed int v435;
  int v436;
  int v437;
  unsigned int v438;
  int v439;
  unint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  JSC::DFG::LazyJSValue *v450;
  const WTF::String *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  WTF::StringImpl *v459;
  __int128 *v460;
  unint64_t v461;
  unsigned int v462;
  unint64_t *v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t *v466;
  unint64_t *v467;
  unint64_t v468;
  JSC::DFG::Graph *v469;
  unsigned int v470;
  __int128 *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  double v477;
  double v478;
  float v479;
  unsigned int v480;
  StringView v481;
  unint64_t v482;
  uint64_t v483;
  double v484;
  double v485;
  float v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  uint64_t v490;
  double v491;
  double v492;
  float v493;
  unsigned int v494;
  uint64_t v495;
  unint64_t v496;
  unsigned int v497;
  unint64_t v498;
  unint64_t v499;
  WTF::AtomStringImpl *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  WTF::AtomStringImpl *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  WTF::StringImpl *v514;
  WTF::StringImpl *v515;
  int v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  unint64_t v520;
  WTF::Lock *v521;
  int v522;
  WTF::StringImpl *v523;
  JSC::DFG::Node *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  JSC::DFG::Node *v537;
  JSC::DFG::LazyJSValue *v538;
  const WTF::String *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  WTF::AtomStringImpl *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  WTF::StringImpl *v558;
  BOOL v559;
  __int128 *v560;
  unsigned int v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unsigned int v568;
  WTF::AtomStringImpl *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  WTF::StringImpl *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  WTF::StringImpl *v583;
  int v584;
  uint64_t v585;
  JSC::DFG::Node *v586;
  JSC::DFG::LazyJSValue *v587;
  WTF::StringImpl *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  void *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t *v612;
  int v613;
  JSC::Structure *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  void *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  void *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  void *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  char v706;
  WTF *v707;
  unsigned int v708;
  uint64_t v709;
  unint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  __int128 *v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  unint64_t v720;
  unsigned int v721;
  uint64_t v722;
  BOOL v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t *v726;
  WTF::Thread *v727;
  unsigned int v728;
  uint64_t v729;
  char v730;
  unint64_t v731;
  int v732;
  int8x16_t *v733;
  unint64_t v734;
  unint64_t v735;
  size_t v736;
  int v737;
  WTF::StringImpl *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  __int16 v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  _QWORD *v746;
  unint64_t v747;
  void *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  uint64_t v761;
  unint64_t v762;
  void *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  WTF::StringImpl *v773;
  WTF::StringImpl *v774;
  WTF::StringImpl *v775;
  uint64_t v776;
  unsigned int v777;
  BOOL v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  _QWORD *v782;
  uint64_t v783;
  char v784;
  _QWORD *v785;
  char v786;
  _QWORD *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t *v790;
  __int16 v791;
  unsigned int v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  int8x16_t *v798;
  unint64_t v799;
  unint64_t v800;
  size_t v801;
  const WTF::StringImpl *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v809;
  uint64_t v810;
  WTF::StringImpl *v811;
  uint64_t v812;
  _QWORD *v813;
  WTF::AtomStringImpl *v814;
  WTF::StringImpl *v815;
  unint64_t v816;
  void *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  void *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  void *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unsigned __int8 **v840;
  unsigned __int8 **v841;
  uint64_t *v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  const JSC::DFG::NodeOrigin *v850;
  unsigned int v851;
  unsigned int v852;
  int v853;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unsigned int v858;
  __int128 *v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  WTF::StringImpl *v869;
  WTF::StringImpl *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  __int128 *v878;
  unint64_t v879;
  double v880;
  JSC::DFG::Node *v881;
  const WTF::String *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  void *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  unsigned int v927;
  uint16x8_t v928;
  double v929;
  float v930;
  unint64_t v931;
  void *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  void *v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  void *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  void *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  __int128 *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  void *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  unint64_t v994;
  void *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  void *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  int v1010;
  int v1011;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  void *v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  BOOL v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  BOOL v1041;
  uint64_t v1042;
  uint64_t v1043;
  unsigned int v1044;
  BOOL v1045;
  uint64_t v1046;
  uint64_t v1047;
  unsigned int v1048;
  BOOL v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  WTF::StringImpl *v1058;
  unint64_t v1059;
  void *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  JSC::DFG::LazyJSValue *v1068;
  const WTF::String *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  int v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  void *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  WTF::AtomStringImpl *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  void *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  WTF::StringImpl *v1146;
  WTF::StringImpl *v1147;
  uint64_t v1148;
  uint64_t v1149;
  unsigned int v1150;
  unsigned int v1151;
  unsigned int v1152;
  int v1153;
  uint64_t v1154;
  uint64_t v1155;
  unsigned __int8 *v1156;
  uint64_t v1158;
  _BOOL4 v1159;
  unsigned int v1160;
  uint64_t v1161;
  unsigned int v1162;
  BOOL v1163;
  uint64_t v1164;
  uint64_t v1165;
  unsigned int v1166;
  BOOL v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  void *v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  void *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  void *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  int v1194;
  int v1195;
  unsigned int v1196;
  unsigned int v1197;
  unint64_t v1198;
  int v1199;
  uint64_t v1200;
  BOOL v1201;
  uint64_t v1202;
  BOOL v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  void *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  unsigned int v1215;
  unint64_t v1216;
  unsigned int v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  void *v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  unint64_t v1253;
  void *v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  unint64_t v1267;
  void *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  void *v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  unint64_t v1303;
  unint64_t v1304;
  void *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  unint64_t v1319;
  void *v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  void *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  void *v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  void *v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  WTF::AtomStringImpl *v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  WTF::StringImpl *v1364;
  WTF::StringImpl *v1365;
  unsigned int v1366;
  unsigned int v1367;
  WTF::AtomStringImpl *v1368;
  int v1369;
  WTF::StringImpl *v1370;
  WTF::StringImpl *v1371;
  unint64_t v1372;
  void *v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  unint64_t v1380;
  void *v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  const char *v1388;
  int v1389;
  uint64_t v1390;
  unint64_t v1391;
  void *v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  JSC::DFG::LazyJSValue *v1400;
  const WTF::String *v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  WTF::StringImpl *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  _QWORD *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  WTF::StringImpl *v1438;
  void *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  unint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  WTF::StringImpl *v1457;
  void *v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  unsigned int v1474;
  unsigned int v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  void *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  _QWORD *v1506;
  _QWORD *v1507;
  unsigned int v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  const JSC::CodeOrigin *v1512;
  unsigned int v1513;
  JSC::RecordedStatuses *v1514;
  void *v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  unint64_t v1522;
  uint64_t v1523;
  __int128 *v1524;
  uint64_t v1525;
  unint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  WTF::StringImpl *v1531;
  void *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  unint64_t v1546;
  WTF::StringImpl *v1547;
  void *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  WTF::StringImpl *v1571;
  void *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  const WTF::StringImpl *v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  unint64_t v1594;
  void *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  WTF::AtomStringImpl *v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  WTF::StringImpl *v1609;
  uint64_t v1610;
  uint64_t v1611;
  BOOL v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  BOOL v1616;
  uint64_t v1617;
  uint64_t v1618;
  BOOL v1619;
  uint64_t v1620;
  unsigned int v1621;
  BOOL v1622;
  uint64_t v1623;
  uint64_t v1624;
  unint64_t v1626;
  void *v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  unint64_t v1634;
  void *v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  void *v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  int v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  void *v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  int v1665;
  unint64_t v1666;
  void *v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  void *v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unsigned int v1695;
  BOOL v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  unsigned int v1700;
  BOOL v1701;
  uint64_t v1702;
  uint64_t v1703;
  unint64_t v1704;
  void *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  int8x16_t *v1713;
  size_t v1714;
  WTF::StringImpl *v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  unint64_t v1728;
  void *v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  double v1738;
  double v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  WTF::StringImpl *v1748;
  unint64_t v1749;
  void *v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  int v1769;
  int v1770;
  int v1771;
  uint64_t v1772;
  uint64_t *v1773;
  __int128 *v1774;
  unsigned int v1775;
  uint64_t v1776;
  uint64_t v1777;
  __int128 *v1778;
  uint64_t v1779;
  unint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  _BYTE v1785[24];
  _BYTE v1786[24];
  _BYTE v1787[24];
  _BYTE v1788[24];
  _BYTE v1789[24];
  __int128 v1790;
  _BYTE v1791[24];
  __int128 v1792;
  _BYTE v1793[24];
  __int128 v1794;
  _BYTE v1795[24];
  __int128 v1796;
  _BYTE v1797[24];
  uint64_t v1798;
  uint64_t v1799;
  __int16 v1800;
  uint64_t v1801;
  uint64_t v1802;
  __int16 v1803;
  __int128 v1804;
  uint64_t v1805;
  uint64_t v1806;
  unint64_t v1807;
  __int16 v1808;
  uint64_t v1809;
  uint64_t v1810;
  char *v1811;
  JSC::DFG::StrengthReductionPhase *v1812;
  unint64_t *v1813;
  char v1814;
  _BYTE v1815[24];
  _BYTE v1816[24];
  __int128 v1817;
  _BYTE v1818[24];
  unint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  __int16 v1823;
  _BYTE v1824[24];
  uint64_t v1825;
  uint64_t v1826;
  __int16 v1827;
  uint64_t v1828;
  uint64_t v1829;
  __int16 v1830;
  _BYTE v1831[24];
  _BYTE v1832[24];
  _BYTE v1833[24];
  _BYTE v1834[24];
  _BYTE v1835[24];
  unint64_t v1836;
  uint64_t v1837;
  _BYTE v1838[24];
  _BYTE v1839[24];
  _BYTE v1840[24];
  unint64_t v1841;
  WTF::StringImpl *v1842[2];
  _BYTE v1843[24];
  _BYTE v1844[24];
  WTF::StringImpl *v1845[3];
  WTF::StringImpl *v1846[3];
  WTF::StringImpl *v1847[3];
  WTF::StringImpl *v1848;
  uint64_t v1849;
  WTF *v1850;
  uint64_t v1851;
  unsigned int v1852[6];
  WTF::StringImpl *v1853;
  __int128 v1854;
  __int16 v1855;
  _BYTE __e[24];
  int v1857;
  __int128 v1858;
  uint64_t v1859;
  uint64_t v1860;

  v1860 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 30);
  v10 = *(unsigned __int16 *)(v9 + 18);
  switch(*(_WORD *)(v9 + 18))
  {
    case 0x1C:
      v12 = *((_QWORD *)this + 4);
      v13 = *(_QWORD *)v9;
      if ((v13 & 1) == 0)
        goto LABEL_4;
      v390 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v391 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v391 != 0x3FFFFFFF)
          ? (v392 = (_DWORD)v391 == -1)
          : (v392 = 1),
            v392))
      {
        v393 = 2;
      }
      else if (v391 >> 28)
      {
        v1251 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v1251 = v390;
        *(_DWORD *)(v1251 + 8) = v391;
        v393 = 1;
        v390 = v1251;
      }
      else
      {
        v393 = v390;
        v390 = v391 << 36;
      }
      v13 = v390 | v393;
      if (((v390 | v393) & 1) != 0)
      {
        v394 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v395 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v395 != 0x3FFFFFFF)
            ? (v396 = (_DWORD)v395 == -1)
            : (v396 = 1),
              v396))
        {
          v397 = 2;
        }
        else if (v395 >> 28)
        {
          v1252 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1252 = v394;
          *(_DWORD *)(v1252 + 8) = v395;
          v397 = 1;
          v394 = v1252;
        }
        else
        {
          v397 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          v394 = v395 << 36;
        }
        v14 = 0;
        v15 = v394 | v397;
      }
      else
      {
LABEL_4:
        v14 = 1;
        v15 = v13;
      }
      if (!*(_BYTE *)(v12 + 961))
      {
        v16 = 0;
        v17 = v15 & 1;
        v18 = 2;
        goto LABEL_7;
      }
      if ((v15 & 2) != 0)
      {
        LODWORD(v61) = -1;
      }
      else if ((v15 & 1) != 0)
      {
        LODWORD(v61) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v61 = v15 >> 36;
      }
      v62 = (uint64_t *)(v12 + 40);
      v18 = 2;
      while (2)
      {
        v63 = (uint64_t *)(v15 & 0xFFFFFFFF8);
        v64 = v15 & 0xFFFFFFFF8;
        if ((v15 & 1) != 0)
          v64 = *v63;
        v65 = (uint64_t *)(v64 + 8);
        if (!v64)
          v65 = v62;
        v66 = *v65;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 56) + 80) + 12) <= v61 >> 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19854970CLL);
        }
        v17 = v15 & 1;
        v67 = *(unsigned int **)(v66 + 224);
        if (!v67)
          goto LABEL_74;
        v68 = v67[3];
        if (!(_DWORD)v68)
          goto LABEL_74;
        v69 = v61 >> 2;
        v70 = (_DWORD *)(*(_QWORD *)v67 + 8);
        v71 = 24 * v68;
        do
        {
          if (*(v70 - 2) <= v69 && *(v70 - 1) > v69)
          {
            v171 = (4 * *v70);
            if (((*v70 >> 26) & 0xF) != 0)
            {
              v172 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v172 = v64;
              *(_DWORD *)(v172 + 8) = v171;
              v64 = 1;
            }
            else
            {
              v172 = v171 << 36;
            }
            v18 = v172 | v64;
            v16 = 1;
            goto LABEL_7;
          }
          v70 += 6;
          v71 -= 24;
        }
        while (v71);
LABEL_74:
        if (v64)
        {
          v15 = *(_QWORD *)(v64 + 16);
          if ((v15 & 2) != 0)
          {
            LODWORD(v61) = -1;
          }
          else if ((v15 & 1) != 0)
          {
            LODWORD(v61) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v61 = v15 >> 36;
          }
          if (v17 && v63)
          {
            WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
            v15 = *(_QWORD *)(v64 + 16);
          }
          if ((v15 & 1) != 0)
          {
            v776 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
            if ((v15 & 2) != 0
              || ((v777 = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8), v777 != 0x3FFFFFFF) ? (v778 = v777 == -1) : (v778 = 1),
                  v778))
            {
              v779 = 2;
            }
            else if (v777 >> 28)
            {
              v1712 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1712 = v776;
              *(_DWORD *)(v1712 + 8) = v777;
              v779 = 1;
              v776 = v1712;
            }
            else
            {
              v779 = v776;
              v776 = 0;
            }
            v15 = v776 | v779;
          }
          continue;
        }
        break;
      }
      v16 = 0;
LABEL_7:
      if (v17 && (v15 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      if ((v14 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      if ((v16 & 1) == 0)
      {
        v19 = *(_QWORD **)(*((_QWORD *)this + 30) + 72);
        v20 = v19;
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
        if (v21 != v19)
          *v19 = v21;
        v22 = v21[3];
        v23 = *((unsigned int *)this + 58);
        while (v23)
        {
          --v23;
          v25 = *((_QWORD *)this + 28);
          if (v23 >= *(unsigned int *)(v25 + 220))
          {
            __break(0xC471u);
            JUMPOUT(0x19854C754);
          }
          v26 = *(_QWORD *)(*(_QWORD *)(v25 + 208) + 8 * v23);
          if (*(_WORD *)(v26 + 18) == 16)
          {
            v27 = *(_QWORD **)(v26 + 72);
            v28 = v27;
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
            if (v29 != v27)
              *v27 = v29;
            if (v29[3] == v22)
            {
              if (!v26)
                return;
              v82 = *((_QWORD *)this + 30);
              *(_WORD *)(v82 + 18) = 29;
              *(_QWORD *)(v82 + 32) = 0;
              *(_QWORD *)(v82 + 40) = 0;
              *(_QWORD *)(v82 + 24) = 0;
              v83 = *((_QWORD *)this + 4);
              v84 = *(_DWORD *)(v83 + 944);
              if (v84)
                v85 = v84 == 2;
              else
                v85 = 1;
              if (!v85)
              {
                if ((_BYTE)qword_1ECF4C32A)
                  v86 = 0;
                else
                  v86 = byte_1ECF4C323 == 0;
                if (!v86 || BYTE2(qword_1ECF4C32A) != 0)
                  WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
                v88 = *(unsigned int *)(v83 + 60);
                while ((_DWORD)v88)
                {
                  if (*(_DWORD *)(v83 + 60) <= --v88)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19854CA90);
                  }
                  v89 = *(_QWORD *)(*(_QWORD *)(v83 + 48) + 8 * v88);
                  if (v89)
                  {
                    v90 = *(_DWORD *)(v89 + 36);
                    if (v90)
                    {
                      v91 = v90 - 1;
                      v92 = 8 * v91;
                      do
                      {
                        if (*(_DWORD *)(v89 + 36) <= v91)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19854C950);
                        }
                        v93 = *(_QWORD **)(*(_QWORD *)(v89 + 24) + v92);
                        v93[3] = 0;
                        v93[4] = 0;
                        v93[5] = 0;
                        v92 -= 8;
                        --v91;
                      }
                      while (v91 != -1);
                    }
                  }
                }
                *(_DWORD *)(v83 + 944) = 0;
              }
              goto LABEL_63;
            }
          }
          v24 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
          *(_QWORD *)__e = (v22 << 15) | 2;
          __e[8] = 0;
          JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v24, (JSC::DFG::Node *)v26, (uint64_t)__e, (uint64_t)__e, (uint64_t)&v1854, (uint64_t)&v1858, a7, a8);
          if (__e[8])
            return;
        }
      }
      return;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x57:
      if (((*(_QWORD *)(v9 + 24) >> 50) & 0x3F) - 26 <= 2)
        goto LABEL_537;
      return;
    case 0x2C:
    case 0x30:
LABEL_537:
      JSC::DFG::StrengthReductionPhase::handleCommutativity((uint64_t)this);
      return;
    case 0x2E:
      JSC::DFG::StrengthReductionPhase::handleCommutativity((uint64_t)this);
      v154 = *((_QWORD *)this + 30);
      if ((*(_BYTE *)(v154 + 30) & 0xFC) == 0
        || *(unsigned __int16 *)((*(_QWORD *)(v154 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
      {
        return;
      }
      if (**(_QWORD **)((*(_QWORD *)(v154 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000
        || **(_QWORD **)((*(_QWORD *)(v154 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48) != 0)
      {
        return;
      }
      JSC::DFG::InsertionSet::insertCheck((JSC::DFG::StrengthReductionPhase *)((char *)this + 72), *((JSC::DFG::Graph **)this + 4), *((unsigned int *)this + 58), (JSC::DFG::Node *)v154, v150, v151, v152, v153);
      v80 = *((_QWORD *)this + 30);
      v156 = *(_QWORD *)(v80 + 40);
      *(_QWORD *)(v80 + 32) = v156;
      *(_QWORD *)(v80 + 40) = 0;
      if ((*(_QWORD *)(v80 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854A4CCLL);
      }
      if ((v156 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854A4ECLL);
      }
      goto LABEL_197;
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*(_BYTE *)(v9 + 30) & 0xFC) == 0
        || *(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
      {
        return;
      }
      if (**(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000
        || (**(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48) & 0x1FLL) != 0)
      {
        return;
      }
      JSC::DFG::InsertionSet::insertCheck((JSC::DFG::StrengthReductionPhase *)((char *)this + 72), *((JSC::DFG::Graph **)this + 4), *((unsigned int *)this + 58), (JSC::DFG::Node *)v9, a5, a6, a7, a8);
      v80 = *((_QWORD *)this + 30);
      v165 = *(_QWORD *)(v80 + 40);
      *(_QWORD *)(v80 + 32) = v165;
      *(_QWORD *)(v80 + 40) = 0;
      if ((*(_QWORD *)(v80 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854B034);
      }
      if ((v165 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198547910);
      }
      goto LABEL_197;
    case 0x37:
      v308 = *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL;
      if (*(_WORD *)(v308 + 0x12) != 53
        || *(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x20) & 0xFF00FFFFFFFFFFFFLL)
                               + 0x12) > 2u
        || (**(_QWORD **)((*(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x20) & 0xFF00FFFFFFFFFFFFLL)
                        + 0x48) >= 0xFFFE000000000000
          ? (v559 = (**(_QWORD **)((*(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x20) & 0xFF00FFFFFFFFFFFFLL)
                                 + 0x48) & 0x1FLL) == 0)
          : (v559 = 1),
            v559 || *(_DWORD *)(v9 + 72) == 4))
      {
        if ((*(_DWORD *)(v9 + 56) & 0x4000) != 0)
          return;
        if (!v308)
        {
          __break(0xC471u);
          JUMPOUT(0x19854AD98);
        }
        if ((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19854ADB8);
        }
        v309 = (*(_DWORD *)(v9 + 56) & 7) - 3;
        v310 = 1;
        if (v309 <= 4)
          v310 = dword_19915652C[v309];
      }
      else
      {
        if (!v308)
        {
          __break(0xC471u);
          JUMPOUT(0x19854B054);
        }
        if ((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19854B074);
        }
        v310 = 1;
        if ((*(_DWORD *)(v9 + 56) & 7u) - 3 <= 4)
          v310 = dword_19915652C[(*(_DWORD *)(v9 + 56) & 7) - 3];
      }
      *(_WORD *)(v9 + 18) = 4;
      *(_DWORD *)(v9 + 56) = v310;
      goto LABEL_63;
    case 0x3B:
    case 0x3C:
      v94 = v10 == 59;
      if (v10 == 59 && (*(_QWORD *)(v9 + 24) & 0xFC000000000000) != 0x4000000000000)
        return;
      v95 = *((_QWORD *)this + 30);
      while (1)
      {
        v95 = *(_QWORD *)(v95 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v96 = (*(_DWORD *)(v95 + 56) & 7u) - 3 > 4 ? 1 : dword_19915652C[(*(_DWORD *)(v95 + 56) & 7) - 3];
        v97 = (*(_DWORD *)(v9 + 56) & 7u) - 3 > 4 ? 1 : dword_19915652C[(*(_DWORD *)(v9 + 56) & 7) - 3];
        if (v96 == v97)
          break;
        v98 = *(unsigned __int16 *)(v95 + 18);
        if (v98 != 60)
        {
          if (v98 != 59)
            return;
          v94 = 1;
          if ((*(_QWORD *)(v95 + 24) & 0xFC000000000000) != 0x4000000000000)
            return;
        }
      }
      JSC::DFG::InsertionSet::insertCheck((JSC::DFG::StrengthReductionPhase *)((char *)this + 72), *((JSC::DFG::Graph **)this + 4), *((unsigned int *)this + 58), (JSC::DFG::Node *)v9, a5, a6, a7, a8);
      if (!v94)
        goto LABEL_1078;
      v1010 = *(_DWORD *)(v95 + 56) & 7;
      v34 = v1010 == 7;
      v1011 = (1 << v1010) & 0xA8;
      if ((v34 || (*(_DWORD *)(v95 + 56) & 7) != 7) && v1011 != 0)
        return;
      v1013 = *((unsigned int *)this + 58);
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1824, *((const JSC::DFG::NodeOrigin **)this + 30));
      JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 72, v1013, (uint64_t)v1824, v95 | 0x4000000000000, v1014, v1015, v1016, v1017);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1824, v1018, v1019, v1020, v1021, v1022, v1023, v1024);
LABEL_1078:
      v1025 = 0xC4000000000000;
      if ((*(_DWORD *)(v95 + 56) & 7) != 3)
        v1025 = 0;
      v1026 = 0xD0000000000000;
      if ((*(_DWORD *)(v95 + 56) & 7) != 5)
        v1026 = v1025;
      v1027 = *((_QWORD *)this + 30);
      *(_QWORD *)(v1027 + 24) = v1026 | v95;
      JSC::DFG::Node::convertToIdentity(v1027);
      goto LABEL_63;
    case 0x3E:
      JSC::DFG::StrengthReductionPhase::handleCommutativity((uint64_t)this);
      v78 = (JSC::DFG::Node *)*((_QWORD *)this + 30);
      if (*(unsigned __int16 *)((*((_QWORD *)v78 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      if (**(_QWORD **)((*((_QWORD *)v78 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000
        || **(_QWORD **)((*((_QWORD *)v78 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48) != 0)
      {
        return;
      }
      JSC::DFG::InsertionSet::insertCheck((JSC::DFG::StrengthReductionPhase *)((char *)this + 72), *((JSC::DFG::Graph **)this + 4), *((unsigned int *)this + 58), v78, v74, v75, v76, v77);
      v80 = *((_QWORD *)this + 30);
      v81 = *(_QWORD *)(v80 + 40);
      *(_QWORD *)(v80 + 32) = v81;
      *(_QWORD *)(v80 + 40) = 0;
      if ((*(_QWORD *)(v80 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854B8ACLL);
      }
      if ((v81 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198547388);
      }
LABEL_197:
      v157 = 1;
      if ((*(_DWORD *)(v80 + 56) & 7u) - 3 <= 4)
        v157 = dword_19915652C[(*(_DWORD *)(v80 + 56) & 7) - 3];
      *(_WORD *)(v80 + 18) = 4;
      *(_DWORD *)(v80 + 56) = v157;
      *((_BYTE *)this + 248) = 1;
      return;
    case 0x40:
      v125 = *(_QWORD *)(v9 + 32);
      if (*(unsigned __int16 *)((v125 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v126 = **(_QWORD **)((v125 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (v126 < 0xFFFE000000000000)
        return;
      v127 = v125 & 0xFC000000000000;
      v128 = (_DWORD)v126 != 0x80000000 && v127 == 0x4000000000000;
      if (!v128 || (*(_QWORD *)(v9 + 24) & 0xFC000000000000) != 0x4000000000000)
        return;
      *(_WORD *)(v9 + 18) = 62;
      v130 = *((unsigned int *)this + 58);
      v131 = *(_QWORD *)v9;
      if ((*(_QWORD *)v9 & 1) != 0)
      {
        v1035 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
        if ((v131 & 2) != 0
          || ((v1036 = *(unsigned int *)((v131 & 0xFFFFFFFF8) + 8), (_DWORD)v1036 != 0x3FFFFFFF)
            ? (v1037 = (_DWORD)v1036 == -1)
            : (v1037 = 1),
              v1037))
        {
          v1038 = 2;
        }
        else if (v1036 >> 28)
        {
          v1716 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1716 = v1035;
          *(_DWORD *)(v1716 + 8) = v1036;
          v1038 = 1;
          v1035 = v1716;
        }
        else
        {
          v1038 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
          v1035 = v1036 << 36;
        }
        v131 = v1035 | v1038;
      }
      v1828 = v131;
      v132 = *(_QWORD *)(v9 + 8);
      if ((v132 & 1) != 0)
      {
        v1039 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
        if ((v132 & 2) != 0
          || ((v1040 = *(unsigned int *)((v132 & 0xFFFFFFFF8) + 8), (_DWORD)v1040 != 0x3FFFFFFF)
            ? (v1041 = (_DWORD)v1040 == -1)
            : (v1041 = 1),
              v1041))
        {
          v1042 = 2;
        }
        else if (v1040 >> 28)
        {
          v1717 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1717 = v1039;
          *(_DWORD *)(v1717 + 8) = v1040;
          v1042 = 1;
          v1039 = v1717;
        }
        else
        {
          v1042 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
          v1039 = v1040 << 36;
        }
        v132 = v1039 | v1042;
      }
      v1829 = v132;
      v1830 = *(_WORD *)(v9 + 16);
      *(_QWORD *)(v9 + 32) = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 9, v130, (uint64_t)&v1828, -(int)v126 | 0xFFFE000000000000, 0, a6, a7, a8) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v9 + 38) << 48);
      if ((v1829 & 1) != 0 && (v1829 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1829 & 0xFFFFFFFF8, v133, v134, v135, v136, v137, v138, v139);
      if ((v1828 & 1) != 0 && (v1828 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1828 & 0xFFFFFFFF8, v133, v134, v135, v136, v137, v138, v139);
      goto LABEL_63;
    case 0x42:
      JSC::DFG::StrengthReductionPhase::handleCommutativity((uint64_t)this);
      v158 = *((_QWORD *)this + 30);
      v159 = *(_QWORD *)(v158 + 32);
      if (*(unsigned __int16 *)((v159 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v160 = **(_QWORD **)((v159 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (!(v160 >> 49))
        return;
      v161 = (double)(int)v160;
      if (v160 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v161 = v160 - 0x2000000000000;
      if (v161 != 2.0)
        return;
      v162 = *(_QWORD *)(v158 + 24);
      v163 = (v162 >> 50) & 0x3F;
      if ((_DWORD)v163 == 1)
        goto LABEL_206;
      if ((_DWORD)v163 == 49)
        goto LABEL_698;
      if ((_DWORD)v163 != 52)
        return;
LABEL_206:
      if ((*(_DWORD *)(v158 + 72) - 1) > 1)
        return;
LABEL_698:
      *(_WORD *)(v158 + 18) = 62;
      *(_QWORD *)(v158 + 32) = v162 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v159) << 48);
      goto LABEL_63;
    case 0x44:
      if ((*(_QWORD *)(v9 + 24) & 0xFC000000000000) != 0xC4000000000000)
        return;
      v196 = *(_QWORD *)(v9 + 32);
      if ((v196 & 0xFC000000000000) != 0xC4000000000000)
        return;
      if (*(unsigned __int16 *)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v197 = **(_QWORD **)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (!(v197 >> 49))
        return;
      v198 = (double)(int)v197;
      if (v197 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v198 = v197 - 0x2000000000000;
      if (v198 == 0.0)
        return;
      if (((*(_QWORD *)&v198 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        return;
      *(_DWORD *)__e = 0;
      if (frexp(v198, (int *)__e) != 0.5 || *(_DWORD *)__e == 1024)
        return;
      v202 = ldexp(1.0, 1 - *(_DWORD *)__e);
      v203 = *((unsigned int *)this + 58);
      v204 = *(_QWORD *)v9;
      if ((*(_QWORD *)v9 & 1) != 0)
      {
        v1218 = *(_QWORD *)(v204 & 0xFFFFFFFF8);
        if ((v204 & 2) != 0
          || (v1219 = *(unsigned int *)((v204 & 0xFFFFFFFF8) + 8), (_DWORD)v1219 == 0x3FFFFFFF)
          || (_DWORD)v1219 == -1)
        {
          v1220 = 2;
        }
        else if (v1219 >> 28)
        {
          v1740 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1740 = v1218;
          *(_DWORD *)(v1740 + 8) = v1219;
          v1220 = 1;
          v1218 = v1740;
        }
        else
        {
          v1220 = *(_QWORD *)(v204 & 0xFFFFFFFF8);
          v1218 = v1219 << 36;
        }
        v204 = v1218 | v1220;
      }
      v1825 = v204;
      v205 = *(_QWORD *)(v9 + 8);
      if ((v205 & 1) != 0)
      {
        v1221 = *(_QWORD *)(v205 & 0xFFFFFFFF8);
        if ((v205 & 2) != 0
          || (v1222 = *(unsigned int *)((v205 & 0xFFFFFFFF8) + 8), (_DWORD)v1222 == 0x3FFFFFFF)
          || (_DWORD)v1222 == -1)
        {
          v1223 = 2;
        }
        else if (v1222 >> 28)
        {
          v1741 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1741 = v1221;
          *(_DWORD *)(v1741 + 8) = v1222;
          v1223 = 1;
          v1221 = v1741;
        }
        else
        {
          v1223 = *(_QWORD *)(v205 & 0xFFFFFFFF8);
          v1221 = v1222 << 36;
        }
        v205 = v1221 | v1223;
      }
      v1826 = v205;
      v1827 = *(_WORD *)(v9 + 16);
      inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 9, v203, (uint64_t)&v1825, *(_QWORD *)&v202 + 0x2000000000000, 1, v199, v200, v201);
      if ((v1826 & 1) != 0 && (v1826 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1826 & 0xFFFFFFFF8, v206, v207, v208, v209, v210, v211, v212);
      if ((v1825 & 1) != 0 && (v1825 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1825 & 0xFFFFFFFF8, v206, v207, v208, v209, v210, v211, v212);
      v214 = *((_QWORD *)this + 30);
      *(_WORD *)(v214 + 18) = 66;
      *(_QWORD *)(v214 + 32) = inserted & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
      goto LABEL_63;
    case 0x45:
      v291 = *(_QWORD *)(v9 + 24);
      if ((v291 & 0xFC000000000000) == 0x4000000000000
        && *(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
      {
        v292 = **(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (v292 >= 0xFFFE000000000000)
        {
          v293 = v291 & 0xFF00FFFFFFFFFFFFLL;
          if (*(_WORD *)(v293 + 18) == 69 && (*(_QWORD *)(v293 + 24) & 0xFC000000000000) == 0x4000000000000)
          {
            v294 = *(_QWORD *)(v293 + 32) & 0xFF00FFFFFFFFFFFFLL;
            if (*(unsigned __int16 *)(v294 + 18) <= 2u)
            {
              v295 = **(_QWORD **)(v294 + 72);
              v296 = v295 < 0xFFFE000000000000 || (_DWORD)v292 == 0x80000000;
              if (!v296 && (_DWORD)v295 != 0x80000000)
              {
                if ((v295 & 0x80000000) != 0)
                  LODWORD(v295) = -(int)v295;
                if ((v292 & 0x80000000) != 0)
                  LODWORD(v292) = -(int)v292;
                if (v295 <= v292)
                  JSC::DFG::StrengthReductionPhase::convertToIdentityOverChild1((JSC::DFG::Graph **)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              }
            }
          }
        }
      }
      return;
    case 0x4A:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v322 = **(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (!(v322 >> 49))
        return;
      v323 = (double)(int)v322;
      if (v322 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v323 = v322 - 0x2000000000000;
      if (v323 == 1.0)
      {
        JSC::DFG::StrengthReductionPhase::convertToIdentityOverChild1((JSC::DFG::Graph **)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        if (v323 != 2.0)
          return;
        *(_WORD *)(v9 + 18) = 66;
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 24);
      }
      goto LABEL_63;
    case 0x55:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
        || *(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
      {
        goto LABEL_419;
      }
      JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL), *((JSC::DFG::Graph **)this + 4), a4, a5, a6, a7, a8, (int **)__e);
      v576 = *(WTF::StringImpl **)__e;
      if (*(_QWORD *)__e)
      {
        *(_QWORD *)__e = 0;
LABEL_721:
        if (*(_DWORD *)v576 == 2)
        {
          WTF::StringImpl::~StringImpl(v576, v569, v570, v571, v572, v573, v574, v575);
          WTF::fastFree(v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130);
        }
        else
        {
          *(_DWORD *)v576 -= 2;
        }
        goto LABEL_723;
      }
      JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL), *((JSC::DFG::Graph **)this + 4), v571, v572, v573, v574, v575, (int **)&v1858);
      v1058 = (WTF::StringImpl *)v1858;
      *(_QWORD *)&v1858 = 0;
      if (!v1058)
      {
        v1715 = *(WTF::StringImpl **)__e;
        *(_QWORD *)__e = 0;
        if (v1715)
        {
          if (*(_DWORD *)v1715 == 2)
          {
            WTF::StringImpl::~StringImpl(v1715, v569, v570, v571, v572, v573, v574, v575);
            WTF::fastFree(v1728, v1729, v1730, v1731, v1732, v1733, v1734, v1735);
          }
          else
          {
            *(_DWORD *)v1715 -= 2;
          }
        }
LABEL_419:
        if (((*(_QWORD *)(*((_QWORD *)this + 30) + 24) >> 50) & 0x3F) - 26 <= 2)
          JSC::DFG::StrengthReductionPhase::handleCommutativity((uint64_t)this);
        return;
      }
      if (*(_DWORD *)v1058 == 2)
      {
        WTF::StringImpl::~StringImpl(v1058, v569, v570, v571, v572, v573, v574, v575);
        WTF::fastFree(v1243, v1244, v1245, v1246, v1247, v1248, v1249, v1250);
      }
      else
      {
        *(_DWORD *)v1058 -= 2;
      }
      v576 = *(WTF::StringImpl **)__e;
      *(_QWORD *)__e = 0;
      if (v576)
        goto LABEL_721;
LABEL_723:
      JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::Node *)#1}::operator()((uint64_t *)&v1858, *((JSC::DFG::Graph **)this + 4), (unint64_t **)(*(_QWORD *)(*((_QWORD *)this + 30) + 24) & 0xFF00FFFFFFFFFFFFLL), v571, v572, v573, v574, v575);
      if (!(_QWORD)v1858)
        return;
      JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::Node *)#1}::operator()((uint64_t *)&v1854, *((JSC::DFG::Graph **)this + 4), (unint64_t **)(*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL), v577, v578, v579, v580, v581);
      v582 = v1854;
      if (!(_QWORD)v1854)
        goto LABEL_225;
      memset(__e, 0, 20);
      __e[20] = 1;
      v583 = (WTF::StringImpl *)v1858;
      if ((_QWORD)v1858)
      {
        v584 = *(_DWORD *)(v1858 + 4);
        *(_DWORD *)v1858 += 2;
        v585 = *(_QWORD *)&__e[8];
      }
      else
      {
        v585 = 0;
        v584 = 0;
      }
      *(_QWORD *)__e = v583;
      *(_DWORD *)&__e[16] = v584;
      if (!v584 && !v585)
      {
        *(_DWORD *)v582 += 2;
        *(_QWORD *)__e = v582;
        if (v583)
        {
          if (*(_DWORD *)v583 == 2)
          {
            WTF::StringImpl::~StringImpl(v583, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
            WTF::fastFree(v1186, v1187, v1188, v1189, v1190, v1191, v1192, v1193);
            v582 = v1854;
            if (!(_QWORD)v1854)
              goto LABEL_733;
          }
          else
          {
            *(_DWORD *)v583 -= 2;
          }
        }
        LODWORD(v582) = *(_DWORD *)(v582 + 4);
LABEL_733:
        *(_DWORD *)&__e[16] = v582;
        goto LABEL_734;
      }
      v1713 = *(int8x16_t **)(v582 + 8);
      v1714 = *(unsigned int *)(v582 + 4);
      if ((*(_BYTE *)(v582 + 16) & 4) != 0)
        WTF::StringBuilder::append((uint64_t)__e, v1713, v1714, v113, v114, v115, v116, v117);
      else
        WTF::StringBuilder::append((uint64_t)__e, v1713, v1714, v113, v114, v115, v116, v117);
LABEL_734:
      v586 = (JSC::DFG::Node *)*((_QWORD *)this + 30);
      v587 = (JSC::DFG::LazyJSValue *)*((_QWORD *)this + 4);
      v588 = *(WTF::StringImpl **)__e;
      if (*(_QWORD *)__e
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)__e, (uint64_t)v119, (uint64_t)v112, v113, v114, v115, v116, v117), WTF::StringBuilder::reifyString((WTF::StringBuilder *)__e), (v588 = *(WTF::StringImpl **)__e) != 0))
      {
        *(_DWORD *)v588 += 2;
      }
      v1848 = v588;
      v589 = JSC::DFG::LazyJSValue::newString(v587, &v1848, v112, v113, v114, v115, v116, v117);
      JSC::DFG::StrengthReductionPhase::convertToLazyJSValue((uint64_t)this, v586, v589, v590, v591, v592, v593, v594);
      v595 = v1848;
      v1848 = 0;
      if (v595)
      {
        if (*(_DWORD *)v595 == 2)
        {
          WTF::StringImpl::~StringImpl(v595, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177);
        }
        else
        {
          *(_DWORD *)v595 -= 2;
        }
      }
      *((_BYTE *)this + 248) = 1;
      v596 = *(WTF::StringImpl **)&__e[8];
      *(_QWORD *)&__e[8] = 0;
      if (v596)
      {
        if (*(_DWORD *)v596 == 2)
        {
          WTF::StringImpl::~StringImpl(v596, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185);
        }
        else
        {
          *(_DWORD *)v596 -= 2;
        }
      }
      v597 = *(WTF::StringImpl **)__e;
      *(_QWORD *)__e = 0;
      if (v597)
      {
        if (*(_DWORD *)v597 == 2)
          goto LABEL_1042;
        *(_DWORD *)v597 -= 2;
      }
LABEL_676:
      v459 = (WTF::StringImpl *)v1854;
      *(_QWORD *)&v1854 = 0;
      if (v459)
      {
LABEL_677:
        if (*(_DWORD *)v459 == 2)
        {
          WTF::StringImpl::~StringImpl(v459, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v894, v895, v896, v897, v898, v899, v900, v901);
        }
        else
        {
          *(_DWORD *)v459 -= 2;
        }
      }
      goto LABEL_225;
    case 0x5B:
    case 0x14B:
    case 0x14C:
      v166 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
      v167 = *(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v167 <= 2)
        goto LABEL_219;
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
      {
        if (v167 == 182)
        {
LABEL_219:
          v168 = *(__int128 **)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        }
        else
        {
          if (v167 != 355 && v167 != 348)
            return;
          v168 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v168;
      }
      else
      {
        if (v167 != 3)
          return;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v166, a4, a5, a6, a7, a8, (int **)&v1858);
      v169 = (WTF::StringImpl *)v1858;
      if (!(_QWORD)v1858)
        return;
      if ((*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL) == 0)
      {
        *(_QWORD *)&v1858 = 0;
        goto LABEL_226;
      }
      v119 = (WTF::AtomStringImpl *)*((_QWORD *)this + 4);
      v170 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v170 <= 2)
        goto LABEL_664;
      if (*(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
      {
        if (v170 == 182)
        {
LABEL_664:
          v460 = *(__int128 **)((*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        }
        else
        {
          if (v170 != 355 && v170 != 348)
            goto LABEL_225;
          v460 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v460;
      }
      else
      {
        if (v170 != 3)
          goto LABEL_225;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)((*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL)
                                              + 0x48);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v119, v113, v114, v115, v116, v117, (int **)&v1854);
      if (!(_QWORD)v1854)
        goto LABEL_225;
      v523 = 0;
      v1848 = 0;
      v524 = (JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL);
      if (!v524
        || (JSC::DFG::Node::tryGetString(v524, *((JSC::DFG::Graph **)this + 4), v113, v114, v115, v116, v117, (int **)__e), v523 = *(WTF::StringImpl **)__e, (v1848 = *(WTF::StringImpl **)__e) != 0))
      {
        memset(__e, 0, 20);
        __e[20] = 1;
        WTF::StringBuilder::append((WTF::StringBuilder *)__e, (const WTF::String *)&v1858, (uint64_t)v112, v113, v114, v115, v116, v117);
        WTF::StringBuilder::append((WTF::StringBuilder *)__e, (const WTF::String *)&v1854, v525, v526, v527, v528, v529, v530);
        if (v523)
          WTF::StringBuilder::append((WTF::StringBuilder *)__e, (const WTF::String *)&v1848, v531, v532, v533, v534, v535, v536);
        v537 = (JSC::DFG::Node *)*((_QWORD *)this + 30);
        v538 = (JSC::DFG::LazyJSValue *)*((_QWORD *)this + 4);
        WTF::StringBuilder::toString((WTF::StringBuilder *)__e, v531, v532, v533, v534, v535, v536, v1847);
        v545 = JSC::DFG::LazyJSValue::newString(v538, v1847, v539, v540, v541, v542, v543, v544);
        JSC::DFG::StrengthReductionPhase::convertToLazyJSValue((uint64_t)this, v537, v545, v546, v547, v548, v549, v550);
        v558 = v1847[0];
        v1847[0] = 0;
        if (v558)
        {
          if (*(_DWORD *)v558 == 2)
          {
            WTF::StringImpl::~StringImpl(v558, v551, v552, v553, v554, v555, v556, v557);
            WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
          }
          else
          {
            *(_DWORD *)v558 -= 2;
          }
        }
        *((_BYTE *)this + 248) = 1;
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)__e, v551, v552, v553, v554, v555, v556, v557);
        if (v523)
        {
          if (*(_DWORD *)v523 == 2)
          {
            v597 = v523;
LABEL_1042:
            WTF::StringImpl::~StringImpl(v597, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
            WTF::fastFree(v902, v903, v904, v905, v906, v907, v908, v909);
          }
          else
          {
            *(_DWORD *)v523 -= 2;
          }
        }
      }
      goto LABEL_676;
    case 0x5C:
    case 0x5D:
      v72 = (uint64_t *)(v9 + 24);
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v191 = *((_QWORD *)this + 4);
        v192 = *v72;
        v193 = *(_DWORD *)(v191 + 164);
        if (v193 <= v192)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CDC0);
        }
        v194 = v192 + 1;
        if (v193 <= (int)v192 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CDC8);
        }
        v195 = *(_QWORD *)(v191 + 152);
        v72 = (uint64_t *)(v195 + 8 * v192);
        v73 = (uint64_t *)(v195 + 8 * v194);
      }
      else
      {
        v73 = (uint64_t *)(v9 + 32);
      }
      if ((*v72 & 0xFC000000000000) == 0x2C000000000000)
        goto LABEL_154;
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v122 = (uint64_t *)(v9 + 24);
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v303 = *((_QWORD *)this + 4);
        v304 = *v122;
        v305 = *(_DWORD *)(v303 + 164);
        if (v305 <= v304)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CEC8);
        }
        v306 = v304 + 1;
        if (v305 <= (int)v304 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CED0);
        }
        v307 = *(_QWORD *)(v303 + 152);
        v122 = (uint64_t *)(v307 + 8 * v304);
        v73 = (uint64_t *)(v307 + 8 * v306);
      }
      else
      {
        v73 = (uint64_t *)(v9 + 32);
      }
      if ((*v122 & 0xF8000000000000) != 0x20000000000000)
        return;
LABEL_154:
      if (*(_BYTE *)(v9 + 72) != 4)
        return;
LABEL_155:
      v123 = *v73;
LABEL_156:
      v124 = v123 & 0xFF00FFFFFFFFFFFFLL;
      if (*(_WORD *)(v124 + 18) != 331)
        return;
      *(_WORD *)(v124 + 18) = 332;
      goto LABEL_63;
    case 0x9E:
      if ((*(_DWORD *)(v9 + 72) & 0xFE) != 4)
        return;
      v99 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
      v100 = *(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v100 <= 2)
        goto LABEL_140;
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
      {
        if (v100 == 182)
        {
LABEL_140:
          v101 = *(__int128 **)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        }
        else
        {
          if (v100 != 355 && v100 != 348)
            return;
          v101 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v101;
      }
      else
      {
        if (v100 != 3)
          return;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v99, a4, a5, a6, a7, a8, (int **)&v1858);
      if (!(_QWORD)v1858)
        return;
      v108 = *((_QWORD *)this + 4);
      v109 = *((_QWORD *)this + 30);
      v110 = *(unsigned int *)(v1858 + 4);
      if ((v110 & 0x80000000) != 0)
        v111 = COERCE__INT64((double)v110) + 0x2000000000000;
      else
        v111 = v110 | 0xFFFE000000000000;
      v118 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v111, v102, v103, v104, v105, v106, v107);
      v119 = (WTF::AtomStringImpl *)*((_QWORD *)v118 + 1);
      if (v119)
        JSC::DFG::Graph::assertIsRegistered(v108, (unint64_t)v119);
      v120 = *(_DWORD *)(v109 + 56);
      if ((v120 & 7) == 3)
        v121 = 1;
      else
        v121 = 2 * ((v120 & 7) == 5);
      *(_WORD *)(v109 + 18) = v121;
      *(_DWORD *)(v109 + 56) = v120 & 0xFFFFFFE7;
      *(_QWORD *)(v109 + 72) = v118;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 40) = 0;
      *(_QWORD *)(v109 + 24) = 0;
      *((_BYTE *)this + 248) = 1;
      goto LABEL_225;
    case 0xA9:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v215 = **(_QWORD **)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v216 = v215 && (v215 & 0xFFFE000000000002) == 0;
      if (!v216 || *(unsigned __int8 *)(v215 + 5) < 0x17u)
        return;
      v217 = *((_QWORD *)this + 4);
      v218 = JSC::DFG::Graph::freeze(v217, *(_QWORD *)(16 * (*(_DWORD *)v215 & 0xFFFFFFFE) + 0x28), a3, a4, a5, a6, a7, a8);
      v219 = *((_QWORD *)v218 + 1);
      if (v219)
        JSC::DFG::Graph::assertIsRegistered(v217, v219);
      v220 = *(_DWORD *)(v9 + 56);
      if ((v220 & 7) == 3)
        v221 = 1;
      else
        v221 = 2 * ((v220 & 7) == 5);
      *(_WORD *)(v9 + 18) = v221;
      *(_DWORD *)(v9 + 56) = v220 & 0xFFFFFFE7;
      *(_QWORD *)(v9 + 72) = v218;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      goto LABEL_63;
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDD:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v222 = **(_QWORD **)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v223 = v222 && (v222 & 0xFFFE000000000002) == 0;
      if (!v223 || *(_BYTE *)(v222 + 5) != 51 || *(_BYTE *)(*(_QWORD *)(v222 + 2048) + 4) == 2)
        return;
      v224 = *((_QWORD *)this + 4);
      if (((*(_DWORD *)(*(_QWORD *)(v224 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
      {
        JSC::CodeOrigin::CodeOrigin(&v1820, (const JSC::CodeOrigin *)v9);
        v1083 = JSC::DFG::Graph::globalObjectFor(v224, &v1820, v1077, v1078, v1079, v1080, v1081, v1082);
        if ((v1820 & 1) != 0 && (v1820 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v1820 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        if (v1083 != v222)
          return;
      }
      v1819 = 0;
      v225 = *((_QWORD *)this + 30);
      v226 = *(unsigned __int16 *)(v225 + 18);
      if (v226 != 219 && v226 != 217 && v226 != 221)
      {
        v233 = 0;
LABEL_443:
        v232 = **(_QWORD **)(v225 + 72);
        goto LABEL_313;
      }
      v227 = *(_QWORD *)(v225 + 32) & 0xFF00FFFFFFFFFFFFLL;
      v1819 = v227;
      v228 = *(unsigned __int16 *)(v227 + 18);
      if (v228 <= 2)
      {
        v229 = **(_QWORD **)(v227 + 72);
        if (v229)
          v230 = (v229 & 0xFFFE000000000002) == 0;
        else
          v230 = 0;
        if (!v230
          || *(_BYTE *)(v229 + 5) != 59
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v229 & 0xFFFFFFFE) + 0x28) + 2072) + 4) == 2)
        {
          return;
        }
        v231 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136);
        *(_QWORD *)&v1858 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v229 & 0xFFFFFFFE) + 0x28) + 2072);
        WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v231, (uint64_t *)&v1858, a4, a5, a6, a7, a8, (uint64_t)__e);
        v232 = *(_QWORD *)(v229 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        v233 = 1;
LABEL_313:
        v234 = *((_QWORD *)this + 30);
        v235 = *(unsigned __int16 *)(v234 + 18);
        if (v235 == 221)
        {
          v791 = *(_WORD *)(v232 + 18);
          if ((v791 & 2) != 0)
          {
            if ((v791 & 0x80) == 0 && (*(_QWORD *)(v234 + 40) & 0xFC000000000000) == 0x54000000000000)
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)__e, (const JSC::DFG::NodeOrigin *)v234);
              v931 = *((unsigned int *)this + 58);
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1818, (const JSC::DFG::NodeOrigin *)__e);
              JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1817, (unint64_t *)(*((_QWORD *)this + 30) + 24));
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v931, 0, 0x18u, (uint64_t)v1818, &v1817);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1818, v932, v933, v934, v935, v936, v937, v938);
              v939 = *((unsigned int *)this + 58);
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1816, (const JSC::DFG::NodeOrigin *)__e);
              v940 = v1819 & 0xFF00FFFFFFFFFFFFLL | 0x40000000000000;
              v941 = *((unsigned int *)this + 58);
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1815, (const JSC::DFG::NodeOrigin *)__e);
              v945 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v941, (uint64_t)v1815, 0xFFFE000000000000, 0, v942, v943, v944);
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 72, v939, 0, 0xB4u, (uint64_t)v1816, 0, v940, v945);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1815, v946, v947, v948, v949, v950, v951, v952);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1816, v953, v954, v955, v956, v957, v958, v959);
              JSC::DFG::NodeOrigin::withExitOK((uint64_t)__e, 0, (uint64_t)&v1858);
              JSC::DFG::NodeOrigin::operator=((uint64_t *)__e, (uint64_t *)&v1858, v960, v961, v962, v963, v964, v965);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1858, v966, v967, v968, v969, v970, v971, v972);
              v973 = *((_QWORD *)this + 30);
              v980 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v232, v974, v975, v976, v977, v978, v979);
              JSC::DFG::Node::convertToRegExpMatchFastGlobalWithoutChecks(v973, (JSC::DFG::FrozenValue *)v980);
              JSC::DFG::NodeOrigin::operator=(*((uint64_t **)this + 30), (uint64_t *)__e, v981, v982, v983, v984, v985, v986);
              *((_BYTE *)this + 248) = 1;
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)__e, v987, v988, v989, v990, v991, v992, v993);
            }
            return;
          }
          *(_WORD *)(v234 + 18) = 217;
          *((_BYTE *)this + 248) = 1;
          v1814 = 0;
          v1811 = &v1814;
          v1812 = this;
          v1813 = &v1819;
        }
        else
        {
          v1814 = 0;
          v1811 = &v1814;
          v1812 = this;
          v1813 = &v1819;
          if (v235 == 218)
            goto LABEL_475;
        }
        v236 = *((_DWORD *)this + 58)
             + JSC::DFG::InsertionSet::execute((JSC::DFG::StrengthReductionPhase *)((char *)this + 72), *((JSC::DFG::BasicBlock **)this + 28));
        *((_DWORD *)this + 58) = v236;
        v237 = v236 - 1;
        while (v237 != -1)
        {
          v238 = *((_QWORD *)this + 28);
          if (v237 >= *(unsigned int *)(v238 + 220))
          {
            __break(0xC471u);
            JUMPOUT(0x19854CD3CLL);
          }
          v239 = *(_QWORD *)(*(_QWORD *)(v238 + 208) + 8 * v237);
          if (v239 == v1819)
          {
            if ((v233 & 1) == 0)
            {
              LODWORD(v334) = 0;
              goto LABEL_476;
            }
            break;
          }
          if (*(_WORD *)(v239 + 18) == 180
            && v1819 == (*(_QWORD *)(v239 + 24) & 0xFF00FFFFFFFFFFFFLL)
            && *(unsigned __int16 *)((*(_QWORD *)(v239 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
          {
            v334 = **(_QWORD **)((*(_QWORD *)(v239 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (v334 >= 0xFFFE000000000000 && (v334 & 0x80000000) == 0)
            {
              if ((_DWORD)v334 != -1)
                goto LABEL_476;
              break;
            }
          }
          v240 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
          *(_QWORD *)__e = 16398;
          __e[8] = 0;
          JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v240, (JSC::DFG::Node *)v239, (uint64_t)&v1854, (uint64_t)__e, (uint64_t)&v1854, (uint64_t)&v1858, a7, a8);
          --v237;
          if (__e[8])
            break;
        }
        if ((*(_WORD *)(v232 + 18) & 0x82) != 0)
          return;
        v324 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
        v325 = **((_QWORD **)this + 30);
        v326 = v325 & 0xFFFFFFFF8;
        if ((v325 & 1) != 0)
          v326 = *(_QWORD *)(v325 & 0xFFFFFFFF8);
        if (v326)
          v324 = *(_QWORD *)(v326 + 8);
        v327 = *(_QWORD *)(v324 + 56);
        if ((v325 & 2) != 0)
        {
          LODWORD(v325) = -1;
        }
        else if ((v325 & 1) != 0)
        {
          LODWORD(v325) = *(_DWORD *)((v325 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v325 >>= 36;
        }
        LODWORD(v1858) = v325;
        WORD2(v1858) = 1;
        BYTE6(v1858) = 0;
        v328 = (unsigned __int8 *)(v327 + 31);
        LOBYTE(v1857) = 0;
        *(_QWORD *)&__e[8] = v327 + 31;
        __e[16] = 1;
        if (__ldaxr((unsigned __int8 *)(v327 + 31)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v328))
        {
LABEL_467:
          LOBYTE(v1857) = 1;
          hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v327 + 96), (uint64_t)__e, (int *)&v1858);
          if (!__e[16])
            goto LABEL_468;
          v521 = *(WTF::Lock **)&__e[8];
          v522 = __ldxr(*(unsigned __int8 **)&__e[8]);
          if (v522 == 1)
          {
            if (!__stlxr(0, *(unsigned __int8 **)&__e[8]))
            {
LABEL_468:
              if ((hasExitSite & 1) != 0)
                return;
              if (*(unsigned __int16 *)(v1819 + 18) <= 2u)
              {
                v333 = **(_QWORD **)(v1819 + 72);
                if (v333)
                {
                  if ((v333 & 0xFFFE000000000002) == 0
                    && *(_BYTE *)(v333 + 5) == 59
                    && *(_QWORD *)(v333 + 24) < 0xFFFE000000000000)
                  {
                    return;
                  }
                }
              }
              v1814 = 1;
LABEL_475:
              LODWORD(v334) = -1;
LABEL_476:
              if ((*(_WORD *)(v232 + 18) & 0x82) != 0)
                v335 = v334;
              else
                v335 = 0;
              v336 = *((_QWORD *)this + 30);
              v337 = 40;
              if (*(_WORD *)(v336 + 18) == 218)
                v337 = 32;
              v338 = *(_QWORD *)(v336 + v337) & 0xFF00FFFFFFFFFFFFLL;
              v339 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
              v340 = *(unsigned __int16 *)(v338 + 0x12);
              if (v340 <= 2)
                goto LABEL_753;
              if (*(unsigned __int16 *)(v338 + 0x12) <= 0xB5u)
              {
                if (v340 != 3)
                  goto LABEL_483;
                *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)(v338 + 72);
                goto LABEL_755;
              }
              if (v340 == 182)
              {
LABEL_753:
                v560 = *(__int128 **)(v338 + 72);
              }
              else
              {
                if (v340 != 355 && v340 != 348)
                  goto LABEL_483;
                v560 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                {
                  JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                  LODWORD(qword_1EE342DB8) = 0;
                }
              }
              *(_DWORD *)&__e[8] = 0;
              *(_QWORD *)__e = v560;
LABEL_755:
              JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v339, a4, a5, a6, a7, a8, (int **)&v1853);
              if (v1853)
              {
                v1778 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v232, v598, v599, v600, v601, v602, v603);
                if (*(_DWORD *)(v232 + 24) > 0x3E8u
                  || *(unsigned __int16 *)(*((_QWORD *)this + 30) + 18) - 217 <= 1
                  && ((v611 = *(_QWORD *)(v232 + 48)) != 0 && *(_DWORD *)(v611 + 20) || (*(_WORD *)(v232 + 18) & 1) != 0)
                  || ((v612 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136),
                       v1836 = *(_QWORD *)(v222 + 2048),
                       WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v612, (uint64_t *)&v1836, v606, v607, v608, v609, v610, (uint64_t)__e), (v613 = *(_DWORD *)(v222 + 1012)) != 0)? (v614 = (JSC::Structure *)(16 * (v613 & 0xFFFFFFFE))): (v614 = 0), (*((_BYTE *)v614 + 8) & 0xF) != 9))
                {
                  v706 = 0;
                  goto LABEL_1787;
                }
                JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), (unint64_t)v614, (int *)__e, v606, v607, v608, v609, v610);
                v1774 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v222, v615, v616, v617, v618, v619, v620);
                *(_OWORD *)v1852 = xmmword_199154590;
                v1851 = 0;
                v1850 = 0;
                if (*(unsigned __int16 *)(*((_QWORD *)this + 30) + 18) - 217 > 1)
                {
                  if (JSC::RegExp::matchConcurrently((WTF::Thread *)v232, *(JSC::VM **)(*((_QWORD *)this + 4) + 16), (uint64_t *)&v1853, v335, (uint64_t *)v1852, v621, v622, v623))goto LABEL_768;
                }
                else
                {
                  *(_DWORD *)__e = 0;
                  if (JSC::RegExp::matchConcurrently(v232, *(JSC::VM **)(*((_QWORD *)this + 4) + 16), (uint64_t)&v1853, v335, (int *)__e, (uint64_t *)&v1850, v622, v623))
                  {
                    *(_QWORD *)v1852 = *(int *)__e;
                    if (HIDWORD(v1851) <= 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19854CF60);
                    }
                    *(_QWORD *)&v1852[2] = *((int *)v1850 + 1);
LABEL_768:
                    *((_BYTE *)this + 248) = 1;
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)__e, *((const JSC::DFG::NodeOrigin **)this + 30));
                    v624 = *((unsigned int *)this + 58);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v1858, (const JSC::DFG::NodeOrigin *)__e);
                    JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1854, (unint64_t *)(*((_QWORD *)this + 30) + 24));
                    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v624, 0, 0x18u, (uint64_t)&v1858, &v1854);
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1858, v625, v626, v627, v628, v629, v630, v631);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v1848, (const JSC::DFG::NodeOrigin *)__e);
                    JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()((uint64_t)&v1811, (uint64_t)&v1848, v632, v633, v634, v635, v636, v637);
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1848, v638, v639, v640, v641, v642, v643, v644);
                    v651 = *((_QWORD *)this + 30);
                    if (*(unsigned __int16 *)(v651 + 18) - 217 > 1)
                    {
                      v652 = *((_QWORD *)this + 4);
                      if (*(_QWORD *)v1852 == -1)
                        v653 = 6;
                      else
                        v653 = 7;
                      goto LABEL_771;
                    }
                    v652 = *((_QWORD *)this + 4);
                    if (*(_QWORD *)v1852 == -1)
                    {
                      v653 = 2;
LABEL_771:
                      JSC::DFG::Graph::convertToConstant(v652, v651, v653, v646, v647, v648, v649, v650);
                      goto LABEL_772;
                    }
                    v1836 = (unint64_t)v614;
                    v1773 = JSC::DFG::Graph::addStructureSet(v652, &v1836, v645, v646, v647, v648, v649, v650);
                    if ((v1836 & 1) != 0)
                      WTF::fastFree(v1836 & 0xFFFFFFFFFFFFFFFCLL, v1349, v1350, v1351, v1352, v1353, v1354, v1355);
                    v1837 = 0;
                    v1836 = 0;
                    WTF::String::substring((WTF::String *)&v1853, v1852[0], v1852[2] - v1852[0], (uint64_t *)v1842);
                    v1363 = HIDWORD(v1837);
                    if (HIDWORD(v1837) == (_DWORD)v1837)
                    {
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v1836, (unint64_t)v1842);
                    }
                    else
                    {
                      v1364 = v1842[0];
                      v1842[0] = 0;
                      *(_QWORD *)(v1836 + 8 * HIDWORD(v1837)) = v1364;
                      HIDWORD(v1837) = v1363 + 1;
                    }
                    v1365 = v1842[0];
                    v1842[0] = 0;
                    if (v1365)
                    {
                      if (*(_DWORD *)v1365 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1365, v1356, v1357, v1358, v1359, v1360, v1361, v1362);
                        WTF::fastFree(v1704, v1705, v1706, v1707, v1708, v1709, v1710, v1711);
                      }
                      else
                      {
                        *(_DWORD *)v1365 -= 2;
                      }
                    }
                    if (*(_DWORD *)(v232 + 24))
                    {
                      v1366 = 1;
                      v1367 = 3;
                      while (1)
                      {
                        if (HIDWORD(v1851) <= v1367 - 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19854CF44);
                        }
                        v1368 = (WTF::AtomStringImpl *)*((unsigned int *)v1850 + v1367 - 1);
                        if ((v1368 & 0x80000000) != 0)
                        {
                          v1842[0] = 0;
                          if (HIDWORD(v1837) == (_DWORD)v1837)
                            goto LABEL_1703;
                          v1369 = HIDWORD(v1837) + 1;
                          *(_QWORD *)(v1836 + 8 * HIDWORD(v1837)) = 0;
                        }
                        else
                        {
                          if (HIDWORD(v1851) <= v1367)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19854CF4CLL);
                          }
                          WTF::String::substring((WTF::String *)&v1853, v1368, *((_DWORD *)v1850 + v1367) - (_DWORD)v1368, (uint64_t *)v1842);
                          if (HIDWORD(v1837) == (_DWORD)v1837)
                          {
LABEL_1703:
                            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v1836, (unint64_t)v1842);
                            goto LABEL_1435;
                          }
                          v1369 = HIDWORD(v1837) + 1;
                          v1370 = v1842[0];
                          v1842[0] = 0;
                          *(_QWORD *)(v1836 + 8 * HIDWORD(v1837)) = v1370;
                        }
                        HIDWORD(v1837) = v1369;
LABEL_1435:
                        v1371 = v1842[0];
                        v1842[0] = 0;
                        if (v1371)
                        {
                          if (*(_DWORD *)v1371 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1371, v1368, v1357, v1358, v1359, v1360, v1361, v1362);
                            WTF::fastFree(v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379);
                          }
                          else
                          {
                            *(_DWORD *)v1371 -= 2;
                          }
                        }
                        ++v1366;
                        v1367 += 2;
                        if (v1366 > *(_DWORD *)(v232 + 24))
                        {
                          v1410 = HIDWORD(v1837);
                          if (v614)
                            goto LABEL_1460;
                          v1411 = 0;
                          goto LABEL_1461;
                        }
                      }
                    }
                    v1410 = HIDWORD(v1837);
LABEL_1460:
                    v1411 = JSC::Structure::outOfLineCapacity(v614);
LABEL_1461:
                    if (v1410 <= 3)
                      LODWORD(v1412) = 3;
                    else
                      LODWORD(v1412) = v1410;
                    if ((_DWORD)v1410)
                      v1412 = v1412;
                    else
                      v1412 = 5;
                    v1413 = v1411 + v1412;
                    v1414 = 8 * (v1411 + v1412);
                    if (v1413 > 9)
                    {
                      if (v1413 > 0x3EB)
                        v1415 = v1414 + 8;
                      else
                        v1415 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                                + (((unint64_t)(v1414 + 23) >> 2) & 0x7FFFFFFFCLL));
                    }
                    else
                    {
                      v1415 = (v1414 + 23) & 0x1FFFFFFFF0;
                    }
                    v1416 = v1415 - 8 * v1411;
                    v1417 = *((_QWORD *)this + 4);
                    v1418 = *(_QWORD **)(*(_QWORD *)(v1417 + 16) + 41952);
                    v1419 = v1418[197];
                    v1420 = v1418[177];
                    v1769 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(v1417 + 24) + 240), v1418[194], v1357, v1358, v1359, v1360, v1361, v1362);
                    v1770 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), v1419, v1421, v1422, v1423, v1424, v1425, v1426);
                    v1771 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), v1420, v1427, v1428, v1429, v1430, v1431, v1432);
                    v1433 = *((_QWORD *)this + 4);
                    v1772 = *(unsigned int *)(v1433 + 164);
                    v1434 = *((unsigned int *)this + 58);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1847, (const JSC::DFG::NodeOrigin *)__e);
                    v1438 = (WTF::StringImpl *)JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1434, (uint64_t)v1847, (unint64_t)v614, 9, v1435, v1436, v1437);
                    v1842[0] = v1438;
                    v1446 = *(unsigned int *)(v1433 + 164);
                    if ((_DWORD)v1446 == *(_DWORD *)(v1433 + 160))
                    {
                      WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1433 + 152, (unint64_t)v1842, v1440, v1441, v1442, v1443, v1444, v1445);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v1433 + 152) + 8 * v1446) = v1438;
                      *(_DWORD *)(v1433 + 164) = v1446 + 1;
                    }
                    v1447 = v1416 - 8;
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1847, v1439, v1440, v1441, v1442, v1443, v1444, v1445);
                    v1448 = *((_QWORD *)this + 4);
                    v1449 = WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)(v1449 + 8) = 0;
                    *(_QWORD *)(v1449 + 16) = 0;
                    *(_QWORD *)v1449 = 0;
                    *(_QWORD *)(v1449 + 16) = *(_QWORD *)(v1448 + 568);
                    *(_QWORD *)(v1448 + 568) = v1449;
                    v1450 = *((_QWORD *)this + 4);
                    v1451 = *((unsigned int *)this + 58);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1846, (const JSC::DFG::NodeOrigin *)__e);
                    if ((v1410 & 0x80000000) != 0)
                      v1455 = COERCE__INT64((double)v1410) + 0x2000000000000;
                    else
                      v1455 = v1410 | 0xFFFE000000000000;
                    v1456 = v1447 >> 3;
                    v1457 = (WTF::StringImpl *)JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1451, (uint64_t)v1846, v1455, 2, v1452, v1453, v1454);
                    v1842[0] = v1457;
                    v1465 = *(unsigned int *)(v1450 + 164);
                    if ((_DWORD)v1465 == *(_DWORD *)(v1450 + 160))
                    {
                      WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1450 + 152, (unint64_t)v1842, v1459, v1460, v1461, v1462, v1463, v1464);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v1450 + 152) + 8 * v1465) = v1457;
                      *(_DWORD *)(v1450 + 164) = v1465 + 1;
                    }
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1846, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
                    LODWORD(v1842[0]) = 12;
                    v1466 = *(unsigned int *)(v1449 + 12);
                    if ((_DWORD)v1466 == *(_DWORD *)(v1449 + 8))
                    {
                      WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationKind>(v1449, (unsigned int *)v1842);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)v1449 + 8 * v1466) = 12;
                      *(_DWORD *)(v1449 + 12) = v1466 + 1;
                    }
                    v1525 = *((_QWORD *)this + 4);
                    v1526 = *((unsigned int *)this + 58);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1845, (const JSC::DFG::NodeOrigin *)__e);
                    if ((v1456 & 0x80000000) != 0)
                      v1530 = COERCE__INT64((double)v1456) + 0x2000000000000;
                    else
                      v1530 = (v1447 >> 3) | 0xFFFE000000000000;
                    v1531 = (WTF::StringImpl *)JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1526, (uint64_t)v1845, v1530, 2, v1527, v1528, v1529);
                    v1842[0] = v1531;
                    v1539 = *(unsigned int *)(v1525 + 164);
                    if ((_DWORD)v1539 == *(_DWORD *)(v1525 + 160))
                    {
                      WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1525 + 152, (unint64_t)v1842, v1533, v1534, v1535, v1536, v1537, v1538);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v1525 + 152) + 8 * v1539) = v1531;
                      *(_DWORD *)(v1525 + 164) = v1539 + 1;
                    }
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1845, v1532, v1533, v1534, v1535, v1536, v1537, v1538);
                    LODWORD(v1842[0]) = 14;
                    v1540 = *(unsigned int *)(v1449 + 12);
                    if ((_DWORD)v1540 == *(_DWORD *)(v1449 + 8))
                    {
                      WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationKind>(v1449, (unsigned int *)v1842);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)v1449 + 8 * v1540) = 14;
                      *(_DWORD *)(v1449 + 12) = v1540 + 1;
                    }
                    v1541 = *((_QWORD *)this + 4);
                    v1542 = *((unsigned int *)this + 58);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1844, (const JSC::DFG::NodeOrigin *)__e);
                    if (v1852[1])
                    {
                      v1739 = (double)*(unint64_t *)v1852;
                    }
                    else
                    {
                      if ((v1852[0] & 0x80000000) == 0)
                      {
                        v1546 = *(_QWORD *)v1852 | 0xFFFE000000000000;
LABEL_1533:
                        v1547 = (WTF::StringImpl *)JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1542, (uint64_t)v1844, v1546, 0, v1543, v1544, v1545);
                        v1842[0] = v1547;
                        v1555 = *(unsigned int *)(v1541 + 164);
                        if ((_DWORD)v1555 == *(_DWORD *)(v1541 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1541 + 152, (unint64_t)v1842, v1549, v1550, v1551, v1552, v1553, v1554);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1541 + 152) + 8 * v1555) = v1547;
                          *(_DWORD *)(v1541 + 164) = v1555 + 1;
                        }
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1844, v1548, v1549, v1550, v1551, v1552, v1553, v1554);
                        LODWORD(v1842[0]) = 11;
                        HIDWORD(v1842[0]) = v1769;
                        v1562 = *(unsigned int *)(v1449 + 12);
                        if ((_DWORD)v1562 == *(_DWORD *)(v1449 + 8))
                        {
                          WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v1449, (unint64_t)v1842);
                        }
                        else
                        {
                          *(WTF::StringImpl **)(*(_QWORD *)v1449 + 8 * v1562) = v1842[0];
                          ++*(_DWORD *)(v1449 + 12);
                        }
                        v1563 = *((_QWORD *)this + 4);
                        v1842[0] = (WTF::StringImpl *)v338;
                        v1564 = *(unsigned int *)(v1563 + 164);
                        if ((_DWORD)v1564 == *(_DWORD *)(v1563 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1563 + 152, (unint64_t)v1842, v1556, v1557, v1558, v1559, v1560, v1561);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1563 + 152) + 8 * v1564) = v338;
                          *(_DWORD *)(v1563 + 164) = v1564 + 1;
                        }
                        LODWORD(v1842[0]) = 11;
                        HIDWORD(v1842[0]) = v1770;
                        v1565 = *(unsigned int *)(v1449 + 12);
                        if ((_DWORD)v1565 == *(_DWORD *)(v1449 + 8))
                        {
                          WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v1449, (unint64_t)v1842);
                        }
                        else
                        {
                          *(WTF::StringImpl **)(*(_QWORD *)v1449 + 8 * v1565) = v1842[0];
                          ++*(_DWORD *)(v1449 + 12);
                        }
                        v1566 = *((_QWORD *)this + 4);
                        v1567 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1843, (const JSC::DFG::NodeOrigin *)__e);
                        v1571 = (WTF::StringImpl *)JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1567, (uint64_t)v1843, 0xAuLL, 0, v1568, v1569, v1570);
                        v1842[0] = v1571;
                        v1579 = *(unsigned int *)(v1566 + 164);
                        if ((_DWORD)v1579 == *(_DWORD *)(v1566 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1566 + 152, (unint64_t)v1842, v1573, v1574, v1575, v1576, v1577, v1578);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1566 + 152) + 8 * v1579) = v1571;
                          *(_DWORD *)(v1566 + 164) = v1579 + 1;
                        }
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1843, v1572, v1573, v1574, v1575, v1576, v1577, v1578);
                        LODWORD(v1842[0]) = 11;
                        HIDWORD(v1842[0]) = v1771;
                        v1586 = *(unsigned int *)(v1449 + 12);
                        if ((_DWORD)v1586 == *(_DWORD *)(v1449 + 8))
                        {
                          WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v1449, (unint64_t)v1842);
                        }
                        else
                        {
                          *(WTF::StringImpl **)(*(_QWORD *)v1449 + 8 * v1586) = v1842[0];
                          ++*(_DWORD *)(v1449 + 12);
                        }
                        v1842[0] = this;
                        v1842[1] = (WTF::StringImpl *)__e;
                        if (HIDWORD(v1837))
                        {
                          v1587 = 0;
                          v1588 = 0;
                          do
                          {
                            v1589 = JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::String const&)#1}::operator()((uint64_t *)v1842, (WTF::StringImpl **)(v1836 + v1587), v1580, v1581, v1582, v1583, v1584, v1585);
                            v1590 = *((_QWORD *)this + 4);
                            v1841 = v1589 & 0xFF00FFFFFFFFFFFFLL;
                            v1591 = *(unsigned int *)(v1590 + 164);
                            if ((_DWORD)v1591 == *(_DWORD *)(v1590 + 160))
                            {
                              WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1590 + 152, (unint64_t)&v1841, (uint64_t)v1580, v1581, v1582, v1583, v1584, v1585);
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)(v1590 + 152) + 8 * v1591) = v1589 & 0xFF00FFFFFFFFFFFFLL;
                              *(_DWORD *)(v1590 + 164) = v1591 + 1;
                            }
                            LODWORD(v1841) = 10;
                            HIDWORD(v1841) = v1588;
                            v1592 = *(unsigned int *)(v1449 + 12);
                            if ((_DWORD)v1592 == *(_DWORD *)(v1449 + 8))
                            {
                              WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v1449, (unint64_t)&v1841);
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)v1449 + 8 * v1592) = v1841;
                              ++*(_DWORD *)(v1449 + 12);
                            }
                            ++v1588;
                            v1587 += 8;
                          }
                          while (v1588 < HIDWORD(v1837));
                        }
                        v1593 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1840, (const JSC::DFG::NodeOrigin *)__e);
                        v1594 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>((uint64_t)this + 72, v1593, 2, 0, 0x119u, (uint64_t)v1840, (uint64_t)v1773, v1449, v1772, *(unsigned int *)(*((_QWORD *)this + 4) + 164) - v1772);
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1840, v1595, v1596, v1597, v1598, v1599, v1600, v1601);
                        JSC::DFG::Node::convertToIdentityOn(*((_QWORD *)this + 30), v1594);
                        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1836, v1602, v1603, v1604, v1605, v1606, v1607, v1608);
LABEL_772:
                        if ((*(_WORD *)(v232 + 18) & 0x82) != 0)
                        {
                          v660 = *((unsigned int *)this + 58);
                          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1839, (const JSC::DFG::NodeOrigin *)__e);
                          v661 = v1819 & 0xFF00FFFFFFFFFFFFLL | 0x40000000000000;
                          v662 = *((unsigned int *)this + 58);
                          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1838, (const JSC::DFG::NodeOrigin *)__e);
                          if (*(_QWORD *)v1852 == -1)
                            v666 = 0;
                          else
                            v666 = *(_QWORD *)&v1852[2];
                          v667 = HIDWORD(v666);
                          v668 = v666 | 0xFFFE000000000000;
                          if ((v666 & 0x80000000) != 0)
                            v668 = COERCE__INT64((double)v666) + 0x2000000000000;
                          v669 = COERCE__INT64((double)v666) + 0x2000000000000;
                          if (v667)
                            v670 = v669;
                          else
                            v670 = v668;
                          v671 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v662, (uint64_t)v1838, v670, 0, v663, v664, v665);
                          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 72, v660, 0, 0xB4u, (uint64_t)v1839, 0, v661, v671);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1838, v672, v673, v674, v675, v676, v677, v678);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1839, v679, v680, v681, v682, v683, v684, v685);
                          JSC::DFG::NodeOrigin::withExitOK((uint64_t)__e, 0, (uint64_t)&v1836);
                          JSC::DFG::NodeOrigin::operator=((uint64_t *)__e, (uint64_t *)&v1836, v686, v687, v688, v689, v690, v691);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1836, v692, v693, v694, v695, v696, v697, v698);
                        }
                        if (*(_QWORD *)v1852 == -1)
                          goto LABEL_783;
                        v1261 = *((_QWORD *)this + 4);
                        v1262 = *(unsigned int *)(v1261 + 164);
                        v1263 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1835, (const JSC::DFG::NodeOrigin *)__e);
                        v1267 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t)this + 72, v1263, (uint64_t)v1835, (unint64_t *)v1774, 9, v1264, v1265, v1266);
                        v1836 = v1267;
                        v1275 = *(unsigned int *)(v1261 + 164);
                        if ((_DWORD)v1275 == *(_DWORD *)(v1261 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1261 + 152, (unint64_t)&v1836, v1269, v1270, v1271, v1272, v1273, v1274);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1261 + 152) + 8 * v1275) = v1267;
                          *(_DWORD *)(v1261 + 164) = v1275 + 1;
                        }
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1835, v1268, v1269, v1270, v1271, v1272, v1273, v1274);
                        v1276 = *((_QWORD *)this + 4);
                        v1277 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1834, (const JSC::DFG::NodeOrigin *)__e);
                        v1281 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t)this + 72, v1277, (uint64_t)v1834, (unint64_t *)v1778, 9, v1278, v1279, v1280);
                        v1836 = v1281;
                        v1289 = *(unsigned int *)(v1276 + 164);
                        if ((_DWORD)v1289 == *(_DWORD *)(v1276 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1276 + 152, (unint64_t)&v1836, v1283, v1284, v1285, v1286, v1287, v1288);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1276 + 152) + 8 * v1289) = v1281;
                          *(_DWORD *)(v1276 + 164) = v1289 + 1;
                        }
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1834, v1282, v1283, v1284, v1285, v1286, v1287, v1288);
                        v1296 = *((_QWORD *)this + 4);
                        v1836 = v338 | 0x24000000000000;
                        v1297 = *(unsigned int *)(v1296 + 164);
                        if ((_DWORD)v1297 == *(_DWORD *)(v1296 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1296 + 152, (unint64_t)&v1836, v1290, v1291, v1292, v1293, v1294, v1295);
                          v1296 = *((_QWORD *)this + 4);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1296 + 152) + 8 * v1297) = v338 | 0x24000000000000;
                          *(_DWORD *)(v1296 + 164) = v1297 + 1;
                        }
                        v1298 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1833, (const JSC::DFG::NodeOrigin *)__e);
                        v1302 = *(_QWORD *)v1852 | 0xFFFE000000000000;
                        if ((v1852[0] & 0x80000000) != 0)
                          v1302 = COERCE__INT64((double)v1852[0]) + 0x2000000000000;
                        if (v1852[1])
                          v1303 = COERCE__INT64((double)*(unint64_t *)v1852) + 0x2000000000000;
                        else
                          v1303 = v1302;
                        v1304 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1298, (uint64_t)v1833, v1303, 2, v1299, v1300, v1301);
                        v1836 = v1304;
                        v1312 = *(unsigned int *)(v1296 + 164);
                        if ((_DWORD)v1312 == *(_DWORD *)(v1296 + 160))
                        {
                          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1296 + 152, (unint64_t)&v1836, v1306, v1307, v1308, v1309, v1310, v1311);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(v1296 + 152) + 8 * v1312) = v1304;
                          *(_DWORD *)(v1296 + 164) = v1312 + 1;
                        }
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1833, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
                        v1313 = *((_QWORD *)this + 4);
                        v1314 = *((unsigned int *)this + 58);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1832, (const JSC::DFG::NodeOrigin *)__e);
                        if (HIDWORD(*(_QWORD *)&v1852[2]))
                        {
                          v1738 = (double)*(unint64_t *)&v1852[2];
                        }
                        else
                        {
                          if ((v1852[2] & 0x80000000) == 0)
                          {
                            v1318 = *(_QWORD *)&v1852[2] | 0xFFFE000000000000;
LABEL_1416:
                            v1319 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v1314, (uint64_t)v1832, v1318, 2, v1315, v1316, v1317);
                            v1836 = v1319;
                            v1327 = *(unsigned int *)(v1313 + 164);
                            if ((_DWORD)v1327 == *(_DWORD *)(v1313 + 160))
                            {
                              WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1313 + 152, (unint64_t)&v1836, v1321, v1322, v1323, v1324, v1325, v1326);
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)(v1313 + 152) + 8 * v1327) = v1319;
                              *(_DWORD *)(v1313 + 164) = v1327 + 1;
                            }
                            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1832, v1320, v1321, v1322, v1323, v1324, v1325, v1326);
                            v1328 = *((unsigned int *)this + 58);
                            JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1831, (const JSC::DFG::NodeOrigin *)__e);
                            JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>((uint64_t)this + 72, v1328, 0, 0, 0xB5u, (uint64_t)v1831, 0, 0, v1262, *(unsigned int *)(*((_QWORD *)this + 4) + 164) - v1262);
                            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1831, v1329, v1330, v1331, v1332, v1333, v1334, v1335);
                            JSC::DFG::NodeOrigin::withExitOK((uint64_t)__e, 0, (uint64_t)&v1836);
                            JSC::DFG::NodeOrigin::operator=((uint64_t *)__e, (uint64_t *)&v1836, v1336, v1337, v1338, v1339, v1340, v1341);
                            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1836, v1342, v1343, v1344, v1345, v1346, v1347, v1348);
LABEL_783:
                            JSC::DFG::NodeOrigin::operator=(*((uint64_t **)this + 30), (uint64_t *)__e, v654, v655, v656, v657, v658, v659);
                            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)__e, v699, v700, v701, v702, v703, v704, v705);
                            v706 = 1;
                            goto LABEL_784;
                          }
                          v1738 = (double)v1852[2];
                        }
                        v1318 = *(_QWORD *)&v1738 + 0x2000000000000;
                        goto LABEL_1416;
                      }
                      v1739 = (double)v1852[0];
                    }
                    v1546 = *(_QWORD *)&v1739 + 0x2000000000000;
                    goto LABEL_1533;
                  }
                }
                v706 = 0;
LABEL_784:
                v707 = v1850;
                if (v1850)
                {
                  v1850 = 0;
                  LODWORD(v1851) = 0;
                  WTF::fastFree((unint64_t)v707, v604, v605, v606, v607, v608, v609, v610);
                }
LABEL_1787:
                v1748 = v1853;
                v1853 = 0;
                if (v1748)
                {
                  if (*(_DWORD *)v1748 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1748, (WTF::AtomStringImpl *)v604, v605, v606, v607, v608, v609, v610);
                    WTF::fastFree(v1749, v1750, v1751, v1752, v1753, v1754, v1755, v1756);
                  }
                  else
                  {
                    *(_DWORD *)v1748 -= 2;
                  }
                }
                if ((v706 & 1) != 0)
                  return;
              }
LABEL_483:
              v341 = *((_QWORD *)this + 30);
              if (*(_WORD *)(v341 + 18) == 219
                && (*(_WORD *)(v232 + 18) & 0xE2) == 0
                && *(_BYTE *)(v232 + 16) == 1
                && (v342 = *(_QWORD *)(v232 + 40)) != 0
                && (v343 = *(_QWORD *)(v342 + 80), v343 < 0)
                && DWORD2(xmmword_1ECF4C4C0) >= v343)
              {
                v344 = ((HIDWORD(v343) & 0x3FFFFFFF) + 15) & 0x7FFFFFF0;
                if (v344)
                {
                  v345 = *((_QWORD *)this + 4);
                  if (v344 >= 0x30)
                    v346 = (v344 >> 3) - 5;
                  else
                    v346 = 0;
                  if (*(_DWORD *)(v345 + 860) > v346)
                    v346 = *(_DWORD *)(v345 + 860);
                  *(_DWORD *)(v345 + 860) = v346;
                }
                v347 = *(_QWORD *)v341;
                if ((*(_QWORD *)v341 & 1) != 0)
                {
                  v1104 = *(_QWORD *)(v347 & 0xFFFFFFFF8);
                  if ((v347 & 2) != 0
                    || (v1105 = *(unsigned int *)((v347 & 0xFFFFFFFF8) + 8), (_DWORD)v1105 == 0x3FFFFFFF)
                    || (_DWORD)v1105 == -1)
                  {
                    v1106 = 2;
                  }
                  else if (v1105 >> 28)
                  {
                    v1722 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1722 = v1104;
                    *(_DWORD *)(v1722 + 8) = v1105;
                    v1106 = 1;
                    v1104 = v1722;
                  }
                  else
                  {
                    v1106 = v1104;
                    v1104 = v1105 << 36;
                  }
                  v347 = v1104 | v1106;
                }
                v348 = *(_QWORD *)(v341 + 8);
                if ((v348 & 1) != 0)
                {
                  v1107 = *(_QWORD *)(v348 & 0xFFFFFFFF8);
                  if ((v348 & 2) != 0
                    || (v1108 = *(unsigned int *)((v348 & 0xFFFFFFFF8) + 8), (_DWORD)v1108 == 0x3FFFFFFF)
                    || (_DWORD)v1108 == -1)
                  {
                    v1109 = 2;
                  }
                  else if (v1108 >> 28)
                  {
                    v1723 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1723 = v1107;
                    *(_DWORD *)(v1723 + 8) = v1108;
                    v1109 = 1;
                    v1107 = v1723;
                  }
                  else
                  {
                    v1109 = v1107;
                    v1107 = v1108 << 36;
                  }
                  v348 = v1107 | v1109;
                }
                v349 = *(_WORD *)(v341 + 16);
                v350 = *((unsigned int *)this + 58);
                v351 = v347;
                if ((v347 & 1) != 0)
                {
                  v1110 = *(_QWORD *)(v347 & 0xFFFFFFFF8);
                  if ((v347 & 2) != 0
                    || (v1111 = *(unsigned int *)((v347 & 0xFFFFFFFF8) + 8), (_DWORD)v1111 == 0x3FFFFFFF)
                    || (_DWORD)v1111 == -1)
                  {
                    v1112 = 2;
                  }
                  else if (v1111 >> 28)
                  {
                    v1724 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1724 = v1110;
                    *(_DWORD *)(v1724 + 8) = v1111;
                    v1112 = 1;
                    v1110 = v1724;
                  }
                  else
                  {
                    v1112 = *(_QWORD *)(v347 & 0xFFFFFFFF8);
                    v1110 = v1111 << 36;
                  }
                  v351 = v1110 | v1112;
                }
                *(_QWORD *)__e = v351;
                v352 = v348;
                if ((v348 & 1) != 0)
                {
                  v1113 = *(_QWORD *)(v348 & 0xFFFFFFFF8);
                  if ((v348 & 2) != 0
                    || (v1114 = *(unsigned int *)((v348 & 0xFFFFFFFF8) + 8), (_DWORD)v1114 == 0x3FFFFFFF)
                    || (_DWORD)v1114 == -1)
                  {
                    v1115 = 2;
                  }
                  else if (v1114 >> 28)
                  {
                    v1725 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1725 = v1113;
                    *(_DWORD *)(v1725 + 8) = v1114;
                    v1115 = 1;
                    v1113 = v1725;
                  }
                  else
                  {
                    v1115 = *(_QWORD *)(v348 & 0xFFFFFFFF8);
                    v1113 = v1114 << 36;
                  }
                  v352 = v1113 | v1115;
                }
                *(_QWORD *)&__e[8] = v352;
                *(_WORD *)&__e[16] = v349;
                v353 = (_QWORD *)*((_QWORD *)this + 30);
                v1859 = 0;
                v1858 = 0uLL;
                v354 = v353[3];
                if ((v354 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v561 = 0;
                  if ((v354 & 0x1000000000000) == 0)
                  {
                    v562 = (v354 >> 50) & 0x3F;
                    if ((_DWORD)v562)
                    {
                      if (v562 > 0x34 || ((1 << v562) & 0x12400001800284) == 0)
                      {
                        *(_QWORD *)&v1858 = v353[3];
                        v561 = 1;
                      }
                    }
                  }
                  v563 = v353[4];
                  if ((v563 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    if ((v563 & 0x1000000000000) == 0)
                    {
                      v564 = (v563 >> 50) & 0x3F;
                      if ((_DWORD)v564)
                      {
                        if (v564 > 0x34 || ((1 << v564) & 0x12400001800284) == 0)
                          *((_QWORD *)&v1858 + v561++) = v563;
                      }
                    }
                    v565 = v353[5];
                    if ((v565 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v565 & 0x1000000000000) == 0)
                    {
                      v566 = (v565 >> 50) & 0x3F;
                      if ((_DWORD)v566)
                      {
                        if (v566 > 0x34 || ((1 << v566) & 0x12400001800284) == 0)
                          *((_QWORD *)&v1858 + v561) = v565;
                      }
                    }
                  }
                }
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v350, 0, 0x18u, (uint64_t)__e, &v1858);
                if ((__e[8] & 1) != 0 && (*(_QWORD *)&__e[8] & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*(_QWORD *)&__e[8] & 0xFFFFFFFF8, v355, v356, v357, v358, v359, v360, v361);
                if ((__e[0] & 1) != 0 && (*(_QWORD *)__e & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*(_QWORD *)__e & 0xFFFFFFFF8, v355, v356, v357, v358, v359, v360, v361);
                v362 = v347;
                if ((v347 & 1) != 0)
                {
                  v1116 = *(_QWORD *)(v347 & 0xFFFFFFFF8);
                  if ((v347 & 2) != 0
                    || (v1117 = *(unsigned int *)((v347 & 0xFFFFFFFF8) + 8), (_DWORD)v1117 == 0x3FFFFFFF)
                    || (_DWORD)v1117 == -1)
                  {
                    v1118 = 2;
                  }
                  else if (v1117 >> 28)
                  {
                    v1726 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1726 = v1116;
                    *(_DWORD *)(v1726 + 8) = v1117;
                    v1118 = 1;
                    v1116 = v1726;
                  }
                  else
                  {
                    v1118 = *(_QWORD *)(v347 & 0xFFFFFFFF8);
                    v1116 = v1117 << 36;
                  }
                  v362 = v1116 | v1118;
                }
                *(_QWORD *)&v1854 = v362;
                if ((v348 & 1) != 0)
                {
                  v1119 = *(_QWORD *)(v348 & 0xFFFFFFFF8);
                  if ((v348 & 2) != 0
                    || (v1120 = *(unsigned int *)((v348 & 0xFFFFFFFF8) + 8), (_DWORD)v1120 == 0x3FFFFFFF)
                    || (_DWORD)v1120 == -1)
                  {
                    v1121 = 2;
                  }
                  else if (v1120 >> 28)
                  {
                    v1727 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1727 = v1119;
                    *(_DWORD *)(v1727 + 8) = v1120;
                    v1121 = 1;
                    v1119 = v1727;
                  }
                  else
                  {
                    v1121 = *(_QWORD *)(v348 & 0xFFFFFFFF8);
                    v1119 = v1120 << 36;
                  }
                  v1122 = v1119 | v1121;
                  *((_QWORD *)&v1854 + 1) = v1122;
                  v1855 = v349;
                  JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()((uint64_t)&v1811, (uint64_t)&v1854, v356, v357, v358, v359, v360, v361);
                  if ((v1122 & 1) != 0 && (v1122 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1122 & 0xFFFFFFFF8, v363, v364, v365, v366, v367, v368, v369);
                }
                else
                {
                  *((_QWORD *)&v1854 + 1) = v348;
                  v1855 = v349;
                  JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()((uint64_t)&v1811, (uint64_t)&v1854, v356, v357, v358, v359, v360, v361);
                }
                if ((v362 & 1) != 0 && (v362 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v362 & 0xFFFFFFFF8, v363, v364, v365, v366, v367, v368, v369);
                v370 = *((_QWORD *)this + 30);
                v371 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v222, v364, v365, v366, v367, v368, v369);
                v378 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v232, v372, v373, v374, v375, v376, v377);
                *(_WORD *)(v370 + 18) = 220;
                *(_DWORD *)(v370 + 56) = 9;
                v386.i64[0] = 0xFF00FFFFFFFFFFFFLL;
                v386.i64[1] = 0xFF00FFFFFFFFFFFFLL;
                *(int8x16_t *)(v370 + 24) = vorrq_s8(vandq_s8(*(int8x16_t *)(v370 + 24), v386), (int8x16_t)xmmword_199156290);
                *(_QWORD *)(v370 + 72) = v371;
                *(_QWORD *)(v370 + 80) = v378;
                *((_BYTE *)this + 248) = 1;
                if ((v348 & 1) != 0 && (v348 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v348 & 0xFFFFFFFF8, v379, v380, v381, v382, v383, v384, v385);
                if ((v347 & 1) != 0)
                {
                  v387 = v347 & 0xFFFFFFFF8;
                  if ((v347 & 0xFFFFFFFF8) != 0)
                    goto LABEL_570;
                }
              }
              else if (*(_WORD *)(v341 + 18) == 217
                     && (*(_WORD *)(v232 + 18) & 0x82) == 0
                     && (*(_QWORD *)(v341 + 40) & 0xFC000000000000) == 0x54000000000000)
              {
                v398 = *(_QWORD *)v341;
                if ((*(_QWORD *)v341 & 1) != 0)
                {
                  v1224 = *(_QWORD *)(v398 & 0xFFFFFFFF8);
                  if ((v398 & 2) != 0
                    || (v1225 = *(unsigned int *)((v398 & 0xFFFFFFFF8) + 8), (_DWORD)v1225 == 0x3FFFFFFF)
                    || (_DWORD)v1225 == -1)
                  {
                    v1226 = 2;
                  }
                  else if (v1225 >> 28)
                  {
                    v1742 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1742 = v1224;
                    *(_DWORD *)(v1742 + 8) = v1225;
                    v1226 = 1;
                    v1224 = v1742;
                  }
                  else
                  {
                    v1226 = v1224;
                    v1224 = v1225 << 36;
                  }
                  v398 = v1224 | v1226;
                }
                v399 = *(_QWORD *)(v341 + 8);
                if ((v399 & 1) != 0)
                {
                  v1227 = *(_QWORD *)(v399 & 0xFFFFFFFF8);
                  if ((v399 & 2) != 0
                    || (v1228 = *(unsigned int *)((v399 & 0xFFFFFFFF8) + 8), (_DWORD)v1228 == 0x3FFFFFFF)
                    || (_DWORD)v1228 == -1)
                  {
                    v1229 = 2;
                  }
                  else if (v1228 >> 28)
                  {
                    v1743 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1743 = v1227;
                    *(_DWORD *)(v1743 + 8) = v1228;
                    v1229 = 1;
                    v1227 = v1743;
                  }
                  else
                  {
                    v1229 = v1227;
                    v1227 = v1228 << 36;
                  }
                  v399 = v1227 | v1229;
                }
                v400 = *(_WORD *)(v341 + 16);
                v401 = *((unsigned int *)this + 58);
                v402 = v398;
                if ((v398 & 1) != 0)
                {
                  v1230 = *(_QWORD *)(v398 & 0xFFFFFFFF8);
                  if ((v398 & 2) != 0
                    || (v1231 = *(unsigned int *)((v398 & 0xFFFFFFFF8) + 8), (_DWORD)v1231 == 0x3FFFFFFF)
                    || (_DWORD)v1231 == -1)
                  {
                    v1232 = 2;
                  }
                  else if (v1231 >> 28)
                  {
                    v1744 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1744 = v1230;
                    *(_DWORD *)(v1744 + 8) = v1231;
                    v1232 = 1;
                    v1230 = v1744;
                  }
                  else
                  {
                    v1232 = *(_QWORD *)(v398 & 0xFFFFFFFF8);
                    v1230 = v1231 << 36;
                  }
                  v402 = v1230 | v1232;
                }
                *(_QWORD *)__e = v402;
                v403 = v399;
                if ((v399 & 1) != 0)
                {
                  v1233 = *(_QWORD *)(v399 & 0xFFFFFFFF8);
                  if ((v399 & 2) != 0
                    || (v1234 = *(unsigned int *)((v399 & 0xFFFFFFFF8) + 8), (_DWORD)v1234 == 0x3FFFFFFF)
                    || (_DWORD)v1234 == -1)
                  {
                    v1235 = 2;
                  }
                  else if (v1234 >> 28)
                  {
                    v1745 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1745 = v1233;
                    *(_DWORD *)(v1745 + 8) = v1234;
                    v1235 = 1;
                    v1233 = v1745;
                  }
                  else
                  {
                    v1235 = *(_QWORD *)(v399 & 0xFFFFFFFF8);
                    v1233 = v1234 << 36;
                  }
                  v403 = v1233 | v1235;
                }
                *(_QWORD *)&__e[8] = v403;
                *(_WORD *)&__e[16] = v400;
                v404 = (_QWORD *)*((_QWORD *)this + 30);
                v1859 = 0;
                v1858 = 0uLL;
                v405 = v404[3];
                if ((v405 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v708 = 0;
                  if ((v405 & 0x1000000000000) == 0)
                  {
                    v709 = (v405 >> 50) & 0x3F;
                    if ((_DWORD)v709)
                    {
                      if (v709 > 0x34 || ((1 << v709) & 0x12400001800284) == 0)
                      {
                        *(_QWORD *)&v1858 = v404[3];
                        v708 = 1;
                      }
                    }
                  }
                  v710 = v404[4];
                  if ((v710 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    if ((v710 & 0x1000000000000) == 0)
                    {
                      v711 = (v710 >> 50) & 0x3F;
                      if ((_DWORD)v711)
                      {
                        if (v711 > 0x34 || ((1 << v711) & 0x12400001800284) == 0)
                          *((_QWORD *)&v1858 + v708++) = v710;
                      }
                    }
                    v712 = v404[5];
                    if ((v712 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v712 & 0x1000000000000) == 0)
                    {
                      v713 = (v712 >> 50) & 0x3F;
                      if ((_DWORD)v713)
                      {
                        if (v713 > 0x34 || ((1 << v713) & 0x12400001800284) == 0)
                          *((_QWORD *)&v1858 + v708) = v712;
                      }
                    }
                  }
                }
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v401, 0, 0x18u, (uint64_t)__e, &v1858);
                if ((__e[8] & 1) != 0 && (*(_QWORD *)&__e[8] & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*(_QWORD *)&__e[8] & 0xFFFFFFFF8, v406, v407, v408, v409, v410, v411, v412);
                if ((__e[0] & 1) != 0 && (*(_QWORD *)__e & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*(_QWORD *)__e & 0xFFFFFFFF8, v406, v407, v408, v409, v410, v411, v412);
                v413 = v398;
                if ((v398 & 1) != 0)
                {
                  v1236 = *(_QWORD *)(v398 & 0xFFFFFFFF8);
                  if ((v398 & 2) != 0
                    || (v1237 = *(unsigned int *)((v398 & 0xFFFFFFFF8) + 8), (_DWORD)v1237 == 0x3FFFFFFF)
                    || (_DWORD)v1237 == -1)
                  {
                    v1238 = 2;
                  }
                  else if (v1237 >> 28)
                  {
                    v1746 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1746 = v1236;
                    *(_DWORD *)(v1746 + 8) = v1237;
                    v1238 = 1;
                    v1236 = v1746;
                  }
                  else
                  {
                    v1238 = *(_QWORD *)(v398 & 0xFFFFFFFF8);
                    v1236 = v1237 << 36;
                  }
                  v413 = v1236 | v1238;
                }
                *(_QWORD *)&v1854 = v413;
                if ((v399 & 1) != 0)
                {
                  v1239 = *(_QWORD *)(v399 & 0xFFFFFFFF8);
                  if ((v399 & 2) != 0
                    || (v1240 = *(unsigned int *)((v399 & 0xFFFFFFFF8) + 8), (_DWORD)v1240 == 0x3FFFFFFF)
                    || (_DWORD)v1240 == -1)
                  {
                    v1241 = 2;
                  }
                  else if (v1240 >> 28)
                  {
                    v1747 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1747 = v1239;
                    *(_DWORD *)(v1747 + 8) = v1240;
                    v1241 = 1;
                    v1239 = v1747;
                  }
                  else
                  {
                    v1241 = *(_QWORD *)(v399 & 0xFFFFFFFF8);
                    v1239 = v1240 << 36;
                  }
                  v1242 = v1239 | v1241;
                  *((_QWORD *)&v1854 + 1) = v1242;
                  v1855 = v400;
                  JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()((uint64_t)&v1811, (uint64_t)&v1854, v407, v408, v409, v410, v411, v412);
                  if ((v1242 & 1) != 0 && (v1242 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1242 & 0xFFFFFFFF8, v414, v415, v416, v417, v418, v419, v420);
                }
                else
                {
                  *((_QWORD *)&v1854 + 1) = v399;
                  v1855 = v400;
                  JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()((uint64_t)&v1811, (uint64_t)&v1854, v407, v408, v409, v410, v411, v412);
                }
                if ((v413 & 1) != 0 && (v413 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v413 & 0xFFFFFFFF8, v414, v415, v416, v417, v418, v419, v420);
                v421 = *((_QWORD *)this + 30);
                v422 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v232, v415, v416, v417, v418, v419, v420);
                *(_WORD *)(v421 + 18) = 218;
                *(_DWORD *)(v421 + 56) = 1;
                *(_BYTE *)(v421 + 30) = 36;
                *(_QWORD *)(v421 + 32) = *(_QWORD *)(v421 + 40) & 0xFF00FFFFFFFFFFFFLL | 0x5C000000000000;
                *(_QWORD *)(v421 + 40) = 0;
                *(_QWORD *)(v421 + 72) = v422;
                *((_BYTE *)this + 248) = 1;
                if ((v399 & 1) != 0 && (v399 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v399 & 0xFFFFFFFF8, v379, v380, v381, v382, v383, v384, v385);
                if ((v398 & 1) != 0)
                {
                  v387 = v398 & 0xFFFFFFFF8;
                  if ((v398 & 0xFFFFFFFF8) != 0)
                    goto LABEL_570;
                }
              }
              return;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(v521, v330, v331, a4, a5, a6, a7, a8);
          goto LABEL_468;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v328);
        goto LABEL_467;
      }
      if (v228 != 270)
        return;
      v311 = *((_QWORD *)this + 4);
      v312 = *(_QWORD *)v227;
      if ((*(_QWORD *)v227 & 1) != 0)
      {
        v1161 = *(_QWORD *)(v312 & 0xFFFFFFFF8);
        if ((v312 & 2) != 0
          || ((v1162 = *(_DWORD *)((v312 & 0xFFFFFFFF8) + 8), v1162 != 0x3FFFFFFF)
            ? (v1163 = v1162 == -1)
            : (v1163 = 1),
              v1163))
        {
          v1164 = 2;
        }
        else if (v1162 >> 28)
        {
          v1736 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1736 = v1161;
          *(_DWORD *)(v1736 + 8) = v1162;
          v1164 = 1;
          v1161 = v1736;
        }
        else
        {
          v1164 = v1161;
          v1161 = 0;
        }
        v312 = v1161 | v1164;
        v313 = *(_QWORD *)(v311 + 32);
        if (((v1161 | v1164) & 1) != 0)
        {
          v1165 = *(_QWORD *)(v312 & 0xFFFFFFFF8);
          if ((v312 & 2) != 0
            || ((v1166 = *(_DWORD *)((v312 & 0xFFFFFFFF8) + 8), v1166 != 0x3FFFFFFF)
              ? (v1167 = v1166 == -1)
              : (v1167 = 1),
                v1167))
          {
            v1168 = 2;
          }
          else if (v1166 >> 28)
          {
            v1737 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1737 = v1165;
            *(_DWORD *)(v1737 + 8) = v1166;
            v1168 = 1;
            v1165 = v1737;
          }
          else
          {
            v1168 = *(_QWORD *)(v312 & 0xFFFFFFFF8);
            v1165 = 0;
          }
          v1169 = v1165 | v1168;
          v314 = (_QWORD *)(v1169 & 0xFFFFFFFF8);
          if ((v1169 & 1) != 0)
          {
            v315 = 0;
            v316 = 0;
            v317 = (_QWORD *)*v314;
            goto LABEL_437;
          }
          v316 = 0;
          v315 = 1;
LABEL_436:
          v317 = v314;
LABEL_437:
          if (v317)
            v313 = v317[1];
          v318 = *(_QWORD *)(v313 + 8);
          if ((v315 & 1) == 0 && v314)
            WTF::fastFree((unint64_t)v314, a2, a3, a4, a5, a6, a7, a8);
          if ((v316 & 1) == 0 && (v312 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v312 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          if (*(_BYTE *)(*(_QWORD *)(v318 + 2072) + 4) == 2)
            return;
          v319 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136);
          *(_QWORD *)&v1858 = *(_QWORD *)(v318 + 2072);
          WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v319, (uint64_t *)&v1858, a4, a5, a6, a7, a8, (uint64_t)__e);
          v233 = 0;
          v225 = v1819;
          goto LABEL_443;
        }
      }
      else
      {
        v313 = *(_QWORD *)(v311 + 32);
      }
      v314 = (_QWORD *)(v312 & 0xFFFFFFFF8);
      v315 = 1;
      v316 = 1;
      goto LABEL_436;
    case 0xDF:
    case 0xE0:
      v298 = *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v299 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
      v300 = *(unsigned __int16 *)(v298 + 18);
      if (v300 <= 2)
        goto LABEL_393;
      if (*(unsigned __int16 *)(v298 + 18) > 0xB5u)
      {
        if (v300 == 182)
        {
LABEL_393:
          v301 = *(__int128 **)(v298 + 72);
        }
        else
        {
          if (v300 != 355 && v300 != 348)
            return;
          v301 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v301;
      }
      else
      {
        if (v300 != 3)
          return;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)(v298 + 72);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v299, a4, a5, a6, a7, a8, (int **)v1847);
      if (!v1847[0])
        return;
      v119 = (WTF::AtomStringImpl *)*((_QWORD *)this + 4);
      v302 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v302 <= 2)
        goto LABEL_824;
      if (*(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
      {
        if (v302 == 182)
        {
LABEL_824:
          v714 = *(__int128 **)((*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        }
        else
        {
          if (v302 != 355 && v302 != 348)
            goto LABEL_398;
          v714 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v714;
      }
      else
      {
        if (v302 != 3)
          goto LABEL_398;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)((*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL)
                                              + 0x48);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v119, v113, v114, v115, v116, v117, (int **)v1846);
      if (!v1846[0])
        goto LABEL_398;
      v119 = (WTF::AtomStringImpl *)*((_QWORD *)this + 30);
      v720 = *((_QWORD *)v119 + 4) & 0xFF00FFFFFFFFFFFFLL;
      v721 = *(unsigned __int16 *)(v720 + 0x12);
      if (v721 <= 2)
      {
        v722 = **(_QWORD **)((*((_QWORD *)v119 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (v722)
          v723 = (v722 & 0xFFFE000000000002) == 0;
        else
          v723 = 0;
        if (v723 && *(_BYTE *)(v722 + 5) == 59)
        {
          v724 = *(_QWORD *)(16 * (*(_DWORD *)v722 & 0xFFFFFFFE) + 0x28);
          v725 = *((_QWORD *)this + 4);
          if (((*(_DWORD *)(*(_QWORD *)(v725 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
            goto LABEL_835;
          JSC::CodeOrigin::CodeOrigin(&v1810, v119);
          v1473 = JSC::DFG::Graph::globalObjectFor(v725, &v1810, v1467, v1468, v1469, v1470, v1471, v1472);
          if ((v1810 & 1) != 0 && (v1810 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1810 & 0xFFFFFFFF8, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          if (v724 == v1473)
          {
LABEL_835:
            if (*(_BYTE *)(*(_QWORD *)(v724 + 2072) + 4) != 2)
            {
              v726 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136);
              *(_QWORD *)&v1858 = *(_QWORD *)(v724 + 2072);
              WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v726, (uint64_t *)&v1858, v113, v114, v115, v116, v117, (uint64_t)__e);
              v727 = (WTF::Thread *)(*(_QWORD *)(v722 + 16) & 0xFFFFFFFFFFFFFFFCLL);
LABEL_837:
              v728 = 0;
              v729 = 0;
              v1858 = 0uLL;
              LODWORD(v1859) = 0;
              BYTE4(v1859) = 1;
              v730 = 1;
              while (1)
              {
                if ((v1854 = xmmword_199154590, v1849 = 0, v1848 = 0, v1846[0]) && *((_DWORD *)v1846[0] + 1)
                  || (*((_WORD *)v727 + 9) & 2) == 0)
                {
                  *(_DWORD *)__e = 0;
                  if (!JSC::RegExp::matchConcurrently((uint64_t)v727, *(JSC::VM **)(*((_QWORD *)this + 4) + 16), (uint64_t)v1847, v729, (int *)__e, (uint64_t *)&v1848, v116, v117))
                  {
LABEL_1173:
                    v730 = 0;
LABEL_867:
                    v737 = 0;
                    goto LABEL_862;
                  }
                  v731 = *(int *)__e;
                  *(_QWORD *)&v1854 = *(int *)__e;
                  if (HIDWORD(v1849) <= 1)
                  {
                    __break(0xC471u);
                    goto LABEL_1815;
                  }
                  *((_QWORD *)&v1854 + 1) = *((int *)v1848 + 1);
                }
                else
                {
                  if (!JSC::RegExp::matchConcurrently(v727, *(JSC::VM **)(*((_QWORD *)this + 4) + 16), (uint64_t *)v1847, v729, (uint64_t *)&v1854, v115, v116, v117))goto LABEL_1173;
                  v731 = v1854;
                }
                if (v731 == -1)
                  goto LABEL_867;
                v732 = v1846[0] ? *((_DWORD *)v1846[0] + 1) : 0;
                if (v731 > v728 || v732)
                  break;
LABEL_860:
                v728 = DWORD2(v1854);
                v729 = *((_QWORD *)&v1854 + 1);
                if ((_QWORD)v1854 == *((_QWORD *)&v1854 + 1))
                {
                  v927 = v1847[0];
                  if (v1847[0])
                    v927 = *((_DWORD *)v1847[0] + 1);
                  v729 = (DWORD2(v1854) + 1);
                  if (v729 > v927)
                    goto LABEL_867;
                }
                v737 = 1;
LABEL_862:
                v738 = v1848;
                if (v1848)
                {
                  v1848 = 0;
                  LODWORD(v1849) = 0;
                  WTF::fastFree((unint64_t)v738, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                }
                if (!v737 || (*((_WORD *)v727 + 9) & 2) == 0)
                {
                  if ((v730 & 1) != 0)
                  {
                    *((_BYTE *)this + 248) = 1;
                    v739 = *((_QWORD *)this + 30);
                    v740 = *(_QWORD *)v739;
                    if ((*(_QWORD *)v739 & 1) != 0)
                    {
                      v1610 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                      if ((v740 & 2) != 0
                        || ((v1611 = *(unsigned int *)((v740 & 0xFFFFFFFF8) + 8), (_DWORD)v1611 != 0x3FFFFFFF)
                          ? (v1612 = (_DWORD)v1611 == -1)
                          : (v1612 = 1),
                            v1612))
                      {
                        v1613 = 2;
                      }
                      else if (v1611 >> 28)
                      {
                        v1757 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v1757 = v1610;
                        *(_DWORD *)(v1757 + 8) = v1611;
                        v1613 = 1;
                        v1610 = v1757;
                      }
                      else
                      {
                        v1613 = v1610;
                        v1610 = v1611 << 36;
                      }
                      v740 = v1610 | v1613;
                    }
                    *(_QWORD *)&v1854 = v740;
                    v741 = *(_QWORD *)(v739 + 8);
                    if ((v741 & 1) != 0)
                    {
                      v1614 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                      if ((v741 & 2) != 0
                        || ((v1615 = *(unsigned int *)((v741 & 0xFFFFFFFF8) + 8), (_DWORD)v1615 != 0x3FFFFFFF)
                          ? (v1616 = (_DWORD)v1615 == -1)
                          : (v1616 = 1),
                            v1616))
                      {
                        v1617 = 2;
                      }
                      else if (v1615 >> 28)
                      {
                        v1758 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v1758 = v1614;
                        *(_DWORD *)(v1758 + 8) = v1615;
                        v1617 = 1;
                        v1614 = v1758;
                      }
                      else
                      {
                        v1617 = v1614;
                        v1614 = v1615 << 36;
                      }
                      v741 = v1614 | v1617;
                    }
                    *((_QWORD *)&v1854 + 1) = v741;
                    v742 = *(_WORD *)(v739 + 16);
                    v1855 = v742;
                    v743 = *((unsigned int *)this + 58);
                    v744 = v740;
                    if ((v740 & 1) != 0)
                    {
                      v1779 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                      if ((v740 & 2) != 0
                        || ((v1618 = *(unsigned int *)((v740 & 0xFFFFFFFF8) + 8), (_DWORD)v1618 != 0x3FFFFFFF)
                          ? (v1619 = (_DWORD)v1618 == -1)
                          : (v1619 = 1),
                            v1619))
                      {
                        v1620 = 2;
                      }
                      else if (v1618 >> 28)
                      {
                        v1759 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v1759 = v1779;
                        *(_DWORD *)(v1759 + 8) = v1618;
                        v1620 = 1;
                        v1779 = v1759;
                      }
                      else
                      {
                        v1620 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                        v1779 = v1618 << 36;
                      }
                      v744 = v1779 | v1620;
                    }
                    v1806 = v744;
                    v745 = v741;
                    if ((v741 & 1) != 0)
                    {
                      v1780 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                      if ((v741 & 2) != 0
                        || ((v1621 = *(_DWORD *)((v741 & 0xFFFFFFFF8) + 8), v1775 = v1621, v1621 != 0x3FFFFFFF)
                          ? (v1622 = v1621 == -1)
                          : (v1622 = 1),
                            v1622))
                      {
                        v1623 = 2;
                      }
                      else if (v1621 >> 28)
                      {
                        v1760 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v1760 = v1780;
                        *(_DWORD *)(v1760 + 8) = v1775;
                        v1623 = 1;
                        v1780 = v1760;
                      }
                      else
                      {
                        v1623 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                        v1780 = (unint64_t)v1621 << 36;
                      }
                      v745 = v1780 | v1623;
                    }
                    v1807 = v745;
                    v1808 = v742;
                    v746 = (_QWORD *)*((_QWORD *)this + 30);
                    v1805 = 0;
                    v1804 = 0uLL;
                    v747 = v746[3];
                    if ((v747 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v792 = 0;
                      if ((v747 & 0x1000000000000) == 0)
                      {
                        v793 = (v747 >> 50) & 0x3F;
                        if ((_DWORD)v793)
                        {
                          if (v793 > 0x34 || ((1 << v793) & 0x12400001800284) == 0)
                          {
                            *(_QWORD *)&v1804 = v746[3];
                            v792 = 1;
                          }
                        }
                      }
                      v794 = v746[4];
                      if ((v794 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        if ((v794 & 0x1000000000000) == 0)
                        {
                          v795 = (v794 >> 50) & 0x3F;
                          if ((_DWORD)v795)
                          {
                            if (v795 > 0x34 || ((1 << v795) & 0x12400001800284) == 0)
                              *((_QWORD *)&v1804 + v792++) = v794;
                          }
                        }
                        v796 = v746[5];
                        if ((v796 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v796 & 0x1000000000000) == 0)
                        {
                          v797 = (v796 >> 50) & 0x3F;
                          if ((_DWORD)v797)
                          {
                            if (v797 > 0x34 || ((1 << v797) & 0x12400001800284) == 0)
                              *((_QWORD *)&v1804 + v792) = v796;
                          }
                        }
                      }
                    }
                    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v743, 0, 0x18u, (uint64_t)&v1806, &v1804);
                    if ((v1807 & 1) != 0 && (v1807 & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v1807 & 0xFFFFFFFF8, v748, v749, v750, v751, v752, v753, v754);
                    if ((v1806 & 1) != 0 && (v1806 & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v1806 & 0xFFFFFFFF8, v748, v749, v750, v751, v752, v753, v754);
                    if ((*((_WORD *)v727 + 9) & 2) != 0)
                    {
                      v755 = *((unsigned int *)this + 58);
                      v756 = v740;
                      if ((v740 & 1) != 0)
                      {
                        v1781 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                        if ((v740 & 2) != 0
                          || (v1682 = *(unsigned int *)((v740 & 0xFFFFFFFF8) + 8), (_DWORD)v1682 == 0x3FFFFFFF)
                          || (_DWORD)v1682 == -1)
                        {
                          v1683 = 2;
                        }
                        else if (v1682 >> 28)
                        {
                          v1761 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1761 = v1781;
                          *(_DWORD *)(v1761 + 8) = v1682;
                          v1683 = 1;
                          v1781 = v1761;
                        }
                        else
                        {
                          v1683 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                          v1781 = v1682 << 36;
                        }
                        v756 = v1781 | v1683;
                      }
                      v1801 = v756;
                      v757 = v741;
                      if ((v741 & 1) != 0)
                      {
                        v1782 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                        if ((v741 & 2) != 0
                          || (v1684 = *(unsigned int *)((v741 & 0xFFFFFFFF8) + 8), (_DWORD)v1684 == 0x3FFFFFFF)
                          || (_DWORD)v1684 == -1)
                        {
                          v1685 = 2;
                        }
                        else if (v1684 >> 28)
                        {
                          v1762 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1762 = v1782;
                          *(_DWORD *)(v1762 + 8) = v1684;
                          v1685 = 1;
                          v1782 = v1762;
                        }
                        else
                        {
                          v1685 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                          v1782 = v1684 << 36;
                        }
                        v757 = v1782 | v1685;
                      }
                      v1802 = v757;
                      v1803 = v742;
                      v758 = v720 | 0x40000000000000;
                      v759 = v740;
                      v760 = *((unsigned int *)this + 58);
                      if ((v740 & 1) != 0)
                      {
                        v1783 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                        if ((v740 & 2) != 0
                          || (v1776 = *(unsigned int *)((v740 & 0xFFFFFFFF8) + 8), (_DWORD)v1776 == 0x3FFFFFFF)
                          || (_DWORD)v1776 == -1)
                        {
                          v1686 = 2;
                        }
                        else if (v1776 >> 28)
                        {
                          v1763 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1763 = v1783;
                          *(_DWORD *)(v1763 + 8) = v1776;
                          v1686 = 1;
                          v1783 = v1763;
                        }
                        else
                        {
                          v1686 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                          v1783 = v1776 << 36;
                        }
                        v759 = v1783 | v1686;
                      }
                      v1798 = v759;
                      v761 = v741;
                      if ((v741 & 1) != 0)
                      {
                        v1784 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                        if ((v741 & 2) != 0
                          || (v1777 = *(unsigned int *)((v741 & 0xFFFFFFFF8) + 8), (_DWORD)v1777 == 0x3FFFFFFF)
                          || (_DWORD)v1777 == -1)
                        {
                          v1687 = 2;
                        }
                        else if (v1777 >> 28)
                        {
                          v1764 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1764 = v1784;
                          *(_DWORD *)(v1764 + 8) = v1777;
                          v1687 = 1;
                          v1784 = v1764;
                        }
                        else
                        {
                          v1687 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                          v1784 = v1777 << 36;
                        }
                        v761 = v1784 | v1687;
                      }
                      v1799 = v761;
                      v1800 = v742;
                      v762 = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)this + 9, v760, (uint64_t)&v1798, 0xFFFE000000000000, 0, v752, v753, v754);
                      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 72, v755, 0, 0xB4u, (uint64_t)&v1801, 0, v758, v762);
                      if ((v1799 & 1) != 0 && (v1799 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v1799 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      if ((v1798 & 1) != 0 && (v1798 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v1798 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      if ((v1802 & 1) != 0 && (v1802 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v1802 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      if ((v1801 & 1) != 0 && (v1801 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v1801 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      v765 = v740;
                      if ((v740 & 1) != 0)
                      {
                        v1688 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                        if ((v740 & 2) != 0
                          || (v1689 = *(unsigned int *)((v740 & 0xFFFFFFFF8) + 8), (_DWORD)v1689 == 0x3FFFFFFF)
                          || (_DWORD)v1689 == -1)
                        {
                          v1690 = 2;
                        }
                        else if (v1689 >> 28)
                        {
                          v1765 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1765 = v1688;
                          *(_DWORD *)(v1765 + 8) = v1689;
                          v1690 = 1;
                          v1688 = v1765;
                        }
                        else
                        {
                          v1690 = *(_QWORD *)(v740 & 0xFFFFFFFF8);
                          v1688 = v1689 << 36;
                        }
                        v765 = v1688 | v1690;
                      }
                      v766 = v741;
                      if ((v741 & 1) != 0)
                      {
                        v1691 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                        if ((v741 & 2) != 0
                          || (v1692 = *(unsigned int *)((v741 & 0xFFFFFFFF8) + 8), (_DWORD)v1692 == 0x3FFFFFFF)
                          || (_DWORD)v1692 == -1)
                        {
                          v1693 = 2;
                        }
                        else if (v1692 >> 28)
                        {
                          v1766 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v1766 = v1691;
                          *(_DWORD *)(v1766 + 8) = v1692;
                          v1693 = 1;
                          v1691 = v1766;
                        }
                        else
                        {
                          v1693 = *(_QWORD *)(v741 & 0xFFFFFFFF8);
                          v1691 = v1692 << 36;
                        }
                        v766 = v1691 | v1693;
                      }
                      if ((v740 & 1) != 0 && (v740 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v740 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      *(_QWORD *)&v1854 = v765;
                      if ((v741 & 1) != 0 && (v741 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v741 & 0xFFFFFFFF8, v763, v764, v750, v751, v752, v753, v754);
                      *((_QWORD *)&v1854 + 1) = v766;
                      v1855 = v742 & 0xFF00;
                    }
                    if (!(v728 | v1859))
                    {
                      JSC::DFG::Node::convertToIdentityOn(*((_QWORD *)this + 30), v298);
                      goto LABEL_900;
                    }
                    if (v1847[0])
                    {
                      v798 = (int8x16_t *)*((_QWORD *)v1847[0] + 1);
                      v799 = *((unsigned int *)v1847[0] + 1) | ((unint64_t)((*((_DWORD *)v1847[0] + 4) >> 2) & 1) << 32);
                    }
                    else
                    {
                      v798 = 0;
                      v799 = 0x100000000;
                    }
                    LODWORD(v800) = v799 - v728;
                    if (v799 <= v728)
                    {
                      v801 = 0;
                      v798 = (int8x16_t *)"";
                    }
                    else
                    {
                      if ((int)(v799 - v728) >= 0 && !v728)
                      {
                        v800 = v799;
                        goto LABEL_955;
                      }
                      if ((v800 & 0x80000000) != 0)
                        v800 = 0x7FFFFFFFLL;
                      else
                        v800 = v800;
                      v918 = v799 - (unint64_t)v728;
                      if ((v799 & 0x100000000) != 0)
                      {
                        if (v918 >= v800)
                        {
                          v798 = (int8x16_t *)((char *)v798 + v728);
                          v800 |= 0x100000000uLL;
                          goto LABEL_955;
                        }
LABEL_1815:
                        __break(1u);
LABEL_1816:
                        __break(0xC471u);
                        JUMPOUT(0x19854CF24);
                      }
                      if (v918 < v800)
                        goto LABEL_1815;
                      v798 = (int8x16_t *)((char *)v798 + 2 * v728);
LABEL_955:
                      v801 = v800;
                      if ((v800 & 0x100000000) == 0)
                      {
                        WTF::StringBuilder::append((uint64_t)&v1858, v798, v800, v750, v751, v752, v753, v754);
                        goto LABEL_973;
                      }
                    }
                    WTF::StringBuilder::append((uint64_t)&v1858, v798, v801, v750, v751, v752, v753, v754);
LABEL_973:
                    v809 = *((_QWORD *)this + 30);
                    v810 = *((_QWORD *)this + 4);
                    v811 = (WTF::StringImpl *)v1858;
                    if ((_QWORD)v1858)
                      goto LABEL_974;
                    if ((v1859 & 0x80000000) == 0
                      && *((_QWORD *)&v1858 + 1)
                      && *(_DWORD *)(*((_QWORD *)&v1858 + 1) + 4) > v1859 + (v1859 >> 2))
                    {
                      if ((*(_BYTE *)(*((_QWORD *)&v1858 + 1) + 16) & 4) != 0)
                        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v1858, (WTF::AtomStringImpl *)v1859, (uint64_t)v802, v803, v804, v805, v806, v807);
                      else
                        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v1858, (WTF::AtomStringImpl *)v1859, (uint64_t)v802, v803, v804, v805, v806, v807);
                      v1609 = (WTF::StringImpl *)v1858;
                      v1858 = *((unint64_t *)&v1858 + 1);
                      if (v1609)
                      {
                        if (*(_DWORD *)v1609 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1609, v1131, v1132, v1133, v1134, v1135, v1136, v1137);
                          WTF::fastFree(v1634, v1635, v1636, v1637, v1638, v1639, v1640, v1641);
                        }
                        else
                        {
                          *(_DWORD *)v1609 -= 2;
                        }
                      }
                    }
                    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v1858);
                    v811 = (WTF::StringImpl *)v1858;
                    if ((_QWORD)v1858)
LABEL_974:
                      *(_DWORD *)v811 += 2;
                    v1848 = v811;
                    {
                      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                      LODWORD(qword_1EE342DB8) = 0;
                    }
                    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v810 + 896), &v1848, v802, v803, v804, v805, v806, v807, (uint64_t)__e);
                    v812 = **(_QWORD **)__e;
                    *(_WORD *)(v809 + 18) = 3;
                    *(_DWORD *)(v809 + 56) &= ~8u;
                    v813 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v813 = v812;
                    v813[1] = 3;
                    v813[2] = 0;
                    v813[2] = *(_QWORD *)(v810 + 600);
                    *(_QWORD *)(v810 + 600) = v813;
                    *(_QWORD *)(v809 + 72) = v813;
                    *(_QWORD *)(v809 + 32) = 0;
                    *(_QWORD *)(v809 + 40) = 0;
                    *(_QWORD *)(v809 + 24) = 0;
                    v815 = v1848;
                    v1848 = 0;
                    if (v815)
                    {
                      if (*(_DWORD *)v815 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v815, v814, v767, v768, v769, v770, v771, v772);
                        WTF::fastFree(v919, v920, v921, v922, v923, v924, v925, v926);
                      }
                      else
                      {
                        *(_DWORD *)v815 -= 2;
                      }
                    }
LABEL_900:
                    JSC::DFG::NodeOrigin::operator=(*((uint64_t **)this + 30), (uint64_t *)&v1854, v767, v768, v769, v770, v771, v772);
                    if ((BYTE8(v1854) & 1) != 0 && (*((_QWORD *)&v1854 + 1) & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(*((_QWORD *)&v1854 + 1) & 0xFFFFFFFF8, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                    if ((v1854 & 1) != 0 && (v1854 & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v1854 & 0xFFFFFFFF8, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                  }
                  v773 = (WTF::StringImpl *)*((_QWORD *)&v1858 + 1);
                  *((_QWORD *)&v1858 + 1) = 0;
                  if (v773)
                  {
                    if (*(_DWORD *)v773 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v773, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                      WTF::fastFree(v824, v825, v826, v827, v828, v829, v830, v831);
                    }
                    else
                    {
                      *(_DWORD *)v773 -= 2;
                    }
                  }
                  v774 = (WTF::StringImpl *)v1858;
                  *(_QWORD *)&v1858 = 0;
                  if (v774)
                  {
                    if (*(_DWORD *)v774 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v774, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                      WTF::fastFree(v832, v833, v834, v835, v836, v837, v838, v839);
                    }
                    else
                    {
                      *(_DWORD *)v774 -= 2;
                    }
                  }
                  goto LABEL_908;
                }
              }
              if (v1847[0])
              {
                v733 = (int8x16_t *)*((_QWORD *)v1847[0] + 1);
                v734 = *((unsigned int *)v1847[0] + 1) | ((unint64_t)((*((_DWORD *)v1847[0] + 4) >> 2) & 1) << 32);
              }
              else
              {
                v733 = 0;
                v734 = 0x100000000;
              }
              if (v734 <= v728)
              {
                v736 = 0;
                v733 = (int8x16_t *)"";
              }
              else
              {
                LODWORD(v731) = v731 - v728;
                if (v734 - v728 > v731 || (LODWORD(v731) = v734 - v728, v728))
                {
                  v731 = v731;
                  v735 = v734 - (unint64_t)v728;
                  if ((v734 & 0x100000000) != 0)
                  {
                    if (v735 < v731)
                      goto LABEL_1815;
                    v733 = (int8x16_t *)((char *)v733 + v728);
                    v731 = v731 | 0x100000000;
                  }
                  else
                  {
                    if (v735 < v731)
                      goto LABEL_1815;
                    v733 = (int8x16_t *)((char *)v733 + 2 * v728);
                  }
                }
                else
                {
                  v731 = v734;
                }
                v736 = v731;
                if ((v731 & 0x100000000) == 0)
                {
                  WTF::StringBuilder::append((uint64_t)&v1858, v733, v731, v113, v114, v115, v116, v117);
                  goto LABEL_859;
                }
              }
              WTF::StringBuilder::append((uint64_t)&v1858, v733, v736, v113, v114, v115, v116, v117);
LABEL_859:
              if (v732)
              {
                memset(__e, 0, 20);
                __e[20] = 1;
                v860 = (unint64_t)v1847[0];
                if (v1847[0])
                {
                  v861 = *((_QWORD *)v1847[0] + 1);
                  v860 = *((unsigned int *)v1847[0] + 1);
                  v862 = ((unint64_t)*((unsigned int *)v1847[0] + 4) >> 2) & 1;
                }
                else
                {
                  v861 = 0;
                  v862 = 1;
                }
                JSC::substituteBackreferences((uint64_t)__e, (WTF::AtomStringImpl *)v1846, v861, v860 | (v862 << 32), (unsigned int *)v1848, (uint64_t)v727, v116, v117, v928, v929, v930);
                WTF::StringBuilder::append((WTF::StringBuilder *)&v1858, (const WTF::StringBuilder *)__e, v863, v864, v865, v866, v867, v868);
                v869 = *(WTF::StringImpl **)&__e[8];
                *(_QWORD *)&__e[8] = 0;
                if (v869)
                {
                  if (*(_DWORD *)v869 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v869, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                    WTF::fastFree(v994, v995, v996, v997, v998, v999, v1000, v1001);
                  }
                  else
                  {
                    *(_DWORD *)v869 -= 2;
                  }
                }
                v870 = *(WTF::StringImpl **)__e;
                *(_QWORD *)__e = 0;
                if (v870)
                {
                  if (*(_DWORD *)v870 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v870, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
                    WTF::fastFree(v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009);
                  }
                  else
                  {
                    *(_DWORD *)v870 -= 2;
                  }
                }
              }
              goto LABEL_860;
            }
          }
        }
        goto LABEL_908;
      }
      if (v721 != 270)
        goto LABEL_908;
      v780 = *((_QWORD *)this + 4);
      v781 = *(_QWORD *)v720;
      if ((*(_QWORD *)v720 & 1) == 0)
      {
        v782 = (_QWORD *)(v781 & 0xFFFFFFFF8);
        v783 = *(_QWORD *)(v780 + 32);
LABEL_925:
        v784 = 1;
        v785 = v782;
        v786 = 1;
        v787 = v782;
        goto LABEL_926;
      }
      v1694 = *(_QWORD *)(v781 & 0xFFFFFFFF8);
      if ((v781 & 2) != 0
        || ((v1695 = *(_DWORD *)((v781 & 0xFFFFFFFF8) + 8), v1695 != 0x3FFFFFFF) ? (v1696 = v1695 == -1) : (v1696 = 1),
            v1696))
      {
        v1697 = 2;
      }
      else if (v1695 >> 28)
      {
        v1767 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v1767 = v1694;
        *(_DWORD *)(v1767 + 8) = v1695;
        v1697 = 1;
        v1694 = v1767;
      }
      else
      {
        v1697 = *(_QWORD *)(v781 & 0xFFFFFFFF8);
        v1694 = 0;
      }
      v1698 = v1694 | v1697;
      v783 = *(_QWORD *)(v780 + 32);
      v782 = (_QWORD *)(v1698 & 0xFFFFFFFF8);
      if ((v1698 & 1) == 0)
        goto LABEL_925;
      v1699 = *v782;
      if ((v1698 & 2) != 0
        || ((v1700 = *(_DWORD *)((v1698 & 0xFFFFFFFF8) + 8), v1700 != 0x3FFFFFFF)
          ? (v1701 = v1700 == -1)
          : (v1701 = 1),
            v1701))
      {
        v1702 = 2;
      }
      else if (v1700 >> 28)
      {
        v1768 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v1768 = v1699;
        *(_DWORD *)(v1768 + 8) = v1700;
        v1702 = 1;
        v1699 = v1768;
      }
      else
      {
        v1702 = *v782;
        v1699 = 0;
      }
      v1703 = v1699 | v1702;
      v785 = (_QWORD *)(v1703 & 0xFFFFFFFF8);
      v784 = 0;
      if ((v1703 & 1) != 0)
      {
        v786 = 0;
        v787 = (_QWORD *)*v785;
      }
      else
      {
        v786 = 1;
        v787 = v785;
      }
LABEL_926:
      if (v787)
        v783 = v787[1];
      v788 = *(_QWORD *)(v783 + 8);
      if ((v786 & 1) == 0 && v785)
        WTF::fastFree((unint64_t)v785, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
      if ((v784 & 1) == 0 && v782)
        WTF::fastFree((unint64_t)v782, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
      v789 = *((_QWORD *)this + 4);
      if (((*(_DWORD *)(*(_QWORD *)(v789 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
        goto LABEL_931;
      JSC::CodeOrigin::CodeOrigin(&v1809, *((const JSC::CodeOrigin **)this + 30));
      v1034 = JSC::DFG::Graph::globalObjectFor(v789, &v1809, v1028, v1029, v1030, v1031, v1032, v1033);
      if ((v1809 & 1) != 0 && (v1809 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1809 & 0xFFFFFFFF8, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
      if (v788 == v1034)
      {
LABEL_931:
        if (*(_BYTE *)(*(_QWORD *)(v788 + 2072) + 4) != 2)
        {
          v790 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136);
          *(_QWORD *)&v1858 = *(_QWORD *)(v788 + 2072);
          WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v790, (uint64_t *)&v1858, v113, v114, v115, v116, v117, (uint64_t)__e);
          v727 = **(WTF::Thread ***)(v720 + 72);
          goto LABEL_837;
        }
      }
LABEL_908:
      v775 = v1846[0];
      v1846[0] = 0;
      if (v775)
      {
        if (*(_DWORD *)v775 == 2)
        {
          WTF::StringImpl::~StringImpl(v775, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v816, v817, v818, v819, v820, v821, v822, v823);
        }
        else
        {
          *(_DWORD *)v775 -= 2;
        }
      }
LABEL_398:
      v169 = v1847[0];
      v1847[0] = 0;
      if (v169)
        goto LABEL_226;
      return;
    case 0xE1:
      v468 = *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v469 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
      v470 = *(unsigned __int16 *)(v468 + 18);
      if (v470 <= 2)
        goto LABEL_632;
      if (*(unsigned __int16 *)(v468 + 18) > 0xB5u)
      {
        if (v470 == 182)
        {
LABEL_632:
          v471 = *(__int128 **)(v468 + 72);
        }
        else
        {
          if (v470 != 355 && v470 != 348)
            return;
          v471 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v471;
      }
      else
      {
        if (v470 != 3)
          return;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)(v468 + 72);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v469, a4, a5, a6, a7, a8, (int **)&v1848);
      if (!v1848)
        return;
      JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 30) + 32) & 0xFF00FFFFFFFFFFFFLL), *((JSC::DFG::Graph **)this + 4), v472, v473, v474, v475, v476, (int **)v1847);
      if (!v1847[0])
        goto LABEL_1242;
      JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 30) + 40) & 0xFF00FFFFFFFFFFFFLL), *((JSC::DFG::Graph **)this + 4), v113, v114, v115, v116, v117, (int **)v1846);
      if (!v1846[0])
        goto LABEL_1239;
      v480 = v1847[0];
      if (v1847[0])
      {
        v481.m_characters = (void *)*((_QWORD *)v1847[0] + 1);
        v480 = *((_DWORD *)v1847[0] + 1);
        v482 = ((unint64_t)*((unsigned int *)v1847[0] + 4) >> 2) & 1;
      }
      else
      {
        v481.m_characters = 0;
        LODWORD(v482) = 1;
      }
      if (!v1848
        || (v481.m_length = v480,
            *(_DWORD *)&v481.m_is8Bit = v482,
            v483 = WTF::StringImpl::find(v1848, v481, v477, v478, v479),
            v483 == -1))
      {
        *((_BYTE *)this + 248) = 1;
        v1138 = *((unsigned int *)this + 58);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1797, *((const JSC::DFG::NodeOrigin **)this + 30));
        JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1796, (unint64_t *)(*((_QWORD *)this + 30) + 24));
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v1138, 0, 0x18u, (uint64_t)v1797, &v1796);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1797, v1139, v1140, v1141, v1142, v1143, v1144, v1145);
        JSC::DFG::Node::convertToIdentityOn(*((_QWORD *)this + 30), v468);
        goto LABEL_1236;
      }
      v487 = v483;
      v488 = (int)v1847[0];
      if (v1847[0])
        v488 = *((_DWORD *)v1847[0] + 1);
      v489 = v483 + v488;
      v490 = WTF::String::find((uint64_t)v1846, 0x24u, 0, v484, v485, v486);
      if (v490 == -1)
        goto LABEL_653;
      *(_QWORD *)__e = 0;
      *(_QWORD *)&__e[8] = 0;
      *(_QWORD *)&__e[13] = 0;
      *(_QWORD *)&v1858 = __PAIR64__(v489, v487);
      v494 = v1846[0];
      if (v1846[0])
      {
        v495 = *((_QWORD *)v1846[0] + 1);
        v494 = *((_DWORD *)v1846[0] + 1);
        v496 = ((unint64_t)*((unsigned int *)v1846[0] + 4) >> 2) & 1;
      }
      else
      {
        v495 = 0;
        v496 = 1;
      }
      v497 = v1848;
      if (v1848)
      {
        v498 = *((_QWORD *)v1848 + 1);
        v497 = *((_DWORD *)v1848 + 1);
        v499 = ((unint64_t)*((unsigned int *)v1848 + 4) >> 2) & 1;
      }
      else
      {
        v498 = 0;
        v499 = 1;
      }
      JSC::substituteBackreferencesSlow((uint64_t)__e, v495, v494 | (v496 << 32), v498, v497 | (v499 << 32), (unsigned int *)&v1858, 0, v490, v491, v492, v493);
      if ((*(_DWORD *)&__e[16] & 0x80000000) != 0)
      {
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)__e, v500, v501, v502, v503, v504, v505, v506);
        goto LABEL_1236;
      }
      WTF::StringBuilder::toString((WTF::StringBuilder *)__e, v501, v502, v503, v504, v505, v506, &v1854);
      v514 = (WTF::StringImpl *)v1854;
      *(_QWORD *)&v1854 = 0;
      v515 = v1846[0];
      v1846[0] = v514;
      if (!v515)
        goto LABEL_652;
      v516 = *(_DWORD *)v515 - 2;
      if (*(_DWORD *)v515 != 2)
        goto LABEL_651;
      WTF::StringImpl::~StringImpl(v515, v507, v508, v509, v510, v511, v512, v513);
      WTF::fastFree(v1666, v1667, v1668, v1669, v1670, v1671, v1672, v1673);
      v515 = (WTF::StringImpl *)v1854;
      *(_QWORD *)&v1854 = 0;
      if (v515)
      {
        v516 = *(_DWORD *)v515 - 2;
        if (*(_DWORD *)v515 == 2)
        {
          WTF::StringImpl::~StringImpl(v515, v507, v508, v509, v510, v511, v512, v513);
          WTF::fastFree(v1674, v1675, v1676, v1677, v1678, v1679, v1680, v1681);
        }
        else
        {
LABEL_651:
          *(_DWORD *)v515 = v516;
        }
      }
LABEL_652:
      WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)__e, v507, v508, v509, v510, v511, v512, v513);
LABEL_653:
      LODWORD(v517) = (_DWORD)v1848;
      if (v1848)
      {
        v518 = *((_DWORD *)v1848 + 4);
        v519 = *((_QWORD *)v1848 + 1);
        v517 = *((unsigned int *)v1848 + 1);
        if ((_DWORD)v517)
        {
          if (v517 <= v487)
            v520 = v517 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v518 >> 2) & 1) << 32);
          else
            v520 = ((unint64_t)((v518 >> 2) & 1) << 32) | v487;
          v1388 = (const char *)*((_QWORD *)v1848 + 1);
        }
        else
        {
          v520 = 0x100000000;
          v1388 = "";
        }
        *(_QWORD *)__e = v1388;
        *(_QWORD *)&__e[8] = v520;
        v1389 = (v518 >> 2) & 1;
        *(_QWORD *)&v1854 = v519;
      }
      else
      {
        *(_QWORD *)__e = "";
        *(_QWORD *)&__e[8] = 0x100000000;
        *(_QWORD *)&v1854 = 0;
        LOBYTE(v1389) = 1;
      }
      DWORD2(v1854) = v517;
      BYTE12(v1854) = v1389;
      *(_QWORD *)&v1858 = WTF::StringView::substring((const char *)&v1854, v489, v517 - v489);
      *((_QWORD *)&v1858 + 1) = v1390;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>(__e, (uint64_t *)v1846, (int8x16_t **)&v1858, (int **)v1845);
      if (v1845[0])
      {
        *((_BYTE *)this + 248) = 1;
        v1391 = *((unsigned int *)this + 58);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1795, *((const JSC::DFG::NodeOrigin **)this + 30));
        JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1794, (unint64_t *)(*((_QWORD *)this + 30) + 24));
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v1391, 0, 0x18u, (uint64_t)v1795, &v1794);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1795, v1392, v1393, v1394, v1395, v1396, v1397, v1398);
        v1399 = *((_QWORD *)this + 30);
        v1400 = (JSC::DFG::LazyJSValue *)*((_QWORD *)this + 4);
        v1407 = JSC::DFG::LazyJSValue::newString(v1400, v1845, v1401, v1402, v1403, v1404, v1405, v1406);
        JSC::DFG::Node::convertToLazyJSConstant(v1399, (uint64_t)v1400, v1407, v1408);
        v1409 = v1845[0];
        v1845[0] = 0;
        if (v1409)
        {
          if (*(_DWORD *)v1409 == 2)
          {
            WTF::StringImpl::~StringImpl(v1409, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
            WTF::fastFree(v1626, v1627, v1628, v1629, v1630, v1631, v1632, v1633);
          }
          else
          {
            *(_DWORD *)v1409 -= 2;
          }
        }
      }
LABEL_1236:
      v1146 = v1846[0];
      v1846[0] = 0;
      if (v1146)
      {
        if (*(_DWORD *)v1146 == 2)
        {
          WTF::StringImpl::~StringImpl(v1146, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v1380, v1381, v1382, v1383, v1384, v1385, v1386, v1387);
        }
        else
        {
          *(_DWORD *)v1146 -= 2;
        }
      }
LABEL_1239:
      v1147 = v1847[0];
      v1847[0] = 0;
      if (v1147)
      {
        if (*(_DWORD *)v1147 == 2)
        {
          WTF::StringImpl::~StringImpl(v1147, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
          WTF::fastFree(v1253, v1254, v1255, v1256, v1257, v1258, v1259, v1260);
        }
        else
        {
          *(_DWORD *)v1147 -= 2;
        }
      }
LABEL_1242:
      v169 = v1848;
      v1848 = 0;
      if (v169)
        goto LABEL_226;
      return;
    case 0xF1:
    case 0xF3:
    case 0xF9:
    case 0x171:
      v30 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v30 + 164) <= *(_QWORD *)(v9 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19854CA98);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v30 + 152) + 8 * *(_QWORD *)(v9 + 24)) & 0xFF00FFFFFFFFFFFFLL;
      v32 = *(unsigned __int16 *)(v31 + 0x12);
      if (v32 > 2)
      {
        if (v32 - 359 > 3)
          return;
        v36 = 0;
        v33 = **(_QWORD **)(v31 + 72);
        v35 = v33;
      }
      else
      {
        v33 = **(_QWORD **)((*(_QWORD *)(*(_QWORD *)(v30 + 152) + 8 * *(_QWORD *)(v9 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                          + 0x48);
        if (v33)
          v34 = (v33 & 0xFFFE000000000002) == 0;
        else
          v34 = 0;
        if (!v34 || *(_BYTE *)(v33 + 5) != 26)
          return;
        v35 = *(_QWORD *)(v33 + 24);
        if ((v35 & 1) != 0)
          v35 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 48);
        v36 = **(_QWORD **)((*(_QWORD *)(*(_QWORD *)(v30 + 152) + 8 * *(_QWORD *)(v9 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                          + 0x48);
      }
      if (!v35)
        return;
      v37 = *(_DWORD *)(*(_QWORD *)(v30 + 24) + 16);
      if (((v37 - 1) & 0xFFFFFFFD) == 0)
        return;
      if ((v37 & 0xFFFFFFFE) == 4 && HIBYTE(qword_1ECF4C780) != 0)
        return;
      if (*(_BYTE *)(v35 + 5) == 8)
      {
        v140 = *(_QWORD *)(v35 + 8);
        v141 = (unsigned int *)(v140 + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 + 1, v141));
        v39 = *(unsigned __int8 *)(v140 + 14);
        do
        {
          v143 = __ldaxr(v141);
          v144 = v143 - 1;
        }
        while (__stlxr(v144, v141));
        if (!v144)
        {
          atomic_store(1u, (unsigned int *)(v140 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 32))(v140);
        }
      }
      else
      {
        v39 = *(unsigned __int8 *)(v35 + 64);
      }
      if (v39 == 184 && !byte_1ECF4C25D)
      {
        if (v32 > 2
          || *(_WORD *)(*((_QWORD *)this + 30) + 18) != 241
          || &JSC::WebAssemblyFunction::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C)))
        {
          return;
        }
        v840 = (unsigned __int8 **)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(v36 + 40));
        if (*((_DWORD *)v840 + 8))
          v841 = 0;
        else
          v841 = v840 + 1;
        v842 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v840);
        JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v842, v841, 0, __e);
        if ((__e[0] & 4) != 0)
          goto LABEL_1012;
        v850 = (const JSC::DFG::NodeOrigin *)*((_QWORD *)this + 30);
        v851 = *((_DWORD *)v841 + 2);
        if (v851 > *((_DWORD *)v850 + 8) - 2)
          goto LABEL_1012;
        v852 = *((_DWORD *)v841 + 3);
        if (v852 > 1)
          goto LABEL_1012;
        if (!v851)
        {
          LOBYTE(v853) = 1;
LABEL_995:
          if (v852)
          {
            if (**v841 - 227 > 0x1C || ((1 << (**v841 + 29)) & 0x1E003003) == 0)
              LOBYTE(v853) = 0;
          }
          v855 = *((unsigned int *)this + 58);
          v856 = *((_QWORD *)this + 28);
          if (*(_DWORD *)(v856 + 220) <= v855)
            goto LABEL_1274;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v856 + 208) + 8 * v855) + 16))
          {
            if ((v853 & 1) != 0)
            {
              v857 = *((_QWORD *)this + 4);
              if ((*(_DWORD *)(*(_QWORD *)(v857 + 24) + 16) & 0xFFFFFFFE) == 4)
              {
                v858 = ((v851 + 1) & 0xFFFFFFFE) + 4;
                if (*(_DWORD *)(v857 + 860) > v858)
                  v858 = *(_DWORD *)(v857 + 860);
                *(_DWORD *)(v857 + 860) = v858;
                if (v851)
                {
                  v1194 = 0;
                  v1195 = 2;
                  do
                  {
                    v1196 = v1195 + *((_DWORD *)v850 + 6);
                    if (*(_DWORD *)(v857 + 164) <= v1196)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19854CF7CLL);
                    }
                    v1197 = (*v841)[16 * (v1195 + *((_DWORD *)v841 + 3) - 2)];
                    if (v1197 > 0xFB)
                    {
                      v1198 = *(_QWORD *)(*(_QWORD *)(v857 + 152) + 8 * v1196) & 0xFF00FFFFFFFFFFFFLL;
                      if (v1197 - 252 < 2)
                      {
                        v1200 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v857 + 152) + 8 * v1196) & 0xFF00FFFFFFFFFFFFLL)
                                          + 0x40);
                        v1201 = (v1200 & 0xFFFFFF00FFFFFFFFLL) != 0 || (v1200 & 0xFF00000000) == 0;
                        v1202 = 0xA8000000000000;
                        if (!v1201)
                          v1202 = 0x10000000000000;
                        if (v1200)
                          v1203 = (v1200 & 0xFFFFFFCFFFFFFFFFLL) == 0;
                        else
                          v1203 = 0;
                        if (v1203)
                          v1204 = 0x14000000000000;
                        else
                          v1204 = v1202;
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1787, v850);
                        v1207 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)this + 72, v855, 0x7000000000, 58, (uint64_t)v1787, v1204 | v1198, v1205, v1206);
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1787, v1208, v1209, v1210, v1211, v1212, v1213, v1214);
                        v857 = *((_QWORD *)this + 4);
                        v850 = (const JSC::DFG::NodeOrigin *)*((_QWORD *)this + 30);
                        v1215 = v1195 + *((_DWORD *)v850 + 6);
                        if (*(_DWORD *)(v857 + 164) <= v1215)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19854CF84);
                        }
                        v1216 = v1207 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
                      }
                      else
                      {
                        v1199 = v1194 + 2;
                        if (v1197 == 254)
                        {
                          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1788, v850);
                          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 72, v855, (uint64_t)v1788, v1198 | 0x6C000000000000, v1654, v1655, v1656, v1657);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1788, v1658, v1659, v1660, v1661, v1662, v1663, v1664);
                          v857 = *((_QWORD *)this + 4);
                          v850 = (const JSC::DFG::NodeOrigin *)*((_QWORD *)this + 30);
                          v1665 = *((_DWORD *)v850 + 6);
                          if (*(_DWORD *)(v857 + 164) <= (v1195 + v1665))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19854CF94);
                          }
                          v1215 = v1199 + v1665;
                          v1216 = v1198 | 0x24000000000000;
                        }
                        else
                        {
                          if (v1197 != 255)
                            goto LABEL_1816;
                          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1789, v850);
                          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 72, v855, (uint64_t)v1789, v1198 | 0x4000000000000, v1642, v1643, v1644, v1645);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1789, v1646, v1647, v1648, v1649, v1650, v1651, v1652);
                          v857 = *((_QWORD *)this + 4);
                          v850 = (const JSC::DFG::NodeOrigin *)*((_QWORD *)this + 30);
                          v1653 = *((_DWORD *)v850 + 6);
                          if (*(_DWORD *)(v857 + 164) <= (v1195 + v1653))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19854CF8CLL);
                          }
                          v1215 = v1199 + v1653;
                          v1216 = v1198 | 0x8000000000000;
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(v857 + 152) + 8 * v1215) = v1216;
                      v851 = *((_DWORD *)v841 + 2);
                    }
                    else if (v1197 - 227 >= 2 && v1197 - 239 >= 2)
                    {
                      goto LABEL_1816;
                    }
                    ++v1194;
                    v1217 = v1195++ - 1;
                  }
                  while (v1217 < v851);
                  v852 = *((_DWORD *)v841 + 3);
                }
                if (v852 && **v841 == 0xFF)
                  *((_DWORD *)v850 + 14) = *((_DWORD *)v850 + 14) & 0xFFFFFFF8 | 4;
                v859 = JSC::DFG::Graph::freeze(v857, v36, v844, v845, v846, v847, v848, v849);
                JSC::DFG::Node::convertToCallWasm((uint64_t)v850, (JSC::DFG::FrozenValue *)v859);
              }
            }
            goto LABEL_1012;
          }
          if (!(_DWORD)v855)
          {
LABEL_1274:
            __break(0xC471u);
            JUMPOUT(0x19854AF74);
          }
LABEL_1012:
          JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)__e, (void *)v843, v844, v845, v846, v847, v848, v849);
          return;
        }
        v1148 = *((_QWORD *)this + 4);
        v1149 = *((_QWORD *)v850 + 3);
        v1150 = *(_DWORD *)(v1148 + 164);
        if (v1150 <= (int)v1149 + 2)
          v1150 = v1149 + 2;
        if (v1150 - v1149 - 2 <= v851 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CF68);
        }
        v1151 = v1149 + 2;
        v1152 = 1;
        v1153 = *((_DWORD *)v841 + 3);
        v1154 = *((unsigned int *)v841 + 2);
        v1155 = *(_QWORD *)(v1148 + 152);
        while (1)
        {
          v853 = 0;
          v1156 = &(*v841)[16 * v1153];
          v843 = *v1156;
          if (*v1156 > 0xFBu)
          {
            v844 = *(_QWORD *)(v1155 + 8 * v1151);
            v845 = (v843 - 252);
            if (v845 < 2)
            {
              v1158 = *(_QWORD *)((v844 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
              v843 = (v1158 & 0xFF00000000) != 0;
              v1159 = (v1158 & 0xFFFFFF00FFFFFFFFLL) == 0 && (v1158 & 0xFF00000000) != 0;
            }
            else if ((_DWORD)v843 == 254)
            {
              v1159 = *(_QWORD *)((v844 & 0xFF00FFFFFFFFFFFFLL) + 0x40) == 0x80000000000;
            }
            else
            {
              if ((_DWORD)v843 != 255)
                goto LABEL_1265;
              v1624 = *(_QWORD *)((v844 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
              v1159 = (v1624 & 0xFFFFFFFCFFFFFFFFLL) == 0 && v1624 != 0;
            }
            v853 = v1159 & v1152;
          }
          else
          {
            v844 = *((_QWORD *)v1156 + 1);
            v845 = (v843 - 227);
            if (v845 < 2 || (v845 = (v843 - 239), v845 < 2))
            {
              if (BYTE1(dword_1ECF4C7B0))
              {
                if ((v843 + 29) <= 1u && v844 == -17)
                {
LABEL_1267:
                  v1160 = v843 - 239;
                  if ((_DWORD)v843 == 227)
                    v843 = v1152;
                  else
                    v843 = 0;
                  if (v1160 >= 2)
                    v853 = v843;
                  else
                    v853 = v1152;
                  goto LABEL_1265;
                }
              }
              else if (v843 == 239)
              {
                goto LABEL_1267;
              }
              v853 = 0;
            }
          }
LABEL_1265:
          ++v1151;
          ++v1153;
          v1152 = v853;
          if (!--v1154)
            goto LABEL_995;
        }
      }
      if (*(_BYTE *)(v35 + 5) == 8)
      {
        v145 = *(_QWORD *)(v35 + 8);
        v146 = (unsigned int *)(v145 + 8);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 + 1, v146));
        v40 = *(unsigned __int8 *)(v145 + 14);
        do
        {
          v148 = __ldaxr(v146);
          v149 = v148 - 1;
        }
        while (__stlxr(v149, v146));
        if (!v149)
        {
          atomic_store(1u, (unsigned int *)(v145 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
        }
      }
      else
      {
        v40 = *(unsigned __int8 *)(v35 + 64);
      }
      if (v32 > 2)
        goto LABEL_50;
      if (v40 != 101)
        goto LABEL_50;
      v1084 = *((_QWORD *)this + 30);
      v1085 = *(unsigned __int16 *)(v1084 + 18);
      if (v1085 != 241 && v1085 != 369 && v1085 != 249)
        goto LABEL_50;
      v1086 = *(_QWORD *)(v36 + 32);
      if (!v1086 || *(_BYTE *)(v1086 + 5) != 26)
        goto LABEL_50;
      v1087 = *(_QWORD *)(v1086 + 24);
      if ((v1087 & 1) != 0)
        v1087 = *(_QWORD *)((v1087 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_DWORD *)(v36 + 88) + *(_DWORD *)(v1084 + 32) <= qword_1ECF4C570)
      {
        if (*(_BYTE *)(v1087 + 5) != 12 || v1087 == 0)
        {
          v1089 = *((_QWORD *)this + 4);
        }
        else
        {
          v1474 = *(_DWORD *)(*(_QWORD *)(v1087 + 88) + 44) & 0x7FFFFFFF;
          v1089 = *((_QWORD *)this + 4);
          if (v1474 < qword_1ECF4C570)
          {
            v1475 = ((v1474 + 1) & 0xFFFFFFFE) + 4;
            if (*(_DWORD *)(v1089 + 860) > v1475)
              v1475 = *(_DWORD *)(v1089 + 860);
            *(_DWORD *)(v1089 + 860) = v1475;
          }
        }
        v1090 = *(unsigned int *)(v1089 + 164);
        v1091 = *((unsigned int *)this + 58);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1786, (const JSC::DFG::NodeOrigin *)v1084);
        v1102 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 9, v1091, (uint64_t)v1786, v1086, 0, v1092, v1093, v1094);
        v1103 = *(unsigned int *)(v1089 + 164);
        if ((_DWORD)v1103 == *(_DWORD *)(v1089 + 160))
        {
          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1089 + 152, (void *)(v1103 + 1), v1096, v1097, v1098, v1099, v1100, v1101);
          v1103 = *(unsigned int *)(v1089 + 164);
        }
        *(_QWORD *)(*(_QWORD *)(v1089 + 152) + 8 * v1103) = v1102 & 0xFF00FFFFFFFFFFFFLL;
        *(_DWORD *)(v1089 + 164) = v1103 + 1;
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1786, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
        v1476 = *((_QWORD *)this + 4);
        v1477 = *((unsigned int *)this + 58);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1785, *((const JSC::DFG::NodeOrigin **)this + 30));
        v1488 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 9, v1477, (uint64_t)v1785, *(_QWORD *)(v36 + 40), 0, v1478, v1479, v1480);
        v1489 = *(unsigned int *)(v1476 + 164);
        if ((_DWORD)v1489 == *(_DWORD *)(v1476 + 160))
        {
          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1476 + 152, (void *)(v1489 + 1), v1482, v1483, v1484, v1485, v1486, v1487);
          v1489 = *(unsigned int *)(v1476 + 164);
        }
        *(_QWORD *)(*(_QWORD *)(v1476 + 152) + 8 * v1489) = v1488 & 0xFF00FFFFFFFFFFFFLL;
        *(_DWORD *)(v1476 + 164) = v1489 + 1;
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1785, v1481, v1482, v1483, v1484, v1485, v1486, v1487);
        *(_QWORD *)__e = this;
        JSC::JSBoundFunction::forEachBoundArg<JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::JSValue)#1}>(v36, (uint64_t *)__e, v1490, v1491, v1492, v1493, v1494, v1495);
        v1502 = *((_QWORD *)this + 30);
        if (*(_DWORD *)(v1502 + 32) >= 3u)
        {
          v1503 = 2;
          v1504 = 40;
          do
          {
            v1505 = *((_QWORD *)this + 4);
            v1506 = (_QWORD *)(v1505 + 152);
            if ((*(_BYTE *)(v1502 + 56) & 0x10) != 0)
            {
              v1509 = v1503 + *(_QWORD *)(v1502 + 24);
              v1508 = *(_DWORD *)(v1505 + 164);
              if (v1508 <= v1509)
              {
                __break(0xC471u);
                JUMPOUT(0x19854CF9CLL);
              }
              v1507 = (_QWORD *)(*v1506 + 8 * v1509);
            }
            else
            {
              v1507 = (_QWORD *)(v1502 + v1504);
              v1508 = *(_DWORD *)(v1505 + 164);
            }
            if (v1508 == *(_DWORD *)(v1505 + 160))
            {
              WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>((uint64_t)v1506, (unint64_t)v1507, v1496, v1497, v1498, v1499, v1500, v1501);
              v1502 = *((_QWORD *)this + 30);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v1505 + 152) + 8 * v1508) = *v1507;
              *(_DWORD *)(v1505 + 164) = v1508 + 1;
            }
            ++v1503;
            v1504 += 8;
          }
          while (v1503 < *(unsigned int *)(v1502 + 32));
        }
        v1510 = (*(_DWORD *)(*((_QWORD *)this + 4) + 164) - v1090);
        *(_QWORD *)(v1502 + 24) = v1090;
        *(_QWORD *)(v1502 + 32) = v1510;
        *(_QWORD *)(v1502 + 40) = 0;
        v1511 = *((_QWORD *)this + 4);
        v1512 = (const JSC::CodeOrigin *)*((_QWORD *)this + 30);
        v1513 = ((*((_DWORD *)v1512 + 8) - 1) & 0xFFFFFFFE) + 4;
        if (*(_DWORD *)(v1511 + 860) > v1513)
          v1513 = *(_DWORD *)(v1511 + 860);
        *(_DWORD *)(v1511 + 860) = v1513;
        v1514 = *(JSC::RecordedStatuses **)(*(_QWORD *)(v1511 + 24) + 344);
        *(_QWORD *)__e = &__e[16];
        *(_QWORD *)&__e[8] = 0x100000001;
        *(_QWORD *)&__e[16] = v1087;
        v1857 = 0;
        JSC::RecordedStatuses::addCallLinkStatus(v1514, v1512, (uint64_t **)__e);
        v1522 = *(_QWORD *)__e;
        if (&__e[16] != *(_BYTE **)__e && *(_QWORD *)__e)
        {
          *(_QWORD *)__e = 0;
          *(_DWORD *)&__e[8] = 0;
          WTF::fastFree(v1522, v1515, v1516, v1517, v1518, v1519, v1520, v1521);
        }
        v1523 = *((_QWORD *)this + 30);
        v1524 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v1087, v1516, v1517, v1518, v1519, v1520, v1521);
        JSC::DFG::Node::convertToDirectCall(v1523, (JSC::DFG::FrozenValue *)v1524);
      }
      else
      {
LABEL_50:
        if (*(_BYTE *)(v35 + 5) == 12)
        {
          v41 = (const JSC::CodeOrigin *)*((_QWORD *)this + 30);
          v42 = *(_QWORD *)(v35 + 88);
          v43 = *(_QWORD *)(v42 + 40);
          if (*((_WORD *)v41 + 9) == 243)
          {
            if ((*(_QWORD *)(v42 + 24) & 0x80000000) != 0)
              return;
            v44 = HIDWORD(v43);
          }
          else
          {
            v44 = HIDWORD(v43);
          }
          v45 = v44 & 0x7FFFFFFF;
          v46 = *((_QWORD *)this + 4);
          if (v45 < qword_1ECF4C570)
          {
            v47 = ((v45 + 1) & 0xFFFFFFFE) + 4;
            if (*(_DWORD *)(v46 + 860) > v47)
              v47 = *(_DWORD *)(v46 + 860);
            *(_DWORD *)(v46 + 860) = v47;
          }
        }
        else
        {
          v46 = *((_QWORD *)this + 4);
          v41 = (const JSC::CodeOrigin *)*((_QWORD *)this + 30);
        }
        v48 = *(JSC::RecordedStatuses **)(*(_QWORD *)(v46 + 24) + 344);
        *(_QWORD *)__e = &__e[16];
        *(_QWORD *)&__e[8] = 0x100000001;
        *(_QWORD *)&__e[16] = v33;
        v1857 = 0;
        JSC::RecordedStatuses::addCallLinkStatus(v48, v41, (uint64_t **)__e);
        v56 = *(_QWORD *)__e;
        if (&__e[16] != *(_BYTE **)__e && *(_QWORD *)__e)
        {
          *(_QWORD *)__e = 0;
          *(_DWORD *)&__e[8] = 0;
          WTF::fastFree(v56, v49, v50, v51, v52, v53, v54, v55);
        }
        v57 = *((_QWORD *)this + 30);
        v58 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v35, v50, v51, v52, v53, v54, v55);
        v59 = *(unsigned __int16 *)(v57 + 18);
        switch(v59)
        {
          case 241:
            v60 = 242;
            break;
          case 369:
            v60 = 370;
            break;
          case 249:
            v60 = 250;
            break;
          case 243:
            v60 = 244;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19854A784);
        }
        *(_WORD *)(v57 + 18) = v60;
        *(_QWORD *)(v57 + 72) = v58;
      }
      goto LABEL_63;
    case 0x123:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v241 = **(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (!v241 || (v241 & 0xFFFE000000000002) != 0)
        return;
      v243 = *((_QWORD *)this + 4);
      v244 = *(_QWORD *)v9;
      if ((v244 & 1) == 0)
      {
        v245 = *(_QWORD *)(v243 + 32);
LABEL_337:
        v246 = (_QWORD *)(v244 & 0xFFFFFFFF8);
        v247 = 1;
        v248 = 1;
LABEL_338:
        v249 = v246;
        goto LABEL_339;
      }
      v1043 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
      if ((v244 & 2) != 0
        || ((v1044 = *(_DWORD *)((v244 & 0xFFFFFFFF8) + 8), v1044 != 0x3FFFFFFF) ? (v1045 = v1044 == -1) : (v1045 = 1),
            v1045))
      {
        v1046 = 2;
      }
      else if (v1044 >> 28)
      {
        v1718 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v1718 = v1043;
        *(_DWORD *)(v1718 + 8) = v1044;
        v1046 = 1;
        v1043 = v1718;
      }
      else
      {
        v1046 = v1043;
        v1043 = 0;
      }
      v244 = v1043 | v1046;
      v245 = *(_QWORD *)(v243 + 32);
      if (((v1043 | v1046) & 1) == 0)
        goto LABEL_337;
      v1047 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
      if ((v244 & 2) != 0
        || ((v1048 = *(_DWORD *)((v244 & 0xFFFFFFFF8) + 8), v1048 != 0x3FFFFFFF) ? (v1049 = v1048 == -1) : (v1049 = 1),
            v1049))
      {
        v1050 = 2;
      }
      else if (v1048 >> 28)
      {
        v1719 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v1719 = v1047;
        *(_DWORD *)(v1719 + 8) = v1048;
        v1050 = 1;
        v1047 = v1719;
      }
      else
      {
        v1050 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
        v1047 = 0;
      }
      v1051 = v1047 | v1050;
      v246 = (_QWORD *)(v1051 & 0xFFFFFFFF8);
      if ((v1051 & 1) == 0)
      {
        v248 = 0;
        v247 = 1;
        goto LABEL_338;
      }
      v247 = 0;
      v248 = 0;
      v249 = (_QWORD *)*v246;
LABEL_339:
      if (v249)
        v245 = v249[1];
      v250 = *(_QWORD *)(v245 + 8);
      if ((v247 & 1) == 0 && v246)
        WTF::fastFree((unint64_t)v246, a2, a3, a4, a5, a6, a7, a8);
      v251 = *(_QWORD *)(v250 + 560);
      if ((v248 & 1) == 0 && (v244 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v244 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v252 = *((_QWORD *)this + 4);
      v253 = (unint64_t *)*((_QWORD *)this + 30);
      if (v251 != v241)
      {
        v464 = 7;
LABEL_630:
        JSC::DFG::Graph::convertToConstant(v252, (uint64_t)v253, v464, a4, a5, a6, a7, a8);
        goto LABEL_63;
      }
      v254 = *(_QWORD *)(v252 + 40);
      v255 = *v253;
      v256 = *v253 & 0xFFFFFFFF8;
      if ((*v253 & 1) != 0)
        v256 = *(_QWORD *)(*v253 & 0xFFFFFFFF8);
      if (v256)
        v254 = *(_QWORD *)(v256 + 8);
      v257 = *(_QWORD *)(v254 + 56);
      if ((v255 & 2) != 0)
      {
        LODWORD(v258) = -1;
      }
      else if ((v255 & 1) != 0)
      {
        LODWORD(v258) = *(_DWORD *)((*v253 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v258 = v255 >> 36;
      }
      LODWORD(v1858) = v258;
      WORD2(v1858) = 8;
      BYTE6(v1858) = 0;
      v259 = (unsigned __int8 *)(v257 + 31);
      LOBYTE(v1857) = 0;
      *(_QWORD *)&__e[8] = v257 + 31;
      __e[16] = 1;
      if (__ldaxr((unsigned __int8 *)(v257 + 31)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v259))
      {
LABEL_354:
        LOBYTE(v1857) = 1;
        v268 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v257 + 96), (uint64_t)__e, (int *)&v1858);
        if (__e[16])
        {
          v388 = *(WTF::Lock **)&__e[8];
          v389 = __ldxr(*(unsigned __int8 **)&__e[8]);
          if (v389 == 1)
          {
            if (!__stlxr(0, *(unsigned __int8 **)&__e[8]))
              goto LABEL_355;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(v388, v261, v262, v263, v264, v265, v266, v267);
        }
LABEL_355:
        if ((v268 & 1) != 0)
          return;
        v269 = *((unsigned int *)this + 58);
        v270 = *((_QWORD *)this + 30);
        v271 = *(_QWORD *)v270;
        if ((*(_QWORD *)v270 & 1) != 0)
        {
          v1052 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
          if ((v271 & 2) != 0
            || (v1053 = *(unsigned int *)((v271 & 0xFFFFFFFF8) + 8), (_DWORD)v1053 == 0x3FFFFFFF)
            || (_DWORD)v1053 == -1)
          {
            v1054 = 2;
          }
          else if (v1053 >> 28)
          {
            v1720 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1720 = v1052;
            *(_DWORD *)(v1720 + 8) = v1053;
            v1054 = 1;
            v1052 = v1720;
          }
          else
          {
            v1054 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
            v1052 = v1053 << 36;
          }
          v271 = v1052 | v1054;
        }
        v1821 = v271;
        v272 = *(_QWORD *)(v270 + 8);
        if ((v272 & 1) != 0)
        {
          v1055 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
          if ((v272 & 2) != 0
            || (v1056 = *(unsigned int *)((v272 & 0xFFFFFFFF8) + 8), (_DWORD)v1056 == 0x3FFFFFFF)
            || (_DWORD)v1056 == -1)
          {
            v1057 = 2;
          }
          else if (v1056 >> 28)
          {
            v1721 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1721 = v1055;
            *(_DWORD *)(v1721 + 8) = v1056;
            v1057 = 1;
            v1055 = v1721;
          }
          else
          {
            v1057 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
            v1055 = v1056 << 36;
          }
          v272 = v1055 | v1057;
        }
        v1822 = v272;
        v1823 = *(_WORD *)(v270 + 16);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)this + 72, v269, 0, 0xBEu, (uint64_t)&v1821, 2, *(_QWORD *)(*((_QWORD *)this + 30) + 24) & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
        if ((v1822 & 1) != 0 && (v1822 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v1822 & 0xFFFFFFFF8, v273, v274, v275, v276, v277, v278, v279);
        if ((v1821 & 1) != 0 && (v1821 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v1821 & 0xFFFFFFFF8, v273, v274, v275, v276, v277, v278, v279);
        v280 = *((_QWORD *)this + 4);
        v281 = *((_QWORD *)this + 30);
        v282 = JSC::DFG::Graph::freeze(v280, 6uLL, v274, v275, v276, v277, v278, v279);
        v283 = *((_QWORD *)v282 + 1);
        if (v283)
          JSC::DFG::Graph::assertIsRegistered(v280, v283);
        v284 = *(_DWORD *)(v281 + 56);
        if ((v284 & 7) == 3)
          v285 = 1;
        else
          v285 = 2 * ((v284 & 7) == 5);
        *(_WORD *)(v281 + 18) = v285;
        *(_DWORD *)(v281 + 56) = v284 & 0xFFFFFFE7;
        *(_QWORD *)(v281 + 72) = v282;
        *(_QWORD *)(v281 + 32) = 0;
        *(_QWORD *)(v281 + 40) = 0;
        *(_QWORD *)(v281 + 24) = 0;
LABEL_63:
        *((_BYTE *)this + 248) = 1;
        return;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v259);
      goto LABEL_354;
    case 0x13E:
    case 0x145:
      v173 = *(_QWORD *)(v9 + 24);
      v174 = (v173 >> 50) & 0x3F;
      if (((v173 >> 50) & 0x3F) <= 0x15)
      {
        if ((_DWORD)v174 != 1)
          return;
        goto LABEL_238;
      }
      if ((_DWORD)v174 == 49)
        goto LABEL_238;
      if ((_DWORD)v174 == 22)
      {
        v461 = v173 & 0xFF00FFFFFFFFFFFFLL;
        v462 = *(unsigned __int16 *)(v461 + 18);
        if (v462 > 0xB5)
        {
          if (v462 != 182)
          {
            if (v462 != 355 && v462 != 348)
              return;
            v463 = (unint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
LABEL_1810:
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
              return;
            }
LABEL_624:
            v464 = *v463;
            if (!*v463)
              return;
            if ((v464 & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v252 = *((_QWORD *)this + 4);
              v465 = *(_QWORD *)(v252 + 16);
              v466 = (unint64_t *)(v465 + 42016);
              v467 = (unint64_t *)(v465 + 42032);
              if (v464 != 10)
                v467 = v466;
              v464 = *v467;
            }
            else
            {
              if ((v464 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v464 + 5) != 2)
                return;
              v252 = *((_QWORD *)this + 4);
            }
            v253 = (unint64_t *)v9;
            goto LABEL_630;
          }
        }
        else if (v462 >= 3)
        {
          return;
        }
        v463 = *(unint64_t **)(v461 + 72);
        goto LABEL_624;
      }
      if ((_DWORD)v174 != 52)
        return;
LABEL_238:
      v175 = v173 & 0xFF00FFFFFFFFFFFFLL;
      v176 = *(unsigned __int16 *)(v175 + 18);
      if (v176 > 0xB5)
      {
        if (v176 != 182)
        {
          if (v176 != 355 && v176 != 348)
            return;
          v177 = (unint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            goto LABEL_1810;
          goto LABEL_241;
        }
      }
      else if (v176 >= 3)
      {
        return;
      }
      v177 = *(unint64_t **)(v175 + 72);
LABEL_241:
      v178 = *v177;
      if (!*v177)
        return;
      if (v178 < 0xFFFE000000000000)
      {
        if (!(v178 >> 49))
          return;
        WTF::String::number(COERCE_DOUBLE(v178 - 0x2000000000000), (int **)__e);
      }
      else
      {
        WTF::String::number(v178, (uint64_t *)__e);
      }
      *(_QWORD *)&v1858 = *(_QWORD *)__e;
      if (!*(_QWORD *)__e)
        return;
      v185 = (JSC::DFG::Node *)*((_QWORD *)this + 30);
      v186 = *((_QWORD *)this + 4);
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v186 + 896), (WTF::StringImpl **)&v1858, v179, v180, v181, v182, v183, v184, (uint64_t)__e);
      JSC::DFG::StrengthReductionPhase::convertToLazyJSValue((uint64_t)this, v185, **(_QWORD **)__e, 3, v187, v188, v189, v190);
      *((_BYTE *)this + 248) = 1;
LABEL_225:
      v169 = (WTF::StringImpl *)v1858;
      *(_QWORD *)&v1858 = 0;
      if (v169)
      {
LABEL_226:
        if (*(_DWORD *)v169 == 2)
        {
          WTF::StringImpl::~StringImpl(v169, v119, (uint64_t)v112, v113, v114, v115, v116, v117);
LABEL_570:
          WTF::fastFree(v387, v379, v380, v381, v382, v383, v384, v385);
        }
        else
        {
          *(_DWORD *)v169 -= 2;
        }
      }
      return;
    case 0x148:
      if (!JSC::DFG::Node::hasConstant((JSC::DFG::Node *)(*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)))
        return;
      v877 = *(unsigned __int16 *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v877 == 355 || v877 == 348)
      {
        v878 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          goto LABEL_1810;
      }
      else
      {
        v878 = *(__int128 **)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      v879 = *(_QWORD *)v878;
      if (!(v879 >> 49))
        return;
      v880 = (double)(int)v879;
      if (v879 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v880 = v879 - 0x2000000000000;
      JSC::toStringWithRadix(*(unsigned int *)(*((_QWORD *)this + 30) + 72), v880, v871, v872, v873, v874, v875, v876, (int **)__e);
      v881 = (JSC::DFG::Node *)*((_QWORD *)this + 30);
      v888 = JSC::DFG::LazyJSValue::newString(*((JSC::DFG::LazyJSValue **)this + 4), (WTF::StringImpl **)__e, v882, v883, v884, v885, v886, v887);
      JSC::DFG::StrengthReductionPhase::convertToLazyJSValue((uint64_t)this, v881, v888, v889, v890, v891, v892, v893);
      *((_BYTE *)this + 248) = 1;
      v169 = *(WTF::StringImpl **)__e;
      *(_QWORD *)__e = 0;
      if (!v169)
        return;
      goto LABEL_226;
    case 0x14D:
    case 0x14E:
      v320 = (uint64_t *)(v9 + 24);
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v715 = *((_QWORD *)this + 4);
        v716 = *v320;
        v717 = *(_DWORD *)(v715 + 164);
        if (v717 <= v716)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CEF4);
        }
        v718 = v716 + 1;
        if (v717 <= (int)v716 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CEFCLL);
        }
        v719 = *(_QWORD *)(v715 + 152);
        v320 = (uint64_t *)(v719 + 8 * v716);
        v321 = (uint64_t *)(v719 + 8 * v718);
      }
      else
      {
        v321 = (uint64_t *)(v9 + 32);
      }
      if ((*v320 & 0xFC000000000000) != 0x20000000000000)
        return;
      v123 = *v321;
      goto LABEL_156;
    case 0x156:
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v567 = *((_QWORD *)this + 4);
        v568 = *(_DWORD *)(v9 + 24) + 1;
        if (*(_DWORD *)(v567 + 164) <= v568)
        {
          __break(0xC471u);
          JUMPOUT(0x19854CEECLL);
        }
        v73 = (uint64_t *)(*(_QWORD *)(v567 + 152) + 8 * v568);
      }
      else
      {
        v73 = (uint64_t *)(v9 + 32);
      }
      goto LABEL_155;
    case 0x19C:
    case 0x19D:
      if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return;
      v286 = **(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (v286 < 0xFFFE000000000000)
        return;
      v287 = *(_QWORD *)(v9 + 24);
      v288 = *(_QWORD *)(v9 + 40);
      v289 = v288 & 0xFF00FFFFFFFFFFFFLL;
      if ((v288 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if (*(unsigned __int16 *)((v288 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
          return;
        v290 = **(_QWORD **)((v288 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (v290 < 0xFFFE000000000000)
          return;
        if ((_DWORD)v290 == (_DWORD)v286)
        {
          *((_BYTE *)this + 248) = 1;
          v1059 = *((unsigned int *)this + 58);
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1793, (const JSC::DFG::NodeOrigin *)v9);
          JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1792, (unint64_t *)(*((_QWORD *)this + 30) + 24));
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v1059, 0, 0x18u, (uint64_t)v1793, &v1792);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1793, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
          v1067 = *((_QWORD *)this + 30);
          v1068 = (JSC::DFG::LazyJSValue *)*((_QWORD *)this + 4);
          v1075 = JSC::DFG::LazyJSValue::newString(v1068, (WTF::StringImpl **)&WTF::emptyStringData, v1069, v1070, v1071, v1072, v1073, v1074);
          JSC::DFG::Node::convertToLazyJSConstant(v1067, (uint64_t)v1068, v1075, v1076);
          return;
        }
        v8 = v290 >> 8;
      }
      else
      {
        LOBYTE(v290) = 0;
      }
      v423 = v287 & 0xFF00FFFFFFFFFFFFLL;
      v424 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
      v425 = *(unsigned __int16 *)((v287 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v425 <= 2)
        goto LABEL_573;
      if (v425 > 181)
      {
        if (v425 == 182)
        {
LABEL_573:
          v426 = *(__int128 **)(v423 + 72);
        }
        else
        {
          if (v425 != 355 && v425 != 348)
            return;
          v426 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
        }
        *(_DWORD *)&__e[8] = 0;
        *(_QWORD *)__e = v426;
      }
      else
      {
        if (v425 != 3)
          return;
        *(_OWORD *)__e = *(_OWORD *)*(_QWORD *)(v423 + 72);
      }
      JSC::DFG::LazyJSValue::tryGetString((uint64_t **)__e, v424, a4, a5, a6, a7, a8, (int **)&v1858);
      if (!(_QWORD)v1858)
        return;
      v427 = *(_DWORD *)(v1858 + 4);
      v428 = (unsigned __int16 *)*((_QWORD *)this + 30);
      v429 = v428[9];
      v430 = v290 | (v8 << 8);
      if (v427 >= (int)v286)
        v431 = v286;
      else
        v431 = *(_DWORD *)(v1858 + 4);
      if ((v286 & 0x80000000) != 0)
        v431 = (v427 + v286) & ~((v427 + (int)v286) >> 31);
      if (v289)
        v432 = v430;
      else
        v432 = *(_DWORD *)(v1858 + 4);
      if (v427 >= v432)
        v433 = v432;
      else
        v433 = *(_DWORD *)(v1858 + 4);
      if (v432 < 0)
        v434 = (v432 + v427) & ~((v432 + v427) >> 31);
      else
        v434 = v433;
      if (v431 >= v434)
      {
        v431 = 0;
        v434 = 0;
      }
      v435 = v286 & ~((int)v286 >> 31);
      if (v427 < v435)
        v435 = *(_DWORD *)(v1858 + 4);
      v436 = v430 & ~((int)(v8 << 8) >> 31);
      if (v427 < v436)
        v436 = *(_DWORD *)(v1858 + 4);
      if (v435 > v436)
        v437 = v436;
      else
        v437 = v435;
      if (v435 > v436)
        v436 = v435;
      if (v289)
        v435 = v437;
      else
        v436 = *(_DWORD *)(v1858 + 4);
      if (v429 == 413)
        v438 = v435;
      else
        v438 = v431;
      if (v429 == 413)
        v439 = v436;
      else
        v439 = v434;
      *((_BYTE *)this + 248) = 1;
      v440 = *((unsigned int *)this + 58);
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1791, (const JSC::DFG::NodeOrigin *)v428);
      JSC::DFG::AdjacencyList::justChecks((unint64_t *)&v1790, (unint64_t *)(*((_QWORD *)this + 30) + 24));
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this + 72, v440, 0, 0x18u, (uint64_t)v1791, &v1790);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1791, v441, v442, v443, v444, v445, v446, v447);
      v448 = *((_QWORD *)this + 30);
      if (v438)
        v449 = 0;
      else
        v449 = v439 == v427;
      if (v449)
      {
        JSC::DFG::Node::convertToIdentityOn(*((_QWORD *)this + 30), v423);
      }
      else
      {
        v450 = (JSC::DFG::LazyJSValue *)*((_QWORD *)this + 4);
        WTF::String::substring((WTF::String *)&v1858, v438, v439 - v438, (uint64_t *)__e);
        v457 = JSC::DFG::LazyJSValue::newString(v450, (WTF::StringImpl **)__e, v451, v452, v453, v454, v455, v456);
        JSC::DFG::Node::convertToLazyJSConstant(v448, (uint64_t)v450, v457, v458);
        v459 = *(WTF::StringImpl **)__e;
        *(_QWORD *)__e = 0;
        if (v459)
          goto LABEL_677;
      }
      goto LABEL_225;
    default:
      return;
  }
}

uint64_t JSC::DFG::StrengthReductionPhase::handleCommutativity(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  __int128 *v6;

  v1 = *(_QWORD *)(this + 240);
  v2 = *(_QWORD *)(v1 + 24);
  if ((v2 & 0xFC000000000000) == 0)
    return this;
  v3 = *(_QWORD *)(v1 + 32);
  if ((v3 & 0xFC000000000000) == 0)
    return this;
  v4 = *(unsigned __int16 *)((v3 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v4 > 0xB5)
  {
    if (v4 == 182 || v4 == 348 || v4 == 355)
      return this;
  }
  else if (v4 < 3)
  {
    return this;
  }
  v5 = *(unsigned __int16 *)((v2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v5 > 0xB5)
  {
    if (v5 == 182)
      goto LABEL_11;
    if (v5 == 355 || v5 == 348)
    {
      v6 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
LABEL_12:
      if ((*(_QWORD *)v6 & 0xFFFE000000000002) != 0)
      {
LABEL_18:
        *(_QWORD *)(v1 + 24) = v3;
        *(_QWORD *)(v1 + 32) = v2;
        *(_BYTE *)(this + 248) = 1;
        return this;
      }
    }
  }
  else if (v5 < 3)
  {
LABEL_11:
    v6 = *(__int128 **)((v2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    goto LABEL_12;
  }
  if ((v3 & 0xFF00FFFFFFFFFFFFLL) < (v2 & 0xFF00FFFFFFFFFFFFLL))
    goto LABEL_18;
  return this;
}

uint64_t JSC::DFG::StrengthReductionPhase::convertToIdentityOverChild1(JSC::DFG::Graph **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;

  JSC::DFG::InsertionSet::insertCheck((JSC::DFG::InsertionSet *)(this + 9), this[4], *((unsigned int *)this + 58), this[30], a5, a6, a7, a8);
  v9 = (uint64_t)this[30];
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;
  result = JSC::DFG::Node::convertToIdentity(v9);
  *((_BYTE *)this + 248) = 1;
  return result;
}

void JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t *a1, JSC::DFG::Graph *a2, unint64_t **this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::DFG::Node::tryGetString((JSC::DFG::Node *)this, a2, a4, a5, a6, a7, a8, (int **)&v33);
  if (v33 && *((_DWORD *)v33 + 1))
  {
    *a1 = (uint64_t)v33;
    return;
  }
  v17 = *((unsigned __int16 *)this + 9);
  if (v17 == 355 || v17 == 348)
  {
    v18 = (unint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v18 = this[9];
  }
  v19 = *v18;
  if (*v18)
  {
    if (v19 >= 0xFFFE000000000000)
    {
      WTF::String::number(v19, a1);
      goto LABEL_28;
    }
    if (v19 >> 49)
    {
      WTF::String::number(COERCE_DOUBLE(v19 - 0x2000000000000), (int **)a1);
      goto LABEL_28;
    }
    if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      if (v19 == 7)
        v22 = "true";
      else
        v22 = "false";
      if (v19 == 7)
        v23 = 5;
      else
        v23 = 6;
      WTF::String::String((int **)a1, (uint64_t)v22, v23);
      goto LABEL_28;
    }
    if (v19 == 10)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v20 = 0x900000002;
      v21 = "undefined";
      goto LABEL_23;
    }
    if (v19 == 2)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v20 = 0x400000002;
      v21 = "null";
LABEL_23:
      *(_QWORD *)(v20 + 8) = v21;
      *(_DWORD *)(v20 + 16) = 4;
      *a1 = v20;
      goto LABEL_28;
    }
  }
LABEL_27:
  *a1 = 0;
LABEL_28:
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void WTF::StringBuilder::append(WTF::StringBuilder *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int8x16_t *v21;
  unint64_t v22;

  if (*((_DWORD *)this + 4) || *((_QWORD *)this + 1))
  {
    v20 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
    {
      v21 = (int8x16_t *)*((_QWORD *)v20 + 1);
      v22 = v20[1];
      if ((v20[4] & 4) == 0)
      {
        WTF::StringBuilder::append((uint64_t)this, v21, v22, a4, a5, a6, a7, a8);
        return;
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    WTF::StringBuilder::append((uint64_t)this, v21, v22, a4, a5, a6, a7, a8);
    return;
  }
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  v11 = *(_QWORD *)this;
  *(_QWORD *)this = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
      goto LABEL_8;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v18)
    {
      pas_try_deallocate_slow_no_cache(v11, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_8;
    }
    if (!(v11 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v11 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v11)) & 1) != 0)
    {
      goto LABEL_14;
    }
    if (v11 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v11 >> 24)
    {
      v13 = 0;
    }
    else
    {
      v13 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v11 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v11) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v13 == 1)
      {
LABEL_14:
        v19 = *(unsigned int *)(v18 + 8000);
        if (v19 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v18, v11, (os_unfair_lock_s *)5, v13, v14, v15, v16, v17);
        }
        else
        {
          *(_QWORD *)(v18 + 8 * v19) = v11 | 0x5000000000000;
          *(_DWORD *)(v18 + 8000) = v19 + 1;
        }
        goto LABEL_8;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v11, 1, v13, v14, v15, v16, v17);
  }
LABEL_8:
  v12 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
  *((_DWORD *)this + 4) = v12;
}

_QWORD *JSC::DFG::StrengthReductionPhase::convertToLazyJSValue(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::InsertionSet::insertCheck((JSC::DFG::InsertionSet *)(a1 + 72), *(JSC::DFG::Graph **)(a1 + 32), *(unsigned int *)(a1 + 232), a2, a5, a6, a7, a8);
  return JSC::DFG::Node::convertToLazyJSConstant((uint64_t)a2, *(_QWORD *)(a1 + 32), a3, a4);
}

unint64_t *JSC::DFG::AdjacencyList::justChecks(unint64_t *this, unint64_t *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;

  *this = 0;
  this[1] = 0;
  this[2] = 0;
  v2 = *a2;
  if ((*a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v3 = 0;
    if ((v2 & 0x1000000000000) == 0)
    {
      v4 = (v2 >> 50) & 0x3F;
      if ((_DWORD)v4)
      {
        v9 = v4 > 0x34;
        v10 = (1 << v4) & 0x12400001800284;
        if (v9 || v10 == 0)
        {
          *this = v2;
          v3 = 1;
        }
      }
    }
    v5 = a2[1];
    if ((v5 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if ((v5 & 0x1000000000000) == 0)
      {
        v6 = (v5 >> 50) & 0x3F;
        if ((_DWORD)v6)
        {
          v9 = v6 > 0x34;
          v12 = (1 << v6) & 0x12400001800284;
          if (v9 || v12 == 0)
            this[v3++] = v5;
        }
      }
      v7 = a2[2];
      if ((v7 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v7 & 0x1000000000000) == 0)
      {
        v8 = (v7 >> 50) & 0x3F;
        if ((_DWORD)v8)
        {
          if (v8 > 0x34 || ((1 << v8) & 0x12400001800284) == 0)
            this[v3] = v7;
        }
      }
    }
  }
  return this;
}

uint64_t WTF::StringBuilder::append(WTF::StringBuilder *this, const WTF::StringBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  uint64_t result;
  int v12;
  int8x16_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_DWORD *)this + 4) || (!*((_QWORD *)this + 1) ? (v10 = *(_QWORD *)a2 == 0) : (v10 = 1), v10))
  {
    v13 = (int8x16_t *)WTF::StringBuilder::operator WTF::StringView((uint64_t *)a2);
    return WTF::StringBuilder::append((uint64_t)this, v13, v14, v14, v15, v16, v17, v18);
  }
  else
  {
    result = (uint64_t)WTF::String::operator=((unint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_DWORD *)a2 + 4);
    if (v12 < 0)
    {
      result = 268;
      __break(0xC471u);
    }
    else
    {
      *((_DWORD *)this + 4) = v12;
    }
  }
  return result;
}

_QWORD *WTF::String::substring@<X0>(WTF::String *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *result;

  result = *(_QWORD **)this;
  if (result)
  {
    if (a2 || *((_DWORD *)result + 1) > a3)
    {
      return WTF::StringImpl::substring(result, a2, a3, a4);
    }
    else
    {
      *(_DWORD *)result += 2;
      *a4 = (uint64_t)result;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void JSC::JSBoundFunction::forEachBoundArg<JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::JSValue)#1}>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v8)
  {
    v10 = (unint64_t *)(a1 + 48);
    if (v8 <= 3)
    {
      do
      {
        v15 = *v10++;
        JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::JSValue)#1}::operator()(*a2, v15, a3, a4, a5, a6, a7, a8);
        --v8;
      }
      while (v8);
    }
    else
    {
      v11 = 0;
      v12 = 8 * v8;
      do
      {
        v13 = *v10 + v11;
        if ((*(_BYTE *)(*v10 + 4) & 0xE) == 6)
          v14 = *(_QWORD *)(v13 + 16) + 0x2000000000000;
        else
          v14 = *(_QWORD *)(v13 + 16);
        JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::JSValue)#1}::operator()(*a2, v14, a3, a4, a5, a6, a7, a8);
        v11 += 8;
      }
      while (v12 != v11);
    }
  }
}

uint64_t WTF::StringBuilder::append(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 0xFF00000000) != 0)
    return WTF::StringBuilder::append(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    return WTF::StringBuilder::append(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::DFG::NodeOrigin)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;

  if (**(_BYTE **)a1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 + 72;
    v11 = *(unsigned int *)(v9 + 232);
    v12 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 2) != 0
        || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
          ? (v34 = (_DWORD)v33 == -1)
          : (v34 = 1),
            v34))
      {
        v35 = 2;
      }
      else if (v33 >> 28)
      {
        v55 = a1;
        v47 = v32;
        v48 = v33;
        v32 = WTF::fastMalloc((WTF *)0x10);
        a1 = v55;
        *(_QWORD *)v32 = v47;
        *(_DWORD *)(v32 + 8) = v48;
        v35 = 1;
      }
      else
      {
        v35 = v32;
        v32 = v33 << 36;
      }
      v12 = v32 | v35;
    }
    v62 = v12;
    v13 = *(_QWORD *)(a2 + 8);
    if ((v13 & 1) != 0)
    {
      v36 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v37 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
          ? (v38 = (_DWORD)v37 == -1)
          : (v38 = 1),
            v38))
      {
        v39 = 2;
      }
      else if (v37 >> 28)
      {
        v56 = a1;
        v49 = v36;
        v50 = v37;
        v36 = WTF::fastMalloc((WTF *)0x10);
        a1 = v56;
        *(_QWORD *)v36 = v49;
        *(_DWORD *)(v36 + 8) = v50;
        v39 = 1;
      }
      else
      {
        v39 = v36;
        v36 = v37 << 36;
      }
      v13 = v36 | v39;
    }
    v63 = v13;
    v64 = *(_WORD *)(a2 + 16);
    v21 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v9 + 72, v11, 0, 179, (uint64_t)&v62, **(_QWORD **)(a1 + 16) & 0xFF00FFFFFFFFFFFFLL | 0x40000000000000, a7, a8);
    if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v63 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v62 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    v22 = *(unsigned int *)(v9 + 232);
    v23 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v40 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v41 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
          ? (v42 = (_DWORD)v41 == -1)
          : (v42 = 1),
            v42))
      {
        v43 = 2;
      }
      else if (v41 >> 28)
      {
        v57 = v22;
        v51 = v41;
        v52 = WTF::fastMalloc((WTF *)0x10);
        v22 = v57;
        *(_QWORD *)v52 = v40;
        *(_DWORD *)(v52 + 8) = v51;
        v43 = 1;
        v40 = v52;
      }
      else
      {
        v43 = v40;
        v40 = v41 << 36;
      }
      v23 = v40 | v43;
    }
    v59 = v23;
    v24 = *(_QWORD *)(a2 + 8);
    if ((v24 & 1) != 0)
    {
      v44 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || (v45 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v45 == 0x3FFFFFFF)
        || (_DWORD)v45 == -1)
      {
        v46 = 2;
      }
      else if (v45 >> 28)
      {
        v58 = v22;
        v53 = v45;
        v54 = WTF::fastMalloc((WTF *)0x10);
        v22 = v58;
        *(_QWORD *)v54 = v44;
        *(_DWORD *)(v54 + 8) = v53;
        v46 = 1;
        v44 = v54;
      }
      else
      {
        v46 = v44;
        v44 = v45 << 36;
      }
      v24 = v44 | v46;
    }
    v60 = v24;
    v61 = *(_WORD *)(a2 + 16);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10, v22, 0, 24, (uint64_t)&v59, v21 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v19, v20);
    if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v60 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v59 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::String const&)#1}::operator()(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inserted;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t *v82;

  v9 = *a1;
  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
    {
      v10 = *(_QWORD *)(v9 + 32);
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v10 + 896), a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v82);
      v11 = *v82;
      v12 = *(unsigned int *)(v9 + 232);
      v13 = a1[1];
      v14 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 & 1) != 0)
      {
        v39 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || ((v40 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
            ? (v41 = (_DWORD)v40 == -1)
            : (v41 = 1),
              v41))
        {
          v42 = 2;
        }
        else
        {
          v67 = v39;
          v69 = v40;
          if (v40 >> 28)
          {
            v39 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v39 = v67;
            *(_DWORD *)(v39 + 8) = v69;
            v42 = 1;
          }
          else
          {
            v42 = v39;
            v39 = v69 << 36;
          }
        }
        v14 = v39 | v42;
      }
      v73 = v14;
      v15 = *(_QWORD *)(v13 + 8);
      if ((v15 & 1) != 0)
      {
        v43 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        if ((v15 & 2) != 0
          || ((v44 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
            ? (v45 = (_DWORD)v44 == -1)
            : (v45 = 1),
              v45))
        {
          v46 = 2;
        }
        else
        {
          v68 = v43;
          v70 = v44;
          if (v44 >> 28)
          {
            v43 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v43 = v68;
            *(_DWORD *)(v43 + 8) = v70;
            v46 = 1;
          }
          else
          {
            v46 = v43;
            v43 = v70 << 36;
          }
        }
        v15 = v43 | v46;
      }
      v74 = v15;
      v75 = *(_WORD *)(v13 + 16);
      v16 = *(_QWORD *)(v9 + 32);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v17 = v11;
      v17[1] = 3;
      v17[2] = 0;
      v17[2] = *(_QWORD *)(v16 + 600);
      *(_QWORD *)(v16 + 600) = v17;
      inserted = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v9 + 72, v12, 0, 3, (uint64_t)&v73, (uint64_t)v17, v18, v19);
      if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v74 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
      v28 = v73;
      if ((v73 & 1) != 0)
      {
LABEL_20:
        if ((v28 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v28 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    else
    {
      v34 = *(unsigned int *)(v9 + 232);
      v35 = a1[1];
      v36 = *(_QWORD *)v35;
      if ((*(_QWORD *)v35 & 1) != 0)
      {
        v55 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
        if ((v36 & 2) != 0
          || ((v56 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v56 != 0x3FFFFFFF)
            ? (v57 = (_DWORD)v56 == -1)
            : (v57 = 1),
              v57))
        {
          v58 = 2;
        }
        else
        {
          v71 = v56;
          if (v56 >> 28)
          {
            v65 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v65 = v55;
            *(_DWORD *)(v65 + 8) = v71;
            v58 = 1;
            v55 = v65;
          }
          else
          {
            v58 = v55;
            v55 = v71 << 36;
          }
        }
        v36 = v55 | v58;
      }
      v76 = v36;
      v37 = *(_QWORD *)(v35 + 8);
      if ((v37 & 1) != 0)
      {
        v59 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
        if ((v37 & 2) != 0
          || ((v60 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v60 != 0x3FFFFFFF)
            ? (v61 = (_DWORD)v60 == -1)
            : (v61 = 1),
              v61))
        {
          v62 = 2;
        }
        else
        {
          v72 = v60;
          if (v60 >> 28)
          {
            v66 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v66 = v59;
            *(_DWORD *)(v66 + 8) = v72;
            v62 = 1;
            v59 = v66;
          }
          else
          {
            v62 = v59;
            v59 = v72 << 36;
          }
        }
        v37 = v59 | v62;
      }
      v77 = v37;
      v78 = *(_WORD *)(v35 + 16);
      inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t *)(v9 + 72), v34, (uint64_t)&v76, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 16) + 41968), 0, a6, a7, a8);
      if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v77 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
      v28 = v76;
      if ((v76 & 1) != 0)
        goto LABEL_20;
    }
  }
  else
  {
    v29 = (uint64_t *)(v9 + 72);
    v30 = *(unsigned int *)(v9 + 232);
    v31 = a1[1];
    v32 = *(_QWORD *)v31;
    if ((*(_QWORD *)v31 & 1) != 0)
    {
      v47 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
      if ((v32 & 2) != 0
        || ((v48 = *(unsigned int *)((v32 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
          ? (v49 = (_DWORD)v48 == -1)
          : (v49 = 1),
            v49))
      {
        v50 = 2;
      }
      else if (v48 >> 28)
      {
        v63 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v63 = v47;
        *(_DWORD *)(v63 + 8) = v48;
        v50 = 1;
        v47 = v63;
      }
      else
      {
        v50 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
        v47 = v48 << 36;
      }
      v32 = v47 | v50;
    }
    v79 = v32;
    v33 = *(_QWORD *)(v31 + 8);
    if ((v33 & 1) != 0)
    {
      v51 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      if ((v33 & 2) != 0
        || ((v52 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v52 != 0x3FFFFFFF)
          ? (v53 = (_DWORD)v52 == -1)
          : (v53 = 1),
            v53))
      {
        v54 = 2;
      }
      else if (v52 >> 28)
      {
        v64 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v64 = v51;
        *(_DWORD *)(v64 + 8) = v52;
        v54 = 1;
        v51 = v64;
      }
      else
      {
        v54 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
        v51 = v52 << 36;
      }
      v33 = v51 | v54;
    }
    v80 = v33;
    v81 = *(_WORD *)(v31 + 16);
    inserted = JSC::DFG::InsertionSet::insertConstant(v29, v30, (uint64_t)&v79, 0xAuLL, 0, a6, a7, a8);
    if ((v80 & 1) != 0 && (v80 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v80 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
    v28 = v79;
    if ((v79 & 1) != 0)
      goto LABEL_20;
  }
  return inserted;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationKind>(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)a1;
  if (v8 <= v4)
    goto LABEL_18;
  if (!(v8 >> 29))
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    if ((_DWORD)v5)
    {
      v18 = 8 * v5;
      v19 = (uint64_t *)v9;
      do
      {
        v20 = *v19++;
        *v10++ = v20;
        v18 -= 8;
      }
      while (v18);
      v10 = *(_QWORD **)a1;
      if (!v9)
        goto LABEL_11;
    }
    else if (!v9)
    {
LABEL_11:
      v9 = (unint64_t)v10;
LABEL_18:
      v21 = *(unsigned int *)(a1 + 12);
      *(_QWORD *)(v9 + 8 * v21) = *a2;
      *(_DWORD *)(a1 + 12) = v21 + 1;
      return;
    }
    if (v10 == (_QWORD *)v9)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
    v9 = *(_QWORD *)a1;
    goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t WTF::StringBuilder::operator WTF::StringView(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v6;

  v1 = a1[1];
  v2 = v1;
  if ((v1 || (v2 = *a1) != 0) && (*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    v3 = *((_DWORD *)a1 + 4);
    if (v3)
    {
      v4 = *a1;
      if (!*a1)
        v4 = a1[1];
      if (v3 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854E5F4);
      }
      return *(_QWORD *)(v4 + 8);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v6 = *((_DWORD *)a1 + 4);
    if (v6)
    {
      if (*a1)
        v1 = *a1;
      if (v6 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19854E614);
      }
      return *(_QWORD *)(v1 + 8);
    }
    else
    {
      return 0;
    }
  }
}

void JSC::DFG::StrengthReductionPhase::handleNode(void)::{lambda(JSC::JSValue)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inserted;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(a1 + 72);
  v12 = *(unsigned int *)(a1 + 232);
  v13 = *(_QWORD *)(a1 + 240);
  v14 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) != 0)
  {
    v25 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v26 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v41 = a2;
      v43 = v11;
      v39 = v12;
      v33 = v26;
      v34 = WTF::fastMalloc((WTF *)0x10);
      v12 = v39;
      a2 = v41;
      v35 = v34;
      v11 = v43;
      *(_QWORD *)v35 = v25;
      *(_DWORD *)(v35 + 8) = v33;
      v28 = 1;
      v25 = v35;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v14 = v25 | v28;
  }
  v45 = v14;
  v15 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) != 0)
  {
    v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v30 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v42 = a2;
      v44 = v11;
      v40 = v12;
      v36 = v30;
      v37 = WTF::fastMalloc((WTF *)0x10);
      v12 = v40;
      a2 = v42;
      v38 = v37;
      v11 = v44;
      *(_QWORD *)v38 = v29;
      *(_DWORD *)(v38 + 8) = v36;
      v32 = 1;
      v29 = v38;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v15 = v29 | v32;
  }
  v46 = v15;
  v47 = *(_WORD *)(v13 + 16);
  inserted = JSC::DFG::InsertionSet::insertConstant(v11, v12, (uint64_t)&v45, a2, 0, a6, a7, a8);
  v24 = *(unsigned int *)(v10 + 164);
  if ((_DWORD)v24 == *(_DWORD *)(v10 + 160))
  {
    WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 152, (void *)(v24 + 1), v17, v18, v19, v20, v21, v22);
    v24 = *(unsigned int *)(v10 + 164);
  }
  *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v24) = inserted & 0xFF00FFFFFFFFFFFFLL;
  *(_DWORD *)(v10 + 164) = v24 + 1;
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::DFG::osrExitGenerationThunkGenerator@<X0>(JSC::DFG *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned __int8 *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  unsigned int v339;
  uint8x8_t v340;
  __int32 v341;
  uint8x8_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  BOOL v348;
  int v349;
  void *v350;
  unsigned int i;
  int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  unsigned int v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  unint64_t v520;
  pthread_key_t *v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  WTF *v530;
  unsigned int v531;
  char v532;
  int v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  char v549;
  char v550;
  uint64_t v551;
  unsigned __int8 *v552;
  unsigned __int8 *v553;
  uint64_t v554;
  _BYTE *v555;
  unsigned __int8 *v556;
  char *v557;
  unsigned __int8 *v558;
  uint64_t v559;
  int v560;
  unsigned __int8 *v561;
  int64_t v562;
  char *v563;
  char *v564;
  _QWORD *v565;
  _DWORD *v566;
  unsigned __int8 v567;
  unint64_t v568;
  void **p_dst;
  unsigned __int8 v570;
  unint64_t v571;
  char v572;
  char **v573;
  char *v574;
  void *__dst;
  uint64_t v576;
  uint64_t v577;
  WTF *v578;
  _BYTE v579[128];
  unsigned int v580;
  char v581;
  int v582;
  int v583;
  __int128 v584;
  __int128 v585;
  uint64_t v586;
  _DWORD v587[6];
  char v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  WTF *v592;
  _BYTE v593[128];
  unsigned int v594;
  unsigned int j;
  int v596;
  char v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  _DWORD *v601;
  char v602;
  uint64_t v603;
  int v604;
  _DWORD *v605;
  char v606;
  uint64_t v607;
  int v608;
  char v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;

  v612 = *MEMORY[0x1E0C80C00];
  LOBYTE(v587[0]) = 0;
  v588 = 0;
  v589 = 0;
  v590 = 0;
  v591 = 0x8000000080000000;
  v592 = (WTF *)v593;
  v594 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    __dst = &v566;
    p_dst = &__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (v594 < v16)
    {
      if (v592 && v592 != (WTF *)v593)
      {
        WTF::fastFree((unint64_t)v592, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      v592 = v15;
      v594 = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  v597 = 1;
  j = 0;
  v596 = 0;
  v598 = 0u;
  v599 = 0u;
  v600 = 0u;
  v601 = v587;
  v602 = 16;
  v603 = 0;
  v604 = 0x10000;
  v605 = v587;
  v606 = 17;
  v607 = 0;
  v608 = 0x20000;
  v609 = 0;
  v611 = 0;
  v610 = 0;
  v24 = JSC::VM::scratchBufferForSize(this, 8uLL, v8, v9, v10, v11, v12, v13) + 8;
  v25 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v17, v18, v19, v20, v21, v22, v23);
    v25 = j;
  }
  *(_DWORD *)((char *)v592 + v25) = -132182047;
  j += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v587, v24, 1, v19, v20, v21, v22, v23);
  v33 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v26, v27, v28, v29, v30, v31, v32);
    v33 = j;
  }
  *(_DWORD *)((char *)v592 + v33) = -134217696;
  v34 = j;
  v35 = j + 4;
  j += 4;
  if (v34 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v26, v27, v28, v29, v30, v31, v32);
    v35 = j;
  }
  *(_DWORD *)((char *)v592 + v35) = -129955871;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v587, (uint64_t)this + 90480, 0, v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v587, 0, 0, 0xFFFFFFFFLL, v36, v37, v38, v39, (uint64_t)&__dst, v40);
  v48 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v41, v42, v43, v44, v45, v46, v47);
    v48 = j;
  }
  *(_DWORD *)((char *)v592 + v48) = -1442839555;
  j += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, (uint64_t)v587, v42, v43, v44, v45, v46, v47);
  v56 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v56 = j;
  }
  *(_DWORD *)((char *)v592 + v56) = -129956960;
  v57 = j;
  v58 = j + 4;
  j += 4;
  if (v57 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v58 = j;
  }
  *(_DWORD *)((char *)v592 + v58) = -129531904;
  v59 = j;
  v60 = j + 4;
  j += 4;
  if (v59 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v60 = j;
  }
  *(_DWORD *)((char *)v592 + v60) = -1862230016;
  v61 = j;
  v62 = j + 4;
  j += 4;
  if (v61 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v62 = j;
  }
  *(_DWORD *)((char *)v592 + v62) = -1202946048;
  v63 = j;
  v64 = j + 4;
  j += 4;
  if (v63 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v64 = j;
  }
  *(_DWORD *)((char *)v592 + v64) = 1258292192;
  v65 = j;
  v66 = j + 4;
  j += 4;
  if (v65 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v66 = j;
  }
  *(_DWORD *)((char *)v592 + v66) = 1394438144;
  v67 = j;
  v68 = j + 4;
  j += 4;
  if (v67 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v68 = j;
  }
  *(_DWORD *)((char *)v592 + v68) = -1824490496;
  v69 = j;
  v70 = j + 4;
  j += 4;
  if (v69 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v70 = j;
  }
  *(_DWORD *)((char *)v592 + v70) = -1961033728;
  v71 = j;
  v72 = j + 4;
  j += 4;
  if (v71 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v72 = j;
  }
  *(_DWORD *)((char *)v592 + v72) = -1862270945;
  v73 = j;
  v74 = j + 4;
  j += 4;
  if (v73 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v49, v50, v51, v52, v53, v54, v55);
    v74 = j;
  }
  *(_DWORD *)((char *)v592 + v74) = -132182047;
  j += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v587, v24, 1, v51, v52, v53, v54, v55);
  v82 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v75, v76, v77, v78, v79, v80, v81);
    v82 = j;
  }
  *(_DWORD *)((char *)v592 + v82) = -130023392;
  v83 = j;
  v84 = j + 4;
  j += 4;
  if (v83 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v75, v76, v77, v78, v79, v80, v81);
    v84 = j;
  }
  *(_DWORD *)((char *)v592 + v84) = -129955871;
  j += 4;
  v85 = JSC::VM::scratchBufferForSize(this, 0x138uLL, v76, v77, v78, v79, v80, v81) + 8;
  v86 = 17;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v587, v85, 17, v87, v88, v89, v90, v91);
  p_dst = (void **)v587;
  v570 = 17;
  v571 = 127;
  __dst = 0;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v92, v93, v94, v95, v96, v97);
  __dst = (void *)513;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v98, v99, v100, v101, v102, v103);
  __dst = (void *)1026;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v104, v105, v106, v107, v108, v109);
  __dst = (void *)1539;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v110, v111, v112, v113, v114, v115);
  __dst = (void *)2052;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v116, v117, v118, v119, v120, v121);
  __dst = (void *)2565;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v122, v123, v124, v125, v126, v127);
  __dst = (void *)3078;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v128, v129, v130, v131, v132, v133);
  __dst = (void *)3591;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v134, v135, v136, v137, v138, v139);
  __dst = (void *)4104;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v140, v141, v142, v143, v144, v145);
  __dst = (void *)4617;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v146, v147, v148, v149, v150, v151);
  __dst = (void *)5130;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v152, v153, v154, v155, v156, v157);
  __dst = (void *)5643;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v158, v159, v160, v161, v162, v163);
  __dst = (void *)6156;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v164, v165, v166, v167, v168, v169);
  __dst = (void *)6669;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v170, v171, v172, v173, v174, v175);
  __dst = (void *)7182;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v176, v177, v178, v179, v180, v181);
  __dst = (void *)7695;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v182, v183, v184, v185, v186, v187);
  v194 = v571 & 0x7F;
  if ((_DWORD)v194 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)p_dst, v194, v570 | ((unint64_t)(v571 >> 8) << 34), v189, v190, v191, v192, v193);
    v571 = 127;
  }
  __dst = (void *)8224;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v188, v189, v190, v191, v192, v193);
  __dst = (void *)8737;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v195, v196, v197, v198, v199, v200);
  __dst = (void *)9250;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v201, v202, v203, v204, v205, v206);
  __dst = (void *)9763;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v207, v208, v209, v210, v211, v212);
  __dst = (void *)10276;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v213, v214, v215, v216, v217, v218);
  __dst = (void *)10789;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v219, v220, v221, v222, v223, v224);
  __dst = (void *)11302;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v225, v226, v227, v228, v229, v230);
  __dst = (void *)11815;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v231, v232, v233, v234, v235, v236);
  __dst = (void *)12336;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v237, v238, v239, v240, v241, v242);
  __dst = (void *)12849;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v243, v244, v245, v246, v247, v248);
  __dst = (void *)13362;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v249, v250, v251, v252, v253, v254);
  __dst = (void *)13875;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v255, v256, v257, v258, v259, v260);
  __dst = (void *)14388;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v261, v262, v263, v264, v265, v266);
  __dst = (void *)14901;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v267, v268, v269, v270, v271, v272);
  __dst = (void *)15414;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v273, v274, v275, v276, v277, v278);
  __dst = (void *)15927;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v279, v280, v281, v282, v283, v284);
  __dst = (void *)16440;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v285, v286, v287, v288, v289, v290);
  __dst = (void *)16953;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v291, v292, v293, v294, v295, v296);
  __dst = (void *)17466;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v297, v298, v299, v300, v301, v302);
  __dst = (void *)17979;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v303, v304, v305, v306, v307, v308);
  __dst = (void *)18492;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v309, v310, v311, v312, v313, v314);
  __dst = (void *)19005;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v315, v316, v317, v318, v319, v320);
  __dst = (void *)19518;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&p_dst, (uint64_t *)&__dst, v321, v322, v323, v324, v325, v326);
  if ((v571 & 0x7F) != 0x7F)
  {
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)p_dst, (char)((v571 & 0x7F) - 32), v570 | ((unint64_t)(v571 >> 8) << 34), v329, v330, v331, v332, v333);
    v571 = 127;
  }
  __dst = &v577;
  LODWORD(v577) = 17891357;
  v576 = 0x200000002;
  v334 = 2;
  do
  {
    v335 = 0;
    v336 = 0;
    v337 = (char *)__dst;
    v338 = v334;
    while ((*((_BYTE *)__dst + v335 + 1) & 0x40) == 0)
    {
      v336 |= 1 << *((_BYTE *)__dst + v335 + 1);
      v335 += 2;
      if (2 * v334 == v335)
      {
        v335 = 0;
        while (1)
        {
          v339 = *((_BYTE *)__dst + v335) & 0x7F;
          if (v339 >= 0x40)
            goto LABEL_139;
          v336 &= ~(1 << v339);
          v335 += 2;
          if (2 * v334 == v335)
          {
            v340 = (uint8x8_t)vcnt_s8((int8x8_t)v336);
            v340.i16[0] = vaddlv_u8(v340);
            v341 = v340.i32[0];
            v342 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v336));
            v342.i16[0] = vaddlv_u8(v342);
            if (v342.i32[0] + v341)
            {
              v86 = 0;
              if (v334 <= 1uLL)
                v343 = 1;
              else
                v343 = v334;
              v344 = 2 * v343;
              while (1)
              {
                LODWORD(v335) = *((unsigned __int8 *)__dst + v86 + 1);
                if ((v335 & 0x7Fu) >= 0x40)
                  goto LABEL_139;
                if (((v336 >> (v335 & 0x7F)) & 1) != 0)
                {
                  v345 = *((unsigned __int8 *)__dst + v86);
                  if (v345 == (_DWORD)v335)
                    goto LABEL_71;
                  LODWORD(v336) = (char)v335;
                  LODWORD(v338) = (char)v345;
                  if ((char)v345 == 63)
                    goto LABEL_140;
                  v346 = j;
                  v347 = v594;
                  v348 = (char)v335 == 31 || (_DWORD)v338 == 31;
                  if (!v348)
                  {
                    v349 = v335 & 0xFFE0FFFF | ((v338 & 0x1F) << 16) | 0xAA0003E0;
                    goto LABEL_68;
                  }
                  goto LABEL_75;
                }
                v86 += 2;
                if (v344 == v86)
                  goto LABEL_73;
              }
            }
            v565 = a2;
            v549 = *(_BYTE *)__dst;
            v550 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)v587, *(char *)__dst, v550, v329, v330, v331, v332, v333);
            memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v576) - 2);
            v551 = (HIDWORD(v576) - 1);
            v348 = HIDWORD(v576) == 1;
            HIDWORD(v576) = v551;
            v552 = (unsigned __int8 *)__dst;
            v553 = (unsigned __int8 *)__dst + 2 * v551;
            if (v348)
            {
              v559 = 0;
              v560 = 0;
              v86 = 0;
              v327 = v553;
            }
            else
            {
              v554 = 2 * v551;
              v555 = __dst;
              while (*v555 != v550)
              {
                v555 += 2;
                v554 -= 2;
                if (!v554)
                  goto LABEL_127;
              }
              *v555 = v549;
LABEL_127:
              v86 = 0;
              v556 = v552;
              v327 = v553;
              v557 = (char *)v553;
              do
              {
                if (*v552 == v552[1])
                {
                  v558 = v552;
                  if (v557 != (char *)__dst + 2 * HIDWORD(v576))
                  {
                    v564 = (char *)v553;
                    if (v552 == v327)
                    {
                      v558 = (unsigned __int8 *)v557;
                    }
                    else
                    {
                      v562 = v556 - v327;
                      v563 = v557;
                      memmove(v557, v327, v556 - v327);
                      v558 = (unsigned __int8 *)&v563[v562];
                    }
                    v553 = (unsigned __int8 *)v564;
                  }
                  v327 = v552 + 2;
                  v86 = (v86 + 1);
                  v557 = (char *)v558;
                }
                v552 += 2;
                v556 += 2;
              }
              while (v552 < v553);
              v552 = (unsigned __int8 *)__dst;
              v559 = HIDWORD(v576);
              v560 = HIDWORD(v576);
              v553 = (unsigned __int8 *)v557;
            }
            v561 = &v552[2 * v559];
            if (v327 != v561)
            {
              memmove(v553, v327, v561 - v327);
              v560 = HIDWORD(v576);
            }
            v334 = v560 - v86;
            a2 = v565;
            goto LABEL_72;
          }
        }
      }
    }
LABEL_139:
    __break(1u);
LABEL_140:
    v346 = j;
    v347 = v594;
    if ((_DWORD)v335 == 31)
LABEL_75:
      v349 = v336 | (32 * v338) | 0x91000000;
    else
      v349 = v335 & 0x1F | 0xD2800000;
LABEL_68:
    if (v346 + 4 > v347)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
      v346 = j;
    }
    *(_DWORD *)((char *)v592 + v346) = v349;
    j += 4;
    v337 = (char *)__dst;
    v338 = HIDWORD(v576);
LABEL_71:
    memmove(&v337[v86], &v337[v86 + 2], 2 * v338 - v86 - 2);
    v334 = HIDWORD(v576) - 1;
LABEL_72:
    HIDWORD(v576) = v334;
LABEL_73:
    ;
  }
  while (v334);
  v350 = __dst;
  if (&v577 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v576) = 0;
    WTF::fastFree((unint64_t)v350, v327, v328, v329, v330, v331, v332, v333);
  }
  for (i = j; (int)i < SHIDWORD(v591); j = i)
  {
    if (i + 4 > v594)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
      i = j;
    }
    *(_DWORD *)((char *)v592 + i) = -721215457;
    i = j + 4;
  }
  if (!v597)
  {
    __break(0xC471u);
    JUMPOUT(0x19854FAB0);
  }
  v601[52] &= ~v604;
  v352 = v602 & 0x1F;
  if (i + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
    i = j;
  }
  *(_DWORD *)((char *)v592 + i) = v352 | 0xD2800000;
  v353 = j;
  v354 = j + 4;
  j += 4;
  if (v353 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
    v354 = j;
  }
  *(_DWORD *)((char *)v592 + v354) = v352 | 0xF2A00000;
  v355 = j;
  v356 = j + 4;
  j += 4;
  if (v355 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
    v356 = j;
  }
  *(_DWORD *)((char *)v592 + v356) = v352 | 0xF2C00000;
  v357 = j;
  v358 = j + 4;
  j += 4;
  v596 = 0;
  if (v357 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
    v358 = j;
  }
  *(_DWORD *)((char *)v592 + v358) = -700513792;
  v359 = j + 4;
  for (j = v359; v359 < SHIDWORD(v591); j = v359)
  {
    if (v359 + 4 > v594)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, (uint64_t)v327, v328, v329, v330, v331, v332, v333);
      v359 = j;
    }
    *(_DWORD *)((char *)v592 + v359) = -721215457;
    v359 = j + 4;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v587, v85, 17, v329, v330, v331, v332, v333);
  v364 = 0;
  v365 = 0;
  v566 = v587;
  v567 = 17;
  v366 = 127;
  do
  {
    v367 = v364 | v365;
    v368 = v366 & 0x7F;
    if ((_DWORD)v368 == 127)
      goto LABEL_92;
    v369 = v366 >> 6;
    v370 = (v366 >> 6) & 0x3FFFFFFFFFFFFFCLL;
    if (v367 >> 6 == v370 + 8)
    {
      v371 = v365 & 0x7F;
    }
    else
    {
      if (v370 != (v367 >> 6) + 8)
      {
        JSC::MacroAssemblerARM64::load64((uint64_t)v587, (((v366 >> 8) & 0x1FFFFFFF) << 34) | 0x11, v368, v368, v360, v361, v362, v363);
LABEL_92:
        v366 = v364 | v365;
        goto LABEL_93;
      }
      v371 = v366 & 0x7F;
      v368 = v365 & 0x7F;
      v369 = v367 >> 6;
    }
    JSC::MacroAssemblerARM64::loadPair64(v587, 17, v369 & 0xFFFFFFFC, v368, v371, v361, v362, v363);
    v366 = 127;
LABEL_93:
    v568 = v366;
    ++v365;
    v364 += 512;
  }
  while (v365 != 16);
  v372 = v366 & 0x7F;
  if ((_DWORD)v372 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v587, ((unint64_t)(v366 >> 8) << 34) | 0x11, v372, v368, v360, v361, v362, v363);
    v568 = 127;
  }
  __dst = (void *)8224;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v372, v368, v360, v361, v362, v363);
  __dst = (void *)8737;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v373, v374, v375, v376, v377, v378);
  __dst = (void *)9250;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v379, v380, v381, v382, v383, v384);
  __dst = (void *)9763;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v385, v386, v387, v388, v389, v390);
  __dst = (void *)10276;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v391, v392, v393, v394, v395, v396);
  __dst = (void *)10789;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v397, v398, v399, v400, v401, v402);
  __dst = (void *)11302;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v403, v404, v405, v406, v407, v408);
  __dst = (void *)11815;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v409, v410, v411, v412, v413, v414);
  __dst = (void *)12336;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v415, v416, v417, v418, v419, v420);
  __dst = (void *)12849;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v421, v422, v423, v424, v425, v426);
  __dst = (void *)13362;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v427, v428, v429, v430, v431, v432);
  __dst = (void *)13875;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v433, v434, v435, v436, v437, v438);
  __dst = (void *)14388;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v439, v440, v441, v442, v443, v444);
  __dst = (void *)14901;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v445, v446, v447, v448, v449, v450);
  __dst = (void *)15414;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v451, v452, v453, v454, v455, v456);
  __dst = (void *)15927;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v457, v458, v459, v460, v461, v462);
  __dst = (void *)16440;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v463, v464, v465, v466, v467, v468);
  __dst = (void *)16953;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v469, v470, v471, v472, v473, v474);
  __dst = (void *)17466;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v475, v476, v477, v478, v479, v480);
  __dst = (void *)17979;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v481, v482, v483, v484, v485, v486);
  __dst = (void *)18492;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v487, v488, v489, v490, v491, v492);
  __dst = (void *)19005;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v493, v494, v495, v496, v497, v498);
  __dst = (void *)19518;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v566, (uint64_t *)&__dst, v499, v500, v501, v502, v503, v504);
  if ((v568 & 0x7F) != 0x7F)
  {
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v566, v567 | ((unint64_t)(v568 >> 8) << 34), (char)((v568 & 0x7F) - 32), v505, v506, v507, v508, v509);
    v568 = 127;
  }
  if (!v597)
  {
    __break(0xC471u);
    JUMPOUT(0x19854FB4CLL);
  }
  v601[52] &= ~v604;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v587, (uint64_t)this + 90544, v602, v505, v506, v507, v508, v509);
  v517 = j;
  if (j + 4 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v510, v511, v512, v513, v514, v515, v516);
    v517 = j;
  }
  *(_DWORD *)((char *)v592 + v517) = -130022896;
  v518 = j;
  v519 = j + 4;
  j += 4;
  if (v518 + 8 > v594)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v592, v510, v511, v512, v513, v514, v515, v516);
    v519 = j;
  }
  *(_DWORD *)((char *)v592 + v519) = -702610944;
  j += 4;
  __dst = 0;
  v576 = 0;
  v577 = -1;
  v578 = (WTF *)v579;
  v580 = 128;
  v520 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v520 != -1)
  {
    v574 = &v572;
    v573 = &v574;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v573, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v521 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v529 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v529)
  {
    v529 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v529, v521);
  }
  v530 = *(WTF **)v529;
  if (*(_QWORD *)v529 != v529 + 8)
  {
    v531 = *(_DWORD *)(v529 + 136);
    if (v580 < v531)
    {
      if (v578 && v578 != (WTF *)v579)
      {
        WTF::fastFree((unint64_t)v578, v522, v523, v524, v525, v526, v527, v528);
        v530 = *(WTF **)v529;
        v531 = *(_DWORD *)(v529 + 136);
      }
      v578 = v530;
      v580 = v531;
      *(_QWORD *)v529 = v529 + 8;
      *(_DWORD *)(v529 + 136) = 128;
    }
  }
  v532 = 1;
  v581 = 1;
  v582 = 0;
  v583 = 10;
  v584 = 0u;
  v585 = 0u;
  v586 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v587, 1, v524, v525, v526, v527, v528);
  if (v359 < 4)
    v533 = 0;
  else
    v533 = *(_DWORD *)((char *)v578 + (v359 & 0xFFFFFFFC) - 4);
  LODWORD(v574) = v359 - v533 - 16;
  JSC::ARM64Assembler::linkPointer(v584, (unsigned int *)&v574, (unint64_t)operationCompileOSRExit);
  BYTE2(v582) = 1;
  if (byte_1ECF4C288)
    goto LABEL_144;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v532 = HIBYTE(word_1ECF4C286) != 0;
LABEL_144:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v532, 0, 0, "DFG OSR exit generation thunk", a2);
    goto LABEL_122;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, 0, 0, a2);
LABEL_122:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v534, v535, v536, v537, v538, v539, v540);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v587, v541, v542, v543, v544, v545, v546, v547);
}

uint64_t JSC::DFG::osrEntryThunkGenerator@<X0>(JSC::DFG *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  pthread_key_t *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unsigned int v97;
  char v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v114[4];
  unsigned int v115;
  char v116;
  char **v117;
  char *v118;
  _QWORD v119[3];
  WTF *v120;
  _BYTE v121[128];
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  WTF *v133;
  _BYTE v134[128];
  unsigned int v135;
  int i;
  int v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  char v143;
  uint64_t v144;
  int v145;
  char *v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v129[0] = 0;
  v129[24] = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0x8000000080000000;
  v133 = (WTF *)v134;
  v135 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v119[0] = &v118;
    *(_QWORD *)v114 = v119;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  v16 = v135;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v135 < v17)
    {
      if (v133 && v133 != (WTF *)v134)
      {
        WTF::fastFree((unint64_t)v133, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v133 = v15;
      v135 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v135;
    }
  }
  v18 = 0;
  v138 = 1;
  i = 0;
  v137 = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v143 = 16;
  v145 = 0x10000;
  v142 = v129;
  v144 = 0;
  v146 = v129;
  v147 = 17;
  v148 = 0;
  v149 = 0x20000;
  v150 = 0;
  v152 = 0;
  v151 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = i;
  }
  *(_DWORD *)((char *)v133 + v18) = -1442774048;
  v19 = i;
  v20 = i + 4;
  i += 4;
  if (v19 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = i;
  }
  *(_DWORD *)((char *)v133 + v20) = -130023423;
  v21 = i;
  v22 = i + 4;
  i += 4;
  if (v21 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = i;
  }
  *(_DWORD *)((char *)v133 + v22) = -889125918;
  v23 = i;
  v24 = i + 4;
  i += 4;
  if (v23 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = i;
  }
  *(_DWORD *)((char *)v133 + v24) = -1960677441;
  v25 = i + 4;
  for (i = v25; v25 < SHIDWORD(v132); i = v25)
  {
    if (v25 + 4 > v135)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
      v25 = i;
    }
    *(_DWORD *)((char *)v133 + v25) = -721215457;
    v25 = i + 4;
  }
  v137 = 0;
  v26 = v25;
  if (v25 + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = i;
  }
  *(_DWORD *)((char *)v133 + v26) = -788528095;
  v27 = i;
  v28 = i + 4;
  i += 4;
  if (v27 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v28 = i;
  }
  *(_DWORD *)((char *)v133 + v28) = -889125916;
  i += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v129, 0x300000100uLL, 0x200000038uLL, 2, v10, v11, v12, v13);
  JSC::MacroAssemblerARM64::store64((uint64_t)v129, 2, 0x30000041DuLL, 0x2FFFFFFF8uLL, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v129, 1, 1, -5, v33, v34, v35, v36, (uint64_t)v119);
  v115 = v25;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v119, &v115, (uint64_t)v129, v37, v38, v39, v40, v41);
  v49 = i;
  if (i + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v42, v43, v44, v45, v46, v47, v48);
    v49 = i;
  }
  *(_DWORD *)((char *)v133 + v49) = -129990655;
  i += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v129, 8, 1, 1000, v45, v46, v47, v48, (uint64_t)v114);
  v57 = i;
  if (i + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v50, v51, v52, v53, v54, v55, v56);
    v57 = i;
  }
  *(_DWORD *)((char *)v133 + v57) = 1384127696;
  v58 = i;
  v59 = i + 4;
  i += 4;
  if (v58 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v50, v51, v52, v53, v54, v55, v56);
    v59 = i;
  }
  *(_DWORD *)((char *)v133 + v59) = -734491104;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v114, (uint64_t)v129, v51, v52, v53, v54, v55, v56);
  JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer(v129, (uint64_t)this + 48, v60, v61, v62, v63, v64, v65);
  v73 = i;
  if (i + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v66, v67, v68, v69, v70, v71, v72);
    v73 = i;
  }
  *(_DWORD *)((char *)v133 + v73) = -1303430149;
  i += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)v129, 2, 27, 28);
  v81 = i;
  if (i + 4 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v74, v75, v76, v77, v78, v79, v80);
    v81 = i;
  }
  *(_DWORD *)((char *)v133 + v81) = -129956934;
  v82 = i;
  v83 = i + 4;
  i += 4;
  if (v82 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v74, v75, v76, v77, v78, v79, v80);
    v83 = i;
  }
  *(_DWORD *)((char *)v133 + v83) = -129498278;
  v84 = i;
  v85 = i + 4;
  i += 4;
  if (v84 + 8 > v135)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v133, v74, v75, v76, v77, v78, v79, v80);
    v85 = i;
  }
  *(_DWORD *)((char *)v133 + v85) = -702611424;
  i += 4;
  v119[0] = 0;
  v119[1] = 0;
  v119[2] = -1;
  v120 = (WTF *)v121;
  v122 = 128;
  v86 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v86 != -1)
  {
    v118 = &v116;
    v117 = &v118;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v87 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v95 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v95)
  {
    v95 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v95, v87);
  }
  v96 = *(WTF **)v95;
  if (*(_QWORD *)v95 != v95 + 8)
  {
    v97 = *(_DWORD *)(v95 + 136);
    if (v122 < v97)
    {
      if (v120 && v120 != (WTF *)v121)
      {
        WTF::fastFree((unint64_t)v120, v88, v89, v90, v91, v92, v93, v94);
        v96 = *(WTF **)v95;
        v97 = *(_DWORD *)(v95 + 136);
      }
      v120 = v96;
      v122 = v97;
      *(_QWORD *)v95 = v95 + 8;
      *(_DWORD *)(v95 + 136) = 128;
    }
  }
  v98 = 1;
  v123 = 1;
  v124 = 0;
  v125 = 3;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v119, (uint64_t)v129, 1, v90, v91, v92, v93, v94);
  BYTE2(v124) = 1;
  if (byte_1ECF4C288)
    goto LABEL_53;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v98 = HIBYTE(word_1ECF4C286) != 0;
LABEL_53:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v119, v98, 0, 0, "DFG OSR entry thunk", a2);
    goto LABEL_51;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v119, 0, 0, a2);
LABEL_51:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v119, v99, v100, v101, v102, v103, v104, v105);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v106, v107, v108, v109, v110, v111, v112);
}

uint64_t JSC::DFG::performTierUpCheckInjection(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::DFG::Graph *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG::Graph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t **v19;
  unint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  unsigned __int16 v68;
  WTF **v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  WTF *v77;
  uint64_t v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  const void *v101;
  void *v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  WTF *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  int *v124;
  int v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  unsigned int v140;
  int *v141;
  int *v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  int v158;
  _DWORD *v159;
  WTF *v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  int v174;
  int v175;
  int v176;
  unsigned int v178;
  unsigned int v179;
  _DWORD *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  BOOL v209;
  uint64_t v210;
  __int16 v211;
  __int16 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int16 v238;
  __int16 v239;
  __int16 v240;
  __int16 v241;
  uint64_t v242;
  int canCompile;
  uint64_t v244;
  int v245;
  uint64_t v246;
  __int16 v247;
  JSC::DFG::Graph *v248;
  __int128 v249;
  char v250;
  WTF *v251;
  _QWORD v252[2];
  __int128 v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  __int16 v257;
  WTF *v258;
  uint64_t v259;
  char v260;
  int v261;
  WTF **v262;
  uint64_t v263;
  __int16 v264;
  WTF *v265[2];
  uint64_t v266;
  _BYTE v267[128];
  uint64_t v268;
  uint64_t v269[2];

  v244 = -1;
  v245 = -1;
  v246 = 0;
  v247 = 256;
  v248 = this;
  *(_QWORD *)&v249 = "tier-up check injection";
  *((_QWORD *)&v249 + 1) = 24;
  v250 = 0;
  v251 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v244);
  v252[0] = "DFG";
  v252[1] = 4;
  v253 = v249;
  v254 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v183 = mach_absolute_time();
    v185 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v185 != -1)
    {
      v265[0] = (WTF *)&v258;
      v262 = v265;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v262, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v184) = dword_1ECF4400C;
    v254 = (double)(v183 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v184 * 1000000000.0);
  }
  if ((*(_DWORD *)(*((_QWORD *)v248 + 3) + 16) & 0xFFFFFFFE) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x198551274);
  }
  if (!HIBYTE(qword_1ECF4C414))
    goto LABEL_409;
  v2 = *((_QWORD *)v248 + 5);
  if ((*(_BYTE *)(v2 + 18) & 8) != 0)
    goto LABEL_409;
  if (dword_1ECF4C2E0 >= 2)
  {
    v227 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 80) + 12);
    if (qword_1ECF4C2F0 > v227 || HIDWORD(qword_1ECF4C2F0) < v227)
    {
      if (dword_1ECF4C2E0 != 2)
        goto LABEL_6;
    }
    else if (dword_1ECF4C2E0 == 2)
    {
      goto LABEL_6;
    }
LABEL_409:
    v82 = 0;
    goto LABEL_130;
  }
LABEL_6:
  v3 = atomic_load(&_MergedGlobals_33);
  if (v3 != -1)
  {
    v265[0] = (WTF *)v269;
    v258 = (WTF *)v265;
    std::__call_once(&_MergedGlobals_33, &v258, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::ensureGlobalFTLAllowlist(void)::$_0 &&>>);
  }
  if (!JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58690, *((JSC::CodeBlock **)v248 + 5)))goto LABEL_409;
  canCompile = JSC::FTL::canCompile((uint64_t)v248, v4);
  if (!canCompile)
    goto LABEL_409;
  if (!BYTE6(qword_1ECF4C414))
    canCompile = 1;
  JSC::DFG::Graph::ensureCPSNaturalLoops(v248);
  v12 = v248;
  v13 = *((_QWORD *)v248 + 99);
  v269[0] = 0;
  v14 = *((unsigned int *)v248 + 15);
  if (!(_DWORD)v14)
  {
    v268 = 0;
    v265[0] = v248;
    v265[1] = (WTF *)v267;
    v266 = 8;
    goto LABEL_112;
  }
  for (i = 0; i != v14; ++i)
  {
    if (*(_QWORD *)(*((_QWORD *)v248 + 6) + 8 * i))
    {
      if ((_DWORD)v14 == (_DWORD)i)
        break;
      v16 = *((_DWORD *)v248 + 15);
      while (1)
      {
        if (v16 <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x1985517CCLL);
        }
        v17 = *(_QWORD *)(*((_QWORD *)v12 + 6) + 8 * i);
        v18 = *(unsigned int *)(v17 + 220);
        if (!(_DWORD)v18)
          goto LABEL_24;
        v19 = *(unint64_t ***)(v17 + 208);
        while (1)
        {
          v20 = *v19;
          if (*((_WORD *)*v19 + 9) == 31)
            break;
          ++v19;
          if (!--v18)
            goto LABEL_24;
        }
        v21 = *(unsigned int *)(v17 + 8);
        if (*(_DWORD *)(v13 + 484) <= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1985517E4);
        }
        v22 = *(_DWORD *)(*(_QWORD *)(v13 + 472) + 8 * v21);
        if (v22 == -1)
          goto LABEL_24;
        if (*(_DWORD *)(v13 + 20) <= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1985517ECLL);
        }
        v23 = *(_QWORD *)(v13 + 8);
        if (!v23)
          goto LABEL_24;
        v24 = *v20;
        if ((*v20 & 2) != 0)
        {
          LODWORD(v25) = -1;
        }
        else if ((v24 & 1) != 0)
        {
          LODWORD(v25) = *(_DWORD *)((v24 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v25 = v24 >> 36;
        }
        v26 = v269[0];
        if (v269[0]
          || (WTF::HashTable<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>>,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashMap<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>>::rehash(v269, 8u), (v26 = v269[0]) != 0))
        {
          v27 = *(_DWORD *)(v26 - 8);
        }
        else
        {
          v27 = 0;
        }
        v28 = v23 + 112 * v22;
        v29 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
        v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
        v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
        v32 = v27 & ((v31 >> 31) ^ v31);
        v33 = (uint64_t *)(v26 + 16 * v32);
        v34 = *v33;
        if (*v33)
        {
          v6 = 0;
          v175 = 1;
          while (v34 != v28)
          {
            if (v34 == -1)
              v6 = (uint64_t)v33;
            v32 = (v32 + v175) & v27;
            v33 = (uint64_t *)(v26 + 16 * v32);
            v34 = *v33;
            ++v175;
            if (!*v33)
            {
              if (!v6)
                goto LABEL_41;
              *(_DWORD *)(v6 + 8) = -1;
              --*(_DWORD *)(v26 - 16);
              *(_QWORD *)v6 = v28;
              goto LABEL_42;
            }
          }
          goto LABEL_44;
        }
LABEL_41:
        *v33 = v28;
        v6 = (uint64_t)v33;
LABEL_42:
        *(_DWORD *)(v6 + 8) = v25;
        v35 = *(_DWORD *)(v26 - 16);
        v36 = *(_DWORD *)(v26 - 12) + 1;
        *(_DWORD *)(v26 - 12) = v36;
        v37 = (v35 + v36);
        v38 = *(unsigned int *)(v26 - 4);
        if (v38 > 0x400)
        {
          if (v38 <= 2 * v37)
            goto LABEL_258;
        }
        else if (3 * v38 <= 4 * v37)
        {
          if ((_DWORD)v38)
LABEL_258:
            v178 = (_DWORD)v38 << (6 * v36 >= (2 * v38));
          else
            v178 = 8;
          WTF::HashTable<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>>,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashMap<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>>::rehash(v269, v178);
        }
LABEL_44:
        v16 = *((_DWORD *)v12 + 15);
LABEL_24:
        i = (i + 1);
        if (v16 > i)
        {
          while (!*(_QWORD *)(*((_QWORD *)v12 + 6) + 8 * i))
          {
            if (v16 == ++i)
            {
              LODWORD(i) = v16;
              break;
            }
          }
        }
        if ((_DWORD)v14 == (_DWORD)i)
        {
          v12 = v248;
          LODWORD(v14) = *((_DWORD *)v248 + 15);
          goto LABEL_45;
        }
      }
    }
  }
LABEL_45:
  v242 = v13;
  v268 = 0;
  v265[0] = v12;
  v265[1] = (WTF *)v267;
  v266 = 8;
  if (!(_DWORD)v14)
    goto LABEL_112;
  v39 = v14;
  while (2)
  {
    if (*((_DWORD *)v248 + 15) <= --v39)
    {
      __break(0xC471u);
      JUMPOUT(0x1985517C4);
    }
    v40 = *(_QWORD *)(*((_QWORD *)v248 + 6) + 8 * v39);
    if (v40)
    {
      v41 = *(unsigned int *)(v40 + 220);
      if (!(_DWORD)v41)
        goto LABEL_53;
      v42 = 0;
      v43 = -1;
      while (1)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v42);
        if (*(_WORD *)(v44 + 18) == 31)
          break;
        ++v42;
        ++v43;
        if (v41 == v42)
          goto LABEL_53;
      }
      v60 = *(_QWORD *)v44;
      if ((*(_QWORD *)v44 & 1) != 0)
      {
        v195 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
        if ((v60 & 2) != 0
          || ((v196 = *(unsigned int *)((v60 & 0xFFFFFFFF8) + 8), (_DWORD)v196 != 0x3FFFFFFF)
            ? (v197 = (_DWORD)v196 == -1)
            : (v197 = 1),
              v197))
        {
          v198 = 2;
        }
        else if (v196 >> 28)
        {
          v230 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v230 = v195;
          *(_DWORD *)(v230 + 8) = v196;
          v198 = 1;
          v195 = v230;
        }
        else
        {
          v198 = v195;
          v195 = v196 << 36;
        }
        v60 = v195 | v198;
      }
      v61 = *(_QWORD *)(v44 + 8);
      if ((v61 & 1) != 0)
      {
        v199 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        if ((v61 & 2) != 0
          || ((v200 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v200 != 0x3FFFFFFF)
            ? (v201 = (_DWORD)v200 == -1)
            : (v201 = 1),
              v201))
        {
          v202 = 2;
        }
        else if (v200 >> 28)
        {
          v231 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v231 = v199;
          *(_DWORD *)(v231 + 8) = v200;
          v202 = 1;
          v199 = v231;
        }
        else
        {
          v202 = v199;
          v199 = v200 << 36;
        }
        v61 = v199 | v202;
      }
      if (*(_DWORD *)(v40 + 220) <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1985517FCLL);
      }
      v62 = *(_WORD *)(v44 + 16);
      v63 = *(uint64_t **)(*(_QWORD *)(v40 + 208) + 8 * v42);
      v64 = *v63;
      if ((*v63 & 1) != 0)
      {
        v203 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
        if ((v64 & 2) != 0
          || ((v204 = *(_DWORD *)((v64 & 0xFFFFFFFF8) + 8), v204 != 0x3FFFFFFF) ? (v205 = v204 == -1) : (v205 = 1),
              v205))
        {
          v206 = 2;
        }
        else
        {
          v234 = v203;
          v238 = v62;
          if (v204 >> 28)
          {
            v203 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v203 = v234;
            *(_DWORD *)(v203 + 8) = v204;
            v206 = 1;
          }
          else
          {
            v206 = v203;
            v203 = 0;
          }
          v62 = v238;
        }
        v64 = v203 | v206;
      }
      v65 = v63[1];
      if ((v65 & 1) != 0)
      {
        v207 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
        if ((v65 & 2) != 0
          || ((v208 = *(_DWORD *)((v65 & 0xFFFFFFFF8) + 8), v208 != 0x3FFFFFFF) ? (v209 = v208 == -1) : (v209 = 1),
              v209))
        {
          v210 = 2;
        }
        else
        {
          v235 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
          v239 = v62;
          if (v208 >> 28)
          {
            v207 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v207 = v235;
            *(_DWORD *)(v207 + 8) = v208;
            v210 = 1;
          }
          else
          {
            v210 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
            v207 = 0;
          }
          v62 = v239;
        }
        v65 = v207 | v210;
      }
      if (canCompile == 2)
      {
        v66 = (_QWORD *)(v64 & 0xFFFFFFFF8);
        if ((v64 & 1) != 0)
          v66 = (_QWORD *)*v66;
        if (!v66)
        {
          if (!(_DWORD)v42)
          {
            v67 = 1;
LABEL_89:
            if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
            {
              v211 = v62;
              WTF::fastFree(v65 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
              v62 = v211;
            }
            if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
            {
              v212 = v62;
              WTF::fastFree(v64 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
              v62 = v212;
            }
            if (v67)
              v68 = 36;
            else
              v68 = 35;
            v69 = (WTF **)v60;
            if ((v60 & 1) != 0)
            {
              v213 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
              if ((v60 & 2) != 0
                || (v214 = *(unsigned int *)((v60 & 0xFFFFFFFF8) + 8), (_DWORD)v214 == 0x3FFFFFFF)
                || (_DWORD)v214 == -1)
              {
                v215 = 2;
              }
              else
              {
                v236 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
                v240 = v62;
                if (v214 >> 28)
                {
                  v232 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v232 = v236;
                  *(_DWORD *)(v232 + 8) = v214;
                  v215 = 1;
                  v213 = v232;
                }
                else
                {
                  v215 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
                  v213 = v214 << 36;
                }
                v62 = v240;
              }
              v69 = (WTF **)(v213 | v215);
            }
            v262 = v69;
            v70 = v61;
            if ((v61 & 1) != 0)
            {
              v216 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
              if ((v61 & 2) != 0
                || (v217 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v217 == 0x3FFFFFFF)
                || (_DWORD)v217 == -1)
              {
                v218 = 2;
              }
              else
              {
                v237 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
                v241 = v62;
                if (v217 >> 28)
                {
                  v233 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v233 = v237;
                  *(_DWORD *)(v233 + 8) = v217;
                  v218 = 1;
                  v216 = v233;
                }
                else
                {
                  v218 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
                  v216 = v217 << 36;
                }
                v62 = v241;
              }
              v70 = v216 | v218;
            }
            v263 = v70;
            v264 = v62;
            JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v265, v42 + 1, 0, v68, (uint64_t)&v262, v9, v10, v11);
            if ((v263 & 1) != 0 && (v263 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v263 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
            if ((v262 & 1) != 0 && ((unint64_t)v262 & 0xFFFFFFFF8) != 0)
              WTF::fastFree((unint64_t)v262 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
            if ((v60 & 2) != 0)
            {
              LODWORD(v71) = -1;
            }
            else if ((v60 & 1) != 0)
            {
              LODWORD(v71) = *(_DWORD *)((v60 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v71 = v60 >> 36;
            }
            v261 = v71;
            if (v67)
            {
              v72 = *((_QWORD *)v248 + 3);
              v73 = (_QWORD *)(v72 + 360);
              v74 = *(unsigned int *)(v72 + 372);
              if ((_DWORD)v74 == *(_DWORD *)(v72 + 368))
                *(_DWORD *)(*(_QWORD *)(v72 + 360) + 4 * *(unsigned int *)(v72 + 372)) = *(_DWORD *)WTF::Vector<JSC::BytecodeIndex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)&v261);
              else
                *(_DWORD *)(*v73 + 4 * v74) = v71;
              ++*(_DWORD *)(v72 + 372);
            }
            v75 = *(unsigned int *)(v40 + 8);
            if (*(_DWORD *)(v242 + 484) <= v75)
            {
              __break(0xC471u);
              JUMPOUT(0x198551804);
            }
            v76 = *(_DWORD *)(*(_QWORD *)(v242 + 472) + 8 * v75);
            if (v76 != -1)
            {
              if (*(_DWORD *)(v242 + 20) <= v76)
              {
                __break(0xC471u);
                JUMPOUT(0x198551814);
              }
              v104 = *(_QWORD *)(v242 + 8);
              if (v104)
              {
                v258 = 0;
                v259 = 0;
                v260 = v67;
                v105 = *(unsigned int *)(v104 + 112 * v76 + 104);
                if ((_DWORD)v105 != -1)
                {
                  v163 = 0;
                  v164 = 0;
                  do
                  {
                    if (*(unsigned int *)(v242 + 20) <= v105)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19855181CLL);
                    }
                    v165 = *(_QWORD *)(v242 + 8);
                    if (!v165)
                      break;
                    if (v269[0])
                    {
                      v166 = v165 + 112 * v105;
                      v167 = *(_DWORD *)(v269[0] - 8);
                      v168 = (~(v166 << 32) + v166) ^ ((unint64_t)(~(v166 << 32) + v166) >> 22);
                      v169 = 9 * ((v168 + ~(v168 << 13)) ^ ((v168 + ~(v168 << 13)) >> 8));
                      v170 = (v169 ^ (v169 >> 15)) + ~((v169 ^ (v169 >> 15)) << 27);
                      v171 = v167 & ((v170 >> 31) ^ v170);
                      v172 = *(_QWORD *)(v269[0] + 16 * v171);
                      if (v172 != v166)
                      {
                        v186 = 1;
                        while (v172)
                        {
                          v171 = ((_DWORD)v171 + v186) & v167;
                          v172 = *(_QWORD *)(v269[0] + 16 * v171);
                          ++v186;
                          if (v172 == v166)
                            goto LABEL_230;
                        }
                        v171 = *(unsigned int *)(v269[0] - 4);
                      }
LABEL_230:
                      if (v171 != *(_DWORD *)(v269[0] - 4))
                      {
                        v6 = v269[0] + 16 * v171 + 8;
                        if (v164 == (_DWORD)v259)
                        {
                          v6 = WTF::Vector<JSC::BytecodeIndex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v258, v164 + 1, v6);
                          v163 = v258;
                          v173 = (_DWORD *)((char *)v258 + 4 * HIDWORD(v259));
                        }
                        else
                        {
                          v173 = (_DWORD *)((char *)v163 + 4 * v164);
                        }
                        *v173 = *(_DWORD *)v6;
                        v164 = ++HIDWORD(v259);
                      }
                    }
                    v105 = *(unsigned int *)(v165 + 112 * v105 + 104);
                  }
                  while ((_DWORD)v105 != -1);
                }
                v106 = v268;
                if (v268
                  || (WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(&v268, 8u), (v106 = v268) != 0))
                {
                  v107 = *(_DWORD *)(v106 - 8);
                }
                else
                {
                  v107 = 0;
                }
                v108 = 9 * ((v261 + ~(v261 << 15)) ^ ((v261 + ~(v261 << 15)) >> 10));
                v109 = (v108 ^ (v108 >> 6)) + ~((v108 ^ (v108 >> 6)) << 11);
                v110 = (v109 ^ HIWORD(v109)) & v107;
                v111 = v106 + 32 * v110;
                v112 = *(_DWORD *)v111;
                if (*(_DWORD *)v111 == -1)
                {
LABEL_174:
                  v113 = *(_QWORD *)(v111 + 8);
                  *(_DWORD *)v111 = v261;
                  if (v113)
                  {
                    *(_QWORD *)(v111 + 8) = 0;
                    *(_DWORD *)(v111 + 16) = 0;
                    WTF::fastFree(v113, v5, v6, v7, v8, v9, v10, v11);
                  }
                  v6 = v111;
LABEL_177:
                  *(_QWORD *)(v6 + 8) = v258;
                  v114 = v259;
                  v258 = 0;
                  v259 = 0;
                  *(_QWORD *)(v6 + 16) = v114;
                  *(_BYTE *)(v6 + 24) = v260;
                  v115 = v268;
                  if (v268)
                    v116 = *(_DWORD *)(v268 - 12) + 1;
                  else
                    v116 = 1;
                  *(_DWORD *)(v268 - 12) = v116;
                  v117 = (*(_DWORD *)(v115 - 16) + v116);
                  v118 = *(unsigned int *)(v115 - 4);
                  if (v118 > 0x400)
                  {
                    if (v118 > 2 * v117)
                      goto LABEL_181;
                  }
                  else
                  {
                    if (3 * v118 > 4 * v117)
                      goto LABEL_181;
                    if (!(_DWORD)v118)
                    {
                      v179 = 8;
                      goto LABEL_304;
                    }
                  }
                  v179 = (_DWORD)v118 << (6 * v116 >= (2 * v118));
LABEL_304:
                  WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(&v268, v179);
                  goto LABEL_181;
                }
                v6 = 0;
                v174 = 1;
                while (v112 != v261)
                {
                  if (v112 == -2)
                    v6 = v111;
                  v110 = ((_DWORD)v110 + v174) & v107;
                  v111 = v106 + 32 * v110;
                  v112 = *(_DWORD *)v111;
                  ++v174;
                  if (*(_DWORD *)v111 == -1)
                  {
                    if (!v6)
                      goto LABEL_174;
                    *(_DWORD *)v6 = -1;
                    *(_QWORD *)(v6 + 16) = 0;
                    *(_QWORD *)(v6 + 24) = 0;
                    *(_QWORD *)(v6 + 8) = 0;
                    --*(_DWORD *)(v268 - 16);
                    *(_DWORD *)v6 = v261;
                    goto LABEL_177;
                  }
                }
LABEL_181:
                v119 = v258;
                if (v258)
                {
                  v258 = 0;
                  LODWORD(v259) = 0;
                  WTF::fastFree((unint64_t)v119, v5, v6, v7, v8, v9, v10, v11);
                }
              }
            }
            if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v61 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
            if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v60 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
LABEL_53:
            v45 = *(unsigned int *)(v40 + 220);
            v46 = v45 - 1;
            do
            {
              if (v46 >= v45)
              {
                __break(0xC471u);
                JUMPOUT(0x1985517D4);
              }
              v47 = *(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v46);
              v48 = *(unsigned __int16 *)(v47 + 18);
              --v46;
            }
            while ((v48 - 364) > 0xB);
            if ((v48 - 364) < 2)
            {
LABEL_57:
              v49 = HIDWORD(v266);
              if (HIDWORD(v266))
              {
                v52 = *(unsigned int *)(v40 + 216);
                v53 = *(unsigned int *)(v40 + 220);
                v54 = v53 + HIDWORD(v266);
                if (v54 > v52)
                {
                  v98 = v52 + (v52 >> 2);
                  if (v98 >= 0x10)
                    v99 = v98 + 1;
                  else
                    v99 = 16;
                  if (v99 <= v54)
                    v100 = v53 + HIDWORD(v266);
                  else
                    v100 = v99;
                  v101 = *(const void **)(v40 + 208);
                  if (v100 < 9)
                  {
                    v102 = (void *)(v40 + 224);
                    *(_QWORD *)(v40 + 208) = v40 + 224;
                    *(_DWORD *)(v40 + 216) = 8;
                  }
                  else
                  {
                    if (v100 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19855180CLL);
                    }
                    v102 = (void *)WTF::fastMalloc((WTF *)(8 * v100));
                    *(_DWORD *)(v40 + 216) = v100;
                    *(_QWORD *)(v40 + 208) = v102;
                  }
                  memcpy(v102, v101, 8 * v53);
                  if ((const void *)(v40 + 224) != v101 && v101)
                  {
                    if (*(const void **)(v40 + 208) == v101)
                    {
                      *(_QWORD *)(v40 + 208) = 0;
                      *(_DWORD *)(v40 + 216) = 0;
                    }
                    WTF::fastFree((unint64_t)v101, v5, v6, v7, v8, v9, v10, v11);
                  }
                }
                *(_DWORD *)(v40 + 220) = v54;
                if (v49 - 1 >= (unint64_t)HIDWORD(v266))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985517F4);
                }
                v55 = ~v49;
                v56 = v54;
                do
                {
                  --v49;
                  v57 = *((_QWORD *)v265[1] + 2 * v49) + v49;
                  v58 = v56 - 1;
                  if (v56 - 1 > v57)
                  {
                    v59 = v56 + v55;
                    do
                    {
                      if (v54 <= v59)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1985517B4);
                      }
                      if (v54 <= v58)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1985517BCLL);
                      }
                      *(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v58--) = *(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v59--);
                    }
                    while (v58 > v57);
                  }
                  if (v54 <= v57)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985517DCLL);
                  }
                  *(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v57) = *((_QWORD *)v265[1] + 2 * v49 + 1);
                  ++v55;
                  v56 = v57;
                }
                while (v49);
                HIDWORD(v266) = 0;
              }
              goto LABEL_58;
            }
            if (v48 == 366)
            {
              v103 = *(_DWORD *)(*(_QWORD *)(v47 + 72) + 12) + 1;
            }
            else
            {
              if (v48 != 367)
              {
LABEL_62:
                v50 = *(_QWORD *)v47;
                if ((*(_QWORD *)v47 & 1) != 0)
                {
                  v187 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
                  if ((v50 & 2) != 0
                    || ((v188 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v188 != 0x3FFFFFFF)
                      ? (v189 = (_DWORD)v188 == -1)
                      : (v189 = 1),
                        v189))
                  {
                    v190 = 2;
                  }
                  else if (v188 >> 28)
                  {
                    v228 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v228 = v187;
                    *(_DWORD *)(v228 + 8) = v188;
                    v190 = 1;
                    v187 = v228;
                  }
                  else
                  {
                    v190 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
                    v187 = v188 << 36;
                  }
                  v50 = v187 | v190;
                }
                v255 = v50;
                v51 = *(_QWORD *)(v47 + 8);
                if ((v51 & 1) != 0)
                {
                  v191 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
                  if ((v51 & 2) != 0
                    || ((v192 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v192 != 0x3FFFFFFF)
                      ? (v193 = (_DWORD)v192 == -1)
                      : (v193 = 1),
                        v193))
                  {
                    v194 = 2;
                  }
                  else if (v192 >> 28)
                  {
                    v229 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v229 = v191;
                    *(_DWORD *)(v229 + 8) = v192;
                    v194 = 1;
                    v191 = v229;
                  }
                  else
                  {
                    v194 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
                    v191 = v192 << 36;
                  }
                  v51 = v191 | v194;
                }
                v256 = v51;
                v257 = *(_WORD *)(v47 + 16);
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v265, (v46 + 1), 0, 37, (uint64_t)&v255, v9, v10, v11);
                if ((v256 & 1) != 0 && (v256 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v256 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
                if ((v255 & 1) != 0 && (v255 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v255 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
                goto LABEL_57;
              }
              v103 = *(_DWORD *)(*(_QWORD *)(v47 + 72) + 12);
            }
            if (v103)
              goto LABEL_57;
            goto LABEL_62;
          }
          if ((v42 - 1) >= *(_DWORD *)(v40 + 220))
          {
            __break(0xC471u);
            JUMPOUT(0x198551824);
          }
          while (1)
          {
            v176 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v40 + 208) + 8 * v43) + 18);
            if (v176 != 40 && v176 != 376)
              break;
            v67 = 1;
            if (!(unint64_t)v43--)
              goto LABEL_89;
          }
        }
      }
      v67 = 0;
      goto LABEL_89;
    }
LABEL_58:
    if (v39)
      continue;
    break;
  }
  if (v268 && *(_DWORD *)(v268 - 12))
  {
    v92 = *(unsigned int *)(v268 - 4);
    if ((_DWORD)v92)
    {
      v93 = 32 * v92;
      v94 = v268;
      while (*(_DWORD *)v94 >= 0xFFFFFFFE)
      {
        v94 += 32;
        v93 -= 32;
        if (!v93)
          goto LABEL_112;
      }
    }
    else
    {
      v94 = v268;
    }
    v120 = v268 + 32 * v92;
    if (v120 != v94)
    {
      v121 = *(_DWORD *)v94;
LABEL_186:
      v122 = *(unsigned int *)(v94 + 20);
      if (!(_DWORD)v122)
        goto LABEL_187;
      if (v122 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19855182CLL);
      }
      v128 = WTF::fastMalloc((WTF *)(4 * v122));
      v136 = v128;
      v137 = *(unsigned int *)(v94 + 20);
      if ((_DWORD)v137)
      {
        v124 = *(int **)(v94 + 8);
        v127 = 4 * v137;
        v126 = (_DWORD *)v128;
        do
        {
          v125 = *v124++;
          *v126++ = v125;
          v127 -= 4;
        }
        while (v127);
      }
      v258 = 0;
      v259 = 0;
      v138 = v268;
      if (!v268)
      {
LABEL_198:
        WTF::fastFree(v136, v129, v130, v131, v132, v133, v134, v135);
LABEL_187:
        while (1)
        {
          v94 += 32;
          if (v94 == v120)
            goto LABEL_112;
          v121 = *(_DWORD *)v94;
          if (*(_DWORD *)v94 < 0xFFFFFFFE)
          {
            if (v94 == v120)
              goto LABEL_112;
            goto LABEL_186;
          }
        }
      }
      v139 = 0;
      v140 = 0;
      v141 = (int *)v136;
      v142 = (int *)(v136 + 4 * v122);
      while (1)
      {
        v143 = *v141;
        v261 = *v141;
        if (v138)
        {
          v144 = *(_DWORD *)(v138 - 8);
          v145 = 9 * ((v143 + ~(v143 << 15)) ^ ((v143 + ~(v143 << 15)) >> 10));
          v146 = (v145 ^ (v145 >> 6)) + ~((v145 ^ (v145 >> 6)) << 11);
          v147 = v144 & (v146 ^ HIWORD(v146));
          v148 = *(_DWORD *)(v138 + 32 * v147);
          if (v148 != v143)
          {
            v149 = 1;
            while (v148 != -1)
            {
              v147 = ((_DWORD)v147 + v149) & v144;
              v148 = *(_DWORD *)(v138 + 32 * v147);
              ++v149;
              if (v148 == v143)
                goto LABEL_203;
            }
            v147 = *(unsigned int *)(v138 - 4);
          }
LABEL_203:
          if (v147 != *(_DWORD *)(v138 - 4) && *(_BYTE *)(v138 + 32 * v147 + 24))
          {
            if (v140 == (_DWORD)v259)
            {
              v180 = (_DWORD *)WTF::Vector<JSC::BytecodeIndex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v258, v140 + 1, (unint64_t)&v261);
              v139 = v258;
              *((_DWORD *)v258 + HIDWORD(v259)) = *v180;
            }
            else
            {
              *((_DWORD *)v139 + v140) = v143;
            }
            v140 = ++HIDWORD(v259);
          }
        }
        if (++v141 == v142)
          break;
        v138 = v268;
      }
      if (!v140)
        goto LABEL_391;
      v150 = (uint64_t *)(*((_QWORD *)v248 + 3) + 352);
      v151 = *v150;
      if (*v150
        || (WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<WTF::FixedVector<JSC::BytecodeIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash((uint64_t *)(*((_QWORD *)v248 + 3) + 352), 8u), (v151 = *v150) != 0))
      {
        v152 = *(_DWORD *)(v151 - 8);
      }
      else
      {
        v152 = 0;
      }
      v153 = 9 * ((v121 + ~(v121 << 15)) ^ ((v121 + ~(v121 << 15)) >> 10));
      v154 = (v153 ^ (v153 >> 6)) + ~((v153 ^ (v153 >> 6)) << 11);
      v155 = v152 & (v154 ^ HIWORD(v154));
      v156 = v151 + 16 * v155;
      v157 = *(_DWORD *)v156;
      if (*(_DWORD *)v156 != -1)
      {
        v181 = 0;
        v182 = 1;
        while (v157 != v121)
        {
          if (v157 == -2)
            v181 = v156;
          v155 = (v155 + v182) & v152;
          v156 = v151 + 16 * v155;
          v157 = *(_DWORD *)v156;
          ++v182;
          if (*(_DWORD *)v156 == -1)
          {
            if (v181)
            {
              *(_DWORD *)v181 = -1;
              *(_QWORD *)(v181 + 8) = 0;
              --*(_DWORD *)(*v150 - 16);
              v156 = v181;
            }
            goto LABEL_219;
          }
        }
        goto LABEL_390;
      }
LABEL_219:
      *(_DWORD *)v156 = v121;
      v158 = HIDWORD(v259);
      if (HIDWORD(v259))
      {
        v159 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v259) + 4));
        v160 = v258;
        v161 = HIDWORD(v259);
        *v159 = v158;
        if ((_DWORD)v161)
        {
          v123 = 0;
          v162 = 4 * v161;
          do
          {
            v159[v123 / 4 + 1] = *(_DWORD *)((char *)v160 + v123);
            v123 += 4;
          }
          while (v162 != v123);
        }
      }
      else
      {
        v159 = 0;
      }
      v219 = *(_QWORD *)(v156 + 8);
      *(_QWORD *)(v156 + 8) = v159;
      if (v219)
        WTF::fastFree(v219, v129, v130, v131, v132, v133, v134, v135);
      v220 = *v150;
      if (*v150)
        v221 = *(_DWORD *)(v220 - 12) + 1;
      else
        v221 = 1;
      *(_DWORD *)(v220 - 12) = v221;
      v222 = *v150;
      if (*v150)
        v223 = *(_DWORD *)(v222 - 12);
      else
        v223 = 0;
      v224 = (*(_DWORD *)(v222 - 16) + v223);
      v225 = *(unsigned int *)(v222 - 4);
      if (v225 > 0x400)
      {
        if (v225 > 2 * v224)
          goto LABEL_390;
      }
      else
      {
        if (3 * v225 > 4 * v224)
          goto LABEL_390;
        if (!(_DWORD)v225)
        {
          v226 = 8;
LABEL_399:
          WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<WTF::FixedVector<JSC::BytecodeIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(v150, v226);
LABEL_390:
          v139 = v258;
LABEL_391:
          if (v139)
          {
            v258 = 0;
            LODWORD(v259) = 0;
            WTF::fastFree((unint64_t)v139, v129, v130, v131, v132, v133, v134, v135);
          }
          goto LABEL_198;
        }
      }
      v226 = (_DWORD)v225 << (6 * *(_DWORD *)(v222 - 12) >= (2 * v225));
      goto LABEL_399;
    }
  }
LABEL_112:
  *(_BYTE *)(*((_QWORD *)v248 + 3) + 106) = 1;
  v77 = v265[1];
  if (v267 != (_BYTE *)v265[1] && v265[1] != 0)
  {
    v265[1] = 0;
    LODWORD(v266) = 0;
    WTF::fastFree((unint64_t)v77, v5, v6, v7, v8, v9, v10, v11);
  }
  v79 = v268;
  if (v268)
  {
    v95 = *(unsigned int *)(v268 - 4);
    if ((_DWORD)v95)
    {
      v96 = v268 + 8;
      do
      {
        if (*(_DWORD *)(v96 - 8) != -2)
        {
          v97 = *(_QWORD *)v96;
          if (*(_QWORD *)v96)
          {
            *(_QWORD *)v96 = 0;
            *(_DWORD *)(v96 + 8) = 0;
            WTF::fastFree(v97, v5, v6, v7, v8, v9, v10, v11);
          }
        }
        v96 += 32;
        --v95;
      }
      while (v95);
    }
    WTF::fastFree(v79 - 16, v5, v6, v7, v8, v9, v10, v11);
  }
  if (v269[0])
    WTF::fastFree(v269[0] - 16, v5, v6, v7, v8, v9, v10, v11);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v80 = (*(_DWORD *)(*((_QWORD *)v248 + 3) + 16) & 0xFFFFFFFE) == 4) : (v80 = 0),
        !v80 ? (v81 = BYTE2(qword_1ECF4C32A) == 0) : (v81 = 0),
        !v81))
  {
    *(_OWORD *)v265 = v249;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v248 + 1088, "Phase ", (uint64_t)v265, " changed the IR.\n", "\n");
  }
  v82 = 1;
LABEL_130:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v252);
  if (HIBYTE(qword_1ECF4C32A) && !v250)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v244, (uint64_t)v83, v84, v85, v86, v87, v88, v89);
  v90 = v251;
  v251 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 1)
      WTF::fastFree((unint64_t)v90, v83, v84, v85, v86, v87, v88, v89);
    else
      --*(_DWORD *)v90;
  }
  return v82;
}

void JSC::DFG::ToFTLDeferredCompilationCallback::~ToFTLDeferredCompilationCallback(JSC::DFG::ToFTLDeferredCompilationCallback *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF *v9;
  WTF *v10;

  *(_QWORD *)this = off_1E3581048;
  v10 = (WTF *)*((_QWORD *)this + 2);
  v8 = (_QWORD *)((char *)this + 16);
  v9 = v10;
  *v8 = 0;
  if (v10)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v8, v9, a3, a4, a5, a6, a7, a8);
}

{
  _QWORD *v9;
  WTF *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E3581048;
  v11 = (WTF *)*((_QWORD *)this + 2);
  v9 = (_QWORD *)((char *)this + 16);
  v10 = v11;
  *v9 = 0;
  if (v11)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v9, v10, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v10, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::ToFTLDeferredCompilationCallback::compilationDidBecomeReadyAsynchronously(JSC::DFG::ToFTLDeferredCompilationCallback *this, JSC::CodeBlock *a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::CodeBlock *v12;
  JSC::CodeBlock *v13;

  v12 = (JSC::CodeBlock *)a3;
  v13 = a2;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [27],JSC::CodeBlock *,char [7],JSC::CodeBlock *,char [20],char [2]>((uint64_t *)&v13, (uint64_t *)&v12);
  v4 = a3[15];
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 88))(v4);
  v8 = result;
  if (BYTE1(qword_1ECF4C332))
    result = WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)v12, ": Forcing slow path concurrently for FTL entry.", "\n");
  *(_DWORD *)(v8 + 348) = 0;
  v9 = v4 + 2;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v4 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 32))(v4);
  }
  return result;
}

uint64_t JSC::DFG::ToFTLDeferredCompilationCallback::compilationDidComplete(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  JSC::CodeBlock *v10;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  JSC::CodeBlock **v15;
  JSC::CodeBlock **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  JSC::DeferredSourceDump *v28;
  uint64_t v29;
  int v30;
  JSC::CodeBlock *v31;
  uint64_t v32;
  int v33;

  v9 = a4;
  v10 = (JSC::CodeBlock *)a3;
  v12 = result;
  v31 = (JSC::CodeBlock *)a3;
  v32 = a2;
  v30 = a4;
  if (BYTE1(qword_1ECF4C332))
    result = WTF::dataLog<char [27],JSC::CodeBlock *,char [7],JSC::CodeBlock *,char [11],JSC::CompilationResult,char [2]>(&v32, (uint64_t *)&v31, &v30);
  v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v13 == &JSC::FunctionCodeBlock::s_info)
  {
    v14 = *((_QWORD *)v10 + 8);
    v15 = (JSC::CodeBlock **)(v14 + 96);
    v16 = (JSC::CodeBlock **)(v14 + 104);
    if (*(int *)(*((_QWORD *)v10 + 7) + 20) >= 0)
      v16 = v15;
  }
  else
  {
    if (v13 != &JSC::EvalCodeBlock::s_info
      && v13 != &JSC::ProgramCodeBlock::s_info
      && v13 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      goto LABEL_31;
    }
    v16 = (JSC::CodeBlock **)(*((_QWORD *)v10 + 8) + 72);
  }
  if (*v16 == v10)
  {
    if (v9 == 2)
      JSC::ScriptExecutable::installCode(*(_QWORD *)(a2 + 64), *(JSC::VM **)(a2 + 72), (JSC::CodeBlock *)a2, (*(unsigned __int16 *)(*(_QWORD *)(a2 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(a2 + 56) + 20) >> 31, 0, a8, a9, a5);
    v17 = (unsigned int *)*((_QWORD *)v10 + 15);
    if (v17)
    {
      v18 = v17 + 2;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v10 = v31;
      v9 = v30;
    }
    v20 = v17 + 2;
    v21 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 88))(v17);
    result = JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(v21, v10, v9, v22);
    do
    {
      v23 = __ldaxr(v20);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v20));
    if (!v24)
    {
      atomic_store(1u, v17 + 2);
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
    v25 = v30;
    v26 = *(_QWORD *)(v12 + 16);
    if (v26)
    {
      v33 = 0;
      v27 = *(unsigned int *)(v26 + 12);
      if ((_DWORD)v27)
      {
        v28 = *(JSC::DeferredSourceDump **)v26;
        v29 = 24 * v27;
        do
        {
          ++v33;
          WTF::dataLog<char [2],unsigned int,char [3]>("[", &v33, "] ");
          JSC::DeferredSourceDump::dump(v28);
          v28 = (JSC::DeferredSourceDump *)((char *)v28 + 24);
          v29 -= 24;
        }
        while (v29);
      }
      result = WTF::dataLog<char [16]>("\n");
    }
    if (v25 != 3)
      return result;
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198551B88);
  }
  if (BYTE1(qword_1ECF4C332))
    return WTF::dataLog<char [25],JSC::CodeBlock *,char [42],JSC::CodeBlock *,char [17],char [2]>(&v32, (uint64_t *)&v31);
  return result;
}

void JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback::~ToFTLForOSREntryDeferredCompilationCallback(JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF *v9;
  WTF *v10;

  *(_QWORD *)this = off_1E3581048;
  v10 = (WTF *)*((_QWORD *)this + 2);
  v8 = (_QWORD *)((char *)this + 16);
  v9 = v10;
  *v8 = 0;
  if (v10)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v8, v9, a3, a4, a5, a6, a7, a8);
}

{
  _QWORD *v9;
  WTF *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E3581048;
  v11 = (WTF *)*((_QWORD *)this + 2);
  v9 = (_QWORD *)((char *)this + 16);
  v10 = v11;
  *v9 = 0;
  if (v11)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v9, v10, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v10, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback::compilationDidBecomeReadyAsynchronously(uint64_t this, JSC::CodeBlock *a2, JSC::CodeBlock *a3)
{
  uint64_t v3;

  v3 = this;
  if (BYTE1(qword_1ECF4C332))
    this = WTF::dataLog<char [27],JSC::CodeBlock,char [7],JSC::CodeBlock,char [20],char [2]>((uint64_t)a2, (uint64_t)a3);
  **(_BYTE **)(v3 + 24) = 1;
  return this;
}

uint64_t JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback::compilationDidComplete(uint64_t a1, uint64_t a2, const JSC::JSCell *a3, int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[31];
  char v31;
  int v32;
  int v33;

  v33 = a4;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [27],JSC::CodeBlock,char [7],JSC::CodeBlock,char [11],JSC::CompilationResult,char [2]>(a2, (uint64_t)a3, &v33);
  v7 = (unsigned int *)*((_QWORD *)a3 + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v7 + 2;
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 88))(v7);
  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 32))(v7);
  }
  if (v33 == 2)
  {
    JSC::DFG::JITCode::setOSREntryBlock((_QWORD *)v11, *(JSC::VM **)(a2 + 72), a3, (unsigned int **)a2);
    v14 = *(unsigned int **)(a2 + 120);
    if (v14)
    {
      v15 = v14 + 2;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    v17 = v14 + 2;
    v32 = *(_DWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 104))(v14) + 360);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 32))(v14);
    }
    v31 = 1;
    WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::inlineSet<JSC::BytecodeIndex const&,JSC::DFG::JITCode::TriggerReason>((uint64_t *)(v11 + 376), &v32, &v31, (uint64_t)v30);
  }
  else if (v33 == 1)
  {
    *(_DWORD *)(v11 + 392) = 0;
  }
  else if (v33)
  {
    if (v33 == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x198551E38);
    }
  }
  else
  {
    *(_DWORD *)(v11 + 392) = 0;
    *(_BYTE *)(v11 + 396) = 1;
    v21 = (unsigned int *)*((_QWORD *)a3 + 15);
    if (v21)
    {
      v22 = v21 + 2;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v24 = v33;
    }
    else
    {
      v24 = 0;
    }
    v25 = v21 + 2;
    v26 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v21 + 88))(v21);
    JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(v26, a3, v24, v27);
    do
    {
      v28 = __ldaxr(v25);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v25));
    if (!v29)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 32))(v21);
    }
  }
  return JSC::DeferredCompilationCallback::compilationDidComplete(a1, a2, (uint64_t)a3, v33);
}

uint64_t JSC::DFG::runPhase<JSC::DFG::TypeCheckHoistingPhase>(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  char v25;
  WTF *v26;
  uint64_t v27;

  v18 = -1;
  v19 = -1;
  v20 = 0;
  v21 = 256;
  v22 = a1;
  v23 = "structure check hoisting";
  v24 = 25;
  v25 = 0;
  v26 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v18);
  v27 = 0;
  v15 = JSC::DFG::runAndLog<JSC::DFG::TypeCheckHoistingPhase>((uint64_t)&v18, v1, v2, v3, v4, v5, v6, v7);
  if (v27)
    WTF::fastFree(v27 - 16, v8, v9, v10, v11, v12, v13, v14);
  if (HIBYTE(qword_1ECF4C32A) && !v25)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v18, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree((unint64_t)v16, v8, v9, v10, v11, v12, v13, v14);
    else
      --*(_DWORD *)v16;
  }
  return v15;
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>(_DWORD **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *a2;
  if ((*a2 & 0x60) != 0)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198552134);
  }
  while (1)
  {
    v11 = (uint64_t)a1[2];
    v12 = v11 & 0x7F;
    if ((v11 & 0x7F) == 0x7F)
      break;
    v13 = (v8 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (v11 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
    if (v13 == v14 + 8)
    {
      v15 = *a1;
      if (((v11 >> 6) & 4) != 0 || (v16 = (int)v14 >> 3, (v16 + 64) > 0x7F))
      {
        v19 = *((unsigned __int8 *)a1 + 8) | ((unint64_t)((unint64_t)(v11 >> 6) >> 2) << 34);
        JSC::MacroAssemblerARM64::store64((uint64_t)*a1, (unint64_t)a1[2] & 0x7F, v19, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::store64((uint64_t)v15, v8 & 0x7F, v19 + 0x800000000, v20, v21, v22, v23, v24);
      }
      else
      {
        v17 = ((v8 & 0x1F) << 10) & 0x7FFF | ((v16 & 0x7F) << 15) | v11 & 0x1F | (32 * *((char *)a1 + 8)) | 0xA9000000;
        v18 = v15[50];
        if (v18 + 4 > v15[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 14), (uint64_t)a2, v12, a4, a5, a6, a7, a8);
          v18 = v15[50];
        }
        *(_DWORD *)(*((_QWORD *)v15 + 7) + v18) = v17;
        v15[50] += 4;
      }
      goto LABEL_10;
    }
    if (v14 == v13 + 8)
    {
      JSC::MacroAssemblerARM64::storePair64(*a1, v8 & 0x7F, v12, *((char *)a1 + 8), (v8 >> 6) & 0xFFFFFFFCLL, a6, a7, a8);
LABEL_10:
      v8 = 127;
      break;
    }
    JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::finalize<JSC::ARM64Registers::RegisterID>((uint64_t)a1, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
    v8 = *a2;
    if ((*a2 & 0x60) != 0)
      goto LABEL_14;
  }
  a1[2] = (_DWORD *)v8;
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::finalize<JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16) & 0x7FLL;
  if ((_DWORD)v8 != 127)
  {
    JSC::MacroAssemblerARM64::store64(*(_QWORD *)a1, v8, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*(_QWORD *)(a1 + 16) >> 8) << 34), a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 16) = 127;
  }
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(_DWORD **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if ((*a2 & 0x60) != 0x20)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1985523C0);
  }
  while (1)
  {
    v11 = (unint64_t)a1[2] & 0x7F;
    if ((_DWORD)v11 == 127)
      break;
    v12 = (v8 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (uint64_t)a1[2] >> 6;
    v14 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (v12 == (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8)
    {
      v15 = v11 - 32;
      v16 = (v8 & 0x7F) - 32;
      v17 = *a1;
      if ((v13 & 4) != 0 || (v18 = (int)v14 >> 3, (v18 + 64) > 0x7F))
      {
        v21 = *((unsigned __int8 *)a1 + 8) | ((unint64_t)(v13 >> 2) << 34);
        JSC::MacroAssemblerARM64::storeDouble((uint64_t)*a1, v15, v21, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::storeDouble((uint64_t)v17, v16, v21 + 0x800000000, v22, v23, v24, v25, v26);
      }
      else
      {
        v19 = v15 | (v16 << 10) | ((v18 & 0x7F) << 15) | (32 * *((char *)a1 + 8)) | 0x6D000000;
        v20 = v17[50];
        if (v20 + 4 > v17[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v20 = v17[50];
        }
        *(_DWORD *)(*((_QWORD *)v17 + 7) + v20) = v19;
        v17[50] += 4;
      }
      goto LABEL_10;
    }
    if (v14 == v12 + 8)
    {
      JSC::MacroAssemblerARM64::storePair64(*a1, (char)((v8 & 0x7F) - 32), (char)(v11 - 32), *((char *)a1 + 8), (v8 >> 6) & 0xFFFFFFFCLL, a6, a7, a8);
LABEL_10:
      v8 = 127;
      break;
    }
    JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::finalize<JSC::ARM64Registers::FPRegisterID>((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v8 = *a2;
    if ((*a2 & 0x60) != 0x20)
      goto LABEL_14;
  }
  a1[2] = (_DWORD *)v8;
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::finalize<JSC::ARM64Registers::FPRegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16) & 0x7FLL;
  if ((_DWORD)v8 != 127)
  {
    JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)a1, (char)(v8 - 32), *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*(_QWORD *)(a1 + 16) >> 8) << 34), a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 16) = 127;
  }
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(_DWORD **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if ((*a2 & 0x60) == 0x20)
  {
    while (1)
    {
      v11 = (unint64_t)a1[2] & 0x7F;
      if ((_DWORD)v11 == 127)
        break;
      v12 = (v8 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (uint64_t)a1[2] >> 6;
      v14 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (v12 == (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8)
      {
        v15 = v11 - 32;
        v16 = (v8 & 0x7F) - 32;
        v17 = *a1;
        if ((v13 & 4) != 0 || (v18 = (int)v14 >> 3, (v18 + 64) > 0x7F))
        {
          v21 = *((unsigned __int8 *)a1 + 8) | ((unint64_t)(v13 >> 2) << 34);
          JSC::MacroAssemblerARM64::loadDouble((uint64_t)*a1, v21, v15, a4, a5, a6, a7, a8);
          JSC::MacroAssemblerARM64::loadDouble((uint64_t)v17, v21 + 0x800000000, v16, v22, v23, v24, v25, v26);
        }
        else
        {
          v19 = v15 | (v16 << 10) | ((v18 & 0x7F) << 15) | (32 * *((char *)a1 + 8)) | 0x6D400000;
          v20 = v17[50];
          if (v20 + 4 > v17[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v20 = v17[50];
          }
          *(_DWORD *)(*((_QWORD *)v17 + 7) + v20) = v19;
          v17[50] += 4;
        }
        goto LABEL_10;
      }
      if (v14 == v12 + 8)
      {
        JSC::MacroAssemblerARM64::loadPair64(*a1, *((char *)a1 + 8), (v8 >> 6) & 0xFFFFFFFCLL, (char)((v8 & 0x7F) - 32), (char)(v11 - 32), a6, a7, a8);
LABEL_10:
        v8 = 127;
        break;
      }
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::finalize<JSC::ARM64Registers::FPRegisterID>((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v8 = *a2;
      if ((*a2 & 0x60) != 0x20)
        goto LABEL_15;
    }
    a1[2] = (_DWORD *)v8;
  }
  else
  {
LABEL_15:
    __break(0xC471u);
  }
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::finalize<JSC::ARM64Registers::FPRegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 16) & 0x7FLL;
  if ((_DWORD)v8 != 127)
  {
    JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*(_QWORD *)(a1 + 16) >> 8) << 34), (char)(v8 - 32), a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 16) = 127;
  }
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::ensureGlobalFTLAllowlist(void)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&unk_1ECF58690, (const char *)xmmword_1ECF4C308);
}

void WTF::HashTable<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex>>,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashMap<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*,JSC::BytecodeIndex,WTF::DefaultHash<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::NaturalLoop<JSC::DFG::CPSCFG> const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_DWORD *)(v7 + 24);
    do
    {
      *((_QWORD *)v16 - 1) = 0;
      *v16 = -1;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v18 + 1) >= 2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = (~(*v18 << 32) + *v18) ^ ((~(*v18 << 32) + *v18) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((unint64_t)(v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        v25 = 1;
        do
        {
          v26 = v24;
          v27 = *(_QWORD *)(v19 + 16 * v24);
          v24 = (v24 + v25++) & v20;
        }
        while (v27);
        *(_OWORD *)(v19 + 16 * v26) = *(_OWORD *)v18;
      }
    }
    goto LABEL_18;
  }
  if (v4)
LABEL_18:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::Vector<JSC::BytecodeIndex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  int *v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if (!(_DWORD)v10)
      goto LABEL_20;
    v19 = (v10 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v19 < 7)
    {
      v20 = (_DWORD *)v11;
      v21 = (int *)v5;
    }
    else
    {
      v20 = (_DWORD *)v11;
      v21 = (int *)v5;
      if (v11 - v5 >= 0x20)
      {
        v22 = v19 + 1;
        v20 = (_DWORD *)(v11 + 4 * (v22 & 0x7FFFFFFFFFFFFFF8));
        v21 = (int *)(v5 + 4 * (v22 & 0x7FFFFFFFFFFFFFF8));
        v23 = (__int128 *)(v5 + 16);
        v24 = (_OWORD *)(v11 + 16);
        v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *v24 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          if (v5)
          {
            if (v11 == v5)
            {
              *(_QWORD *)v4 = 0;
              *(_DWORD *)(v4 + 8) = 0;
            }
            WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          }
          return v3;
        }
      }
    }
    do
    {
      v27 = *v21++;
      *v20++ = v27;
    }
    while (v21 != (int *)(v5 + 4 * v10));
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

void WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::TierUpCheckInjectionPhase::LoopHintDescriptor>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v16 = (_QWORD *)(v8 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      v16 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (int *)(v4 + 32 * i);
      v19 = *v18;
      if (*v18 == -1)
      {
        v37 = *((_QWORD *)v18 + 1);
        v36 = v18 + 2;
        v35 = v37;
        if (v37)
        {
          *v36 = 0;
          *(_DWORD *)(v4 + 32 * i + 16) = 0;
          WTF::fastFree(v35, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      else if (v19 != -2)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = 0;
        v23 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
        v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
        do
        {
          v25 = v24 & v21;
          v24 = ++v22 + v25;
        }
        while (*(_DWORD *)(v20 + 32 * v25) != -1);
        v26 = v20 + 32 * v25;
        v28 = (_QWORD *)(v26 + 8);
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          *v28 = 0;
          *(_DWORD *)(v26 + 16) = 0;
          WTF::fastFree(v27, v9, v10, v11, v12, v13, v14, v15);
          v19 = *v18;
        }
        *(_DWORD *)v26 = v19;
        v29 = v4 + 32 * i;
        *v28 = 0;
        *(_QWORD *)(v26 + 16) = 0;
        v31 = *(_DWORD *)(v29 + 16);
        v30 = v29 + 16;
        v32 = *(_QWORD *)(v30 - 8);
        *(_QWORD *)(v30 - 8) = 0;
        *v28 = v32;
        *(_DWORD *)v30 = 0;
        *(_DWORD *)(v26 + 16) = v31;
        v33 = *(_DWORD *)(v30 + 4);
        *(_DWORD *)(v30 + 4) = 0;
        *(_DWORD *)(v26 + 20) = v33;
        *(_BYTE *)(v26 + 24) = *(_BYTE *)(v30 + 8);
        v34 = *(_QWORD *)(v30 - 8);
        if (v34)
        {
          *(_QWORD *)(v30 - 8) = 0;
          *(_DWORD *)v30 = 0;
          WTF::fastFree(v34, v9, v10, v11, v12, v13, v14, v15);
        }
      }
    }
    goto LABEL_25;
  }
  if (v4)
LABEL_25:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,WTF::FixedVector<JSC::BytecodeIndex>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<WTF::FixedVector<JSC::BytecodeIndex>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    while (1)
    {
      v18 = (int *)(v4 + 16 * v17);
      v19 = *v18;
      if (*v18 == -1)
      {
        v30 = *((_QWORD *)v18 + 1);
        *((_QWORD *)v18 + 1) = 0;
        if (!v30)
          goto LABEL_21;
      }
      else
      {
        if (v19 == -2)
          goto LABEL_21;
        v20 = *a1;
        v21 = *a1 ? *(_DWORD *)(v20 - 8) : 0;
        v22 = 0;
        v23 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
        v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
        do
        {
          v25 = v24 & v21;
          v24 = ++v22 + v25;
        }
        while (*(_DWORD *)(v20 + 16 * v25) != -1);
        v26 = v20 + 16 * v25;
        v27 = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v26 + 8) = 0;
        if (v27)
          WTF::fastFree(v27, v8, v9, v10, v11, v12, v13, v14);
        *(_DWORD *)v26 = *v18;
        v28 = v4 + 16 * v17;
        v29 = *(_QWORD *)(v28 + 8);
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v26 + 8) = v29;
        v30 = *(_QWORD *)(v28 + 8);
        *(_QWORD *)(v28 + 8) = 0;
        if (!v30)
          goto LABEL_21;
      }
      WTF::fastFree(v30, v8, v9, v10, v11, v12, v13, v14);
LABEL_21:
      if (++v17 == v5)
        goto LABEL_25;
    }
  }
  if (v4)
LABEL_25:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock *,char [7],JSC::CodeBlock *,char [20],char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Optimizing compilation of ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " (for ");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ") did become ready.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock *,char [7],JSC::CodeBlock *,char [11],JSC::CompilationResult,char [2]>(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  const char *v14;
  WTF::PrintStream *v15;
  uint64_t result;
  char v17;
  char **v18;
  char *v19;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Optimizing compilation of ");
  v9 = *a1;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " (for ");
  v11 = *a2;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v11)
    JSC::CodeBlock::dumpAssumingJITType(v11);
  else
    WTF::PrintStream::printf(v12, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", ") result: ");
  v13 = *a3;
  if (v13 >= 4)
  {
    result = 50;
    __break(0xC471u);
  }
  else
  {
    v14 = off_1E358E7A0[v13];
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v15, "%s", v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

uint64_t WTF::dataLog<char [25],JSC::CodeBlock *,char [42],JSC::CodeBlock *,char [17],char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Dropping FTL code block ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " on the floor because the DFG code block ");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " was jettisoned.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock,char [7],JSC::CodeBlock,char [20],char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Optimizing compilation of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", " (for ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v6, "%s", ") did become ready.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock,char [7],JSC::CodeBlock,char [11],JSC::CompilationResult,char [2]>(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Optimizing compilation of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", " (for ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", ") result: ");
  v9 = *a3;
  if (v9 >= 4)
  {
    result = 50;
    __break(0xC471u);
  }
  else
  {
    v10 = off_1E358E7A0[v9];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void WTF::PrintStream::printImpl<WTF::PointerDumpInContext<JSC::Structure,JSC::DumpContext>,char [5],WTF::PointerDumpInContext<JSC::Structure,JSC::DumpContext>>(WTF::PrintStream *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  JSC::Structure *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF::PrintStream *v17;
  JSC::Structure *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::PrintStream *v28;
  WTF *v29;

  v7 = *(JSC::Structure **)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(uint64_t **)(a2 + 8);
    if (v8)
    {
      WTF::StringHashDumpContext<JSC::Structure>::getID(*(JSC::Structure **)a2, v8, (int8x16_t **)&v29);
      JSC::Structure::dumpBrief(v7, a1, (const WTF::CString *)&v29);
      v16 = v29;
      v29 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
        else
          --*(_DWORD *)v16;
      }
    }
    else
    {
      JSC::Structure::dump(*(_QWORD *)a2, a1);
    }
  }
  else
  {
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v17, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  WTF::PrintStream::printf(a1, "%s", a3);
  v18 = *(JSC::Structure **)a4;
  if (*(_QWORD *)a4)
  {
    v19 = *(uint64_t **)(a4 + 8);
    if (v19)
    {
      WTF::StringHashDumpContext<JSC::Structure>::getID(*(JSC::Structure **)a4, v19, (int8x16_t **)&v29);
      JSC::Structure::dumpBrief(v18, a1, (const WTF::CString *)&v29);
      v27 = v29;
      v29 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
        else
          --*(_DWORD *)v27;
      }
    }
    else
    {
      JSC::Structure::dump(*(_QWORD *)a4, a1);
    }
  }
  else
  {
    v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v28, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::TypeCheckHoistingPhase>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;
  double v21;
  char v22;
  __int128 *v23;

  v19[0] = "DFG";
  v19[1] = 4;
  v9 = *(_OWORD *)(a1 + 40);
  v20 = v9;
  v21 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v15 = mach_absolute_time();
    v17 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v17 != -1)
    {
      *(_QWORD *)&v18 = &v22;
      v23 = &v18;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v16) = dword_1ECF4400C;
    *(double *)&v9 = (double)(v15 * WTF::machTimebaseInfo(void)::timebaseInfo)
                   / ((double)v16
                    * 1000000000.0);
    v21 = *(double *)&v9;
  }
  v10 = JSC::DFG::TypeCheckHoistingPhase::run((JSC::DFG::TypeCheckHoistingPhase *)a1, a2, a3, a4, a5, *(double *)&v9, a6, a7, a8);
  if ((_DWORD)v10)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v13 = (*(_DWORD *)(*(_QWORD *)(v12 + 24) + 16) & 0xFFFFFFFE) == 4) : (v13 = 0),
          !v13 ? (v14 = BYTE2(qword_1ECF4C32A) == 0) : (v14 = 0),
          !v14))
    {
      v18 = *(_OWORD *)(a1 + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v12 + 1088, "Phase ", (uint64_t)&v18, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v19);
  return v10;
}

uint64_t JSC::DFG::TypeCheckHoistingPhase::run(JSC::DFG::TypeCheckHoistingPhase *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::DFG::TypeCheckHoistingPhase *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  float *v63;
  float *v64;
  float *v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  float *v81;
  float *v82;
  float *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t j;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  float *v135;
  float *v136;
  float *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  float *v146;
  float *v147;
  float *v148;
  unint64_t v149;
  uint64_t *v150;
  float *v151;
  float *v152;
  float *v153;
  int v154;
  float *v155;
  float *v156;
  float *v157;
  unint64_t v158;
  double v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  BOOL v184;
  BOOL v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  _QWORD *v206;
  int v207;
  WTF *v208;
  unint64_t v209;
  uint64_t v210;
  int64x2_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  uint64_t v237;
  _QWORD *v238;
  int v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  uint64_t *v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  __int16 v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  unint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  __int16 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  WTF *v304;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  const void *v310;
  void *v311;
  BOOL v312;
  unint64_t *v313;
  unint64_t *v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  BOOL v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  BOOL v329;
  WTF *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  BOOL v334;
  uint64_t v335;
  WTF *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  BOOL v340;
  uint64_t v341;
  int64_t v342;
  char v343;
  uint64_t v344;
  WTF *v345;
  uint64_t v346;
  WTF *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  BOOL v351;
  BOOL v352;
  uint64_t v353;
  int v354;
  int v355;
  int v356;
  int v357;
  uint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  uint64_t v362;
  _QWORD *v363;
  unsigned __int16 v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  BOOL v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  WTF *v376;
  uint64_t v377;
  uint64_t v378;
  BOOL v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  BOOL v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  BOOL v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  BOOL WouldPassArrayModeFiltering;
  WTF *v402;
  uint64_t v403;
  WTF *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unsigned __int16 v425;
  unsigned __int16 v426;
  unsigned __int16 v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  __int16 v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  WTF *v449;
  WTF *v450;
  unint64_t v451;
  unint64_t v452;
  int64x2_t v453;
  unint64_t v454;
  JSC::DFG::TypeCheckHoistingPhase *v455;
  int64x2_t v456;
  uint64_t v457;
  int64x2_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  __int16 v462;
  uint64_t v463;
  uint64_t v464;
  __int16 v465;
  uint64_t v466;
  uint64_t v467;
  __int16 v468;
  int64x2_t v469;
  __int16 v470;
  unint64_t v471;
  WTF *v472;
  uint64_t v473;
  _BYTE v474[128];
  unint64_t v475;
  uint64_t v476[2];

  v9 = this;
  v10 = *((_QWORD *)this + 4);
  v11 = *(unsigned int *)(v10 + 464);
  if (*(_DWORD *)(v10 + 464))
  {
    v12 = *(unsigned int *)(v10 + 484);
    v13 = v11 - 1;
    do
    {
      if (v13 >> 4 >= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198555BA8);
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 472) + 8 * (v13 >> 4));
      if (!*(_QWORD *)(v14 + ((v13 & 0xF) << 6)))
        *(_QWORD *)(v14 + ((v13 & 0xF) << 6) + 48) = 0;
      --v13;
    }
    while (v13 != -1);
  }
  v15 = 0x2800FFFFFFF7;
  LODWORD(v16) = *(_DWORD *)(v10 + 60);
  if ((_DWORD)v16)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17);
      if (v18)
      {
        v19 = *(unsigned int *)(v18 + 220);
        if ((_DWORD)v19)
        {
          for (i = 0; i < v19; ++i)
          {
            v22 = *(uint64_t **)(v18 + 208);
            v23 = v22[i];
            v24 = *(unsigned __int16 *)(v23 + 18);
            switch(*(_WORD *)(v23 + 18))
            {
              case 0x10:
                v25 = *(uint64_t **)(v23 + 72);
                v26 = v25;
                do
                {
                  v27 = (uint64_t)v26;
                  v26 = (uint64_t *)*v26;
                }
                while (v26);
                if ((uint64_t *)v27 != v25)
                  *v25 = v27;
                if (!*(_BYTE *)(v27 + 40) && *(_BYTE *)(v27 + 43) && !*(_BYTE *)(v27 + 41))
                {
                  v28 = (_QWORD *)v27;
                  do
                  {
                    v29 = v28;
                    v28 = (_QWORD *)*v28;
                  }
                  while (v28);
                  if (v29 != (_QWORD *)v27)
                    *(_QWORD *)v27 = v29;
                  v30 = v29[1];
                  v31 = v30 & 0x2800FFFFFFF7;
                  v32 = v30 & 0xFFFFD7FF00000008;
                  if (v31)
                    v33 = v32 == 0;
                  else
                    v33 = 0;
                  if (v33)
                  {
                    if (v19)
                    {
                      v66 = *(_QWORD *)(v23 + 24) & 0xFF00FFFFFFFFFFFFLL;
                      v34 = 8 * v19;
                      do
                      {
                        v35 = *v22;
                        if (*(_WORD *)(*v22 + 18) == 132 && (*(_QWORD *)(v35 + 24) & 0xFF00FFFFFFFFFFFFLL) == v66)
                        {
                          v36 = *(uint64_t **)(v35 + 72);
                          v469.i64[0] = 0;
                          v37 = *v36;
                          if ((*v36 & 1) == 0 || v37 == 4)
                          {
                            v38 = v37 & 0xFFFFFFFFFFFFFFFDLL;
                            v469.i64[0] = v37 & 0xFFFFFFFFFFFFFFFDLL;
                          }
                          else
                          {
                            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v469.i64, v36);
                            v38 = v469.i64[0];
                          }
                          JSC::DFG::TypeCheckHoistingPhase::noticeStructureCheck((uint64_t)v9, v27, v38);
                          if ((v469.i8[0] & 1) != 0)
                            WTF::fastFree(v469.i64[0] & 0xFFFFFFFFFFFFFFFCLL, v39, v40, v41, v42, v43, v44, v45);
                        }
                        ++v22;
                        v34 -= 8;
                      }
                      while (v34);
                    }
                    JSC::DFG::Graph::voteChildren(*((_QWORD *)v9 + 4), (JSC::DFG::Node *)v23, *(float *)&a6);
                    v15 = 0x2800FFFFFFF7;
                  }
                }
                break;
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x15:
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x29:
              case 0x2A:
              case 0x2B:
              case 0x2C:
              case 0x2D:
              case 0x2E:
              case 0x2F:
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x37:
              case 0x38:
              case 0x39:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x42:
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4C:
              case 0x4D:
              case 0x4E:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x56:
              case 0x57:
              case 0x58:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x72:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x80:
              case 0x81:
              case 0x82:
              case 0x83:
              case 0x85:
              case 0x86:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x95:
              case 0x96:
              case 0x97:
              case 0x99:
              case 0xA1:
                goto LABEL_42;
              case 0x14:
              case 0x17:
              case 0x5C:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x87:
              case 0x88:
              case 0x89:
              case 0x8A:
              case 0x8B:
              case 0x8C:
              case 0x90:
              case 0x91:
              case 0x92:
              case 0x93:
              case 0x94:
              case 0x98:
              case 0x9A:
              case 0x9B:
              case 0x9C:
              case 0x9D:
              case 0x9E:
              case 0x9F:
              case 0xA0:
              case 0xA2:
              case 0xA3:
                break;
              case 0x84:
                if (*(_WORD *)((*(_QWORD *)(v23 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                {
                  v52 = *(uint64_t **)((*(_QWORD *)(v23 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  v53 = v52;
                  do
                  {
                    v54 = (uint64_t)v53;
                    v53 = (uint64_t *)*v53;
                  }
                  while (v53);
                  if ((uint64_t *)v54 != v52)
                    *v52 = v54;
                  *(float *)&a6 = *(float *)(v54 + 52) + 1.0;
                  *(_DWORD *)(v54 + 52) = LODWORD(a6);
                  if (!*(_BYTE *)(v54 + 40) && *(_BYTE *)(v54 + 43) && !*(_BYTE *)(v54 + 41))
                  {
                    v70 = (_QWORD *)v54;
                    do
                    {
                      v71 = v70;
                      v70 = (_QWORD *)*v70;
                    }
                    while (v70);
                    if (v71 != (_QWORD *)v54)
                      *(_QWORD *)v54 = v71;
                    v72 = v71[1];
                    v73 = v72 & 0x2800FFFFFFF7;
                    v74 = v72 & 0xFFFFD7FF00000008;
                    if (v73)
                      v75 = v74 == 0;
                    else
                      v75 = 0;
                    if (v75)
                    {
                      v76 = *(uint64_t **)(v23 + 72);
                      v471 = 0;
                      v77 = *v76;
                      if ((*v76 & 1) == 0 || v77 == 4)
                      {
                        v78 = v77 & 0xFFFFFFFFFFFFFFFDLL;
                        v471 = v77 & 0xFFFFFFFFFFFFFFFDLL;
                      }
                      else
                      {
                        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v471, v76);
                        v78 = v471;
                      }
                      JSC::DFG::TypeCheckHoistingPhase::noticeStructureCheck((uint64_t)v9, v54, v78);
                      v15 = 0x2800FFFFFFF7;
                      if ((v471 & 1) != 0)
                      {
                        WTF::fastFree(v471 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, 0x2800FFFFFFF7, v79, a9);
                        v15 = 0x2800FFFFFFF7;
                      }
                    }
                  }
                }
                break;
              default:
                if (v24 != 388 && v24 != 391)
                {
LABEL_42:
                  v46 = *(_QWORD *)(v23 + 24);
                  if ((*(_BYTE *)(v23 + 56) & 0x10) != 0)
                  {
                    v57 = (*(_DWORD *)(v23 + 32) + v46);
                    if (v57 > v46)
                    {
                      v58 = *((_QWORD *)v9 + 4);
                      v59 = *(_DWORD *)(v58 + 164);
                      v60 = *(_QWORD *)(v23 + 24);
                      if (v59 <= v46)
                        v46 = v46;
                      else
                        v46 = v59;
                      do
                      {
                        if (v60 == v46)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198555CECLL);
                        }
                        v61 = *(_QWORD *)(*(_QWORD *)(v58 + 152) + 8 * v60) & 0xFF00FFFFFFFFFFFFLL;
                        if (v61)
                        {
                          v62 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(v58 + 152) + 8 * v60) & 0xFF00FFFFFFFFFFFFLL)
                                                    + 0x12);
                          if ((v62 & 0xFFFE) == 0x36)
                          {
                            v61 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v58 + 152) + 8 * v60) & 0xFF00FFFFFFFFFFFFLL)
                                            + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v62 = *(unsigned __int16 *)(v61 + 0x12);
                          }
                          if (v62 == 15)
                          {
                            v63 = *(float **)(v61 + 72);
                            v64 = v63;
                            do
                            {
                              v65 = v64;
                              v64 = *(float **)v64;
                            }
                            while (v64);
                            if (v65 != v63)
                              *(_QWORD *)v63 = v65;
                            *(float *)&a6 = v65[12] + 1.0;
                            v65[12] = *(float *)&a6;
                          }
                        }
                        ++v60;
                      }
                      while (v60 != v57);
                    }
                  }
                  else
                  {
                    v47 = v46 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v46 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v48 = *(unsigned __int16 *)((v46 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if ((v48 & 0xFFFE) == 0x36)
                      {
                        v47 = *(_QWORD *)((v46 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                        v48 = *(unsigned __int16 *)(v47 + 0x12);
                      }
                      if (v48 == 15)
                      {
                        v49 = *(float **)(v47 + 72);
                        v50 = v49;
                        do
                        {
                          v51 = v50;
                          v50 = *(float **)v50;
                        }
                        while (v50);
                        if (v51 != v49)
                          *(_QWORD *)v49 = v51;
                        *(float *)&a6 = v51[12] + 1.0;
                        v51[12] = *(float *)&a6;
                      }
                      v21 = *(_QWORD *)(v23 + 32) & 0xFF00FFFFFFFFFFFFLL;
                      if (v21)
                      {
                        v55 = *(unsigned __int16 *)((*(_QWORD *)(v23 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        if ((v55 & 0xFFFE) == 0x36)
                        {
                          v21 = *(_QWORD *)((*(_QWORD *)(v23 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                          v55 = *(unsigned __int16 *)(v21 + 0x12);
                        }
                        if (v55 == 15)
                        {
                          v67 = *(float **)(v21 + 72);
                          v68 = v67;
                          do
                          {
                            v69 = v68;
                            v68 = *(float **)v68;
                          }
                          while (v68);
                          if (v69 != v67)
                            *(_QWORD *)v67 = v69;
                          *(float *)&a6 = v69[12] + 1.0;
                          v69[12] = *(float *)&a6;
                        }
                        v56 = *(_QWORD *)(v23 + 40) & 0xFF00FFFFFFFFFFFFLL;
                        if (v56)
                        {
                          v80 = *(unsigned __int16 *)((*(_QWORD *)(v23 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                          if ((v80 & 0xFFFE) == 0x36)
                          {
                            v56 = *(_QWORD *)((*(_QWORD *)(v23 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v80 = *(unsigned __int16 *)(v56 + 0x12);
                          }
                          if (v80 == 15)
                          {
                            v81 = *(float **)(v56 + 72);
                            v82 = v81;
                            do
                            {
                              v83 = v82;
                              v82 = *(float **)v82;
                            }
                            while (v82);
                            if (v83 != v81)
                              *(_QWORD *)v81 = v83;
                            *(float *)&a6 = v83[12] + 1.0;
                            v83[12] = *(float *)&a6;
                          }
                        }
                      }
                    }
                  }
                }
                break;
            }
            v19 = *(unsigned int *)(v18 + 220);
          }
          v10 = *((_QWORD *)v9 + 4);
        }
      }
      ++v17;
      v16 = *(unsigned int *)(v10 + 60);
    }
    while (v17 < v16);
    v11 = *(unsigned int *)(v10 + 464);
  }
  v84 = (uint64_t)g_config;
  if (v11)
  {
    v85 = *(unsigned int *)(v10 + 484);
    a6 = *((double *)&xmmword_1ECF4C558 + 1);
    v86 = v11;
    do
    {
      if (--v86 >> 4 >= v85)
      {
        __break(0xC471u);
        JUMPOUT(0x198555BB0);
      }
      v87 = *(_QWORD *)(v10 + 472);
      v88 = *(_QWORD *)(v87 + 8 * (v86 >> 4)) + ((v86 & 0xF) << 6);
      if (!*(_QWORD *)v88 && *(float *)(v88 + 52) / *(float *)(v88 + 48) < a6)
      {
        v89 = *((_QWORD *)v9 + 9);
        if (v89)
        {
          v90 = *(_DWORD *)(v89 - 8);
          v91 = (~(v88 << 32) + v88) ^ ((~(v88 << 32) + v88) >> 22);
          v92 = 9 * ((v91 + ~(v91 << 13)) ^ ((v91 + ~(v91 << 13)) >> 8));
          v93 = (v92 ^ (v92 >> 15)) + ~((v92 ^ (v92 >> 15)) << 27);
          a3 = v90 & ((v93 >> 31) ^ v93);
          a2 = v89 + 24 * a3;
          a5 = *(_QWORD *)a2;
          if (*(_QWORD *)a2 != v88)
          {
            a4 = 1;
            while (a5)
            {
              a3 = ((_DWORD)a3 + (_DWORD)a4) & v90;
              a2 = v89 + 24 * a3;
              a5 = *(_QWORD *)a2;
              a4 = (a4 + 1);
              if (*(_QWORD *)a2 == v88)
                goto LABEL_116;
            }
            a2 = v89 + 24 * *(unsigned int *)(v89 - 4);
          }
LABEL_116:
          if (a2 != v89 + 24 * *(unsigned int *)(v89 - 4))
            *(_QWORD *)(a2 + 8) = 0;
        }
      }
    }
    while (v86);
    v94 = v11 - 1;
    do
    {
      if (v94 >> 4 >= v85)
      {
        __break(0xC471u);
        JUMPOUT(0x198555BB8);
      }
      v95 = *(_QWORD *)(v87 + 8 * (v94 >> 4));
      if (!*(_QWORD *)(v95 + ((v94 & 0xF) << 6)))
        *(_QWORD *)(v95 + ((v94 & 0xF) << 6) + 48) = 0;
      --v94;
    }
    while (v94 != -1);
  }
  v455 = v9;
  if ((_DWORD)v16)
  {
    v96 = 0;
    do
    {
      v97 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v96);
      if (v97)
      {
        v98 = *(unsigned int *)(v97 + 220);
        if ((_DWORD)v98)
        {
          v99 = *(uint64_t **)(v97 + 208);
          v100 = &v99[v98];
          do
          {
            v102 = *v99;
            v103 = *(unsigned __int16 *)(*v99 + 18);
            switch(*(_WORD *)(*v99 + 18))
            {
              case 0x10:
                v104 = *(uint64_t **)(v102 + 72);
                v105 = v104;
                do
                {
                  v106 = (uint64_t)v105;
                  v105 = (uint64_t *)*v105;
                }
                while (v105);
                if ((uint64_t *)v106 != v104)
                  *v104 = v106;
                if (*(_BYTE *)(v106 + 40) || !*(_BYTE *)(v106 + 43) || *(_BYTE *)(v106 + 42))
                  goto LABEL_140;
                v107 = (_QWORD *)v106;
                do
                {
                  v108 = v107;
                  v107 = (_QWORD *)*v107;
                }
                while (v107);
                if (v108 != (_QWORD *)v106)
                  *(_QWORD *)v106 = v108;
                v109 = v108[1];
                v110 = v109 & 0x2800FFFFFFF7;
                v111 = v109 & 0xFFFFD7FF00000008;
                if (!v110 || v111 != 0)
                  goto LABEL_140;
                v113 = *(unsigned int *)(v97 + 220);
                if (!(_DWORD)v113)
                  goto LABEL_159;
                v131 = *(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL;
                v116 = *(uint64_t **)(v97 + 208);
                v150 = &v116[v113];
                break;
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x15:
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x29:
              case 0x2A:
              case 0x2B:
              case 0x2C:
              case 0x2D:
              case 0x2E:
              case 0x2F:
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x37:
              case 0x38:
              case 0x39:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x42:
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4C:
              case 0x4D:
              case 0x4E:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x56:
              case 0x57:
              case 0x58:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x72:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x80:
              case 0x81:
              case 0x82:
              case 0x83:
              case 0x85:
              case 0x86:
              case 0x8B:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x95:
              case 0x96:
              case 0x97:
              case 0x99:
                goto LABEL_189;
              case 0x14:
              case 0x17:
              case 0x5C:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x84:
              case 0x87:
              case 0x89:
              case 0x8A:
              case 0x90:
              case 0x93:
              case 0x94:
              case 0x98:
              case 0x9A:
              case 0x9B:
              case 0x9C:
              case 0x9D:
              case 0x9E:
              case 0x9F:
              case 0xA0:
                goto LABEL_140;
              case 0x88:
              case 0x91:
              case 0x92:
                if (*(_WORD *)((*(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                {
                  v321 = *(uint64_t **)((*(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  v322 = v321;
                  do
                  {
                    v323 = (uint64_t)v322;
                    v322 = (uint64_t *)*v322;
                  }
                  while (v322);
                  if ((uint64_t *)v323 != v321)
                    *v321 = v323;
                  *(float *)&a6 = *(float *)(v323 + 48) + 1.0;
                  *(_DWORD *)(v323 + 48) = LODWORD(a6);
                  if (!*(_BYTE *)(v323 + 40) && *(_BYTE *)(v323 + 43) && !*(_BYTE *)(v323 + 42))
                  {
                    v324 = (_QWORD *)v323;
                    do
                    {
                      v325 = v324;
                      v324 = (_QWORD *)*v324;
                    }
                    while (v324);
                    if (v325 != (_QWORD *)v323)
                      *(_QWORD *)v323 = v325;
                    v326 = v325[1];
                    v327 = v326 & 0x2800FFFFFFF7;
                    v328 = v326 & 0xFFFFD7FF00000008;
                    if (v327)
                      v329 = v328 == 0;
                    else
                      v329 = 0;
                    if (v329)
                    {
                      v476[0] = v323;
                      v469.i64[0] = 0;
                      v469.i32[2] = 268500992;
                      v469.i16[6] = 0;
                      WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::add<JSC::DFG::CheckData>(&v471, (uint64_t *)v9 + 9, v476, v469.i64);
                      v15 = 0x2800FFFFFFF7;
                      *(_WORD *)(v471 + 20) = 0;
                    }
                  }
                }
                goto LABEL_140;
              case 0x8C:
                if (*(_WORD *)((*(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                {
                  v313 = *(unint64_t **)((*(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  v314 = v313;
                  do
                  {
                    a2 = (unint64_t)v314;
                    v314 = (unint64_t *)*v314;
                  }
                  while (v314);
                  if ((unint64_t *)a2 != v313)
                    *v313 = a2;
                  *(float *)&a6 = *(float *)(a2 + 52) + 1.0;
                  *(_DWORD *)(a2 + 52) = LODWORD(a6);
                  if (!*(_BYTE *)(a2 + 40) && *(_BYTE *)(a2 + 43) && !*(_BYTE *)(a2 + 42))
                  {
                    v315 = (_QWORD *)a2;
                    do
                    {
                      v316 = v315;
                      v315 = (_QWORD *)*v315;
                    }
                    while (v315);
                    if (v316 != (_QWORD *)a2)
                      *(_QWORD *)a2 = v316;
                    v317 = v316[1];
                    v318 = v317 & 0x2800FFFFFFF7;
                    v319 = v317 & 0xFFFFD7FF00000008;
                    if (v318)
                      v320 = v319 == 0;
                    else
                      v320 = 0;
                    if (v320)
                    {
                      JSC::DFG::TypeCheckHoistingPhase::noticeCheckArray((uint64_t)v9, a2, *(_DWORD *)(v102 + 72));
                      v15 = 0x2800FFFFFFF7;
                    }
                  }
                }
                goto LABEL_140;
              default:
                if (v103 != 388 && v103 != 391)
                {
LABEL_189:
                  v132 = *(_QWORD *)(v102 + 24);
                  if ((*(_BYTE *)(v102 + 56) & 0x10) != 0)
                  {
                    v140 = (*(_DWORD *)(v102 + 32) + v132);
                    if (v140 > v132)
                    {
                      v141 = *((_QWORD *)v9 + 4);
                      v142 = *(_DWORD *)(v141 + 164);
                      v143 = *(_QWORD *)(v102 + 24);
                      if (v142 <= v132)
                        v132 = v132;
                      else
                        v132 = v142;
                      do
                      {
                        if (v143 == v132)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198555CF4);
                        }
                        v144 = *(_QWORD *)(*(_QWORD *)(v141 + 152) + 8 * v143) & 0xFF00FFFFFFFFFFFFLL;
                        if (v144)
                        {
                          v145 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(v141 + 152) + 8 * v143) & 0xFF00FFFFFFFFFFFFLL)
                                                     + 0x12);
                          if ((v145 & 0xFFFE) == 0x36)
                          {
                            v144 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v141 + 152) + 8 * v143) & 0xFF00FFFFFFFFFFFFLL)
                                             + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v145 = *(unsigned __int16 *)(v144 + 0x12);
                          }
                          if (v145 == 15)
                          {
                            v146 = *(float **)(v144 + 72);
                            v147 = v146;
                            do
                            {
                              v148 = v147;
                              v147 = *(float **)v147;
                            }
                            while (v147);
                            if (v148 != v146)
                              *(_QWORD *)v146 = v148;
                            *(float *)&a6 = v148[12] + 1.0;
                            v148[12] = *(float *)&a6;
                          }
                        }
                        ++v143;
                      }
                      while (v143 != v140);
                    }
                  }
                  else
                  {
                    v133 = v132 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v132 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v134 = *(unsigned __int16 *)((v132 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if ((v134 & 0xFFFE) == 0x36)
                      {
                        v133 = *(_QWORD *)((v132 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                        v134 = *(unsigned __int16 *)(v133 + 0x12);
                      }
                      if (v134 == 15)
                      {
                        v135 = *(float **)(v133 + 72);
                        v136 = v135;
                        do
                        {
                          v137 = v136;
                          v136 = *(float **)v136;
                        }
                        while (v136);
                        if (v137 != v135)
                          *(_QWORD *)v135 = v137;
                        *(float *)&a6 = v137[12] + 1.0;
                        v137[12] = *(float *)&a6;
                      }
                      v101 = *(_QWORD *)(v102 + 32) & 0xFF00FFFFFFFFFFFFLL;
                      if (v101)
                      {
                        v138 = *(unsigned __int16 *)((*(_QWORD *)(v102 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        if ((v138 & 0xFFFE) == 0x36)
                        {
                          v101 = *(_QWORD *)((*(_QWORD *)(v102 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                          v138 = *(unsigned __int16 *)(v101 + 0x12);
                        }
                        if (v138 == 15)
                        {
                          v151 = *(float **)(v101 + 72);
                          v152 = v151;
                          do
                          {
                            v153 = v152;
                            v152 = *(float **)v152;
                          }
                          while (v152);
                          if (v153 != v151)
                            *(_QWORD *)v151 = v153;
                          *(float *)&a6 = v153[12] + 1.0;
                          v153[12] = *(float *)&a6;
                        }
                        v139 = *(_QWORD *)(v102 + 40) & 0xFF00FFFFFFFFFFFFLL;
                        if (v139)
                        {
                          v154 = *(unsigned __int16 *)((*(_QWORD *)(v102 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                          if ((v154 & 0xFFFE) == 0x36)
                          {
                            v139 = *(_QWORD *)((*(_QWORD *)(v102 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v154 = *(unsigned __int16 *)(v139 + 0x12);
                          }
                          if (v154 == 15)
                          {
                            v155 = *(float **)(v139 + 72);
                            v156 = v155;
                            do
                            {
                              v157 = v156;
                              v156 = *(float **)v156;
                            }
                            while (v156);
                            if (v157 != v155)
                              *(_QWORD *)v155 = v157;
                            *(float *)&a6 = v157[12] + 1.0;
                            v157[12] = *(float *)&a6;
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_140;
            }
            do
            {
              v114 = *v116;
              v115 = *(unsigned __int16 *)(*v116 + 18);
              if (v115 == 132)
              {
                if ((*(_QWORD *)(v114 + 24) & 0xFF00FFFFFFFFFFFFLL) == v131)
                {
                  v117 = *(uint64_t **)(v114 + 72);
                  v475 = 0;
                  v118 = *v117;
                  if ((*v117 & 1) == 0 || v118 == 4)
                  {
                    v475 = v118 & 0xFFFFFFFFFFFFFFFDLL;
                  }
                  else
                  {
                    v367 = v131;
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v475, v117);
                    v131 = v367;
                  }
                  for (j = 0; ; ++j)
                  {
                    if ((v475 & 1) != 0)
                    {
                      v130 = v475 & 0xFFFFFFFFFFFFFFFCLL;
                      v9 = v455;
                      if (j >= *(unsigned int *)(v475 & 0xFFFFFFFFFFFFFFFCLL))
                      {
                        v452 = v131;
                        WTF::fastFree(v130, v117, a3, a4, a5, v15, v84, a9);
                        goto LABEL_186;
                      }
                      v117 = *(uint64_t **)(v130 + 8 * j + 8);
                    }
                    else
                    {
                      v9 = v455;
                      if (j || v475 <= 3)
                        break;
                      v117 = (uint64_t *)(v475 & 0xFFFFFFFFFFFFFFFCLL);
                    }
                    v120 = *((_QWORD *)v9 + 9);
                    if (v120)
                    {
                      v121 = (~(v106 << 32) + v106) ^ ((unint64_t)(~(v106 << 32) + v106) >> 22);
                      v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
                      v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
                      v124 = (v123 >> 31) ^ v123;
                      v125 = *(_DWORD *)(v120 - 8);
                      v126 = v125 & v124;
                      v127 = (uint64_t *)(v120 + 24 * v126);
                      v128 = *v127;
                      if (*v127 != v106)
                      {
                        v129 = 1;
                        while (v128)
                        {
                          v126 = (v126 + v129) & v125;
                          v127 = (uint64_t *)(v120 + 24 * v126);
                          v128 = *v127;
                          ++v129;
                          if (*v127 == v106)
                            goto LABEL_181;
                        }
                        v127 = (uint64_t *)(v120 + 24 * *(unsigned int *)(v120 - 4));
                      }
LABEL_181:
                      if (v127 != (uint64_t *)(v120 + 24 * *(unsigned int *)(v120 - 4)))
                      {
                        if (*((_BYTE *)v127 + 21))
                        {
                          if (*((_BYTE *)v127 + 20))
                          {
                            v451 = j;
                            v454 = v131;
                            WouldPassArrayModeFiltering = JSC::DFG::ArrayMode::structureWouldPassArrayModeFiltering((JSC::DFG::ArrayMode *)(v127 + 2), (JSC::Structure *)v117);
                            j = v451;
                            v131 = v454;
                            if (!WouldPassArrayModeFiltering)
                              *((_WORD *)v127 + 10) = 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
              else if (v115 == 140 && (*(_QWORD *)(v114 + 24) & 0xFF00FFFFFFFFFFFFLL) == v131)
              {
                v452 = v131;
                JSC::DFG::TypeCheckHoistingPhase::noticeCheckArray((uint64_t)v9, v106, *(_DWORD *)(v114 + 72));
LABEL_186:
                v131 = v452;
              }
              ++v116;
            }
            while (v116 != v150);
LABEL_159:
            JSC::DFG::Graph::voteChildren(*((_QWORD *)v9 + 4), (JSC::DFG::Node *)v102, *(float *)&a6);
            v15 = 0x2800FFFFFFF7;
LABEL_140:
            ++v99;
          }
          while (v99 != v100);
          v10 = *((_QWORD *)v9 + 4);
        }
      }
      ++v96;
      v149 = *(unsigned int *)(v10 + 60);
    }
    while (v96 < v149);
    v11 = *(unsigned int *)(v10 + 464);
    v84 = (uint64_t)g_config;
  }
  else
  {
    LODWORD(v149) = 0;
  }
  if (v11)
  {
    v158 = *(unsigned int *)(v10 + 484);
    v159 = *(double *)&qword_1ECF4C568;
    do
    {
      if (--v11 >> 4 >= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x198555BC0);
      }
      v160 = *(_QWORD *)(*(_QWORD *)(v10 + 472) + 8 * (v11 >> 4)) + ((v11 & 0xF) << 6);
      if (!*(_QWORD *)v160 && *(float *)(v160 + 52) / *(float *)(v160 + 48) < v159)
      {
        v161 = *((_QWORD *)v9 + 9);
        if (v161)
        {
          v162 = *(_DWORD *)(v161 - 8);
          v163 = (~(v160 << 32) + v160) ^ ((~(v160 << 32) + v160) >> 22);
          v164 = 9 * ((v163 + ~(v163 << 13)) ^ ((v163 + ~(v163 << 13)) >> 8));
          v165 = (v164 ^ (v164 >> 15)) + ~((v164 ^ (v164 >> 15)) << 27);
          v166 = v162 & ((v165 >> 31) ^ v165);
          v167 = v161 + 24 * v166;
          a3 = *(_QWORD *)v167;
          if (*(_QWORD *)v167 != v160)
          {
            a2 = 1;
            while (a3)
            {
              v166 = (v166 + a2) & v162;
              v167 = v161 + 24 * v166;
              a3 = *(_QWORD *)v167;
              a2 = (a2 + 1);
              if (*(_QWORD *)v167 == v160)
                goto LABEL_247;
            }
            v167 = v161 + 24 * *(unsigned int *)(v161 - 4);
          }
LABEL_247:
          if (v167 != v161 + 24 * *(unsigned int *)(v161 - 4))
            *(_WORD *)(v167 + 20) = 0;
        }
      }
    }
    while (v11);
  }
  if (!(_DWORD)v149)
    goto LABEL_474;
  v168 = 0;
  v169 = *(_QWORD *)(v10 + 48);
  do
  {
    v170 = *(_QWORD *)(v169 + 8 * v168);
    if (v170)
    {
      if (*(_BYTE *)(v170 + 19))
      {
        v171 = *(_QWORD *)(v10 + 24);
        if (*(_DWORD *)(v170 + 4) == *(_DWORD *)(v171 + 108))
        {
          v172 = *(unsigned int *)(v171 + 92);
          if ((_DWORD)v172)
          {
            v173 = 0;
            a2 = *(unsigned int *)(v171 + 96);
            a3 = *(_QWORD *)(v170 + 72);
            do
            {
              if (v173 < a2)
              {
                v175 = v173 + 5;
              }
              else
              {
                v174 = *(unsigned int *)(v171 + 100) + a2;
                if (v173 >= v174)
                {
                  a5 = *(unsigned int *)(v170 + 88);
                  v15 = *(unsigned int *)(v170 + 92);
                  v176 = a5 + (int)v173 - (int)v174 + v15;
                  goto LABEL_264;
                }
                v175 = a2 + ~(_DWORD)v173;
              }
              a5 = v175;
              if ((v175 & 0x80000000) != 0)
              {
                a5 = *(unsigned int *)(v170 + 88);
                v176 = (v175 ^ 0xFFFFFFFFLL) + a5;
              }
              else
              {
                v176 = (uint64_t)(((unint64_t)v175 << 32) - 0x500000000) >> 32;
              }
LABEL_264:
              a4 = *(_QWORD *)(a3 + 8 * v176);
              if (a4)
              {
                v177 = *(uint64_t **)(a4 + 72);
                v15 = (uint64_t)v177;
                do
                {
                  a5 = v15;
                  v15 = *(_QWORD *)v15;
                }
                while (v15);
                if ((uint64_t *)a5 != v177)
                  *v177 = a5;
                a4 = *((_QWORD *)v9 + 9);
                if (a4)
                {
                  v84 = *(unsigned int *)(a4 - 8);
                  v178 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
                  v179 = 9 * ((v178 + ~(v178 << 13)) ^ ((v178 + ~(v178 << 13)) >> 8));
                  v180 = (v179 ^ (v179 >> 15)) + ~((v179 ^ (v179 >> 15)) << 27);
                  a9 = v84 & ((v180 >> 31) ^ v180);
                  v15 = a4 + 24 * a9;
                  v181 = *(_QWORD *)v15;
                  if (*(_QWORD *)v15 != a5)
                  {
                    v182 = 1;
                    while (v181)
                    {
                      a9 = ((_DWORD)a9 + v182) & v84;
                      v15 = a4 + 24 * a9;
                      v181 = *(_QWORD *)v15;
                      ++v182;
                      if (*(_QWORD *)v15 == a5)
                        goto LABEL_280;
                    }
                    v15 = a4 + 24 * *(unsigned int *)(a4 - 4);
LABEL_280:
                    v9 = v455;
                  }
                  a5 = *(unsigned int *)(a4 - 4);
                  a4 += 24 * a5;
                  if (v15 != a4)
                  {
                    a4 = *(_QWORD *)(v15 + 8);
                    if (a4)
                    {
                      v183 = *(_QWORD *)(v171 + 80) + 16 * v173;
                      a5 = *(_QWORD *)v183;
                      v84 = *(unsigned __int8 *)(v183 + 8);
                      a9 = a5 & 0xFFFE000000000002;
                      v184 = !(_DWORD)v84 || a5 == 0;
                      v185 = !v184 && a9 == 0;
                      if (!v185 || (a5 = *(_DWORD *)a5 & 0xFFFFFFFE, a4 != 16 * a5))
                        *(_QWORD *)(v15 + 8) = 0;
                    }
                  }
                }
              }
              ++v173;
            }
            while (v173 != v172);
          }
        }
      }
    }
    ++v168;
  }
  while (v168 != v149);
  v186 = 0;
  while (2)
  {
    v187 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v186);
    if (v187)
    {
      if (*(_BYTE *)(v187 + 19))
      {
        v189 = *(_QWORD *)(v10 + 24);
        if (*(_DWORD *)(v187 + 4) == *(_DWORD *)(v189 + 108))
        {
          if (*(_DWORD *)(v189 + 92))
          {
            v190 = 0;
            while (1)
            {
              v191 = *(unsigned int *)(v189 + 96);
              if (v190 < v191)
              {
                v193 = v190 + 5;
              }
              else
              {
                v192 = *(unsigned int *)(v189 + 100) + v191;
                if (v190 >= v192)
                {
                  v194 = *(unsigned int *)(v187 + 88) + (uint64_t)((int)v190 - (int)v192) + *(unsigned int *)(v187 + 92);
                  goto LABEL_305;
                }
                v193 = v191 + ~(_DWORD)v190;
              }
              if ((v193 & 0x80000000) != 0)
                v194 = (v193 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v187 + 88);
              else
                v194 = (uint64_t)(((unint64_t)v193 << 32) - 0x500000000) >> 32;
LABEL_305:
              v195 = *(_QWORD *)(*(_QWORD *)(v187 + 72) + 8 * v194);
              if (v195)
              {
                v196 = *(_QWORD **)(v195 + 72);
                v197 = v196;
                do
                {
                  v198 = v197;
                  v197 = (_QWORD *)*v197;
                }
                while (v197);
                if (v198 != v196)
                  *v196 = v198;
                v199 = *((_QWORD *)v9 + 9);
                if (v199)
                {
                  v200 = *(_DWORD *)(v199 - 8);
                  v201 = ((unint64_t)v198 + ~((_QWORD)v198 << 32)) ^ (((unint64_t)v198
                                                                            + ~((_QWORD)v198 << 32)) >> 22);
                  v202 = 9 * ((v201 + ~(v201 << 13)) ^ ((v201 + ~(v201 << 13)) >> 8));
                  v203 = (v202 ^ (v202 >> 15)) + ~((v202 ^ (v202 >> 15)) << 27);
                  v204 = v200 & ((v203 >> 31) ^ v203);
                  v205 = v199 + 24 * v204;
                  v206 = *(_QWORD **)v205;
                  if (*(_QWORD **)v205 != v198)
                  {
                    v207 = 1;
                    while (v206)
                    {
                      v204 = (v204 + v207) & v200;
                      v205 = v199 + 24 * v204;
                      v206 = *(_QWORD **)v205;
                      ++v207;
                      if (*(_QWORD **)v205 == v198)
                        goto LABEL_321;
                    }
                    v205 = v199 + 24 * *(unsigned int *)(v199 - 4);
                  }
LABEL_321:
                  if (v205 != v199 + 24 * *(unsigned int *)(v199 - 4) && *(_BYTE *)(v205 + 20))
                  {
                    v349 = *(_QWORD *)(v189 + 80) + 16 * v190;
                    v350 = *(_QWORD *)v349;
                    v351 = !*(_BYTE *)(v349 + 8) || v350 == 0;
                    v352 = !v351 && (v350 & 0xFFFE000000000002) == 0;
                    if (!v352
                      || ((v353 = 16 * (*(_DWORD *)v350 & 0xFFFFFFFE),
                           v354 = *(unsigned __int8 *)(v353 + 9),
                           (v354 - 39) <= 0xA)
                        ? (v355 = JSC::typedArrayModes[v354 - 39])
                        : (v355 = 1 << *(_BYTE *)(v353 + 8)),
                          v356 = JSC::DFG::ArrayMode::arrayModesThatPassFiltering((JSC::DFG::ArrayMode *)(v205 + 16)),
                          v357 = v356 | v355,
                          v9 = v455,
                          v357 != v356))
                    {
                      *(_WORD *)(v205 + 20) = 0;
                    }
                  }
                }
              }
              if (++v190 >= *(unsigned int *)(v189 + 92))
              {
                v10 = *((_QWORD *)v9 + 4);
                break;
              }
            }
          }
        }
      }
    }
    ++v186;
    v188 = *(unsigned int *)(v10 + 60);
    if (v186 < v188)
      continue;
    break;
  }
  v208 = (WTF *)v474;
  v471 = v10;
  v472 = (WTF *)v474;
  v473 = 8;
  if (!(_DWORD)v188)
  {
LABEL_474:
    LOBYTE(v210) = 0;
    return v210 & 1;
  }
  v209 = 0;
  v210 = 0;
  v211 = vdupq_n_s64(2uLL);
  v453 = v211;
  do
  {
    v212 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v209);
    if (v212)
    {
      v469 = v211;
      v470 = 0;
      if (*(_DWORD *)(v212 + 220))
      {
        v213 = 0;
        v214 = 0xFFFFFFFFLL;
        while (1)
        {
          v224 = *(_QWORD *)(*(_QWORD *)(v212 + 208) + 8 * v213);
          if (*(_BYTE *)(v224 + 16))
          {
            if (&v469 != (int64x2_t *)v224)
            {
              if ((v469.i8[0] & 1) != 0 && (v469.i64[0] & 0xFFFFFFFF8) != 0)
              {
                v330 = v208;
                v331 = v210;
                WTF::fastFree(v469.i64[0] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
                v210 = v331;
                v211 = v453;
                v208 = v330;
              }
              v225 = *(_QWORD *)v224;
              if ((*(_QWORD *)v224 & 1) != 0)
              {
                v332 = *(_QWORD *)(v225 & 0xFFFFFFFF8);
                if ((v225 & 2) != 0
                  || ((v333 = *(unsigned int *)((v225 & 0xFFFFFFFF8) + 8), (_DWORD)v333 != 0x3FFFFFFF)
                    ? (v334 = (_DWORD)v333 == -1)
                    : (v334 = 1),
                      v334))
                {
                  v335 = 2;
                }
                else if (v333 >> 28)
                {
                  v402 = v208;
                  v447 = v210;
                  v403 = WTF::fastMalloc((WTF *)0x10);
                  v210 = v447;
                  v211 = v453;
                  v208 = v402;
                  *(_QWORD *)v403 = v332;
                  *(_DWORD *)(v403 + 8) = v333;
                  v335 = 1;
                  v332 = v403;
                }
                else
                {
                  v335 = *(_QWORD *)(v225 & 0xFFFFFFFF8);
                  v332 = v333 << 36;
                }
                v225 = v332 | v335;
                v9 = v455;
              }
              v469.i64[0] = v225;
              if ((v469.i8[8] & 1) != 0 && (v469.i64[1] & 0xFFFFFFFF8) != 0)
              {
                v336 = v208;
                v337 = v210;
                WTF::fastFree(v469.i64[1] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
                v210 = v337;
                v211 = v453;
                v208 = v336;
              }
              v226 = *(_QWORD *)(v224 + 8);
              if ((v226 & 1) != 0)
              {
                v338 = *(_QWORD *)(v226 & 0xFFFFFFFF8);
                if ((v226 & 2) != 0
                  || ((v339 = *(unsigned int *)((v226 & 0xFFFFFFFF8) + 8), (_DWORD)v339 != 0x3FFFFFFF)
                    ? (v340 = (_DWORD)v339 == -1)
                    : (v340 = 1),
                      v340))
                {
                  v341 = 2;
                }
                else if (v339 >> 28)
                {
                  v404 = v208;
                  v448 = v210;
                  v405 = WTF::fastMalloc((WTF *)0x10);
                  v210 = v448;
                  v211 = v453;
                  v208 = v404;
                  *(_QWORD *)v405 = v338;
                  *(_DWORD *)(v405 + 8) = v339;
                  v341 = 1;
                  v338 = v405;
                }
                else
                {
                  v341 = *(_QWORD *)(v226 & 0xFFFFFFFF8);
                  v338 = v339 << 36;
                }
                v226 = v338 | v341;
                v9 = v455;
              }
              v469.i64[1] = v226;
            }
            v470 = *(_WORD *)(v224 + 16);
            v214 = v213;
          }
          v227 = *(unsigned __int16 *)(v224 + 18);
          if (v227 != 16)
          {
            if (v227 != 38)
              goto LABEL_348;
            v240 = *(uint64_t **)(v224 + 72);
            v241 = v240;
            do
            {
              v242 = (uint64_t)v241;
              v241 = (uint64_t *)*v241;
            }
            while (v241);
            if ((uint64_t *)v242 != v240)
              *v240 = v242;
            v243 = *((_QWORD *)v9 + 9);
            if (!v243)
              goto LABEL_348;
            v244 = *(_DWORD *)(v243 - 8);
            v245 = (~(v242 << 32) + v242) ^ ((unint64_t)(~(v242 << 32) + v242) >> 22);
            v246 = 9 * ((v245 + ~(v245 << 13)) ^ ((v245 + ~(v245 << 13)) >> 8));
            v247 = (v246 ^ (v246 >> 15)) + ~((v246 ^ (v246 >> 15)) << 27);
            v248 = v244 & ((v247 >> 31) ^ v247);
            v249 = (uint64_t *)(v243 + 24 * v248);
            v250 = *v249;
            if (*v249 != v242)
            {
              v251 = 1;
              while (v250)
              {
                v248 = (v248 + v251) & v244;
                v249 = (uint64_t *)(v243 + 24 * v248);
                v250 = *v249;
                ++v251;
                if (*v249 == v242)
                  goto LABEL_381;
              }
              v249 = (uint64_t *)(v243 + 24 * *(unsigned int *)(v243 - 4));
            }
LABEL_381:
            if (v249 == (uint64_t *)(v243 + 24 * *(unsigned int *)(v243 - 4)) || !v249[1] && !*((_BYTE *)v249 + 20))
              goto LABEL_348;
            v252 = *(_QWORD *)v224;
            v432 = v249;
            v449 = v208;
            if ((*(_QWORD *)v224 & 1) != 0)
            {
              v377 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
              if ((v252 & 2) != 0
                || ((v378 = *(unsigned int *)((v252 & 0xFFFFFFFF8) + 8), (_DWORD)v378 != 0x3FFFFFFF)
                  ? (v379 = (_DWORD)v378 == -1)
                  : (v379 = 1),
                    v379))
              {
                v380 = 2;
              }
              else
              {
                v443 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
                if (v378 >> 28)
                {
                  v412 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v412 = v443;
                  *(_DWORD *)(v412 + 8) = v378;
                  v380 = 1;
                  v377 = v412;
                }
                else
                {
                  v380 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
                  v377 = v378 << 36;
                }
              }
              v252 = v377 | v380;
              v9 = v455;
            }
            v253 = *(_QWORD *)(v224 + 8);
            v436 = v252;
            if ((v253 & 1) != 0)
            {
              v381 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
              if ((v253 & 2) != 0
                || ((v382 = *(unsigned int *)((v253 & 0xFFFFFFFF8) + 8), (_DWORD)v382 != 0x3FFFFFFF)
                  ? (v383 = (_DWORD)v382 == -1)
                  : (v383 = 1),
                    v383))
              {
                v384 = 2;
              }
              else
              {
                v444 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
                if (v382 >> 28)
                {
                  v413 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v413 = v444;
                  *(_DWORD *)(v413 + 8) = v382;
                  v384 = 1;
                  v381 = v413;
                }
                else
                {
                  v384 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
                  v381 = v382 << 36;
                }
                v252 = v436;
              }
              v253 = v381 | v384;
              v9 = v455;
            }
            v254 = *(_WORD *)(v224 + 16);
            v255 = (_QWORD *)v242;
            if (!(_BYTE)v254)
            {
              __break(0xC471u);
              JUMPOUT(0x198555618);
            }
            do
            {
              v256 = v255;
              v255 = (_QWORD *)*v255;
            }
            while (v255);
            if (v256 != (_QWORD *)v242)
              *(_QWORD *)v242 = v256;
            v257 = v256[1];
            v258 = v252;
            v433 = v253;
            v431 = v254;
            if ((v252 & 1) != 0)
            {
              v385 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
              if ((v252 & 2) != 0
                || ((v386 = *(unsigned int *)((v252 & 0xFFFFFFFF8) + 8), (_DWORD)v386 != 0x3FFFFFFF)
                  ? (v387 = (_DWORD)v386 == -1)
                  : (v387 = 1),
                    v387))
              {
                v388 = 2;
              }
              else
              {
                v429 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
                v445 = v257;
                if (v386 >> 28)
                {
                  v414 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v414 = v429;
                  *(_DWORD *)(v414 + 8) = v386;
                  v388 = 1;
                  v385 = v414;
                }
                else
                {
                  v388 = *(_QWORD *)(v252 & 0xFFFFFFFF8);
                  v385 = v386 << 36;
                }
                v253 = v433;
                v254 = v431;
                v257 = v445;
              }
              v258 = v385 | v388;
              v9 = v455;
            }
            v466 = v258;
            v259 = v253;
            if ((v253 & 1) != 0)
            {
              v389 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
              if ((v253 & 2) != 0
                || (v390 = *(unsigned int *)((v253 & 0xFFFFFFFF8) + 8), (_DWORD)v390 == 0x3FFFFFFF)
                || (_DWORD)v390 == -1)
              {
                v391 = 2;
              }
              else
              {
                v430 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
                v446 = v257;
                if (v390 >> 28)
                {
                  v415 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v415 = v430;
                  *(_DWORD *)(v415 + 8) = v390;
                  v391 = 1;
                  v389 = v415;
                }
                else
                {
                  v391 = *(_QWORD *)(v253 & 0xFFFFFFFF8);
                  v389 = v390 << 36;
                }
                v254 = v431;
                v257 = v446;
              }
              v259 = v389 | v391;
              v9 = v455;
            }
            v467 = v259;
            v468 = v254;
            v428 = v213 + 1;
            v439 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v471, v213 + 1, v257, 0xFu, (uint64_t)&v466, v242, v224 & 0xFF00FFFFFFFFFFFFLL);
            if ((v467 & 1) != 0 && (v467 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v467 & 0xFFFFFFFF8, v260, (uint64_t)v261, v262, v263, v264, v265, v266);
            if ((v466 & 1) != 0 && (v466 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v466 & 0xFFFFFFFF8, v260, (uint64_t)v261, v262, v263, v264, v265, v266);
            v267 = v432;
            if (v432[1])
            {
              v268 = *(_QWORD **)(v224 + 72);
              v269 = v268;
              v270 = v433;
              do
              {
                v271 = v269;
                v269 = (_QWORD *)*v269;
              }
              while (v269);
              if (v271 != v268)
                *v268 = v271;
              v272 = v271[3];
              v273 = (_QWORD *)(*(_QWORD *)v224 & 0xFFFFFFFF8);
              if ((*(_QWORD *)v224 & 1) != 0)
                v273 = (_QWORD *)*v273;
              if (v273)
                LODWORD(v273) = HIDWORD(v273[3]) & 0xFFFFF | ((int)(v273[3] >> 28) >> 24 << 20);
              if ((_DWORD)v272 - (_DWORD)v273 == 5)
                v274 = 133;
              else
                v274 = 132;
              v425 = v274;
              v275 = v436;
              if ((v436 & 1) != 0)
              {
                v392 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
                if ((v436 & 2) != 0
                  || (v393 = *(unsigned int *)((v436 & 0xFFFFFFFF8) + 8), (_DWORD)v393 == 0x3FFFFFFF)
                  || (_DWORD)v393 == -1)
                {
                  v394 = 2;
                }
                else
                {
                  v421 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
                  if (v393 >> 28)
                  {
                    v416 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v416 = v421;
                    *(_DWORD *)(v416 + 8) = v393;
                    v394 = 1;
                    v392 = v416;
                  }
                  else
                  {
                    v394 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
                    v392 = v393 << 36;
                  }
                  v267 = v432;
                  v270 = v433;
                }
                v275 = v392 | v394;
                v9 = v455;
              }
              v463 = v275;
              v276 = v270;
              if ((v270 & 1) != 0)
              {
                v395 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
                if ((v270 & 2) != 0
                  || (v396 = *(unsigned int *)((v270 & 0xFFFFFFFF8) + 8), (_DWORD)v396 == 0x3FFFFFFF)
                  || (_DWORD)v396 == -1)
                {
                  v397 = 2;
                }
                else
                {
                  v422 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
                  if (v396 >> 28)
                  {
                    v417 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v417 = v422;
                    *(_DWORD *)(v417 + 8) = v396;
                    v397 = 1;
                    v395 = v417;
                  }
                  else
                  {
                    v397 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
                    v395 = v396 << 36;
                  }
                  v267 = v432;
                }
                v276 = v395 | v397;
                v9 = v455;
              }
              v464 = v276;
              v465 = v431;
              v277 = *((_QWORD *)v9 + 4);
              v476[0] = v267[1];
              v278 = JSC::DFG::Graph::addStructureSet(v277, (unint64_t *)v476, v261, v262, v263, v264, v265, v266);
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v471, v428, 0, v425, (uint64_t)&v463, (uint64_t)v278, v439 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
              if ((v476[0] & 1) != 0)
                WTF::fastFree(v476[0] & 0xFFFFFFFFFFFFFFFCLL, v279, v280, v281, v282, v283, v284, v285);
              if ((v464 & 1) != 0 && (v464 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v464 & 0xFFFFFFFF8, v279, v280, v281, v282, v283, v284, v285);
              v286 = v463;
              if ((v463 & 1) == 0)
                goto LABEL_411;
LABEL_562:
              if ((v286 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v286 & 0xFFFFFFFF8, v279, v280, v281, v282, v283, v284, v285);
              goto LABEL_411;
            }
            v358 = v433;
            if (!*((_BYTE *)v432 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x1985559B8);
            }
            v359 = *(_QWORD **)(v224 + 72);
            v360 = v359;
            do
            {
              v361 = v360;
              v360 = (_QWORD *)*v360;
            }
            while (v360);
            if (v361 != v359)
              *v359 = v361;
            v362 = v361[3];
            v363 = (_QWORD *)(*(_QWORD *)v224 & 0xFFFFFFFF8);
            if ((*(_QWORD *)v224 & 1) != 0)
              v363 = (_QWORD *)*v363;
            if (v363)
              LODWORD(v363) = HIDWORD(v363[3]) & 0xFFFFF | ((int)(v363[3] >> 28) >> 24 << 20);
            if ((_DWORD)v362 - (_DWORD)v363 == 5)
              v364 = 141;
            else
              v364 = 140;
            v365 = v436;
            if ((v436 & 1) != 0)
            {
              v426 = v364;
              v423 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
              if ((v436 & 2) != 0
                || (v408 = *(unsigned int *)((v436 & 0xFFFFFFFF8) + 8), (_DWORD)v408 == 0x3FFFFFFF)
                || (_DWORD)v408 == -1)
              {
                v409 = 2;
              }
              else if (v408 >> 28)
              {
                v419 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v419 = v423;
                *(_DWORD *)(v419 + 8) = v408;
                v409 = 1;
                v423 = v419;
              }
              else
              {
                v409 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
                v423 = v408 << 36;
              }
              v365 = v423 | v409;
              v364 = v426;
              v9 = v455;
              v267 = v432;
              v358 = v433;
            }
            v460 = v365;
            v366 = v358;
            if ((v358 & 1) != 0)
            {
              v427 = v364;
              v424 = *(_QWORD *)(v433 & 0xFFFFFFFF8);
              if ((v433 & 2) != 0
                || (v410 = *(unsigned int *)((v433 & 0xFFFFFFFF8) + 8), (_DWORD)v410 == 0x3FFFFFFF)
                || (_DWORD)v410 == -1)
              {
                v411 = 2;
              }
              else if (v410 >> 28)
              {
                v420 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v420 = v424;
                *(_DWORD *)(v420 + 8) = v410;
                v411 = 1;
                v424 = v420;
              }
              else
              {
                v411 = *(_QWORD *)(v433 & 0xFFFFFFFF8);
                v424 = v410 << 36;
              }
              v366 = v424 | v411;
              v364 = v427;
              v9 = v455;
              v267 = v432;
            }
            v461 = v366;
            v462 = v431;
            JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v471, v428, 0, v364, (uint64_t)&v460, *((unsigned int *)v267 + 4), v439 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
            if ((v461 & 1) != 0 && (v461 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v461 & 0xFFFFFFFF8, v279, v280, v281, v282, v283, v284, v285);
            v286 = v460;
            if ((v460 & 1) != 0)
              goto LABEL_562;
LABEL_411:
            v287 = *(_QWORD *)(v242 + 24);
            if (HIDWORD(v287) == 2)
            {
              v288 = *(unsigned int *)(v212 + 112) + (uint64_t)(int)v287 + *(unsigned int *)(v212 + 116);
LABEL_414:
              v289 = *(_QWORD *)(v212 + 96);
              if (*(_QWORD *)(v289 + 8 * v288) == v224)
LABEL_516:
                *(_QWORD *)(v289 + 8 * v288) = v439;
            }
            else
            {
              if ((v287 & 0x80000000) != 0)
              {
                v288 = (*(_QWORD *)(v242 + 24) ^ 0xFFFFFFFFLL) + *(unsigned int *)(v212 + 112);
                goto LABEL_414;
              }
              v342 = ((unint64_t)v287 << 32) - 0x500000000;
              v289 = *(_QWORD *)(v212 + 96);
              if (*(_QWORD *)(v289 + (v342 >> 29)) == v224)
              {
                v288 = v342 >> 32;
                goto LABEL_516;
              }
            }
            JSC::DFG::Graph::substituteGetLocal(*((_QWORD *)v9 + 4), v212, v213, (_QWORD *)v242, v439);
            if ((v433 & 1) != 0 && (v433 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v433 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
            v290 = v436;
            if ((v436 & 1) == 0)
              goto LABEL_417;
            goto LABEL_571;
          }
          v228 = *(_QWORD **)(v224 + 72);
          v229 = v228;
          do
          {
            v230 = v229;
            v229 = (_QWORD *)*v229;
          }
          while (v229);
          if (v230 != v228)
            *v228 = v230;
          v231 = *((_QWORD *)v9 + 9);
          if (!v231)
            goto LABEL_348;
          v232 = *(_DWORD *)(v231 - 8);
          v233 = ((unint64_t)v230 + ~((_QWORD)v230 << 32)) ^ (((unint64_t)v230 + ~((_QWORD)v230 << 32)) >> 22);
          v234 = 9 * ((v233 + ~(v233 << 13)) ^ ((v233 + ~(v233 << 13)) >> 8));
          v235 = (v234 ^ (v234 >> 15)) + ~((v234 ^ (v234 >> 15)) << 27);
          v236 = v232 & ((v235 >> 31) ^ v235);
          v237 = v231 + 24 * v236;
          v238 = *(_QWORD **)v237;
          if (*(_QWORD **)v237 != v230)
          {
            v239 = 1;
            while (v238)
            {
              v236 = (v236 + v239) & v232;
              v237 = v231 + 24 * v236;
              v238 = *(_QWORD **)v237;
              ++v239;
              if (*(_QWORD **)v237 == v230)
                goto LABEL_367;
            }
            v237 = v231 + 24 * *(unsigned int *)(v231 - 4);
          }
LABEL_367:
          if (v237 == v231 + 24 * *(unsigned int *)(v231 - 4) || !*(_QWORD *)(v237 + 8) && !*(_BYTE *)(v237 + 20))
            goto LABEL_348;
          v291 = *(_QWORD *)v224;
          v449 = v208;
          if ((*(_QWORD *)v224 & 1) != 0)
          {
            v368 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
            if ((v291 & 2) != 0
              || ((v369 = *(unsigned int *)((v291 & 0xFFFFFFFF8) + 8), (_DWORD)v369 != 0x3FFFFFFF)
                ? (v370 = (_DWORD)v369 == -1)
                : (v370 = 1),
                  v370))
            {
              v371 = 2;
            }
            else
            {
              v442 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
              if (v369 >> 28)
              {
                v368 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v368 = v442;
                *(_DWORD *)(v368 + 8) = v369;
                v371 = 1;
              }
              else
              {
                v371 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
                v368 = v369 << 36;
              }
            }
            v291 = v368 | v371;
            v9 = v455;
          }
          v292 = *(_QWORD *)(v224 + 8);
          v440 = v291;
          if ((v292 & 1) != 0)
          {
            v372 = *(_QWORD *)(v292 & 0xFFFFFFFF8);
            if ((v292 & 2) != 0
              || ((v373 = *(_DWORD *)((v292 & 0xFFFFFFFF8) + 8), v373 != 0x3FFFFFFF)
                ? (v374 = v373 == -1)
                : (v374 = 1),
                  v374))
            {
              v375 = 2;
            }
            else
            {
              v438 = *(_QWORD *)(v292 & 0xFFFFFFFF8);
              if (v373 >> 28)
              {
                v372 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v372 = v438;
                *(_DWORD *)(v372 + 8) = v373;
                v375 = 1;
              }
              else
              {
                v375 = *(_QWORD *)(v292 & 0xFFFFFFFF8);
                v372 = 0;
              }
              v291 = v440;
            }
            v292 = v372 | v375;
            v9 = v455;
          }
          v293 = *(_QWORD *)(v224 + 24);
          v437 = v292;
          if (*(_QWORD *)(v237 + 8))
          {
            v294 = v291;
            if ((v291 & 1) != 0)
            {
              v398 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
              if ((v291 & 2) != 0
                || (v399 = *(unsigned int *)((v291 & 0xFFFFFFFF8) + 8), (_DWORD)v399 == 0x3FFFFFFF)
                || (_DWORD)v399 == -1)
              {
                v400 = 2;
              }
              else
              {
                v434 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
                if (v399 >> 28)
                {
                  v398 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v398 = v434;
                  *(_DWORD *)(v398 + 8) = v399;
                  v400 = 1;
                }
                else
                {
                  v400 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
                  v398 = v399 << 36;
                }
              }
              v294 = v398 | v400;
              v9 = v455;
            }
            v458.i64[0] = v294;
            JSC::DFG::NodeOrigin::withSemantic((uint64_t)&v469, &v458, a3, a4, a5, v15, v84, a9, (int64x2_t *)&v458.u64[1]);
            v295 = *((_QWORD *)v9 + 4);
            v476[0] = *(_QWORD *)(v237 + 8);
            v302 = JSC::DFG::Graph::addStructureSet(v295, (unint64_t *)v476, v296, v297, v298, v299, v300, v301);
            JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v471, v214, 0, 0x85u, (uint64_t)&v458.i64[1], (uint64_t)v302, v293 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
            if ((v476[0] & 1) != 0)
              WTF::fastFree(v476[0] & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, v15, v84, a9);
            if ((v459 & 1) != 0 && (v459 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v459 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
            if ((v458.i8[8] & 1) != 0 && (v458.i64[1] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v458.i64[1] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
            v303 = v458.i64[0];
            v208 = v449;
            v211 = v453;
            if ((v458.i8[0] & 1) != 0)
              goto LABEL_528;
          }
          else
          {
            if (!*(_BYTE *)(v237 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x1985559F4);
            }
            v344 = v291;
            if ((v291 & 1) != 0)
            {
              v435 = *(_QWORD *)(v440 & 0xFFFFFFFF8);
              if ((v440 & 2) != 0
                || (v406 = *(unsigned int *)((v440 & 0xFFFFFFFF8) + 8), (_DWORD)v406 == 0x3FFFFFFF)
                || (_DWORD)v406 == -1)
              {
                v407 = 2;
              }
              else if (v406 >> 28)
              {
                v418 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v418 = v435;
                *(_DWORD *)(v418 + 8) = v406;
                v407 = 1;
                v435 = v418;
              }
              else
              {
                v407 = *(_QWORD *)(v440 & 0xFFFFFFFF8);
                v435 = v406 << 36;
              }
              v344 = v435 | v407;
              v9 = v455;
            }
            v456.i64[0] = v344;
            JSC::DFG::NodeOrigin::withSemantic((uint64_t)&v469, &v456, a3, a4, a5, v15, v84, a9, (int64x2_t *)&v456.u64[1]);
            JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v471, v214, 0, 0x8Du, (uint64_t)&v456.i64[1], *(unsigned int *)(v237 + 16), v293 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
            if ((v457 & 1) != 0 && (v457 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v457 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
            v208 = v449;
            v211 = v453;
            if ((v456.i8[8] & 1) != 0 && (v456.i64[1] & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v456.i64[1] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
              v211 = v453;
              v208 = v449;
            }
            v303 = v456.i64[0];
            if ((v456.i8[0] & 1) != 0)
            {
LABEL_528:
              if ((v303 & 0xFFFFFFFF8) != 0)
              {
                WTF::fastFree(v303 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
                v208 = v449;
                v211 = v453;
              }
            }
          }
          if ((v437 & 1) != 0 && (v437 & 0xFFFFFFFF8) != 0)
          {
            v376 = v208;
            WTF::fastFree(v437 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
            v211 = v453;
            v208 = v376;
          }
          v290 = v440;
          if ((v440 & 1) == 0)
          {
            v210 = 1;
            goto LABEL_348;
          }
LABEL_571:
          if ((v290 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v290 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
LABEL_417:
          v210 = 1;
          v208 = v449;
          v211 = v453;
LABEL_348:
          ++v213;
          v215 = *(unsigned int *)(v212 + 220);
          if (v213 >= v215)
            goto LABEL_330;
        }
      }
      v215 = 0;
LABEL_330:
      v216 = HIDWORD(v473);
      if (HIDWORD(v473))
      {
        v217 = v215 + HIDWORD(v473);
        v218 = *(unsigned int *)(v212 + 216);
        if (v217 > v218)
        {
          v307 = v218 + (v218 >> 2);
          if (v307 >= 0x10)
            v308 = v307 + 1;
          else
            v308 = 16;
          if (v308 <= v217)
            v309 = v215 + HIDWORD(v473);
          else
            v309 = v308;
          v310 = *(const void **)(v212 + 208);
          v450 = v208;
          v441 = v210;
          if (v309 < 9)
          {
            v311 = (void *)(v212 + 224);
            *(_QWORD *)(v212 + 208) = v212 + 224;
            *(_DWORD *)(v212 + 216) = 8;
          }
          else
          {
            if (v309 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198555D2CLL);
            }
            v311 = (void *)WTF::fastMalloc((WTF *)(8 * v309));
            *(_DWORD *)(v212 + 216) = v309;
            *(_QWORD *)(v212 + 208) = v311;
          }
          memcpy(v311, v310, 8 * v215);
          v312 = (const void *)(v212 + 224) == v310 || v310 == 0;
          v9 = v455;
          v208 = v450;
          v211 = v453;
          v210 = v441;
          if (!v312)
          {
            if (*(const void **)(v212 + 208) == v310)
            {
              *(_QWORD *)(v212 + 208) = 0;
              *(_DWORD *)(v212 + 216) = 0;
            }
            WTF::fastFree((unint64_t)v310, (void *)a2, a3, a4, a5, v15, v84, a9);
            v208 = v450;
            v211 = v453;
            v210 = v441;
          }
        }
        *(_DWORD *)(v212 + 220) = v217;
        if (v216 - 1 >= (unint64_t)HIDWORD(v473))
        {
          __break(0xC471u);
          JUMPOUT(0x198555D24);
        }
        v219 = ~v216;
        v220 = v217;
        do
        {
          --v216;
          v221 = *((_QWORD *)v472 + 2 * v216) + v216;
          v222 = v220 - 1;
          if (v220 - 1 > v221)
          {
            v223 = v220 + v219;
            do
            {
              if (v217 <= v223)
              {
                __break(0xC471u);
                JUMPOUT(0x198555CDCLL);
              }
              if (v217 <= v222)
              {
                __break(0xC471u);
                JUMPOUT(0x198555CE4);
              }
              *(_QWORD *)(*(_QWORD *)(v212 + 208) + 8 * v222--) = *(_QWORD *)(*(_QWORD *)(v212 + 208) + 8 * v223--);
            }
            while (v222 > v221);
          }
          if (v217 <= v221)
          {
            __break(0xC471u);
            JUMPOUT(0x198555CFCLL);
          }
          *(_QWORD *)(*(_QWORD *)(v212 + 208) + 8 * v221) = *((_QWORD *)v472 + 2 * v216 + 1);
          ++v219;
          v220 = v221;
        }
        while (v216);
        HIDWORD(v473) = 0;
      }
      if ((v469.i8[8] & 1) != 0 && (v469.i64[1] & 0xFFFFFFFF8) != 0)
      {
        v345 = v208;
        v346 = v210;
        WTF::fastFree(v469.i64[1] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
        v210 = v346;
        v211 = v453;
        v208 = v345;
      }
      if ((v469.i8[0] & 1) != 0 && (v469.i64[0] & 0xFFFFFFFF8) != 0)
      {
        v347 = v208;
        v348 = v210;
        WTF::fastFree(v469.i64[0] & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, v15, v84, a9);
        v210 = v348;
        v211 = v453;
        v208 = v347;
      }
      v10 = *((_QWORD *)v9 + 4);
    }
    ++v209;
  }
  while (v209 < *(unsigned int *)(v10 + 60));
  v304 = v472;
  if (v208 != v472 && v472 != 0)
  {
    v472 = 0;
    LODWORD(v473) = 0;
    v343 = v210;
    WTF::fastFree((unint64_t)v304, (void *)a2, a3, a4, a5, v15, v84, a9);
    LOBYTE(v210) = v343;
  }
  return v210 & 1;
}

_QWORD *JSC::DFG::TypeCheckHoistingPhase::noticeStructureCheck(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  __int16 v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  if ((a3 & 1) != 0)
  {
    if (*(_DWORD *)(a3 & 0xFFFFFFFFFFFFFFFCLL) == 1)
    {
      v3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_4;
    }
  }
  else if (a3 > 3)
  {
    v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_4:
    v11 = a2;
    v6 = v3;
    v7 = 268500992;
    v8 = 256;
    result = WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::add<JSC::DFG::CheckData>(v9, (uint64_t *)(a1 + 72), &v11, (uint64_t *)&v6);
    if (v10)
      return result;
    v5 = v9[0];
    if (*(_QWORD *)(v9[0] + 8) == v3)
      return result;
LABEL_11:
    *(_QWORD *)(v5 + 8) = 0;
    return result;
  }
  v11 = a2;
  v6 = 0;
  v7 = 268500992;
  v8 = 256;
  result = WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::add<JSC::DFG::CheckData>(v9, (uint64_t *)(a1 + 72), &v11, (uint64_t *)&v6);
  if (!v10)
  {
    v5 = v9[0];
    if (*(_QWORD *)(v9[0] + 8))
      goto LABEL_11;
  }
  return result;
}

uint64_t JSC::DFG::Graph::voteChildren(uint64_t this, JSC::DFG::Node *a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float *v9;
  int v10;
  unint64_t v11;
  int v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;

  v3 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v16 = (*((_DWORD *)a2 + 8) + v3);
    if (v16 > v3)
    {
      v17 = *(_DWORD *)(this + 164);
      v18 = *((_QWORD *)a2 + 3);
      if (v17 <= v3)
        v3 = v3;
      else
        v3 = v17;
      while (v18 != v3)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(this + 152) + 8 * v18) & 0xFF00FFFFFFFFFFFFLL;
        if (v19)
        {
          v20 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(this + 152) + 8 * v18) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if ((v20 & 0xFFFE) == 0x36)
          {
            v19 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(this + 152) + 8 * v18) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
            v20 = *(unsigned __int16 *)(v19 + 0x12);
          }
          if (v20 == 15)
          {
            v21 = *(float **)(v19 + 72);
            v22 = v21;
            do
            {
              v23 = v22;
              v22 = *(float **)v22;
            }
            while (v22);
            if (v23 != v21)
              *(_QWORD *)v21 = v23;
            v23[12] = v23[12] + 1.0;
          }
        }
        if (++v18 == v16)
          return this;
      }
      __break(0xC471u);
    }
  }
  else
  {
    v4 = v3 & 0xFF00FFFFFFFFFFFFLL;
    if ((v3 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v5 = *(unsigned __int16 *)((v3 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if ((v5 & 0xFFFE) == 0x36)
      {
        v4 = *(_QWORD *)((v3 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
        v5 = *(unsigned __int16 *)(v4 + 0x12);
      }
      if (v5 == 15)
      {
        v7 = *(float **)(v4 + 72);
        v8 = v7;
        do
        {
          v9 = v8;
          v8 = *(float **)v8;
        }
        while (v8);
        if (v9 != v7)
          *(_QWORD *)v7 = v9;
        v9[12] = v9[12] + 1.0;
      }
      v6 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
      if (v6)
      {
        v10 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if ((v10 & 0xFFFE) == 0x36)
        {
          v6 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
          v10 = *(unsigned __int16 *)(v6 + 0x12);
        }
        if (v10 == 15)
        {
          v24 = *(float **)(v6 + 72);
          v25 = v24;
          do
          {
            v26 = v25;
            v25 = *(float **)v25;
          }
          while (v25);
          if (v26 != v24)
            *(_QWORD *)v24 = v26;
          v26[12] = v26[12] + 1.0;
        }
        v11 = *((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL;
        if (v11)
        {
          v12 = *(unsigned __int16 *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if ((v12 & 0xFFFE) == 0x36)
          {
            v11 = *(_QWORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
            v12 = *(unsigned __int16 *)(v11 + 0x12);
          }
          if (v12 == 15)
          {
            v13 = *(float **)(v11 + 72);
            v14 = v13;
            do
            {
              v15 = v14;
              v14 = *(float **)v14;
            }
            while (v14);
            if (v15 != v13)
              *(_QWORD *)v13 = v15;
            v15[12] = v15[12] + 1.0;
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::add<JSC::DFG::CheckData>(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::VariableAccessData *,WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>>,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::VariableAccessData *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 24 * v29;
        goto LABEL_21;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 268500992;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *(_QWORD *)((char *)v16 + 14) = *(uint64_t *)((char *)a4 + 6);
  v16[1] = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v30 = 8;
LABEL_31:
      result = WTF::HashTable<JSC::DFG::VariableAccessData *,WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>>,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::VariableAccessData *>>::rehash(a2, v30, v16);
      v16 = result;
      v23 = *a2;
      if (*a2)
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      else
        LODWORD(v26) = 0;
      goto LABEL_17;
    }
LABEL_28:
    v30 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_17:
  v27 = v23 + 24 * v26;
  v28 = 1;
LABEL_21:
  *v7 = v16;
  v7[1] = v27;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::VariableAccessData *,WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData>>,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::VariableAccessData *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  __int128 v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 32);
    do
    {
      *(v18 - 2) = 0;
      *(v18 - 1) = 0;
      *v18 = 268500992;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (_QWORD *)(v6 + 24 * v21);
      if ((unint64_t)(*v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(*v22 << 32) + *v22) ^ ((~(*v22 << 32) + *v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = (_QWORD *)(v23 + 24 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (*v30);
        v31 = *(_OWORD *)v22;
        v30[2] = v22[2];
        *(_OWORD *)v30 = v31;
        if (v22 == a3)
          v19 = v30;
      }
      ++v21;
    }
    while (v21 != v7);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

_QWORD *JSC::DFG::TypeCheckHoistingPhase::noticeCheckArray(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = a2;
  v7 = 0;
  v8 = a3;
  v9 = 257;
  result = WTF::HashMap<JSC::DFG::VariableAccessData *,JSC::DFG::CheckData,WTF::DefaultHash<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::VariableAccessData *>,WTF::HashTraits<JSC::DFG::CheckData>,WTF::HashTableTraits>::add<JSC::DFG::CheckData>(&v10, (uint64_t *)(a1 + 72), &v12, &v7);
  if (!v11)
  {
    v5 = v10;
    if (*(_BYTE *)(v10 + 21))
    {
      if (*(unsigned __int8 *)(v10 + 16) != a3
        || __PAIR64__(*(unsigned __int8 *)(v10 + 18), *(unsigned __int8 *)(v10 + 17)) != __PAIR64__(BYTE2(a3), BYTE1(a3))|| (v6 = *(unsigned __int8 *)(v10 + 19), ((v6 ^ HIBYTE(a3)) & 0xF) != 0)|| ((HIBYTE(a3) ^ v6) & 0x20) != 0|| ((((v6 & 0x40) == 0) ^ ((HIBYTE(a3) & 0x40) >> 6)) & 1) == 0)
      {
        if (*(_BYTE *)(v10 + 20))
        {
          *(_WORD *)(v10 + 20) = 0;
        }
        else
        {
          *(_DWORD *)(v10 + 16) = a3;
          *(_BYTE *)(v5 + 20) = 1;
        }
      }
    }
  }
  return result;
}

BOOL JSC::DFG::ArrayMode::structureWouldPassArrayModeFiltering(JSC::DFG::ArrayMode *this, JSC::Structure *a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *((unsigned __int8 *)a2 + 9);
  if ((v2 - 39) <= 0xA)
    v3 = JSC::typedArrayModes[v2 - 39];
  else
    v3 = 1 << *((_BYTE *)a2 + 8);
  v4 = JSC::DFG::ArrayMode::arrayModesThatPassFiltering(this);
  return (v4 | v3) == v4;
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::UnificationPhase>(JSC::DFG::UnificationPhase *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  double v13;
  char v14;
  __int128 *v15;

  v11[0] = "DFG";
  v11[1] = 4;
  v12 = *(_OWORD *)((char *)this + 40);
  v13 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v7 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 != -1)
    {
      *(_QWORD *)&v10 = &v14;
      v15 = &v10;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v8) = dword_1ECF4400C;
    v13 = (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0);
  }
  v2 = JSC::DFG::UnificationPhase::run((uint64_t)this);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 4);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v4 = (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 16) & 0xFFFFFFFE) == 4) : (v4 = 0),
          !v4 ? (v5 = BYTE2(qword_1ECF4C32A) == 0) : (v5 = 0),
          !v5))
    {
      v10 = *(_OWORD *)((char *)this + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v3 + 1088, "Phase ", (uint64_t)&v10, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v11);
  return v2;
}

uint64_t JSC::DFG::UnificationPhase::run(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  int v77;
  int v78;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_DWORD *)(v1 + 60);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 48);
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 8 * --v2);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 36);
        if (v5)
          break;
      }
LABEL_65:
      if (!v2)
        goto LABEL_66;
    }
    v6 = *(_QWORD *)(v4 + 24);
    while (1)
    {
      v7 = *(_QWORD **)(v6 + 8 * --v5);
      v8 = v7[3] & 0xFF00FFFFFFFFFFFFLL;
      if (v8)
      {
        v9 = (_QWORD *)v7[9];
        v10 = v9;
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
        if (v11 != v9)
          *v9 = v11;
        v12 = *(_QWORD **)(v8 + 72);
        v13 = v12;
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
        if (v14 != v12)
          *v12 = v14;
        v15 = v11;
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        if (v16 != v11)
          *v11 = v16;
        v17 = v14;
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
        if (v18 != v14)
          *v14 = v18;
        if (v16 == v18)
        {
          v19 = v7[4] & 0xFF00FFFFFFFFFFFFLL;
          if (v19)
            goto LABEL_26;
        }
        else
        {
          *v16 = v18;
          v19 = v7[4] & 0xFF00FFFFFFFFFFFFLL;
          if (v19)
          {
LABEL_26:
            v20 = (_QWORD *)v7[9];
            v21 = v20;
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
            if (v22 != v20)
              *v20 = v22;
            v23 = *(_QWORD **)(v19 + 72);
            v24 = v23;
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
            if (v25 != v23)
              *v23 = v25;
            v26 = v22;
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
            if (v27 != v22)
              *v22 = v27;
            v28 = v25;
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
            if (v29 != v25)
              *v25 = v29;
            if (v27 != v29)
              *v27 = v29;
            v30 = v7[5] & 0xFF00FFFFFFFFFFFFLL;
            if (v30)
            {
              v31 = (_QWORD *)v7[9];
              v32 = v31;
              do
              {
                v33 = v32;
                v32 = (_QWORD *)*v32;
              }
              while (v32);
              if (v33 != v31)
                *v31 = v33;
              v34 = *(_QWORD **)(v30 + 72);
              v35 = v34;
              do
              {
                v36 = v35;
                v35 = (_QWORD *)*v35;
              }
              while (v35);
              if (v36 != v34)
                *v34 = v36;
              v37 = v33;
              do
              {
                v38 = v37;
                v37 = (_QWORD *)*v37;
              }
              while (v37);
              if (v38 != v33)
                *v33 = v38;
              v39 = v36;
              do
              {
                v40 = v39;
                v39 = (_QWORD *)*v39;
              }
              while (v39);
              if (v40 != v36)
                *v36 = v40;
              if (v38 != v40)
                *v38 = v40;
            }
          }
        }
      }
      if (!v5)
        goto LABEL_65;
    }
  }
LABEL_66:
  v41 = *(_QWORD *)(v1 + 464);
  if (v41)
  {
    v42 = 0;
    v43 = 0;
    while (v42 >> 4 < *(unsigned int *)(v1 + 484))
    {
      v44 = *(_QWORD *)(*(_QWORD *)(v1 + 472) + 8 * (v42 >> 4));
      v45 = v42 & 0xF;
      v46 = (_QWORD *)(v44 + (v45 << 6));
      v47 = v46;
      do
      {
        v48 = v47;
        v47 = (_QWORD *)*v47;
      }
      while (v47);
      if (v48 != v46)
        *v46 = v48;
      v49 = *(_QWORD *)(v44 + (v45 << 6) + 8);
      v50 = v48;
      do
      {
        v51 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
      if (v51 != v48)
        *v48 = v51;
      v52 = v51[1];
      v53 = v52 | v49;
      v51[1] = v53;
      if (v53 != v52)
        v48[2] |= v48[1];
      v54 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
      if (v55 != v46)
        *v46 = v55;
      v56 = *((unsigned __int8 *)v55 + 41);
      v57 = (v56 | *(_BYTE *)(v44 + (v45 << 6) + 41));
      if (v56 != v57)
        *((_BYTE *)v55 + 41) = v57;
      v58 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v59 = v58;
        v58 = (_QWORD *)*v58;
      }
      while (v58);
      if (v59 != v46)
        *v46 = v59;
      v60 = *((unsigned __int8 *)v59 + 42);
      v61 = (v60 | *(_BYTE *)(v44 + (v45 << 6) + 42));
      if (v60 != v61)
        *((_BYTE *)v59 + 42) = v61;
      v62 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v63 = v62;
        v62 = (_QWORD *)*v62;
      }
      while (v62);
      if (v63 != v46)
        *v46 = v63;
      v64 = *((unsigned __int8 *)v63 + 40);
      v65 = (v64 | *(_BYTE *)(v44 + (v45 << 6) + 40));
      if (v65 != v64)
        *((_BYTE *)v63 + 40) = v65;
      v66 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v67 = v66;
        v66 = (_QWORD *)*v66;
      }
      while (v66);
      if (v67 != v46)
        *v46 = v67;
      v68 = *((unsigned __int8 *)v67 + 44);
      v69 = (v68 | *(_BYTE *)(v44 + (v45 << 6) + 44));
      if (v68 != v69)
        *((_BYTE *)v67 + 44) = v69;
      v70 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v71 = v70;
        v70 = (_QWORD *)*v70;
      }
      while (v70);
      if (v71 != v46)
        *v46 = v71;
      v72 = *((unsigned __int8 *)v71 + 43);
      v73 = (v72 | *(_BYTE *)(v44 + (v45 << 6) + 43));
      if (v72 != v73)
        *((_BYTE *)v71 + 43) = v73;
      v74 = (_QWORD *)(v44 + (v45 << 6));
      do
      {
        v75 = v74;
        v74 = (_QWORD *)*v74;
      }
      while (v74);
      if (v75 != v46)
        *v46 = v75;
      v76 = *(_DWORD *)(v44 + (v45 << 6) + 36);
      v77 = *((_DWORD *)v75 + 9);
      v78 = v77 | v76;
      if (v77 != v78)
        *((_DWORD *)v75 + 9) = v78;
      v42 = ++v43;
      if (v41 <= v43)
        goto LABEL_116;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_116:
    *(_DWORD *)(v1 + 948) = 1;
    return 1;
  }
  return this;
}

void JSC::DFG::validate(unsigned int *a1, void *a2, WTF **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  JSC::DFG *v19;
  int v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v19 = (JSC::DFG *)a1;
  v20 = (int)a2;
  v21 = v8;
  v22 = 0;
  v9 = a1[77];
  v23 = 0;
  v24 = 0;
  if ((_DWORD)v9)
  {
    if (v9 >> 30)
    {
      __break(0xC471u);
      return;
    }
    LODWORD(v24) = v9;
    v23 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
    v25 = 0;
    bzero(v23, 4 * v9);
  }
  else
  {
    v25 = 0;
  }
  HIDWORD(v24) = v9;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree((unint64_t)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
  if (v25)
    WTF::fastFree(v25 - 16, v10, v11, v12, v13, v14, v15, v16);
  v17 = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  }
  if (v22)
    WTF::fastFree(v22 - 16, v10, v11, v12, v13, v14, v15, v16);
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v18;
  }
}

void JSC::DFG::`anonymous namespace'::Validate::validate(JSC::DFG **this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG *v8;
  JSC::DFG::_anonymous_namespace_::Validate *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  JSC::DFG::_anonymous_namespace_::Validate **v17;
  uint64_t *v18;
  JSC::DFG::_anonymous_namespace_::Validate *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t StatusReg;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t mayExit;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _OWORD *impl_casual_case;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  _DWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  unsigned int v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  unsigned int v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  const char *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  int v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v198;
  uint64_t v200;
  uint64_t v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  char v215;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  int v227;
  BOOL v228;
  char v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  _BYTE *v240;
  uint64_t v241;
  unsigned int v242;
  unsigned __int16 *v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int *v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char **v291;
  _QWORD *v294;
  _QWORD *v295;
  unsigned int v296;
  unsigned __int8 *v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v313;
  unint64_t v314;
  _DWORD *v315;
  _DWORD *v316;
  uint64_t v317;
  _DWORD *v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  BOOL v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  unsigned int v331;
  int v332;
  int v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unsigned int v340;
  BOOL v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  BOOL v347;
  BOOL v348;
  uint64_t v349;
  unint64_t v350;
  int v351;
  BOOL v352;
  BOOL v353;
  unint64_t *v354;
  unint64_t *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  BOOL v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  int v367;
  BOOL v368;
  unsigned int v369;
  int v370;
  BOOL v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  int v375;
  unsigned int v377;
  int v378;
  int v380;
  BOOL v381;
  unsigned int v382;
  int v383;
  BOOL v384;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unsigned int v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unsigned int v412;
  uint64_t v413;
  _QWORD *v414;
  int v415;
  int v416;
  int v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  int v421;
  unsigned int v423;
  int v424;
  int v426;
  BOOL v427;
  unsigned int v428;
  int v429;
  BOOL v430;
  int v431;
  unsigned int v432;
  int v433;
  int v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  BOOL v439;
  unsigned int v440;
  int v441;
  BOOL v442;
  _QWORD *v443;
  int v444;
  uint64_t v445;
  int v446;
  unsigned int v448;
  int v449;
  _BYTE *v451;
  unint64_t *v452;
  unint64_t *v453;
  unint64_t *v454;
  unint64_t v455;
  uint64_t v456;
  JSC::DFG *v457;
  uint64_t v458;
  unint64_t v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  JSC::DFG::Node **v464;
  JSC::DFG::Node **v465;
  JSC::DFG::Node *v466;
  JSC::DFG::Graph *v467;
  uint64_t v468;
  _BYTE *v469;
  uint64_t v470;
  _QWORD *casual;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  _BYTE *v476;
  uint64_t v477;
  JSC::DFG::_anonymous_namespace_::Validate **v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  JSC::DFG::_anonymous_namespace_::Validate **v482;
  unsigned int v483;
  uint64_t v484;
  unint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int v489;
  uint64_t v490;
  unint64_t *v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _DWORD *v499;
  uint64_t *v500;
  uint64_t *v501;
  uint64_t v502;
  unint64_t v503;
  int v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unsigned int v508;
  _QWORD *v509;
  uint64_t v510;
  _QWORD *v511;
  int v512;
  int v513;
  int v514;
  uint64_t v515;
  unint64_t v516;
  unsigned int v517;
  _DWORD *v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t i;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unsigned int v532;
  int v533;
  unsigned int v534;
  uint64_t v535;
  JSC::DFG::_anonymous_namespace_::Validate *v536;
  uint64_t v537;
  const char *v538;
  const char *v539;
  const char *v540;
  const char *v541;
  uint64_t v542;
  int v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unsigned int v547;
  uint64_t v548;
  const char *v549;
  const char *v550;
  const char *v551;
  const char *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  const char *v561;
  const char *v562;
  const char *v563;
  const char *v564;
  const char *v565;
  const char *v566;
  const char *v567;
  JSC::DFG::Node *v568;
  const char *v569;
  uint64_t v570;
  const char *v571;
  const char *v572;
  const char *v573;
  const char *v574;
  const char *v575;
  const char *v576;
  const char *v577;
  const char *v578;
  const char *v579;
  const char *v580;
  const char *v581;
  const char *v582;
  const char *v583;
  const char *v584;
  const char *v585;
  const char *v586;
  const char *v587;
  const char *v588;
  const char *v589;
  JSC::DFG::BasicBlock *v590;
  const char *v591;
  const char *v592;
  JSC::DFG::Node *v593;
  const char *v594;
  const char *v595;
  JSC::DFG::Node *v596;
  const char *v597;
  const char *v598;
  JSC::DFG::Node *v599;
  const char *v600;
  const char *v601;
  JSC::DFG::Node *v602;
  const char *v603;
  const char *v604;
  JSC::DFG::Node *v605;
  const char *v606;
  const char *v607;
  JSC::DFG::Node *v608;
  const char *v609;
  const char *v610;
  JSC::DFG::Node *v611;
  const char *v612;
  const char *v613;
  JSC::DFG::Node *v614;
  const char *v615;
  const char *v616;
  const char *v617;
  const char *v618;
  JSC::DFG::Node *v619;
  const char *v620;
  const char *v621;
  JSC::DFG::Node *v622;
  const char *v623;
  const char *v624;
  JSC::DFG::Node *v625;
  const char *v626;
  const char *v627;
  JSC::DFG::Node *v628;
  const char *v629;
  const char *v630;
  const char *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  const char *v639;
  JSC::DFG::Node *v640;
  const char *v641;
  const char *v642;
  JSC::DFG::Node *v643;
  const char *v644;
  const char *v645;
  JSC::DFG::Node *v646;
  const char *v647;
  const char *v648;
  JSC::DFG::Node *v649;
  const char *v650;
  const char *v651;
  JSC::DFG::Node *v652;
  const char *v653;
  const char *v654;
  JSC::DFG::BasicBlock *v655;
  const char *v656;
  const char *v657;
  JSC::DFG::Node *v658;
  const char *v659;
  int v660;
  const char *v662;
  JSC::DFG::Node *v663;
  const char *v664;
  const char *v665;
  JSC::DFG::Node *v666;
  const char *v667;
  const char *v668;
  const char *v669;
  unsigned int v670;
  const char *v671;
  unsigned int v672;
  const char *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  const char *v681;
  JSC::DFG::BasicBlock *v682;
  const char *v683;
  const char *v684;
  JSC::DFG::Node *v685;
  const char *v686;
  const char *v687;
  JSC::DFG::Node *v688;
  const char *v689;
  const char *v690;
  JSC::DFG::Node *v691;
  const char *v692;
  const char *v693;
  JSC::DFG::Node *v694;
  const char *v695;
  const char *v696;
  JSC::DFG::Node *v697;
  const char *v698;
  const char *v699;
  JSC::DFG::Node *v700;
  const char *v701;
  const char *v702;
  JSC::DFG::Node *v703;
  const char *v704;
  const char *v705;
  JSC::DFG::Node *v706;
  const char *v707;
  const char *v708;
  JSC::DFG::Node *v709;
  const char *v710;
  const char *v711;
  JSC::DFG::Node *v712;
  const char *v713;
  const char *v714;
  JSC::DFG::Node *v715;
  const char *v716;
  const char *v717;
  JSC::DFG::Node *v718;
  const char *v719;
  const char *v720;
  JSC::DFG::Node *v721;
  const char *v722;
  const char *v723;
  JSC::DFG::Node *v724;
  const char *v725;
  const char *v726;
  JSC::DFG::Node *v727;
  const char *v728;
  const char *v729;
  JSC::DFG::Node *v730;
  const char *v731;
  const char *v732;
  JSC::DFG::Node *v733;
  const char *v734;
  const char *v735;
  JSC::DFG::Node *v736;
  const char *v737;
  const char *v738;
  JSC::DFG::Node *v739;
  const char *v740;
  const char *v741;
  JSC::DFG::Node *v742;
  const char *v743;
  const char *v744;
  JSC::DFG::Node *v745;
  const char *v746;
  const char *v747;
  JSC::DFG::Node *v748;
  const char *v749;
  const char *v750;
  JSC::DFG::Node *v751;
  const char *v752;
  const char *v753;
  JSC::DFG::Node *v754;
  const char *v755;
  const char *v756;
  JSC::DFG::Node *v757;
  const char *v758;
  const char *v759;
  JSC::DFG::Node *v760;
  const char *v761;
  const char *v762;
  JSC::DFG::Node *v763;
  const char *v764;
  const char *v765;
  JSC::DFG::Node *v766;
  const char *v767;
  const char *v768;
  JSC::DFG::Node *v769;
  const char *v770;
  const char *v771;
  JSC::DFG::BasicBlock *v772;
  const char *v773;
  const char *v774;
  const char *v775;
  const char *v776;
  JSC::DFG::Node *v777;
  const char *v778;
  const char *v779;
  JSC::DFG::Node *v780;
  const char *v781;
  const char *v782;
  JSC::DFG::Node *v783;
  const char *v784;
  const char *v785;
  JSC::DFG::Node *v786;
  const char *v787;
  const char *v788;
  JSC::DFG::Node *v789;
  const char *v790;
  const char *v791;
  JSC::DFG::Node *v792;
  const char *v793;
  const char *v794;
  JSC::DFG::Node *v795;
  const char *v796;
  const char *v797;
  JSC::DFG::Node *v798;
  const char *v799;
  const char *v800;
  JSC::DFG::Node *v801;
  const char *v802;
  const char *v803;
  JSC::DFG::Node *v804;
  const char *v805;
  const char *v806;
  JSC::DFG::Node *v807;
  const char *v808;
  const char *v809;
  JSC::DFG::BasicBlock *v810;
  const char *v811;
  JSC::DFG::BasicBlock *v812;
  const char *v813;
  JSC::DFG::BasicBlock *v815;
  const char *v816;
  const char *v817;
  const char *v818;
  const char *v819;
  const char *v820;
  const char *v821;
  const char *v822;
  const char *v823;
  const char *v824;
  int v825;
  JSC::DFG *v826;
  int v827;
  int v828;
  JSC::DFG::_anonymous_namespace_::Validate *v829;
  unint64_t v830;
  unint64_t v831;
  unint64_t v832;
  unint64_t v833;
  unint64_t v835;
  uint64_t v836;
  int v837;
  uint64_t v838;
  JSC::DFG::_anonymous_namespace_::Validate **v839;
  uint64_t *v840;
  JSC::DFG::_anonymous_namespace_::Validate *v841;
  uint64_t *v842;
  uint64_t v843;
  uint64_t v844;
  JSC::DFG::_anonymous_namespace_::Validate *v845;

  v8 = *this;
  if (!*((_BYTE *)*this + 963))
  {
    *((_BYTE *)v8 + 963) = 1;
    if (!*((_DWORD *)v8 + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x19855C6A0);
    }
    v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
    v10 = **((_QWORD **)v8 + 6);
    v826 = v8;
    if (*((_DWORD *)v8 + 236) == 2)
    {
      v11 = *((unsigned int *)v8 + 35);
      if (!(_DWORD)v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19855C8E0);
      }
      goto LABEL_12;
    }
    v11 = *((unsigned int *)v8 + 35);
    if (v11 > 4)
    {
      v542 = *((_QWORD *)v8 + 55);
      if (v542)
      {
        v543 = *(_DWORD *)(v542 - 8);
        v544 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        v545 = 9 * ((v544 + ~(v544 << 13)) ^ ((v544 + ~(v544 << 13)) >> 8));
        v546 = (v545 ^ (v545 >> 15)) + ~((v545 ^ (v545 >> 15)) << 27);
        v547 = v543 & ((v546 >> 31) ^ v546);
        v548 = *(_QWORD *)(v542 + 88 * v547);
        if (v548 == v10)
        {
LABEL_1050:
          v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
          v8 = v826;
          goto LABEL_12;
        }
        v825 = 1;
        while (v548)
        {
          v547 = (v547 + v825) & v543;
          v548 = *(_QWORD *)(v542 + 88 * v547);
          ++v825;
          if (v548 == v10)
            goto LABEL_1050;
        }
      }
    }
    else if ((_DWORD)v11)
    {
      v12 = (_QWORD *)*((_QWORD *)v8 + 16);
      v13 = *((unsigned int *)v8 + 35);
      while (*v12 != v10)
      {
        ++v12;
        if (!--v13)
          goto LABEL_9;
      }
LABEL_12:
      v15 = (uint64_t *)*((_QWORD *)v8 + 16);
      if (v10 == *v15)
      {
        v16 = 8 * v11;
        v17 = (JSC::DFG::_anonymous_namespace_::Validate **)*((_QWORD *)v8 + 16);
        v18 = &v15[v11];
        do
        {
          v19 = *v17;
          if (*((_DWORD *)*v17 + 13))
          {
            JSC::DFG::startCrashing((JSC::DFG *)this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v654);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v656, "block->predecessors.isEmpty()", "./dfg/DFGValidate.cpp", 101);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 101, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"block->predecessors.isEmpty()");
            __break(0xC471u);
            JUMPOUT(0x19855B114);
          }
          ++v17;
          v16 -= 8;
        }
        while (v16);
        do
        {
          v20 = *v15;
          v21 = *(unsigned int *)(*v15 + 92);
          if ((_DWORD)v21)
          {
            v22 = 0;
            v23 = 0xFFFFFFFFLL;
            do
            {
              if (*(_QWORD *)(*(_QWORD *)(v20 + 72) + 8 * *(unsigned int *)(v20 + 88) + 8 * v22))
              {
                JSC::DFG::startCrashing((JSC::DFG *)this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v549);
                WTF::dataLogF((WTF *)": validation failed: (%s = ", v550, "static_cast<Node*>(nullptr)");
                v838 = 0;
                WTF::dataLog<JSC::DFG::Node *>(&v838);
                WTF::dataLogF((WTF *)") == (%s = ", v551, "entrypoint->variablesAtHead.local(i)");
                WTF::dataLog<JSC::DFG::Node *>((uint64_t *)(*(_QWORD *)(v20 + 72)
                                                         + 8 * (*(unsigned int *)(v20 + 88) + v22)));
                WTF::dataLogF((WTF *)") (%s:%d).\n", v552, "./dfg/DFGValidate.cpp", 106);
                WTF::dataLog<char [16]>("\n\n\n");
                JSC::CodeBlock::dumpBytecode(*(JSC::CodeBlock **)(*(_QWORD *)v9 + 40), v553, v554, v555, v556, v557, v558, v559);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 106, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"static_cast<Node*>(nullptr) == entrypoint->variablesAtHead.local(i)");
                __break(0xC471u);
                JUMPOUT(0x19855A294);
              }
              ++v22;
              --v23;
            }
            while (v21 != v22);
          }
          ++v15;
        }
        while (v15 != v18);
        v24 = 0;
        v25 = (uint64_t *)((char *)v9 + 24);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v27 = 8;
        v28 = 7;
        v29 = 0uLL;
        v30 = 0x8000000000000000;
        mayExit = (unint64_t)v826;
        do
        {
          v32 = *(_QWORD *)(*(_QWORD *)(mayExit + 48) + 8 * v24);
          if (v32)
          {
            if (!*(_BYTE *)(v32 + 21))
            {
              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v681);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v683, "block->isReachable", "./dfg/DFGValidate.cpp", 114);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 114, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"block->isReachable");
              __break(0xC471u);
              JUMPOUT(0x19855B40CLL);
            }
            v33 = *(unsigned int *)(v32 + 36);
            v34 = *(unsigned int *)(v32 + 220);
            if (v34 + v33)
            {
              v35 = 0;
              while (1)
              {
                v36 = (_QWORD *)(v32 + 24);
                v37 = v35;
                v38 = v35 >= v33;
                v39 = v35 - v33;
                if (v38)
                {
                  v36 = (_QWORD *)(v32 + 208);
                  v37 = v39;
                  if (v39 >= v34)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19855AA40);
                  }
                }
                v40 = *(_QWORD *)(*v36 + 8 * v37);
                v41 = *v25;
                if (*v25)
                  goto LABEL_39;
                v42 = *(_QWORD *)(StatusReg + 752);
                if (!v42)
                  goto LABEL_72;
                v43 = (_BYTE *)(v42 + 9776);
                *(_BYTE *)(v42 + 9776) = 1;
                v44 = *(unsigned int *)(v42 + 9792);
                if ((_DWORD)v44)
                {
                  *(_DWORD *)(v42 + 9792) = v44 - *(_DWORD *)(v42 + 9796);
                  impl_casual_case = (_OWORD *)(*(_QWORD *)(v42 + 9784) - v44);
                  goto LABEL_35;
                }
                v46 = *(_QWORD *)(v42 + 9816);
                v47 = *(_QWORD *)(v42 + 9800);
                if (v46)
                  goto LABEL_34;
                if (*(_BYTE *)(v42 + 9781) != 6)
                  goto LABEL_71;
                v64 = *(_DWORD *)(v42 + 9812);
                v65 = *(unsigned int *)(v42 + 9808);
                if (v65 >= v64)
                  goto LABEL_71;
                *(_QWORD *)&v43[8 * v65 + 56] = 0;
                v66 = (unint64_t *)(v42 + 8 * v65 + 9840);
                v67 = v64 - 1 - v65;
                do
                {
                  if (!v67)
                  {
                    *(_DWORD *)(v42 + 9808) = v64;
LABEL_71:
                    *v43 = 0;
LABEL_72:
                    impl_casual_case = bmalloc_allocate_impl_casual_case(0x90uLL, 1, a3, 8, 7, 0x8000000000000000, a7, a8);
                    v30 = 0x8000000000000000;
                    v29 = 0uLL;
                    v28 = 7;
                    v27 = 8;
                    if ((a2 & 1) != 0)
                      goto LABEL_36;
                    goto LABEL_38;
                  }
                  v47 += 1024;
                  v69 = *v66++;
                  v68 = v69;
                  LODWORD(v65) = v65 + 1;
                  --v67;
                }
                while (!v69);
                v46 = __rbit64(v68);
                *(_DWORD *)(v42 + 9808) = v65;
                *(_QWORD *)(v42 + 9800) = v47;
LABEL_34:
                v48 = __clz(v46);
                *(_QWORD *)(v42 + 9816) = v46 & ~(0x8000000000000000 >> v48);
                impl_casual_case = (_OWORD *)(v47 + 16 * v48);
LABEL_35:
                *v43 = 0;
                a2 = 1;
LABEL_36:
                if ((a2 & 0xFFFFFFFF00000000) != 0x100000000)
                {
                  impl_casual_case[7] = v29;
                  impl_casual_case[8] = v29;
                  impl_casual_case[5] = v29;
                  impl_casual_case[6] = v29;
                  impl_casual_case[3] = v29;
                  impl_casual_case[4] = v29;
                  impl_casual_case[1] = v29;
                  impl_casual_case[2] = v29;
                  *impl_casual_case = v29;
                }
LABEL_38:
                *v25 = (uint64_t)(impl_casual_case + 1);
                *((_DWORD *)impl_casual_case + 3) = 8;
                *(_DWORD *)(*v25 - 8) = 7;
                *(_DWORD *)(*v25 - 16) = 0;
                *(_DWORD *)(*v25 - 12) = 0;
                v41 = *v25;
                if (*v25)
LABEL_39:
                  v49 = *(_DWORD *)(v41 - 8);
                else
                  v49 = 0;
                v50 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
                v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
                v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
                v53 = v49 & ((v52 >> 31) ^ v52);
                a3 = v41 + 16 * v53;
                v54 = *(_QWORD *)a3;
                if (*(_QWORD *)a3)
                {
                  v62 = 0;
                  v63 = 1;
                  do
                  {
                    if (v54 == v40)
                      goto LABEL_49;
                    if (v54 == -1)
                      v62 = (_QWORD *)a3;
                    v53 = (v53 + v63) & v49;
                    a3 = v41 + 16 * v53;
                    v54 = *(_QWORD *)a3;
                    ++v63;
                  }
                  while (*(_QWORD *)a3);
                  if (v62)
                  {
                    *v62 = 0;
                    v62[1] = 0;
                    --*(_DWORD *)(*v25 - 16);
                    a3 = (uint64_t)v62;
                  }
                }
                *(_QWORD *)a3 = v40;
                *(_DWORD *)(a3 + 8) = 0;
                v55 = *v25;
                if (*v25)
                  v56 = *(_DWORD *)(v55 - 12) + 1;
                else
                  v56 = 1;
                *(_DWORD *)(v55 - 12) = v56;
                v57 = *v25;
                if (*v25)
                  v58 = *(_DWORD *)(v57 - 12);
                else
                  v58 = 0;
                v59 = (*(_DWORD *)(v57 - 16) + v58);
                v60 = *(unsigned int *)(v57 - 4);
                if (v60 > 0x400)
                {
                  if (v60 > 2 * v59)
                    goto LABEL_49;
LABEL_52:
                  v61 = ((_DWORD)v60 << (6 * *(_DWORD *)(v57 - 12) >= (2 * v60)));
                  goto LABEL_62;
                }
                if (3 * v60 > 4 * v59)
                  goto LABEL_49;
                if ((_DWORD)v60)
                  goto LABEL_52;
                v61 = 8;
LABEL_62:
                WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash((uint64_t *)v9 + 3, v61, a3, 8, 7, 0x8000000000000000, a7, a8);
                v27 = 8;
                v28 = 7;
                v29 = 0uLL;
                v30 = 0x8000000000000000;
LABEL_49:
                ++v35;
                v33 = *(unsigned int *)(v32 + 36);
                v34 = *(unsigned int *)(v32 + 220);
                if (v35 >= v34 + v33)
                {
                  mayExit = *(_QWORD *)v9;
                  break;
                }
              }
            }
          }
          ++v24;
          v70 = *(unsigned int *)(mayExit + 60);
        }
        while (v24 < v70);
        if (!(_DWORD)v70)
          goto LABEL_603;
        v71 = 0;
        v72 = (uint64_t *)((char *)v9 + 48);
        do
        {
          v73 = *(_QWORD *)(*(_QWORD *)(mayExit + 48) + 8 * v71);
          if (v73)
          {
            v74 = *(unsigned int *)(v73 + 36);
            v75 = *(unsigned int *)(v73 + 220);
            if (v75 + v74)
            {
              v830 = v71;
              v76 = 0;
              while (1)
              {
                v838 = 0;
                v77 = (_QWORD *)(v73 + 24);
                v78 = v76;
                v38 = v76 >= v74;
                v79 = v76 - v74;
                if (v38)
                {
                  v77 = (_QWORD *)(v73 + 208);
                  v78 = v79;
                  if (v79 >= v75)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19855AB30);
                  }
                }
                v838 = *(_QWORD *)(*v77 + 8 * v78);
                v80 = *v72;
                if (*v72
                  || (mayExit = (unint64_t)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v9 + 6, 0, a3, v27, v28, v30, a7, a8), (v80 = *v72) != 0))
                {
                  v81 = *(_DWORD *)(v80 - 8);
                }
                else
                {
                  v81 = 0;
                }
                v82 = v838;
                v83 = (~(v838 << 32) + v838) ^ ((unint64_t)(~(v838 << 32) + v838) >> 22);
                v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
                v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
                v86 = v81 & ((v85 >> 31) ^ v85);
                a2 = v80 + 8 * v86;
                v87 = *(_QWORD *)a2;
                if (*(_QWORD *)a2)
                {
                  v88 = 0;
                  v89 = 1;
                  do
                  {
                    if (v87 == v838)
                      goto LABEL_99;
                    if (v87 == -1)
                      v88 = (_QWORD *)a2;
                    v86 = (v86 + v89) & v81;
                    a2 = v80 + 8 * v86;
                    v87 = *(_QWORD *)a2;
                    ++v89;
                  }
                  while (*(_QWORD *)a2);
                  if (v88)
                  {
                    *v88 = 0;
                    --*(_DWORD *)(*v72 - 16);
                    v82 = v838;
                    a2 = (unint64_t)v88;
                  }
                }
                *(_QWORD *)a2 = v82;
                v90 = *v72;
                if (*v72)
                  v91 = *(_DWORD *)(v90 - 12) + 1;
                else
                  v91 = 1;
                *(_DWORD *)(v90 - 12) = v91;
                v92 = *v72;
                if (*v72)
                  v93 = *(_DWORD *)(v92 - 12);
                else
                  v93 = 0;
                v94 = (*(_DWORD *)(v92 - 16) + v93);
                v95 = *(unsigned int *)(v92 - 4);
                if (v95 > 0x400)
                {
                  if (v95 > 2 * v94)
                    goto LABEL_99;
                }
                else if (3 * v95 > 4 * v94)
                {
                  goto LABEL_99;
                }
                mayExit = (unint64_t)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v9 + 6, (uint64_t *)a2, a3, v27, v28, v30, a7, a8);
LABEL_99:
                v96 = v838;
                if (*(_DWORD *)(v838 + 52))
                {
                  if (*(_WORD *)(v838 + 18) == 26)
                  {
                    if (*(_DWORD *)(*(_QWORD *)v9 + 944) != 2)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v624);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v626, "m_graph.m_form == SSA", "./dfg/DFGValidate.cpp", 128);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 128, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_graph.m_form == SSA");
                      __break(0xC471u);
                      JUMPOUT(0x19855ADACLL);
                    }
                    if (*(_DWORD *)(*(_QWORD *)(v838 + 72) + 52))
                    {
                      v97 = *v25;
                      v98 = *(_DWORD *)(*v25 - 8);
                      mayExit = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v838);
                      v96 = v838;
                      v99 = mayExit & v98;
                      v100 = *(_QWORD *)(v97 + 16 * v99);
                      if (v100 == v838)
                      {
LABEL_107:
                        v102 = v97 + 16 * v99;
                      }
                      else
                      {
                        v101 = 1;
                        while (v100)
                        {
                          v99 = ((_DWORD)v99 + v101) & v98;
                          v100 = *(_QWORD *)(v97 + 16 * v99);
                          ++v101;
                          if (v100 == v838)
                            goto LABEL_107;
                        }
                        v102 = *v25 + 16 * *(unsigned int *)(*v25 - 4);
                      }
                      ++*(_DWORD *)(v102 + 8);
                    }
                  }
                  v103 = 0;
                  while (2)
                  {
                    v104 = *(_DWORD *)(v96 + 56);
                    if ((v104 & 0x10) != 0)
                      v105 = *(unsigned int *)(v96 + 32);
                    else
                      v105 = 3;
                    if (v103 >= v105)
                      break;
                    v106 = *(_QWORD *)v9;
                    v107 = *(_DWORD *)(*(_QWORD *)v9 + 944);
                    if (v107 || v76 >= *(unsigned int *)(v73 + 36))
                    {
                      v108 = (_DWORD *)(v96 + 24);
                      if ((v104 & 0x10) != 0)
                      {
                        v123 = *v108 + v103;
                        if (*(_DWORD *)(v106 + 164) <= v123)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19855A460);
                        }
                        v109 = (unint64_t *)(*(_QWORD *)(v106 + 152) + 8 * v123);
                      }
                      else
                      {
                        v109 = (unint64_t *)&v108[2 * v103];
                      }
                      v110 = *v109;
                      v111 = *v109 & 0xFF00FFFFFFFFFFFFLL;
                      if (v111)
                      {
                        v112 = *v25;
                        v113 = *(_DWORD *)(*v25 - 8);
                        v114 = (v111 + ~(v110 << 32)) ^ ((v111 + ~(v110 << 32)) >> 22);
                        v115 = 9 * ((v114 + ~(v114 << 13)) ^ ((v114 + ~(v114 << 13)) >> 8));
                        v116 = (v115 ^ (v115 >> 15)) + ~((v115 ^ (v115 >> 15)) << 27);
                        v117 = v113 & ((v116 >> 31) ^ v116);
                        mayExit = *(_QWORD *)(*v25 + 16 * v117);
                        if (mayExit != v111)
                        {
                          v118 = 1;
                          while (mayExit)
                          {
                            v117 = ((_DWORD)v117 + v118) & v113;
                            mayExit = *(_QWORD *)(v112 + 16 * v117);
                            ++v118;
                            if (mayExit == v111)
                              goto LABEL_125;
                          }
                          v117 = *(unsigned int *)(v112 - 4);
                        }
LABEL_125:
                        ++*(_DWORD *)(v112 + 16 * v117 + 8);
                        v119 = *(unsigned __int16 *)(v96 + 18);
                        if (v119 == 30)
                        {
                          if (*(_WORD *)(v111 + 18) != 386)
                          {
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v538);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v539, "edge->isTuple()", "./dfg/DFGValidate.cpp", 144);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 144, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->isTuple()");
                            __break(0xC471u);
                            JUMPOUT(0x19855A0E0);
                          }
                          if (*(_QWORD *)v108 != v110)
                          {
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v540);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v541, "node->child1() == edge", "./dfg/DFGValidate.cpp", 145);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 145, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->child1() == edge");
                            __break(0xC471u);
                            JUMPOUT(0x19855A14CLL);
                          }
                          v120 = *(_DWORD *)(v96 + 72) + ~*(_DWORD *)(v111 + 48);
                          if (*((_DWORD *)v9 + 11) <= v120)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19855A154);
                          }
                          ++*(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v120);
                          goto LABEL_189;
                        }
                        v121 = *(_DWORD *)(v111 + 56) & 7;
                        v122 = *(_DWORD *)(v106 + 952);
                        if (v121 != 3)
                        {
                          if (v122 >= 1)
                            goto LABEL_135;
                          goto LABEL_136;
                        }
                        if (v122 >= 1)
                        {
                          if (((v110 >> 50) & 0x3F) - 49 >= 3)
                          {
                            v570 = v96;
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v571);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v572, "edge.useKind() == DoubleRepUse || edge.useKind() == DoubleRepRealUse || edge.useKind() == DoubleRepAnyIntUse", "./dfg/DFGValidate.cpp", 1004);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 1004, "void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithDoubleResultIfNecessary(Node *, Edge)", (uint64_t)"edge.useKind() == DoubleRepUse || edge.useKind() == DoubleRepRealUse || edge.useKind() == DoubleRepAnyIntUse");
                            __break(0xC471u);
                            JUMPOUT(0x19855A4D0);
                          }
LABEL_135:
                          if (((v110 & 0xFC000000000000) != 0xD0000000000000) == (v121 == 5))
                          {
                            v560 = v96;
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v561);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v562, "edge->hasInt52Result() == (edge.useKind() == Int52RepUse)", "./dfg/DFGValidate.cpp", 1012);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 1012, "void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithInt52ResultIfNecessary(Node *, Edge)", (uint64_t)"edge->hasInt52Result() == (edge.useKind() == Int52RepUse)");
                            __break(0xC471u);
                            JUMPOUT(0x19855A304);
                          }
LABEL_136:
                          if (v107 == 2)
                          {
                            if (!v121)
                            {
                              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                              WTF::dataLogF((WTF *)"\n\n\nAt ", v563);
                              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v564, "edge->hasResult()", "./dfg/DFGValidate.cpp", 156);
                              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 156, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->hasResult()");
                              __break(0xC471u);
                              JUMPOUT(0x19855A370);
                            }
                            goto LABEL_189;
                          }
LABEL_142:
                          if (*(unsigned __int16 *)(v96 + 18) > 0x1Bu)
                          {
                            if (v119 == 29)
                            {
                              v138 = *(unsigned __int16 *)(v111 + 18);
                              if (v138 - 15 >= 2 && (v138 > 0x27 || ((1 << v138) & 0xC038000000) == 0))
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v573);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v574, "edge->hasVariableAccessData(m_graph)", "./dfg/DFGValidate.cpp", 168);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 168, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->hasVariableAccessData(m_graph)");
                                __break(0xC471u);
                                JUMPOUT(0x19855A53CLL);
                              }
                              v139 = *(_QWORD **)(v111 + 72);
                              v140 = v139;
                              do
                              {
                                v141 = v140;
                                v140 = (_QWORD *)*v140;
                              }
                              while (v140);
                              if (v141 != v139)
                                *v139 = v141;
                              v142 = *(_QWORD **)(v838 + 72);
                              v143 = v142;
                              do
                              {
                                v144 = v143;
                                v143 = (_QWORD *)*v143;
                              }
                              while (v143);
                              if (v144 != v142)
                                *v142 = v144;
                              if (v141 != v144)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v575);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v576, "edge->variableAccessData() == node->variableAccessData()", "./dfg/DFGValidate.cpp", 169);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 169, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->variableAccessData() == node->variableAccessData()");
                                __break(0xC471u);
                                JUMPOUT(0x19855A5A8);
                              }
                              if (v138 == 16)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v577);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v578, "edge->op() != SetLocal", "./dfg/DFGValidate.cpp", 170);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 170, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->op() != SetLocal");
                                __break(0xC471u);
                                JUMPOUT(0x19855A614);
                              }
                              goto LABEL_189;
                            }
                            if (v119 != 28)
                              goto LABEL_174;
                          }
                          else if (v119 != 15)
                          {
                            if (v119 == 27)
                            {
                              v124 = *(unsigned __int16 *)(v111 + 18);
                              if (v124 - 15 >= 2 && (v124 > 0x27 || ((1 << v124) & 0xC038000000) == 0))
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v581);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v582, "edge->hasVariableAccessData(m_graph)", "./dfg/DFGValidate.cpp", 173);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 173, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->hasVariableAccessData(m_graph)");
                                __break(0xC471u);
                                JUMPOUT(0x19855A6ECLL);
                              }
                              if (*(_DWORD *)(v106 + 948))
                              {
                                v125 = *(_QWORD **)(v111 + 72);
                                v126 = v125;
                                do
                                {
                                  v127 = v126;
                                  v126 = (_QWORD *)*v126;
                                }
                                while (v126);
                                if (v127 != v125)
                                  *v125 = v127;
                                v128 = *(_QWORD **)(v838 + 72);
                                v129 = v128;
                                do
                                {
                                  v130 = v129;
                                  v129 = (_QWORD *)*v129;
                                }
                                while (v129);
                                if (v130 != v128)
                                  *v128 = v130;
                                if (v127 != v130)
                                {
                                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                  WTF::dataLogF((WTF *)"\n\n\nAt ", v583);
                                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v584, "edge->variableAccessData() == node->variableAccessData()", "./dfg/DFGValidate.cpp", 176);
                                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 176, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->variableAccessData() == node->variableAccessData()");
                                  __break(0xC471u);
                                  JUMPOUT(0x19855A758);
                                }
                              }
                              goto LABEL_189;
                            }
LABEL_174:
                            if (!v121)
                            {
                              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                              WTF::dataLogF((WTF *)"\n\n\nAt ", v579);
                              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v580, "edge->hasResult()", "./dfg/DFGValidate.cpp", 179);
                              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 179, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->hasResult()");
                              __break(0xC471u);
                              JUMPOUT(0x19855A680);
                            }
                            goto LABEL_189;
                          }
                          v131 = *(unsigned __int16 *)(v111 + 18);
                          if (v131 - 15 >= 2 && (v131 > 0x27 || ((1 << v131) & 0xC038000000) == 0))
                          {
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v585);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v586, "edge->hasVariableAccessData(m_graph)", "./dfg/DFGValidate.cpp", 164);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 164, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->hasVariableAccessData(m_graph)");
                            __break(0xC471u);
                            JUMPOUT(0x19855A7C4);
                          }
                          v132 = *(_QWORD **)(v111 + 72);
                          v133 = v132;
                          do
                          {
                            v134 = v133;
                            v133 = (_QWORD *)*v133;
                          }
                          while (v133);
                          if (v134 != v132)
                            *v132 = v134;
                          v135 = *(_QWORD **)(v838 + 72);
                          v136 = v135;
                          do
                          {
                            v137 = v136;
                            v136 = (_QWORD *)*v136;
                          }
                          while (v136);
                          if (v137 != v135)
                            *v135 = v137;
                          if (v134 != v137)
                          {
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v587);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v588, "edge->variableAccessData() == node->variableAccessData()", "./dfg/DFGValidate.cpp", 165);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 165, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"edge->variableAccessData() == node->variableAccessData()");
                            __break(0xC471u);
                            JUMPOUT(0x19855A830);
                          }
                          goto LABEL_189;
                        }
                        if (v107 != 2)
                          goto LABEL_142;
                      }
                    }
LABEL_189:
                    ++v103;
                    v96 = v838;
                    continue;
                  }
                }
                ++v76;
                v74 = *(unsigned int *)(v73 + 36);
                v75 = *(unsigned int *)(v73 + 220);
                if (v76 >= v75 + v74)
                {
                  mayExit = *(_QWORD *)v9;
                  v71 = v830;
                  break;
                }
              }
            }
          }
          ++v71;
          v70 = *(unsigned int *)(mayExit + 60);
        }
        while (v71 < v70);
        if (!(_DWORD)v70)
          goto LABEL_603;
        v28 = 0;
        v30 = 830472192;
        a7 = -1;
LABEL_202:
        v145 = *(_QWORD *)(*(_QWORD *)(mayExit + 48) + 8 * v28);
        if (!v145)
          goto LABEL_602;
        v146 = *(unsigned int *)(v145 + 36);
        v147 = *(unsigned int *)(v145 + 220);
        if (v147 + v146)
        {
          v148 = 0;
          v149 = v147 + v146;
          if (v147 + v146 <= 1)
            v149 = 1;
          while (1)
          {
            v150 = (_QWORD *)(v145 + 24);
            v151 = v148;
            if (v148 >= v146)
            {
              v150 = (_QWORD *)(v145 + 208);
              v151 = v148 - v146;
              if (v148 - v146 >= v147)
              {
                __break(0xC471u);
                JUMPOUT(0x19855ADB4);
              }
            }
            v152 = *(_QWORD *)(*v150 + 8 * v151);
            v838 = v152;
            if (*(_DWORD *)(mayExit + 956) == 1)
            {
              v153 = *v25;
              if (*v25)
              {
                v154 = *(_DWORD *)(v153 - 8);
                v155 = (~(v152 << 32) + v152) ^ ((unint64_t)(~(v152 << 32) + v152) >> 22);
                v156 = 9 * ((v155 + ~(v155 << 13)) ^ ((v155 + ~(v155 << 13)) >> 8));
                v157 = (v156 ^ (v156 >> 15)) + ~((v156 ^ (v156 >> 15)) << 27);
                v158 = v154 & ((v157 >> 31) ^ v157);
                v159 = *(_QWORD *)(v153 + 16 * v158);
                if (v159 == v152)
                {
LABEL_214:
                  LODWORD(v153) = *(_DWORD *)(v153 + 16 * v158 + 8);
                }
                else
                {
                  v160 = 1;
                  while (v159)
                  {
                    v158 = ((_DWORD)v158 + v160) & v154;
                    v159 = *(_QWORD *)(v153 + 16 * v158);
                    ++v160;
                    if (v159 == v152)
                      goto LABEL_214;
                  }
                  LODWORD(v153) = 0;
                }
              }
              if ((_DWORD)v153 != *(_DWORD *)(v152 + 52) + ((int)(*(_DWORD *)(v152 + 56) << 28) >> 31))
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v627);
                WTF::dataLogF((WTF *)": validation failed: (%s = ", v629, "m_myRefCounts.get(node)");
                LODWORD(v845) = WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get(*((_QWORD *)v9 + 3), &v838);
                WTF::dataLog<unsigned int>(&v845);
                WTF::dataLogF((WTF *)") == (%s = ", v630, "node->adjustedRefCount()");
                LODWORD(v845) = *(_DWORD *)(v838 + 52) + ((int)(*(_DWORD *)(v838 + 56) << 28) >> 31);
                WTF::dataLog<unsigned int>(&v845);
                WTF::dataLogF((WTF *)") (%s:%d).\n", v631, "./dfg/DFGValidate.cpp", 193);
                WTF::dataLog<char [16]>("\n\n\n");
                JSC::CodeBlock::dumpBytecode(*(JSC::CodeBlock **)(*(_QWORD *)v9 + 40), v632, v633, v634, v635, v636, v637, v638);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 193, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_myRefCounts.get(node) == node->adjustedRefCount()");
                __break(0xC471u);
                JUMPOUT(0x19855AE90);
              }
              if (*(_WORD *)(v152 + 18) == 386)
              {
                v161 = *(_DWORD *)(v152 + 48);
                v162 = ~v161;
                v163 = *((_DWORD *)v9 + 11);
                if (v163 <= v162)
                  v163 = ~v161;
                v164 = v161 + v163 + 1;
                if (!v164)
                {
LABEL_1081:
                  __break(0xC471u);
                  JUMPOUT(0x19855AE98);
                }
                v165 = *(unsigned int *)(mayExit + 308);
                if (v165 <= v162)
                  goto LABEL_1082;
                v166 = *((_QWORD *)v9 + 4);
                a3 = *(unsigned int *)(v166 + 4 * v162);
                v167 = *(const char **)(mayExit + 296);
                if ((_DWORD)a3 != *(unsigned __int16 *)&v167[8 * v162])
                {
                  v660 = 0;
                  goto LABEL_1091;
                }
                if (v164 == 1)
                  goto LABEL_1081;
                v168 = v162 + 1;
                if (v168 >= v165)
                {
LABEL_1082:
                  __break(0xC471u);
                  JUMPOUT(0x19855AEA0);
                }
                if (*(_DWORD *)(v166 + 4 * v168) != *(unsigned __int16 *)&v167[8 * v168])
                  break;
              }
            }
            if (++v148 == v149)
              goto LABEL_227;
          }
          v660 = 1;
LABEL_1091:
          if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
          {
            __clrex();
            goto LABEL_1096;
          }
          if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_1096:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
          WTF::dataLogF((WTF *)"\n\n\nAt ", v167, *(double *)&v29);
          WTF::dataLogF((WTF *)"@%u", v668, *(unsigned int *)(v152 + 20));
          WTF::dataLogF((WTF *)": validation failed: (%s = ", v669, "m_myTupleRefCounts.at(node->tupleOffset() + j)");
          v670 = v660 + ~*(_DWORD *)(v152 + 48);
          if (*((_DWORD *)this + 11) > v670)
          {
            WTF::dataLog<unsigned int>((_DWORD *)this[4] + v670);
            WTF::dataLogF((WTF *)") == (%s = ", v671, "m_graph.m_tupleData.at(node->tupleOffset() + j).refCount");
            v672 = v660 + ~*(_DWORD *)(v152 + 48);
            if (*((_DWORD *)*this + 77) > v672)
            {
              WTF::dataLog<unsigned short>((unsigned __int16 *)(*((_QWORD *)*this + 37) + 8 * v672));
              WTF::dataLogF((WTF *)") (%s:%d).\n", v673, "./dfg/DFGValidate.cpp", 196);
              WTF::dataLog<char [16]>("\n\n\n");
              JSC::CodeBlock::dumpBytecode(*((JSC::CodeBlock **)*this + 5), v674, v675, v676, v677, v678, v679, v680);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 196, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_myTupleRefCounts.at(node->tupleOffset() + j) == m_graph.m_tupleData.at(node->tupleOffset() + j).refCount");
              __break(0xC471u);
              JUMPOUT(0x19855B39CLL);
            }
            __break(0xC471u);
            JUMPOUT(0x19855B480);
          }
          __break(0xC471u);
          JUMPOUT(0x19855B3A4);
        }
LABEL_227:
        if (!(_DWORD)v147)
        {
LABEL_1063:
          JSC::DFG::startCrashing((JSC::DFG *)mayExit);
          WTF::dataLogF((WTF *)"\n\n\nAt ", v589);
          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v591, "foundTerminal", "./dfg/DFGValidate.cpp", 218);
          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 218, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"foundTerminal");
          __break(0xC471u);
          JUMPOUT(0x19855A898);
        }
        v169 = 0;
        v170 = *(_QWORD *)(v145 + 208);
        while (1)
        {
          v171 = *(unsigned __int16 *)(*(_QWORD *)(v170 + 8 * v169++) + 18) - 364;
          if (v171 <= 0xB)
            break;
          if (v147 == v169)
            goto LABEL_1063;
        }
        v835 = v28;
        if (v169 < v147)
        {
          do
          {
            v172 = *(_QWORD *)(v170 + 8 * v169);
            v173 = *(unsigned __int16 *)(v172 + 18);
            v341 = v173 > 0x1D;
            v174 = (1 << v173) & 0x31800000;
            if (v341 || v174 == 0)
            {
              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v604);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v606, "node->op() == Phantom || node->op() == PhantomLocal || node->op() == Flush || node->op() == Check", "./dfg/DFGValidate.cpp", 208);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 208, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->op() == Phantom || node->op() == PhantomLocal || node->op() == Flush || node->op() == Check");
              __break(0xC471u);
              JUMPOUT(0x19855AAC0);
            }
            v176 = *(_QWORD *)(v172 + 24);
            if ((*(_BYTE *)(v172 + 56) & 0x10) != 0)
            {
              v183 = *(_DWORD *)(v172 + 32);
              v184 = v183 + v176;
              if (v183 + (int)v176 > v176)
              {
                LODWORD(v185) = *(_DWORD *)(mayExit + 164);
                v186 = *(_QWORD *)(v172 + 24);
                if (v185 <= v176)
                  v185 = v176;
                else
                  v185 = v185;
                if (v186 == v185)
                  goto LABEL_1053;
                v187 = *(_QWORD *)(mayExit + 152);
                v188 = *(_QWORD *)(v187 + 8 * v186);
                v189 = (v188 >> 50) & 0x3F;
                if ((v188 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v189 != 0)
                {
                  v341 = v189 > 0x34;
                  v202 = (1 << v189) & 0x12400001800284;
                  if (v341 || v202 == 0)
                  {
LABEL_1054:
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v565);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v566, "shouldNotHaveTypeCheck(edge.useKind())", "./dfg/DFGValidate.cpp", 212);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 212, "auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(Edge) const", (uint64_t)"shouldNotHaveTypeCheck(edge.useKind())");
                    __break(0xC471u);
                    JUMPOUT(0x19855A3E4);
                  }
                }
                if (v184 != (_DWORD)v186 + 1)
                {
                  v191 = (unint64_t *)(v187 + 8 * v186 + 8);
                  v192 = v183 - 1;
                  v193 = ~v186 + v185;
                  while (v193)
                  {
                    v188 = *v191;
                    v194 = (*v191 >> 50) & 0x3F;
                    if ((*v191 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v194 != 0)
                    {
                      v341 = v194 > 0x34;
                      v196 = (1 << v194) & 0x12400001800284;
                      if (v341 || v196 == 0)
                        goto LABEL_1054;
                    }
                    ++v191;
                    --v193;
                    if (!--v192)
                      goto LABEL_263;
                  }
LABEL_1053:
                  __break(0xC471u);
                  JUMPOUT(0x19855A378);
                }
              }
            }
            else if ((v176 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v177 = (v176 >> 50) & 0x3F;
              if ((_DWORD)v177)
              {
                v341 = v177 > 0x34;
                v198 = (1 << v177) & 0x12400001800284;
                if (v341 || v198 == 0)
                  goto LABEL_1076;
              }
              v176 = *(_QWORD *)(v172 + 32);
              if ((v176 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v178 = (v176 >> 50) & 0x3F;
                if ((_DWORD)v178)
                {
                  v341 = v178 > 0x34;
                  v200 = (1 << v178) & 0x12400001800284;
                  if (v341 || v200 == 0)
                    goto LABEL_1076;
                }
                v176 = *(_QWORD *)(v172 + 40);
                v179 = (v176 >> 50) & 0x3F;
                if ((v176 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v179 != 0)
                {
                  v341 = v179 > 0x34;
                  v181 = (1 << v179) & 0x12400001800284;
                  if (v341 || v181 == 0)
                  {
LABEL_1076:
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v616);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v617, "shouldNotHaveTypeCheck(edge.useKind())", "./dfg/DFGValidate.cpp", 212);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 212, "auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(Edge) const", (uint64_t)"shouldNotHaveTypeCheck(edge.useKind())");
                    __break(0xC471u);
                    JUMPOUT(0x19855AC6CLL);
                  }
                }
              }
            }
LABEL_263:
            ++v169;
          }
          while (v169 != v147);
        }
        v204 = 0;
        while (1)
        {
          v205 = *(_QWORD *)(*(_QWORD *)(v145 + 208) + 8 * v204);
          if ((*(_BYTE *)v205 & 2) != 0)
          {
            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v592);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v594, "node->origin.isSet()", "./dfg/DFGValidate.cpp", 223);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 223, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->origin.isSet()");
            __break(0xC471u);
            JUMPOUT(0x19855A900);
          }
          if ((*(_BYTE *)(v205 + 8) & 2) != 0)
          {
            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v595);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v597, "node->origin.semantic.isSet() == node->origin.forExit.isSet()", "./dfg/DFGValidate.cpp", 224);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 224, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->origin.semantic.isSet() == node->origin.forExit.isSet()");
            __break(0xC471u);
            JUMPOUT(0x19855A968);
          }
          mayExit = JSC::DFG::mayExit(*(JSC::DFG **)v9, *(JSC::DFG::Graph **)(*(_QWORD *)(v145 + 208) + 8 * v204), (JSC::DFG::Node *)a3);
          if ((_DWORD)mayExit == 2 && !*(_BYTE *)(v205 + 16))
          {
            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v607);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v609, "!(mayExit(m_graph, node) == Exits && !node->origin.exitOK)", "./dfg/DFGValidate.cpp", 226);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 226, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!(mayExit(m_graph, node) == Exits && !node->origin.exitOK)");
            __break(0xC471u);
            JUMPOUT(0x19855AB28);
          }
          if (v204)
          {
            if (v204 - 1 >= (unint64_t)*(unsigned int *)(v145 + 220))
            {
              __break(0xC471u);
              JUMPOUT(0x19855AA58);
            }
            v209 = *(_QWORD *)(*(_QWORD *)(v145 + 208) + 8 * (v204 - 1));
            mayExit = JSC::DFG::clobbersExitState(*(JSC::DFG **)v9, (JSC::DFG::Graph *)v209, (JSC::DFG::Node *)a3, v27, v206, v207, v208, a8);
            if ((_DWORD)mayExit && *(_BYTE *)(v205 + 16) && *(_WORD *)(v205 + 18) != 22)
            {
              v210 = *(_QWORD *)(v205 + 8);
              v211 = *(_QWORD *)(v209 + 8);
              if (v210 == v211)
                goto LABEL_1093;
              if ((v210 & 2) != 0)
              {
                LODWORD(v212) = -1;
              }
              else if ((v210 & 1) != 0)
              {
                LODWORD(v212) = *(_DWORD *)((v210 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v212 = v210 >> 36;
              }
              if ((v211 & 2) != 0)
              {
                LODWORD(v213) = -1;
              }
              else if ((v211 & 1) != 0)
              {
                LODWORD(v213) = *(_DWORD *)((v211 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v213 = v211 >> 36;
              }
              if ((_DWORD)v212 == (_DWORD)v213)
              {
                v294 = (_QWORD *)(v210 & 0xFFFFFFFF8);
                if ((v210 & 1) != 0)
                  v294 = (_QWORD *)*v294;
                v295 = (_QWORD *)(v211 & 0xFFFFFFFF8);
                if ((v211 & 1) != 0)
                  v295 = (_QWORD *)*v295;
                if (v294 == v295)
                {
LABEL_1093:
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v662);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v664, "!clobbersExitState(m_graph, previousNode) || !node->origin.exitOK || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit", "./dfg/DFGValidate.cpp", 235);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 235, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!clobbersExitState(m_graph, previousNode) || !node->origin.exitOK || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit");
                  __break(0xC471u);
                  JUMPOUT(0x19855B20CLL);
                }
              }
            }
            if (!*(_BYTE *)(v209 + 16) && *(_BYTE *)(v205 + 16) && *(_WORD *)(v205 + 18) != 22)
            {
              v218 = *(_QWORD *)(v205 + 8);
              v219 = *(_QWORD *)(v209 + 8);
              if (v218 == v219)
                goto LABEL_1104;
              if ((v218 & 2) != 0)
              {
                LODWORD(v220) = -1;
              }
              else if ((v218 & 1) != 0)
              {
                LODWORD(v220) = *(_DWORD *)((v218 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v220 = v218 >> 36;
              }
              if ((v219 & 2) != 0)
              {
                LODWORD(v221) = -1;
              }
              else if ((v219 & 1) != 0)
              {
                LODWORD(v221) = *(_DWORD *)((v219 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v221 = v219 >> 36;
              }
              if ((_DWORD)v220 == (_DWORD)v221)
              {
                v222 = (_QWORD *)(v218 & 0xFFFFFFFF8);
                if ((v218 & 1) != 0)
                  v222 = (_QWORD *)*v222;
                v223 = (_QWORD *)(v219 & 0xFFFFFFFF8);
                if ((v219 & 1) != 0)
                  v223 = (_QWORD *)*v223;
                if (v222 == v223)
                {
LABEL_1104:
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v687);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v689, "!(!previousNode->origin.exitOK && node->origin.exitOK) || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit", "./dfg/DFGValidate.cpp", 240);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 240, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!(!previousNode->origin.exitOK && node->origin.exitOK) || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit");
                  __break(0xC471u);
                  JUMPOUT(0x19855B4E8);
                }
              }
            }
          }
          v214 = *(unsigned __int16 *)(v205 + 18);
          if (v214 > 0x143)
          {
            if (v214 - 324 <= 0x2E && ((1 << (v214 - 68)) & 0x40F810200001) != 0)
              goto LABEL_355;
          }
          else
          {
            v215 = v214 + 6;
            if (v214 - 250 <= 0x29)
            {
              if (((1 << v215) & 0x2001C40E00) != 0)
                goto LABEL_320;
              if (((1 << v215) & 0x28000120011) != 0)
                goto LABEL_355;
            }
            if (v214 - 182 <= 0x3E)
            {
              if (((1 << (v214 + 74)) & 0x5200015000000000) != 0)
                goto LABEL_355;
              if (v214 == 182)
                goto LABEL_354;
            }
            if (v214 == 146)
            {
LABEL_320:
              if (!*(_QWORD *)(v205 + 72))
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v645);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v647, "!node->hasStructure() || !!node->structure().get()", "./dfg/DFGValidate.cpp", 243);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 243, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->hasStructure() || !!node->structure().get()");
                __break(0xC471u);
                JUMPOUT(0x19855AFD8);
              }
              if (v214 - 218 > 0x34 || ((1 << (v214 + 38)) & 0x12001105200015) == 0)
              {
                if (v214 != 182)
                  goto LABEL_374;
LABEL_354:
                v224 = (*(_QWORD *)(v205 + 24) >> 50) & 0x3FLL;
                if ((v224 - 8) >= 2
                  && (v224 > 0x26 || ((1 << v224) & 0x7FEAB7F800) == 0))
                {
                  goto LABEL_365;
                }
              }
LABEL_355:
              if ((**(_QWORD **)(v205 + 72) & 0xFFFE000000000002) != 0)
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v598);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v600, "!node->hasCellOperand() || node->cellOperand()->value().isCell()", "./dfg/DFGValidate.cpp", 244);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 244, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->hasCellOperand() || node->cellOperand()->value().isCell()");
                __break(0xC471u);
                JUMPOUT(0x19855A9D0);
              }
            }
          }
          if (v214 - 324 > 0x2E || ((1 << (v214 - 68)) & 0x40F810200001) == 0)
          {
            if (v214 - 182 > 0x3E)
              goto LABEL_369;
            if (((1 << (v214 + 74)) & 0x5200015000000000) == 0)
            {
              if (v214 != 182)
              {
LABEL_369:
                if (v214 - 250 > 0x29 || ((1 << (v214 + 6)) & 0x28000120011) == 0)
                  goto LABEL_374;
                goto LABEL_373;
              }
              v224 = (*(_QWORD *)(v205 + 24) >> 50) & 0x3FLL;
LABEL_365:
              if ((v224 - 8) >= 2 && (v224 > 0x26 || ((1 << v224) & 0x7FEAB7F800) == 0))
                goto LABEL_374;
            }
          }
LABEL_373:
          if (!**(_QWORD **)(v205 + 72))
          {
            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v601);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v603, "!node->hasCellOperand() || !!node->cellOperand()->value()", "./dfg/DFGValidate.cpp", 245);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 245, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->hasCellOperand() || !!node->cellOperand()->value()");
            __break(0xC471u);
            JUMPOUT(0x19855AA38);
          }
LABEL_374:
          v227 = *(_DWORD *)(v205 + 56);
          if ((v227 & 0x10) == 0)
          {
            if ((*(_QWORD *)(v205 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if ((*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v618);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v620, "!node->child2()", "./dfg/DFGValidate.cpp", 251);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 251, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->child2()");
                __break(0xC471u);
                JUMPOUT(0x19855ACD4);
              }
            }
            else if ((*(_QWORD *)(v205 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v648);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v650, "!node->child3()", "./dfg/DFGValidate.cpp", 249);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 249, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->child3()");
              __break(0xC471u);
              JUMPOUT(0x19855B040);
            }
          }
          v228 = v214 - 106 > 0x25 || ((1 << (v214 - 106)) & 0x200100FFF9) == 0;
          if (v228 && v214 - 335 >= 2 && v214 - 255 > 1)
            goto LABEL_386;
          if (v214 - 109 < 0xD)
            goto LABEL_414;
          if (v214 - 255 >= 2)
          {
            if (v214 - 335 >= 2
              && (v214 - 106 > 0x25 || ((1 << (v214 - 106)) & 0x2001000001) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198558EF0);
            }
LABEL_414:
            v237 = (uint64_t *)(v205 + 72);
            goto LABEL_415;
          }
          v237 = (uint64_t *)(*(_QWORD *)(v205 + 72) + 8);
LABEL_415:
          v238 = *v237;
          if (v238)
          {
            if ((v238 & 1) != 0)
              v238 &= ~1uLL;
            else
              v238 = *(_QWORD *)(v238 + 8);
          }
          v239 = *(_DWORD *)(v238 + 16);
          if ((v239 & 0x20) == 0)
          {
            v240 = *(_BYTE **)(v238 + 8);
            v241 = *(unsigned int *)(v238 + 4);
            if ((v239 & 4) != 0)
            {
              if ((_DWORD)v241)
              {
                v296 = *v240 - 48;
                if (v296 <= 9 && (v241 < 2 || *v240 != 48))
                {
                  v297 = v240 + 1;
                  v298 = v241 - 1;
                  while (v298)
                  {
                    v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
                    if (v296 <= 0x19999999)
                    {
                      v299 = *v297 - 48;
                      if (v299 <= 9)
                      {
                        v38 = __CFADD__(v299, 10 * v296);
                        v296 = v299 + 10 * v296;
                        ++v297;
                        --v298;
                        if (!v38)
                          continue;
                      }
                    }
                    goto LABEL_386;
                  }
                  v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
                  if (v296 != -1)
                  {
LABEL_1109:
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v720);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v722, "uid->isSymbol() || !parseIndex(*uid)", "./dfg/DFGValidate.cpp", 256);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 256, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"uid->isSymbol() || !parseIndex(*uid)");
                    __break(0xC471u);
                    JUMPOUT(0x19855B968);
                  }
                }
              }
            }
            else if ((_DWORD)v241)
            {
              v242 = *(unsigned __int16 *)v240 - 48;
              if (v242 <= 9 && (*(_WORD *)v240 != 48 || v241 <= 1))
              {
                v243 = (unsigned __int16 *)(v240 + 2);
                v244 = v241 - 1;
                while (v244)
                {
                  if (v242 <= 0x19999999)
                  {
                    v245 = *v243 - 48;
                    if (v245 <= 9)
                    {
                      v38 = __CFADD__(v245, 10 * v242);
                      v242 = v245 + 10 * v242;
                      ++v243;
                      --v244;
                      if (!v38)
                        continue;
                    }
                  }
                  goto LABEL_386;
                }
                if (v242 != -1)
                  goto LABEL_1109;
              }
            }
          }
LABEL_386:
          if (*(unsigned __int16 *)(v205 + 18) > 0x92u)
          {
            if (*(unsigned __int16 *)(v205 + 18) <= 0x105u)
            {
              if (*(unsigned __int16 *)(v205 + 18) <= 0xA0u)
              {
                switch(v214)
                {
                  case 0x93u:
                    if (*(_BYTE *)(v205 + 72) == 5)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v723);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v725, "node->arrayMode().type() != Array::String", "./dfg/DFGValidate.cpp", 408);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 408, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->arrayMode().type() != Array::String");
                      __break(0xC471u);
                      JUMPOUT(0x19855B9D0);
                    }
                    break;
                  case 0x9Cu:
                    v257 = *(_QWORD *)(v205 + 72);
                    v258 = *(unsigned int *)(v257 + 20);
                    if ((_DWORD)v258)
                    {
                      v259 = *(_QWORD *)(v257 + 8);
                      while (1)
                      {
                        v260 = v259 + ((unint64_t)--v258 << 6);
                        if (*(_DWORD *)v260 == 2)
                        {
                          v261 = *(_QWORD *)(v260 + 8);
                          if ((v261 & 1) != 0)
                          {
                            v265 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFFFFCLL);
                            v266 = *v265;
                            if (v266 >= 3)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198558EB0);
                            }
                            v267 = 2 * v266;
                            while (v267 * 4)
                            {
                              v262 = *(_QWORD *)&v265[v267];
                              v267 -= 2;
                              if (v262 != *(_QWORD *)(v260 + 16))
                                goto LABEL_468;
                            }
LABEL_615:
                            __break(0xC471u);
                            JUMPOUT(0x198558ED0);
                          }
                          if (v261 < 4)
                            goto LABEL_615;
                          v262 = v261 & 0xFFFFFFFFFFFFFFFCLL;
                          if (*(_QWORD *)(v260 + 16) == (v261 & 0xFFFFFFFFFFFFFFFCLL))
                            goto LABEL_615;
LABEL_468:
                          if ((*(_BYTE *)(v262 + 19) & 0xC) == 0)
                          {
                            v263 = *(_QWORD *)(v262 + 96);
                            v264 = (v263 & 1) != 0 ? (v263 >> 1) & 3 : *(unsigned __int8 *)(v263 + 4);
                            if (v264 != 2)
                            {
                              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                              WTF::dataLogF((WTF *)"\n\n\nAt ", v642);
                              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v644, "!variant.oldStructureForTransition()->dfgShouldWatch()", "./dfg/DFGValidate.cpp", 346);
                              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 346, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!variant.oldStructureForTransition()->dfgShouldWatch()");
                              __break(0xC471u);
                              JUMPOUT(0x19855AF70);
                            }
                          }
                        }
                        if (!(_DWORD)v258)
                          goto LABEL_543;
                      }
                    }
                    break;
                  case 0x9Du:
                    v246 = *(_QWORD *)(v205 + 72);
                    v247 = *(unsigned int *)(v246 + 20);
                    if ((_DWORD)v247)
                    {
                      v248 = *(_QWORD *)(v246 + 8);
                      v249 = v247 - 1;
                      do
                      {
                        v250 = v249;
                        if (*(_QWORD *)(v248 + 40 * v249 + 16))
                        {
                          v251 = *(_QWORD *)(v248 + 40 * v249 + 8);
                          if ((*(_BYTE *)(v251 + 19) & 0xC) == 0)
                          {
                            v252 = *(_QWORD *)(v251 + 96);
                            v253 = (v252 & 1) != 0 ? (v252 >> 1) & 3 : *(unsigned __int8 *)(v252 + 4);
                            if (v253 != 2)
                            {
                              JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                              WTF::dataLogF((WTF *)"\n\n\nAt ", v639);
                              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v641, "!variant.newStructure() || !variant.oldStructure()->dfgShouldWatch()", "./dfg/DFGValidate.cpp", 352);
                              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 352, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!variant.newStructure() || !variant.oldStructure()->dfgShouldWatch()");
                              __break(0xC471u);
                              JUMPOUT(0x19855AF08);
                            }
                          }
                        }
                        --v249;
                      }
                      while (v250);
                    }
                    break;
                }
              }
              else
              {
                switch(*(_WORD *)(v205 + 18))
                {
                  case 0xE6:
LABEL_491:
                    if ((*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v735);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v737, "!!node->child1()", "./dfg/DFGValidate.cpp", 336);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 336, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->child1()");
                      __break(0xC471u);
                      JUMPOUT(0x19855BB70);
                    }
                    return;
                  case 0xE7:
                  case 0xE8:
                  case 0xE9:
                  case 0xEA:
                  case 0xEB:
                  case 0xEC:
                  case 0xED:
                  case 0xEE:
                  case 0xF0:
                    goto LABEL_396;
                  case 0xEF:
                    if ((*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v714);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v716, "!!node->child1()", "./dfg/DFGValidate.cpp", 321);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 321, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->child1()");
                      __break(0xC471u);
                      JUMPOUT(0x19855B898);
                    }
                    v287 = **(_QWORD **)(v205 + 72);
                    if (!v287 || (v287 & 0xFFFE000000000002) != 0)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v717);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v719, "!!node->cellOperand()->value() && node->cellOperand()->value().isCell()", "./dfg/DFGValidate.cpp", 322);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 322, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->cellOperand()->value() && node->cellOperand()->value().isCell()");
                      __break(0xC471u);
                      JUMPOUT(0x19855B900);
                    }
                    return;
                  default:
                    if (v214 == 161 && (*(_DWORD *)(v205 + 72) & 0xFE) != 0xA)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v696);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v698, "type == Array::ArrayStorage || type == Array::SlowPutArrayStorage", "./dfg/DFGValidate.cpp", 386);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 386, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"type == Array::ArrayStorage || type == Array::SlowPutArrayStorage");
                      __break(0xC471u);
                      JUMPOUT(0x19855B620);
                    }
                    return;
                }
              }
              goto LABEL_543;
            }
            if (*(unsigned __int16 *)(v205 + 18) > 0x155u)
            {
              if (*(unsigned __int16 *)(v205 + 18) <= 0x197u)
              {
                if (v214 == 342)
                {
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 93072))
                    v278 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 93072) & 1) == 0;
                  else
                    v278 = 0;
                  if (!v278)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v699);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v701, "!!m_graph.m_vm.hasOwnPropertyCache()", "./dfg/DFGValidate.cpp", 381);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 381, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!m_graph.m_vm.hasOwnPropertyCache()");
                    __break(0xC471u);
                    JUMPOUT(0x19855B688);
                  }
                }
                else if (v214 == 407)
                {
                  v254 = (*(_QWORD *)(v205 + 32) >> 50) & 0x3FLL;
                  if (v254 > 0x19 || ((1 << v254) & 0x2000900) == 0)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v693);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v695, "node->child2().useKind() == CellUse || node->child2().useKind() == ObjectUse || node->child2().useKind() == SymbolUse", "./dfg/DFGValidate.cpp", 431);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 431, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->child2().useKind() == CellUse || node->child2().useKind() == ObjectUse || node->child2().useKind() == SymbolUse");
                    __break(0xC471u);
                    JUMPOUT(0x19855B5B8);
                  }
                }
              }
              else if (v214 == 408)
              {
                v282 = (*(_QWORD *)(v205 + 32) >> 50) & 0x3FLL;
                if ((_DWORD)v282 != 8 && (_DWORD)v282 != 11)
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v711);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v713, "node->child2().useKind() == CellUse || node->child2().useKind() == ObjectUse", "./dfg/DFGValidate.cpp", 434);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 434, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->child2().useKind() == CellUse || node->child2().useKind() == ObjectUse");
                  __break(0xC471u);
                  JUMPOUT(0x19855B830);
                }
              }
              else if (v214 == 409)
              {
                v279 = *(_DWORD *)(v205 + 24) + 1;
                if (*(_DWORD *)(*(_QWORD *)v9 + 164) <= v279)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19855B6F8);
                }
                v280 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 152) + 8 * v279) >> 50) & 0x3FLL;
                if ((_DWORD)v280 != 8 && (_DWORD)v280 != 11)
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v705);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v707, "m_graph.varArgChild(node, 1).useKind() == CellUse || m_graph.varArgChild(node, 1).useKind() == ObjectUse", "./dfg/DFGValidate.cpp", 437);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 437, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_graph.varArgChild(node, 1).useKind() == CellUse || m_graph.varArgChild(node, 1).useKind() == ObjectUse");
                  __break(0xC471u);
                  JUMPOUT(0x19855B760);
                }
              }
              else if (v214 == 419 && (*(_DWORD *)(v205 + 72) & 0xFC) != 0xA4)
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v690);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v692, "false", "./dfg/DFGValidate.cpp", 397);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 397, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"false");
                __break(0xC471u);
                JUMPOUT(0x19855B550);
              }
              goto LABEL_543;
            }
            if (*(unsigned __int16 *)(v205 + 18) > 0x14Au)
            {
              if (v214 - 331 < 2)
              {
LABEL_396:
                if ((v227 & 0x10) != 0)
                {
                  v231 = *(_DWORD *)(v205 + 24);
                  v232 = *(_DWORD *)(v205 + 32);
                  if (v232 + v231 > v231)
                  {
                    v233 = *(_DWORD *)(*(_QWORD *)v9 + 164);
                    v38 = v233 >= v231;
                    v234 = v233 - v231;
                    if (!v38)
                      v234 = 0;
                    if (v234 <= v232 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19855B214);
                    }
                  }
                }
              }
            }
            else
            {
              switch(v214)
              {
                case 0x106u:
                  if (*(_DWORD *)(v205 + 80) < *(_DWORD *)(v205 + 32))
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v708);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v710, "node->vectorLengthHint() >= node->numChildren()", "./dfg/DFGValidate.cpp", 411);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 411, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->vectorLengthHint() >= node->numChildren()");
                    __break(0xC471u);
                    JUMPOUT(0x19855B7C8);
                  }
                  break;
                case 0x10Bu:
                  if (*(_DWORD *)(**(_QWORD **)(v205 + 72) + 8) > *(_DWORD *)(v205 + 80))
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v702);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v704, "node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()", "./dfg/DFGValidate.cpp", 414);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 414, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()");
                    __break(0xC471u);
                    JUMPOUT(0x19855B6F0);
                  }
                  break;
                case 0x119u:
                  v235 = **(_QWORD **)(v205 + 72);
                  if ((v235 & 1) != 0)
                  {
                    v236 = *(unsigned int *)(v235 & 0xFFFFFFFFFFFFFFFCLL);
                    if (*(_DWORD *)(v235 & 0xFFFFFFFFFFFFFFFCLL))
                    {
LABEL_550:
                      v288 = 0;
                      v289 = 8 * v236;
                      do
                      {
                        v290 = v235 & 0xFFFFFFFFFFFFFFFCLL;
                        if ((v235 & 1) != 0)
                          v290 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFFFCLL) + v288 + 8);
                        v291 = (char **)(16 * *(unsigned int *)(v290 + 76));
                        if (v291 != &JSC::JSFinalObject::s_info && v291 != &JSC::JSArray::s_info)
                        {
                          JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                          WTF::dataLogF((WTF *)"\n\n\nAt ", v610);
                          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v612, "structure->classInfoForCells() == JSFinalObject::info() || structure->classInfoForCells() == JSArray::info()", "./dfg/DFGValidate.cpp", 361);
                          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 361, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"structure->classInfoForCells() == JSFinalObject::info() || structure->classInfoForCells() == JSArray::info()");
                          __break(0xC471u);
                          JUMPOUT(0x19855AB98);
                        }
                        if ((*(_BYTE *)(v290 + 8) & 0xEu) >= 0xA)
                        {
                          JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                          WTF::dataLogF((WTF *)"\n\n\nAt ", v613);
                          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v615, "!hasAnyArrayStorage(structure->indexingType())", "./dfg/DFGValidate.cpp", 364);
                          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 364, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!hasAnyArrayStorage(structure->indexingType())");
                          __break(0xC471u);
                          JUMPOUT(0x19855AC00);
                        }
                        v288 += 8;
                      }
                      while (v289 != v288);
                    }
                  }
                  else
                  {
                    v236 = v235 > 3;
                    if (v235 > 3)
                      goto LABEL_550;
                  }
                  break;
              }
            }
          }
          else
          {
            if (*(unsigned __int16 *)(v205 + 18) <= 0x3Du)
            {
              switch(*(_WORD *)(v205 + 18))
              {
                case 1:
                case 2:
                  if (!(**(_QWORD **)(v205 + 72) >> 49))
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v729);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v731, "node->isNumberConstant()", "./dfg/DFGValidate.cpp", 369);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 369, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->isNumberConstant()");
                    __break(0xC471u);
                    JUMPOUT(0x19855BAA0);
                  }
                  return;
                case 3:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xE:
                case 0xF:
                  goto LABEL_543;
                case 4:
                case 5:
                  v255 = (*(_DWORD *)(v205 + 56) & 7) - 3;
                  if (v255 > 4)
                    v256 = 1;
                  else
                    v256 = dword_199156548[v255];
                  if ((*(_DWORD *)((*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7u) - 3 > 4)
                    v277 = 1;
                  else
                    v277 = dword_199156548[(*(_DWORD *)((*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) - 3];
                  if (v256 != v277)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v756);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v758, "canonicalResultRepresentation(node->result()) == canonicalResultRepresentation(node->child1()->result())", "./dfg/DFGValidate.cpp", 262);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 262, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"canonicalResultRepresentation(node->result()) == canonicalResultRepresentation(node->child1()->result())");
                    __break(0xC471u);
                    JUMPOUT(0x19855BE48);
                  }
                  return;
                case 0xD:
                  v276 = *(_QWORD *)(v205 + 72);
                  if (v276 && (*(_QWORD *)(v276 + 24) >> 60) - 3 >= 3)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v753);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v755, "inlineCallFrame->isVarargs()", "./dfg/DFGValidate.cpp", 404);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 404, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"inlineCallFrame->isVarargs()");
                    __break(0xC471u);
                    JUMPOUT(0x19855BDE0);
                  }
                  return;
                case 0x10:
                case 0x11:
                  goto LABEL_481;
                default:
                  if (v214 == 26)
                  {
LABEL_481:
                    v268 = *(_QWORD *)(v205 + 24);
                    if ((v268 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v732);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v734, "!!node->child1()", "./dfg/DFGValidate.cpp", 267);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 267, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->child1()");
                      __break(0xC471u);
                      JUMPOUT(0x19855BB08);
                    }
                    v269 = (v268 >> 50) & 0x3F;
                    if (v269 > 0x34 || ((1 << v269) & 0x120000000003C7) == 0)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v665);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v667, "!\"Bad use kind\"", "./dfg/DFGValidate.cpp", 280);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 280, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!\"Bad use kind\"");
                      __break(0xC471u);
                      JUMPOUT(0x19855B27CLL);
                    }
                  }
                  return;
              }
              goto LABEL_543;
            }
            v229 = v214 - 62;
            if (v214 - 62 > 0x1E)
            {
LABEL_490:
              switch(*(_WORD *)(v205 + 18))
              {
                case 0x84:
                  goto LABEL_491;
                case 0x85:
                  v274 = *(_QWORD *)(v205 + 24);
                  if ((v274 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v741);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v743, "!!node->child1()", "./dfg/DFGValidate.cpp", 331);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 331, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->child1()");
                    __break(0xC471u);
                    JUMPOUT(0x19855BC40);
                  }
                  if ((v274 & 0xFC000000000000) != 0x20000000000000)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v744);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v746, "node->child1().useKind() == CellUse", "./dfg/DFGValidate.cpp", 332);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 332, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->child1().useKind() == CellUse");
                    __break(0xC471u);
                    JUMPOUT(0x19855BCA8);
                  }
                  return;
                case 0x87:
                  v271 = **(_QWORD **)(v205 + 72);
                  if ((*(_BYTE *)(v271 + 19) & 0xC) == 0)
                  {
                    v272 = *(_QWORD *)(v271 + 96);
                    v273 = (v272 & 1) != 0 ? (v272 >> 1) & 3 : *(unsigned __int8 *)(v272 + 4);
                    if (v273 != 2)
                    {
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v738);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v740, "!node->transition()->previous->dfgShouldWatch()", "./dfg/DFGValidate.cpp", 339);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 339, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!node->transition()->previous->dfgShouldWatch()");
                      __break(0xC471u);
                      JUMPOUT(0x19855BBD8);
                    }
                  }
                  return;
                case 0x8D:
                  v275 = *(_QWORD *)(v205 + 24);
                  if ((v275 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v747);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v749, "!!node->child1()", "./dfg/DFGValidate.cpp", 326);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 326, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"!!node->child1()");
                    __break(0xC471u);
                    JUMPOUT(0x19855BD10);
                  }
                  if ((v275 & 0xFC000000000000) != 0x20000000000000)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v750);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v752, "node->child1().useKind() == CellUse", "./dfg/DFGValidate.cpp", 327);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 327, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->child1().useKind() == CellUse");
                    __break(0xC471u);
                    JUMPOUT(0x19855BD78);
                  }
                  return;
                default:
                  goto LABEL_543;
              }
              goto LABEL_543;
            }
            if (((1 << v229) & 0x3F8010F5) != 0)
              goto LABEL_396;
            if (((1 << v229) & 0x600) != 0)
            {
              if ((v227 & 0x10) != 0)
              {
                v283 = *(_DWORD *)(v205 + 24);
                v284 = *(_QWORD *)(v205 + 32);
                v230 = v284;
                if (v284 + v283 > v283)
                {
                  v285 = *(_DWORD *)(*(_QWORD *)v9 + 164);
                  v38 = v285 >= v283;
                  v286 = v285 - v283;
                  if (!v38)
                    v286 = 0;
                  if (v286 <= (int)v284 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19855BE50);
                  }
                }
              }
              else
              {
                v230 = *(_DWORD *)(v205 + 32);
              }
              if (!v230)
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v759);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v761, "node->numChildren()", "./dfg/DFGValidate.cpp", 318);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 318, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->numChildren()");
                __break(0xC471u);
                JUMPOUT(0x19855BEB8);
              }
            }
            else
            {
              if (v214 != 92)
                goto LABEL_490;
              v270 = *(_DWORD *)(v205 + 72);
              if ((v270 & 0xFF0000) == 0x30000
                && *(_DWORD *)(v205 + 72) - 7 <= 2
                && BYTE1(v270) - 3 >= 3)
              {
                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v726);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v728, "node->arrayMode().isJSArrayWithOriginalStructure()", "./dfg/DFGValidate.cpp", 424);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 424, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"node->arrayMode().isJSArrayWithOriginalStructure()");
                __break(0xC471u);
                JUMPOUT(0x19855BA38);
              }
            }
          }
LABEL_543:
          if (++v204 >= (unint64_t)*(unsigned int *)(v145 + 220))
          {
            mayExit = *(_QWORD *)v9;
            v28 = v835;
            v30 = 830472192;
            a7 = -1;
LABEL_602:
            ++v28;
            v70 = *(unsigned int *)(mayExit + 60);
            if (v28 >= v70)
            {
LABEL_603:
              v300 = *(_DWORD *)(mayExit + 944);
              if (v300 < 2)
              {
                goto LABEL_936;
              }
              if (v300 == 2)
              {
                if (*(_DWORD *)(mayExit + 140) != 1)
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v817);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v818, "m_graph.m_roots.size() == 1", "./dfg/DFGValidate.cpp", 850);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 850, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_roots.size() == 1");
                  __break(0xC471u);
                  JUMPOUT(0x19855C7B0);
                }
                if (!(_DWORD)v70)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19855C7B8);
                }
                v301 = *(_QWORD **)(mayExit + 48);
                if (**(_QWORD **)(mayExit + 128) != *v301)
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v819);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v820, "m_graph.m_roots[0] == m_graph.block(0)", "./dfg/DFGValidate.cpp", 851);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 851, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_roots[0] == m_graph.block(0)");
                  __break(0xC471u);
                  JUMPOUT(0x19855C818);
                }
                if (!*(_DWORD *)(mayExit + 460))
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v821);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v822, "!m_graph.m_argumentFormats.isEmpty()", "./dfg/DFGValidate.cpp", 852);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 852, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"!m_graph.m_argumentFormats.isEmpty()");
                  __break(0xC471u);
                  JUMPOUT(0x19855C878);
                }
                v302 = *(_QWORD *)(mayExit + 440);
                if (v302 && *(_DWORD *)(v302 - 12))
                {
                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v823);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v824, "m_graph.m_rootToArguments.isEmpty()", "./dfg/DFGValidate.cpp", 853);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 853, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_rootToArguments.isEmpty()");
                  __break(0xC471u);
                  JUMPOUT(0x19855C8D8);
                }
                v303 = *(unsigned int *)(mayExit + 60);
                while ((_DWORD)v303)
                {
                  v307 = v301[--v303];
                  if (v307)
                  {
                    v308 = *(unsigned int *)(v307 + 36);
                    if ((_DWORD)v308)
                    {
                      v304 = *(_QWORD *)(v307 + 24);
                      v305 = v308 - 1;
                      do
                        *(_QWORD *)(*(_QWORD *)(v304 + 8 * v305) + 96) = v307;
                      while ((unint64_t)v305--);
                    }
                    v309 = *(unsigned int *)(v307 + 220);
                    if ((_DWORD)v309)
                    {
                      v310 = *(_QWORD *)(v307 + 208);
                      v311 = v309 - 1;
                      do
                        *(_QWORD *)(*(_QWORD *)(v310 + 8 * v311) + 96) = v307;
                      while ((unint64_t)v311--);
                    }
                  }
                }
                mayExit = (unint64_t)JSC::DFG::Graph::ensureSSADominators((JSC::DFG::Graph *)mayExit);
                v313 = mayExit;
                if (byte_1ECF4C41C)
                  JSC::DFG::validateOSRExitAvailability(*(JSC::DFG **)v9, (JSC::DFG::Graph *)a2);
                v314 = *(_QWORD *)v9;
                v315 = *(_DWORD **)(*(_QWORD *)v9 + 872);
                v831 = *(_QWORD *)v9;
                if (!v315)
                {
                  v316 = 0;
                  v317 = 0;
                  goto LABEL_630;
                }
                v317 = *(v315 - 1);
                v318 = &v315[2 * v317];
                if (*(v315 - 3))
                {
                  v316 = *(_DWORD **)(*(_QWORD *)v9 + 872);
                  if ((_DWORD)v317)
                  {
                    v537 = 8 * v317;
                    v316 = *(_DWORD **)(*(_QWORD *)v9 + 872);
                    do
                    {
                      if ((*v316 + 1) > 1)
                        goto LABEL_1043;
                      v316 += 2;
                      v537 -= 8;
                    }
                    while (v537);
                    v316 = v318;
                  }
LABEL_1043:
                  v314 = *(_QWORD *)v9;
                  v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
                  goto LABEL_1044;
                }
                v316 = &v315[2 * v317];
                v314 = *(_QWORD *)v9;
                v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
LABEL_630:
                v318 = &v315[2 * v317];
                if (v315)
LABEL_1044:
                  v315 += 2 * *(v315 - 1);
                while (v316 != v315)
                {
                  if (!*v316)
                  {
                    JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v774);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v775, "entrypointIndex > 0", "./dfg/DFGValidate.cpp", 863);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 863, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"entrypointIndex > 0");
                    __break(0xC471u);
                    JUMPOUT(0x19855C0E4);
                  }
                  v319 = v316 + 2;
                  v316 = v318;
                  if (v319 != v318)
                  {
                    v316 = v319;
                    do
                    {
                      if ((*v316 + 1) > 1)
                        goto LABEL_638;
                      v316 += 2;
                    }
                    while (v316 != v318);
                    v316 = v318;
                  }
LABEL_638:
                  ;
                }
                v836 = *(unsigned int *)(v314 + 60);
                if ((_DWORD)v836)
                {
                  v320 = 0;
                  while (!*(_QWORD *)(*(_QWORD *)(v314 + 48) + 8 * v320))
                  {
                    if (v836 == ++v320)
                      goto LABEL_936;
                  }
                  if ((_DWORD)v836 != (_DWORD)v320)
                  {
                    LODWORD(v321) = *(_DWORD *)(v314 + 60);
                    while (1)
                    {
                      v845 = 0;
                      if (v321 <= v320)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19855C598);
                      }
                      v322 = *(_QWORD *)(*(_QWORD *)(v314 + 48) + 8 * v320);
                      v845 = (JSC::DFG::_anonymous_namespace_::Validate *)v322;
                      if (*(_DWORD *)(v322 + 36))
                      {
                        JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                        WTF::dataLogF((WTF *)"\n\n\nAt ", v809);
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v811, "block->phis.isEmpty()", "./dfg/DFGValidate.cpp", 866);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 866, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"block->phis.isEmpty()");
                        __break(0xC471u);
                        JUMPOUT(0x19855C600);
                      }
                      v844 = 0;
                      v323 = *(unsigned int *)(v322 + 220);
                      if ((_DWORD)v323)
                        break;
LABEL_931:
                      v320 = (v320 + 1);
                      v321 = *(unsigned int *)(v314 + 60);
                      if (v321 > v320)
                      {
                        do
                        {
                          if (*(_QWORD *)(*(_QWORD *)(v314 + 48) + 8 * v320))
                            goto LABEL_935;
                          ++v320;
                        }
                        while (v321 != v320);
                        LODWORD(v320) = *(_DWORD *)(v314 + 60);
                      }
LABEL_935:
                      if ((_DWORD)v836 == (_DWORD)v320)
                        goto LABEL_936;
                    }
                    v324 = 0;
                    v325 = *(uint64_t **)(v322 + 208);
                    v326 = &v325[v323];
                    while (2)
                    {
                      v843 = 0;
                      v843 = *v325;
                      v327 = v843;
                      v328 = *(unsigned __int16 *)(v843 + 18);
                      if (v328 <= 0x27)
                      {
                        if (v328 == 27)
                        {
                          if (*(_BYTE *)(v843 + 16))
                          {
                            JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                            WTF::dataLogF((WTF *)"\n\n\nAt ", v657);
                            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v659, "!node->origin.exitOK", "./dfg/DFGValidate.cpp", 877);
                            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 877, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"!node->origin.exitOK");
                            __break(0xC471u);
                            JUMPOUT(0x19855B180);
                          }
                        }
                        else if (((1 << v328) & 0xC000818000) != 0)
                        {
                          JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                          WTF::dataLogF((WTF *)"\n\n\nAt ", v684);
                          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v686, "!\"bad node type for SSA\"", "./dfg/DFGValidate.cpp", 885);
                          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 885, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"!\"bad node type for SSA\"");
                          __break(0xC471u);
                          JUMPOUT(0x19855B478);
                        }
                      }
                      if (v324)
                      {
                        v324 = 1;
                        goto LABEL_846;
                      }
                      if (*(unsigned __int16 *)(v843 + 18) <= 0x114u)
                      {
                        if (*(unsigned __int16 *)(v843 + 18) <= 0xF5u)
                        {
                          if (v328 <= 0x1A && ((1 << v328) & 0x7100000) != 0)
                            goto LABEL_804;
                          if ((v328 - 96) <= 4 && ((1 << (v328 - 96)) & 0x13) != 0)
                            goto LABEL_804;
                          goto LABEL_854;
                        }
                        if (*(unsigned __int16 *)(v843 + 18) <= 0xFBu)
                        {
                          if ((_DWORD)v328 == 246 || (_DWORD)v328 == 248)
                            goto LABEL_804;
                          goto LABEL_854;
                        }
                        if ((_DWORD)v328 == 252)
                          goto LABEL_804;
                        if ((_DWORD)v328 == 263)
                        {
                          v337 = *(unsigned int *)(v843 + 32);
                          if (*(_DWORD *)(v843 + 32))
                          {
                            v338 = *(_QWORD *)v9;
                            v339 = *(_QWORD *)(v843 + 24);
                            v340 = *(_DWORD *)(*(_QWORD *)v9 + 164);
                            v38 = v340 >= v339;
                            LODWORD(v342) = v340 - v339;
                            v341 = (_DWORD)v342 != 0 && v38;
                            if (v38)
                              v342 = v342;
                            else
                              v342 = 0;
                            if (!v341)
                              goto LABEL_1116;
                            v343 = *(uint64_t **)(v843 + 72);
                            v344 = *(_QWORD *)(v843 + 24);
                            v345 = *(_QWORD *)(v338 + 152);
                            v346 = *(unsigned __int16 *)((*(_QWORD *)(v345 + 8 * v344) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                            v347 = (v346 - 278) > 0xC || ((1 << (v346 - 22)) & 0x15F1) == 0;
                            if (!v347
                              || ((v346 - 348) <= 7
                                ? (v348 = ((1 << (v346 - 92)) & 0x9F) == 0)
                                : (v348 = 1),
                                  !v348))
                            {
                              v452 = (unint64_t *)(2 * *v343);
                              if ((*v343 & 0x8000000000000000) == 0 && (mayExit = *v452) == 0
                                || ((v453 = v452 + 1, *v343 >= 0)
                                  ? (v454 = v453)
                                  : (v454 = *(unint64_t **)(v843 + 72)),
                                    (*(_BYTE *)v454 & 1) == 0))
                              {
LABEL_1127:
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v800);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v802, "bitVector->get(i)", "./dfg/DFGValidate.cpp", 957);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 957, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"bitVector->get(i)");
                                __break(0xC471u);
                                JUMPOUT(0x19855C4B8);
                              }
                              if (*(_DWORD *)(v338 + 944) != 2)
                              {
LABEL_1128:
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v803);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v805, "m_graph.m_form == SSA", "./dfg/DFGValidate.cpp", 958);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 958, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_form == SSA");
                                __break(0xC471u);
                                JUMPOUT(0x19855C524);
                              }
                              if (v346 != 350)
                              {
LABEL_1129:
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v806);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v808, "child->op() == PhantomSpread", "./dfg/DFGValidate.cpp", 959);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 959, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"child->op() == PhantomSpread");
                                __break(0xC471u);
                                JUMPOUT(0x19855C590);
                              }
                            }
                            if (v337 != 1)
                            {
                              v349 = v345 + 8 * v344;
                              v350 = 1;
                              while (v342 != v350)
                              {
                                v351 = *(unsigned __int16 *)((*(_QWORD *)(v349 + 8 * v350) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                                v352 = (v351 - 278) > 0xC || ((1 << (v351 - 22)) & 0x15F1) == 0;
                                if (!v352
                                  || ((v351 - 348) <= 7
                                    ? (v353 = ((1 << (v351 - 92)) & 0x9F) == 0)
                                    : (v353 = 1),
                                      !v353))
                                {
                                  v354 = (unint64_t *)(2 * *v343);
                                  if (*v343 < 0)
                                    mayExit = 63;
                                  else
                                    mayExit = *v354;
                                  if (mayExit <= v350)
                                    goto LABEL_1127;
                                  v355 = v354 + 1;
                                  v356 = *v343 >= 0 ? v355 : *(unint64_t **)(v843 + 72);
                                  if (((*(unint64_t *)((char *)v356 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v350) & 1) == 0)
                                    goto LABEL_1127;
                                  if (*(_DWORD *)(v338 + 944) != 2)
                                    goto LABEL_1128;
                                  if (v351 != 350)
                                    goto LABEL_1129;
                                }
                                if (v337 == ++v350)
                                  goto LABEL_804;
                              }
LABEL_1116:
                              __break(0xC471u);
                              JUMPOUT(0x19855BED0);
                            }
                          }
                        }
                        else
                        {
LABEL_854:
                          v420 = *(_QWORD *)(v843 + 24);
                          if ((*(_BYTE *)(v843 + 56) & 0x10) != 0)
                          {
                            v433 = *(_DWORD *)(v843 + 32);
                            v434 = v433 + v420;
                            if (v433 + (int)v420 > v420)
                            {
                              v435 = *(_DWORD *)(*(_QWORD *)v9 + 164);
                              v436 = *(_QWORD *)(v843 + 24);
                              if (v435 <= v420)
                                v420 = v420;
                              else
                                v420 = v435;
                              if (v436 == v420)
                                goto LABEL_1126;
                              v437 = *(_QWORD *)(*(_QWORD *)v9 + 152);
                              if ((*(_QWORD *)(v437 + 8 * v436) & 0xFF00FFFFFFFFFFFFLL) != 0)
                              {
                                v438 = *(unsigned __int16 *)((*(_QWORD *)(v437 + 8 * v436) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                                v439 = (v438 - 278) > 0xC || ((1 << (v438 - 22)) & 0x15F1) == 0;
                                if (!v439
                                  || ((v440 = v438 - 348, v341 = v440 > 7, v441 = (1 << v440) & 0x9F, !v341)
                                    ? (v442 = v441 == 0)
                                    : (v442 = 1),
                                      !v442))
                                {
LABEL_1087:
                                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                  WTF::dataLogF((WTF *)"\n\n\nAt ", v651);
                                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v653, "!edge->isPhantomAllocation()", "./dfg/DFGValidate.cpp", 981);
                                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 981, "auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(const Edge &) const", (uint64_t)"!edge->isPhantomAllocation()");
                                  __break(0xC471u);
                                  JUMPOUT(0x19855B0ACLL);
                                }
                              }
                              if (v434 != (_DWORD)v436 + 1)
                              {
                                v443 = (_QWORD *)(v437 + 8 * v436 + 8);
                                v444 = v433 - 1;
                                v445 = ~v436 + v420;
                                while (v445)
                                {
                                  if ((*v443 & 0xFF00FFFFFFFFFFFFLL) != 0)
                                  {
                                    v446 = *(unsigned __int16 *)((*v443 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                                    if ((v446 - 278) <= 0xC && ((1 << (v446 - 22)) & 0x15F1) != 0)
                                      goto LABEL_1087;
                                    v448 = v446 - 348;
                                    v341 = v448 > 7;
                                    v449 = (1 << v448) & 0x9F;
                                    if (!v341 && v449 != 0)
                                      goto LABEL_1087;
                                  }
                                  ++v443;
                                  --v445;
                                  if (!--v444)
                                    goto LABEL_804;
                                }
LABEL_1126:
                                __break(0xC471u);
                                JUMPOUT(0x19855C44CLL);
                              }
                            }
                          }
                          else if ((v420 & 0xFF00FFFFFFFFFFFFLL) != 0)
                          {
                            v421 = *(unsigned __int16 *)((v420 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                            if ((v421 - 278) <= 0xC && ((1 << (v421 - 22)) & 0x15F1) != 0)
                              goto LABEL_1120;
                            v423 = v421 - 348;
                            v341 = v423 > 7;
                            v424 = (1 << v423) & 0x9F;
                            if (!v341 && v424 != 0)
                              goto LABEL_1120;
                            if ((*(_QWORD *)(v843 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
                            {
                              v426 = *(unsigned __int16 *)((*(_QWORD *)(v843 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                              v427 = (v426 - 278) > 0xC || ((1 << (v426 - 22)) & 0x15F1) == 0;
                              if (!v427
                                || ((v428 = v426 - 348, v341 = v428 > 7, v429 = (1 << v428) & 0x9F, !v341)
                                  ? (v430 = v429 == 0)
                                  : (v430 = 1),
                                    !v430
                                 || (*(_QWORD *)(v843 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0
                                 && ((v431 = *(unsigned __int16 *)((*(_QWORD *)(v843 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                                      (v431 - 278) <= 0xC)
                                  && ((1 << (v431 - 22)) & 0x15F1) != 0
                                  || (v432 = v431 - 348, v432 <= 7) && ((1 << v432) & 0x9F) != 0)))
                              {
LABEL_1120:
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v768);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v770, "!edge->isPhantomAllocation()", "./dfg/DFGValidate.cpp", 981);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 981, "auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(const Edge &) const", (uint64_t)"!edge->isPhantomAllocation()");
                                __break(0xC471u);
                                JUMPOUT(0x19855C01CLL);
                              }
                            }
                          }
                        }
                      }
                      else if (*(unsigned __int16 *)(v843 + 18) > 0x15Bu)
                      {
                        if (*(unsigned __int16 *)(v843 + 18) > 0x16Eu)
                        {
                          switch((_DWORD)v328)
                          {
                            case 0x16F:
                              if (*(_DWORD *)(*(_QWORD *)(v843 + 72) + 12) != *(_DWORD *)(*(_QWORD *)v9 + 864))
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v788);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v790, "node->entrySwitchData()->cases.size() == m_graph.m_numberOfEntrypoints", "./dfg/DFGValidate.cpp", 970);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 970, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"node->entrySwitchData()->cases.size() == m_graph.m_numberOfEntrypoints");
                                __break(0xC471u);
                                JUMPOUT(0x19855C300);
                              }
                              break;
                            case 0x174:
                              break;
                            case 0x1A2:
                              if (*(_DWORD *)(v843 + 72) >= *(_DWORD *)(*(_QWORD *)v9 + 864))
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v776);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v778, "node->entrypointIndex() < m_graph.m_numberOfEntrypoints", "./dfg/DFGValidate.cpp", 974);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 974, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"node->entrypointIndex() < m_graph.m_numberOfEntrypoints");
                                __break(0xC471u);
                                JUMPOUT(0x19855C150);
                              }
                              break;
                            default:
                              goto LABEL_854;
                          }
                        }
                        else
                        {
                          switch(*(_WORD *)(v843 + 18))
                          {
                            case 0x15C:
                            case 0x15D:
                            case 0x163:
                              break;
                            case 0x15E:
                              if (*(_DWORD *)(*(_QWORD *)v9 + 944) != 2)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v794);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v796, "m_graph.m_form == SSA", "./dfg/DFGValidate.cpp", 928);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 928, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_form == SSA");
                                __break(0xC471u);
                                JUMPOUT(0x19855C3D8);
                              }
                              v336 = *(unsigned __int16 *)((*(_QWORD *)(v843 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                              if (v336 != 349 && v336 != 352)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v797);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v799, "node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer", "./dfg/DFGValidate.cpp", 930);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 930, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer");
                                __break(0xC471u);
                                JUMPOUT(0x19855C444);
                              }
                              break;
                            case 0x15F:
                              v357 = *(_QWORD *)v9;
                              if (*(_DWORD *)(*(_QWORD *)v9 + 944) != 2)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v785);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v787, "m_graph.m_form == SSA", "./dfg/DFGValidate.cpp", 934);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 934, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_form == SSA");
                                __break(0xC471u);
                                JUMPOUT(0x19855C294);
                              }
                              v358 = *(unsigned int *)(v843 + 32);
                              if (!*(_DWORD *)(v843 + 32))
                                break;
                              v359 = *(_QWORD *)(v843 + 24);
                              v360 = *(_DWORD *)(v357 + 164);
                              v38 = v360 >= v359;
                              LODWORD(v362) = v360 - v359;
                              v361 = (_DWORD)v362 != 0 && v38;
                              if (v38)
                                v362 = v362;
                              else
                                v362 = 0;
                              if (!v361)
                                goto LABEL_1117;
                              v363 = *(uint64_t **)(v843 + 72);
                              v364 = *(_QWORD *)(v357 + 152);
                              v365 = *v363;
                              v366 = (_QWORD *)(2 * *v363);
                              if ((*v363 & 0x8000000000000000) == 0 && !*v366)
                                goto LABEL_758;
                              v451 = v366 + 1;
                              if (v365 < 0)
                                v451 = *(_BYTE **)(v843 + 72);
                              if ((*v451 & 1) != 0)
                              {
                                if (*(_WORD *)((*(_QWORD *)(v364 + 8 * *(_QWORD *)(v843 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                              + 0x12) != 350)
                                {
LABEL_1119:
                                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                  WTF::dataLogF((WTF *)"\n\n\nAt ", v765);
                                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v767, "child->op() == PhantomSpread", "./dfg/DFGValidate.cpp", 940);
                                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 940, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"child->op() == PhantomSpread");
                                  __break(0xC471u);
                                  JUMPOUT(0x19855BFB0);
                                }
                              }
                              else
                              {
LABEL_758:
                                v367 = *(unsigned __int16 *)((*(_QWORD *)(v364
                                                                        + 8 * *(_QWORD *)(v843 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                                           + 0x12);
                                mayExit = 5617;
                                v368 = (v367 - 278) > 0xC || ((1 << (v367 - 22)) & 0x15F1) == 0;
                                if (!v368
                                  || ((v369 = v367 - 348, v341 = v369 > 7, v370 = (1 << v369) & 0x9F, !v341)
                                    ? (v371 = v370 == 0)
                                    : (v371 = 1),
                                      !v371))
                                {
LABEL_1077:
                                  JSC::DFG::startCrashing((JSC::DFG *)0x15F1);
                                  WTF::dataLogF((WTF *)"\n\n\nAt ", v621);
                                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v623, "!child->isPhantomAllocation()", "./dfg/DFGValidate.cpp", 942);
                                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 942, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"!child->isPhantomAllocation()");
                                  __break(0xC471u);
                                  JUMPOUT(0x19855AD40);
                                }
                              }
                              if (v358 != 1)
                              {
                                if (v365 >= 0)
                                  v363 = v366 + 1;
                                v372 = v364 + 8 * *(_QWORD *)(v843 + 24);
                                v373 = 1;
                                while (1)
                                {
                                  if (v362 == v373)
                                  {
LABEL_1117:
                                    __break(0xC471u);
                                    JUMPOUT(0x19855BED8);
                                  }
                                  if (v365 < 0)
                                    v374 = 63;
                                  else
                                    v374 = *v366;
                                  if (v374 > v373
                                    && ((*(unint64_t *)((char *)v363 + ((v373 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v373) & 1) != 0)
                                  {
                                    if (*(_WORD *)((*(_QWORD *)(v372 + 8 * v373) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 350)
                                      goto LABEL_1119;
                                  }
                                  else
                                  {
                                    v375 = *(unsigned __int16 *)((*(_QWORD *)(v372 + 8 * v373) & 0xFF00FFFFFFFFFFFFLL)
                                                               + 0x12);
                                    mayExit = 5617;
                                    if ((v375 - 278) <= 0xC && ((1 << (v375 - 22)) & 0x15F1) != 0)
                                      goto LABEL_1077;
                                    v377 = v375 - 348;
                                    v341 = v377 > 7;
                                    v378 = (1 << v377) & 0x9F;
                                    if (!v341 && v378 != 0)
                                      goto LABEL_1077;
                                  }
                                  if (v358 == ++v373)
                                    goto LABEL_804;
                                }
                              }
                              break;
                            case 0x160:
                              if (*(_DWORD *)(*(_QWORD *)v9 + 944) != 2)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v779);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v781, "m_graph.m_form == SSA", "./dfg/DFGValidate.cpp", 948);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 948, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"m_graph.m_form == SSA");
                                __break(0xC471u);
                                JUMPOUT(0x19855C1BCLL);
                              }
                              if (*(_DWORD *)(**(_QWORD **)(v843 + 72) + 8) > *(_DWORD *)(v843 + 80))
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v782);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v784, "node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()", "./dfg/DFGValidate.cpp", 949);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 949, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()");
                                __break(0xC471u);
                                JUMPOUT(0x19855C228);
                              }
                              break;
                            default:
                              goto LABEL_854;
                          }
                        }
                      }
                      else
                      {
                        if ((v328 - 277) > 0xD)
                          goto LABEL_854;
                        if (((1 << (v328 - 21)) & 0x29E2) != 0)
                          goto LABEL_804;
                        if ((_DWORD)v328 != 277)
                        {
                          if ((_DWORD)v328 == 279)
                          {
                            v329 = *(unsigned __int16 *)((*(_QWORD *)(v843 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                            if (v329 != 288 && ((v329 - 278) > 0xC || ((1 << (v329 - 22)) & 0x11F1) == 0))
                            {
                              v331 = v329 - 348;
                              v341 = v331 > 7;
                              v332 = (1 << v331) & 0x9F;
                              if (v341 || v332 == 0)
                              {
                                JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                WTF::dataLogF((WTF *)"\n\n\nAt ", v791);
                                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v793, "node->child1()->isPhantomAllocation()", "./dfg/DFGValidate.cpp", 924);
                                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 924, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"node->child1()->isPhantomAllocation()");
                                __break(0xC471u);
                                JUMPOUT(0x19855C36CLL);
                              }
                            }
                            goto LABEL_804;
                          }
                          goto LABEL_854;
                        }
                        v380 = *(unsigned __int16 *)((*(_QWORD *)(v843 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        v381 = (v380 - 278) > 0xC || ((1 << (v380 - 22)) & 0x15F1) == 0;
                        if (!v381
                          || ((v382 = v380 - 348, v341 = v382 > 7, v383 = (1 << v382) & 0x8D, !v341)
                            ? (v384 = v383 == 0)
                            : (v384 = 1),
                              !v384))
                        {
                          JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                          WTF::dataLogF((WTF *)"\n\n\nAt ", v762);
                          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v764, "!node->child1()->isPhantomAllocation() || node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer", "./dfg/DFGValidate.cpp", 966);
                          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 966, "void JSC::DFG::(anonymous namespace)::Validate::validateSSA()", (uint64_t)"!node->child1()->isPhantomAllocation() || node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer");
                          __break(0xC471u);
                          JUMPOUT(0x19855BF44);
                        }
                      }
LABEL_804:
                      v324 = (_DWORD)v328 == 379 || (_DWORD)v328 == 185;
                      v386 = *(_QWORD *)v9;
                      v838 = v313;
                      v839 = &v845;
                      v840 = &v844;
                      v841 = v9;
                      v842 = &v843;
                      v387 = *(_QWORD *)(v843 + 24);
                      if ((*(_BYTE *)(v843 + 56) & 0x10) != 0)
                      {
                        v390 = *(_QWORD *)(v843 + 32);
                        if ((int)v390 + (int)v387 > v387)
                        {
                          v391 = *(_QWORD *)(v843 + 24);
                          v392 = *(unsigned int *)(v386 + 164);
                          v393 = *(_DWORD *)(v313 + 20);
                          v394 = *(_QWORD *)(v313 + 8);
                          v395 = (v390 + v387);
                          if (v392 <= v387)
                            v392 = *(_QWORD *)(v843 + 24);
                          do
                          {
                            if (v391 == v392)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19855A458);
                            }
                            mayExit = *(_QWORD *)(*(_QWORD *)(v386 + 152) + 8 * v391);
                            v396 = mayExit & 0xFF00FFFFFFFFFFFFLL;
                            if ((mayExit & 0xFF00FFFFFFFFFFFFLL) != 0)
                            {
                              v397 = *((unsigned int *)v845 + 2);
                              if (v393 <= v397)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19855AA48);
                              }
                              v398 = *(unsigned int *)(*(_QWORD *)((mayExit & 0xFF00FFFFFFFFFFFFLL) + 0x60) + 8);
                              if (v393 <= v398)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19855AA50);
                              }
                              v399 = v394 + 32 * v397;
                              a3 = *(unsigned int *)(v399 + 24);
                              v400 = v394 + 32 * v398;
                              v27 = *(unsigned int *)(v400 + 24);
                              if (a3 <= v27
                                || *(_DWORD *)(v399 + 28) >= *(_DWORD *)(v400 + 28))
                              {
                                if (!v844)
                                  goto LABEL_1055;
                                v401 = *(_DWORD *)(v844 - 8);
                                v402 = (v396 + ~(mayExit << 32)) ^ ((v396 + ~(mayExit << 32)) >> 22);
                                v403 = 9 * ((v402 + ~(v402 << 13)) ^ ((v402 + ~(v402 << 13)) >> 8));
                                v404 = (v403 ^ (v403 >> 15)) + ~((v403 ^ (v403 >> 15)) << 27);
                                mayExit = v401 & ((v404 >> 31) ^ v404);
                                v405 = *(_QWORD *)(v844 + 8 * mayExit);
                                if (v405 != v396)
                                {
                                  LODWORD(a3) = 1;
                                  while (v405)
                                  {
                                    mayExit = ((_DWORD)mayExit + (_DWORD)a3) & v401;
                                    v405 = *(_QWORD *)(v844 + 8 * mayExit);
                                    a3 = (a3 + 1);
                                    if (v405 == v396)
                                      goto LABEL_829;
                                  }
LABEL_1055:
                                  JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                                  WTF::dataLogF((WTF *)"\n\n\nAt ", v567);
                                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v569, "dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())", "./dfg/DFGValidate.cpp", 989);
                                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 989, "auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(Edge) const", (uint64_t)"dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())");
                                  __break(0xC471u);
                                  JUMPOUT(0x19855A450);
                                }
                              }
                            }
LABEL_829:
                            ++v391;
                          }
                          while (v391 < v395);
                        }
                      }
                      else if ((v387 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v388 = *(_QWORD *)(v327 + 32);
                        if ((v388 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          v389 = *(_QWORD *)(v327 + 40);
                          if ((v389 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        }
                      }
                      v406 = v844;
                      if (v844
                        || (mayExit = (unint64_t)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v844, 0, a3, v27, v28, v30, a7, a8), (v406 = v844) != 0))
                      {
                        v407 = *(_DWORD *)(v406 - 8);
                      }
                      else
                      {
                        v407 = 0;
                      }
                      v408 = v843;
                      v409 = (~(v408 << 32) + v408) ^ ((unint64_t)(~(v408 << 32) + v408) >> 22);
                      v410 = 9 * ((v409 + ~(v409 << 13)) ^ ((v409 + ~(v409 << 13)) >> 8));
                      v411 = (v410 ^ (v410 >> 15)) + ~((v410 ^ (v410 >> 15)) << 27);
                      v412 = v407 & ((v411 >> 31) ^ v411);
                      a2 = v406 + 8 * v412;
                      v413 = *(_QWORD *)a2;
                      if (*(_QWORD *)a2)
                      {
                        v414 = 0;
                        v415 = 1;
                        do
                        {
                          if (v413 == v843)
                            goto LABEL_846;
                          if (v413 == -1)
                            v414 = (_QWORD *)a2;
                          v412 = (v412 + v415) & v407;
                          a2 = v406 + 8 * v412;
                          v413 = *(_QWORD *)a2;
                          ++v415;
                        }
                        while (*(_QWORD *)a2);
                        if (v414)
                        {
                          *v414 = 0;
                          --*(_DWORD *)(v844 - 16);
                          v408 = v843;
                          a2 = (unint64_t)v414;
                        }
                      }
                      *(_QWORD *)a2 = v408;
                      if (v844)
                        v416 = *(_DWORD *)(v844 - 12) + 1;
                      else
                        v416 = 1;
                      *(_DWORD *)(v844 - 12) = v416;
                      if (v844)
                        v417 = *(_DWORD *)(v844 - 12);
                      else
                        v417 = 0;
                      v418 = (*(_DWORD *)(v844 - 16) + v417);
                      v419 = *(unsigned int *)(v844 - 4);
                      if (v419 > 0x400)
                      {
                        if (v419 <= 2 * v418)
                          goto LABEL_851;
                      }
                      else
                      {
                        if (3 * v419 > 4 * v418)
                          goto LABEL_846;
LABEL_851:
                        mayExit = (unint64_t)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v844, (uint64_t *)a2, a3, v27, v28, v30, a7, a8);
                      }
LABEL_846:
                      if (++v325 == v326)
                      {
                        v314 = v831;
                        if (v844)
                          WTF::fastFree(v844 - 16, (void *)a2, a3, v27, v28, v30, a7, a8);
                        goto LABEL_931;
                      }
                      continue;
                    }
                  }
                }
              }
LABEL_936:
              v455 = *(_QWORD *)v9;
              v456 = *(unsigned int *)(*(_QWORD *)v9 + 60);
              v457 = v826;
              if (!(_DWORD)v456)
                goto LABEL_1035;
              v458 = 0;
              while (!*(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v458))
              {
                if (v456 == ++v458)
                  goto LABEL_988;
              }
              if ((_DWORD)v456 != (_DWORD)v458)
              {
                v459 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v460 = v456;
                LODWORD(v461) = v458;
                v828 = v456;
                v832 = v455;
                do
                {
                  if (v460 <= v461)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19855BEC0);
                  }
                  v462 = *(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v461);
                  v463 = *(unsigned int *)(v462 + 220);
                  if ((_DWORD)v463)
                  {
                    v837 = v461;
                    v464 = *(JSC::DFG::Node ***)(v462 + 208);
                    v465 = &v464[v463];
                    while (1)
                    {
                      v845 = 0;
                      v466 = *v464;
                      v845 = *v464;
                      v467 = *(JSC::DFG::Graph **)v9;
                      v468 = *(_QWORD *)(v459 + 752);
                      if (!v468)
                        goto LABEL_978;
                      v469 = (_BYTE *)(v468 + 8304);
                      *(_BYTE *)(v468 + 8304) = 1;
                      v470 = *(unsigned int *)(v468 + 8320);
                      if ((_DWORD)v470)
                      {
                        *(_DWORD *)(v468 + 8320) = v470 - *(_DWORD *)(v468 + 8324);
                        casual = (_QWORD *)(*(_QWORD *)(v468 + 8312) - v470);
                        goto LABEL_951;
                      }
                      v472 = *(_QWORD *)(v468 + 8344);
                      v473 = *(_QWORD *)(v468 + 8328);
                      if (v472)
                        goto LABEL_950;
                      if (*(_BYTE *)(v468 + 8309) != 6)
                        goto LABEL_977;
                      v483 = *(_DWORD *)(v468 + 8340);
                      v484 = *(unsigned int *)(v468 + 8336);
                      if (v484 >= v483)
                        goto LABEL_977;
                      *(_QWORD *)&v469[8 * v484 + 56] = 0;
                      v485 = (unint64_t *)(v468 + 8 * v484 + 8368);
                      v486 = v483 - 1 - v484;
                      do
                      {
                        if (!v486)
                        {
                          *(_DWORD *)(v468 + 8336) = v483;
LABEL_977:
                          *v469 = 0;
LABEL_978:
                          casual = (_QWORD *)bmalloc_allocate_casual(16, 1);
                          goto LABEL_952;
                        }
                        v473 += 1024;
                        v488 = *v485++;
                        v487 = v488;
                        LODWORD(v484) = v484 + 1;
                        --v486;
                      }
                      while (!v488);
                      v472 = __rbit64(v487);
                      *(_DWORD *)(v468 + 8336) = v484;
                      *(_QWORD *)(v468 + 8328) = v473;
LABEL_950:
                      v474 = __clz(v472);
                      *(_QWORD *)(v468 + 8344) = v472 & ~(0x8000000000000000 >> v474);
                      casual = (_QWORD *)(v473 + 16 * v474);
LABEL_951:
                      *v469 = 0;
LABEL_952:
                      *casual = off_1E358E7D0;
                      v838 = (uint64_t)casual;
                      v475 = *(_QWORD *)(v459 + 752);
                      if (!v475)
                        goto LABEL_981;
                      v476 = (_BYTE *)(v475 + 8488);
                      *(_BYTE *)(v475 + 8488) = 1;
                      v477 = *(unsigned int *)(v475 + 8504);
                      if ((_DWORD)v477)
                      {
                        *(_DWORD *)(v475 + 8504) = v477 - *(_DWORD *)(v475 + 8508);
                        v478 = (JSC::DFG::_anonymous_namespace_::Validate **)(*(_QWORD *)(v475 + 8496) - v477);
                        goto LABEL_957;
                      }
                      v479 = *(_QWORD *)(v475 + 8528);
                      v480 = *(_QWORD *)(v475 + 8512);
                      if (v479)
                        goto LABEL_956;
                      if (*(_BYTE *)(v475 + 8493) != 6)
                        goto LABEL_980;
                      v489 = *(_DWORD *)(v475 + 8524);
                      v490 = *(unsigned int *)(v475 + 8520);
                      if (v490 >= v489)
                        goto LABEL_980;
                      *(_QWORD *)&v476[8 * v490 + 56] = 0;
                      v491 = (unint64_t *)(v475 + 8 * v490 + 8552);
                      v492 = v489 - 1 - v490;
                      while (2)
                      {
                        if (!v492)
                        {
                          *(_DWORD *)(v475 + 8520) = v489;
LABEL_980:
                          *v476 = 0;
LABEL_981:
                          v478 = (JSC::DFG::_anonymous_namespace_::Validate **)bmalloc_allocate_casual(24, 1);
                          goto LABEL_958;
                        }
                        v480 += 1024;
                        v494 = *v491++;
                        v493 = v494;
                        LODWORD(v490) = v490 + 1;
                        --v492;
                        if (!v494)
                          continue;
                        break;
                      }
                      v479 = __rbit64(v493);
                      *(_DWORD *)(v475 + 8520) = v490;
                      *(_QWORD *)(v475 + 8512) = v480;
LABEL_956:
                      v481 = __clz(v479);
                      *(_QWORD *)(v475 + 8528) = v479 & ~(0x8000000000000000 >> v481);
                      v478 = (JSC::DFG::_anonymous_namespace_::Validate **)(v480 + 16 * v481);
LABEL_957:
                      *v476 = 0;
LABEL_958:
                      *v478 = (JSC::DFG::_anonymous_namespace_::Validate *)off_1E358E7F8;
                      v478[1] = v9;
                      v478[2] = (JSC::DFG::_anonymous_namespace_::Validate *)&v845;
                      v839 = v478;
                      v482 = v839;
                      v839 = 0;
                      if (v482)
                        (*((void (**)(JSC::DFG::_anonymous_namespace_::Validate **))*v482 + 1))(v482);
                      mayExit = v838;
                      v838 = 0;
                      if (mayExit)
                        mayExit = (*(uint64_t (**)(unint64_t))(*(_QWORD *)mayExit + 8))(mayExit);
                      if (++v464 == v465)
                      {
                        LODWORD(v456) = v828;
                        v455 = v832;
                        v460 = *(_DWORD *)(v832 + 60);
                        LODWORD(v461) = v837;
                        break;
                      }
                    }
                  }
                  v461 = (v461 + 1);
                  if (v460 > v461)
                  {
                    do
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v461))
                        goto LABEL_986;
                      ++v461;
                    }
                    while (v460 != v461);
                    LODWORD(v461) = v460;
                  }
LABEL_986:
                  ;
                }
                while ((_DWORD)v456 != (_DWORD)v461);
                v455 = *(_QWORD *)v9;
                LODWORD(v456) = *(_DWORD *)(*(_QWORD *)v9 + 60);
                v457 = v826;
              }
LABEL_988:
              if (!(_DWORD)v456)
                goto LABEL_1035;
              v495 = 0;
              v827 = v456;
              while (!*(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v495))
              {
                if (v456 == ++v495)
                  goto LABEL_1035;
              }
              if ((_DWORD)v456 == (_DWORD)v495)
                goto LABEL_1035;
              LODWORD(v496) = v456;
              v833 = v455;
              while (2)
              {
                if (v496 <= v495)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19855BEC8);
                }
                v497 = *(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v495);
                v498 = *(unsigned int *)(v497 + 52);
                if (!(_DWORD)v498)
                  goto LABEL_1030;
                v499 = 0;
                v829 = *(JSC::DFG::_anonymous_namespace_::Validate **)(*(_QWORD *)(v455 + 48) + 8 * v495);
                v500 = *(uint64_t **)(v497 + 40);
                v501 = &v500[v498];
LABEL_998:
                v502 = *v500;
                v503 = (unint64_t)v499;
                if (!v499)
                {
                  mayExit = WTF::fastZeroedMalloc(0x50uLL, a2, a3, v27, v28, v30, a7, a8);
                  *(_OWORD *)mayExit = xmmword_19914F680;
                  v503 = mayExit + 16;
                }
                v504 = *(_DWORD *)(v503 - 8);
                v505 = (~(v502 << 32) + v502) ^ ((unint64_t)(~(v502 << 32) + v502) >> 22);
                v506 = 9 * ((v505 + ~(v505 << 13)) ^ ((v505 + ~(v505 << 13)) >> 8));
                v507 = (v506 ^ (v506 >> 15)) + ~((v506 ^ (v506 >> 15)) << 27);
                v508 = v504 & ((v507 >> 31) ^ v507);
                v509 = (_QWORD *)(v503 + 8 * v508);
                v510 = *v509;
                if (*v509)
                {
                  v511 = 0;
                  v512 = 1;
                  while (v510 != v502)
                  {
                    if (v510 == -1)
                      v511 = v509;
                    v508 = (v508 + v512) & v504;
                    v509 = (_QWORD *)(v503 + 8 * v508);
                    v510 = *v509;
                    ++v512;
                    if (!*v509)
                    {
                      if (v511)
                      {
                        *v511 = 0;
                        --*(_DWORD *)(v503 - 16);
                        v509 = v511;
                      }
                      goto LABEL_1008;
                    }
                  }
LABEL_1010:
                  v499 = (_DWORD *)v503;
LABEL_1022:
                  if (++v500 == v501)
                  {
                    if (v499)
                    {
                      v536 = v829;
                      v455 = v833;
                      v457 = v826;
                      if (*((_DWORD *)v829 + 13) == *(v499 - 3))
                      {
                        WTF::fastFree((unint64_t)(v499 - 4), (void *)a2, a3, v27, v28, v30, a7, a8);
                        goto LABEL_1030;
                      }
LABEL_1121:
                      JSC::DFG::startCrashing((JSC::DFG *)mayExit);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", v771);
                      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v773, "predecessors.size() == block->predecessors.size()", "./dfg/DFGValidate.cpp", 502);
                      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 502, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"predecessors.size() == block->predecessors.size()");
                      __break(0xC471u);
                      JUMPOUT(0x19855C084);
                    }
                    v536 = v829;
                    v455 = v833;
                    v457 = v826;
                    if (*((_DWORD *)v829 + 13))
                      goto LABEL_1121;
LABEL_1030:
                    v495 = (v495 + 1);
                    v496 = *(unsigned int *)(v455 + 60);
                    if (v496 > v495)
                    {
                      while (!*(_QWORD *)(*(_QWORD *)(v455 + 48) + 8 * v495))
                      {
                        if (v496 == ++v495)
                        {
                          LODWORD(v495) = *(_DWORD *)(v455 + 60);
                          break;
                        }
                      }
                    }
                    if (v827 == (_DWORD)v495)
                    {
LABEL_1035:
                      *((_BYTE *)v457 + 963) = 0;
                      return;
                    }
                    continue;
                  }
                  goto LABEL_998;
                }
                break;
              }
LABEL_1008:
              *v509 = v502;
              v513 = *(_DWORD *)(v503 - 16);
              v514 = *(_DWORD *)(v503 - 12) + 1;
              *(_DWORD *)(v503 - 12) = v514;
              v515 = (v513 + v514);
              v516 = *(unsigned int *)(v503 - 4);
              if (v516 > 0x400)
              {
                if (v516 > 2 * v515)
                  goto LABEL_1010;
LABEL_1012:
                v517 = (_DWORD)v516 << (6 * v514 >= (2 * v516));
              }
              else
              {
                if (3 * v516 > 4 * v515)
                  goto LABEL_1010;
                if ((_DWORD)v516)
                  goto LABEL_1012;
                v517 = 8;
              }
              v518 = (_DWORD *)WTF::fastZeroedMalloc(8 * v517 + 16, a2, a3, v27, v28, v30, a7, a8);
              v499 = v518 + 4;
              v526 = v517 - 1;
              v518[2] = v517 - 1;
              v518[3] = v517;
              *v518 = 0;
              v518[1] = v514;
              v9 = (JSC::DFG::_anonymous_namespace_::Validate *)this;
              if ((_DWORD)v516)
              {
                for (i = 0; i != v516; ++i)
                {
                  v528 = *(_QWORD *)(v503 + 8 * i);
                  if ((unint64_t)(v528 + 1) >= 2)
                  {
                    v529 = (~(v528 << 32) + v528) ^ ((unint64_t)(~(v528 << 32) + v528) >> 22);
                    v530 = 9 * ((v529 + ~(v529 << 13)) ^ ((v529 + ~(v529 << 13)) >> 8));
                    v531 = (v530 ^ (v530 >> 15)) + ~((v530 ^ (v530 >> 15)) << 27);
                    v532 = v526 & ((v531 >> 31) ^ v531);
                    v533 = 1;
                    do
                    {
                      v534 = v532;
                      v535 = *(_QWORD *)&v499[2 * v532];
                      v532 = (v532 + v533++) & v526;
                    }
                    while (v535);
                    *(_QWORD *)&v499[2 * v534] = v528;
                  }
                }
              }
              WTF::fastFree(v503 - 16, v519, v520, v521, v522, v523, v524, v525);
              goto LABEL_1022;
            }
            goto LABEL_202;
          }
        }
      }
      if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
      {
        goto LABEL_1142;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
LABEL_1142:
      WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
      if (!*((_DWORD *)*this + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x19855C6F4);
      }
      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v816, "m_graph.block(0) == m_graph.m_roots[0]", "./dfg/DFGValidate.cpp", 98);
      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 98, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_graph.block(0) == m_graph.m_roots[0]");
      __break(0xC471u);
      JUMPOUT(0x19855C750);
    }
LABEL_9:
    if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
    {
      goto LABEL_1134;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
LABEL_1134:
    WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
    if (!*((_DWORD *)*this + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x19855C63CLL);
    }
    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v813, "m_graph.isRoot(m_graph.block(0))", "./dfg/DFGValidate.cpp", 97);
    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 97, "void JSC::DFG::(anonymous namespace)::Validate::validate()", (uint64_t)"m_graph.isRoot(m_graph.block(0))");
    __break(0xC471u);
    JUMPOUT(0x19855C698);
  }
}

uint64_t JSC::DFG::canCompileUnlinked(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  const char *v17;
  WTF *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  JSC::DFG::Node **v22;
  uint64_t v23;
  JSC::DFG::Node *v24;
  JSC::DFG::Graph *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  _QWORD *v31;
  const void *v32;
  const void *v33;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  const char *v41;
  JSC::DFG::Node *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  JSC::DFG::Graph *v60;
  const char *v61;
  uint64_t v62;
  char v63;
  WTF *v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  const void *v68;
  const void *v69;

  v56 = -1;
  v57 = -1;
  v58 = 0;
  v59 = 256;
  v60 = this;
  v61 = "uDFG validation";
  v62 = 16;
  v63 = 0;
  v64 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v56);
  JSC::DFG::Graph::blocksInPreOrder(v60, v2, v3, v4, v5, v6, v7, v8, (uint64_t)&v65);
  if (!v67)
  {
LABEL_50:
    v51 = 2;
    goto LABEL_52;
  }
  v16 = v65;
  v17 = "./dfg/DFGValidateUnlinked.cpp";
  v18 = (WTF *)((char *)v65 + 8 * v67);
  v19 = "BOOL JSC::DFG::ValidateUnlinked::validateNode(Node *)";
  v20 = "Bad GlobalObject";
  while (1)
  {
    v21 = *(unsigned int *)(*(_QWORD *)v16 + 220);
    if ((_DWORD)v21)
      break;
LABEL_49:
    v16 = (WTF *)((char *)v16 + 8);
    if (v16 == v18)
      goto LABEL_50;
  }
  v22 = *(JSC::DFG::Node ***)(*(_QWORD *)v16 + 208);
  v23 = 8 * v21;
  while (1)
  {
    v24 = *v22;
    v25 = v60;
    v26 = *(_QWORD *)*v22;
    if ((v26 & 1) == 0)
    {
      v27 = *((_QWORD *)v60 + 4);
LABEL_7:
      v28 = (_QWORD *)(v26 & 0xFFFFFFFF8);
      v29 = 1;
      v30 = 1;
      goto LABEL_8;
    }
    v35 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v36 = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8), v36 != 0x3FFFFFFF) ? (v37 = v36 == -1) : (v37 = 1), v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v50 = WTF::fastMalloc((WTF *)0x10);
      v20 = "Bad GlobalObject";
      v19 = "BOOL JSC::DFG::ValidateUnlinked::validateNode(Node *)";
      v17 = "./dfg/DFGValidateUnlinked.cpp";
      *(_QWORD *)v50 = v35;
      *(_DWORD *)(v50 + 8) = v36;
      v38 = 1;
      v35 = v50;
    }
    else
    {
      v38 = v35;
      v35 = 0;
    }
    v26 = v35 | v38;
    v27 = *((_QWORD *)v25 + 4);
    if (((v35 | v38) & 1) == 0)
      goto LABEL_7;
    v45 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v46 = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8), v46 != 0x3FFFFFFF) ? (v47 = v46 == -1) : (v47 = 1), v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v55 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      v45 = WTF::fastMalloc((WTF *)0x10);
      v20 = "Bad GlobalObject";
      v19 = "BOOL JSC::DFG::ValidateUnlinked::validateNode(Node *)";
      v17 = "./dfg/DFGValidateUnlinked.cpp";
      *(_QWORD *)v45 = v55;
      *(_DWORD *)(v45 + 8) = v46;
      v48 = 1;
    }
    else
    {
      v48 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      v45 = 0;
    }
    v49 = v45 | v48;
    v28 = (_QWORD *)(v49 & 0xFFFFFFFF8);
    if ((v49 & 1) != 0)
    {
      v29 = 0;
      v30 = 0;
      v31 = (_QWORD *)*v28;
      if (!*v28)
        goto LABEL_10;
LABEL_9:
      v27 = v31[1];
      goto LABEL_10;
    }
    v30 = 0;
    v29 = 1;
LABEL_8:
    v31 = v28;
    if (v28)
      goto LABEL_9;
LABEL_10:
    v32 = *(const void **)(v27 + 8);
    if ((v29 & 1) == 0 && v28)
    {
      WTF::fastFree((unint64_t)v28, v9, v10, v11, v12, v13, v14, v15);
      v20 = "Bad GlobalObject";
      v19 = "BOOL JSC::DFG::ValidateUnlinked::validateNode(Node *)";
      v17 = "./dfg/DFGValidateUnlinked.cpp";
    }
    if ((v30 & 1) == 0)
    {
      v39 = v26 & 0xFFFFFFFF8;
      if ((v26 & 0xFFFFFFFF8) != 0)
      {
        v40 = v17;
        v41 = v19;
        WTF::fastFree(v39, v9, v10, v11, v12, v13, v14, v15);
        v20 = "Bad GlobalObject";
        v19 = v41;
        v17 = v40;
      }
    }
    v33 = *(const void **)(*((_QWORD *)v60 + 4) + 8);
    if (v32 != v33 && BYTE4(qword_1ECF4C789) != 0)
    {
      v42 = v24;
      v43 = v19;
      v44 = v20;
      JSC::DFG::Graph::logAssertionFailure(v60, v42, (const WTF::CString *)"./dfg/DFGValidateUnlinked.cpp", (const char *)0x45, v19, v20);
      v69 = v32;
      v68 = *(const void **)(*((_QWORD *)v60 + 4) + 8);
      WTF::dataLog<WTF::RawPointer,char [5],WTF::RawPointer,char [2]>(&v69, &v68);
      v20 = v44;
      v19 = v43;
      v17 = "./dfg/DFGValidateUnlinked.cpp";
    }
    if (v32 != v33)
      break;
    ++v22;
    v23 -= 8;
    if (!v23)
      goto LABEL_49;
  }
  v51 = 0;
LABEL_52:
  v52 = v65;
  if (v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree((unint64_t)v52, v9, v10, v11, v12, v13, v14, v15);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v63)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v56, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v53 = v64;
  v64 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::fastFree((unint64_t)v53, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v53;
  }
  return v51;
}

uint64_t JSC::DFG::performValueRepReduction(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::DFG::Graph *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  JSC::DFG::Graph *v43;
  unint64_t v44;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned __int8 v97;
  BOOL v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  __int128 *v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  __int128 *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::DFG::Node **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  JSC::DFG::Node **v206;
  uint64_t v207;
  uint64_t *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v222;
  BOOL v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  JSC::DFG::Graph *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  JSC::DFG::Node **v252;
  uint64_t v253;
  JSC::DFG::Node *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t inserted;
  int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  __int16 v295;
  JSC::DFG::Graph *v296;
  __int128 v297;
  char v298;
  WTF *v299;
  JSC::DFG *v300;
  WTF *v301;
  uint64_t v302;
  _BYTE v303[128];
  _QWORD v304[2];
  __int128 v305;
  double v306;
  uint64_t v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  _BYTE v311[24];
  uint64_t v312;
  __int128 *v313;
  uint64_t *v314;
  uint64_t *v315;
  __int128 v316;
  _WORD v317[16];
  uint64_t v318;
  unint64_t v319;
  int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323[2];

  v292 = -1;
  v293 = -1;
  v294 = 0;
  v295 = 256;
  v296 = this;
  *(_QWORD *)&v297 = "ValueRep reduction";
  *((_QWORD *)&v297 + 1) = 19;
  v298 = 0;
  v299 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v292);
  v300 = this;
  v301 = (WTF *)v303;
  v302 = 8;
  v304[0] = "DFG";
  v304[1] = 4;
  v305 = v297;
  v306 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v249 = mach_absolute_time();
    v251 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v251 != -1)
    {
      *(_QWORD *)&v316 = v311;
      v313 = &v316;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v313, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v250) = dword_1ECF4400C;
    v306 = (double)(v249 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v250 * 1000000000.0);
  }
  v323[0] = 0;
  v10 = v296;
  v11 = *((unsigned int *)v296 + 15);
  if (!(_DWORD)v11)
    goto LABEL_26;
  v12 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v296 + 6) + 8 * v12))
  {
    if (v11 == ++v12)
      goto LABEL_26;
  }
  if ((_DWORD)v11 == (_DWORD)v12)
    goto LABEL_26;
  v13 = *((_DWORD *)v296 + 15);
  do
  {
    if (v13 <= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19855E460);
    }
    v14 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v12);
    v15 = *(unsigned int *)(v14 + 220);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(v14 + 208);
      v17 = 8 * v15;
      do
      {
        v313 = 0;
        v313 = (__int128 *)*v16;
        if (*((_WORD *)v313 + 9) == 60 && (*((_QWORD *)v313 + 3) & 0xFC000000000000) == 0xC4000000000000)
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(v323, (uint64_t *)&v313, v4, v5, v6, v7, v8, v9, (uint64_t)&v316);
        ++v16;
        v17 -= 8;
      }
      while (v17);
      v13 = *((_DWORD *)v10 + 15);
    }
    v12 = (v12 + 1);
    if (v13 > v12)
    {
      while (!*(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v12))
      {
        if (v13 == ++v12)
        {
          LODWORD(v12) = v13;
          break;
        }
      }
    }
  }
  while ((_DWORD)v11 != (_DWORD)v12);
  if (!v323[0])
  {
LABEL_26:
    v18 = 0;
    goto LABEL_27;
  }
  if (!*(_DWORD *)(v323[0] - 12))
  {
    WTF::fastFree(v323[0] - 16, v3, v4, v5, v6, v7, v8, v9);
    goto LABEL_26;
  }
  v322 = 0;
  JSC::DFG::Graph::blocksInPreOrder(v296, v3, v4, v5, v6, v7, v8, v9, (uint64_t)&v319);
  v37 = v319;
  if (!v321)
    goto LABEL_73;
  v291 = v319 + 8 * v321;
  do
  {
    v38 = *(unsigned int *)(*(_QWORD *)v37 + 220);
    if ((_DWORD)v38)
    {
      v39 = *(uint64_t **)(*(_QWORD *)v37 + 208);
      v40 = &v39[v38];
      do
      {
        v318 = 0;
        v318 = *v39;
        v41 = v318;
        v42 = *(unsigned __int16 *)(v318 + 18);
        if (v42 == 60)
        {
          if (v323[0])
          {
            v46 = *(_DWORD *)(v323[0] - 8);
            v47 = (~(v318 << 32) + v318) ^ ((unint64_t)(~(v318 << 32) + v318) >> 22);
            v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
            v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
            v50 = v46 & ((v49 >> 31) ^ v49);
            v51 = *(_QWORD *)(v323[0] + 8 * v50);
            if (v51 != v318)
            {
              v52 = 1;
              while (v51)
              {
                v50 = (v50 + v52) & v46;
                v51 = *(_QWORD *)(v323[0] + 8 * v50);
                ++v52;
                if (v51 == v318)
                  goto LABEL_61;
              }
              goto LABEL_44;
            }
LABEL_61:
            v313 = 0;
            v314 = 0;
            WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v322, &v318, (uint64_t)&v313, v32, v33, v34, v35, v36, (uint64_t)&v316);
            v54 = (unint64_t)v313;
            if (v313)
            {
              v313 = 0;
              LODWORD(v314) = 0;
              WTF::fastFree(v54, v53, v31, v32, v33, v34, v35, v36);
            }
            v41 = v318;
          }
        }
        else if (v42 == 27)
        {
          goto LABEL_61;
        }
LABEL_44:
        v315 = &v318;
        *(_QWORD *)&v316 = v317;
        *((_QWORD *)&v316 + 1) = 3;
        v43 = v296;
        v313 = &v316;
        v314 = &v322;
        v30 = *(_QWORD *)(v41 + 24);
        if ((*(_BYTE *)(v41 + 56) & 0x10) != 0)
        {
          v55 = *(_QWORD *)(v41 + 32);
          if ((int)v55 + (int)v30 > v30)
          {
            v56 = *(_QWORD *)(v41 + 24);
            do
            {
              if (v56 >= *((unsigned int *)v43 + 41))
              {
                __break(0xC471u);
                JUMPOUT(0x19855E4A0);
              }
              if ((*(_QWORD *)(*((_QWORD *)v43 + 19) + 8 * v56) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t *)&v313, *(_QWORD *)(*((_QWORD *)v43 + 19) + 8 * v56));
                v30 = *(_QWORD *)(v41 + 24);
                v55 = *(_QWORD *)(v41 + 32);
              }
              ++v56;
            }
            while (v56 < (v30 + v55));
          }
        }
        else if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t *)&v313, v30);
          v30 = *(_QWORD *)(v41 + 32);
          if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t *)&v313, v30);
            v30 = *(_QWORD *)(v41 + 40);
            if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0)
              JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t *)&v313, v30);
          }
        }
        v44 = v316;
        if (v317 != (_WORD *)v316 && (_QWORD)v316 != 0)
        {
          *(_QWORD *)&v316 = 0;
          DWORD2(v316) = 0;
          WTF::fastFree(v44, (void *)v30, v31, v32, v33, v34, v35, v36);
        }
        ++v39;
      }
      while (v39 != v40);
    }
    v37 += 8;
  }
  while (v37 != v291);
  v37 = v319;
LABEL_73:
  if (v37)
  {
    v319 = 0;
    v320 = 0;
    WTF::fastFree(v37, (void *)v30, v31, v32, v33, v34, v35, v36);
  }
  JSC::DFG::PhiChildren::PhiChildren((JSC::DFG::PhiChildren *)&v318, v296, v31, v32, v33, v34, v35, v36);
  while (2)
  {
    v319 = 0;
    if (v323[0])
    {
      v64 = *(unsigned int *)(v323[0] - 4);
      v65 = v323[0] + 8 * v64;
      if (*(_DWORD *)(v323[0] - 12))
      {
        v66 = v323[0];
        if ((_DWORD)v64)
        {
          v67 = 8 * v64;
          v66 = v323[0];
          while ((unint64_t)(*(_QWORD *)v66 + 1) <= 1)
          {
            v66 += 8;
            v67 -= 8;
            if (!v67)
            {
              v66 = v65;
              goto LABEL_83;
            }
          }
        }
        goto LABEL_83;
      }
      v66 = v323[0] + 8 * v64;
    }
    else
    {
      v66 = 0;
      v64 = 0;
    }
    v65 = v323[0] + 8 * v64;
LABEL_83:
    if (v323[0])
      v68 = v323[0] + 8 * *(unsigned int *)(v323[0] - 4);
    else
      v68 = 0;
    if (v68 != v66)
    {
      do
      {
        v69 = *(_QWORD *)v66;
        if (*(_WORD *)(*(_QWORD *)v66 + 18) == 27)
        {
          v99 = *(_DWORD *)(v318 - 8);
          v100 = (~(v69 << 32) + v69) ^ ((unint64_t)(~(v69 << 32) + v69) >> 22);
          v101 = 9 * ((v100 + ~(v100 << 13)) ^ ((v100 + ~(v100 << 13)) >> 8));
          v102 = (v101 ^ (v101 >> 15)) + ~((v101 ^ (v101 >> 15)) << 27);
          v103 = v99 & ((v102 >> 31) ^ v102);
          v104 = (uint64_t *)(v318 + 48 * v103);
          v105 = *v104;
          if (*v104 != v69)
          {
            v107 = 1;
            while (v105)
            {
              v103 = (v103 + v107) & v99;
              v104 = (uint64_t *)(v318 + 48 * v103);
              v105 = *v104;
              ++v107;
              if (*v104 == v69)
                goto LABEL_130;
            }
            v104 = (uint64_t *)(v318 + 48 * *(unsigned int *)(v318 - 4));
          }
LABEL_130:
          v106 = *((unsigned int *)v104 + 5);
          if ((_DWORD)v106)
          {
            v91 = v104[1];
            v92 = 8 * v106;
            do
            {
              v313 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v91 + 24) & 0xFF00FFFFFFFFFFFFLL);
              if (*((_WORD *)v313 + 9) == 27)
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v319, (uint64_t *)&v313, v58, v59, v60, v61, v62, v63, (uint64_t)&v316);
              v91 += 8;
              v92 -= 8;
            }
            while (v92);
          }
        }
        if (!v322)
          goto LABEL_493;
        v70 = *(_DWORD *)(v322 - 8);
        v71 = (~(v69 << 32) + v69) ^ ((unint64_t)(~(v69 << 32) + v69) >> 22);
        v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
        v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
        v74 = v70 & ((v73 >> 31) ^ v73);
        v75 = (uint64_t *)(v322 + 24 * v74);
        v76 = *v75;
        if (*v75 != v69)
        {
          v77 = 1;
          while (v76)
          {
            v74 = (v74 + v77) & v70;
            v75 = (uint64_t *)(v322 + 24 * v74);
            v76 = *v75;
            ++v77;
            if (*v75 == v69)
              goto LABEL_94;
          }
          v75 = (uint64_t *)(v322 + 24 * *(unsigned int *)(v322 - 4));
        }
LABEL_94:
        if (v75 == (uint64_t *)(v322 + 24 * *(unsigned int *)(v322 - 4)))
        {
LABEL_493:
          __break(0xC471u);
          JUMPOUT(0x19855D44CLL);
        }
        v78 = *((unsigned int *)v75 + 5);
        if ((_DWORD)v78)
        {
          if (v78 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19855E4E8);
          }
          v79 = 8 * v78;
          v80 = (char *)WTF::fastMalloc((WTF *)(8 * v78));
          memcpy(v80, (const void *)v75[1], 8 * *((unsigned int *)v75 + 5));
          v88 = 0;
          do
          {
            v89 = *(_QWORD *)&v80[v88];
            if (*(_WORD *)(v89 + 18) == 26)
            {
              v313 = *(__int128 **)(v89 + 72);
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v316, (uint64_t *)&v319, (uint64_t *)&v313, v83, v84, v85, v86, v87);
            }
            v88 += 8;
          }
          while (v79 != v88);
          WTF::fastFree((unint64_t)v80, v81, v82, v83, v84, v85, v86, v87);
        }
        v90 = v66 + 8;
        v66 = v65;
        if (v90 != v65)
        {
          v66 = v90;
          while ((unint64_t)(*(_QWORD *)v66 + 1) <= 1)
          {
            v66 += 8;
            if (v66 == v65)
            {
              v66 = v65;
              break;
            }
          }
        }
      }
      while (v66 != v68);
      if (!v319)
        break;
      if (!*(_DWORD *)(v319 - 12))
        goto LABEL_144;
      v93 = *(unsigned int *)(v319 - 4);
      if ((_DWORD)v93)
      {
        v94 = 8 * v93;
        v95 = (uint64_t *)v319;
        while ((unint64_t)(*v95 + 1) <= 1)
        {
          ++v95;
          v94 -= 8;
          if (!v94)
            goto LABEL_144;
        }
      }
      else
      {
        v95 = (uint64_t *)v319;
      }
      v109 = (uint64_t *)(v319 + 8 * v93);
      if (v109 == v95)
      {
LABEL_144:
        WTF::fastFree(v319 - 16, v57, v58, v59, v60, v61, v62, v63);
        break;
      }
      v98 = 0;
LABEL_120:
      v313 = 0;
      v96 = *v95++;
      v313 = (__int128 *)v96;
      WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(v323, (uint64_t *)&v313, v58, v59, v60, v61, v62, v63, (uint64_t)&v316);
      v97 = LOBYTE(v317[0]) | v98;
      v98 = v97 != 0;
      while (v95 != v109)
      {
        if ((unint64_t)(*v95 + 1) > 1)
        {
          if (v95 != v109)
            goto LABEL_120;
          break;
        }
        ++v95;
      }
      if (v319)
      {
        v108 = v97;
        WTF::fastFree(v319 - 16, v57, v58, v59, v60, v61, v62, v63);
        if (!v108)
          break;
      }
      else if (!v97)
      {
        break;
      }
      continue;
    }
    break;
  }
  while (2)
  {
    v313 = 0;
    if (!v323[0])
    {
      v112 = 0;
      v110 = 0;
LABEL_263:
      v111 = v323[0] + 8 * v110;
      goto LABEL_152;
    }
    v110 = *(unsigned int *)(v323[0] - 4);
    v111 = v323[0] + 8 * v110;
    if (!*(_DWORD *)(v323[0] - 12))
    {
      v112 = (unint64_t *)(v323[0] + 8 * v110);
      goto LABEL_263;
    }
    v112 = (unint64_t *)v323[0];
    if ((_DWORD)v110)
    {
      v113 = 8 * v110;
      v112 = (unint64_t *)v323[0];
      while (*v112 + 1 <= 1)
      {
        ++v112;
        v113 -= 8;
        if (!v113)
        {
          v112 = (unint64_t *)v111;
          break;
        }
      }
    }
LABEL_152:
    if (v323[0])
      v114 = v323[0] + 8 * *(unsigned int *)(v323[0] - 4);
    else
      v114 = 0;
    if ((unint64_t *)v114 == v112)
      break;
    while (2)
    {
      v319 = 0;
      v319 = *v112;
      v58 = v319;
      if (*(_WORD *)(v319 + 18) != 27)
        goto LABEL_156;
      v150 = *(_DWORD *)(v318 - 8);
      v151 = (~(v319 << 32) + v319) ^ ((~(v319 << 32) + v319) >> 22);
      v152 = 9 * ((v151 + ~(v151 << 13)) ^ ((v151 + ~(v151 << 13)) >> 8));
      v153 = (v152 ^ (v152 >> 15)) + ~((v152 ^ (v152 >> 15)) << 27);
      v154 = v150 & ((v153 >> 31) ^ v153);
      v155 = (uint64_t *)(v318 + 48 * v154);
      v156 = *v155;
      if (*v155 != v319)
      {
        v175 = 1;
        while (v156)
        {
          v154 = (v154 + v175) & v150;
          v155 = (uint64_t *)(v318 + 48 * v154);
          v156 = *v155;
          ++v175;
          if (*v155 == v319)
            goto LABEL_215;
        }
        v155 = (uint64_t *)(v318 + 48 * *(unsigned int *)(v318 - 4));
      }
LABEL_215:
      v157 = *((unsigned int *)v155 + 5);
      if (!(_DWORD)v157)
      {
LABEL_156:
        v115 = 1;
        goto LABEL_157;
      }
      v148 = v155[1];
      v158 = v148 + 8 * v157;
      if (v323[0])
      {
        if (v313)
        {
          v149 = 0;
          v115 = 1;
          while (1)
          {
            while (1)
            {
              v133 = *(_QWORD *)(*(_QWORD *)v148 + 24);
              v134 = v133 & 0xFF00FFFFFFFFFFFFLL;
              v135 = *(unsigned __int16 *)((v133 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v135 != 60)
                break;
              if ((*(_QWORD *)((v133 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFC000000000000) != 0xC4000000000000)
                goto LABEL_206;
LABEL_209:
              v148 += 8;
              if (v148 == v158)
                goto LABEL_289;
            }
            if (!*(_WORD *)((v133 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if (!(**(_QWORD **)((v133 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >> 49))
                goto LABEL_206;
              goto LABEL_209;
            }
            if (v135 == 27)
            {
              v136 = *(_DWORD *)(v323[0] - 8);
              v137 = (v134 + ~(v133 << 32)) ^ ((v134 + ~(v133 << 32)) >> 22);
              v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
              v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
              v140 = (v139 >> 31) ^ v139;
              v141 = v136 & v140;
              v142 = *(_QWORD *)(v323[0] + 8 * (v136 & v140));
              if (v142 != v134)
              {
                v143 = 1;
                while (v142)
                {
                  v141 = (v141 + v143) & v136;
                  v142 = *(_QWORD *)(v323[0] + 8 * v141);
                  ++v143;
                  if (v142 == v134)
                    goto LABEL_202;
                }
                goto LABEL_206;
              }
LABEL_202:
              v144 = *((_DWORD *)v313 - 2);
              v145 = v144 & v140;
              v146 = *((_QWORD *)v313 + v145);
              if (v146 != v134)
              {
                v147 = 1;
                while (v146)
                {
                  v145 = (v145 + v147) & v144;
                  v146 = *((_QWORD *)v313 + v145);
                  ++v147;
                  if (v146 == v134)
                    goto LABEL_206;
                }
                goto LABEL_209;
              }
            }
LABEL_206:
            v115 = 0;
            v148 += 8;
            v149 = 1;
            if (v148 == v158)
              goto LABEL_213;
          }
        }
        v149 = 0;
        v115 = 1;
        while (1)
        {
          while (1)
          {
            v176 = *(_QWORD *)(*(_QWORD *)v148 + 24);
            v177 = v176 & 0xFF00FFFFFFFFFFFFLL;
            v178 = *(unsigned __int16 *)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v178 != 60)
              break;
            if ((*(_QWORD *)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFC000000000000) == 0xC4000000000000)
              goto LABEL_284;
LABEL_287:
            v115 = 0;
            v148 += 8;
            v149 = 1;
            if (v148 == v158)
              goto LABEL_213;
          }
          if (!*(_WORD *)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if (**(_QWORD **)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >> 49)
              goto LABEL_284;
            goto LABEL_287;
          }
          if (v178 != 27)
            goto LABEL_287;
          v179 = *(_DWORD *)(v323[0] - 8);
          v180 = (v177 + ~(v176 << 32)) ^ ((v177 + ~(v176 << 32)) >> 22);
          v181 = 9 * ((v180 + ~(v180 << 13)) ^ ((v180 + ~(v180 << 13)) >> 8));
          v182 = (v181 ^ (v181 >> 15)) + ~((v181 ^ (v181 >> 15)) << 27);
          v183 = v179 & ((v182 >> 31) ^ v182);
          v184 = *(_QWORD *)(v323[0] + 8 * v183);
          if (v184 != v177)
          {
            v185 = 1;
            while (v184)
            {
              v183 = (v183 + v185) & v179;
              v184 = *(_QWORD *)(v323[0] + 8 * v183);
              ++v185;
              if (v184 == v177)
                goto LABEL_284;
            }
            goto LABEL_287;
          }
LABEL_284:
          v148 += 8;
          if (v148 == v158)
            goto LABEL_289;
        }
      }
      v149 = 0;
      v115 = 1;
      do
      {
        while (*(_WORD *)((*(_QWORD *)(*(_QWORD *)v148 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 60)
        {
          if ((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)v148 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFC000000000000) == 0xC4000000000000)
            goto LABEL_270;
LABEL_267:
          v115 = 0;
          v148 += 8;
          v149 = 1;
          if (v148 == v158)
            goto LABEL_213;
        }
        if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)v148 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12)
          || !(**(_QWORD **)((*(_QWORD *)(*(_QWORD *)v148 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48) >> 49))
        {
          goto LABEL_267;
        }
LABEL_270:
        v148 += 8;
      }
      while (v148 != v158);
LABEL_289:
      if ((v149 & 1) != 0)
      {
LABEL_213:
        WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v313, (uint64_t *)&v319, v58, v59, v60, v61, v62, v63, (uint64_t)&v316);
        goto LABEL_162;
      }
LABEL_157:
      JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Node *)#1}::operator()(&v316, v322, v319);
      if (!HIDWORD(v316))
      {
LABEL_158:
        v116 = v115;
        goto LABEL_159;
      }
      if (!v323[0])
      {
        v130 = 8 * HIDWORD(v316);
        v131 = v316;
        do
        {
          v132 = *(unsigned __int16 *)(*(_QWORD *)v131 + 18);
          if (v132 != 20)
          {
            if (v132 == 58)
            {
              if ((*(_QWORD *)(*(_QWORD *)v131 + 24) & 0xFC000000000000) != 0x14000000000000)
                goto LABEL_194;
            }
            else if (v132 != 279)
            {
              goto LABEL_194;
            }
          }
          v131 += 8;
          v130 -= 8;
        }
        while (v130);
        goto LABEL_158;
      }
      v118 = (uint64_t *)v316;
      while (2)
      {
        v116 = 0;
        v119 = *v118;
        v120 = *(unsigned __int16 *)(*v118 + 18);
        if (v120 <= 0x19)
        {
          if (v120 != 20)
            goto LABEL_159;
LABEL_177:
          if (++v118 == (uint64_t *)(v316 + 8 * HIDWORD(v316)))
            goto LABEL_158;
          continue;
        }
        break;
      }
      if (v120 == 58)
      {
        if ((*(_QWORD *)(v119 + 24) & 0xFC000000000000) != 0x14000000000000)
          goto LABEL_194;
        goto LABEL_177;
      }
      if (v120 != 26)
      {
        if (v120 != 279)
          goto LABEL_159;
        goto LABEL_177;
      }
      v124 = *(_QWORD *)(v119 + 72);
      v125 = *(_DWORD *)(v323[0] - 8);
      v126 = (~(v124 << 32) + v124) ^ ((unint64_t)(~(v124 << 32) + v124) >> 22);
      v127 = 9 * ((v126 + ~(v126 << 13)) ^ ((v126 + ~(v126 << 13)) >> 8));
      v128 = (v127 ^ (v127 >> 15)) + ~((v127 ^ (v127 >> 15)) << 27);
      v129 = (v128 >> 31) ^ v128;
      v121 = v125 & v129;
      v122 = *(_QWORD *)(v323[0] + 8 * (v125 & v129));
      if (v122 == v124)
      {
LABEL_231:
        if (v313)
        {
          v164 = *((_DWORD *)v313 - 2);
          v165 = v164 & v129;
          v166 = *((_QWORD *)v313 + v165);
          if (v166 == v124)
            goto LABEL_194;
          v167 = 1;
          while (v166)
          {
            v116 = 0;
            v165 = (v165 + v167) & v164;
            v166 = *((_QWORD *)v313 + v165);
            ++v167;
            if (v166 == v124)
              goto LABEL_159;
          }
        }
        goto LABEL_177;
      }
      v123 = 1;
      while (v122)
      {
        v121 = (v121 + v123) & v125;
        v122 = *(_QWORD *)(v323[0] + 8 * v121);
        ++v123;
        if (v122 == v124)
          goto LABEL_231;
      }
LABEL_194:
      v116 = 0;
LABEL_159:
      if ((_QWORD)v316)
        WTF::fastFree(v316, v57, v58, v59, v60, v61, v62, v63);
      if (!v116)
        goto LABEL_213;
LABEL_162:
      v117 = v112 + 1;
      v112 = (unint64_t *)v111;
      if (v117 != (unint64_t *)v111)
      {
        v112 = v117;
        while (*v112 + 1 <= 1)
        {
          if (++v112 == (unint64_t *)v111)
          {
            v112 = (unint64_t *)v111;
            break;
          }
        }
      }
      if (v112 != (unint64_t *)v114)
        continue;
      break;
    }
    v159 = (uint64_t)v313;
    if (v313)
    {
      v160 = *((_DWORD *)v313 - 3);
      if (!v160)
        goto LABEL_221;
      v161 = *((unsigned int *)v313 - 1);
      v162 = v313;
      if ((_DWORD)v161)
      {
        v163 = 0;
        while ((unint64_t)(*(_QWORD *)((char *)v313 + v163) + 1) <= 1)
        {
          v163 += 8;
          if (8 * v161 == v163)
            goto LABEL_228;
        }
        v162 = (__int128 *)((char *)v313 + v163);
      }
      v168 = (__int128 *)((char *)v313 + 8 * v161);
      if (v162 != v168)
      {
LABEL_239:
        *(_QWORD *)&v316 = 0;
        *(_QWORD *)&v316 = *(_QWORD *)v162;
        if (!v323[0])
          goto LABEL_253;
        v169 = (_QWORD *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::DFG::Node *>,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(v323, &v316);
        v170 = v323[0];
        if (v169)
        {
          if (v323[0])
          {
            v171 = *(unsigned int *)(v323[0] - 4);
            goto LABEL_243;
          }
        }
        else
        {
          if (!v323[0])
            goto LABEL_253;
          v171 = *(unsigned int *)(v323[0] - 4);
          v169 = (_QWORD *)(v323[0] + 8 * v171);
LABEL_243:
          v170 = v323[0] + 8 * v171;
          if ((_QWORD *)v170 == v169)
            goto LABEL_253;
        }
        if ((_QWORD *)v170 != v169)
        {
          *v169 = -1;
          ++*(_DWORD *)(v323[0] - 16);
          v172 = v323[0] ? *(_DWORD *)(v323[0] - 12) - 1 : -1;
          *(_DWORD *)(v323[0] - 12) = v172;
          if (v323[0])
          {
            v173 = *(_DWORD *)(v323[0] - 4);
            if (6 * *(_DWORD *)(v323[0] - 12) < v173 && v173 >= 9)
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v323, v173 >> 1, 0, v59, v60, v61, v62, v63);
          }
        }
LABEL_253:
        while (1)
        {
          v162 = (__int128 *)((char *)v162 + 8);
          if (v162 == v168)
            break;
          if ((unint64_t)(*(_QWORD *)v162 + 1) > 1)
          {
            if (v162 != v168)
              goto LABEL_239;
            break;
          }
        }
        v159 = (uint64_t)v313;
      }
LABEL_228:
      if (v159)
LABEL_221:
        WTF::fastFree(v159 - 16, v57, v58, v59, v60, v61, v62, v63);
      if (v160)
        continue;
    }
    break;
  }
  if (!v323[0] || !*(_DWORD *)(v323[0] - 12))
  {
    v18 = 0;
    goto LABEL_334;
  }
  if (!*((_DWORD *)v296 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x19855E508);
  }
  v186 = **((_QWORD **)v296 + 6);
  if (!*(_DWORD *)(v186 + 220))
  {
    __break(0xC471u);
    JUMPOUT(0x19855E510);
  }
  v187 = **(_QWORD **)(v186 + 208);
  v188 = *(_QWORD *)v187;
  if ((*(_QWORD *)v187 & 1) != 0)
  {
    v271 = *(_QWORD *)(v188 & 0xFFFFFFFF8);
    if ((v188 & 2) != 0
      || ((v272 = *(unsigned int *)((v188 & 0xFFFFFFFF8) + 8), (_DWORD)v272 != 0x3FFFFFFF)
        ? (v273 = (_DWORD)v272 == -1)
        : (v273 = 1),
          v273))
    {
      v274 = 2;
    }
    else if (v272 >> 28)
    {
      v287 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v287 = v271;
      *(_DWORD *)(v287 + 8) = v272;
      v274 = 1;
      v271 = v287;
    }
    else
    {
      v274 = *(_QWORD *)(v188 & 0xFFFFFFFF8);
      v271 = v272 << 36;
    }
    v188 = v271 | v274;
  }
  *(_QWORD *)&v316 = v188;
  v189 = *(_QWORD *)(v187 + 8);
  if ((v189 & 1) != 0)
  {
    v275 = *(_QWORD *)(v189 & 0xFFFFFFFF8);
    if ((v189 & 2) != 0
      || ((v276 = *(unsigned int *)((v189 & 0xFFFFFFFF8) + 8), (_DWORD)v276 != 0x3FFFFFFF)
        ? (v277 = (_DWORD)v276 == -1)
        : (v277 = 1),
          v277))
    {
      v278 = 2;
    }
    else if (v276 >> 28)
    {
      v288 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v288 = v275;
      *(_DWORD *)(v288 + 8) = v276;
      v278 = 1;
      v275 = v288;
    }
    else
    {
      v278 = *(_QWORD *)(v189 & 0xFFFFFFFF8);
      v275 = v276 << 36;
    }
    v189 = v275 | v278;
  }
  *((_QWORD *)&v316 + 1) = v189;
  v317[0] = *(_WORD *)(v187 + 16);
  v312 = 0;
  if (!v323[0])
  {
    v192 = 0;
    v190 = 0;
LABEL_402:
    v191 = v323[0] + 8 * v190;
    goto LABEL_304;
  }
  v190 = *(unsigned int *)(v323[0] - 4);
  v191 = v323[0] + 8 * v190;
  if (!*(_DWORD *)(v323[0] - 12))
  {
    v192 = (JSC::DFG::Node **)(v323[0] + 8 * v190);
    goto LABEL_402;
  }
  v192 = (JSC::DFG::Node **)v323[0];
  if ((_DWORD)v190)
  {
    v193 = 8 * v190;
    v192 = (JSC::DFG::Node **)v323[0];
    while ((unint64_t)*v192 + 1 <= 1)
    {
      ++v192;
      v193 -= 8;
      if (!v193)
      {
        v192 = (JSC::DFG::Node **)v191;
        break;
      }
    }
  }
LABEL_304:
  if (v323[0])
    v194 = v323[0] + 8 * *(unsigned int *)(v323[0] - 4);
  else
    v194 = 0;
  if ((JSC::DFG::Node **)v194 != v192)
  {
    do
    {
      v195 = (uint64_t)*v192;
      v196 = *((unsigned __int16 *)*v192 + 9);
      if (v196 == 60)
      {
        v197 = *(_QWORD *)(v195 + 24) & 0xFF00FFFFFFFFFFFFLL;
      }
      else
      {
        if (v196 != 27)
        {
          __break(0xC471u);
          JUMPOUT(0x19855E28CLL);
        }
        v252 = JSC::DFG::PhiChildren::upsilonsOf((JSC::DFG::PhiChildren *)&v318, *v192);
        v253 = *((unsigned int *)v252 + 3);
        if ((_DWORD)v253)
        {
          v254 = *v252;
          v255 = 8 * v253;
          do
          {
            v256 = *(_QWORD *)v254;
            inserted = *(_QWORD *)(*(_QWORD *)v254 + 24) & 0xFF00FFFFFFFFFFFFLL;
            v258 = *(unsigned __int16 *)(inserted + 0x12);
            if (v258 == 60)
            {
              inserted = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v254 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
            }
            else if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)v254 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if (v258 != 27)
              {
                __break(0xC471u);
                JUMPOUT(0x19855E2B4);
              }
            }
            else
            {
              v259 = **(_QWORD **)((*(_QWORD *)(*(_QWORD *)v254 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v311, (const JSC::DFG::NodeOrigin *)&v316);
              v263 = (double)(int)v259;
              if (v259 <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v263 = v259 - 0x2000000000000;
              inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t *)&v300, 0, (uint64_t)v311, *(_QWORD *)&v263 + 0x2000000000000, 1, v260, v261, v262);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v311, v264, v265, v266, v267, v268, v269, v270);
            }
            *(_QWORD *)(v256 + 24) = inserted & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
            v254 = (JSC::DFG::Node *)((char *)v254 + 8);
            v255 -= 8;
          }
          while (v255);
        }
        *(_DWORD *)(v195 + 56) = *(_DWORD *)(v195 + 56) & 0xFFFFFFF8 | 3;
        v197 = v195;
      }
      JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Node *)#1}::operator()(&v319, v322, v195);
      v205 = v319;
      if (v321)
      {
        v207 = 8 * v321;
        v208 = (uint64_t *)v319;
        do
        {
          v310 = 0;
          v310 = *v208;
          v209 = *(unsigned __int16 *)(v310 + 18);
          if (v209 > 0x39)
          {
            if (v209 == 58)
            {
              JSC::DFG::Node::convertToIdentityOn(v310, v197);
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(&v312, &v310, v210, v211, v212, v213, v214, v215, (uint64_t)&v313);
            }
            else
            {
              if (v209 != 279)
                goto LABEL_418;
              *(_QWORD *)(v310 + 32) = v197 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
            }
          }
          else if (v209 == 20)
          {
            *(_QWORD *)(v310 + 24) = v197 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
          }
          else if (v209 != 26)
          {
LABEL_418:
            __break(0xC471u);
            JUMPOUT(0x19855E244);
          }
          ++v208;
          v207 -= 8;
        }
        while (v207);
      }
      if (v205)
        WTF::fastFree(v205, v198, v199, v200, v201, v202, v203, v204);
      v206 = v192 + 1;
      v192 = (JSC::DFG::Node **)v191;
      if (v206 != (JSC::DFG::Node **)v191)
      {
        v192 = v206;
        while ((unint64_t)*v192 + 1 <= 1)
        {
          if (++v192 == (JSC::DFG::Node **)v191)
          {
            v192 = (JSC::DFG::Node **)v191;
            break;
          }
        }
      }
    }
    while (v192 != (JSC::DFG::Node **)v194);
  }
  if (!*((_DWORD *)v296 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x19855E518);
  }
  JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v300, **((JSC::DFG::BasicBlock ***)v296 + 6));
  v216 = v312;
  if (v312)
  {
    if (!*(_DWORD *)(v312 - 12))
      goto LABEL_330;
    v228 = v296;
    v229 = *((unsigned int *)v296 + 15);
    if (!(_DWORD)v229)
      goto LABEL_330;
    v230 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v296 + 6) + 8 * v230))
    {
      if (v229 == ++v230)
        goto LABEL_397;
    }
    if ((_DWORD)v229 != (_DWORD)v230)
    {
      LODWORD(v231) = *((_DWORD *)v296 + 15);
      do
      {
        if (v231 <= v230)
          goto LABEL_493;
        v232 = *(_QWORD *)(*((_QWORD *)v228 + 6) + 8 * v230);
        if (*(_DWORD *)(v232 + 220))
        {
          v233 = 0;
          do
          {
            v234 = *(_QWORD *)(*(_QWORD *)(v232 + 208) + 8 * v233);
            if (*(_WORD *)(v234 + 18) == 4 && v312)
            {
              v235 = *(_DWORD *)(v312 - 8);
              v236 = (~(v234 << 32) + v234) ^ ((unint64_t)(~(v234 << 32) + v234) >> 22);
              v237 = 9 * ((v236 + ~(v236 << 13)) ^ ((v236 + ~(v236 << 13)) >> 8));
              v238 = (v237 ^ (v237 >> 15)) + ~((v237 ^ (v237 >> 15)) << 27);
              v239 = v235 & ((v238 >> 31) ^ v238);
              v240 = *(_QWORD *)(v312 + 8 * v239);
              if (v240 == v234)
              {
LABEL_386:
                v242 = *(_QWORD *)v234;
                if ((*(_QWORD *)v234 & 1) != 0)
                {
                  v279 = *(_QWORD *)(v242 & 0xFFFFFFFF8);
                  if ((v242 & 2) != 0
                    || ((v280 = *(unsigned int *)((v242 & 0xFFFFFFFF8) + 8), (_DWORD)v280 != 0x3FFFFFFF)
                      ? (v281 = (_DWORD)v280 == -1)
                      : (v281 = 1),
                        v281))
                  {
                    v282 = 2;
                  }
                  else if (v280 >> 28)
                  {
                    v289 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v289 = v279;
                    *(_DWORD *)(v289 + 8) = v280;
                    v282 = 1;
                    v279 = v289;
                  }
                  else
                  {
                    v282 = *(_QWORD *)(v242 & 0xFFFFFFFF8);
                    v279 = v280 << 36;
                  }
                  v242 = v279 | v282;
                }
                v307 = v242;
                v243 = *(_QWORD *)(v234 + 8);
                if ((v243 & 1) != 0)
                {
                  v283 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
                  if ((v243 & 2) != 0
                    || ((v284 = *(unsigned int *)((v243 & 0xFFFFFFFF8) + 8), (_DWORD)v284 != 0x3FFFFFFF)
                      ? (v285 = (_DWORD)v284 == -1)
                      : (v285 = 1),
                        v285))
                  {
                    v286 = 2;
                  }
                  else if (v284 >> 28)
                  {
                    v290 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v290 = v283;
                    *(_DWORD *)(v290 + 8) = v284;
                    v286 = 1;
                    v283 = v290;
                  }
                  else
                  {
                    v286 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
                    v283 = v284 << 36;
                  }
                  v243 = v283 | v286;
                }
                v308 = v243;
                v309 = *(_WORD *)(v234 + 16);
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v300, v233, 0, 24, (uint64_t)&v307, *(_QWORD *)(v234 + 24) & 0xFF00FFFFFFFFFFFFLL | 0xC8000000000000, v62, v63);
                if ((v308 & 1) != 0 && (v308 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v308 & 0xFFFFFFFF8, v244, v245, v246, v247, v248, v62, v63);
                if ((v307 & 1) != 0 && (v307 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v307 & 0xFFFFFFFF8, v244, v245, v246, v247, v248, v62, v63);
              }
              else
              {
                v241 = 1;
                while (v240)
                {
                  v239 = (v239 + v241) & v235;
                  v240 = *(_QWORD *)(v312 + 8 * v239);
                  ++v241;
                  if (v240 == v234)
                    goto LABEL_386;
                }
              }
            }
            ++v233;
          }
          while (v233 < *(unsigned int *)(v232 + 220));
        }
        JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v300, (JSC::DFG::BasicBlock *)v232);
        v230 = (v230 + 1);
        v231 = *((unsigned int *)v228 + 15);
        if (v231 > v230)
        {
          while (!*(_QWORD *)(*((_QWORD *)v228 + 6) + 8 * v230))
          {
            if (v231 == ++v230)
            {
              LODWORD(v230) = *((_DWORD *)v228 + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v229 != (_DWORD)v230);
      v216 = v312;
    }
LABEL_397:
    if (v216)
LABEL_330:
      WTF::fastFree(v216 - 16, v57, v58, v59, v60, v61, v62, v63);
  }
  if ((BYTE8(v316) & 1) != 0 && (*((_QWORD *)&v316 + 1) & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*((_QWORD *)&v316 + 1) & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
  if ((v316 & 1) != 0 && (v316 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v316 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
  v18 = 1;
LABEL_334:
  v217 = v318;
  if (v318)
  {
    v218 = *(unsigned int *)(v318 - 4);
    if ((_DWORD)v218)
    {
      v219 = v318 + 24;
      do
      {
        if (*(_QWORD *)(v219 - 24) != -1)
        {
          v220 = *(_QWORD *)(v219 - 16);
          if (v219 != v220 && v220 != 0)
          {
            *(_QWORD *)(v219 - 16) = 0;
            *(_DWORD *)(v219 - 8) = 0;
            WTF::fastFree(v220, v57, v58, v59, v60, v61, v62, v63);
          }
        }
        v219 += 48;
        --v218;
      }
      while (v218);
    }
    WTF::fastFree(v217 - 16, v57, v58, v59, v60, v61, v62, v63);
  }
  v222 = v322;
  if (v322)
  {
    v225 = *(unsigned int *)(v322 - 4);
    if ((_DWORD)v225)
    {
      v226 = v322 + 8;
      do
      {
        if (*(_QWORD *)(v226 - 8) != -1)
        {
          v227 = *(_QWORD *)v226;
          if (*(_QWORD *)v226)
          {
            *(_QWORD *)v226 = 0;
            *(_DWORD *)(v226 + 8) = 0;
            WTF::fastFree(v227, v57, v58, v59, v60, v61, v62, v63);
          }
        }
        v226 += 24;
        --v225;
      }
      while (v225);
    }
    WTF::fastFree(v222 - 16, v57, v58, v59, v60, v61, v62, v63);
  }
  if (v323[0])
  {
    WTF::fastFree(v323[0] - 16, v57, v58, v59, v60, v61, v62, v63);
    if ((v18 & 1) != 0)
      goto LABEL_348;
    goto LABEL_26;
  }
  if ((_DWORD)v18)
  {
LABEL_348:
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v223 = (*(_DWORD *)(*((_QWORD *)v296 + 3) + 16) & 0xFFFFFFFE) == 4) : (v223 = 0),
          !v223 ? (v224 = BYTE2(qword_1ECF4C32A) == 0) : (v224 = 0),
          !v224))
    {
      v316 = v297;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v296 + 1088, "Phase ", (uint64_t)&v316, " changed the IR.\n", "\n");
    }
    v18 = 1;
  }
LABEL_27:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v304);
  v26 = v301;
  if (v303 != (_BYTE *)v301 && v301 != 0)
  {
    v301 = 0;
    LODWORD(v302) = 0;
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v298)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v292, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
  v28 = v299;
  v299 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree((unint64_t)v28, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v28;
  }
  return v18;
}

uint64_t JSC::DFG::performVarargsForwarding(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  JSC::DFG *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::DFG::Node **v11;
  WTF **v12;
  JSC::DFG::Node **v13;
  unint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  WTF *v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  JSC::DFG *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _BOOL8 v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  JSC::DFG *v48;
  WTF *v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  JSC::DFG::Node *v69;
  BOOL v70;
  unsigned __int8 *v71;
  JSC::DFG *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  JSC::DFG *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int isLiveInBytecode;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  _BOOL4 v94;
  unint64_t v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  JSC::DFG *v108;
  void *v109;
  uint64_t v110;
  char v111;
  JSC::UnlinkedCodeBlock ***v112;
  uint64_t v113;
  JSC::UnlinkedCodeBlock ***v114;
  WTF *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  unint64_t v120;
  int v121;
  unsigned int *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  unsigned int v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  _QWORD *v140;
  unsigned __int8 *v141;
  int v142;
  unsigned int v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  JSC::UnlinkedCodeBlock ***v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  JSC::DFG::Node *v156;
  _BOOL4 v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  _BOOL4 v166;
  _BOOL4 v167;
  uint64_t v168;
  BOOL v169;
  BOOL v170;
  char v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  JSC::UnlinkedCodeBlock ***v176;
  WTF **v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  JSC::UnlinkedCodeBlock ***v181;
  WTF *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  unint64_t v195;
  WTF **v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  unint64_t v209;
  JSC::UnlinkedCodeBlock ***v210;
  unint64_t v211;
  _QWORD *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WTF *v220;
  BOOL v222;
  BOOL v223;
  uint64_t v224;
  _QWORD *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  JSC::DFG *v229;
  uint64_t v230;
  int mayExit;
  uint64_t v232;
  JSC::DFG::Graph **v233;
  uint64_t v234;
  unint64_t v235;
  JSC::DFG::Node *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  char v241;
  unint64_t v242;
  int v243;
  int v245;
  JSC::DFG *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  JSC::DFG::Node *v253;
  int v254;
  __int16 v255;
  JSC::DFG *v256;
  unint64_t v257;
  uint64_t v258;
  unsigned int v259;
  __int16 v260;
  __int16 v261;
  JSC::DFG::Node *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  JSC::DFG *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v274;
  JSC::DFG *v276;
  uint64_t v277;
  unint64_t v278;
  BOOL v279;
  char v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  BOOL v286;
  char v287;
  unint64_t v288;
  uint64_t v289;
  JSC::DFG *v290;
  unint64_t v291;
  uint64_t v292;
  char v294;
  uint64_t v295;
  JSC::DFG::Node **v296;
  uint64_t v297;
  _QWORD *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t v304;
  _QWORD *v305;
  int v306;
  unint64_t v307;
  char v308;
  uint64_t v309;
  int *v310;
  WTF *v311;
  JSC::UnlinkedCodeBlock ***v312;
  unint64_t v313;
  _QWORD *v314;
  JSC::UnlinkedCodeBlock ***v315;
  unsigned __int8 *v316;
  unsigned int v317;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t v321;
  BOOL v322;
  uint64_t v323;
  JSC::DFG *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  BOOL v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  JSC::DFG *v332;
  int v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  char v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  BOOL v341;
  BOOL v342;
  JSC::DFG::Node **v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  int v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  char v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  BOOL v355;
  BOOL v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v360;
  uint64_t *v361;
  int v362;
  uint64_t v363;
  unsigned int v364;
  unsigned int v365;
  char v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  BOOL v370;
  BOOL v371;
  JSC::DFG::Node *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t ArgumentsArrayLength;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  JSC::DFG::NodeOrigin *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  JSC::DFG *v389;
  char v390;
  JSC::DFG *v391;
  uint64_t v392;
  JSC::DFG *v393;
  uint64_t v394;
  WTF *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v400;
  WTF **v401;
  uint64_t v402;
  char *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  JSC::DFG *v410;
  uint64_t v411;
  unint64_t v412;
  JSC::DFG *v413;
  uint64_t v414;
  JSC::DFG *v415;
  JSC::DFG::Node **v416;
  WTF **v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  JSC::DFG *v424;
  uint64_t v425;
  char v426;
  JSC::DFG::Node *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  BOOL v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  BOOL v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  BOOL v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  BOOL v453;
  uint64_t v454;
  JSC::DFG *v455;
  uint64_t v456;
  JSC::DFG *v457;
  uint64_t v458;
  uint64_t v459;
  BOOL v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _DWORD *v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  WTF **v473;
  JSC::DFG::Node **v474;
  JSC::UnlinkedCodeBlock ***v475;
  uint64_t v476;
  WTF *v477;
  JSC::DFG *v478;
  JSC::DFG *v479;
  JSC::DFG *v480;
  JSC::DFG *v481;
  JSC::DFG *v482;
  uint64_t v483;
  uint64_t v484;
  JSC::UnlinkedCodeBlock **v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  JSC::UnlinkedCodeBlock ***v490;
  uint64_t v491;
  int v492;
  int v493;
  char v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t *v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  unsigned int v501;
  JSC::UnlinkedCodeBlock **v502;
  JSC::DFG *v503;
  char v504;
  unsigned int v505;
  _QWORD *v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  int v513;
  unint64_t v514;
  JSC::DFG::Node *v515;
  JSC::DFG::Node *v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  __int16 v520;
  JSC::DFG *v521;
  __int128 v522;
  char v523;
  WTF *v524;
  char v525;
  _QWORD v526[2];
  __int128 v527;
  double v528;
  _QWORD v529[3];
  WTF *v530[2];
  uint64_t v531;
  _QWORD v532[16];
  WTF ***v533;
  unsigned int *v534;
  unsigned int *v535;
  unint64_t v536;
  unint64_t v537;
  JSC::DFG::Node **v538;
  JSC::DFG::Node *v539;
  unsigned int v540;
  WTF **v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  JSC::DFG::Node **v545;
  uint64_t v546;
  uint64_t v547;
  JSC::DFG::Node *v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553[2];

  v517 = -1;
  v518 = -1;
  v519 = 0;
  v520 = 256;
  v521 = this;
  *(_QWORD *)&v522 = "varargs forwarding";
  *((_QWORD *)&v522 + 1) = 19;
  v523 = 0;
  v524 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v517);
  v526[0] = "DFG";
  v526[1] = 4;
  v527 = v522;
  v528 = 0.0;
  v6 = (unsigned __int8 *)g_config;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v282 = mach_absolute_time();
    v284 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v284 != -1)
    {
      v530[0] = (WTF *)&v545;
      v541 = v530;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v541, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v283) = dword_1ECF4400C;
    v528 = (double)(v282 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v283 * 1000000000.0);
  }
  v7 = v521;
  if (*((_DWORD *)v521 + 236) == 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v521, 0, (const WTF::CString *)"./dfg/DFGVarargsForwardingPhase.cpp", (const char *)0x38, "BOOL JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::run()", "m_graph.m_form != SSA");
    __break(0xC471u);
    JUMPOUT(0x198560A1CLL);
  }
  v525 = 0;
  v8 = *((unsigned int *)v521 + 15);
  if (!(_DWORD)v8)
    goto LABEL_362;
  v9 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v521 + 6) + 8 * v9))
  {
    v10 = 0;
    if (v8 == ++v9)
      goto LABEL_363;
  }
  if ((_DWORD)v8 == (_DWORD)v9)
    goto LABEL_362;
  v11 = (JSC::DFG::Node **)&v547;
  v12 = (WTF **)&v543;
  v13 = &v548;
  v14 = (unint64_t *)&v544;
  v15 = (uint64_t)&v540;
  v16 = *((_DWORD *)v521 + 15);
  do
  {
    if (v16 <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198561250);
    }
    v17 = *(_QWORD *)(*((_QWORD *)v7 + 6) + 8 * v9);
    v18 = *(_DWORD *)(v17 + 220);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 1;
      while (1)
      {
        v22 = v21;
        v23 = *(_QWORD *)(v17 + 208);
        v24 = *(unsigned __int16 *)(*(_QWORD *)(v23 + 8 * v19) + 18);
        if (v24 != 354 && v24 != 347)
        {
          v25 = v20 + 1;
          goto LABEL_16;
        }
        v548 = 0;
        v548 = *(JSC::DFG::Node **)(v23 + 8 * v19);
        v545 = v11;
        v546 = 1;
        v544 = v20;
        v541 = v12;
        v542 = 2;
        v25 = v20 + 1;
        v540 = v20 + 1;
        v499 = v8;
        v473 = v12;
        v474 = v11;
        if (v18 <= v20 + 1)
          goto LABEL_381;
        v37 = v20 + 1;
        v503 = v7;
LABEL_18:
        v539 = 0;
        v26 = *(_QWORD *)(*(_QWORD *)(v17 + 208) + 8 * v37);
        v539 = (JSC::DFG::Node *)v26;
        v536 = (unint64_t)&v517;
        v537 = (unint64_t)&v539;
        v538 = &v548;
        v27 = *(unsigned __int16 *)(v26 + 18);
        if (v27 > 0x61)
          break;
        if (v27 - 24 >= 2)
        {
          if (v27 == 16)
          {
            if (v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 24) & 0xFF00FFFFFFFFFFFFLL))
            {
              v82 = *(_QWORD **)(v26 + 72);
              v83 = v82;
              do
              {
                v84 = v83;
                v83 = (_QWORD *)*v83;
              }
              while (v83);
              if (v84 != v82)
                *v82 = v84;
              if (*((_BYTE *)v84 + 44))
                goto LABEL_479;
            }
            goto LABEL_31;
          }
          if (v27 == 20)
          {
            if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v26 + 24) & 0xFF00FFFFFFFFFFFFLL))
              goto LABEL_31;
            v544 = v37;
            v28 = *(WTF **)(v26 + 72);
            if (HIDWORD(v542))
            {
              v172 = (char *)v541 + 4;
              v173 = HIDWORD(v542);
              while (*(WTF **)(v172 - 4) != v28)
              {
                v172 += 8;
                if (!--v173)
                  goto LABEL_24;
              }
            }
            else
            {
LABEL_24:
              v530[0] = *(WTF **)(v26 + 72);
              if (HIDWORD(v542) != (_DWORD)v542)
              {
                v541[HIDWORD(v542)] = v28;
                ++HIDWORD(v542);
                goto LABEL_31;
              }
              v391 = v7;
              v392 = v8;
              WTF::Vector<JSC::Operand,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Operand>((uint64_t)&v541, (unint64_t)v530, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
LABEL_710:
              v15 = (uint64_t)&v540;
              v14 = (unint64_t *)&v544;
              v13 = &v548;
              v8 = v392;
              v7 = v391;
            }
LABEL_31:
            v32 = HIDWORD(v546);
LABEL_32:
            if (v32)
            {
              v343 = v545;
              v344 = 8 * v32;
              do
              {
                v345 = v8;
                v346 = JSC::DFG::Graph::uses((uint64_t)v521, v539, *v343);
                v15 = (uint64_t)&v540;
                v14 = (unint64_t *)&v544;
                v13 = &v548;
                v8 = v345;
                v7 = v503;
                if ((v346 & 1) != 0)
                  goto LABEL_479;
                ++v343;
                v344 -= 8;
              }
              while (v344);
            }
LABEL_33:
            if (*(_DWORD *)(v17 + 220) <= v540 + 1)
              v33 = 0;
            else
              v33 = *(_QWORD *)(*(_QWORD *)(v17 + 208) + 8 * (v540 + 1));
            v34 = v521;
            v533 = &v541;
            v534 = &v544;
            v535 = &v540;
            v35 = *((_QWORD *)v539 + 1);
            if ((v35 & 1) != 0)
            {
              v320 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
              if ((v35 & 2) != 0
                || ((v321 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v321 != 0x3FFFFFFF)
                  ? (v322 = (_DWORD)v321 == -1)
                  : (v322 = 1),
                    v322))
              {
                v323 = 2;
              }
              else if (v321 >> 28)
              {
                v455 = v521;
                v456 = WTF::fastMalloc((WTF *)0x10);
                v15 = (uint64_t)&v540;
                v14 = (unint64_t *)&v544;
                v13 = &v548;
                v8 = v499;
                v7 = v503;
                *(_QWORD *)v456 = v320;
                *(_DWORD *)(v456 + 8) = v321;
                v323 = 1;
                v320 = v456;
                v34 = v455;
                v6 = (unsigned __int8 *)g_config;
              }
              else
              {
                v323 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
                v320 = v321 << 36;
              }
              v35 = v320 | v323;
            }
            v514 = v35;
            if (v33)
            {
              v2 = *(_QWORD *)(v33 + 8);
              if ((v2 & 1) != 0)
              {
                v326 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
                if ((v2 & 2) != 0
                  || ((v327 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v327 != 0x3FFFFFFF)
                    ? (v328 = (_DWORD)v327 == -1)
                    : (v328 = 1),
                      v328))
                {
                  v329 = 2;
                }
                else if (v327 >> 28)
                {
                  v457 = v34;
                  v458 = WTF::fastMalloc((WTF *)0x10);
                  v35 = v514;
                  v15 = (uint64_t)&v540;
                  v14 = (unint64_t *)&v544;
                  v13 = &v548;
                  v8 = v499;
                  v7 = v503;
                  *(_QWORD *)v458 = v326;
                  *(_DWORD *)(v458 + 8) = v327;
                  v329 = 1;
                  v326 = v458;
                  v34 = v457;
                  v6 = (unsigned __int8 *)g_config;
                }
                else
                {
                  v329 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
                  v326 = v327 << 36;
                }
                v2 = v326 | v329;
              }
              v529[0] = 0x3FFFFFFFLL;
              if ((*(_WORD *)(v33 + 18) & 0xFFFE) == 0x14)
              {
                v74 = *(_QWORD *)(v33 + 72);
                v75 = v2;
                v510 = v2;
                if ((v2 & 1) != 0)
                {
                  v481 = v34;
                  v385 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
                  if ((v2 & 2) != 0
                    || (v386 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v386 == 0x3FFFFFFF)
                    || (_DWORD)v386 == -1)
                  {
                    v387 = 2;
                  }
                  else if (v386 >> 28)
                  {
                    v461 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v461 = v385;
                    *(_DWORD *)(v461 + 8) = v386;
                    v387 = 1;
                    v385 = v461;
                  }
                  else
                  {
                    v387 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
                    v385 = v386 << 36;
                  }
                  v75 = v385 | v387;
                  v6 = (unsigned __int8 *)g_config;
                  v34 = v481;
                }
                v553[0] = v75;
                v76 = v34;
                isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode((uint64_t)v34, v74, (unint64_t *)v553, v15, v2, v3, v4, v5);
                if ((v553[0] & 1) != 0 && (v553[0] & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v553[0] & 0xFFFFFFFF8, v77, v78, v79, v80, v3, v4, v5);
                v7 = v503;
                v8 = v499;
                v13 = &v548;
                v14 = (unint64_t *)&v544;
                v15 = (uint64_t)&v540;
                v2 = v510;
                v35 = v514;
                v34 = v76;
                if (isLiveInBytecode)
                {
                  v2 = v510;
                  v35 = v514;
                  v34 = v76;
                  v15 = (uint64_t)&v540;
                  v14 = (unint64_t *)&v544;
                  v13 = &v548;
                  v8 = v499;
                  v7 = v503;
                  v529[0] = v74;
                }
              }
              if (v35 == v2)
              {
                v36 = v35 & 1;
                goto LABEL_41;
              }
              if ((v35 & 2) != 0)
              {
                LODWORD(v38) = -1;
              }
              else if ((v35 & 1) != 0)
              {
                LODWORD(v38) = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v38 = v35 >> 36;
              }
              if ((v2 & 2) != 0)
              {
                LODWORD(v39) = -1;
              }
              else if ((v2 & 1) != 0)
              {
                LODWORD(v39) = *(_DWORD *)((v2 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v39 = v2 >> 36;
              }
              v3 = v35 & 0xFFFFFFFF8;
              if ((_DWORD)v38 == (_DWORD)v39)
              {
                v304 = v35 & 0xFFFFFFFF8;
                if ((v35 & 1) != 0)
                  v304 = *(_QWORD *)v3;
                v305 = (_QWORD *)(v2 & 0xFFFFFFFF8);
                if ((v2 & 1) != 0)
                  v305 = (_QWORD *)*v305;
                if ((_QWORD *)v304 == v305)
                {
                  v36 = v2 & 1;
                  goto LABEL_41;
                }
              }
              v40 = v35 & 0xFFFFFFFF8;
              if ((v35 & 1) != 0)
                v40 = *(_QWORD *)v3;
              v36 = v2 & 1;
              v41 = (uint64_t *)(v2 & 0xFFFFFFFF8);
              v507 = v36;
              v500 = v40;
              v495 = v2 & 0xFFFFFFFF8;
              if ((v2 & 1) != 0)
              {
                v360 = *v41;
                if (v40 == *v41)
                {
                  v42 = v40 == 0;
                  v361 = (uint64_t *)(v40 + 8);
                  if (!v40)
                    v361 = (uint64_t *)((char *)v34 + 40);
                  v44 = *v361;
                  if ((v2 & 2) != 0)
                    goto LABEL_122;
                  LODWORD(v45) = *(_DWORD *)((v2 & 0xFFFFFFFF8) + 8);
LABEL_60:
                  if ((v45 & 3) != 0)
                  {
                    v15 = 1;
                    goto LABEL_123;
                  }
                  v504 = v42;
                  if ((v35 & 2) != 0)
                  {
                    v100 = 3;
                    v101 = 0xFFFFFFFFLL;
                  }
                  else
                  {
                    v46 = v2;
                    v47 = v8;
                    v48 = v7;
                    if ((v35 & 1) != 0)
                    {
                      v488 = v35 & 0xFFFFFFFF8;
                      LODWORD(v101) = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
                      if ((v101 & 3) == 0)
                      {
                        v49 = JSC::DFG::Graph::livenessFor(v34, (JSC::UnlinkedCodeBlock **)v44, v42, (uint64_t)&v540, v2, v3, v4, v5);
                        v50 = 1;
                        v7 = v48;
                        v8 = v47;
                        v13 = &v548;
                        v14 = (unint64_t *)&v544;
                        v15 = (uint64_t)&v540;
                        v35 = v514;
                        v2 = v46;
                        v36 = v507;
                        goto LABEL_680;
                      }
                    }
                    else
                    {
                      if ((v35 & 0x3000000000) == 0)
                      {
                        v49 = JSC::DFG::Graph::livenessFor(v34, (JSC::UnlinkedCodeBlock **)v44, v42, (uint64_t)&v540, v2, v3, v4, v5);
                        v50 = 1;
                        v7 = v48;
                        v8 = v47;
                        v13 = &v548;
                        v14 = (unint64_t *)&v544;
                        v15 = (uint64_t)&v540;
                        v35 = v514;
                        v2 = v46;
                        v36 = v507;
                        goto LABEL_65;
                      }
                      v488 = v35 & 0xFFFFFFFF8;
                      v101 = v514 >> 36;
                    }
                    v100 = v101 & 3;
                    if ((v101 & 3) == 0)
                    {
                      v49 = JSC::DFG::Graph::livenessFor(v34, (JSC::UnlinkedCodeBlock **)v44, v42, (uint64_t)&v540, v2, v3, v4, v5);
                      v492 = 1;
                      v35 = v514;
                      v2 = v46;
                      v36 = v507;
                      goto LABEL_147;
                    }
                    v101 = v101;
                    v36 = v2 & 1;
                    v3 = v488;
                  }
                  v102 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v44 + 56) + 80) + (v101 >> 2));
                  v103 = *v102;
                  if ((v103 | 2) == 0x82)
                    v103 = v102[1];
                  v488 = v3;
                  v511 = v2;
                  v47 = v8;
                  v48 = v7;
                  v492 = 1;
                  switch(v103)
                  {
                    case 0:
                    case 1:
                    case 3:
                      if (v100 == 1)
                        goto LABEL_154;
                      v492 = 1;
                      goto LABEL_143;
                    case 2:
LABEL_154:
                      v104 = 1;
                      if (!v42)
                        goto LABEL_355;
                      v492 = 1;
                      v484 = v44;
                      v478 = v34;
                      v105 = 0x200000000;
                      v504 = 1;
                      break;
                    case 4:
                      goto LABEL_143;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x198560D90);
                  }
                  goto LABEL_156;
                }
                v106 = v35 & 0xFFFFFFFF8;
                v482 = v34;
                v512 = v2;
                if ((v2 & 2) != 0
                  || (v405 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v405 == 0x3FFFFFFF)
                  || (_DWORD)v405 == -1)
                {
                  v406 = 2;
                }
                else if (v405 >> 28)
                {
                  v463 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v463 = v360;
                  *(_DWORD *)(v463 + 8) = v405;
                  v406 = 1;
                  v360 = v463;
                }
                else
                {
                  v406 = *v41;
                  v360 = v405 << 36;
                }
                v107 = v360 | v406;
                v34 = v482;
              }
              else
              {
                if ((uint64_t *)v40 == v41)
                {
                  v42 = v41 == 0;
                  v43 = v41 + 1;
                  if (!v41)
                    v43 = (uint64_t *)((char *)v34 + 40);
                  v44 = *v43;
                  if ((v2 & 2) == 0)
                  {
                    v45 = v2 >> 36;
                    goto LABEL_60;
                  }
LABEL_122:
                  v15 = 0;
LABEL_123:
                  if ((v35 & 2) != 0)
                  {
                    v91 = 3;
                    v90 = 0xFFFFFFFFLL;
LABEL_128:
                    v92 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v44 + 56) + 80) + (v90 >> 2));
                    v93 = *v92;
                    if ((v93 | 2) == 0x82)
                      v93 = v92[1];
                    v94 = 0;
                    switch(v93)
                    {
                      case 0:
                      case 1:
                      case 3:
                        v94 = v91 == 1;
                        break;
                      case 2:
                        v94 = 1;
                        break;
                      case 4:
                        break;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198560DF0);
                    }
                  }
                  else
                  {
                    if ((v35 & 1) != 0)
                      LODWORD(v90) = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
                    else
                      v90 = v35 >> 36;
                    v91 = v90 & 3;
                    if ((v90 & 3) != 0)
                    {
                      v90 = v90;
                      goto LABEL_128;
                    }
                    v94 = 0;
                  }
                  v488 = v35 & 0xFFFFFFFF8;
                  v492 = v15;
                  if ((_DWORD)v15)
                  {
                    if ((v2 & 1) != 0)
                      LODWORD(v95) = *(_DWORD *)((v2 & 0xFFFFFFFF8) + 8);
                    else
                      v95 = v2 >> 36;
                    v96 = v95 & 3;
                    if ((v95 & 3) != 0)
                    {
                      v95 = v95;
                      goto LABEL_137;
                    }
                    v99 = 0;
                  }
                  else
                  {
                    v96 = 3;
                    v95 = 0xFFFFFFFFLL;
LABEL_137:
                    v97 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v44 + 56) + 80) + (v95 >> 2));
                    v98 = *v97;
                    if ((v98 | 2) == 0x82)
                      v98 = v97[1];
                    v99 = 0;
                    switch(v98)
                    {
                      case 0:
                      case 1:
                      case 3:
                        v99 = v96 == 1;
                        break;
                      case 2:
                        v99 = 1;
                        break;
                      case 4:
                        break;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198560E10);
                    }
                  }
                  v511 = v2;
                  if ((v94 & ~v99) == 0)
                  {
                    v504 = v42;
                    v47 = v8;
                    v48 = v7;
                    goto LABEL_143;
                  }
                  v484 = v44;
                  v478 = v34;
                  v47 = v8;
                  v48 = v7;
                  if (v42)
                  {
                    v504 = 1;
                    v105 = 0x200000000;
                  }
                  else
                  {
                    v104 = v15;
LABEL_355:
                    v492 = v104;
                    v484 = v44;
                    v478 = v34;
                    v504 = 0;
                    v105 = (*(_QWORD *)(v40 + 24) >> 22) | 0x200000000;
                  }
LABEL_156:
                  v34 = v478;
                  v44 = v484;
LABEL_143:
                  v49 = JSC::DFG::Graph::livenessFor(v34, (JSC::UnlinkedCodeBlock **)v44, v42, v15, v2, v3, v4, v5);
                  v35 = v514;
                  if ((v514 & 2) != 0)
                  {
                    LODWORD(v51) = -1;
                    v7 = v48;
                    v8 = v47;
                    v13 = &v548;
                    v14 = (unint64_t *)&v544;
                    v15 = (uint64_t)&v540;
                    v2 = v511;
                    v50 = v492;
                    goto LABEL_66;
                  }
                  v2 = v511;
LABEL_147:
                  v7 = v48;
                  v8 = v47;
                  v13 = &v548;
                  v14 = (unint64_t *)&v544;
                  v15 = (uint64_t)&v540;
                  v50 = v492;
                  if ((v35 & 1) != 0)
                  {
LABEL_680:
                    LODWORD(v51) = *(_DWORD *)(v488 + 8);
                    goto LABEL_66;
                  }
LABEL_65:
                  v51 = v35 >> 36;
LABEL_66:
                  v52 = (v51 & 3) + (v51 >> 2);
                  v53 = *(unsigned int **)v49;
                  v54 = **(_DWORD **)v49;
                  if (v54 <= v52)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985604E8);
                  }
                  if (v50)
                  {
                    if (v36)
                      LODWORD(v55) = *(_DWORD *)(v495 + 8);
                    else
                      v55 = v2 >> 36;
                  }
                  else
                  {
                    LODWORD(v55) = -1;
                  }
                  v56 = (v55 & 3) + (v55 >> 2);
                  if (v54 <= v56)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198560508);
                  }
                  v57 = v53 + 2;
                  v58 = (uint64_t *)&v53[4 * v52 + 2];
                  v59 = v58[1] + 31;
                  if (v59 >= 0x20)
                  {
                    v60 = *(_QWORD *)&v57[4 * v56];
                    v61 = *v58;
                    v62 = v59 >> 5;
                    v509 = v2;
                    v491 = *v58;
                    v496 = v60;
                    v487 = v59 >> 5;
                    v63 = 0;
                    if ((v504 & 1) != 0)
                    {
                      v64 = -1;
                      do
                      {
                        v65 = *(_DWORD *)(v61 + 4 * v63) & ~*(_DWORD *)(v60 + 4 * v63);
                        if (v65)
                        {
                          v66 = v64;
                          do
                          {
                            if ((v65 & 1) != 0)
                            {
                              v62 = v487;
                              v61 = v491;
                              v60 = v496;
                              v8 = v499;
                              v2 = v509;
                              v35 = v514;
                              v15 = (uint64_t)&v540;
                              v14 = (unint64_t *)&v544;
                              v13 = &v548;
                              v7 = v503;
                            }
                            --v66;
                            v67 = v65 >= 2;
                            v65 >>= 1;
                          }
                          while (v67);
                        }
                        ++v63;
                        v64 -= 32;
                      }
                      while (v63 != v62);
                    }
                    else
                    {
                      v86 = -1;
                      do
                      {
                        v87 = *(_DWORD *)(v61 + 4 * v63) & ~*(_DWORD *)(v60 + 4 * v63);
                        if (v87)
                        {
                          v88 = v86;
                          do
                          {
                            if ((v87 & 1) != 0)
                            {
                              v89 = v88
                                  + (HIDWORD(*(_QWORD *)(v500 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v500 + 24) >> 28) >> 24 << 20));
                              v62 = v487;
                              v61 = v491;
                              v60 = v496;
                              v8 = v499;
                              v2 = v509;
                              v35 = v514;
                              v15 = (uint64_t)&v540;
                              v14 = (unint64_t *)&v544;
                              v13 = &v548;
                              v7 = v503;
                            }
                            --v88;
                            v193 = v87 > 1;
                            v87 >>= 1;
                          }
                          while (v193);
                        }
                        ++v63;
                        v86 -= 32;
                      }
                      while (v63 != v62);
                    }
                    v6 = (unsigned __int8 *)g_config;
                    v36 = v507;
                  }
                  goto LABEL_41;
                }
                v106 = v35 & 0xFFFFFFFF8;
                v512 = v2;
                v107 = v2;
              }
              v551 = v107;
              v108 = v34;
              JSC::DFG::Graph::localsAndTmpsLiveInBytecode((uint64_t)v34, &v551, (WTF::BitVector *)&v552);
              if ((v551 & 1) != 0 && (v551 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v551 & 0xFFFFFFFF8, v109, (uint64_t)v14, v15, v2, v3, v4, v5);
              if (!*((_DWORD *)v108 + 15))
              {
                __break(0xC471u);
                JUMPOUT(0x198561200);
              }
              v550 = *(_DWORD *)(**((_QWORD **)v108 + 6) + 92);
              v110 = v514;
              v479 = v108;
              if ((v514 & 1) != 0)
              {
                v407 = *(_QWORD *)v106;
                if ((v514 & 2) != 0
                  || (v408 = *(unsigned int *)(v106 + 8), (_DWORD)v408 == 0x3FFFFFFF)
                  || (_DWORD)v408 == -1)
                {
                  v409 = 2;
                }
                else if (v408 >> 28)
                {
                  v464 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v464 = v407;
                  *(_DWORD *)(v464 + 8) = v408;
                  v409 = 1;
                  v407 = v464;
                }
                else
                {
                  v409 = *(_QWORD *)v106;
                  v407 = v408 << 36;
                }
                v110 = v407 | v409;
                v108 = v479;
              }
              v111 = 0;
              v549 = v110;
              v530[0] = (WTF *)v529;
              v530[1] = (WTF *)&v550;
              v112 = (JSC::UnlinkedCodeBlock ***)((char *)v108 + 40);
              v497 = (unint64_t *)&v549;
              v501 = 0x3FFFFFFF;
              v475 = (JSC::UnlinkedCodeBlock ***)((char *)v108 + 40);
              v476 = v110;
              v505 = 0x3FFFFFFF;
              v531 = (uint64_t)&v552;
              v532[0] = &v533;
              while (2)
              {
                v113 = v110 & 0xFFFFFFFF8;
                if ((v110 & 1) != 0)
                  v113 = *(_QWORD *)v113;
                if (v113)
                {
                  v136 = *(_QWORD *)(v113 + 24);
                  v493 = HIDWORD(v136) & 0xFFFFF | ((int)(v136 >> 28) >> 24 << 20);
                  v137 = (v136 >> 60) | (16 * *(_BYTE *)(v113 + 32));
                  if ((*(_BYTE *)(v113 + 32) & 1) != 0)
                  {
                    v297 = (v493 + 3);
                    if (HIDWORD(v529[0]) != v297 >> 31 || LODWORD(v529[0]) != (_DWORD)v297)
                    {
                      v299 = (_QWORD *)(2 * v552);
                      v300 = v552 < 0 ? 63 : *v299;
                      v301 = (-4 - v493);
                      if (v300 <= v301)
                        goto LABEL_550;
                      v302 = v299 + 1;
                      v303 = &v552;
                      if (v552 >= 0)
                        v303 = v302;
                      if (((*(unint64_t *)((char *)v303 + ((v301 >> 3) & 0x1FFFFFF8)) >> (-4
                                                                                                - v493)) & 1) == 0)
                      {
LABEL_550:
                        v137 = (*(_QWORD *)(v113 + 24) >> 60) | (16 * *(_BYTE *)(v113 + 32));
                      }
                    }
                  }
                  if ((v137 & 0xFu) - 3 <= 2)
                  {
                    v138 = (v493 + 4);
                    if (HIDWORD(v529[0]) != v138 >> 31 || LODWORD(v529[0]) != (_DWORD)v138)
                    {
                      v140 = (_QWORD *)(2 * v552);
                      v285 = v552 < 0 ? 63 : *v140;
                      v152 = (-5 - v493);
                      if (v285 <= v152)
                        goto LABEL_503;
                      v153 = v140 + 1;
                      v154 = &v552;
                      if (v552 >= 0)
                        v154 = v153;
                      if (((*(unint64_t *)((char *)v154 + ((v152 >> 3) & 0x1FFFFFF8)) >> (-5
                                                                                                - v493)) & 1) == 0)
LABEL_503:
                    }
                  }
                }
                else
                {
                  v493 = 0;
                }
                v114 = (JSC::UnlinkedCodeBlock ***)(v113 + 8);
                if (!v113)
                  v114 = v112;
                v485 = *v114;
                v115 = JSC::DFG::Graph::livenessFor(v108, *v114, (uint64_t)v14, v15, v2, v3, v4, v5);
                v116 = *v497;
                v489 = v113;
                if ((*v497 & 2) != 0)
                {
                  v7 = v503;
                  v8 = v499;
                  v13 = &v548;
                  v14 = (unint64_t *)&v544;
                  v15 = (uint64_t)&v540;
                  v2 = v512;
                  v3 = v501;
                  v4 = v505;
                  if ((v116 & 1) == 0)
                  {
                    v117 = 0xFFFFFFFFLL;
LABEL_171:
                    v35 = v514;
                    goto LABEL_172;
                  }
                  v395 = v115;
                  v398 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
                  v117 = 0xFFFFFFFFLL;
                }
                else
                {
                  v7 = v503;
                  v8 = v499;
                  v13 = &v548;
                  v14 = (unint64_t *)&v544;
                  v15 = (uint64_t)&v540;
                  v2 = v512;
                  v3 = v501;
                  v4 = v505;
                  if ((v116 & 1) == 0)
                  {
                    v117 = v116 >> 36;
                    goto LABEL_171;
                  }
                  v395 = v115;
                  v396 = v116 & 0xFFFFFFFF8;
                  v397 = *(unsigned int *)(v396 + 8);
                  v398 = *(_QWORD *)v396;
                  v117 = v397;
                  if ((_DWORD)v397 != -1 && v397 != 0x3FFFFFFF)
                  {
                    if (v397 >> 28)
                    {
                      v462 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v462 = v398;
                      *(_DWORD *)(v462 + 8) = v117;
                      v400 = 1;
                      v398 = v462;
                    }
                    else
                    {
                      v400 = *(_QWORD *)v396;
                      v398 = v397 << 36;
                    }
LABEL_720:
                    v116 = v398 | v400;
                    v115 = v395;
                    v7 = v503;
                    v8 = v499;
                    v13 = &v548;
                    v14 = (unint64_t *)&v544;
                    v15 = (uint64_t)&v540;
                    v2 = v512;
                    v35 = v514;
                    v3 = v501;
                    v4 = v505;
LABEL_172:
                    if ((v111 & 1) == 0)
                    {
LABEL_173:
                      v118 = (v117 & 3) + (v117 >> 2);
                      v119 = *(unsigned int **)v115;
                      if (**(unsigned int **)v115 <= v118)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1985607DCLL);
                      }
                      v120 = v116 & 1;
                      goto LABEL_175;
                    }
                    v120 = v116 & 1;
                    if ((v116 & 2) != 0)
                    {
                      v212 = (_QWORD *)(v116 & 0xFFFFFFFF8);
                      LODWORD(v211) = -1;
                      v210 = v475;
                      if ((v116 & 1) != 0)
LABEL_826:
                        v212 = (_QWORD *)*v212;
                    }
                    else
                    {
                      v210 = v475;
                      if ((v116 & 1) != 0)
                      {
                        v212 = (_QWORD *)(v116 & 0xFFFFFFFF8);
                        LODWORD(v211) = *(_DWORD *)((v116 & 0xFFFFFFFF8) + 8);
                        goto LABEL_826;
                      }
                      v211 = v116 >> 36;
                      v212 = (_QWORD *)(v116 & 0xFFFFFFFF8);
                    }
                    if (v212)
                      v148 = (JSC::UnlinkedCodeBlock ***)(v212 + 1);
                    else
                      v148 = v210;
                    v149 = (unsigned __int8 *)(**((_QWORD **)(*v148)[7] + 10)
                                             + ((unint64_t)v211 >> 2));
                    v150 = *v149;
                    if ((v150 | 2) == 0x82)
                      v150 = v149[1];
                    if (v150 > 3 || v150 == 2)
                      goto LABEL_173;
                    v118 = (v117 & 3) + (v117 >> 2);
                    v119 = (unsigned int *)*((_QWORD *)v115 + 1);
                    if (*v119 <= v118)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1985611ACLL);
                    }
                    v35 = v514;
                    v3 = v501;
                    v4 = v505;
LABEL_175:
                    v512 = v2;
                    if (v120 && (v116 & 0xFFFFFFFF8) != 0)
                    {
                      v393 = v7;
                      v394 = v8;
                      WTF::fastFree(v116 & 0xFFFFFFFF8, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                      v2 = v512;
                      v35 = v514;
                      v15 = (uint64_t)&v540;
                      v14 = (unint64_t *)&v544;
                      v13 = &v548;
                      v8 = v394;
                      v4 = v505;
                      v3 = v501;
                      v7 = v393;
                    }
                    v121 = *((_DWORD *)v485 + 5);
                    if (v121)
                    {
                      v122 = &v119[4 * v118 + 2];
                      v123 = -v493;
                      v124 = v493 - v121;
                      v125 = v121 - 1;
                      do
                      {
                        if (((int)v124 < (int)v4 || (int)v124 >= (int)v3)
                          && ((*(_DWORD *)(*(_QWORD *)v122 + 4 * (v125 >> 5)) >> v125) & 1) != 0
                          && (HIDWORD(v529[0]) != v124 >> 31 || v124 != LODWORD(v529[0])))
                        {
                          v127 = (_QWORD *)(2 * v552);
                          v128 = v552 < 0 ? 63 : *v127;
                          v129 = v123 + v125;
                          if (v128 <= v129)
                            goto LABEL_193;
                          v130 = v127 + 1;
                          v131 = &v552;
                          if (v552 >= 0)
                            v131 = v130;
                          if (((*(unint64_t *)((char *)v131 + ((v129 >> 3) & 0x1FFFFFF8)) >> (v123 + v125)) & 1) == 0)
                          {
LABEL_193:
                            v132 = v8;
                            v123 = -v493;
                            v2 = v512;
                            v35 = v514;
                            v15 = (uint64_t)&v540;
                            v14 = (unint64_t *)&v544;
                            v13 = &v548;
                            v8 = v132;
                            v4 = v505;
                            v3 = v501;
                            v7 = v503;
                          }
                        }
                        --v125;
                        ++v124;
                      }
                      while (v125 != -1);
                    }
                    v133 = *v497;
                    if ((*v497 & 2) != 0)
                    {
                      v208 = 3;
                      v209 = 0xFFFFFFFFLL;
                      v6 = (unsigned __int8 *)g_config;
                      v36 = v507;
                    }
                    else
                    {
                      v6 = (unsigned __int8 *)g_config;
                      v36 = v507;
                      if ((v133 & 1) != 0)
                      {
                        LODWORD(v209) = *(_DWORD *)((v133 & 0xFFFFFFFF8) + 8);
                        if ((v209 & 3) == 0)
                          goto LABEL_198;
                      }
                      else
                      {
                        if ((v133 & 0x3000000000) == 0)
                        {
LABEL_198:
                          if (!v489)
                          {
                            if ((v476 & 1) != 0 && (v476 & 0xFFFFFFFF8) != 0)
                            {
                              v410 = v7;
                              v411 = v8;
                              v412 = v2;
                              WTF::fastFree(v476 & 0xFFFFFFFF8, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                              v2 = v412;
                              v36 = v507;
                              v35 = v514;
                              v15 = (uint64_t)&v540;
                              v14 = (unint64_t *)&v544;
                              v13 = &v548;
                              v8 = v411;
                              v7 = v410;
                            }
                            if ((v552 & 0x8000000000000000) == 0)
                            {
                              v246 = v7;
                              v247 = v8;
                              v248 = v2;
                              WTF::fastFree(2 * v552, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                              v2 = v248;
                              v36 = v507;
                              v35 = v514;
                              v15 = (uint64_t)&v540;
                              v14 = (unint64_t *)&v544;
                              v13 = &v548;
                              v8 = v247;
                              v7 = v246;
                            }
LABEL_41:
                            if (v36)
                            {
                              v330 = v2 & 0xFFFFFFFF8;
                              if ((v2 & 0xFFFFFFFF8) != 0)
                              {
LABEL_610:
                                v331 = v8;
                                v332 = v7;
                                WTF::fastFree(v330, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                                v7 = v332;
                                v8 = v331;
                                v13 = &v548;
                                v14 = (unint64_t *)&v544;
                                v15 = (uint64_t)&v540;
                                v35 = v514;
                              }
                            }
LABEL_42:
                            if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
                            {
                              v324 = v7;
                              v325 = v8;
                              WTF::fastFree(v35 & 0xFFFFFFFF8, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                              v15 = (uint64_t)&v540;
                              v14 = (unint64_t *)&v544;
                              v13 = &v548;
                              v8 = v325;
                              v7 = v324;
                            }
                            v37 = v540 + 1;
                            v540 = v37;
                            v18 = *(_DWORD *)(v17 + 220);
                            if (v18 <= v37)
                            {
LABEL_381:
                              if (v18 <= v20)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198561230);
                              }
                              v224 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 208) + 8 * v19) + 8);
                              v225 = (_QWORD *)(v224 & 0xFFFFFFFF8);
                              if ((v224 & 1) != 0)
                                v225 = (_QWORD *)*v225;
                              v553[0] = 0;
                              v226 = v544;
                              if (v544 > v20)
                              {
                                v227 = v20 + 1;
                                while (2)
                                {
                                  if (*(_DWORD *)(v17 + 220) <= v227)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x198561238);
                                  }
                                  v228 = v8;
                                  v229 = v7;
                                  v230 = *(_QWORD *)(*(_QWORD *)(v17 + 208) + 8 * v227);
                                  switch(*(_WORD *)(v230 + 18))
                                  {
                                    case 0x10:
                                      v236 = v548;
                                      v237 = *(_QWORD **)(v230 + 72);
                                      v238 = v237;
                                      do
                                      {
                                        v239 = v238;
                                        v238 = (_QWORD *)*v238;
                                      }
                                      while (v238);
                                      if (v239 != v237)
                                        *v237 = v239;
                                      v235 = v239[3];
                                      v240 = *(_QWORD *)v236;
                                      v234 = *(_QWORD *)v236 & 0xFFFFFFFF8;
                                      if ((v240 & 1) != 0)
                                        v234 = *(_QWORD *)v234;
                                      if (HIDWORD(v235) == 2)
                                        goto LABEL_389;
                                      goto LABEL_399;
                                    case 0x11:
                                      v432 = JSC::DFG::argumentsInvolveStackSlot(v548, **(_QWORD **)(v230 + 72));
                                      v15 = (uint64_t)&v540;
                                      v14 = (unint64_t *)&v544;
                                      v7 = v229;
                                      v8 = v228;
                                      if (v432)
                                        break;
                                      goto LABEL_389;
                                    case 0x12:
                                    case 0x14:
                                    case 0x15:
                                      v234 = *(_QWORD *)v548 & 0xFFFFFFFF8;
                                      if ((*(_QWORD *)v548 & 1) != 0)
                                        v234 = *(_QWORD *)v234;
                                      v235 = *(_QWORD *)(v230 + 72);
                                      if (HIDWORD(v235) == 2)
                                        goto LABEL_389;
LABEL_399:
                                      if (v234)
                                      {
                                        v241 = *(_BYTE *)(v234 + 32);
                                        v242 = *(_QWORD *)(v234 + 24);
                                        v243 = HIDWORD(v242) & 0xFFFFF | ((int)(v242 >> 28) >> 24 << 20);
                                        if ((v241 & 1) != 0 && v243 + 3 == (_DWORD)v235)
                                          break;
                                        if ((v242 >> 60) - 3 <= 2 && v243 + 4 == (_DWORD)v235)
                                          break;
                                        v245 = v243 + 6;
                                        if (v245 <= (int)v235 && (int)((v242 & 0x3FFFFF) + v245 - 1) > (int)v235)
                                          break;
                                      }
                                      else if ((v235 & 0x80000000) == 0 && (_DWORD)v235 != 5)
                                      {
                                        break;
                                      }
LABEL_389:
                                      if (v225)
                                      {
                                        mayExit = JSC::DFG::mayExit(v521, (JSC::DFG::Graph *)v230, (JSC::DFG::Node *)&v544);
                                        v15 = (uint64_t)&v540;
                                        v14 = (unint64_t *)&v544;
                                        v8 = v228;
                                        v7 = v229;
                                        if (mayExit)
                                        {
                                          v232 = *(_QWORD *)(v230 + 8);
                                          v233 = (JSC::DFG::Graph **)(v232 & 0xFFFFFFFF8);
                                          if ((v232 & 1) != 0)
                                            v233 = (JSC::DFG::Graph **)*v233;
                                          v536 = (unint64_t)v233;
                                          WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::add(v553, (uint64_t *)&v536, (uint64_t)v530);
                                          v7 = v229;
                                          v8 = v228;
                                          v14 = (unint64_t *)&v544;
                                          v15 = (uint64_t)&v540;
                                        }
                                      }
                                      ++v227;
                                      v226 = v544;
                                      v13 = &v548;
                                      if (v227 <= v544)
                                        continue;
                                      if (!v553[0] || !*(_DWORD *)(v553[0] - 12))
                                        goto LABEL_434;
                                      v249 = *(unsigned int *)(v553[0] - 4);
                                      if ((_DWORD)v249)
                                      {
                                        v250 = 8 * v249;
                                        v251 = (_QWORD *)v553[0];
                                        while (*v251 == 1 || *v251 == -1)
                                        {
                                          ++v251;
                                          v250 -= 8;
                                          if (!v250)
                                            goto LABEL_434;
                                        }
                                      }
                                      else
                                      {
                                        v251 = (_QWORD *)v553[0];
                                      }
                                      v357 = v553[0] + 8 * v249;
                                      if ((_QWORD *)v357 == v251)
                                        goto LABEL_434;
                                      v358 = (_QWORD *)*v251;
                                      while (v358)
                                      {
                                        if (v358 == v225)
                                        {
                                          do
                                          {
                                            if (++v251 == (_QWORD *)v357)
                                              goto LABEL_434;
                                            v358 = (_QWORD *)*v251;
                                          }
                                          while (*v251 == 1 || (_QWORD *)((char *)v358 + 1) == 0);
                                          if (v251 == (_QWORD *)v357)
                                            goto LABEL_434;
                                        }
                                        else
                                        {
                                          v433 = v358[2];
                                          v358 = (_QWORD *)(v433 & 0xFFFFFFFF8);
                                          if ((v433 & 1) != 0)
                                            v358 = (_QWORD *)*v358;
                                          v7 = v229;
                                          v8 = v228;
                                          v14 = (unint64_t *)&v544;
                                          v15 = (uint64_t)&v540;
                                        }
                                      }
                                      break;
                                    default:
                                      LOBYTE(v536) = 0;
                                      v530[0] = (WTF *)&v548;
                                      v530[1] = (WTF *)&v536;
                                      v15 = (uint64_t)&v540;
                                      v14 = (unint64_t *)&v544;
                                      v7 = v229;
                                      v8 = v228;
                                      if (!(_BYTE)v536)
                                        goto LABEL_389;
                                      goto LABEL_476;
                                  }
                                  break;
                                }
LABEL_476:
                                if (v553[0])
                                {
                                  v270 = v7;
                                  v271 = v8;
                                  WTF::fastFree(v553[0] - 16, v13, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
                                  v15 = (uint64_t)&v540;
                                  v14 = (unint64_t *)&v544;
                                  v8 = v271;
                                  v7 = v270;
                                }
                                v6 = (unsigned __int8 *)g_config;
                                v13 = &v548;
                                goto LABEL_479;
                              }
LABEL_434:
                              v525 = 1;
                              v253 = v548;
                              v254 = *((unsigned __int16 *)v548 + 9);
                              if (v254 == 354)
                              {
                                v255 = 355;
                              }
                              else
                              {
                                if (v254 != 347)
                                {
                                  JSC::DFG::Graph::logAssertionFailure(v521, v548, (const WTF::CString *)"./dfg/DFGVarargsForwardingPhase.cpp", (const char *)0x162, "void JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::handleCandidate(BasicBlock *, unsigned int)", "bad node type");
                                  __break(0xC471u);
                                  JUMPOUT(0x198560D08);
                                }
                                v255 = 348;
                              }
                              v256 = v7;
                              *((_WORD *)v548 + 9) = v255;
                              *((_DWORD *)v253 + 14) = 9;
                              v530[0] = v521;
                              v530[1] = (WTF *)v532;
                              v531 = 8;
                              v257 = v22;
                              if (v226 <= v20)
                              {
LABEL_472:
                                JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)v530, (JSC::DFG::BasicBlock *)v17);
                                v269 = v530[1];
                                if (v532 != (_QWORD *)v530[1] && v530[1])
                                {
                                  v530[1] = 0;
                                  LODWORD(v531) = 0;
                                  WTF::fastFree((unint64_t)v269, v13, v267, v268, v2, v3, v4, v5);
                                }
                                v7 = v256;
                                v8 = v499;
                                v14 = (unint64_t *)&v544;
                                v15 = (uint64_t)&v540;
                                goto LABEL_476;
                              }
                              while (2)
                              {
                                if (v257 >= *(unsigned int *)(v17 + 220))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198561240);
                                }
                                v258 = *(_QWORD *)(*(_QWORD *)(v17 + 208) + 8 * v257);
                                v259 = *(unsigned __int16 *)(v258 + 18);
                                if (v259 <= 0xFA)
                                {
                                  if (*(unsigned __int16 *)(v258 + 18) > 0x97u)
                                  {
                                    if (*(unsigned __int16 *)(v258 + 18) <= 0xF4u)
                                    {
                                      if (v259 == 152)
                                      {
                                        v372 = v548;
                                        if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 32) & 0xFF00FFFFFFFFFFFFLL))
                                          goto LABEL_454;
                                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v533, *(const JSC::DFG::NodeOrigin **)(*(_QWORD *)(v17 + 208) + 8 * v257));
                                        ArgumentsArrayLength = JSC::DFG::emitCodeToGetArgumentsArrayLength((uint64_t *)v530, (uint64_t)v372, v257, (uint64_t)&v533, 0, v373, v374, v375);
                                        JSC::DFG::Node::convertToIdentityOn(v258, ArgumentsArrayLength);
                                        v384 = (JSC::DFG::NodeOrigin *)&v533;
                                      }
                                      else
                                      {
                                        if (v259 != 158)
                                          goto LABEL_454;
                                        if (*(_BYTE *)(v258 + 72) != 12)
                                          goto LABEL_454;
                                        v427 = v548;
                                        if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 24) & 0xFF00FFFFFFFFFFFFLL))
                                          goto LABEL_454;
                                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v529, *(const JSC::DFG::NodeOrigin **)(*(_QWORD *)(v17 + 208) + 8 * v257));
                                        v431 = JSC::DFG::emitCodeToGetArgumentsArrayLength((uint64_t *)v530, (uint64_t)v427, v257, (uint64_t)v529, 0, v428, v429, v430);
                                        JSC::DFG::Node::convertToIdentityOn(v258, v431);
                                        v384 = (JSC::DFG::NodeOrigin *)v529;
                                      }
                                      JSC::DFG::NodeOrigin::~NodeOrigin(v384, v377, v378, v379, v380, v381, v382, v383);
                                      goto LABEL_454;
                                    }
                                    if (v259 == 245)
                                    {
                                      if (v548 == (JSC::DFG::Node *)(*(_QWORD *)(v258 + 40) & 0xFF00FFFFFFFFFFFFLL))
                                      {
                                        v260 = 246;
                                        goto LABEL_461;
                                      }
                                    }
                                    else if (v259 == 247
                                           && v548 == (JSC::DFG::Node *)(*(_QWORD *)(v258 + 40) & 0xFF00FFFFFFFFFFFFLL))
                                    {
                                      v260 = 248;
                                      goto LABEL_461;
                                    }
LABEL_454:
                                    v67 = v257++ >= v544;
                                    if (v67)
                                      goto LABEL_472;
                                    continue;
                                  }
                                  if (v259 == 98)
                                  {
                                    v262 = v548;
                                    if (v548 == (JSC::DFG::Node *)(*(_QWORD *)(v258 + 24) & 0xFF00FFFFFFFFFFFFLL))
                                    {
                                      v263 = *(_QWORD *)v258;
                                      if ((*(_QWORD *)v258 & 1) != 0)
                                      {
                                        v515 = v548;
                                        v447 = *(_QWORD *)(v263 & 0xFFFFFFFF8);
                                        if ((v263 & 2) != 0
                                          || ((v448 = *(unsigned int *)((v263 & 0xFFFFFFFF8) + 8),
                                               (_DWORD)v448 != 0x3FFFFFFF)
                                            ? (v449 = (_DWORD)v448 == -1)
                                            : (v449 = 1),
                                              v449))
                                        {
                                          v450 = 2;
                                        }
                                        else if (v448 >> 28)
                                        {
                                          v470 = WTF::fastMalloc((WTF *)0x10);
                                          *(_QWORD *)v470 = v447;
                                          *(_DWORD *)(v470 + 8) = v448;
                                          v450 = 1;
                                          v447 = v470;
                                        }
                                        else
                                        {
                                          v450 = *(_QWORD *)(v263 & 0xFFFFFFFF8);
                                          v447 = v448 << 36;
                                        }
                                        v263 = v447 | v450;
                                        v262 = v515;
                                      }
                                      v536 = v263;
                                      v264 = *(_QWORD *)(v258 + 8);
                                      if ((v264 & 1) != 0)
                                      {
                                        v516 = v262;
                                        v451 = *(_QWORD *)(v264 & 0xFFFFFFFF8);
                                        if ((v264 & 2) != 0
                                          || ((v452 = *(unsigned int *)((v264 & 0xFFFFFFFF8) + 8),
                                               (_DWORD)v452 != 0x3FFFFFFF)
                                            ? (v453 = (_DWORD)v452 == -1)
                                            : (v453 = 1),
                                              v453))
                                        {
                                          v454 = 2;
                                        }
                                        else if (v452 >> 28)
                                        {
                                          v471 = WTF::fastMalloc((WTF *)0x10);
                                          *(_QWORD *)v471 = v451;
                                          *(_DWORD *)(v471 + 8) = v452;
                                          v454 = 1;
                                          v451 = v471;
                                        }
                                        else
                                        {
                                          v454 = *(_QWORD *)(v264 & 0xFFFFFFFF8);
                                          v451 = v452 << 36;
                                        }
                                        v264 = v451 | v454;
                                        v262 = v516;
                                      }
                                      v537 = v264;
                                      LOWORD(v538) = *(_WORD *)(v258 + 16);
                                      v265 = JSC::DFG::emitCodeToGetArgumentsArrayLength((uint64_t *)v530, (uint64_t)v262, v257, (uint64_t)&v536, 1, v3, v4, v5);
                                      JSC::DFG::Node::convertToIdentityOn(v258, v265);
                                      if ((v537 & 1) != 0 && (v537 & 0xFFFFFFFF8) != 0)
                                        WTF::fastFree(v537 & 0xFFFFFFFF8, v266, (uint64_t)v14, v15, v2, v3, v4, v5);
                                      if ((v536 & 1) != 0 && (v536 & 0xFFFFFFFF8) != 0)
                                        WTF::fastFree(v536 & 0xFFFFFFFF8, v266, (uint64_t)v14, v15, v2, v3, v4, v5);
                                    }
                                    goto LABEL_454;
                                  }
                                  if (v259 == 99)
                                  {
                                    if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 32) & 0xFF00FFFFFFFFFFFFLL))
                                      goto LABEL_454;
                                    v261 = 100;
                                    goto LABEL_464;
                                  }
                                  if (v259 != 138
                                    || v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 24) & 0xFF00FFFFFFFFFFFFLL))
                                  {
                                    goto LABEL_454;
                                  }
                                  *(_QWORD *)(v258 + 24) = 0;
                                }
                                else
                                {
                                  if (v259 - 420 >= 7)
                                  {
                                    if (v259 != 371)
                                    {
                                      if (v259 == 251
                                        && v548 == (JSC::DFG::Node *)(*(_QWORD *)(v258 + 40) & 0xFF00FFFFFFFFFFFFLL))
                                      {
                                        v260 = 252;
LABEL_461:
                                        *(_WORD *)(v258 + 18) = v260;
                                        *(_DWORD *)(v258 + 56) = 9;
                                      }
                                      goto LABEL_454;
                                    }
                                    if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 40) & 0xFF00FFFFFFFFFFFFLL))
                                      goto LABEL_454;
                                    v261 = 372;
LABEL_464:
                                    *(_WORD *)(v258 + 18) = v261;
                                    *(_DWORD *)(v258 + 56) = 8;
                                    goto LABEL_454;
                                  }
                                  if (v548 != (JSC::DFG::Node *)(*(_QWORD *)(v258 + 24) & 0xFF00FFFFFFFFFFFFLL))
                                    goto LABEL_454;
                                }
                                break;
                              }
                              JSC::DFG::Node::remove((JSC::DFG::Node *)v258, v521, v14, v15, v2, v3, v4, v5);
                              goto LABEL_454;
                            }
                            goto LABEL_18;
                          }
                          if (*(_QWORD *)v489)
                            v134 = **(_DWORD **)v489;
                          else
                            v134 = 0;
                          v501 = v134 + v493 + 5;
                          v505 = v493 + 5;
                          if (v493 + 5 < (int)v501)
                          {
                            v135 = v493 + 5;
                            do
                            {
                              ++v135;
                              --v134;
                            }
                            while (v134);
                          }
                          v110 = *(_QWORD *)(v489 + 16);
                          v111 = 1;
                          v497 = (unint64_t *)(v489 + 16);
                          v108 = v479;
                          v112 = v475;
                          continue;
                        }
                        v209 = v133 >> 36;
                      }
                      v208 = v209 & 3;
                      if ((v209 & 3) == 0)
                        goto LABEL_198;
                      v209 = v209;
                    }
                    v141 = (unsigned __int8 *)(**((_QWORD **)v485[7] + 10) + (v209 >> 2));
                    v142 = *v141;
                    if ((v142 | 2) == 0x82)
                      v142 = v141[1];
                    switch(v142)
                    {
                      case 0:
                      case 1:
                      case 3:
                        if (v208 == 1)
                          goto LABEL_217;
                        goto LABEL_198;
                      case 2:
LABEL_217:
                        v143 = v489;
                        if (v489)
                          v143 = *(_DWORD *)(v489 + 24) >> 22;
                        if (v529[0] != (v143 | 0x200000000))
                        {
                          v144 = (_QWORD *)(2 * v552);
                          v281 = v552 < 0 ? 63 : *v144;
                          v145 = v550 + v143;
                          if (v281 <= v145)
                            goto LABEL_490;
                          v146 = v144 + 1;
                          v147 = &v552;
                          if (v552 >= 0)
                            v147 = v146;
                          if (((*(unint64_t *)((char *)v147 + ((v145 >> 3) & 0x1FFFFFF8)) >> (v550 + v143)) & 1) == 0)
                          {
LABEL_490:
                            v276 = v7;
                            v277 = v8;
                            v278 = v2;
                            v2 = v278;
                            v36 = v507;
                            v35 = v514;
                            v15 = (uint64_t)&v540;
                            v14 = (unint64_t *)&v544;
                            v13 = &v548;
                            v8 = v277;
                            v7 = v276;
                          }
                        }
                        break;
                      case 4:
                        goto LABEL_198;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198560FC0);
                    }
                    goto LABEL_198;
                  }
                }
                break;
              }
              v400 = 2;
              goto LABEL_720;
            }
            v480 = v34;
            if ((v35 & 1) != 0)
            {
              v439 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
              if ((v35 & 2) != 0
                || ((v440 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v440 != 0x3FFFFFFF)
                  ? (v441 = (_DWORD)v440 == -1)
                  : (v441 = 1),
                    v441))
              {
                v442 = 2;
              }
              else if (v440 >> 28)
              {
                v468 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v468 = v439;
                *(_DWORD *)(v468 + 8) = v440;
                v442 = 1;
                v439 = v468;
              }
              else
              {
                v442 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
                v439 = v440 << 36;
              }
              v486 = v439 | v442;
              if (((v439 | v442) & 1) != 0)
              {
                v443 = *(_QWORD *)(v486 & 0xFFFFFFFF8);
                if ((v486 & 2) != 0
                  || ((v444 = *(unsigned int *)((v486 & 0xFFFFFFFF8) + 8), (_DWORD)v444 != 0x3FFFFFFF)
                    ? (v445 = (_DWORD)v444 == -1)
                    : (v445 = 1),
                      v445))
                {
                  v446 = 2;
                }
                else if (v444 >> 28)
                {
                  v469 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v469 = v443;
                  *(_DWORD *)(v469 + 8) = v444;
                  v446 = 1;
                  v443 = v469;
                }
                else
                {
                  v446 = *(_QWORD *)(v486 & 0xFFFFFFFF8);
                  v443 = v444 << 36;
                }
                v494 = 0;
                v174 = v443 | v446;
              }
              else
              {
                v494 = 1;
                v174 = v439 | v442;
              }
              v34 = v480;
            }
            else
            {
              v494 = 1;
              v486 = v35;
              v174 = v35;
            }
            v175 = 0;
            v176 = (JSC::UnlinkedCodeBlock ***)((char *)v34 + 40);
            v530[0] = (WTF *)v174;
            v177 = v530;
            v498 = 0x3FFFFFFF;
            v178 = v174;
            v179 = 0x3FFFFFFF;
            v490 = (JSC::UnlinkedCodeBlock ***)((char *)v34 + 40);
            while (2)
            {
              v180 = v178 & 0xFFFFFFFF8;
              if ((v178 & 1) != 0)
                v180 = *(_QWORD *)v180;
              v506 = v177;
              v508 = v180;
              if (v180)
              {
                v307 = *(_QWORD *)(v180 + 24);
                v513 = HIDWORD(v307) & 0xFFFFF | ((int)(v307 >> 28) >> 24 << 20);
                if ((*(_BYTE *)(v180 + 32) & 1) != 0)
                {
                  v34 = v480;
                  v176 = v490;
                  v180 = v508;
                  v308 = (*(_QWORD *)(v508 + 24) >> 60) | (16 * *(_BYTE *)(v508 + 32));
                }
                else
                {
                  v308 = (v307 >> 60) | (16 * *(_BYTE *)(v180 + 32));
                }
                if ((v308 & 0xFu) - 3 <= 2)
                {
                  v309 = *((unsigned int *)v533 + 3);
                  if ((_DWORD)v309)
                  {
                    v401 = *v533;
                    if ((v513 + 4) >> 31 == 2)
                    {
                      v402 = 0;
                      v472 = (char *)v401 + 4;
                      while (*(_QWORD *)(v472 - 4) != ((v513 + 4) | 0x200000000))
                      {
                        ++v402;
                        v472 += 8;
                        if (v309 == v402)
                          goto LABEL_564;
                      }
                    }
                    else
                    {
                      v402 = 0;
                      v403 = (char *)v401 + 4;
                      while (*(_QWORD *)(v403 - 4) != __PAIR64__((v513 + 4) >> 31, v513 + 4))
                      {
                        ++v402;
                        v403 += 8;
                        if (v309 == v402)
                          goto LABEL_564;
                      }
                    }
                    v401[v402] = v401[v309 - 1];
                    v404 = *((_DWORD *)v533 + 3);
                    if (!v404)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198561208);
                    }
                    *((_DWORD *)v533 + 3) = v404 - 1;
                    *v534 = *v535;
                  }
LABEL_564:
                  v176 = v490;
                  v180 = v508;
                }
              }
              else
              {
                v513 = 0;
              }
              v181 = (JSC::UnlinkedCodeBlock ***)(v180 + 8);
              if (!v180)
                v181 = v176;
              v502 = *v181;
              v182 = JSC::DFG::Graph::livenessFor(v34, *v181, (uint64_t)v14, v15, v2, v3, v4, v5);
              v183 = v506;
              v184 = *v506;
              if ((*v506 & 2) != 0)
              {
                if ((v184 & 1) == 0)
                {
                  v185 = 0xFFFFFFFFLL;
LABEL_306:
                  v14 = (unint64_t *)v502;
                  goto LABEL_307;
                }
                v477 = v182;
                v436 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
                v483 = 0xFFFFFFFFLL;
              }
              else
              {
                if ((v184 & 1) == 0)
                {
                  v185 = v184 >> 36;
                  goto LABEL_306;
                }
                v477 = v182;
                v434 = v184 & 0xFFFFFFFF8;
                v435 = *(unsigned int *)(v434 + 8);
                v436 = *(_QWORD *)v434;
                v483 = v435;
                if ((_DWORD)v435 != -1 && v435 != 0x3FFFFFFF)
                {
                  if (v435 >> 28)
                  {
                    v467 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v467 = v436;
                    *(_DWORD *)(v467 + 8) = v483;
                    v438 = 1;
                    v436 = v467;
                  }
                  else
                  {
                    v438 = *(_QWORD *)v434;
                    v436 = v435 << 36;
                  }
LABEL_800:
                  v184 = v436 | v438;
                  v182 = v477;
                  v183 = v506;
                  v14 = (unint64_t *)v502;
                  v185 = v483;
LABEL_307:
                  if ((v175 & 1) == 0)
                  {
LABEL_308:
                    v186 = (v185 & 3) + (v185 >> 2);
                    v187 = *(unsigned int **)v182;
                    if (**(unsigned int **)v182 <= v186)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198560DB0);
                    }
                    v188 = v184 & 1;
                    goto LABEL_310;
                  }
                  v188 = v184 & 1;
                  if ((v184 & 2) != 0)
                  {
                    v314 = (_QWORD *)(v184 & 0xFFFFFFFF8);
                    LODWORD(v313) = -1;
                    v312 = v490;
                    if ((v184 & 1) == 0)
                      goto LABEL_573;
                  }
                  else
                  {
                    v312 = v490;
                    if ((v184 & 1) == 0)
                    {
                      v313 = v184 >> 36;
                      v314 = (_QWORD *)(v184 & 0xFFFFFFFF8);
LABEL_573:
                      if (v314)
                        v315 = (JSC::UnlinkedCodeBlock ***)(v314 + 1);
                      else
                        v315 = v312;
                      v316 = (unsigned __int8 *)(**((_QWORD **)(*v315)[7] + 10)
                                               + ((unint64_t)v313 >> 2));
                      v317 = *v316;
                      if ((v317 | 2) == 0x82)
                        v317 = v316[1];
                      if (v317 > 3 || v317 == 2)
                        goto LABEL_308;
                      v186 = (v185 & 3) + (v185 >> 2);
                      v187 = (unsigned int *)*((_QWORD *)v182 + 1);
                      if (*v187 <= v186)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198561228);
                      }
                      v183 = v506;
                      v14 = (unint64_t *)v502;
LABEL_310:
                      if (v188 && (v184 & 0xFFFFFFFF8) != 0)
                      {
                        WTF::fastFree(v184 & 0xFFFFFFFF8, v183, (uint64_t)v14, v15, v2, v3, v4, v5);
                        v14 = (unint64_t *)v502;
                        v183 = v506;
                      }
                      v189 = *((unsigned int *)v14 + 5);
                      v190 = v513;
                      v191 = v498;
                      while ((_DWORD)v189)
                      {
                        v192 = (v190 - v189--);
                        v193 = (int)v192 >= v179 && (int)v192 < v191;
                        if (!v193
                          && ((*(_DWORD *)(*(_QWORD *)&v187[4 * v186 + 2] + 4 * (v189 >> 5)) >> v189) & 1) != 0)
                        {
                          v194 = *((unsigned int *)v533 + 3);
                          if ((_DWORD)v194)
                          {
                            v195 = v192 | ((unint64_t)(v192 >> 31) << 32);
                            v196 = *v533;
                            if (HIDWORD(v195) == 2)
                            {
                              v197 = 0;
                              v465 = (_DWORD *)v196 + 1;
                              while (*v465 != 2 || *(v465 - 1) != (_DWORD)v195)
                              {
                                ++v197;
                                v465 += 2;
                                v190 = v513;
                                v191 = v498;
                                v183 = v506;
                                v14 = (unint64_t *)v502;
                                if (v194 == v197)
                                  goto LABEL_317;
                              }
                              v190 = v513;
                              v191 = v498;
                              v183 = v506;
                              v14 = (unint64_t *)v502;
                            }
                            else
                            {
                              v197 = 0;
                              v198 = (char *)v196 + 4;
                              while (*(_QWORD *)(v198 - 4) != v195)
                              {
                                ++v197;
                                v198 += 8;
                                if (v194 == v197)
                                  goto LABEL_317;
                              }
                            }
                            v196[v197] = v196[v194 - 1];
                            v466 = *((_DWORD *)v533 + 3);
                            if (!v466)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198561338);
                            }
                            *((_DWORD *)v533 + 3) = v466 - 1;
                            *v534 = *v535;
                          }
                        }
LABEL_317:
                        ;
                      }
                      v199 = *v183;
                      if ((*v183 & 2) != 0)
                      {
                        LODWORD(v183) = -1;
                        v6 = (unsigned __int8 *)g_config;
                        v200 = v508;
                      }
                      else
                      {
                        v6 = (unsigned __int8 *)g_config;
                        v200 = v508;
                        if ((v199 & 1) != 0)
                        {
                          v183 = (_QWORD *)*(unsigned int *)((v199 & 0xFFFFFFFF8) + 8);
                          if ((v183 & 3) == 0)
                            goto LABEL_329;
                        }
                        else
                        {
                          if ((v199 & 0x3000000000) == 0)
                          {
LABEL_329:
                            if (!v200)
                            {
                              if ((v174 & 1) != 0 && (v174 & 0xFFFFFFFF8) != 0)
                                WTF::fastFree(v174 & 0xFFFFFFFF8, v183, (uint64_t)v14, v15, v2, v3, v4, v5);
                              if (!*((_DWORD *)v480 + 15))
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198561248);
                              }
                              v205 = *(unsigned int *)(**((_QWORD **)v480 + 6) + 88);
                              if ((_DWORD)v205)
                              {
                                v206 = v205 - 1;
                                do
                                {
                                  v207 = v206;
                                  --v206;
                                }
                                while (v207);
                              }
                              v7 = v503;
                              v8 = v499;
                              v13 = &v548;
                              v14 = (unint64_t *)&v544;
                              v15 = (uint64_t)&v540;
                              v35 = v514;
                              if ((v494 & 1) == 0)
                              {
                                v330 = v486 & 0xFFFFFFFF8;
                                if ((v486 & 0xFFFFFFFF8) != 0)
                                  goto LABEL_610;
                              }
                              goto LABEL_42;
                            }
                            v310 = *(int **)v200;
                            if (*(_QWORD *)v200)
                            {
                              v311 = (WTF *)v174;
                              v202 = *v310;
                            }
                            else
                            {
                              v311 = (WTF *)v174;
                              v202 = 0;
                            }
                            v179 = v190 + 5;
                            v498 = v202 + v190 + 5;
                            if (v179 < v202 + v179)
                            {
                              v201 = v190 + 5;
                              do
                              {
                                ++v201;
                                --v202;
                              }
                              while (v202);
                            }
                            v177 = (WTF **)(v508 + 16);
                            v178 = *(_QWORD *)(v508 + 16);
                            v175 = 1;
                            v34 = v480;
                            v174 = (uint64_t)v311;
                            v176 = v490;
                            continue;
                          }
                          v183 = (_QWORD *)(v199 >> 36);
                        }
                      }
                      v319 = JSC::tmpLivenessForCheckpoint((uint64_t)v14, v183);
                      v190 = v513;
                      if (v319)
                      {
                        v204 = v319;
                        do
                        {
                          v203 = __clz(__rbit32(v204));
                          if (v200)
                            v203 += *(_DWORD *)(v200 + 24) >> 22;
                          v204 &= v204 - 1;
                          v190 = v513;
                        }
                        while (v204);
                      }
                      goto LABEL_329;
                    }
                    v314 = (_QWORD *)(v184 & 0xFFFFFFFF8);
                    LODWORD(v313) = *(_DWORD *)((v184 & 0xFFFFFFFF8) + 8);
                  }
                  v314 = (_QWORD *)*v314;
                  goto LABEL_573;
                }
              }
              break;
            }
            v438 = 2;
            goto LABEL_800;
          }
LABEL_29:
          v29 = v548;
          v30 = *(_QWORD *)(v26 + 24);
          if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
          {
            v158 = *(_DWORD *)(v26 + 32);
            v159 = (v158 + v30);
            if (v159 > v30)
            {
              v160 = *((_DWORD *)v521 + 41);
              v67 = v160 >= v30;
              v161 = v160 - v30;
              if (!v67)
                v161 = 0;
              if (v161 <= v158 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1985611F0);
              }
              v162 = 0;
              v163 = v159 - v30;
              v164 = (uint64_t *)(*((_QWORD *)v521 + 19) + 8 * v30);
              do
              {
                v165 = *v164++;
                v166 = (v165 & 0xFF00FFFFFFFFFFFFLL) != 0;
                v167 = v548 == (JSC::DFG::Node *)(v165 & 0xFF00FFFFFFFFFFFFLL) && v166;
                v162 |= v167;
                --v163;
              }
              while (v163);
              if ((_BYTE)v162)
                goto LABEL_479;
            }
            goto LABEL_31;
          }
          v31 = v30 & 0xFF00FFFFFFFFFFFFLL;
          if (!v31)
            goto LABEL_31;
          goto LABEL_270;
        }
        v71 = v6;
        LOBYTE(v533) = 0;
        v72 = v521;
        v530[0] = (WTF *)&v548;
        v530[1] = (WTF *)&v544;
        v531 = (uint64_t)&v540;
        v532[0] = &v533;
        v73 = *(_QWORD *)(v26 + 24);
        if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
        {
          v419 = *(_QWORD *)(v26 + 32);
          if ((int)v419 + (int)v73 > v73)
          {
            v420 = *(_QWORD *)(v26 + 24);
            do
            {
              if (v420 >= *((unsigned int *)v72 + 41))
              {
                __break(0xC471u);
                JUMPOUT(0x1985611F8);
              }
              v421 = *(_QWORD *)(*((_QWORD *)v72 + 19) + 8 * v420);
              if ((v421 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v73 = *(_QWORD *)(v26 + 24);
                v419 = *(_QWORD *)(v26 + 32);
              }
              ++v420;
              v7 = v503;
              v8 = v499;
              v13 = &v548;
              v14 = (unint64_t *)&v544;
              v15 = (uint64_t)&v540;
            }
            while (v420 < (v73 + v419));
          }
        }
        else if ((v73 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if (v548 == (JSC::DFG::Node *)(v73 & 0xFF00FFFFFFFFFFFFLL))
          {
            v544 = v37;
            if ((v73 & 0x1000000000000) == 0)
            {
              v422 = (v73 >> 50) & 0x3F;
              if ((_DWORD)v422)
              {
                if (v422 > 0x34 || ((1 << v422) & 0x12400001800284) == 0)
                {
                  v424 = v7;
                  v425 = v8;
                  v426 = JSC::DFG::alreadyChecked(v422);
                  v15 = (uint64_t)&v540;
                  v14 = (unint64_t *)&v544;
                  v13 = &v548;
                  v8 = v425;
                  v7 = v424;
                  if ((v426 & 1) == 0)
                    LOBYTE(v533) = 1;
                }
              }
            }
          }
          v288 = *(_QWORD *)(v26 + 32);
          if ((v288 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v289 = v8;
            v290 = v7;
            if (v548 == (JSC::DFG::Node *)(v288 & 0xFF00FFFFFFFFFFFFLL))
            {
              v544 = v540;
              if ((v288 & 0x1000000000000) == 0)
              {
                v459 = (v288 >> 50) & 0x3F;
                if ((_DWORD)v459)
                {
                  v460 = v459 > 0x34 || ((1 << v459) & 0x12400001800284) == 0;
                  if (v460 && (JSC::DFG::alreadyChecked(v459) & 1) == 0)
                    LOBYTE(v533) = 1;
                }
              }
            }
            v291 = *(_QWORD *)(v26 + 40);
            v7 = v290;
            v8 = v289;
            v13 = &v548;
            v14 = (unint64_t *)&v544;
            v15 = (uint64_t)&v540;
            if ((v291 & 0xFF00FFFFFFFFFFFFLL) != 0 && v548 == (JSC::DFG::Node *)(v291 & 0xFF00FFFFFFFFFFFFLL))
            {
              v544 = v540;
              if ((v291 & 0x1000000000000) == 0)
              {
                v292 = (v291 >> 50) & 0x3F;
                if ((_DWORD)v292)
                {
                  if (v292 > 0x34 || ((1 << v292) & 0x12400001800284) == 0)
                  {
                    v294 = JSC::DFG::alreadyChecked(v292);
                    v15 = (uint64_t)&v540;
                    v14 = (unint64_t *)&v544;
                    v13 = &v548;
                    v8 = v289;
                    v7 = v290;
                    if ((v294 & 1) == 0)
                    {
                      v6 = v71;
                      goto LABEL_479;
                    }
                  }
                }
              }
            }
          }
        }
        v6 = v71;
        if (!(_BYTE)v533)
          goto LABEL_31;
LABEL_479:
        v272 = (unint64_t)v541;
        v12 = v473;
        v11 = v474;
        if (v473 != v541 && v541 != 0)
        {
          v541 = 0;
          LODWORD(v542) = 0;
          v413 = v7;
          v414 = v8;
          WTF::fastFree(v272, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
          v15 = (uint64_t)&v540;
          v14 = (unint64_t *)&v544;
          v13 = &v548;
          v8 = v414;
          v12 = v473;
          v11 = v474;
          v7 = v413;
        }
        v274 = (unint64_t)v545;
        if (v11 != v545 && v545 != 0)
        {
          v545 = 0;
          LODWORD(v546) = 0;
          v415 = v7;
          v416 = v11;
          v417 = v12;
          v418 = v8;
          WTF::fastFree(v274, &v548, (uint64_t)&v544, (uint64_t)&v540, v2, v3, v4, v5);
          v15 = (uint64_t)&v540;
          v14 = (unint64_t *)&v544;
          v13 = &v548;
          v8 = v418;
          v12 = v417;
          v11 = v416;
          v7 = v415;
        }
        v18 = *(_DWORD *)(v17 + 220);
LABEL_16:
        v19 = v25;
        v21 = v22 + 1;
        v20 = v25;
        if (v18 <= v25)
        {
          v16 = *((_DWORD *)v7 + 15);
          goto LABEL_356;
        }
      }
      if (*(unsigned __int16 *)(v26 + 18) <= 0x172u)
      {
        if (*(unsigned __int16 *)(v26 + 18) <= 0x9Du)
        {
          if (v27 - 98 < 2)
          {
            v155 = *(_QWORD *)(v26 + 24);
            if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
            {
              v333 = *(_DWORD *)(v26 + 32);
              v334 = (v333 + v155);
              if (v334 <= v155)
                goto LABEL_31;
              v335 = *((_DWORD *)v521 + 41);
              v67 = v335 >= v155;
              v336 = v335 - v155;
              if (!v67)
                v336 = 0;
              if (v336 <= v333 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1985611E8);
              }
              v337 = 0;
              v338 = v334 - v155;
              v339 = (uint64_t *)(*((_QWORD *)v521 + 19) + 8 * v155);
              do
              {
                v340 = *v339++;
                v341 = (v340 & 0xFF00FFFFFFFFFFFFLL) != 0;
                v342 = v548 == (JSC::DFG::Node *)(v340 & 0xFF00FFFFFFFFFFFFLL) && v341;
                v337 |= v342;
                --v338;
              }
              while (v338);
              if (!v337)
                goto LABEL_31;
            }
            else
            {
              v156 = (JSC::DFG::Node *)(v155 & 0xFF00FFFFFFFFFFFFLL);
              if (!v156)
                goto LABEL_31;
              v157 = v548 == v156;
              if ((*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
                && (v548 != v156
                  ? (v279 = v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL))
                  : (v279 = 1),
                    !v279 ? (v157 = 0) : (v157 = 1),
                    (*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0))
              {
                v280 = v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) || v157;
                if ((v280 & 1) == 0)
                  goto LABEL_31;
              }
              else if (!v157)
              {
                goto LABEL_31;
              }
            }
            v544 = v37;
            goto LABEL_31;
          }
          if (v27 != 152)
          {
            if (v27 == 138)
            {
              v68 = *(_QWORD *)(v26 + 24);
              v69 = (JSC::DFG::Node *)(v68 & 0xFF00FFFFFFFFFFFFLL);
              v70 = v548 == (JSC::DFG::Node *)(v68 & 0xFF00FFFFFFFFFFFFLL);
              if (v548 != (JSC::DFG::Node *)(v68 & 0xFF00FFFFFFFFFFFFLL) || *((_WORD *)v548 + 9) != 354)
              {
                if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
                {
                  v362 = *(_DWORD *)(v26 + 32);
                  v363 = (v362 + v68);
                  if (v363 > v68)
                  {
                    v364 = *((_DWORD *)v521 + 41);
                    v67 = v364 >= v68;
                    v365 = v364 - v68;
                    if (!v67)
                      v365 = 0;
                    if (v365 <= v362 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1985611D8);
                    }
                    v366 = 0;
                    v367 = v363 - v68;
                    v368 = (uint64_t *)(*((_QWORD *)v521 + 19) + 8 * v68);
                    do
                    {
                      v369 = *v368++;
                      v370 = (v369 & 0xFF00FFFFFFFFFFFFLL) != 0;
                      v371 = v548 == (JSC::DFG::Node *)(v369 & 0xFF00FFFFFFFFFFFFLL) && v370;
                      v366 |= v371;
                      --v367;
                    }
                    while (v367);
                    v13 = &v548;
                    v14 = (unint64_t *)&v544;
                    v15 = (uint64_t)&v540;
                    if (v366)
                      goto LABEL_479;
                  }
                }
                else if (v69)
                {
                  if ((*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
                    && (v548 != v69
                      ? (v286 = v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL))
                      : (v286 = 1),
                        !v286 ? (v70 = 0) : (v70 = 1),
                        (*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0))
                  {
                    v287 = v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) || v70;
                    if ((v287 & 1) != 0)
                      goto LABEL_479;
                  }
                  else if (v70)
                  {
                    goto LABEL_479;
                  }
                }
                goto LABEL_31;
              }
              v544 = v37;
              v306 = HIDWORD(v546);
              if (HIDWORD(v546) == (_DWORD)v546)
              {
                v391 = v7;
                v392 = v8;
                WTF::Vector<JSC::DFG::Node *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>((uint64_t)&v545, (unint64_t)&v539);
                goto LABEL_710;
              }
              v32 = HIDWORD(v546) + 1;
              v545[HIDWORD(v546)] = (JSC::DFG::Node *)v26;
              HIDWORD(v546) = v306 + 1;
              goto LABEL_32;
            }
            goto LABEL_29;
          }
          v168 = *(_QWORD *)(v26 + 24);
          v31 = v168 & 0xFF00FFFFFFFFFFFFLL;
          if (*(_WORD *)((v168 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 138)
          {
            v295 = HIDWORD(v546);
            if (HIDWORD(v546))
            {
              v296 = v545;
              while (*v296 != (JSC::DFG::Node *)v31)
              {
                ++v296;
                --v295;
                v13 = &v548;
                v14 = (unint64_t *)&v544;
                v15 = (uint64_t)&v540;
                if (!v295)
                  goto LABEL_268;
              }
              v13 = &v548;
              v14 = (unint64_t *)&v544;
              v15 = (uint64_t)&v540;
              if (v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL)
                && **(_DWORD **)(v26 + 72) == 64)
              {
                v544 = v37;
                goto LABEL_33;
              }
            }
          }
LABEL_268:
          v29 = v548;
          if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
          {
            v347 = *(_DWORD *)(v26 + 32);
            v348 = (v347 + v168);
            if (v348 > v168)
            {
              v349 = *((_DWORD *)v521 + 41);
              v67 = v349 >= v168;
              v350 = v349 - v168;
              if (!v67)
                v350 = 0;
              if (v350 <= v347 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1985611E0);
              }
              v351 = 0;
              v352 = v348 - v168;
              v353 = (uint64_t *)(*((_QWORD *)v521 + 19) + 8 * v168);
              do
              {
                v354 = *v353++;
                v355 = (v354 & 0xFF00FFFFFFFFFFFFLL) != 0;
                v356 = v548 == (JSC::DFG::Node *)(v354 & 0xFF00FFFFFFFFFFFFLL) && v355;
                v351 |= v356;
                --v352;
              }
              while (v352);
              if (v351)
                goto LABEL_479;
            }
            goto LABEL_31;
          }
          if (!v31)
            goto LABEL_31;
LABEL_270:
          v169 = v29 == (JSC::DFG::Node *)v31;
          if ((*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v29 != (JSC::DFG::Node *)v31
              ? (v170 = v29 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL))
              : (v170 = 1),
                !v170 ? (v169 = 0) : (v169 = 1),
                (*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0))
          {
            v171 = v29 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 40) & 0xFF00FFFFFFFFFFFFLL) || v169;
            if ((v171 & 1) != 0)
              goto LABEL_479;
          }
          else if (v169)
          {
            goto LABEL_479;
          }
          goto LABEL_31;
        }
        if (v27 - 245 > 6 || ((1 << (v27 + 11)) & 0x45) == 0)
        {
          if (v27 == 158)
          {
            v388 = v8;
            v389 = v7;
            if (*(_BYTE *)(v26 + 72) == 12
              && v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 24) & 0xFF00FFFFFFFFFFFFLL)
              && *((_WORD *)v548 + 9) == 347)
            {
              v544 = v37;
              v13 = &v548;
              v14 = (unint64_t *)&v544;
              v15 = (uint64_t)&v540;
            }
            else
            {
              v7 = v389;
              v8 = v388;
              v13 = &v548;
              v14 = (unint64_t *)&v544;
              v15 = (uint64_t)&v540;
              if ((v390 & 1) != 0)
                goto LABEL_479;
            }
            goto LABEL_31;
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (v27 - 420 < 7)
          goto LABEL_31;
        if (v27 != 371)
          goto LABEL_29;
      }
      if (v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 24) & 0xFF00FFFFFFFFFFFFLL)
        || v548 == (JSC::DFG::Node *)(*(_QWORD *)(v26 + 32) & 0xFF00FFFFFFFFFFFFLL))
      {
        goto LABEL_479;
      }
      goto LABEL_31;
    }
LABEL_356:
    v9 = (v9 + 1);
    if (v16 > v9)
    {
      while (!*(_QWORD *)(*((_QWORD *)v7 + 6) + 8 * v9))
      {
        if (v16 == ++v9)
        {
          LODWORD(v9) = v16;
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v9);
  if (v525)
  {
    if (v6[810] | v6[803]
      || (v6[811] ? (v222 = (*(_DWORD *)(*((_QWORD *)v521 + 3) + 16) & 0xFFFFFFFE) == 4) : (v222 = 0),
          !v222 ? (v223 = v6[812] == 0) : (v223 = 0),
          !v223))
    {
      *(_OWORD *)v530 = v522;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v521 + 1088, "Phase ", (uint64_t)v530, " changed the IR.\n", "\n");
    }
    v10 = 1;
  }
  else
  {
LABEL_362:
    v10 = 0;
  }
LABEL_363:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v526);
  if (v6[817] && !v523)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v517, (uint64_t)v213, v214, v215, v216, v217, v218, v219);
  v220 = v524;
  v524 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 1)
      WTF::fastFree((unint64_t)v220, v213, v214, v215, v216, v217, v218, v219);
    else
      --*(_DWORD *)v220;
  }
  return v10;
}

uint64_t JSC::DFG::VariableAccessData::flushFormat(JSC::DFG::VariableAccessData *this)
{
  JSC::DFG::VariableAccessData *v2;
  JSC::DFG::VariableAccessData *v3;
  uint64_t v4;
  JSC::DFG::VariableAccessData *v5;
  JSC::DFG::VariableAccessData *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 40) || !*((_BYTE *)this + 43))
    return 6;
  if (*((_DWORD *)this + 14) == 1)
    return 3;
  v2 = this;
  do
  {
    v3 = v2;
    v2 = *(JSC::DFG::VariableAccessData **)v2;
  }
  while (v2);
  if (v3 != this)
    *(_QWORD *)this = v3;
  v4 = *((_QWORD *)v3 + 2);
  if (!v4)
    return 6;
  if ((v4 & 0xFFFFFFFCFFFFFFFFLL) == 0)
    return 1;
  if (!*((_DWORD *)this + 7))
    goto LABEL_21;
  v5 = this;
  do
  {
    v6 = v5;
    v5 = *(JSC::DFG::VariableAccessData **)v5;
  }
  while (v5);
  if (v6 != this)
    *(_QWORD *)this = v6;
  v7 = *((_QWORD *)v6 + 2);
  if (v7 && (v7 & 0xFFFFFFF0FFFFFFFFLL) == 0)
    return 2;
LABEL_21:
  if ((v4 & 0x2800FFFFFFF7) != 0 && (v4 & 0xFFFFD7FF00000008) == 0)
    return 4;
  if (v4 == 0x10000000000)
    return 5;
  else
    return 6;
}

void JSC::DFG::`anonymous namespace'::Validate::dumpGraphIfAppropriate(JSC::DFG::_anonymous_namespace_::Validate *this)
{
  JSC::DFG::Graph *v2;
  unint64_t v3;
  char v4;
  char **v5;
  char *v6;

  if (*((_DWORD *)this + 2))
  {
    WTF::dataLog<char [16]>("\n");
    if (*((_QWORD *)this + 2))
    {
      WTF::dataLog<char [16]>("Before phase:\n");
      WTF::dataLog<WTF::CString>((_QWORD *)this + 2);
    }
    WTF::dataLog<char [16]>("At time of failure:\n");
    v2 = *(JSC::DFG::Graph **)this;
    v3 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v3 != -1)
    {
      v6 = &v4;
      v5 = &v6;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::DFG::Graph::dump(v2, (WTF::PrintStream *)WTF::s_file, 0);
  }
}

uint64_t JSC::DFG::`anonymous namespace'::Validate::reportValidationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (a2)
    return WTF::dataLog<JSC::Operand,char [11],JSC::DFG::BasicBlock>((uint64_t)&v3, a2);
  else
    return WTF::dataLog<JSC::Operand,char [16]>((int *)&v3);
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  return WTF::dataLog<JSC::DFG::Node *,char [5],JSC::DFG::Edge>(&v3, (JSC::DFG::Edge *)&v4);
}

uint64_t WTF::dataLog<JSC::DFG::Node *>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = v4;
  v6 = *a1;
  if (!*a1)
  {
    v9 = "-";
    goto LABEL_9;
  }
  v7 = *(_DWORD *)(v6 + 20);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", "D@");
  WTF::PrintStream::printf(v8, "%u", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  if ((*(_DWORD *)(v6 + 56) & 7) == 3)
  {
    v9 = "<Double>";
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v6 + 56) & 7) == 5)
  {
    v9 = "<Int52>";
LABEL_9:
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DFG::`anonymous namespace'::Validate::reportValidationContext(JSC::DFG::_anonymous_namespace_::Validate *this, JSC::DFG::Node *a2)
{
  return WTF::dataLogF((WTF *)"@%u", (const char *)a2, this);
}

uint64_t WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return *(unsigned int *)(v3 + 16 * v5 + 8);
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2)
          return *(unsigned int *)(v3 + 16 * v5 + 8);
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::dataLog<unsigned int>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<unsigned short>(unsigned __int16 *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::DFG::`anonymous namespace'::Validate::validateCPS(JSC::DFG::_anonymous_namespace_::Validate *this, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  JSC::DFG::_anonymous_namespace_::Validate *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::DFG::_anonymous_namespace_::Validate *v45;
  unint64_t v46;
  JSC::DFG::_anonymous_namespace_::Validate **v47;
  unint64_t v48;
  _QWORD *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  JSC::DFG::_anonymous_namespace_::Validate *v55;
  int v56;
  JSC::DFG::_anonymous_namespace_::Validate *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  BOOL v124;
  int v125;
  unsigned int v127;
  uint64_t v128;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  BOOL v136;
  _QWORD *v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  JSC::DFG::_anonymous_namespace_::Validate *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  BOOL v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  _QWORD *v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  JSC::DFG *v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  _QWORD *v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  unsigned int v175;
  int v176;
  _DWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  JSC::DFG::Node *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  _DWORD *v226;
  uint64_t *v227;
  uint64_t v228;
  unint64_t v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t *v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  unsigned int v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  JSC::DFG::_anonymous_namespace_::Validate *v280;
  uint64_t v281;
  JSC::DFG::_anonymous_namespace_::Validate *v282;
  int v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  JSC::DFG::_anonymous_namespace_::Validate *v317;
  const char *v318;
  const char *v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unsigned __int16 **v324;
  unsigned __int16 **v325;
  unsigned __int16 *v326;
  int v327;
  int v329;
  JSC::DFG *v330;
  int v331;
  JSC::DFG::_anonymous_namespace_::Validate *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unsigned int v336;
  JSC::DFG::_anonymous_namespace_::Validate *v337;
  _QWORD *v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  _DWORD *v347;
  _QWORD *v348;
  uint64_t *v349;
  uint64_t v350;
  JSC::DFG::_anonymous_namespace_::Validate *v351;
  int v352;
  int v353;
  uint64_t *v354;
  uint64_t v355;
  JSC::DFG::_anonymous_namespace_::Validate *v356;
  int v357;
  uint64_t *v358;
  uint64_t v359;
  JSC::DFG::_anonymous_namespace_::Validate *v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  JSC::DFG::_anonymous_namespace_::Validate *v367;
  int v368;
  WTF *v369;
  uint64_t *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v378;
  const char *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v383;
  JSC::DFG::_anonymous_namespace_::Validate *v385;
  const char *v386;
  const char *v387;
  const char *v388;
  const char *v389;
  JSC::DFG::BasicBlock *v390;
  const char *v391;
  JSC::DFG::_anonymous_namespace_::Validate *v392;
  const char *v393;
  const char *v394;
  const char *v395;
  const char *v396;
  uint64_t v397;
  const char *v398;
  const char *v399;
  JSC::DFG::_anonymous_namespace_::Validate *v400;
  const char *v401;
  const char *v402;
  JSC::DFG::_anonymous_namespace_::Validate *v403;
  const char *v404;
  const char *v405;
  JSC::DFG::_anonymous_namespace_::Validate *v406;
  const char *v407;
  const char *v408;
  uint64_t v409;
  const char *v410;
  const char *v411;
  JSC::DFG::_anonymous_namespace_::Validate *v412;
  const char *v413;
  JSC::DFG::Node *v414;
  const char *v415;
  JSC::DFG::_anonymous_namespace_::Validate *v416;
  const char *v417;
  JSC::DFG::Node *v418;
  const char *v419;
  JSC::DFG::_anonymous_namespace_::Validate *v420;
  const char *v421;
  JSC::DFG::Node *v422;
  const char *v423;
  JSC::DFG::_anonymous_namespace_::Validate *v424;
  const char *v425;
  JSC::DFG::Node *v426;
  const char *v427;
  JSC::DFG::_anonymous_namespace_::Validate *v428;
  const char *v429;
  const char *v430;
  JSC::DFG::_anonymous_namespace_::Validate *v431;
  const char *v432;
  const char *v433;
  JSC::DFG::_anonymous_namespace_::Validate *v434;
  const char *v435;
  JSC::DFG::BasicBlock *v436;
  const char *v437;
  JSC::DFG::_anonymous_namespace_::Validate *v438;
  const char *v439;
  JSC::DFG::Node *v440;
  const char *v441;
  JSC::DFG::_anonymous_namespace_::Validate *v442;
  const char *v443;
  JSC::DFG::Node *v444;
  const char *v445;
  JSC::DFG::_anonymous_namespace_::Validate *v446;
  const char *v447;
  JSC::DFG::Node *v448;
  const char *v449;
  JSC::DFG::_anonymous_namespace_::Validate *v450;
  const char *v451;
  JSC::DFG::Node *v452;
  const char *v453;
  const char *v454;
  const char *v455;
  JSC::DFG::_anonymous_namespace_::Validate *v456;
  const char *v457;
  const char *v458;
  JSC::DFG::_anonymous_namespace_::Validate *v459;
  const char *v460;
  const char *v461;
  JSC::DFG::_anonymous_namespace_::Validate *v462;
  const char *v463;
  const char *v464;
  JSC::DFG::_anonymous_namespace_::Validate *v465;
  const char *v466;
  JSC::DFG::BasicBlock *v467;
  const char *v468;
  JSC::DFG::_anonymous_namespace_::Validate *v469;
  const char *v470;
  JSC::DFG::BasicBlock *v471;
  const char *v472;
  JSC::DFG::_anonymous_namespace_::Validate *v473;
  const char *v474;
  JSC::DFG::BasicBlock *v475;
  const char *v476;
  JSC::DFG::_anonymous_namespace_::Validate *v477;
  const char *v478;
  JSC::DFG::BasicBlock *v479;
  const char *v480;
  JSC::DFG::_anonymous_namespace_::Validate *v481;
  const char *v482;
  JSC::DFG::BasicBlock *v483;
  const char *v484;
  JSC::DFG::_anonymous_namespace_::Validate *v485;
  const char *v486;
  const char *v487;
  JSC::DFG::_anonymous_namespace_::Validate *v488;
  const char *v489;
  const char *v490;
  JSC::DFG::_anonymous_namespace_::Validate *v491;
  const char *v492;
  const char *v493;
  JSC::DFG::_anonymous_namespace_::Validate *v494;
  const char *v495;
  JSC::DFG::Node *v496;
  const char *v497;
  JSC::DFG::_anonymous_namespace_::Validate *v498;
  const char *v499;
  JSC::DFG::Node *v500;
  const char *v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  JSC::DFG::Node *v506;
  JSC::DFG::_anonymous_namespace_::Validate *v507;
  JSC::DFG::_anonymous_namespace_::Validate *v508;
  WTF *v509;
  uint64_t v510;
  int v511;
  int v512;
  JSC::DFG::_anonymous_namespace_::Validate *v513;
  int v514;
  int v515;
  int v516;
  int v517;
  unint64_t v518;
  JSC::DFG *v519[2];

  v8 = this;
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(*(_QWORD *)this + 440);
  if (!v10 || (v11 = *(_DWORD *)(v10 - 12)) == 0)
  {
    v485 = this;
    JSC::DFG::startCrashing(this);
    WTF::dataLogF((WTF *)"\n\n\nAt ", v486);
    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v487, "!m_graph.m_rootToArguments.isEmpty()", "./dfg/DFGValidate.cpp", 509);
    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 509, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!m_graph.m_rootToArguments.isEmpty()");
    __break(0xC471u);
    JUMPOUT(0x19856494CLL);
  }
  if (*(_DWORD *)(v9 + 140) != v11)
  {
    v491 = this;
    JSC::DFG::startCrashing(this);
    WTF::dataLogF((WTF *)"\n\n\nAt ", v492);
    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v493, "m_graph.m_rootToArguments.size() == m_graph.m_roots.size()", "./dfg/DFGValidate.cpp", 510);
    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 510, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"m_graph.m_rootToArguments.size() == m_graph.m_roots.size()");
    __break(0xC471u);
    JUMPOUT(0x198564A14);
  }
  v12 = *(_DWORD *)(v10 - 4);
  if (v12)
  {
    v13 = 88 * v12;
    v14 = *(uint64_t **)(*(_QWORD *)this + 440);
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      v14 += 11;
      v13 -= 88;
      if (!v13)
        goto LABEL_8;
    }
  }
  else
  {
    v14 = *(uint64_t **)(*(_QWORD *)this + 440);
  }
  v370 = (uint64_t *)(v10 + 88 * v12);
  if (v14 != v370)
  {
    v371 = *v14;
LABEL_584:
    v372 = *(_QWORD **)(v9 + 128);
    v373 = *(unsigned int *)(v9 + 140);
    while (*v372 != v371)
    {
      ++v372;
      if (!--v373)
      {
        v488 = this;
        JSC::DFG::startCrashing(this);
        WTF::dataLogF((WTF *)"\n\n\nAt ", v489);
        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v490, "m_graph.m_roots.contains(root)", "./dfg/DFGValidate.cpp", 512);
        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 512, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"m_graph.m_roots.contains(root)");
        __break(0xC471u);
        JUMPOUT(0x1985649B0);
      }
    }
    while (1)
    {
      v14 += 11;
      if (v14 == v370)
        break;
      v371 = *v14;
      if ((unint64_t)(*v14 + 1) > 1)
      {
        if (v14 != v370)
          goto LABEL_584;
        break;
      }
    }
  }
LABEL_8:
  if (!*(_DWORD *)(v9 + 60))
    return;
  v15 = 0;
  v16 = -1;
  v17 = 1;
  v507 = this;
  do
  {
    v18 = *(JSC::DFG::Node **)(*(_QWORD *)(v9 + 48) + 8 * v15);
    if (!v18)
      goto LABEL_446;
    v502 = v15;
    v518 = 0;
    v519[0] = 0;
    v19 = *((unsigned int *)v18 + 9);
    v20 = *((unsigned int *)v18 + 55);
    v506 = v18;
    if (v20 + v19)
    {
      v143 = 0;
      v144 = (_QWORD *)((char *)v18 + 208);
      v145 = (_QWORD *)((char *)v18 + 24);
      do
      {
        v146 = v145;
        v147 = v143;
        v148 = v143 >= v19;
        v149 = v143 - v19;
        if (v148)
        {
          v146 = v144;
          v147 = v149;
          if (v149 >= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x19856429CLL);
          }
        }
        v150 = *(_QWORD *)(*v146 + 8 * v147);
        v151 = v518;
        if (v518
          || (this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)&v518, 0, -1, a4, (uint64_t)v8, a6, a7, a8), v16 = -1, v8 = v507, (v151 = v518) != 0))
        {
          v152 = *(_DWORD *)(v151 - 8);
        }
        else
        {
          v152 = 0;
        }
        v153 = (~(v150 << 32) + v150) ^ ((unint64_t)(~(v150 << 32) + v150) >> 22);
        v154 = 9 * ((v153 + ~(v153 << 13)) ^ ((v153 + ~(v153 << 13)) >> 8));
        v155 = (v154 ^ (v154 >> 15)) + ~((v154 ^ (v154 >> 15)) << 27);
        v156 = (v155 >> 31) ^ v155;
        v157 = v152 & v156;
        a2 = v151 + 8 * (v152 & v156);
        v158 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v159 = 0;
          v160 = 1;
          while (v158 != v150)
          {
            if (v158 == -1)
              v159 = (_QWORD *)a2;
            v157 = (v157 + v160) & v152;
            a2 = v151 + 8 * v157;
            v158 = *(_QWORD *)a2;
            ++v160;
            if (!*(_QWORD *)a2)
            {
              if (v159)
              {
                *v159 = 0;
                --*(_DWORD *)(v518 - 16);
                a2 = (uint64_t)v159;
              }
              goto LABEL_183;
            }
          }
        }
        else
        {
LABEL_183:
          *(_QWORD *)a2 = v150;
          if (v518)
            v161 = *(_DWORD *)(v518 - 12) + 1;
          else
            v161 = 1;
          *(_DWORD *)(v518 - 12) = v161;
          if (v518)
            v162 = *(_DWORD *)(v518 - 12);
          else
            v162 = 0;
          v163 = (*(_DWORD *)(v518 - 16) + v162);
          v164 = *(unsigned int *)(v518 - 4);
          if (v164 > 0x400)
          {
            if (v164 > 2 * v163)
              goto LABEL_189;
          }
          else if (3 * v164 > 4 * v163)
          {
            goto LABEL_189;
          }
          this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)&v518, (uint64_t *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
          v16 = -1;
          v8 = v507;
        }
LABEL_189:
        if (v143 < *((unsigned int *)v506 + 9))
        {
          v165 = v519[0];
          if (v519[0]
            || (this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v519, 0, -1, a4, (uint64_t)v8, a6, a7, a8), v16 = -1, v8 = v507, (v165 = v519[0]) != 0))
          {
            v166 = *((_DWORD *)v165 - 2);
          }
          else
          {
            v166 = 0;
          }
          v167 = v166 & v156;
          a2 = (uint64_t)v165 + 8 * (v166 & v156);
          v168 = *(_QWORD *)a2;
          if (*(_QWORD *)a2)
          {
            v169 = 0;
            v170 = 1;
            while (v168 != v150)
            {
              if (v168 == -1)
                v169 = (_QWORD *)a2;
              v167 = (v167 + v170) & v166;
              a2 = (uint64_t)v165 + 8 * v167;
              v168 = *(_QWORD *)a2;
              ++v170;
              if (!*(_QWORD *)a2)
              {
                if (v169)
                {
                  *v169 = 0;
                  --*((_DWORD *)v519[0] - 4);
                  a2 = (uint64_t)v169;
                }
                goto LABEL_200;
              }
            }
            goto LABEL_206;
          }
LABEL_200:
          *(_QWORD *)a2 = v150;
          if (v519[0])
            v171 = *((_DWORD *)v519[0] - 3) + 1;
          else
            v171 = 1;
          *((_DWORD *)v519[0] - 3) = v171;
          if (v519[0])
            v172 = *((_DWORD *)v519[0] - 3);
          else
            v172 = 0;
          v173 = (*((_DWORD *)v519[0] - 4) + v172);
          v174 = *((unsigned int *)v519[0] - 1);
          if (v174 > 0x400)
          {
            if (v174 <= 2 * v173)
            {
LABEL_230:
              this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v519, (uint64_t *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
              v16 = -1;
              v8 = v507;
            }
          }
          else if (3 * v174 <= 4 * v173)
          {
            goto LABEL_230;
          }
        }
LABEL_206:
        v175 = 0;
        v176 = *(_DWORD *)(v150 + 56);
        v177 = (_DWORD *)(v150 + 24);
        if ((v176 & 0x10) != 0)
        {
          while (v175 < *(_DWORD *)(v150 + 32))
          {
            v189 = v175 + *v177;
            if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= v189)
            {
              __break(0xC471u);
              JUMPOUT(0x198563FE4);
            }
            v178 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * v189);
LABEL_209:
            v179 = *v178;
            v180 = *v178 & 0xFF00FFFFFFFFFFFFLL;
            if (v180)
            {
              v181 = *((_QWORD *)v8 + 6);
              if (!v181)
                goto LABEL_620;
              v182 = *(_DWORD *)(v181 - 8);
              v183 = (v180 + ~(v179 << 32)) ^ ((v180 + ~(v179 << 32)) >> 22);
              v184 = 9 * ((v183 + ~(v183 << 13)) ^ ((v183 + ~(v183 << 13)) >> 8));
              v185 = (v184 ^ (v184 >> 15)) + ~((v184 ^ (v184 >> 15)) << 27);
              v186 = v182 & ((v185 >> 31) ^ v185);
              v187 = *(_QWORD *)(v181 + 8 * v186);
              if (v187 != v180)
              {
                v188 = 1;
                while (v187)
                {
                  v186 = (v186 + v188) & v182;
                  v187 = *(_QWORD *)(v181 + 8 * v186);
                  ++v188;
                  if (v187 == v180)
                    goto LABEL_215;
                }
LABEL_620:
                v392 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v393);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v394, "m_acceptableNodes.contains(edge.node())", "./dfg/DFGValidate.cpp", 531);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 531, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"m_acceptableNodes.contains(edge.node())");
                __break(0xC471u);
                JUMPOUT(0x198563C44);
              }
            }
LABEL_215:
            ++v175;
            if ((v176 & 0x10) == 0)
              goto LABEL_207;
          }
        }
        else
        {
LABEL_207:
          if (v175 < 3)
          {
            v178 = (uint64_t *)&v177[2 * v175];
            goto LABEL_209;
          }
        }
        ++v143;
        v18 = v506;
        v19 = *((unsigned int *)v506 + 9);
        v20 = *((unsigned int *)v506 + 55);
      }
      while (v143 < v20 + v19);
    }
    v513 = 0;
    if (!(_DWORD)v20)
      goto LABEL_100;
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(*((_QWORD *)v18 + 26) + 8 * v21);
      v23 = *(_QWORD *)(v22 + 24);
      if ((*(_BYTE *)(v22 + 56) & 0x10) != 0)
      {
        v39 = *(_QWORD *)(v22 + 32);
        if ((int)v39 + (int)v23 > v23)
        {
          v40 = *(_QWORD *)(v22 + 24);
          v41 = (v39 + v23);
          if (*(unsigned int *)(*(_QWORD *)v8 + 164) <= (unint64_t)v23)
            v42 = *(_QWORD *)(v22 + 24);
          else
            v42 = *(unsigned int *)(*(_QWORD *)v8 + 164);
          do
          {
            if (v40 == v42)
            {
              __break(0xC471u);
              JUMPOUT(0x198563EE4);
            }
            v43 = *(_QWORD *)(*(_QWORD *)v8 + 152);
            v44 = *(_QWORD *)(v43 + 8 * v40);
            v45 = (JSC::DFG::_anonymous_namespace_::Validate *)(v44 & 0xFF00FFFFFFFFFFFFLL);
            if ((v44 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v46 = *((unsigned int *)v506 + 9);
              if (!(_DWORD)v46)
                goto LABEL_42;
              v47 = (JSC::DFG::_anonymous_namespace_::Validate **)*((_QWORD *)v506 + 3);
              if (*v47 != v45)
              {
                v48 = 0;
                v49 = v47 + 1;
                do
                {
                  if (v46 - 1 == v48)
                    goto LABEL_42;
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)v49[v48++];
                }
                while (this != v45);
                if (v48 >= v46)
                {
LABEL_42:
                  if (!v513)
                    goto LABEL_632;
                  v50 = *((_DWORD *)v513 - 2);
                  v51 = ((unint64_t)v45 + ~(v44 << 32)) ^ (((unint64_t)v45 + ~(v44 << 32)) >> 22);
                  v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
                  v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
                  v54 = v50 & ((v53 >> 31) ^ v53);
                  v55 = (JSC::DFG::_anonymous_namespace_::Validate *)*((_QWORD *)v513 + v54);
                  if (v55 != v45)
                  {
                    v56 = 1;
                    while (v55)
                    {
                      v54 = (v54 + v56) & v50;
                      v55 = (JSC::DFG::_anonymous_namespace_::Validate *)*((_QWORD *)v513 + v54);
                      ++v56;
                      if (v55 == v45)
                        goto LABEL_47;
                    }
LABEL_632:
                    v400 = v8;
                    JSC::DFG::startCrashing(this);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v401);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v402, "block->isInPhis(child) || seenNodes.contains(child)", "./dfg/DFGValidate.cpp", 541);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 541, "auto JSC::DFG::(anonymous namespace)::Validate::validateCPS()::(anonymous class)::operator()(const Edge &) const", (uint64_t)"block->isInPhis(child) || seenNodes.contains(child)");
                    __break(0xC471u);
                    JUMPOUT(0x198563E6CLL);
                  }
                }
              }
            }
LABEL_47:
            ++v40;
          }
          while (v40 < v41);
        }
        goto LABEL_48;
      }
      v24 = v23 & 0xFF00FFFFFFFFFFFFLL;
      if ((v23 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_48;
      v25 = *((unsigned int *)v506 + 9);
      if (!(_DWORD)v25)
        goto LABEL_22;
      v26 = (unint64_t *)*((_QWORD *)v506 + 3);
      if (*v26 != v24)
      {
        v27 = 0;
        v28 = v26 + 1;
        do
        {
          if (v25 - 1 == v27)
            goto LABEL_22;
          v29 = v28[v27++];
        }
        while (v29 != v24);
        if (v27 >= v25)
        {
LABEL_22:
          if (!v513)
            goto LABEL_644;
          v30 = *((_DWORD *)v513 - 2);
          v31 = (v24 + ~(v23 << 32)) ^ ((v24 + ~(v23 << 32)) >> 22);
          v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
          v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
          v34 = v30 & ((v33 >> 31) ^ v33);
          v35 = *((_QWORD *)v513 + v34);
          if (v35 != v24)
          {
            v36 = 1;
            while (v35)
            {
              v34 = (v34 + v36) & v30;
              v35 = *((_QWORD *)v513 + v34);
              ++v36;
              if (v35 == v24)
                goto LABEL_27;
            }
LABEL_644:
            v17 = 0;
            goto LABEL_653;
          }
        }
LABEL_27:
        v37 = *(_QWORD *)(v22 + 32);
        v38 = v37 & 0xFF00FFFFFFFFFFFFLL;
        if ((v37 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_48;
        if (!(_DWORD)v25)
          goto LABEL_72;
        v26 = (unint64_t *)*((_QWORD *)v506 + 3);
        v24 = *v26;
        goto LABEL_67;
      }
      v37 = *(_QWORD *)(v22 + 32);
      v38 = v37 & 0xFF00FFFFFFFFFFFFLL;
      if ((v37 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_48;
LABEL_67:
      if (v24 == v38)
      {
        v80 = *(_QWORD *)(v22 + 40);
        v81 = v80 & 0xFF00FFFFFFFFFFFFLL;
        if ((v80 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_48;
LABEL_83:
        if (v24 == v81)
          goto LABEL_48;
        v82 = 0;
        v83 = v26 + 1;
        do
        {
          if (v25 - 1 == v82)
            goto LABEL_88;
          v84 = v83[v82++];
        }
        while (v84 != v81);
        if (v82 < v25)
          goto LABEL_48;
        goto LABEL_88;
      }
      v70 = 0;
      v71 = v26 + 1;
      do
      {
        if (v25 - 1 == v70)
          goto LABEL_72;
        v72 = v71[v70++];
      }
      while (v72 != v38);
      if (v70 >= v25)
      {
LABEL_72:
        if (!v513)
          goto LABEL_653;
        v73 = *((_DWORD *)v513 - 2);
        v74 = (v38 + ~(v37 << 32)) ^ ((v38 + ~(v37 << 32)) >> 22);
        v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
        v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
        v77 = v73 & ((v76 >> 31) ^ v76);
        v78 = *((_QWORD *)v513 + v77);
        if (v78 != v38)
        {
          v79 = 1;
          while (v78)
          {
            v77 = (v77 + v79) & v73;
            v78 = *((_QWORD *)v513 + v77);
            ++v79;
            if (v78 == v38)
              goto LABEL_77;
          }
          goto LABEL_653;
        }
      }
LABEL_77:
      v80 = *(_QWORD *)(v22 + 40);
      v81 = v80 & 0xFF00FFFFFFFFFFFFLL;
      if ((v80 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_48;
      if ((_DWORD)v25)
      {
        v26 = (unint64_t *)*((_QWORD *)v506 + 3);
        v24 = *v26;
        goto LABEL_83;
      }
LABEL_88:
      if (!v513)
        goto LABEL_652;
      v85 = *((_DWORD *)v513 - 2);
      v86 = (v81 + ~(v80 << 32)) ^ ((v81 + ~(v80 << 32)) >> 22);
      v87 = 9 * ((v86 + ~(v86 << 13)) ^ ((v86 + ~(v86 << 13)) >> 8));
      v88 = (v87 ^ (v87 >> 15)) + ~((v87 ^ (v87 >> 15)) << 27);
      v89 = v85 & ((v88 >> 31) ^ v88);
      v90 = *((_QWORD *)v513 + v89);
      if (v90 != v81)
      {
        v91 = 1;
        while (v90)
        {
          v89 = (v89 + v91) & v85;
          v90 = *((_QWORD *)v513 + v89);
          ++v91;
          if (v90 == v81)
            goto LABEL_48;
        }
LABEL_652:
        v17 = 2;
LABEL_653:
        JSC::DFG::startCrashing(this);
        WTF::dataLogF((WTF *)"\n\n\nAt ", v454);
        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v455, "block->isInPhis(child) || seenNodes.contains(child)", "./dfg/DFGValidate.cpp", 541);
        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 541, "auto JSC::DFG::(anonymous namespace)::Validate::validateCPS()::(anonymous class)::operator()(const Edge &) const", (uint64_t)"block->isInPhis(child) || seenNodes.contains(child)");
        __break(0xC471u);
        JUMPOUT(0x198564540);
      }
LABEL_48:
      v57 = v513;
      if (v513
        || (this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)&v513, 0, -1, a4, (uint64_t)v8, a6, a7, a8), v16 = -1, v8 = v507, (v57 = v513) != 0))
      {
        v58 = *((_DWORD *)v57 - 2);
      }
      else
      {
        v58 = 0;
      }
      v59 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
      v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
      v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
      v62 = v58 & ((v61 >> 31) ^ v61);
      a2 = (uint64_t)v57 + 8 * v62;
      v63 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v64 = 0;
        v65 = 1;
        while (v63 != v22)
        {
          if (v63 == -1)
            v64 = (_QWORD *)a2;
          v62 = (v62 + v65) & v58;
          a2 = (uint64_t)v57 + 8 * v62;
          v63 = *(_QWORD *)a2;
          ++v65;
          if (!*(_QWORD *)a2)
          {
            if (v64)
            {
              *v64 = 0;
              --*((_DWORD *)v513 - 4);
              a2 = (uint64_t)v64;
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
LABEL_58:
        *(_QWORD *)a2 = v22;
        if (v513)
          v66 = *((_DWORD *)v513 - 3) + 1;
        else
          v66 = 1;
        *((_DWORD *)v513 - 3) = v66;
        if (v513)
          v67 = *((_DWORD *)v513 - 3);
        else
          v67 = 0;
        v68 = (*((_DWORD *)v513 - 4) + v67);
        v69 = *((unsigned int *)v513 - 1);
        if (v69 > 0x400)
        {
          if (v69 > 2 * v68)
            goto LABEL_64;
        }
        else if (3 * v69 > 4 * v68)
        {
          goto LABEL_64;
        }
        this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)&v513, (uint64_t *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
        v16 = -1;
        v8 = v507;
      }
LABEL_64:
      ++v21;
      v18 = v506;
    }
    while (v21 < *((unsigned int *)v506 + 55));
    if (v513)
    {
      WTF::fastFree((unint64_t)v513 - 16, (void *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
      v8 = v507;
    }
LABEL_100:
    v504 = *((unsigned int *)v18 + 9);
    if (!(_DWORD)v504)
      goto LABEL_166;
    v92 = 0;
    v503 = *((_QWORD *)v18 + 3);
    while (2)
    {
      v93 = *(_QWORD *)(v503 + 8 * v92);
      if (*(_WORD *)(v93 + 18) != 27)
      {
        v412 = v8;
        JSC::DFG::startCrashing(this);
        WTF::dataLogF((WTF *)"\n\n\nAt ", v413);
        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v415, "node->op() == Phi", "./dfg/DFGValidate.cpp", 550);
        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 550, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->op() == Phi");
        __break(0xC471u);
        JUMPOUT(0x198564050);
      }
      v94 = *(_QWORD **)(v93 + 72);
      v95 = v94;
      do
      {
        v96 = v95;
        v95 = (_QWORD *)*v95;
      }
      while (v95);
      v505 = v92;
      if (v96 != v94)
        *v94 = v96;
      v97 = 0;
      v98 = v96[3];
      v99 = ~*((_DWORD *)v96 + 6);
      v100 = (_DWORD *)(v93 + 24);
      v101 = *(_DWORD *)(v93 + 56);
      a2 = v518;
      this = v519[0];
      if ((v101 & 0x10) == 0)
      {
LABEL_108:
        v102 = 3;
        goto LABEL_109;
      }
      while (2)
      {
        v102 = *(unsigned int *)(v93 + 32);
LABEL_109:
        v8 = v507;
        if (v97 < v102)
        {
          v103 = *(_QWORD *)v507;
          if (*(_DWORD *)(*(_QWORD *)v507 + 944))
          {
            if ((v101 & 0x10) != 0)
            {
              v139 = *v100 + v97;
              if (*(_DWORD *)(v103 + 164) <= v139)
              {
                __break(0xC471u);
                JUMPOUT(0x198563FD4);
              }
              v104 = (uint64_t *)(*(_QWORD *)(v103 + 152) + 8 * v139);
            }
            else
            {
              v104 = (uint64_t *)&v100[2 * v97];
            }
            v16 = *v104;
            a4 = *v104 & 0xFF00FFFFFFFFFFFFLL;
            if (a4)
            {
              v105 = *(unsigned __int16 *)((*v104 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v105 > 0x27 || ((1 << v105) & 0xC008010000) == 0)
              {
                v397 = *v104;
                JSC::DFG::startCrashing(v519[0]);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v398);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v399, "edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe || edge->op() == Phi", "./dfg/DFGValidate.cpp", 566);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 566, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe || edge->op() == Phi");
                __break(0xC471u);
                JUMPOUT(0x198563DFCLL);
              }
              a7 = -1;
              v107 = ~(v16 << 32);
              if (!v519[0])
                goto LABEL_124;
              v108 = *((_DWORD *)v519[0] - 2);
              v109 = ((a4 + v107) ^ ((a4 + v107) >> 22)) + ~(((a4 + v107) ^ ((a4 + v107) >> 22)) << 13);
              v110 = (9 * (v109 ^ (v109 >> 8))) ^ ((9 * (v109 ^ (v109 >> 8))) >> 15);
              v111 = v108 & (((v110 + ~(v110 << 27)) >> 31) ^ (v110 + ~((_DWORD)v110 << 27)));
              v112 = *((_QWORD *)v519[0] + v111);
              if (v112 != a4)
              {
                v113 = 1;
                while (1)
                {
                  a7 = -1;
                  if (!v112)
                    break;
                  v111 = (v111 + v113) & v108;
                  v112 = *((_QWORD *)v519[0] + v111);
                  ++v113;
                  if (v112 == a4)
                    goto LABEL_131;
                }
LABEL_124:
                if (!v518)
                  goto LABEL_133;
                v114 = *(_DWORD *)(v518 - 8);
                v115 = ((a4 + v107) ^ ((a4 + v107) >> 22)) + ~(((a4 + v107) ^ ((a4 + v107) >> 22)) << 13);
                v116 = (9 * (v115 ^ (v115 >> 8))) ^ ((9 * (v115 ^ (v115 >> 8))) >> 15);
                v117 = v114 & (((v116 + ~(v116 << 27)) >> 31) ^ (v116 + ~((_DWORD)v116 << 27)));
                v118 = *(_QWORD *)(v518 + 8 * v117);
                if (v118 != a4)
                {
                  v119 = 1;
                  while (v118)
                  {
                    v117 = (v117 + v119) & v114;
                    v118 = *(_QWORD *)(v518 + 8 * v117);
                    ++v119;
                    if (v118 == a4)
                      goto LABEL_129;
                  }
LABEL_133:
                  v120 = *((unsigned int *)v506 + 13);
                  if (!(_DWORD)v120)
                  {
LABEL_599:
                    v378 = v16;
                    JSC::DFG::startCrashing(v519[0]);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v379);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v380, "found", "./dfg/DFGValidate.cpp", 618);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 618, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"found");
                    __break(0xC471u);
                    JUMPOUT(0x19856394CLL);
                  }
                  v121 = 0;
                  while (1)
                  {
                    a8 = *(_QWORD *)(*((_QWORD *)v506 + 5) + 8 * v121);
                    if (!a8)
                      break;
                    if ((v98 & 0xFFFFFFFF00000000) == 0x200000000)
                    {
                      v122 = (int)v98 + (unint64_t)*(unsigned int *)(a8 + 112) + *(unsigned int *)(a8 + 116);
                    }
                    else
                    {
                      v122 = ((v98 << 32) - 0x500000000) >> 32;
                      if ((v98 & 0x80000000) != 0)
                        v122 = v99 + *(unsigned int *)(a8 + 112);
                    }
                    a7 = *(_QWORD *)(*(_QWORD *)(a8 + 96) + 8 * v122);
                    if (!a7)
                    {
                      if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                      {
                        __clrex();
                        goto LABEL_611;
                      }
                      if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_611:
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
                      if (*((_DWORD *)v506 + 13) > v121)
                      {
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v389, "prevNode", "./dfg/DFGValidate.cpp", 590);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 590, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"prevNode");
                        __break(0xC471u);
                        JUMPOUT(0x198563B30);
                      }
                      __break(0xC471u);
                      JUMPOUT(0x198563B38);
                    }
                    v123 = *(unsigned __int16 *)(a7 + 18);
                    v124 = v123 > 0x1D;
                    v125 = (1 << v123) & 0x30008000;
                    if (!v124 && v125 != 0)
                      a7 = *(_QWORD *)(a7 + 24) & 0xFF00FFFFFFFFFFFFLL;
                    if (*(_DWORD *)(v93 + 52) && !*(_DWORD *)(a7 + 52))
                    {
                      v383 = a7;
                      if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                      {
                        __clrex();
                        goto LABEL_627;
                      }
                      if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_627:
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
                      if (*((_DWORD *)v506 + 13) > v121)
                      {
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v396, "prevNode->shouldGenerate()", "./dfg/DFGValidate.cpp", 602);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 602, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"prevNode->shouldGenerate()");
                        __break(0xC471u);
                        JUMPOUT(0x198563D84);
                      }
                      __break(0xC471u);
                      JUMPOUT(0x198563D8CLL);
                    }
                    v127 = *(unsigned __int16 *)(a7 + 18);
                    v124 = v127 > 0x27;
                    v128 = (1 << v127) & 0xC008010000;
                    if (v124 || v128 == 0)
                    {
                      v374 = a7;
                      if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                      {
                        __clrex();
                        goto LABEL_606;
                      }
                      if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_606:
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                      WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
                      if (*((_DWORD *)v506 + 13) > v121)
                      {
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v388, "prevNode->op() == SetLocal || prevNode->op() == SetArgumentDefinitely || prevNode->op() == SetArgumentMaybe || prevNode->op() == Phi", "./dfg/DFGValidate.cpp", 609);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 609, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"prevNode->op() == SetLocal || prevNode->op() == SetArgumentDefinitely || prevNode->op() == SetArgumentMaybe || prevNode->op() == Phi");
                        __break(0xC471u);
                        JUMPOUT(0x198563A90);
                      }
                      __break(0xC471u);
                      JUMPOUT(0x198563A98);
                    }
                    if (a7 == a4)
                      goto LABEL_131;
                    v130 = *(unsigned int *)(a8 + 36);
                    v131 = *(unsigned int *)(a8 + 220);
                    v132 = v131 + v130;
                    if (v131 + v130)
                    {
                      v133 = 0;
                      v134 = (_QWORD *)(a8 + 208);
                      v135 = (_QWORD *)(a8 + 24);
                      v136 = 1;
                      do
                      {
                        v137 = v135;
                        v138 = v133;
                        if (v133 >= v130)
                        {
                          v137 = v134;
                          v138 = v133 - v130;
                          if (v133 - v130 >= v131)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198563890);
                          }
                        }
                        if (*(_QWORD *)(*v137 + 8 * v138) == a4)
                          break;
                        v136 = ++v133 < v132;
                      }
                      while (v132 != v133);
                      if (v136)
                      {
                        v381 = a7;
                        if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                        {
                          __clrex();
                          goto LABEL_622;
                        }
                        if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_622:
                          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                        WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
                        if (*((_DWORD *)v506 + 13) > v121)
                        {
                          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v395, "!prevBlock->isInBlock(edge.node())", "./dfg/DFGValidate.cpp", 615);
                          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 615, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!prevBlock->isInBlock(edge.node())");
                          __break(0xC471u);
                          JUMPOUT(0x198563CE0);
                        }
                        __break(0xC471u);
                        JUMPOUT(0x198563CE8);
                      }
                    }
                    if (++v121 == v120)
                      goto LABEL_599;
                  }
                  if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
                  {
                    __clrex();
                    goto LABEL_616;
                  }
                  if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
LABEL_616:
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
                  if (*((_DWORD *)v506 + 13) > v121)
                  {
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v391, "prevBlock", "./dfg/DFGValidate.cpp", 586);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 586, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"prevBlock");
                    __break(0xC471u);
                    JUMPOUT(0x198563BCCLL);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x198563BD4);
                }
LABEL_129:
                if (v105 - 38 >= 2 && v105 != 16)
                {
                  v409 = v16;
                  JSC::DFG::startCrashing(v519[0]);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v410);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v411, "edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe", "./dfg/DFGValidate.cpp", 576);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 576, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe");
                  __break(0xC471u);
                  JUMPOUT(0x198563FCCLL);
                }
              }
            }
          }
LABEL_131:
          ++v97;
          if ((v101 & 0x10) == 0)
            goto LABEL_108;
          continue;
        }
        break;
      }
      v18 = v506;
      v92 = v505 + 1;
      if (v505 + 1 != v504)
        continue;
      break;
    }
LABEL_166:
    v140 = *((unsigned int *)v18 + 21);
    v513 = 0;
    v514 = 0;
    v515 = v140;
    if ((_DWORD)v140)
    {
      if (v140 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1985648D8);
      }
      v141 = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::fastMalloc((WTF *)(8 * v140));
      v514 = v140;
      v513 = v141;
      bzero(v141, 8 * v140);
      v142 = *((unsigned int *)v18 + 21);
      v8 = v507;
    }
    else
    {
      v141 = 0;
      v142 = 0;
    }
    v190 = *((unsigned int *)v18 + 22);
    v191 = *((unsigned int *)v18 + 23);
    v516 = *((_DWORD *)v18 + 22);
    v517 = v191;
    v509 = 0;
    LODWORD(v510) = 0;
    HIDWORD(v510) = v142;
    a6 = -1;
    if (v142)
    {
      if (v142 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1985648E0);
      }
      v192 = (WTF *)WTF::fastMalloc((WTF *)(8 * v142));
      LODWORD(v510) = v142;
      v509 = v192;
      bzero(v192, 8 * v142);
      v194 = *((unsigned int *)v18 + 22);
      v193 = *((unsigned int *)v18 + 23);
      v195 = *((unsigned int *)v18 + 21);
      v8 = v507;
      a6 = -1;
    }
    else
    {
      v192 = 0;
      v195 = 0;
      v193 = v191;
      v194 = v190;
    }
    v511 = v194;
    v512 = v193;
    v196 = v193 + v194;
    v197 = v195 - (v193 + v194);
    if (v195 != v193 + v194)
    {
      v307 = 0;
      v308 = *(_QWORD *)v8;
      if (v197 <= 1)
        v197 = 1;
      v309 = *((_QWORD *)v506 + 9) + 8 * v196;
      do
      {
        v310 = *(_QWORD *)(v309 + 8 * v307);
        if (!v310)
          goto LABEL_455;
        v311 = *(unsigned __int16 *)(v310 + 18);
        if ((v311 - 15) < 2)
          goto LABEL_455;
        if (v311 > 0x27)
          goto LABEL_467;
        if (((1 << v311) & 0xC030000000) == 0)
        {
          if (v311 != 27 || (v312 = *(_DWORD *)(v308 + 944), v312 == 2))
          {
LABEL_467:
            v317 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v318);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v319, "!block->variablesAtHead.tmp(i) || block->variablesAtHead.tmp(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 626);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 626, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtHead.tmp(i) || block->variablesAtHead.tmp(i)->accessesStack(m_graph)");
            __break(0xC471u);
            goto LABEL_670;
          }
        }
        else
        {
LABEL_455:
          v312 = *(_DWORD *)(v308 + 944);
        }
        if (v312 == 1)
        {
          v313 = *(_QWORD *)(*((_QWORD *)v506 + 12)
                           + 8 * (v307 + *((unsigned int *)v506 + 28) + (unint64_t)*((unsigned int *)v506 + 29)));
          if (v313)
          {
            v314 = *(unsigned __int16 *)(v313 + 18);
            if (v314 - 15 >= 2)
            {
              v124 = v314 > 0x27;
              v315 = (1 << v314) & 0xC038000000;
              if (v124 || v315 == 0)
              {
                v462 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v463);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v464, "!block->variablesAtTail.tmp(i) || block->variablesAtTail.tmp(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 628);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 628, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtTail.tmp(i) || block->variablesAtTail.tmp(i)->accessesStack(m_graph)");
                __break(0xC471u);
                JUMPOUT(0x1985646A0);
              }
            }
          }
        }
        *((_QWORD *)v141 + v191 + v190 + v307) = -1;
        *((_QWORD *)v192 + v196 + v307++) = -1;
      }
      while (v197 != v307);
    }
    if (v194)
    {
      v198 = 0;
      v199 = *((_QWORD *)v506 + 9);
      v200 = *(_QWORD *)v8;
      do
      {
        v201 = *(_QWORD *)(v199 + 8 * v198);
        if (!v201)
          goto LABEL_245;
        v202 = *(unsigned __int16 *)(v201 + 18);
        if ((v202 - 15) < 2)
          goto LABEL_245;
        if (v202 > 0x27)
          goto LABEL_646;
        if (((1 << v202) & 0xC030000000) == 0)
        {
          if (v202 != 27 || (v203 = *(_DWORD *)(v200 + 944), v203 == 2))
          {
LABEL_646:
            v428 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v429);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v430, "!block->variablesAtHead.argument(i) || block->variablesAtHead.argument(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 634);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 634, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtHead.argument(i) || block->variablesAtHead.argument(i)->accessesStack(m_graph)");
            __break(0xC471u);
            JUMPOUT(0x198564220);
          }
        }
        else
        {
LABEL_245:
          v203 = *(_DWORD *)(v200 + 944);
        }
        if (v203 == 1)
        {
          v204 = *(_QWORD *)(*((_QWORD *)v506 + 12) + 8 * v198);
          if (v204)
          {
            v205 = *(unsigned __int16 *)(v204 + 18);
            if (v205 - 15 >= 2)
            {
              v124 = v205 > 0x27;
              v206 = (1 << v205) & 0xC038000000;
              if (v124 || v206 == 0)
              {
                v456 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v457);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v458, "!block->variablesAtTail.argument(i) || block->variablesAtTail.argument(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 636);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 636, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtTail.argument(i) || block->variablesAtTail.argument(i)->accessesStack(m_graph)");
                __break(0xC471u);
                JUMPOUT(0x1985645B8);
              }
            }
          }
        }
        *((_QWORD *)v141 + v198) = -1;
        *((_QWORD *)v192 + v198++) = -1;
      }
      while (v194 != v198);
    }
    if (v193)
    {
      v208 = 0;
      v209 = *(_QWORD *)v8;
      v210 = *((_QWORD *)v506 + 9) + 8 * v194;
      v211 = 0xFFFFFFFFLL;
      do
      {
        v212 = *(_QWORD *)(v210 + 8 * v208);
        if (!v212)
          goto LABEL_264;
        v213 = *(unsigned __int16 *)(v212 + 18);
        if ((v213 - 15) < 2)
          goto LABEL_264;
        if (v213 > 0x27)
          goto LABEL_647;
        if (((1 << v213) & 0xC030000000) == 0)
        {
          if (v213 != 27 || (v214 = *(_DWORD *)(v209 + 944), v214 == 2))
          {
LABEL_647:
            v431 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v432);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v433, "!block->variablesAtHead.local(i) || block->variablesAtHead.local(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 642);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 642, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtHead.local(i) || block->variablesAtHead.local(i)->accessesStack(m_graph)");
            __break(0xC471u);
            JUMPOUT(0x198564294);
          }
        }
        else
        {
LABEL_264:
          v214 = *(_DWORD *)(v209 + 944);
        }
        if (v214 == 1)
        {
          v215 = *(_QWORD *)(*((_QWORD *)v506 + 12) + 8 * (v208 + *((unsigned int *)v506 + 28)));
          if (v215)
          {
            v216 = *(unsigned __int16 *)(v215 + 18);
            if (v216 - 15 >= 2)
            {
              v124 = v216 > 0x27;
              v217 = (1 << v216) & 0xC038000000;
              if (v124 || v217 == 0)
              {
                v459 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v460);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v461, "!block->variablesAtTail.local(i) || block->variablesAtTail.local(i)->accessesStack(m_graph)", "./dfg/DFGValidate.cpp", 644);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 644, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!block->variablesAtTail.local(i) || block->variablesAtTail.local(i)->accessesStack(m_graph)");
                __break(0xC471u);
                JUMPOUT(0x19856462CLL);
              }
            }
          }
        }
        *((_QWORD *)v141 + v190 + v208) = -1;
        *((_QWORD *)v192 + v194 + v208++) = -1;
        --v211;
      }
      while (v193 != v208);
    }
    v219 = v506;
    if (*((_DWORD *)v506 + 55))
    {
      v220 = 0;
      v221 = v191 + v190;
      do
      {
        v508 = 0;
        v222 = *(_QWORD *)(*((_QWORD *)v219 + 26) + 8 * v220);
        v508 = (JSC::DFG::_anonymous_namespace_::Validate *)v222;
        v223 = *(unsigned __int16 *)(v222 + 18);
        if (v223 == 27)
        {
          v416 = v8;
          JSC::DFG::startCrashing(this);
          WTF::dataLogF((WTF *)"\n\n\nAt ", v417);
          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v419, "node->op() != Phi", "./dfg/DFGValidate.cpp", 653);
          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 653, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->op() != Phi");
          __break(0xC471u);
          JUMPOUT(0x1985640C0);
        }
        if ((*(_BYTE *)(v222 + 8) & 2) != 0)
        {
          v420 = v8;
          JSC::DFG::startCrashing(this);
          WTF::dataLogF((WTF *)"\n\n\nAt ", v421);
          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v423, "node->origin.forExit.isSet()", "./dfg/DFGValidate.cpp", 654);
          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 654, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->origin.forExit.isSet()");
          __break(0xC471u);
          JUMPOUT(0x198564130);
        }
        v224 = 0;
        v225 = *(_DWORD *)(v222 + 56);
        v226 = (_DWORD *)(v222 + 24);
        if ((v225 & 0x10) != 0)
        {
          while (v224 < *(_DWORD *)(v222 + 32))
          {
            v235 = v224 + *v226;
            if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= v235)
            {
              __break(0xC471u);
              JUMPOUT(0x198563FDCLL);
            }
            v227 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * v235);
LABEL_284:
            v228 = *v227;
            v229 = *v227 & 0xFF00FFFFFFFFFFFFLL;
            if (v229)
            {
              if (!v518)
                goto LABEL_604;
              v230 = *(_DWORD *)(v518 - 8);
              v231 = (v229 + ~(v228 << 32)) ^ ((v229 + ~(v228 << 32)) >> 22);
              v232 = 9 * ((v231 + ~(v231 << 13)) ^ ((v231 + ~(v231 << 13)) >> 8));
              v233 = (v232 ^ (v232 >> 15)) + ~((v232 ^ (v232 >> 15)) << 27);
              this = (JSC::DFG::_anonymous_namespace_::Validate *)((v233 >> 31) ^ v233);
              a2 = v230 & this;
              v16 = *(_QWORD *)(v518 + 8 * a2);
              if (v16 != v229)
              {
                LODWORD(a4) = 1;
                while (v16)
                {
                  a2 = ((_DWORD)a2 + (_DWORD)a4) & v230;
                  v16 = *(_QWORD *)(v518 + 8 * a2);
                  a4 = (a4 + 1);
                  if (v16 == v229)
                    goto LABEL_290;
                }
LABEL_604:
                v385 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v386);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v387, "nodesInThisBlock.contains(edge.node())", "./dfg/DFGValidate.cpp", 659);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 659, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"nodesInThisBlock.contains(edge.node())");
                __break(0xC471u);
                JUMPOUT(0x1985639F4);
              }
LABEL_290:
              if (v223 > 0x1D || (a2 = 805339136, ((1 << v223) & 0x30008000) == 0))
              {
                if (v519[0])
                {
                  v234 = *((_DWORD *)v519[0] - 2);
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)(v234 & this);
                  a2 = *((_QWORD *)v519[0] + this);
                  if (a2 == v229)
                  {
LABEL_633:
                    v403 = v8;
                    JSC::DFG::startCrashing(this);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v404);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v405, "!phisInThisBlock.contains(edge.node())", "./dfg/DFGValidate.cpp", 666);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 666, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!phisInThisBlock.contains(edge.node())");
                    __break(0xC471u);
                    JUMPOUT(0x198563EDCLL);
                  }
                  v16 = 1;
                  while (a2)
                  {
                    this = (JSC::DFG::_anonymous_namespace_::Validate *)(((_DWORD)this + (_DWORD)v16) & v234);
                    a2 = *((_QWORD *)v519[0] + this);
                    v16 = (v16 + 1);
                    if (a2 == v229)
                      goto LABEL_633;
                  }
                }
              }
            }
            ++v224;
            if ((v225 & 0x10) == 0)
              goto LABEL_282;
          }
        }
        else
        {
LABEL_282:
          if (v224 < 3)
          {
            v227 = (uint64_t *)&v226[2 * v224];
            goto LABEL_284;
          }
        }
        if (*(unsigned __int16 *)(v222 + 18) > 0xB9u)
        {
          if (*(unsigned __int16 *)(v222 + 18) > 0x16Eu)
          {
            if (v223 == 367 || v223 == 418)
            {
LABEL_645:
              v424 = v8;
              JSC::DFG::startCrashing(this);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v425);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v427, "!\"unexpected node type in CPS\"", "./dfg/DFGValidate.cpp", 694);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 694, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!\"unexpected node type in CPS\"");
              __break(0xC471u);
              JUMPOUT(0x1985641A8);
            }
            goto LABEL_339;
          }
          if (v223 - 278 > 0xC)
            goto LABEL_338;
          if (v223 != 281)
          {
            if (((1 << (v223 - 22)) & 0x1CF7) != 0)
              goto LABEL_645;
LABEL_338:
            if (v223 - 186 < 3)
              goto LABEL_645;
            goto LABEL_339;
          }
          v236 = *(uint64_t **)(v222 + 80);
          v237 = *((unsigned int *)v236 + 3);
          if ((_DWORD)v237)
          {
            v238 = *(_DWORD *)(*(_QWORD *)v8 + 164);
            v239 = v237 + *v226;
            if (v238 <= v239)
              goto LABEL_636;
            v240 = *v236;
            v241 = *(_QWORD *)(*(_QWORD *)v8 + 152);
            this = (JSC::DFG::_anonymous_namespace_::Validate *)(*(_QWORD *)(v240 + 8 * (v237 - 1)) | 2);
            if ((_DWORD)this == 14)
            {
              v242 = *(_QWORD *)(v241 + 8 * v239);
              this = (JSC::DFG::_anonymous_namespace_::Validate *)*(unsigned __int16 *)((v242 & 0xFF00FFFFFFFFFFFFLL)
                                                                                      + 0x12);
              if (this > 2
                || (this = (JSC::DFG::_anonymous_namespace_::Validate *)0xFFFE000000000000,
                    **(_QWORD **)((v242 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000))
              {
LABEL_635:
                v406 = v8;
                JSC::DFG::startCrashing(this);
                WTF::dataLogF((WTF *)"\n\n\nAt ", v407);
                WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v408, "edge->isInt32Constant()", "./dfg/DFGValidate.cpp", 707);
                WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 707, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"edge->isInt32Constant()");
                __break(0xC471u);
                JUMPOUT(0x198563F54);
              }
            }
            if (v237 != 1)
            {
              v243 = *v226 - 1;
              while (v238 > v243 + (int)v237)
              {
                v244 = v237 - 2;
                this = (JSC::DFG::_anonymous_namespace_::Validate *)(*(_QWORD *)(v240
                                                                                             + 8
                                                                                             * (v237 - 2)) | 2);
                if ((_DWORD)this == 14)
                {
                  v242 = *(_QWORD *)(v241 + 8 * (v243 + v237));
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)*(unsigned __int16 *)((v242 & 0xFF00FFFFFFFFFFFFLL)
                                                                                          + 0x12);
                  if (this > 2)
                    goto LABEL_635;
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)0xFFFDFFFFFFFFFFFFLL;
                  if (**(_QWORD **)((v242 & 0xFF00FFFFFFFFFFFFLL) + 0x48) <= 0xFFFDFFFFFFFFFFFFLL)
                    goto LABEL_635;
                }
                LODWORD(v237) = v237 - 1;
                if (!v244)
                  goto LABEL_323;
              }
LABEL_636:
              __break(0xC471u);
              JUMPOUT(0x198563F5CLL);
            }
          }
LABEL_323:
          v245 = **(_QWORD **)(v222 + 72);
          if ((v245 & 1) != 0)
          {
            v247 = v245 & 0xFFFFFFFFFFFFFFFCLL;
            if (*(_DWORD *)v247 != 1)
            {
LABEL_650:
              v442 = v8;
              JSC::DFG::startCrashing(this);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v443);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v445, "node->structureSet().size() == 1", "./dfg/DFGValidate.cpp", 715);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 715, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->structureSet().size() == 1");
              __break(0xC471u);
              JUMPOUT(0x1985643ECLL);
            }
            v246 = *(_QWORD *)(v247 + 8);
          }
          else
          {
            if (v245 < 4)
              goto LABEL_650;
            v246 = v245 & 0xFFFFFFFFFFFFFFFCLL;
          }
          v248 = *(_BYTE *)(v246 + 8) & 0xE;
          if (v248 == 6)
          {
            v446 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v447);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v449, "!hasDouble(structure->indexingType())", "./dfg/DFGValidate.cpp", 722);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 722, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!hasDouble(structure->indexingType())");
            __break(0xC471u);
            JUMPOUT(0x19856445CLL);
          }
          if (v248 == 4)
          {
            v450 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v451);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v453, "!hasInt32(structure->indexingType())", "./dfg/DFGValidate.cpp", 721);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 721, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!hasInt32(structure->indexingType())");
            __break(0xC471u);
            JUMPOUT(0x1985644CCLL);
          }
        }
        else
        {
          if (v223 > 0x1B)
            goto LABEL_335;
          if (v223 != 23)
          {
            if (((1 << v223) & 0xC0E0000) != 0)
              goto LABEL_645;
LABEL_335:
            if (v223 - 96 < 2)
              goto LABEL_645;
            goto LABEL_339;
          }
          if (*(_DWORD *)(*(_QWORD *)v8 + 936) == 1)
          {
            v438 = v8;
            JSC::DFG::startCrashing(this);
            WTF::dataLogF((WTF *)"\n\n\nAt ", v439);
            WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v441, "m_graph.m_fixpointState != FixpointNotConverged", "./dfg/DFGValidate.cpp", 727);
            WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 727, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"m_graph.m_fixpointState != FixpointNotConverged");
            __break(0xC471u);
            JUMPOUT(0x19856437CLL);
          }
        }
LABEL_339:
        if (*(_DWORD *)(v222 + 52))
        {
          if (*(unsigned __int16 *)(v222 + 18) <= 0x1Bu)
          {
            if (v223 == 15)
            {
              v278 = *((_QWORD *)v8 + 3);
              if (v278)
              {
                v279 = *(_DWORD *)(v278 - 8);
                this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v508);
                v280 = v508;
                v281 = this & v279;
                v282 = *(JSC::DFG::_anonymous_namespace_::Validate **)(v278 + 16 * v281);
                if (v282 == v508)
                {
                  v8 = v507;
                  a6 = -1;
LABEL_400:
                  if (*(_DWORD *)(v278 + 16 * v281 + 8))
                  {
                    if (*(_DWORD *)(*(_QWORD *)v8 + 944) == 1)
                    {
                      v284 = (_QWORD *)*((_QWORD *)v508 + 9);
                      v285 = v284;
                      do
                      {
                        v286 = v285;
                        v285 = (_QWORD *)*v285;
                      }
                      while (v285);
                      if (v286 != v284)
                        *v284 = v286;
                      v287 = v286[3];
                      v288 = HIDWORD(v287);
                      v289 = v221 + (int)v287;
                      if ((v287 & 0x80000000) == 0)
                        v290 = (uint64_t)(((unint64_t)v287 << 32) - 0x500000000) >> 32;
                      else
                        v290 = (v287 ^ 0xFFFFFFFFLL) + v190;
                      if (v288 == 2)
                        v290 = v289;
                      if (*((_QWORD *)v141 + v290) != -1)
                      {
                        v473 = v8;
                        JSC::DFG::startCrashing(this);
                        WTF::dataLogF((WTF *)"\n\n\nAt ", v474);
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v476, "getLocalPositions.operand(node->operand()) == notSet", "./dfg/DFGValidate.cpp", 742);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 742, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"getLocalPositions.operand(node->operand()) == notSet");
                        __break(0xC471u);
                        JUMPOUT(0x1985647F0);
                      }
                      v280 = v508;
                      if ((*((_QWORD *)v508 + 3) & 0xFF00FFFFFFFFFFFFLL) == 0)
                      {
                        v477 = v8;
                        JSC::DFG::startCrashing(this);
                        WTF::dataLogF((WTF *)"\n\n\nAt ", v478);
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v480, "!!node->child1()", "./dfg/DFGValidate.cpp", 743);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 743, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!!node->child1()");
                        __break(0xC471u);
                        JUMPOUT(0x198564860);
                      }
                      v291 = *(unsigned __int16 *)((*((_QWORD *)v508 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v291 != 27 && v291 != 38)
                      {
                        v481 = v8;
                        JSC::DFG::startCrashing(this);
                        WTF::dataLogF((WTF *)"\n\n\nAt ", v482);
                        WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v484, "node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == Phi", "./dfg/DFGValidate.cpp", 744);
                        WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 744, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == Phi");
                        __break(0xC471u);
                        JUMPOUT(0x1985648D0);
                      }
                    }
                    v292 = (_QWORD *)*((_QWORD *)v280 + 9);
                    v293 = v292;
                    do
                    {
                      v294 = v293;
                      v293 = (_QWORD *)*v293;
                    }
                    while (v293);
                    if (v294 != v292)
                      *v292 = v294;
                    v295 = v294[3];
                    v296 = HIDWORD(v295);
                    v297 = v221 + (int)v295;
                    if ((v295 & 0x80000000) == 0)
                      v298 = (uint64_t)(((unint64_t)v295 << 32) - 0x500000000) >> 32;
                    else
                      v298 = (v295 ^ 0xFFFFFFFFLL) + v190;
                    if (v296 == 2)
                      v298 = v297;
                    *((_QWORD *)v141 + v298) = v220;
                  }
                }
                else
                {
                  v283 = 1;
                  v8 = v507;
                  a6 = -1;
                  while (v282)
                  {
                    v281 = ((_DWORD)v281 + v283) & v279;
                    v282 = *(JSC::DFG::_anonymous_namespace_::Validate **)(v278 + 16 * v281);
                    ++v283;
                    if (v282 == v508)
                      goto LABEL_400;
                  }
                }
              }
            }
            else if (v223 == 16)
            {
              v250 = *(_QWORD **)(v222 + 72);
              v251 = v250;
              do
              {
                v252 = v251;
                v251 = (_QWORD *)*v251;
              }
              while (v251);
              if (v252 != v250)
                *v250 = v252;
              v253 = v252[3];
              v254 = HIDWORD(v253);
              v255 = v196 + (int)v253;
              if ((v253 & 0x80000000) == 0)
                v256 = (uint64_t)(((unint64_t)v253 << 32) - 0x500000000) >> 32;
              else
                v256 = (v253 ^ 0xFFFFFFFFLL) + v194;
              if (v254 == 2)
                v256 = v255;
              if (*((_QWORD *)v192 + v256) == -1)
              {
                v257 = (_QWORD *)*((_QWORD *)v508 + 9);
                v258 = v257;
                do
                {
                  v259 = v258;
                  v258 = (_QWORD *)*v258;
                }
                while (v258);
                if (v259 != v257)
                  *v257 = v259;
                v260 = v259[3];
                v261 = HIDWORD(v260);
                v262 = v196 + (int)v260;
                if ((v260 & 0x80000000) == 0)
                  v263 = (uint64_t)(((unint64_t)v260 << 32) - 0x500000000) >> 32;
                else
                  v263 = (v260 ^ 0xFFFFFFFFLL) + v194;
                if (v261 == 2)
                  v263 = v262;
                *((_QWORD *)v192 + v263) = v220;
              }
            }
          }
          else if (v223 - 28 >= 2)
          {
            if (v223 == 38)
            {
              v264 = *(_QWORD **)(v222 + 72);
              v265 = v264;
              do
              {
                v266 = v265;
                v265 = (_QWORD *)*v265;
              }
              while (v265);
              if (v266 != v264)
                *v264 = v266;
              v267 = v266[3];
              v268 = HIDWORD(v267);
              v269 = v221 + (int)v267;
              if ((v267 & 0x80000000) == 0)
                v270 = (uint64_t)(((unint64_t)v267 << 32) - 0x500000000) >> 32;
              else
                v270 = (v267 ^ 0xFFFFFFFFLL) + v190;
              if (v268 == 2)
                v270 = v269;
              *((_QWORD *)v141 + v270) = -1;
              v271 = (_QWORD *)*((_QWORD *)v508 + 9);
              v272 = v271;
              do
              {
                v273 = v272;
                v272 = (_QWORD *)*v272;
              }
              while (v272);
              if (v273 != v271)
                *v271 = v273;
              v274 = v273[3];
              v275 = HIDWORD(v274);
              v276 = v196 + (int)v274;
              if ((v274 & 0x80000000) == 0)
                v277 = (uint64_t)(((unint64_t)v274 << 32) - 0x500000000) >> 32;
              else
                v277 = (v274 ^ 0xFFFFFFFFLL) + v194;
              if (v275 == 2)
                v277 = v276;
              *((_QWORD *)v192 + v277) = -1;
            }
          }
          else if (*(_DWORD *)(*(_QWORD *)v8 + 944) == 1)
          {
            v249 = *(unsigned __int16 *)((*(_QWORD *)v226 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v249 > 0x25)
            {
              if (v249 != 38)
              {
                if (v249 != 39)
                  goto LABEL_657;
                if (v223 == 29)
                {
                  v469 = v8;
                  JSC::DFG::startCrashing(this);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v470);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v472, "node->child1()->op() != SetArgumentMaybe", "./dfg/DFGValidate.cpp", 772);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 772, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->child1()->op() != SetArgumentMaybe");
                  __break(0xC471u);
                  JUMPOUT(0x198564780);
                }
              }
            }
            else if (v249 != 16 && v249 != 27)
            {
LABEL_657:
              v465 = v8;
              JSC::DFG::startCrashing(this);
              WTF::dataLogF((WTF *)"\n\n\nAt ", v466);
              WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v468, "node->child1()->op() == Phi || node->child1()->op() == SetLocal || node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == SetArgumentMaybe", "./dfg/DFGValidate.cpp", 770);
              WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 770, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"node->child1()->op() == Phi || node->child1()->op() == SetLocal || node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == SetArgumentMaybe");
              __break(0xC471u);
              JUMPOUT(0x198564710);
            }
          }
        }
        ++v220;
        v219 = v506;
      }
      while (v220 < *((unsigned int *)v506 + 55));
    }
    if (*(_DWORD *)(*(_QWORD *)v8 + 944))
    {
      v299 = *((unsigned int *)v219 + 22);
      v300 = *((unsigned int *)v219 + 23);
      v301 = (unsigned int *)v219;
      if (v300 + v299 != *((_DWORD *)v219 + 21))
      {
        v302 = 0;
        do
        {
          v299 = v301[22];
          v300 = v301[23];
        }
        while (v302 < (unint64_t)v301[21] - (v299 + v300));
      }
      if ((_DWORD)v299)
      {
        v303 = 0;
        do
        {
          ++v303;
        }
        while (v303 < v301[22]);
        LODWORD(v300) = v301[23];
      }
      if ((_DWORD)v300)
      {
        v304 = 0;
        v305 = 0xFFFFFFFFLL;
        do
        {
          ++v304;
          --v305;
        }
        while (v304 < v301[23]);
      }
    }
    if (v192)
      WTF::fastFree((unint64_t)v192, (void *)a2, v16, a4, (uint64_t)v8, a6, a7, a8);
    if (v141)
      WTF::fastFree((unint64_t)v141, (void *)a2, v16, a4, (uint64_t)v8, a6, a7, a8);
    v16 = -1;
    if (v518)
    {
      WTF::fastFree(v518 - 16, (void *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
      v16 = -1;
    }
    if (v519[0])
    {
      WTF::fastFree((unint64_t)v519[0] - 16, (void *)a2, -1, a4, (uint64_t)v8, a6, a7, a8);
      v16 = -1;
    }
    v8 = v507;
    v9 = *(_QWORD *)v507;
    v15 = v502;
LABEL_446:
    ++v15;
    v306 = *(unsigned int *)(v9 + 60);
  }
  while (v15 < v306);
  if (*(_DWORD *)(v9 + 944) == 1)
  {
    v509 = 0;
    v510 = 0;
    v519[0] = 0;
    if ((_DWORD)v306)
    {
      v320 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v320))
      {
        if (v306 == ++v320)
          goto LABEL_576;
      }
      if ((_DWORD)v306 != (_DWORD)v320)
      {
        v321 = v306;
        do
        {
          if (v321 <= v320)
          {
            __break(0xC471u);
            JUMPOUT(0x1985648E8);
          }
          v322 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v320);
          v323 = *(unsigned int *)(v322 + 220);
          if ((_DWORD)v323)
          {
            v324 = *(unsigned __int16 ***)(v322 + 208);
            v325 = &v324[v323];
            while (1)
            {
              v513 = 0;
              v326 = *v324;
              v513 = (JSC::DFG::_anonymous_namespace_::Validate *)v326;
              v327 = v326[9];
              if (v327 != 29 && v327 != 15)
                goto LABEL_503;
              v329 = HIDWORD(v510);
              if (HIDWORD(v510) == (_DWORD)v510)
              {
                this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v513);
                v8 = v507;
                v329 = HIDWORD(v510);
                *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
              }
              else
              {
                *((_QWORD *)v509 + HIDWORD(v510)) = v326;
              }
              HIDWORD(v510) = v329 + 1;
              v330 = v519[0];
              if (v519[0]
                || (this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v519, 0, v16, a4, (uint64_t)v8, a6, a7, a8), v8 = v507, (v330 = v519[0]) != 0))
              {
                v331 = *((_DWORD *)v330 - 2);
              }
              else
              {
                v331 = 0;
              }
              v332 = v513;
              v333 = ((unint64_t)v513 + ~((_QWORD)v513 << 32)) ^ (((unint64_t)v513 + ~((_QWORD)v513 << 32)) >> 22);
              v334 = 9 * ((v333 + ~(v333 << 13)) ^ ((v333 + ~(v333 << 13)) >> 8));
              v335 = (v334 ^ (v334 >> 15)) + ~((v334 ^ (v334 >> 15)) << 27);
              v336 = v331 & ((v335 >> 31) ^ v335);
              a2 = (uint64_t)v330 + 8 * v336;
              v337 = *(JSC::DFG::_anonymous_namespace_::Validate **)a2;
              if (*(_QWORD *)a2)
              {
                v338 = 0;
                v339 = 1;
                do
                {
                  if (v337 == v513)
                  {
                    v434 = v8;
                    JSC::DFG::startCrashing(this);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v435);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v437, "addResult.isNewEntry", "./dfg/DFGValidate.cpp", 806);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 806, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"addResult.isNewEntry");
                    __break(0xC471u);
                    JUMPOUT(0x19856430CLL);
                  }
                  if (v337 == (JSC::DFG::_anonymous_namespace_::Validate *)-1)
                    v338 = (_QWORD *)a2;
                  v336 = (v336 + v339) & v331;
                  a2 = (uint64_t)v330 + 8 * v336;
                  v337 = *(JSC::DFG::_anonymous_namespace_::Validate **)a2;
                  ++v339;
                }
                while (*(_QWORD *)a2);
                if (v338)
                {
                  *v338 = 0;
                  --*((_DWORD *)v519[0] - 4);
                  v332 = v513;
                  a2 = (uint64_t)v338;
                }
              }
              *(_QWORD *)a2 = v332;
              if (v519[0])
                v340 = *((_DWORD *)v519[0] - 3) + 1;
              else
                v340 = 1;
              *((_DWORD *)v519[0] - 3) = v340;
              if (v519[0])
                v341 = *((_DWORD *)v519[0] - 3);
              else
                v341 = 0;
              v342 = (*((_DWORD *)v519[0] - 4) + v341);
              v343 = *((unsigned int *)v519[0] - 1);
              if (v343 > 0x400)
              {
                if (v343 <= 2 * v342)
                {
LABEL_507:
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand((uint64_t *)v519, (uint64_t *)a2, v16, a4, (uint64_t)v8, a6, a7, a8);
                  v8 = v507;
                }
              }
              else if (3 * v343 <= 4 * v342)
              {
                goto LABEL_507;
              }
LABEL_503:
              if (++v324 == v325)
              {
                v321 = *(_DWORD *)(v9 + 60);
                break;
              }
            }
          }
          v320 = (v320 + 1);
          if (v321 > v320)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v320))
            {
              if (v321 == ++v320)
              {
                LODWORD(v320) = v321;
                break;
              }
            }
          }
        }
        while ((_DWORD)v306 != (_DWORD)v320);
        v344 = HIDWORD(v510);
        if (HIDWORD(v510))
        {
          while (2)
          {
            v345 = *((_QWORD *)v509 + --v344);
            HIDWORD(v510) = v344;
            v346 = *(unsigned __int16 *)(v345 + 18);
            if (v346 > 0x1C)
            {
              if (v346 != 29)
              {
                if (v346 != 38)
                {
                  if (v346 == 39)
                  {
                    v494 = v8;
                    JSC::DFG::startCrashing(this);
                    WTF::dataLogF((WTF *)"\n\n\nAt ", v495);
                    WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v497, "!\"Should not reach SetArgumentMaybe. GetLocal that has data flow that reaches a SetArgumentMaybe is invalid IR.\"", "./dfg/DFGValidate.cpp", 835);
                    WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 835, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!\"Should not reach SetArgumentMaybe. GetLocal that has data flow that reaches a SetArgumentMaybe is invalid IR.\"");
                    __break(0xC471u);
                    JUMPOUT(0x198564A88);
                  }
LABEL_668:
                  v498 = v8;
                  JSC::DFG::startCrashing(this);
                  WTF::dataLogF((WTF *)"\n\n\nAt ", v499);
                  WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v501, "!\"Unexpected node type.\"", "./dfg/DFGValidate.cpp", 838);
                  WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 838, "void JSC::DFG::(anonymous namespace)::Validate::validateCPS()", (uint64_t)"!\"Unexpected node type.\"");
                  __break(0xC471u);
                  JUMPOUT(0x198564AF4);
                }
LABEL_533:
                if (!v344)
                  goto LABEL_576;
                continue;
              }
            }
            else if (v346 != 15)
            {
              if (v346 == 16)
                goto LABEL_533;
              if (v346 != 27)
                goto LABEL_668;
              v347 = (_DWORD *)(v345 + 32);
              v348 = (_QWORD *)(v345 + 24);
              v349 = (uint64_t *)(v345 + 24);
              if ((*(_BYTE *)(v345 + 56) & 0x10) != 0)
              {
                if (*v347)
                {
                  if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= *v348)
                    goto LABEL_669;
                  v349 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * *v348);
                  goto LABEL_523;
                }
              }
              else
              {
LABEL_523:
                v350 = *v349;
                v351 = (JSC::DFG::_anonymous_namespace_::Validate *)(v350 & 0xFF00FFFFFFFFFFFFLL);
                if ((v350 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v518 = v350 & 0xFF00FFFFFFFFFFFFLL;
                  this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v513, (uint64_t *)v519, (uint64_t *)&v518, a4, (uint64_t)v8, a6, a7, a8);
                  v8 = v507;
                  if ((_BYTE)v516)
                  {
                    v513 = v351;
                    v352 = HIDWORD(v510);
                    if (HIDWORD(v510) == (_DWORD)v510)
                    {
                      this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v513);
                      v8 = v507;
                      v352 = HIDWORD(v510);
                      *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
                    }
                    else
                    {
                      *((_QWORD *)v509 + HIDWORD(v510)) = v351;
                    }
                    HIDWORD(v510) = v352 + 1;
                  }
                }
                v354 = (uint64_t *)(v345 + 32);
                if ((*(_BYTE *)(v345 + 56) & 0x10) == 0)
                  goto LABEL_538;
                if ((*v347 & 0xFFFFFFFE) != 0)
                {
                  v362 = *(_DWORD *)v348 + 1;
                  if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= v362)
                    goto LABEL_669;
                  v354 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * v362);
LABEL_538:
                  v355 = *v354;
                  v356 = (JSC::DFG::_anonymous_namespace_::Validate *)(v355 & 0xFF00FFFFFFFFFFFFLL);
                  if ((v355 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v518 = v355 & 0xFF00FFFFFFFFFFFFLL;
                    this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v513, (uint64_t *)v519, (uint64_t *)&v518, a4, (uint64_t)v8, a6, a7, a8);
                    v8 = v507;
                    if ((_BYTE)v516)
                    {
                      v513 = v356;
                      v357 = HIDWORD(v510);
                      if (HIDWORD(v510) == (_DWORD)v510)
                      {
                        this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v513);
                        v8 = v507;
                        v357 = HIDWORD(v510);
                        *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
                      }
                      else
                      {
                        *((_QWORD *)v509 + HIDWORD(v510)) = v356;
                      }
                      HIDWORD(v510) = v357 + 1;
                    }
                  }
                  if ((*(_BYTE *)(v345 + 56) & 0x10) == 0)
                  {
                    v358 = (uint64_t *)(v345 + 40);
                    goto LABEL_546;
                  }
                  if (*v347 >= 3uLL)
                  {
                    v363 = *(_DWORD *)v348 + 2;
                    if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= v363)
                    {
LABEL_669:
                      __break(0xC471u);
LABEL_670:
                      JUMPOUT(0x1985631ECLL);
                    }
                    v358 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * v363);
LABEL_546:
                    v359 = *v358;
                    v360 = (JSC::DFG::_anonymous_namespace_::Validate *)(v359 & 0xFF00FFFFFFFFFFFFLL);
                    if ((v359 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v518 = v359 & 0xFF00FFFFFFFFFFFFLL;
                      this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v513, (uint64_t *)v519, (uint64_t *)&v518, a4, (uint64_t)v8, a6, a7, a8);
                      v8 = v507;
                      if ((_BYTE)v516)
                      {
                        v513 = v360;
                        v361 = HIDWORD(v510);
                        if (HIDWORD(v510) == (_DWORD)v510)
                        {
                          this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v513);
                          v8 = v507;
                          v361 = HIDWORD(v510);
                          *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
                        }
                        else
                        {
                          *((_QWORD *)v509 + HIDWORD(v510)) = v360;
                        }
                        HIDWORD(v510) = v361 + 1;
                      }
                    }
                    if ((*(_BYTE *)(v345 + 56) & 0x10) != 0)
                    {
                      v364 = 3;
                      do
                      {
                        if (v364 >= *v347)
                          break;
                        v365 = v364 + *v348;
                        if (*(_DWORD *)(*(_QWORD *)v8 + 164) <= v365)
                          goto LABEL_669;
                        v366 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 152) + 8 * v365);
                        v367 = (JSC::DFG::_anonymous_namespace_::Validate *)(v366 & 0xFF00FFFFFFFFFFFFLL);
                        if ((v366 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          v518 = v366 & 0xFF00FFFFFFFFFFFFLL;
                          this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v513, (uint64_t *)v519, (uint64_t *)&v518, a4, (uint64_t)v8, a6, a7, a8);
                          v8 = v507;
                          if ((_BYTE)v516)
                          {
                            v513 = v367;
                            v368 = HIDWORD(v510);
                            if (HIDWORD(v510) == (_DWORD)v510)
                            {
                              this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v513);
                              v8 = v507;
                              v368 = HIDWORD(v510);
                              *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
                            }
                            else
                            {
                              *((_QWORD *)v509 + HIDWORD(v510)) = v367;
                            }
                            HIDWORD(v510) = v368 + 1;
                          }
                        }
                        ++v364;
                      }
                      while ((*(_BYTE *)(v345 + 56) & 0x10) != 0);
                    }
                  }
                }
              }
LABEL_553:
              v344 = HIDWORD(v510);
              if (!HIDWORD(v510))
                goto LABEL_576;
              continue;
            }
            break;
          }
          v518 = *(_QWORD *)(v345 + 24) & 0xFF00FFFFFFFFFFFFLL;
          this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)v519, (uint64_t *)&v518, v16, a4, (uint64_t)v8, a6, a7, a8, (uint64_t)&v513);
          v8 = v507;
          if ((_BYTE)v516)
          {
            v353 = HIDWORD(v510);
            if (HIDWORD(v510) == (_DWORD)v510)
            {
              this = (JSC::DFG::_anonymous_namespace_::Validate *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v509, HIDWORD(v510) + 1, (unint64_t)&v518);
              v8 = v507;
              v353 = HIDWORD(v510);
              *((_QWORD *)v509 + HIDWORD(v510)) = *(_QWORD *)this;
            }
            else
            {
              *((_QWORD *)v509 + HIDWORD(v510)) = v518;
            }
            HIDWORD(v510) = v353 + 1;
          }
          goto LABEL_553;
        }
      }
LABEL_576:
      if (v519[0])
        WTF::fastFree((unint64_t)v519[0] - 16, (void *)a2, v16, a4, (uint64_t)v8, a6, a7, a8);
      v369 = v509;
      if (v509)
      {
        v509 = 0;
        LODWORD(v510) = 0;
        WTF::fastFree((unint64_t)v369, (void *)a2, v16, a4, (uint64_t)v8, a6, a7, a8);
      }
    }
  }
}

uint64_t WTF::dataLog<char [7],JSC::DFG::BasicBlock>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Block ");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a1 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::Operand,char [16]>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::PrintStream *v5;
  int v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = (WTF::PrintStream *)v4;
  if (a1[1] == 2)
  {
    v6 = *a1;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", "tmp");
    WTF::PrintStream::printf(v7, "%d", v6);
  }
  else
  {
    LODWORD(v12) = *a1;
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    JSC::VirtualRegister::dump((unsigned int *)&v12, v8);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%s", " in null Block ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::Operand,char [11],JSC::DFG::BasicBlock>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printImpl<JSC::Operand,char [11],JSC::DFG::BasicBlock>(v6, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::PrintStream::printImpl<JSC::Operand,char [11],JSC::DFG::BasicBlock>(WTF::PrintStream *a1, unsigned int a2, int a3, uint64_t a4)
{
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  unsigned int v11;

  if (a3 == 2)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v7, "%s", "tmp");
    WTF::PrintStream::printf(v7, "%d", a2);
  }
  else
  {
    v11 = a2;
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    JSC::VirtualRegister::dump(&v11, v8);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", " in Block ");
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v9, "%s", "#");
  WTF::PrintStream::printf(v9, "%u", *(_DWORD *)(a4 + 8));
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::dataLog<JSC::DFG::Node *,char [5],JSC::DFG::Edge>(uint64_t *a1, JSC::DFG::Edge *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  int v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (WTF::PrintStream *)v6;
  v8 = *a1;
  if (!*a1)
  {
    v11 = "-";
    goto LABEL_9;
  }
  v9 = *(_DWORD *)(v8 + 20);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v10, "%s", "D@");
  WTF::PrintStream::printf(v10, "%u", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  if ((*(_DWORD *)(v8 + 56) & 7) == 3)
  {
    v11 = "<Double>";
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v8 + 56) & 7) == 5)
  {
    v11 = "<Int52>";
LABEL_9:
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v12, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  WTF::PrintStream::printf(v7, "%s", " -> ");
  JSC::DFG::Edge::dump(a2, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::DFG::`anonymous namespace'::Validate::reportValidationContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return WTF::dataLog<JSC::Operand,char [11],JSC::DFG::BasicBlock,char [5],JSC::DFG::BasicBlock>((int *)&v4, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a1;
  return WTF::dataLog<JSC::DFG::Node *,char [6],JSC::Operand,char [11],JSC::DFG::BasicBlock>(&v4, (uint64_t)&v5, a2);
}

uint64_t JSC::DFG::`anonymous namespace'::Validate::reportValidationContext(JSC::DFG::_anonymous_namespace_::Validate *this, JSC::DFG::Node *a2, JSC::DFG::BasicBlock *a3)
{
  JSC::DFG::_anonymous_namespace_::Validate *v4;

  v4 = this;
  return WTF::dataLog<JSC::DFG::Node *,char [11],JSC::DFG::BasicBlock>((uint64_t *)&v4, (uint64_t)a2);
}

JSC::DFG::_anonymous_namespace_::Validate *JSC::DFG::`anonymous namespace'::Validate::checkOperand(JSC::DFG::_anonymous_namespace_::Validate *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unsigned int v10;
  JSC::DFG::BasicBlock *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  JSC::DFG::_anonymous_namespace_::Validate **v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  JSC::DFG::_anonymous_namespace_::Validate *v25;

  v5 = a5 & 0xFFFFFFFF00000000;
  if ((a5 & 0xFFFFFFFF00000000) == 0x200000000)
  {
    v6 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*(unsigned int *)(a3 + 16) + (uint64_t)(int)a5 + *(unsigned int *)(a3 + 20)));
    if (v6 == -1)
      return result;
    v7 = (int)a5 + (unint64_t)*(unsigned int *)(a4 + 16) + *(unsigned int *)(a4 + 20);
  }
  else if ((a5 & 0x80000000) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)a3 + 8 * ((a5 ^ 0xFFFFFFFFLL) + *(unsigned int *)(a3 + 16)));
    if (v6 == -1)
      return result;
    v7 = (a5 ^ 0xFFFFFFFFLL) + *(unsigned int *)(a4 + 16);
  }
  else
  {
    v8 = ((unint64_t)a5 << 32) - 0x500000000;
    v6 = *(_QWORD *)(*(_QWORD *)a3 + (v8 >> 29));
    if (v6 == -1)
      return result;
    v7 = v8 >> 32;
  }
  v9 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v7);
  if (v9 != -1 && v6 >= v9)
  {
    v10 = a5;
    v25 = result;
    if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
    {
      goto LABEL_16;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
LABEL_16:
    WTF::dataLogF((WTF *)"\n\n\nAt ", (const char *)a2);
    if (v5 == 0x200000000)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 8
                                      * (*(unsigned int *)(a3 + 16) + (uint64_t)(int)v10 + *(unsigned int *)(a3 + 20)));
      v14 = *(unsigned int *)(a2 + 220);
      if (v13 < v14)
      {
        v15 = *(_QWORD *)(a2 + 208);
        v16 = (JSC::DFG::_anonymous_namespace_::Validate **)(v15 + 8 * v13);
        v17 = *(unsigned int *)(a4 + 20);
        v18 = (int)v10 + (unint64_t)*(unsigned int *)(a4 + 16);
LABEL_24:
        v21 = v18 + v17;
LABEL_25:
        v23 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v21);
        if (v23 < v14)
        {
          WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v24, "getLocalPositions.operand(operand) < setLocalPositions.operand(operand)", "./dfg/DFGValidate.cpp", 1028);
          WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 1028, "void JSC::DFG::(anonymous namespace)::Validate::checkOperand(BasicBlock *, Operands<size_t> &, Operands<size_t> &, Operand)", (uint64_t)"getLocalPositions.operand(operand) < setLocalPositions.operand(operand)");
        }
        __break(0xC471u);
        JUMPOUT(0x19856535CLL);
      }
    }
    else if ((v10 & 0x80000000) != 0)
    {
      v18 = v10 ^ 0xFFFFFFFFLL;
      v22 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v18 + *(unsigned int *)(a3 + 16)));
      v14 = *(unsigned int *)(a2 + 220);
      if (v22 < v14)
      {
        v15 = *(_QWORD *)(a2 + 208);
        v16 = (JSC::DFG::_anonymous_namespace_::Validate **)(v15 + 8 * v22);
        v17 = *(unsigned int *)(a4 + 16);
        goto LABEL_24;
      }
    }
    else
    {
      v19 = ((unint64_t)v10 << 32) - 0x500000000;
      v20 = *(_QWORD *)(*(_QWORD *)a3 + (v19 >> 29));
      v14 = *(unsigned int *)(a2 + 220);
      if (v20 < v14)
      {
        v21 = v19 >> 32;
        v15 = *(_QWORD *)(a2 + 208);
        v16 = (JSC::DFG::_anonymous_namespace_::Validate **)(v15 + 8 * v20);
        goto LABEL_25;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198565364);
  }
  return result;
}

uint64_t *WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = ~(*a3 << 32) + *a3;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
LABEL_25:
    result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = result;
    v25 = *a2;
    if (*a2)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
    goto LABEL_17;
  }
  if (3 * v28 <= 4 * v27)
    goto LABEL_25;
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *v10 = (uint64_t)v19;
  v10[1] = v29;
  *((_BYTE *)v10 + 16) = v30;
  return result;
}

uint64_t WTF::dataLog<JSC::Operand,char [11],JSC::DFG::BasicBlock,char [5],JSC::DFG::BasicBlock>(int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  int v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v9 = (WTF::PrintStream *)v8;
  v10 = *a1;
  if (a1[1] == 2)
  {
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", "tmp");
    WTF::PrintStream::printf(v11, "%d", v10);
  }
  else
  {
    LODWORD(v18) = *a1;
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    JSC::VirtualRegister::dump((unsigned int *)&v18, v12);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  WTF::PrintStream::printf(v9, "%s", " in Block ");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v13, "%s", "#");
  WTF::PrintStream::printf(v13, "%u", *(_DWORD *)(a2 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  WTF::PrintStream::printf(v9, "%s", " -> ");
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v14, "%s", "#");
  WTF::PrintStream::printf(v14, "%u", *(_DWORD *)(a3 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<JSC::DFG::Node *,char [6],JSC::Operand,char [11],JSC::DFG::BasicBlock>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  int v11;
  WTF::PrintStream *v12;
  const char *v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v9 = (WTF::PrintStream *)v8;
  v10 = *a1;
  if (!*a1)
  {
    v13 = "-";
    goto LABEL_9;
  }
  v11 = *(_DWORD *)(v10 + 20);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v12, "%s", "D@");
  WTF::PrintStream::printf(v12, "%u", v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  if ((*(_DWORD *)(v10 + 56) & 7) == 3)
  {
    v13 = "<Double>";
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v10 + 56) & 7) == 5)
  {
    v13 = "<Int52>";
LABEL_9:
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
    WTF::PrintStream::printf(v14, "%s", v13);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  }
  WTF::PrintStream::printf(v9, "%s", " for ");
  WTF::PrintStream::printImpl<JSC::Operand,char [11],JSC::DFG::BasicBlock>(v9, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<JSC::DFG::Node *,char [11],JSC::DFG::BasicBlock>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  int v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (WTF::PrintStream *)v6;
  v8 = *a1;
  if (!*a1)
  {
    v11 = "-";
    goto LABEL_9;
  }
  v9 = *(_DWORD *)(v8 + 20);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v10, "%s", "D@");
  WTF::PrintStream::printf(v10, "%u", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  if ((*(_DWORD *)(v8 + 56) & 7) == 3)
  {
    v11 = "<Double>";
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v8 + 56) & 7) == 5)
  {
    v11 = "<Int52>";
LABEL_9:
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v12, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  WTF::PrintStream::printf(v7, "%s", " in Block ");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  WTF::PrintStream::printf(v13, "%s", "#");
  WTF::PrintStream::printf(v13, "%u", *(_DWORD *)(a2 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::DFG::`anonymous namespace'::Validate::reportValidationContext(JSC::DFG::_anonymous_namespace_::Validate *this, JSC::DFG::Node *a2, JSC::DFG::Node *a3, JSC::DFG::BasicBlock *a4)
{
  JSC::DFG::Node *v5;
  JSC::DFG::_anonymous_namespace_::Validate *v6;

  v5 = a2;
  v6 = this;
  return WTF::dataLog<JSC::DFG::Node *,char [6],JSC::DFG::Node *,char [11],JSC::DFG::BasicBlock>((uint64_t *)&v6, (uint64_t *)&v5, (uint64_t)a3);
}

uint64_t WTF::dataLog<JSC::DFG::Node *,char [6],JSC::DFG::Node *,char [11],JSC::DFG::BasicBlock>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  int v11;
  WTF::PrintStream *v12;
  const char *v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  int v16;
  WTF::PrintStream *v17;
  const char *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  char v22;
  char **v23;
  char *v24;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v9 = (WTF::PrintStream *)v8;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 + 20);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v12, "%s", "D@");
    WTF::PrintStream::printf(v12, "%u", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
    if ((*(_DWORD *)(v10 + 56) & 7) == 3)
    {
      v13 = "<Double>";
    }
    else
    {
      if ((*(_DWORD *)(v10 + 56) & 7) != 5)
        goto LABEL_10;
      v13 = "<Int52>";
    }
  }
  else
  {
    v13 = "-";
  }
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v14, "%s", v13);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
LABEL_10:
  WTF::PrintStream::printf(v9, "%s", " and ");
  v15 = *a2;
  if (!*a2)
  {
    v18 = "-";
    goto LABEL_16;
  }
  v16 = *(_DWORD *)(v15 + 20);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v17, "%s", "D@");
  WTF::PrintStream::printf(v17, "%u", v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  if ((*(_DWORD *)(v15 + 56) & 7) == 3)
  {
    v18 = "<Double>";
    goto LABEL_16;
  }
  if ((*(_DWORD *)(v15 + 56) & 7) == 5)
  {
    v18 = "<Int52>";
LABEL_16:
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
    WTF::PrintStream::printf(v19, "%s", v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  }
  WTF::PrintStream::printf(v9, "%s", " in Block ");
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v20, "%s", "#");
  WTF::PrintStream::printf(v20, "%u", *(_DWORD *)(a3 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

JSC::DFG *JSC::DFG::`anonymous namespace'::Validate::validateSSA(void)::{lambda(JSC::DFG::Edge)#1}::operator()(JSC::DFG *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  JSC::DFG::_anonymous_namespace_::Validate *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  JSC::DFG *v18;
  const char *v19;
  JSC::DFG::Node *v20;
  const char *v21;

  v2 = *(unsigned int *)(**((_QWORD **)result + 1) + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v3 <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x198565EC0);
  }
  v4 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v5 = *(unsigned int *)(*(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x60) + 8);
  if (v3 <= v5)
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198565EB8);
  }
  v6 = (JSC::DFG::_anonymous_namespace_::Validate *)*((_QWORD *)result + 3);
  v7 = *(_QWORD *)(*(_QWORD *)result + 8);
  v8 = v7 + 32 * v2;
  v9 = v7 + 32 * v5;
  if (*(_DWORD *)(v8 + 24) <= *(_DWORD *)(v9 + 24) || *(_DWORD *)(v8 + 28) >= *(_DWORD *)(v9 + 28))
  {
    v10 = **((_QWORD **)result + 2);
    if (!v10)
    {
LABEL_11:
      v18 = result;
      JSC::DFG::startCrashing(result);
      WTF::dataLogF((WTF *)"\n\n\nAt ", v19);
      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v21, "dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())", "./dfg/DFGValidate.cpp", 989);
      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 989, "auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(Edge) const", (uint64_t)"dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())");
      __break(0xC471u);
      goto LABEL_14;
    }
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (v4 + ~(a2 << 32)) ^ ((v4 + ~(a2 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 8 * v15);
    if (v16 != v4)
    {
      v17 = 1;
      while (v16)
      {
        v15 = (v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 8 * v15);
        ++v17;
        if (v16 == v4)
          return result;
      }
      goto LABEL_11;
    }
  }
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#2},JSC::DFG::`anonymous namespace'::Validate::validate(void)::DefLambdaAdaptor,void JSC::DFG::clobberize<JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#2},JSC::DFG::`anonymous namespace'::Validate::validate(void)::DefLambdaAdaptor>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#1} const&,JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::AbstractHeap)#2} const&,JSC::DFG::`anonymous namespace'::Validate::validate(void)::DefLambdaAdaptor const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int16 v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  __int16 v94;
  unint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  __int16 v107;
  int v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  __int16 v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  unsigned int *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL4 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  BOOL v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  unsigned __int8 v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __int128 *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void (*v260)(void);
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unsigned int v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  BOOL v275;
  int v276;
  unsigned int v277;
  int v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int *v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  unsigned int v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int *v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  __int128 *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  const char *v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v402;
  int v404;
  int v406;
  int v408;
  char v410;
  int v411;
  uint64_t v412;
  unsigned int *v413;
  uint64_t v414;
  _OWORD v415[4];
  _BYTE v416[30];
  _BYTE v417[30];
  _BYTE v418[30];
  _BYTE v419[30];
  uint64_t v420;

  v420 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
    goto LABEL_15;
  v11 = *((unsigned __int16 *)a2 + 9);
  if (v11 <= 0xC9)
  {
    v14 = v11 - 101;
    if (v11 - 101 > 0x3E)
      goto LABEL_32;
    if (((1 << v14) & 0x7E0070000000000FLL) != 0)
      return;
    if (((1 << v14) & 0x18000000000) == 0)
    {
LABEL_32:
      if (v11 - 92 >= 2)
        goto LABEL_33;
      return;
    }
LABEL_15:
    v15 = *((unsigned __int16 *)a2 + 9);
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
        v44 = *((_QWORD *)a2 + 9);
        goto LABEL_57;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xC:
      case 0xE:
      case 0x12:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x4B:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0xA7:
      case 0xA8:
      case 0xAA:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB5:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x108:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x129:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x144:
      case 0x147:
      case 0x14A:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x166:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17B:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x181:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x196:
      case 0x19B:
      case 0x1A1:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1AD:
      case 0x1B0:
        return;
      case 0xB:
        v59 = a3[1];
        LODWORD(v415[0]) = 36;
        v72 = 98306;
        goto LABEL_230;
      case 0xD:
        v167 = *((_QWORD *)a2 + 9);
        if (v167)
        {
          v333 = (HIDWORD(*(_QWORD *)(v167 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v167 + 24) >> 28) >> 24 << 20)) + 4;
          v72 = ((unint64_t)v333 << 15) | ((unint64_t)(v333 >> 31) << 47) | 2;
        }
        else
        {
          v72 = 131074;
        }
        v59 = a3[1];
        v73 = 37;
        goto LABEL_229;
      case 0xF:
        v157 = (_QWORD *)*((_QWORD *)a2 + 9);
        v158 = v157;
        do
        {
          v159 = v158;
          v158 = (_QWORD *)*v158;
        }
        while (v158);
        if (v159 != v157)
        {
          *v157 = v159;
          v157 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v160 = v157;
        do
        {
          v161 = v160;
          v160 = (_QWORD *)*v160;
        }
        while (v160);
        if (v161 != v157)
          *v157 = v161;
        v155 = v161[3];
        goto LABEL_215;
      case 0x10:
        v224 = (_QWORD *)*((_QWORD *)a2 + 9);
        v225 = v224;
        do
        {
          v226 = v225;
          v225 = (_QWORD *)*v225;
        }
        while (v225);
        if (v226 != v224)
        {
          *v224 = v226;
          v224 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v227 = v224;
        do
        {
          v228 = v227;
          v227 = (_QWORD *)*v227;
        }
        while (v227);
        if (v228 != v224)
          *v224 = v228;
        v181 = v228[3];
        goto LABEL_325;
      case 0x11:
        v181 = **((_QWORD **)a2 + 9);
LABEL_325:
        v141 = (v181 << 15) | 2;
        v118 = a3[1];
        v142 = 36;
        goto LABEL_326;
      case 0x13:
        v155 = **((_QWORD **)a2 + 9);
LABEL_215:
        v72 = (v155 << 15) | 2;
        v59 = a3[1];
        v73 = 36;
        goto LABEL_229;
      case 0x1C:
        v184 = (_QWORD *)*((_QWORD *)a2 + 9);
        v185 = v184;
        do
        {
          v186 = v185;
          v185 = (_QWORD *)*v185;
        }
        while (v185);
        if (v186 != v184)
          *v184 = v186;
        return;
      case 0x1E:
        v92 = *((unsigned int *)a2 + 18);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 30;
        goto LABEL_314;
      case 0x28:
        v59 = a3[1];
        LODWORD(v415[0]) = 23;
        v72 = 16422;
        goto LABEL_230;
      case 0x29:
        v223 = *((_QWORD *)a2 + 3);
        if (((v223 >> 50) & 0x3F) - 26 > 2)
          return;
        v122 = v223 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 41;
        goto LABEL_354;
      case 0x2A:
        v222 = *((_QWORD *)a2 + 3);
        if ((v222 & 0xFC000000000000) == 0)
          return;
        v122 = v222 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 42;
        goto LABEL_354;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v18 = *((_QWORD *)a2 + 3);
        v19 = (v18 >> 50) & 0x3F;
        switch((_DWORD)v19)
        {
          case 0x1A:
            v20 = *((_QWORD *)a2 + 4);
            v21 = v20 & 0xFC000000000000;
            v22 = 0x68000000000000;
            break;
          case 0x1C:
            v20 = *((_QWORD *)a2 + 4);
            v21 = v20 & 0xFC000000000000;
            v22 = 0x70000000000000;
            break;
          case 0x1B:
            v20 = *((_QWORD *)a2 + 4);
            v21 = v20 & 0xFC000000000000;
            v22 = 0x6C000000000000;
            break;
          default:
            return;
        }
        if (v21 == v22)
          goto LABEL_105;
        return;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        v18 = *((_QWORD *)a2 + 3);
        if ((v18 & 0xFC000000000000) != 0)
          goto LABEL_27;
        return;
      case 0x36:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x43:
      case 0x4A:
      case 0x5B:
      case 0x86:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xBB:
      case 0xBC:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xF0:
      case 0x128:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x14B:
      case 0x14C:
      case 0x17C:
      case 0x19C:
      case 0x19D:
        v16 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        LOWORD(v415[0]) = v15;
        *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *((_QWORD *)&v415[1] + 1) = v16;
        goto LABEL_386;
      case 0x37:
      case 0x39:
      case 0x3E:
      case 0x45:
        v44 = *((unsigned int *)a2 + 18);
LABEL_57:
        v46 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        LOWORD(v415[0]) = *((_WORD *)a2 + 9);
        *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *((_QWORD *)&v415[1] + 1) = v46;
        goto LABEL_350;
      case 0x3F:
        v121 = *((_QWORD *)a2 + 3);
        if (((v121 >> 50) & 0x3F) - 1 > 1)
          return;
        v122 = v121 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 63;
        goto LABEL_354;
      case 0x40:
      case 0x42:
      case 0x44:
        v25 = *((_QWORD *)a2 + 3);
        v45 = (v25 >> 50) & 0x3F;
        if (((v25 >> 50) & 0x3F) > 0x30)
        {
          if ((_DWORD)v45 != 52 && (_DWORD)v45 != 49)
            goto LABEL_739;
        }
        else
        {
          if (!(_DWORD)v45)
            return;
          if ((_DWORD)v45 != 1)
          {
LABEL_739:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x198568D64);
          }
        }
        v26 = *((unsigned int *)a2 + 18);
LABEL_102:
        v17 = *a3;
        LOWORD(v415[0]) = *((_WORD *)a2 + 9);
        *((_QWORD *)&v415[0] + 1) = v25 & 0xFFFCFFFFFFFFFFFFLL;
        v415[1] = vandq_s8(*((int8x16_t *)a2 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *(_QWORD *)&v415[2] = v26;
LABEL_351:
        *((_QWORD *)&v415[2] + 1) = 0;
LABEL_386:
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 16))(v17, v415);
        return;
      case 0x41:
        v129 = *((_QWORD *)a2 + 3);
        v130 = (v129 >> 50) & 0x3F;
        v97 = v130 > 0x34;
        v131 = (1 << v130) & 0x12000000000002;
        if (v97 || v131 == 0)
          return;
        v44 = *((unsigned int *)a2 + 18);
        v133 = v129 & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v134 = 65;
        goto LABEL_349;
      case 0x46:
        v237 = *((_QWORD *)a2 + 3);
        v238 = (v237 >> 50) & 0x3F;
        if ((_DWORD)v238 != 49 && (_DWORD)v238 != 1)
          return;
        v44 = *((unsigned int *)a2 + 18);
        v133 = v237 & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v134 = 70;
        goto LABEL_349;
      case 0x47:
      case 0x48:
        *(_OWORD *)&v419[6] = *(_OWORD *)((char *)a2 + 24);
        *(_QWORD *)&v419[22] = *((_QWORD *)a2 + 5);
        v17 = *a3;
        LOWORD(v415[0]) = v15;
        *(_OWORD *)((char *)v415 + 2) = *(_OWORD *)v419;
        v75 = *(_OWORD *)&v419[14];
        goto LABEL_267;
      case 0x49:
      case 0x50:
        v74 = *((_QWORD *)a2 + 3);
        if ((v74 & 0xFC000000000000) == 0xC4000000000000)
          goto LABEL_96;
        return;
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
        v25 = *((_QWORD *)a2 + 3);
        if ((v25 & 0xFC000000000000) != 0xC4000000000000)
          return;
        v26 = *((int *)a2 + 18);
        goto LABEL_102;
      case 0x51:
        v172 = *((_QWORD *)a2 + 3);
        if ((v172 & 0xFC000000000000) != 0xC4000000000000)
          return;
        v44 = *((unsigned int *)a2 + 18);
        v133 = v172 & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v134 = 81;
LABEL_349:
        LOWORD(v415[0]) = v134;
        *((_QWORD *)&v415[0] + 1) = v133;
        v415[1] = vandq_s8(*((int8x16_t *)a2 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        goto LABEL_350;
      case 0x52:
      case 0x53:
        v61 = *((_QWORD *)a2 + 3);
        v63 = (v61 >> 50) & 0x3F;
        if (v63 > 0x34)
          goto LABEL_490;
        if (((1 << v63) & 0x1200001C000002) != 0)
          goto LABEL_75;
        if (v63)
        {
LABEL_490:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198567F9CLL);
        }
        return;
      case 0x5C:
      case 0x5D:
        v47 = *((unsigned int *)a2 + 18);
        v48 = *((_DWORD *)a2 + 14) & 7;
        if (v48 >= 2)
        {
          switch(v48)
          {
            case 3u:
              v49 = 13;
              break;
            case 4u:
              v49 = 17;
              break;
            case 5u:
              v49 = 19;
              break;
            case 7u:
              __break(0xC471u);
              JUMPOUT(0x198568BF4);
            default:
              __break(0xC471u);
              JUMPOUT(0x198568C24);
          }
        }
        else
        {
          v49 = 21;
        }
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 0xAu:
          case 0xBu:
          case 0x17u:
          case 0x18u:
            return;
          case 5u:
            if (BYTE2(v47) - 3 < 2)
              return;
            *(_OWORD *)&v417[6] = *(_OWORD *)((char *)a2 + 24);
            *(_QWORD *)&v417[22] = *((_QWORD *)a2 + 5);
            v17 = *a3;
            LOWORD(v415[0]) = v15;
            *(_OWORD *)((char *)v415 + 2) = *(_OWORD *)v417;
            v415[1] = *(_OWORD *)&v417[14];
            *(_QWORD *)&v415[2] = v47;
            goto LABEL_268;
          case 6u:
            *(_OWORD *)&v416[6] = *(_OWORD *)((char *)a2 + 24);
            *(_QWORD *)&v416[22] = *((_QWORD *)a2 + 5);
            v17 = *a3;
            LOWORD(v415[0]) = v15;
            *(_OWORD *)((char *)v415 + 2) = *(_OWORD *)v416;
            v75 = *(_OWORD *)&v416[14];
            goto LABEL_267;
          case 7u:
            if (BYTE2(v47) > 3u || BYTE2(v47) == 2)
              return;
            if (BYTE2(v47) == 3)
              v276 = 18;
            else
              v276 = v49;
            v359 = *((_QWORD *)a2 + 3);
            v360 = *((_DWORD *)this + 41);
            if (v360 <= v359)
            {
              __break(0xC471u);
              JUMPOUT(0x198569A08);
            }
            v361 = v359 + 1;
            if (v360 <= (int)v359 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198569A10);
            }
            v362 = *((_QWORD *)this + 19);
            v283 = *(_QWORD *)(v362 + 8 * *((_QWORD *)a2 + 3));
            v153 = *(_QWORD *)(v362 + 8 * v361) & 0xFF00FFFFFFFFFFFFLL;
            if (!v153)
              goto LABEL_590;
            v284 = *(unsigned __int16 *)((*(_QWORD *)(v362 + 8 * v361) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v284 > 2)
              goto LABEL_590;
            v57 = *(_QWORD *)(v153 + 72);
            if (!(_DWORD)v284)
              goto LABEL_591;
            if ((_DWORD)v284 == 1)
              goto LABEL_713;
            goto LABEL_748;
          case 8u:
            if (BYTE2(v47) >= 2u)
            {
              if (BYTE2(v47) != 3)
                return;
              if (v48 == 3)
              {
LABEL_630:
                if (BYTE2(v47) == 3)
                  v276 = 15;
                else
                  v276 = 13;
LABEL_652:
                v388 = *((_QWORD *)a2 + 3);
                v389 = *((_DWORD *)this + 41);
                if (v389 <= v388)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198569A18);
                }
                v390 = v388 + 1;
                if (v389 <= (int)v388 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198569A20);
                }
                v391 = *((_QWORD *)this + 19);
                v289 = *(_QWORD *)(v391 + 8 * *((_QWORD *)a2 + 3));
                v153 = *(_QWORD *)(v391 + 8 * v390) & 0xFF00FFFFFFFFFFFFLL;
                if (v153
                  && (v290 = *(unsigned __int16 *)((*(_QWORD *)(v391 + 8 * v390) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                      v290 <= 2))
                {
                  v57 = *(_QWORD *)(v153 + 72);
                  if ((_DWORD)v290)
                  {
                    if ((_DWORD)v290 != 1)
LABEL_749:
                      v290 = 2;
LABEL_716:
                    v57 |= v290;
                  }
                }
                else
                {
LABEL_656:
                  v57 = 0;
                }
LABEL_657:
                v231 = v289 & 0xFF00FFFFFFFFFFFFLL;
                v59 = a3[1];
                LODWORD(v415[0]) = v276;
                v229 = 16401;
LABEL_335:
                *((_QWORD *)&v415[0] + 1) = v229;
                *(_QWORD *)&v415[1] = v231;
LABEL_336:
                *((_QWORD *)&v415[1] + 1) = v153;
LABEL_337:
                *(_QWORD *)&v415[2] = v57;
LABEL_374:
                *((_QWORD *)&v415[2] + 1) = 0;
                *(_QWORD *)&v415[3] = 0;
LABEL_391:
                v260 = *(void (**)(void))(*(_QWORD *)v59 + 16);
                goto LABEL_420;
              }
            }
            else if (v48 == 3)
            {
              if (!BYTE2(v47))
              {
                v276 = 14;
                goto LABEL_652;
              }
              goto LABEL_630;
            }
            v276 = 16;
            goto LABEL_652;
          case 9u:
            if (BYTE2(v47) > 3u || BYTE2(v47) == 2)
              return;
            if (BYTE2(v47) == 3)
              v276 = 20;
            else
              v276 = v49;
            v349 = *((_QWORD *)a2 + 3);
            v350 = *((_DWORD *)this + 41);
            if (v350 <= v349)
            {
              __break(0xC471u);
              JUMPOUT(0x1985699F8);
            }
            v351 = v349 + 1;
            if (v350 <= (int)v349 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198569A00);
            }
            v352 = *((_QWORD *)this + 19);
            v295 = *(_QWORD *)(v352 + 8 * *((_QWORD *)a2 + 3));
            v153 = *(_QWORD *)(v352 + 8 * v351) & 0xFF00FFFFFFFFFFFFLL;
            if (!v153)
              goto LABEL_569;
            v296 = *(unsigned __int16 *)((*(_QWORD *)(v352 + 8 * v351) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v296 > 2)
              goto LABEL_569;
            v57 = *(_QWORD *)(v153 + 72);
            if (!(_DWORD)v296)
              goto LABEL_570;
            if ((_DWORD)v296 == 1)
              goto LABEL_710;
            goto LABEL_747;
          case 0xCu:
            if (BYTE2(v47) > 1u)
              return;
            v353 = *((_QWORD *)a2 + 3);
            v354 = *((_DWORD *)this + 41);
            if (v354 <= v353)
            {
              __break(0xC471u);
              JUMPOUT(0x198569A48);
            }
            v355 = v353 + 1;
            if (v354 <= (int)v353 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198569A50);
            }
            v356 = *((_QWORD *)this + 19);
            v357 = *(_QWORD *)(v356 + 8 * *((_QWORD *)a2 + 3));
            v55 = *(_QWORD *)(v356 + 8 * v355) & 0xFF00FFFFFFFFFFFFLL;
            if (v55
              && (v358 = *(unsigned __int16 *)((*(_QWORD *)(v356 + 8 * v355) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v358 <= 2))
            {
              v57 = *(_QWORD *)(v55 + 72);
              if ((_DWORD)v358)
              {
                if ((_DWORD)v358 != 1)
                  v358 = 2;
                v57 |= v358;
              }
            }
            else
            {
              v57 = 0;
            }
            v58 = v357 & 0xFF00FFFFFFFFFFFFLL;
            v59 = a3[1];
            LODWORD(v415[0]) = v49;
            v60 = 16404;
            goto LABEL_68;
          case 0xDu:
            v363 = *((_QWORD *)a2 + 3);
            v364 = *((_DWORD *)this + 41);
            if (v364 <= v363)
            {
              __break(0xC471u);
              JUMPOUT(0x1985699E0);
            }
            v365 = v363 + 1;
            if (v364 <= (int)v363 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1985699E8);
            }
            v366 = *((_QWORD *)this + 19);
            v367 = *(_QWORD *)(v366 + 8 * *((_QWORD *)a2 + 3));
            v55 = *(_QWORD *)(v366 + 8 * v365) & 0xFF00FFFFFFFFFFFFLL;
            if (v55
              && (v368 = *(unsigned __int16 *)((*(_QWORD *)(v366 + 8 * v365) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v368 <= 2))
            {
              v57 = *(_QWORD *)(v55 + 72);
              if ((_DWORD)v368)
              {
                if ((_DWORD)v368 != 1)
                  v368 = 2;
                v57 |= v368;
              }
            }
            else
            {
              v57 = 0;
            }
            v58 = v367 & 0xFF00FFFFFFFFFFFFLL;
            v59 = a3[1];
            LODWORD(v415[0]) = v49;
            v60 = 16405;
            goto LABEL_68;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
            if ((v47 & 0x40000000) != 0)
              return;
            v50 = *((_QWORD *)a2 + 3);
            v51 = *((_DWORD *)this + 41);
            if (v51 <= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x198569934);
            }
            v52 = v50 + 1;
            if (v51 <= (int)v50 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856993CLL);
            }
            v53 = *((_QWORD *)this + 19);
            v54 = *(_QWORD *)(v53 + 8 * *((_QWORD *)a2 + 3));
            v55 = *(_QWORD *)(v53 + 8 * v52) & 0xFF00FFFFFFFFFFFFLL;
            if (v55
              && (v56 = *(unsigned __int16 *)((*(_QWORD *)(v53 + 8 * v52) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v56 <= 2))
            {
              v57 = *(_QWORD *)(v55 + 72);
              if ((_DWORD)v56)
              {
                if ((_DWORD)v56 != 1)
                  v56 = 2;
                v57 |= v56;
              }
            }
            else
            {
              v57 = 0;
            }
            v58 = v54 & 0xFF00FFFFFFFFFFFFLL;
            v59 = a3[1];
            LODWORD(v415[0]) = v49;
            v60 = 16406;
LABEL_68:
            *((_QWORD *)&v415[0] + 1) = v60;
            *(_QWORD *)&v415[1] = v58;
            *((_QWORD *)&v415[1] + 1) = v55;
            goto LABEL_337;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x198568FF0);
          default:
            __break(0xC471u);
            JUMPOUT(0x198568FA8);
        }
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v27 = *((_QWORD *)a2 + 3);
        v28 = *((_DWORD *)this + 41);
        if (v28 <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198569470);
        }
        if (v28 <= (int)v27 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198569478);
        }
        if (v28 <= (int)v27 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198569480);
        }
        v29 = *((_QWORD *)this + 19);
        v30 = *(_QWORD *)(v29 + 8 * *((_QWORD *)a2 + 3));
        v31 = *(_QWORD *)(v29 + 8 * (v27 + 1));
        v32 = *((_DWORD *)a2 + 18);
        v33 = *(_QWORD *)(v29 + 8 * (v27 + 2));
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v34 = 13;
              break;
            case 4:
              v34 = 17;
              break;
            case 5:
              v34 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198568BA4);
            default:
              __break(0xC471u);
              JUMPOUT(0x198568BD4);
          }
        }
        else
        {
          v34 = 21;
        }
        break;
      case 0x8A:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 4;
        v69 = 16396;
        goto LABEL_389;
      case 0x8B:
        v187 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        LODWORD(v415[0]) = 4;
        v188 = 16396;
        goto LABEL_380;
      case 0x93:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v140 = 22;
        goto LABEL_388;
      case 0x94:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 148;
        goto LABEL_385;
      case 0x95:
        v92 = *((_QWORD *)a2 + 9);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 149;
        goto LABEL_314;
      case 0x96:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 9;
        v69 = 16390;
        goto LABEL_389;
      case 0x97:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 30;
        v69 = 16391;
        goto LABEL_389;
      case 0x98:
      case 0x99:
        v65 = (unsigned int *)*((_QWORD *)a2 + 9);
        v66 = ((unint64_t)v65[1] << 15) | 0xF;
        v67 = *((_DWORD *)this + 238);
        v68 = *((_QWORD *)a2 + 4);
        goto LABEL_182;
      case 0x9A:
        v65 = (unsigned int *)*((_QWORD *)a2 + 9);
        v66 = ((unint64_t)*v65 << 15) | 0xF;
        v67 = *((_DWORD *)this + 238);
        v68 = *((_QWORD *)a2 + 3);
LABEL_182:
        v139 = v68 & 0xFF00FFFFFFFFFFFFLL;
        if (v67 >= 2)
        {
          v415[2] = 0uLL;
          v59 = a3[1];
          LODWORD(v415[0]) = 28;
          *((_QWORD *)&v415[0] + 1) = v66;
          v415[1] = v139;
          *(_QWORD *)&v415[3] = v65;
          goto LABEL_391;
        }
        v59 = a3[1];
        LODWORD(v415[0]) = 28;
        *((_QWORD *)&v415[0] + 1) = v66;
        *(_QWORD *)&v415[1] = v139;
        goto LABEL_390;
      case 0x9B:
        v115 = *((_QWORD *)a2 + 9);
        v116 = ((unint64_t)*(unsigned int *)(v115 + 4) << 15) | 0xF;
        v117 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (*((int *)this + 238) >= 2)
        {
          v118 = a3[1];
          LODWORD(v415[0]) = 28;
          *((_QWORD *)&v415[0] + 1) = v116;
          v415[1] = v117;
          v415[2] = 0uLL;
          *(_QWORD *)&v415[3] = v115;
          goto LABEL_419;
        }
        v118 = a3[1];
        v170 = 28;
LABEL_415:
        LODWORD(v415[0]) = v170;
        *((_QWORD *)&v415[0] + 1) = v116;
        *(_QWORD *)&v415[1] = v117;
        goto LABEL_418;
      case 0x9C:
        v143 = (unsigned int *)*((_QWORD *)a2 + 9);
        v144 = ((unint64_t)*v143 << 15) | 0xF;
        v145 = v143[5];
        v146 = (v145 << 6) - 64;
        do
        {
          if (!v145)
            break;
          if (--v145 >= (unint64_t)v143[5])
          {
            __break(0xC471u);
            JUMPOUT(0x198569814);
          }
          v147 = v146 - 64;
          v148 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*((_QWORD *)v143 + 1) + v146));
          v146 = v147;
        }
        while (!v148);
        v149 = *((_QWORD *)a2 + 3);
        if (*((int *)this + 238) < 2)
        {
          v187 = v149 & 0xFF00FFFFFFFFFFFFLL;
          v118 = a3[1];
          LODWORD(v415[0]) = 28;
          *((_QWORD *)&v415[0] + 1) = v144;
LABEL_417:
          *(_QWORD *)&v415[1] = v187;
LABEL_418:
          memset((char *)&v415[1] + 8, 0, 32);
        }
        else
        {
          v150 = *((_QWORD *)a2 + 9);
          v118 = a3[1];
          LODWORD(v415[0]) = 28;
          *((_QWORD *)&v415[0] + 1) = v144;
          v415[1] = v149 & 0xFF00FFFFFFFFFFFFLL;
          v415[2] = 0uLL;
          *(_QWORD *)&v415[3] = v150;
        }
LABEL_419:
        v260 = *(void (**)(void))(*(_QWORD *)v118 + 16);
        goto LABEL_420;
      case 0x9D:
        JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
        return;
      case 0x9E:
        v102 = *((unsigned int *)a2 + 18);
        switch(*((_DWORD *)a2 + 18))
        {
          case 3u:
            return;
          case 5u:
            v348 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
            v17 = *a3;
            LOWORD(v415[0]) = 158;
            *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
            *((_QWORD *)&v415[1] + 1) = v348;
            goto LABEL_119;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
            v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
            v59 = a3[1];
            LODWORD(v415[0]) = 1;
            v69 = 16388;
            goto LABEL_389;
          case 0xCu:
          case 0xDu:
            v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
            v59 = a3[1];
            v140 = 1;
            goto LABEL_388;
          case 0x19u:
            goto LABEL_759;
          default:
            v400 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
            if (v400 == 12 || v400 == 0)
            {
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
              __break(0xC471u);
              JUMPOUT(0x198569A98);
            }
LABEL_759:
            if ((v102 & 0x40000000) != 0)
              return;
            v345 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
            v346 = a3[1];
            v347 = 1;
            break;
        }
        goto LABEL_520;
      case 0x9F:
        v102 = *((unsigned int *)a2 + 18);
        v103 = *((_DWORD *)a2 + 18);
        if (v103 != 25)
        {
          v402 = JSC::DFG::toTypedArrayType(v103);
          if (v402 == 12 || v402 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x1985697A8);
          }
        }
        if ((v102 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x198568CDCLL);
        }
        v104 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        LOWORD(v415[0]) = *((_WORD *)a2 + 9);
        *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *((_QWORD *)&v415[1] + 1) = v104;
LABEL_119:
        *(_QWORD *)&v415[2] = v102;
        goto LABEL_351;
      case 0xA0:
        v164 = *((_DWORD *)a2 + 18);
        v165 = HIBYTE(*((_DWORD *)a2 + 18));
        if (v164 == 25)
        {
          if ((v165 & 0x40) != 0)
            return;
          v166 = *((_QWORD *)a2 + 3);
        }
        else
        {
          v406 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
          if (v406 == 12 || v406 == 0)
          {
            if (v164 != 3)
            {
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
              __break(0xC471u);
              JUMPOUT(0x198569878);
            }
            return;
          }
          if (v164 == 3 || (v165 & 0x40) != 0)
            return;
          v166 = *((_QWORD *)a2 + 3);
        }
        v345 = v166 & 0xFF00FFFFFFFFFFFFLL;
        v346 = a3[1];
        v347 = 34;
        goto LABEL_520;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x198568CFCLL);
        }
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 3;
        v69 = 16389;
        goto LABEL_389;
      case 0xA2:
        v261 = *((_DWORD *)a2 + 18);
        v262 = v261;
        if (v261 == 25)
          goto LABEL_382;
        v408 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v408 == 12 || v408 == 0)
        {
          if (v262 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198569904);
          }
        }
        else if (v262 != 3)
        {
          v261 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_382:
          if ((v261 & 0x40000000) == 0)
          {
            v345 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
            v346 = a3[1];
            v347 = 32;
            goto LABEL_520;
          }
        }
        return;
      case 0xA3:
        v108 = *((_DWORD *)a2 + 18);
        v109 = v108;
        if (v108 == 25)
          goto LABEL_128;
        v404 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v404 == 12 || v404 == 0)
        {
          if (v109 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19856980CLL);
          }
          return;
        }
        if (v109 == 3)
          return;
        v108 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_128:
        if ((v108 & 0x40000000) != 0)
          return;
        v345 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v346 = a3[1];
        v347 = 33;
LABEL_520:
        LODWORD(v415[0]) = v347;
        *((_QWORD *)&v415[0] + 1) = 16423;
        *(_QWORD *)&v415[1] = v345;
        memset((char *)&v415[1] + 8, 0, 32);
        v260 = *(void (**)(void))(*(_QWORD *)v346 + 16);
        goto LABEL_420;
      case 0xA4:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 164;
        goto LABEL_385;
      case 0xAB:
        v89 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x15;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 7;
        goto LABEL_260;
      case 0xAC:
        v116 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x15;
        v117 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        v170 = 7;
        goto LABEL_415;
      case 0xAD:
      case 0xAE:
        v72 = (*((_QWORD *)a2 + 9) << 15) | 0x24;
        v59 = a3[1];
        v73 = 10;
LABEL_229:
        LODWORD(v415[0]) = v73;
LABEL_230:
        *((_QWORD *)&v415[0] + 1) = v72;
        memset(&v415[1], 0, 32);
        goto LABEL_231;
      case 0xAF:
        v141 = (*((_QWORD *)a2 + 9) << 15) | 0x24;
        v118 = a3[1];
        v142 = 10;
LABEL_326:
        LODWORD(v415[0]) = v142;
        *((_QWORD *)&v415[0] + 1) = v141;
        memset(&v415[1], 0, 40);
        goto LABEL_419;
      case 0xB3:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 29;
        v69 = 16398;
        goto LABEL_389;
      case 0xB4:
        v187 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        LODWORD(v415[0]) = 29;
        v188 = 16398;
LABEL_380:
        *((_QWORD *)&v415[0] + 1) = v188;
        goto LABEL_417;
      case 0xB6:
        v44 = *((_QWORD *)a2 + 9);
        v106 = *((_QWORD *)a2 + 3) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v107 = 182;
        goto LABEL_249;
      case 0xB7:
        v138 = *((_QWORD *)a2 + 3) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        LOWORD(v415[0]) = 183;
        *((_QWORD *)&v415[0] + 1) = v138;
        memset(&v415[1], 0, 32);
        goto LABEL_386;
      case 0xBD:
        v44 = *((_QWORD *)a2 + 9);
        v106 = *((_QWORD *)a2 + 3) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v107 = 189;
LABEL_249:
        LOWORD(v415[0]) = v107;
        *((_QWORD *)&v415[0] + 1) = v106;
        v415[1] = 0uLL;
LABEL_350:
        *(_QWORD *)&v415[2] = v44;
        goto LABEL_351;
      case 0xBE:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v105 = 5;
        goto LABEL_125;
      case 0xBF:
      case 0xC0:
        v77 = *((_QWORD *)a2 + 9);
        v78 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        LOWORD(v415[0]) = *((_WORD *)a2 + 9);
        *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *((_QWORD *)&v415[1] + 1) = v78;
        *(_QWORD *)&v415[2] = v77;
        goto LABEL_351;
      case 0xC1:
        v95 = *((_QWORD *)a2 + 3);
        v96 = (v95 >> 50) & 0x3F;
        v97 = v96 > 0x31;
        v98 = (1 << v96) & 0x2000000200002;
        if (v97 || v98 == 0)
          return;
        v100 = *((_QWORD *)a2 + 4);
        if ((v100 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v100 & 0xFC000000000000) != 0x4000000000000)
          return;
        v101 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        LOWORD(v415[0]) = 193;
        *((_QWORD *)&v415[0] + 1) = v95 & 0xFFFCFFFFFFFFFFFFLL;
        *(_QWORD *)&v415[1] = v100 & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v101;
        goto LABEL_386;
      case 0xC2:
        v189 = *((_QWORD *)a2 + 3);
        if (((v189 >> 50) & 0x3F) - 12 > 2)
          return;
        v70 = v189 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 35;
        v69 = 16399;
        goto LABEL_389;
      case 0xC4:
        v162 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v162)
          v163 = (_DWORD)v162 == 11;
        else
          v163 = 1;
        if (!v163)
        {
          __break(0xC471u);
          JUMPOUT(0x198566DF8);
        }
        return;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        v23 = v15 - 202;
        if (v23 >= 0xA || ((0x3EFu >> v23) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198568B84);
        }
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0
          && *((_DWORD *)this + 41) <= (dword_199156668[(__int16)v23] + *((_DWORD *)a2 + 6)))
        {
          __break(0xC471u);
          JUMPOUT(0x198566084);
        }
        return;
      case 0xCE:
        v182 = (_QWORD *)((char *)a2 + 24);
        v183 = (_QWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          if (*((_DWORD *)this + 41) <= *v182)
          {
            __break(0xC471u);
            JUMPOUT(0x1985699F0);
          }
          v183 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * *v182);
        }
        if ((*v183 & 0xFC000000000000) != 0x4000000000000)
          return;
        *(_QWORD *)&v418[22] = *((_QWORD *)a2 + 5);
        *(_OWORD *)&v418[6] = *(_OWORD *)v182;
        v17 = *a3;
        LOWORD(v415[0]) = 206;
        *(_OWORD *)((char *)v415 + 2) = *(_OWORD *)v418;
        v75 = *(_OWORD *)&v418[14];
LABEL_267:
        v415[1] = v75;
        *(_QWORD *)&v415[2] = 0;
LABEL_268:
        *((_QWORD *)&v415[2] + 1) = this;
        goto LABEL_386;
      case 0xD7:
        if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198566720);
        }
        return;
      case 0xE5:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 229;
        goto LABEL_385;
      case 0xE6:
        v240 = *((_QWORD *)a2 + 3);
        v241 = (v240 >> 50) & 0x3F;
        if ((v241 - 1) >= 2)
        {
          if ((_DWORD)v241)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x198567B80);
          }
          return;
        }
        v122 = v240 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 230;
LABEL_354:
        LOWORD(v415[0]) = v123;
        *((_QWORD *)&v415[0] + 1) = v122;
        goto LABEL_355;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        v18 = *((_QWORD *)a2 + 3);
        v24 = (v18 >> 50) & 0x3F;
        if ((_DWORD)v24 == 21)
        {
          v20 = *((_QWORD *)a2 + 4);
          if ((v20 & 0xFC000000000000) == 0x54000000000000)
            return;
        }
        else if ((_DWORD)v24)
        {
          v20 = *((_QWORD *)a2 + 4);
        }
        else
        {
LABEL_27:
          v20 = *((_QWORD *)a2 + 4);
          if ((v20 & 0xFC000000000000) == 0)
            return;
        }
LABEL_105:
        v86 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        LOWORD(v415[0]) = v15;
        *((_QWORD *)&v415[0] + 1) = v18 & 0xFFFCFFFFFFFFFFFFLL;
        *(_QWORD *)&v415[1] = v20 & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v86;
        goto LABEL_386;
      case 0xEF:
        v92 = **((_QWORD **)a2 + 9);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 239;
        goto LABEL_314;
      case 0x106:
        v197 = *((_QWORD *)a2 + 4);
        v198 = v197;
        if ((int)v197 < 0)
          v199 = COERCE__INT64((double)v197) + 0x2000000000000;
        else
          v199 = v197 | 0xFFFE000000000000;
        v200 = JSC::DFG::Graph::freeze((uint64_t)this, v199, (uint64_t)a3, a4, a5, a6, a7, a8);
        v201 = a3[1];
        LODWORD(v415[0]) = 1;
        *((_QWORD *)&v415[0] + 1) = 16388;
        *(_QWORD *)&v415[1] = a2;
        memset((char *)&v415[1] + 8, 0, 32);
        (*(void (**)(uint64_t, _OWORD *, _QWORD, __int128 *))(*(_QWORD *)v201 + 16))(v201, v415, 0, v200);
        if (!(_DWORD)v197)
          return;
        v208 = *((unsigned __int16 *)a2 + 9);
        switch(v208)
        {
          case 267:
            goto LABEL_633;
          case 264:
            v209 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_633:
            v209 = *((_DWORD *)a2 + 21);
            break;
          default:
            v209 = *((_DWORD *)a2 + 18);
            goto LABEL_291;
        }
        LOBYTE(v209) = v209 & 0xF;
LABEL_291:
        v210 = v209 - 4;
        if (v210 <= 0x15u && ((0x2A003Fu >> v210) & 1) != 0)
        {
          v211 = qword_199156560[(char)v210];
          v212 = dword_199156610[(char)v210];
          v213 = *((unsigned int *)this + 107);
          if (v197 >= v213)
          {
            if ((_DWORD)v213)
            {
              v369 = (unsigned int *)*((_QWORD *)this + 52);
              v370 = 4 * v213;
              do
              {
                v371 = *v369;
                if (v371 < v197)
                {
                  v372 = v371 + *((_DWORD *)a2 + 6);
                  if (*((_DWORD *)this + 41) <= v372)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19856990CLL);
                  }
                  v373 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v372);
                  if ((int)v371 < 0)
                    v374 = COERCE__INT64((double)v371) + 0x2000000000000;
                  else
                    v374 = v371 | 0xFFFE000000000000;
                  v375 = JSC::DFG::Graph::freeze((uint64_t)this, v374, v202, v203, v204, v205, v206, v207);
                  if ((v373 & 0xFF00FFFFFFFFFFFFLL) != 0
                    && (v376 = *(unsigned __int16 *)((v373 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v376 <= 2))
                  {
                    v377 = *(_QWORD *)((v373 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    if (*(_WORD *)((v373 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                    {
                      if ((_DWORD)v376 != 1)
                        v376 = 2;
                      v377 |= v376;
                    }
                  }
                  else
                  {
                    v377 = 0;
                  }
                  v378 = a3[1];
                  LODWORD(v415[0]) = v212;
                  *((_QWORD *)&v415[0] + 1) = v211;
                  v415[1] = (unint64_t)a2;
                  v415[2] = (unint64_t)v375;
                  *(_QWORD *)&v415[3] = 0;
                  (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v378 + 16))(v378, v415, v373 & 0xFF00FFFFFFFFFFFFLL, v377);
                }
                ++v369;
                v370 -= 4;
              }
              while (v370);
            }
          }
          else
          {
            v214 = 0;
            do
            {
              v215 = v214 + *((_QWORD *)a2 + 3);
              if (*((_DWORD *)this + 41) <= v215)
              {
                __break(0xC471u);
                JUMPOUT(0x198569488);
              }
              v216 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v215);
              if ((int)v214 < 0)
                v217 = COERCE__INT64((double)v214) + 0x2000000000000;
              else
                v217 = v214 | 0xFFFE000000000000;
              v218 = JSC::DFG::Graph::freeze((uint64_t)this, v217, v202, v203, v204, v205, v206, v207);
              if ((v216 & 0xFF00FFFFFFFFFFFFLL) != 0
                && (v219 = *(unsigned __int16 *)((v216 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v219 <= 2))
              {
                v220 = *(_QWORD *)((v216 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (*(_WORD *)((v216 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                {
                  if ((_DWORD)v219 != 1)
                    v219 = 2;
                  v220 |= v219;
                }
              }
              else
              {
                v220 = 0;
              }
              v221 = a3[1];
              LODWORD(v415[0]) = v212;
              *((_QWORD *)&v415[0] + 1) = v211;
              v415[1] = (unint64_t)a2;
              v415[2] = (unint64_t)v218;
              *(_QWORD *)&v415[3] = 0;
              (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v221 + 16))(v221, v415, v216 & 0xFF00FFFFFFFFFFFFLL, v220);
              ++v214;
            }
            while (v198 != v214);
          }
        }
        return;
      case 0x107:
        if (*((_DWORD *)a2 + 8))
        {
          v269 = *((_QWORD *)a2 + 3);
          v270 = *((_DWORD *)this + 41);
          v271 = v270 >= v269;
          LODWORD(v272) = v270 - v269;
          if (v271)
            v272 = v272;
          else
            v272 = 0;
          v273 = *((unsigned int *)a2 + 8) - 1;
          do
          {
            if (!v272)
            {
              __break(0xC471u);
              JUMPOUT(0x198569188);
            }
            v274 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v269++) & 0xFF00FFFFFFFFFFFFLL)
                                       + 0x12);
            v275 = v274 == 350 || v273-- == 0;
            --v272;
          }
          while (!v275);
        }
        return;
      case 0x10A:
        v257 = *((unsigned int *)a2 + 20);
        if ((int)v257 < 0)
          v258 = COERCE__INT64((double)v257) + 0x2000000000000;
        else
          v258 = v257 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v258, (uint64_t)a3, a4, a5, a6, a7, a8);
        v259 = a3[1];
        LODWORD(v415[0]) = 1;
        *((_QWORD *)&v415[0] + 1) = 16388;
        *(_QWORD *)&v415[1] = a2;
        memset((char *)&v415[1] + 8, 0, 32);
        v260 = *(void (**)(void))(*(_QWORD *)v259 + 16);
        goto LABEL_420;
      case 0x10B:
        v412 = **((_QWORD **)a2 + 9);
        v242 = *(unsigned int *)(v412 + 8);
        if ((v242 & 0x80000000) != 0)
          v243 = COERCE__INT64((double)v242) + 0x2000000000000;
        else
          v243 = v242 | 0xFFFE000000000000;
        v244 = JSC::DFG::Graph::freeze((uint64_t)this, v243, (uint64_t)a3, a4, a5, a6, a7, a8);
        v245 = a3[1];
        LODWORD(v415[0]) = 1;
        *((_QWORD *)&v415[0] + 1) = 16388;
        *(_QWORD *)&v415[1] = a2;
        memset((char *)&v415[1] + 8, 0, 32);
        (*(void (**)(uint64_t, _OWORD *, _QWORD, __int128 *))(*(_QWORD *)v245 + 16))(v245, v415, 0, v244);
        v253 = *((unsigned __int16 *)a2 + 9);
        switch(v253)
        {
          case 267:
            goto LABEL_622;
          case 264:
            v254 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_622:
            v254 = *((_DWORD *)a2 + 21);
            break;
          default:
            v254 = *((_DWORD *)a2 + 18);
            goto LABEL_363;
        }
        LOBYTE(v254) = v254 & 0xF;
LABEL_363:
        if (v254 > 0x19u)
          return;
        if (((1 << v254) & 0x200030) != 0)
        {
          v410 = 1;
          v411 = 21;
          v255 = 16400;
        }
        else if (((1 << v254) & 0x8000C0) != 0)
        {
          v410 = 0;
          v411 = 13;
          v255 = 16401;
        }
        else
        {
          if (((1 << v254) & 0x2000300) == 0)
            return;
          v410 = 1;
          v411 = 21;
          v255 = 16402;
        }
        v297 = *((unsigned int *)this + 107);
        if (v297 <= v242)
        {
          v413 = 0;
          v414 = 0;
          if ((_DWORD)v297)
          {
            v312 = 0;
            v313 = 0;
            v314 = (unsigned int *)*((_QWORD *)this + 52);
            v315 = 4 * v297;
            do
            {
              v316 = *v314;
              LODWORD(v415[0]) = v316;
              if (v316 < v242)
              {
                if (v313 == (_DWORD)v414)
                {
                  v317 = (unsigned int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v413, v313 + 1, (unint64_t)v415);
                  v312 = v413;
                  v413[HIDWORD(v414)] = *v317;
                }
                else
                {
                  v312[v313] = v316;
                }
                v313 = ++HIDWORD(v414);
              }
              ++v314;
              v315 -= 4;
            }
            while (v315);
            if (v313)
            {
              v318 = v412 + 16;
              v319 = 4 * v313;
              do
              {
                v320 = *v312;
                if ((v320 & 0x80000000) != 0)
                  v321 = COERCE__INT64((double)v320) + 0x2000000000000;
                else
                  v321 = v320 | 0xFFFE000000000000;
                v328 = JSC::DFG::Graph::freeze((uint64_t)this, v321, v247, v248, v249, v250, v251, v252);
                if ((*(_BYTE *)(v412 + 4) & 0xE) == 6)
                  v329 = *(_QWORD *)(v318 + 8 * v320) + 0x2000000000000;
                else
                  v329 = *(_QWORD *)(v318 + 8 * v320);
                v330 = (uint64_t)JSC::DFG::Graph::freeze((uint64_t)this, v329, v322, v323, v324, v325, v326, v327);
                v331 = v330;
                if ((v410 & 1) == 0)
                  v331 = v330 | 1;
                v332 = a3[1];
                LODWORD(v415[0]) = v411;
                *((_QWORD *)&v415[0] + 1) = v255;
                v415[1] = (unint64_t)a2;
                v415[2] = (unint64_t)v328;
                *(_QWORD *)&v415[3] = 0;
                (*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v332 + 16))(v332, v415, 0, v331);
                ++v312;
                v319 -= 4;
              }
              while (v319);
              v312 = v413;
            }
            if (v312)
            {
              v413 = 0;
              LODWORD(v414) = 0;
              WTF::fastFree((unint64_t)v312, v246, v247, v248, v249, v250, v251, v252);
            }
          }
        }
        else if ((_DWORD)v242)
        {
          v298 = 0;
          v299 = v412 + 16;
          do
          {
            if ((v298 & 0x80000000) != 0)
              v300 = COERCE__INT64((double)v298) + 0x2000000000000;
            else
              v300 = v298 | 0xFFFE000000000000;
            v307 = JSC::DFG::Graph::freeze((uint64_t)this, v300, v247, v248, v249, v250, v251, v252);
            if ((*(_BYTE *)(v412 + 4) & 0xE) == 6)
              v308 = *(_QWORD *)(v299 + 8 * v298) + 0x2000000000000;
            else
              v308 = *(_QWORD *)(v299 + 8 * v298);
            v309 = (uint64_t)JSC::DFG::Graph::freeze((uint64_t)this, v308, v301, v302, v303, v304, v305, v306);
            v310 = v309;
            if ((v410 & 1) == 0)
              v310 = v309 | 1;
            v311 = a3[1];
            LODWORD(v415[0]) = v411;
            *((_QWORD *)&v415[0] + 1) = v255;
            v415[1] = (unint64_t)a2;
            v415[2] = (unint64_t)v307;
            *(_QWORD *)&v415[3] = 0;
            (*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v311 + 16))(v311, v415, 0, v310);
            ++v298;
          }
          while (v242 != v298);
        }
        return;
      case 0x10D:
        v137 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v137 >= 2 && (_DWORD)v137 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198566B00);
        }
        return;
      case 0x114:
        JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 0x123:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v105 = 6;
LABEL_125:
        LODWORD(v415[0]) = v105;
        v69 = 16395;
        goto LABEL_389;
      case 0x127:
        v92 = *((unsigned __int8 *)a2 + 72);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 295;
        goto LABEL_314;
      case 0x12B:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v140 = 26;
        goto LABEL_388;
      case 0x12C:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v140 = 27;
        goto LABEL_388;
      case 0x131:
        v135 = *((_QWORD *)a2 + 3);
        if ((v135 & 0xFC000000000000) != 0xC4000000000000)
          return;
        v122 = v135 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 305;
        goto LABEL_354;
      case 0x132:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 306;
        goto LABEL_385;
      case 0x135:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v140 = 24;
        goto LABEL_388;
      case 0x136:
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v140 = 25;
LABEL_388:
        LODWORD(v415[0]) = v140;
        v69 = 16423;
        goto LABEL_389;
      case 0x13E:
      case 0x145:
        v61 = *((_QWORD *)a2 + 3);
        v62 = (v61 >> 50) & 0x3F;
        if (v62 > 0x34)
          goto LABEL_72;
        if (((1 << v62) & 0x12026000400002) == 0)
        {
          if (((1 << v62) & 0x1000101) == 0)
          {
LABEL_72:
            __break(0xC471u);
            JUMPOUT(0x198566390);
          }
          return;
        }
LABEL_75:
        v64 = v61 & 0xFFFCFFFFFFFFFFFFLL;
LABEL_97:
        v415[2] = 0uLL;
        v17 = *a3;
        LOWORD(v415[0]) = v15;
        *((_QWORD *)&v415[0] + 1) = v64;
LABEL_355:
        v415[1] = vandq_s8(*((int8x16_t *)a2 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        goto LABEL_386;
      case 0x13F:
        v156 = *((_QWORD *)a2 + 3);
        if ((v156 & 0xFC000000000000) != 0x54000000000000)
          return;
        v122 = v156 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 319;
        goto LABEL_354;
      case 0x142:
      case 0x143:
        v74 = *((_QWORD *)a2 + 3);
        if ((v74 & 0xFC000000000000) == 0)
          return;
LABEL_96:
        v64 = v74 & 0xFFFCFFFFFFFFFFFFLL;
        goto LABEL_97;
      case 0x146:
        v168 = *((_QWORD *)a2 + 3);
        v169 = (v168 >> 50) & 0x3F;
        if (!(_DWORD)v169)
          return;
        if ((_DWORD)v169 != 28)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198568EBCLL);
        }
        v122 = v168 & 0xFFFCFFFFFFFFFFFFLL;
        v415[2] = 0uLL;
        v17 = *a3;
        v123 = 326;
        goto LABEL_354;
      case 0x148:
        v92 = *((int *)a2 + 18);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 328;
        goto LABEL_314;
      case 0x149:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 329;
        goto LABEL_385;
      case 0x157:
        v89 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x21;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 56;
        goto LABEL_260;
      case 0x158:
        v116 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x21;
        v117 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        v170 = 56;
        goto LABEL_415;
      case 0x164:
        v89 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 8;
        goto LABEL_260;
      case 0x165:
        v116 = ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14;
        v117 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        v170 = 8;
        goto LABEL_415;
      case 0x180:
      case 0x182:
        if ((_DWORD)v15 == 386)
        {
          v76 = *((unsigned __int8 *)a2 + 80);
          if (v76 != 1)
          {
            if (v76 == 2 && *((_DWORD *)this + 41) <= *((_DWORD *)a2 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x198566484);
            }
            return;
          }
          v276 = 11;
        }
        else
        {
          v276 = 12;
        }
        v277 = BYTE2(*((_DWORD *)a2 + 18));
        v278 = *((_DWORD *)a2 + 18);
        if (v278 == 9)
        {
          if (v277 > 1)
            return;
          v291 = *((_QWORD *)a2 + 3);
          v292 = *((_DWORD *)this + 41);
          if (v292 <= v291)
          {
            __break(0xC471u);
            JUMPOUT(0x1985699D0);
          }
          v293 = v291 + 1;
          if (v292 <= (int)v291 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985699D8);
          }
          v294 = *((_QWORD *)this + 19);
          v295 = *(_QWORD *)(v294 + 8 * *((_QWORD *)a2 + 3));
          v153 = *(_QWORD *)(v294 + 8 * v293) & 0xFF00FFFFFFFFFFFFLL;
          if (v153
            && (v296 = *(unsigned __int16 *)((*(_QWORD *)(v294 + 8 * v293) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v296 <= 2))
          {
            v57 = *(_QWORD *)(v153 + 72);
            if ((_DWORD)v296)
            {
              if ((_DWORD)v296 != 1)
LABEL_747:
                v296 = 2;
LABEL_710:
              v57 |= v296;
            }
          }
          else
          {
LABEL_569:
            v57 = 0;
          }
LABEL_570:
          v231 = v295 & 0xFF00FFFFFFFFFFFFLL;
          v59 = a3[1];
          LODWORD(v415[0]) = v276;
          v229 = 16402;
          goto LABEL_335;
        }
        if (v278 != 8)
        {
          if (v278 != 7 || v277 > 1)
            return;
          v279 = *((_QWORD *)a2 + 3);
          v280 = *((_DWORD *)this + 41);
          if (v280 <= v279)
          {
            __break(0xC471u);
            JUMPOUT(0x1985699B0);
          }
          v281 = v279 + 1;
          if (v280 <= (int)v279 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985699B8);
          }
          v282 = *((_QWORD *)this + 19);
          v283 = *(_QWORD *)(v282 + 8 * *((_QWORD *)a2 + 3));
          v153 = *(_QWORD *)(v282 + 8 * v281) & 0xFF00FFFFFFFFFFFFLL;
          if (v153
            && (v284 = *(unsigned __int16 *)((*(_QWORD *)(v282 + 8 * v281) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v284 <= 2))
          {
            v57 = *(_QWORD *)(v153 + 72);
            if ((_DWORD)v284)
            {
              if ((_DWORD)v284 != 1)
LABEL_748:
                v284 = 2;
LABEL_713:
              v57 |= v284;
            }
          }
          else
          {
LABEL_590:
            v57 = 0;
          }
LABEL_591:
          v231 = v283 & 0xFF00FFFFFFFFFFFFLL;
          v59 = a3[1];
          LODWORD(v415[0]) = v276;
          v229 = 16400;
          goto LABEL_335;
        }
        if (v277 > 1)
          return;
        v285 = *((_QWORD *)a2 + 3);
        v286 = *((_DWORD *)this + 41);
        if (v286 <= v285)
        {
          __break(0xC471u);
          JUMPOUT(0x1985699C0);
        }
        v287 = v285 + 1;
        if (v286 <= (int)v285 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1985699C8);
        }
        v288 = *((_QWORD *)this + 19);
        v289 = *(_QWORD *)(v288 + 8 * *((_QWORD *)a2 + 3));
        v153 = *(_QWORD *)(v288 + 8 * v287) & 0xFF00FFFFFFFFFFFFLL;
        if (!v153)
          goto LABEL_656;
        v290 = *(unsigned __int16 *)((*(_QWORD *)(v288 + 8 * v287) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v290 > 2)
          goto LABEL_656;
        v57 = *(_QWORD *)(v153 + 72);
        if (!(_DWORD)v290)
          goto LABEL_657;
        if ((_DWORD)v290 != 1)
          goto LABEL_749;
        goto LABEL_716;
      case 0x183:
        v92 = *((unsigned __int8 *)a2 + 80);
        v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        v17 = *a3;
        v94 = 387;
        goto LABEL_314;
      case 0x188:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 392;
        goto LABEL_385;
      case 0x189:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 393;
        goto LABEL_385;
      case 0x18A:
        v263 = *((_QWORD *)a2 + 3);
        v264 = 16411;
        if ((v263 & 0xFC000000000000) != 0x78000000000000)
          v264 = 16412;
        v265 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v265
          && (v266 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v266 <= 2))
        {
          v267 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v266 != 1)
              v266 = 2;
            v267 |= v266;
          }
        }
        else
        {
          v267 = 0;
        }
        v268 = *((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 52;
        *((_QWORD *)&v415[0] + 1) = v264;
        *(_QWORD *)&v415[1] = v263 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v265;
        *(_QWORD *)&v415[2] = v267;
        *((_QWORD *)&v415[2] + 1) = v268;
        goto LABEL_231;
      case 0x18B:
        v110 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v110
          && (v256 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v256 <= 2))
        {
          v112 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v256 != 1)
              v256 = 2;
            v112 |= v256;
          }
        }
        else
        {
          v112 = 0;
        }
        v113 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v196 = 54;
        goto LABEL_372;
      case 0x18C:
        v119 = *((_QWORD *)a2 + 3);
        v69 = 16413;
        if ((v119 & 0xFC000000000000) != 0x80000000000000)
          v69 = 16414;
        v70 = v119 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v71 = 44;
        goto LABEL_240;
      case 0x18D:
        v171 = *((_QWORD *)a2 + 3);
        v69 = 16413;
        if ((v171 & 0xFC000000000000) != 0x80000000000000)
          v69 = 16414;
        v70 = v171 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v71 = 45;
        goto LABEL_240;
      case 0x18E:
        v136 = *((_QWORD *)a2 + 3);
        v69 = 16413;
        if ((v136 & 0xFC000000000000) != 0x80000000000000)
          v69 = 16414;
        v70 = v136 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v71 = 46;
        goto LABEL_240;
      case 0x18F:
        v120 = *((_QWORD *)a2 + 3);
        v69 = 16411;
        if ((v120 & 0xFC000000000000) != 0x78000000000000)
          v69 = 16412;
        v70 = v120 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v71 = 47;
        goto LABEL_240;
      case 0x190:
        v229 = 16411;
        if (*((_DWORD *)a2 + 18))
          v229 = 16412;
        v153 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v153
          && (v230 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v230 <= 2))
        {
          v57 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v230 != 1)
              v230 = 2;
            v57 |= v230;
          }
        }
        else
        {
          v57 = 0;
        }
        v231 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 48;
        goto LABEL_335;
      case 0x191:
        v89 = 16411;
        if (*((_DWORD *)a2 + 18))
          v89 = 16412;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 49;
        goto LABEL_260;
      case 0x192:
        v89 = 16411;
        if (*((_DWORD *)a2 + 18))
          v89 = 16412;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 50;
        goto LABEL_260;
      case 0x193:
        v89 = 16411;
        if (*((_DWORD *)a2 + 18))
          v89 = 16412;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 51;
        goto LABEL_260;
      case 0x194:
        v110 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v110
          && (v111 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v111 <= 2))
        {
          v112 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v111 != 1)
              v111 = 2;
            v112 |= v111;
          }
        }
        else
        {
          v112 = 0;
        }
        v113 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = 53;
        v114 = 16412;
        goto LABEL_373;
      case 0x195:
        v190 = *((_QWORD *)a2 + 3);
        v191 = *((_DWORD *)this + 41);
        if (v191 <= v190)
        {
          __break(0xC471u);
          JUMPOUT(0x198569898);
        }
        v192 = v190 + 1;
        if (v191 <= (int)v190 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1985698A0);
        }
        v193 = *((_QWORD *)this + 19);
        v194 = *(_QWORD *)(v193 + 8 * *((_QWORD *)a2 + 3));
        v110 = *(_QWORD *)(v193 + 8 * v192) & 0xFF00FFFFFFFFFFFFLL;
        if (v110
          && (v195 = *(unsigned __int16 *)((*(_QWORD *)(v193 + 8 * v192) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
              v195 <= 2))
        {
          v112 = *(_QWORD *)(v110 + 72);
          if ((_DWORD)v195)
          {
            if ((_DWORD)v195 != 1)
              v195 = 2;
            v112 |= v195;
          }
        }
        else
        {
          v112 = 0;
        }
        v113 = v194 & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v196 = 53;
LABEL_372:
        LODWORD(v415[0]) = v196;
        v114 = 16411;
LABEL_373:
        *((_QWORD *)&v415[0] + 1) = v114;
        *(_QWORD *)&v415[1] = v113;
        *((_QWORD *)&v415[1] + 1) = v110;
        *(_QWORD *)&v415[2] = v112;
        goto LABEL_374;
      case 0x197:
        v151 = *((_QWORD *)a2 + 3);
        v152 = 16415;
        if ((v151 & 0xFC000000000000) != 0x88000000000000)
          v152 = 16416;
        v153 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v153
          && (v154 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v154 <= 2))
        {
          v57 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v154 != 1)
              v154 = 2;
            v57 |= v154;
          }
        }
        else
        {
          v57 = 0;
        }
        v59 = a3[1];
        LODWORD(v415[0]) = 55;
        *((_QWORD *)&v415[0] + 1) = v152;
        *(_QWORD *)&v415[1] = v151 & 0xFF00FFFFFFFFFFFFLL;
        goto LABEL_336;
      case 0x198:
        v232 = *((_QWORD *)a2 + 4);
        v233 = v232 & 0xFF00FFFFFFFFFFFFLL;
        if ((v232 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v234 = *(unsigned __int16 *)((v232 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v234 <= 2))
        {
          v235 = *(_QWORD *)(v233 + 72);
          if ((_DWORD)v234)
          {
            if ((_DWORD)v234 != 1)
              v234 = 2;
            v235 |= v234;
          }
        }
        else
        {
          v235 = 0;
        }
        v236 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v118 = a3[1];
        LODWORD(v415[0]) = 55;
        *((_QWORD *)&v415[0] + 1) = 16416;
        *(_QWORD *)&v415[1] = v236;
        *((_QWORD *)&v415[1] + 1) = v233;
        *(_QWORD *)&v415[2] = v235;
        goto LABEL_342;
      case 0x199:
        v173 = *((_QWORD *)a2 + 3);
        v174 = *((_DWORD *)this + 41);
        if (v174 <= v173)
        {
          __break(0xC471u);
          JUMPOUT(0x198569880);
        }
        if (v174 <= (int)v173 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198569888);
        }
        if (v174 <= (int)v173 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198569890);
        }
        v175 = *((_QWORD *)this + 19);
        v176 = *(_QWORD *)(v175 + 8 * (v173 + 1));
        v177 = *(_QWORD *)(v175 + 8 * *((_QWORD *)a2 + 3));
        v178 = v176 & 0xFF00FFFFFFFFFFFFLL;
        if ((v176 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v179 = *(unsigned __int16 *)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v179 <= 2))
        {
          v180 = *(_QWORD *)((v176 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if ((_DWORD)v179)
          {
            if ((_DWORD)v179 != 1)
              v179 = 2;
            v180 |= v179;
          }
        }
        else
        {
          v180 = 0;
        }
        v118 = a3[1];
        LODWORD(v415[0]) = 55;
        *((_QWORD *)&v415[0] + 1) = 16415;
        *(_QWORD *)&v415[1] = v177 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v178;
        *(_QWORD *)&v415[2] = v180;
LABEL_342:
        *((_QWORD *)&v415[2] + 1) = 0;
        *(_QWORD *)&v415[3] = 0;
        goto LABEL_419;
      case 0x19A:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 410;
        goto LABEL_385;
      case 0x19E:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 414;
        goto LABEL_385;
      case 0x19F:
        v87 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
        *((_QWORD *)&v415[2] + 1) = 0;
        v17 = *a3;
        v88 = 415;
LABEL_385:
        LOWORD(v415[0]) = v88;
        *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        *((_QWORD *)&v415[1] + 1) = v87;
        *(_QWORD *)&v415[2] = 0;
        goto LABEL_386;
      case 0x1A0:
        v124 = (uint64_t *)*((_QWORD *)a2 + 9);
        v125 = v124[2];
        if (!v125)
          return;
        v126 = *(_DWORD *)(v125 + 28);
        if ((_WORD)v126)
        {
          v127 = HIWORD(v126);
          if ((unsigned __int16)v126 == 0xFFFF && v127 == 0xFFFF)
          {
            v92 = *v124;
            v93 = *((_QWORD *)a2 + 5) & 0xFFFCFFFFFFFFFFFFLL;
            v17 = *a3;
            v94 = 416;
LABEL_314:
            LOWORD(v415[0]) = v94;
            *(int8x16_t *)((char *)v415 + 8) = vandq_s8(*(int8x16_t *)((char *)a2 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
            *((_QWORD *)&v415[1] + 1) = v93;
            *(_QWORD *)&v415[2] = v92;
            goto LABEL_351;
          }
        }
        else
        {
          if (v126 > 0xFFFEFFFF)
            return;
          v127 = HIWORD(v126);
        }
        v89 = ((unint64_t)((unsigned __int16)v126 | ((unsigned __int16)v127 << 16)) << 15) | 0x25;
        v90 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v91 = 57;
LABEL_260:
        LODWORD(v415[0]) = v91;
        *((_QWORD *)&v415[0] + 1) = v89;
        *(_QWORD *)&v415[1] = v90;
LABEL_390:
        memset((char *)&v415[1] + 8, 0, 32);
        goto LABEL_391;
      case 0x1AB:
      case 0x1AC:
        v79 = *((_QWORD *)a2 + 9);
        if ((v79 & 0x10000) != 0)
          return;
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v80 = 13;
              break;
            case 4:
              v80 = 17;
              break;
            case 5:
              v80 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198568C44);
            default:
              __break(0xC471u);
              JUMPOUT(0x198568C74);
          }
        }
        else
        {
          v80 = 21;
        }
        v81 = *((_QWORD *)a2 + 3);
        v82 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if (v82
          && (v83 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v83 <= 2))
        {
          v84 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v83 != 1)
              v83 = 2;
            v84 |= v83;
          }
        }
        else
        {
          v84 = 0;
        }
        v85 = *((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        LODWORD(v415[0]) = v80;
        *((_QWORD *)&v415[0] + 1) = (v79 << 15) | 0x16;
        *(_QWORD *)&v415[1] = v81 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v82;
        *(_QWORD *)&v415[2] = v84;
        *((_QWORD *)&v415[2] + 1) = v85;
LABEL_231:
        *(_QWORD *)&v415[3] = 0;
        goto LABEL_391;
      case 0x1AE:
      case 0x1AF:
        v69 = ((unint64_t)*((_DWORD *)a2 + 18) << 15) | 0x1A;
        v70 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        v59 = a3[1];
        v71 = 38;
LABEL_240:
        LODWORD(v415[0]) = v71;
LABEL_389:
        *((_QWORD *)&v415[0] + 1) = v69;
        *(_QWORD *)&v415[1] = v70;
        goto LABEL_390;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x198568C94);
      default:
        v415[0] = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v15];
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v415, (uint64_t *)&v413);
        if (v413)
          v392 = (const char *)(v413 + 4);
        else
          v392 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v392);
        WTF::CString::~CString((WTF::CString *)&v413, v393, v394, v395, v396, v397, v398, v399);
        __break(0xC471u);
        JUMPOUT(0x198568F88);
    }
    v35 = v30 & 0xFF00FFFFFFFFFFFFLL;
    v36 = v31 & 0xFF00FFFFFFFFFFFFLL;
    v37 = v33 & 0xFF00FFFFFFFFFFFFLL;
    switch(*((_DWORD *)a2 + 18))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
        return;
      case 7u:
        if (BYTE2(v32) - 3 < 2)
          return;
        if (v36 && (v38 = *(unsigned __int16 *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v38 <= 2))
        {
          v39 = *(_QWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v38 != 1)
              v38 = 2;
            v39 |= v38;
          }
        }
        else
        {
          v39 = 0;
        }
        if (v37 && (v40 = *(unsigned __int16 *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v40 <= 2))
        {
          v41 = *(_QWORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v40 != 1)
              v40 = 2;
            v41 |= v40;
          }
        }
        else
        {
          v41 = 0;
        }
        v42 = a3[1];
        LODWORD(v415[0]) = v34;
        *((_QWORD *)&v415[0] + 1) = 16400;
        *(_QWORD *)&v415[1] = v35;
        *((_QWORD *)&v415[1] + 1) = v31 & 0xFF00FFFFFFFFFFFFLL;
        v415[2] = v39;
        *(_QWORD *)&v415[3] = 0;
        (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v415, v33 & 0xFF00FFFFFFFFFFFFLL, v41);
        v43 = 0;
        if (v36)
        {
          v383 = *(unsigned __int16 *)(v36 + 18);
          if (v383 <= 2)
          {
            v43 = *(_QWORD *)(v36 + 72);
            if (*(_WORD *)(v36 + 18))
            {
              if ((_DWORD)v383 != 1)
                v383 = 2;
              v43 |= v383;
            }
          }
          else
          {
            v43 = 0;
          }
        }
        v384 = a3[1];
        LODWORD(v415[0]) = 18;
        v385 = 16400;
        goto LABEL_650;
      case 8u:
        if (BYTE2(v32) - 3 < 2)
          return;
        if (v36 && (v334 = *(unsigned __int16 *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v334 <= 2))
        {
          v335 = *(_QWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v334 != 1)
              v334 = 2;
            v335 |= v334;
          }
        }
        else
        {
          v335 = 0;
        }
        if (v37 && (v336 = *(unsigned __int16 *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v336 <= 2))
        {
          v337 = *(_QWORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v336 != 1)
              v336 = 2;
            v337 |= v336;
          }
        }
        else
        {
          v337 = 0;
        }
        v338 = a3[1];
        LODWORD(v415[0]) = 13;
        *((_QWORD *)&v415[0] + 1) = 16401;
        *(_QWORD *)&v415[1] = v30 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v415[1] + 1) = v31 & 0xFF00FFFFFFFFFFFFLL;
        v415[2] = v335;
        *(_QWORD *)&v415[3] = 0;
        (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v338 + 16))(v338, v415, v33 & 0xFF00FFFFFFFFFFFFLL, v337);
        v339 = 0;
        if (!v36)
          goto LABEL_505;
        v379 = *(unsigned __int16 *)(v36 + 18);
        if (v379 <= 2)
        {
          v339 = *(_QWORD *)(v36 + 72);
          if (*(_WORD *)(v36 + 18))
          {
            if ((_DWORD)v379 != 1)
              v379 = 2;
            v339 |= v379;
            if (!v37)
              goto LABEL_638;
          }
          else
          {
LABEL_505:
            if (!v37)
              goto LABEL_638;
          }
        }
        else
        {
          v339 = 0;
          if (!v37)
            goto LABEL_638;
        }
        v380 = *(unsigned __int16 *)(v37 + 18);
        if (v380 <= 2)
        {
          v381 = *(_QWORD *)(v37 + 72);
          if (*(_WORD *)(v37 + 18))
          {
            if ((_DWORD)v380 != 1)
              v380 = 2;
            v381 |= v380;
          }
LABEL_639:
          v382 = a3[1];
          LODWORD(v415[0]) = 14;
          *((_QWORD *)&v415[0] + 1) = 16401;
          *(_QWORD *)&v415[1] = v35;
          *((_QWORD *)&v415[1] + 1) = v36;
          v415[2] = v339;
          *(_QWORD *)&v415[3] = 0;
          (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v382 + 16))(v382, v415, v37, v381);
          v43 = 0;
          if (v36)
          {
            v387 = *(unsigned __int16 *)(v36 + 18);
            if (v387 <= 2)
            {
              v43 = *(_QWORD *)(v36 + 72);
              if (*(_WORD *)(v36 + 18))
              {
                if ((_DWORD)v387 != 1)
                  v387 = 2;
                v43 |= v387;
              }
            }
            else
            {
              v43 = 0;
            }
          }
          v384 = a3[1];
          LODWORD(v415[0]) = 15;
          v385 = 16401;
LABEL_650:
          *((_QWORD *)&v415[0] + 1) = v385;
          *(_QWORD *)&v415[1] = v35;
          *((_QWORD *)&v415[1] + 1) = v36;
          v415[2] = v43;
          *(_QWORD *)&v415[3] = 0;
          v260 = *(void (**)(void))(*(_QWORD *)v384 + 16);
LABEL_420:
          v260();
          return;
        }
LABEL_638:
        v381 = 0;
        goto LABEL_639;
      case 9u:
        if (BYTE2(v32) - 3 < 2)
          return;
        if (v36 && (v340 = *(unsigned __int16 *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v340 <= 2))
        {
          v341 = *(_QWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v340 != 1)
              v340 = 2;
            v341 |= v340;
          }
        }
        else
        {
          v341 = 0;
        }
        if (v37 && (v342 = *(unsigned __int16 *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v342 <= 2))
        {
          v343 = *(_QWORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v342 != 1)
              v342 = 2;
            v343 |= v342;
          }
        }
        else
        {
          v343 = 0;
        }
        v344 = a3[1];
        LODWORD(v415[0]) = v34;
        *((_QWORD *)&v415[0] + 1) = 16402;
        *(_QWORD *)&v415[1] = v35;
        *((_QWORD *)&v415[1] + 1) = v31 & 0xFF00FFFFFFFFFFFFLL;
        v415[2] = v341;
        *(_QWORD *)&v415[3] = 0;
        (*(void (**)(uint64_t, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v344 + 16))(v344, v415, v33 & 0xFF00FFFFFFFFFFFFLL, v343);
        v43 = 0;
        if (v36)
        {
          v386 = *(unsigned __int16 *)(v36 + 18);
          if (v386 <= 2)
          {
            v43 = *(_QWORD *)(v36 + 72);
            if (*(_WORD *)(v36 + 18))
            {
              if ((_DWORD)v386 != 1)
                v386 = 2;
              v43 |= v386;
            }
          }
          else
          {
            v43 = 0;
          }
        }
        v384 = a3[1];
        LODWORD(v415[0]) = 20;
        v385 = 16402;
        goto LABEL_650;
      case 0x19u:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
        __break(0xC471u);
        JUMPOUT(0x1985680E0);
      default:
        __break(0xC471u);
        JUMPOUT(0x198568174);
    }
  }
  if (v11 - 202 > 0x3E || ((1 << (v11 + 54)) & 0x400000000E002FEFLL) == 0)
  {
    v13 = v11 - 333;
    if (v13 > 0x3A || ((1 << v13) & 0x7A8000000000003) == 0)
    {
LABEL_33:
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:474:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:475:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
      __break(0xC471u);
      JUMPOUT(0x198566110);
    }
  }
}

JSC::DFG *WTF::Detail::CallableWrapper<JSC::DFG::`anonymous namespace'::Validate::validate(void)::{lambda(JSC::DFG::HeapLocation,JSC::DFG::LazyNode)#1},void,JSC::DFG::HeapLocation,JSC::DFG::LazyNode>::call(JSC::DFG *result, uint64_t a2)
{
  JSC::DFG::_anonymous_namespace_::Validate *v2;
  int v3;
  JSC::DFG *v4;
  const char *v5;
  JSC::DFG::Node *v6;
  const char *v7;
  JSC::DFG *v8;
  const char *v9;
  JSC::DFG::Node *v10;
  const char *v11;
  JSC::DFG *v12;
  const char *v13;
  JSC::DFG::Node *v14;
  const char *v15;

  v2 = (JSC::DFG::_anonymous_namespace_::Validate *)*((_QWORD *)result + 1);
  v3 = *(_DWORD *)(a2 + 8) & 0x3FFF;
  switch(v3)
  {
    case 1:
      v4 = result;
      JSC::DFG::startCrashing(result);
      WTF::dataLogF((WTF *)"\n\n\nAt ", v5);
      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v7, "location.heap().kind() != World", "./dfg/DFGValidate.cpp", 490);
      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 490, "auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(HeapLocation, LazyNode) const", (uint64_t)"location.heap().kind() != World");
      __break(0xC471u);
      goto LABEL_8;
    case 3:
      v8 = result;
      JSC::DFG::startCrashing(result);
      WTF::dataLogF((WTF *)"\n\n\nAt ", v9);
      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v11, "location.heap().kind() != Heap", "./dfg/DFGValidate.cpp", 491);
      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 491, "auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(HeapLocation, LazyNode) const", (uint64_t)"location.heap().kind() != Heap");
      __break(0xC471u);
      JUMPOUT(0x19856A448);
    case 40:
      v12 = result;
      JSC::DFG::startCrashing(result);
      WTF::dataLogF((WTF *)"\n\n\nAt ", v13);
      WTF::dataLogF((WTF *)": validation failed: %s (%s:%d).\n", v15, "location.heap().kind() != SideState", "./dfg/DFGValidate.cpp", 487);
      WTFReportAssertionFailure("./dfg/DFGValidate.cpp", 487, "auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(HeapLocation, LazyNode) const", (uint64_t)"location.heap().kind() != SideState");
      __break(0xC471u);
LABEL_8:
      JUMPOUT(0x19856A3D4);
  }
  return result;
}

uint64_t WTF::dataLog<WTF::RawPointer,char [5],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " != ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

_QWORD *JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Node *)#1}::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;

  if (!a2)
    goto LABEL_14;
  v3 = result;
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = (uint64_t *)(a2 + 24 * v8);
  v10 = *v9;
  if (*v9 != a3)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v4;
      v9 = (uint64_t *)(a2 + 24 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == a3)
        goto LABEL_8;
    }
    v9 = (uint64_t *)(a2 + 24 * *(unsigned int *)(a2 - 4));
  }
LABEL_8:
  if (v9 == (uint64_t *)(a2 + 24 * *(unsigned int *)(a2 - 4)))
    goto LABEL_14;
  v12 = *((unsigned int *)v9 + 5);
  *result = 0;
  result[1] = 0;
  *((_DWORD *)result + 3) = v12;
  if ((_DWORD)v12)
  {
    if (!(v12 >> 29))
    {
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *((_DWORD *)v3 + 2) = v12;
      *v3 = v13;
      return memcpy(v13, (const void *)v9[1], 8 * *((unsigned int *)v9 + 5));
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19856A6D0);
  }
  return result;
}

uint64_t *JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble(void)::{lambda(JSC::DFG::Edge)#1}::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v2 = result;
  v3 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v20 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v4 = *(unsigned int *)(*result + 12);
  if ((_DWORD)v4)
  {
    v19 = *(_QWORD **)*result;
    while (*v19 != v3)
    {
      ++v19;
      if (!--v4)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    v5 = *(_QWORD *)result[1];
    if (v5)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (v3 + ~(a2 << 32)) ^ ((v3 + ~(a2 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = (uint64_t *)(v5 + 24 * v10);
      v12 = *v11;
      if (*v11 != v3)
      {
        v13 = 1;
        while (v12)
        {
          v10 = (v10 + v13) & v6;
          v11 = (uint64_t *)(v5 + 24 * v10);
          v12 = *v11;
          ++v13;
          if (*v11 == v3)
            goto LABEL_9;
        }
        v11 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
      }
LABEL_9:
      if (v11 != (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4)))
      {
        result = v11 + 1;
        v14 = (uint64_t *)v2[2];
        v15 = *((unsigned int *)v11 + 5);
        if ((_DWORD)v15 == *((_DWORD *)v11 + 4))
        {
          result = (uint64_t *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v15 + 1, (unint64_t)v14);
          v14 = result;
          v15 = *((unsigned int *)v11 + 5);
          v16 = (uint64_t *)(v11[1] + 8 * v15);
        }
        else
        {
          v16 = (uint64_t *)(*result + 8 * v15);
        }
        *v16 = *v14;
        *((_DWORD *)v11 + 5) = v15 + 1;
        v17 = *v2;
        v18 = *(unsigned int *)(v17 + 12);
        if ((_DWORD)v18 == *(_DWORD *)(v17 + 8))
        {
          result = (uint64_t *)WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v20);
          v18 = *(unsigned int *)(v17 + 12);
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v3;
        }
        *(_DWORD *)(v17 + 12) = v18 + 1;
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::uses(uint64_t this, JSC::DFG::Node *a2, JSC::DFG::Node *a3)
{
  uint64_t v3;
  JSC::DFG::Node *v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v3 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v7 = (v6 + v3);
    if (v7 <= v3)
      return 0;
    v8 = *(_DWORD *)(this + 164);
    v9 = v8 >= v3;
    v10 = v8 - v3;
    if (!v9)
      v10 = 0;
    if (v10 <= v6 - 1)
    {
      __break(0xC471u);
    }
    else
    {
      v11 = 0;
      v12 = v7 - v3;
      v13 = (uint64_t *)(*(_QWORD *)(this + 152) + 8 * v3);
      do
      {
        v14 = *v13++;
        v15 = (v14 & 0xFF00FFFFFFFFFFFFLL) != 0;
        v16 = (JSC::DFG::Node *)(v14 & 0xFF00FFFFFFFFFFFFLL) == a3 && v15;
        v11 |= v16;
        --v12;
      }
      while (v12);
      return v11 != 0;
    }
  }
  else
  {
    v4 = (JSC::DFG::Node *)(v3 & 0xFF00FFFFFFFFFFFFLL);
    if ((v3 & 0xFF00FFFFFFFFFFFFLL) == 0)
      return 0;
    this = v4 == a3;
    if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      this = v4 == a3 || (*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) == (_QWORD)a3;
      if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) == a3)
          return 1;
        else
          return this;
      }
    }
  }
  return this;
}

uint64_t JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(void)#1}::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;

  v1 = **(_QWORD **)(result + 8);
  v2 = **(_QWORD **)(result + 16);
  v3 = *(_QWORD *)(v1 + 24);
  if ((*(_BYTE *)(v1 + 56) & 0x10) != 0)
  {
    v7 = *(_DWORD *)(v1 + 32);
    v8 = (v7 + v3);
    if (v8 <= v3)
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)result + 32);
    v10 = *(_DWORD *)(v9 + 164);
    v11 = v10 >= v3;
    v12 = v10 - v3;
    if (!v11)
      v12 = 0;
    if (v12 <= v7 - 1)
    {
      __break(0xC471u);
    }
    else
    {
      v13 = 0;
      v14 = v8 - v3;
      v15 = (uint64_t *)(*(_QWORD *)(v9 + 152) + 8 * v3);
      do
      {
        v16 = *v15++;
        v17 = (v16 & 0xFF00FFFFFFFFFFFFLL) != 0;
        v18 = v2 == (v16 & 0xFF00FFFFFFFFFFFFLL) && v17;
        v13 |= v18;
        --v14;
      }
      while (v14);
      return v13 != 0;
    }
  }
  else
  {
    v4 = v3 & 0xFF00FFFFFFFFFFFFLL;
    if (!v4)
      return 0;
    result = v2 == v4;
    if ((*(_QWORD *)(v1 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      result = v2 == v4 || v2 == (*(_QWORD *)(v1 + 32) & 0xFF00FFFFFFFFFFFFLL);
      v6 = *(_QWORD *)(v1 + 40) & 0xFF00FFFFFFFFFFFFLL;
      if (v6)
      {
        if (v2 == v6)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

_QWORD *WTF::Vector<JSC::Operand,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Operand>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<JSC::Operand,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::Operand,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 8 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      if (v15 < 3)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_33;
      }
      if (!(v15 >> 29))
      {
        v16 = WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_QWORD *)(v16 + v26) = *(_QWORD *)(v10 + v26);
          v26 += 8;
        }
        while (8 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x19856AC14);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 3)
    {
      v22 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v20 >> 29)
        goto LABEL_42;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
    }
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v24 = (uint64_t *)v10;
      do
      {
        v25 = *v24++;
        *v22++ = v25;
        v23 -= 8;
      }
      while (v23);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

unint64_t JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::DFG::Edge)#1}::operator()(unint64_t result, unint64_t a2)
{
  unint64_t v2;

  if (**(_QWORD **)result == (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v2 = result;
    **(_DWORD **)(result + 8) = **(_DWORD **)(result + 16);
    if ((a2 & 0x1000000000000) == 0)
    {
      result = (a2 >> 50) & 0x3F;
      if ((_DWORD)result)
      {
        if (result > 0x34 || ((1 << result) & 0x12400001800284) == 0)
        {
          result = JSC::DFG::alreadyChecked(result);
          if ((result & 1) == 0)
            **(_BYTE **)(v2 + 24) = 1;
        }
      }
    }
  }
  return result;
}

unint64_t JSC::DFG::alreadyChecked(unsigned int a1)
{
  unint64_t result;

  if (a1 < 0x35)
    return (0x398000080F01uLL >> a1) & 1;
  result = 210;
  __break(0xC471u);
  return result;
}

uint64_t **JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::Operand)#1}::operator()(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t j;
  int v6;
  _DWORD *i;

  v2 = *((unsigned int *)*result + 3);
  if ((_DWORD)v2)
  {
    v3 = **result;
    if (HIDWORD(a2) == 2)
    {
      v4 = 0;
      for (i = (_DWORD *)(v3 + 4); *i != 2 || *(i - 1) != (_DWORD)a2; i += 2)
      {
        if (v2 == ++v4)
          return result;
      }
    }
    else
    {
      v4 = 0;
      for (j = v3 + 4; *(_QWORD *)(j - 4) != a2; j += 8)
      {
        if (v2 == ++v4)
          return result;
      }
    }
    *(_QWORD *)(v3 + 8 * v4) = *(_QWORD *)(v3 + 8 * v2 - 8);
    v6 = *((_DWORD *)*result + 3);
    if (v6)
    {
      *((_DWORD *)*result + 3) = v6 - 1;
      *(_DWORD *)result[1] = *(_DWORD *)result[2];
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t **JSC::DFG::forAllKilledOperands<JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::Operand)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::Operand)#1} const&)::{lambda(JSC::Operand)#1}::operator()(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;

  if (**result != a2)
  {
    v2 = result[2];
    v3 = (_QWORD *)(2 * *v2);
    v4 = *v2 < 0 ? 63 : *v3;
    if (v4 <= ~(_DWORD)a2)
    v5 = v3 + 1;
    if (*v2 >= 0)
      v2 = v5;
    if (((*(unint64_t *)((char *)v2 + (((unint64_t)~(_DWORD)a2 >> 3) & 0x1FFFFFF8)) >> ~(_BYTE)a2) & 1) == 0)
  }
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::`anonymous namespace'::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *,unsigned int)::{lambda(JSC::DFG::AbstractHeap)#1} const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  signed int v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  int v25;
  signed int v27;
  int v28;
  int v29;
  _BYTE *v30;
  int v31;
  signed int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int v36;
  signed int v38;
  char *v39;
  JSC::DFG::Node *v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  unsigned int v68;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  _DWORD *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  BOOL v147;
  int v148;
  const char *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  BOOL v170;
  unsigned int *v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  WTF *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  int v197;
  int v198;
  int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  int v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  int v214;
  int v216;
  int v218;
  int v220;
  int v222;
  uint64_t v224;
  char v225;
  _BYTE v226[56];
  char v227;
  char v228;
  _BYTE v229[56];
  char v230;
  _BYTE v231[56];
  char v232;
  _BYTE v233[56];
  char v234;
  _BYTE v235[56];
  char v236;
  _BYTE v237[56];
  char v238;
  char v239;
  char v240;
  char v241;
  _BYTE v242[56];
  char v243;
  char v244;
  char v245;
  char v246;
  char v247;
  _BYTE v248[56];
  char v249;
  _BYTE v250[56];
  WTF *v251[2];
  uint64_t v252;
  uint64_t v253;
  char v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  char v280;
  char v281;
  char v282;
  char v283;
  char v284;
  _BYTE v285[56];
  uint64_t v286;
  _BYTE v287[56];
  char v288;
  _BYTE v289[56];
  uint64_t v290;
  _BYTE v291[56];
  uint64_t v292;
  _BYTE v293[56];
  char v294;
  _BYTE v295[56];
  uint64_t v296;
  _BYTE v297[56];
  char v298;
  _BYTE v299[56];
  char v300;
  _BYTE v301[56];
  char v302;
  _BYTE v303[56];
  char v304;
  _BYTE v305[56];
  char v306;
  _BYTE v307[56];
  char v308;
  _BYTE v309[56];
  char v310;
  char v311;
  char v312;
  char v313;
  char v314;
  char v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  _BYTE v322[56];
  char v323;
  _BYTE v324[56];
  char v325;
  _BYTE v326[56];

  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
    goto LABEL_2;
  v68 = *((unsigned __int16 *)a2 + 9);
  if (v68 <= 0xC9)
  {
    v196 = v68 - 101;
    if (v68 - 101 > 0x3E)
      goto LABEL_347;
    if (((1 << v196) & 0x7E0070000000000FLL) != 0)
      return;
    if (((1 << v196) & 0x18000000000) == 0)
    {
LABEL_347:
      if (v68 - 92 >= 2)
        goto LABEL_348;
      return;
    }
LABEL_2:
    v11 = *((unsigned __int16 *)a2 + 9);
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x41:
      case 0x43:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x94:
      case 0x95:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x108:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x166:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17B:
      case 0x17C:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x181:
      case 0x183:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x188:
      case 0x189:
      case 0x196:
      case 0x19A:
      case 0x19B:
      case 0x19C:
      case 0x19D:
      case 0x19E:
      case 0x19F:
      case 0x1A1:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1AD:
      case 0x1B0:
        return;
      case 0xB:
        v39 = &v314;
        goto LABEL_45;
      case 0xC:
        v75 = **a3;
        v76 = 3;
        goto LABEL_146;
      case 0xD:
        v39 = &v313;
        goto LABEL_45;
      case 0xE:
        v75 = **a3;
        v76 = 4;
        goto LABEL_146;
      case 0xF:
        v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        v13 = v12;
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
        if (v14 != v12)
        {
          *v12 = v14;
          v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        goto LABEL_19;
      case 0x10:
        v111 = (_QWORD *)*((_QWORD *)a2 + 9);
        v112 = v111;
        do
        {
          v113 = v112;
          v112 = (_QWORD *)*v112;
        }
        while (v112);
        if (v113 != v111)
          *v111 = v113;
        if (JSC::DFG::argumentsInvolveStackSlot(**a3, (uint64_t)(v113[3] << 15) >> 15))
          *(_BYTE *)a3[1] = 1;
        v114 = (_QWORD *)*((_QWORD *)a2 + 9);
        v115 = v114;
        do
        {
          v116 = v115;
          v115 = (_QWORD *)*v115;
        }
        while (v115);
        if (v116 != v114)
          *v114 = v116;
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v312;
        goto LABEL_46;
      case 0x11:
        if (JSC::DFG::argumentsInvolveStackSlot(**a3, (uint64_t)(**((_QWORD **)a2 + 9) << 15) >> 15))
          *(_BYTE *)a3[1] = 1;
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v310;
        goto LABEL_46;
      case 0x12:
        v75 = **a3;
        v76 = (uint64_t)(*((_QWORD *)a2 + 9) << 15) >> 15;
LABEL_146:
        if (JSC::DFG::argumentsInvolveStackSlot(v75, v76))
          *(_BYTE *)a3[1] = 1;
        return;
      case 0x13:
        v39 = &v311;
        goto LABEL_45;
      case 0x1C:
        v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        v22 = v12;
        do
        {
          v16 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
LABEL_19:
        if (v16 != v12)
          *v12 = v16;
        return;
      case 0x40:
      case 0x42:
      case 0x44:
        v52 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v53 = v52 > 0x34;
        v54 = (1 << v52) & 0x12000000000003;
        if (v53 || v54 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19856B204);
        }
        return;
      case 0x52:
      case 0x53:
        v56 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v53 = v56 > 0x34;
        v57 = (1 << v56) & 0x1200001C000003;
        if (v53 || v57 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19856B278);
        }
        return;
      case 0x5C:
      case 0x5D:
        v60 = *((_DWORD *)a2 + 18);
        v61 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        switch((char)v60)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 10:
          case 11:
          case 23:
          case 24:
            return;
          case 7:
            if (BYTE2(v60) > 3u || BYTE2(v60) == 2)
              return;
            if (BYTE2(v60) == 3)
              v206 = 18;
            else
              v206 = v61;
            v207 = *((_QWORD *)a2 + 3);
            v208 = *((_DWORD *)this + 41);
            if (v208 <= v207)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C91CLL);
            }
            if (v208 <= (int)v207 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C924);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v305, v206, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v304;
            goto LABEL_45;
          case 8:
            if (BYTE2(v60) >= 2u)
            {
              if (BYTE2(v60) != 3)
                return;
              if ((*((_DWORD *)a2 + 14) & 7) == 3)
                goto LABEL_390;
            }
            else if ((*((_DWORD *)a2 + 14) & 7) == 3)
            {
              if (!BYTE2(v60))
              {
                v209 = 14;
                goto LABEL_401;
              }
LABEL_390:
              if (BYTE2(v60) == 3)
                v209 = 15;
              else
                v209 = 13;
LABEL_401:
              v212 = *((_QWORD *)a2 + 3);
              v213 = *((_DWORD *)this + 41);
              if (v213 <= v212)
              {
                __break(0xC471u);
                JUMPOUT(0x19856C92CLL);
              }
              if (v213 <= (int)v212 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19856C934);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v303, v209, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v39 = &v302;
LABEL_45:
              v40 = a2;
LABEL_46:
              JSC::DFG::LazyNode::LazyNode(v39, v40);
              return;
            }
            v209 = 16;
            goto LABEL_401;
          case 9:
            if (BYTE2(v60) > 3u || BYTE2(v60) == 2)
              return;
            if (BYTE2(v60) == 3)
              v200 = 20;
            else
              v200 = v61;
            v201 = *((_QWORD *)a2 + 3);
            v202 = *((_DWORD *)this + 41);
            if (v202 <= v201)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C90CLL);
            }
            if (v202 <= (int)v201 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C914);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v301, v200, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v300;
            goto LABEL_45;
          case 12:
            if (BYTE2(v60) > 1u)
              return;
            v203 = *((_QWORD *)a2 + 3);
            v204 = *((_DWORD *)this + 41);
            if (v204 <= v203)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C95CLL);
            }
            if (v204 <= (int)v203 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C964);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v309, v61, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v308;
            goto LABEL_45;
          case 13:
            v210 = *((_QWORD *)a2 + 3);
            v211 = *((_DWORD *)this + 41);
            if (v211 <= v210)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C8FCLL);
            }
            if (v211 <= (int)v210 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C904);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v307, v61, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v306;
            goto LABEL_45;
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
            if ((v60 & 0x40000000) != 0)
              return;
            v62 = *((_QWORD *)a2 + 3);
            v63 = *((_DWORD *)this + 41);
            if (v63 <= v62)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C878);
            }
            if (v63 <= (int)v62 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C880);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v299, v61, 16406, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v298;
            goto LABEL_45;
          case 25:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x19856C678);
          default:
            __break(0xC471u);
            JUMPOUT(0x19856C630);
        }
      case 0x63:
        v17 = (int *)*((_QWORD *)a2 + 9);
        v18 = ***a3;
        v19 = (uint64_t *)(v18 & 0xFFFFFFFF8);
        v20 = v18 & 0xFFFFFFFF8;
        if ((v18 & 1) != 0)
          v20 = *v19;
        v21 = v17[1];
        if (v20)
        {
          v23 = *(_BYTE *)(v20 + 32);
          v24 = *(_QWORD *)(v20 + 24);
          v25 = HIDWORD(v24) & 0xFFFFF | ((int)(v24 >> 28) >> 24 << 20);
          if ((v23 & 1) != 0 && v25 + 3 == v21)
            goto LABEL_16;
          if ((v24 >> 60) - 3 <= 2 && v25 + 4 == v21)
            goto LABEL_16;
          v27 = v25 + 6;
          if (v27 <= v21 && (int)((v24 & 0x3FFFFF) + v27 - 1) > v21)
            goto LABEL_16;
        }
        else if ((v21 & 0x80000000) == 0 && v21 != 5)
        {
LABEL_16:
          *(_BYTE *)a3[1] = 1;
        }
        v28 = v17[6];
        if (!v28)
          return;
        v29 = *v17;
        v30 = a3[1];
        v31 = v28 - 1;
        v32 = v31 + v29;
        break;
      case 0x64:
        v77 = (_DWORD *)*((_QWORD *)a2 + 9);
        if (JSC::DFG::argumentsInvolveStackSlot(**a3, v77[1] | ((((unint64_t)v77[1] >> 31) & 1) << 32)))
        {
          *(_BYTE *)a3[1] = 1;
        }
        v78 = v77[6];
        if (v78)
        {
          v79 = *v77 - 1;
          do
          {
            if (JSC::DFG::argumentsInvolveStackSlot(**a3, (v79 + v78) | ((((unint64_t)(v79 + v78) >> 31) & 1) << 32)))
            {
              *(_BYTE *)a3[1] = 1;
            }
            --v78;
          }
          while (v78);
        }
        return;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v42 = *((_QWORD *)a2 + 3);
        v43 = *((_DWORD *)this + 41);
        if (v43 <= v42)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C690);
        }
        if (v43 <= (int)v42 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C698);
        }
        if (v43 <= (int)v42 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C6A0);
        }
        v44 = *((_QWORD *)this + 19);
        v45 = *(_QWORD *)(v44 + 8 * *((_QWORD *)a2 + 3));
        v46 = *(_QWORD *)(v44 + 8 * (v42 + 1));
        v47 = *(_QWORD *)(v44 + 8 * (v42 + 2));
        v48 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        v49 = v45 & 0xFF00FFFFFFFFFFFFLL;
        v50 = v46 & 0xFF00FFFFFFFFFFFFLL;
        switch((int)v45)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
            return;
          case 7:
            if (*((_WORD *)a2 + 9) == 146)
              v51 = *((_DWORD *)a2 + 20);
            else
              v51 = *((_DWORD *)a2 + 18);
            if (BYTE2(v51) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v297, v48, 16400, v49, v50, 0);
            JSC::DFG::LazyNode::LazyNode(&v296, (JSC::DFG::Node *)(v47 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v295, 18, 16400, v49, v50, 0);
            v39 = &v294;
            break;
          case 8:
            if (*((_WORD *)a2 + 9) == 146)
              v197 = *((_DWORD *)a2 + 20);
            else
              v197 = *((_DWORD *)a2 + 18);
            if (BYTE2(v197) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v293, 13, 16401, v49, v50, 0);
            JSC::DFG::LazyNode::LazyNode(&v292, (JSC::DFG::Node *)(v47 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v291, 14, 16401, v49, v50, 0);
            JSC::DFG::LazyNode::LazyNode(&v290, (JSC::DFG::Node *)(v47 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v289, 15, 16401, v49, v50, 0);
            v39 = &v288;
            break;
          case 9:
            if (*((_WORD *)a2 + 9) == 146)
              v198 = *((_DWORD *)a2 + 20);
            else
              v198 = *((_DWORD *)a2 + 18);
            if (BYTE2(v198) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v287, v48, 16402, v49, v50, 0);
            JSC::DFG::LazyNode::LazyNode(&v286, (JSC::DFG::Node *)(v47 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v285, 20, 16402, v49, v50, 0);
            v39 = &v284;
            break;
          case 25:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x19856C244);
          default:
            __break(0xC471u);
            JUMPOUT(0x19856C2D8);
        }
        v40 = (JSC::DFG::Node *)(v47 & 0xFF00FFFFFFFFFFFFLL);
        goto LABEL_46;
      case 0x8A:
        v39 = &v280;
        goto LABEL_45;
      case 0x8B:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v281;
        goto LABEL_46;
      case 0x93:
        v39 = &v278;
        goto LABEL_45;
      case 0x96:
        v39 = &v316;
        goto LABEL_45;
      case 0x97:
        v39 = &v315;
        goto LABEL_45;
      case 0x98:
      case 0x99:
        if (*((int *)this + 238) >= 2)
          v39 = &v274;
        else
          v39 = &v273;
        goto LABEL_45;
      case 0x9A:
        if (*((int *)this + 238) < 2)
          v39 = &v271;
        else
          v39 = &v272;
        goto LABEL_45;
      case 0x9B:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
        if (*((int *)this + 238) >= 2)
          v39 = &v268;
        else
          v39 = &v267;
        goto LABEL_46;
      case 0x9C:
        JSC::DFG::MultiPutByOffsetData::reallocatesStorage(*((_QWORD *)a2 + 9));
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        if (*((int *)this + 238) < 2)
          v39 = &v269;
        else
          v39 = &v270;
        goto LABEL_46;
      case 0x9D:
        JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
        return;
      case 0x9E:
        v83 = *((_DWORD *)a2 + 18);
        switch((char)v83)
        {
          case 3:
          case 5:
            return;
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            v39 = &v266;
            goto LABEL_45;
          case 12:
          case 13:
            v39 = &v265;
            goto LABEL_45;
          case 25:
            goto LABEL_433;
          default:
            v214 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
            if (v214 == 12 || v214 == 0)
            {
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
              __break(0xC471u);
              JUMPOUT(0x19856C9ACLL);
            }
LABEL_433:
            if ((v83 & 0x40000000) != 0)
              return;
            v39 = &v264;
            break;
        }
        goto LABEL_45;
      case 0x9F:
        v91 = *((_DWORD *)a2 + 18);
        if (v91 != 25)
        {
          v216 = JSC::DFG::toTypedArrayType(v91);
          if (v216 == 12 || v216 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x19856C734);
          }
        }
        if ((v91 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x19856B8F4);
        }
        return;
      case 0xA0:
        v148 = *((_DWORD *)a2 + 18);
        if (v148 == 25)
          goto LABEL_267;
        v220 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v220 == 12 || v220 == 0)
        {
          if (v148 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19856C80CLL);
          }
          return;
        }
        if (v148 == 3)
          return;
LABEL_267:
        if ((v148 & 0x40000000) != 0)
          return;
        v39 = &v263;
        goto LABEL_45;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C610);
        }
        v39 = &v262;
        goto LABEL_45;
      case 0xA2:
        v94 = *((_DWORD *)a2 + 18);
        v95 = v94;
        if (v94 == 25)
          goto LABEL_193;
        v218 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v218 == 12 || v218 == 0)
        {
          if (v95 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19856C798);
          }
        }
        else if (v95 != 3)
        {
          v94 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_193:
          if ((v94 & 0x40000000) == 0)
          {
            v39 = &v277;
            goto LABEL_45;
          }
        }
        return;
      case 0xA3:
        v162 = *((_DWORD *)a2 + 18);
        v163 = v162;
        if (v162 == 25)
          goto LABEL_284;
        v222 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v222 == 12 || v222 == 0)
        {
          if (v163 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19856C870);
          }
        }
        else if (v163 != 3)
        {
          v162 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_284:
          if ((v162 & 0x40000000) == 0)
          {
            v39 = &v276;
            goto LABEL_45;
          }
        }
        return;
      case 0xAD:
      case 0xAE:
        v39 = &v255;
        goto LABEL_45;
      case 0xAF:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v254;
        goto LABEL_46;
      case 0xB3:
        v39 = &v259;
        goto LABEL_45;
      case 0xB4:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v258;
        goto LABEL_46;
      case 0xBE:
        v39 = &v283;
        goto LABEL_45;
      case 0xC2:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          return;
        v39 = &v275;
        goto LABEL_45;
      case 0xC4:
        v146 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v146)
          v147 = (_DWORD)v146 == 11;
        else
          v147 = 1;
        if (!v147)
        {
          __break(0xC471u);
          JUMPOUT(0x19856BC80);
        }
        return;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        v41 = v11 - 202;
        if (v41 >= 0xAu || ((0x3EFu >> v41) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C5F0);
        }
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0
          && *((_DWORD *)this + 41) <= (dword_199156668[(__int16)v41] + *((_DWORD *)a2 + 6)))
        {
          __break(0xC471u);
          JUMPOUT(0x19856B088);
        }
        return;
      case 0xCE:
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0 && *((_DWORD *)this + 41) <= *((_DWORD *)a2 + 6))
        {
          __break(0xC471u);
          JUMPOUT(0x19856B7ECLL);
        }
        return;
      case 0xD7:
        if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19856BCE4);
        }
        return;
      case 0xE6:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3FuLL) >= 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19856B68CLL);
        }
        return;
      case 0x106:
        v96 = *((_QWORD *)a2 + 4);
        v97 = v96;
        if ((v96 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v96) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v96 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!(_DWORD)v96)
            return;
        }
        v104 = *((unsigned __int16 *)a2 + 9);
        switch(v104)
        {
          case 267:
            goto LABEL_404;
          case 264:
            v105 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_404:
            v105 = *((_DWORD *)a2 + 21);
            break;
          default:
            v105 = *((_DWORD *)a2 + 18);
            goto LABEL_202;
        }
        LOBYTE(v105) = v105 & 0xF;
LABEL_202:
        if (v105 <= 0x19u && ((1 << v105) & 0x2A003F0) != 0)
        {
          v106 = *((unsigned int *)this + 107);
          if (v96 >= v106)
          {
            if ((_DWORD)v106)
            {
              v178 = (unsigned int *)*((_QWORD *)this + 52);
              v179 = 4 * v106;
              do
              {
                v180 = *v178;
                if (v180 < v96)
                {
                  v181 = v180 + *((_DWORD *)a2 + 6);
                  if (*((_DWORD *)this + 41) <= v181)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19856C6A8);
                  }
                  v182 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v181);
                  if ((int)v180 < 0)
                    v183 = COERCE__INT64((double)v180) + 0x2000000000000;
                  else
                    v183 = v180 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v183, v98, v99, v100, v101, v102, v103);
                  JSC::DFG::LazyNode::LazyNode(&v252, (JSC::DFG::Node *)(v182 & 0xFF00FFFFFFFFFFFFLL));
                }
                ++v178;
                v179 -= 4;
              }
              while (v179);
            }
          }
          else
          {
            v107 = 0;
            do
            {
              v108 = v107 + *((_QWORD *)a2 + 3);
              if (*((_DWORD *)this + 41) <= v108)
              {
                __break(0xC471u);
                JUMPOUT(0x19856C688);
              }
              v109 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v108);
              if ((int)v107 < 0)
                v110 = COERCE__INT64((double)v107) + 0x2000000000000;
              else
                v110 = v107 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v110, v98, v99, v100, v101, v102, v103);
              JSC::DFG::LazyNode::LazyNode(&v253, (JSC::DFG::Node *)(v109 & 0xFF00FFFFFFFFFFFFLL));
              ++v107;
            }
            while (v97 != v107);
          }
        }
        return;
      case 0x107:
        if (*((_DWORD *)a2 + 8))
        {
          v164 = *((_QWORD *)a2 + 3);
          v165 = *((_DWORD *)this + 41);
          v166 = v165 >= v164;
          LODWORD(v167) = v165 - v164;
          if (v166)
            v167 = v167;
          else
            v167 = 0;
          v168 = *((unsigned int *)a2 + 8) - 1;
          do
          {
            if (!v167)
            {
              __break(0xC471u);
              JUMPOUT(0x19856C680);
            }
            v169 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v164++) & 0xFF00FFFFFFFFFFFFLL)
                                       + 0x12);
            v170 = v169 == 350 || v168-- == 0;
            --v167;
          }
          while (!v170);
        }
        return;
      case 0x10A:
        v86 = *((unsigned int *)a2 + 20);
        if ((v86 & 0x80000000) != 0)
          v87 = COERCE__INT64((double)v86) + 0x2000000000000;
        else
          v87 = v86 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v87, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 0x10B:
        v117 = (uint64_t *)*((_QWORD *)a2 + 9);
        v118 = *v117;
        v119 = *(unsigned int *)(*v117 + 8);
        if ((v119 & 0x80000000) != 0)
          v120 = COERCE__INT64((double)v119) + 0x2000000000000;
        else
          v120 = v119 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v120, (uint64_t)a3, a4, a5, a6, a7, a8);
        v128 = *((unsigned __int16 *)a2 + 9);
        switch(v128)
        {
          case 267:
            goto LABEL_396;
          case 264:
            v129 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_396:
            v129 = *((_DWORD *)a2 + 21);
            break;
          default:
            v129 = *((_DWORD *)a2 + 18);
            goto LABEL_232;
        }
        LOBYTE(v129) = v129 & 0xF;
LABEL_232:
        v53 = v129 > 0x19u;
        v130 = (1 << v129) & 0x2A003F0;
        if (!v53 && v130 != 0)
        {
          v132 = *((unsigned int *)this + 107);
          if (v132 <= v119)
          {
            v251[1] = 0;
            v251[0] = 0;
            if ((_DWORD)v132)
            {
              v171 = (unsigned int *)*((_QWORD *)this + 52);
              v172 = 4 * v132;
              do
              {
                v173 = *v171;
                LODWORD(v224) = v173;
                if (v173 < v119)
                {
                  if (HIDWORD(v251[1]) == LODWORD(v251[1]))
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v251, (unint64_t)&v224);
                  }
                  else
                  {
                    *((_DWORD *)v251[0] + HIDWORD(v251[1])) = v173;
                    ++HIDWORD(v251[1]);
                  }
                }
                ++v171;
                v172 -= 4;
              }
              while (v172);
              v184 = v251[0];
              if (HIDWORD(v251[1]))
              {
                v185 = v118 + 16;
                v186 = 4 * HIDWORD(v251[1]);
                do
                {
                  v187 = *(unsigned int *)v184;
                  if ((v187 & 0x80000000) != 0)
                    v188 = COERCE__INT64((double)v187) + 0x2000000000000;
                  else
                    v188 = v187 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v188, v122, v123, v124, v125, v126, v127);
                  if ((*(_BYTE *)(v118 + 4) & 0xE) == 6)
                    v195 = *(_QWORD *)(v185 + 8 * v187) + 0x2000000000000;
                  else
                    v195 = *(_QWORD *)(v185 + 8 * v187);
                  JSC::DFG::Graph::freeze((uint64_t)this, v195, v189, v190, v191, v192, v193, v194);
                  v184 = (WTF *)((char *)v184 + 4);
                  v186 -= 4;
                }
                while (v186);
                v184 = v251[0];
              }
              if (v184)
              {
                v251[0] = 0;
                LODWORD(v251[1]) = 0;
                WTF::fastFree((unint64_t)v184, v121, v122, v123, v124, v125, v126, v127);
              }
            }
          }
          else if ((_DWORD)v119)
          {
            v133 = 0;
            v134 = v118 + 16;
            do
            {
              if ((v133 & 0x80000000) != 0)
                v135 = COERCE__INT64((double)v133) + 0x2000000000000;
              else
                v135 = v133 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v135, v122, v123, v124, v125, v126, v127);
              if ((*(_BYTE *)(v118 + 4) & 0xE) == 6)
                v142 = *(_QWORD *)(v134 + 8 * v133) + 0x2000000000000;
              else
                v142 = *(_QWORD *)(v134 + 8 * v133);
              JSC::DFG::Graph::freeze((uint64_t)this, v142, v136, v137, v138, v139, v140, v141);
              ++v133;
            }
            while (v119 != v133);
          }
        }
        return;
      case 0x10D:
        v80 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v80 >= 2 && (_DWORD)v80 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19856B5A8);
        }
        return;
      case 0x114:
        JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 0x123:
        v39 = &v282;
        goto LABEL_45;
      case 0x12B:
        v39 = &v320;
        goto LABEL_45;
      case 0x12C:
        v39 = &v319;
        goto LABEL_45;
      case 0x135:
        v39 = &v318;
        goto LABEL_45;
      case 0x136:
        v39 = &v317;
        goto LABEL_45;
      case 0x13E:
      case 0x145:
        v64 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v53 = v64 > 0x34;
        v65 = (1 << v64) & 0x12026001400103;
        if (v53 || v65 == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19856B394);
        }
        return;
      case 0x146:
        v92 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v92)
          v93 = (_DWORD)v92 == 28;
        else
          v93 = 1;
        if (!v93)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19856B960);
        }
        return;
      case 0x157:
        v39 = &v261;
        goto LABEL_45;
      case 0x158:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v260;
        goto LABEL_46;
      case 0x164:
        v39 = &v257;
        goto LABEL_45;
      case 0x165:
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v256;
        goto LABEL_46;
      case 0x180:
      case 0x182:
        if ((_DWORD)v11 == 386)
        {
          v59 = *((unsigned __int8 *)a2 + 80);
          if (v59 != 1)
          {
            if (v59 == 2 && *((_DWORD *)this + 41) <= *((_DWORD *)a2 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x19856B2ACLL);
            }
            return;
          }
          v157 = 11;
        }
        else
        {
          v157 = 12;
        }
        v158 = BYTE2(*((_DWORD *)a2 + 18));
        v159 = *((_DWORD *)a2 + 18);
        if (v159 == 9)
        {
          if (v158 > 1)
            return;
          v176 = *((_QWORD *)a2 + 3);
          v177 = *((_DWORD *)this + 41);
          if (v177 <= v176)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8ECLL);
          }
          if (v177 <= (int)v176 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8F4);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v322, v157, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v321;
        }
        else if (v159 == 8)
        {
          if (v158 > 1)
            return;
          v174 = *((_QWORD *)a2 + 3);
          v175 = *((_DWORD *)this + 41);
          if (v175 <= v174)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8DCLL);
          }
          if (v175 <= (int)v174 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8E4);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v324, v157, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v323;
        }
        else
        {
          if (v159 != 7 || v158 > 1)
            return;
          v160 = *((_QWORD *)a2 + 3);
          v161 = *((_DWORD *)this + 41);
          if (v161 <= v160)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8CCLL);
          }
          if (v161 <= (int)v160 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19856C8D4);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v326, v157, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v325;
        }
        goto LABEL_45;
      case 0x18A:
        v84 = *((_QWORD *)a2 + 3);
        if ((v84 & 0xFC000000000000) == 0x78000000000000)
          v85 = 16411;
        else
          v85 = 16412;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v250, 52, v85, v84, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v39 = &v249;
        goto LABEL_45;
      case 0x18B:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v248, 54, 16411, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v39 = &v247;
        goto LABEL_45;
      case 0x18C:
        v39 = &v246;
        goto LABEL_45;
      case 0x18D:
        v39 = &v245;
        goto LABEL_45;
      case 0x18E:
        v39 = &v244;
        goto LABEL_45;
      case 0x18F:
        v39 = &v243;
        goto LABEL_45;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v143 = 16412;
        else
          v143 = 16411;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v242, 48, v143, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v39 = &v241;
        goto LABEL_45;
      case 0x191:
        v39 = &v240;
        goto LABEL_45;
      case 0x192:
        v39 = &v239;
        goto LABEL_45;
      case 0x193:
        v39 = &v238;
        goto LABEL_45;
      case 0x194:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v235, 53, 16412, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v39 = &v234;
        goto LABEL_45;
      case 0x195:
        v144 = *((_QWORD *)a2 + 3);
        v145 = *((_DWORD *)this + 41);
        if (v145 <= v144)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C7A0);
        }
        if (v145 <= (int)v144 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C7A8);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v233, 53, 16411, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v39 = &v232;
        goto LABEL_45;
      case 0x197:
        v81 = *((_QWORD *)a2 + 3);
        if ((v81 & 0xFC000000000000) == 0x88000000000000)
          v82 = 16415;
        else
          v82 = 16416;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v237, 55, v82, v81, *((_QWORD *)a2 + 4), 0);
        v39 = &v236;
        goto LABEL_45;
      case 0x198:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v231, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v40 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v230;
        goto LABEL_46;
      case 0x199:
        v71 = *((_QWORD *)a2 + 3);
        v72 = *((_DWORD *)this + 41);
        if (v72 <= v71)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C6CCLL);
        }
        if (v72 <= (int)v71 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C6D4);
        }
        v73 = v71 + 2;
        if (v72 <= (int)v71 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19856C6DCLL);
        }
        v74 = *((_QWORD *)this + 19);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v229, 55, 16415, *(_QWORD *)(v74 + 8 * v71), *(_QWORD *)(v74 + 8 * (v71 + 1)), 0);
        v40 = (JSC::DFG::Node *)(*(_QWORD *)(v74 + 8 * v73) & 0xFF00FFFFFFFFFFFFLL);
        v39 = &v228;
        goto LABEL_46;
      case 0x1A0:
        v88 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
        if (!v88)
          return;
        v89 = *(_DWORD *)(v88 + 28);
        if ((_WORD)v89)
        {
          if (v89 >= 0xFFFF0000 && (unsigned __int16)v89 == 0xFFFF)
            return;
        }
        else if (v89 > 0xFFFEFFFF)
        {
          return;
        }
        v39 = &v279;
        goto LABEL_45;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          return;
        v67 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v226, v67, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v39 = &v225;
        goto LABEL_45;
      case 0x1AE:
      case 0x1AF:
        v39 = &v227;
        goto LABEL_45;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x19856B888);
      default:
        *(_OWORD *)v251 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v11];
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v251, &v224);
        if (v224)
          v149 = (const char *)(v224 + 16);
        else
          v149 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v149);
        WTF::CString::~CString((WTF::CString *)&v224, v150, v151, v152, v153, v154, v155, v156);
        __break(0xC471u);
        JUMPOUT(0x19856BD84);
    }
    while (1)
    {
      v33 = v18 & 0xFFFFFFFF8;
      if ((v18 & 1) != 0)
        v33 = *v19;
      if (v33)
      {
        v34 = *(_BYTE *)(v33 + 32);
        v35 = *(_QWORD *)(v33 + 24);
        v36 = HIDWORD(v35) & 0xFFFFF | ((int)(v35 >> 28) >> 24 << 20);
        if (((v34 & 1) == 0 || v32 != v36 + 3) && ((v35 >> 60) - 3 > 2 || v32 != v36 + 4))
        {
          v38 = v36 + 6;
          if (v38 > v32 || (int)((v35 & 0x3FFFFF) + v38 - 1) <= v32)
            goto LABEL_41;
        }
      }
      else if (v32 < 0 || v32 == 5)
      {
        goto LABEL_41;
      }
      *v30 = 1;
LABEL_41:
      --v31;
      --v32;
      if (v31 == -1)
        return;
    }
  }
  if (v68 - 202 > 0x3E || ((1 << (v68 + 54)) & 0x400000000E002FEFLL) == 0)
  {
    v70 = v68 - 333;
    if (v70 > 0x3A || ((1 << v70) & 0x7A8000000000003) == 0)
    {
LABEL_348:
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:302:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
      __break(0xC471u);
      JUMPOUT(0x19856C148);
    }
  }
}

uint64_t JSC::DFG::VariableAccessDataDump::dump(JSC::DFG::VariableAccessDataDump *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  WTF::PrintStream *v8;
  BOOL v9;
  uint64_t v10;
  const char *v11;
  WTF::PrintStream *v12;
  _QWORD *v13;
  _QWORD *v14;
  WTF::PrintStream *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  JSC *v24;
  const char *v25;
  WTF::PrintStream *v26;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 464);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v6 >> 4 >= *(unsigned int *)(v4 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x19856D470);
      }
      if (*(_QWORD *)(*(_QWORD *)(v4 + 472) + 8 * (v6 >> 4)) + ((v6 & 0xF) << 6) == *((_QWORD *)this + 1))
        break;
      v6 = ++v7;
      if (v5 <= v7)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v7 = -1;
  }
  do
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%c", v7 % 0x1A + 65);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v9 = v7 > 0x19;
    v7 /= 0x1Au;
  }
  while (v9);
  v10 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v10 + 40))
  {
    v11 = "!";
LABEL_10:
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v12, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v10 = *((_QWORD *)this + 1);
    goto LABEL_12;
  }
  if (!*(_BYTE *)(v10 + 43))
  {
    v11 = "~";
    goto LABEL_10;
  }
LABEL_12:
  v13 = (_QWORD *)v10;
  do
  {
    v14 = v13;
    v13 = (_QWORD *)*v13;
  }
  while (v13);
  if (v14 != (_QWORD *)v10)
    *(_QWORD *)v10 = v14;
  v15 = (WTF::PrintStream *)v14[1];
  if (*(_BYTE *)(v10 + 40) || !*(_BYTE *)(v10 + 43))
    goto LABEL_18;
  if (*(_DWORD *)(v10 + 56) == 1)
  {
    v16 = 2;
    goto LABEL_43;
  }
  v17 = (_QWORD *)v10;
  do
  {
    v18 = v17;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  if (v18 != (_QWORD *)v10)
    *(_QWORD *)v10 = v18;
  v19 = v18[2];
  if (v19)
  {
    if ((v19 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if (!*(_DWORD *)(v10 + 28))
        goto LABEL_36;
      v20 = (_QWORD *)v10;
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
      if (v21 != (_QWORD *)v10)
        *(_QWORD *)v10 = v21;
      v22 = v21[2];
      if (v22 && (v22 & 0xFFFFFFF0FFFFFFFFLL) == 0)
      {
        v16 = 1;
      }
      else
      {
LABEL_36:
        if ((v19 & 0x2800FFFFFFF7) == 0 || (v19 & 0xFFFFD7FF00000008) != 0)
        {
          if (v19 == 0x10000000000)
            v16 = 4;
          else
            v16 = 5;
        }
        else
        {
          v16 = 3;
        }
      }
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
LABEL_18:
    v16 = 5;
  }
LABEL_43:
  v24 = (JSC *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::dumpSpeculationAbbreviated(v24, v15);
  WTF::PrintStream::printf(v24, "%s", "/");
  v25 = off_1E358E810[v16];
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)v24 + 32))(v24);
  WTF::PrintStream::printf(v26, "%s", v25);
  (*(void (**)(JSC *))(*(_QWORD *)v24 + 40))(v24);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::VariableEventStream::reconstruct<(JSC::DFG::VariableEventStream::ReconstructionStyle)0>(_DWORD **a1, unsigned int *a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int *v44;
  int v45;
  int v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t i;
  int v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  char **v104;
  uint64_t v105;
  unsigned int **v106;
  unsigned int **v107;
  uint64_t v108;
  int v109;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  char v128;
  int8x16_t v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[12];
  char v141;
  uint64_t v142;
  int8x16x2_t v143;

  v9 = a6;
  v10 = a5;
  v11 = a1;
  v142 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a2 + 15);
  if (v12)
  {
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 12);
    v13 = v12 & 0xFE;
    v14 = a2;
    if (v13 == 2)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
  }
  v104 = (char **)(16 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C));
  if (v104 == &JSC::FunctionCodeBlock::s_info)
  {
    v105 = *((_QWORD *)a2 + 8);
    v106 = (unsigned int **)(v105 + 96);
    v107 = (unsigned int **)(v105 + 104);
    if (*(int *)(*((_QWORD *)a2 + 7) + 20) >= 0)
      v107 = v106;
  }
  else
  {
    if (v104 != &JSC::EvalCodeBlock::s_info
      && v104 != &JSC::ProgramCodeBlock::s_info
      && v104 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x19856E074);
    }
    v107 = (unsigned int **)(*((_QWORD *)a2 + 8) + 72);
  }
  v14 = *v107;
  if (v14 || (v14 = a2, v13 == 4))
  {
    if (*((_QWORD *)v14 + 24))
      v14 = (unsigned int *)*((_QWORD *)v14 + 24);
    v108 = *((_QWORD *)v14 + 15);
    if (v108)
    {
      v109 = *(unsigned __int8 *)(v108 + 12);
      if ((v109 & 0xFE) != 2 && v109 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19856DDB0);
      }
    }
  }
  else
  {
    v14 = a2;
    if ((_DWORD)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19856E1CCLL);
    }
  }
LABEL_3:
  v15 = (_QWORD *)(*a3 & 0xFFFFFFFF8);
  if ((*a3 & 1) != 0)
    v15 = (_QWORD *)*v15;
  if (v15)
  {
    v102 = v15[1];
    v103 = v15[3];
    v16 = *(_DWORD *)(v102 + 20) - (HIDWORD(v103) & 0xFFFFF | ((int)(v103 >> 28) >> 24 << 20));
    v17 = ((2 * *(unsigned __int8 *)(*(_QWORD *)(v102 + 56) + 30)) & 4) + (v103 >> 22);
  }
  else
  {
    v16 = v14[5];
    v17 = (2 * *(unsigned __int8 *)(*((_QWORD *)v14 + 7) + 30)) & 4;
  }
  if ((_DWORD)a5)
  {
    v134 = a4;
    v135 = a6;
    LODWORD(v18) = a5;
    do
    {
      v18 = (v18 - 1);
      if (**a1 <= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x19856DF20);
      }
    }
    while (*((_BYTE *)*a1 + 14 * v18 + 16));
    v19 = a2[7];
    v20 = v16;
    v131 = v17;
    v21 = v19 + v16;
    v22 = v21 + v17;
    v137 = v16;
    v138 = v19;
    v136 = v21;
    v133 = v16;
    if (v22)
    {
      if (v22 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19856E1F8);
      }
      v23 = (char *)WTF::fastMalloc((WTF *)(8 * v22));
      v24 = (unint64_t)v23;
      if ((_DWORD)v22)
      {
        v25 = 0;
        do
        {
          *(_DWORD *)&v23[v25] = 0;
          v25 += 8;
        }
        while (8 * v17 + 8 * v138 + 8 * v16 != v25);
        memset_pattern16(v23, &unk_1991566B0, 8 * (v17 + v16 + v138 - 1) + 8);
        v19 = v138;
        v132 = 0;
      }
      else
      {
        v132 = 1;
        v19 = v138;
      }
      v21 = v136;
      v20 = v16;
    }
    else
    {
      v24 = 0;
      v132 = 1;
    }
    v139 = 0;
    if (v18 < v10)
    {
      a4 = 0xFFFFFFFB00000000;
      a6 = 0xFFFFFFFFLL;
      a8 = 20;
      v129 = a9;
      while (1)
      {
        if (v18 >= *(unsigned int *)*v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19856DF40);
        }
        v26 = *v11 + 4;
        v27 = (unsigned int *)(v26 + 14 * v18);
        v28 = *((unsigned __int8 *)v27 + 12);
        v29 = 0;
        v30 = 0;
        v31 = 0x3FFFFFFFLL;
        switch(*((_BYTE *)v27 + 12))
        {
          case 0:
            goto LABEL_56;
          case 1:
            goto LABEL_36;
          case 2:
            LOBYTE(v28) = 0;
LABEL_36:
            v49 = v26 + 14 * v18;
            v31 = *(_QWORD *)(v49 + 4);
            v30 = *(_BYTE *)(v49 + 13);
            v29 = v28;
            goto LABEL_37;
          case 3:
LABEL_37:
            v50 = *v27;
            v51 = v139;
            if (v139)
              goto LABEL_38;
            v130 = v10;
            v69 = v22;
            v70 = v11;
            v71 = a5;
            v72 = a7;
            a8 = 20;
            a7 = v72;
            a6 = 0xFFFFFFFFLL;
            a5 = v71;
            v11 = v70;
            v22 = v69;
            v10 = v130;
            a4 = 0xFFFFFFFB00000000;
            v21 = v136;
            v20 = v137;
            v19 = v138;
            v51 = v139;
            if (v139)
LABEL_38:
              v52 = *(_DWORD *)(v51 - 8);
            else
              v52 = 0;
            v53 = 9 * ((v50 + ~(v50 << 15)) ^ ((v50 + ~(v50 << 15)) >> 10));
            v54 = (v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11);
            v55 = v52 & (v54 ^ HIWORD(v54));
            v56 = (unsigned int *)(v51 + 20 * v55);
            v57 = *v56;
            if (*v56 == -1)
              goto LABEL_40;
            a2 = 0;
            v67 = 1;
            do
            {
              if (v57 == v50)
                goto LABEL_56;
              if (v57 == -2)
                a2 = v56;
              v55 = (v55 + v67) & v52;
              v56 = (unsigned int *)(v51 + 20 * v55);
              v57 = *v56;
              ++v67;
            }
            while (*v56 != -1);
            if (a2)
            {
              *a2 = -1;
              v143.val[0] = v129;
              v143.val[0].i16[0] = 0;
              v143.val[1] = (int8x16_t)xmmword_199156690;
              v129 = vqtbl2q_s8(v143, (int8x16_t)xmmword_1991566A0);
              *(int8x16_t *)(a2 + 1) = v129;
              --*(_DWORD *)(v139 - 16);
            }
            else
            {
LABEL_40:
              a2 = v56;
            }
            *a2 = v50;
            *((_BYTE *)a2 + 4) = v29;
            v58 = 1;
            *((_BYTE *)a2 + 5) = 1;
            *((_QWORD *)a2 + 1) = v31;
            *((_BYTE *)a2 + 16) = v30;
            v59 = v139;
            if (v139)
              v58 = *(_DWORD *)(v139 - 12) + 1;
            *(_DWORD *)(v139 - 12) = v58;
            v60 = (*(_DWORD *)(v59 - 16) + v58);
            v61 = *(unsigned int *)(v59 - 4);
            if (v61 <= 0x400)
            {
              if (3 * v61 > 4 * v60)
                goto LABEL_56;
LABEL_45:
              v62 = a5;
              v63 = a7;
              a8 = 20;
              a7 = v63;
              a6 = 0xFFFFFFFFLL;
              a5 = v62;
              a4 = 0xFFFFFFFB00000000;
              v21 = v136;
              v20 = v137;
              v19 = v138;
              goto LABEL_56;
            }
            if (v61 <= 2 * v60)
              goto LABEL_45;
            goto LABEL_56;
          case 4:
          case 5:
          case 6:
            if (v139)
            {
              v39 = *v27;
              v40 = *(_DWORD *)(v139 - 8);
              v41 = 9 * ((v39 + ~(v39 << 15)) ^ ((v39 + ~(v39 << 15)) >> 10));
              v42 = (v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11);
              v43 = v40 & (v42 ^ HIWORD(v42));
              v44 = (int *)(v139 + 20 * v43);
              v45 = *v44;
              if (*v44 == v39)
                goto LABEL_34;
              v68 = 1;
              while (v45 != -1)
              {
                v43 = (v43 + v68) & v40;
                v44 = (int *)(v139 + 20 * v43);
                v45 = *v44;
                ++v68;
                if (*v44 == v39)
                  goto LABEL_34;
              }
              v44 = (int *)(v139 + 20 * *(unsigned int *)(v139 - 4));
            }
            else
            {
              v44 = 0;
            }
LABEL_34:
            v46 = v28 - 1;
            v47 = 1;
            switch(v46)
            {
              case 0:
              case 3:
                goto LABEL_35;
              case 1:
              case 4:
                v47 = 0;
LABEL_35:
                *((_BYTE *)v44 + 4) = v47;
                *((_BYTE *)v44 + 5) = 1;
                v48 = v26 + 14 * v18;
                *((_QWORD *)v44 + 1) = *(_QWORD *)(v48 + 4);
                *((_BYTE *)v44 + 16) = *(_BYTE *)(v48 + 13);
                break;
              case 2:
                *((_BYTE *)v44 + 5) = 1;
                break;
              case 5:
                *((_BYTE *)v44 + 16) = 0;
                *((_BYTE *)v44 + 5) = 0;
                break;
              default:
                goto LABEL_56;
            }
            goto LABEL_56;
          case 7:
            v32 = *(_QWORD *)(v26 + 14 * v18 + 4);
            if (HIDWORD(v32) != 2)
            {
              if ((v32 & 0x80000000) != 0)
              {
                if ((v32 ^ 0xFFFFFFFFuLL) >= v20)
                  goto LABEL_56;
                v33 = (v32 ^ 0xFFFFFFFFLL) + v19;
              }
              else
              {
                v33 = (uint64_t)(((unint64_t)v32 << 32) - 0x500000000) >> 32;
              }
              goto LABEL_26;
            }
            if ((int)v32 < v131)
            {
              v33 = (int)v32 + v21;
LABEL_26:
              *(_QWORD *)(v24 + 8 * v33) = ((unint64_t)*v27 << 32) | 8;
            }
LABEL_56:
            if ((_DWORD)++v18 == v10)
              goto LABEL_75;
            break;
          case 8:
            v34 = *(_QWORD *)(v26 + 14 * v18 + 4);
            v35 = v34 & 0xFFFFFFFF00000000;
            if ((v34 & 0xFFFFFFFF00000000) == 0x200000000)
            {
              if (v131 <= (int)v34)
                goto LABEL_56;
            }
            else if ((v34 & 0x80000000) != 0 && ~*(_DWORD *)(v26 + 14 * v18 + 4) >= v20)
            {
              goto LABEL_56;
            }
            v36 = *v27;
            v37 = *(unsigned __int8 *)(v26 + 14 * v18 + 13);
            v38 = 2;
            switch(v37)
            {
              case 1:
                break;
              case 2:
                v38 = 3;
                break;
              case 3:
                goto LABEL_48;
              case 4:
                v38 = 6;
                break;
              case 5:
                v38 = 5;
                break;
              case 6:
                v38 = 4;
                break;
              default:
                if (v37 == 33)
                {
                  v38 = 7;
                }
                else
                {
LABEL_48:
                  if ((v37 & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19856E004);
                  }
                  v38 = 1;
                }
                break;
            }
            v64 = v38 | (v36 << 32);
            v65 = v21 + (int)v34;
            if ((int)v34 >= 0)
              v66 = (uint64_t)(((unint64_t)v34 << 32) - 0x500000000) >> 32;
            else
              v66 = (v34 ^ 0xFFFFFFFFLL) + v19;
            if (v35 != 0x200000000)
              v65 = v66;
            *(_QWORD *)(v24 + 8 * v65) = v64;
            goto LABEL_56;
          default:
            __break(0xC471u);
            JUMPOUT(0x19856E0D4);
        }
      }
    }
LABEL_75:
    if ((v132 & 1) != 0)
    {
      v75 = 0;
      v77 = 0;
      v74 = v134;
      v73 = v135;
    }
    else
    {
      v74 = v134;
      v73 = v135;
      if (v22 >= 0x1C71C71D)
      {
        __break(0xC471u);
        JUMPOUT(0x19856E200);
      }
      v75 = WTF::fastMalloc((WTF *)(9 * v22));
      v76 = v75;
      do
      {
        *(_BYTE *)v76 = 18;
        *(_QWORD *)(v76 + 1) = 0;
        v76 += 9;
      }
      while (v76 != v75 + 9 * v22);
      v77 = 9 * (int)v22 / 9u;
      v20 = v137;
      v19 = v138;
    }
    v78 = v19 | (v20 << 32);
    v79 = *(_QWORD *)v73;
    if (*(_QWORD *)v73)
    {
      *(_QWORD *)v73 = 0;
      *(_DWORD *)(v73 + 8) = 0;
      WTF::fastFree(v79, a2, v21, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)v73 = v75;
    *(_DWORD *)(v73 + 8) = v77;
    *(_DWORD *)(v73 + 12) = v22;
    *(_QWORD *)(v73 + 16) = v78;
    v80 = v139;
    if (v22)
    {
      for (i = 0; i != v22; ++i)
      {
        v82 = *(_DWORD *)(v24 + 8 * i);
        if ((v82 - 1) <= 6)
        {
          if (v82 == 7)
          {
            v140[0] = 17;
            *(_QWORD *)&v140[1] = 10;
          }
          else
          {
            v83 = *(unsigned int *)(v24 + 8 * i + 4);
            switch(v82)
            {
              case 2:
                v140[0] = 9;
                break;
              case 3:
                v128 = 10;
                goto LABEL_180;
              case 4:
                v140[0] = 13;
                break;
              case 5:
                v140[0] = 14;
                break;
              case 6:
                v128 = 12;
LABEL_180:
                v140[0] = v128;
                break;
              default:
                v140[0] = 8;
                break;
            }
            *(_QWORD *)&v140[1] = v83;
          }
          a4 = *(_QWORD *)v140;
          a6 = 0;
          goto LABEL_90;
        }
        v84 = *(_DWORD *)(v24 + 8 * i + 4);
        v85 = *(unsigned int *)(v74 + 12);
        if (v85 < 2)
        {
          v86 = 0;
          a7 = *(unsigned int *)(v74 + 12);
LABEL_102:
          if (a7)
          {
            if (v86 >= v85)
            {
              __break(0xC471u);
              JUMPOUT(0x19856E1F0);
            }
            if (*(_DWORD *)(*(_QWORD *)v74 + 13 * v86 + 8) == v84)
              v91 = *(_QWORD *)v74 + 13 * v86;
            else
              v91 = 0;
          }
          else
          {
            v91 = 0;
          }
        }
        else
        {
          v86 = 0;
          v87 = *(_QWORD *)v74;
          a7 = *(unsigned int *)(v74 + 12);
          while (1)
          {
            a8 = a7 - 1;
            v88 = v86 + ((a7 - 1) >> 1);
            if (v88 >= v85)
            {
              __break(0xC471u);
              JUMPOUT(0x19856E1E8);
            }
            v89 = *(_DWORD *)(v87 + 13 * v88 + 8);
            if (v89 == v84)
              break;
            v90 = a8 >> 1;
            a7 -= v90 + 1;
            if (v89 <= v84)
            {
              a8 = v90 + 1;
            }
            else
            {
              a7 = v90;
              a8 = 0;
            }
            v86 += a8;
            if (a7 <= 1)
              goto LABEL_102;
          }
          v91 = v87 + 13 * v88;
        }
        if (v80)
        {
          v92 = *(_DWORD *)(v80 - 8);
          v93 = 9 * ((v84 + ~(v84 << 15)) ^ ((v84 + ~(v84 << 15)) >> 10));
          v94 = (v93 ^ (v93 >> 6)) + ~((v93 ^ (v93 >> 6)) << 11);
          v95 = v92 & (v94 ^ HIWORD(v94));
          a7 = 20 * v95;
          a8 = *(unsigned int *)(v80 + a7);
          if ((_DWORD)a8 == v84)
          {
LABEL_109:
            v96 = v80 + 20 * v95;
            v97 = *(_QWORD *)(v96 + 4);
            v98 = *(_QWORD *)(v96 + 12);
            goto LABEL_110;
          }
          a7 = 1;
          while ((_DWORD)a8 != -1)
          {
            v95 = (v95 + a7) & v92;
            a8 = *(unsigned int *)(v80 + 20 * v95);
            a7 = (a7 + 1);
            if ((_DWORD)a8 == v84)
              goto LABEL_109;
          }
        }
        *(_WORD *)v140 = 0;
        *(_QWORD *)&v140[4] = 0x3FFFFFFFLL;
        v141 = 0;
        v97 = *(_QWORD *)v140;
        BYTE4(v98) = 0;
LABEL_110:
        if ((v97 & 0xFF00) == 0)
        {
          a6 = 0;
          v140[0] = 17;
          *(_QWORD *)&v140[1] = 10;
          a4 = *(_QWORD *)v140;
LABEL_90:
          a5 = 9 * i;
          v21 = *(_QWORD *)v73 + 9 * i;
          goto LABEL_91;
        }
        a7 = 9 * i;
        v21 = *(_QWORD *)v73 + 9 * i;
        if (!v91)
          goto LABEL_118;
        a7 = *(unsigned __int8 *)(v91 + 12);
        if ((a7 & 1) == 0)
        {
          if ((a7 & 2) != 0)
          {
            a6 = 0;
            v99 = *(unsigned int *)(v91 + 8);
            a5 = 15;
LABEL_184:
            v140[0] = a5;
          }
          else
          {
            if ((a7 & 4) != 0)
            {
              a6 = 0;
              v99 = *(unsigned int *)(v91 + 8);
              a5 = 16;
              goto LABEL_184;
            }
LABEL_118:
            if ((_BYTE)v97)
            {
              if (BYTE4(v98) == 4)
              {
                a6 = 0;
                a5 = 7;
                v140[0] = 7;
              }
              else
              {
                a5 = BYTE4(v98) - 1;
                switch(BYTE4(v98))
                {
                  case 1:
                    a5 = 1;
                    goto LABEL_186;
                  case 2:
                    a5 = 2;
                    goto LABEL_186;
                  case 3:
                    a5 = 3;
                    goto LABEL_186;
                  case 5:
                    a5 = 4;
                    goto LABEL_186;
                  case 6:
                    a5 = 5;
LABEL_186:
                    v140[0] = a5;
                    break;
                  default:
                    v140[0] = 0;
                    break;
                }
                a6 = 0;
              }
              v99 = BYTE4(v97);
            }
            else
            {
              a5 = BYTE4(v98) - 1;
              switch(BYTE4(v98))
              {
                case 1:
                  a5 = 9;
                  goto LABEL_178;
                case 2:
                  a5 = 10;
                  goto LABEL_178;
                case 3:
                  a5 = 11;
                  goto LABEL_178;
                case 4:
                  a5 = 12;
                  goto LABEL_178;
                case 5:
                  a5 = 14;
                  goto LABEL_178;
                case 6:
                  a5 = 13;
LABEL_178:
                  v140[0] = a5;
                  break;
                default:
                  v140[0] = 8;
                  break;
              }
              a6 = 0;
              v99 = HIDWORD(v97);
            }
          }
          *(_QWORD *)&v140[1] = v99;
          a4 = *(_QWORD *)v140;
          goto LABEL_91;
        }
        a5 = *(_QWORD *)v91;
        v140[0] = 17;
        *(_QWORD *)&v140[1] = a5;
        a4 = *(_QWORD *)v140;
        a6 = HIBYTE(a5);
LABEL_91:
        *(_QWORD *)v21 = a4;
        *(_BYTE *)(v21 + 8) = a6;
      }
    }
    if (v80)
      WTF::fastFree(v80 - 16, a2, v21, a4, a5, a6, a7, a8);
    v100 = v133;
    if (v24)
      WTF::fastFree(v24, a2, v21, a4, a5, a6, a7, a8);
  }
  else
  {
    v111 = a2[7];
    v112 = v111 + v16;
    if (v112)
    {
      if (v112 >= 0x1C71C71D)
      {
        __break(0xC471u);
        JUMPOUT(0x19856E208);
      }
      v113 = v16;
      v114 = WTF::fastMalloc((WTF *)(9 * v112));
      v115 = v114;
      v116 = 9 * (int)v112 / 9u;
      v117 = v114;
      do
      {
        *(_BYTE *)v117 = 18;
        *(_QWORD *)(v117 + 1) = 0;
        v117 += 9;
      }
      while (v117 != v114 + 9 * v112);
    }
    else
    {
      v113 = v16;
      v116 = 0;
      v115 = 0;
    }
    v118 = v111 | ((unint64_t)v113 << 32);
    v119 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v119, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)v9 = v115;
    *(_DWORD *)(v9 + 8) = v116;
    *(_DWORD *)(v9 + 12) = v112;
    *(_QWORD *)(v9 + 16) = v118;
    v100 = v113;
    if ((_DWORD)v112)
    {
      v120 = 0;
      v121 = 0;
      do
      {
        v122 = *(unsigned int *)(v9 + 16);
        if (v121 < v122)
        {
          v126 = v121 + 5;
        }
        else
        {
          v123 = *(unsigned int *)(v9 + 20);
          v124 = v123 + v122;
          v125 = v121 - (v122 + v123);
          v126 = v122 + ~(_DWORD)v121;
          if (v124 <= v121)
            v126 = v125;
        }
        v140[0] = 8;
        *(_QWORD *)&v140[1] = v126;
        v127 = *(_QWORD *)v9 + v120;
        *(_QWORD *)v127 = *(_QWORD *)v140;
        *(_BYTE *)(v127 + 8) = 0;
        ++v121;
        v120 += 9;
      }
      while (v121 < *(unsigned int *)(v9 + 12));
    }
  }
  return v100;
}

uint64_t JSC::DFG::performVirtualRegisterAllocation(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  JSC::DFG *v15;
  unint64_t v16;
  unint64_t v17;
  WTF **v18;
  WTF **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  WTF *v36;
  int v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF *v44;
  int v45;
  uint64_t v46;
  int v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v57;
  BOOL v58;
  BOOL v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int v69;
  JSC::DFG *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  WTF **v88;
  unint64_t v89;
  uint64_t *v90;
  WTF **v91;
  unint64_t v92;
  uint64_t *v93;
  WTF **v94;
  unint64_t v95;
  uint64_t *v96;
  WTF **v97;
  unint64_t v98;
  uint64_t *v99;
  WTF **v100;
  unint64_t v101;
  uint64_t *v102;
  WTF **v103;
  unint64_t v104;
  uint64_t *v105;
  WTF **v106;
  WTF **v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t *v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  WTF **v116;
  WTF **v117;
  WTF **v118;
  WTF **v119;
  WTF **v120;
  WTF **v121;
  WTF **v122;
  WTF **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  WTF *v139;
  WTF *v140;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  __int16 v150;
  JSC::DFG *v151;
  __int128 v152;
  char v153;
  WTF *v154;
  _QWORD v155[2];
  __int128 v156;
  double v157;
  char v158;
  WTF **v159;
  WTF *v160[2];
  int v161;
  unsigned int v162;
  _BYTE v163[256];
  WTF *v164;
  uint64_t v165;
  _BYTE v166[264];

  v147 = -1;
  v148 = -1;
  v149 = 0;
  v150 = 256;
  v151 = this;
  *(_QWORD *)&v152 = "virtual register allocation";
  *((_QWORD *)&v152 + 1) = 28;
  v153 = 0;
  v154 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v147);
  v155[0] = "DFG";
  v155[1] = 4;
  v156 = v152;
  v157 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v85 = mach_absolute_time();
    v87 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v87 != -1)
    {
      v160[0] = (WTF *)&v158;
      v159 = v160;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v159, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v86) = dword_1ECF4400C;
    v157 = (double)(v85 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v86 * 1000000000.0);
  }
  if (*((_DWORD *)v151 + 236) != 1)
  {
    JSC::DFG::Graph::logAssertionFailure(v151, 0, (const WTF::CString *)"./dfg/DFGVirtualRegisterAllocationPhase.cpp", (const char *)0x2E, "BOOL JSC::DFG::VirtualRegisterAllocationPhase::run()", "m_graph.m_form == ThreadedCPS");
    __break(0xC471u);
    JUMPOUT(0x19856EB88);
  }
  v9 = *((unsigned int *)v151 + 214);
  LODWORD(v160[0]) = v9 + 1;
  v160[1] = (WTF *)v163;
  v161 = 64;
  v162 = v9;
  v10 = v9;
  v11 = v9;
  v12 = (WTF *)v163;
  if (v9 >= 0x41)
  {
    if (v9 >> 30)
    {
LABEL_157:
      __break(0xC471u);
      JUMPOUT(0x19856E9FCLL);
    }
    v12 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
    v161 = v9;
    v160[1] = v12;
    v10 = v162;
    v11 = v162;
  }
  if (v11)
    memset(v12, 255, 4 * v10);
  v13 = (WTF *)v166;
  v164 = (WTF *)v166;
  v165 = 64;
  v14 = (WTF *)v166;
  if (v9 >= 0x41)
  {
    v14 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
    LODWORD(v165) = v9;
    v164 = v14;
  }
  v15 = v151;
  LODWORD(v16) = *((_DWORD *)v151 + 15);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = &v160[1];
    v19 = &v164;
    do
    {
      if (v16 <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x19856ED70);
      }
      v20 = *(_QWORD *)(*((_QWORD *)v15 + 6) + 8 * v17);
      if (v20)
      {
        if (*(_BYTE *)(v20 + 21))
        {
          v21 = *(unsigned int *)(v20 + 220);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)(v20 + 208);
            v23 = &v22[v21];
            do
            {
              v24 = *v22;
              if (*(_DWORD *)(*v22 + 52))
              {
                v25 = *(unsigned __int16 *)(v24 + 18);
                if ((v25 - 27) >= 3)
                {
                  if (v25 == 30)
                  {
                    v69 = *(_DWORD *)(v24 + 72) + ~*(_DWORD *)((*(_QWORD *)(v24 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                    if (*((_DWORD *)v151 + 77) <= v69)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19856EDB8);
                    }
                    *(_DWORD *)(v24 + 48) = *(_DWORD *)(*((_QWORD *)v151 + 37) + 8 * v69 + 4);
                  }
                  else
                  {
                    v26 = *(_QWORD *)(v24 + 24);
                    if ((*(_BYTE *)(v24 + 56) & 0x10) != 0)
                    {
                      v50 = *(_QWORD *)(v24 + 32);
                      if ((int)v50 + (int)v26 > v26)
                      {
                        v51 = *(_QWORD *)(v24 + 24);
                        do
                        {
                          if (v51 >= *((unsigned int *)v151 + 41))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19856ED78);
                          }
                          v52 = *(_QWORD *)(*((_QWORD *)v151 + 19) + 8 * v51);
                          v53 = v52 & 0xFF00FFFFFFFFFFFFLL;
                          if ((v52 & 0xFF00FFFFFFFFFFFFLL) != 0
                            && (*(_BYTE *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
                          {
                            v54 = ~*(_DWORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                            LODWORD(v159) = v54;
                            if (v162 <= v54)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19856ED80);
                            }
                            v2 = (WTF *)*(unsigned int *)(v53 + 52);
                            v55 = v160[1];
                            v3 = (*((_DWORD *)v160[1] + v54) + 1);
                            *((_DWORD *)v160[1] + v54) = v3;
                            if ((_DWORD)v2 == (_DWORD)v3)
                            {
                              if (v162 <= v54)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19856ED88);
                              }
                              *((_DWORD *)v55 + v54) = 0;
                              if (HIDWORD(v165) == (_DWORD)v165)
                              {
                                v121 = v18;
                                v128 = v24;
                                v136 = v22;
                                v144 = v13;
                                v103 = v19;
                                v104 = v17;
                                v105 = v23;
                                v113 = v51;
                                WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v19, (unint64_t)&v159);
                                v51 = v113;
                                v18 = v121;
                                v24 = v128;
                                v22 = v136;
                                v23 = v105;
                                v17 = v104;
                                v19 = v103;
                                v13 = v144;
                                v26 = *(_QWORD *)(v128 + 24);
                                v50 = *(_QWORD *)(v128 + 32);
                              }
                              else
                              {
                                v2 = v164;
                                *((_DWORD *)v164 + HIDWORD(v165)) = v54;
                                ++HIDWORD(v165);
                              }
                            }
                          }
                          ++v51;
                        }
                        while (v51 < (v26 + v50));
                      }
                    }
                    else
                    {
                      v27 = v26 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v26 & 0xFF00FFFFFFFFFFFFLL) != 0
                        && (*(_BYTE *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
                      {
                        v38 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                        LODWORD(v159) = v38;
                        if (v162 <= v38)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19856ED50);
                        }
                        v39 = *(_DWORD *)(v27 + 52);
                        v40 = v160[1];
                        v41 = *((_DWORD *)v160[1] + v38) + 1;
                        *((_DWORD *)v160[1] + v38) = v41;
                        if (v39 == v41)
                        {
                          if (v162 <= v38)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19856ED90);
                          }
                          *((_DWORD *)v40 + v38) = 0;
                          if (HIDWORD(v165) == (_DWORD)v165)
                          {
                            v117 = v18;
                            v125 = v24;
                            v132 = v22;
                            v140 = v13;
                            v91 = v19;
                            v92 = v17;
                            v93 = v23;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v19, (unint64_t)&v159);
                            v24 = v125;
                            v22 = v132;
                            v23 = v93;
                            v17 = v92;
                            v19 = v91;
                            v13 = v140;
                            v18 = v117;
                          }
                          else
                          {
                            *((_DWORD *)v164 + HIDWORD(v165)) = v38;
                            ++HIDWORD(v165);
                          }
                        }
                      }
                      v28 = *(_QWORD *)(v24 + 32);
                      v29 = v28 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0
                        && (*(_BYTE *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
                      {
                        v42 = ~*(_DWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                        LODWORD(v159) = v42;
                        if (v162 <= v42)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19856ED58);
                        }
                        v43 = *(_DWORD *)(v29 + 52);
                        v44 = v160[1];
                        v45 = *((_DWORD *)v160[1] + v42) + 1;
                        *((_DWORD *)v160[1] + v42) = v45;
                        if (v43 == v45)
                        {
                          if (v162 <= v42)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19856ED98);
                          }
                          *((_DWORD *)v44 + v42) = 0;
                          if (HIDWORD(v165) == (_DWORD)v165)
                          {
                            v118 = v18;
                            v126 = v24;
                            v133 = v22;
                            v141 = v13;
                            v94 = v19;
                            v95 = v17;
                            v96 = v23;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v19, (unint64_t)&v159);
                            v24 = v126;
                            v22 = v133;
                            v23 = v96;
                            v17 = v95;
                            v19 = v94;
                            v13 = v141;
                            v18 = v118;
                          }
                          else
                          {
                            *((_DWORD *)v164 + HIDWORD(v165)) = v42;
                            ++HIDWORD(v165);
                          }
                        }
                      }
                      v30 = *(_QWORD *)(v24 + 40);
                      v31 = v30 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0
                        && (*(_BYTE *)((v30 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
                      {
                        v46 = ~*(_DWORD *)((v30 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                        LODWORD(v159) = v46;
                        if (v162 <= v46)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19856ED60);
                        }
                        v47 = *(_DWORD *)(v31 + 52);
                        v48 = v160[1];
                        v49 = *((_DWORD *)v160[1] + v46) + 1;
                        *((_DWORD *)v160[1] + v46) = v49;
                        if (v47 == v49)
                        {
                          if (v162 <= v46)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19856EDA0);
                          }
                          *((_DWORD *)v48 + v46) = 0;
                          if (HIDWORD(v165) == (_DWORD)v165)
                          {
                            v119 = v18;
                            v127 = v24;
                            v134 = v22;
                            v142 = v13;
                            v97 = v19;
                            v98 = v17;
                            v99 = v23;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v19, (unint64_t)&v159);
                            v24 = v127;
                            v22 = v134;
                            v23 = v99;
                            v17 = v98;
                            v19 = v97;
                            v13 = v142;
                            v18 = v119;
                          }
                          else
                          {
                            *((_DWORD *)v164 + HIDWORD(v165)) = v46;
                            ++HIDWORD(v165);
                          }
                        }
                      }
                    }
                    if (*(_WORD *)(v24 + 18) == 386)
                    {
                      v70 = v151;
                      v71 = ~*(_DWORD *)(v24 + 48);
                      if (*((_DWORD *)v151 + 77) <= v71)
                        goto LABEL_155;
                      v72 = *((_QWORD *)v151 + 37);
                      if (*(_WORD *)(v72 + 8 * ~*(_DWORD *)(v24 + 48)))
                      {
                        if (HIDWORD(v165))
                        {
                          v73 = *((_DWORD *)v164 + HIDWORD(v165) - 1);
                          if (LODWORD(v160[0]) <= v73 + 1)
                            v74 = v73 + 1;
                          else
                            v74 = (int)v160[0];
                          --HIDWORD(v165);
                          LODWORD(v160[0]) = v74;
                          *(_DWORD *)(v72 + 8 * v71 + 4) = ~v73;
                        }
                        else
                        {
                          LODWORD(v159) = 0;
                          v79 = v162;
                          if (v162 == v161)
                          {
                            v137 = v22;
                            v145 = v13;
                            v106 = v18;
                            v114 = v17;
                            v122 = v19;
                            v109 = v162;
                            v110 = v23;
                            v129 = v24;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)v18, &v159);
                            v79 = v109;
                            v23 = v110;
                            v24 = v129;
                            v22 = v137;
                            v17 = v114;
                            v19 = v122;
                            v18 = v106;
                            v13 = v145;
                            v80 = *(unsigned __int16 *)(v129 + 18);
                          }
                          else
                          {
                            *((_DWORD *)v160[1] + v162++) = 0;
                            v80 = 386;
                          }
                          if (LODWORD(v160[0]) <= v79 + 1)
                            v81 = v79 + 1;
                          else
                            v81 = v160[0];
                          LODWORD(v160[0]) = v81;
                          *(_DWORD *)(v72 + 8 * v71 + 4) = ~v79;
                          if (v80 != 386)
                            goto LABEL_157;
                          v70 = v151;
                        }
                      }
                      v75 = -*(_DWORD *)(v24 + 48);
                      if (*((_DWORD *)v70 + 77) <= v75)
                      {
LABEL_155:
                        __break(0xC471u);
                        JUMPOUT(0x19856EDB0);
                      }
                      v76 = *((_QWORD *)v70 + 37);
                      if (*(_WORD *)(v76 + 8 * -*(_DWORD *)(v24 + 48)))
                      {
                        if (HIDWORD(v165))
                        {
                          v77 = *((_DWORD *)v164 + HIDWORD(v165) - 1);
                          if (LODWORD(v160[0]) <= v77 + 1)
                            v78 = v77 + 1;
                          else
                            v78 = (int)v160[0];
                          --HIDWORD(v165);
                          LODWORD(v160[0]) = v78;
                          *(_DWORD *)(v76 + 8 * v75 + 4) = ~v77;
                        }
                        else
                        {
                          LODWORD(v159) = 0;
                          v82 = v162;
                          if (v162 == v161)
                          {
                            v138 = v22;
                            v146 = v13;
                            v107 = v18;
                            v115 = v17;
                            v123 = v19;
                            v111 = v23;
                            v108 = v24;
                            v130 = v162;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)v18, &v159);
                            v82 = v130;
                            v22 = v138;
                            v23 = v111;
                            v17 = v115;
                            v19 = v123;
                            v18 = v107;
                            v13 = v146;
                            v83 = *(unsigned __int16 *)(v108 + 18);
                          }
                          else
                          {
                            *((_DWORD *)v160[1] + v162++) = 0;
                            v83 = 386;
                          }
                          if (LODWORD(v160[0]) <= v82 + 1)
                            v84 = v82 + 1;
                          else
                            v84 = v160[0];
                          LODWORD(v160[0]) = v84;
                          *(_DWORD *)(v76 + 8 * v75 + 4) = ~v82;
                          if (v83 != 386)
                            goto LABEL_157;
                        }
                      }
                    }
                    else
                    {
                      v32 = *(_DWORD *)(v24 + 56);
                      if ((v32 & 7) != 0)
                      {
                        if (HIDWORD(v165))
                        {
                          v33 = *((_DWORD *)v164 + HIDWORD(v165) - 1);
                          --HIDWORD(v165);
                          if (LODWORD(v160[0]) <= v33 + 1)
                            v34 = v33 + 1;
                          else
                            v34 = v160[0];
                        }
                        else
                        {
                          LODWORD(v159) = 0;
                          v33 = v162;
                          if (v162 == v161)
                          {
                            v131 = v22;
                            v139 = v13;
                            v88 = v18;
                            v116 = v19;
                            v124 = v24;
                            v89 = v17;
                            v90 = v23;
                            v112 = v162;
                            WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)v18, &v159);
                            v33 = v112;
                            v19 = v116;
                            v24 = v124;
                            v22 = v131;
                            v23 = v90;
                            v17 = v89;
                            v18 = v88;
                            v13 = v139;
                          }
                          else
                          {
                            *((_DWORD *)v160[1] + v162++) = 0;
                          }
                          v34 = v160[0];
                          if (LODWORD(v160[0]) <= v33 + 1)
                            v34 = v33 + 1;
                          v32 = *(_DWORD *)(v24 + 56);
                        }
                        LODWORD(v160[0]) = v34;
                        *(_DWORD *)(v24 + 48) = ~v33;
                        if ((v32 & 8) != 0)
                        {
                          LODWORD(v159) = v33;
                          if (v162 <= v33)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19856ED68);
                          }
                          v35 = *(_DWORD *)(v24 + 52);
                          v36 = v160[1];
                          v37 = *((_DWORD *)v160[1] + v33) + 1;
                          *((_DWORD *)v160[1] + v33) = v37;
                          if (v35 == v37)
                          {
                            if (v162 <= v33)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19856EDA8);
                            }
                            *((_DWORD *)v36 + v33) = 0;
                            if (HIDWORD(v165) == (_DWORD)v165)
                            {
                              v120 = v18;
                              v135 = v22;
                              v143 = v13;
                              v100 = v19;
                              v101 = v17;
                              v102 = v23;
                              WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v19, (unint64_t)&v159);
                              v23 = v102;
                              v17 = v101;
                              v19 = v100;
                              v22 = v135;
                              v13 = v143;
                              v18 = v120;
                            }
                            else
                            {
                              *((_DWORD *)v164 + HIDWORD(v165)) = v33;
                              ++HIDWORD(v165);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v22;
            }
            while (v22 != v23);
            v15 = v151;
          }
        }
      }
      ++v17;
      v16 = *((unsigned int *)v15 + 15);
    }
    while (v17 < v16);
    v14 = v164;
  }
  *((_DWORD *)v15 + 214) = v160[0];
  if (v13 != v14 && v14 != 0)
  {
    v164 = 0;
    LODWORD(v165) = 0;
    WTF::fastFree((unint64_t)v14, v2, v3, v4, v5, v6, v7, v8);
  }
  v57 = v160[1];
  if (v163 != (_BYTE *)v160[1] && v160[1])
  {
    v160[1] = 0;
    v161 = 0;
    WTF::fastFree((unint64_t)v57, v2, v3, v4, v5, v6, v7, v8);
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v58 = (*(_DWORD *)(*((_QWORD *)v151 + 3) + 16) & 0xFFFFFFFE) == 4) : (v58 = 0),
        !v58 ? (v59 = BYTE2(qword_1ECF4C32A) == 0) : (v59 = 0),
        !v59))
  {
    *(_OWORD *)v160 = v152;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v151 + 1088, "Phase ", (uint64_t)v160, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v155);
  if (HIBYTE(qword_1ECF4C32A) && !v153)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v147, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
  v67 = v154;
  v154 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::fastFree((unint64_t)v67, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v67;
  }
  return 1;
}

void WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::DFG::`anonymous namespace'::MinifiedGenerationInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::DFG::`anonymous namespace'::MinifiedGenerationInfo>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::DFG::`anonymous namespace'::MinifiedGenerationInfo,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::MinifiedGenerationInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t *v16;
  __int128 v17;
  uint64_t i;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  __int128 v28;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_3;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)(20 * v5 + 16));
  if (v5)
  {
    v15 = v5;
    v16 = (int8x16_t *)(v6 + 20);
    v17 = xmmword_199156690;
    do
    {
      v16[-1].i32[3] = -1;
      v14.i16[0] = 0;
      v14 = vqtbl2q_s8(*(int8x16x2_t *)v14.i8, (int8x16_t)xmmword_1991566A0);
      *v16 = v14;
      v16 = (int8x16_t *)((char *)v16 + 20);
      --v15;
    }
    while (v15);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v19 = (_DWORD *)(v2 + 20 * i);
      if (*v19 <= 0xFFFFFFFD)
      {
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = 0;
        v23 = 9 * ((*v19 + ~(*v19 << 15)) ^ ((*v19 + ~(*v19 << 15)) >> 10));
        v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
        v25 = v24 ^ HIWORD(v24);
        do
        {
          v26 = v25 & v21;
          v27 = (unsigned int *)(v20 + 20 * v26);
          v7 = (void *)*v27;
          v25 = ++v22 + v26;
        }
        while ((_DWORD)v7 != -1);
        v28 = *(_OWORD *)v19;
        v27[4] = v19[4];
        *(_OWORD *)v27 = v28;
      }
    }
    goto LABEL_16;
  }
  if (v2)
LABEL_16:
    WTF::fastFree(v2 - 16, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t WTF::VectorBuffer<unsigned int,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x41)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 64;
  }
  else
  {
    v3 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *a2;
}

void WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<unsigned int,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 4 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

_DWORD *WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t JSC::tryToDisassemble(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, WTF::PrintStream *a6)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  __int128 *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  char v37;
  int v38;
  const char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v57;
  WTF::StringImpl *v58;
  char v59;
  char __str[32];
  _BYTE v61[104];
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v62 = a3;
  v63 = a4;
  v65 = 0;
  v66 = 0;
  v11 = atomic_load((unint64_t *)&_MergedGlobals_34);
  if (v11 != -1)
  {
    *(_QWORD *)__str = JSC::ARM64Disassembler::A64DOpcode::init;
    v58 = (WTF::StringImpl *)__str;
    std::__call_once((std::once_flag::_State_type *)&_MergedGlobals_34, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<void (&)(void)>>);
  }
  v61[0] = 0;
  if (a2)
  {
    v12 = v10 - a3;
    do
    {
      if (a3)
        snprintf(__str, 0x18uLL, "<%u> %#llx");
      else
        snprintf(__str, 0x18uLL, "%#llx");
      v13 = *(unsigned int *)v10;
      v64 = v10;
      v65 = v13;
      v61[0] = 0;
      v14 = *((_QWORD *)&_MergedGlobals_34 + ((v13 >> 24) & 0x1F) + 8);
      if (v14)
      {
        while ((*(_DWORD *)v14 & v13) != *(_DWORD *)(v14 + 4))
        {
          v14 = *(_QWORD *)(v14 + 16);
          if (!v14)
            goto LABEL_11;
        }
        v15 = (const char *)(*(uint64_t (**)(_BYTE *))(v14 + 8))(v61);
      }
      else
      {
LABEL_11:
        v15 = v61;
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)v61, "   .long  %08x", v13);
      }
      WTF::PrintStream::printf(a6, "%s%24s: %s", a5, __str, v15);
      if (!(_BYTE)word_1ECF4C286)
      {
        LOBYTE(v58) = 0;
        goto LABEL_15;
      }
      if (__ldaxr(JSC::commentsRegistry))
      {
        __clrex();
      }
      else if (!__stxr(1u, JSC::commentsRegistry))
      {
        goto LABEL_22;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::commentsRegistry);
LABEL_22:
      v23 = (_QWORD *)xmmword_1ECF500D0;
      if (!(_QWORD)xmmword_1ECF500D0)
        goto LABEL_41;
      v24 = ~v10;
      v25 = &xmmword_1ECF500D0;
      do
      {
        v26 = v23[4];
        v27 = v26 >= v24;
        if (v26 >= v24)
          v28 = v23;
        else
          v28 = v23 + 1;
        if (v27)
          v25 = (__int128 *)v23;
        v23 = (_QWORD *)*v28;
      }
      while (*v28);
      if (v25 == &xmmword_1ECF500D0)
        goto LABEL_41;
      if (*((_QWORD *)v25 + 5) < v10)
        goto LABEL_41;
      v29 = *((_QWORD *)v25 + 6);
      if (!v29)
        goto LABEL_41;
      v30 = *(_DWORD *)(v29 - 8);
      v31 = (~(v10 << 32) + v10) ^ ((~(v10 << 32) + v10) >> 22);
      v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      v34 = v30 & ((v33 >> 31) ^ v33);
      v35 = *(unsigned int **)(v29 + 16 * v34);
      if (v35 != (unsigned int *)v10)
      {
        v36 = 1;
        while (v35)
        {
          v34 = ((_DWORD)v34 + v36) & v30;
          v35 = *(unsigned int **)(v29 + 16 * v34);
          ++v36;
          if (v35 == (unsigned int *)v10)
            goto LABEL_40;
        }
        v34 = *(unsigned int *)(v29 - 4);
      }
LABEL_40:
      if (v34 != *(_DWORD *)(v29 - 4))
      {
        WTF::String::isolatedCopy((_DWORD *)(v29 + 16 * v34 + 8), (uint64_t *)&v58);
        v37 = 1;
      }
      else
      {
LABEL_41:
        v37 = 0;
        LOBYTE(v58) = 0;
      }
      v59 = v37;
      v38 = __ldxr(JSC::commentsRegistry);
      if (v38 != 1)
      {
        __clrex();
LABEL_46:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::commentsRegistry, 0, v16, v17, v18, v19, v20, v21);
        goto LABEL_47;
      }
      if (__stlxr(0, JSC::commentsRegistry))
        goto LABEL_46;
LABEL_47:
      if (v59)
      {
        WTF::String::ascii((WTF::String *)&v58, (int8x16_t **)&v57);
        if (v57)
          v39 = (char *)v57 + 16;
        else
          v39 = 0;
        WTF::PrintStream::printf(a6, "; %s\n", v39);
        v47 = v57;
        v57 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
          else
            --*(_DWORD *)v47;
        }
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
        goto LABEL_16;
      }
LABEL_15:
      WTF::PrintStream::printf(a6, "\n");
LABEL_16:
      v12 += 4;
      v10 += 4;
      a2 -= 4;
    }
    while (a2);
  }
  return 1;
}

void JSC::disassembleAsynchronously(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  int v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;

  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_QWORD *)(v12 + 48) = 0;
  if (*a1)
    v13 = (const char *)(*a1 + 16);
  else
    v13 = 0;
  *(_QWORD *)v12 = strdup(v13);
  *(_QWORD *)(v12 + 8) = *a2;
  v21 = (unsigned int *)a2[1];
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v23 = *(unsigned int **)(v12 + 16);
    *(_QWORD *)(v12 + 16) = v21;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v23, (uint64_t)v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
    }
  }
  else
  {
    *(_QWORD *)(v12 + 16) = 0;
  }
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a6;
  v26 = atomic_load(&qword_1ECF586A8);
  if (v26 != -1)
  {
    v49 = &v47;
    v48 = &v49;
  }
  if (__ldaxr((unsigned __int8 *)&word_1ECF586B0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&word_1ECF586B0))
  {
    goto LABEL_16;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&word_1ECF586B0);
LABEL_16:
  if (qword_1ECF586B8)
  {
    if (unk_1ECF586C0 + 1 != qword_1ECF586B8)
      goto LABEL_33;
    v28 = dword_1ECF586D0;
  }
  else
  {
    v28 = dword_1ECF586D0;
    if (unk_1ECF586C0)
    {
      if (unk_1ECF586C0 != dword_1ECF586D0 - 1)
        goto LABEL_33;
    }
    else if (dword_1ECF586D0)
    {
      goto LABEL_33;
    }
  }
  v29 = v28;
  v30 = ((unint64_t)v28 >> 2) + v28;
  if (v30 <= 0xF)
    v30 = 15;
  if (v30 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v31 = (char *)qword_1ECF586C8;
  v32 = v30 + 1;
  v33 = (char *)WTF::fastMalloc((WTF *)(8 * (v30 + 1)));
  dword_1ECF586D0 = v32;
  qword_1ECF586C8 = (uint64_t)v33;
  if ((unint64_t)qword_1ECF586B8 <= unk_1ECF586C0)
  {
    memcpy(&v33[8 * qword_1ECF586B8], &v31[8 * qword_1ECF586B8], 8 * unk_1ECF586C0 - 8 * qword_1ECF586B8);
    if (!v31)
      goto LABEL_33;
  }
  else
  {
    memcpy(v33, v31, 8 * unk_1ECF586C0);
    v34 = qword_1ECF586B8 - v29 + dword_1ECF586D0;
    memcpy((void *)(qword_1ECF586C8 + 8 * v34), &v31[8 * qword_1ECF586B8], 8 * v29 - 8 * qword_1ECF586B8);
    qword_1ECF586B8 = v34;
    if (!v31)
      goto LABEL_33;
  }
  if ((char *)qword_1ECF586C8 == v31)
  {
    qword_1ECF586C8 = 0;
    dword_1ECF586D0 = 0;
  }
  WTF::fastFree((unint64_t)v31, v14, v15, v16, v17, v18, v19, v20);
LABEL_33:
  v35 = unk_1ECF586C0;
  *(_QWORD *)(qword_1ECF586C8 + 8 * unk_1ECF586C0) = v12;
  if (v35 == dword_1ECF586D0 - 1)
    v36 = 0;
  else
    v36 = unk_1ECF586C0 + 1;
  unk_1ECF586C0 = v36;
  v37 = atomic_load((unsigned __int8 *)&word_1ECF586B0 + 1);
  if ((v37 & 1) != 0)
  {
    atomic_store(0, (unsigned __int8 *)&word_1ECF586B0 + 1);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)((char *)&word_1ECF586B0 + 1), v14, v15, v16, v17, v18, v19, v20);
  }
  v38 = __ldxr((unsigned __int8 *)&word_1ECF586B0);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)&word_1ECF586B0))
LABEL_42:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&word_1ECF586B0, 0, v15, v16, v17, v18, v19, v20);
}

void JSC::`anonymous namespace'::asynchronousDisassembler(JSC::_anonymous_namespace_ *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&qword_1ECF586A8);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
  }
}

void JSC::waitForAsynchronousDisassembly(JSC *this)
{
  JSC::_anonymous_namespace_::AsynchronousDisassembler *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  {
  }
}

void JSC::`anonymous namespace'::AsynchronousDisassembler::waitUntilEmpty(JSC::_anonymous_namespace_::AsynchronousDisassembler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int v13;

  if (__ldaxr((unsigned __int8 *)&word_1ECF586B0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&word_1ECF586B0))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&word_1ECF586B0);
LABEL_5:
  while (qword_1ECF586B8 != unk_1ECF586C0 || byte_1ECF586D8 != 0)
  {
    v12 = 0x7FF0000000000000;
    v13 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&word_1ECF586B0 + 1, (unsigned __int8 *)&word_1ECF586B0, (WTF::TimeWithDynamicClockType *)&v12);
  }
  v11 = __ldxr((unsigned __int8 *)&word_1ECF586B0);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)&word_1ECF586B0))
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&word_1ECF586B0, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::HashMap<void *,std::variant<WTF::CString,char const*>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::variant<WTF::CString,char const*>>,WTF::HashTableTraits>::add<WTF::CString>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  char v40;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::variant<WTF::CString,char const*>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::variant<WTF::CString,char const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v15 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = (_QWORD *)(v13 + 24 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v29 = 0;
        else
          v29 = *(_DWORD *)(v13 - 4);
        v38 = 0;
        v39 = v13 + 24 * v29;
        goto LABEL_39;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (_QWORD *)(v13 + 24 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      *((_DWORD *)v23 + 4) = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v25 = *((unsigned int *)v21 + 4);
  if ((_DWORD)v25 == -1)
    goto LABEL_20;
  v26 = (_DWORD **)(v21 + 1);
  if ((_DWORD)v25)
  {
    ((void (*)(char *, _DWORD **))off_1E358FE60[v25])(&v40, v26);
LABEL_20:
    v30 = (_DWORD *)*a3;
    *a3 = 0;
    v21[1] = v30;
    *((_DWORD *)v21 + 4) = 0;
    goto LABEL_21;
  }
  v27 = (_DWORD *)*a3;
  *a3 = 0;
  v28 = *v26;
  *v26 = v27;
  if (v28)
  {
    if (*v28 == 1)
      WTF::fastFree((unint64_t)v28, v26, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*v28;
  }
LABEL_21:
  v31 = *a1;
  if (*a1)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_30;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_35:
      v21 = WTF::HashTable<void *,WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::variant<WTF::CString,char const*>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::variant<WTF::CString,char const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v37, v21);
      v33 = *a1;
      if (*a1)
        LODWORD(v36) = *(_DWORD *)(v33 - 4);
      else
        LODWORD(v36) = 0;
      goto LABEL_38;
    }
LABEL_30:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
    goto LABEL_35;
  }
LABEL_38:
  v39 = v33 + 24 * v36;
  v38 = 1;
LABEL_39:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v39;
  *(_BYTE *)(a9 + 16) = v38;
}

_QWORD *JSC::labelFor(JSC *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  JSC *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  JSC::ARM64Disassembler::A64DOpcode *v24;
  char v25;
  char **v26;
  char *v27;

  if (__ldaxr(JSC::Disassembler::labelMapLock))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::Disassembler::labelMapLock);
    goto LABEL_5;
  }
  if (__stxr(1u, JSC::Disassembler::labelMapLock))
    goto LABEL_4;
LABEL_5:
  v10 = atomic_load(&JSC::Disassembler::ensureLabelMap(void)::onceKey);
  if (v10 != -1)
  {
    v27 = &v25;
    v26 = &v27;
    std::__call_once(&JSC::Disassembler::ensureLabelMap(void)::onceKey, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Disassembler::ensureLabelMap(void)::$_0 &&>>);
  }
  if (!JSC::Disassembler::labelMap)
    goto LABEL_20;
  v11 = *(_DWORD *)(JSC::Disassembler::labelMap - 8);
  v12 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = JSC::Disassembler::labelMap + 24 * v15;
  v17 = *(JSC **)v16;
  if (*(JSC **)v16 != this)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v11;
      v16 = JSC::Disassembler::labelMap + 24 * v15;
      v17 = *(JSC **)v16;
      ++v18;
      if (*(JSC **)v16 == this)
        goto LABEL_14;
    }
    v16 = JSC::Disassembler::labelMap + 24 * *(unsigned int *)(JSC::Disassembler::labelMap - 4);
  }
LABEL_14:
  if (v16 == JSC::Disassembler::labelMap + 24 * *(unsigned int *)(JSC::Disassembler::labelMap - 4))
  {
LABEL_20:
    v21 = 0;
    goto LABEL_22;
  }
  v19 = *(_DWORD *)(v16 + 16);
  if (v19 == 1)
  {
    v21 = *(_QWORD *)(v16 + 8);
    goto LABEL_22;
  }
  if (!v19)
  {
    v20 = *(_QWORD *)(v16 + 8);
    if (v20)
      v21 = v20 + 16;
    else
      v21 = 0;
LABEL_22:
    v22 = __ldxr(JSC::Disassembler::labelMapLock);
    if (v22 == 1)
    {
      if (!__stlxr(0, JSC::Disassembler::labelMapLock))
        return (_QWORD *)v21;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::Disassembler::labelMapLock, 0, a3, a4, a5, a6, a7, a8);
    return (_QWORD *)v21;
  }
  v24 = (JSC::ARM64Disassembler::A64DOpcode *)std::__throw_bad_variant_access[abi:sn180100]();
  return JSC::ARM64Disassembler::A64DOpcode::init(v24);
}

_QWORD *JSC::ARM64Disassembler::A64DOpcode::init(JSC::ARM64Disassembler::A64DOpcode *this)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  _OWORD v8[16];
  uint64_t v9;

  v1 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  xmmword_1ECF586E0 = 0u;
  *(_OWORD *)algn_1ECF586F0 = 0u;
  xmmword_1ECF58700 = 0u;
  unk_1ECF58710 = 0u;
  xmmword_1ECF58720 = 0u;
  unk_1ECF58730 = 0u;
  xmmword_1ECF58740 = 0u;
  unk_1ECF58750 = 0u;
  xmmword_1ECF58760 = 0u;
  unk_1ECF58770 = 0u;
  xmmword_1ECF58780 = 0u;
  unk_1ECF58790 = 0u;
  xmmword_1ECF587A0 = 0u;
  unk_1ECF587B0 = 0u;
  xmmword_1ECF587C0 = 0u;
  unk_1ECF587D0 = 0u;
  memset(v8, 0, sizeof(v8));
  do
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v3 = *(_QWORD *)((char *)&JSC::ARM64Disassembler::opcodeGroupList + v1 + 16);
    *result = *(_QWORD *)((char *)&JSC::ARM64Disassembler::opcodeGroupList + v1 + 4);
    result[1] = v3;
    result[2] = 0;
    v4 = *(unsigned int *)((char *)&JSC::ARM64Disassembler::opcodeGroupList + v1);
    v5 = (char *)&_MergedGlobals_34 + 8 * v4;
    v7 = *((_QWORD *)v5 + 8);
    v6 = v5 + 64;
    if (v7)
      v6 = (_QWORD *)(*((_QWORD *)v8 + v4) + 16);
    *v6 = result;
    *((_QWORD *)v8 + v4) = result;
    v1 += 24;
  }
  while (v1 != 1248);
  return result;
}

uint64_t JSC::ARM64Disassembler::A64DOpcode::bufferPrintf(uint64_t this, const char *__format, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, __format);
  if (*(int *)(this + 132) <= 100)
  {
    v2 = this;
    this = vsnprintf((char *)(this + *(int *)(this + 132)), 101 - *(int *)(this + 132), __format, va);
    *(_DWORD *)(v2 + 132) += this;
  }
  return this;
}

uint64_t JSC::ARM64Disassembler::A64DOpcode::appendPCRelativeOffset(JSC::ARM64Disassembler::A64DOpcode *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  char *v11;
  const char *v12;
  _QWORD *v13;
  char *v14;
  BOOL v17;
  _QWORD *v18;
  char __str[101];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = &a2[(int)a3];
  v10 = *((_QWORD *)this + 13);
  if (!v10)
  {
    v14 = "";
    return JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "0x%lx%s", v9, v14);
  }
  v17 = (unint64_t)v9 >= v10;
  v11 = (char *)v9 - v10;
  if (v17 && (unint64_t)v9 < *((_QWORD *)this + 14))
  {
    v18 = v11;
    v12 = " -> <%u>";
LABEL_8:
    v14 = __str;
    snprintf(__str, 0x64uLL, v12, v18);
    return JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "0x%lx%s", v9, v14);
  }
  v13 = JSC::labelFor((JSC *)&a2[(int)a3], a2, a3, a4, a5, a6, a7, a8);
  if (v13)
  {
    v18 = v13;
    v12 = " -> %s";
    goto LABEL_8;
  }
  if (qword_1ECF4C1F8 <= (unint64_t)v9 && qword_1ECF4C200 > (unint64_t)v9)
  {
    v14 = " -> JIT PC";
  }
  else
  {
    if ((unint64_t)llintPCRangeStart >= (unint64_t)llintPCRangeEnd)
    {
      __break(0xC471u);
      JUMPOUT(0x198570004);
    }
    v17 = v9 <= (unsigned int *)llintPCRangeEnd && v9 >= (unsigned int *)llintPCRangeStart;
    if (v17)
      v14 = " -> LLInt PC";
    else
      v14 = " -> <unknown>";
  }
  return JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "0x%lx%s", v9, v14);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::`anonymous namespace'::asynchronousDisassembler(void)::$_0 &&>>()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count **v25;
  _QWORD *v26;
  unint64_t v27;

  word_1ECF586B0 = 0;
  *(_OWORD *)&qword_1ECF586B8 = 0u;
  *(_OWORD *)&qword_1ECF586C8 = 0u;
  byte_1ECF586D8 = 0;
  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E358FE48;
  v0[1] = &word_1ECF586B0;
  v26 = v0;
  WTF::Thread::create((uint64_t)"Asynchronous Disassembler", 26, (uint64_t *)&v26, 1, 0, (uint64_t *)&v27);
  v8 = v27;
  v27 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = *(unsigned int **)(v8 + 96);
      *(_QWORD *)(v8 + 96) = 0;
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v8 + 64), v1, v2, v3, v4, v5, v6, v7);
      v23 = *(_QWORD *)(v8 + 32);
      if (v23)
      {
        v24 = *(unsigned int *)(v23 - 4);
        if ((_DWORD)v24)
        {
          v25 = (std::__shared_weak_count **)(v23 + 16);
          do
          {
            if (*(v25 - 2) != (std::__shared_weak_count *)-1 && *v25)
              std::__shared_weak_count::__release_weak(*v25);
            v25 += 3;
            --v24;
          }
          while (v24);
        }
        WTF::fastFree(v23 - 16, v16, v17, v18, v19, v20, v21, v22);
      }
      WTF::fastFree(v8, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::Detail::CallableWrapper<JSC::`anonymous namespace'::AsynchronousDisassembler::AsynchronousDisassembler(void)::{lambda(void)#1},void>::call(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::_anonymous_namespace_::AsynchronousDisassembler *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

}

void JSC::`anonymous namespace'::AsynchronousDisassembler::run(JSC::_anonymous_namespace_::AsynchronousDisassembler *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t StatusReg;
  double v53;
  int v54;
  JSC::_anonymous_namespace_::AsynchronousDisassembler *v55;
  unsigned __int8 *v56;
  _QWORD v57[3];
  timespec __tp;
  unsigned __int8 **v59;

  v9 = (unsigned __int8 *)this + 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (__ldaxr((unsigned __int8 *)this))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)this))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_6:
    *((_BYTE *)this + 40) = 0;
    v11 = atomic_load((unsigned __int8 *)this + 1);
    if ((v11 & 1) != 0)
    {
      atomic_store(0, v9);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v9, a2, a3, a4, a5, a6, a7, a8);
    }
    while (1)
    {
      v14 = *((_QWORD *)this + 1);
      if (v14 != *((_QWORD *)this + 2))
        break;
      v53 = INFINITY;
      v54 = 0;
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      if (v54)
      {
        __break(0xC471u);
        JUMPOUT(0x198570644);
      }
      if (v53 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
      {
        v55 = this;
        v56 = v9;
        __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        __tp.tv_nsec = (uint64_t)&__tp;
        v59 = &v56;
        v57[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v57[1] = v57;
        v57[2] = &v55;
        WTF::ParkingLot::parkConditionallyImpl((uint64_t)v9, (uint64_t)&__tp, (uint64_t)v57, (WTF::TimeWithDynamicClockType *)&v53);
        goto LABEL_16;
      }
      v12 = __ldxr((unsigned __int8 *)this);
      if (v12 != 1)
      {
        __clrex();
LABEL_15:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_16;
      }
      if (__stlxr(0, (unsigned __int8 *)this))
        goto LABEL_15;
LABEL_16:
      if (__ldaxr((unsigned __int8 *)this))
      {
        __clrex();
        goto LABEL_19;
      }
      if (__stxr(1u, (unsigned __int8 *)this))
LABEL_19:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    }
    v15 = *((_QWORD *)this + 3);
    v16 = *(_QWORD *)(v15 + 8 * v14);
    *(_QWORD *)(v15 + 8 * v14) = 0;
    v17 = *((_QWORD *)this + 3);
    v18 = *(_QWORD *)(v17 + 8 * v14);
    *(_QWORD *)(v17 + 8 * v14) = 0;
    if (v18)
    {
      if (*(_QWORD *)v18)
        free(*(void **)v18);
      v19 = *(unsigned int **)(v18 + 16);
      *(_QWORD *)(v18 + 16) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
      }
      v22 = *(_QWORD *)(StatusReg + 752);
      if (v22)
      {
        if (v18 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v18 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v18)) & 1) == 0)
        {
          if (v18 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v18 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v18 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v18) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_31;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v18, 1, a4, a5, a6, a7, a8);
        }
        else
        {
LABEL_31:
          v23 = *(unsigned int *)(v22 + 8000);
          if (v23 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v22, v18, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v22 + 8 * v23) = v18 | 0x5000000000000;
            *(_DWORD *)(v22 + 8000) = v23 + 1;
          }
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v18, (uint64_t)&bmalloc_heap_config, 1);
      }
      v14 = *((_QWORD *)this + 1);
    }
    if (v14 == *((unsigned int *)this + 8) - 1)
      v24 = 0;
    else
      v24 = v14 + 1;
    *((_QWORD *)this + 1) = v24;
    *((_BYTE *)this + 40) = 1;
    v25 = __ldxr((unsigned __int8 *)this);
    if (v25 != 1)
    {
      __clrex();
LABEL_41:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_42;
    }
    if (__stlxr(0, (unsigned __int8 *)this))
      goto LABEL_41;
LABEL_42:
    WTF::dataLog<char const*>((const char **)v16);
    v53 = *(double *)(v16 + 8);
    v26 = *(_QWORD *)(v16 + 24);
    v27 = *(_QWORD *)(v16 + 32);
    v28 = *(_QWORD *)(v16 + 40);
    v29 = *(const char **)(v16 + 48);
    v30 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v30 != -1)
    {
      __tp.tv_sec = (__darwin_time_t)&v56;
      v57[0] = &__tp;
      std::__call_once(&WTF::initializeLogFile(void)::once, v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::tryToDisassemble((unint64_t *)&v53, v26, v27, v28, v29, (WTF::PrintStream *)WTF::s_file);
    if (*(_QWORD *)v16)
      free(*(void **)v16);
    v31 = *(unsigned int **)(v16 + 16);
    *(_QWORD *)(v16 + 16) = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v31, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
    }
    v34 = *(_QWORD *)(StatusReg + 752);
    if (v34)
    {
      if (v16 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v16 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v16)) & 1) == 0)
      {
        if (v16 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v16 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v16 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v16) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_53;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v34, v16, 1, a4, a5, a6, a7, a8);
      }
      else
      {
LABEL_53:
        v35 = *(unsigned int *)(v34 + 8000);
        if (v35 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v34, v16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v34 + 8 * v35) = v16 | 0x5000000000000;
          *(_DWORD *)(v34 + 8000) = v35 + 1;
        }
      }
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v16, (uint64_t)&bmalloc_heap_config, 1);
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Disassembler::ensureLabelMap(void)::$_0 &&>>()
{
  JSC::Disassembler::labelMap = 0;
}

JSC::ARM64Disassembler::A64DOpcodeCAS *JSC::ARM64Disassembler::A64DOpcodeCAS::format(JSC::ARM64Disassembler::A64DOpcodeCAS *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  int v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeCAS::s_opNames[(*((_DWORD *)this + 32) >> 28) & 0xC | (*((_DWORD *)this + 32) >> 21) & 2 | (*((_DWORD *)this + 32) >> 15) & 1u]);
  v3 = *((_DWORD *)this + 32);
  v4 = HIWORD(v3) & 0x1F;
  switch(v4)
  {
    case 29:
      v5 = "wfp";
      v6 = "fp";
      break;
    case 30:
      v5 = "wlr";
      v6 = "lr";
      break;
    case 31:
      v5 = "wsp";
      v6 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_11;
  }
  if (v3 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v5, v15);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v15);
LABEL_11:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v7 = *((_DWORD *)this + 32) & 0x1F;
  switch(v7)
  {
    case 29:
      v8 = "wfp";
      v9 = "fp";
      break;
    case 30:
      v8 = "wlr";
      v9 = "lr";
      break;
    case 31:
      v8 = "wsp";
      v9 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_21;
  }
  if (*((int *)this + 32) >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v16, v18);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v16, v18);
LABEL_21:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v10 = *((_DWORD *)this + 32);
  v11 = (v10 >> 5) & 0x1F;
  switch(v11)
  {
    case 29:
      v12 = "wfp";
      v13 = "fp";
      break;
    case 30:
      v12 = "wlr";
      v13 = "lr";
      break;
    case 31:
      v12 = "wsp";
      v13 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_31;
  }
  if (v10 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v17, v19);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v17, v19);
LABEL_31:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 93);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterPair *JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterPair::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterPair *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  const char *v4;
  const char *v5;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  const char *v17;
  const char *v18;
  char v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *((_DWORD *)this + 32);
  v4 = "ldp";
  if ((v3 & 0x400000) == 0)
    v4 = "stp";
  if ((v3 & 0xC4400000) == 0x40400000)
    v5 = "ldpsw";
  else
    v5 = v4;
  if (v3 >> 30 == 3 || ((v3 >> 23) & 7) - 4 <= 0xFFFFFFFC)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v5);
  v7 = *((_DWORD *)this + 32);
  if ((v7 & 0x4000000) != 0)
  {
    LODWORD(v11) = v7 >> 30;
    if (v11 >= 2)
      v11 = 2;
    else
      v11 = v11;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v11 + 2], *((_DWORD *)this + 32) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    LODWORD(v13) = *((_DWORD *)this + 32);
    v12 = (v13 >> 10) & 0x1F;
    LODWORD(v13) = v13 >> 30;
    if (v13 >= 2)
      v13 = 2;
    else
      v13 = v13;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v13 + 2], v12);
    v14 = 30;
    goto LABEL_45;
  }
  v8 = *((_DWORD *)this + 32) & 0x1F;
  if ((v7 & 0x400000) == 0)
  {
    if (v8 != 29)
    {
      if (v8 != 30)
      {
        if (v8 == 31)
        {
          v9 = "wzr";
          v10 = "xzr";
          goto LABEL_27;
        }
LABEL_30:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_31;
      }
      goto LABEL_26;
    }
LABEL_25:
    v9 = "wfp";
    v10 = "fp";
    goto LABEL_27;
  }
  if (v8 != 30)
  {
    if (v8 != 29)
      goto LABEL_30;
    goto LABEL_25;
  }
LABEL_26:
  v9 = "wlr";
  v10 = "lr";
LABEL_27:
  if (v7 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v23);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v23);
LABEL_31:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v15 = *((_DWORD *)this + 32);
  v16 = (v15 >> 10) & 0x1F;
  if ((v15 & 0x400000) != 0)
  {
    if (v16 == 30)
      goto LABEL_39;
    if (v16 != 29)
      goto LABEL_43;
LABEL_38:
    v17 = "wfp";
    v18 = "fp";
    goto LABEL_40;
  }
  switch(v16)
  {
    case 29:
      goto LABEL_38;
    case 30:
LABEL_39:
      v17 = "wlr";
      v18 = "lr";
LABEL_40:
      if (v15 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v17, v24, v27);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v24, v27);
      goto LABEL_44;
    case 31:
      v17 = "wzr";
      v18 = "xzr";
      goto LABEL_40;
  }
LABEL_43:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_44:
  v14 = 31;
LABEL_45:
  v19 = (*((_DWORD *)this + 32) >> v14) + 2;
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v20 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  switch(v20)
  {
    case 29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v25, v26);
      break;
    case 30:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
      break;
    case 31:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v25, v26);
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      break;
  }
  v21 = *((_DWORD *)this + 32);
  v22 = v21 << 10 >> 25 << v19;
  if ((v21 & 0x3800000) == 0x800000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 93);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%d");
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%d", v22);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 93);
    if ((*((_DWORD *)this + 32) & 0x3800000) == 0x1800000)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreExclusive *JSC::ARM64Disassembler::A64DOpcodeLoadStoreExclusive::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreExclusive *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  const char *v7;
  const char *v8;
  int v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x800000) != 0 && ((v3 & 0x208000) == 0 || (v3 & 0x200000) != 0)
    || (v3 & 0x80200000) == 0x200000
    || (v3 & 0x400000) != 0 && (v3 & 0x1F0000) != 0x1F0000
    || (~v3 & 0x7C00) != 0
    || ((0xDD00DD00DDCCDDCCLL >> ((*((_DWORD *)this + 32) >> 26) & 0x30 | (*((_DWORD *)this + 32) >> 20) & 0xEu | ((*((_DWORD *)this + 32) & 0x8000) != 0))) & 1) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeLoadStoreExclusive::s_opNames[(v3 >> 26) & 0x30 | (v3 >> 20) & 0xE | (v3 >> 15) & 1]);
  v4 = *((_DWORD *)this + 32);
  if ((v4 & 0x400000) == 0)
  {
    v5 = HIWORD(v4) & 0x1F;
    v6 = v4 >> 30;
    switch(v5)
    {
      case 29:
        v7 = "wfp";
        v8 = "fp";
        break;
      case 30:
        v7 = "wlr";
        v8 = "lr";
        break;
      case 31:
        v7 = "wzr";
        v8 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_22:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        v4 = *((_DWORD *)this + 32);
        goto LABEL_23;
    }
    if (v6 <= 2)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v15);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v15);
    goto LABEL_22;
  }
LABEL_23:
  v10 = v4 & 0x1F;
  v11 = v4 >> 30;
  switch(v10)
  {
    case 29:
      v12 = "wfp";
      v13 = "fp";
      break;
    case 30:
      v12 = "wlr";
      v13 = "lr";
      break;
    case 31:
      v12 = "wzr";
      v13 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_33;
  }
  if (v11 <= 2)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v15, v17);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v15, v17);
LABEL_33:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v14 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  switch(v14)
  {
    case 29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v16, v18);
      break;
    case 30:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
      break;
    case 31:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v16, v18);
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      break;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLogicalShiftedRegister *JSC::ARM64Disassembler::A64DOpcodeLogicalShiftedRegister::format(JSC::ARM64Disassembler::A64DOpcodeLogicalShiftedRegister *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v4;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x80008000) == 0x8000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  v4 = (v3 >> 28) & 6 | (v3 >> 21) & 1;
  if ((~v3 & 0x1F) == 0 && v4 == 6)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s");
    goto LABEL_24;
  }
  if ((v3 & 0x600003E0) == 0x200003E0)
  {
    if (((v3 >> 21) & 1) != 0)
      v6 = "mvn";
    else
      v6 = "mov";
  }
  else
  {
    v6 = JSC::ARM64Disassembler::A64DOpcodeLogical::s_opNames[v4];
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
  v7 = *((_DWORD *)this + 32) & 0x1F;
  switch(v7)
  {
    case 29:
      v8 = "wfp";
      v9 = "fp";
      goto LABEL_19;
    case 30:
      v8 = "wlr";
      v9 = "lr";
LABEL_19:
      if (*((int *)this + 32) >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v19);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v19);
      goto LABEL_23;
    case 31:
      v8 = "wzr";
      v9 = "xzr";
      goto LABEL_19;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_23:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_24:
  v10 = *((_DWORD *)this + 32);
  if ((v10 & 0x600003E0) == 0x200003E0)
    goto LABEL_36;
  v11 = (v10 >> 5) & 0x1F;
  switch(v11)
  {
    case 29:
      v12 = "wfp";
      v13 = "fp";
      goto LABEL_31;
    case 30:
      v12 = "wlr";
      v13 = "lr";
LABEL_31:
      if (v10 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v18, v20);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v18, v20);
      goto LABEL_35;
    case 31:
      v12 = "wzr";
      v13 = "xzr";
      goto LABEL_31;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_35:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v10 = *((_DWORD *)this + 32);
LABEL_36:
  v14 = HIWORD(v10) & 0x1F;
  switch(v14)
  {
    case 29:
      v15 = "wfp";
      v16 = "fp";
      break;
    case 30:
      v15 = "wlr";
      v16 = "lr";
      break;
    case 31:
      v15 = "wzr";
      v16 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_46;
  }
  if (v10 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v18, v20);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v16, v18, v20);
LABEL_46:
  if ((*((_BYTE *)this + 129) & 0xFC) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s ", JSC::ARM64Disassembler::A64DOpcode::s_shiftNames[((unint64_t)*((unsigned int *)this + 32) >> 22) & 3]);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeAddSubtractExtendedRegister *JSC::ARM64Disassembler::A64DOpcodeAddSubtractExtendedRegister::format(JSC::ARM64Disassembler::A64DOpcodeAddSubtractExtendedRegister *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *((unsigned int *)this + 32);
  if ((*((_DWORD *)this + 32) & 0x1C00u) > 0x1000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  if ((~(_DWORD)v3 & 0x2000001F) == 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s");
    goto LABEL_16;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeAddSubtract::s_opNames[(v3 >> 29) & 3]);
  v4 = *((_DWORD *)this + 32) & 0x1F;
  switch(v4)
  {
    case 29:
      v5 = "wfp";
      v6 = "fp";
      goto LABEL_11;
    case 30:
      v5 = "wlr";
      v6 = "lr";
LABEL_11:
      if (*((int *)this + 32) >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v5, v21);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v21);
      goto LABEL_15;
    case 31:
      v5 = "wsp";
      v6 = "sp";
      goto LABEL_11;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_15:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_16:
  v7 = *((_DWORD *)this + 32);
  v8 = (v7 >> 5) & 0x1F;
  switch(v8)
  {
    case 29:
      v9 = "wfp";
      v10 = "fp";
      break;
    case 30:
      v9 = "wlr";
      v10 = "lr";
      break;
    case 31:
      v9 = "wsp";
      v10 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_26;
  }
  if (v7 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v20, v23);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v20, v23);
LABEL_26:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v11 = *((_DWORD *)this + 32);
  v12 = HIWORD(v11) & 0x1F;
  v13 = v11 & 0x80006000;
  switch(v12)
  {
    case 29:
      v14 = "wfp";
      v15 = "fp";
      goto LABEL_32;
    case 30:
      v14 = "wlr";
      v15 = "lr";
LABEL_32:
      if (v13 == -2147459072)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v22, v24);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v22, v24);
      goto LABEL_36;
    case 31:
      v14 = "wzr";
      v15 = "xzr";
      goto LABEL_32;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_36:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v16 = *((_DWORD *)this + 32);
  v17 = (unsigned __int16)v16 >> 13;
  if ((_DWORD)v17 == 2 && ((~v16 & 0x1F) == 0 || (*((_DWORD *)this + 32) & 0x3E0) == 0x3E0))
    v18 = "lsl";
  else
    v18 = JSC::ARM64Disassembler::A64DOpcode::s_optionName[v17];
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", v18);
  if ((*((_BYTE *)this + 129) & 0x1C) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 32);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeAddSubtractShiftedRegister *JSC::ARM64Disassembler::A64DOpcodeAddSubtractShiftedRegister::format(JSC::ARM64Disassembler::A64DOpcodeAddSubtractShiftedRegister *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  const char *v5;
  int v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x80008000) == 0x8000 || (~(_DWORD)v3 & 0xC00000) == 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  if ((~(_DWORD)v3 & 0x2000001F) == 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s");
    goto LABEL_23;
  }
  if ((~(_DWORD)v3 & 0x400003E0) != 0)
  {
    v5 = JSC::ARM64Disassembler::A64DOpcodeAddSubtract::s_opNames[(v3 >> 29) & 3];
  }
  else if ((v3 & 0x40000000) != 0)
  {
    v5 = "cmp";
  }
  else
  {
    v5 = "cmn";
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v5);
  v6 = *((_DWORD *)this + 32) & 0x1F;
  switch(v6)
  {
    case 29:
      v7 = "wfp";
      v8 = "fp";
      goto LABEL_18;
    case 30:
      v7 = "wlr";
      v8 = "lr";
LABEL_18:
      if (*((int *)this + 32) >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v17);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v17);
      goto LABEL_22;
    case 31:
      v7 = "wsp";
      v8 = "sp";
      goto LABEL_18;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_22:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_23:
  v9 = *((_DWORD *)this + 32);
  if ((~v9 & 0x400003E0) == 0)
    goto LABEL_33;
  v10 = (v9 >> 5) & 0x1F;
  if (v10 == 30)
  {
    v11 = "wlr";
    v12 = "lr";
LABEL_28:
    if (v9 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v11, v16, v18);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v16, v18);
    goto LABEL_32;
  }
  if (v10 == 29)
  {
    v11 = "wfp";
    v12 = "fp";
    goto LABEL_28;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_32:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v9 = *((_DWORD *)this + 32);
LABEL_33:
  v13 = HIWORD(v9) & 0x1F;
  switch(v13)
  {
    case 29:
      v14 = "wfp";
      v15 = "fp";
      break;
    case 30:
      v14 = "wlr";
      v15 = "lr";
      break;
    case 31:
      v14 = "wzr";
      v15 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_43;
  }
  if (v9 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v16, v18);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v16, v18);
LABEL_43:
  if ((*((_BYTE *)this + 129) & 0xFC) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s ", JSC::ARM64Disassembler::A64DOpcode::s_shiftNames[((unint64_t)*((unsigned int *)this + 32) >> 22) & 3]);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical1Source *JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical1Source::format(JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical1Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  const char *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = (*((_DWORD *)this + 32) >> 10) & 0x1F;
  if (v3 == 7)
  {
    v4 = "ins";
  }
  else if (v3 == 15)
  {
    v4 = "umov";
  }
  else
  {
    v12 = (*((_DWORD *)this + 32) >> 10) & 0x1F;
    WTF::dataLog<char [62],unsigned int,char [2]>(&v12);
    v4 = "SIMDUK";
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v4);
  v5 = *((_DWORD *)this + 32);
  v13 = HIBYTE(v5) & 0x40 | HIWORD(v5) & 0x1F;
  if ((v5 & 0x10000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".8B");
    v6 = (v5 >> 17) & 0xF;
  }
  else if ((v5 & 0x30000) == 0x20000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".H");
    v6 = (v5 >> 18) & 7;
  }
  else if ((v5 & 0x70000) == 0x40000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".S");
    v6 = (v5 >> 19) & 3;
  }
  else if ((v5 & 0xF0000) == 0x80000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".D");
    v6 = (v5 >> 20) & 1;
  }
  else
  {
    WTF::dataLog<char [42],unsigned int,char [2]>(&v13);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".INVALID_LANE_TYPE");
    v6 = 0;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "[#%u]", v6);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 118);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 47);
  if ((*((_DWORD *)this + 32) & 0x1F) == 0x1E)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if ((*((_DWORD *)this + 32) & 0x1F) == 0x1D)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v9);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 118);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 47);
  v7 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  if (v7 == 30)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if (v7 == 29)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v10, v11);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical2Source *JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical2Source::format(JSC::ARM64Disassembler::A64DOpcodeVectorDataProcessingLogical2Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  const char *v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (((*((_DWORD *)this + 32) >> 10) & 0x1F) == 7)
  {
    v3 = "orr";
  }
  else
  {
    v12 = (*((_DWORD *)this + 32) >> 10) & 0x1F;
    WTF::dataLog<char [60],unsigned int,char [2]>(&v12);
    v3 = "SIMDUK";
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v3);
  if ((*((_DWORD *)this + 32) & 0x40000000) != 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".16B");
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ".8B");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 118);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 47);
  if ((*((_DWORD *)this + 32) & 0x1F) == 0x1E)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if ((*((_DWORD *)this + 32) & 0x1F) == 0x1D)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v7);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 118);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 47);
  v4 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  if (v4 == 30)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if (v4 == 29)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v8, v10);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 118);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 47);
  v5 = *((_WORD *)this + 65) & 0x1F;
  if (v5 == 30)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if (v5 == 29)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v9, v11);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeAddSubtractImmediate *JSC::ARM64Disassembler::A64DOpcodeAddSubtractImmediate::format(JSC::ARM64Disassembler::A64DOpcodeAddSubtractImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  const char *v4;
  int v5;
  const char *v6;
  const char *v7;
  int v8;
  int v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((unsigned int *)this + 32);
  if ((~(_DWORD)v3 & 0x2000001F) == 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s");
    goto LABEL_19;
  }
  if ((v3 & 0x603FFC00) != 0 || (~(_DWORD)v3 & 0x1F) != 0 && (*((_DWORD *)this + 32) & 0x3E0) != 0x3E0)
    v4 = JSC::ARM64Disassembler::A64DOpcodeAddSubtract::s_opNames[(v3 >> 29) & 3];
  else
    v4 = "mov";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v4);
  v5 = *((_DWORD *)this + 32) & 0x1F;
  switch(v5)
  {
    case 29:
      v6 = "wfp";
      v7 = "fp";
      goto LABEL_14;
    case 30:
      v6 = "wlr";
      v7 = "lr";
LABEL_14:
      if (*((int *)this + 32) >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v16);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v16);
      goto LABEL_18;
    case 31:
      v6 = "wsp";
      v7 = "sp";
      goto LABEL_14;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_18:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_19:
  v8 = *((_DWORD *)this + 32);
  v9 = (v8 >> 5) & 0x1F;
  switch(v9)
  {
    case 29:
      v10 = "wfp";
      v11 = "fp";
      goto LABEL_25;
    case 30:
      v10 = "wlr";
      v11 = "lr";
LABEL_25:
      if (v8 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v15, v17);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v11, v15, v17);
      goto LABEL_29;
    case 31:
      v10 = "wsp";
      v11 = "sp";
      goto LABEL_25;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_29:
  v12 = *((_DWORD *)this + 32);
  if ((v12 & 0x603FFC00) != 0 || (~v12 & 0x1F) != 0 && (*((_DWORD *)this + 32) & 0x3E0) != 0x3E0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", (*((_DWORD *)this + 32) >> 10) & 0xFFF);
    if ((*((_BYTE *)this + 130) & 0xC0) != 0)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
      if ((*((_DWORD *)this + 32) & 0xC00000) == 0x400000)
        v13 = "lsl";
      else
        v13 = "reserved";
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", v13);
    }
  }
  return this;
}

uint64_t JSC::ARM64Disassembler::A64DOpcodeMoveWide::format(JSC::ARM64Disassembler::A64DOpcodeMoveWide *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  char v10;
  int v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t i;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  char **v51;
  char *v52;

  v3 = *((unsigned int *)this + 32);
  v4 = (v3 >> 29) & 3;
  if ((_DWORD)v4 == 1 || (v3 & 0x80400000) == 0x400000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return (uint64_t)this;
  }
  if ((_DWORD)v4
    || (unsigned __int16)(v3 >> 5)
    && ((v3 & 0x80000000) == 0 ? (v9 = (unsigned __int16)(v3 >> 5) == 0xFFFF) : (v9 = 0),
        !v9 ? (v10 = 0) : (v10 = 1),
        (v3 & 0x600000) != 0 || (v10 & 1) != 0))
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", (&JSC::ARM64Disassembler::A64DOpcodeMoveWide::s_opNames)[v4]);
    v6 = *((_DWORD *)this + 32);
    if ((v6 & 0x1F) == 0x1E)
    {
      v7 = "wlr";
      v8 = "lr";
    }
    else
    {
      if ((v6 & 0x1F) != 0x1D)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_26:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#0x%x", (unsigned __int16)(*((_DWORD *)this + 32) >> 5));
        v14 = *((_DWORD *)this + 32);
        if ((v14 & 0x600000) != 0)
        {
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lsl #%u", (*((_DWORD *)this + 32) >> 17) & 0x30);
          v14 = *((_DWORD *)this + 32);
        }
        if ((v14 & 0x60000000) == 0x40000000)
          v15 = 0;
        else
          v15 = *((_QWORD *)this + 17);
        v16 = v15 & ~(0xFFFFLL << ((v14 >> 17) & 0x30)) | ((unint64_t)(unsigned __int16)(v14 >> 5) << ((v14 >> 17) & 0x30));
        goto LABEL_32;
      }
      v7 = "wfp";
      v8 = "fp";
    }
    if (v6 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v45);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v45);
    goto LABEL_26;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", "mov");
  v11 = *((_DWORD *)this + 32);
  if ((v11 & 0x1F) == 0x1E)
  {
    v12 = "wlr";
    v13 = "lr";
  }
  else
  {
    if ((v11 & 0x1F) != 0x1D)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_56;
    }
    v12 = "wfp";
    v13 = "fp";
  }
  if (v11 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v46);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v46);
LABEL_56:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v29 = *((_DWORD *)this + 32);
  v30 = (unsigned __int16)(v29 >> 5) << ((v29 >> 17) & 0x30);
  if ((v29 & 0x80000000) == 0)
  {
    v31 = ~(_DWORD)v30;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%d", ~(_DWORD)v30);
    v16 = v31;
LABEL_32:
    *((_QWORD *)this + 17) = v16;
    goto LABEL_33;
  }
  v32 = ~v30;
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%lli", ~v30);
  *((_QWORD *)this + 17) = v32;
LABEL_33:
  if (!*((_QWORD *)this + 13))
    return (uint64_t)this;
  v17 = (int *)(*((_QWORD *)this + 15) + 4);
  if ((unint64_t)v17 < *((_QWORD *)this + 14))
  {
    v18 = atomic_load(&_MergedGlobals_34);
    if (v18 != -1)
    {
      v51 = &v52;
      v52 = (char *)JSC::ARM64Disassembler::A64DOpcode::init;
      std::__call_once(&_MergedGlobals_34, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<void (&)(void)>>);
    }
    v19 = *v17;
    v20 = *((_DWORD *)this + 32) ^ *v17;
    if ((v20 & 0x1F000000) == 0
      && (v19 & 0x60000000) != 0x20000000
      && (v19 & 0x80400000) != 0x400000
      && (v20 & 0x1F) == 0)
    {
      return (uint64_t)this;
    }
  }
  v21 = *((_QWORD *)this + 17);
  if (!v21)
    return (uint64_t)this;
  if (v21 < qword_1ECF4C080 || v21 >> 36 || (v21 & 0xFFFFFFFFFLL) == 0)
  {
    if (v21 >> 16)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " -> %p");
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " -> %u");
    return (uint64_t)this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " -> %p", *((const void **)this + 17));
  if (JSC::labelFor((JSC *)v21, v22, v23, v24, v25, v26, v27, v28))
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " %s");
    return (uint64_t)this;
  }
  if (qword_1ECF4C1F8 <= v21 && qword_1ECF4C200 > v21)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " JIT PC", v47);
    return (uint64_t)this;
  }
  if ((unint64_t)llintPCRangeStart < (unint64_t)llintPCRangeEnd)
  {
    if (v21 >= (unint64_t)llintPCRangeStart && v21 <= (unint64_t)llintPCRangeEnd)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, " LLInt PC");
      return (uint64_t)this;
    }
    v49 = v21;
    v48 = 0;
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v39 = off_1E358FE90;
    v39[1] = &v49;
    v39[2] = this;
    v39[3] = &v48;
    v40 = atomic_load(&JSC::VMInspector::instance(void)::once);
    if (v40 != -1)
    {
      v52 = &v50;
      v51 = &v52;
      std::__call_once(&JSC::VMInspector::instance(void)::once, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
    }
    v41 = JSC::VMInspector::instance(void)::manager;
    if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
    {
      goto LABEL_72;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v41);
LABEL_72:
    for (i = *(_QWORD *)(v41 + 8); i; i = *(_QWORD *)(i + 93528))
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v39 + 16))(v39, i) == 1)
        break;
    }
    v44 = __ldxr((unsigned __int8 *)v41);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
        goto LABEL_80;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v41, 0, v33, v34, v35, v36, v37, v38);
LABEL_80:
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    return (uint64_t)this;
  }
  result = 49;
  __break(0xC471u);
  return result;
}

JSC::ARM64Disassembler::A64DOpcodeLogicalImmediate *JSC::ARM64Disassembler::A64DOpcodeLogicalImmediate::format(JSC::ARM64Disassembler::A64DOpcodeLogicalImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  char v6;
  BOOL v7;
  int v8;
  int v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  const char *v20;
  const char *v21;
  int v22;
  int v23;
  const char *v24;
  const char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x80400000) != 0x400000)
  {
    v4 = (unsigned __int16)v3 >> 10;
    v5 = (BYTE2(v3) & 0x40 | v4) ^ 0x3F;
    if (v5 >= 2)
    {
      v6 = 0;
      do
      {
        ++v6;
        v7 = v5 > 3;
        v5 >>= 1;
      }
      while (v7);
    }
    else
    {
      v6 = 0;
    }
    v8 = 1 << v6;
    v9 = (1 << v6) - 1;
    v10 = v9 & v4;
    if ((v9 & v4) != v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = v9 & BYTE2(v3);
      v14 = (v13 & 0x3F) == 0;
      v15 = -1 << (v10 + 1);
      v16 = ((unint64_t)~v15 >> v13) | (~v15 << (v8 - (v13 & 0x3Fu)));
      if (v14)
        v17 = ~v15;
      else
        v17 = v16;
      do
      {
        v12 = (v12 << v8) | v17;
        v11 += v8;
      }
      while (v11 < 0x40);
      if ((~(_DWORD)v3 & 0x6000001F) == 0)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s");
        goto LABEL_26;
      }
      if ((v3 & 0x600003E0) == 0x200003E0)
        v18 = "mov";
      else
        v18 = *(char **)((char *)JSC::ARM64Disassembler::A64DOpcodeLogical::s_opNames + ((v3 >> 25) & 0x30));
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v18);
      v19 = *((_DWORD *)this + 32);
      if ((v19 & 0x1F) == 0x1E)
      {
        v20 = "wlr";
        v21 = "lr";
      }
      else
      {
        if ((v19 & 0x1F) != 0x1D)
        {
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_25:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_26:
          v22 = *((_DWORD *)this + 32);
          if ((v22 & 0x600003E0) == 0x200003E0)
          {
LABEL_36:
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#0x%llx");
            return this;
          }
          v23 = (v22 >> 5) & 0x1F;
          if (v23 == 30)
          {
            v24 = "wlr";
            v25 = "lr";
          }
          else
          {
            if (v23 != 29)
            {
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_35:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
              goto LABEL_36;
            }
            v24 = "wfp";
            v25 = "fp";
          }
          if (v22 >= 0)
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v24, v27, v29);
          else
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v25, v27, v29);
          goto LABEL_35;
        }
        v20 = "wfp";
        v21 = "fp";
      }
      if (v19 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v20, v28);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v21, v28);
      goto LABEL_25;
    }
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeBitfield *JSC::ARM64Disassembler::A64DOpcodeBitfield::format(JSC::ARM64Disassembler::A64DOpcodeBitfield *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  uint64_t v4;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  int v23;
  const char *v24;
  const char *v25;
  int v26;
  const char *v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  const char *v32;
  const char *v33;
  int v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  const char *v42;
  const char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v3 = *((unsigned int *)this + 32);
  v4 = (v3 >> 29) & 3;
  if ((_DWORD)v4 == 3
    || ((v3 >> 22) & 1) != v3 >> 31
    || (v3 & 0x80000000) == 0 && (v3 & 0x208000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  if ((v3 & 0x203F0000) != 0)
  {
LABEL_8:
    if ((v3 & 0x20007C00) == 0x7C00 && ((v3 >> 15) & 1) == v3 >> 31)
    {
      if ((_DWORD)v4)
        v6 = "lsr";
      else
        v6 = "asr";
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
      v7 = *((_DWORD *)this + 32);
      if ((v7 & 0x1F) == 0x1E)
      {
        v8 = "wlr";
        v9 = "lr";
      }
      else
      {
        if ((v7 & 0x1F) != 0x1D)
        {
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_72:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
          v34 = *((_DWORD *)this + 32);
          v35 = (v34 >> 5) & 0x1F;
          if (v35 == 30)
          {
            v36 = "wlr";
            v37 = "lr";
LABEL_76:
            if (v34 < 0)
            {
LABEL_77:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v37, v56, v60);
LABEL_80:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_110:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
              return this;
            }
LABEL_99:
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v36, v56, v60);
            goto LABEL_80;
          }
          if (v35 == 29)
          {
            v36 = "wfp";
            v37 = "fp";
            goto LABEL_76;
          }
LABEL_79:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
          goto LABEL_80;
        }
        v8 = "wfp";
        v9 = "fp";
      }
      if (v7 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v48);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v48);
      goto LABEL_72;
    }
    v10 = (unsigned __int16)v3 >> 10;
    if ((_DWORD)v4 == 2)
    {
      v11 = WORD1(v3) & 0x3F;
      if (v10 + 1 == v11)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", "lsl");
        v12 = *((_DWORD *)this + 32);
        if ((v12 & 0x1F) == 0x1E)
        {
          v13 = "wlr";
          v14 = "lr";
        }
        else
        {
          if ((v12 & 0x1F) != 0x1D)
          {
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
            goto LABEL_86;
          }
          v13 = "wfp";
          v14 = "fp";
        }
        if (v12 >= 0)
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v49);
        else
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v49);
LABEL_86:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        v38 = *((_DWORD *)this + 32);
        v39 = (v38 >> 5) & 0x1F;
        if (v39 == 30)
        {
          v36 = "wlr";
          v37 = "lr";
        }
        else
        {
          if (v39 != 29)
            goto LABEL_79;
          v36 = "wfp";
          v37 = "fp";
        }
        if (v38 < 0)
          goto LABEL_77;
        goto LABEL_99;
      }
      if (v10 < v11)
      {
LABEL_32:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeBitfield::s_insertOpNames[v4]);
        v20 = *((_DWORD *)this + 32);
        if ((v20 & 0x1F) == 0x1E)
        {
          v21 = "wlr";
          v22 = "lr";
        }
        else
        {
          if ((v20 & 0x1F) != 0x1D)
          {
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
            goto LABEL_94;
          }
          v21 = "wfp";
          v22 = "fp";
        }
        if (v20 >= 0)
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v21, v51);
        else
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v22, v51);
LABEL_94:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        v40 = *((_DWORD *)this + 32);
        v41 = (v40 >> 5) & 0x1F;
        if (v41 == 30)
        {
          v42 = "wlr";
          v43 = "lr";
        }
        else
        {
          if (v41 != 29)
          {
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
            goto LABEL_106;
          }
          v42 = "wfp";
          v43 = "fp";
        }
        if (v40 >= 0)
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v42, v57, v61);
        else
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v43, v57, v61);
LABEL_106:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        v44 = *((_DWORD *)this + 32);
        if (v44 >= 0)
          v45 = 32;
        else
          v45 = 64;
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", v45 - (HIWORD(v44) & 0x3F));
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        goto LABEL_110;
      }
LABEL_35:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeBitfield::s_extractOpNames[v4]);
      v23 = *((_DWORD *)this + 32);
      if ((v23 & 0x1F) == 0x1E)
      {
        v24 = "wlr";
        v25 = "lr";
      }
      else
      {
        if ((v23 & 0x1F) != 0x1D)
        {
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_60:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
          v30 = *((_DWORD *)this + 32);
          v31 = (v30 >> 5) & 0x1F;
          if (v31 == 30)
          {
            v32 = "wlr";
            v33 = "lr";
LABEL_64:
            if (v30 >= 0)
            {
LABEL_65:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v32, v55, v59);
LABEL_124:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", *((_WORD *)this + 65) & 0x3F);
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
              goto LABEL_110;
            }
LABEL_121:
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v33, v55, v59);
            goto LABEL_124;
          }
          if (v31 == 29)
          {
            v32 = "wfp";
            v33 = "fp";
            goto LABEL_64;
          }
LABEL_123:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
          goto LABEL_124;
        }
        v24 = "wfp";
        v25 = "fp";
      }
      if (v23 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v24, v52);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v25, v52);
      goto LABEL_60;
    }
    if (v10 >= (WORD1(v3) & 0x3F))
      goto LABEL_35;
    if ((~(_DWORD)v3 & 0x3E0) != 0 || (_DWORD)v4 != 1)
      goto LABEL_32;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", "bfm");
    v17 = *((_DWORD *)this + 32);
    if ((v17 & 0x1F) == 0x1E)
    {
      v18 = "wlr";
      v19 = "lr";
    }
    else
    {
      if ((v17 & 0x1F) != 0x1D)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_116;
      }
      v18 = "wfp";
      v19 = "fp";
    }
    if (v17 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v50);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v19, v50);
LABEL_116:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v46 = *((_DWORD *)this + 32);
    v47 = (v46 >> 5) & 0x1F;
    if (v47 == 30)
    {
      v32 = "wlr";
      v33 = "lr";
    }
    else
    {
      if (v47 != 29)
        goto LABEL_123;
      v32 = "wfp";
      v33 = "fp";
    }
    if (v46 >= 0)
      goto LABEL_65;
    goto LABEL_121;
  }
  v15 = (unsigned __int16)v3 >> 10;
  switch(v15)
  {
    case 31:
      if ((v3 & 0x80000000) == 0 || (_DWORD)v4)
        goto LABEL_8;
      v16 = "sxtw";
      break;
    case 15:
      v16 = JSC::ARM64Disassembler::A64DOpcodeBitfield::s_extendPseudoOpNames[3 * ((v3 >> 29) & 3) + 1];
      break;
    case 7:
      v16 = JSC::ARM64Disassembler::A64DOpcodeBitfield::s_extendPseudoOpNames[3 * ((v3 >> 29) & 3)];
      break;
    default:
      goto LABEL_8;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v16);
  v26 = *((_DWORD *)this + 32);
  if ((v26 & 0x1F) == 0x1E)
  {
    v27 = "wlr";
    v28 = "lr";
LABEL_46:
    if (v26 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v27, v53);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v28, v53);
    goto LABEL_50;
  }
  if ((v26 & 0x1F) == 0x1D)
  {
    v27 = "wfp";
    v28 = "fp";
    goto LABEL_46;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_50:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v29 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  if (v29 == 30)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "wlr", v54, v58);
  }
  else if (v29 == 29)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "wfp", v54, v58);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeExtract *JSC::ARM64Disassembler::A64DOpcodeExtract::format(JSC::ARM64Disassembler::A64DOpcodeExtract *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x60200000) == 0 && ((v3 >> 22) & 1) == v3 >> 31 && (v3 & 0x80008000) != 0x8000)
  {
    v5 = ((v3 >> 5) ^ BYTE2(v3)) & 0x1F;
    v6 = "extr";
    if (!v5)
      v6 = "ror";
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
    v7 = *((_DWORD *)this + 32) & 0x1F;
    switch(v7)
    {
      case 29:
        v8 = "wfp";
        v9 = "fp";
        break;
      case 30:
        v8 = "wlr";
        v9 = "lr";
        break;
      case 31:
        v8 = "wzr";
        v9 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_18;
    }
    if (*((int *)this + 32) >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v18);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v18);
LABEL_18:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v10 = *((_DWORD *)this + 32);
    v11 = (v10 >> 5) & 0x1F;
    switch(v11)
    {
      case 29:
        v12 = "wfp";
        v13 = "fp";
        break;
      case 30:
        v12 = "wlr";
        v13 = "lr";
        break;
      case 31:
        v12 = "wzr";
        v13 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_28;
    }
    if (v10 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v19, v21);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v19, v21);
LABEL_28:
    if (!v5)
      goto LABEL_39;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v14 = *((_DWORD *)this + 32);
    v15 = HIWORD(v14) & 0x1F;
    switch(v15)
    {
      case 29:
        v16 = "wfp";
        v17 = "fp";
        break;
      case 30:
        v16 = "wlr";
        v17 = "lr";
        break;
      case 31:
        v16 = "wzr";
        v17 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_39:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
        return this;
    }
    if (v14 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v16, v20, v22);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v17, v20, v22);
    goto LABEL_39;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchImmediate *JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchImmediate::format(JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((int *)this + 32) < 0)
    v3 = "bl";
  else
    v3 = "b";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v3);
  JSC::ARM64Disassembler::A64DOpcode::appendPCRelativeOffset(this, *((unsigned int **)this + 15), ((int)(*((_DWORD *)this + 32) << 6) >> 6), v4, v5, v6, v7, v8);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeConditionalBranchImmediate *JSC::ARM64Disassembler::A64DOpcodeConditionalBranchImmediate::format(JSC::ARM64Disassembler::A64DOpcodeConditionalBranchImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   b.%-7.7s", JSC::ARM64Disassembler::A64DOpcode::s_conditionNames[*((_DWORD *)this + 32) & 0xF]);
  JSC::ARM64Disassembler::A64DOpcode::appendPCRelativeOffset(this, *((unsigned int **)this + 15), ((int)(*((_DWORD *)this + 32) << 8) >> 13), v3, v4, v5, v6, v7);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeCompareAndBranchImmediate *JSC::ARM64Disassembler::A64DOpcodeCompareAndBranchImmediate::format(JSC::ARM64Disassembler::A64DOpcodeCompareAndBranchImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((*((_DWORD *)this + 32) & 0x1000000) != 0)
    v3 = "cbnz";
  else
    v3 = "cbz";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v3);
  v4 = *((_DWORD *)this + 32);
  if ((v4 & 0x1F) == 0x1E)
  {
    v5 = "wlr";
    v6 = "lr";
  }
  else
  {
    if ((v4 & 0x1F) != 0x1D)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_12;
    }
    v5 = "wfp";
    v6 = "fp";
  }
  if (v4 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v5, v13);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v13);
LABEL_12:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::appendPCRelativeOffset(this, *((unsigned int **)this + 15), ((int)(*((_DWORD *)this + 32) << 8) >> 13), v7, v8, v9, v10, v11);
  return this;
}

JSC::ARM64Disassembler::A64OpcodeExceptionGeneration *JSC::ARM64Disassembler::A64OpcodeExceptionGeneration::format(JSC::ARM64Disassembler::A64OpcodeExceptionGeneration *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  unsigned int v5;
  char **v6;
  const char *v7;

  v3 = *((_DWORD *)this + 32);
  switch((v3 >> 21) & 7)
  {
    case 0u:
      v5 = (*((_DWORD *)this + 32) & 3) - 1;
      if (v5 >= 3)
        goto LABEL_2;
      v6 = off_1E358FEA8;
      goto LABEL_13;
    case 1u:
      if ((v3 & 3) != 0)
        goto LABEL_2;
      v7 = "brk";
      goto LABEL_14;
    case 2u:
      if ((v3 & 3) != 0)
        goto LABEL_2;
      v7 = "hlt";
      goto LABEL_14;
    case 5u:
      v5 = (*((_DWORD *)this + 32) & 3) - 1;
      if (v5 >= 3)
        goto LABEL_2;
      v6 = off_1E358FEC0;
LABEL_13:
      v7 = v6[v5];
LABEL_14:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v7);
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#0x%x");
      break;
    default:
LABEL_2:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
      break;
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeHint *JSC::ARM64Disassembler::A64DOpcodeHint::format(JSC::ARM64Disassembler::A64DOpcodeHint *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  const char *v4;
  unint64_t v5;

  v3 = ((unint64_t)*((unsigned int *)this + 32) >> 5) & 0x7F;
  if (v3 > 0x1F)
    v4 = 0;
  else
    v4 = JSC::ARM64Disassembler::A64DOpcodeHint::s_opNames[v3];
  if (!v4)
    v4 = "hint";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v4);
  v5 = ((unint64_t)*((unsigned int *)this + 32) >> 5) & 0x7F;
  if (v5 > 0x1F || ((0xFFAA40uLL >> v5) & 1) != 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", (*((_DWORD *)this + 32) >> 5) & 0x7F);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeSystemSync *JSC::ARM64Disassembler::A64DOpcodeSystemSync::format(JSC::ARM64Disassembler::A64DOpcodeSystemSync *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  uint64_t v3;
  int v4;

  v3 = *((_DWORD *)this + 32) >> 5;
  if (((0x8BuLL >> v3) & 1) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", *((const char **)&JSC::ARM64Disassembler::A64DOpcodeSystemSync::s_opNames + v3));
  v4 = *((_DWORD *)this + 32);
  if ((v4 & 0x40) != 0)
  {
    if ((~v4 & 0xF00) == 0)
      return this;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 35);
LABEL_8:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
    return this;
  }
  if (((0x1111uLL >> (BYTE1(v4) & 0xF)) & 1) != 0)
    goto LABEL_8;
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeMSRImmediate *JSC::ARM64Disassembler::A64DOpcodeMSRImmediate::format(JSC::ARM64Disassembler::A64DOpcodeMSRImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v4;
  const char *v5;
  const char *v6;

  v3 = *((_DWORD *)this + 32);
  v4 = HIWORD(v3) & 7;
  if (v4 == 3)
  {
    if ((v3 & 0x80) != 0)
    {
      v6 = "daifset";
      if ((*((_DWORD *)this + 32) & 0xE0) != 0xC0)
        v6 = 0;
      v5 = (*((_DWORD *)this + 32) & 0xE0) == 0xE0 ? "daifclr" : v6;
      if (v5)
        goto LABEL_12;
    }
LABEL_13:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  if (v4 || (*((_DWORD *)this + 32) & 0xE0) != 0xA0)
    goto LABEL_13;
  v5 = "spsel";
LABEL_12:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", "msr");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", v5);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeMSROrMRSRegister *JSC::ARM64Disassembler::A64DOpcodeMSROrMRSRegister::format(JSC::ARM64Disassembler::A64DOpcodeMSROrMRSRegister *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  const char *v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  const char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*((_DWORD *)this + 32) & 0x200000) != 0)
    v3 = "mrs";
  else
    v3 = "msr";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v3);
  v4 = *((_DWORD *)this + 32);
  if ((v4 & 0x200000) != 0)
  {
    v5 = *((_DWORD *)this + 32) & 0x1F;
    switch(v5)
    {
      case 29:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v10);
        break;
      case 30:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
        break;
      case 31:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "xzr", v10);
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        break;
    }
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v4 = *((_DWORD *)this + 32);
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "S%u_%u_C%u_C%u_%u", (v4 >> 19) & 3, HIWORD(v4) & 7, (unsigned __int16)v4 >> 12, (v4 >> 8) & 0xF, v4 >> 5);
  if ((*((_BYTE *)this + 130) & 0x20) == 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v6 = *((_DWORD *)this + 32) & 0x1F;
    switch(v6)
    {
      case 29:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v11, v12);
        break;
      case 30:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
        break;
      case 31:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "xzr", v11, v12);
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        break;
    }
  }
  v7 = (unsigned __int16)(*((_DWORD *)this + 32) >> 5);
  if (v7 <= 0xDA1F)
  {
    switch(v7)
    {
      case 0xD801u:
        v8 = "ctr_el0";
        goto LABEL_37;
      case 0xDA10u:
        v8 = "nzcv";
        goto LABEL_37;
      case 0xDA11u:
        v8 = "daif";
        goto LABEL_37;
    }
  }
  else if ((unsigned __int16)(*((_DWORD *)this + 32) >> 5) > 0xDE81u)
  {
    if (v7 == 56962)
    {
      v8 = "tpidr_el0";
      goto LABEL_37;
    }
    if (v7 == 56963)
    {
      v8 = "tpidrr0_el0";
      goto LABEL_37;
    }
  }
  else
  {
    if (v7 == 55840)
    {
      v8 = "fpcr";
      goto LABEL_37;
    }
    if (v7 == 55841)
    {
      v8 = "fpsr";
LABEL_37:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", "  ; ");
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", v8);
    }
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchRegister *JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchRegister::format(JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchRegister *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((unsigned int *)this + 32);
  v4 = (v3 >> 21) & 0xF;
  if ((v3 & 0x1FF800) != 0x1F0800)
  {
    v8 = (_DWORD)v4 == 3 || v4 >= 6;
    if (!v8 && ((v3 & 0x1C00000) != 0x800000 || (*((_DWORD *)this + 32) & 0x3E0) == 0x3E0))
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchRegister::s_opNames[v4]);
      if (v4 > 2)
        return this;
      v10 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
      goto LABEL_25;
    }
LABEL_17:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  v5 = (v3 >> 20) & 0x1E | (v3 >> 10) & 1;
  if (v5 > 0x13)
    goto LABEL_17;
  if (((0xFCC0uLL >> v5) & 1) != 0)
    goto LABEL_17;
  v6 = JSC::ARM64Disassembler::A64DOpcodeUnconditionalBranchRegister::s_AuthOpNames[v5];
  if ((~(_DWORD)v3 & 0x3E0) != 0 && ((_DWORD)v4 == 4 || (_DWORD)v4 == 2))
    goto LABEL_17;
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
  if ((v3 & 0xC00000) == 0)
  {
    v7 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
    if (v7 == 30)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
    }
    else if (v7 == 29)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v11);
    }
    else
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
    }
  }
  if ((v3 & 0x1000000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v10 = *((_DWORD *)this + 32) & 0x1F;
LABEL_25:
    if (v10 == 30)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr", v11, v12);
    }
    else if (v10 == 29)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v11, v12);
    }
    else
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
    }
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeTestAndBranchImmediate *JSC::ARM64Disassembler::A64DOpcodeTestAndBranchImmediate::format(JSC::ARM64Disassembler::A64DOpcodeTestAndBranchImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((*((_DWORD *)this + 32) & 0x1000000) != 0)
    v3 = "tbnz";
  else
    v3 = "tbz";
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v3);
  if ((*((_DWORD *)this + 32) & 0x1F) == 0x1E)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if ((*((_DWORD *)this + 32) & 0x1F) == 0x1D)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v10);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", (*((_DWORD *)this + 32) >> 26) & 0x20 | (*((_DWORD *)this + 32) >> 19) & 0x1F);
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::appendPCRelativeOffset(this, *((unsigned int **)this + 15), ((int)(*((_DWORD *)this + 32) << 13) >> 18), v4, v5, v6, v7, v8);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreImmediate *JSC::ARM64Disassembler::A64DOpcodeLoadStoreImmediate::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  uint64_t v4;
  char **v5;
  const char **v6;
  const char *v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  _BOOL4 v16;
  const char *v17;
  const char *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)this + 32);
  v4 = (v3 >> 27) & 0x18 | HIBYTE(v3) & 4 | (v3 >> 22) & 3;
  v5 = &JSC::ARM64Disassembler::A64DOpcodeLoadStoreImmediate::s_unprivilegedOpNames[v4];
  if ((v3 & 0xC00) == 0)
    v5 = &JSC::ARM64Disassembler::A64DOpcodeLoadStoreImmediate::s_unscaledOpNames[v4];
  v6 = (const char **)&JSC::ARM64Disassembler::A64DOpcodeLoadStore::s_opNames[v4];
  if ((v3 & 0x400) == 0)
    v6 = (const char **)v5;
  v7 = *v6;
  if (v7)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v7);
    v8 = *((_DWORD *)this + 32);
    if ((v8 & 0x4000000) != 0)
      goto LABEL_32;
    v9 = (v8 >> 22) & 3;
    v10 = *((_DWORD *)this + 32) & 0x1F;
    v11 = HIBYTE(v8) & 4 | (8 * (v8 >> 30));
    if (v9)
    {
      v12 = v11 | v9;
      v13 = v12 & 0xFFFFFFF7;
      v14 = v12 & 0x1E;
      v16 = v13 == 2 || v14 == 24;
      if (v10 == 30)
      {
        v17 = "wlr";
        v18 = "lr";
LABEL_24:
        if (v16)
        {
LABEL_25:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v21);
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      if (v10 == 29)
      {
        v17 = "wfp";
        v18 = "fp";
        goto LABEL_24;
      }
LABEL_32:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_33:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
      v19 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
      switch(v19)
      {
        case 29:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v22, v23);
          break;
        case 30:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
          break;
        case 31:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v22, v23);
          break;
        default:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
          break;
      }
      __asm { BR              X11 }
    }
    switch(v10)
    {
      case 29:
        v17 = "wfp";
        v18 = "fp";
        break;
      case 30:
        v17 = "wlr";
        v18 = "lr";
        break;
      case 31:
        v17 = "wzr";
        v18 = "xzr";
        break;
      default:
        goto LABEL_32;
    }
    if (v11 == 24)
      goto LABEL_25;
LABEL_31:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v17, v21);
    goto LABEL_33;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x", *((_DWORD *)this + 32));
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterOffset *JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterOffset::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreRegisterOffset *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((_DWORD *)this + 32);
  if (((0xCCC8C000uLL >> ((v3 >> 27) & 0x18 | HIBYTE(v3) & 4 | (v3 >> 22) & 3)) & 1) == 0 && (v3 & 0x4000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeLoadStore::s_opNames[(v3 >> 27) & 0x18 | HIBYTE(v3) & 4 | (v3 >> 22) & 3]);
    v4 = *((_DWORD *)this + 32);
    if ((v4 & 0x4000000) != 0)
    {
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[(unint64_t)*((unsigned int *)this + 32) >> 30], *((_DWORD *)this + 32) & 0x1F);
      v15 = (*((_DWORD *)this + 32) >> 21) & 4 | (*((_DWORD *)this + 32) >> 30);
      goto LABEL_31;
    }
    v5 = (v4 >> 22) & 3;
    v6 = *((_DWORD *)this + 32) & 0x1F;
    v7 = HIBYTE(*((_DWORD *)this + 32)) & 4 | (8 * (*((_DWORD *)this + 32) >> 30));
    if (v5)
    {
      v8 = v7 | v5;
      v9 = v8 & 0xFFFFFFF7;
      v10 = v8 & 0x1E;
      v12 = v9 == 2 || v10 == 24;
      if (v6 == 30)
      {
        v13 = "wlr";
        v14 = "lr";
LABEL_21:
        if (v12)
        {
LABEL_22:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v22);
LABEL_30:
          v15 = *((_DWORD *)this + 32) >> 30;
LABEL_31:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
          v16 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
          switch(v16)
          {
            case 29:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v23, v25);
              break;
            case 30:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
              break;
            case 31:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v23, v25);
              break;
            default:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
              break;
          }
          if ((~*((_DWORD *)this + 32) & 0x1F0000) == 0)
            goto LABEL_52;
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
          v17 = HIWORD(*((_DWORD *)this + 32)) & 0x1F;
          if (v17 == 30)
          {
            v18 = "wlr";
            v19 = "lr";
          }
          else
          {
            if (v17 != 29)
            {
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
              goto LABEL_47;
            }
            v18 = "wfp";
            v19 = "fp";
          }
          if ((*((_DWORD *)this + 32) & 0x6000) == 0x6000)
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v19, v24, v26);
          else
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v24, v26);
LABEL_47:
          v20 = v15 & ((int)(*((_DWORD *)this + 32) << 19) >> 31);
          if ((*((_DWORD *)this + 32) & 0xE000) == 0x6000)
          {
            if (v20)
            {
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", "lsl ");
LABEL_51:
              JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", v20);
            }
          }
          else
          {
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s", JSC::ARM64Disassembler::A64DOpcode::s_optionName[(unsigned __int16)*((_DWORD *)this + 32) >> 13]);
            if (v20)
              goto LABEL_51;
          }
LABEL_52:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c");
          return this;
        }
LABEL_28:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v22);
        goto LABEL_30;
      }
      if (v6 == 29)
      {
        v13 = "wfp";
        v14 = "fp";
        goto LABEL_21;
      }
LABEL_29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_30;
    }
    switch(v6)
    {
      case 29:
        v13 = "wfp";
        v14 = "fp";
        break;
      case 30:
        v13 = "wlr";
        v14 = "lr";
        break;
      case 31:
        v13 = "wzr";
        v14 = "xzr";
        break;
      default:
        goto LABEL_29;
    }
    if (v7 == 24)
      goto LABEL_22;
    goto LABEL_28;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreAuthenticated *JSC::ARM64Disassembler::A64DOpcodeLoadStoreAuthenticated::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreAuthenticated *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeLoadStoreAuthenticated::s_opNames[(*((_DWORD *)this + 32) >> 27) & 0x18 | HIBYTE(*((_DWORD *)this + 32)) & 4 | (*((_DWORD *)this + 32) >> 22) & 3u]);
  if ((*((_DWORD *)this + 32) & 0x1F) == 0x1E)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
  }
  else if ((*((_DWORD *)this + 32) & 0x1F) == 0x1D)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v6);
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v3 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  switch(v3)
  {
    case 29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v7, v8);
      break;
    case 30:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
      break;
    case 31:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v7, v8);
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      break;
  }
  v4 = *((_DWORD *)this + 32);
  if ((v4 & 0x800) != 0 || (v4 >> 13) & 0x200 | (v4 >> 12) & 0x1FF)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%d", ((*((_DWORD *)this + 32) >> 13) & 0x200 | (*((_DWORD *)this + 32) >> 12) & 0x1FF) << (*((_DWORD *)this + 32) >> 30));
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 93);
  if ((*((_BYTE *)this + 129) & 8) != 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 33);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadAtomic *JSC::ARM64Disassembler::A64DOpcodeLoadAtomic::format(JSC::ARM64Disassembler::A64DOpcodeLoadAtomic *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (*((_DWORD *)this + 32) >> 8) & 0x70 | (*((_DWORD *)this + 32) >> 28) & 0xFFFFFFFC | (*((_DWORD *)this + 32) >> 22) & 3;
  if (v3 < 0x40)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeLoadAtomic::s_opNames[v3]);
    v4 = *((_DWORD *)this + 32);
    v5 = HIWORD(v4) & 0x1F;
    switch(v5)
    {
      case 29:
        v6 = "wfp";
        v7 = "fp";
        break;
      case 30:
        v6 = "wlr";
        v7 = "lr";
        break;
      case 31:
        v6 = "wsp";
        v7 = "sp";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_13;
    }
    if (v4 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v16);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v16);
LABEL_13:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v8 = *((_DWORD *)this + 32) & 0x1F;
    switch(v8)
    {
      case 29:
        v9 = "wfp";
        v10 = "fp";
        break;
      case 30:
        v9 = "wlr";
        v10 = "lr";
        break;
      case 31:
        v9 = "wsp";
        v10 = "sp";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_23;
    }
    if (*((int *)this + 32) >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v17, v19);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v17, v19);
LABEL_23:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
    v11 = *((_DWORD *)this + 32);
    v12 = (v11 >> 5) & 0x1F;
    switch(v12)
    {
      case 29:
        v13 = "wfp";
        v14 = "fp";
        break;
      case 30:
        v13 = "wlr";
        v14 = "lr";
        break;
      case 31:
        v13 = "wsp";
        v14 = "sp";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_33:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c");
        return this;
    }
    if (v11 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v18, v20);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v18, v20);
    goto LABEL_33;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeSwapAtomic *JSC::ARM64Disassembler::A64DOpcodeSwapAtomic::format(JSC::ARM64Disassembler::A64DOpcodeSwapAtomic *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  int v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeSwapAtomic::s_opNames[(*((_DWORD *)this + 32) >> 28) & 0xC | (*((_DWORD *)this + 32) >> 22) & 3u]);
  v3 = *((_DWORD *)this + 32);
  v4 = HIWORD(v3) & 0x1F;
  switch(v4)
  {
    case 29:
      v5 = "wfp";
      v6 = "fp";
      break;
    case 30:
      v5 = "wlr";
      v6 = "lr";
      break;
    case 31:
      v5 = "wsp";
      v6 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_11;
  }
  if (v3 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v5, v15);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v15);
LABEL_11:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v7 = *((_DWORD *)this + 32) & 0x1F;
  switch(v7)
  {
    case 29:
      v8 = "wfp";
      v9 = "fp";
      break;
    case 30:
      v8 = "wlr";
      v9 = "lr";
      break;
    case 31:
      v8 = "wsp";
      v9 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_21;
  }
  if (*((int *)this + 32) >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v16, v18);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v16, v18);
LABEL_21:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v10 = *((_DWORD *)this + 32);
  v11 = (v10 >> 5) & 0x1F;
  switch(v11)
  {
    case 29:
      v12 = "wfp";
      v13 = "fp";
      break;
    case 30:
      v12 = "wlr";
      v13 = "lr";
      break;
    case 31:
      v12 = "wsp";
      v13 = "sp";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_31;
  }
  if (v10 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v17, v19);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v17, v19);
LABEL_31:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 93);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeLoadStoreUnsignedImmediate *JSC::ARM64Disassembler::A64DOpcodeLoadStoreUnsignedImmediate::format(JSC::ARM64Disassembler::A64DOpcodeLoadStoreUnsignedImmediate *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (((0xCCC8C000uLL >> ((*((_DWORD *)this + 32) >> 27) & 0x18 | HIBYTE(*((_DWORD *)this + 32)) & 4 | (*((_DWORD *)this + 32) >> 22) & 3u)) & 1) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeLoadStore::s_opNames[(*((_DWORD *)this + 32) >> 27) & 0x18 | HIBYTE(*((_DWORD *)this + 32)) & 4 | (*((_DWORD *)this + 32) >> 22) & 3u]);
  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x4000000) == 0)
  {
    v4 = (v3 >> 22) & 3;
    v5 = *((_DWORD *)this + 32) & 0x1F;
    v6 = HIBYTE(*((_DWORD *)this + 32)) & 4 | (8 * (*((_DWORD *)this + 32) >> 30));
    if (v4)
    {
      v7 = v6 | v4;
      v8 = v7 & 0xFFFFFFF7;
      v9 = v7 & 0x1E;
      v11 = v8 == 2 || v9 == 24;
      if (v5 == 30)
      {
        v12 = "wlr";
        v13 = "lr";
LABEL_20:
        if (v11)
        {
LABEL_21:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v17);
LABEL_29:
          v14 = *((_DWORD *)this + 32) >> 30;
          goto LABEL_30;
        }
LABEL_27:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v17);
        goto LABEL_29;
      }
      if (v5 == 29)
      {
        v12 = "wfp";
        v13 = "fp";
        goto LABEL_20;
      }
LABEL_28:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_29;
    }
    switch(v5)
    {
      case 29:
        v12 = "wfp";
        v13 = "fp";
        break;
      case 30:
        v12 = "wlr";
        v13 = "lr";
        break;
      case 31:
        v12 = "wzr";
        v13 = "xzr";
        break;
      default:
        goto LABEL_28;
    }
    if (v6 == 24)
      goto LABEL_21;
    goto LABEL_27;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[(unint64_t)*((unsigned int *)this + 32) >> 30], *((_DWORD *)this + 32) & 0x1F);
  v14 = (*((_DWORD *)this + 32) >> 21) & 4 | (*((_DWORD *)this + 32) >> 30);
LABEL_30:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c", 91);
  v15 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
  switch(v15)
  {
    case 29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v18, v19);
      break;
    case 30:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
      break;
    case 31:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "sp", v18, v19);
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      break;
  }
  if ((*((_DWORD *)this + 32) & 0x3FFC00) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u", ((*((_DWORD *)this + 32) >> 10) & 0xFFF) << v14);
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeConditionalSelect *JSC::ARM64Disassembler::A64DOpcodeConditionalSelect::format(JSC::ARM64Disassembler::A64DOpcodeConditionalSelect *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  const char *v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x20000000) == 0 && (v3 & 0x800) == 0)
  {
    v4 = (v3 >> 5) & 0x1F;
    v5 = (v3 >> 29) & 2 | (v3 >> 10) & 1;
    if (v4 == (HIWORD(v3) & 0x1F) && (v5 - 1) <= 1)
    {
      if (v4 == 31)
      {
        if (v5 == 1)
          v6 = "cset";
        else
          v6 = "csetm";
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
        v7 = *((_DWORD *)this + 32);
        if ((v7 & 0x1F) != 0x1E)
        {
          if ((v7 & 0x1F) != 0x1D)
            goto LABEL_60;
          goto LABEL_55;
        }
        goto LABEL_56;
      }
      if (v5 == 1)
        v19 = "cinc";
      else
        v19 = "cinv";
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v19);
      v20 = *((_DWORD *)this + 32);
      if ((v20 & 0x1F) == 0x1E)
      {
        v21 = "wlr";
        v22 = "lr";
      }
      else
      {
        if ((v20 & 0x1F) != 0x1D)
        {
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
          goto LABEL_51;
        }
        v21 = "wfp";
        v22 = "fp";
      }
      if (v20 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v21, v28);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v22, v28);
LABEL_51:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
      v7 = *((_DWORD *)this + 32);
      v23 = (v7 >> 5) & 0x1F;
      if (v23 == 29)
      {
LABEL_55:
        v17 = "wfp";
        v18 = "fp";
        goto LABEL_57;
      }
      if (v23 != 30)
      {
        if (v23 != 31)
        {
LABEL_60:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
          goto LABEL_61;
        }
        v17 = "wzr";
        v18 = "xzr";
LABEL_57:
        if (v7 < 0)
        {
LABEL_58:
          JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v25, v29);
          goto LABEL_61;
        }
LABEL_38:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v17, v25, v29);
LABEL_61:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s");
        return this;
      }
LABEL_56:
      v17 = "wlr";
      v18 = "lr";
      goto LABEL_57;
    }
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeConditionalSelect::s_opNames[v5]);
    v8 = *((_DWORD *)this + 32);
    if ((v8 & 0x1F) == 0x1E)
    {
      v9 = "wlr";
      v10 = "lr";
    }
    else
    {
      if ((v8 & 0x1F) != 0x1D)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_21;
      }
      v9 = "wfp";
      v10 = "fp";
    }
    if (v8 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v26);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v26);
LABEL_21:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v11 = *((_DWORD *)this + 32);
    v12 = (v11 >> 5) & 0x1F;
    switch(v12)
    {
      case 29:
        v13 = "wfp";
        v14 = "fp";
        break;
      case 30:
        v13 = "wlr";
        v14 = "lr";
        break;
      case 31:
        v13 = "wzr";
        v14 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        goto LABEL_31;
    }
    if (v11 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v27, v30);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v27, v30);
LABEL_31:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v15 = *((_DWORD *)this + 32);
    v16 = HIWORD(v15) & 0x1F;
    switch(v16)
    {
      case 29:
        v17 = "wfp";
        v18 = "fp";
        break;
      case 30:
        v17 = "wlr";
        v18 = "lr";
        break;
      case 31:
        v17 = "wzr";
        v18 = "xzr";
        break;
      default:
        goto LABEL_60;
    }
    if (v15 < 0)
      goto LABEL_58;
    goto LABEL_38;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeDataProcessing1Source *JSC::ARM64Disassembler::A64DOpcodeDataProcessing1Source::format(JSC::ARM64Disassembler::A64DOpcodeDataProcessing1Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char **v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  int v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x20000000) != 0)
    goto LABEL_13;
  v4 = WORD1(v3) & 0x1F;
  if (v4)
  {
    if (v4 == 1 && (v3 & 0x80000000) != 0)
    {
      v5 = (unsigned __int16)v3 >> 10;
      v6 = JSC::ARM64Disassembler::A64DOpcodeDataProcessing1Source::s_pacAutOpNames;
LABEL_6:
      v7 = v6[v5];
      goto LABEL_7;
    }
LABEL_13:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  if ((v3 & 0xE000) != 0 || (*((_DWORD *)this + 32) & 0xF800) == 0x1800)
    goto LABEL_13;
  v12 = (unsigned __int16)v3 >> 10;
  if ((v3 & 0x80000000) != 0)
  {
    if (v12 == 3)
      goto LABEL_13;
LABEL_35:
    v5 = (v3 >> 10) & 7;
    v6 = JSC::ARM64Disassembler::A64DOpcodeDataProcessing1Source::s_opNames;
    goto LABEL_6;
  }
  if (v12 != 2)
    goto LABEL_35;
  v7 = "rev";
LABEL_7:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v7);
  v8 = *((_DWORD *)this + 32) & 0x1F;
  switch(v8)
  {
    case 29:
      v9 = "wfp";
      v10 = "fp";
LABEL_21:
      if (*((int *)this + 32) >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v17);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v17);
      goto LABEL_24;
    case 30:
      v9 = "wlr";
      v10 = "lr";
      goto LABEL_21;
    case 31:
      v9 = "wzr";
      v10 = "xzr";
      goto LABEL_21;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_24:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v13 = *((_DWORD *)this + 32);
  v14 = (v13 >> 5) & 0x1F;
  switch(v14)
  {
    case 29:
      v15 = "wfp";
      v16 = "fp";
      break;
    case 30:
      v15 = "wlr";
      v16 = "lr";
      break;
    case 31:
      v15 = "wzr";
      v16 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      return this;
  }
  if (v13 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v18, v19);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v16, v18, v19);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeDataProcessing2Source *JSC::ARM64Disassembler::A64DOpcodeDataProcessing2Source::format(JSC::ARM64Disassembler::A64DOpcodeDataProcessing2Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  int v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x20000000) != 0
    || (v3 & 0xF800) == 0
    || (v3 & 0xC000) != 0
    || (*((_DWORD *)this + 32) & 0xF000) == 0x1000
    || (v4 = (v3 >> 10) & 0xF, ((0xD0F3uLL >> v4) & 1) != 0))
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", *((const char **)&JSC::ARM64Disassembler::A64DOpcodeDataProcessing2Source::s_opNames + v4));
  v5 = *((_DWORD *)this + 32) & 0x1F;
  switch(v5)
  {
    case 29:
      v6 = "wfp";
      v7 = "fp";
      break;
    case 30:
      v6 = "wlr";
      v7 = "lr";
      break;
    case 31:
      v6 = "wzr";
      v7 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_18;
  }
  if (*((int *)this + 32) >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v6, v17);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v7, v17);
LABEL_18:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v9 = *((_DWORD *)this + 32);
  v10 = (v9 >> 5) & 0x1F;
  switch(v10)
  {
    case 29:
      v11 = "wfp";
      v12 = "fp";
      goto LABEL_24;
    case 30:
      v11 = "wlr";
      v12 = "lr";
LABEL_24:
      if (v9 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v11, v18, v20);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v12, v18, v20);
      goto LABEL_28;
    case 31:
      v11 = "wzr";
      v12 = "xzr";
      goto LABEL_24;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_28:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v13 = *((_DWORD *)this + 32);
  v14 = HIWORD(v13) & 0x1F;
  switch(v14)
  {
    case 29:
      v15 = "wfp";
      v16 = "fp";
      break;
    case 30:
      v15 = "wlr";
      v16 = "lr";
      break;
    case 31:
      v15 = "wzr";
      v16 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      return this;
  }
  if (v13 >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v19, v21);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v16, v19, v21);
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeDataProcessing3Source *JSC::ARM64Disassembler::A64DOpcodeDataProcessing3Source::format(JSC::ARM64Disassembler::A64DOpcodeDataProcessing3Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unsigned int v3;
  unsigned int v4;
  char **v5;
  const char *v6;
  int v8;
  const char *v9;
  const char *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x60000000) != 0
    || (v4 = (v3 >> 25) & 0x30 | (v3 >> 20) & 0xE | (v3 >> 15) & 1, v4 >= 0xD)
    || (v3 & 0x80000000) == 0 && v4 >= 2
    || ((*((_DWORD *)this + 32) & 0x7C00) != 0x7C00
      ? (v5 = JSC::ARM64Disassembler::A64DOpcodeDataProcessing3Source::s_opNames)
      : (v5 = JSC::ARM64Disassembler::A64DOpcodeDataProcessing3Source::s_pseudoOpNames),
        (v6 = v5[(v3 >> 20) & 0xE | (v3 >> 15) & 1]) == 0
     || (v3 & 0x400000) != 0 && (*((_DWORD *)this + 32) & 0x7C00) != 0x7C00))
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
    return this;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v6);
  v8 = *((_DWORD *)this + 32) & 0x1F;
  switch(v8)
  {
    case 29:
      v9 = "wfp";
      v10 = "fp";
      break;
    case 30:
      v9 = "wlr";
      v10 = "lr";
      break;
    case 31:
      v9 = "wzr";
      v10 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_23;
  }
  if (*((int *)this + 32) >= 0)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v23);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v10, v23);
LABEL_23:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v11 = *((_DWORD *)this + 32);
  v12 = v11 & 0x80200000;
  v13 = (v11 >> 5) & 0x1F;
  switch(v13)
  {
    case 29:
      v14 = "wfp";
      v15 = "fp";
      break;
    case 30:
      v14 = "wlr";
      v15 = "lr";
      break;
    case 31:
      v14 = "wzr";
      v15 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_33;
  }
  if (v12 == 0x80000000)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v24, v27);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v24, v27);
LABEL_33:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  v16 = *((_WORD *)this + 65) & 0x1F;
  switch(v16)
  {
    case 29:
      v17 = "wfp";
      v18 = "fp";
      break;
    case 30:
      v17 = "wlr";
      v18 = "lr";
      break;
    case 31:
      v17 = "wzr";
      v18 = "xzr";
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      goto LABEL_43;
  }
  if (v12 == 0x80000000)
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v18, v25, v28);
  else
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v17, v25, v28);
LABEL_43:
  if ((~*((_DWORD *)this + 32) & 0x7C00) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v19 = *((_DWORD *)this + 32);
    v20 = (v19 >> 10) & 0x1F;
    if (v20 == 30)
    {
      v21 = "wlr";
      v22 = "lr";
    }
    else
    {
      if (v20 != 29)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
        return this;
      }
      v21 = "wfp";
      v22 = "fp";
    }
    if (v19 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v21, v26, v29);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v22, v26, v29);
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingPointCompare *JSC::ARM64Disassembler::A64DOpcodeFloatingPointCompare::format(JSC::ARM64Disassembler::A64DOpcodeFloatingPointCompare *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  const char *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 32);
  if (v3 < 0 || (v3 & 0x20000000) != 0 || (v3 & 0x800000) != 0 || (v3 & 0xC000) != 0 || (v3 & 7) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  }
  else
  {
    if ((v3 & 0x10) != 0)
      v5 = "fcmpe";
    else
      v5 = "fcmp";
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", v5);
    v6 = *((_DWORD *)this + 32);
    v7 = (v6 >> 5) & 0x1F;
    if (((v6 >> 22) & 2) != 0)
      v8 = 2;
    else
      v8 = (v6 >> 22) & 3;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v8 + 2], v7);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    if ((*((_DWORD *)this + 32) & 8) != 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#0.0");
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingPointConditionalSelect *JSC::ARM64Disassembler::A64DOpcodeFloatingPointConditionalSelect::format(JSC::ARM64Disassembler::A64DOpcodeFloatingPointConditionalSelect *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 32);
  if (v3 < 0 || (v3 & 0x20000000) != 0 || (v3 & 0x800000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", "fcsel");
    v4 = *((_DWORD *)this + 32);
    if (((v4 >> 22) & 2) != 0)
      v5 = 2;
    else
      v5 = (v4 >> 22) & 3;
    v6 = JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v5 + 2];
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", v6, *((_DWORD *)this + 32) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", v6, (*((_DWORD *)this + 32) >> 5) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", v6, *((_WORD *)this + 65) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%s");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing2Source *JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing2Source::format(JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing2Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 32);
  if (v3 < 0
    || (v3 & 0x20000000) != 0
    || (v3 & 0x800000) != 0
    || (v4 = (unsigned __int16)v3 >> 12, v4 >= 9))
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  }
  else
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing2Source::s_opNames[v4]);
    v6 = *((_DWORD *)this + 32);
    if (((v6 >> 22) & 2) != 0)
      v7 = 2;
    else
      v7 = (v6 >> 22) & 3;
    v8 = JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v7 + 2];
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", v8, *((_DWORD *)this + 32) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", v8, (*((_DWORD *)this + 32) >> 5) & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
  }
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing1Source *JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing1Source::format(JSC::ARM64Disassembler::A64DOpcodeFloatingPointDataProcessing1Source *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  int v3;

  v3 = *((_DWORD *)this + 32);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x20000000) == 0 && ((*((_DWORD *)this + 32) >> 15) & 0x3Fu) < 0x11)
    __asm { BR              X12 }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x", *((_DWORD *)this + 32));
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingFixedPointConversions *JSC::ARM64Disassembler::A64DOpcodeFloatingFixedPointConversions::format(JSC::ARM64Disassembler::A64DOpcodeFloatingFixedPointConversions *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  int v4;
  int v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x20000000) != 0 || (v3 & 0x800000) != 0 || (v3 & 0x40000) != 0)
    goto LABEL_13;
  v4 = v3 & 0x60000;
  if ((v3 & 0x80000) != 0)
  {
    if (v4 == 0x20000)
      goto LABEL_13;
  }
  else if (!v4)
  {
    goto LABEL_13;
  }
  if ((v3 & 0x100000) == 0)
  {
    if (!v4)
      goto LABEL_13;
LABEL_12:
    if ((v3 & 0x80008000) == 0x8000)
      goto LABEL_13;
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeFloatingFixedPointConversions::s_opNames[(v3 >> 16) & 3]);
    v6 = *((_DWORD *)this + 32);
    v7 = v6 & 0x1F;
    if ((v6 & 0x180000) == 0)
    {
      if (((v6 >> 22) & 3) + 2 >= 4)
        v10 = 4;
      else
        v10 = ((v6 >> 22) & 3) + 2;
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v10], v7);
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
      v11 = *((_DWORD *)this + 32);
      v12 = (v11 >> 5) & 0x1F;
      if (v12 == 30)
      {
        v13 = "wlr";
        v14 = "lr";
      }
      else
      {
        if (v12 != 29)
          goto LABEL_31;
        v13 = "wfp";
        v14 = "fp";
      }
      if (v11 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v13, v16, v17);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v16, v17);
      goto LABEL_36;
    }
    if (v7 == 30)
    {
      v8 = "wlr";
      v9 = "lr";
    }
    else
    {
      if (v7 != 29)
      {
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_30:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
LABEL_31:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_36:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "#%u");
        return this;
      }
      v8 = "wfp";
      v9 = "fp";
    }
    if (v6 >= 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v8, v15);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v9, v15);
    goto LABEL_30;
  }
  if (v4 != 0x20000)
    goto LABEL_12;
LABEL_13:
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
  return this;
}

JSC::ARM64Disassembler::A64DOpcodeFloatingPointIntegerConversions *JSC::ARM64Disassembler::A64DOpcodeFloatingPointIntegerConversions::format(JSC::ARM64Disassembler::A64DOpcodeFloatingPointIntegerConversions *this, JSC::ARM64Disassembler::A64DOpcode *a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)this + 32);
  if ((v3 & 0x20000000) != 0)
    goto LABEL_23;
  v4 = (v3 >> 22) & 3;
  if (v4 == 3)
    goto LABEL_23;
  if ((v3 & 0x180000) != 0)
  {
    v5 = BYTE2(v3) & 6;
    v6 = v5 == 4 || v5 == 2;
    if (v6)
      goto LABEL_23;
  }
  if (v4 == 2)
  {
    if ((v3 & 0x40000) == 0 || (v3 & 0x60000) == 0x40000)
      goto LABEL_23;
    if ((v3 & 0x80000000) != 0)
    {
      if ((v3 & 0xE0000) == 0x60000)
      {
LABEL_23:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   .long  %08x");
        return this;
      }
      v7 = 0;
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    if ((~(_DWORD)v3 & 0xE0000) == 0 && !v4)
      goto LABEL_23;
    v7 = (v3 & 0x80000000) == 0;
  }
  if (((0xBCFC3C00uLL >> (BYTE2(v3) & 0x1F)) & 1) != 0)
    goto LABEL_23;
  if ((v3 & 0x1E0000) != 0xE0000)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeFloatingPointIntegerConversions::s_opNames[(v3 >> 16) & 0x1F]);
    v10 = *((_DWORD *)this + 32);
    if ((HIWORD(v10) & 0x1F) <= 7u && ((1 << (BYTE2(v10) & 0x1F)) & 0x8C) != 0)
    {
      if (((v10 >> 22) & 3) + 2 >= 4)
        v11 = 4;
      else
        v11 = ((v10 >> 22) & 3) + 2;
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u", JSC::ARM64Disassembler::A64DOpcode::s_FPRegisterPrefix[v11], *((_DWORD *)this + 32) & 0x1F);
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
      v12 = *((_DWORD *)this + 32);
      v13 = (v12 >> 5) & 0x1F;
      switch(v13)
      {
        case 29:
          v14 = "wfp";
          v15 = "fp";
          break;
        case 30:
          v14 = "wlr";
          v15 = "lr";
          break;
        case 31:
          v14 = "wzr";
          v15 = "xzr";
          break;
        default:
          goto LABEL_67;
      }
      if (v12 >= 0)
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v14, v23, v26);
      else
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v15, v23, v26);
      return this;
    }
    v18 = *((_DWORD *)this + 32) & 0x1F;
    switch(v18)
    {
      case 29:
        v19 = "wfp";
        v20 = "fp";
        break;
      case 30:
        v19 = "wlr";
        v20 = "lr";
        break;
      case 31:
        v19 = "wzr";
        v20 = "xzr";
        break;
      default:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
LABEL_66:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
        goto LABEL_67;
    }
    if ((v10 & 0x80000000) == 0)
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v19, v22);
    else
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, v20, v22);
    goto LABEL_66;
  }
  v6 = v4 == 2;
  v8 = !v7;
  if (!v6)
    v8 = 0;
  if (!v8)
    goto LABEL_23;
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "   %-9.9s", JSC::ARM64Disassembler::A64DOpcodeFloatingPointIntegerConversions::s_opNames[(v3 >> 16) & 0x1F]);
  v16 = *((_DWORD *)this + 32);
  v17 = v16 & 0x1F;
  if ((v16 & 0x10000) != 0)
  {
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "V%u.D[1]", v16 & 0x1F);
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
    v21 = (*((_DWORD *)this + 32) >> 5) & 0x1F;
    switch(v21)
    {
      case 29:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v25);
        return this;
      case 30:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr", v25);
        return this;
      case 31:
        JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "xzr", v25);
        return this;
    }
LABEL_67:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
    return this;
  }
  switch(v17)
  {
    case 29:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "fp", v24);
      break;
    case 30:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "lr");
      break;
    case 31:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "xzr", v24);
      break;
    default:
      JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "%c%u");
      break;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, ", ");
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf((uint64_t)this, "V%u.D[1]");
  return this;
}

uint64_t WTF::dataLog<char [42],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Dissassembler saw invalid simd lane type ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_QWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::variant<WTF::CString,char const*>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::variant<WTF::CString,char const*>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::variant<WTF::CString,char const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *result;
  _QWORD *v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = v7 + 16;
    do
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      v16 += 24;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v19 = v5;
    do
    {
      v20 = (uint64_t *)(v4 + 24 * v17);
      v21 = *v20;
      if (*v20 != -1)
      {
        if (v21)
        {
          v26 = *a1;
          v48 = v18;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v18 = (_QWORD *)(v26 + 24 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (*v18);
          v34 = v33;
          v35 = v26 + 24 * v33;
          v38 = *(_DWORD *)(v35 + 16);
          v37 = (_DWORD *)(v35 + 16);
          v36 = v38;
          if (v38 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E358FE60[v36])(&v50, v26 + 24 * v33 + 8);
            v21 = *v20;
          }
          v39 = v26 + 24 * v34;
          *(_BYTE *)(v39 + 8) = 0;
          v8 = (void *)(v39 + 8);
          *v18 = v21;
          *v37 = -1;
          v40 = v4 + 24 * v17;
          v43 = *(_DWORD *)(v40 + 16);
          v41 = (_DWORD *)(v40 + 16);
          v42 = v43;
          if (v43 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E358FE70[v42])(&v51, v8, v4 + 24 * v17 + 8);
            *v37 = v42;
            v44 = *v41;
            if ((_DWORD)v44 != -1)
              ((void (*)(char *, uint64_t))off_1E358FE60[v44])(&v52, v4 + 24 * v17 + 8);
          }
          *v41 = -1;
          if (v20 != a3)
            v18 = v48;
        }
        else
        {
          v22 = v4 + 24 * v17;
          v25 = *(_DWORD *)(v22 + 16);
          v24 = (_DWORD *)(v22 + 16);
          v23 = v25;
          if (v25 != -1)
            ((void (*)(char *, uint64_t))off_1E358FE60[v23])(&v49, v4 + 24 * v17 + 8);
          *v24 = -1;
        }
      }
      ++v17;
    }
    while (v17 != v19);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
  return v18;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringEPKcEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7CStringEPKcEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7CStringEPKcEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<JSC::ARM64Disassembler::A64DOpcodeMoveWide::handlePotentialDataPointer(void *)::$_0,WTF::IterationStatus,JSC::VM &>::call(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  int v24;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = **(_QWORD **)(a1 + 8);
  if (v10 != a2)
  {
    v12 = a2 + 93188;
    if (!*(_BYTE *)(a2 + 93188))
      return 0;
    v13 = v10 - a2;
    if (v10 < a2 || a2 + 93536 <= v10)
    {
      v15 = (unsigned __int8 *)(a2 + 93189);
      if (__ldaxr((unsigned __int8 *)(a2 + 93189)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v15))
      {
        goto LABEL_17;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_17:
      v18 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v18)
      {
        v19 = *(uint64_t **)(v12 + 4);
        v20 = 8 * v18 - 8;
        do
        {
          v21 = *v19++;
          v22 = v21 + 8 == v10;
          v23 = v21 + 8 == v10 || v20 == 0;
          v20 -= 8;
        }
        while (!v23);
      }
      else
      {
        v22 = 0;
      }
      v24 = __ldxr(v15);
      if (v24 == 1)
      {
        if (!__stlxr(0, v15))
        {
          if (v22)
          {
LABEL_30:
            JSC::ARM64Disassembler::A64DOpcode::bufferPrintf(v9, " vm scratchBuffer.m_buffer");
            goto LABEL_46;
          }
          return 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, a3, a4, a5, a6, a7, a8);
      if (v22)
        goto LABEL_30;
      return 0;
    }
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf(v9, " vm +%u", v10 - a2);
    v17 = **(_QWORD **)(a1 + 8);
    if (v17 != a2 + 40)
    {
      if (v13 > 759)
      {
        if (v13 == 760 || v13 == 90480)
          goto LABEL_45;
      }
      else if (v13 == 16 || v13 == 48)
      {
        goto LABEL_45;
      }
      if (v17 != a2 + 8
        && v17 != a2 + 90536
        && v17 != a2 + 90544
        && v17 != a2 + 42216
        && v17 != a2 + 90488
        && v17 != a2 + 80)
      {
        goto LABEL_46;
      }
    }
LABEL_45:
    JSC::ARM64Disassembler::A64DOpcode::bufferPrintf(v9, ": %s");
    goto LABEL_46;
  }
  JSC::ARM64Disassembler::A64DOpcode::bufferPrintf(v9, " vm");
LABEL_46:
  result = 1;
  **(_BYTE **)(a1 + 24) = 1;
  return result;
}

uint64_t WTF::dataLog<char [62],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Dissassembler saw unknown simd one source instruction opcode ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [60],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Dissassembler saw unknown simd 2 source instruction opcode ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DOMJIT::AbstractHeap::compute(uint64_t this, unsigned int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  JSC::DOMJIT::AbstractHeap **v5;
  uint64_t v6;
  JSC::DOMJIT::AbstractHeap *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  v3 = this;
  v4 = *(unsigned int *)(this + 28);
  if ((_DWORD)v4)
  {
    v5 = *(JSC::DOMJIT::AbstractHeap ***)(this + 16);
    v6 = 8 * v4;
    do
    {
      this = JSC::DOMJIT::AbstractHeap::compute(*v5, a2);
      v7 = *v5++;
      v8 = *((_DWORD *)v7 + 8);
      a2 = HIWORD(v8);
      v6 -= 8;
    }
    while (v6);
    v9 = v8 & 0xFFFF0000;
  }
  else
  {
    v9 = (a2 << 16) + 0x10000;
  }
  *(_DWORD *)(v3 + 32) = v9 | v2;
  return this;
}

uint64_t JSC::DOMJIT::AbstractHeap::dump(JSC::DOMJIT::AbstractHeap **this, WTF::PrintStream *a2)
{
  WTF *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t result;
  JSC::DOMJIT::AbstractHeap *v14;
  WTF::PrintStream *v15;

  v4 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v4, (WTF::PrintStream *)this, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "<");
  WTF::PrintStream::printf(v4, "0x%x-0x%x", *((unsigned __int16 *)this + 16), *((unsigned __int16 *)this + 17));
  WTF::PrintStream::printf(v4, "%s", ">");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v14 = this[1];
  if (v14)
  {
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v15, "%s", "->");
    JSC::DOMJIT::AbstractHeap::dump(v14, v15);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::DOMJIT::AbstractHeap::shallowDump(JSC::DOMJIT::AbstractHeap *this, WTF::PrintStream *a2)
{
  WTF *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;

  v4 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v4, this, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "<");
  WTF::PrintStream::printf(v4, "0x%x-0x%x", *((unsigned __int16 *)this + 16), *((unsigned __int16 *)this + 17));
  WTF::PrintStream::printf(v4, "%s", ">");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DOMJIT::AbstractHeap::deepDump(JSC::DOMJIT::AbstractHeap ***this, WTF::PrintStream *a2, int a3)
{
  int v6;
  WTF::PrintStream *v7;
  WTF *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  WTF::PrintStream *v17;
  uint64_t result;
  uint64_t v19;
  JSC::DOMJIT::AbstractHeap **v20;
  unsigned int v21;
  uint64_t v22;
  JSC::DOMJIT::AbstractHeap *v23;
  WTF::PrintStream *v24;

  if (a3)
  {
    v6 = a3;
    do
    {
      --v6;
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "    ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    while (v6);
  }
  v8 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v8, (WTF::PrintStream *)this, v9, v10, v11, v12, v13, v14, v15, v16);
  WTF::PrintStream::printf(v8, "%s", "<");
  WTF::PrintStream::printf(v8, "0x%x-0x%x", *((unsigned __int16 *)this + 16), *((unsigned __int16 *)this + 17));
  WTF::PrintStream::printf(v8, "%s", ">");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 7))
  {
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v17, "%s", ":\n");
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v19 = *((unsigned int *)this + 7);
    if ((_DWORD)v19)
    {
      v20 = this[2];
      v21 = a3 + 1;
      v22 = 8 * v19;
      do
      {
        v23 = *v20++;
        result = JSC::DOMJIT::AbstractHeap::deepDump(v23, a2, v21);
        v22 -= 8;
      }
      while (v22);
    }
  }
  else
  {
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v24, "%s", "\n");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::DOMJIT::HeapRange::dump(JSC::DOMJIT::HeapRange *this, WTF::PrintStream *a2)
{
  return WTF::PrintStream::printf(a2, "0x%x-0x%x", *(unsigned __int16 *)this, *((unsigned __int16 *)this + 1));
}

_QWORD *JSC::FTL::AbstractHeap::changeParent(_QWORD *this, JSC::FTL::AbstractHeap *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = this;
  v4 = *this;
  if (*this)
  {
    v6 = *(unsigned int *)(v4 + 20);
    if (!(_DWORD)v6)
      goto LABEL_14;
    v7 = *(_QWORD **)(v4 + 8);
    if ((_QWORD *)*v7 == v3)
    {
      this = memmove(v7, v7 + 1, 8 * v6 - 8);
      --*(_DWORD *)(v4 + 20);
      goto LABEL_2;
    }
    v8 = 0;
    v9 = 8 * v6 - 8;
    do
    {
      if (!v9)
        goto LABEL_14;
      v10 = (_QWORD *)v7[v8 + 1];
      v9 -= 8;
      ++v8;
    }
    while (v10 != v3);
    this = memmove(&v7[v8], &v7[v8 + 1], v9);
    --*(_DWORD *)(v4 + 20);
    if (v8 >= v6)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x198576E28);
    }
  }
LABEL_2:
  *v3 = a2;
  if (a2)
  {
    this = (_QWORD *)((char *)a2 + 8);
    v11 = v3;
    v5 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v5 == *((_DWORD *)a2 + 4))
    {
      this = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v5 + 1, (unint64_t)&v11);
      v5 = *((unsigned int *)a2 + 5);
      *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5) = *this;
    }
    else
    {
      *(_QWORD *)(*this + 8 * v5) = v3;
    }
    *((_DWORD *)a2 + 5) = v5 + 1;
  }
  return this;
}

uint64_t JSC::FTL::AbstractHeap::compute(uint64_t this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  JSC::FTL::AbstractHeap **v5;
  uint64_t v6;
  JSC::FTL::AbstractHeap *v7;

  v2 = a2;
  v3 = this;
  v4 = *(unsigned int *)(this + 20);
  if ((_DWORD)v4)
  {
    v5 = *(JSC::FTL::AbstractHeap ***)(this + 8);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      this = JSC::FTL::AbstractHeap::compute(*v5, a2);
      if (*((_DWORD *)v7 + 8) == *((_DWORD *)v7 + 9))
        JSC::FTL::AbstractHeap::badRangeError(v7);
      a2 = HIDWORD(*((_QWORD *)v7 + 4));
      ++v5;
      v6 -= 8;
    }
    while (v6);
    if ((_DWORD)a2 == v2)
    {
      a2 = 0;
      v2 = 0;
    }
  }
  else
  {
    a2 = (a2 + 1);
  }
  *(_QWORD *)(v3 + 32) = v2 | (unint64_t)(a2 << 32);
  return this;
}

uint64_t JSC::FTL::AbstractHeap::shallowDump(JSC::FTL::AbstractHeap *this, WTF::PrintStream *a2)
{
  const char *v4;
  WTF::PrintStream *v5;
  uint64_t result;
  int v7;
  int v8;
  _DWORD *v9;
  WTF::PrintStream *v10;

  v4 = (const char *)*((_QWORD *)this + 5);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", v4);
  WTF::PrintStream::printf(v5, "%s", "(");
  WTF::PrintStream::printf(v5, "%ld", *((_QWORD *)this + 3));
  WTF::PrintStream::printf(v5, "%s", ")");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *((_DWORD *)this + 8);
  v8 = *((_DWORD *)this + 9);
  v9 = (_DWORD *)((char *)this + 32);
  if (v7 != v8)
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v10, "%s", "<");
    WTF::Range<unsigned int>::dump(v9, (uint64_t)v10);
    WTF::PrintStream::printf(v10, "%s", ">");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::FTL::AbstractHeap::deepDump(JSC::FTL::AbstractHeap ***this, WTF::PrintStream *a2, int a3)
{
  int v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  uint64_t result;
  uint64_t v10;
  JSC::FTL::AbstractHeap **v11;
  unsigned int v12;
  uint64_t v13;
  JSC::FTL::AbstractHeap *v14;
  WTF::PrintStream *v15;

  if (a3)
  {
    v6 = a3;
    do
    {
      --v6;
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "    ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    while (v6);
  }
  JSC::FTL::AbstractHeap::shallowDump((JSC::FTL::AbstractHeap *)this, a2);
  if (*((_DWORD *)this + 5))
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", ":\n");
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v10 = *((unsigned int *)this + 5);
    if ((_DWORD)v10)
    {
      v11 = this[1];
      v12 = a3 + 1;
      v13 = 8 * v10;
      do
      {
        v14 = *v11++;
        result = JSC::FTL::AbstractHeap::deepDump(v14, a2, v12);
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v15, "%s", "\n");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::FTL::AbstractHeap::badRangeError(JSC::FTL::AbstractHeap *this)
{
  WTF::dataLog<char [27],JSC::FTL::AbstractHeap,char [2]>(this);
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [27],JSC::FTL::AbstractHeap,char [2]>(JSC::FTL::AbstractHeap *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::FTL::AbstractHeap *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Heap does not have range: ");
  JSC::FTL::AbstractHeap::shallowDump(a1, v4);
  v5 = *(JSC::FTL::AbstractHeap **)a1;
  if (v5)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", "->");
    WTF::PrintStream::printImpl<JSC::FTL::AbstractHeap>(v6, v5);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap(JSC::FTL::IndexedAbstractHeap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::FTL::IndexedAbstractHeap *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t StatusReg;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;

  v9 = *((unsigned int *)this + 215);
  if ((_DWORD)v9)
  {
    v38 = (_DWORD **)*((_QWORD *)this + 106);
    v39 = 8 * v9;
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
      {
        if (*v40 == 1)
          WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v40;
      }
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v10 = (JSC::FTL::IndexedAbstractHeap *)*((_QWORD *)this + 106);
  if ((JSC::FTL::IndexedAbstractHeap *)((char *)this + 864) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 106) = 0;
    *((_DWORD *)this + 214) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (uint64_t *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v14)
      {
        v15 = (unint64_t *)(v13 + 8);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          if (*(v15 - 1) == 1)
            goto LABEL_20;
          v17 = *v15;
          *v15 = 0;
          if (!v17)
            goto LABEL_20;
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            *(_QWORD *)(v17 + 8) = 0;
            *(_DWORD *)(v17 + 16) = 0;
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          }
          v19 = *(_QWORD *)(StatusReg + 752);
          if (v19)
          {
            if (!(v17 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v17)) & 1) != 0)
            {
LABEL_18:
              v20 = *(unsigned int *)(v19 + 8000);
              if (v20 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v19, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v19 + 8 * v20) = v17 | 0x5000000000000;
                *(_DWORD *)(v19 + 8000) = v20 + 1;
              }
              goto LABEL_20;
            }
            if (v17 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v17 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_18;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v19, v17, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_20:
          v15 += 2;
          --v14;
        }
        while (v14);
      }
      WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *((_QWORD *)this + 100);
  if (v21)
  {
    *((_QWORD *)this + 100) = 0;
    *((_DWORD *)this + 202) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((_QWORD *)this + 94);
  if (v22)
  {
    *((_QWORD *)this + 94) = 0;
    *((_DWORD *)this + 190) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *((_QWORD *)this + 88);
  if (v23)
  {
    *((_QWORD *)this + 88) = 0;
    *((_DWORD *)this + 178) = 0;
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = *((_QWORD *)this + 82);
  if (v24)
  {
    *((_QWORD *)this + 82) = 0;
    *((_DWORD *)this + 166) = 0;
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *((_QWORD *)this + 76);
  if (v25)
  {
    *((_QWORD *)this + 76) = 0;
    *((_DWORD *)this + 154) = 0;
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *((_QWORD *)this + 70);
  if (v26)
  {
    *((_QWORD *)this + 70) = 0;
    *((_DWORD *)this + 142) = 0;
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((_QWORD *)this + 64);
  if (v27)
  {
    *((_QWORD *)this + 64) = 0;
    *((_DWORD *)this + 130) = 0;
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = *((_QWORD *)this + 58);
  if (v28)
  {
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 52);
  if (v29)
  {
    *((_QWORD *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)this + 46);
  if (v30)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = *((_QWORD *)this + 40);
  if (v31)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 34);
  if (v32)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((_QWORD *)this + 28);
  if (v33)
  {
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *((_QWORD *)this + 22);
  if (v34)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  v35 = *((_QWORD *)this + 16);
  if (v35)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *((_QWORD *)this + 10);
  if (v36)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 1);
  if (v37)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t **std::unique_ptr<WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v11)
      {
        v12 = (unint64_t *)(v10 + 8);
        do
        {
          if (*(v12 - 1) != 1)
          {
            v13 = *v12;
            *v12 = 0;
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                *(_QWORD *)(v13 + 8) = 0;
                *(_DWORD *)(v13 + 16) = 0;
                WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
              }
              WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          v12 += 2;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::FTL::IndexedAbstractHeap *JSC::FTL::IndexedAbstractHeap::baseIndex(JSC::FTL::IndexedAbstractHeap *a1, JSC::FTL::Output *a2, JSC::B3::Value *a3, JSC::B3::Value *a4, unint64_t a5, uint64_t a6, JSC::B3::Value *a7, uint64_t a8)
{
  JSC::FTL::IndexedAbstractHeap *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  char *v18;
  JSC::FTL::AbstractHeap *v19;

  v11 = a1;
  if (a5 >= 0xFFFE000000000000)
  {
    if (a5 >> 4)
    {
      v19 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(a1, (int)a5, (int)a5, (uint64_t)a4, a5, a6, (uint64_t)a7, a8);
    }
    else
    {
      v18 = (char *)a1 + 48 * (int)a5;
      v19 = (JSC::FTL::AbstractHeap *)(v18 + 72);
      if (!*((_QWORD *)v18 + 14))
        JSC::FTL::IndexedAbstractHeap::initialize(a1, v19, (int)a5);
    }
    v15 = *((_QWORD *)v19 + 3);
    v11 = v19;
  }
  else
  {
    v12 = a4;
    if (a7)
      v12 = JSC::FTL::Output::bitAnd(a2, a7, a4);
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(a2, *((_QWORD *)v11 + 8));
    v14 = JSC::FTL::Output::mul(a2, v12, v13);
    a3 = (JSC::B3::Value *)JSC::FTL::Output::add(a2, a3, v14);
    v15 = *((_QWORD *)v11 + 7);
  }
  if (v15 + a6)
  {
    v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(a2, v15 + a6);
    JSC::FTL::Output::add(a2, a3, v16);
  }
  return v11;
}

uint64_t JSC::FTL::IndexedAbstractHeap::atSlow(JSC::FTL::IndexedAbstractHeap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  JSC::FTL::AbstractHeap *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  JSC::FTL::AbstractHeap *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38[3];
  uint64_t v39;

  v39 = a2;
  v9 = (uint64_t *)*((_QWORD *)this + 105);
  if (!v9)
  {
    v23 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v23 = 0;
    v38[0] = v23;
    std::unique_ptr<WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>>::operator=[abi:sn180100]((uint64_t **)this + 105, v38, v24, v25, v26, v27, v28, v29);
    std::unique_ptr<WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](v38, v30, v31, v32, v33, v34, v35, v36);
    v9 = (uint64_t *)*((_QWORD *)this + 105);
  }
  v37 = 0;
  WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v9, &v39, (uint64_t)&v37, a4, a5, a6, a7, a8, (uint64_t)v38);
  v10 = v38[0];
  result = v38[0][1];
  if (!result)
  {
    v12 = (JSC::FTL::AbstractHeap *)WTF::fastMalloc((WTF *)0x30);
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    v20 = v10[1];
    v10[1] = (uint64_t)v12;
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        *(_QWORD *)(v20 + 8) = 0;
        *(_DWORD *)(v20 + 16) = 0;
        WTF::fastFree(v21, v13, v14, v15, v16, v17, v18, v19);
      }
      WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
      v22 = (JSC::FTL::AbstractHeap *)v10[1];
    }
    else
    {
      v22 = v12;
    }
    JSC::FTL::IndexedAbstractHeap::initialize(this, v22, v39);
    return v10[1];
  }
  return result;
}

uint64_t **std::unique_ptr<WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
        {
          if (*(v13 - 1) != 1)
          {
            v14 = *v13;
            *v13 = 0;
            if (v14)
            {
              v15 = *(_QWORD *)(v14 + 8);
              if (v15)
              {
                *(_QWORD *)(v14 + 8) = 0;
                *(_DWORD *)(v14 + 16) = 0;
                WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
              }
              WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<long,WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>>,WTF::IntHash<long>,WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = *a2 + ~(*a2 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v34 = 0;
        else
          v34 = *(unsigned int *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 16 * v34;
        goto LABEL_25;
      }
      if (v21 == 1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  v24 = v20[1];
  *v20 = v15;
  v20[1] = 0;
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      *(_QWORD *)(v24 + 8) = 0;
      *(_DWORD *)(v24 + 16) = 0;
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_21;
    goto LABEL_36;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v35 = 8;
      goto LABEL_33;
    }
LABEL_36:
    v35 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
LABEL_33:
    v20 = WTF::HashTable<long,WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>>,WTF::IntHash<long>,WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits>::rehash(a1, v35, (uint64_t)v20, a4, a5, a6, a7, a8);
    v28 = *a1;
    if (*a1)
      v31 = *(unsigned int *)(v28 - 4);
    else
      v31 = 0;
  }
LABEL_21:
  v32 = v28 + 16 * v31;
  v33 = 1;
LABEL_25:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v32;
  *(_BYTE *)(a9 + 16) = v33;
}

_QWORD *JSC::FTL::IndexedAbstractHeap::initialize(JSC::FTL::IndexedAbstractHeap *this, JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;

  if (a3 >= 0)
    v6 = a3;
  else
    v6 = -a3;
  if (v6 > 0xF)
  {
    if (v6 >= 0x100)
    {
      if (v6 >= 0x1000)
      {
        if (v6 >= 0x10000)
        {
          if (v6 >= 0x100000)
          {
            if (v6 >> 24)
            {
              if (v6 >> 28)
              {
                if (HIDWORD(v6))
                {
                  if (v6 >> 36)
                  {
                    if (v6 >> 40)
                    {
                      if (v6 >> 44)
                      {
                        if (HIWORD(v6))
                        {
                          if (v6 >> 52)
                          {
                            if (HIBYTE(v6))
                            {
                              if (v6 >> 60)
                                v7 = 16;
                              else
                                v7 = 15;
                            }
                            else
                            {
                              v7 = 14;
                            }
                          }
                          else
                          {
                            v7 = 13;
                          }
                        }
                        else
                        {
                          v7 = 12;
                        }
                      }
                      else
                      {
                        v7 = 11;
                      }
                    }
                    else
                    {
                      v7 = 10;
                    }
                  }
                  else
                  {
                    v7 = 9;
                  }
                }
                else
                {
                  v7 = 8;
                }
              }
              else
              {
                v7 = 7;
              }
            }
            else
            {
              v7 = 6;
            }
          }
          else
          {
            v7 = 5;
          }
        }
        else
        {
          v7 = 4;
        }
      }
      else
      {
        v7 = 3;
      }
    }
    else
    {
      v7 = 2;
    }
  }
  else
  {
    v7 = 1;
  }
  v8 = *((_QWORD *)this + 6);
  if (a3 >= 0)
    v9 = 1;
  else
    v9 = 5;
  v10 = v7 + v9 + v8;
  if (v10 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x198577DD0);
  }
  if (v10 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x198577DD8);
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)(v10 + 17));
  v17 = v11;
  *(_DWORD *)v11 = 1;
  v11[1] = v10;
  v37 = (WTF *)v11;
  v18 = (char *)(v11 + 2);
  *((_BYTE *)v11 + v10 + 16) = 0;
  v19 = *((unsigned int *)this + 215);
  if ((_DWORD)v19 == *((_DWORD *)this + 214))
  {
    v25 = (uint64_t *)WTF::Vector<WTF::CString,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 848, v19 + 1, (unint64_t)&v37, v12, v13, v14, v15, v16);
    v33 = *((unsigned int *)this + 215);
    v34 = *((_QWORD *)this + 106);
    v35 = *v25;
    *v25 = 0;
    *(_QWORD *)(v34 + 8 * v33) = v35;
    v36 = v37;
    *((_DWORD *)this + 215) = v33 + 1;
    v37 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree((unint64_t)v36, v26, v27, v28, v29, v30, v31, v32);
      else
        --*(_DWORD *)v36;
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 106) + 8 * v19) = v11;
    *((_DWORD *)this + 215) = v19 + 1;
  }
  memcpy(v18, *((const void **)this + 5), *((_QWORD *)this + 6));
  v20 = &v18[*((_QWORD *)this + 6)];
  if (a3 < 0)
  {
    v20[4] = 95;
    *(_DWORD *)v20 = 1734700639;
  }
  else
  {
    *v20 = 95;
  }
  v21 = v7 + 15;
  do
  {
    if ((v6 & 0xF) >= 0xA)
      v22 = 55;
    else
      v22 = 48;
    *((_BYTE *)v17 + v9 + v8 + v21) = v22 + (v6 & 0xF);
    v6 >>= 4;
    --v21;
  }
  while (v21 != 15);
  v23 = *((_QWORD *)this + 7) + *((_QWORD *)this + 8) * a3;
  result = JSC::FTL::AbstractHeap::changeParent(a2, this);
  *((_QWORD *)a2 + 5) = v18;
  *((_QWORD *)a2 + 3) = v23;
  return result;
}

JSC::FTL::AbstractHeapRepository *JSC::FTL::AbstractHeapRepository::AbstractHeapRepository(JSC::FTL::AbstractHeapRepository *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  JSC::FTL::AbstractHeap *v329;
  JSC::FTL::AbstractHeap *v330;
  JSC::FTL::AbstractHeap *v331;
  JSC::FTL::AbstractHeap *v332;
  _QWORD v333[2];

  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 11) = "typedArrayProperties";
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 5) = "jscRoot";
  *((_QWORD *)this + 6) = this;
  v333[0] = (char *)this + 48;
  v3 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, 1uLL, (unint64_t)v333);
  v5 = (_DWORD *)((char *)this + 20);
  v4 = *((unsigned int *)this + 5);
  v7 = (int *)((char *)this + 16);
  v6 = *((_DWORD *)this + 4);
  *(_QWORD *)(*v2 + 8 * v4) = *v3;
  v8 = (v4 + 1);
  *((_DWORD *)this + 5) = v8;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = "JSCellHeaderAndNamedProperties";
  *((_QWORD *)this + 12) = this;
  v333[0] = (char *)this + 96;
  if ((_DWORD)v8 == v6)
  {
    v172 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v8 + 1, (unint64_t)v333);
    v8 = *v5;
    *(_QWORD *)(*v2 + 8 * v8) = *v172;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v8) = (char *)this + 96;
  }
  v9 = (v8 + 1);
  *((_DWORD *)this + 5) = v9;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 16;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = "ArrayBuffer_data";
  *((_QWORD *)this + 18) = this;
  *((_QWORD *)this + 19) = 0;
  v333[0] = (char *)this + 144;
  if ((_DWORD)v9 == v6)
  {
    v173 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v9 + 1, (unint64_t)v333);
    v9 = *v5;
    *(_QWORD *)(*v2 + 8 * v9) = *v173;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v9) = (char *)this + 144;
  }
  v10 = (v9 + 1);
  *((_DWORD *)this + 5) = v10;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 12;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = "ArrayStorage_numValuesInVector";
  *((_QWORD *)this + 24) = this;
  *((_QWORD *)this + 25) = 0;
  v333[0] = (char *)this + 192;
  if ((_DWORD)v10 == v6)
  {
    v174 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v10 + 1, (unint64_t)v333);
    v10 = *v5;
    *(_QWORD *)(*v2 + 8 * v10) = *v174;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v10) = (char *)this + 192;
  }
  v11 = (v10 + 1);
  *((_DWORD *)this + 5) = v11;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = -8;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = "Butterfly_arrayBuffer";
  *((_QWORD *)this + 30) = this;
  *((_QWORD *)this + 31) = 0;
  v333[0] = (char *)this + 240;
  if ((_DWORD)v11 == v6)
  {
    v175 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v11 + 1, (unint64_t)v333);
    v11 = *v5;
    *(_QWORD *)(*v2 + 8 * v11) = *v175;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v11) = (char *)this + 240;
  }
  v12 = (v11 + 1);
  *((_DWORD *)this + 5) = v12;
  v13 = (char *)this + 288;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = -8;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = "Butterfly_publicLength";
  *((_QWORD *)this + 36) = this;
  *((_QWORD *)this + 37) = 0;
  v333[0] = (char *)this + 288;
  v330 = (JSC::FTL::AbstractHeapRepository *)((char *)this + 96);
  if ((_DWORD)v12 == v6)
  {
    v176 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v12 + 1, (unint64_t)v333);
    v12 = *v5;
    *(_QWORD *)(*v2 + 8 * v12) = *v176;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v12) = v13;
  }
  v14 = (v12 + 1);
  *((_DWORD *)this + 5) = v14;
  v15 = (char *)this + 336;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = -4;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = "Butterfly_vectorLength";
  *((_QWORD *)this + 42) = this;
  *((_QWORD *)this + 43) = 0;
  v333[0] = (char *)this + 336;
  if ((_DWORD)v14 == v6)
  {
    v177 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v14 + 1, (unint64_t)v333);
    v14 = *v5;
    *(_QWORD *)(*v2 + 8 * v14) = *v177;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v14) = v15;
  }
  v16 = (v14 + 1);
  *((_DWORD *)this + 5) = v16;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 53) = "CallFrame_callerFrame";
  *((_QWORD *)this + 48) = this;
  v333[0] = (char *)this + 384;
  if ((_DWORD)v16 == v6)
  {
    v178 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v16 + 1, (unint64_t)v333);
    v16 = *v5;
    *(_QWORD *)(*v2 + 8 * v16) = *v178;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v16) = (char *)this + 384;
  }
  v17 = (v16 + 1);
  *((_DWORD *)this + 5) = v17;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 16;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = "ClassInfo_parentClass";
  *((_QWORD *)this + 54) = this;
  *((_QWORD *)this + 55) = 0;
  v333[0] = (char *)this + 432;
  if ((_DWORD)v17 == v6)
  {
    v179 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v17 + 1, (unint64_t)v333);
    v17 = *v5;
    *(_QWORD *)(*v2 + 8 * v17) = *v179;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v17) = (char *)this + 432;
  }
  v18 = (v17 + 1);
  *((_DWORD *)this + 5) = v18;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 16;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = "ClonedArguments_callee";
  *((_QWORD *)this + 60) = this;
  *((_QWORD *)this + 61) = 0;
  v333[0] = (char *)this + 480;
  if ((_DWORD)v18 == v6)
  {
    v180 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v18 + 1, (unint64_t)v333);
    v18 = *v5;
    *(_QWORD *)(*v2 + 8 * v18) = *v180;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v18) = (char *)this + 480;
  }
  v19 = (v18 + 1);
  *((_DWORD *)this + 5) = v19;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 69) = 16;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 71) = "DateInstance_internalNumber";
  *((_QWORD *)this + 66) = this;
  v333[0] = (char *)this + 528;
  if ((_DWORD)v19 == v6)
  {
    v181 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v19 + 1, (unint64_t)v333);
    v19 = *v5;
    *(_QWORD *)(*v2 + 8 * v19) = *v181;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v19) = (char *)this + 528;
  }
  v20 = (v19 + 1);
  *((_DWORD *)this + 5) = v20;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 75) = 24;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 77) = "DateInstance_data";
  *((_QWORD *)this + 72) = this;
  v333[0] = (char *)this + 576;
  if ((_DWORD)v20 == v6)
  {
    v182 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v20 + 1, (unint64_t)v333);
    v20 = *v5;
    *(_QWORD *)(*v2 + 8 * v20) = *v182;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v20) = (char *)this + 576;
  }
  v21 = (v20 + 1);
  *((_DWORD *)this + 5) = v21;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 81) = 8;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 83) = "DateInstanceData_gregorianDateTimeCachedForMS";
  *((_QWORD *)this + 78) = this;
  v333[0] = (char *)this + 624;
  if ((_DWORD)v21 == v6)
  {
    v183 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v21 + 1, (unint64_t)v333);
    v21 = *v5;
    *(_QWORD *)(*v2 + 8 * v21) = *v183;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v21) = (char *)this + 624;
  }
  v22 = (v21 + 1);
  *((_DWORD *)this + 5) = v22;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 87) = 56;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 89) = "DateInstanceData_gregorianDateTimeUTCCachedForMS";
  *((_QWORD *)this + 84) = this;
  v333[0] = (char *)this + 672;
  if ((_DWORD)v22 == v6)
  {
    v184 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v22 + 1, (unint64_t)v333);
    v22 = *v5;
    *(_QWORD *)(*v2 + 8 * v22) = *v184;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v22) = (char *)this + 672;
  }
  v23 = (v22 + 1);
  *((_DWORD *)this + 5) = v23;
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 93) = 16;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 95) = "DateInstanceData_cachedGregorianDateTime_year";
  *((_QWORD *)this + 90) = this;
  v333[0] = (char *)this + 720;
  if ((_DWORD)v23 == v6)
  {
    v185 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v23 + 1, (unint64_t)v333);
    v23 = *v5;
    *(_QWORD *)(*v2 + 8 * v23) = *v185;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v23) = (char *)this + 720;
  }
  v24 = (v23 + 1);
  *((_DWORD *)this + 5) = v24;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 99) = 64;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 101) = "DateInstanceData_cachedGregorianDateTimeUTC_year";
  *((_QWORD *)this + 96) = this;
  v333[0] = (char *)this + 768;
  if ((_DWORD)v24 == v6)
  {
    v186 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v24 + 1, (unint64_t)v333);
    v24 = *v5;
    *(_QWORD *)(*v2 + 8 * v24) = *v186;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v24) = (char *)this + 768;
  }
  v25 = (v24 + 1);
  *((_DWORD *)this + 5) = v25;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 105) = 20;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 107) = "DateInstanceData_cachedGregorianDateTime_month";
  *((_QWORD *)this + 102) = this;
  v333[0] = (char *)this + 816;
  if ((_DWORD)v25 == v6)
  {
    v187 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v25 + 1, (unint64_t)v333);
    v25 = *v5;
    *(_QWORD *)(*v2 + 8 * v25) = *v187;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v25) = (char *)this + 816;
  }
  v26 = (v25 + 1);
  *((_DWORD *)this + 5) = v26;
  *((_QWORD *)this + 110) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 111) = 68;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 113) = "DateInstanceData_cachedGregorianDateTimeUTC_month";
  *((_QWORD *)this + 108) = this;
  v333[0] = (char *)this + 864;
  if ((_DWORD)v26 == v6)
  {
    v188 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v26 + 1, (unint64_t)v333);
    v26 = *v5;
    *(_QWORD *)(*v2 + 8 * v26) = *v188;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v26) = (char *)this + 864;
  }
  v27 = (v26 + 1);
  *((_DWORD *)this + 5) = v27;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 117) = 28;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 119) = "DateInstanceData_cachedGregorianDateTime_monthDay";
  *((_QWORD *)this + 114) = this;
  v333[0] = (char *)this + 912;
  if ((_DWORD)v27 == v6)
  {
    v189 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v27 + 1, (unint64_t)v333);
    v27 = *v5;
    *(_QWORD *)(*v2 + 8 * v27) = *v189;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v27) = (char *)this + 912;
  }
  v28 = (v27 + 1);
  *((_DWORD *)this + 5) = v28;
  *((_QWORD *)this + 122) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 123) = 76;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 125) = "DateInstanceData_cachedGregorianDateTimeUTC_monthDay";
  *((_QWORD *)this + 120) = this;
  v333[0] = (char *)this + 960;
  if ((_DWORD)v28 == v6)
  {
    v190 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v28 + 1, (unint64_t)v333);
    v28 = *v5;
    *(_QWORD *)(*v2 + 8 * v28) = *v190;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v28) = (char *)this + 960;
  }
  v29 = (v28 + 1);
  *((_DWORD *)this + 5) = v29;
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 129) = 32;
  *((_QWORD *)this + 130) = 0;
  *((_QWORD *)this + 131) = "DateInstanceData_cachedGregorianDateTime_weekDay";
  *((_QWORD *)this + 126) = this;
  v333[0] = (char *)this + 1008;
  if ((_DWORD)v29 == v6)
  {
    v191 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v29 + 1, (unint64_t)v333);
    v29 = *v5;
    *(_QWORD *)(*v2 + 8 * v29) = *v191;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v29) = (char *)this + 1008;
  }
  v30 = (v29 + 1);
  *((_DWORD *)this + 5) = v30;
  *((_QWORD *)this + 134) = 0;
  *((_QWORD *)this + 133) = 0;
  *((_QWORD *)this + 135) = 80;
  *((_QWORD *)this + 136) = 0;
  *((_QWORD *)this + 137) = "DateInstanceData_cachedGregorianDateTimeUTC_weekDay";
  *((_QWORD *)this + 132) = this;
  v333[0] = (char *)this + 1056;
  if ((_DWORD)v30 == v6)
  {
    v192 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v30 + 1, (unint64_t)v333);
    v30 = *v5;
    *(_QWORD *)(*v2 + 8 * v30) = *v192;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v30) = (char *)this + 1056;
  }
  v31 = (v30 + 1);
  *((_DWORD *)this + 5) = v31;
  *((_QWORD *)this + 140) = 0;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 141) = 36;
  *((_QWORD *)this + 142) = 0;
  *((_QWORD *)this + 143) = "DateInstanceData_cachedGregorianDateTime_hour";
  *((_QWORD *)this + 138) = this;
  v333[0] = (char *)this + 1104;
  if ((_DWORD)v31 == v6)
  {
    v193 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v31 + 1, (unint64_t)v333);
    v31 = *v5;
    *(_QWORD *)(*v2 + 8 * v31) = *v193;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v31) = (char *)this + 1104;
  }
  v32 = (v31 + 1);
  *((_DWORD *)this + 5) = v32;
  *((_QWORD *)this + 146) = 0;
  *((_QWORD *)this + 145) = 0;
  *((_QWORD *)this + 147) = 84;
  *((_QWORD *)this + 148) = 0;
  *((_QWORD *)this + 149) = "DateInstanceData_cachedGregorianDateTimeUTC_hour";
  *((_QWORD *)this + 144) = this;
  v333[0] = (char *)this + 1152;
  if ((_DWORD)v32 == v6)
  {
    v194 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v32 + 1, (unint64_t)v333);
    v32 = *v5;
    *(_QWORD *)(*v2 + 8 * v32) = *v194;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v32) = (char *)this + 1152;
  }
  v33 = (v32 + 1);
  *((_DWORD *)this + 5) = v33;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 153) = 40;
  *((_QWORD *)this + 154) = 0;
  *((_QWORD *)this + 155) = "DateInstanceData_cachedGregorianDateTime_minute";
  *((_QWORD *)this + 150) = this;
  v333[0] = (char *)this + 1200;
  if ((_DWORD)v33 == v6)
  {
    v195 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v33 + 1, (unint64_t)v333);
    v33 = *v5;
    *(_QWORD *)(*v2 + 8 * v33) = *v195;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v33) = (char *)this + 1200;
  }
  v34 = (v33 + 1);
  *((_DWORD *)this + 5) = v34;
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 159) = 88;
  *((_QWORD *)this + 160) = 0;
  *((_QWORD *)this + 161) = "DateInstanceData_cachedGregorianDateTimeUTC_minute";
  *((_QWORD *)this + 156) = this;
  v333[0] = (char *)this + 1248;
  if ((_DWORD)v34 == v6)
  {
    v196 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v34 + 1, (unint64_t)v333);
    v34 = *v5;
    *(_QWORD *)(*v2 + 8 * v34) = *v196;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v34) = (char *)this + 1248;
  }
  v35 = (v34 + 1);
  *((_DWORD *)this + 5) = v35;
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 165) = 44;
  *((_QWORD *)this + 166) = 0;
  *((_QWORD *)this + 167) = "DateInstanceData_cachedGregorianDateTime_second";
  *((_QWORD *)this + 162) = this;
  v333[0] = (char *)this + 1296;
  if ((_DWORD)v35 == v6)
  {
    v197 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v35 + 1, (unint64_t)v333);
    v35 = *v5;
    *(_QWORD *)(*v2 + 8 * v35) = *v197;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v35) = (char *)this + 1296;
  }
  v36 = (v35 + 1);
  *((_DWORD *)this + 5) = v36;
  *((_QWORD *)this + 170) = 0;
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 171) = 92;
  *((_QWORD *)this + 172) = 0;
  *((_QWORD *)this + 173) = "DateInstanceData_cachedGregorianDateTimeUTC_second";
  *((_QWORD *)this + 168) = this;
  v333[0] = (char *)this + 1344;
  if ((_DWORD)v36 == v6)
  {
    v198 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v36 + 1, (unint64_t)v333);
    v36 = *v5;
    *(_QWORD *)(*v2 + 8 * v36) = *v198;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v36) = (char *)this + 1344;
  }
  v37 = (v36 + 1);
  *((_DWORD *)this + 5) = v37;
  *((_QWORD *)this + 176) = 0;
  *((_QWORD *)this + 175) = 0;
  *((_QWORD *)this + 177) = 48;
  *((_QWORD *)this + 178) = 0;
  *((_QWORD *)this + 179) = "DateInstanceData_cachedGregorianDateTime_utcOffsetInMinute";
  *((_QWORD *)this + 174) = this;
  v333[0] = (char *)this + 1392;
  if ((_DWORD)v37 == v6)
  {
    v199 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v37 + 1, (unint64_t)v333);
    v37 = *v5;
    *(_QWORD *)(*v2 + 8 * v37) = *v199;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v37) = (char *)this + 1392;
  }
  v38 = (v37 + 1);
  *((_DWORD *)this + 5) = v38;
  *((_QWORD *)this + 182) = 0;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 183) = 96;
  *((_QWORD *)this + 184) = 0;
  *((_QWORD *)this + 185) = "DateInstanceData_cachedGregorianDateTimeUTC_utcOffsetInMinute";
  *((_QWORD *)this + 180) = this;
  v333[0] = (char *)this + 1440;
  if ((_DWORD)v38 == v6)
  {
    v200 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v38 + 1, (unint64_t)v333);
    v38 = *v5;
    *(_QWORD *)(*v2 + 8 * v38) = *v200;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v38) = (char *)this + 1440;
  }
  v39 = (v38 + 1);
  *((_DWORD *)this + 5) = v39;
  *((_QWORD *)this + 188) = 0;
  *((_QWORD *)this + 187) = 0;
  *((_QWORD *)this + 189) = 24;
  *((_QWORD *)this + 190) = 0;
  *((_QWORD *)this + 191) = "DirectArguments_callee";
  *((_QWORD *)this + 186) = this;
  v333[0] = (char *)this + 1488;
  if ((_DWORD)v39 == v6)
  {
    v201 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v39 + 1, (unint64_t)v333);
    v39 = *v5;
    *(_QWORD *)(*v2 + 8 * v39) = *v201;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v39) = (char *)this + 1488;
  }
  v40 = (v39 + 1);
  *((_DWORD *)this + 5) = v40;
  *((_QWORD *)this + 194) = 0;
  *((_QWORD *)this + 193) = 0;
  *((_QWORD *)this + 195) = 32;
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 197) = "DirectArguments_length";
  *((_QWORD *)this + 192) = this;
  v333[0] = (char *)this + 1536;
  if ((_DWORD)v40 == v6)
  {
    v202 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v40 + 1, (unint64_t)v333);
    v40 = *v5;
    *(_QWORD *)(*v2 + 8 * v40) = *v202;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v40) = (char *)this + 1536;
  }
  v41 = (v40 + 1);
  *((_DWORD *)this + 5) = v41;
  *((_QWORD *)this + 200) = 0;
  *((_QWORD *)this + 199) = 0;
  *((_QWORD *)this + 201) = 36;
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 203) = "DirectArguments_minCapacity";
  *((_QWORD *)this + 198) = this;
  v333[0] = (char *)this + 1584;
  if ((_DWORD)v41 == v6)
  {
    v203 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v41 + 1, (unint64_t)v333);
    v41 = *v5;
    *(_QWORD *)(*v2 + 8 * v41) = *v203;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v41) = (char *)this + 1584;
  }
  v42 = (v41 + 1);
  *((_DWORD *)this + 5) = v42;
  *((_QWORD *)this + 206) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 207) = 40;
  *((_QWORD *)this + 208) = 0;
  *((_QWORD *)this + 209) = "DirectArguments_mappedArguments";
  *((_QWORD *)this + 204) = this;
  v333[0] = (char *)this + 1632;
  if ((_DWORD)v42 == v6)
  {
    v204 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v42 + 1, (unint64_t)v333);
    v42 = *v5;
    *(_QWORD *)(*v2 + 8 * v42) = *v204;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v42) = (char *)this + 1632;
  }
  v43 = (v42 + 1);
  *((_DWORD *)this + 5) = v43;
  *((_QWORD *)this + 212) = 0;
  *((_QWORD *)this + 211) = 0;
  *((_QWORD *)this + 213) = 16;
  *((_QWORD *)this + 214) = 0;
  *((_QWORD *)this + 215) = "DirectArguments_modifiedArgumentsDescriptor";
  *((_QWORD *)this + 210) = this;
  v333[0] = (char *)this + 1680;
  if ((_DWORD)v43 == v6)
  {
    v205 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v43 + 1, (unint64_t)v333);
    v43 = *v5;
    *(_QWORD *)(*v2 + 8 * v43) = *v205;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v43) = (char *)this + 1680;
  }
  v44 = (v43 + 1);
  *((_DWORD *)this + 5) = v44;
  *((_QWORD *)this + 218) = 0;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 219) = 72;
  *((_QWORD *)this + 220) = 0;
  *((_QWORD *)this + 221) = "FunctionExecutable_rareData";
  *((_QWORD *)this + 216) = this;
  v333[0] = (char *)this + 1728;
  if ((_DWORD)v44 == v6)
  {
    v206 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v44 + 1, (unint64_t)v333);
    v44 = *v5;
    *(_QWORD *)(*v2 + 8 * v44) = *v206;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v44) = (char *)this + 1728;
  }
  v45 = (v44 + 1);
  *((_DWORD *)this + 5) = v45;
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 225) = 40;
  *((_QWORD *)this + 226) = 0;
  *((_QWORD *)this + 227) = "FunctionExecutableRareData_asString";
  *((_QWORD *)this + 222) = this;
  v333[0] = (char *)this + 1776;
  if ((_DWORD)v45 == v6)
  {
    v207 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v45 + 1, (unint64_t)v333);
    v45 = *v5;
    *(_QWORD *)(*v2 + 8 * v45) = *v207;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v45) = (char *)this + 1776;
  }
  v46 = (v45 + 1);
  *((_DWORD *)this + 5) = v46;
  *((_QWORD *)this + 230) = 0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 231) = 8;
  *((_QWORD *)this + 232) = 0;
  *((_QWORD *)this + 233) = "FunctionRareData_allocator";
  *((_QWORD *)this + 228) = this;
  v333[0] = (char *)this + 1824;
  if ((_DWORD)v46 == v6)
  {
    v208 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v46 + 1, (unint64_t)v333);
    v46 = *v5;
    *(_QWORD *)(*v2 + 8 * v46) = *v208;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v46) = (char *)this + 1824;
  }
  v47 = (v46 + 1);
  *((_DWORD *)this + 5) = v47;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 235) = 0;
  *((_QWORD *)this + 237) = 16;
  *((_QWORD *)this + 238) = 0;
  *((_QWORD *)this + 239) = "FunctionRareData_structure";
  *((_QWORD *)this + 234) = this;
  v333[0] = (char *)this + 1872;
  if ((_DWORD)v47 == v6)
  {
    v209 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v47 + 1, (unint64_t)v333);
    v47 = *v5;
    *(_QWORD *)(*v2 + 8 * v47) = *v209;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v47) = (char *)this + 1872;
  }
  v48 = (v47 + 1);
  *((_DWORD *)this + 5) = v48;
  *((_QWORD *)this + 242) = 0;
  *((_QWORD *)this + 241) = 0;
  *((_QWORD *)this + 243) = 24;
  *((_QWORD *)this + 244) = 0;
  *((_QWORD *)this + 245) = "FunctionRareData_prototype";
  *((_QWORD *)this + 240) = this;
  v333[0] = (char *)this + 1920;
  if ((_DWORD)v48 == v6)
  {
    v210 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v48 + 1, (unint64_t)v333);
    v48 = *v5;
    *(_QWORD *)(*v2 + 8 * v48) = *v210;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v48) = (char *)this + 1920;
  }
  v49 = (v48 + 1);
  *((_DWORD *)this + 5) = v49;
  *((_QWORD *)this + 248) = 0;
  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 249) = 32;
  *((_QWORD *)this + 250) = 0;
  *((_QWORD *)this + 251) = "FunctionRareData_allocationProfileWatchpointSet";
  *((_QWORD *)this + 246) = this;
  v333[0] = (char *)this + 1968;
  if ((_DWORD)v49 == v6)
  {
    v211 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v49 + 1, (unint64_t)v333);
    v49 = *v5;
    *(_QWORD *)(*v2 + 8 * v49) = *v211;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v49) = (char *)this + 1968;
  }
  v50 = (v49 + 1);
  *((_DWORD *)this + 5) = v50;
  *((_QWORD *)this + 254) = 0;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 255) = 48;
  *((_QWORD *)this + 256) = 0;
  *((_QWORD *)this + 257) = "FunctionRareData_executable";
  *((_QWORD *)this + 252) = this;
  v333[0] = (char *)this + 2016;
  if ((_DWORD)v50 == v6)
  {
    v212 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v50 + 1, (unint64_t)v333);
    v50 = *v5;
    *(_QWORD *)(*v2 + 8 * v50) = *v212;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v50) = (char *)this + 2016;
  }
  v51 = (v50 + 1);
  *((_DWORD *)this + 5) = v51;
  *((_QWORD *)this + 260) = 0;
  *((_QWORD *)this + 259) = 0;
  *((_QWORD *)this + 261) = 40;
  *((_QWORD *)this + 262) = 0;
  *((_QWORD *)this + 263) = "FunctionRareData_internalFunctionAllocationProfile_structureID";
  *((_QWORD *)this + 258) = this;
  v333[0] = (char *)this + 2064;
  if ((_DWORD)v51 == v6)
  {
    v213 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v51 + 1, (unint64_t)v333);
    v51 = *v5;
    *(_QWORD *)(*v2 + 8 * v51) = *v213;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v51) = (char *)this + 2064;
  }
  v52 = (v51 + 1);
  *((_DWORD *)this + 5) = v52;
  *((_QWORD *)this + 266) = 0;
  *((_QWORD *)this + 265) = 0;
  *((_QWORD *)this + 267) = 8;
  *((_QWORD *)this + 268) = 0;
  *((_QWORD *)this + 269) = "GetterSetter_getter";
  *((_QWORD *)this + 264) = this;
  v333[0] = (char *)this + 2112;
  if ((_DWORD)v52 == v6)
  {
    v214 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v52 + 1, (unint64_t)v333);
    v52 = *v5;
    *(_QWORD *)(*v2 + 8 * v52) = *v214;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v52) = (char *)this + 2112;
  }
  v53 = (v52 + 1);
  *((_DWORD *)this + 5) = v53;
  *((_QWORD *)this + 272) = 0;
  *((_QWORD *)this + 271) = 0;
  *((_QWORD *)this + 273) = 16;
  *((_QWORD *)this + 274) = 0;
  *((_QWORD *)this + 275) = "GetterSetter_setter";
  *((_QWORD *)this + 270) = this;
  v333[0] = (char *)this + 2160;
  if ((_DWORD)v53 == v6)
  {
    v215 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v53 + 1, (unint64_t)v333);
    v53 = *v5;
    *(_QWORD *)(*v2 + 8 * v53) = *v215;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v53) = (char *)this + 2160;
  }
  v54 = (v53 + 1);
  *((_DWORD *)this + 5) = v54;
  *((_QWORD *)this + 278) = 0;
  *((_QWORD *)this + 277) = 0;
  *((_QWORD *)this + 279) = 32;
  *((_QWORD *)this + 280) = 0;
  *((_QWORD *)this + 281) = "JSArrayBufferView_byteOffset";
  *((_QWORD *)this + 276) = this;
  v333[0] = (char *)this + 2208;
  if ((_DWORD)v54 == v6)
  {
    v216 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v54 + 1, (unint64_t)v333);
    v54 = *v5;
    *(_QWORD *)(*v2 + 8 * v54) = *v216;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v54) = (char *)this + 2208;
  }
  v55 = (v54 + 1);
  *((_DWORD *)this + 5) = v55;
  *((_QWORD *)this + 284) = 0;
  *((_QWORD *)this + 283) = 0;
  *((_QWORD *)this + 285) = 24;
  *((_QWORD *)this + 286) = 0;
  *((_QWORD *)this + 287) = "JSArrayBufferView_length";
  *((_QWORD *)this + 282) = this;
  v333[0] = (char *)this + 2256;
  if ((_DWORD)v55 == v6)
  {
    v217 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v55 + 1, (unint64_t)v333);
    v55 = *v5;
    *(_QWORD *)(*v2 + 8 * v55) = *v217;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v55) = (char *)this + 2256;
  }
  v56 = (v55 + 1);
  *((_DWORD *)this + 5) = v56;
  *((_QWORD *)this + 290) = 0;
  *((_QWORD *)this + 289) = 0;
  *((_QWORD *)this + 291) = 40;
  *((_QWORD *)this + 292) = 0;
  *((_QWORD *)this + 293) = "JSArrayBufferView_mode";
  *((_QWORD *)this + 288) = this;
  v333[0] = (char *)this + 2304;
  if ((_DWORD)v56 == v6)
  {
    v218 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v56 + 1, (unint64_t)v333);
    v56 = *v5;
    *(_QWORD *)(*v2 + 8 * v56) = *v218;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v56) = (char *)this + 2304;
  }
  v57 = (v56 + 1);
  *((_DWORD *)this + 5) = v57;
  *((_QWORD *)this + 296) = 0;
  *((_QWORD *)this + 295) = 0;
  *((_QWORD *)this + 297) = 16;
  *((_QWORD *)this + 298) = 0;
  *((_QWORD *)this + 299) = "JSArrayBufferView_vector";
  *((_QWORD *)this + 294) = this;
  v333[0] = (char *)this + 2352;
  if ((_DWORD)v57 == v6)
  {
    v219 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v57 + 1, (unint64_t)v333);
    v57 = *v5;
    *(_QWORD *)(*v2 + 8 * v57) = *v219;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v57) = (char *)this + 2352;
  }
  v58 = (v57 + 1);
  *((_DWORD *)this + 5) = v58;
  *((_QWORD *)this + 302) = 0;
  *((_QWORD *)this + 301) = 0;
  *((_QWORD *)this + 303) = 8;
  *((_QWORD *)this + 304) = 0;
  *((_QWORD *)this + 305) = "JSBigInt_length";
  *((_QWORD *)this + 300) = this;
  v333[0] = (char *)this + 2400;
  if ((_DWORD)v58 == v6)
  {
    v220 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v58 + 1, (unint64_t)v333);
    v58 = *v5;
    *(_QWORD *)(*v2 + 8 * v58) = *v220;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v58) = (char *)this + 2400;
  }
  v59 = (v58 + 1);
  *((_DWORD *)this + 5) = v59;
  *((_QWORD *)this + 308) = 0;
  *((_QWORD *)this + 307) = 0;
  *((_QWORD *)this + 309) = 32;
  *((_QWORD *)this + 310) = 0;
  *((_QWORD *)this + 311) = "JSBoundFunction_targetFunction";
  *((_QWORD *)this + 306) = this;
  v333[0] = (char *)this + 2448;
  if ((_DWORD)v59 == v6)
  {
    v221 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v59 + 1, (unint64_t)v333);
    v59 = *v5;
    *(_QWORD *)(*v2 + 8 * v59) = *v221;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v59) = (char *)this + 2448;
  }
  v60 = (v59 + 1);
  *((_DWORD *)this + 5) = v60;
  *((_QWORD *)this + 314) = 0;
  *((_QWORD *)this + 313) = 0;
  *((_QWORD *)this + 315) = 40;
  *((_QWORD *)this + 316) = 0;
  *((_QWORD *)this + 317) = "JSBoundFunction_boundThis";
  *((_QWORD *)this + 312) = this;
  v333[0] = (char *)this + 2496;
  if ((_DWORD)v60 == v6)
  {
    v222 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v60 + 1, (unint64_t)v333);
    v60 = *v5;
    *(_QWORD *)(*v2 + 8 * v60) = *v222;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v60) = (char *)this + 2496;
  }
  v61 = (v60 + 1);
  *((_DWORD *)this + 5) = v61;
  *((_QWORD *)this + 320) = 0;
  *((_QWORD *)this + 319) = 0;
  *((_QWORD *)this + 321) = 48;
  *((_QWORD *)this + 322) = 0;
  *((_QWORD *)this + 323) = "JSBoundFunction_boundArg0";
  *((_QWORD *)this + 318) = this;
  v333[0] = (char *)this + 2544;
  if ((_DWORD)v61 == v6)
  {
    v223 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v61 + 1, (unint64_t)v333);
    v61 = *v5;
    *(_QWORD *)(*v2 + 8 * v61) = *v223;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v61) = (char *)this + 2544;
  }
  v62 = (v61 + 1);
  *((_DWORD *)this + 5) = v62;
  *((_QWORD *)this + 326) = 0;
  *((_QWORD *)this + 325) = 0;
  *((_QWORD *)this + 327) = 56;
  *((_QWORD *)this + 328) = 0;
  *((_QWORD *)this + 329) = "JSBoundFunction_boundArg1";
  *((_QWORD *)this + 324) = this;
  v333[0] = (char *)this + 2592;
  if ((_DWORD)v62 == v6)
  {
    v224 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v62 + 1, (unint64_t)v333);
    v62 = *v5;
    *(_QWORD *)(*v2 + 8 * v62) = *v224;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v62) = (char *)this + 2592;
  }
  v63 = (v62 + 1);
  *((_DWORD *)this + 5) = v63;
  *((_QWORD *)this + 332) = 0;
  *((_QWORD *)this + 331) = 0;
  *((_QWORD *)this + 333) = 64;
  *((_QWORD *)this + 334) = 0;
  *((_QWORD *)this + 335) = "JSBoundFunction_boundArg2";
  *((_QWORD *)this + 330) = this;
  v333[0] = (char *)this + 2640;
  if ((_DWORD)v63 == v6)
  {
    v225 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v63 + 1, (unint64_t)v333);
    v63 = *v5;
    *(_QWORD *)(*v2 + 8 * v63) = *v225;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v63) = (char *)this + 2640;
  }
  v64 = (v63 + 1);
  *((_DWORD *)this + 5) = v64;
  *((_QWORD *)this + 338) = 0;
  *((_QWORD *)this + 337) = 0;
  *((_QWORD *)this + 339) = 72;
  *((_QWORD *)this + 340) = 0;
  *((_QWORD *)this + 341) = "JSBoundFunction_nameMayBeNull";
  *((_QWORD *)this + 336) = this;
  v333[0] = (char *)this + 2688;
  if ((_DWORD)v64 == v6)
  {
    v226 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v64 + 1, (unint64_t)v333);
    v64 = *v5;
    *(_QWORD *)(*v2 + 8 * v64) = *v226;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v64) = (char *)this + 2688;
  }
  v65 = (v64 + 1);
  *((_DWORD *)this + 5) = v65;
  *((_QWORD *)this + 344) = 0;
  *((_QWORD *)this + 343) = 0;
  *((_QWORD *)this + 345) = 80;
  *((_QWORD *)this + 346) = 0;
  *((_QWORD *)this + 347) = "JSBoundFunction_length";
  *((_QWORD *)this + 342) = this;
  v333[0] = (char *)this + 2736;
  if ((_DWORD)v65 == v6)
  {
    v227 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v65 + 1, (unint64_t)v333);
    v65 = *v5;
    *(_QWORD *)(*v2 + 8 * v65) = *v227;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v65) = (char *)this + 2736;
  }
  v66 = (v65 + 1);
  *((_DWORD *)this + 5) = v66;
  *((_QWORD *)this + 350) = 0;
  *((_QWORD *)this + 349) = 0;
  *((_QWORD *)this + 351) = 88;
  *((_QWORD *)this + 352) = 0;
  *((_QWORD *)this + 353) = "JSBoundFunction_boundArgsLength";
  *((_QWORD *)this + 348) = this;
  v333[0] = (char *)this + 2784;
  if ((_DWORD)v66 == v6)
  {
    v228 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v66 + 1, (unint64_t)v333);
    v66 = *v5;
    *(_QWORD *)(*v2 + 8 * v66) = *v228;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v66) = (char *)this + 2784;
  }
  v67 = (v66 + 1);
  *((_DWORD *)this + 5) = v67;
  *((_QWORD *)this + 356) = 0;
  *((_QWORD *)this + 355) = 0;
  *((_QWORD *)this + 357) = 92;
  *((_QWORD *)this + 358) = 0;
  *((_QWORD *)this + 359) = "JSBoundFunction_canConstruct";
  *((_QWORD *)this + 354) = this;
  v333[0] = (char *)this + 2832;
  if ((_DWORD)v67 == v6)
  {
    v229 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v67 + 1, (unint64_t)v333);
    v67 = *v5;
    *(_QWORD *)(*v2 + 8 * v67) = *v229;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v67) = (char *)this + 2832;
  }
  v68 = (v67 + 1);
  *((_DWORD *)this + 5) = v68;
  *((_QWORD *)this + 362) = 0;
  *((_QWORD *)this + 361) = 0;
  *((_QWORD *)this + 363) = 7;
  *((_QWORD *)this + 364) = 0;
  *((_QWORD *)this + 365) = "JSCell_cellState";
  *((_QWORD *)this + 360) = this;
  v333[0] = (char *)this + 2880;
  if ((_DWORD)v68 == v6)
  {
    v230 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v68 + 1, (unint64_t)v333);
    v68 = *v5;
    *(_QWORD *)(*v2 + 8 * v68) = *v230;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v68) = (char *)this + 2880;
  }
  v69 = (v68 + 1);
  *((_DWORD *)this + 5) = v69;
  v70 = (char *)this + 2928;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0u;
  *((_QWORD *)this + 371) = "JSCell_header";
  *((_QWORD *)this + 366) = this;
  v333[0] = (char *)this + 2928;
  if ((_DWORD)v69 == v6)
  {
    v231 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v69 + 1, (unint64_t)v333);
    v69 = *v5;
    *(_QWORD *)(*v2 + 8 * v69) = *v231;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v69) = v70;
  }
  v71 = (v69 + 1);
  *((_DWORD *)this + 5) = v71;
  *((_QWORD *)this + 374) = 0;
  *((_QWORD *)this + 373) = 0;
  *((_QWORD *)this + 375) = 4;
  *((_QWORD *)this + 376) = 0;
  *((_QWORD *)this + 377) = "JSCell_indexingTypeAndMisc";
  *((_QWORD *)this + 372) = this;
  v333[0] = (char *)this + 2976;
  if ((_DWORD)v71 == v6)
  {
    v232 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v71 + 1, (unint64_t)v333);
    v71 = *v5;
    *(_QWORD *)(*v2 + 8 * v71) = *v232;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v71) = (char *)this + 2976;
  }
  v72 = (v71 + 1);
  *((_DWORD *)this + 5) = v72;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  *((_QWORD *)this + 383) = "JSCell_structureID";
  *((_QWORD *)this + 378) = this;
  v333[0] = (char *)this + 3024;
  if ((_DWORD)v72 == v6)
  {
    v233 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v72 + 1, (unint64_t)v333);
    v72 = *v5;
    *(_QWORD *)(*v2 + 8 * v72) = *v233;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v72) = (char *)this + 3024;
  }
  v73 = (v72 + 1);
  *((_DWORD *)this + 5) = v73;
  *((_QWORD *)this + 386) = 0;
  *((_QWORD *)this + 385) = 0;
  *((_QWORD *)this + 387) = 6;
  *((_QWORD *)this + 388) = 0;
  *((_QWORD *)this + 389) = "JSCell_typeInfoFlags";
  *((_QWORD *)this + 384) = this;
  v333[0] = (char *)this + 3072;
  if ((_DWORD)v73 == v6)
  {
    v234 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v73 + 1, (unint64_t)v333);
    v73 = *v5;
    *(_QWORD *)(*v2 + 8 * v73) = *v234;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v73) = (char *)this + 3072;
  }
  v74 = (v73 + 1);
  *((_DWORD *)this + 5) = v74;
  *((_QWORD *)this + 392) = 0;
  *((_QWORD *)this + 391) = 0;
  *((_QWORD *)this + 393) = 5;
  *((_QWORD *)this + 394) = 0;
  *((_QWORD *)this + 395) = "JSCell_typeInfoType";
  *((_QWORD *)this + 390) = this;
  v333[0] = (char *)this + 3120;
  if ((_DWORD)v74 == v6)
  {
    v235 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v74 + 1, (unint64_t)v333);
    v74 = *v5;
    *(_QWORD *)(*v2 + 8 * v74) = *v235;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v74) = (char *)this + 3120;
  }
  v75 = (v74 + 1);
  *((_DWORD *)this + 5) = v75;
  *((_QWORD *)this + 398) = 0;
  *((_QWORD *)this + 397) = 0;
  *((_QWORD *)this + 399) = 4;
  *((_QWORD *)this + 400) = 0;
  *((_QWORD *)this + 401) = "JSCell_usefulBytes";
  *((_QWORD *)this + 396) = this;
  v333[0] = (char *)this + 3168;
  v329 = (JSC::FTL::AbstractHeapRepository *)((char *)this + 3168);
  if ((_DWORD)v75 == v6)
  {
    v236 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v75 + 1, (unint64_t)v333);
    v75 = *v5;
    *(_QWORD *)(*v2 + 8 * v75) = *v236;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v75) = (char *)this + 3168;
  }
  v76 = (v75 + 1);
  *((_DWORD *)this + 5) = v76;
  *((_QWORD *)this + 404) = 0;
  *((_QWORD *)this + 403) = 0;
  *((_QWORD *)this + 405) = 24;
  *((_QWORD *)this + 406) = 0;
  *((_QWORD *)this + 407) = "JSFunction_executableOrRareData";
  *((_QWORD *)this + 402) = this;
  v333[0] = (char *)this + 3216;
  if ((_DWORD)v76 == v6)
  {
    v237 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v76 + 1, (unint64_t)v333);
    v76 = *v5;
    *(_QWORD *)(*v2 + 8 * v76) = *v237;
    v6 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v76) = (char *)this + 3216;
  }
  v77 = (v76 + 1);
  *((_DWORD *)this + 5) = v77;
  *((_QWORD *)this + 410) = 0;
  *((_QWORD *)this + 409) = 0;
  *((_QWORD *)this + 411) = 16;
  *((_QWORD *)this + 412) = 0;
  *((_QWORD *)this + 413) = "JSFunction_scope";
  *((_QWORD *)this + 408) = this;
  v333[0] = (char *)this + 3264;
  if ((_DWORD)v77 == v6)
  {
    v238 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v77 + 1, (unint64_t)v333);
    v77 = *v5;
    *(_QWORD *)(*v2 + 8 * v77) = *v238;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v77) = (char *)this + 3264;
  }
  v78 = (v77 + 1);
  *((_DWORD *)this + 5) = v78;
  *((_QWORD *)this + 416) = 0;
  *((_QWORD *)this + 415) = 0;
  *((_QWORD *)this + 417) = 2152;
  *((_QWORD *)this + 418) = 0;
  *((_QWORD *)this + 419) = "JSGlobalObject_regExpGlobalData_cachedResult_lastRegExp";
  *((_QWORD *)this + 414) = this;
  v333[0] = (char *)this + 3312;
  v79 = *((_DWORD *)this + 4);
  if ((_DWORD)v78 == v79)
  {
    v239 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v78 + 1, (unint64_t)v333);
    v78 = *v5;
    *(_QWORD *)(*v2 + 8 * v78) = *v239;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v78) = (char *)this + 3312;
  }
  v80 = (v78 + 1);
  *((_DWORD *)this + 5) = v80;
  *((_QWORD *)this + 422) = 0;
  *((_QWORD *)this + 421) = 0;
  *((_QWORD *)this + 423) = 2144;
  *((_QWORD *)this + 424) = 0;
  *((_QWORD *)this + 425) = "JSGlobalObject_regExpGlobalData_cachedResult_lastInput";
  *((_QWORD *)this + 420) = this;
  v333[0] = (char *)this + 3360;
  if ((_DWORD)v80 == v79)
  {
    v240 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v80 + 1, (unint64_t)v333);
    v80 = *v5;
    *(_QWORD *)(*v2 + 8 * v80) = *v240;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v80) = (char *)this + 3360;
  }
  v81 = (v80 + 1);
  *((_DWORD *)this + 5) = v81;
  *((_QWORD *)this + 428) = 0;
  *((_QWORD *)this + 427) = 0;
  *((_QWORD *)this + 429) = 2120;
  *((_QWORD *)this + 430) = 0;
  *((_QWORD *)this + 431) = "JSGlobalObject_regExpGlobalData_cachedResult_result_start";
  *((_QWORD *)this + 426) = this;
  v333[0] = (char *)this + 3408;
  if ((_DWORD)v81 == v79)
  {
    v241 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v81 + 1, (unint64_t)v333);
    v81 = *v5;
    *(_QWORD *)(*v2 + 8 * v81) = *v241;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v81) = (char *)this + 3408;
  }
  v82 = (v81 + 1);
  *((_DWORD *)this + 5) = v82;
  *((_QWORD *)this + 434) = 0;
  *((_QWORD *)this + 433) = 0;
  *((_QWORD *)this + 435) = 2128;
  *((_QWORD *)this + 436) = 0;
  *((_QWORD *)this + 437) = "JSGlobalObject_regExpGlobalData_cachedResult_result_end";
  *((_QWORD *)this + 432) = this;
  v333[0] = (char *)this + 3456;
  if ((_DWORD)v82 == v79)
  {
    v242 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v82 + 1, (unint64_t)v333);
    v82 = *v5;
    *(_QWORD *)(*v2 + 8 * v82) = *v242;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v82) = (char *)this + 3456;
  }
  v83 = (v82 + 1);
  *((_DWORD *)this + 5) = v83;
  *((_QWORD *)this + 440) = 0;
  *((_QWORD *)this + 439) = 0;
  *((_QWORD *)this + 441) = 2136;
  *((_QWORD *)this + 442) = 0;
  *((_QWORD *)this + 443) = "JSGlobalObject_regExpGlobalData_cachedResult_reified";
  *((_QWORD *)this + 438) = this;
  v333[0] = (char *)this + 3504;
  if ((_DWORD)v83 == v79)
  {
    v243 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v83 + 1, (unint64_t)v333);
    v83 = *v5;
    *(_QWORD *)(*v2 + 8 * v83) = *v243;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v83) = (char *)this + 3504;
  }
  v84 = (v83 + 1);
  *((_DWORD *)this + 5) = v84;
  *((_QWORD *)this + 446) = 0;
  *((_QWORD *)this + 445) = 0;
  *((_QWORD *)this + 447) = 8;
  *((_QWORD *)this + 448) = 0;
  *((_QWORD *)this + 449) = "JSObject_butterfly";
  *((_QWORD *)this + 444) = this;
  v333[0] = (char *)this + 3552;
  if ((_DWORD)v84 == v79)
  {
    v244 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v84 + 1, (unint64_t)v333);
    v84 = *v5;
    *(_QWORD *)(*v2 + 8 * v84) = *v244;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v84) = (char *)this + 3552;
  }
  v85 = (v84 + 1);
  *((_DWORD *)this + 5) = v85;
  *((_QWORD *)this + 452) = 0;
  *((_QWORD *)this + 451) = 0;
  *((_QWORD *)this + 453) = 32;
  *((_QWORD *)this + 454) = 0;
  *((_QWORD *)this + 455) = "JSPropertyNameEnumerator_cachedInlineCapacity";
  *((_QWORD *)this + 450) = this;
  v333[0] = (char *)this + 3600;
  if ((_DWORD)v85 == v79)
  {
    v245 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v85 + 1, (unint64_t)v333);
    v85 = *v5;
    *(_QWORD *)(*v2 + 8 * v85) = *v245;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v85) = (char *)this + 3600;
  }
  v86 = (v85 + 1);
  *((_DWORD *)this + 5) = v86;
  *((_QWORD *)this + 458) = 0;
  *((_QWORD *)this + 457) = 0;
  *((_QWORD *)this + 459) = 8;
  *((_QWORD *)this + 460) = 0;
  *((_QWORD *)this + 461) = "JSPropertyNameEnumerator_cachedPropertyNamesVector";
  *((_QWORD *)this + 456) = this;
  v333[0] = (char *)this + 3648;
  if ((_DWORD)v86 == v79)
  {
    v246 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v86 + 1, (unint64_t)v333);
    v86 = *v5;
    *(_QWORD *)(*v2 + 8 * v86) = *v246;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v86) = (char *)this + 3648;
  }
  v87 = (v86 + 1);
  *((_DWORD *)this + 5) = v87;
  *((_QWORD *)this + 464) = 0;
  *((_QWORD *)this + 463) = 0;
  *((_QWORD *)this + 465) = 16;
  *((_QWORD *)this + 466) = 0;
  *((_QWORD *)this + 467) = "JSPropertyNameEnumerator_cachedStructureID";
  *((_QWORD *)this + 462) = this;
  v333[0] = (char *)this + 3696;
  if ((_DWORD)v87 == v79)
  {
    v247 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v87 + 1, (unint64_t)v333);
    v87 = *v5;
    *(_QWORD *)(*v2 + 8 * v87) = *v247;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v87) = (char *)this + 3696;
  }
  v88 = (v87 + 1);
  *((_DWORD *)this + 5) = v88;
  *((_QWORD *)this + 470) = 0;
  *((_QWORD *)this + 469) = 0;
  *((_QWORD *)this + 471) = 28;
  *((_QWORD *)this + 472) = 0;
  *((_QWORD *)this + 473) = "JSPropertyNameEnumerator_endGenericPropertyIndex";
  *((_QWORD *)this + 468) = this;
  v333[0] = (char *)this + 3744;
  if ((_DWORD)v88 == v79)
  {
    v248 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v88 + 1, (unint64_t)v333);
    v88 = *v5;
    *(_QWORD *)(*v2 + 8 * v88) = *v248;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v88) = (char *)this + 3744;
  }
  v89 = (v88 + 1);
  *((_DWORD *)this + 5) = v89;
  *((_QWORD *)this + 476) = 0;
  *((_QWORD *)this + 475) = 0;
  *((_QWORD *)this + 477) = 24;
  *((_QWORD *)this + 478) = 0;
  *((_QWORD *)this + 479) = "JSPropertyNameEnumerator_endStructurePropertyIndex";
  *((_QWORD *)this + 474) = this;
  v333[0] = (char *)this + 3792;
  if ((_DWORD)v89 == v79)
  {
    v249 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v89 + 1, (unint64_t)v333);
    v89 = *v5;
    *(_QWORD *)(*v2 + 8 * v89) = *v249;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v89) = (char *)this + 3792;
  }
  v90 = (v89 + 1);
  *((_DWORD *)this + 5) = v90;
  *((_QWORD *)this + 482) = 0;
  *((_QWORD *)this + 481) = 0;
  *((_QWORD *)this + 483) = 20;
  *((_QWORD *)this + 484) = 0;
  *((_QWORD *)this + 485) = "JSPropertyNameEnumerator_indexLength";
  *((_QWORD *)this + 480) = this;
  v333[0] = (char *)this + 3840;
  if ((_DWORD)v90 == v79)
  {
    v250 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v90 + 1, (unint64_t)v333);
    v90 = *v5;
    *(_QWORD *)(*v2 + 8 * v90) = *v250;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v90) = (char *)this + 3840;
  }
  v91 = (v90 + 1);
  *((_DWORD *)this + 5) = v91;
  *((_QWORD *)this + 488) = 0;
  *((_QWORD *)this + 487) = 0;
  *((_QWORD *)this + 489) = 36;
  *((_QWORD *)this + 490) = 0;
  *((_QWORD *)this + 491) = "JSPropertyNameEnumerator_flags";
  *((_QWORD *)this + 486) = this;
  v333[0] = (char *)this + 3888;
  if ((_DWORD)v91 == v79)
  {
    v251 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v91 + 1, (unint64_t)v333);
    v91 = *v5;
    *(_QWORD *)(*v2 + 8 * v91) = *v251;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v91) = (char *)this + 3888;
  }
  v92 = (v91 + 1);
  *((_DWORD *)this + 5) = v92;
  *((_QWORD *)this + 494) = 0;
  *((_QWORD *)this + 493) = 0;
  *((_QWORD *)this + 495) = 8;
  *((_QWORD *)this + 496) = 0;
  *((_QWORD *)this + 497) = "JSRopeString_flags";
  *((_QWORD *)this + 492) = this;
  v333[0] = (char *)this + 3936;
  if ((_DWORD)v92 == v79)
  {
    v252 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v92 + 1, (unint64_t)v333);
    v92 = *v5;
    *(_QWORD *)(*v2 + 8 * v92) = *v252;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v92) = (char *)this + 3936;
  }
  v93 = (v92 + 1);
  *((_DWORD *)this + 5) = v93;
  *((_QWORD *)this + 500) = 0;
  *((_QWORD *)this + 499) = 0;
  *((_QWORD *)this + 501) = 16;
  *((_QWORD *)this + 502) = 0;
  *((_QWORD *)this + 503) = "JSRopeString_length";
  *((_QWORD *)this + 498) = this;
  v333[0] = (char *)this + 3984;
  if ((_DWORD)v93 == v79)
  {
    v253 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v93 + 1, (unint64_t)v333);
    v93 = *v5;
    *(_QWORD *)(*v2 + 8 * v93) = *v253;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v93) = (char *)this + 3984;
  }
  v94 = (v93 + 1);
  *((_DWORD *)this + 5) = v94;
  *((_QWORD *)this + 506) = 0;
  *((_QWORD *)this + 505) = 0;
  *((_QWORD *)this + 507) = 8;
  *((_QWORD *)this + 508) = 0;
  *((_QWORD *)this + 509) = "JSRopeString_fiber0";
  *((_QWORD *)this + 504) = this;
  v333[0] = (char *)this + 4032;
  v331 = (JSC::FTL::AbstractHeapRepository *)((char *)this + 4032);
  if ((_DWORD)v94 == v79)
  {
    v254 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v94 + 1, (unint64_t)v333);
    v94 = *v5;
    *(_QWORD *)(*v2 + 8 * v94) = *v254;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v94) = (char *)this + 4032;
  }
  v95 = (v94 + 1);
  *((_DWORD *)this + 5) = v95;
  *((_QWORD *)this + 512) = 0;
  *((_QWORD *)this + 511) = 0;
  *((_QWORD *)this + 513) = 16;
  *((_QWORD *)this + 514) = 0;
  *((_QWORD *)this + 515) = "JSRopeString_fiber1";
  *((_QWORD *)this + 510) = this;
  v333[0] = (char *)this + 4080;
  if ((_DWORD)v95 == v79)
  {
    v255 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v95 + 1, (unint64_t)v333);
    v95 = *v5;
    *(_QWORD *)(*v2 + 8 * v95) = *v255;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v95) = (char *)this + 4080;
  }
  v96 = (v95 + 1);
  *((_DWORD *)this + 5) = v96;
  *((_QWORD *)this + 518) = 0;
  *((_QWORD *)this + 517) = 0;
  *((_QWORD *)this + 519) = 24;
  *((_QWORD *)this + 520) = 0;
  *((_QWORD *)this + 521) = "JSRopeString_fiber2";
  *((_QWORD *)this + 516) = this;
  v333[0] = (char *)this + 4128;
  if ((_DWORD)v96 == v79)
  {
    v256 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v96 + 1, (unint64_t)v333);
    v96 = *v5;
    *(_QWORD *)(*v2 + 8 * v96) = *v256;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v96) = (char *)this + 4128;
  }
  v97 = (v96 + 1);
  *((_DWORD *)this + 5) = v97;
  *((_QWORD *)this + 524) = 0;
  *((_QWORD *)this + 523) = 0;
  *((_QWORD *)this + 525) = 16;
  *((_QWORD *)this + 526) = 0;
  *((_QWORD *)this + 527) = "JSScope_next";
  *((_QWORD *)this + 522) = this;
  v333[0] = (char *)this + 4176;
  if ((_DWORD)v97 == v79)
  {
    v257 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v97 + 1, (unint64_t)v333);
    v97 = *v5;
    *(_QWORD *)(*v2 + 8 * v97) = *v257;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v97) = (char *)this + 4176;
  }
  v98 = (v97 + 1);
  *((_DWORD *)this + 5) = v98;
  *((_QWORD *)this + 530) = 0;
  *((_QWORD *)this + 529) = 0;
  *((_QWORD *)this + 531) = 24;
  *((_QWORD *)this + 532) = 0;
  *((_QWORD *)this + 533) = "JSSymbolTableObject_symbolTable";
  *((_QWORD *)this + 528) = this;
  v333[0] = (char *)this + 4224;
  if ((_DWORD)v98 == v79)
  {
    v258 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v98 + 1, (unint64_t)v333);
    v98 = *v5;
    *(_QWORD *)(*v2 + 8 * v98) = *v258;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v98) = (char *)this + 4224;
  }
  v99 = (v98 + 1);
  *((_DWORD *)this + 5) = v99;
  *((_QWORD *)this + 536) = 0;
  *((_QWORD *)this + 535) = 0;
  *((_QWORD *)this + 537) = 48;
  *((_QWORD *)this + 538) = 0;
  *((_QWORD *)this + 539) = "JSWebAssemblyInstance_moduleRecord";
  *((_QWORD *)this + 534) = this;
  v333[0] = (char *)this + 4272;
  if ((_DWORD)v99 == v79)
  {
    v259 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v99 + 1, (unint64_t)v333);
    v99 = *v5;
    *(_QWORD *)(*v2 + 8 * v99) = *v259;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v99) = (char *)this + 4272;
  }
  v100 = (v99 + 1);
  *((_DWORD *)this + 5) = v100;
  *((_QWORD *)this + 542) = 0;
  *((_QWORD *)this + 541) = 0;
  *((_QWORD *)this + 543) = 72;
  *((_QWORD *)this + 544) = 0;
  *((_QWORD *)this + 545) = "NativeExecutable_asString";
  *((_QWORD *)this + 540) = this;
  v333[0] = (char *)this + 4320;
  if ((_DWORD)v100 == v79)
  {
    v260 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v100 + 1, (unint64_t)v333);
    v100 = *v5;
    *(_QWORD *)(*v2 + 8 * v100) = *v260;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v100) = (char *)this + 4320;
  }
  v101 = (v100 + 1);
  *((_DWORD *)this + 5) = v101;
  *((_QWORD *)this + 548) = 0;
  *((_QWORD *)this + 547) = 0;
  *((_QWORD *)this + 549) = 16;
  *((_QWORD *)this + 550) = 0;
  *((_QWORD *)this + 551) = "RegExpObject_regExpAndFlags";
  *((_QWORD *)this + 546) = this;
  v333[0] = (char *)this + 4368;
  if ((_DWORD)v101 == v79)
  {
    v261 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v101 + 1, (unint64_t)v333);
    v101 = *v5;
    *(_QWORD *)(*v2 + 8 * v101) = *v261;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v101) = (char *)this + 4368;
  }
  v102 = (v101 + 1);
  *((_DWORD *)this + 5) = v102;
  *((_QWORD *)this + 554) = 0;
  *((_QWORD *)this + 553) = 0;
  *((_QWORD *)this + 555) = 24;
  *((_QWORD *)this + 556) = 0;
  *((_QWORD *)this + 557) = "RegExpObject_lastIndex";
  *((_QWORD *)this + 552) = this;
  v333[0] = (char *)this + 4416;
  if ((_DWORD)v102 == v79)
  {
    v262 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v102 + 1, (unint64_t)v333);
    v102 = *v5;
    *(_QWORD *)(*v2 + 8 * v102) = *v262;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v102) = (char *)this + 4416;
  }
  v103 = (v102 + 1);
  *((_DWORD *)this + 5) = v103;
  *((_QWORD *)this + 560) = 0;
  *((_QWORD *)this + 559) = 0;
  *((_QWORD *)this + 561) = 8;
  *((_QWORD *)this + 562) = 0;
  *((_QWORD *)this + 563) = "ShadowChicken_Packet_callee";
  *((_QWORD *)this + 558) = this;
  v333[0] = (char *)this + 4464;
  if ((_DWORD)v103 == v79)
  {
    v263 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v103 + 1, (unint64_t)v333);
    v103 = *v5;
    *(_QWORD *)(*v2 + 8 * v103) = *v263;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v103) = (char *)this + 4464;
  }
  v104 = (v103 + 1);
  *((_DWORD *)this + 5) = v104;
  *((_QWORD *)this + 566) = 0;
  *((_QWORD *)this + 565) = 0;
  *((_QWORD *)this + 567) = 16;
  *((_QWORD *)this + 568) = 0;
  *((_QWORD *)this + 569) = "ShadowChicken_Packet_frame";
  *((_QWORD *)this + 564) = this;
  v333[0] = (char *)this + 4512;
  if ((_DWORD)v104 == v79)
  {
    v264 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v104 + 1, (unint64_t)v333);
    v104 = *v5;
    *(_QWORD *)(*v2 + 8 * v104) = *v264;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v104) = (char *)this + 4512;
  }
  v105 = (v104 + 1);
  *((_DWORD *)this + 5) = v105;
  *((_QWORD *)this + 572) = 0;
  *((_QWORD *)this + 571) = 0;
  *((_QWORD *)this + 573) = 24;
  *((_QWORD *)this + 574) = 0;
  *((_QWORD *)this + 575) = "ShadowChicken_Packet_callerFrame";
  *((_QWORD *)this + 570) = this;
  v333[0] = (char *)this + 4560;
  if ((_DWORD)v105 == v79)
  {
    v265 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v105 + 1, (unint64_t)v333);
    v105 = *v5;
    *(_QWORD *)(*v2 + 8 * v105) = *v265;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v105) = (char *)this + 4560;
  }
  v106 = (v105 + 1);
  *((_DWORD *)this + 5) = v106;
  *(_OWORD *)((char *)this + 4632) = 0u;
  *(_OWORD *)((char *)this + 4616) = 0u;
  *((_QWORD *)this + 581) = "ShadowChicken_Packet_thisValue";
  *((_QWORD *)this + 576) = this;
  v333[0] = (char *)this + 4608;
  if ((_DWORD)v106 == v79)
  {
    v266 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v106 + 1, (unint64_t)v333);
    v106 = *v5;
    *(_QWORD *)(*v2 + 8 * v106) = *v266;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v106) = (char *)this + 4608;
  }
  v107 = (v106 + 1);
  *((_DWORD *)this + 5) = v107;
  *((_QWORD *)this + 584) = 0;
  *((_QWORD *)this + 583) = 0;
  *((_QWORD *)this + 585) = 32;
  *((_QWORD *)this + 586) = 0;
  *((_QWORD *)this + 587) = "ShadowChicken_Packet_scope";
  *((_QWORD *)this + 582) = this;
  v333[0] = (char *)this + 4656;
  if ((_DWORD)v107 == v79)
  {
    v267 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v107 + 1, (unint64_t)v333);
    v107 = *v5;
    *(_QWORD *)(*v2 + 8 * v107) = *v267;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v107) = (char *)this + 4656;
  }
  v108 = (v107 + 1);
  *((_DWORD *)this + 5) = v108;
  *((_QWORD *)this + 590) = 0;
  *((_QWORD *)this + 589) = 0;
  *((_QWORD *)this + 591) = 40;
  *((_QWORD *)this + 592) = 0;
  *((_QWORD *)this + 593) = "ShadowChicken_Packet_codeBlock";
  *((_QWORD *)this + 588) = this;
  v333[0] = (char *)this + 4704;
  if ((_DWORD)v108 == v79)
  {
    v268 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v108 + 1, (unint64_t)v333);
    v108 = *v5;
    *(_QWORD *)(*v2 + 8 * v108) = *v268;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v108) = (char *)this + 4704;
  }
  v109 = (v108 + 1);
  *((_DWORD *)this + 5) = v109;
  *((_QWORD *)this + 596) = 0;
  *((_QWORD *)this + 595) = 0;
  *((_QWORD *)this + 597) = 48;
  *((_QWORD *)this + 598) = 0;
  *((_QWORD *)this + 599) = "ShadowChicken_Packet_callSiteIndex";
  *((_QWORD *)this + 594) = this;
  v333[0] = (char *)this + 4752;
  if ((_DWORD)v109 == v79)
  {
    v269 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v109 + 1, (unint64_t)v333);
    v109 = *v5;
    *(_QWORD *)(*v2 + 8 * v109) = *v269;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v109) = (char *)this + 4752;
  }
  v110 = (v109 + 1);
  *((_DWORD *)this + 5) = v110;
  *((_QWORD *)this + 602) = 0;
  *((_QWORD *)this + 601) = 0;
  *((_QWORD *)this + 603) = 24;
  *((_QWORD *)this + 604) = 0;
  *((_QWORD *)this + 605) = "ScopedArguments_overrodeThings";
  *((_QWORD *)this + 600) = this;
  v333[0] = (char *)this + 4800;
  if ((_DWORD)v110 == v79)
  {
    v270 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v110 + 1, (unint64_t)v333);
    v110 = *v5;
    *(_QWORD *)(*v2 + 8 * v110) = *v270;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v110) = (char *)this + 4800;
  }
  v111 = (v110 + 1);
  *((_DWORD *)this + 5) = v111;
  *((_QWORD *)this + 608) = 0;
  *((_QWORD *)this + 607) = 0;
  *((_QWORD *)this + 609) = 48;
  *((_QWORD *)this + 610) = 0;
  *((_QWORD *)this + 611) = "ScopedArguments_scope";
  *((_QWORD *)this + 606) = this;
  v333[0] = (char *)this + 4848;
  if ((_DWORD)v111 == v79)
  {
    v271 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v111 + 1, (unint64_t)v333);
    v111 = *v5;
    *(_QWORD *)(*v2 + 8 * v111) = *v271;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v111) = (char *)this + 4848;
  }
  v112 = (v111 + 1);
  *((_DWORD *)this + 5) = v112;
  *((_QWORD *)this + 614) = 0;
  *((_QWORD *)this + 613) = 0;
  *((_QWORD *)this + 615) = 56;
  *((_QWORD *)this + 616) = 0;
  *((_QWORD *)this + 617) = "ScopedArguments_storage";
  *((_QWORD *)this + 612) = this;
  v333[0] = (char *)this + 4896;
  if ((_DWORD)v112 == v79)
  {
    v272 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v112 + 1, (unint64_t)v333);
    v112 = *v5;
    *(_QWORD *)(*v2 + 8 * v112) = *v272;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v112) = (char *)this + 4896;
  }
  v113 = (v112 + 1);
  *((_DWORD *)this + 5) = v113;
  *((_QWORD *)this + 620) = 0;
  *((_QWORD *)this + 619) = 0;
  *((_QWORD *)this + 621) = 40;
  *((_QWORD *)this + 622) = 0;
  *((_QWORD *)this + 623) = "ScopedArguments_table";
  *((_QWORD *)this + 618) = this;
  v333[0] = (char *)this + 4944;
  if ((_DWORD)v113 == v79)
  {
    v273 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v113 + 1, (unint64_t)v333);
    v113 = *v5;
    *(_QWORD *)(*v2 + 8 * v113) = *v273;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v113) = (char *)this + 4944;
  }
  v114 = (v113 + 1);
  *((_DWORD *)this + 5) = v114;
  *((_QWORD *)this + 626) = 0;
  *((_QWORD *)this + 625) = 0;
  *((_QWORD *)this + 627) = 28;
  *((_QWORD *)this + 628) = 0;
  *((_QWORD *)this + 629) = "ScopedArguments_totalLength";
  *((_QWORD *)this + 624) = this;
  v333[0] = (char *)this + 4992;
  if ((_DWORD)v114 == v79)
  {
    v274 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v114 + 1, (unint64_t)v333);
    v114 = *v5;
    *(_QWORD *)(*v2 + 8 * v114) = *v274;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v114) = (char *)this + 4992;
  }
  v115 = (v114 + 1);
  *((_DWORD *)this + 5) = v115;
  *((_QWORD *)this + 632) = 0;
  *((_QWORD *)this + 631) = 0;
  *((_QWORD *)this + 633) = 16;
  *((_QWORD *)this + 634) = 0;
  *((_QWORD *)this + 635) = "ScopedArgumentsTable_arguments";
  *((_QWORD *)this + 630) = this;
  v333[0] = (char *)this + 5040;
  if ((_DWORD)v115 == v79)
  {
    v275 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v115 + 1, (unint64_t)v333);
    v115 = *v5;
    *(_QWORD *)(*v2 + 8 * v115) = *v275;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v115) = (char *)this + 5040;
  }
  v116 = (v115 + 1);
  *((_DWORD *)this + 5) = v116;
  *((_QWORD *)this + 638) = 0;
  *((_QWORD *)this + 637) = 0;
  *((_QWORD *)this + 639) = 8;
  *((_QWORD *)this + 640) = 0;
  *((_QWORD *)this + 641) = "ScopedArgumentsTable_length";
  *((_QWORD *)this + 636) = this;
  v333[0] = (char *)this + 5088;
  if ((_DWORD)v116 == v79)
  {
    v276 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v116 + 1, (unint64_t)v333);
    v116 = *v5;
    *(_QWORD *)(*v2 + 8 * v116) = *v276;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v116) = (char *)this + 5088;
  }
  v117 = (v116 + 1);
  *((_DWORD *)this + 5) = v117;
  *((_QWORD *)this + 644) = 0;
  *((_QWORD *)this + 643) = 0;
  *((_QWORD *)this + 645) = 8;
  *((_QWORD *)this + 646) = 0;
  *((_QWORD *)this + 647) = "StringImpl_data";
  *((_QWORD *)this + 642) = this;
  v333[0] = (char *)this + 5136;
  if ((_DWORD)v117 == v79)
  {
    v277 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v117 + 1, (unint64_t)v333);
    v117 = *v5;
    *(_QWORD *)(*v2 + 8 * v117) = *v277;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v117) = (char *)this + 5136;
  }
  v118 = (v117 + 1);
  *((_DWORD *)this + 5) = v118;
  *((_QWORD *)this + 650) = 0;
  *((_QWORD *)this + 649) = 0;
  *((_QWORD *)this + 651) = 16;
  *((_QWORD *)this + 652) = 0;
  *((_QWORD *)this + 653) = "StringImpl_hashAndFlags";
  *((_QWORD *)this + 648) = this;
  v333[0] = (char *)this + 5184;
  if ((_DWORD)v118 == v79)
  {
    v278 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v118 + 1, (unint64_t)v333);
    v118 = *v5;
    *(_QWORD *)(*v2 + 8 * v118) = *v278;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v118) = (char *)this + 5184;
  }
  v119 = (v118 + 1);
  *((_DWORD *)this + 5) = v119;
  *((_QWORD *)this + 656) = 0;
  *((_QWORD *)this + 655) = 0;
  *((_QWORD *)this + 657) = 4;
  *((_QWORD *)this + 658) = 0;
  *((_QWORD *)this + 659) = "StringImpl_length";
  *((_QWORD *)this + 654) = this;
  v333[0] = (char *)this + 5232;
  if ((_DWORD)v119 == v79)
  {
    v279 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v119 + 1, (unint64_t)v333);
    v119 = *v5;
    *(_QWORD *)(*v2 + 8 * v119) = *v279;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v119) = (char *)this + 5232;
  }
  v120 = (v119 + 1);
  *((_DWORD *)this + 5) = v120;
  *((_QWORD *)this + 662) = 0;
  *((_QWORD *)this + 661) = 0;
  *((_QWORD *)this + 663) = 16;
  *((_QWORD *)this + 664) = 0;
  *((_QWORD *)this + 665) = "Structure_bitField";
  *((_QWORD *)this + 660) = this;
  v333[0] = (char *)this + 5280;
  if ((_DWORD)v120 == v79)
  {
    v280 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v120 + 1, (unint64_t)v333);
    v120 = *v5;
    *(_QWORD *)(*v2 + 8 * v120) = *v280;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v120) = (char *)this + 5280;
  }
  v121 = (v120 + 1);
  *((_DWORD *)this + 5) = v121;
  *((_QWORD *)this + 668) = 0;
  *((_QWORD *)this + 667) = 0;
  *((_QWORD *)this + 669) = 76;
  *((_QWORD *)this + 670) = 0;
  *((_QWORD *)this + 671) = "Structure_classInfo";
  *((_QWORD *)this + 666) = this;
  v333[0] = (char *)this + 5328;
  if ((_DWORD)v121 == v79)
  {
    v281 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v121 + 1, (unint64_t)v333);
    v121 = *v5;
    *(_QWORD *)(*v2 + 8 * v121) = *v281;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v121) = (char *)this + 5328;
  }
  v122 = (v121 + 1);
  *((_DWORD *)this + 5) = v122;
  *((_QWORD *)this + 674) = 0;
  *((_QWORD *)this + 673) = 0;
  *((_QWORD *)this + 675) = 40;
  *((_QWORD *)this + 676) = 0;
  *((_QWORD *)this + 677) = "Structure_globalObject";
  *((_QWORD *)this + 672) = this;
  v333[0] = (char *)this + 5376;
  if ((_DWORD)v122 == v79)
  {
    v282 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v122 + 1, (unint64_t)v333);
    v122 = *v5;
    *(_QWORD *)(*v2 + 8 * v122) = *v282;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v122) = (char *)this + 5376;
  }
  v123 = (v122 + 1);
  *((_DWORD *)this + 5) = v123;
  *((_QWORD *)this + 680) = 0;
  *((_QWORD *)this + 679) = 0;
  *((_QWORD *)this + 681) = 8;
  *((_QWORD *)this + 682) = 0;
  *((_QWORD *)this + 683) = "Structure_indexingModeIncludingHistory";
  *((_QWORD *)this + 678) = this;
  v333[0] = (char *)this + 5424;
  if ((_DWORD)v123 == v79)
  {
    v283 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v123 + 1, (unint64_t)v333);
    v123 = *v5;
    *(_QWORD *)(*v2 + 8 * v123) = *v283;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v123) = (char *)this + 5424;
  }
  v124 = (v123 + 1);
  *((_DWORD *)this + 5) = v124;
  *((_QWORD *)this + 686) = 0;
  *((_QWORD *)this + 685) = 0;
  *((_QWORD *)this + 687) = 14;
  *((_QWORD *)this + 688) = 0;
  *((_QWORD *)this + 689) = "Structure_inlineCapacity";
  *((_QWORD *)this + 684) = this;
  v333[0] = (char *)this + 5472;
  if ((_DWORD)v124 == v79)
  {
    v284 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v124 + 1, (unint64_t)v333);
    v124 = *v5;
    *(_QWORD *)(*v2 + 8 * v124) = *v284;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v124) = (char *)this + 5472;
  }
  v125 = (v124 + 1);
  *((_DWORD *)this + 5) = v125;
  *((_QWORD *)this + 692) = 0;
  *((_QWORD *)this + 691) = 0;
  *((_QWORD *)this + 693) = 12;
  *((_QWORD *)this + 694) = 0;
  *((_QWORD *)this + 695) = "Structure_outOfLineTypeFlags";
  *((_QWORD *)this + 690) = this;
  v333[0] = (char *)this + 5520;
  if ((_DWORD)v125 == v79)
  {
    v285 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v125 + 1, (unint64_t)v333);
    v125 = *v5;
    *(_QWORD *)(*v2 + 8 * v125) = *v285;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v125) = (char *)this + 5520;
  }
  v126 = (v125 + 1);
  *((_DWORD *)this + 5) = v126;
  *((_QWORD *)this + 698) = 0;
  *((_QWORD *)this + 697) = 0;
  *((_QWORD *)this + 699) = 64;
  *((_QWORD *)this + 700) = 0;
  *((_QWORD *)this + 701) = "Structure_previousOrRareData";
  *((_QWORD *)this + 696) = this;
  v333[0] = (char *)this + 5568;
  if ((_DWORD)v126 == v79)
  {
    v286 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v126 + 1, (unint64_t)v333);
    v126 = *v5;
    *(_QWORD *)(*v2 + 8 * v126) = *v286;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v126) = (char *)this + 5568;
  }
  v127 = (v126 + 1);
  *((_DWORD *)this + 5) = v127;
  *((_QWORD *)this + 704) = 0;
  *((_QWORD *)this + 703) = 0;
  *((_QWORD *)this + 705) = 28;
  *((_QWORD *)this + 706) = 0;
  *((_QWORD *)this + 707) = "Structure_propertyHash";
  *((_QWORD *)this + 702) = this;
  v333[0] = (char *)this + 5616;
  if ((_DWORD)v127 == v79)
  {
    v287 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v127 + 1, (unint64_t)v333);
    v127 = *v5;
    *(_QWORD *)(*v2 + 8 * v127) = *v287;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v127) = (char *)this + 5616;
  }
  v128 = (v127 + 1);
  *((_DWORD *)this + 5) = v128;
  *((_QWORD *)this + 710) = 0;
  *((_QWORD *)this + 709) = 0;
  *((_QWORD *)this + 711) = 48;
  *((_QWORD *)this + 712) = 0;
  *((_QWORD *)this + 713) = "Structure_prototype";
  *((_QWORD *)this + 708) = this;
  v333[0] = (char *)this + 5664;
  if ((_DWORD)v128 == v79)
  {
    v288 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v128 + 1, (unint64_t)v333);
    v128 = *v5;
    *(_QWORD *)(*v2 + 8 * v128) = *v288;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v128) = (char *)this + 5664;
  }
  v129 = (v128 + 1);
  *((_DWORD *)this + 5) = v129;
  *((_QWORD *)this + 716) = 0;
  *((_QWORD *)this + 715) = 0;
  *((_QWORD *)this + 717) = 32;
  *((_QWORD *)this + 718) = 0;
  *((_QWORD *)this + 719) = "Structure_seenProperties";
  *((_QWORD *)this + 714) = this;
  v333[0] = (char *)this + 5712;
  if ((_DWORD)v129 == v79)
  {
    v289 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v129 + 1, (unint64_t)v333);
    v129 = *v5;
    *(_QWORD *)(*v2 + 8 * v129) = *v289;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v129) = (char *)this + 5712;
  }
  v130 = (v129 + 1);
  *((_DWORD *)this + 5) = v130;
  *((_QWORD *)this + 722) = 0;
  *((_QWORD *)this + 721) = 0;
  *((_QWORD *)this + 723) = 24;
  *((_QWORD *)this + 724) = 0;
  *((_QWORD *)this + 725) = "StructureRareData_cachedEnumerableStrings";
  *((_QWORD *)this + 720) = this;
  v333[0] = (char *)this + 5760;
  if ((_DWORD)v130 == v79)
  {
    v290 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v130 + 1, (unint64_t)v333);
    v130 = *v5;
    *(_QWORD *)(*v2 + 8 * v130) = *v290;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v130) = (char *)this + 5760;
  }
  v131 = (v130 + 1);
  *((_DWORD *)this + 5) = v131;
  *((_QWORD *)this + 728) = 0;
  *((_QWORD *)this + 727) = 0;
  *((_QWORD *)this + 729) = 32;
  *((_QWORD *)this + 730) = 0;
  *((_QWORD *)this + 731) = "StructureRareData_cachedStrings";
  *((_QWORD *)this + 726) = this;
  v333[0] = (char *)this + 5808;
  if ((_DWORD)v131 == v79)
  {
    v291 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v131 + 1, (unint64_t)v333);
    v131 = *v5;
    *(_QWORD *)(*v2 + 8 * v131) = *v291;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v131) = (char *)this + 5808;
  }
  v132 = (v131 + 1);
  *((_DWORD *)this + 5) = v132;
  *((_QWORD *)this + 734) = 0;
  *((_QWORD *)this + 733) = 0;
  *((_QWORD *)this + 735) = 40;
  *((_QWORD *)this + 736) = 0;
  *((_QWORD *)this + 737) = "StructureRareData_cachedSymbols";
  *((_QWORD *)this + 732) = this;
  v333[0] = (char *)this + 5856;
  if ((_DWORD)v132 == v79)
  {
    v292 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v132 + 1, (unint64_t)v333);
    v132 = *v5;
    *(_QWORD *)(*v2 + 8 * v132) = *v292;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v132) = (char *)this + 5856;
  }
  v133 = (v132 + 1);
  *((_DWORD *)this + 5) = v133;
  *((_QWORD *)this + 740) = 0;
  *((_QWORD *)this + 739) = 0;
  *((_QWORD *)this + 741) = 48;
  *((_QWORD *)this + 742) = 0;
  *((_QWORD *)this + 743) = "StructureRareData_cachedStringsAndSymbols";
  *((_QWORD *)this + 738) = this;
  v333[0] = (char *)this + 5904;
  if ((_DWORD)v133 == v79)
  {
    v293 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v133 + 1, (unint64_t)v333);
    v133 = *v5;
    *(_QWORD *)(*v2 + 8 * v133) = *v293;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v133) = (char *)this + 5904;
  }
  v134 = (v133 + 1);
  *((_DWORD *)this + 5) = v134;
  *((_QWORD *)this + 746) = 0;
  *((_QWORD *)this + 745) = 0;
  *((_QWORD *)this + 747) = 8;
  *((_QWORD *)this + 748) = 0;
  *((_QWORD *)this + 749) = "StructureRareData_cachedPropertyNameEnumeratorAndFlag";
  *((_QWORD *)this + 744) = this;
  v333[0] = (char *)this + 5952;
  if ((_DWORD)v134 == v79)
  {
    v294 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v134 + 1, (unint64_t)v333);
    v134 = *v5;
    *(_QWORD *)(*v2 + 8 * v134) = *v294;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v134) = (char *)this + 5952;
  }
  v135 = (v134 + 1);
  *((_DWORD *)this + 5) = v135;
  *((_QWORD *)this + 752) = 0;
  *((_QWORD *)this + 751) = 0;
  *((_QWORD *)this + 753) = 64;
  *((_QWORD *)this + 754) = 0;
  *((_QWORD *)this + 755) = "StructureRareData_specialPropertyCache";
  *((_QWORD *)this + 750) = this;
  v333[0] = (char *)this + 6000;
  if ((_DWORD)v135 == v79)
  {
    v295 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v135 + 1, (unint64_t)v333);
    v135 = *v5;
    *(_QWORD *)(*v2 + 8 * v135) = *v295;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v135) = (char *)this + 6000;
  }
  v136 = (v135 + 1);
  *((_DWORD *)this + 5) = v136;
  *((_QWORD *)this + 758) = 0;
  *((_QWORD *)this + 757) = 0;
  *((_QWORD *)this + 759) = 16;
  *((_QWORD *)this + 760) = 0;
  *((_QWORD *)this + 761) = "SpecialPropertyCache_cachedToStringTagValue";
  *((_QWORD *)this + 756) = this;
  v333[0] = (char *)this + 6048;
  if ((_DWORD)v136 == v79)
  {
    v296 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v136 + 1, (unint64_t)v333);
    v136 = *v5;
    *(_QWORD *)(*v2 + 8 * v136) = *v296;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v136) = (char *)this + 6048;
  }
  v137 = (v136 + 1);
  *((_DWORD *)this + 5) = v137;
  *((_QWORD *)this + 764) = 0;
  *((_QWORD *)this + 763) = 0;
  *((_QWORD *)this + 765) = 16;
  *((_QWORD *)this + 766) = 0;
  *((_QWORD *)this + 767) = "JSMap_butterfly";
  *((_QWORD *)this + 762) = this;
  v333[0] = (char *)this + 6096;
  if ((_DWORD)v137 == v79)
  {
    v297 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v137 + 1, (unint64_t)v333);
    v137 = *v5;
    *(_QWORD *)(*v2 + 8 * v137) = *v297;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v137) = (char *)this + 6096;
  }
  v138 = (v137 + 1);
  *((_DWORD *)this + 5) = v138;
  *((_QWORD *)this + 770) = 0;
  *((_QWORD *)this + 769) = 0;
  *((_QWORD *)this + 771) = 16;
  *((_QWORD *)this + 772) = 0;
  *((_QWORD *)this + 773) = "JSSet_butterfly";
  *((_QWORD *)this + 768) = this;
  v333[0] = (char *)this + 6144;
  if ((_DWORD)v138 == v79)
  {
    v298 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v138 + 1, (unint64_t)v333);
    v138 = *v5;
    *(_QWORD *)(*v2 + 8 * v138) = *v298;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v138) = (char *)this + 6144;
  }
  v139 = (v138 + 1);
  *((_DWORD *)this + 5) = v139;
  *((_QWORD *)this + 776) = 0;
  *((_QWORD *)this + 775) = 0;
  *((_QWORD *)this + 777) = 760;
  *((_QWORD *)this + 778) = 0;
  *((_QWORD *)this + 779) = "VM_heap_barrierThreshold";
  *((_QWORD *)this + 774) = this;
  v333[0] = (char *)this + 6192;
  if ((_DWORD)v139 == v79)
  {
    v299 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v139 + 1, (unint64_t)v333);
    v139 = *v5;
    *(_QWORD *)(*v2 + 8 * v139) = *v299;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v139) = (char *)this + 6192;
  }
  v140 = (v139 + 1);
  *((_DWORD *)this + 5) = v140;
  *((_QWORD *)this + 782) = 0;
  *((_QWORD *)this + 781) = 0;
  *((_QWORD *)this + 783) = 755;
  *((_QWORD *)this + 784) = 0;
  *((_QWORD *)this + 785) = "VM_heap_mutatorShouldBeFenced";
  *((_QWORD *)this + 780) = this;
  v333[0] = (char *)this + 6240;
  if ((_DWORD)v140 == v79)
  {
    v300 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v140 + 1, (unint64_t)v333);
    v140 = *v5;
    *(_QWORD *)(*v2 + 8 * v140) = *v300;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v140) = (char *)this + 6240;
  }
  v141 = (v140 + 1);
  *((_DWORD *)this + 5) = v141;
  *((_QWORD *)this + 788) = 0;
  *((_QWORD *)this + 787) = 0;
  *((_QWORD *)this + 789) = 16;
  *((_QWORD *)this + 790) = 0;
  *((_QWORD *)this + 791) = "VM_exception";
  *((_QWORD *)this + 786) = this;
  v333[0] = (char *)this + 6288;
  if ((_DWORD)v141 == v79)
  {
    v301 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v141 + 1, (unint64_t)v333);
    v141 = *v5;
    *(_QWORD *)(*v2 + 8 * v141) = *v301;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v141) = (char *)this + 6288;
  }
  v142 = (v141 + 1);
  *((_DWORD *)this + 5) = v142;
  *((_QWORD *)this + 794) = 0;
  *((_QWORD *)this + 793) = 0;
  *((_QWORD *)this + 795) = 24;
  *((_QWORD *)this + 796) = 0;
  *((_QWORD *)this + 797) = "WeakMapImpl_capacity";
  *((_QWORD *)this + 792) = this;
  v333[0] = (char *)this + 6336;
  if ((_DWORD)v142 == v79)
  {
    v302 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v142 + 1, (unint64_t)v333);
    v142 = *v5;
    *(_QWORD *)(*v2 + 8 * v142) = *v302;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v142) = (char *)this + 6336;
  }
  v143 = (v142 + 1);
  *((_DWORD *)this + 5) = v143;
  *((_QWORD *)this + 800) = 0;
  *((_QWORD *)this + 799) = 0;
  *((_QWORD *)this + 801) = 16;
  *((_QWORD *)this + 802) = 0;
  *((_QWORD *)this + 803) = "WeakMapImpl_buffer";
  *((_QWORD *)this + 798) = this;
  v333[0] = (char *)this + 6384;
  if ((_DWORD)v143 == v79)
  {
    v303 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v143 + 1, (unint64_t)v333);
    v143 = *v5;
    *(_QWORD *)(*v2 + 8 * v143) = *v303;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v143) = (char *)this + 6384;
  }
  v144 = (v143 + 1);
  *((_DWORD *)this + 5) = v144;
  *((_QWORD *)this + 806) = 0;
  *((_QWORD *)this + 805) = 0;
  *((_QWORD *)this + 807) = 8;
  *((_QWORD *)this + 808) = 0;
  *((_QWORD *)this + 809) = "WeakMapBucket_value";
  *((_QWORD *)this + 804) = this;
  v333[0] = (char *)this + 6432;
  if ((_DWORD)v144 == v79)
  {
    v304 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v144 + 1, (unint64_t)v333);
    v144 = *v5;
    *(_QWORD *)(*v2 + 8 * v144) = *v304;
    v79 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v144) = (char *)this + 6432;
  }
  v145 = (v144 + 1);
  *((_DWORD *)this + 5) = v145;
  *(_OWORD *)((char *)this + 6504) = 0u;
  *(_OWORD *)((char *)this + 6488) = 0u;
  *((_QWORD *)this + 815) = "WeakMapBucket_key";
  *((_QWORD *)this + 810) = this;
  v333[0] = (char *)this + 6480;
  if ((_DWORD)v145 == v79)
  {
    v305 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v145 + 1, (unint64_t)v333);
    v145 = *v5;
    *(_QWORD *)(*v2 + 8 * v145) = *v305;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v145) = (char *)this + 6480;
  }
  v146 = (v145 + 1);
  *((_DWORD *)this + 5) = v146;
  *((_QWORD *)this + 818) = 0;
  *((_QWORD *)this + 817) = 0;
  *((_QWORD *)this + 819) = 144;
  *((_QWORD *)this + 820) = 0;
  *((_QWORD *)this + 821) = "WebAssemblyModuleRecord_exportsObject";
  *((_QWORD *)this + 816) = this;
  v333[0] = (char *)this + 6528;
  v147 = *((_DWORD *)this + 4);
  if ((_DWORD)v146 == v147)
  {
    v306 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v146 + 1, (unint64_t)v333);
    v146 = *v5;
    *(_QWORD *)(*v2 + 8 * v146) = *v306;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v146) = (char *)this + 6528;
  }
  v148 = (v146 + 1);
  *((_DWORD *)this + 5) = v148;
  *((_QWORD *)this + 824) = 0;
  *((_QWORD *)this + 823) = 0;
  *((_QWORD *)this + 825) = 8;
  *((_QWORD *)this + 826) = 0;
  *((_QWORD *)this + 827) = "Symbol_symbolImpl";
  *((_QWORD *)this + 822) = this;
  v333[0] = (char *)this + 6576;
  if ((_DWORD)v148 == v147)
  {
    v307 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v148 + 1, (unint64_t)v333);
    v148 = *v5;
    *(_QWORD *)(*v2 + 8 * v148) = *v307;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v148) = (char *)this + 6576;
  }
  v149 = (v148 + 1);
  *((_DWORD *)this + 5) = v149;
  *((_QWORD *)this + 828) = v70;
  *((_QWORD *)this + 829) = v13;
  *((_QWORD *)this + 830) = v15;
  *((_OWORD *)this + 416) = 0u;
  *((_OWORD *)this + 417) = 0u;
  *((_QWORD *)this + 836) = "ArrayStorage_vector";
  *((_QWORD *)this + 831) = this;
  v333[0] = (char *)this + 6648;
  if ((_DWORD)v149 == v147)
  {
    v308 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v149 + 1, (unint64_t)v333);
    v149 = *v5;
    *(_QWORD *)(*v2 + 8 * v149) = *v308;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v149) = (char *)this + 6648;
  }
  v150 = (v149 + 1);
  *((_DWORD *)this + 5) = v150;
  *((_QWORD *)this + 837) = 19;
  *((_OWORD *)this + 419) = xmmword_1991566E0;
  bzero((char *)this + 6720, 0x308uLL);
  *((_QWORD *)this + 937) = (char *)this + 7512;
  *((_QWORD *)this + 938) = 16;
  *((_OWORD *)this + 478) = 0u;
  *((_OWORD *)this + 479) = 0u;
  *((_QWORD *)this + 960) = "CompleteSubspace_allocatorForSizeStep";
  *((_QWORD *)this + 955) = this;
  v333[0] = (char *)this + 7640;
  if ((_DWORD)v150 == v147)
  {
    v309 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v150 + 1, (unint64_t)v333);
    v150 = *v5;
    *(_QWORD *)(*v2 + 8 * v150) = *v309;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v150) = (char *)this + 7640;
  }
  v151 = (v150 + 1);
  *((_DWORD *)this + 5) = v151;
  *((_QWORD *)this + 961) = 37;
  *((_OWORD *)this + 481) = xmmword_1991566F0;
  bzero((char *)this + 7712, 0x308uLL);
  *((_QWORD *)this + 1061) = (char *)this + 8504;
  *((_QWORD *)this + 1062) = 16;
  *((_OWORD *)this + 540) = 0u;
  *((_OWORD *)this + 541) = 0u;
  *((_QWORD *)this + 1084) = "DirectArguments_storage";
  *((_QWORD *)this + 1079) = this;
  v333[0] = (char *)this + 8632;
  if ((_DWORD)v151 == v147)
  {
    v310 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v151 + 1, (unint64_t)v333);
    v151 = *v5;
    *(_QWORD *)(*v2 + 8 * v151) = *v310;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v151) = (char *)this + 8632;
  }
  v152 = (v151 + 1);
  *((_DWORD *)this + 5) = v152;
  *((_QWORD *)this + 1085) = 23;
  *((_OWORD *)this + 543) = xmmword_199156700;
  bzero((char *)this + 8704, 0x308uLL);
  *((_QWORD *)this + 1185) = (char *)this + 9496;
  *((_QWORD *)this + 1186) = 16;
  *((_OWORD *)this + 602) = 0u;
  *((_OWORD *)this + 603) = 0u;
  *((_QWORD *)this + 1208) = "JSLexicalEnvironment_variables";
  *((_QWORD *)this + 1203) = this;
  v333[0] = (char *)this + 9624;
  if ((_DWORD)v152 == v147)
  {
    v311 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v152 + 1, (unint64_t)v333);
    v152 = *v5;
    *(_QWORD *)(*v2 + 8 * v152) = *v311;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v152) = (char *)this + 9624;
  }
  v153 = (v152 + 1);
  *((_DWORD *)this + 5) = v153;
  *((_QWORD *)this + 1209) = 30;
  *((_OWORD *)this + 605) = xmmword_199156710;
  bzero((char *)this + 9696, 0x308uLL);
  *((_QWORD *)this + 1309) = (char *)this + 10488;
  *((_QWORD *)this + 1310) = 16;
  *((_OWORD *)this + 664) = 0u;
  *((_OWORD *)this + 665) = 0u;
  *((_QWORD *)this + 1332) = "JSPropertyNameEnumerator_cachedPropertyNamesVectorContents";
  *((_QWORD *)this + 1327) = this;
  v333[0] = (char *)this + 10616;
  if ((_DWORD)v153 == v147)
  {
    v312 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v153 + 1, (unint64_t)v333);
    v153 = *v5;
    *(_QWORD *)(*v2 + 8 * v153) = *v312;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v153) = (char *)this + 10616;
  }
  v332 = (JSC::FTL::AbstractHeapRepository *)((char *)this + 2928);
  v154 = (v153 + 1);
  *((_DWORD *)this + 5) = v154;
  *((_QWORD *)this + 1333) = 58;
  *((_OWORD *)this + 667) = xmmword_199156720;
  bzero((char *)this + 10688, 0x308uLL);
  *((_QWORD *)this + 1433) = (char *)this + 11480;
  *((_QWORD *)this + 1434) = 16;
  *((_OWORD *)this + 726) = 0u;
  *((_OWORD *)this + 727) = 0u;
  *((_QWORD *)this + 1456) = "JSInternalFieldObjectImpl_internalFields";
  *((_QWORD *)this + 1451) = this;
  v333[0] = (char *)this + 11608;
  if ((_DWORD)v154 == v147)
  {
    v313 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v154 + 1, (unint64_t)v333);
    v154 = *v5;
    *(_QWORD *)(*v2 + 8 * v154) = *v313;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v154) = (char *)this + 11608;
  }
  v155 = (v154 + 1);
  *((_DWORD *)this + 5) = v155;
  *((_QWORD *)this + 1457) = 40;
  *((_OWORD *)this + 729) = xmmword_1991566E0;
  bzero((char *)this + 11680, 0x308uLL);
  *((_QWORD *)this + 1557) = (char *)this + 12472;
  *((_QWORD *)this + 1558) = 16;
  *((_OWORD *)this + 788) = 0u;
  *((_OWORD *)this + 789) = 0u;
  *((_QWORD *)this + 1580) = "ScopedArguments_Storage_storage";
  *((_QWORD *)this + 1575) = this;
  v333[0] = (char *)this + 12600;
  if ((_DWORD)v155 == v147)
  {
    v314 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v155 + 1, (unint64_t)v333);
    v155 = *v5;
    *(_QWORD *)(*v2 + 8 * v155) = *v314;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v155) = (char *)this + 12600;
  }
  v156 = (v155 + 1);
  *((_DWORD *)this + 5) = v156;
  *((_QWORD *)this + 1581) = 31;
  *((_OWORD *)this + 791) = xmmword_199156720;
  bzero((char *)this + 12672, 0x308uLL);
  *((_QWORD *)this + 1681) = (char *)this + 13464;
  *((_QWORD *)this + 1682) = 16;
  *((_OWORD *)this + 850) = 0u;
  *((_OWORD *)this + 851) = 0u;
  *((_QWORD *)this + 1704) = "WriteBarrierBuffer_bufferContents";
  *((_QWORD *)this + 1699) = this;
  v333[0] = (char *)this + 13592;
  if ((_DWORD)v156 == v147)
  {
    v315 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v156 + 1, (unint64_t)v333);
    v156 = *v5;
    *(_QWORD *)(*v2 + 8 * v156) = *v315;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v156) = (char *)this + 13592;
  }
  v157 = (v156 + 1);
  *((_DWORD *)this + 5) = v157;
  *((_QWORD *)this + 1705) = 33;
  *((_OWORD *)this + 853) = xmmword_199156720;
  bzero((char *)this + 13664, 0x308uLL);
  *((_QWORD *)this + 1805) = (char *)this + 14456;
  *((_QWORD *)this + 1806) = 16;
  *((_OWORD *)this + 912) = 0u;
  *((_OWORD *)this + 913) = 0u;
  *((_QWORD *)this + 1828) = "characters8";
  *((_QWORD *)this + 1823) = this;
  v333[0] = (char *)this + 14584;
  if ((_DWORD)v157 == v147)
  {
    v316 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v157 + 1, (unint64_t)v333);
    v157 = *v5;
    *(_QWORD *)(*v2 + 8 * v157) = *v316;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v157) = (char *)this + 14584;
  }
  v158 = (v157 + 1);
  *((_DWORD *)this + 5) = v158;
  *((_QWORD *)this + 1829) = 11;
  *((_OWORD *)this + 915) = xmmword_19914FB90;
  bzero((char *)this + 14656, 0x308uLL);
  *((_QWORD *)this + 1929) = (char *)this + 15448;
  *((_QWORD *)this + 1930) = 16;
  *((_OWORD *)this + 974) = 0u;
  *((_OWORD *)this + 975) = 0u;
  *((_QWORD *)this + 1952) = "characters16";
  *((_QWORD *)this + 1947) = this;
  v333[0] = (char *)this + 15576;
  if ((_DWORD)v158 == v147)
  {
    v317 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v158 + 1, (unint64_t)v333);
    v158 = *v5;
    *(_QWORD *)(*v2 + 8 * v158) = *v317;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v158) = (char *)this + 15576;
  }
  v159 = (v158 + 1);
  *((_DWORD *)this + 5) = v159;
  *((_QWORD *)this + 1953) = 12;
  *((_OWORD *)this + 977) = xmmword_199155E70;
  bzero((char *)this + 15648, 0x308uLL);
  *((_QWORD *)this + 2053) = (char *)this + 16440;
  *((_QWORD *)this + 2054) = 16;
  *((_OWORD *)this + 1036) = 0u;
  *((_OWORD *)this + 1037) = 0u;
  *((_QWORD *)this + 2076) = "indexedInt32Properties";
  *((_QWORD *)this + 2071) = this;
  v333[0] = (char *)this + 16568;
  if ((_DWORD)v159 == v147)
  {
    v318 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v159 + 1, (unint64_t)v333);
    v159 = *v5;
    *(_QWORD *)(*v2 + 8 * v159) = *v318;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v159) = (char *)this + 16568;
  }
  v160 = (v159 + 1);
  *((_DWORD *)this + 5) = v160;
  *((_QWORD *)this + 2077) = 22;
  *((_OWORD *)this + 1039) = xmmword_199156720;
  bzero((char *)this + 16640, 0x308uLL);
  *((_QWORD *)this + 2177) = (char *)this + 17432;
  *((_QWORD *)this + 2178) = 16;
  *((_OWORD *)this + 1098) = 0u;
  *((_OWORD *)this + 1099) = 0u;
  *((_QWORD *)this + 2200) = "indexedDoubleProperties";
  *((_QWORD *)this + 2195) = this;
  v333[0] = (char *)this + 17560;
  if ((_DWORD)v160 == v147)
  {
    v319 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v160 + 1, (unint64_t)v333);
    v160 = *v5;
    *(_QWORD *)(*v2 + 8 * v160) = *v319;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v160) = (char *)this + 17560;
  }
  v161 = (v160 + 1);
  *((_DWORD *)this + 5) = v161;
  *((_QWORD *)this + 2201) = 23;
  *((_OWORD *)this + 1101) = xmmword_199156720;
  bzero((char *)this + 17632, 0x308uLL);
  *((_QWORD *)this + 2301) = (char *)this + 18424;
  *((_QWORD *)this + 2302) = 16;
  *((_OWORD *)this + 1160) = 0u;
  *((_OWORD *)this + 1161) = 0u;
  *((_QWORD *)this + 2324) = "indexedContiguousProperties";
  *((_QWORD *)this + 2319) = this;
  v333[0] = (char *)this + 18552;
  if ((_DWORD)v161 == v147)
  {
    v320 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v161 + 1, (unint64_t)v333);
    v161 = *v5;
    *(_QWORD *)(*v2 + 8 * v161) = *v320;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v161) = (char *)this + 18552;
  }
  v162 = (v161 + 1);
  *((_DWORD *)this + 5) = v162;
  *((_QWORD *)this + 2325) = 27;
  *((_OWORD *)this + 1163) = xmmword_199156720;
  bzero((char *)this + 18624, 0x308uLL);
  *((_QWORD *)this + 2425) = (char *)this + 19416;
  *((_QWORD *)this + 2426) = 16;
  *((_OWORD *)this + 1222) = 0u;
  *((_OWORD *)this + 1223) = 0u;
  *((_QWORD *)this + 2448) = "scopedArgumentsTableArguments";
  *((_QWORD *)this + 2443) = this;
  v333[0] = (char *)this + 19544;
  if ((_DWORD)v162 == v147)
  {
    v321 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v162 + 1, (unint64_t)v333);
    v162 = *v5;
    *(_QWORD *)(*v2 + 8 * v162) = *v321;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v162) = (char *)this + 19544;
  }
  v163 = (v162 + 1);
  *((_DWORD *)this + 5) = v163;
  *((_QWORD *)this + 2449) = 29;
  *((_OWORD *)this + 1225) = xmmword_199156730;
  bzero((char *)this + 19616, 0x308uLL);
  *((_QWORD *)this + 2549) = (char *)this + 20408;
  *((_QWORD *)this + 2550) = 16;
  *((_OWORD *)this + 1284) = 0u;
  *((_OWORD *)this + 1285) = 0u;
  *((_QWORD *)this + 2572) = "singleCharacterStrings";
  *((_QWORD *)this + 2567) = this;
  v333[0] = (char *)this + 20536;
  if ((_DWORD)v163 == v147)
  {
    v322 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v163 + 1, (unint64_t)v333);
    v163 = *v5;
    *(_QWORD *)(*v2 + 8 * v163) = *v322;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v163) = (char *)this + 20536;
  }
  v164 = (v163 + 1);
  *((_DWORD *)this + 5) = v164;
  *((_QWORD *)this + 2573) = 22;
  *((_OWORD *)this + 1287) = xmmword_199156720;
  bzero((char *)this + 20608, 0x308uLL);
  *((_QWORD *)this + 2673) = (char *)this + 21400;
  *((_QWORD *)this + 2674) = 16;
  *((_OWORD *)this + 1346) = 0u;
  *((_OWORD *)this + 1347) = 0u;
  *((_QWORD *)this + 2696) = "structureTable";
  *((_QWORD *)this + 2691) = this;
  v333[0] = (char *)this + 21528;
  if ((_DWORD)v164 == v147)
  {
    v323 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v164 + 1, (unint64_t)v333);
    v164 = *v5;
    *(_QWORD *)(*v2 + 8 * v164) = *v323;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v164) = (char *)this + 21528;
  }
  v165 = (v164 + 1);
  *((_DWORD *)this + 5) = v165;
  *((_QWORD *)this + 2697) = 14;
  *((_OWORD *)this + 1349) = xmmword_199156720;
  bzero((char *)this + 21600, 0x308uLL);
  *((_QWORD *)this + 2797) = (char *)this + 22392;
  *((_QWORD *)this + 2798) = 16;
  *((_OWORD *)this + 1408) = 0u;
  *((_OWORD *)this + 1409) = 0u;
  *((_QWORD *)this + 2820) = "variables";
  *((_QWORD *)this + 2815) = this;
  v333[0] = (char *)this + 22520;
  if ((_DWORD)v165 == v147)
  {
    v324 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v165 + 1, (unint64_t)v333);
    v165 = *v5;
    *(_QWORD *)(*v2 + 8 * v165) = *v324;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v165) = (char *)this + 22520;
  }
  v166 = (v165 + 1);
  *((_DWORD *)this + 5) = v166;
  *((_QWORD *)this + 2821) = 9;
  *((_OWORD *)this + 1411) = xmmword_199156720;
  bzero((char *)this + 22592, 0x308uLL);
  *((_QWORD *)this + 2921) = (char *)this + 23384;
  *((_QWORD *)this + 2922) = 16;
  *((_OWORD *)this + 1470) = 0u;
  *((_OWORD *)this + 1471) = 0u;
  *((_QWORD *)this + 2944) = "HasOwnPropertyCache";
  *((_QWORD *)this + 2939) = this;
  v333[0] = (char *)this + 23512;
  if ((_DWORD)v166 == v147)
  {
    v325 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v166 + 1, (unint64_t)v333);
    v166 = *v5;
    *(_QWORD *)(*v2 + 8 * v166) = *v325;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v166) = (char *)this + 23512;
  }
  v167 = (v166 + 1);
  *((_DWORD *)this + 5) = v167;
  *((_QWORD *)this + 2945) = 19;
  *((_OWORD *)this + 1473) = xmmword_199156740;
  bzero((char *)this + 23584, 0x308uLL);
  *((_QWORD *)this + 3045) = (char *)this + 24376;
  *((_QWORD *)this + 3046) = 16;
  *((_OWORD *)this + 1532) = 0u;
  *((_OWORD *)this + 1533) = 0u;
  *((_QWORD *)this + 3068) = "SmallIntCache";
  *((_QWORD *)this + 3063) = this;
  v333[0] = (char *)this + 24504;
  if ((_DWORD)v167 == v147)
  {
    v326 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v167 + 1, (unint64_t)v333);
    v167 = *v5;
    *(_QWORD *)(*v2 + 8 * v167) = *v326;
    v147 = *v7;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v167) = (char *)this + 24504;
  }
  v168 = (v167 + 1);
  *((_DWORD *)this + 5) = v168;
  *((_QWORD *)this + 3069) = 13;
  *((_OWORD *)this + 1535) = xmmword_199156740;
  bzero((char *)this + 24576, 0x308uLL);
  *((_QWORD *)this + 3169) = (char *)this + 25368;
  *((_QWORD *)this + 3170) = 16;
  *((_OWORD *)this + 1594) = 0u;
  *((_OWORD *)this + 1595) = 0u;
  *((_QWORD *)this + 3192) = "properties";
  *((_QWORD *)this + 3187) = this;
  v333[0] = (char *)this + 25496;
  if ((_DWORD)v168 == v147)
  {
    v327 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v168 + 1, (unint64_t)v333);
    v168 = *v5;
    *(_QWORD *)(*v2 + 8 * v168) = *v327;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v168) = (char *)this + 25496;
  }
  LODWORD(v169) = v168 + 1;
  *((_DWORD *)this + 5) = v168 + 1;
  *((_QWORD *)this + 3193) = 10;
  *((_OWORD *)this + 1597) = xmmword_19914FB90;
  bzero((char *)this + 25568, 0x308uLL);
  *((_QWORD *)this + 3293) = (char *)this + 26360;
  *((_QWORD *)this + 3294) = 16;
  *((_QWORD *)this + 3311) = v331;
  if (!*((_QWORD *)this + 1465))
  {
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::AbstractHeapRepository *)((char *)this + 11608), (JSC::FTL::AbstractHeapRepository *)((char *)this + 11680), 0);
    LODWORD(v169) = *v5;
  }
  *((_QWORD *)this + 3312) = (char *)this + 11680;
  *((_OWORD *)this + 1657) = 0u;
  *((_OWORD *)this + 1658) = 0u;
  *((_QWORD *)this + 3318) = "absolute";
  *((_QWORD *)this + 3313) = this;
  v333[0] = (char *)this + 26504;
  if ((_DWORD)v169 == *((_DWORD *)this + 4))
  {
    v328 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v169 + 1, (unint64_t)v333);
    v169 = *v5;
    *(_QWORD *)(*v2 + 8 * v169) = *v328;
  }
  else
  {
    *(_QWORD *)(*v2 + 8 * v169) = (char *)this + 26504;
  }
  *((_DWORD *)this + 5) = v169 + 1;
  *((_QWORD *)this + 3319) = 8;
  *((_OWORD *)this + 1660) = xmmword_19914FB90;
  bzero((char *)this + 26576, 0x308uLL);
  *((_QWORD *)this + 3419) = (char *)this + 27368;
  *((_QWORD *)this + 3420) = 16;
  *(_OWORD *)((char *)this + 27496) = 0u;
  *(_OWORD *)((char *)this + 27512) = 0u;
  *(_OWORD *)((char *)this + 27528) = 0u;
  *(_OWORD *)((char *)this + 27544) = 0u;
  *(_OWORD *)((char *)this + 27560) = 0u;
  *(_OWORD *)((char *)this + 27576) = 0u;
  *(_OWORD *)((char *)this + 27592) = 0u;
  *(_OWORD *)((char *)this + 27608) = 0u;
  JSC::FTL::AbstractHeap::changeParent(v332, v330);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 3187, v330);
  v170 = *((_QWORD *)this + 375);
  if ((v170 & 3) != 0)
    goto LABEL_484;
  if (v170 + 1 != *((_QWORD *)this + 393))
  {
    __break(0xC471u);
    JUMPOUT(0x19857C6CCLL);
  }
  if (v170 + 2 != *((_QWORD *)this + 387))
  {
    __break(0xC471u);
    JUMPOUT(0x19857C6ECLL);
  }
  if (v170 + 3 != *((_QWORD *)this + 363))
  {
    __break(0xC471u);
    JUMPOUT(0x19857C70CLL);
  }
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 378, v332);
  JSC::FTL::AbstractHeap::changeParent(v329, v332);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 372, v329);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 390, v329);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 384, v329);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 360, v329);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 492, v331);
  JSC::FTL::AbstractHeap::changeParent((_QWORD *)this + 498, (JSC::FTL::AbstractHeapRepository *)((char *)this + 4080));
  if (*(_QWORD *)(*((_QWORD *)this + 828) + 24))
  {
LABEL_484:
    __break(0xC471u);
    JUMPOUT(0x19857C6ACLL);
  }
  return this;
}

void JSC::FTL::AbstractHeapRepository::~AbstractHeapRepository(JSC::FTL::AbstractHeapRepository *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;

  v9 = (_DWORD *)((char *)this + 27504);
  v10 = *((_QWORD *)this + 3451);
  if (v10)
  {
    *((_QWORD *)this + 3451) = 0;
    v9[28] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 3449);
  if (v11)
  {
    *((_QWORD *)this + 3449) = 0;
    v9[24] = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 3447);
  if (v12)
  {
    *((_QWORD *)this + 3447) = 0;
    v9[20] = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 3445);
  if (v13)
  {
    *((_QWORD *)this + 3445) = 0;
    v9[16] = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 3443);
  if (v14)
  {
    *((_QWORD *)this + 3443) = 0;
    v9[12] = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 3441);
  if (v15)
  {
    *((_QWORD *)this + 3441) = 0;
    v9[8] = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 3439);
  if (v16)
  {
    *((_QWORD *)this + 3439) = 0;
    v9[4] = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 3437);
  if (v17)
  {
    *((_QWORD *)this + 3437) = 0;
    *v9 = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 26504), a2, a3, a4, a5, a6, a7, a8);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 25496), v18, v19, v20, v21, v22, v23, v24);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 24504), v25, v26, v27, v28, v29, v30, v31);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 23512), v32, v33, v34, v35, v36, v37, v38);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 22520), v39, v40, v41, v42, v43, v44, v45);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 21528), v46, v47, v48, v49, v50, v51, v52);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 20536), v53, v54, v55, v56, v57, v58, v59);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 19544), v60, v61, v62, v63, v64, v65, v66);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 18552), v67, v68, v69, v70, v71, v72, v73);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 17560), v74, v75, v76, v77, v78, v79, v80);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 16568), v81, v82, v83, v84, v85, v86, v87);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 15576), v88, v89, v90, v91, v92, v93, v94);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 14584), v95, v96, v97, v98, v99, v100, v101);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 13592), v102, v103, v104, v105, v106, v107, v108);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 12600), v109, v110, v111, v112, v113, v114, v115);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 11608), v116, v117, v118, v119, v120, v121, v122);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 10616), v123, v124, v125, v126, v127, v128, v129);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 9624), v130, v131, v132, v133, v134, v135, v136);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 8632), v137, v138, v139, v140, v141, v142, v143);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 7640), v144, v145, v146, v147, v148, v149, v150);
  JSC::FTL::IndexedAbstractHeap::~IndexedAbstractHeap((JSC::FTL::AbstractHeapRepository *)((char *)this + 6648), v151, v152, v153, v154, v155, v156, v157);
  v165 = *((_QWORD *)this + 823);
  if (v165)
  {
    *((_QWORD *)this + 823) = 0;
    *((_DWORD *)this + 1648) = 0;
    WTF::fastFree(v165, v158, v159, v160, v161, v162, v163, v164);
  }
  v166 = *((_QWORD *)this + 817);
  if (v166)
  {
    *((_QWORD *)this + 817) = 0;
    *((_DWORD *)this + 1636) = 0;
    WTF::fastFree(v166, v158, v159, v160, v161, v162, v163, v164);
  }
  v167 = *((_QWORD *)this + 811);
  if (v167)
  {
    *((_QWORD *)this + 811) = 0;
    *((_DWORD *)this + 1624) = 0;
    WTF::fastFree(v167, v158, v159, v160, v161, v162, v163, v164);
  }
  v168 = *((_QWORD *)this + 805);
  if (v168)
  {
    *((_QWORD *)this + 805) = 0;
    *((_DWORD *)this + 1612) = 0;
    WTF::fastFree(v168, v158, v159, v160, v161, v162, v163, v164);
  }
  v169 = *((_QWORD *)this + 799);
  if (v169)
  {
    *((_QWORD *)this + 799) = 0;
    *((_DWORD *)this + 1600) = 0;
    WTF::fastFree(v169, v158, v159, v160, v161, v162, v163, v164);
  }
  v170 = *((_QWORD *)this + 793);
  if (v170)
  {
    *((_QWORD *)this + 793) = 0;
    *((_DWORD *)this + 1588) = 0;
    WTF::fastFree(v170, v158, v159, v160, v161, v162, v163, v164);
  }
  v171 = *((_QWORD *)this + 787);
  if (v171)
  {
    *((_QWORD *)this + 787) = 0;
    *((_DWORD *)this + 1576) = 0;
    WTF::fastFree(v171, v158, v159, v160, v161, v162, v163, v164);
  }
  v172 = *((_QWORD *)this + 781);
  if (v172)
  {
    *((_QWORD *)this + 781) = 0;
    *((_DWORD *)this + 1564) = 0;
    WTF::fastFree(v172, v158, v159, v160, v161, v162, v163, v164);
  }
  v173 = *((_QWORD *)this + 775);
  if (v173)
  {
    *((_QWORD *)this + 775) = 0;
    *((_DWORD *)this + 1552) = 0;
    WTF::fastFree(v173, v158, v159, v160, v161, v162, v163, v164);
  }
  v174 = *((_QWORD *)this + 769);
  if (v174)
  {
    *((_QWORD *)this + 769) = 0;
    *((_DWORD *)this + 1540) = 0;
    WTF::fastFree(v174, v158, v159, v160, v161, v162, v163, v164);
  }
  v175 = *((_QWORD *)this + 763);
  if (v175)
  {
    *((_QWORD *)this + 763) = 0;
    *((_DWORD *)this + 1528) = 0;
    WTF::fastFree(v175, v158, v159, v160, v161, v162, v163, v164);
  }
  v176 = *((_QWORD *)this + 757);
  if (v176)
  {
    *((_QWORD *)this + 757) = 0;
    *((_DWORD *)this + 1516) = 0;
    WTF::fastFree(v176, v158, v159, v160, v161, v162, v163, v164);
  }
  v177 = *((_QWORD *)this + 751);
  if (v177)
  {
    *((_QWORD *)this + 751) = 0;
    *((_DWORD *)this + 1504) = 0;
    WTF::fastFree(v177, v158, v159, v160, v161, v162, v163, v164);
  }
  v178 = *((_QWORD *)this + 745);
  if (v178)
  {
    *((_QWORD *)this + 745) = 0;
    *((_DWORD *)this + 1492) = 0;
    WTF::fastFree(v178, v158, v159, v160, v161, v162, v163, v164);
  }
  v179 = *((_QWORD *)this + 739);
  if (v179)
  {
    *((_QWORD *)this + 739) = 0;
    *((_DWORD *)this + 1480) = 0;
    WTF::fastFree(v179, v158, v159, v160, v161, v162, v163, v164);
  }
  v180 = *((_QWORD *)this + 733);
  if (v180)
  {
    *((_QWORD *)this + 733) = 0;
    *((_DWORD *)this + 1468) = 0;
    WTF::fastFree(v180, v158, v159, v160, v161, v162, v163, v164);
  }
  v181 = *((_QWORD *)this + 727);
  if (v181)
  {
    *((_QWORD *)this + 727) = 0;
    *((_DWORD *)this + 1456) = 0;
    WTF::fastFree(v181, v158, v159, v160, v161, v162, v163, v164);
  }
  v182 = *((_QWORD *)this + 721);
  if (v182)
  {
    *((_QWORD *)this + 721) = 0;
    *((_DWORD *)this + 1444) = 0;
    WTF::fastFree(v182, v158, v159, v160, v161, v162, v163, v164);
  }
  v183 = *((_QWORD *)this + 715);
  if (v183)
  {
    *((_QWORD *)this + 715) = 0;
    *((_DWORD *)this + 1432) = 0;
    WTF::fastFree(v183, v158, v159, v160, v161, v162, v163, v164);
  }
  v184 = *((_QWORD *)this + 709);
  if (v184)
  {
    *((_QWORD *)this + 709) = 0;
    *((_DWORD *)this + 1420) = 0;
    WTF::fastFree(v184, v158, v159, v160, v161, v162, v163, v164);
  }
  v185 = *((_QWORD *)this + 703);
  if (v185)
  {
    *((_QWORD *)this + 703) = 0;
    *((_DWORD *)this + 1408) = 0;
    WTF::fastFree(v185, v158, v159, v160, v161, v162, v163, v164);
  }
  v186 = *((_QWORD *)this + 697);
  if (v186)
  {
    *((_QWORD *)this + 697) = 0;
    *((_DWORD *)this + 1396) = 0;
    WTF::fastFree(v186, v158, v159, v160, v161, v162, v163, v164);
  }
  v187 = *((_QWORD *)this + 691);
  if (v187)
  {
    *((_QWORD *)this + 691) = 0;
    *((_DWORD *)this + 1384) = 0;
    WTF::fastFree(v187, v158, v159, v160, v161, v162, v163, v164);
  }
  v188 = *((_QWORD *)this + 685);
  if (v188)
  {
    *((_QWORD *)this + 685) = 0;
    *((_DWORD *)this + 1372) = 0;
    WTF::fastFree(v188, v158, v159, v160, v161, v162, v163, v164);
  }
  v189 = *((_QWORD *)this + 679);
  if (v189)
  {
    *((_QWORD *)this + 679) = 0;
    *((_DWORD *)this + 1360) = 0;
    WTF::fastFree(v189, v158, v159, v160, v161, v162, v163, v164);
  }
  v190 = *((_QWORD *)this + 673);
  if (v190)
  {
    *((_QWORD *)this + 673) = 0;
    *((_DWORD *)this + 1348) = 0;
    WTF::fastFree(v190, v158, v159, v160, v161, v162, v163, v164);
  }
  v191 = *((_QWORD *)this + 667);
  if (v191)
  {
    *((_QWORD *)this + 667) = 0;
    *((_DWORD *)this + 1336) = 0;
    WTF::fastFree(v191, v158, v159, v160, v161, v162, v163, v164);
  }
  v192 = *((_QWORD *)this + 661);
  if (v192)
  {
    *((_QWORD *)this + 661) = 0;
    *((_DWORD *)this + 1324) = 0;
    WTF::fastFree(v192, v158, v159, v160, v161, v162, v163, v164);
  }
  v193 = *((_QWORD *)this + 655);
  if (v193)
  {
    *((_QWORD *)this + 655) = 0;
    *((_DWORD *)this + 1312) = 0;
    WTF::fastFree(v193, v158, v159, v160, v161, v162, v163, v164);
  }
  v194 = *((_QWORD *)this + 649);
  if (v194)
  {
    *((_QWORD *)this + 649) = 0;
    *((_DWORD *)this + 1300) = 0;
    WTF::fastFree(v194, v158, v159, v160, v161, v162, v163, v164);
  }
  v195 = *((_QWORD *)this + 643);
  if (v195)
  {
    *((_QWORD *)this + 643) = 0;
    *((_DWORD *)this + 1288) = 0;
    WTF::fastFree(v195, v158, v159, v160, v161, v162, v163, v164);
  }
  v196 = *((_QWORD *)this + 637);
  if (v196)
  {
    *((_QWORD *)this + 637) = 0;
    *((_DWORD *)this + 1276) = 0;
    WTF::fastFree(v196, v158, v159, v160, v161, v162, v163, v164);
  }
  v197 = *((_QWORD *)this + 631);
  if (v197)
  {
    *((_QWORD *)this + 631) = 0;
    *((_DWORD *)this + 1264) = 0;
    WTF::fastFree(v197, v158, v159, v160, v161, v162, v163, v164);
  }
  v198 = *((_QWORD *)this + 625);
  if (v198)
  {
    *((_QWORD *)this + 625) = 0;
    *((_DWORD *)this + 1252) = 0;
    WTF::fastFree(v198, v158, v159, v160, v161, v162, v163, v164);
  }
  v199 = *((_QWORD *)this + 619);
  if (v199)
  {
    *((_QWORD *)this + 619) = 0;
    *((_DWORD *)this + 1240) = 0;
    WTF::fastFree(v199, v158, v159, v160, v161, v162, v163, v164);
  }
  v200 = *((_QWORD *)this + 613);
  if (v200)
  {
    *((_QWORD *)this + 613) = 0;
    *((_DWORD *)this + 1228) = 0;
    WTF::fastFree(v200, v158, v159, v160, v161, v162, v163, v164);
  }
  v201 = *((_QWORD *)this + 607);
  if (v201)
  {
    *((_QWORD *)this + 607) = 0;
    *((_DWORD *)this + 1216) = 0;
    WTF::fastFree(v201, v158, v159, v160, v161, v162, v163, v164);
  }
  v202 = *((_QWORD *)this + 601);
  if (v202)
  {
    *((_QWORD *)this + 601) = 0;
    *((_DWORD *)this + 1204) = 0;
    WTF::fastFree(v202, v158, v159, v160, v161, v162, v163, v164);
  }
  v203 = *((_QWORD *)this + 595);
  if (v203)
  {
    *((_QWORD *)this + 595) = 0;
    *((_DWORD *)this + 1192) = 0;
    WTF::fastFree(v203, v158, v159, v160, v161, v162, v163, v164);
  }
  v204 = *((_QWORD *)this + 589);
  if (v204)
  {
    *((_QWORD *)this + 589) = 0;
    *((_DWORD *)this + 1180) = 0;
    WTF::fastFree(v204, v158, v159, v160, v161, v162, v163, v164);
  }
  v205 = *((_QWORD *)this + 583);
  if (v205)
  {
    *((_QWORD *)this + 583) = 0;
    *((_DWORD *)this + 1168) = 0;
    WTF::fastFree(v205, v158, v159, v160, v161, v162, v163, v164);
  }
  v206 = *((_QWORD *)this + 577);
  if (v206)
  {
    *((_QWORD *)this + 577) = 0;
    *((_DWORD *)this + 1156) = 0;
    WTF::fastFree(v206, v158, v159, v160, v161, v162, v163, v164);
  }
  v207 = *((_QWORD *)this + 571);
  if (v207)
  {
    *((_QWORD *)this + 571) = 0;
    *((_DWORD *)this + 1144) = 0;
    WTF::fastFree(v207, v158, v159, v160, v161, v162, v163, v164);
  }
  v208 = *((_QWORD *)this + 565);
  if (v208)
  {
    *((_QWORD *)this + 565) = 0;
    *((_DWORD *)this + 1132) = 0;
    WTF::fastFree(v208, v158, v159, v160, v161, v162, v163, v164);
  }
  v209 = *((_QWORD *)this + 559);
  if (v209)
  {
    *((_QWORD *)this + 559) = 0;
    *((_DWORD *)this + 1120) = 0;
    WTF::fastFree(v209, v158, v159, v160, v161, v162, v163, v164);
  }
  v210 = *((_QWORD *)this + 553);
  if (v210)
  {
    *((_QWORD *)this + 553) = 0;
    *((_DWORD *)this + 1108) = 0;
    WTF::fastFree(v210, v158, v159, v160, v161, v162, v163, v164);
  }
  v211 = *((_QWORD *)this + 547);
  if (v211)
  {
    *((_QWORD *)this + 547) = 0;
    *((_DWORD *)this + 1096) = 0;
    WTF::fastFree(v211, v158, v159, v160, v161, v162, v163, v164);
  }
  v212 = *((_QWORD *)this + 541);
  if (v212)
  {
    *((_QWORD *)this + 541) = 0;
    *((_DWORD *)this + 1084) = 0;
    WTF::fastFree(v212, v158, v159, v160, v161, v162, v163, v164);
  }
  v213 = *((_QWORD *)this + 535);
  if (v213)
  {
    *((_QWORD *)this + 535) = 0;
    *((_DWORD *)this + 1072) = 0;
    WTF::fastFree(v213, v158, v159, v160, v161, v162, v163, v164);
  }
  v214 = *((_QWORD *)this + 529);
  if (v214)
  {
    *((_QWORD *)this + 529) = 0;
    *((_DWORD *)this + 1060) = 0;
    WTF::fastFree(v214, v158, v159, v160, v161, v162, v163, v164);
  }
  v215 = *((_QWORD *)this + 523);
  if (v215)
  {
    *((_QWORD *)this + 523) = 0;
    *((_DWORD *)this + 1048) = 0;
    WTF::fastFree(v215, v158, v159, v160, v161, v162, v163, v164);
  }
  v216 = *((_QWORD *)this + 517);
  if (v216)
  {
    *((_QWORD *)this + 517) = 0;
    *((_DWORD *)this + 1036) = 0;
    WTF::fastFree(v216, v158, v159, v160, v161, v162, v163, v164);
  }
  v217 = *((_QWORD *)this + 511);
  if (v217)
  {
    *((_QWORD *)this + 511) = 0;
    *((_DWORD *)this + 1024) = 0;
    WTF::fastFree(v217, v158, v159, v160, v161, v162, v163, v164);
  }
  v218 = *((_QWORD *)this + 505);
  if (v218)
  {
    *((_QWORD *)this + 505) = 0;
    *((_DWORD *)this + 1012) = 0;
    WTF::fastFree(v218, v158, v159, v160, v161, v162, v163, v164);
  }
  v219 = *((_QWORD *)this + 499);
  if (v219)
  {
    *((_QWORD *)this + 499) = 0;
    *((_DWORD *)this + 1000) = 0;
    WTF::fastFree(v219, v158, v159, v160, v161, v162, v163, v164);
  }
  v220 = *((_QWORD *)this + 493);
  if (v220)
  {
    *((_QWORD *)this + 493) = 0;
    *((_DWORD *)this + 988) = 0;
    WTF::fastFree(v220, v158, v159, v160, v161, v162, v163, v164);
  }
  v221 = *((_QWORD *)this + 487);
  if (v221)
  {
    *((_QWORD *)this + 487) = 0;
    *((_DWORD *)this + 976) = 0;
    WTF::fastFree(v221, v158, v159, v160, v161, v162, v163, v164);
  }
  v222 = *((_QWORD *)this + 481);
  if (v222)
  {
    *((_QWORD *)this + 481) = 0;
    *((_DWORD *)this + 964) = 0;
    WTF::fastFree(v222, v158, v159, v160, v161, v162, v163, v164);
  }
  v223 = *((_QWORD *)this + 475);
  if (v223)
  {
    *((_QWORD *)this + 475) = 0;
    *((_DWORD *)this + 952) = 0;
    WTF::fastFree(v223, v158, v159, v160, v161, v162, v163, v164);
  }
  v224 = *((_QWORD *)this + 469);
  if (v224)
  {
    *((_QWORD *)this + 469) = 0;
    *((_DWORD *)this + 940) = 0;
    WTF::fastFree(v224, v158, v159, v160, v161, v162, v163, v164);
  }
  v225 = *((_QWORD *)this + 463);
  if (v225)
  {
    *((_QWORD *)this + 463) = 0;
    *((_DWORD *)this + 928) = 0;
    WTF::fastFree(v225, v158, v159, v160, v161, v162, v163, v164);
  }
  v226 = *((_QWORD *)this + 457);
  if (v226)
  {
    *((_QWORD *)this + 457) = 0;
    *((_DWORD *)this + 916) = 0;
    WTF::fastFree(v226, v158, v159, v160, v161, v162, v163, v164);
  }
  v227 = *((_QWORD *)this + 451);
  if (v227)
  {
    *((_QWORD *)this + 451) = 0;
    *((_DWORD *)this + 904) = 0;
    WTF::fastFree(v227, v158, v159, v160, v161, v162, v163, v164);
  }
  v228 = *((_QWORD *)this + 445);
  if (v228)
  {
    *((_QWORD *)this + 445) = 0;
    *((_DWORD *)this + 892) = 0;
    WTF::fastFree(v228, v158, v159, v160, v161, v162, v163, v164);
  }
  v229 = *((_QWORD *)this + 439);
  if (v229)
  {
    *((_QWORD *)this + 439) = 0;
    *((_DWORD *)this + 880) = 0;
    WTF::fastFree(v229, v158, v159, v160, v161, v162, v163, v164);
  }
  v230 = *((_QWORD *)this + 433);
  if (v230)
  {
    *((_QWORD *)this + 433) = 0;
    *((_DWORD *)this + 868) = 0;
    WTF::fastFree(v230, v158, v159, v160, v161, v162, v163, v164);
  }
  v231 = *((_QWORD *)this + 427);
  if (v231)
  {
    *((_QWORD *)this + 427) = 0;
    *((_DWORD *)this + 856) = 0;
    WTF::fastFree(v231, v158, v159, v160, v161, v162, v163, v164);
  }
  v232 = *((_QWORD *)this + 421);
  if (v232)
  {
    *((_QWORD *)this + 421) = 0;
    *((_DWORD *)this + 844) = 0;
    WTF::fastFree(v232, v158, v159, v160, v161, v162, v163, v164);
  }
  v233 = *((_QWORD *)this + 415);
  if (v233)
  {
    *((_QWORD *)this + 415) = 0;
    *((_DWORD *)this + 832) = 0;
    WTF::fastFree(v233, v158, v159, v160, v161, v162, v163, v164);
  }
  v234 = *((_QWORD *)this + 409);
  if (v234)
  {
    *((_QWORD *)this + 409) = 0;
    *((_DWORD *)this + 820) = 0;
    WTF::fastFree(v234, v158, v159, v160, v161, v162, v163, v164);
  }
  v235 = *((_QWORD *)this + 403);
  if (v235)
  {
    *((_QWORD *)this + 403) = 0;
    *((_DWORD *)this + 808) = 0;
    WTF::fastFree(v235, v158, v159, v160, v161, v162, v163, v164);
  }
  v236 = *((_QWORD *)this + 397);
  if (v236)
  {
    *((_QWORD *)this + 397) = 0;
    *((_DWORD *)this + 796) = 0;
    WTF::fastFree(v236, v158, v159, v160, v161, v162, v163, v164);
  }
  v237 = *((_QWORD *)this + 391);
  if (v237)
  {
    *((_QWORD *)this + 391) = 0;
    *((_DWORD *)this + 784) = 0;
    WTF::fastFree(v237, v158, v159, v160, v161, v162, v163, v164);
  }
  v238 = *((_QWORD *)this + 385);
  if (v238)
  {
    *((_QWORD *)this + 385) = 0;
    *((_DWORD *)this + 772) = 0;
    WTF::fastFree(v238, v158, v159, v160, v161, v162, v163, v164);
  }
  v239 = *((_QWORD *)this + 379);
  if (v239)
  {
    *((_QWORD *)this + 379) = 0;
    *((_DWORD *)this + 760) = 0;
    WTF::fastFree(v239, v158, v159, v160, v161, v162, v163, v164);
  }
  v240 = *((_QWORD *)this + 373);
  if (v240)
  {
    *((_QWORD *)this + 373) = 0;
    *((_DWORD *)this + 748) = 0;
    WTF::fastFree(v240, v158, v159, v160, v161, v162, v163, v164);
  }
  v241 = *((_QWORD *)this + 367);
  if (v241)
  {
    *((_QWORD *)this + 367) = 0;
    *((_DWORD *)this + 736) = 0;
    WTF::fastFree(v241, v158, v159, v160, v161, v162, v163, v164);
  }
  v242 = *((_QWORD *)this + 361);
  if (v242)
  {
    *((_QWORD *)this + 361) = 0;
    *((_DWORD *)this + 724) = 0;
    WTF::fastFree(v242, v158, v159, v160, v161, v162, v163, v164);
  }
  v243 = *((_QWORD *)this + 355);
  if (v243)
  {
    *((_QWORD *)this + 355) = 0;
    *((_DWORD *)this + 712) = 0;
    WTF::fastFree(v243, v158, v159, v160, v161, v162, v163, v164);
  }
  v244 = *((_QWORD *)this + 349);
  if (v244)
  {
    *((_QWORD *)this + 349) = 0;
    *((_DWORD *)this + 700) = 0;
    WTF::fastFree(v244, v158, v159, v160, v161, v162, v163, v164);
  }
  v245 = *((_QWORD *)this + 343);
  if (v245)
  {
    *((_QWORD *)this + 343) = 0;
    *((_DWORD *)this + 688) = 0;
    WTF::fastFree(v245, v158, v159, v160, v161, v162, v163, v164);
  }
  v246 = *((_QWORD *)this + 337);
  if (v246)
  {
    *((_QWORD *)this + 337) = 0;
    *((_DWORD *)this + 676) = 0;
    WTF::fastFree(v246, v158, v159, v160, v161, v162, v163, v164);
  }
  v247 = *((_QWORD *)this + 331);
  if (v247)
  {
    *((_QWORD *)this + 331) = 0;
    *((_DWORD *)this + 664) = 0;
    WTF::fastFree(v247, v158, v159, v160, v161, v162, v163, v164);
  }
  v248 = *((_QWORD *)this + 325);
  if (v248)
  {
    *((_QWORD *)this + 325) = 0;
    *((_DWORD *)this + 652) = 0;
    WTF::fastFree(v248, v158, v159, v160, v161, v162, v163, v164);
  }
  v249 = *((_QWORD *)this + 319);
  if (v249)
  {
    *((_QWORD *)this + 319) = 0;
    *((_DWORD *)this + 640) = 0;
    WTF::fastFree(v249, v158, v159, v160, v161, v162, v163, v164);
  }
  v250 = *((_QWORD *)this + 313);
  if (v250)
  {
    *((_QWORD *)this + 313) = 0;
    *((_DWORD *)this + 628) = 0;
    WTF::fastFree(v250, v158, v159, v160, v161, v162, v163, v164);
  }
  v251 = *((_QWORD *)this + 307);
  if (v251)
  {
    *((_QWORD *)this + 307) = 0;
    *((_DWORD *)this + 616) = 0;
    WTF::fastFree(v251, v158, v159, v160, v161, v162, v163, v164);
  }
  v252 = *((_QWORD *)this + 301);
  if (v252)
  {
    *((_QWORD *)this + 301) = 0;
    *((_DWORD *)this + 604) = 0;
    WTF::fastFree(v252, v158, v159, v160, v161, v162, v163, v164);
  }
  v253 = *((_QWORD *)this + 295);
  if (v253)
  {
    *((_QWORD *)this + 295) = 0;
    *((_DWORD *)this + 592) = 0;
    WTF::fastFree(v253, v158, v159, v160, v161, v162, v163, v164);
  }
  v254 = *((_QWORD *)this + 289);
  if (v254)
  {
    *((_QWORD *)this + 289) = 0;
    *((_DWORD *)this + 580) = 0;
    WTF::fastFree(v254, v158, v159, v160, v161, v162, v163, v164);
  }
  v255 = *((_QWORD *)this + 283);
  if (v255)
  {
    *((_QWORD *)this + 283) = 0;
    *((_DWORD *)this + 568) = 0;
    WTF::fastFree(v255, v158, v159, v160, v161, v162, v163, v164);
  }
  v256 = *((_QWORD *)this + 277);
  if (v256)
  {
    *((_QWORD *)this + 277) = 0;
    *((_DWORD *)this + 556) = 0;
    WTF::fastFree(v256, v158, v159, v160, v161, v162, v163, v164);
  }
  v257 = *((_QWORD *)this + 271);
  if (v257)
  {
    *((_QWORD *)this + 271) = 0;
    *((_DWORD *)this + 544) = 0;
    WTF::fastFree(v257, v158, v159, v160, v161, v162, v163, v164);
  }
  v258 = *((_QWORD *)this + 265);
  if (v258)
  {
    *((_QWORD *)this + 265) = 0;
    *((_DWORD *)this + 532) = 0;
    WTF::fastFree(v258, v158, v159, v160, v161, v162, v163, v164);
  }
  v259 = *((_QWORD *)this + 259);
  if (v259)
  {
    *((_QWORD *)this + 259) = 0;
    *((_DWORD *)this + 520) = 0;
    WTF::fastFree(v259, v158, v159, v160, v161, v162, v163, v164);
  }
  v260 = *((_QWORD *)this + 253);
  if (v260)
  {
    *((_QWORD *)this + 253) = 0;
    *((_DWORD *)this + 508) = 0;
    WTF::fastFree(v260, v158, v159, v160, v161, v162, v163, v164);
  }
  v261 = *((_QWORD *)this + 247);
  if (v261)
  {
    *((_QWORD *)this + 247) = 0;
    *((_DWORD *)this + 496) = 0;
    WTF::fastFree(v261, v158, v159, v160, v161, v162, v163, v164);
  }
  v262 = *((_QWORD *)this + 241);
  if (v262)
  {
    *((_QWORD *)this + 241) = 0;
    *((_DWORD *)this + 484) = 0;
    WTF::fastFree(v262, v158, v159, v160, v161, v162, v163, v164);
  }
  v263 = *((_QWORD *)this + 235);
  if (v263)
  {
    *((_QWORD *)this + 235) = 0;
    *((_DWORD *)this + 472) = 0;
    WTF::fastFree(v263, v158, v159, v160, v161, v162, v163, v164);
  }
  v264 = *((_QWORD *)this + 229);
  if (v264)
  {
    *((_QWORD *)this + 229) = 0;
    *((_DWORD *)this + 460) = 0;
    WTF::fastFree(v264, v158, v159, v160, v161, v162, v163, v164);
  }
  v265 = *((_QWORD *)this + 223);
  if (v265)
  {
    *((_QWORD *)this + 223) = 0;
    *((_DWORD *)this + 448) = 0;
    WTF::fastFree(v265, v158, v159, v160, v161, v162, v163, v164);
  }
  v266 = *((_QWORD *)this + 217);
  if (v266)
  {
    *((_QWORD *)this + 217) = 0;
    *((_DWORD *)this + 436) = 0;
    WTF::fastFree(v266, v158, v159, v160, v161, v162, v163, v164);
  }
  v267 = *((_QWORD *)this + 211);
  if (v267)
  {
    *((_QWORD *)this + 211) = 0;
    *((_DWORD *)this + 424) = 0;
    WTF::fastFree(v267, v158, v159, v160, v161, v162, v163, v164);
  }
  v268 = *((_QWORD *)this + 205);
  if (v268)
  {
    *((_QWORD *)this + 205) = 0;
    *((_DWORD *)this + 412) = 0;
    WTF::fastFree(v268, v158, v159, v160, v161, v162, v163, v164);
  }
  v269 = *((_QWORD *)this + 199);
  if (v269)
  {
    *((_QWORD *)this + 199) = 0;
    *((_DWORD *)this + 400) = 0;
    WTF::fastFree(v269, v158, v159, v160, v161, v162, v163, v164);
  }
  v270 = *((_QWORD *)this + 193);
  if (v270)
  {
    *((_QWORD *)this + 193) = 0;
    *((_DWORD *)this + 388) = 0;
    WTF::fastFree(v270, v158, v159, v160, v161, v162, v163, v164);
  }
  v271 = *((_QWORD *)this + 187);
  if (v271)
  {
    *((_QWORD *)this + 187) = 0;
    *((_DWORD *)this + 376) = 0;
    WTF::fastFree(v271, v158, v159, v160, v161, v162, v163, v164);
  }
  v272 = *((_QWORD *)this + 181);
  if (v272)
  {
    *((_QWORD *)this + 181) = 0;
    *((_DWORD *)this + 364) = 0;
    WTF::fastFree(v272, v158, v159, v160, v161, v162, v163, v164);
  }
  v273 = *((_QWORD *)this + 175);
  if (v273)
  {
    *((_QWORD *)this + 175) = 0;
    *((_DWORD *)this + 352) = 0;
    WTF::fastFree(v273, v158, v159, v160, v161, v162, v163, v164);
  }
  v274 = *((_QWORD *)this + 169);
  if (v274)
  {
    *((_QWORD *)this + 169) = 0;
    *((_DWORD *)this + 340) = 0;
    WTF::fastFree(v274, v158, v159, v160, v161, v162, v163, v164);
  }
  v275 = *((_QWORD *)this + 163);
  if (v275)
  {
    *((_QWORD *)this + 163) = 0;
    *((_DWORD *)this + 328) = 0;
    WTF::fastFree(v275, v158, v159, v160, v161, v162, v163, v164);
  }
  v276 = *((_QWORD *)this + 157);
  if (v276)
  {
    *((_QWORD *)this + 157) = 0;
    *((_DWORD *)this + 316) = 0;
    WTF::fastFree(v276, v158, v159, v160, v161, v162, v163, v164);
  }
  v277 = *((_QWORD *)this + 151);
  if (v277)
  {
    *((_QWORD *)this + 151) = 0;
    *((_DWORD *)this + 304) = 0;
    WTF::fastFree(v277, v158, v159, v160, v161, v162, v163, v164);
  }
  v278 = *((_QWORD *)this + 145);
  if (v278)
  {
    *((_QWORD *)this + 145) = 0;
    *((_DWORD *)this + 292) = 0;
    WTF::fastFree(v278, v158, v159, v160, v161, v162, v163, v164);
  }
  v279 = *((_QWORD *)this + 139);
  if (v279)
  {
    *((_QWORD *)this + 139) = 0;
    *((_DWORD *)this + 280) = 0;
    WTF::fastFree(v279, v158, v159, v160, v161, v162, v163, v164);
  }
  v280 = *((_QWORD *)this + 133);
  if (v280)
  {
    *((_QWORD *)this + 133) = 0;
    *((_DWORD *)this + 268) = 0;
    WTF::fastFree(v280, v158, v159, v160, v161, v162, v163, v164);
  }
  v281 = *((_QWORD *)this + 127);
  if (v281)
  {
    *((_QWORD *)this + 127) = 0;
    *((_DWORD *)this + 256) = 0;
    WTF::fastFree(v281, v158, v159, v160, v161, v162, v163, v164);
  }
  v282 = *((_QWORD *)this + 121);
  if (v282)
  {
    *((_QWORD *)this + 121) = 0;
    *((_DWORD *)this + 244) = 0;
    WTF::fastFree(v282, v158, v159, v160, v161, v162, v163, v164);
  }
  v283 = *((_QWORD *)this + 115);
  if (v283)
  {
    *((_QWORD *)this + 115) = 0;
    *((_DWORD *)this + 232) = 0;
    WTF::fastFree(v283, v158, v159, v160, v161, v162, v163, v164);
  }
  v284 = *((_QWORD *)this + 109);
  if (v284)
  {
    *((_QWORD *)this + 109) = 0;
    *((_DWORD *)this + 220) = 0;
    WTF::fastFree(v284, v158, v159, v160, v161, v162, v163, v164);
  }
  v285 = *((_QWORD *)this + 103);
  if (v285)
  {
    *((_QWORD *)this + 103) = 0;
    *((_DWORD *)this + 208) = 0;
    WTF::fastFree(v285, v158, v159, v160, v161, v162, v163, v164);
  }
  v286 = *((_QWORD *)this + 97);
  if (v286)
  {
    *((_QWORD *)this + 97) = 0;
    *((_DWORD *)this + 196) = 0;
    WTF::fastFree(v286, v158, v159, v160, v161, v162, v163, v164);
  }
  v287 = *((_QWORD *)this + 91);
  if (v287)
  {
    *((_QWORD *)this + 91) = 0;
    *((_DWORD *)this + 184) = 0;
    WTF::fastFree(v287, v158, v159, v160, v161, v162, v163, v164);
  }
  v288 = *((_QWORD *)this + 85);
  if (v288)
  {
    *((_QWORD *)this + 85) = 0;
    *((_DWORD *)this + 172) = 0;
    WTF::fastFree(v288, v158, v159, v160, v161, v162, v163, v164);
  }
  v289 = *((_QWORD *)this + 79);
  if (v289)
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    WTF::fastFree(v289, v158, v159, v160, v161, v162, v163, v164);
  }
  v290 = *((_QWORD *)this + 73);
  if (v290)
  {
    *((_QWORD *)this + 73) = 0;
    *((_DWORD *)this + 148) = 0;
    WTF::fastFree(v290, v158, v159, v160, v161, v162, v163, v164);
  }
  v291 = *((_QWORD *)this + 67);
  if (v291)
  {
    *((_QWORD *)this + 67) = 0;
    *((_DWORD *)this + 136) = 0;
    WTF::fastFree(v291, v158, v159, v160, v161, v162, v163, v164);
  }
  v292 = *((_QWORD *)this + 61);
  if (v292)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v292, v158, v159, v160, v161, v162, v163, v164);
  }
  v293 = *((_QWORD *)this + 55);
  if (v293)
  {
    *((_QWORD *)this + 55) = 0;
    *((_DWORD *)this + 112) = 0;
    WTF::fastFree(v293, v158, v159, v160, v161, v162, v163, v164);
  }
  v294 = *((_QWORD *)this + 49);
  if (v294)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v294, v158, v159, v160, v161, v162, v163, v164);
  }
  v295 = *((_QWORD *)this + 43);
  if (v295)
  {
    *((_QWORD *)this + 43) = 0;
    *((_DWORD *)this + 88) = 0;
    WTF::fastFree(v295, v158, v159, v160, v161, v162, v163, v164);
  }
  v296 = *((_QWORD *)this + 37);
  if (v296)
  {
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    WTF::fastFree(v296, v158, v159, v160, v161, v162, v163, v164);
  }
  v297 = *((_QWORD *)this + 31);
  if (v297)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v297, v158, v159, v160, v161, v162, v163, v164);
  }
  v298 = *((_QWORD *)this + 25);
  if (v298)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v298, v158, v159, v160, v161, v162, v163, v164);
  }
  v299 = *((_QWORD *)this + 19);
  if (v299)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v299, v158, v159, v160, v161, v162, v163, v164);
  }
  v300 = *((_QWORD *)this + 13);
  if (v300)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v300, v158, v159, v160, v161, v162, v163, v164);
  }
  v301 = *((_QWORD *)this + 7);
  if (v301)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v301, v158, v159, v160, v161, v162, v163, v164);
  }
  v302 = *((_QWORD *)this + 1);
  if (v302)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v302, v158, v159, v160, v161, v162, v163, v164);
  }
}

__int128 *JSC::FTL::AbstractHeapRepository::decorateMemory(__int128 *this, const JSC::FTL::AbstractHeap *a2, JSC::B3::Value *a3)
{
  __int128 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v3 = this + 1719;
  v4 = (uint64_t *)this + 3437;
  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  v5 = *((unsigned int *)this + 6877);
  if ((_DWORD)v5 == *((_DWORD *)this + 6876))
  {
    v5 = *((unsigned int *)v3 + 1);
    v6 = *v4;
    v7 = *this;
  }
  else
  {
    v6 = *v4;
    v7 = v8;
  }
  *(_OWORD *)(v6 + 16 * v5) = v7;
  ++*((_DWORD *)v3 + 1);
  return this;
}

_QWORD *JSC::FTL::AbstractHeapRepository::decoratePatchpointWrite(JSC::FTL::AbstractHeapRepository *this, const JSC::FTL::AbstractHeap *a2, JSC::B3::Value *a3)
{
  _DWORD *v3;
  _QWORD *result;
  uint64_t v5;
  __int128 v6;

  v3 = (_DWORD *)((char *)this + 27568);
  result = (_QWORD *)((char *)this + 27560);
  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  v5 = v3[1];
  if ((_DWORD)v5 == *v3)
    return (_QWORD *)WTF::Vector<JSC::FTL::AbstractHeapRepository::HeapForValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::AbstractHeapRepository::HeapForValue>((uint64_t)result, (unint64_t)&v6);
  *(_OWORD *)(*result + 16 * v5) = v6;
  ++v3[1];
  return result;
}

JSC::FTL::AbstractHeap *JSC::FTL::AbstractHeapRepository::computeRangesAndDecorateInstructions(JSC::FTL::AbstractHeap ***this)
{
  unsigned int *v2;
  JSC::FTL::AbstractHeap *result;
  BOOL v4;
  uint64_t v6;
  JSC::FTL::AbstractHeap **v7;
  JSC::FTL::AbstractHeap **v8;
  JSC::FTL::AbstractHeap *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::FTL::AbstractHeap **v16;
  JSC::FTL::AbstractHeap **v17;
  JSC::FTL::AbstractHeap *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::FTL::AbstractHeap **v21;
  JSC::FTL::AbstractHeap **v22;
  JSC::FTL::AbstractHeap *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::FTL::AbstractHeap **v26;
  JSC::FTL::AbstractHeap **v27;
  JSC::FTL::AbstractHeap *v28;
  uint64_t v29;
  JSC::FTL::AbstractHeap **v30;
  JSC::FTL::AbstractHeap **v31;
  JSC::FTL::AbstractHeap *v32;
  uint64_t v33;
  WTF *v34;
  WTF::PrintStream *v35;
  JSC::FTL::AbstractHeap **v36;
  JSC::FTL::AbstractHeap **v37;
  JSC::FTL::AbstractHeap *v38;
  uint64_t v39;
  JSC::FTL::AbstractHeap **v40;
  JSC::FTL::AbstractHeap **v41;
  JSC::FTL::AbstractHeap *v42;
  uint64_t v43;
  JSC::FTL::AbstractHeap **v44;
  JSC::FTL::AbstractHeap **v45;
  JSC::FTL::AbstractHeap *v46;
  uint64_t v47;

  v2 = (unsigned int *)this + 6877;
  result = (JSC::FTL::AbstractHeap *)JSC::FTL::AbstractHeap::compute((uint64_t)this, 0);
  if ((_BYTE)qword_1ECF4C32A)
    v4 = 0;
  else
    v4 = byte_1ECF4C323 == 0;
  if (!v4 || BYTE1(qword_1ECF4C32A) != 0)
  {
    v34 = (WTF *)WTF::dataLog<char [16]>("Abstract Heap Repository:\n");
    v35 = (WTF::PrintStream *)WTF::dataFile(v34);
    result = (JSC::FTL::AbstractHeap *)JSC::FTL::AbstractHeap::deepDump(this, v35, 0);
  }
  v6 = *v2;
  if ((_DWORD)v6)
  {
    v7 = this[3437];
    v8 = &v7[2 * v6];
    do
    {
      result = *v7;
      v9 = v7[1];
      if (*((unsigned __int8 *)v9 + 12) - 63 >= 0x10)
        v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
LABEL_90:
          JSC::FTL::AbstractHeap::badRangeError(result);
        v10 = *((_QWORD *)result + 4);
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)((char *)v9 + 44) = v10;
      v7 += 2;
    }
    while (v7 != v8);
  }
  v11 = v2[4];
  if ((_DWORD)v11)
  {
    v26 = this[3439];
    v27 = &v26[2 * v11];
    do
    {
      result = *v26;
      v28 = v26[1];
      if (*v26)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v29 = *((_QWORD *)result + 4);
      }
      else
      {
        v29 = 0;
      }
      if ((*((_WORD *)v28 + 6) & 0xFFF) != 0x52)
        v28 = 0;
      *((_QWORD *)v28 + 7) = v29;
      v26 += 2;
    }
    while (v26 != v27);
  }
  v12 = v2[8];
  if ((_DWORD)v12)
  {
    v30 = this[3441];
    v31 = &v30[2 * v12];
    do
    {
      result = *v30;
      v32 = v30[1];
      if (*v30)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v33 = *((_QWORD *)result + 4);
      }
      else
      {
        v33 = 0;
      }
      if ((*((_WORD *)v32 + 6) & 0xFFF) != 0x52)
        v32 = 0;
      *((_QWORD *)v32 + 6) = v33;
      v30 += 2;
    }
    while (v30 != v31);
  }
  v13 = v2[12];
  if ((_DWORD)v13)
  {
    v40 = this[3443];
    v41 = &v40[2 * v13];
    do
    {
      result = *v40;
      v42 = v40[1];
      if (*v40)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v43 = *((_QWORD *)result + 4);
      }
      else
      {
        v43 = 0;
      }
      if (*((_BYTE *)v42 + 12) != 83)
        v42 = 0;
      *((_QWORD *)v42 + 16) = v43;
      v40 += 2;
    }
    while (v40 != v41);
  }
  v14 = v2[16];
  if ((_DWORD)v14)
  {
    v36 = this[3445];
    v37 = &v36[2 * v14];
    do
    {
      result = *v36;
      v38 = v36[1];
      if (*v36)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v39 = *((_QWORD *)result + 4);
      }
      else
      {
        v39 = 0;
      }
      if (*((_BYTE *)v38 + 12) != 83)
        v38 = 0;
      *((_QWORD *)v38 + 15) = v39;
      v36 += 2;
    }
    while (v36 != v37);
  }
  v15 = v2[20];
  if ((_DWORD)v15)
  {
    v16 = this[3447];
    v17 = &v16[2 * v15];
    do
    {
      result = *v16;
      v18 = v16[1];
      if (*v16)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v19 = *((_QWORD *)result + 4);
      }
      else
      {
        v19 = 0;
      }
      if ((*((_WORD *)v18 + 6) & 0xFFF) != 0x51)
        v18 = 0;
      *((_QWORD *)v18 + 5) = v19;
      v16 += 2;
    }
    while (v16 != v17);
  }
  v20 = v2[24];
  if ((_DWORD)v20)
  {
    v21 = this[3449];
    v22 = &v21[2 * v20];
    do
    {
      result = *v21;
      v23 = v21[1];
      if (*v21)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v24 = *((_QWORD *)result + 4);
      }
      else
      {
        v24 = 0;
      }
      if ((*((_WORD *)v23 + 6) & 0xFFF) != 0x51)
        v23 = 0;
      *((_QWORD *)v23 + 6) = v24;
      v21 += 2;
    }
    while (v21 != v22);
  }
  v25 = v2[28];
  if ((_DWORD)v25)
  {
    v44 = this[3451];
    v45 = &v44[2 * v25];
    do
    {
      result = *v44;
      v46 = v44[1];
      if (*((unsigned __int8 *)v46 + 12) - 63 >= 0x10)
        v46 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 8) == *((_DWORD *)result + 9))
          goto LABEL_90;
        v47 = *((_QWORD *)result + 4);
      }
      else
      {
        v47 = 0;
      }
      *(_QWORD *)((char *)v46 + 52) = v47;
      v44 += 2;
    }
    while (v44 != v45);
  }
  return result;
}

uint64_t JSC::FTL::canCompile(uint64_t this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v19;
  WTF *v22;
  WTF::PrintStream *v23;
  BOOL v24;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  JSC::DFG::Graph *v33;
  JSC::DFG::Node *v34;
  unsigned __int8 v35;

  v2 = *(_QWORD *)(this + 32);
  if (*(_DWORD *)(v2 + 44) > HIDWORD(xmmword_1ECF4C4A0))
  {
    if ((_BYTE)qword_1ECF4C32A)
      v24 = 0;
    else
      v24 = byte_1ECF4C323 == 0;
    if (!v24 || BYTE1(qword_1ECF4C32A) != 0 || byte_1ECF4C345 != 0)
      WTF::dataLog<char [15],JSC::CodeBlock,char [24]>(*(_QWORD *)(this + 32));
  }
  else if ((*(_WORD *)(*(_QWORD *)(v2 + 64) + 70) & 8) != 0)
  {
    if ((_BYTE)qword_1ECF4C32A)
      v16 = 0;
    else
      v16 = byte_1ECF4C323 == 0;
    if (!v16 || BYTE1(qword_1ECF4C32A) != 0 || byte_1ECF4C345 != 0)
      WTF::dataLog<char [15],JSC::CodeBlock,char [45]>(*(_QWORD *)(this + 32));
  }
  else
  {
    v3 = *(_DWORD *)(this + 60);
    if (!v3)
      return 2;
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(this + 48) + 8 * --v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 15))
        {
          v5 = *(unsigned int *)(v4 + 220);
          if ((_DWORD)v5)
            break;
        }
      }
LABEL_30:
      if (!v3)
        return 2;
    }
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 208);
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if ((*(_BYTE *)(v8 + 56) & 0x10) != 0)
      {
        v15 = *(_QWORD *)(v8 + 32);
        if ((_DWORD)v15)
        {
          v27 = (v15 - 1);
          v28 = *(_QWORD *)(v8 + 24);
          while (*(_DWORD *)(this + 164) > (v28 + v27))
          {
            v29 = *(_QWORD *)(*(_QWORD *)(this + 152) + 8 * (v28 + v27));
            if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v14 = (v29 >> 50) & 0x3F;
              if (v14 >= 0x35)
                goto LABEL_72;
            }
            if (--v27 == -1)
              goto LABEL_12;
          }
          __break(0xC471u);
          return this;
        }
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 40);
        if ((v9 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v14 = (v9 >> 50) & 0x3F, v14 > 0x34)
          || (v10 = *(_QWORD *)(v8 + 32), (v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
          && (v14 = (v10 >> 50) & 0x3F, v14 > 0x34)
          || (v11 = *(_QWORD *)(v8 + 24), (v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
          && (v14 = (v11 >> 50) & 0x3F, v14 >= 0x35))
        {
LABEL_72:
          v33 = (JSC::DFG::Graph *)this;
          v34 = *(JSC::DFG::Node **)(v7 + 8 * v6);
          if ((_BYTE)qword_1ECF4C32A)
            v30 = 0;
          else
            v30 = byte_1ECF4C323 == 0;
          if (!v30 || BYTE1(qword_1ECF4C32A) != 0 || byte_1ECF4C345 != 0)
          {
            v35 = v14;
            v22 = (WTF *)WTF::dataLog<char [23],JSC::CodeBlock,char [27],JSC::DFG::UseKind,char [11]>(v2, &v35);
            goto LABEL_55;
          }
          return 0;
        }
      }
LABEL_12:
      v12 = *(unsigned __int16 *)(v8 + 18);
      v13 = (v12 - 5) > 0x3E || ((1 << (v12 - 5)) & 0x41000001C0000001) == 0;
      if (!v13 || (v12 - 339) < 2 || v12 == 433)
        break;
      if (++v6 >= v5 || v12 == 379)
        goto LABEL_30;
    }
    v33 = (JSC::DFG::Graph *)this;
    v34 = *(JSC::DFG::Node **)(v7 + 8 * v6);
    if ((_BYTE)qword_1ECF4C32A)
      v19 = 0;
    else
      v19 = byte_1ECF4C323 == 0;
    if (!v19 || BYTE1(qword_1ECF4C32A) != 0 || byte_1ECF4C345 != 0)
    {
      v22 = (WTF *)WTF::dataLog<char [37],JSC::CodeBlock,char [2]>("FTL rejecting node in ", v2, ":\n");
LABEL_55:
      v23 = (WTF::PrintStream *)WTF::dataFile(v22);
      JSC::DFG::Graph::dump(v33, v23, "    ", v34, 0);
    }
  }
  return 0;
}

uint64_t WTF::dataLog<char [15],JSC::CodeBlock,char [24]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FTL rejecting ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " because it's too big.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [15],JSC::CodeBlock,char [45]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FTL rejecting ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " because it is marked as never FTL compile.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [23],JSC::CodeBlock,char [27],JSC::DFG::UseKind,char [11]>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "FTL rejecting node in ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", " because of bad use kind: ");
  WTF::printInternal((uint64_t)v6, *a2);
  WTF::PrintStream::printf(v6, "%s", " in node:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::FTL::CommonValues::initializeConstants(JSC::FTL::CommonValues *this, JSC::B3::Procedure *a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  const void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  const void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  const void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  const void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  const void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  const void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  const void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  const void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 3;
  *(_DWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357D8E0;
  *(_DWORD *)(v6 + 40) = 0;
  v7 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v7 - 8);
    *((_DWORD *)a2 + 23) = v7 - 1;
    v9 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v8 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v8 == *((_DWORD *)a2 + 18))
    {
      v71 = v8 + (v8 >> 2);
      if (v71 >= 0x10)
        v72 = v71 + 1;
      else
        v72 = 16;
      if (v72 <= v8 + 1)
        v73 = v8 + 1;
      else
        v73 = v72;
      if (v73 >> 29)
      {
        __break(0xC471u);
        goto LABEL_182;
      }
      v74 = (const void *)*((_QWORD *)a2 + 8);
      v75 = (void *)WTF::fastMalloc((WTF *)(8 * v73));
      *((_DWORD *)a2 + 18) = v73;
      *((_QWORD *)a2 + 8) = v75;
      memcpy(v75, v74, 8 * v8);
      if (v74)
      {
        if (*((const void **)a2 + 8) == v74)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v74, v76, v77, v78, v79, v80, v81, v82);
      }
      v83 = *((unsigned int *)a2 + 19);
      v9 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v9 + 8 * v83) = 0;
      *((_DWORD *)a2 + 19) = v83 + 1;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v9 + 8 * v8) = 0;
      *((_DWORD *)a2 + 19) = v8 + 1;
    }
  }
  *(_DWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v9 + 8 * v8) = v6;
  v188 = v6;
  v10 = a3 + 1;
  v11 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v11 == *((_DWORD *)a3 + 4))
  {
    v62 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v11 + 1, (unint64_t)&v188);
    v11 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v11] = *(_QWORD *)v62;
    v12 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = v6;
    v12 = v6;
  }
  *((_DWORD *)a3 + 5) = v11 + 1;
  *(_QWORD *)(v12 + 32) = a3;
  *((_QWORD *)this + 2) = v6;
  v13 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 3;
  *(_DWORD *)(v13 + 16) = 1;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357D8E0;
  *(_DWORD *)(v13 + 40) = 1;
  v14 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v14 - 8);
    *((_DWORD *)a2 + 23) = v14 - 1;
    v16 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v15 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v15 == *((_DWORD *)a2 + 18))
    {
      v84 = v15 + (v15 >> 2);
      if (v84 >= 0x10)
        v85 = v84 + 1;
      else
        v85 = 16;
      if (v85 <= v15 + 1)
        v86 = v15 + 1;
      else
        v86 = v85;
      if (v86 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBA4);
      }
      v87 = (const void *)*((_QWORD *)a2 + 8);
      v88 = (void *)WTF::fastMalloc((WTF *)(8 * v86));
      *((_DWORD *)a2 + 18) = v86;
      *((_QWORD *)a2 + 8) = v88;
      memcpy(v88, v87, 8 * v15);
      if (v87)
      {
        if (*((const void **)a2 + 8) == v87)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v87, v89, v90, v91, v92, v93, v94, v95);
      }
      v96 = *((unsigned int *)a2 + 19);
      v16 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v16 + 8 * v96) = 0;
      *((_DWORD *)a2 + 19) = v96 + 1;
    }
    else
    {
      v16 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v16 + 8 * v15) = 0;
      *((_DWORD *)a2 + 19) = v15 + 1;
    }
  }
  *(_DWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v16 + 8 * v15) = v13;
  v188 = v13;
  v17 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v17 == *((_DWORD *)a3 + 4))
  {
    v63 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v17 + 1, (unint64_t)&v188);
    v17 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v17] = *(_QWORD *)v63;
    v18 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v17) = v13;
    v18 = v13;
  }
  *((_DWORD *)a3 + 5) = v17 + 1;
  *(_QWORD *)(v18 + 32) = a3;
  *((_QWORD *)this + 3) = v13;
  v19 = *((_QWORD *)this + 2);
  *(_QWORD *)this = v13;
  *((_QWORD *)this + 1) = v19;
  v20 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 4;
  *(_DWORD *)(v20 + 16) = 2;
  *(_BYTE *)(v20 + 20) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E357DA88;
  v21 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v21 - 8);
    *((_DWORD *)a2 + 23) = v21 - 1;
    v23 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v22 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v22 == *((_DWORD *)a2 + 18))
    {
      v97 = v22 + (v22 >> 2);
      if (v97 >= 0x10)
        v98 = v97 + 1;
      else
        v98 = 16;
      if (v98 <= v22 + 1)
        v99 = v22 + 1;
      else
        v99 = v98;
      if (v99 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBACLL);
      }
      v100 = (const void *)*((_QWORD *)a2 + 8);
      v101 = (void *)WTF::fastMalloc((WTF *)(8 * v99));
      *((_DWORD *)a2 + 18) = v99;
      *((_QWORD *)a2 + 8) = v101;
      memcpy(v101, v100, 8 * v22);
      if (v100)
      {
        if (*((const void **)a2 + 8) == v100)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v100, v102, v103, v104, v105, v106, v107, v108);
      }
      v109 = *((unsigned int *)a2 + 19);
      v23 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v23 + 8 * v109) = 0;
      *((_DWORD *)a2 + 19) = v109 + 1;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v23 + 8 * v22) = 0;
      *((_DWORD *)a2 + 19) = v22 + 1;
    }
  }
  *(_DWORD *)(v20 + 8) = v22;
  *(_QWORD *)(v23 + 8 * v22) = v20;
  v188 = v20;
  v24 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v24 == *((_DWORD *)a3 + 4))
  {
    v64 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v24 + 1, (unint64_t)&v188);
    v24 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v24] = *(_QWORD *)v64;
    v25 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v24) = v20;
    v25 = v20;
  }
  *((_DWORD *)a3 + 5) = v24 + 1;
  *(_QWORD *)(v25 + 32) = a3;
  *((_QWORD *)this + 4) = v20;
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = -1;
  *(_WORD *)(v26 + 12) = 4;
  *(_DWORD *)(v26 + 16) = 2;
  *(_BYTE *)(v26 + 20) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)v26 = off_1E357E2D0;
  v27 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v27 - 8);
    *((_DWORD *)a2 + 23) = v27 - 1;
    v29 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v28 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v28 == *((_DWORD *)a2 + 18))
    {
      v110 = v28 + (v28 >> 2);
      if (v110 >= 0x10)
        v111 = v110 + 1;
      else
        v111 = 16;
      if (v111 <= v28 + 1)
        v112 = v28 + 1;
      else
        v112 = v111;
      if (v112 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBB4);
      }
      v113 = (const void *)*((_QWORD *)a2 + 8);
      v114 = (void *)WTF::fastMalloc((WTF *)(8 * v112));
      *((_DWORD *)a2 + 18) = v112;
      *((_QWORD *)a2 + 8) = v114;
      memcpy(v114, v113, 8 * v28);
      if (v113)
      {
        if (*((const void **)a2 + 8) == v113)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v113, v115, v116, v117, v118, v119, v120, v121);
      }
      v122 = *((unsigned int *)a2 + 19);
      v29 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v29 + 8 * v122) = 0;
      *((_DWORD *)a2 + 19) = v122 + 1;
    }
    else
    {
      v29 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v29 + 8 * v28) = 0;
      *((_DWORD *)a2 + 19) = v28 + 1;
    }
  }
  *(_DWORD *)(v26 + 8) = v28;
  *(_QWORD *)(v29 + 8 * v28) = v26;
  v188 = v26;
  v30 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v30 == *((_DWORD *)a3 + 4))
  {
    v65 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v30 + 1, (unint64_t)&v188);
    v30 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v30] = *(_QWORD *)v65;
    v31 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v30) = v26;
    v31 = v26;
  }
  *((_DWORD *)a3 + 5) = v30 + 1;
  *(_QWORD *)(v31 + 32) = a3;
  *((_QWORD *)this + 5) = v26;
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v32 + 8) = -1;
  *(_WORD *)(v32 + 12) = 4;
  *(_DWORD *)(v32 + 16) = 2;
  *(_BYTE *)(v32 + 20) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 1;
  *(_QWORD *)v32 = off_1E357E2D0;
  v33 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v33 - 8);
    *((_DWORD *)a2 + 23) = v33 - 1;
    v35 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v34 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v34 == *((_DWORD *)a2 + 18))
    {
      v123 = v34 + (v34 >> 2);
      if (v123 >= 0x10)
        v124 = v123 + 1;
      else
        v124 = 16;
      if (v124 <= v34 + 1)
        v125 = v34 + 1;
      else
        v125 = v124;
      if (v125 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBBCLL);
      }
      v126 = (const void *)*((_QWORD *)a2 + 8);
      v127 = (void *)WTF::fastMalloc((WTF *)(8 * v125));
      *((_DWORD *)a2 + 18) = v125;
      *((_QWORD *)a2 + 8) = v127;
      memcpy(v127, v126, 8 * v34);
      if (v126)
      {
        if (*((const void **)a2 + 8) == v126)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v126, v128, v129, v130, v131, v132, v133, v134);
      }
      v135 = *((unsigned int *)a2 + 19);
      v35 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v35 + 8 * v135) = 0;
      *((_DWORD *)a2 + 19) = v135 + 1;
    }
    else
    {
      v35 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v35 + 8 * v34) = 0;
      *((_DWORD *)a2 + 19) = v34 + 1;
    }
  }
  *(_DWORD *)(v32 + 8) = v34;
  *(_QWORD *)(v35 + 8 * v34) = v32;
  v188 = v32;
  v36 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v36 == *((_DWORD *)a3 + 4))
  {
    v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v36 + 1, (unint64_t)&v188);
    v36 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v36] = *(_QWORD *)v66;
    v37 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v36) = v32;
    v37 = v32;
  }
  *((_DWORD *)a3 + 5) = v36 + 1;
  *(_QWORD *)(v37 + 32) = a3;
  *((_QWORD *)this + 6) = v32;
  v38 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 12) = 4;
  *(_DWORD *)(v38 + 16) = 2;
  *(_BYTE *)(v38 + 20) = 0;
  *(_QWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 2;
  *(_QWORD *)v38 = off_1E357E2D0;
  v39 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v39)
  {
    v40 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v39 - 8);
    *((_DWORD *)a2 + 23) = v39 - 1;
    v41 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v40 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v40 == *((_DWORD *)a2 + 18))
    {
      v136 = v40 + (v40 >> 2);
      if (v136 >= 0x10)
        v137 = v136 + 1;
      else
        v137 = 16;
      if (v137 <= v40 + 1)
        v138 = v40 + 1;
      else
        v138 = v137;
      if (v138 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBC4);
      }
      v139 = (const void *)*((_QWORD *)a2 + 8);
      v140 = (void *)WTF::fastMalloc((WTF *)(8 * v138));
      *((_DWORD *)a2 + 18) = v138;
      *((_QWORD *)a2 + 8) = v140;
      memcpy(v140, v139, 8 * v40);
      if (v139)
      {
        if (*((const void **)a2 + 8) == v139)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v139, v141, v142, v143, v144, v145, v146, v147);
      }
      v148 = *((unsigned int *)a2 + 19);
      v41 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v41 + 8 * v148) = 0;
      *((_DWORD *)a2 + 19) = v148 + 1;
    }
    else
    {
      v41 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v41 + 8 * v40) = 0;
      *((_DWORD *)a2 + 19) = v40 + 1;
    }
  }
  *(_DWORD *)(v38 + 8) = v40;
  *(_QWORD *)(v41 + 8 * v40) = v38;
  v188 = v38;
  v42 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v42 == *((_DWORD *)a3 + 4))
  {
    v67 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v42 + 1, (unint64_t)&v188);
    v42 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v42] = *(_QWORD *)v67;
    v43 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v42) = v38;
    v43 = v38;
  }
  *((_DWORD *)a3 + 5) = v42 + 1;
  *(_QWORD *)(v43 + 32) = a3;
  *((_QWORD *)this + 7) = v38;
  v44 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v44 + 8) = -1;
  *(_WORD *)(v44 + 12) = 4;
  *(_DWORD *)(v44 + 16) = 2;
  *(_BYTE *)(v44 + 20) = 0;
  *(_QWORD *)(v44 + 24) = 0;
  *(_QWORD *)(v44 + 32) = 0;
  *(_QWORD *)(v44 + 40) = 3;
  *(_QWORD *)v44 = off_1E357E2D0;
  v45 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v45)
  {
    v46 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v45 - 8);
    *((_DWORD *)a2 + 23) = v45 - 1;
    v47 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v46 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v46 == *((_DWORD *)a2 + 18))
    {
      v149 = v46 + (v46 >> 2);
      if (v149 >= 0x10)
        v150 = v149 + 1;
      else
        v150 = 16;
      if (v150 <= v46 + 1)
        v151 = v46 + 1;
      else
        v151 = v150;
      if (v151 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBCCLL);
      }
      v152 = (const void *)*((_QWORD *)a2 + 8);
      v153 = (void *)WTF::fastMalloc((WTF *)(8 * v151));
      *((_DWORD *)a2 + 18) = v151;
      *((_QWORD *)a2 + 8) = v153;
      memcpy(v153, v152, 8 * v46);
      if (v152)
      {
        if (*((const void **)a2 + 8) == v152)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v152, v154, v155, v156, v157, v158, v159, v160);
      }
      v161 = *((unsigned int *)a2 + 19);
      v47 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v47 + 8 * v161) = 0;
      *((_DWORD *)a2 + 19) = v161 + 1;
    }
    else
    {
      v47 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v47 + 8 * v46) = 0;
      *((_DWORD *)a2 + 19) = v46 + 1;
    }
  }
  *(_DWORD *)(v44 + 8) = v46;
  *(_QWORD *)(v47 + 8 * v46) = v44;
  v188 = v44;
  v48 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v48 == *((_DWORD *)a3 + 4))
  {
    v68 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v48 + 1, (unint64_t)&v188);
    v48 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v48] = *(_QWORD *)v68;
    v49 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v48) = v44;
    v49 = v44;
  }
  *((_DWORD *)a3 + 5) = v48 + 1;
  *(_QWORD *)(v49 + 32) = a3;
  *((_QWORD *)this + 8) = v44;
  v50 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v50 + 8) = -1;
  *(_WORD *)(v50 + 12) = 4;
  *(_DWORD *)(v50 + 16) = 2;
  *(_BYTE *)(v50 + 20) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = 8;
  *(_QWORD *)v50 = off_1E357E2D0;
  v51 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v51)
  {
    v52 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v51 - 8);
    *((_DWORD *)a2 + 23) = v51 - 1;
    v53 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v52 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v52 == *((_DWORD *)a2 + 18))
    {
      v162 = v52 + (v52 >> 2);
      if (v162 >= 0x10)
        v163 = v162 + 1;
      else
        v163 = 16;
      if (v163 <= v52 + 1)
        v164 = v52 + 1;
      else
        v164 = v163;
      if (v164 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19857EBD4);
      }
      v165 = (const void *)*((_QWORD *)a2 + 8);
      v166 = (void *)WTF::fastMalloc((WTF *)(8 * v164));
      *((_DWORD *)a2 + 18) = v164;
      *((_QWORD *)a2 + 8) = v166;
      memcpy(v166, v165, 8 * v52);
      if (v165)
      {
        if (*((const void **)a2 + 8) == v165)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v165, v167, v168, v169, v170, v171, v172, v173);
      }
      v174 = *((unsigned int *)a2 + 19);
      v53 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v53 + 8 * v174) = 0;
      *((_DWORD *)a2 + 19) = v174 + 1;
    }
    else
    {
      v53 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v53 + 8 * v52) = 0;
      *((_DWORD *)a2 + 19) = v52 + 1;
    }
  }
  *(_DWORD *)(v50 + 8) = v52;
  *(_QWORD *)(v53 + 8 * v52) = v50;
  v188 = v50;
  v54 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v54 == *((_DWORD *)a3 + 4))
  {
    v69 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v54 + 1, (unint64_t)&v188);
    v54 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v54] = *(_QWORD *)v69;
    v55 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v54) = v50;
    v55 = v50;
  }
  *((_DWORD *)a3 + 5) = v54 + 1;
  *(_QWORD *)(v55 + 32) = a3;
  *((_QWORD *)this + 9) = v50;
  v56 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v56 + 8) = -1;
  *(_WORD *)(v56 + 12) = 5;
  *(_DWORD *)(v56 + 16) = 4;
  *(_BYTE *)(v56 + 20) = 0;
  *(_QWORD *)(v56 + 32) = 0;
  *(_QWORD *)(v56 + 40) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  *(_QWORD *)v56 = off_1E357DC30;
  v57 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v57)
  {
    v58 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v57 - 8);
    *((_DWORD *)a2 + 23) = v57 - 1;
    v59 = *((_QWORD *)a2 + 8);
    goto LABEL_44;
  }
  v58 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v58 != *((_DWORD *)a2 + 18))
  {
    v59 = *((_QWORD *)a2 + 8);
    *(_QWORD *)(v59 + 8 * v58) = 0;
    *((_DWORD *)a2 + 19) = v58 + 1;
    goto LABEL_44;
  }
  v175 = v58 + (v58 >> 2);
  if (v175 >= 0x10)
    v176 = v175 + 1;
  else
    v176 = 16;
  if (v176 <= v58 + 1)
    v177 = v58 + 1;
  else
    v177 = v176;
  if (v177 >> 29)
  {
    __break(0xC471u);
LABEL_182:
    JUMPOUT(0x19857EB9CLL);
  }
  v178 = (const void *)*((_QWORD *)a2 + 8);
  v179 = (void *)WTF::fastMalloc((WTF *)(8 * v177));
  *((_DWORD *)a2 + 18) = v177;
  *((_QWORD *)a2 + 8) = v179;
  memcpy(v179, v178, 8 * v58);
  if (v178)
  {
    if (*((const void **)a2 + 8) == v178)
    {
      *((_QWORD *)a2 + 8) = 0;
      *((_DWORD *)a2 + 18) = 0;
    }
    WTF::fastFree((unint64_t)v178, v180, v181, v182, v183, v184, v185, v186);
  }
  v187 = *((unsigned int *)a2 + 19);
  v59 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(v59 + 8 * v187) = 0;
  *((_DWORD *)a2 + 19) = v187 + 1;
LABEL_44:
  *(_DWORD *)(v56 + 8) = v58;
  *(_QWORD *)(v59 + 8 * v58) = v56;
  v188 = v56;
  v60 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v60 == *((_DWORD *)a3 + 4))
  {
    v70 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 1, v60 + 1, (unint64_t)&v188);
    v60 = *((unsigned int *)a3 + 5);
    *(_QWORD *)&a3[1][8 * v60] = *(_QWORD *)v70;
    v61 = v188;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v60) = v56;
    v61 = v56;
  }
  *((_DWORD *)a3 + 5) = v60 + 1;
  *(_QWORD *)(v61 + 32) = a3;
  *((_QWORD *)this + 10) = v56;
}

void JSC::FTL::compile(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  JSC::B3::Procedure *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  WTF *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  unint64_t v46;
  WTF *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  _QWORD *v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int *v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  char *v70;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  pthread_key_t *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  JSC::CCallHelpers *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  WTF *v112;
  int j;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  int v128;
  int k;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  int *v139;
  int *v140;
  int v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  WTF *v156;
  unsigned int v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  char v168;
  int *v169;
  int *v170;
  int v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int *v210;
  uint64_t v211;
  WTF *v212;
  WTF *v214;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  JSC::LinkBuffer *v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int *v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  JSC::Profiler::Compilation *v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF *v272;
  uint64_t v273;
  int v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  WTF *v333;
  WTF *v334;
  unint64_t v335;
  const JSC::CodeOrigin *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  WTF *v350;
  WTF *v352;
  WTF *v353;
  _QWORD *v354;
  _QWORD *v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  WTF *v363;
  WTF *v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  WTF *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  WTF *v378;
  WTF *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  WTF *v389;
  unsigned int *v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  WTF *v414;
  WTF *v415;
  WTF::PrintStream *v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  WTF *v424;
  WTF *v425;
  uint64_t v426;
  JSC::Profiler::Compilation *v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  WTF *v435;
  WTF *v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  WTF *v474;
  uint64_t v475;
  int v476;
  BOOL v477;
  BOOL v478;
  BOOL v479;
  BOOL v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  JSC::Profiler::Database **v484;
  WTF *v485[2];
  uint64_t v486;
  JSC::DFG::Node *v487;
  _QWORD v488[3];
  JSC::Profiler::Compilation *v489;
  WTF *v490;
  uint64_t v491;
  int v492;
  int v493;
  int v494;
  char v495;
  __int16 v496;
  char v497;
  WTF *v498;
  uint64_t v499;
  _QWORD v500[3];
  int v501;
  int v502;
  int v503;
  WTF *v504[2];
  WTF *v505;
  WTF *v506;
  WTF *v507[2];
  _BYTE v508[128];
  __int128 v509;
  WTF *v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  WTF *v515;
  _BYTE v516[128];
  unsigned int v517;
  unsigned int m;
  int v519;
  char v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 *v524;
  char v525;
  uint64_t v526;
  int v527;
  __int128 *v528;
  char v529;
  uint64_t v530;
  int v531;
  char v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;

  v535 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v482 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v484 = (JSC::Profiler::Database **)(v482 + 90440);
  if (!HIBYTE(word_1ECF4C286) && !(BYTE1(dword_1ECF4C28A) | BYTE2(dword_1ECF4C28A)))
  {
    v475 = *(_QWORD *)(v482 + 93016);
    if (!v475)
    {
      v476 = 0;
      goto LABEL_375;
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = -1;
  v13[4] = -1;
  v14 = *(_QWORD *)(v12 + 312);
  *(_QWORD *)(v12 + 312) = v13;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    if (*(_QWORD *)v14)
      WTF::fastFree(*(_QWORD *)v14 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(v12 + 197) = 1;
  if (!HIBYTE(word_1ECF4C286))
  {
    v476 = BYTE1(dword_1ECF4C28A);
    LODWORD(v475) = BYTE2(dword_1ECF4C28A);
LABEL_375:
    if (!v476 && !(_DWORD)v475)
    {
      v477 = !(_BYTE)qword_1ECF4C32A && byte_1ECF4C323 == 0;
      v478 = v477 && BYTE1(qword_1ECF4C32A) == 0;
      v479 = v478 && qword_1ECF4C332 == 0;
      v480 = v479 && byte_1ECF4C288 == 0;
      if (v480 && !*(_QWORD *)(*(_QWORD *)(v10 + 24) + 112) && !*(_BYTE *)(*(_QWORD *)(a1 + 8) + 210))
        JSC::DFG::Graph::freeDFGIRAfterLowering((JSC::DFG::Graph *)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *(_QWORD *)a1;
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 964);
  *(_BYTE *)(v16 + 964) = 1;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v509, v16, (uint64_t)a2, 0);
  JSC::B3::prepareForGeneration(*(JSC::B3::Procedure ***)(a1 + 8), v18, v19, v20, v21, v22, v23, v24);
  if (!(_BYTE)v512)
  {
    __break(0xC471u);
    JUMPOUT(0x19857FD04);
  }
  v32 = *(_QWORD *)(*((_QWORD *)&v509 + 1) + 48);
  if (v32)
  {
    if (*(__int128 **)(v32 + 64) != &v509)
    {
      __break(0xC471u);
      JUMPOUT(0x19857FD24);
    }
    v33 = (unsigned __int8 *)(v32 + 46);
    if (__ldaxr((unsigned __int8 *)(v32 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v33))
    {
      goto LABEL_15;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_15:
    *(_QWORD *)(v32 + 64) = 0;
  }
  v35 = v510;
  if (v510)
  {
    v510 = 0;
    v511 = 0;
    WTF::fastFree((unint64_t)v35, v25, v26, v27, v28, v29, v30, v31);
  }
  *(_BYTE *)(v16 + 964) = v17;
  a2[1] = 1;
  if (!*a2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 1100))
    {
      __break(0xC471u);
      JUMPOUT(0x19857FD44);
    }
    if (!*(_BYTE *)(a1 + 16))
    {
      JSC::B3::Air::Code::calleeSaveRegisterAtOffsetList(*(JSC::B3::Air::Code **)(*(_QWORD *)(a1 + 8) + 160), v504);
      if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A) | BYTE2(dword_1ECF4C28A))
      {
        *(_QWORD *)&v509 = v11;
        BYTE8(v509) = 5;
        WTF::dataLog<char const*,char [17],JSC::CodeBlockWithJITType,char [3],JSC::RegisterAtOffsetList,char [2]>((uint64_t *)&v509, (uint64_t **)v504);
      }
      v43 = v504[0];
      v44 = v504[1];
      v504[0] = 0;
      v45 = *(_QWORD *)(a1 + 24);
      v46 = *(_QWORD *)(v45 + 256);
      *(_QWORD *)(v45 + 256) = v43;
      if (v46)
        WTF::fastFree(v46, (void *)v36, v37, v38, v39, v40, v41, v42);
      *(_QWORD *)(v45 + 264) = v44;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 224) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + 184) >> 3;
      v47 = *(WTF **)(a1 + 64);
      v48 = *(_DWORD *)(v10 + 856) + (*((_QWORD *)v47 + 2) >> 3);
      v503 = v48;
      if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A) | BYTE2(dword_1ECF4C28A))
      {
        *(_QWORD *)&v509 = v47;
        v505 = v47;
        WTF::dataLog<char const*,char [16],int,char [18],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [5],WTF::RawPointer,char [2]>(&v503, (uint64_t *)&v509, (const void **)&v505);
      }
      v49 = *(_DWORD *)(v10 + 644);
      while (v49)
      {
        if (*(_DWORD *)(v10 + 644) <= --v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1985807DCLL);
        }
        v50 = *(_QWORD *)(*(_QWORD *)(v10 + 632) + 24 * v49);
        v51 = *(_DWORD *)(v50 + 36);
        if (v51 != 0x3FFFFFFF)
          *(_DWORD *)(v50 + 36) = v51 + v48;
        if (*(_QWORD *)v50)
        {
          v52 = **(_DWORD **)v50;
          if (v52 >= 2)
          {
            v53 = 9 * (v52 - 1);
            do
            {
              --v52;
              v54 = *(unsigned int **)v50;
              if (**(_DWORD **)v50 <= v52)
              {
                __break(0xC471u);
                JUMPOUT(0x19857FC94);
              }
              v55 = (_QWORD *)((char *)v54 + v53 + 4);
              if (*(unsigned __int8 *)v55 - 8 > 6)
              {
                *(_QWORD *)&v509 = *v55;
                v56 = *((_BYTE *)v54 + v53 + 12);
                BYTE8(v509) = v56;
              }
              else
              {
                v56 = 0;
                LOBYTE(v509) = *(_BYTE *)v55;
                *(_QWORD *)((char *)&v509 + 1) = v48 + *(unsigned int *)((char *)v54 + v53 + 5);
              }
              *v55 = v509;
              *((_BYTE *)v54 + v53 + 12) = v56;
              v53 -= 9;
            }
            while (v52 > 1);
          }
        }
        if ((*(_BYTE *)(v50 + 32) & 1) != 0)
        {
          if (*(unsigned __int8 *)(v50 + 40) - 8 > 6)
          {
            *(_QWORD *)&v509 = *(_QWORD *)(v50 + 40);
            v57 = *(_BYTE *)(v50 + 48);
            BYTE8(v509) = v57;
          }
          else
          {
            v57 = 0;
            LOBYTE(v509) = *(_BYTE *)(v50 + 40);
            *(_QWORD *)((char *)&v509 + 1) = (v48 + *(_DWORD *)(v50 + 41));
          }
          *(_QWORD *)(v50 + 40) = v509;
          *(_BYTE *)(v50 + 48) = v57;
        }
      }
      if (*(_BYTE *)(v10 + 960))
      {
        v444 = *(_DWORD *)(v11 + 48);
        if (v444 != 0x3FFFFFFF)
          *(_DWORD *)(v11 + 48) = v444 + v48;
      }
      v58 = *(_QWORD *)(a1 + 24);
      v59 = *(_QWORD *)(v58 + 272);
      if (v59)
      {
        v60 = 0;
        while (1)
        {
          if (v60 >> 3 >= *(unsigned int *)(v58 + 292))
          {
            __break(0xC471u);
            JUMPOUT(0x1985807CCLL);
          }
          v61 = *(_QWORD *)(*(_QWORD *)(v58 + 280) + 8 * (v60 >> 3));
          v62 = v61 + 48 * (v60 & 7);
          v65 = *(int **)(v62 + 24);
          v63 = (_QWORD *)(v62 + 24);
          v64 = v65;
          if (v65)
          {
            v66 = *v64;
            if (v66)
              break;
          }
LABEL_58:
          for (i = *(_QWORD *)(v61 + 48 * (v60 & 7) + 40); i; i = *(_QWORD *)(i + 32))
          {
            v72 = *(unsigned int *)(i + 28);
            if ((_DWORD)v72)
            {
              v73 = *(_QWORD *)(i + 16) + 8;
              v74 = 20 * v72;
              do
              {
                if ((*(_BYTE *)v73 & 0xFC) == 4)
                {
                  v77 = *(_QWORD *)(v73 + 1);
                  if ((v77 & 0x80000000) != 0)
                  {
                    LOBYTE(v76) = 0;
                    LOBYTE(v509) = *(_BYTE *)v73;
                    *(_QWORD *)((char *)&v509 + 1) = (v48 + v77);
                    v75 = v509;
                  }
                  else
                  {
                    v76 = HIBYTE(v77);
                    v75 = *(_QWORD *)v73;
                  }
                }
                else
                {
                  v75 = *(_QWORD *)v73;
                  LOBYTE(v76) = *(_BYTE *)(v73 + 8);
                }
                *(_QWORD *)v73 = v75;
                *(_BYTE *)(v73 + 8) = v76;
                v73 += 20;
                v74 -= 20;
              }
              while (v74);
            }
          }
          if (++v60 == v59)
            goto LABEL_72;
        }
        v67 = (v66 - 1);
        v68 = v67 + 8 * v67;
        while (1)
        {
          v69 = (_DWORD *)*v63;
          if (*(_DWORD *)*v63 <= v67)
            break;
          v70 = (char *)v69 + v68;
          if ((*((_BYTE *)v69 + v68 + 4) & 0xFC) == 4)
          {
            v38 = *(_QWORD *)(v70 + 5);
            if ((v38 & 0x80000000) != 0)
            {
              v36 = 0;
              v38 = (v48 + v38);
              LOBYTE(v509) = *((_BYTE *)v69 + v68 + 4);
              *(_QWORD *)((char *)&v509 + 1) = v38;
              v37 = v509;
            }
            else
            {
              v36 = HIBYTE(v38);
              v37 = *(_QWORD *)(v70 + 4);
            }
          }
          else
          {
            v37 = *(_QWORD *)(v70 + 4);
            v36 = v70[12];
          }
          *(_QWORD *)(v70 + 4) = v37;
          *((_BYTE *)v69 + v68 + 12) = v36;
          v68 -= 9;
          LODWORD(v67) = v67 - 1;
          if ((_DWORD)v67 == -1)
            goto LABEL_58;
        }
        __break(0xC471u);
LABEL_411:
        JUMPOUT(0x19857F3D4);
      }
LABEL_72:
      v78 = *(_QWORD *)(v11 + 224);
      if (v78 && *(_DWORD *)(v78 + 8))
      {
        if (*(_DWORD *)(v78 + 12))
          *(_DWORD *)(v78 + 12) = 0;
        v278 = *(_QWORD *)v78;
        if (*(_QWORD *)v78)
        {
          *(_QWORD *)v78 = 0;
          *(_DWORD *)(v78 + 8) = 0;
          WTF::fastFree(v278, (void *)v36, v37, v38, v39, v40, v41, v42);
        }
      }
      LOBYTE(v509) = 0;
      LOBYTE(v511) = 0;
      v512 = 0;
      v513 = 0;
      v514 = 0x8000000080000000;
      v515 = (WTF *)v516;
      v517 = 128;
      v79 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
      if (v79 != -1)
      {
        v505 = (WTF *)v485;
        v498 = (WTF *)&v505;
        std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v498, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
      }
      v80 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
      v88 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
      if (!v88)
      {
        v88 = WTF::fastMalloc((WTF *)0x98);
        WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v88, v80);
      }
      v89 = *(WTF **)v88;
      if (*(_QWORD *)v88 != v88 + 8)
      {
        v90 = *(_DWORD *)(v88 + 136);
        if (v517 < v90)
        {
          if (v515 && v515 != (WTF *)v516)
          {
            WTF::fastFree((unint64_t)v515, v81, v82, v83, v84, v85, v86, v87);
            v89 = *(WTF **)v88;
            v90 = *(_DWORD *)(v88 + 136);
          }
          v515 = v89;
          v517 = v90;
          *(_QWORD *)v88 = v88 + 8;
          *(_DWORD *)(v88 + 136) = 128;
        }
      }
      v520 = 1;
      m = 0;
      v519 = 0;
      v523 = 0u;
      v522 = 0u;
      v521 = 0u;
      v524 = &v509;
      v525 = 16;
      v526 = 0;
      v527 = 0x10000;
      v528 = &v509;
      v529 = 17;
      v530 = 0;
      v531 = 0x20000;
      v532 = 0;
      v533 = v11;
      v91 = *(_QWORD *)(v11 + 192);
      if (!v91)
        v91 = v11;
      v92 = *(_QWORD *)(v91 + 120);
      if (v92)
      {
        v93 = *(unsigned __int8 *)(v92 + 12);
        if ((v93 & 0xFE) != 2)
        {
          if (v93)
          {
            __break(0xC471u);
            JUMPOUT(0x1985808D4);
          }
        }
      }
      v534 = v91;
      v94 = *(_QWORD *)a1;
      v95 = *(_BYTE *)(*(_QWORD *)a1 + 964);
      *(_BYTE *)(v94 + 964) = 1;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v505, v94, (uint64_t)a2, 1);
      JSC::B3::Air::generate(*(JSC::B3::Air::GenerateAndAllocateRegisters ***)(*(_QWORD *)(a1 + 8) + 160), (JSC::B3::Air::Code *)&v509, v96, v97, v98, v99, v100, v101);
      if (!v508[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19857FDA8);
      }
      v109 = *((_QWORD *)v506 + 6);
      if (!v109)
      {
LABEL_94:
        v112 = v507[0];
        if (v507[0])
        {
          v507[0] = 0;
          LODWORD(v507[1]) = 0;
          WTF::fastFree((unint64_t)v112, v102, v103, v104, v105, v106, v107, v108);
        }
        *(_BYTE *)(v94 + 964) = v95;
        a2[1] = 1;
        if (!*a2)
        {
          for (j = m; j < SHIDWORD(v514); m = j)
          {
            if (j + 4 > v517)
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, (uint64_t)v102, v103, v104, v105, v106, v107, v108);
              j = m;
            }
            *(_DWORD *)((char *)v515 + j) = -721215457;
            j = m + 4;
          }
          v519 = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) = j;
          v114 = *((_QWORD *)*v484 + 1);
          v115 = (unsigned int *)*((_QWORD *)*v484 + 2);
          if (v115)
          {
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 + 1, v115));
            JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)&v509, v114, v103, v104, v105, v106, v107, v108);
            do
            {
              v124 = __ldaxr(v115);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v115));
            if (!v125)
            {
              atomic_store(1u, v115);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v115, v117, v118, v119, v120, v121, v122, v123);
              WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
            }
          }
          else
          {
            JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)&v509, v114, v103, v104, v105, v106, v107, v108);
          }
          v126 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
          if (!*(_DWORD *)(v126 + 268))
          {
            __break(0xC471u);
            JUMPOUT(0x19858089CLL);
          }
          v127 = **(_DWORD **)(v126 + 256);
          v128 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16);
          if (v128 == 4)
          {
            if ((*(_WORD *)(*(_QWORD *)(v11 + 56) + 28) & 0x3000) != 0x2000 || *(_DWORD *)(v11 + 28) == 1)
            {
              k = v127;
            }
            else
            {
              v505 = (WTF *)v507;
              v506 = (WTF *)2;
              for (k = m; k < SHIDWORD(v514); m = k)
              {
                if (k + 4 > v517)
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v117, v118, v119, v120, v121, v122, v123);
                  k = m;
                }
                *(_DWORD *)((char *)v515 + k) = -721215457;
                k = m + 4;
              }
              v519 = 0;
              v131 = k;
              if (k + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v117, v118, v119, v120, v121, v122, v123);
                v131 = m;
              }
              *(_DWORD *)((char *)v515 + v131) = -1203698719;
              m += 4;
              JSC::MacroAssemblerARM64::branch32((uint64_t)&v509, 2, 1, *(unsigned int *)(v11 + 28), v120, v121, v122, v123, (uint64_t)&v501);
              v137 = v501;
              if (v501 != -1)
              {
                v138 = HIDWORD(v506);
                if (HIDWORD(v506) == (_DWORD)v506)
                {
                  v139 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505, (void *)(HIDWORD(v506) + 1), (unint64_t)&v501, v132, v133, v134, v135, v136);
                  v141 = *v139;
                  v140 = v139 + 1;
                  v137 = v141;
                  v138 = HIDWORD(v506);
                }
                else
                {
                  v140 = &v502;
                }
                v142 = (char *)v505 + 12 * v138;
                *(_DWORD *)v142 = v137;
                *(_QWORD *)(v142 + 4) = *(_QWORD *)v140;
                ++HIDWORD(v506);
              }
              v143 = *(_DWORD *)(v11 + 28);
              v498 = (WTF *)v500;
              v499 = 2;
              JSC::AssemblyHelpers::getArityPadding((uint64_t)&v509, v482, v143, 1, 0, 2, 3, (uint64_t)&v498);
              v151 = m;
              if (m + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v151 = m;
              }
              *(_DWORD *)((char *)v515 + v151) = -1447068675;
              v152 = m;
              v153 = m + 4;
              m += 4;
              if (v152 + 8 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v153 = m;
              }
              *(_DWORD *)((char *)v515 + v153) = -1862269955;
              v154 = m + 4;
              m += 4;
              v156 = (WTF *)*((_QWORD *)*v484 + 39);
              v155 = (unsigned int *)*((_QWORD *)*v484 + 40);
              if (v155)
              {
                do
                  v157 = __ldaxr(v155);
                while (__stlxr(v157 + 1, v155));
                v154 = m;
              }
              v519 = 0;
              if (v154 + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v154 = m;
              }
              *(_DWORD *)((char *)v515 + v154) = -1811939328;
              m += 4;
              LOBYTE(v486) = -1;
              BYTE3(v486) = 15;
              *(_WORD *)((char *)&v486 + 1) = 65;
              v485[0] = (WTF *)(m - 4);
              v485[1] = v156;
              WORD2(v486) = 384;
              if (HIDWORD(v513) == (_DWORD)v513)
              {
                v273 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v512, HIDWORD(v513) + 1, (unint64_t)v485, v146, v147, v148, v149, v150);
                v158 = v512 + 24 * HIDWORD(v513);
                *(_QWORD *)v158 = 0;
                *(_QWORD *)(v158 + 8) = 0;
                *(_BYTE *)(v158 + 16) = -1;
                v274 = (((*(unsigned __int8 *)(v158 + 19) >> 4) & 0xF) << 20) | 0xF0041;
                *(_WORD *)(v158 + 17) = 65;
                *(_BYTE *)(v158 + 19) = BYTE2(v274);
                *(_WORD *)(v158 + 20) &= 0xFC00u;
                v159 = *(_OWORD *)v273;
                v160 = *(_QWORD *)(v273 + 16);
              }
              else
              {
                v158 = v512 + 24 * HIDWORD(v513);
                v159 = *(_OWORD *)v485;
                v160 = v486;
              }
              *(_QWORD *)(v158 + 16) = v160;
              *(_OWORD *)v158 = v159;
              ++HIDWORD(v513);
              if (v155)
              {
                do
                {
                  v161 = __ldaxr(v155);
                  v162 = v161 - 1;
                }
                while (__stlxr(v162, v155));
                if (!v162)
                {
                  atomic_store(1u, v155);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v155, v144, v145, v146, v147, v148, v149, v150);
                  WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
                }
              }
              v163 = m;
              if (m + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v163 = m;
              }
              *(_DWORD *)((char *)v515 + v163) = -1862270017;
              v164 = m;
              v165 = m + 4;
              m += 4;
              if (v164 + 8 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v165 = m;
              }
              *(_DWORD *)((char *)v515 + v165) = -1463714819;
              v166 = m + 4;
              for (m = v166; v166 < SHIDWORD(v514); m = v166)
              {
                if (v166 + 4 > v517)
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                  v166 = m;
                }
                *(_DWORD *)((char *)v515 + v166) = -721215457;
                v166 = m + 4;
              }
              v167 = v166;
              if (v166 + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v167 = m;
              }
              *(_DWORD *)((char *)v515 + v167) = 335544320;
              m += 4;
              if (v532)
                v168 = 69;
              else
                v168 = 65;
              v493 = v166;
              v494 = 0;
              v495 = v168;
              v496 = 15;
              v497 = -1;
              if (v166 != -1)
              {
                if (HIDWORD(v506) == (_DWORD)v506)
                {
                  v169 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505, (void *)(HIDWORD(v506) + 1), (unint64_t)&v493, v146, v147, v148, v149, v150);
                  v171 = *v169;
                  v170 = v169 + 1;
                  v172 = (char *)v505 + 12 * HIDWORD(v506);
                  *(_DWORD *)v172 = v171;
                }
                else
                {
                  v170 = &v494;
                  v172 = (char *)v505 + 12 * HIDWORD(v506);
                  *(_DWORD *)v172 = v166;
                }
                *(_QWORD *)(v172 + 4) = *(_QWORD *)v170;
                ++HIDWORD(v506);
              }
              if (HIDWORD(v499))
              {
                v173 = 0;
                v174 = 0;
                v175 = 12 * HIDWORD(v499);
                do
                {
                  if (v174 >= HIDWORD(v499))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985807D4);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v498 + v173), (uint64_t)&v509, v145, v146, v147, v148, v149, v150);
                  ++v174;
                  v173 += 12;
                }
                while (v175 != v173);
              }
              v176 = m;
              if (m + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v176 = m;
              }
              *(_DWORD *)((char *)v515 + v176) = -1447068675;
              v177 = m;
              v178 = m + 4;
              m += 4;
              if (v177 + 8 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v144, v145, v146, v147, v148, v149, v150);
                v178 = m;
              }
              *(_DWORD *)((char *)v515 + v178) = -1862269955;
              m += 4;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(&v509, v11, 0, v146, v147, v148, v149, v150);
              JSC::MacroAssemblerARM64::store64((uint64_t)&v509, 29, v482 + 40, v179, v180, v181, v182, v183);
              if (!v520)
              {
                __break(0xC471u);
                JUMPOUT(0x1985803F4);
              }
              *((_DWORD *)v524 + 52) &= ~v527;
              v189 = v525;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(&v509, (uint64_t)operationThrowStackOverflowError, v525, v184, v185, v186, v187, v188);
              v519 = 0;
              v197 = m;
              if (m + 4 > v517)
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v515, v190, v191, v192, v193, v194, v195, v196);
                v197 = m;
              }
              *(_DWORD *)((char *)v515 + v197) = (32 * (v189 & 0x1F)) | 0xD63F0000;
              m += 4;
              v198 = *((_QWORD *)*v484 + 3);
              v199 = (unsigned int *)*((_QWORD *)*v484 + 4);
              if (v199)
              {
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 + 1, v199));
                JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)&v509, v198, v191, v192, v193, v194, v195, v196);
                do
                {
                  v208 = __ldaxr(v199);
                  v209 = v208 - 1;
                }
                while (__stlxr(v209, v199));
                if (!v209)
                {
                  atomic_store(1u, v199);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v199, (uint64_t)v201, v202, v203, v204, v205, v206, v207);
                  WTF::fastFree(v399, v400, v401, v402, v403, v404, v405, v406);
                }
              }
              else
              {
                JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)&v509, v198, v191, v192, v193, v194, v195, v196);
              }
              if (HIDWORD(v506))
              {
                v210 = (unsigned int *)v505;
                v211 = 12 * HIDWORD(v506);
                do
                {
                  LODWORD(v485[0]) = v127;
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v210, (unsigned int *)v485, (uint64_t)&v509, v203, v204, v205, v206, v207);
                  v210 += 3;
                  v211 -= 12;
                }
                while (v211);
              }
              v212 = v498;
              if (v500 != (_QWORD *)v498 && v498 != 0)
              {
                v498 = 0;
                LODWORD(v499) = 0;
                WTF::fastFree((unint64_t)v212, v201, v202, v203, v204, v205, v206, v207);
              }
              v214 = v505;
              if (v507 != (WTF **)v505 && v505 != 0)
              {
                v505 = 0;
                LODWORD(v506) = 0;
                WTF::fastFree((unint64_t)v214, v201, v202, v203, v204, v205, v206, v207);
              }
            }
          }
          else
          {
            if (v128 != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1985806A4);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(&v509, v117, v118, v119, v120, v121, v122, v123, (int *)&v505);
            k = (int)v505;
            JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)&v509, v279, v280, v281, v282, v283, v284, v285);
            JSC::ARM64Assembler::label(&v512, v286, v287, v288, v289, v290, v291, v292, (int *)&v498);
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v515, 335544320, v293, v294, v295, v296, v297, v298);
            if (v532)
              v304 = 69;
            else
              v304 = 65;
            v505 = (WTF *)v498;
            LOBYTE(v506) = v304;
            *(_WORD *)((char *)&v506 + 1) = 15;
            BYTE3(v506) = -1;
            v492 = v127;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v505, (unsigned int *)&v492, (uint64_t)&v509, v299, v300, v301, v302, v303);
            v127 = k;
          }
          v216 = WTF::fastMalloc((WTF *)0xE0);
          *(_QWORD *)v216 = 0;
          *(_QWORD *)(v216 + 8) = 0;
          *(_QWORD *)(v216 + 16) = v11;
          JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::AssemblerDataImpl(v216 + 24);
          *(_BYTE *)(v216 + 168) = 1;
          *(_DWORD *)(v216 + 169) = 0;
          *(_DWORD *)(v216 + 176) = 2;
          *(_OWORD *)(v216 + 184) = 0u;
          *(_OWORD *)(v216 + 200) = 0u;
          *(_QWORD *)(v216 + 216) = 0;
          JSC::LinkBuffer::linkCode(v216, (uint64_t)&v509, 0, v217, v218, v219, v220, v221);
          v222 = *(JSC::LinkBuffer **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v216;
          if (v222)
          {
            JSC::LinkBuffer::~LinkBuffer(v222, v102, v103, v104, v105, v106, v107, v108);
            WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
            v216 = *(_QWORD *)(a1 + 40);
          }
          if (*(_BYTE *)(v216 + 169))
          {
            if (*(_BYTE *)(v482 + 93123))
            {
              v445 = *(_QWORD *)(a1 + 8);
              if (!*(_BYTE *)(v445 + 210))
              {
                __break(0xC471u);
                JUMPOUT(0x1985807C4);
              }
              v490 = *(WTF **)(v445 + 184);
              v446 = *(_QWORD *)(v445 + 192);
              *(_QWORD *)(v445 + 184) = 0;
              *(_QWORD *)(v445 + 192) = 0;
              v491 = v446;
              JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder((uint64_t)&v505, 0, v482, (unsigned int *)&v490);
              v447 = *(_QWORD *)(a1 + 40);
              v448 = WTF::fastMalloc((WTF *)0x30);
              v498 = (WTF *)JSC::PCToCodeOriginMap::PCToCodeOriginMap(v448, &v505, v447, v449, v450, v451, v452, v453);
              std::unique_ptr<JSC::PCToCodeOriginMap>::operator=[abi:sn180100]((unint64_t *)(*(_QWORD *)(a1 + 24) + 136), (unint64_t *)&v498, v454, v455, v456, v457, v458, v459);
              std::unique_ptr<JSC::PCToCodeOriginMap>::~unique_ptr[abi:sn180100]((unint64_t *)&v498, v460, v461, v462, v463, v464, v465, v466);
              JSC::PCToCodeOriginMapBuilder::~PCToCodeOriginMapBuilder((JSC::PCToCodeOriginMapBuilder *)&v505, v467, v468, v469, v470, v471, v472, v473);
              v474 = v490;
              if (v490)
              {
                v490 = 0;
                LODWORD(v491) = 0;
                WTF::fastFree((unint64_t)v474, v102, v103, v104, v105, v106, v107, v108);
              }
              v216 = *(_QWORD *)(a1 + 40);
            }
            if (v127 < 4)
              v231 = 0;
            else
              v231 = *(_DWORD *)((v127 & 0xFFFFFFFC) + *(_QWORD *)(v216 + 24) - 4);
            v232 = *(_QWORD *)(v216 + 184);
            v233 = (v127 - v231) + v232;
            if (v232 > v233 || v232 + *(_QWORD *)(v216 + 8) < v233)
            {
              __break(0xC471u);
              JUMPOUT(0x19857FCB4);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = v233;
            v234 = *(_QWORD **)(a1 + 40);
            if (k < 4)
              v235 = 0;
            else
              v235 = *(_DWORD *)((k & 0xFFFFFFFC) + v234[3] - 4);
            v236 = v234[23];
            v237 = (k - v235) + v236;
            if (v236 > v237 || v236 + v234[1] < v237)
            {
              __break(0xC471u);
              JUMPOUT(0x19857FCD4);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 336) = v237;
            v238 = *(_QWORD *)(a1 + 24);
            v239 = *(_QWORD *)(a1 + 8);
            v240 = *(_QWORD *)(v239 + 152);
            *(_QWORD *)(v239 + 152) = 0;
            v241 = *(_QWORD *)(v238 + 328);
            *(_QWORD *)(v238 + 328) = v240;
            if (v241)
            {
              v242 = *(unsigned int *)(v241 + 12);
              if ((_DWORD)v242)
              {
                v275 = *(uint64_t **)v241;
                v276 = 8 * v242;
                do
                {
                  v277 = *v275;
                  *v275 = 0;
                  if (v277)
                    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
                  ++v275;
                  v276 -= 8;
                }
                while (v276);
              }
              v243 = *(_QWORD *)v241;
              if (*(_QWORD *)v241)
              {
                *(_QWORD *)v241 = 0;
                *(_DWORD *)(v241 + 8) = 0;
                WTF::fastFree(v243, v102, v103, v104, v105, v106, v107, v108);
              }
              WTF::fastFree(v241, v102, v103, v104, v105, v106, v107, v108);
            }
            v244 = *(_QWORD *)a1;
            v245 = *(_QWORD *)(*(_QWORD *)a1 + 872);
            if (v245)
            {
              v247 = *(unsigned int *)(v245 - 4);
              v248 = (unsigned int *)(v245 + 8 * v247);
              if (*(_DWORD *)(v245 - 12))
              {
                v246 = *(unsigned int **)(*(_QWORD *)a1 + 872);
                if ((_DWORD)v247)
                {
                  v305 = 8 * v247;
                  v246 = *(unsigned int **)(*(_QWORD *)a1 + 872);
                  while (*v246 + 1 <= 1)
                  {
                    v246 += 2;
                    v305 -= 8;
                    if (!v305)
                    {
                      v246 = v248;
                      goto LABEL_203;
                    }
                  }
                }
                goto LABEL_203;
              }
              v246 = (unsigned int *)(v245 + 8 * v247);
            }
            else
            {
              v246 = 0;
              v247 = 0;
            }
            v248 = (unsigned int *)(v245 + 8 * v247);
LABEL_203:
            if (v245)
              v249 = (unsigned int *)(v245 + 8 * *(unsigned int *)(v245 - 4));
            else
              v249 = 0;
            if (v249 != v246)
            {
              while (1)
              {
                v375 = *v246;
                v376 = *(_QWORD *)a1;
                if (*(_DWORD *)(*(_QWORD *)a1 + 460) <= v375)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858090CLL);
                }
                v483 = v246[1];
                v377 = *(_QWORD *)(v376 + 448) + 16 * v375;
                v378 = (WTF *)*(unsigned int *)(v377 + 12);
                v505 = 0;
                LODWORD(v506) = 0;
                HIDWORD(v506) = (_DWORD)v378;
                if ((_DWORD)v378)
                {
                  v379 = (WTF *)WTF::fastMalloc(v378);
                  LODWORD(v506) = (_DWORD)v378;
                  v505 = v379;
                  memcpy(v379, *(const void **)v377, *(unsigned int *)(v377 + 12));
                  v376 = *(_QWORD *)a1;
                }
                v380 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
                if (*(_DWORD *)(v380 + 268) <= v375)
                  break;
                v381 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)10924>(*(_QWORD **)(a1 + 40), *(_DWORD *)(*(_QWORD *)(v380 + 256) + 4 * v375));
                JSC::DFG::Graph::appendCatchEntrypoint(v376, v483, v381, (uint64_t)&v505, v382, v383, v384, v385);
                v389 = v505;
                if (v505)
                {
                  v505 = 0;
                  LODWORD(v506) = 0;
                  WTF::fastFree((unint64_t)v389, v386, v387, v388, v105, v106, v107, v108);
                }
                v390 = v246 + 2;
                v246 = v248;
                if (v390 != v248)
                {
                  v246 = v390;
                  while (*v246 + 1 <= 1)
                  {
                    v246 += 2;
                    if (v246 == v248)
                    {
                      v246 = v248;
                      break;
                    }
                  }
                }
                if (v246 == v249)
                {
                  v244 = *(_QWORD *)a1;
                  goto LABEL_206;
                }
              }
              __break(0xC471u);
              goto LABEL_411;
            }
LABEL_206:
            v250 = *(_QWORD *)(a1 + 24);
            v251 = v244 + 880;
            v252 = *(_QWORD *)(v244 + 880);
            v253 = *(unsigned int *)(v244 + 892);
            v254 = 126 - 2 * __clz(v253);
            if ((_DWORD)v253)
              v255 = v254;
            else
              v255 = 0;
            std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,false>(v252, (_QWORD *)(v252 + 24 * v253), v255, 1, v105, v106, v107, v108);
            WTF::FixedVector<JSC::DFG::CatchEntrypointData>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v250 + 104), v251, v256, v257, v258, v259, v260, v261);
            if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A) | BYTE2(dword_1ECF4C28A))
            {
              v262 = atomic_load(&WTF::initializeLogFile(void)::once);
              if (v262 != -1)
              {
                v505 = (WTF *)v485;
                v498 = (WTF *)&v505;
                std::__call_once(&WTF::initializeLogFile(void)::once, &v498, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
              }
              v263 = *(_QWORD *)(a1 + 40);
              v505 = (WTF *)_ZN3WTF19ScopedLambdaFunctorIFvPN3JSC3DFG4NodeEEZNS1_3FTL5State15dumpDisassemblyERNS_11PrintStreamERNS1_10LinkBufferERKNS_12ScopedLambdaIS5_EEEd_UlS4_E_E12implFunctionEPvS4_;
              v506 = (WTF *)&v505;
              JSC::FTL::State::dumpDisassembly((_QWORD *)a1, (WTF::PrintStream *)WTF::s_file, v263, (uint64_t)&v505);
            }
            v264 = *(JSC::Profiler::Compilation **)(*(_QWORD *)(v10 + 24) + 112);
            v489 = v264;
            if (v264)
            {
              v505 = (WTF *)v507;
              v506 = (WTF *)1;
              v498 = (WTF *)v11;
              LOBYTE(v499) = 5;
              LODWORD(v488[0]) = *(_DWORD *)(JSC::UnlinkedCodeBlock::instructions(*(JSC::UnlinkedCodeBlock **)(*(_QWORD *)(v10 + 32) + 56))
                                           + 12);
              WTF::toCString<char [26],JSC::CodeBlockWithJITType,char [23],unsigned int,char [3]>((uint64_t *)v485, (uint64_t *)&v498, v488);
              JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v505, v485);
              if (v485[0])
              {
                if (*(_DWORD *)v485[0] == 1)
                  WTF::fastFree((unint64_t)v485[0], v314, v315, v316, v317, v318, v319, v320);
                else
                  --*(_DWORD *)v485[0];
              }
              v321 = v505;
              if (v507 != (WTF **)v505 && v505)
              {
                v505 = 0;
                LODWORD(v506) = 0;
                WTF::fastFree((unint64_t)v321, v314, v315, v316, v317, v318, v319, v320);
              }
              JSC::DFG::Graph::ensureSSADominators((JSC::DFG::Graph *)v10);
              JSC::DFG::Graph::ensureSSANaturalLoops((JSC::DFG::Graph *)v10);
              JSC::DumpContext::DumpContext(v488);
              v505 = (WTF *)off_1E3572250;
              v506 = (WTF *)v508;
              *(_OWORD *)v507 = xmmword_199122F80;
              v508[0] = 0;
              v487 = 0;
              LODWORD(v322) = *(_DWORD *)(v10 + 60);
              if ((_DWORD)v322)
              {
                v323 = 0;
                do
                {
                  if (v322 <= v323)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985808FCLL);
                  }
                  v324 = *(_QWORD *)(v10 + 48);
                  v481 = v323;
                  v325 = *(_QWORD *)(v324 + 8 * v323);
                  if (v325)
                  {
                    JSC::DFG::Graph::dumpBlockHeader(v10, (uint64_t)&v505, (uint64_t)"    ", *(_QWORD *)(v324 + 8 * v323), 0);
                    v498 = (WTF *)v500;
                    v499 = 1;
                    WTF::StringPrintStream::toCString(&v505, (uint64_t *)v485);
                    JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v498, v485);
                    v333 = v485[0];
                    v485[0] = 0;
                    if (v333)
                    {
                      if (*(_DWORD *)v333 == 1)
                        WTF::fastFree((unint64_t)v333, v326, v327, v328, v329, v330, v331, v332);
                      else
                        --*(_DWORD *)v333;
                    }
                    v334 = v498;
                    if (v500 != (_QWORD *)v498 && v498)
                    {
                      v498 = 0;
                      LODWORD(v499) = 0;
                      WTF::fastFree((unint64_t)v334, v326, v327, v328, v329, v330, v331, v332);
                    }
                    v507[0] = 0;
                    *(_BYTE *)v506 = 0;
                    if (*(_DWORD *)(v325 + 220))
                    {
                      v335 = 0;
                      do
                      {
                        v336 = *(const JSC::CodeOrigin **)(*(_QWORD *)(v325 + 208) + 8 * v335);
                        v498 = (WTF *)v500;
                        v499 = 1;
                        if ((*(_BYTE *)v336 & 2) == 0)
                        {
                          JSC::Profiler::OriginStack::OriginStack((JSC::Profiler::OriginStack *)v485, v484[322], (JSC::CodeBlock *)v11, v336);
                          WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v498, (uint64_t)v485, v337, v338, v339, v340, v341, v342);
                          v350 = v485[0];
                          if (&v486 != (uint64_t *)v485[0] && v485[0] != 0)
                          {
                            v485[0] = 0;
                            LODWORD(v485[1]) = 0;
                            WTF::fastFree((unint64_t)v350, v343, v344, v345, v346, v347, v348, v349);
                          }
                        }
                        if (JSC::DFG::Graph::dumpCodeOrigin((JSC::DFG::Graph *)v10, (WTF::PrintStream *)&v505, "    ", &v487, v336, (JSC::DumpContext *)v488))
                        {
                          v353 = v506;
                          v352 = v507[0];
                          v485[0] = 0;
                          if (v506)
                          {
                            if (v507[0] >= (WTF *)0xFFFFFFFFFFFFFFF0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1985808ECLL);
                            }
                            if (v507[0] == (WTF *)-17)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1985808F4);
                            }
                            v354 = (_QWORD *)WTF::fastMalloc((WTF *)((char *)v507[0] + 17));
                            *(_DWORD *)v354 = 1;
                            v354[1] = v352;
                            v485[0] = (WTF *)v354;
                            v355 = v354 + 2;
                            memcpy(v354 + 2, v353, (size_t)v352);
                            *((_BYTE *)v352 + (_QWORD)v355) = 0;
                          }
                          JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v498, v485);
                          if (v485[0])
                          {
                            if (*(_DWORD *)v485[0] == 1)
                              WTF::fastFree((unint64_t)v485[0], v356, v357, v358, v359, v360, v361, v362);
                            else
                              --*(_DWORD *)v485[0];
                          }
                          v507[0] = 0;
                          *(_BYTE *)v506 = 0;
                          v264 = v489;
                        }
                        JSC::DFG::Graph::dump((JSC::DFG::Graph *)v10, (WTF::PrintStream *)&v505, "    ", v336, (JSC::DumpContext *)v488);
                        v364 = v506;
                        v363 = v507[0];
                        v485[0] = 0;
                        if (v506)
                        {
                          if (v507[0] >= (WTF *)0xFFFFFFFFFFFFFFF0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1985808DCLL);
                          }
                          if (v507[0] == (WTF *)-17)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1985808E4);
                          }
                          v365 = (_QWORD *)WTF::fastMalloc((WTF *)((char *)v507[0] + 17));
                          *(_DWORD *)v365 = 1;
                          v365[1] = v363;
                          v485[0] = (WTF *)v365;
                          v366 = v365 + 2;
                          memcpy(v365 + 2, v364, (size_t)v363);
                          *((_BYTE *)v363 + (_QWORD)v366) = 0;
                        }
                        JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v498, v485);
                        if (v485[0])
                        {
                          if (*(_DWORD *)v485[0] == 1)
                            WTF::fastFree((unint64_t)v485[0], v367, v368, v369, v370, v371, v372, v373);
                          else
                            --*(_DWORD *)v485[0];
                        }
                        v507[0] = 0;
                        *(_BYTE *)v506 = 0;
                        if ((*(_BYTE *)v336 & 2) == 0)
                          v487 = v336;
                        v374 = v498;
                        if (v500 != (_QWORD *)v498 && v498)
                        {
                          v498 = 0;
                          LODWORD(v499) = 0;
                          WTF::fastFree((unint64_t)v374, v367, v368, v369, v370, v371, v372, v373);
                        }
                        ++v335;
                      }
                      while (v335 < *(unsigned int *)(v325 + 220));
                    }
                  }
                  v323 = v481 + 1;
                  v322 = *(unsigned int *)(v10 + 60);
                }
                while (v481 + 1 < v322);
                v264 = v489;
              }
              JSC::DumpContext::dump((JSC::DumpContext *)v488, (WTF::PrintStream *)&v505, "    ");
              v498 = (WTF *)v500;
              v499 = 1;
              WTF::StringPrintStream::toCString(&v505, (uint64_t *)v485);
              JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v498, v485);
              v414 = v485[0];
              v485[0] = 0;
              if (v414)
              {
                if (*(_DWORD *)v414 == 1)
                  WTF::fastFree((unint64_t)v414, v407, v408, v409, v410, v411, v412, v413);
                else
                  --*(_DWORD *)v414;
              }
              v415 = v498;
              if (v500 != (_QWORD *)v498 && v498)
              {
                v498 = 0;
                LODWORD(v499) = 0;
                WTF::fastFree((unint64_t)v415, v407, v408, v409, v410, v411, v412, v413);
              }
              v507[0] = 0;
              *(_BYTE *)v506 = 0;
              v416 = (WTF::PrintStream *)(*((uint64_t (**)(WTF **))v505 + 4))(&v505);
              WTF::PrintStream::printf(v416, "%s", "\n\n\n    FTL B3/Air Disassembly:\n");
              (*((void (**)(WTF **))v505 + 5))(&v505);
              v498 = (WTF *)v500;
              v499 = 1;
              WTF::StringPrintStream::toCString(&v505, (uint64_t *)v485);
              JSC::Profiler::Compilation::addDescription((uint64_t)v264, (uint64_t)&v498, v485);
              v424 = v485[0];
              v485[0] = 0;
              if (v424)
              {
                if (*(_DWORD *)v424 == 1)
                  WTF::fastFree((unint64_t)v424, v417, v418, v419, v420, v421, v422, v423);
                else
                  --*(_DWORD *)v424;
              }
              v425 = v498;
              if (v500 != (_QWORD *)v498 && v498)
              {
                v498 = 0;
                LODWORD(v499) = 0;
                WTF::fastFree((unint64_t)v425, v417, v418, v419, v420, v421, v422, v423);
              }
              v507[0] = 0;
              *(_BYTE *)v506 = 0;
              v426 = *(_QWORD *)(a1 + 40);
              v498 = (WTF *)WTF::ScopedLambdaFunctor<void ()(JSC::DFG::Node *),JSC::FTL::compile(JSC::FTL::State &,JSC::Safepoint::Result &)::$_0>::implFunction;
              v499 = (uint64_t)&v498;
              v500[0] = &v489;
              v500[1] = &v505;
              JSC::FTL::State::dumpDisassembly((_QWORD *)a1, (WTF::PrintStream *)&v505, v426, (uint64_t)&v498);
              v427 = v489;
              v498 = (WTF *)v500;
              v499 = 1;
              WTF::StringPrintStream::toCString(&v505, (uint64_t *)v485);
              JSC::Profiler::Compilation::addDescription((uint64_t)v427, (uint64_t)&v498, v485);
              v435 = v485[0];
              v485[0] = 0;
              if (v435)
              {
                if (*(_DWORD *)v435 == 1)
                  WTF::fastFree((unint64_t)v435, v428, v429, v430, v431, v432, v433, v434);
                else
                  --*(_DWORD *)v435;
              }
              v436 = v498;
              if (v500 != (_QWORD *)v498 && v498)
              {
                v498 = 0;
                LODWORD(v499) = 0;
                WTF::fastFree((unint64_t)v436, v428, v429, v430, v431, v432, v433, v434);
              }
              v507[0] = 0;
              *(_BYTE *)v506 = 0;
              WTF::RefPtr<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::operator=((JSC::Profiler::Compilation **)(*(_QWORD *)(a1 + 24) + 216), v489, v429, v430, v431, v432, v433, v434);
              if (v506 != (WTF *)v508)
                WTF::fastFree((unint64_t)v506, v437, v438, v439, v440, v441, v442, v443);
              JSC::DumpContext::~DumpContext((JSC::DumpContext *)v488);
            }
            goto LABEL_214;
          }
          *(_BYTE *)(a1 + 16) = 1;
        }
LABEL_214:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)&v509, v102, v103, v104, v105, v106, v107, v108);
        v272 = v504[0];
        v504[0] = 0;
        if (v272)
          WTF::fastFree((unint64_t)v272, v265, v266, v267, v268, v269, v270, v271);
        return;
      }
      if (*(WTF ***)(v109 + 64) != &v505)
      {
        __break(0xC471u);
        JUMPOUT(0x19857FDC8);
      }
      v110 = (unsigned __int8 *)(v109 + 46);
      if (__ldaxr((unsigned __int8 *)(v109 + 46)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v110))
      {
        goto LABEL_93;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v110);
LABEL_93:
      *(_QWORD *)(v109 + 64) = 0;
      goto LABEL_94;
    }
  }
}

uint64_t WTF::dataLog<char const*,char [17],JSC::CodeBlockWithJITType,char [3],JSC::RegisterAtOffsetList,char [2]>(uint64_t *a1, uint64_t **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v12;
  uint64_t ***v13;
  uint64_t **v14;
  _QWORD v15[4];
  char v16;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = (uint64_t **)&v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "FTL ");
  WTF::PrintStream::printf(v6, "%s", "Unwind info for ");
  JSC::CodeBlock::dumpAssumingJITType(*a1);
  WTF::PrintStream::printf(v6, "%s", ": ");
  v14 = a2;
  v15[0] = ", ";
  v15[1] = 3;
  v15[2] = &str_107_1;
  v15[3] = 1;
  v16 = 0;
  v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  v8 = *a2;
  if (*a2)
    v9 = *a2 + 1;
  else
    v9 = 0;
  if (v8)
LABEL_7:
    v8 += *(unsigned int *)v8 + 1;
  while (v9 != v8)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::RegisterAtOffset>(v10, (uint64_t)v15, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    ++v9;
    v8 = *v14;
    if (*v14)
      goto LABEL_7;
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char const*,char [16],int,char [18],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [5],WTF::RawPointer,char [2]>(_DWORD *a1, uint64_t *a2, const void **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  int v10;
  WTF::PrintStream *v11;
  const char *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "FTL ");
  WTF::PrintStream::printf(v8, "%s", "localsOffset = ");
  WTF::PrintStream::printf(v8, "%d", *a1);
  WTF::PrintStream::printf(v8, "%s", " for stack slot: ");
  v9 = *a2;
  if (v9)
  {
    v10 = *(unsigned __int8 *)(v9 + 4);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    v12 = "stack";
    if (v10 == 1)
      v12 = "spill";
    WTF::PrintStream::printf(v11, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v13, "%u");
  }
  else
  {
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v14, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " at ");
  WTF::PrintStream::printf(v8, "%p", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

void JSC::PCToCodeOriginMapBuilder::~PCToCodeOriginMapBuilder(JSC::PCToCodeOriginMapBuilder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v9 = *((unsigned int *)this + 3);
  v10 = *(_QWORD *)this;
  if (!(_DWORD)v9)
  {
    if (!v10)
      return;
    goto LABEL_3;
  }
  v11 = 16 * v9;
  v12 = (_QWORD *)(v10 + 8);
  do
  {
    v14 = *v12;
    v12 += 2;
    v13 = v14;
    if ((v14 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    {
      v15 = v12;
      v16 = v11;
      WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v12 = v15;
      v11 = v16;
    }
    v11 -= 16;
  }
  while (v11);
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
LABEL_3:
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::Graph::appendCatchEntrypoint(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  int v23;

  v21 = a3;
  WTF::FixedVector<JSC::DFG::FlushFormat>::FixedVector<0ul,WTF::CrashOnOverflow>((unint64_t *)&v22, a4, a3, a4, a5, a6, a7, a8);
  v23 = a2;
  v17 = *(_DWORD *)(a1 + 892);
  if (v17 == *(_DWORD *)(a1 + 888))
  {
    WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CatchEntrypointData>(a1 + 880, (unint64_t)&v21);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 880) + 24 * v17;
    *(_QWORD *)v18 = v21;
    v19 = v22;
    v22 = 0;
    *(_QWORD *)(v18 + 8) = v19;
    *(_DWORD *)(v18 + 16) = v23;
    ++*(_DWORD *)(a1 + 892);
  }
  v20 = v22;
  v22 = 0;
  if (v20)
    WTF::fastFree((unint64_t)v20, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)10924>(_QWORD *a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 4)
    v2 = 0;
  else
    v2 = *(_DWORD *)((a2 & 0xFFFFFFFC) + a1[3] - 4);
  v3 = a1[23];
  v4 = (a2 - v2) + v3;
  if (v3 <= v4 && v3 + a1[1] >= v4)
    return v4;
  result = 366;
  __break(0xC471u);
  return result;
}

void WTF::toCString<char [26],JSC::CodeBlockWithJITType,char [23],unsigned int,char [3]>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "Generated FTL DFG IR for ");
  JSC::CodeBlock::dumpAssumingJITType(*a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", ", instructions size = ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%u", *a3);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", ":\n");
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_6:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198580FF8);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_6;
}

JSC::Profiler::Compilation **WTF::RefPtr<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::operator=(JSC::Profiler::Compilation **a1, JSC::Profiler::Compilation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Profiler::Compilation *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
    ++*(_DWORD *)a2;
  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return a1;
}

void JSC::FTL::ExceptionTarget::~ExceptionTarget(JSC::FTL::ExceptionTarget *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t JSC::FTL::ExceptionTarget::label(JSC::FTL::ExceptionTarget *this, JSC::LinkBuffer *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  if (*((_BYTE *)this + 4))
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 4);
    if (v2 < 4)
      v3 = 0;
    else
      v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
    v4 = (v2 - v3);
    v5 = *((_QWORD *)a2 + 23);
    result = v4 + v5;
    if (v5 > v4 + v5 || v5 + *((_QWORD *)a2 + 1) < result)
    {
      __break(0xC471u);
      JUMPOUT(0x1985811ACLL);
    }
  }
  else
  {
    v8 = *(_DWORD *)(*((_QWORD *)this + 2) + 16);
    if (v8 < 4)
      v9 = 0;
    else
      v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
    v10 = (v8 - v9);
    v11 = *((_QWORD *)a2 + 23);
    result = v10 + v11;
    if (v11 > v10 + v11 || v11 + *((_QWORD *)a2 + 1) < result)
    {
      __break(0xC471u);
      JUMPOUT(0x198581184);
    }
  }
  return result;
}

void JSC::FTL::ExceptionTarget::jumps(JSC::FTL::ExceptionTarget *this@<X0>, JSC::CCallHelpers *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  void *v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const void *v58;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v65;

  v6 = WTF::fastMalloc((WTF *)0x30);
  v7 = v6;
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 2;
  *a3 = v6;
  if (*((_BYTE *)this + 4))
  {
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v7 = *a3;
      v10 = *a3 == 0;
      if (*a3)
      {
        do
          v11 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v11 + 1, (unsigned int *)v7));
      }
      do
        v12 = __ldaxr(v8);
      while (__stlxr(v12 + 1, v8));
      v13 = WTF::fastMalloc((WTF *)0x20);
      v21 = v13;
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = &off_1E358FEE8;
      if (v7)
      {
        do
          v22 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v22 + 1, (unsigned int *)v7));
      }
      *(_QWORD *)(v13 + 16) = v7;
      do
        v23 = __ldaxr(v8);
      while (__stlxr(v23 + 1, v8));
    }
    else
    {
      do
        v52 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v52 + 1, (unsigned int *)v6));
      v53 = WTF::fastMalloc((WTF *)0x20);
      v21 = v53;
      *(_DWORD *)(v53 + 8) = 1;
      *(_QWORD *)v53 = &off_1E358FEE8;
      do
        v54 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v54 + 1, (unsigned int *)v7));
      v10 = 0;
      *(_QWORD *)(v53 + 16) = v7;
    }
    *(_QWORD *)(v21 + 24) = v8;
    v24 = *((unsigned int *)a2 + 61);
    if ((_DWORD)v24 != *((_DWORD *)a2 + 60))
    {
      v25 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v24);
      goto LABEL_13;
    }
    v32 = v24 + (v24 >> 2);
    if (v32 >= 0x10)
      v33 = v32 + 1;
    else
      v33 = 16;
    if (v33 <= v24 + 1)
      v34 = v24 + 1;
    else
      v34 = v33;
    if (!(v34 >> 29))
    {
      v35 = (const void *)*((_QWORD *)a2 + 29);
      v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
      *((_DWORD *)a2 + 60) = v34;
      *((_QWORD *)a2 + 29) = v36;
      memcpy(v36, v35, 8 * v24);
      if (v35)
      {
        if (*((const void **)a2 + 29) == v35)
        {
          *((_QWORD *)a2 + 29) = 0;
          *((_DWORD *)a2 + 60) = 0;
        }
        WTF::fastFree((unint64_t)v35, v14, v15, v16, v17, v18, v19, v20);
      }
      v24 = *((unsigned int *)a2 + 61);
      v25 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v24);
LABEL_13:
      *v25 = v21;
      *((_DWORD *)a2 + 61) = v24 + 1;
      if (v8)
      {
        do
        {
          v26 = __ldaxr(v8);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v8));
        if (!v27)
        {
          atomic_store(1u, v8);
          WTF::fastFree((unint64_t)v8, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      if (!v10)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v7);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v7));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)v7);
          v63 = *(_QWORD *)(v7 + 8);
          if (v7 + 24 != v63 && v63 != 0)
          {
            *(_QWORD *)(v7 + 8) = 0;
            *(_DWORD *)(v7 + 16) = 0;
            WTF::fastFree(v63, v14, v15, v16, v17, v18, v19, v20);
          }
          WTF::fastFree(v7, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      if (v8)
      {
        do
        {
          v30 = __ldaxr(v8);
          v31 = --v30 == 0;
        }
        while (__stlxr(v30, v8));
LABEL_22:
        if (v31)
        {
          atomic_store(1u, v8);
          WTF::fastFree((unint64_t)v8, v14, v15, v16, v17, v18, v19, v20);
        }
        return;
      }
      return;
    }
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x198581660);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v8)
  {
    do
      v37 = __ldaxr(v8);
    while (__stlxr(v37 + 1, v8));
    v7 = *a3;
    v38 = *a3 == 0;
    if (*a3)
    {
      do
        v39 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v39 + 1, (unsigned int *)v7));
    }
    do
      v40 = __ldaxr(v8);
    while (__stlxr(v40 + 1, v8));
    v41 = WTF::fastMalloc((WTF *)0x20);
    v42 = v41;
    *(_DWORD *)(v41 + 8) = 1;
    *(_QWORD *)v41 = &off_1E358FF10;
    if (v7)
    {
      do
        v43 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v43 + 1, (unsigned int *)v7));
    }
    *(_QWORD *)(v41 + 16) = v7;
    do
      v44 = __ldaxr(v8);
    while (__stlxr(v44 + 1, v8));
  }
  else
  {
    do
      v60 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v60 + 1, (unsigned int *)v6));
    v61 = WTF::fastMalloc((WTF *)0x20);
    v42 = v61;
    *(_DWORD *)(v61 + 8) = 1;
    *(_QWORD *)v61 = &off_1E358FF10;
    do
      v62 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v62 + 1, (unsigned int *)v7));
    v38 = 0;
    *(_QWORD *)(v61 + 16) = v7;
  }
  *(_QWORD *)(v42 + 24) = v8;
  v45 = *((unsigned int *)a2 + 61);
  if ((_DWORD)v45 == *((_DWORD *)a2 + 60))
  {
    v55 = v45 + (v45 >> 2);
    if (v55 >= 0x10)
      v56 = v55 + 1;
    else
      v56 = 16;
    if (v56 <= v45 + 1)
      v57 = v45 + 1;
    else
      v57 = v56;
    if (v57 >> 29)
      goto LABEL_90;
    v58 = (const void *)*((_QWORD *)a2 + 29);
    v59 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
    *((_DWORD *)a2 + 60) = v57;
    *((_QWORD *)a2 + 29) = v59;
    memcpy(v59, v58, 8 * v45);
    if (v58)
    {
      if (*((const void **)a2 + 29) == v58)
      {
        *((_QWORD *)a2 + 29) = 0;
        *((_DWORD *)a2 + 60) = 0;
      }
      WTF::fastFree((unint64_t)v58, v14, v15, v16, v17, v18, v19, v20);
    }
    v45 = *((unsigned int *)a2 + 61);
    v46 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v45);
  }
  else
  {
    v46 = (uint64_t *)(*((_QWORD *)a2 + 29) + 8 * v45);
  }
  *v46 = v42;
  *((_DWORD *)a2 + 61) = v45 + 1;
  if (v8)
  {
    do
    {
      v47 = __ldaxr(v8);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v8));
    if (!v48)
    {
      atomic_store(1u, v8);
      WTF::fastFree((unint64_t)v8, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  if (!v38)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v7);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v7));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v7);
      v65 = *(_QWORD *)(v7 + 8);
      if (v7 + 24 != v65 && v65 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        WTF::fastFree(v65, v14, v15, v16, v17, v18, v19, v20);
      }
      WTF::fastFree(v7, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  if (v8)
  {
    do
    {
      v51 = __ldaxr(v8);
      v31 = --v51 == 0;
    }
    while (__stlxr(v51, v8));
    goto LABEL_22;
  }
}

uint64_t WTF::PrintStream::printImpl<JSC::FTL::AbstractHeap>(WTF::PrintStream *a1, JSC::FTL::AbstractHeap *a2)
{
  uint64_t result;
  uint64_t v5;
  WTF::PrintStream *v6;

  result = JSC::FTL::AbstractHeap::shallowDump(a2, a1);
  v5 = *(_QWORD *)a2;
  if (v5)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v6, "%s", "->");
    WTF::PrintStream::printImpl<JSC::FTL::AbstractHeap>(v6, v5);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

uint64_t *WTF::HashTable<long,WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,std::unique_ptr<JSC::FTL::AbstractHeap>>>,WTF::IntHash<long>,WTF::HashMap<long,std::unique_ptr<JSC::FTL::AbstractHeap>,WTF::IntHash<long>,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits,WTF::HashTraits<std::unique_ptr<JSC::FTL::AbstractHeap>>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::FTL::IndexedAbstractHeap::WithoutZeroOrOneHashTraits>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *result;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (uint64_t *)(v10 + 16 * v21);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != 1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = (v24 + ~(v24 << 32)) ^ ((unint64_t)(v24 + ~(v24 << 32)) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = *(_QWORD *)(v25 + 16 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (v33);
          v34 = (uint64_t *)(v25 + 16 * v32);
          v35 = v34[1];
          v34[1] = 0;
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 8);
            if (v36)
            {
              *(_QWORD *)(v35 + 8) = 0;
              *(_DWORD *)(v35 + 16) = 0;
              WTF::fastFree(v36, v14, v15, v16, v17, v18, v19, v20);
            }
            WTF::fastFree(v35, v14, v15, v16, v17, v18, v19, v20);
          }
          *v34 = *v23;
          v37 = v10 + 16 * v21;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v34[1] = v38;
          v39 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 8);
            if (v40)
            {
              *(_QWORD *)(v39 + 8) = 0;
              *(_DWORD *)(v39 + 16) = 0;
              WTF::fastFree(v40, v14, v15, v16, v17, v18, v19, v20);
            }
            WTF::fastFree(v39, v14, v15, v16, v17, v18, v19, v20);
          }
          if (v23 == (uint64_t *)a3)
            v22 = v34;
        }
      }
      else
      {
        v41 = v23[1];
        v23[1] = 0;
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
          {
            *(_QWORD *)(v41 + 8) = 0;
            *(_DWORD *)(v41 + 16) = 0;
            WTF::fastFree(v42, v14, v15, v16, v17, v18, v19, v20);
          }
          WTF::fastFree(v41, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      ++v21;
    }
    while (v21 != v11);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v10)
      return result;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

unint64_t WTF::Vector<WTF::CString,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<WTF::CString,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<WTF::CString,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::Vector<WTF::CString,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  _DWORD *v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 0x11)
    {
      v12 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      v14 = (_QWORD *)v10;
      do
      {
        v15 = (_DWORD *)*v14;
        *v14 = 0;
        *v12 = v15;
        v16 = (_DWORD *)*v14;
        *v14 = 0;
        if (v16)
        {
          if (*v16 == 1)
            WTF::fastFree((unint64_t)v16, (void *)a2, a3, a4, a5, a6, a7, a8);
          else
            --*v16;
        }
        ++v12;
        ++v14;
        v13 -= 8;
      }
      while (v13);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::Vector<JSC::FTL::AbstractHeapRepository::HeapForValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::AbstractHeapRepository::HeapForValue>(uint64_t a1, unint64_t a2)
{
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::ScopedLambdaFunctor<void ()(JSC::DFG::Node *),JSC::FTL::compile(JSC::FTL::State &,JSC::Safepoint::Result &)::$_0>::implFunction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  _BYTE v20[16];

  v2 = *(_QWORD *)(a1 + 24);
  v3 = **(_QWORD **)(a1 + 16);
  v17 = 0;
  v18 = (WTF *)v20;
  v19 = 1;
  v5 = *(const void **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    if (v4 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198581C20);
    }
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(v4 + 17));
    *(_DWORD *)v6 = 1;
    v6[1] = v4;
    v17 = (WTF *)v6;
    memcpy(v6 + 2, v5, v4);
    *((_BYTE *)v6 + v4 + 16) = 0;
    JSC::Profiler::Compilation::addDescription(v3, (uint64_t)&v18, &v17);
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree((unint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
    else
      --*(_DWORD *)v6;
  }
  else
  {
    JSC::Profiler::Compilation::addDescription(v3, (uint64_t)&v18, &v17);
  }
  v14 = v18;
  if (v20 != (_BYTE *)v18 && v18 != 0)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
  }
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v16 + 16) = 0;
  **(_BYTE **)(v16 + 8) = 0;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_0>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v16 = *(_QWORD *)(v12 + 8);
      if (v12 + 24 != v16 && v16 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_0>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = *(_QWORD *)(v12 + 8);
      if (v12 + 24 != v15 && v15 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_0>::run(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  JSC::ExecutableAllocator *v15;
  unsigned int v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(v9 + 8);
      v12 = 12 * v10;
      do
      {
        v13 = *v11;
        if (*v11 < 4)
          v14 = 0;
        else
          v14 = *(_DWORD *)((v13 & 0xFFFFFFFC) + a2[3] - 4);
        v15 = (JSC::ExecutableAllocator *)a2[23];
        v16 = v13 - v14;
        JSC::ARM64Assembler::linkJump(v15, &v16, v7);
        v11 += 3;
        v12 -= 12;
      }
      while (v12);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_1>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v16 = *(_QWORD *)(v12 + 8);
      if (v12 + 24 != v16 && v16 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_1>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = *(_QWORD *)(v12 + 8);
      if (v12 + 24 != v15 && v15 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::ExceptionTarget::jumps(JSC::CCallHelpers &)::$_1>::run(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  JSC::ExecutableAllocator *v15;
  unsigned int v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(v9 + 8);
      v12 = 12 * v10;
      do
      {
        v13 = *v11;
        if (*v11 < 4)
          v14 = 0;
        else
          v14 = *(_DWORD *)((v13 & 0xFFFFFFFC) + a2[3] - 4);
        v15 = (JSC::ExecutableAllocator *)a2[23];
        v16 = v13 - v14;
        JSC::ARM64Assembler::linkJump(v15, &v16, v7);
        v11 += 3;
        v12 -= 12;
      }
      while (v12);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::FTL::ExitValue::dumpInContext(JSC::FTL::ExitValue *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v9;
  JSC::Structure *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  const char *v13;
  uint64_t result;
  const void *v15;
  unint64_t v16;

  switch(*(_BYTE *)this)
  {
    case 0:
    case 1:
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      WTF::PrintStream::printf(v4, "%s");
      goto LABEL_16;
    case 2:
      v5 = *(_QWORD *)((char *)this + 1);
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      WTF::PrintStream::printf(v6, "%s", "Argument(");
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printf(v7, "%s", "#");
      WTF::PrintStream::printf(v7, "%u", HIDWORD(v5));
      WTF::PrintStream::printf(v7, "%s", " as ");
      WTF::printInternal((uint64_t)v7, v5);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      goto LABEL_15;
    case 3:
      v16 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v9, "%s", "Constant(");
      v10 = 0;
      if (v16)
      {
        if ((v16 & 0xFFFE000000000002) == 0)
          v10 = (JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE));
      }
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v16, v9, a3, v10);
      WTF::PrintStream::printf(v9, "%s", ")");
      goto LABEL_13;
    case 4:
      LODWORD(v16) = *(_QWORD *)((char *)this + 1);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v12 = v11;
      v13 = "InJSStack:";
      goto LABEL_12;
    case 5:
      LODWORD(v16) = *(_QWORD *)((char *)this + 1);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v12 = v11;
      v13 = "InJSStackAsInt32:";
      goto LABEL_12;
    case 6:
      LODWORD(v16) = *(_QWORD *)((char *)this + 1);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v12 = v11;
      v13 = "InJSStackAsInt52:";
      goto LABEL_12;
    case 7:
      LODWORD(v16) = *(_QWORD *)((char *)this + 1);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v12 = v11;
      v13 = "InJSStackAsDouble:";
LABEL_12:
      WTF::PrintStream::printf(v11, "%s", v13);
      JSC::VirtualRegister::dump((unsigned int *)&v16, v12);
LABEL_13:
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    case 8:
      v15 = *(const void **)((char *)this + 1);
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      WTF::PrintStream::printf(v6, "%s", "Materialize(");
      WTF::PrintStream::printf(v6, "%p", v15);
LABEL_15:
      WTF::PrintStream::printf(v6, "%s");
LABEL_16:
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1985823E4);
  }
  return result;
}

uint64_t JSC::FTL::fail(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E358C5B0;
  v2[1] = v1;
  result = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

JSC::FTL::ForOSREntryJITCode *JSC::FTL::ForOSREntryJITCode::ForOSREntryJITCode(JSC::FTL::ForOSREntryJITCode *this)
{
  uint64_t v2;

  *((_DWORD *)this + 2) = 1;
  *((_WORD *)this + 6) = 5;
  *((_BYTE *)this + 14) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E358FFF0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v2 = 1;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 28) = -1;
  *((_WORD *)this + 116) = 256;
  *((_BYTE *)this + 234) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_QWORD *)this = off_1E358FF38;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 45) = 0xFFFFFFFFLL;
  return this;
}

void JSC::FTL::ForOSREntryJITCode::~ForOSREntryJITCode(JSC::FTL::ForOSREntryJITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v10;

  v10 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  JSC::FTL::JITCode::~JITCode((const void **)this, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::FTL::ForOSREntryJITCode::~ForOSREntryJITCode(this, a2, a3, a4, a5, a6, a7, a8, a9);
  WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::FTL::JITCode::~JITCode(const void **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  *this = off_1E358FFF0;
  if ((HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A) | BYTE2(dword_1ECF4C28A)) && this[39])
    WTF::dataLog<char [28],JSC::MacroAssemblerCodeRef<(WTF::PtrTag)357>,char [2]>(this + 39);
  v10 = (unint64_t)this[41];
  this[41] = 0;
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11)
    {
      v53 = *(uint64_t **)v10;
      v54 = 8 * v11;
      do
      {
        v55 = *v53;
        *v53 = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
        ++v53;
        v54 -= 8;
      }
      while (v54);
    }
    v12 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (unsigned int *)this[40];
  this[40] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
  v16 = *((unsigned int *)this + 77);
  if ((_DWORD)v16)
  {
    v43 = (unint64_t *)this[37];
    v44 = &v43[v16];
    do
    {
      v45 = *v43;
      *v43 = 0;
      if (v45)
      {
        v46 = *(unsigned int **)(v45 + 56);
        *(_QWORD *)(v45 + 56) = 0;
        if (v46)
        {
          v47 = v46 + 2;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
          }
        }
        v50 = *(unsigned int **)(v45 + 48);
        *(_QWORD *)(v45 + 48) = 0;
        if (v50)
        {
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            atomic_store(1u, v50);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v50, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
          }
        }
        WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v43;
    }
    while (v43 != v44);
  }
  v17 = (unint64_t)this[37];
  if (v17)
  {
    this[37] = 0;
    *((_DWORD *)this + 76) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  if (this[34])
  {
    v18 = 0;
    do
    {
      if (v18 >> 3 >= *((unsigned int *)this + 73))
      {
        __break(0xC471u);
        JUMPOUT(0x1985828E4);
      }
      v19 = *((_QWORD *)this[35] + (v18 >> 3));
      v20 = v19 + 48 * (v18 & 7);
      v23 = *(_QWORD *)(v20 + 40);
      v21 = (_QWORD *)(v20 + 40);
      v22 = v23;
      while (v22)
      {
        v27 = v22;
        v22 = *(_QWORD *)(v22 + 32);
        v28 = *(_QWORD *)(v27 + 16);
        if (v28)
        {
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 0;
          WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
        }
        v29 = *(_QWORD *)(v27 + 8);
        if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v29 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
      }
      *v21 = 0;
      v24 = v19 + 48 * (v18 & 7);
      v25 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)(v24 + 24) = 0;
      if (v25)
        WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      v26 = *(_QWORD *)(v19 + 48 * (v18 & 7) + 8);
      if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v26 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      ++v18;
    }
    while (v18 < (unint64_t)this[34]);
  }
  if (*((_DWORD *)this + 73))
  {
    v30 = 0;
    do
      WTF::fastFree(*((_QWORD *)this[35] + v30++), a2, a3, a4, a5, a6, a7, a8);
    while (v30 < *((unsigned int *)this + 73));
  }
  v31 = (unint64_t)this[35];
  if (v31)
  {
    this[35] = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = (unint64_t)this[32];
  this[32] = 0;
  if (v32)
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  v33 = *((_DWORD *)this + 63);
  if (v33)
  {
    v34 = this[30];
    v35 = &v34[9 * v33];
    do
    {
      v36 = v34[8];
      v34[8] = 0;
      if (v36)
        WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
      v37 = (unsigned int *)v34[6];
      v34[6] = 0;
      if (v37)
      {
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v37);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v37, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
      }
      v40 = v34[2];
      if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v40 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v41 = v34[1];
      if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v41 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v34 += 9;
    }
    while (v34 != v35);
  }
  v42 = (unint64_t)this[30];
  if (v42)
  {
    this[30] = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::CommonData::~CommonData((JSC::DFG::CommonData *)(this + 3), a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::FTL::JITCode::~JITCode(this, a2, a3, a4, a5, a6, a7, a8, a9);
  WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::FTL::ForOSREntryJITCode::initializeEntryBuffer(JSC::FTL::ForOSREntryJITCode *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = JSC::VM::scratchBufferForSize(a2, 8 * a3, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 44) = result;
  return result;
}

uint64_t JSC::FTL::JITCode::addressForCall(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a2)
  {
    v2 = a1 + 16;
    return *(_QWORD *)v2;
  }
  if (a2 == 1)
  {
    v2 = a1 + 336;
    return *(_QWORD *)v2;
  }
  result = 80;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::JITCode::executableAddressAtOffset(JSC::FTL::JITCode *this, uint64_t a2)
{
  return *((_QWORD *)this + 2) + a2;
}

void JSC::FTL::JITCode::dataAddressAtOffset(JSC::FTL::JITCode *this)
{
  __break(0xC471u);
}

void JSC::FTL::JITCode::offsetOf(JSC::FTL::JITCode *this, void *a2)
{
  __break(0xC471u);
}

uint64_t JSC::FTL::JITCode::size(JSC::FTL::JITCode *this)
{
  return 1000;
}

void JSC::FTL::JITCode::contains(JSC::FTL::JITCode *this, void *a2)
{
  __break(0xC471u);
}

uint64_t JSC::FTL::JITCode::dfgCommon(JSC::FTL::JITCode *this)
{
  return (uint64_t)this + 24;
}

{
  return (uint64_t)this + 24;
}

void JSC::FTL::JITCode::shrinkToFit(JSC::FTL::JITCode *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v9 = *((_QWORD *)this + 8);
  WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v9 + 8, *(unsigned int *)(v9 + 20), a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int *)(v9 + 36);
  if (*(_DWORD *)(v9 + 32) > v17)
  {
    v18 = *(_QWORD *)(v9 + 24);
    if ((_DWORD)v17)
    {
      *(_DWORD *)(v9 + 32) = v17;
      *(_QWORD *)(v9 + 24) = WTF::fastRealloc(v18, 4 * v17, v11, v12, v13, v14, v15, v16);
    }
    else if (v18)
    {
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  v19 = *((unsigned int *)this + 63);
  if (*((_DWORD *)this + 62) > v19)
  {
    v20 = (char *)*((_QWORD *)this + 30);
    if ((_DWORD)v19)
    {
      if (v19 >= 0x38E38E4)
      {
        __break(0xC471u);
        return;
      }
      v21 = WTF::fastMalloc((WTF *)(72 * v19));
      *((_DWORD *)this + 62) = 72 * (int)v19 / 0x48u;
      *((_QWORD *)this + 30) = v21;
      if ((char *)v21 != v20)
        WTF::VectorMover<false,JSC::FTL::OSRExit>::move(v20, &v20[72 * v19], v21, v12, v13, v14, v15, v16);
    }
    if (v20)
    {
      if (*((char **)this + 30) == v20)
      {
        *((_QWORD *)this + 30) = 0;
        *((_DWORD *)this + 62) = 0;
      }
      WTF::fastFree((unint64_t)v20, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  v22 = *((unsigned int *)this + 73);
  if (*((_DWORD *)this + 72) > v22)
  {
    v23 = *((_QWORD *)this + 35);
    if ((_DWORD)v22)
    {
      *((_DWORD *)this + 72) = v22;
      *((_QWORD *)this + 35) = WTF::fastRealloc(v23, 8 * v22, v11, v12, v13, v14, v15, v16);
    }
    else if (v23)
    {
      *((_QWORD *)this + 35) = 0;
      *((_DWORD *)this + 72) = 0;
      WTF::fastFree(v23, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  v24 = *((unsigned int *)this + 77);
  if (*((_DWORD *)this + 76) > v24)
  {
    v25 = *((_QWORD *)this + 37);
    if ((_DWORD)v24)
    {
      *((_DWORD *)this + 76) = v24;
      *((_QWORD *)this + 37) = WTF::fastRealloc(v25, 8 * v24, v11, v12, v13, v14, v15, v16);
    }
    else if (v25)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v25, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t JSC::FTL::JITCode::validateReferences(JSC::FTL::JITCode *this, const void ***a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  result = JSC::DFG::CommonData::validateReferences((uint64_t)this + 24, a2);
  v5 = *((unsigned int *)this + 63);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)this + 30);
    v7 = 72 * v5;
    v8 = (uint64_t *)(v6 + 32);
    do
    {
      v9 = *v8;
      v8 += 9;
      result = JSC::FTL::OSRExitDescriptor::validateReferences(v9, a2);
      v7 -= 72;
    }
    while (v7);
  }
  return result;
}

uint64_t JSC::FTL::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 252);
  if (!(_DWORD)v3)
    return 0;
  v4 = (unsigned int **)(*(_QWORD *)(a1 + 240) + 64);
  v5 = 72 * v3;
  while (*((_DWORD *)v4 - 10) != a3)
  {
    v4 += 9;
    v5 -= 72;
    if (!v5)
      return 0;
  }
  if (*((_BYTE *)v4 - 60) != 27)
  {
    __break(0xC471u);
    JUMPOUT(0x198582C90);
  }
  return JSC::B3::ValueRep::usedRegisters<WTF::FixedVector<JSC::B3::ValueRep>>(*v4);
}

uint64_t JSC::B3::ValueRep::usedRegisters<WTF::FixedVector<JSC::B3::ValueRep>>(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  if (a1)
    v1 = (uint64_t)(a1 + 2);
  else
    v1 = 0;
  if (a1)
    v2 = (uint64_t)&a1[4 * *a1 + 2];
  else
    v2 = 0;
  if (v1 == v2)
    return 0;
  do
  {
    JSC::B3::ValueRep::addUsedRegistersTo(v1, 0, v4);
    v1 += 16;
  }
  while (v1 != v2);
  return v4[0];
}

void JSC::FTL::JITCode::findPC(JSC::FTL::JITCode *this@<X0>, JSC::CodeBlock *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;

  v12 = *((unsigned int *)this + 63);
  if ((_DWORD)v12)
  {
    v13 = (uint64_t *)(*((_QWORD *)this + 30) + 48);
    v14 = 72 * v12;
    while (1)
    {
      v15 = *v13;
      if (*v13)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16 <= a3 && *(unsigned int *)(v15 + 4) + v16 > a3)
          break;
      }
      v13 += 9;
      v14 -= 72;
      if (!v14)
        goto LABEL_7;
    }
    v35 = *(v13 - 4);
    if ((v35 & 1) == 0)
      goto LABEL_21;
LABEL_23:
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v37 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = v36;
      *(_DWORD *)(v40 + 8) = v37;
      v39 = 1;
      v36 = v40;
    }
    else
    {
      v39 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v36 = v37 << 36;
    }
    v35 = v36 | v39;
LABEL_21:
    *(_QWORD *)a9 = v35;
    v33 = 1;
    goto LABEL_22;
  }
LABEL_7:
  v17 = *((unsigned int *)this + 77);
  if ((_DWORD)v17)
  {
    v18 = *((_QWORD *)this + 37);
    v19 = v18 + 8 * v17;
    while (1)
    {
      v20 = *(_QWORD *)(*(_QWORD *)v18 + 48);
      if (v20)
      {
        do
          v21 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v21 + 1, (unsigned int *)v20));
        do
        {
          v22 = __ldaxr((unsigned int *)v20);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v20));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v20);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        v24 = *(_QWORD *)(v20 + 8);
        if (v24 <= a3 && *(unsigned int *)(v20 + 4) + v24 > a3)
          break;
      }
      v18 += 8;
      if (v18 == v19)
        goto LABEL_17;
    }
    v34 = *(unsigned int *)(*(_QWORD *)v18 + 32);
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 15) + 72))(*((_QWORD *)a2 + 15))
                                            + 40)
                                + 8)
                    + 8 * v34);
    if ((v35 & 1) == 0)
      goto LABEL_21;
    goto LABEL_23;
  }
LABEL_17:
  v33 = 0;
  *(_BYTE *)a9 = 0;
LABEL_22:
  *(_BYTE *)(a9 + 8) = v33;
}

void JSC::FTL::JITFinalizer::~JITFinalizer(JSC::FTL::JITFinalizer *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 32))(v2);
    }
  }
}

void JSC::FTL::JITFinalizer::~JITFinalizer(JSC::FTL::JITFinalizer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::FTL::JITFinalizer::codeSize(JSC::FTL::JITFinalizer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t JSC::FTL::JITFinalizer::finalize(JSC::FTL::JITFinalizer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  JSC::Profiler::Compilation *v26;
  uint64_t v28;
  uint64_t *v29;
  unsigned int **v30;
  uint64_t v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int **v45;
  JSC::Profiler::Compilation *v46;

  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  __isb(0xFu);
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(unsigned int *)(v10 + 68);
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  if ((_DWORD)v12)
  {
    v28 = 8 * v12;
    v29 = (uint64_t *)v11;
    v30 = (unsigned int **)(v11 + 8 * v12);
    do
    {
      v31 = *v29++;
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v28 -= 8;
    }
    while (v28);
    v32 = (unsigned int **)v11;
    do
    {
      v33 = *v32;
      *v32 = 0;
      if (v33)
      {
        v34 = v33 + 2;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v33 + 2);
          v45 = v32;
          (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
          v32 = v45;
        }
      }
      ++v32;
    }
    while (v32 != v30);
  }
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v15 = v13 + 2;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  if (*((_BYTE *)v13 + 13) != 1)
  {
    v17 = *(_QWORD *)(v14 + 72);
    v18 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 128))(v13);
    if (v18 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v17 + 192, 0, v14, v18, a5, a6, a7, a8);
  }
  v19 = (unsigned __int8 *)(v14 + 16);
  if (__ldaxr((unsigned __int8 *)(v14 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_12;
  }
  WTF::Lock::lockSlow((WTF::Lock *)(v14 + 16));
LABEL_12:
  __dmb(0xAu);
  v21 = *(unsigned int **)(v14 + 120);
  *(_QWORD *)(v14 + 120) = v13;
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 32))(v21);
    }
  }
  v25 = __ldxr(v19);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v19))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v26 = *(JSC::Profiler::Compilation **)(*((_QWORD *)this + 1) + 112);
  if (v26)
  {
    v37 = *(_QWORD *)(v9 + 93016);
    ++*(_DWORD *)v26;
    v46 = v26;
    JSC::Profiler::Database::addCompilation(v37, (void *)v14, &v46, a4, a5, a6, a7, a8);
    WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::~Ref(&v46, v38, v39, v40, v41, v42, v43, v44);
  }
  if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
    JSC::Heap::writeBarrierSlowPath(v9 + 192, v14);
  return 1;
}

uint64_t JSC::FTL::JITCode::pcToCodeOriginMap(JSC::FTL::JITCode *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t JSC::FTL::JITFinalizer::isFailed(JSC::FTL::JITFinalizer *this)
{
  return 0;
}

uint64_t JSC::FTL::JITFinalizer::jitCode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v2;
  return this;
}

uint64_t WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 20 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xCCCCCCD)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 20 * v8;
    v11 = WTF::fastMalloc((WTF *)(20 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFFC) / 0x14;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 20 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_DWORD *)(v11 + 16) = *(_DWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 20;
        v20 += 20;
        v19 -= 20;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xCCCCCCD)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 20 * v4;
      v9 = WTF::fastMalloc((WTF *)(20 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFFC) / 0x14;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 20 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(v18 + 16);
          *(_OWORD *)v9 = v19;
          v9 += 20;
          v18 += 20;
          v17 -= 20;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::PrintStream::printImpl<WTF::RawPointer,char [2],WTF::ASCIILiteral,char [2],WTF::ListDump<WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(WTF::PrintStream *a1, const void **a2, const char *a3, uint64_t a4, const char *a5, int ***a6, const char *a7)
{
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  char v23;

  WTF::PrintStream::printf(a1, "%p", *a2);
  WTF::PrintStream::printf(a1, "%s", a3);
  v13 = *(char **)a4;
  v14 = *(_QWORD *)(a4 + 8);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v13)
  {
    v17 = v14 - 1;
    if (!v14)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v21, v16);
  }
  else
  {
    WTF::CString::CString(&v21, &str_25, 0);
    v22 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v21);
  if (v22 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a5);
  if (*((_DWORD *)*a6 + 3))
  {
    v18 = **a6;
    do
    {
      v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::FTL::ExitPropertyValue>(v19, (uint64_t)(a6 + 1), v18);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
      v18 += 5;
    }
    while (v18 != &(**a6)[5 * *((unsigned int *)*a6 + 3)]);
  }
  return WTF::PrintStream::printf(a1, "%s", a7);
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::FTL::ExitPropertyValue>(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  uint64_t v21;
  int v22;
  char v23;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v21, v10);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v21, v16);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 32))(v18);
  WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],unsigned int,char [2]>(v19, a3, "(", a3 + 1, ")");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 40))(v18);
  WTF::PrintStream::printf(v18, "%s", " => ");
  JSC::FTL::ExitValue::dumpInContext((JSC::FTL::ExitValue *)(a3 + 2), v18, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::dataLog<char [28],JSC::MacroAssemblerCodeRef<(WTF::PtrTag)357>,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const void *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Destroying FTL JIT code at ");
  if (*a1)
    v5 = *a1;
  else
    v5 = 0;
  WTF::CodePtrBase::dumpWithName(*a1, v5, "CodeRef", 8, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void WTF::VectorMover<false,JSC::FTL::OSRExit>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *(_DWORD *)v10;
      *(_WORD *)(v8 + 4) = *((_WORD *)v10 + 2);
      *(_DWORD *)v8 = v11;
      v12 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v12;
      v13 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)(v8 + 16) = v13;
      *(_QWORD *)(v8 + 24) = *((_QWORD *)v10 + 3);
      *(_QWORD *)(v8 + 32) = *((_QWORD *)v10 + 4);
      *(_QWORD *)(v8 + 40) = *((_QWORD *)v10 + 5);
      v14 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 6) = 0;
      *(_QWORD *)(v8 + 48) = v14;
      *(_QWORD *)(v8 + 56) = *((_QWORD *)v10 + 7);
      v15 = *((_QWORD *)v10 + 8);
      *((_QWORD *)v10 + 8) = 0;
      *(_QWORD *)(v8 + 64) = v15;
      v16 = *((_QWORD *)v10 + 8);
      *((_QWORD *)v10 + 8) = 0;
      if (v16)
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      v17 = (unsigned int *)*((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 6) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
      }
      v20 = *((_QWORD *)v10 + 2);
      if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v21 = *((_QWORD *)v10 + 1);
      if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v8 += 72;
      v10 += 72;
    }
    while (v10 != a2);
  }
}

void JSC::FTL::LazySlowPath::~LazySlowPath(JSC::FTL::LazySlowPath *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

uint64_t JSC::FTL::LazySlowPath::initialize(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, uint64_t *a7)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5[1] | *a5;
  *(_DWORD *)(result + 32) = a6;
  v7 = *a7;
  if (*a7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *(unsigned int **)(result + 56);
  *(_QWORD *)(result + 56) = v7;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return result;
}

unsigned int *JSC::FTL::link(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::ExecutableMemoryHandle *v31;
  size_t v32;
  uint64_t v33;
  JSC::ExecutableMemoryHandle *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  void (**v47)(WTF::StringPrintStream *__hidden);
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *result;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  BOOL v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int *v149;
  void (**v150)(WTF::StringPrintStream *__hidden);
  JSC::ExecutableMemoryHandle *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 32);
  *(_DWORD *)(a1[3] + 228) = JSC::DFG::Graph::requiredRegisterCountForExit((JSC::DFG::Graph *)*a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 128);
  v19 = (*(_DWORD *)v18)++;
  v20 = *(_QWORD *)(v18 + 8);
  if (v19)
  {
    *(_DWORD *)v18 = v19;
  }
  else
  {
    if (v20)
    {
      v78 = *(unint64_t **)(v18 + 8);
      do
      {
        v79 = (unint64_t *)v78[7];
        v80 = v78[2];
        if ((v80 & 1) != 0 && (v80 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v80 & 0xFFFFFFFF8, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        v81 = *v78;
        *v78 = 0;
        if (v81)
          WTF::fastFree(v81, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree((unint64_t)v78, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        v78 = v79;
      }
      while (v79);
    }
    *(_QWORD *)(v18 + 8) = 0;
    WTF::fastFree(v18, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  }
  if (v20)
  {
    v35 = *(_DWORD **)(*(_QWORD *)(v9 + 24) + 128);
    if (v35)
      ++*v35;
    v36 = a1[3];
    v37 = *(_QWORD *)(v36 + 56);
    *(_QWORD *)(v36 + 56) = v35;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
      {
        v82 = *(unint64_t **)(v37 + 8);
        if (v82)
        {
          do
          {
            v146 = (unint64_t *)v82[7];
            v147 = v82[2];
            if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v147 & 0xFFFFFFFF8, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            v148 = *v82;
            *v82 = 0;
            if (v148)
              WTF::fastFree(v148, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            WTF::fastFree((unint64_t)v82, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            v82 = v146;
          }
          while (v146);
        }
        *(_QWORD *)(v37 + 8) = 0;
        WTF::fastFree(v37, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      }
      else
      {
        --*(_DWORD *)v37;
      }
    }
  }
  v21 = *(_QWORD *)(v9 + 376);
  if (v21)
  {
    v11 = *(unsigned int *)(v21 - 12);
    if ((_DWORD)v11)
    {
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::FixedVector(&v149, v11);
      v83 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin((_QWORD **)(v9 + 376));
      v91 = v83;
      v92 = v84;
      v93 = *(_QWORD *)(v9 + 376);
      if (v93)
        v94 = (_QWORD *)(v93 + 16 * *(unsigned int *)(v93 - 4));
      else
        v94 = 0;
      if (v94 != v83)
      {
        v95 = 0;
        do
        {
          if (*v149 <= v95)
          {
            __break(0xC471u);
            JUMPOUT(0x198584088);
          }
          v96 = &v149[2 * v95];
          v97 = v91[1];
          v91[1] = 0;
          v98 = *((_QWORD *)v96 + 1);
          *((_QWORD *)v96 + 1) = v97;
          if (v98)
            WTF::fastFree(v98, v84, v85, v86, v87, v88, v89, v90);
          while (1)
          {
            v91 += 2;
            if (v91 == v92)
              break;
            if ((unint64_t)(*v91 + 1) > 1)
              goto LABEL_88;
          }
          v91 = v92;
LABEL_88:
          ++v95;
        }
        while (v91 != v94);
      }
      v99 = a1[3];
      v100 = *(unsigned int **)(v99 + 160);
      *(_QWORD *)(v99 + 160) = v149;
      v149 = 0;
      v150 = (void (**)(WTF::StringPrintStream *__hidden))v100;
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector((unsigned int **)&v150, v84, v85, v86, v87, v88, v89, v90);
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector(&v149, v101, v102, v103, v104, v105, v106, v107);
    }
  }
  JSC::DFG::Graph::registerFrozenValues((JSC::DFG::Graph *)v9, (_DWORD *)v11, v12, v13, v14, v15, v16, v17);
  if (!HIBYTE(word_1ECF4C286)
    && (!BYTE1(dword_1ECF4C28A) ? (v140 = BYTE2(dword_1ECF4C28A) == 0) : (v140 = 0),
        v140 ? (v141 = byte_1ECF4C288 == 0) : (v141 = 0),
        v141))
  {
    if (!byte_1ECF4C289)
    {
      JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl(a1[5], 0, 0, &v150);
      v47 = v150;
      v46 = (unsigned int *)v151;
      if (!v151)
        goto LABEL_30;
      do
        v142 = __ldaxr(v46);
      while (__stlxr(v142 + 1, v46));
      v143 = (unsigned int *)v151;
      v151 = 0;
      if (!v143)
        goto LABEL_30;
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (v145)
        goto LABEL_30;
      atomic_store(1u, v143);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v143, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
LABEL_67:
      WTF::fastFree(v77, v39, v40, v41, v42, v43, v44, v45);
      goto LABEL_30;
    }
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  v23 = a1[5];
  v150 = off_1E3572250;
  v151 = (JSC::ExecutableMemoryHandle *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  JSC::CodeBlock::dumpAssumingJITType(v10);
  v150[5]((WTF::StringPrintStream *)&v150);
  v31 = v151;
  if (!v151)
  {
    v33 = 0;
    v34 = 0;
LABEL_18:
    WTF::fastFree((unint64_t)v34, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_19;
  }
  v32 = v152;
  if ((unint64_t)v152 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x198584114);
  }
  if ((_QWORD)v152 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x19858411CLL);
  }
  v33 = WTF::fastMalloc((WTF *)(v152 + 17));
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = v32;
  memcpy((void *)(v33 + 16), v31, v32);
  *(_BYTE *)(v33 + 16 + v32) = 0;
  v34 = v151;
  if (v151 != (JSC::ExecutableMemoryHandle *)v153)
    goto LABEL_18;
LABEL_19:
  v38 = v33 + 16;
  if (!v33)
    v38 = 0;
  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(v23, v22, 0, 0, "FTL B3 code for %s", (WTF **)&v150, v38);
  v47 = v150;
  v46 = (unsigned int *)v151;
  if (v151)
  {
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 + 1, v46));
    v49 = (unsigned int *)v151;
    v151 = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v49, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
      }
    }
  }
  if (v33)
  {
    if (*(_DWORD *)v33 != 1)
    {
      --*(_DWORD *)v33;
      goto LABEL_30;
    }
    v77 = v33;
    goto LABEL_67;
  }
LABEL_30:
  v52 = a1[3];
  if (v46)
  {
    do
      v53 = __ldaxr(v46);
    while (__stlxr(v53 + 1, v46));
    *(_QWORD *)(v52 + 312) = v47;
    do
      v54 = __ldaxr(v46);
    while (__stlxr(v54 + 1, v46));
  }
  else
  {
    *(_QWORD *)(v52 + 312) = v47;
  }
  v55 = *(unsigned int **)(v52 + 320);
  *(_QWORD *)(v52 + 320) = v46;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
  }
  if (v46)
  {
    do
    {
      v58 = __ldaxr(v46);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v46));
    if (!v59)
    {
      atomic_store(1u, v46);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v46, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
  }
  v60 = a1[3];
  v61 = a1[9];
  v62 = *((unsigned int *)a1 + 21);
  a1[9] = 0;
  a1[10] = 0;
  if ((_DWORD)v62)
  {
    v63 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v62) | 8));
    v64 = v63;
    v65 = 0;
    *v63 = v62;
    do
    {
      *(_OWORD *)&v63[v65 + 2] = *(_OWORD *)(v61 + v65 * 4);
      v65 += 4;
    }
    while (4 * v62 != v65);
    if (v61)
    {
      WTF::fastFree(v61, v39, v40, v41, v42, v43, v44, v45);
      v61 = 0;
    }
  }
  else
  {
    v64 = 0;
  }
  v66 = *(_QWORD *)(v60 + 152);
  *(_QWORD *)(v60 + 152) = v64;
  if (v66)
    WTF::fastFree(v66, v39, v40, v41, v42, v43, v44, v45);
  if (v61)
    WTF::fastFree(v61, v39, v40, v41, v42, v43, v44, v45);
  if (v46)
  {
    do
    {
      v67 = __ldaxr(v46);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v46));
    if (!v68)
    {
      atomic_store(1u, v46);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v46, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
  }
  v69 = a1[4];
  *(_QWORD *)(v69 + 24) = *(_QWORD *)(a1[5] + 8);
  v70 = a1[3];
  if (v70)
  {
    v71 = (unsigned int *)(v70 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  result = *(unsigned int **)(v69 + 16);
  *(_QWORD *)(v69 + 16) = v70;
  if (result)
  {
    v74 = result + 2;
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::Location::forValueRep(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(a1 + 8);
  switch(v1)
  {
    case 7:
      return 1;
    case 9:
      return 2;
    case 11:
      return 3;
  }
  result = 50;
  __break(0xC471u);
  return result;
}

void JSC::FTL::Location::restoreInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v9 = (_DWORD *)a2;
  v11 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    v12 = *(_DWORD *)(a1 + 8);
    if ((v12 & 0x60) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_18;
    v12 = *(_DWORD *)(a1 + 8);
  }
  v13 = v12 & 0x7F;
  if (v13 >= 0x40)
    goto LABEL_36;
  if ((v12 & 0x7F) != 0 && ((1 << v13) & 0xA0000000) != 0)
  {
    if (v13 == 31)
    {
      v18 = (32 * (v12 & 0x7F)) | 0x91000000;
    }
    else if (v13 == 63)
    {
      v18 = -763363328;
    }
    else
    {
      v18 = ((v12 & 0x1F) << 16) | 0xAA0003E0;
    }
    v19 = (_DWORD *)(a2 + 200);
    v20 = *(_DWORD *)(a2 + 200);
    v21 = (_QWORD *)(a2 + 56);
    if (v20 + 4 > *(_DWORD *)(a2 + 192))
    {
      v28 = v18;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v19 = v9 + 50;
      v18 = v28;
      v21 = v9 + 14;
      v20 = v9[50];
    }
    *(_DWORD *)(*v21 + v20) = v18;
    *v19 += 4;
    v11 = *(_DWORD *)a1;
  }
  if (v11 == 1)
  {
LABEL_10:
    v15 = *(_DWORD *)(a1 + 8);
    if ((v15 & 0x60) == 0)
    {
      v16 = v15 & 0x7F;
      if (v16 < 0x40)
      {
        if (((1 << v16) & 0xA0000000) == 0)
          JSC::MacroAssemblerARM64::load64((uint64_t)v9, a3 + 8 * v16, 0, a4, a5, a6, a7, a8);
        a2 = *(unsigned int *)(a1 + 12);
        if (!(_DWORD)a2)
          return;
LABEL_37:
        JSC::MacroAssemblerARM64::add64((uint64_t)v9, a2, 0, 0, a5, a6, a7, a8);
        return;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if ((*(_DWORD *)(a1 + 8) & 0x60) == 0x20)
    {
      v22 = a3 + JSC::FTL::offsetOfFPR((char)((v15 & 0x7F) - 32));
      JSC::MacroAssemblerARM64::load64((uint64_t)v9, v22, 0, v23, v24, v25, v26, v27);
      return;
    }
    WTF::dataLog<char [24],JSC::FTL::Location,char [2]>((int *)a1);
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x19858441CLL);
  }
LABEL_18:
  if (v11 != 2)
  {
    if (v11 == 3)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, *(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8);
      return;
    }
    if (!v11)
    {
      a2 = (uint64_t)"./ftl/FTLLocation.cpp";
      __break(0xC471u);
      goto LABEL_36;
    }
    __break(0xC471u);
    goto LABEL_41;
  }
  v17 = *(_DWORD *)(a1 + 8) & 0x7F;
  if ((*(_DWORD *)(a1 + 8) & 0x7Fu) >= 0x40)
    goto LABEL_36;
  if (((1 << v17) & 0xA0000000) == 0)
    JSC::MacroAssemblerARM64::load64((uint64_t)v9, a3 + 8 * v17, 0, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64((uint64_t)v9, (unint64_t)*(unsigned int *)(a1 + 12) << 32, 0, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [24],JSC::FTL::Location,char [2]>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;
  int v9;
  WTF::PrintStream *v10;
  int v11;
  WTF::PrintStream *v12;
  int v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  uint64_t result;
  char v19;
  char **v20;
  char *v21;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v21 = &v19;
    v20 = &v21;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unrecognized location: ");
  v5 = *a1;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", "(");
  if (v5 >= 4)
  {
    result = 187;
    __break(0xC471u);
  }
  else
  {
    v7 = off_1E3590128[v5];
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v8, "%s", v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    v9 = *a1;
    if ((*a1 - 1) <= 1)
    {
      LOBYTE(v21) = *((_BYTE *)a1 + 8) | 0x80;
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
      WTF::PrintStream::printf(v10, "%s", ", ");
      JSC::Reg::dump((JSC::Reg *)&v21, v10);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
      v9 = *a1;
      if (*a1 == 2)
      {
        v11 = a1[3];
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
        WTF::PrintStream::printf(v12, "%s", ", ");
        WTF::PrintStream::printf(v12, "%d", v11);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
        v9 = *a1;
      }
      if (v9 == 1)
      {
        v13 = a1[3];
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
        WTF::PrintStream::printf(v14, "%s", ", ");
        WTF::PrintStream::printf(v14, "%d", v13);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
        v9 = *a1;
      }
    }
    if (v9 == 3)
    {
      v15 = *((_QWORD *)a1 + 1);
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
      WTF::PrintStream::printf(v16, "%s", ", ");
      WTF::PrintStream::printf(v16, "%lld", v15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    }
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v17, "%s", ")");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    WTF::PrintStream::printf(v4, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

uint64_t JSC::FTL::prepareOSREntry(uint64_t a1, uint64_t a2, JSC::CodeBlock *a3, uint64_t a4, unsigned int a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  JSC::DFG::JITCode *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unsigned int *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  WTF *v55;
  char v58;
  __int128 v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;

  v66 = a5;
  v10 = JSC::CodeBlock::baselineVersion((uint64_t)a3);
  v11 = *((_QWORD *)a3 + 8);
  v12 = (unsigned int *)*((_QWORD *)a3 + 15);
  if (v12)
  {
    v13 = v12 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = v12 + 2;
  v16 = (JSC::DFG::JITCode *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 88))(v12);
  do
  {
    v17 = __ldaxr(v15);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v15));
  if (!v18)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 32))(v12);
  }
  v19 = *(unsigned int **)(a4 + 120);
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = v19 + 2;
  v23 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 104))(v19);
  do
  {
    v24 = __ldaxr(v22);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v22));
  if (!v25)
  {
    atomic_store(1u, v19 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 32))(v19);
  }
  if (!*(_BYTE *)(JSC::FTL::JITCode::dfgCommon((JSC::FTL::JITCode *)v23) + 209))
  {
    JSC::DFG::JITCode::clearOSREntryBlockAndResetThresholds(v16, a3);
    return 0;
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [14],JSC::CodeBlock,char [5],JSC::CodeBlock,char [5],JSC::BytecodeIndex,char [2]>((uint64_t)a3, a4, (JSC::BytecodeIndex *)&v66);
  v26 = v66;
  if (v66 != -1 && v66 != 0x3FFFFFFF)
    *(_BYTE *)(v11 + 65) = 1;
  if ((_DWORD)v26 != *(_DWORD *)(v23 + 360))
  {
    if (BYTE1(qword_1ECF4C332))
    {
      LODWORD(v63) = *(_DWORD *)(v23 + 360);
      WTF::dataLog<char [56],JSC::BytecodeIndex,char [15],JSC::BytecodeIndex,char [2]>((JSC::BytecodeIndex *)&v66, (JSC::BytecodeIndex *)&v63);
    }
    return 0;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  JSC::CodeOrigin::CodeOrigin(&v62, v26, 0);
  JSC::DFG::JITCode::reconstruct((uint64_t)v16, a2, (unsigned int *)a3, &v62, a6, (uint64_t)&v63, v29, v27, v28);
  if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFF8, (void *)v30, v31, v32, v33, v34, v35, v36);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [22],JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>((uint64_t)&v63);
  if ((_DWORD)v65)
  {
    v37 = (int)v65 - 1;
    v38 = (__int128 *)((char *)v63 + 16 * v37);
    while (1)
    {
      if ((int)v37 + 1 >= 1073741820)
      {
        v45 = *(_QWORD *)(a2 + 16);
        if ((v37 - 1073741819) >= *(_DWORD *)(v45 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198584C84);
        }
        v39 = (unint64_t *)(*(_QWORD *)(v45 + 160) + 8 * (v37 - 1073741819));
      }
      else
      {
        v39 = (unint64_t *)(a2 + 8 * ((int)v37 + 5));
      }
      v40 = *v39;
      v60 = v40;
      v59 = *v38;
      v41 = BYTE8(v59);
      if (BYTE8(v59))
        v42 = v59;
      else
        v42 = v40;
      v43 = *(unsigned int **)(v23 + 344);
      v31 = *v43;
      if (v31 <= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x198584BA8);
      }
      v44 = *((unsigned __int8 *)v43 + v37 + 4);
      v58 = v44;
      v30 = (v44 - 1);
      switch((int)v30)
      {
        case 0:
          if (v42 <= 0xFFFDFFFFFFFFFFFFLL)
            goto LABEL_43;
          goto LABEL_34;
        case 3:
          if ((v42 & 0xFFFE000000000002) != 0)
            goto LABEL_43;
          goto LABEL_34;
        case 4:
          if ((v42 & 0xFFFFFFFFFFFFFFFELL) != 6)
            goto LABEL_43;
          goto LABEL_34;
        case 5:
LABEL_34:
          if (!v37)
          {
            v47 = v59 & 0xFFFFFFFFFFFFFF00;
            v48 = v59;
            goto LABEL_45;
          }
          if (!BYTE8(v59) || v40 != (_QWORD)v59)
          {
            v61 = v37;
            WTF::dataLog<char [82],int,char [6],JSC::CodeBlock,char [5],JSC::BytecodeIndex,char [3]>(&v61, a4, (JSC::BytecodeIndex *)&v66);
            WTF::dataLog<char [21],JSC::JSValue,char [2]>((JSC::JSValue *)&v60);
            WTF::dataLog<char [26],std::optional<JSC::JSValue>,char [2]>((unsigned __int8 *)&v59);
            __break(0xC471u);
            JUMPOUT(0x198584B28);
          }
          --v37;
          --v38;
          break;
        default:
          WTF::dataLogLn<char [57],JSC::DFG::FlushFormat>(&v58);
          __break(0xC471u);
          JUMPOUT(0x198584B88);
      }
    }
  }
  v41 = 0;
  v48 = 0;
  v47 = 0;
LABEL_45:
  v49 = SHIDWORD(v65);
  if (HIDWORD(v65) != *(_DWORD *)(v10 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x198584C38);
  }
  if (HIDWORD(v65))
  {
    v50 = *(_QWORD *)(v23 + 352);
    v51 = (char *)v63 + 16 * SHIDWORD(v65) + 16 * (unint64_t)v65 - 8;
    do
    {
      if (*v51)
        v52 = *((_QWORD *)v51 - 1);
      else
        v52 = 0;
      *(_QWORD *)(v50 + 8 * v49) = v52;
      v51 -= 16;
      --v49;
    }
    while ((_DWORD)v49);
  }
  v53 = *(_DWORD *)(v23 + 224);
  if (v53 <= *(_DWORD *)(v23 + 228))
    v53 = *(_DWORD *)(v23 + 228);
  if (*(_QWORD *)(a1 + 8) > (unint64_t)(a2 + 8 * -v53))
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    OSR failed because stack growth failed.", "\n");
LABEL_43:
    v46 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 16) = a4;
    v54 = JSC::FTL::JITCode::addressForCall(v23, 0);
    v46 = v54;
    if (BYTE1(qword_1ECF4C332))
    {
      *(_QWORD *)&v59 = v54;
      WTF::dataLog<char [42],WTF::RawPointer,char [2]>((const void **)&v59);
    }
    if (v46 && v41)
      *(_QWORD *)(a2 + 40) = v47 | v48;
  }
  v55 = v63;
  if (v63)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree((unint64_t)v55, (void *)v30, v31, v32, v33, v34, v35, v36);
  }
  return v46;
}

uint64_t WTF::dataLog<char [82],int,char [6],JSC::CodeBlock,char [5],JSC::BytecodeIndex,char [3]>(_DWORD *a1, uint64_t a2, JSC::BytecodeIndex *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Mismatch between reconstructed values and the value on the stack for argument arg");
  WTF::PrintStream::printf(v8, "%d", *a1);
  WTF::PrintStream::printf(v8, "%s", " for ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", " at ");
  JSC::BytecodeIndex::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", ":\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [21],JSC::JSValue,char [2]>(JSC::JSValue *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::Structure *v5;
  unint64_t v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Value on stack: ");
  v5 = 0;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 & 0xFFFE000000000002) == 0)
    v5 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a1, v4, 0, v5);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [26],std::optional<JSC::JSValue>,char [2]>(unsigned __int8 *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  int v5;
  WTF::PrintStream *v6;
  JSC::Structure *v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Reconstructed value: ");
  v5 = a1[8];
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 && (v8 & 0xFFFE000000000002) == 0)
      v7 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)a1, v6, 0, v7);
  }
  else
  {
    WTF::PrintStream::printf(v6, "%s", "<nullopt>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::FTL::OSRExitDescriptor::validateReferences(uint64_t this, const void ***a2)
{
  uint64_t v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  int v16;
  int v17;
  const void *v18;
  int v19;
  uint64_t v20;
  const void *v21;

  v3 = this;
  v4 = *(int **)(this + 24);
  if (v4)
  {
    v5 = *v4;
    if (v5)
    {
      v6 = v5 - 1;
      v7 = 9 * (v5 - 1);
      while (1)
      {
        v8 = *(unsigned int **)(v3 + 24);
        if (*v8 <= v6)
          break;
        v9 = (char *)v8 + v7;
        if (v9[4] == 3)
          this = JSC::TrackedReferences::check((uint64_t)a2, *(_QWORD *)(v9 + 5));
        v7 -= 9;
        if (--v6 == -1)
          goto LABEL_8;
      }
      __break(0xC471u);
LABEL_26:
      JUMPOUT(0x198585188);
    }
  }
LABEL_8:
  v10 = *(_QWORD *)(v3 + 40);
  if (v10)
  {
    while (1)
    {
      v11 = *(_DWORD *)(v10 + 28);
      if (v11)
        break;
LABEL_22:
      v10 = *(_QWORD *)(v10 + 32);
      if (!v10)
        return this;
    }
    v12 = *(_QWORD *)(v10 + 16);
    v13 = v12 + 20 * v11;
    while (1)
    {
      if (*(_BYTE *)(v12 + 8) == 3)
      {
        v14 = *(_QWORD *)(v12 + 9);
        if ((v14 & 0xFFFE000000000002) == 0)
        {
          v21 = *(const void **)(v12 + 9);
          if (v14)
          {
            v15 = *a2;
            if (!*a2)
              goto LABEL_25;
            v16 = *((_DWORD *)v15 - 2);
            this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v21);
            v14 = (uint64_t)v21;
            v17 = this & v16;
            v18 = v15[this & v16];
            if (v18 != v21)
              break;
          }
        }
      }
LABEL_13:
      v12 += 20;
      if (v12 == v13)
        goto LABEL_22;
    }
    v19 = 1;
    while (v18)
    {
      v17 = (v17 + v19) & v16;
      v18 = v15[v17];
      ++v19;
      if (v18 == v21)
        goto LABEL_13;
    }
LABEL_25:
    v20 = v14;
    WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v20, "\n");
    WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
    __break(0xC471u);
    goto LABEL_26;
  }
  return this;
}

uint64_t JSC::FTL::OSRExitDescriptor::prepareOSRExitHandle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF **v22;
  uint64_t v23;
  int v24;
  WTF **v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  _DWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::ExecutableMemoryHandle *v115;
  uint64_t v116;
  WTF *v117;

  v11 = *(_DWORD *)(a5 + 20);
  v12 = (v11 - a7);
  if (v11 == (_DWORD)a7)
  {
    v13 = 0;
LABEL_3:
    v14 = a2[3];
    v106 = *(_DWORD *)(v14 + 252);
    v15 = *(_QWORD *)(a4 + 8);
    if ((v15 & 1) != 0)
    {
      v39 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || ((v40 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
          ? (v41 = (_DWORD)v40 == -1)
          : (v41 = 1),
            v41))
      {
        v42 = 2;
      }
      else if (v40 >> 28)
      {
        v86 = a6;
        v87 = a3;
        v88 = a4;
        v89 = WTF::fastMalloc((WTF *)0x10);
        a4 = v88;
        a3 = v87;
        a6 = v86;
        *(_QWORD *)v89 = v39;
        *(_DWORD *)(v89 + 8) = v40;
        v42 = 1;
        v39 = v89;
      }
      else
      {
        v42 = v39;
        v39 = v40 << 36;
      }
      v15 = v39 | v42;
    }
    v16 = *(_QWORD *)a4;
    if ((*(_QWORD *)a4 & 1) != 0)
    {
      v43 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v44 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
          ? (v45 = (_DWORD)v44 == -1)
          : (v45 = 1),
            v45))
      {
        v46 = 2;
      }
      else if (v44 >> 28)
      {
        v90 = a6;
        v91 = a3;
        v92 = a4;
        v93 = WTF::fastMalloc((WTF *)0x10);
        a4 = v92;
        a3 = v91;
        a6 = v90;
        *(_QWORD *)v93 = v43;
        *(_DWORD *)(v93 + 8) = v44;
        v46 = 1;
        v43 = v93;
      }
      else
      {
        v46 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v43 = v44 << 36;
      }
      v16 = v43 | v46;
    }
    v17 = *(_BYTE *)(a4 + 17);
    v18 = v15;
    if ((v15 & 1) != 0)
    {
      v47 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || ((v48 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
          ? (v49 = (_DWORD)v48 == -1)
          : (v49 = 1),
            v49))
      {
        v50 = 2;
      }
      else if (v48 >> 28)
      {
        v102 = a6;
        v94 = a3;
        v95 = WTF::fastMalloc((WTF *)0x10);
        a3 = v94;
        a6 = v102;
        *(_QWORD *)v95 = v47;
        *(_DWORD *)(v95 + 8) = v48;
        v50 = 1;
        v47 = v95;
      }
      else
      {
        v50 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        v47 = v48 << 36;
      }
      v18 = v47 | v50;
    }
    v19 = v16;
    if ((v16 & 1) != 0)
    {
      v51 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v52 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v52 != 0x3FFFFFFF)
          ? (v53 = (_DWORD)v52 == -1)
          : (v53 = 1),
            v53))
      {
        v54 = 2;
      }
      else if (v52 >> 28)
      {
        v103 = a6;
        v100 = a3;
        v96 = WTF::fastMalloc((WTF *)0x10);
        a3 = v100;
        a6 = v103;
        *(_QWORD *)v96 = v51;
        *(_DWORD *)(v96 + 8) = v52;
        v54 = 1;
        v51 = v96;
      }
      else
      {
        v54 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v51 = v52 << 36;
      }
      v19 = v51 | v54;
    }
    v108 = 0;
    LOBYTE(v109) = a3;
    v20 = v18;
    HIBYTE(v109) = v17;
    if ((v18 & 1) != 0)
    {
      v55 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v56 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v56 != 0x3FFFFFFF)
          ? (v57 = (_DWORD)v56 == -1)
          : (v57 = 1),
            v57))
      {
        v58 = 2;
      }
      else if (v56 >> 28)
      {
        v104 = a6;
        v97 = WTF::fastMalloc((WTF *)0x10);
        a6 = v104;
        *(_QWORD *)v97 = v55;
        *(_DWORD *)(v97 + 8) = v56;
        v58 = 1;
        v55 = v97;
      }
      else
      {
        v58 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v55 = v56 << 36;
      }
      v20 = v55 | v58;
    }
    v110 = v20;
    if ((v19 & 1) != 0)
    {
      v59 = v19 & 0xFFFFFFFF8;
      v60 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v61 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v61 != 0x3FFFFFFF)
          ? (v62 = (_DWORD)v61 == -1)
          : (v62 = 1),
            v62))
      {
        v63 = 2;
      }
      else if (v61 >> 28)
      {
        v101 = v59;
        v105 = a6;
        v98 = WTF::fastMalloc((WTF *)0x10);
        a6 = v105;
        v99 = v98;
        v59 = v101;
        *(_QWORD *)v99 = v60;
        *(_DWORD *)(v99 + 8) = v61;
        v63 = 1;
        v60 = v99;
      }
      else
      {
        v63 = v60;
        v60 = v61 << 36;
      }
      v19 = v60 | v63;
      v111 = v60 | v63;
      LODWORD(v112) = -1;
      HIDWORD(v112) = a6;
      if (v59)
        WTF::fastFree(v59, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v111 = v19;
      LODWORD(v112) = -1;
      HIDWORD(v112) = a6;
    }
    if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v113 = a1;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v117 = v13;
    v21 = *(unsigned int *)(v14 + 252);
    if ((_DWORD)v21 == *(_DWORD *)(v14 + 248))
    {
      v32 = WTF::Vector<JSC::FTL::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 240, v21 + 1, (unint64_t)&v108);
      v33 = *(_QWORD *)(v14 + 240) + 72 * *(unsigned int *)(v14 + 252);
      v34 = *(_DWORD *)v32;
      *(_WORD *)(v33 + 4) = *(_WORD *)(v32 + 4);
      *(_DWORD *)v33 = v34;
      v35 = *(_QWORD *)(v32 + 8);
      *(_QWORD *)(v32 + 8) = 0;
      *(_QWORD *)(v33 + 8) = v35;
      v36 = *(_QWORD *)(v32 + 16);
      *(_QWORD *)(v32 + 16) = 0;
      *(_QWORD *)(v33 + 16) = v36;
      *(_QWORD *)(v33 + 24) = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v33 + 32) = *(_QWORD *)(v32 + 32);
      *(_QWORD *)(v33 + 40) = *(_QWORD *)(v32 + 40);
      v37 = *(_QWORD *)(v32 + 48);
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v33 + 48) = v37;
      *(_QWORD *)(v33 + 56) = *(_QWORD *)(v32 + 56);
      v38 = *(WTF **)(v32 + 64);
      v22 = (WTF **)(v32 + 64);
      v13 = v38;
      v25 = (WTF **)(v33 + 64);
    }
    else
    {
      v22 = &v117;
      v23 = *(_QWORD *)(v14 + 240) + 72 * v21;
      v24 = v108;
      *(_WORD *)(v23 + 4) = v109;
      *(_DWORD *)v23 = v24;
      v110 = 0;
      *(_QWORD *)(v23 + 8) = v20;
      v111 = 0;
      *(_QWORD *)(v23 + 16) = v19;
      *(_QWORD *)(v23 + 24) = v112;
      *(_QWORD *)(v23 + 32) = a1;
      *(_QWORD *)(v23 + 40) = 0;
      v115 = 0;
      v25 = (WTF **)(v23 + 64);
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
    }
    *v22 = 0;
    *v25 = v13;
    ++*(_DWORD *)(v14 + 252);
    v26 = v117;
    v117 = 0;
    if (v26)
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
    v27 = (unsigned int *)v115;
    v115 = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v111 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v110 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    result = WTF::fastMalloc((WTF *)0x18);
    v31 = a2[3];
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 4) = v106;
    *(_QWORD *)(result + 8) = v31;
    *(_DWORD *)(result + 16) = -1;
    *a9 = result;
    return result;
  }
  v72 = a7;
  v74 = a4;
  v75 = a3;
  v76 = a6;
  v77 = 8;
  v78 = (WTF *)WTF::fastMalloc((WTF *)((16 * v12) | 8));
  v13 = v78;
  *(_DWORD *)v78 = v12;
  do
  {
    v79 = (_DWORD *)((char *)v78 + v77);
    *(_QWORD *)v79 = 0;
    *((_BYTE *)v79 + 8) = 0;
    v77 += 16;
  }
  while (v79 + 4 != (_DWORD *)((char *)v78 + 16 * v12 + 8));
  if (*(_DWORD *)(a5 + 20) <= v72)
  {
LABEL_102:
    a6 = v76;
    a3 = v75;
    a4 = v74;
    goto LABEL_3;
  }
  v80 = 0;
  v81 = v72;
  v82 = 16 * *(unsigned int *)v78;
  while (v82 != v80)
  {
    v83 = *(_QWORD *)(a5 + 8) + 16 * v72 + v80;
    v84 = (_DWORD *)((char *)v78 + v80);
    v85 = *(_QWORD *)v83;
    *((_BYTE *)v84 + 16) = *(_BYTE *)(v83 + 8);
    *((_QWORD *)v84 + 1) = v85;
    ++v81;
    v80 += 16;
    if (v81 >= *(unsigned int *)(a5 + 20))
      goto LABEL_102;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

void JSC::FTL::OSRExitHandle::emitExitThunk(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  JSC::AssemblerBuffer *v12;
  int i;
  JSC::ARM64LogicalImmediate *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const void *v67;
  void *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::ExecutableMemoryHandle *v78;
  unsigned int v79;
  unint64_t v80;

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 112);
  v12 = (JSC::AssemblerBuffer *)(a3 + 56);
  for (i = *(_DWORD *)(a3 + 200); i < *(_DWORD *)(a3 + 52); *(_DWORD *)(a3 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + i) = -721215457;
    i = *(_DWORD *)(a3 + 200) + 4;
  }
  *(_DWORD *)(a3 + 208) = 0;
  a1[4] = i;
  v14 = (JSC::ARM64LogicalImmediate *)a1[1];
  v15 = i;
  if ((i + 4) > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v15) = -1447083024;
  *(_DWORD *)(a3 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a3, v14, 16, a4, a5, a6, a7, a8);
  v23 = *(_DWORD *)(a3 + 200);
  if (v23 + 4 > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v23) = -134216720;
  v24 = *(_DWORD *)(a3 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a3 + 200) = v24 + 4;
  if ((v24 + 8) > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v25) = -129989648;
  v26 = *(_DWORD *)(a3 + 200) + 4;
  *(_DWORD *)(a3 + 200) = v26;
  for (*(_BYTE *)(a3 + 328) = 1; v26 < *(_DWORD *)(a3 + 52); *(_DWORD *)(a3 + 200) = v26)
  {
    if ((v26 + 4) > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v16, v17, v18, v19, v20, v21, v22);
      v26 = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + v26) = -721215457;
    v26 = *(_DWORD *)(a3 + 200) + 4;
  }
  v27 = v26;
  if ((v26 + 4) > *(_DWORD *)(a3 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v16, v17, v18, v19, v20, v21, v22);
    v27 = *(_DWORD *)(a3 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a3 + 56) + v27) = 335544320;
  *(_DWORD *)(a3 + 200) += 4;
  v28 = 0xFF000F4500000000;
  if (!*(_BYTE *)(a3 + 328))
    v28 = 0xFF000F4100000000;
  *(_BYTE *)(a3 + 328) = 0;
  v79 = v26;
  v80 = v28;
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 90440), *(_QWORD *)(*(_QWORD *)a2 + 16), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::osrExitGenerationThunkGenerator, v18, v19, v20, v21, v22, &v77);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(&v79, v77, a3, v29, v30, v31, v32, v33);
  v41 = (unsigned int *)v78;
  v78 = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
  }
  if (a1)
  {
    do
      v44 = __ldaxr(a1);
    while (__stlxr(v44 + 1, a1));
    do
      v45 = __ldaxr(a1);
    while (__stlxr(v45 + 1, a1));
  }
  v46 = v79;
  v47 = v80;
  v48 = WTF::fastMalloc((WTF *)0x30);
  v56 = v48;
  *(_DWORD *)(v48 + 8) = 1;
  *(_QWORD *)v48 = &off_1E3590110;
  if (a1)
  {
    do
      v57 = __ldaxr(a1);
    while (__stlxr(v57 + 1, a1));
  }
  *(_QWORD *)(v48 + 16) = a1;
  *(_DWORD *)(v48 + 24) = v46;
  *(_QWORD *)(v48 + 28) = v47;
  *(_DWORD *)(v48 + 36) = i;
  *(_QWORD *)(v48 + 40) = v11;
  v58 = *(unsigned int *)(a3 + 244);
  if ((_DWORD)v58 == *(_DWORD *)(a3 + 240))
  {
    v64 = v58 + (v58 >> 2);
    if (v64 >= 0x10)
      v65 = v64 + 1;
    else
      v65 = 16;
    if (v65 <= v58 + 1)
      v66 = v58 + 1;
    else
      v66 = v65;
    if (v66 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v67 = *(const void **)(a3 + 232);
    v68 = (void *)WTF::fastMalloc((WTF *)(8 * v66));
    *(_DWORD *)(a3 + 240) = v66;
    *(_QWORD *)(a3 + 232) = v68;
    memcpy(v68, v67, 8 * v58);
    if (v67)
    {
      if (*(const void **)(a3 + 232) == v67)
      {
        *(_QWORD *)(a3 + 232) = 0;
        *(_DWORD *)(a3 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v67, v49, v50, v51, v52, v53, v54, v55);
    }
    v58 = *(unsigned int *)(a3 + 244);
    v59 = (uint64_t *)(*(_QWORD *)(a3 + 232) + 8 * v58);
  }
  else
  {
    v59 = (uint64_t *)(*(_QWORD *)(a3 + 232) + 8 * v58);
  }
  *v59 = v56;
  *(_DWORD *)(a3 + 244) = v58 + 1;
  if (a1)
  {
    do
    {
      v60 = __ldaxr(a1);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, a1));
    if (!v61)
    {
      atomic_store(1u, a1);
      WTF::fastFree((unint64_t)a1, v49, v50, v51, v52, v53, v54, v55);
    }
    do
    {
      v62 = __ldaxr(a1);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, a1));
    if (!v63)
    {
      atomic_store(1u, a1);
      WTF::fastFree((unint64_t)a1, v49, v50, v51, v52, v53, v54, v55);
    }
  }
}

