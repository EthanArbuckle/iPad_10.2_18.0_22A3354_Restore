void JSC::Parser<JSC::Lexer<char16_t>>::logError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::declareRestOrNormalParameter(uint64_t a1, WTF::AtomStringImpl *a2, char ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  __int16 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  int v43;
  int *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  int v71;
  WTF::StringImpl *v72;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  int v80;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v100;
  uint64_t v101;
  int v103;
  unsigned int v104;
  uint64_t v105;
  char *v106;
  char **v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  _QWORD *v114;
  int v115;
  int v116;
  char **v117;
  uint64_t v119;
  const char *Range;
  uint64_t v121;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
    goto LABEL_154;
  v11 = v8 - 1;
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)a1 + 720 * (v8 - 1);
  v14 = (uint64_t *)(v13 + 120);
  v15 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v13 + 41952) + 880);
  v16 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v16 += 2;
  v17 = *v14;
  if (*v14)
    goto LABEL_6;
  v18 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v18 + 16) = 0;
  v18 += 16;
  *(_WORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_WORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_WORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_WORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  *(_WORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  *(_WORD *)(v18 + 104) = 0;
  *(_QWORD *)(v18 + 112) = 0;
  *(_WORD *)(v18 + 120) = 0;
  *v14 = v18;
  *(_DWORD *)(v18 - 4) = 8;
  *(_DWORD *)(*v14 - 8) = 7;
  *(_DWORD *)(*v14 - 16) = 0;
  *(_DWORD *)(*v14 - 12) = 0;
  v17 = *v14;
  if (*v14)
LABEL_6:
    v19 = *(_DWORD *)(v17 - 8);
  else
    v19 = 0;
  v20 = *((_DWORD *)v16 + 4);
  if ((v20 & 0x20) != 0)
    v20 = *((_DWORD *)v16 + 8);
  v21 = v19 & (v20 >> 8);
  v22 = v17 + 16 * v21;
  v23 = *(WTF::StringImpl **)v22;
  v119 = a1;
  if (!*(_QWORD *)v22)
    goto LABEL_10;
  v50 = 0;
  v51 = 1;
  do
  {
    if (v23 == v16)
    {
      v30 = 1;
      goto LABEL_18;
    }
    if (v23 == (WTF::StringImpl *)-1)
      v50 = v22;
    v21 = (v21 + v51) & v19;
    v22 = v17 + 16 * v21;
    v23 = *(WTF::StringImpl **)v22;
    ++v51;
  }
  while (*(_QWORD *)v22);
  if (v50)
  {
    *(_QWORD *)v50 = 0;
    *(_WORD *)(v50 + 8) = 0;
    --*(_DWORD *)(*v14 - 16);
    v22 = v50;
  }
  if (v16)
LABEL_10:
    *(_DWORD *)v16 += 2;
  *(_QWORD *)v22 = v16;
  *(_WORD *)(v22 + 8) = 0;
  v24 = *v14;
  if (*v14)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v14;
  if (*v14)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
LABEL_61:
    v22 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v14, (WTF::StringImpl **)v22);
    goto LABEL_17;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_61;
LABEL_17:
  v30 = 0;
LABEL_18:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (v30 && (*(_WORD *)(v22 + 8) & 0x100) != 0)
  {
    v33 = 0;
    v31 = 1;
  }
  else
  {
    v31 = 0;
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 41952) + 1248) != *(_QWORD *)a2 && v15 != v16;
  }
  *(_WORD *)(v22 + 8) = *(_WORD *)(v22 + 8) & 0xFEFB | 0x100;
  v34 = v12 + 720 * v11;
  v37 = *(_DWORD *)(v34 + 10);
  v36 = (unsigned int *)(v34 + 10);
  v35 = v37;
  if ((*(_DWORD *)&v33 & (v37 >> 23)) != 0)
    v38 = 0x800000;
  else
    v38 = 0;
  v39 = v38 | v35 & 0xFF7FFFFF;
  v41 = (unsigned int *)((char *)v36 + 38);
  v40 = *(unsigned int *)((char *)v36 + 38);
  *v36 = v39;
  v117 = (char **)a2;
  v42 = *(WTF::StringImpl **)a2;
  v44 = (int *)((char *)v36 + 42);
  v43 = *(unsigned int *)((char *)v36 + 42);
  if (v43 != 8)
  {
LABEL_77:
    if (3 * v43 <= (4 * v40))
    {
      v116 = v31;
      v82 = v12 + 720 * v11;
      v83 = *(_QWORD *)(v82 + 56);
      v114 = (_QWORD *)(v82 + 56);
      v74 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v43)));
      memset(v74, 255, 8 * (2 * v43));
      *v44 = 2 * v43;
      if (v43)
      {
        v91 = 0;
        v92 = 2 * v43 - 1;
        do
        {
          v93 = *(_QWORD *)(v83 + 8 * v91);
          if (v93 != -1)
          {
            v94 = (~(v93 << 32) + v93) ^ ((unint64_t)(~(v93 << 32) + v93) >> 22);
            v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
            v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
            v97 = v92 & ((v96 >> 31) ^ v96);
            v98 = *((_QWORD *)v74 + v97);
            if (v98 != -1 && v98 != v93)
            {
              v100 = 1;
              do
              {
                v97 = ((_DWORD)v97 + v100) & v92;
                v101 = *((_QWORD *)v74 + v97);
                ++v100;
              }
              while (v101 != -1 && v101 != v93);
            }
            *((_QWORD *)v74 + v97) = v93;
          }
          ++v91;
        }
        while (v91 != v43);
      }
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
      v43 = *v44;
      *v114 = v74;
      v31 = v116;
    }
    else
    {
      v74 = *(void **)(v12 + 720 * v11 + 56);
    }
    v75 = ((unint64_t)v42 + ~((_QWORD)v42 << 32)) ^ (((unint64_t)v42 + ~((_QWORD)v42 << 32)) >> 22);
    v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
    v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
    v40 = (v43 - 1) & ((v77 >> 31) ^ v77);
    v78 = (WTF::StringImpl *)*((_QWORD *)v74 + v40);
    if (v78 != (WTF::StringImpl *)-1 && v78 != v42)
    {
      v80 = 1;
      do
      {
        v40 = ((_DWORD)v40 + v80) & (v43 - 1);
        v78 = (WTF::StringImpl *)*((_QWORD *)v74 + v40);
        ++v80;
      }
      while (v78 != (WTF::StringImpl *)-1 && v78 != v42);
    }
    if (v78 == v42)
      goto LABEL_39;
    *((_QWORD *)v74 + v40) = v42;
    LODWORD(v40) = *v41;
LABEL_38:
    *v41 = v40 + 1;
    goto LABEL_39;
  }
  if (!(_DWORD)v40)
  {
    v45 = 0;
LABEL_37:
    *(_QWORD *)(v12 + 720 * v11 + 8 * v45 + 56) = v42;
    goto LABEL_38;
  }
  v45 = v40;
  v46 = (WTF::StringImpl **)(v12 + 720 * v11 + 56);
  v47 = v46;
  v48 = v40;
  while (*v47 != v42)
  {
    ++v47;
    if (!--v48)
    {
      if (v40 <= 7)
        goto LABEL_37;
      v115 = v31;
      v60 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
      v31 = v115;
      v61 = 0;
      *(_QWORD *)&v62 = -1;
      *((_QWORD *)&v62 + 1) = -1;
      *v60 = v62;
      v60[1] = v62;
      v60[2] = v62;
      v60[3] = v62;
      v60[4] = v62;
      v60[5] = v62;
      v60[6] = v62;
      v60[7] = v62;
      v60[8] = v62;
      v60[9] = v62;
      v60[10] = v62;
      v60[11] = v62;
      v60[12] = v62;
      v60[13] = v62;
      v60[14] = v62;
      v60[15] = v62;
      v60[16] = v62;
      v60[17] = v62;
      v60[18] = v62;
      v60[19] = v62;
      v60[20] = v62;
      v60[21] = v62;
      v60[22] = v62;
      v60[23] = v62;
      v60[24] = v62;
      v60[25] = v62;
      v60[26] = v62;
      v60[27] = v62;
      v60[28] = v62;
      v60[29] = v62;
      v60[30] = v62;
      v60[31] = v62;
      *v44 = 64;
      do
      {
        v63 = v46[v61];
        if (v63 != (WTF::StringImpl *)-1)
        {
          v64 = ((unint64_t)v63 + ~((_QWORD)v63 << 32)) ^ (((unint64_t)v63 + ~((_QWORD)v63 << 32)) >> 22);
          v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
          v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
          v67 = v66 ^ (v66 >> 31);
          v68 = v67 & 0x3F;
          v69 = (WTF::StringImpl *)*((_QWORD *)v60 + v68);
          if (v69 != (WTF::StringImpl *)-1 && v69 != v63)
          {
            LOBYTE(v68) = v67 & 0x3F;
            v71 = 1;
            do
            {
              v68 = ((_BYTE)v68 + (_BYTE)v71) & 0x3F;
              v72 = (WTF::StringImpl *)*((_QWORD *)v60 + v68);
              ++v71;
            }
            while (v72 != (WTF::StringImpl *)-1 && v72 != v63);
          }
          *((_QWORD *)v60 + v68) = v63;
        }
        ++v61;
      }
      while (v61 != 8);
      LODWORD(v40) = *v41;
      *v46 = (WTF::StringImpl *)v60;
      v43 = 64;
      goto LABEL_77;
    }
  }
LABEL_39:
  if (v15 == v16)
    *v36 |= 1u;
  if (v31)
    v49 = ((v33 & 1) == 0) | 2;
  else
    v49 = (v33 & 1) == 0;
  if ((v49 & 1) == 0)
    goto LABEL_45;
  v103 = *(_DWORD *)(v119 + 12);
  if (!v103)
  {
LABEL_154:
    __break(0xC471u);
    JUMPOUT(0x197E6069CLL);
  }
  v104 = v103 - 1;
  if ((*(_BYTE *)(*(_QWORD *)v119 + 720 * v104 + 9) & 1) == 0)
  {
LABEL_45:
    if ((v49 & 2) != 0)
    {
      if (a3)
        *a3 = v117;
    }
    return;
  }
  v105 = *(_QWORD *)(*(_QWORD *)(v119 + 7216) + 41952);
  v106 = *v117;
  if (*(char **)(v105 + 1248) == *v117 || *(char **)(v105 + 880) == v106)
  {
    if (!*(_QWORD *)(v119 + 7360))
    {
      Range = *v117;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(v119, "Cannot destructure to a parameter name '", (uint64_t *)&Range);
    }
  }
  else
  {
    v107 = *(char ***)(v119 + 7328);
    if (v107 && v106 == *v107)
    {
      if (!*(_QWORD *)(v119 + 7360))
      {
        Range = *v117;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[51]>(v119, (uint64_t *)&Range);
      }
    }
    else
    {
      v108 = *(_DWORD *)(v119 + 7368);
      if (v108 == 532)
      {
        if (!*(_QWORD *)(v119 + 7360))
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v119 + 7288) + 64), *(_DWORD *)(v119 + 7408), *(_DWORD *)(v119 + 7412));
          v121 = v109;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15],char const(&)[16]>(v119, (uint64_t)&Range);
        }
        return;
      }
      if ((v108 - 531) <= 1)
      {
        if (!*(_QWORD *)(v119 + 7360))
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v119 + 7288) + 64), *(_DWORD *)(v119 + 7408), *(_DWORD *)(v119 + 7412));
          v121 = v110;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15]>(v119, (uint64_t)&Range);
        }
        return;
      }
      if ((v108 & 0x200) == 0)
        goto LABEL_128;
      if ((v108 - 544) < 3)
      {
        if (v108 == 546)
        {
          if (*(_BYTE *)(v119 + 7344)
            && (*(_DWORD *)(*(_QWORD *)v119 + 720 * v104 + 10) & 0x102000) == 0
            && *(_DWORD *)(v119 + 7480) != 1)
          {
LABEL_128:
            if (*(_BYTE *)(*(_QWORD *)(v119 + 7288) + 148)
              || !JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)v119, (WTF::StringImpl *)v106, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              if (!*(_QWORD *)(v119 + 7360))
              {
                Range = *v117;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[17]>(v119, (uint64_t *)&Range);
              }
            }
            else if (!*(_QWORD *)(v119 + 7360))
            {
              Range = *v117;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[49]>(v119, (uint64_t *)&Range);
            }
            return;
          }
          if (*(_QWORD *)(v119 + 7360))
            return;
          v112 = v119;
          Range = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(v119);
          v113 = "Cannot use 'await' as a ";
        }
        else
        {
          if (v108 == 544)
          {
            if (!*(_QWORD *)(v119 + 7360))
            {
              Range = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[15],char const(&)[2],char const*>(v119, &Range);
            }
            return;
          }
          if (*(_QWORD *)(v119 + 7360))
            return;
          v112 = v119;
          Range = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(v119);
          v113 = "Cannot use 'yield' as a ";
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[15],char const(&)[2],char const*>(v112, v113, &Range);
        return;
      }
      if (!*(_QWORD *)(v119 + 7360))
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v119 + 7288) + 64), *(_DWORD *)(v119 + 7408), *(_DWORD *)(v119 + 7412));
        v121 = v111;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[15]>(v119, (uint64_t)&Range);
      }
    }
  }
}

const char *JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(uint64_t a1)
{
  int v1;
  int v2;

  if (!*(_BYTE *)(a1 + 7344))
    return "in an async function";
  v1 = *(_DWORD *)(a1 + 12);
  if (!v1)
    goto LABEL_9;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v1 - 1) + 10);
  if ((v2 & 0x2000) != 0)
    return "in an async function";
  if ((v2 & 0x100000) == 0)
  {
    if (*(_DWORD *)(a1 + 7480) == 1)
      return "in a module";
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197E6074CLL);
  }
  return "in a static block";
}

const char *JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(a1 + 12);
  if (!v1)
    goto LABEL_6;
  v2 = v1 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v2 + 9) & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v2 + 11) & 2) != 0)
      return "in a generator function";
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x197E607BCLL);
  }
  return "in strict mode";
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::getLabel(uint64_t *a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 3);
  if (!v2)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197E60868);
  }
  v3 = v2 - 1;
  v4 = *a1;
  v5 = v2 - 1;
  while (1)
  {
    v6 = *(_QWORD *)(v4 + 720 * v3 + 40);
    if (v6)
      break;
LABEL_4:
    if (!v5 || (*(_BYTE *)(v4 + 720 * v3 + 12) & 0x40) != 0)
      return 0;
    v5 = v3 - 1;
    v3 = (v3 - 1);
    if (v2 <= v5)
      goto LABEL_14;
  }
  v7 = *(unsigned int *)(v6 + 12);
  v8 = 16 * v7;
  v9 = v7;
  do
  {
    if ((int)v9 < 1)
      goto LABEL_4;
    if (--v9 >= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x197E60870);
    }
    v10 = v8 - 16;
    v11 = *(_QWORD *)(*(_QWORD *)v6 + v8 - 16);
    v8 -= 16;
  }
  while (v11 != *a2);
  return *(_QWORD *)v6 + v10;
}

BOOL JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(_BOOL8 result, int a2, _QWORD *a3)
{
  int v3;

  if (a2 != 544 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 7216) + 41952) + 328)))
    return 0;
  v3 = *(_DWORD *)(result + 12);
  if (v3)
    return (*(_BYTE *)(*(_QWORD *)result + 720 * (v3 - 1) + 9) & 1) == 0;
  __break(0xC471u);
  return result;
}

BOOL JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v9 = *(_DWORD *)(a1 + 7368);
  if (v9 == 17)
  {
    v10 = *(_DWORD *)(a1 + 7400);
    v11 = *(_DWORD *)(a1 + 7412);
    v12 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v10;
    *(_DWORD *)(a1 + 7448) = v11;
    *(_DWORD *)(a1 + 7452) = v12;
    v13 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v13 + 4) = v10;
    v14 = *(_DWORD *)(a1 + 12);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x197E60984);
    }
    v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
    *(_BYTE *)(v13 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v15, a5, a6, a7, a8);
    return 1;
  }
  if (v9 == 1 || v9 == 20)
    return 1;
  return *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56) != 0;
}

BOOL JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(uint64_t a1, int a2, _QWORD *a3)
{
  int v4;

  if (a2 != 546 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    return 0;
  if (*(_BYTE *)(a1 + 7344))
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x197E60A14);
    }
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v4 - 1) + 10) & 0x102000) == 0)
      return *(_DWORD *)(a1 + 7480) == 1;
  }
  return 1;
}

BOOL JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierAwait(uint64_t a1, int a2, _QWORD *a3)
{
  int v4;

  if (a2 != 546 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
    || !*(_BYTE *)(a1 + 7344))
  {
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 12);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x197E60A9CLL);
  }
  return (*(_DWORD *)(*(_QWORD *)a1 + 720 * (v4 - 1) + 10) & 0x102000) == 0
      && *(_DWORD *)(a1 + 7480) != 1;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierYield(uint64_t result, int a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;

  if (a2 != 545 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 7216) + 41952) + 496)))
    return 0;
  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    v4 = v3 - 1;
    if ((*(_BYTE *)(*(_QWORD *)result + 720 * v4 + 9) & 1) != 0)
      return 1;
    else
      return (*(unsigned __int8 *)(*(_QWORD *)result + 720 * v4 + 11) >> 1) & 1;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Lexer<char16_t>::setOffset(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  __int16 *v14;
  __int16 v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = (int)a2;
  *(_BYTE *)(a1 + 150) = 0;
  v11 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = (__int16 *)(v12 + 2 * v9);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 112) = v12 + 2 * v8;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  if ((unint64_t)v14 >= v13)
    v15 = 0;
  else
    v15 = *v14;
  *(_WORD *)(a1 + 176) = v15;
}

void JSC::NegateNode::~NegateNode(JSC::NegateNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ExpressionNode::isNumber(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isString(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBigInt(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isObjectLiteral(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isArrayLiteral(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isNull(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isPure()
{
  return 0;
}

uint64_t JSC::ExpressionNode::isConstant(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isLocation(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isPrivateLocation(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isAssignmentLocation(JSC::ExpressionNode *this)
{
  return (*(uint64_t (**)(JSC::ExpressionNode *))(*(_QWORD *)this + 88))(this);
}

uint64_t JSC::ExpressionNode::isResolveNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isAssignResolveNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBracketAccessorNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isDotAccessorNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isDestructuringNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBaseFuncExprNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isFuncExprNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isArrowFuncExprNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isClassExprNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isCommaNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isSimpleArray(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isAdd(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isSubtract(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBoolean(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isThisNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isSpreadExpression(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isSuperNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isImportNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isMetaProperty(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isNewTarget(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isImportMeta(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBytecodeIntrinsicNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isBinaryOpNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isFunctionCall(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isDeleteNode(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isOptionalChain(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isOptionalCall(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isPrivateIdentifier(JSC::ExpressionNode *this)
{
  return 0;
}

uint64_t JSC::ExpressionNode::isArgumentsLengthAccess()
{
  return 0;
}

uint64_t JSC::ExpressionNode::isArguments()
{
  return 0;
}

void JSC::IntegerNode::~IntegerNode(JSC::IntegerNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::NumberNode::isNumber(JSC::NumberNode *this)
{
  return 1;
}

uint64_t JSC::ConstantNode::isPure()
{
  return 1;
}

uint64_t JSC::ConstantNode::isConstant(JSC::ConstantNode *this)
{
  return 1;
}

unint64_t JSC::NumberNode::jsValue(uint64_t a1)
{
  double v1;
  uint64_t v2;

  v1 = *(double *)(a1 + 32);
  if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v2 = (int)v1, v1 == (double)(int)v2)
    && ((_DWORD)v2 || (*(_QWORD *)&v1 & 0x8000000000000000) == 0))
  {
    return v2 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v1 + 0x2000000000000;
  }
}

uint64_t JSC::IntegerNode::isIntegerNode(JSC::IntegerNode *this)
{
  return 1;
}

void JSC::DoubleNode::~DoubleNode(JSC::DoubleNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DoubleNode::isIntegerNode(JSC::DoubleNode *this)
{
  return 0;
}

void JSC::BitwiseNotNode::~BitwiseNotNode(JSC::BitwiseNotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

int32x2_t JSC::PowNode::PowNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v5;
  int v6;
  int v7;
  int v9;
  int32x2_t result;

  v5 = *(_BYTE *)(a4 + 25);
  v6 = *(_BYTE *)(a3 + 25) & 0x7E;
  if (v6 == 2)
  {
    v9 = v5 & 0x7E;
    if (v9 == 2)
      goto LABEL_7;
  }
  else
  {
    v7 = v5 & 0x7E;
    if (v6 == 8 && v7 == 8)
    {
      LOBYTE(v9) = 8;
      goto LABEL_7;
    }
  }
  LOBYTE(v9) = 10;
LABEL_7:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = v9;
  *(_BYTE *)(a1 + 26) = 0;
  *(_BYTE *)(a1 + 27) = a5;
  *(_BYTE *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 155;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)a1 = &off_1E3578DC0;
  return result;
}

void JSC::PowNode::~PowNode(JSC::PowNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BinaryOpNode::isBinaryOpNode(JSC::BinaryOpNode *this)
{
  return 1;
}

void JSC::MultNode::~MultNode(JSC::MultNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::DivNode::~DivNode(JSC::DivNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ModNode::~ModNode(JSC::ModNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AddNode::~AddNode(JSC::AddNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::AddNode::isAdd(JSC::AddNode *this)
{
  return 1;
}

void JSC::SubNode::~SubNode(JSC::SubNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::SubNode::isSubtract(JSC::SubNode *this)
{
  return 1;
}

void JSC::LeftShiftNode::~LeftShiftNode(JSC::LeftShiftNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::RightShiftNode::~RightShiftNode(JSC::RightShiftNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::UnsignedRightShiftNode::~UnsignedRightShiftNode(JSC::UnsignedRightShiftNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BitOrNode::~BitOrNode(JSC::BitOrNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BitAndNode::~BitAndNode(JSC::BitAndNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BitXOrNode::~BitXOrNode(JSC::BitXOrNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BaseDotNode::isArgumentsLengthAccess(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 344))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    return **(_QWORD **)(a1 + 40) == *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768);
  return result;
}

void JSC::NotEqualNode::~NotEqualNode(JSC::NotEqualNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::NotStrictEqualNode::~NotStrictEqualNode(JSC::NotStrictEqualNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::LessNode::~LessNode(JSC::LessNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::GreaterNode::~GreaterNode(JSC::GreaterNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::LessEqNode::~LessEqNode(JSC::LessEqNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::GreaterEqNode::~GreaterEqNode(JSC::GreaterEqNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

int32x2_t JSC::ShortCircuitReadModifyDotNode::ShortCircuitReadModifyDotNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  int32x2_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = 126;
  *(_BYTE *)(a1 + 26) = 0;
  *(_QWORD *)a1 = off_1E3579FC0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 48) = a5;
  v12 = *a9;
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a9 + 2);
  *(_QWORD *)(a1 + 52) = v12;
  v13 = *a10;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a10 + 2);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *a11;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a11 + 2);
  *(_QWORD *)(a1 + 76) = v14;
  *(_QWORD *)a1 = &off_1E35893F8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a7;
  *(_BYTE *)(a1 + 104) = a6;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a1 + 105) & 0xFE | a8;
  return result;
}

_QWORD *WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v31;
  int v32;
  int v34;
  WTF *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  int v56;

  v7 = *a2;
  v6 = a2[1];
  if (v6 != 8)
  {
LABEL_26:
    if (3 * v6 <= (4 * v7))
    {
      v34 = 2 * v6;
      v35 = (WTF *)(8 * (2 * v6));
      v36 = *((_QWORD *)a2 + 1);
      v56 = v6;
      v10 = (char *)WTF::fastMalloc(v35);
      memset(v10, 255, (size_t)v35);
      a2[1] = v34;
      if (v56)
      {
        v44 = 0;
        v45 = v34 - 1;
        do
        {
          v46 = *(_QWORD *)(v36 + 8 * v44);
          if (v46 != -1)
          {
            v47 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
            v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
            v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
            v50 = v45 & ((v49 >> 31) ^ v49);
            v51 = *(_QWORD *)&v10[8 * v50];
            if (v51 != -1 && v51 != v46)
            {
              v53 = 1;
              do
              {
                v50 = ((_DWORD)v50 + v53) & v45;
                v54 = *(_QWORD *)&v10[8 * v50];
                ++v53;
              }
              while (v54 != -1 && v54 != v46);
            }
            *(_QWORD *)&v10[8 * v50] = v46;
          }
          ++v44;
        }
        while (v44 != v56);
      }
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      v6 = a2[1];
      *((_QWORD *)a2 + 1) = v10;
    }
    else
    {
      v10 = (char *)*((_QWORD *)a2 + 1);
    }
    v26 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v7 = (v6 - 1) & ((v28 >> 31) ^ v28);
    v29 = *(_QWORD *)&v10[8 * v7];
    if (v29 != -1 && v29 != a3)
    {
      v32 = 1;
      do
      {
        v7 = ((_DWORD)v7 + v32) & (v6 - 1);
        v29 = *(_QWORD *)&v10[8 * v7];
        ++v32;
      }
      while (v29 != -1 && v29 != a3);
    }
    if (v29 == a3)
    {
      v11 = 0;
    }
    else
    {
      v31 = &v10[8 * v7];
      *(_QWORD *)v31 = a3;
      ++*a2;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v7 = (unint64_t)(v31 - v10) >> 3;
      v11 = 1;
    }
    goto LABEL_8;
  }
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *a2;
    v10 = (char *)(a2 + 2);
    do
    {
      if (*(_QWORD *)&a2[2 * v8 + 2] == a3)
      {
        v11 = 0;
        v6 = 8;
        LODWORD(v7) = v8;
        goto LABEL_8;
      }
      ++v8;
    }
    while (v7 != v8);
    if (v7 <= 7)
      goto LABEL_7;
    v12 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
    v13 = 0;
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    *v12 = v14;
    v12[1] = v14;
    v12[2] = v14;
    v12[3] = v14;
    v12[4] = v14;
    v12[5] = v14;
    v12[6] = v14;
    v12[7] = v14;
    v12[8] = v14;
    v12[9] = v14;
    v12[10] = v14;
    v12[11] = v14;
    v12[12] = v14;
    v12[13] = v14;
    v12[14] = v14;
    v12[15] = v14;
    v12[16] = v14;
    v12[17] = v14;
    v12[18] = v14;
    v12[19] = v14;
    v12[20] = v14;
    v12[21] = v14;
    v12[22] = v14;
    v12[23] = v14;
    v12[24] = v14;
    v12[25] = v14;
    v12[26] = v14;
    v12[27] = v14;
    v12[28] = v14;
    v12[29] = v14;
    v12[30] = v14;
    v12[31] = v14;
    a2[1] = 64;
    do
    {
      v15 = *(_QWORD *)&v10[8 * v13];
      if (v15 != -1)
      {
        v16 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v18 ^ (v18 >> 31);
        v20 = v19 & 0x3F;
        v21 = *((_QWORD *)v12 + v20);
        if (v21 != -1 && v21 != v15)
        {
          LOBYTE(v20) = v19 & 0x3F;
          v23 = 1;
          do
          {
            v20 = ((_BYTE)v20 + (_BYTE)v23) & 0x3F;
            v24 = *((_QWORD *)v12 + v20);
            ++v23;
          }
          while (v24 != -1 && v24 != v15);
        }
        *((_QWORD *)v12 + v20) = v15;
      }
      ++v13;
    }
    while (v13 != 8);
    LODWORD(v7) = *a2;
    *((_QWORD *)a2 + 1) = v12;
    v6 = 64;
    goto LABEL_26;
  }
  v9 = 0;
LABEL_7:
  *a2 = v7 + 1;
  *(_QWORD *)&a2[2 * v9 + 2] = a3;
  v11 = 1;
  v6 = 8;
  v10 = (char *)(a2 + 2);
LABEL_8:
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v6;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v11;
}

uint64_t *WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v32 = 8;
LABEL_31:
      result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v9, v32, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v25 = *v9;
      if (*v9)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_17;
    }
LABEL_28:
    v32 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_31;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 0x20) != 0)
    v3 = *(_DWORD *)(a2 + 32);
  v4 = v2 & (v3 >> 8);
  v5 = *(_QWORD *)(a1 + 16 * v4);
  if (v5 == a2)
    return 1;
  v6 = 1;
  do
  {
    v7 = v5 != 0;
    if (!v5)
      break;
    v4 = (v4 + v6) & v2;
    v5 = *(_QWORD *)(a1 + 16 * v4);
    ++v6;
  }
  while (v5 != a2);
  return v7;
}

_QWORD *WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::inlineSet<JSC::FunctionMetadataNode * const&,JSC::Scope::NeedsDuplicateDeclarationCheck>(uint64_t result, uint64_t *a2, unint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  __n128 *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  __n128 *v25;
  int v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2)
    goto LABEL_3;
  v9 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v9 + 16) = 0;
  result = v9 + 16;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *a2 = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*a2 - 8) = 7;
  *(_DWORD *)(*a2 - 16) = 0;
  *(_DWORD *)(*a2 - 12) = 0;
  v8 = *a2;
  if (*a2)
  {
LABEL_3:
    v10 = 0;
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = *a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v11 & ((v15 >> 31) ^ v15);
  v17 = (__n128 *)(v8 + 16 * v16);
  v18 = v17->n128_u64[0];
  if (v17->n128_u64[0])
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v18 == v12)
      {
        if ((v10 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)v7 = v17;
        *(_QWORD *)(v7 + 8) = v8 + 16 * v27;
        *(_BYTE *)(v7 + 16) = 0;
        v17->n128_u8[8] = *a4;
        return result;
      }
      if (v18 == -1)
        v25 = v17;
      v16 = (v16 + v26) & v11;
      v17 = (__n128 *)(v8 + 16 * v16);
      v18 = v17->n128_u64[0];
      ++v26;
    }
    while (v17->n128_u64[0]);
    if (v25)
    {
      v25->n128_u64[0] = 0;
      v25->n128_u8[8] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v17 = v25;
    }
  }
  v17->n128_u64[0] = v12;
  v17->n128_u8[8] = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_11;
LABEL_13:
    result = WTF::HashTable<JSC::FunctionMetadataNode *,WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>>,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FunctionMetadataNode *>>::expand(a2, v17);
    v17 = (__n128 *)result;
    v21 = *a2;
    if (*a2)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
    goto LABEL_11;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_13;
LABEL_11:
  *(_QWORD *)v7 = v17;
  *(_QWORD *)(v7 + 8) = v21 + 16 * v24;
  *(_BYTE *)(v7 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<JSC::FunctionMetadataNode *,WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>>,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FunctionMetadataNode *>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::FunctionMetadataNode *,WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>>,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FunctionMetadataNode *>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<JSC::FunctionMetadataNode *,WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck>>,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FunctionMetadataNode *>>::rehash(uint64_t *a1, unsigned int a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t result;
  __n128 *v21;
  uint64_t v22;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0;
      v18 += 16;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v21 = (__n128 *)v6;
    do
    {
      if (v21->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v21);
        if (v21 == a3)
          v19 = v22;
      }
      ++v21;
      --v7;
    }
    while (v7);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

void JSC::VariableEnvironment::~VariableEnvironment(JSC::VariableEnvironment *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v23 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v23)
      {
        v24 = *v9;
        do
        {
          v25 = *v24;
          if (*v24 != (WTF::StringImpl *)-1)
          {
            *v24 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
              {
                WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
              }
              else
              {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          v24 += 2;
          --v23;
        }
        while (v23);
      }
      WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = *(WTF::StringImpl ***)this;
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

WTF::StringImpl ****std::unique_ptr<JSC::VariableEnvironment::RareData>::~unique_ptr[abi:sn180100](WTF::StringImpl ****a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v12 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v12)
      {
        v13 = *v9;
        do
        {
          v14 = *v13;
          if (*v13 != (WTF::StringImpl *)-1)
          {
            *v13 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
              }
              else
              {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

BOOL JSC::Scope::hasLexicallyDeclaredVariable(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  int v13;
  _BOOL8 v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (this)
    *(_DWORD *)this += 2;
  v8 = *(_QWORD *)(a1 + 144);
  if (!v8)
  {
    v14 = 0;
    goto LABEL_12;
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *((_DWORD *)this + 4);
  if ((v10 & 0x20) != 0)
    v10 = *((_DWORD *)this + 8);
  v11 = v9 & (v10 >> 8);
  v12 = *(WTF::StringImpl **)(v8 + 16 * v11);
  if (v12 != this)
  {
    v13 = 1;
    do
    {
      v14 = v12 != 0;
      if (!v12)
        break;
      v11 = (v11 + v13) & v9;
      v12 = *(WTF::StringImpl **)(v8 + 16 * v11);
      ++v13;
    }
    while (v12 != this);
LABEL_12:
    if (!this)
      return v14;
    goto LABEL_13;
  }
  v14 = 1;
LABEL_13:
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *(_DWORD *)this -= 2;
  }
  return v14;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v6 = (uint64_t *)result;
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    goto LABEL_3;
  v9 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v9 + 16) = 0;
  result = v9 + 16;
  *(_WORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_WORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_WORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_WORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_WORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_WORD *)(result + 120) = 0;
  *v6 = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*v6 - 8) = 7;
  *(_DWORD *)(*v6 - 16) = 0;
  *(_DWORD *)(*v6 - 12) = 0;
  v8 = *v6;
  if (*v6)
  {
LABEL_3:
    v10 = 0;
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4);
  if ((v13 & 0x20) != 0)
    v13 = *((_DWORD *)v12 + 8);
  v14 = v11 & (v13 >> 8);
  v15 = v8 + 16 * v14;
  v16 = *(WTF::StringImpl **)v15;
  if (!*(_QWORD *)v15)
    goto LABEL_7;
  v25 = 0;
  v26 = 1;
  do
  {
    if (v16 == v12)
    {
      if ((v10 & 1) != 0)
        v27 = 0;
      else
        v27 = *(unsigned int *)(v8 - 4);
      v24 = 0;
      v23 = v8 + 16 * v27;
      goto LABEL_15;
    }
    if (v16 == (WTF::StringImpl *)-1)
      v25 = v15;
    v14 = (v14 + v26) & v11;
    v15 = v8 + 16 * v14;
    v16 = *(WTF::StringImpl **)v15;
    ++v26;
  }
  while (*(_QWORD *)v15);
  if (v25)
  {
    *(_QWORD *)v25 = 0;
    *(_WORD *)(v25 + 8) = 0;
    --*(_DWORD *)(*v6 - 16);
    v12 = *a2;
    v15 = v25;
  }
  if (v12)
LABEL_7:
    *(_DWORD *)v12 += 2;
  *(_QWORD *)v15 = v12;
  *(_WORD *)(v15 + 8) = *a3;
  v17 = *v6;
  if (*v6)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_14;
LABEL_28:
    result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v6, (WTF::StringImpl **)v15);
    v15 = result;
    v19 = *v6;
    if (*v6)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_14;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_28;
LABEL_14:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_15:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    v16 = v7;
    v17 = (_WORD *)(v8 + 24);
    do
    {
      *((_QWORD *)v17 - 1) = 0;
      *v17 = 0;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (WTF::StringImpl **)(v4 + 16 * v18);
      v21 = *v20;
      if (*v20)
      {
        if (v21 != (WTF::StringImpl *)-1)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = *((_DWORD *)v21 + 4);
          if ((v24 & 0x20) != 0)
            v24 = *((_DWORD *)v21 + 8);
          v25 = 0;
          v26 = v24 >> 8;
          do
          {
            v27 = v26 & v23;
            v26 = ++v25 + v27;
          }
          while (*(_QWORD *)(v22 + 16 * v27));
          v28 = v22 + 16 * v27;
          *(_QWORD *)v28 = 0;
          v29 = *v20;
          *v20 = 0;
          *(_QWORD *)v28 = v29;
          *(_WORD *)(v28 + 8) = *(_WORD *)(v4 + 16 * v18 + 8);
          v30 = *v20;
          *v20 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::~StringImpl(v30, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
            }
            else
            {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v20 == a2)
            v19 = v28;
        }
      }
      else
      {
        *v20 = 0;
      }
      ++v18;
    }
    while (v18 != v5);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

uint64_t JSC::Scope::hasDeclaredVariable(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (this)
    *(_DWORD *)this += 2;
  v9 = *(_QWORD *)(a1 + 120);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = *((_DWORD *)this + 4);
    if ((v11 & 0x20) != 0)
      v11 = *((_DWORD *)this + 8);
    v12 = v10 & (v11 >> 8);
    v13 = *(WTF::StringImpl **)(v9 + 16 * v12);
    if (v13 == this)
    {
LABEL_10:
      v15 = v9 + 16 * v12;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v10;
        v13 = *(WTF::StringImpl **)(v9 + 16 * v12);
        ++v14;
        if (v13 == this)
          goto LABEL_10;
      }
      v15 = v9 + 16 * *(unsigned int *)(v9 - 4);
    }
  }
  else
  {
    v15 = 0;
  }
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  v16 = *(_QWORD *)(a1 + 120);
  if (v16)
    v16 += 16 * *(unsigned int *)(v16 - 4);
  if (v15 == v16)
    return 0;
  else
    return (*(unsigned __int16 *)(v15 + 8) >> 2) & 1;
}

uint64_t JSC::Scope::hasDeclaredParameter(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  int v38;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;

  v9 = *(_DWORD *)(a1 + 52);
  if (v9 != 8)
  {
    v30 = *(_QWORD *)(a1 + 56);
    v31 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = v9 - 1;
    v35 = v34 & ((v33 >> 31) ^ v33);
    v36 = *(WTF::StringImpl **)(v30 + 8 * v35);
    if (v36 != (WTF::StringImpl *)-1 && v36 != this)
    {
      v38 = 1;
      do
      {
        v35 = (v35 + v38) & v34;
        v36 = *(WTF::StringImpl **)(v30 + 8 * v35);
        ++v38;
      }
      while (v36 != (WTF::StringImpl *)-1 && v36 != this);
    }
    if (v36 != this)
      goto LABEL_3;
    return 1;
  }
  v10 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v10)
  {
    if (*(WTF::StringImpl **)(a1 + 56) != this)
    {
      v18 = 0;
      while (v10 - 1 != v18)
      {
        v19 = *(WTF::StringImpl **)(a1 + 64 + 8 * v18++);
        if (v19 == this)
        {
          if (v18 >= v10)
            goto LABEL_3;
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  if (this)
  {
    *(_DWORD *)this += 2;
    v11 = *(_QWORD *)(a1 + 120);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = *((_DWORD *)this + 4);
      if ((v13 & 0x20) != 0)
        v13 = *((_DWORD *)this + 8);
      v14 = v12 & (v13 >> 8);
      v15 = *(WTF::StringImpl **)(v11 + 16 * v14);
      if (v15 == this)
      {
LABEL_11:
        v17 = v11 + 16 * v14;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v12;
          v15 = *(WTF::StringImpl **)(v11 + 16 * v14);
          ++v16;
          if (v15 == this)
            goto LABEL_11;
        }
        v17 = v11 + 16 * *(unsigned int *)(v11 - 4);
      }
    }
    else
    {
      v17 = 0;
    }
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 120);
    if (v40)
    {
      v41 = *(_DWORD *)(v40 - 8);
      v42 = MEMORY[0x10];
      if ((MEMORY[0x10] & 0x20) != 0)
        v42 = MEMORY[0x20];
      v43 = v41 & (v42 >> 8);
      if (*(_QWORD *)(v40 + 16 * v43))
      {
        v44 = 1;
        do
          v43 = ((_DWORD)v43 + v44++) & v41;
        while (*(_QWORD *)(v40 + 16 * v43));
      }
      v17 = v40 + 16 * v43;
    }
    else
    {
      v17 = 0;
    }
  }
  v21 = *(_QWORD *)(a1 + 120);
  if (v21)
    v21 += 16 * *(unsigned int *)(v21 - 4);
  if (v17 == v21)
    return 0;
  else
    return (*(unsigned __int16 *)(v17 + 8) >> 2) & 1;
}

void WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl **v29;
  int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(WTF::StringImpl **)a2;
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = v14 & (v16 >> 8);
  v18 = (WTF::StringImpl **)(v12 + 8 * v17);
  v19 = *v18;
  if (*v18)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v40 = 0;
        else
          v40 = *(unsigned int *)(v12 - 4);
        v28 = 0;
        v27 = v12 + 8 * v40;
        goto LABEL_16;
      }
      if (v19 == (WTF::StringImpl *)-1)
        v29 = v18;
      v17 = (v17 + v30) & v14;
      v18 = (WTF::StringImpl **)(v12 + 8 * v17);
      v19 = *v18;
      ++v30;
    }
    while (*v18);
    if (v29)
    {
      *v29 = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *(WTF::StringImpl **)a2;
      v18 = v29;
    }
  }
  *(_QWORD *)a2 = 0;
  v20 = *v18;
  *v18 = v15;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a1;
  if (*a1)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_15;
    goto LABEL_30;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v39 = 8;
LABEL_33:
      v18 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v39, (uint64_t)v18, a4, a5, a6, a7, a8);
      v23 = *a1;
      if (*a1)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_15;
    }
LABEL_30:
    v39 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
    goto LABEL_33;
  }
LABEL_15:
  v27 = v23 + 8 * v26;
  v28 = 1;
LABEL_16:
  *(_QWORD *)a9 = v18;
  *(_QWORD *)(a9 + 8) = v27;
  *(_BYTE *)(a9 + 16) = v28;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 8 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != (WTF::StringImpl *)-1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v25 + 4);
          if ((v28 & 0x20) != 0)
            v28 = *((_DWORD *)v25 + 8);
          v29 = 0;
          v30 = v28 >> 8;
          do
          {
            v31 = v30 & v27;
            v30 = ++v29 + v31;
          }
          while (*(_QWORD *)(v26 + 8 * v31));
          v32 = (WTF::StringImpl **)(v26 + 8 * v31);
          *v32 = 0;
          v33 = *v24;
          *v24 = 0;
          *v32 = v33;
          v34 = *v24;
          *v24 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
        }
      }
      else
      {
        *v24 = 0;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

WTF::StringImpl ****std::unique_ptr<JSC::VariableEnvironment::RareData>::operator=[abi:sn180100](WTF::StringImpl ****a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(WTF::StringImpl ****)a2;
  *(_QWORD *)a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      v13 = *((unsigned int *)v11 - 1);
      if ((_DWORD)v13)
      {
        v14 = *v10;
        do
        {
          v15 = *v14;
          if (*v14 != (WTF::StringImpl *)-1)
          {
            *v14 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
              {
                WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
              }
              else
              {
                *(_DWORD *)v15 -= 2;
              }
            }
          }
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      WTF::fastFree((unint64_t)(v11 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>@<X0>(uint64_t *result@<X0>, WTF::StringImpl **a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *((_DWORD *)*a2 + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)v11 + 8);
  v13 = v10 & (v12 >> 8);
  v14 = (uint64_t *)(v8 + 16 * v13);
  v15 = (WTF::StringImpl *)*v14;
  if (!*v14)
    goto LABEL_6;
  v24 = 0;
  v25 = 1;
  do
  {
    if (v15 == v11)
    {
      if ((v9 & 1) != 0)
        v27 = 0;
      else
        v27 = *(unsigned int *)(v8 - 4);
      v23 = 0;
      v22 = v8 + 16 * v27;
      goto LABEL_14;
    }
    if (v15 == (WTF::StringImpl *)-1)
      v24 = v14;
    v13 = (v13 + v25) & v10;
    v14 = (uint64_t *)(v8 + 16 * v13);
    v15 = (WTF::StringImpl *)*v14;
    ++v25;
  }
  while (*v14);
  if (v24)
  {
    *v24 = 0;
    *((_WORD *)v24 + 4) = 0;
    --*(_DWORD *)(*v6 - 16);
    v11 = *a2;
    v14 = v24;
  }
  if (v11)
LABEL_6:
    *(_DWORD *)v11 += 2;
  *v14 = (uint64_t)v11;
  *((_WORD *)v14 + 4) = *a3;
  v16 = *v6;
  if (*v6)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_13;
    goto LABEL_27;
  }
  if (3 * v21 <= 4 * v20)
  {
    if (!(_DWORD)v21)
    {
      v26 = 8;
LABEL_32:
      result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v6, v26, (WTF::StringImpl **)v14);
      v14 = result;
      v18 = *v6;
      if (*v6)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_13;
    }
LABEL_27:
    v26 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_32;
  }
LABEL_13:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_14:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_WORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0;
      v18 += 8;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (WTF::StringImpl **)(v6 + 16 * v21);
      v23 = *v22;
      if (*v22)
      {
        if (v23 != (WTF::StringImpl *)-1)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if ((v26 & 0x20) != 0)
            v26 = *((_DWORD *)v23 + 8);
          v27 = 0;
          v28 = v26 >> 8;
          do
          {
            v29 = v28 & v25;
            v28 = ++v27 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = v24 + 16 * v29;
          *(_QWORD *)v30 = 0;
          v31 = *v22;
          *v22 = 0;
          *(_QWORD *)v30 = v31;
          *(_WORD *)(v30 + 8) = *(_WORD *)(v6 + 16 * v21 + 8);
          v32 = *v22;
          *v22 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v22 == a3)
            v19 = v30;
        }
      }
      else
      {
        *v22 = 0;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_27;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_27:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_QWORD *WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void JSC::FunctionParameters::~FunctionParameters(JSC::FunctionParameters *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FunctionParameters *v9;

  v9 = (JSC::FunctionParameters *)*((_QWORD *)this + 1);
  if ((JSC::FunctionParameters *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  JSC::FunctionParameters *v9;

  v9 = (JSC::FunctionParameters *)*((_QWORD *)this + 1);
  if ((JSC::FunctionParameters *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *(_DWORD **)a2;
  v15 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v15 & 0x20) != 0)
    v15 = v14[8];
  v16 = v13 & (v15 >> 8);
  v17 = (uint64_t *)(v11 + 8 * v16);
  v18 = (_DWORD *)*v17;
  if (!*v17)
    goto LABEL_6;
  v27 = 0;
  v28 = 1;
  do
  {
    if (v18 == v14)
    {
      if ((v12 & 1) != 0)
        v30 = 0;
      else
        v30 = *(unsigned int *)(v11 - 4);
      v26 = 0;
      v25 = v11 + 8 * v30;
      goto LABEL_14;
    }
    if (v18 == (_DWORD *)-1)
      v27 = v17;
    v16 = (v16 + v28) & v13;
    v17 = (uint64_t *)(v11 + 8 * v16);
    v18 = (_DWORD *)*v17;
    ++v28;
  }
  while (*v17);
  if (v27)
  {
    *v27 = 0;
    --*(_DWORD *)(*v9 - 16);
    v14 = *(_DWORD **)a2;
    v17 = v27;
  }
  if (v14)
LABEL_6:
    *v14 += 2;
  *v17 = (uint64_t)v14;
  v19 = *v9;
  if (*v9)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v9;
  if (*v9)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_13;
    goto LABEL_29;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v29 = 8;
LABEL_32:
      result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v9, v29, (uint64_t)v17, a3, a4, a5, a6, a7);
      v17 = result;
      v21 = *v9;
      if (*v9)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_13;
    }
LABEL_29:
    v29 = ((_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24)));
    goto LABEL_32;
  }
LABEL_13:
  v25 = v21 + 8 * v24;
  v26 = 1;
LABEL_14:
  *(_QWORD *)a8 = v17;
  *(_QWORD *)(a8 + 8) = v25;
  *(_BYTE *)(a8 + 16) = v26;
  return result;
}

unint64_t WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v20 = *(_QWORD *)a1;
        return v20 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_OWORD *)(v11 + v19) = *(_OWORD *)(v5 + v19);
          v19 += 16;
        }
        while (16 * v6 != v19);
        v20 = *(_QWORD *)a1;
        if (v5)
        {
          if (v20 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v20 = *(_QWORD *)a1;
        }
        return v20 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x197E63108);
    }
  }
  v21 = *(unsigned int *)(a1 + 8);
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= a2)
    v24 = a2;
  else
    v24 = v23;
  if (v24 > v21)
  {
    if (v24 >> 28)
      goto LABEL_35;
    v25 = *(unsigned int *)(a1 + 12);
    v26 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v24));
    *(_DWORD *)(a1 + 8) = v24;
    *(_QWORD *)a1 = v26;
    if ((_DWORD)v25)
    {
      v34 = 16 * v25;
      v35 = (__int128 *)v5;
      do
      {
        v36 = *v35++;
        *v26++ = v36;
        v34 -= 16;
      }
      while (v34);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  return v3;
}

__n128 WTF::Vector<JSC::ScopeLabelInfo,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ScopeLabelInfo>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::ScopeLabelInfo,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<JSC::ScopeLabelInfo,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 3)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_30;
      }
      if (!(v10 >> 28))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 16 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197E632ECLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 3)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 16 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

unint64_t *WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v11 = *(_QWORD *)(v9 + 16);
      if (v11)
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v11, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(v9 + 8);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 4);
        if ((_DWORD)v13)
        {
          v14 = *(WTF::StringImpl ***)(v9 + 8);
          do
          {
            v15 = *v14;
            if (*v14 != (WTF::StringImpl *)-1)
            {
              *v14 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                {
                  WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
                }
                else
                {
                  *(_DWORD *)v15 -= 2;
                }
              }
            }
            ++v14;
            --v13;
          }
          while (v13);
        }
        WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return a1;
}

void WTF::RefCounted<JSC::ModuleScopeData>::deref(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_DWORD *)this == 1)
  {
    v9 = *((_QWORD *)this + 2);
    if (v9)
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v9, a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_QWORD *)this + 1);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v11)
      {
        v12 = (WTF::StringImpl **)*((_QWORD *)this + 1);
        do
        {
          v13 = *v12;
          if (*v12 != (WTF::StringImpl *)-1)
          {
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
              {
                WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
              }
              else
              {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          ++v12;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

void WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t i;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v11 != (WTF::StringImpl *)-1)
      {
        v12 = a1 + 24 * i;
        v13 = (WTF::StringImpl ***)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v14)
        {
          v17 = *v13;
          v18 = 8 * v14;
          do
          {
            v19 = *v17;
            *v17 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
              {
                WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_DWORD *)v19 -= 2;
              }
            }
            ++v17;
            v18 -= 8;
          }
          while (v18);
        }
        v15 = (unint64_t)*v13;
        if (*v13)
        {
          *v13 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        v16 = *v11;
        *v11 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
    }
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::VectorTypeOperations<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>::destruct(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t StatusReg;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != (unint64_t *)a2)
  {
    v9 = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, a2, a3, a4, a5, a6, a7, a8);
          v12 = *(_QWORD *)(StatusReg + 752);
          if (v12)
          {
            if (!(v11 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v11 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v11)) & 1) != 0)
            {
LABEL_11:
              v13 = *(unsigned int *)(v12 + 8000);
              if (v13 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v12, v11, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v12 + 8 * v13) = v11 | 0x5000000000000;
                *(_DWORD *)(v12 + 8000) = v13 + 1;
              }
              goto LABEL_6;
            }
            if (v11 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v11 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v11 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v11) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, v11, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v11, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_6:
      ++v9;
    }
    while (v9 != (unint64_t *)a2);
  }
}

void WTF::VectorTypeOperations<JSC::Scope>::destruct(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *((_QWORD *)v9 + 88);
      if (v10)
      {
        *((_QWORD *)v9 + 88) = 0;
        v9[178] = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 = *((_QWORD *)v9 + 87);
      if (v11)
        WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
      v12 = *((_QWORD *)v9 + 86);
      if (v12)
        WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
      if (v9[155] != 8)
        WTF::fastFree(*((_QWORD *)v9 + 78), a2, a3, a4, a5, a6, a7, a8);
      v13 = v9[45];
      v14 = *((_QWORD *)v9 + 21);
      if ((_DWORD)v13)
      {
        v15 = 72 * v13;
        v16 = (unint64_t *)(v14 + 8);
        do
        {
          if (*((_DWORD *)v16 - 1) != 8)
            WTF::fastFree(*v16, a2, a3, a4, a5, a6, a7, a8);
          v16 += 9;
          v15 -= 72;
        }
        while (v15);
        v14 = *((_QWORD *)v9 + 21);
      }
      if (v9 + 46 != (unsigned int *)v14 && v14 != 0)
      {
        *((_QWORD *)v9 + 21) = 0;
        v9[44] = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = (WTF::StringImpl ***)*((_QWORD *)v9 + 20);
      *((_QWORD *)v9 + 20) = 0;
      if (v18)
      {
        v19 = *v18;
        if (*v18)
        {
          v49 = *((unsigned int *)v19 - 1);
          if ((_DWORD)v49)
          {
            v50 = *v18;
            do
            {
              v51 = *v50;
              if (*v50 != (WTF::StringImpl *)-1)
              {
                *v50 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
                  }
                  else
                  {
                    *(_DWORD *)v51 -= 2;
                  }
                }
              }
              v50 += 2;
              --v49;
            }
            while (v49);
          }
          WTF::fastFree((unint64_t)(v19 - 2), a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
      }
      v20 = *((_QWORD *)v9 + 18);
      if (v20)
      {
        v27 = *(unsigned int *)(v20 - 4);
        if ((_DWORD)v27)
        {
          v28 = (WTF::StringImpl **)*((_QWORD *)v9 + 18);
          do
          {
            v29 = *v28;
            if (*v28 != (WTF::StringImpl *)-1)
            {
              *v28 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                {
                  WTF::StringImpl::~StringImpl(v29, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                }
                else
                {
                  *(_DWORD *)v29 -= 2;
                }
              }
            }
            v28 += 2;
            --v27;
          }
          while (v27);
        }
        WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v21 = (WTF::StringImpl ***)*((_QWORD *)v9 + 17);
      *((_QWORD *)v9 + 17) = 0;
      if (v21)
      {
        v22 = *v21;
        if (*v21)
        {
          v60 = *((unsigned int *)v22 - 1);
          if ((_DWORD)v60)
          {
            v61 = *v21;
            do
            {
              v62 = *v61;
              if (*v61 != (WTF::StringImpl *)-1)
              {
                *v61 = 0;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v62, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
                  }
                  else
                  {
                    *(_DWORD *)v62 -= 2;
                  }
                }
              }
              v61 += 2;
              --v60;
            }
            while (v60);
          }
          WTF::fastFree((unint64_t)(v22 - 2), a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
      }
      v23 = *((_QWORD *)v9 + 15);
      if (v23)
      {
        v38 = *(unsigned int *)(v23 - 4);
        if ((_DWORD)v38)
        {
          v39 = (WTF::StringImpl **)*((_QWORD *)v9 + 15);
          do
          {
            v40 = *v39;
            if (*v39 != (WTF::StringImpl *)-1)
            {
              *v39 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
                }
                else
                {
                  *(_DWORD *)v40 -= 2;
                }
              }
            }
            v39 += 2;
            --v38;
          }
          while (v38);
        }
        WTF::fastFree(v23 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v9[13] != 8)
        WTF::fastFree(*((_QWORD *)v9 + 7), a2, a3, a4, a5, a6, a7, a8);
      v24 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 5) = 0;
      if (v24)
      {
        v25 = *(_QWORD *)v24;
        if (v24 + 16 != *(_QWORD *)v24 && v25 != 0)
        {
          *(_QWORD *)v24 = 0;
          *(_DWORD *)(v24 + 8) = 0;
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 180;
    }
    while (v9 != a2);
  }
}

void WTF::RefCounted<JSC::SourceProviderCache>::deref(JSC::SourceProviderCache *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::SourceProviderCache::~SourceProviderCache(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

void WTF::Vector<JSC::Scope,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::ImplementationVisibility &,unsigned char &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  void *v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  JSC::VariableEnvironment *v24;
  JSC::VariableEnvironment *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VariableEnvironment *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  __int128 v82;
  JSC::VariableEnvironment *v90;

  v9 = (unsigned __int8 *)a8;
  v10 = (unsigned __int8 *)a7;
  v11 = (unsigned __int8 *)a6;
  v12 = (unsigned __int8 *)a5;
  v13 = (char *)a4;
  v14 = (char *)a3;
  v15 = a2;
  v17 = *(unsigned int *)(a1 + 8);
  v18 = *(unsigned int *)(a1 + 12);
  v19 = v17 + (v17 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= v18 + 1)
    v21 = v18 + 1;
  else
    v21 = v20;
  if (v21 > v17)
  {
    v90 = *(JSC::VariableEnvironment **)a1;
    if (v21 < 0xB)
    {
      v23 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 10;
    }
    else
    {
      if (v21 >= 0x5B05B1)
      {
        __break(0xC471u);
        return;
      }
      v22 = 720 * v21;
      v23 = WTF::fastMalloc((WTF *)(720 * v21));
      *(_DWORD *)(a1 + 8) = v22 / 0x2D0;
      *(_QWORD *)a1 = v23;
    }
    if ((_DWORD)v18)
    {
      v24 = v90;
      v25 = (JSC::VariableEnvironment *)((char *)v90 + 720 * v18);
      *(_QWORD *)&v26 = -1;
      *((_QWORD *)&v26 + 1) = -1;
      do
      {
        v27 = *(_OWORD *)v24;
        v28 = *((_OWORD *)v24 + 1);
        *(_BYTE *)(v23 + 32) = *((_BYTE *)v24 + 32);
        *(_OWORD *)v23 = v27;
        *(_OWORD *)(v23 + 16) = v28;
        v29 = *((_QWORD *)v24 + 5);
        *((_QWORD *)v24 + 5) = 0;
        *(_QWORD *)(v23 + 40) = v29;
        *(_OWORD *)(v23 + 48) = *((_OWORD *)v24 + 3);
        v30 = *((_OWORD *)v24 + 4);
        v31 = *((_OWORD *)v24 + 5);
        v32 = *((_OWORD *)v24 + 6);
        *(_QWORD *)(v23 + 112) = *((_QWORD *)v24 + 14);
        *(_OWORD *)(v23 + 80) = v31;
        *(_OWORD *)(v23 + 96) = v32;
        *(_OWORD *)(v23 + 64) = v30;
        *((_QWORD *)v24 + 6) = 0x800000000;
        *(_OWORD *)((char *)v24 + 56) = v26;
        *(_OWORD *)((char *)v24 + 72) = v26;
        *(_OWORD *)((char *)v24 + 88) = v26;
        *(_OWORD *)((char *)v24 + 104) = v26;
        *(_QWORD *)(v23 + 120) = 0;
        v33 = *((_QWORD *)v24 + 15);
        *((_QWORD *)v24 + 15) = 0;
        *(_QWORD *)(v23 + 120) = v33;
        *(_BYTE *)(v23 + 128) = *((_BYTE *)v24 + 128);
        v34 = *((_QWORD *)v24 + 17);
        *((_QWORD *)v24 + 17) = 0;
        *(_QWORD *)(v23 + 136) = v34;
        *(_QWORD *)(v23 + 144) = 0;
        v35 = *((_QWORD *)v24 + 18);
        *((_QWORD *)v24 + 18) = 0;
        *(_QWORD *)(v23 + 144) = v35;
        *(_BYTE *)(v23 + 152) = *((_BYTE *)v24 + 152);
        v36 = *((_QWORD *)v24 + 20);
        *((_QWORD *)v24 + 20) = 0;
        *(_QWORD *)(v23 + 160) = v36;
        *(_QWORD *)(v23 + 168) = v23 + 184;
        *(_QWORD *)(v23 + 176) = 6;
        v37 = (JSC::VariableEnvironment *)*((_QWORD *)v24 + 21);
        v38 = (char *)v24 + 184;
        if (v37 == (JSC::VariableEnvironment *)((char *)v24 + 184))
        {
          v39 = *((_DWORD *)v24 + 45);
          if (v39)
          {
            v40 = 0;
            v41 = (uint64_t)v37 + 72 * v39;
            do
            {
              v42 = (uint64_t)v37 + v40;
              v43 = v23 + v40;
              *(_OWORD *)(v43 + 184) = *(_OWORD *)((char *)v37 + v40);
              v44 = *(_OWORD *)((char *)v37 + v40 + 16);
              v45 = *(_OWORD *)((char *)v37 + v40 + 32);
              v46 = *(_OWORD *)((char *)v37 + v40 + 48);
              *(_QWORD *)(v43 + 248) = *(_QWORD *)((char *)v37 + v40 + 64);
              *(_OWORD *)(v43 + 232) = v46;
              *(_OWORD *)(v43 + 216) = v45;
              *(_OWORD *)(v43 + 200) = v44;
              *(_QWORD *)v42 = 0x800000000;
              *(_OWORD *)(v42 + 8) = v26;
              *(_OWORD *)(v42 + 24) = v26;
              *(_OWORD *)(v42 + 40) = v26;
              *(_OWORD *)(v42 + 56) = v26;
              v40 += 72;
            }
            while (v42 + 72 != v41);
          }
        }
        else
        {
          *((_QWORD *)v24 + 21) = v38;
          *(_QWORD *)(v23 + 168) = v37;
          v72 = *((_DWORD *)v24 + 44);
          *((_DWORD *)v24 + 44) = 6;
          *(_DWORD *)(v23 + 176) = v72;
        }
        v47 = *((_DWORD *)v24 + 45);
        *((_DWORD *)v24 + 45) = 0;
        *(_DWORD *)(v23 + 180) = v47;
        *(_OWORD *)(v23 + 616) = *(_OWORD *)((char *)v24 + 616);
        v48 = *(_OWORD *)((char *)v24 + 632);
        v49 = *(_OWORD *)((char *)v24 + 648);
        v50 = *(_OWORD *)((char *)v24 + 664);
        *(_QWORD *)(v23 + 680) = *((_QWORD *)v24 + 85);
        *(_OWORD *)(v23 + 648) = v49;
        *(_OWORD *)(v23 + 664) = v50;
        *(_OWORD *)(v23 + 632) = v48;
        *((_QWORD *)v24 + 77) = 0x800000000;
        *((_OWORD *)v24 + 39) = v26;
        *((_OWORD *)v24 + 40) = v26;
        *((_OWORD *)v24 + 41) = v26;
        *((_OWORD *)v24 + 42) = v26;
        *(_QWORD *)(v23 + 688) = 0;
        v51 = *((_QWORD *)v24 + 86);
        *((_QWORD *)v24 + 86) = 0;
        *(_QWORD *)(v23 + 688) = v51;
        *(_QWORD *)(v23 + 696) = 0;
        v52 = *((_QWORD *)v24 + 87);
        *((_QWORD *)v24 + 87) = 0;
        *(_QWORD *)(v23 + 696) = v52;
        *(_OWORD *)(v23 + 704) = 0u;
        v53 = *((_QWORD *)v24 + 88);
        *((_QWORD *)v24 + 88) = 0;
        *(_QWORD *)(v23 + 704) = v53;
        LODWORD(v53) = *((_DWORD *)v24 + 178);
        *((_DWORD *)v24 + 178) = 0;
        *(_DWORD *)(v23 + 712) = v53;
        LODWORD(v53) = *((_DWORD *)v24 + 179);
        *((_DWORD *)v24 + 179) = 0;
        *(_DWORD *)(v23 + 716) = v53;
        v54 = *((_QWORD *)v24 + 88);
        if (v54)
        {
          *((_QWORD *)v24 + 88) = 0;
          *((_DWORD *)v24 + 178) = 0;
          WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
        }
        v55 = *((_QWORD *)v24 + 87);
        if (v55)
          WTF::fastFree(v55 - 16, a2, a3, a4, a5, a6, a7, a8);
        v56 = *((_QWORD *)v24 + 86);
        if (v56)
          WTF::fastFree(v56 - 16, a2, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)v24 + 155) != 8)
          WTF::fastFree(*((_QWORD *)v24 + 78), a2, a3, a4, a5, a6, a7, a8);
        v57 = *((unsigned int *)v24 + 45);
        v58 = *((_QWORD *)v24 + 21);
        if ((_DWORD)v57)
        {
          v59 = 72 * v57;
          v60 = (unint64_t *)(v58 + 8);
          do
          {
            if (*((_DWORD *)v60 - 1) != 8)
              WTF::fastFree(*v60, a2, a3, a4, a5, a6, a7, a8);
            v60 += 9;
            v59 -= 72;
          }
          while (v59);
          v58 = *((_QWORD *)v24 + 21);
        }
        if (v38 != (char *)v58 && v58 != 0)
        {
          *((_QWORD *)v24 + 21) = 0;
          *((_DWORD *)v24 + 44) = 0;
          WTF::fastFree(v58, a2, a3, a4, a5, a6, a7, a8);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)((char *)v24 + 144), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)((char *)v24 + 120), v62, v63, v64, v65, v66, v67, v68);
        if (*((_DWORD *)v24 + 13) != 8)
          WTF::fastFree(*((_QWORD *)v24 + 7), a2, a3, a4, a5, a6, a7, a8);
        v69 = *((_QWORD *)v24 + 5);
        *((_QWORD *)v24 + 5) = 0;
        if (v69)
        {
          v70 = *(_QWORD *)v69;
          if (v69 + 16 != *(_QWORD *)v69 && v70 != 0)
          {
            *(_QWORD *)v69 = 0;
            *(_DWORD *)(v69 + 8) = 0;
            WTF::fastFree(v70, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v69, a2, a3, a4, a5, a6, a7, a8);
        }
        v23 += 720;
        v24 = (JSC::VariableEnvironment *)((char *)v24 + 720);
        *(_QWORD *)&v26 = -1;
        *((_QWORD *)&v26 + 1) = -1;
      }
      while (v24 != v25);
    }
    v9 = (unsigned __int8 *)a8;
    v15 = a2;
    v10 = (unsigned __int8 *)a7;
    v12 = (unsigned __int8 *)a5;
    v11 = (unsigned __int8 *)a6;
    v14 = (char *)a3;
    v13 = (char *)a4;
    if ((JSC::VariableEnvironment *)(a1 + 16) != v90 && v90)
    {
      if (*(JSC::VariableEnvironment **)a1 == v90)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v90, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v73 = *(_QWORD *)a1 + 720 * *(unsigned int *)(a1 + 12);
  v74 = *v14;
  v75 = *v13;
  v76 = *v12;
  v77 = *v11;
  v78 = *v10;
  v79 = *v9;
  v80 = *a9;
  *(_QWORD *)v73 = v15;
  *(_BYTE *)(v73 + 8) = v74;
  *(_BYTE *)(v73 + 9) = v75;
  if (v76)
    v81 = 8389056;
  else
    v81 = 8388800;
  *(_DWORD *)(v73 + 10) = v81 | (v77 << 9) | (v78 << 11) | (v79 << 13) | (v80 << 20) | *(_DWORD *)(v73 + 10) & 0xF0000000;
  *(_WORD *)(v73 + 14) = 0;
  *(_BYTE *)(v73 + 16) = 0;
  *(_DWORD *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 24) = 0;
  *(_BYTE *)(v73 + 32) = 0;
  *(_QWORD *)(v73 + 48) = 0x800000000;
  *(_QWORD *)&v82 = -1;
  *((_QWORD *)&v82 + 1) = -1;
  *(_OWORD *)(v73 + 56) = v82;
  *(_OWORD *)(v73 + 72) = v82;
  *(_OWORD *)(v73 + 88) = v82;
  *(_OWORD *)(v73 + 104) = v82;
  *(_QWORD *)(v73 + 120) = 0;
  *(_BYTE *)(v73 + 128) = 0;
  *(_QWORD *)(v73 + 136) = 0;
  *(_QWORD *)(v73 + 144) = 0;
  *(_BYTE *)(v73 + 152) = 0;
  *(_QWORD *)(v73 + 160) = 0;
  *(_QWORD *)(v73 + 168) = v73 + 184;
  *(_QWORD *)(v73 + 616) = 0x800000000;
  *(_OWORD *)(v73 + 656) = v82;
  *(_OWORD *)(v73 + 672) = v82;
  *(_OWORD *)(v73 + 624) = v82;
  *(_OWORD *)(v73 + 640) = v82;
  *(_OWORD *)(v73 + 688) = 0u;
  *(_OWORD *)(v73 + 704) = 0u;
  *(_OWORD *)(v73 + 224) = v82;
  *(_OWORD *)(v73 + 240) = v82;
  *(_OWORD *)(v73 + 192) = v82;
  *(_OWORD *)(v73 + 208) = v82;
  *(_OWORD *)(v73 + 176) = xmmword_19914EEF0;
  ++*(_DWORD *)(a1 + 12);
}

uint64_t WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 72 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(_DWORD *)(result + 12);
  if (v13 < 7)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 6;
    goto LABEL_12;
  }
  if (v13 < 0x38E38E4)
  {
    v15 = 72 * v13;
    v16 = WTF::fastMalloc((WTF *)(72 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if (v14)
    {
      *(_QWORD *)&v17 = -1;
      *((_QWORD *)&v17 + 1) = -1;
      v18 = v10;
      do
      {
        *(_OWORD *)v16 = *(_OWORD *)v18;
        v19 = *(_OWORD *)(v18 + 16);
        v20 = *(_OWORD *)(v18 + 32);
        v21 = *(_OWORD *)(v18 + 48);
        *(_QWORD *)(v16 + 64) = *(_QWORD *)(v18 + 64);
        *(_OWORD *)(v16 + 32) = v20;
        *(_OWORD *)(v16 + 48) = v21;
        *(_OWORD *)(v16 + 16) = v19;
        *(_QWORD *)v18 = 0x800000000;
        *(_OWORD *)(v18 + 8) = v17;
        *(_OWORD *)(v18 + 24) = v17;
        *(_OWORD *)(v18 + 40) = v17;
        *(_OWORD *)(v18 + 56) = v17;
        v16 += 72;
        v18 += 72;
      }
      while (v18 != v10 + 72 * v14);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 12);
    if (v10 < 7)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 6;
    }
    else
    {
      if (v10 >= 0x38E38E4)
      {
        __break(0xC471u);
        return;
      }
      v14 = 72 * v10;
      v15 = WTF::fastMalloc((WTF *)(72 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v15;
    }
    if (v13)
    {
      *(_QWORD *)&v16 = -1;
      *((_QWORD *)&v16 + 1) = -1;
      v17 = v12;
      do
      {
        *(_OWORD *)v15 = *(_OWORD *)v17;
        v18 = *(_OWORD *)(v17 + 16);
        v19 = *(_OWORD *)(v17 + 32);
        v20 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(v15 + 64) = *(_QWORD *)(v17 + 64);
        *(_OWORD *)(v15 + 32) = v19;
        *(_OWORD *)(v15 + 48) = v20;
        *(_OWORD *)(v15 + 16) = v18;
        *(_QWORD *)v17 = 0x800000000;
        *(_OWORD *)(v17 + 8) = v16;
        *(_OWORD *)(v17 + 24) = v16;
        *(_OWORD *)(v17 + 40) = v16;
        *(_OWORD *)(v17 + 56) = v16;
        v15 += 72;
        v17 += 72;
      }
      while (v17 != v12 + 72 * v13);
    }
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::ASTBuilder::appendParameter(JSC::ASTBuilder *this, JSC::FunctionParameters *a2, JSC::DestructuringPatternNode *a3, JSC::ExpressionNode *a4)
{
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 *v12;
  WTF::AtomStringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl **v20;
  WTF::AtomStringImpl ***v21;
  __int128 v22;

  if (a3)
    v7 = 0;
  else
    v7 = (*(uint64_t (**)(JSC::FunctionParameters *, JSC::FunctionParameters *, _QWORD, JSC::ExpressionNode *))(*(_QWORD *)a2 + 40))(a2, a2, 0, a4);
  *((_BYTE *)this + 72) &= v7;
  v8 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = a3;
  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9 == *((_DWORD *)this + 4))
  {
    v12 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v22);
    v9 = *((unsigned int *)this + 5);
    v10 = *((_QWORD *)this + 1);
    v11 = *v12;
  }
  else
  {
    v10 = *v8;
    v11 = v22;
  }
  *(_OWORD *)(v10 + 16 * v9) = v11;
  ++*((_DWORD *)this + 5);
  if (a3)
  {
    if ((*(unsigned int (**)(JSC::FunctionParameters *))(*(_QWORD *)a2 + 40))(a2))
    {
      v13 = (WTF::AtomStringImpl **)*((_QWORD *)a2 + 4);
      if ((*(unsigned int (**)(JSC::DestructuringPatternNode *))(*(_QWORD *)a3 + 152))(a3))
      {
        JSC::FunctionMetadataNode::setEcmaName(*((_QWORD *)a3 + 4), *v13, v14, v15, v16, v17, v18, v19);
      }
      else if ((*(unsigned int (**)(JSC::DestructuringPatternNode *))(*(_QWORD *)a3 + 176))(a3))
      {
        v20 = (WTF::AtomStringImpl **)*((_QWORD *)a3 + 20);
        if (!*v20)
          v20 = v13;
        *((_QWORD *)a3 + 21) = v20;
      }
    }
    else if ((*(unsigned int (**)(JSC::FunctionParameters *))(*(_QWORD *)a2 + 48))(a2))
    {
      v21 = (WTF::AtomStringImpl ***)*((_QWORD *)a2 + 4);
      if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v21)[14])(v21))
        JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v21[4], (uint64_t *)a3);
    }
  }
}

void JSC::ASTBuilder::tryInferNameInPattern(JSC::ASTBuilder *this, JSC::DestructuringPatternNode *a2, JSC::ExpressionNode *a3)
{
  WTF::AtomStringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl **v12;
  WTF::AtomStringImpl ***v13;

  if (a2)
  {
    if ((*(unsigned int (**)(JSC::ASTBuilder *, JSC::DestructuringPatternNode *, JSC::ExpressionNode *))(*(_QWORD *)this + 40))(this, a2, a3))
    {
      v5 = (WTF::AtomStringImpl **)*((_QWORD *)this + 4);
      if ((*(unsigned int (**)(JSC::DestructuringPatternNode *))(*(_QWORD *)a2 + 152))(a2))
      {
        JSC::FunctionMetadataNode::setEcmaName(*((_QWORD *)a2 + 4), *v5, v6, v7, v8, v9, v10, v11);
      }
      else if ((*(unsigned int (**)(JSC::DestructuringPatternNode *))(*(_QWORD *)a2 + 176))(a2))
      {
        v12 = (WTF::AtomStringImpl **)*((_QWORD *)a2 + 20);
        if (!*v12)
          v12 = v5;
        *((_QWORD *)a2 + 21) = v12;
      }
    }
    else if ((*(unsigned int (**)(JSC::ASTBuilder *))(*(_QWORD *)this + 48))(this))
    {
      v13 = (WTF::AtomStringImpl ***)*((_QWORD *)this + 4);
      if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v13)[14])(v13))
        JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v13[4], (uint64_t *)a2);
    }
  }
}

uint64_t WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 4)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 3;
    goto LABEL_13;
  }
  if (!(v9 >> 28))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 16 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 4)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 16 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(WTF::AtomStringImpl **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl **v10;

  if ((*(unsigned int (**)(uint64_t *))(*a2 + 152))(a2))
  {
    JSC::FunctionMetadataNode::setEcmaName(a2[4], *a1, v4, v5, v6, v7, v8, v9);
  }
  else if ((*(unsigned int (**)(uint64_t *))(*a2 + 176))(a2))
  {
    v10 = (WTF::AtomStringImpl **)a2[20];
    if (!*v10)
      v10 = a1;
    a2[21] = (uint64_t)v10;
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the reserved word '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

const char *JSC::stringForFunctionMode()
{
  const char *result;

  result = "getter";
  switch("getter")
  {
    case 0u:
      result = "function";
      break;
    case 1u:
    case 2u:
      result = "generator function";
      break;
    case 3u:
      return result;
    case 4u:
      result = "setter";
      break;
    case 5u:
      result = "method";
      break;
    case 6u:
      result = "arrow function";
      break;
    case 7u:
    case 9u:
      result = "async function";
      break;
    case 8u:
    case 0xBu:
      result = "async arrow function";
      break;
    case 0xAu:
      result = "async method";
      break;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0x13u:
    case 0x14u:
      __break(0xC471u);
      JUMPOUT(0x197E64948);
    case 0xFu:
    case 0x10u:
      result = "async generator function";
      break;
    case 0x11u:
      result = "async generator method";
      break;
    case 0x12u:
      result = "generator method";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197E64968);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the reserved word '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the keyword '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(uint64_t a1, const char **a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot use 'let' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(uint64_t a1, const char *a2, const char **a3, const char **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  WTF *v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v30 = off_1E3572250;
    v31 = (WTF *)v33;
    v32 = xmmword_199122F80;
    v33[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", " name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", *a4);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", ".");
    v30[5]((WTF::StringPrintStream *)&v30);
    WTF::String::fromUTF8WithLatin1Fallback(v31, v32, &v29);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v29, v7, v8, v9, v10, v11, v12);
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v31 != (WTF *)v33)
      WTF::fastFree((unint64_t)v31, v13, v14, v15, v16, v17, v18, v19);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(uint64_t a1, int a2, const char *a3)
{
  void (**v5)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v5 = off_1E3572250;
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
      v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
      WTF::PrintStream::printf(v6, "%s", ". ");
      v31[5]((WTF::StringPrintStream *)&v31);
      v5 = v31;
    }
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v5[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse parameters for this ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(uint64_t a1, JSC::ParserArena **a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl **a5, _BYTE *a6, unint64_t a7, uint64_t a8)
{
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  const char *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  JSC::ParserArena *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL isAllowedIdentifierLet;
  WTF::AtomStringImpl *v56;
  __int128 v57;
  __int128 v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::ASTBuilder *v84;
  JSC::DestructuringPatternNode *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  JSC::ParserArena *v109;
  const char *v110;
  _QWORD *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  const char *v145;
  const char *v146;
  const char **v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  int v159;
  int v160;
  int v161;
  _DWORD *v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  _QWORD *v178;
  uint64_t v179;
  WTF::PrintStream **v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unint64_t *v217;
  const WTF::StringImpl *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  int v231;
  unsigned int v232;
  const char *v233;
  _BYTE *v234;
  uint64_t v235;
  uint64_t NumericIdentifier;
  const char *v237;
  const char *v238;
  _OWORD v239[4];
  uint64_t v240;
  const char *v241;
  int v242;

  if ((unint64_t)&v226 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v142 = a1 + 7344;
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
    v22 = 0;
    *(_BYTE *)(v142 + 8) = 1;
    return v22;
  }
  ++*(_DWORD *)(a1 + 7296);
  v14 = *(_DWORD *)(a1 + 7300);
  v15 = (int *)(a1 + 7368);
  v16 = *(_DWORD *)(a1 + 7368);
  if (v16 == 12)
  {
LABEL_3:
    v17 = *(_DWORD *)(a1 + 7300);
    v22 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, *(WTF::AtomStringImpl **)(a1 + 7376), a1 + 7368, a7, a5);
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197E66288);
    }
    v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v28, v18, v19, v20, v21);
    v14 = v17;
    goto LABEL_5;
  }
  if (v16 > 544)
  {
    if (v16 == 545)
    {
LABEL_9:
      v30 = *(_DWORD *)(a1 + 12);
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x197E662C4);
      }
      v31 = v30 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v31 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v31 + 11) & 2) == 0)
      {
LABEL_138:
        if (v16 != 1048592)
          goto LABEL_3;
        goto LABEL_139;
      }
      if (v16 == 1048592)
      {
        v36 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v37 = **(_QWORD **)(a1 + 7376);
        goto LABEL_199;
      }
LABEL_200:
      if ((_DWORD)a3 == 5)
      {
        v22 = 0;
        goto LABEL_5;
      }
      v186 = *(_DWORD *)(a1 + 12);
      if (!v186)
      {
        __break(0xC471u);
        JUMPOUT(0x197E665E4);
      }
      v187 = v186 - 1;
      if (v16 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v187 + 9) & 1) != 0)
      {
        v33 = v14;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v239[0] = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v239[0] + 1) = v188;
          v241 = (const char *)JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)v239, &v241);
        }
        goto LABEL_207;
      }
      if ((v16 - 531) <= 1)
      {
        v33 = v14;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v239[0] = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v239[0] + 1) = v189;
          v241 = (const char *)JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)v239, &v241);
        }
        goto LABEL_207;
      }
      if ((v16 & 0x200) != 0)
      {
        v33 = v14;
        if ((v16 - 544) >= 3)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v239[0] = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            *((_QWORD *)&v239[0] + 1) = v190;
            v241 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)v239, &v241);
          }
          goto LABEL_207;
        }
        if (v16 == 544)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v187 + 9) & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v239[0] = JSC::destructuringKindToVariableKindName(a3);
              v241 = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, (const char **)v239, &v241);
            }
            goto LABEL_207;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v187 + 9) & 1) != 0
               || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v187 + 11) & 2) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_207;
          *(_QWORD *)&v239[0] = JSC::destructuringKindToVariableKindName(a3);
          v241 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
          v34 = "Cannot use 'yield' as a ";
          goto LABEL_18;
        }
      }
      else if ((_DWORD)a3 != 4 && v16 == 13)
      {
        v33 = v14;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v239[0] = JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*>(a1, "Cannot use a private name as a ", (const char **)v239);
        }
        goto LABEL_207;
      }
      v191 = v14;
      if (v16 == 20 || (v16 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a parameter pattern or a ')' in parameter list");
      }
      v22 = 0;
      v14 = v191;
      goto LABEL_5;
    }
    if (v16 == 546)
    {
LABEL_12:
      if (*(_BYTE *)(a1 + 7344))
      {
        v32 = *(_DWORD *)(a1 + 12);
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x197E662A4);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v32 - 1) + 10) & 0x102000) == 0
          && *(_DWORD *)(a1 + 7480) != 1)
        {
          goto LABEL_3;
        }
      }
      v33 = *(_DWORD *)(a1 + 7300);
      if (*(_QWORD *)(a1 + 7360))
      {
LABEL_207:
        v22 = 0;
        v14 = v33;
        goto LABEL_5;
      }
      *(_QWORD *)&v239[0] = JSC::destructuringKindToVariableKindName(a3);
      v241 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
      v34 = "Cannot use 'await' as a ";
LABEL_18:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v34, (const char **)v239, &v241);
      goto LABEL_207;
    }
    if (v16 != 1048592)
      goto LABEL_200;
    v36 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v37 = **(_QWORD **)(a1 + 7376);
    if (v37 != v36[41])
    {
LABEL_27:
      if (v37 != v36[62])
      {
LABEL_199:
        if (v37 == v36[16])
        {
LABEL_139:
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_3;
          goto LABEL_12;
        }
        goto LABEL_200;
      }
      goto LABEL_9;
    }
LABEL_20:
    v35 = *(_DWORD *)(a1 + 12);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x197E66574);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v35 - 1) + 9) & 1) == 0)
    {
      v181 = *(_DWORD *)(a1 + 7300);
      if (v16 == 544)
      {
        if ((a3 - 1) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
          v22 = 0;
          v14 = v181;
          goto LABEL_5;
        }
        goto LABEL_3;
      }
      goto LABEL_138;
    }
    if (v16 != 1048592)
      goto LABEL_200;
    v36 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v37 = **(_QWORD **)(a1 + 7376);
    goto LABEL_27;
  }
  if (v16 == 544)
    goto LABEL_20;
  v38 = a8;
  v231 = *(_DWORD *)(a1 + 7300);
  v234 = a6;
  if (v16)
  {
    if (v16 == 4)
    {
      *(_QWORD *)&v239[0] = *(_QWORD *)(a1 + 7416);
      DWORD2(v239[0]) = *(_DWORD *)(a1 + 7424);
      v109 = a2[1];
      v22 = *(_QWORD *)v109;
      if (*((_QWORD *)v109 + 1) - *(_QWORD *)v109 <= 0x47uLL)
      {
        JSC::ParserArena::allocateFreeablePool(a2[1]);
        v22 = *(_QWORD *)v109;
      }
      *(_QWORD *)v109 = v22 + 72;
      if (v22)
        v110 = (const char *)(v22 + 8);
      else
        v110 = 0;
      v241 = v110;
      v111 = (_QWORD *)((char *)v109 + 40);
      v112 = *((unsigned int *)v109 + 13);
      if ((_DWORD)v112 == *((_DWORD *)v109 + 12))
      {
        v157 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v112 + 1, (unint64_t)&v241);
        v112 = *((unsigned int *)v109 + 13);
        *(_QWORD *)(*((_QWORD *)v109 + 5) + 8 * v112) = *v157;
      }
      else
      {
        *(_QWORD *)(*v111 + 8 * v112) = v110;
      }
      *((_DWORD *)v109 + 13) = v112 + 1;
      *(_QWORD *)&v113 = -1;
      *((_QWORD *)&v113 + 1) = -1;
      *(_OWORD *)(v22 + 16) = v113;
      *(_DWORD *)(v22 + 48) = -1;
      *(_OWORD *)(v22 + 32) = v113;
      *(_QWORD *)v22 = &off_1E358B660;
      *(_QWORD *)(v22 + 8) = &unk_1E358B6C0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      v114 = *(_DWORD *)(a1 + 7400);
      v115 = *(_DWORD *)(a1 + 7412);
      v116 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v114;
      *(_DWORD *)(a1 + 7448) = v115;
      *(_DWORD *)(a1 + 7452) = v116;
      v117 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v117 + 4) = v114;
      v118 = *(_DWORD *)(a1 + 12);
      if (!v118)
      {
        __break(0xC471u);
        JUMPOUT(0x197E665ECLL);
      }
      v235 = a1 + 7444;
      NumericIdentifier = v22 + 16;
      v119 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v118 - 1) + 9) & 1;
      *(_BYTE *)(v117 + 56) = 0;
      v120 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v117, a1 + 7368, 0, v119, (uint64_t)a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v120;
      if (v234)
        *v234 = 1;
      v125 = (v38 + 1);
      v233 = "Expected either a closing ']' or a ',' following an element destructuring pattern";
      while (1)
      {
        if (v120 == 6)
        {
          JSC::ArrayPatternNode::appendIndex(v22, 0, 0);
          v158 = *(_DWORD *)(a1 + 7400);
          v159 = *(_DWORD *)(a1 + 7412);
          v160 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v158;
          *(_DWORD *)(a1 + 7448) = v159;
          *(_DWORD *)(a1 + 7452) = v160;
          v139 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v139 + 4) = v158;
          v140 = *(_DWORD *)(a1 + 12);
          if (!v140)
          {
            __break(0xC471u);
            JUMPOUT(0x197E65E50);
          }
        }
        else
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_295;
          if (v120 == 5)
            goto LABEL_151;
          if (v120 == 37)
          {
            v164 = *(_DWORD *)(a1 + 7400);
            v165 = *(_DWORD *)(a1 + 7412);
            v166 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v164;
            *(_DWORD *)(a1 + 7448) = v165;
            *(_DWORD *)(a1 + 7452) = v166;
            v167 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v167 + 4) = v164;
            v168 = *(_DWORD *)(a1 + 12);
            if (!v168)
            {
              __break(0xC471u);
              JUMPOUT(0x197E66604);
            }
            v169 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v168 - 1) + 9) & 1;
            *(_BYTE *)(v167 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v167, a1 + 7368, 0, v169, v121, v122, v123, v124);
            v170 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (uint64_t)a5, (uint64_t)v234, a7, v125);
            if ((_DWORD)a3 == 5 && !v170)
              goto LABEL_295;
            if (!v170)
            {
LABEL_157:
              if (*v15 != 20 && (*v15 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
                goto LABEL_295;
              }
              goto LABEL_294;
            }
            JSC::ArrayPatternNode::appendIndex(v22, 2, v170);
            v135 = *v15;
            v233 = "Expected a closing ']' following a rest element destructuring pattern";
LABEL_150:
            if (v135 == 5)
            {
LABEL_151:
              v171 = *(_DWORD *)(a1 + 7400);
              v172 = *(_DWORD *)(a1 + 7412);
              v173 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v171;
              *(_DWORD *)(a1 + 7448) = v172;
              *(_DWORD *)(a1 + 7452) = v173;
              v174 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v174 + 4) = v171;
              v175 = *(_DWORD *)(a1 + 12);
              if (!v175)
              {
                __break(0xC471u);
                JUMPOUT(0x197E665F4);
              }
              v176 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v175 - 1) + 9) & 1;
              *(_BYTE *)(v174 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v174, a1 + 7368, 0, v176, v121, v122, v123, v124);
              v177 = DWORD2(v239[0]);
              v178 = (_QWORD *)NumericIdentifier;
              *(_DWORD *)(NumericIdentifier + 8) = DWORD2(v239[0]);
              v179 = *(_QWORD *)&v239[0];
              *v178 = *(_QWORD *)&v239[0];
              *(_DWORD *)(v22 + 36) = v177;
              *(_QWORD *)(v22 + 28) = v179;
              v107 = v235;
              goto LABEL_76;
            }
            if (v135 == 20 || (v135 & 0x100000) != 0)
              goto LABEL_294;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_295;
            v241 = v233;
            v147 = &v241;
LABEL_115:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 1, v147);
            goto LABEL_295;
          }
          v126 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (uint64_t)a5, (uint64_t)v234, a7, v125);
          v133 = (_QWORD *)v126;
          if ((_DWORD)a3 == 5 && !v126)
            goto LABEL_295;
          if (!v126)
            goto LABEL_157;
          JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v127, v128, v129, v130, v131, v132);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_295;
          JSC::ASTBuilder::appendArrayPatternEntry(v22, v133, v134);
          v135 = *v15;
          if (*v15 != 6)
            goto LABEL_150;
          v136 = *(_DWORD *)(a1 + 7400);
          v137 = *(_DWORD *)(a1 + 7412);
          v138 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v136;
          *(_DWORD *)(a1 + 7448) = v137;
          *(_DWORD *)(a1 + 7452) = v138;
          v139 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v139 + 4) = v136;
          v140 = *(_DWORD *)(a1 + 12);
          if (!v140)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6657CLL);
          }
        }
        v141 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v140 - 1) + 9) & 1;
        *(_BYTE *)(v139 + 56) = 0;
        v120 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v139, a1 + 7368, 0, v141, v121, v122, v123, v124);
        *(_DWORD *)(a1 + 7368) = v120;
      }
    }
    goto LABEL_200;
  }
  v230 = (_BYTE *)(a1 + 7344);
  v241 = *(const char **)(a1 + 7416);
  v242 = *(_DWORD *)(a1 + 7424);
  v39 = a2[1];
  v22 = *(_QWORD *)v39;
  if (*((_QWORD *)v39 + 1) - *(_QWORD *)v39 <= 0x47uLL)
  {
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v22 = *(_QWORD *)v39;
  }
  *(_QWORD *)v39 = v22 + 72;
  v40 = v22 + 8;
  if (!v22)
    v40 = 0;
  *(_QWORD *)&v239[0] = v40;
  v41 = *((unsigned int *)v39 + 13);
  if ((_DWORD)v41 == *((_DWORD *)v39 + 12))
  {
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>((uint64_t)v39 + 40, (unint64_t)v239);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v39 + 5) + 8 * v41) = v40;
    *((_DWORD *)v39 + 13) = v41 + 1;
  }
  *(_QWORD *)&v42 = -1;
  *((_QWORD *)&v42 + 1) = -1;
  *(_OWORD *)(v22 + 16) = v42;
  v229 = v22 + 16;
  *(_DWORD *)(v22 + 48) = -1;
  *(_OWORD *)(v22 + 32) = v42;
  *(_QWORD *)v22 = &off_1E358B6E0;
  *(_QWORD *)(v22 + 8) = &unk_1E358B740;
  *(_WORD *)(v22 + 52) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 64) = 0;
  v43 = *(_DWORD *)(a1 + 7400);
  v44 = *(_DWORD *)(a1 + 7412);
  v45 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v43;
  *(_DWORD *)(a1 + 7448) = v44;
  *(_DWORD *)(a1 + 7452) = v45;
  v46 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v46 + 4) = v43;
  v47 = *(_DWORD *)(a1 + 12);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x197E66584);
  }
  v228 = a1 + 7444;
  v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 9) & 1;
  *(_BYTE *)(v46 + 56) = 0;
  v49 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v46, a1 + 7368, 0, v48, (uint64_t)a5, (uint64_t)a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v49;
  if (v234)
    *v234 = 1;
  v232 = a3 - 3;
  LODWORD(v233) = v38 + 1;
  while (2)
  {
    if (v49 == 37)
    {
      v148 = *(_DWORD *)(a1 + 7400);
      v149 = *(_DWORD *)(a1 + 7412);
      v150 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v148;
      *(_DWORD *)(a1 + 7448) = v149;
      *(_DWORD *)(a1 + 7452) = v150;
      v151 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v151 + 4) = v148;
      v152 = *(_DWORD *)(a1 + 12);
      if (!v152)
      {
        __break(0xC471u);
        JUMPOUT(0x197E665FCLL);
      }
      v153 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v152 - 1) + 9) & 1;
      *(_BYTE *)(v151 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v151, a1 + 7368, 0, v153, v50, v51, v52, v53);
      v156 = JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, a5, a7, v154, v155);
      if (*(_QWORD *)(a1 + 7360) || !v156)
        goto LABEL_295;
      JSC::ASTBuilder::appendObjectPatternRestEntry(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), v22, v156);
      v97 = 1;
      *(_BYTE *)(v22 + 52) = 1;
LABEL_120:
      v86 = *v15;
LABEL_72:
      if ((_DWORD)a3 == 5)
      {
        if (v86 != 1)
          goto LABEL_295;
      }
      else if (v86 != 1)
      {
        if (v86 == 20 || (v86 & 0x100000) != 0)
          goto LABEL_294;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_295;
        if (v97)
          v146 = "Expected a closing '}' following a rest element destructuring pattern";
        else
          v146 = "Expected either a closing '}' or an ',' after a property destructuring pattern";
        *(_QWORD *)&v239[0] = v146;
        v147 = (const char **)v239;
        goto LABEL_115;
      }
      v98 = *(_DWORD *)(a1 + 7400);
      v99 = *(_DWORD *)(a1 + 7412);
      v100 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v98;
      *(_DWORD *)(a1 + 7448) = v99;
      *(_DWORD *)(a1 + 7452) = v100;
      v101 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v101 + 4) = v98;
      v102 = *(_DWORD *)(a1 + 12);
      if (!v102)
      {
        __break(0xC471u);
        JUMPOUT(0x197E665DCLL);
      }
      v103 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v102 - 1) + 9) & 1;
      *(_BYTE *)(v101 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v101, a1 + 7368, 0, v103, v50, v51, v52, v53);
      v104 = v242;
      v105 = (_QWORD *)v229;
      *(_DWORD *)(v229 + 8) = v242;
      v106 = v241;
      *v105 = v241;
      *(_DWORD *)(v22 + 36) = v104;
      *(_QWORD *)(v22 + 28) = v106;
      v107 = v228;
LABEL_76:
      v108 = *(_QWORD *)v107;
      *(_DWORD *)(v22 + 48) = *(_DWORD *)(v107 + 8);
      *(_QWORD *)(v22 + 40) = v108;
      goto LABEL_77;
    }
    if (v49 == 1)
    {
      v97 = 0;
      goto LABEL_120;
    }
    v54 = v49;
    LODWORD(v235) = v49;
    if (v49 == 12
      || (v54 = v49, v49 == 1048592)
      || (isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v49, *(_QWORD **)(a1 + 7376)), v54 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierLet))
    {
      if (v232 >= 0xFFFFFFFE && v54 == 544)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
        goto LABEL_295;
      }
      goto LABEL_49;
    }
    if (v54 == 546)
      goto LABEL_49;
    if (v54 > 1048591)
    {
      if (v54 == 1048592)
      {
        v182 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v183 = **(_QWORD **)(a1 + 7376);
        if (v183 != *(_QWORD *)(v182 + 496))
          goto LABEL_183;
LABEL_179:
        v184 = *(_DWORD *)(a1 + 12);
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6658CLL);
        }
        v185 = v184 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v185 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v185 + 11) & 2) == 0)
        {
          goto LABEL_49;
        }
        if (v54 == 1048592)
        {
          v182 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          v183 = **(_QWORD **)(a1 + 7376);
LABEL_183:
          if (v183 != *(_QWORD *)(v182 + 128))
            goto LABEL_184;
LABEL_49:
          v56 = *(WTF::AtomStringImpl **)(a1 + 7376);
          v57 = *(_OWORD *)(a1 + 7416);
          v239[2] = *(_OWORD *)(a1 + 7400);
          v239[3] = v57;
          v240 = *(_QWORD *)(a1 + 7432);
          v58 = *(_OWORD *)(a1 + 7384);
          v239[0] = *(_OWORD *)v15;
          v239[1] = v58;
          v59 = *(_DWORD *)(a1 + 7400);
          v60 = *(_DWORD *)(a1 + 7412);
          v61 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v59;
          *(_DWORD *)(a1 + 7448) = v60;
          *(_DWORD *)(a1 + 7452) = v61;
          v62 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v62 + 4) = v59;
          v63 = *(_DWORD *)(a1 + 12);
          if (!v63)
          {
            __break(0xC471u);
            JUMPOUT(0x197E662ACLL);
          }
          v64 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v63 - 1) + 9) & 1;
          *(_BYTE *)(v62 + 56) = 0;
          v65 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v62, a1 + 7368, 0, v64, v50, v51, v52, v53);
          *(_DWORD *)(a1 + 7368) = v65;
          NumericIdentifier = (uint64_t)v56;
          if (v65 == 18)
          {
            v70 = *(_DWORD *)(a1 + 7400);
            v71 = *(_DWORD *)(a1 + 7412);
            v72 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v70;
            *(_DWORD *)(a1 + 7448) = v71;
            *(_DWORD *)(a1 + 7452) = v72;
            v73 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v73 + 4) = v70;
            v74 = *(_DWORD *)(a1 + 12);
            if (!v74)
            {
              __break(0xC471u);
              JUMPOUT(0x197E662BCLL);
            }
            v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
            *(_BYTE *)(v73 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v73, a1 + 7368, 0, v75, v66, v67, v68, v69);
            v76 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (uint64_t)a5, (uint64_t)v234, a7, v233);
          }
          else
          {
            if ((_DWORD)v235 == 1048592)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_295;
              v238 = *(const char **)v56;
              v180 = (WTF::PrintStream **)&v238;
              goto LABEL_165;
            }
            if (LODWORD(v239[0]) == 546
              || LODWORD(v239[0]) == 1048592
              && **((_QWORD **)&v239[0] + 1) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            {
              if (!*v230)
                goto LABEL_322;
              v93 = *(_DWORD *)(a1 + 12);
              if (!v93)
              {
                __break(0xC471u);
                JUMPOUT(0x197E66594);
              }
              if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v93 - 1) + 10) & 0x102000) != 0
                || *(_DWORD *)(a1 + 7480) == 1)
              {
LABEL_322:
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v238 = (const char *)JSC::destructuringKindToVariableKindName(a3);
                  v237 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", &v238, &v237);
                }
                goto LABEL_295;
              }
            }
            if ((_DWORD)a3 == 5)
            {
              v143 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              v144 = *(const char **)(v143 + 1248);
              v145 = *(const char **)v56;
              if (v144 == *(const char **)v56 || *(const char **)(v143 + 880) == v145)
              {
                v161 = *(_DWORD *)(a1 + 12);
                if (!v161)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6659CLL);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v161 - 1) + 9) & 1) != 0)
                {
                  v162 = *(_DWORD **)(a1 + 7496);
                  if (v162 && *v162 == 1)
                    *v162 = 0;
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    v238 = v145;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v238);
                  }
                  goto LABEL_295;
                }
              }
              if (v65 == 21)
              {
                v163 = *(_DWORD *)(a1 + 12);
                if (!v163)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E665A4);
                }
                JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v163 - 1), (uint64_t)v145, v144 == v145);
              }
              v94 = a1;
              v95 = (uint64_t)a2;
              v96 = 5;
            }
            else
            {
              v94 = a1;
              v95 = (uint64_t)a2;
              v96 = a3;
            }
            v76 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::ASTBuilder>(v94, v95, v96, a4, v56, (uint64_t)v239, a7, a5);
          }
          LODWORD(v235) = 0;
          v83 = 0;
          goto LABEL_54;
        }
      }
LABEL_265:
      if ((v54 & 0x200) == 0)
      {
LABEL_184:
        if ((_DWORD)a3 == 5)
          goto LABEL_295;
        if (v54 == 20 || (v54 & 0x100000) != 0)
          goto LABEL_294;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a property name");
        goto LABEL_295;
      }
LABEL_266:
      LODWORD(v235) = 0;
      v227 = 0;
      NumericIdentifier = *(_QWORD *)(a1 + 7376);
      goto LABEL_267;
    }
    if (v54 == 545)
      goto LABEL_179;
    switch(v54)
    {
      case 4:
        v192 = *(_DWORD *)(a1 + 12);
        v193 = *(_DWORD *)(a1 + 7400);
        v194 = *(_DWORD *)(a1 + 7412);
        v195 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v193;
        *(_DWORD *)(a1 + 7448) = v194;
        *(_DWORD *)(a1 + 7452) = v195;
        v196 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v196 + 4) = v193;
        if (!v192)
        {
          __break(0xC471u);
          JUMPOUT(0x197E666B4);
        }
        v197 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v192 - 1) + 9) & 1;
        *(_BYTE *)(v196 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v196, a1 + 7368, 0, v197, v50, v51, v52, v53);
        v198 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
        v199 = *(_DWORD *)(a1 + 7368);
        v227 = v198;
        if (!v198)
        {
          if (v199 != 20 && (v199 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
            goto LABEL_295;
          }
LABEL_294:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_295;
        }
        if (v199 != 5)
        {
          if (v199 != 20 && (v199 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected ']' to end end a computed property name");
            goto LABEL_295;
          }
          goto LABEL_294;
        }
        LODWORD(v235) = 0;
        NumericIdentifier = 0;
        goto LABEL_267;
      case 5:
      case 6:
      case 7:
      case 8:
      case 12:
      case 13:
        goto LABEL_265;
      case 9:
      case 10:
        v217 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        NumericIdentifier = JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v217, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v218, v219, v220, v221, v222, v223);
        goto LABEL_289;
      case 11:
        v224 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v224, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), v230[40]);
        NumericIdentifier = v225;
        if (v225)
        {
LABEL_289:
          LODWORD(v235) = 0;
          v227 = 0;
LABEL_267:
          v200 = *(_DWORD *)(a1 + 7400);
          v201 = *(_DWORD *)(a1 + 7412);
          v202 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v200;
          *(_DWORD *)(a1 + 7448) = v201;
          *(_DWORD *)(a1 + 7452) = v202;
          v203 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v203 + 4) = v200;
          v204 = *(_DWORD *)(a1 + 12);
          if (!v204)
          {
            __break(0xC471u);
            JUMPOUT(0x197E66804);
          }
          v205 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v204 - 1) + 9) & 1;
          *(_BYTE *)(v203 + 56) = 0;
          v206 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v203, a1 + 7368, 0, v205, v50, v51, v52, v53);
          *(_DWORD *)(a1 + 7368) = v206;
          if (v206 != 18)
          {
            if ((_DWORD)a3 == 5)
              goto LABEL_295;
            if (v54 == 531)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v239[0] = *(_QWORD *)NumericIdentifier;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)v239);
              }
              goto LABEL_295;
            }
            if (v54 == 532)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v239[0] = *(_QWORD *)NumericIdentifier;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v239);
              }
              goto LABEL_295;
            }
            if ((v54 & 0x200) == 0)
            {
              if (v206 != 20 && (v206 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' prior to a named destructuring property");
                goto LABEL_295;
              }
              goto LABEL_294;
            }
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_295;
            *(_QWORD *)&v239[0] = *(_QWORD *)NumericIdentifier;
            v180 = (WTF::PrintStream **)v239;
LABEL_165:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[58],WTF::UniquedStringImpl *,char const(&)[2]>(a1, v180);
            goto LABEL_295;
          }
          v211 = *(_DWORD *)(a1 + 7400);
          v212 = *(_DWORD *)(a1 + 7412);
          v213 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v211;
          *(_DWORD *)(a1 + 7448) = v212;
          *(_DWORD *)(a1 + 7452) = v213;
          v214 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v214 + 4) = v211;
          v215 = *(_DWORD *)(a1 + 12);
          if (!v215)
          {
            __break(0xC471u);
            JUMPOUT(0x197E66854);
          }
          v216 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v215 - 1) + 9) & 1;
          *(_BYTE *)(v214 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v214, a1 + 7368, 0, v216, v207, v208, v209, v210);
          v76 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (uint64_t)a5, (uint64_t)v234, a7, v233);
          v83 = v227;
LABEL_54:
          v84 = (JSC::ASTBuilder *)v76;
          if ((_DWORD)a3 == 5)
          {
            if (!v76)
              goto LABEL_295;
          }
          else if (!v76)
          {
            goto LABEL_157;
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v77, v78, v79, v80, v81, v82);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_295;
          if (v83)
          {
            JSC::ASTBuilder::appendObjectPatternEntry(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), v22, v83, v84, v85);
            *(_BYTE *)(v22 + 53) = 1;
          }
          else
          {
            JSC::ASTBuilder::appendObjectPatternEntry(v22, v235, NumericIdentifier, v84, (uint64_t *)v85);
          }
          v86 = *v15;
          if (*v15 != 6)
          {
            v97 = 0;
            goto LABEL_72;
          }
          v87 = *(_DWORD *)(a1 + 7400);
          v88 = *(_DWORD *)(a1 + 7412);
          v89 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v87;
          *(_DWORD *)(a1 + 7448) = v88;
          *(_DWORD *)(a1 + 7452) = v89;
          v90 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v90 + 4) = v87;
          v91 = *(_DWORD *)(a1 + 12);
          if (!v91)
          {
            __break(0xC471u);
            JUMPOUT(0x197E662B4);
          }
          v92 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v91 - 1) + 9) & 1;
          *(_BYTE *)(v90 + 56) = 0;
          v49 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v90, a1 + 7368, 0, v92, v50, v51, v52, v53);
          *(_DWORD *)(a1 + 7368) = v49;
          continue;
        }
        if (*v15 == 20 || (*v15 & 0x100000) != 0)
          goto LABEL_294;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
LABEL_295:
        v22 = 0;
LABEL_77:
        v14 = v231;
LABEL_5:
        *(_DWORD *)(a1 + 7300) = v14;
        return v22;
      case 14:
        v227 = 0;
        NumericIdentifier = *(_QWORD *)(a1 + 7376);
        LODWORD(v235) = 1;
        goto LABEL_267;
      default:
        if ((v54 - 531) >= 2)
          goto LABEL_265;
        goto LABEL_266;
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*,char const(&)[18]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected an opening '(' before a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", "'s parameter list");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 7368) == 21)
  {
    v9 = *(_DWORD *)(a1 + 7400);
    v10 = *(_DWORD *)(a1 + 7412);
    v11 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v9;
    *(_DWORD *)(a1 + 7448) = v10;
    *(_DWORD *)(a1 + 7452) = v11;
    v12 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v12 + 4) = v9;
    v13 = *(_DWORD *)(a1 + 12);
    if (v13)
    {
      v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
      *(_BYTE *)(v12 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
      v22 = 0;
      v23 = *(_QWORD *)(a1 + 7496);
      v24 = a1;
      *(_QWORD *)(a1 + 7496) = &v22;
      JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, (uint64_t)&v22, v16, v17, v18, v19, v20, v21);
      *(_QWORD *)(v24 + 7496) = v23;
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Duplicate parameter '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' not allowed in function with non-simple parameter list");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Duplicate parameter '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Duplicate parameter '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' not allowed in function with a rest parameter");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Duplicate parameter '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' not allowed in an arrow function");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Duplicate parameter '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' not allowed in a method");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "Stack exhausted");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentElement<JSC::ASTBuilder>(a1, a2, a4, a5, a6, a7, a8, a8);
  else
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::ASTBuilder::appendArrayPatternEntry(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::AtomStringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl **v19;
  WTF::AtomStringImpl ***v20;
  __int128 v21;
  uint64_t *v22;

  v6 = (_QWORD *)(a1 + 56);
  LOBYTE(v21) = 1;
  *((_QWORD *)&v21 + 1) = a2;
  v22 = a3;
  v7 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 64))
  {
    v11 = WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v21);
    v8 = *(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
    v9 = *(_OWORD *)v11;
    v10 = *(uint64_t **)(v11 + 16);
  }
  else
  {
    v8 = *v6 + 24 * v7;
    v9 = v21;
    v10 = v22;
  }
  *(_QWORD *)(v8 + 16) = v10;
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 68);
  if (a3)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 40))(a2))
    {
      v12 = (WTF::AtomStringImpl **)a2[4];
      if ((*(unsigned int (**)(uint64_t *))(*a3 + 152))(a3))
      {
        JSC::FunctionMetadataNode::setEcmaName(a3[4], *v12, v13, v14, v15, v16, v17, v18);
      }
      else if ((*(unsigned int (**)(uint64_t *))(*a3 + 176))(a3))
      {
        v19 = (WTF::AtomStringImpl **)a3[20];
        if (!*v19)
          v19 = v12;
        a3[21] = (uint64_t)v19;
      }
    }
    else if ((*(unsigned int (**)(_QWORD *))(*a2 + 48))(a2))
    {
      v20 = (WTF::AtomStringImpl ***)a2[4];
      if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v20)[14])(v20))
        JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v20[4], a3);
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(uint64_t a1, int a2, const char **a3)
{
  void (**v5)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v5 = off_1E3572250;
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
      v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
      WTF::PrintStream::printf(v6, "%s", ". ");
      v31[5]((WTF::StringPrintStream *)&v31);
      v5 = v31;
    }
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v5[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", *a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestBindingOrAssignmentElement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestElement<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6);
}

double JSC::ASTBuilder::appendObjectPatternRestEntry(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v8 = a1;
  LOBYTE(v9) = 0;
  *((_QWORD *)&v9 + 1) = a3;
  *(_QWORD *)&v10 = 0;
  BYTE8(v10) = 1;
  v3 = *(_DWORD *)(a2 + 68);
  if (v3 == *(_DWORD *)(a2 + 64))
  {
    *(_QWORD *)&v5 = WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPatternNode::Entry>(a2 + 56, (unint64_t)&v8).n128_u64[0];
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)(a2 + 56) + 48 * v3);
    v5 = v8;
    v6 = v10;
    v4[1] = v9;
    v4[2] = v6;
    *v4 = v5;
    ++*(_DWORD *)(a2 + 68);
  }
  return *(double *)&v5;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot use 'let' as an identifier name for a LexicalDeclaration");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[58],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, WTF::PrintStream **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  WTF *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v35 = off_1E3572250;
    v36 = (WTF *)v38;
    v37 = xmmword_199122F80;
    v38[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v35, "%s", "Cannot use abbreviated destructuring syntax for keyword '");
    WTF::PrintStream::printImpl<WTF::UniquedStringImpl *,char [2],char [2]>((WTF *)&v35, *a2, v4, v5, v6, v7, v8, v9, v10, v11);
    v35[5]((WTF::StringPrintStream *)&v35);
    WTF::String::fromUTF8WithLatin1Fallback(v36, v37, &v34);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v34, v12, v13, v14, v15, v16, v17);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v36 != (WTF *)v38)
      WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(uint64_t a1, const char *a2, const char **a3, const char **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  WTF *v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v30 = off_1E3572250;
    v31 = (WTF *)v33;
    v32 = xmmword_199122F80;
    v33[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", *a4);
    WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%s", ".");
    v30[5]((WTF::StringPrintStream *)&v30);
    WTF::String::fromUTF8WithLatin1Fallback(v31, v32, &v29);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v29, v7, v8, v9, v10, v11, v12);
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v31 != (WTF *)v33)
      WTF::fastFree((unint64_t)v31, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t JSC::destructuringKindToVariableKindName(unsigned int a1)
{
  uint64_t result;

  if (a1 < 6)
    return (uint64_t)off_1E357B2E8[a1];
  result = 1178;
  __break(0xC471u);
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot modify '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Scope::useVariable(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;

  v3 = *(_DWORD *)(a1 + 10) & 2;
  if (a3)
    v3 = 2;
  *(_DWORD *)(a1 + 10) = v3 | *(_DWORD *)(a1 + 10) & 0xFFFFFFFD;
  v4 = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    return;
  }
  v6 = v4 - 1;
  v7 = *(_QWORD *)(a1 + 168);
  v8 = (unsigned int *)(v7 + 72 * (v4 - 1));
  v9 = (int *)(v8 + 1);
  v10 = v8[1];
  v11 = *v8;
  if (v10 != 8)
  {
LABEL_29:
    if (3 * v10 <= 4 * v11)
    {
      v39 = v7 + 72 * v6;
      v42 = *(_QWORD *)(v39 + 8);
      v40 = (_QWORD *)(v39 + 8);
      v41 = v42;
      v30 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v10)));
      memset(v30, 255, 8 * (2 * v10));
      v50 = v42;
      *v9 = 2 * v10;
      if (v10)
      {
        v51 = 0;
        v52 = 2 * v10 - 1;
        do
        {
          v53 = *(_QWORD *)(v41 + 8 * v51);
          if (v53 != -1)
          {
            v54 = (~(v53 << 32) + v53) ^ ((unint64_t)(~(v53 << 32) + v53) >> 22);
            v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
            v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
            v57 = v52 & ((v56 >> 31) ^ v56);
            v58 = *((_QWORD *)v30 + v57);
            if (v58 != -1 && v58 != v53)
            {
              v60 = 1;
              do
              {
                v57 = ((_DWORD)v57 + v60) & v52;
                v61 = *((_QWORD *)v30 + v57);
                ++v60;
              }
              while (v61 != -1 && v61 != v53);
            }
            *((_QWORD *)v30 + v57) = v53;
          }
          ++v51;
        }
        while (v51 != v10);
      }
      WTF::fastFree(v50, v43, v44, v45, v46, v47, v48, v49);
      v10 = *v9;
      *v40 = v30;
    }
    else
    {
      v30 = *(void **)(v7 + 72 * v6 + 8);
    }
    v31 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = (v10 - 1) & ((v33 >> 31) ^ v33);
    v35 = *((_QWORD *)v30 + v34);
    if (v35 != -1 && v35 != a2)
    {
      v37 = 1;
      do
      {
        v34 = ((_DWORD)v34 + v37) & (v10 - 1);
        v35 = *((_QWORD *)v30 + v34);
        ++v37;
      }
      while (v35 != -1 && v35 != a2);
    }
    if (v35 == a2)
      return;
    *((_QWORD *)v30 + v34) = a2;
    v11 = *v8;
LABEL_11:
    *v8 = v11 + 1;
    return;
  }
  if (!v11)
  {
    v12 = 0;
LABEL_10:
    *(_QWORD *)(v7 + 72 * v6 + 8 * v12 + 8) = a2;
    goto LABEL_11;
  }
  v12 = *v8;
  v13 = (_QWORD *)(v7 + 72 * v6 + 8);
  v14 = v13;
  v15 = v12;
  while (*v14 != a2)
  {
    ++v14;
    if (!--v15)
    {
      if (v11 <= 7)
        goto LABEL_10;
      v16 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
      v17 = 0;
      *(_QWORD *)&v18 = -1;
      *((_QWORD *)&v18 + 1) = -1;
      *v16 = v18;
      v16[1] = v18;
      v16[2] = v18;
      v16[3] = v18;
      v16[4] = v18;
      v16[5] = v18;
      v16[6] = v18;
      v16[7] = v18;
      v16[8] = v18;
      v16[9] = v18;
      v16[10] = v18;
      v16[11] = v18;
      v16[12] = v18;
      v16[13] = v18;
      v16[14] = v18;
      v16[15] = v18;
      v16[16] = v18;
      v16[17] = v18;
      v16[18] = v18;
      v16[19] = v18;
      v16[20] = v18;
      v16[21] = v18;
      v16[22] = v18;
      v16[23] = v18;
      v16[24] = v18;
      v16[25] = v18;
      v16[26] = v18;
      v16[27] = v18;
      v16[28] = v18;
      v16[29] = v18;
      v16[30] = v18;
      v16[31] = v18;
      *v9 = 64;
      do
      {
        v19 = v13[v17];
        if (v19 != -1)
        {
          v20 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v22 ^ (v22 >> 31);
          v24 = v23 & 0x3F;
          v25 = *((_QWORD *)v16 + v24);
          if (v25 != -1 && v25 != v19)
          {
            LOBYTE(v24) = v23 & 0x3F;
            v27 = 1;
            do
            {
              v24 = ((_BYTE)v24 + (_BYTE)v27) & 0x3F;
              v28 = *((_QWORD *)v16 + v24);
              ++v27;
            }
            while (v28 != -1 && v28 != v19);
          }
          *((_QWORD *)v16 + v24) = v19;
        }
        ++v17;
      }
      while (v17 != 8);
      v11 = *v8;
      *v13 = v16;
      v10 = 64;
      goto LABEL_29;
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl *a5, uint64_t a6, uint64_t a7, WTF::AtomStringImpl **a8)
{
  char v8;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;

  v8 = a7;
  v11 = a4;
  if ((_DWORD)a3 != 4)
  {
    if ((a3 - 1) < 3)
    {
      if ((_DWORD)a3 == 2)
        v20 = 2;
      else
        v20 = 1;
      v21 = JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(a1, a5, v20, 2, (uint64_t)a5, a6, a7, (uint64_t)a8);
      if (!v21)
        goto LABEL_3;
      if ((v21 & 1) == 0)
        goto LABEL_13;
      v30 = *(_DWORD *)(a1 + 12);
      if (v30)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v31 = *(WTF::StringImpl **)a5;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot destructure to a variable named '", (uint64_t *)&v31);
          }
          return 0;
        }
LABEL_13:
        if (v21 >= 2)
        {
          v22 = *(_DWORD *)(a1 + 7368);
          if (v22 == 20 || (v22 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            v31 = *(WTF::StringImpl **)a5;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot declare a lexical variable twice: '", (uint64_t *)&v31);
          }
          return 0;
        }
        goto LABEL_3;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197E684FCLL);
    }
    if ((_DWORD)a3)
      goto LABEL_3;
    v23 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a5, a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
    if ((v23 & 1) != 0)
    {
      v29 = *(_DWORD *)(a1 + 12);
      if (!v29)
        goto LABEL_37;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v31 = *(WTF::StringImpl **)a5;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a variable named '", (uint64_t *)&v31);
        }
        return 0;
      }
    }
    if (v23 >= 2)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v31 = *(WTF::StringImpl **)a5;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v31);
      }
      return 0;
    }
    goto LABEL_3;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::declareRestOrNormalParameter(a1, a5, a8, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
LABEL_3:
  if (!v11)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)a5, a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)a5, a5, v24, v25, v26, v27, v28);
      goto LABEL_4;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v31 = *(WTF::StringImpl **)a5;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v31);
    }
    return 0;
  }
LABEL_4:
  v14 = a6 + 48;
  v15 = a6 + 60;
  v16 = *(uint64_t **)(a2 + 8);
  result = *v16;
  if ((unint64_t)(v16[1] - *v16) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v16;
  }
  *v16 = result + 48;
  *(_QWORD *)result = &off_1E358B760;
  v18 = *(_QWORD *)v14;
  *(_DWORD *)(result + 16) = *(_DWORD *)(v14 + 8);
  *(_QWORD *)(result + 8) = v18;
  v19 = *(_QWORD *)v15;
  *(_DWORD *)(result + 28) = *(_DWORD *)(v15 + 8);
  *(_QWORD *)(result + 20) = v19;
  *(_QWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 40) = v8;
  return result;
}

unint64_t *JSC::ParserArena::identifierArena(JSC::ParserArena *this)
{
  unint64_t *v1;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (unint64_t *)*((_QWORD *)this + 2);
  if (!v1)
  {
    v1 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
    v1[1] = 0;
    v1[2] = 0;
    *v1 = 0;
    WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v1, v4, v5, v6, v7, v8, v9, v10);
    bzero(v1 + 3, 0x800uLL);
    v18 = (unint64_t *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v1;
    if (v18)
    {
      WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      return (unint64_t *)*((_QWORD *)this + 2);
    }
  }
  return v1;
}

unint64_t JSC::IdentifierArena::makeNumericIdentifier(JSC::IdentifierArena *this, uint64_t **a2, double a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  int *v25;

  v11 = (int)a3;
  if (fabs(a3) != INFINITY && (double)(int)v11 == a3)
    JSC::Identifier::from(a2, v11, a4, a5, a6, a7, a8, a9, &v25);
  else
    JSC::Identifier::from(a2, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8, a9, (WTF::StringImpl **)&v25);
  v13 = v25;
  v14 = (*(_QWORD *)this)++;
  v15 = v14 >> 6;
  v16 = *((unsigned int *)this + 5);
  if (v14 >> 6 >= v16)
  {
    v22 = (int *)WTF::fastMalloc((WTF *)0x200);
    v25 = v22;
    v23 = *((unsigned int *)this + 5);
    if ((_DWORD)v23 == *((_DWORD *)this + 4))
    {
      v24 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v23 + 1, (unint64_t)&v25);
      v23 = *((unsigned int *)this + 5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v23) = *v24;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v23) = v22;
    }
    v16 = (v23 + 1);
    *((_DWORD *)this + 5) = v16;
    v14 = *(_QWORD *)this - 1;
    v15 = v14 >> 6;
  }
  if (v15 >= v16
    || (v17 = *((_QWORD *)this + 1),
        v18 = *(_QWORD *)(v17 + 8 * v15),
        v19 = v14 & 0x3F,
        *(_QWORD *)(v18 + 8 * v19) = v13,
        v20 = v14 >> 6,
        v20 >= v16))
  {
    __break(0xC471u);
    JUMPOUT(0x197E68690);
  }
  return *(_QWORD *)(v17 + 8 * v20) + 8 * v19;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 7496);
  v4 = a1;
  *(_QWORD *)(a1 + 7496) = &v2;
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>();
  *(_QWORD *)(v4 + 7496) = v3;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, WTF::PrintStream **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  WTF *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v35 = off_1E3572250;
    v36 = (WTF *)v38;
    v37 = xmmword_199122F80;
    v38[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v35, "%s", "Cannot use abbreviated destructuring syntax for reserved name '");
    WTF::PrintStream::printImpl<WTF::UniquedStringImpl *,char [2],char [2]>((WTF *)&v35, *a2, v4, v5, v6, v7, v8, v9, v10, v11);
    v35[5]((WTF::StringPrintStream *)&v35);
    WTF::String::fromUTF8WithLatin1Fallback(v36, v37, &v34);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v34, v12, v13, v14, v15, v16, v17);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v36 != (WTF *)v38)
      WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use abbreviated destructuring syntax for reserved name '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::ASTBuilder::appendObjectPatternEntry(uint64_t a1, uint64_t a2, uint64_t a3, JSC::ASTBuilder *a4, JSC::DestructuringPatternNode *a5)
{
  JSC::ExpressionNode *v7;

  JSC::ObjectPatternNode::appendEntry(a2, a1, a3, (uint64_t)a4, (uint64_t)a5);
  JSC::ASTBuilder::tryInferNameInPattern(a4, a5, v7);
}

void JSC::ASTBuilder::appendObjectPatternEntry(uint64_t a1, char a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  WTF::AtomStringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl **v24;
  WTF::AtomStringImpl ***v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v8 = (_QWORD *)(a1 + 56);
  v26 = a3;
  LOBYTE(v27) = a2;
  *((_QWORD *)&v27 + 1) = a4;
  *(_QWORD *)&v28 = a5;
  BYTE8(v28) = 0;
  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 64))
  {
    v13 = (_OWORD *)WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v26);
    v14 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 48 * *(unsigned int *)(a1 + 68));
    v16 = v13[1];
    v15 = v13[2];
    *v14 = *v13;
    v14[1] = v16;
    v14[2] = v15;
  }
  else
  {
    v10 = (_OWORD *)(*v8 + 48 * v9);
    v11 = v26;
    v12 = v28;
    v10[1] = v27;
    v10[2] = v12;
    *v10 = v11;
  }
  ++*(_DWORD *)(a1 + 68);
  if (a5)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a4 + 40))(a4))
    {
      v17 = (WTF::AtomStringImpl **)a4[4];
      if ((*(unsigned int (**)(uint64_t *))(*a5 + 152))(a5))
      {
        JSC::FunctionMetadataNode::setEcmaName(a5[4], *v17, v18, v19, v20, v21, v22, v23);
      }
      else if ((*(unsigned int (**)(uint64_t *))(*a5 + 176))(a5))
      {
        v24 = (WTF::AtomStringImpl **)a5[20];
        if (!*v24)
          v24 = v17;
        a5[21] = (uint64_t)v24;
      }
    }
    else if ((*(unsigned int (**)(_QWORD *))(*a4 + 48))(a4))
    {
      v25 = (WTF::AtomStringImpl ***)a4[4];
      if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v25)[14])(v25))
        JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v25[4], a5);
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the reserved word '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the reserved word '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Cannot use the keyword '");
    v12 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v37 = (WTF::StringImpl *)v14;
      v38 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringView", &v37);
    if (v38 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(uint64_t a1, const char **a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot use 'let' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*>(uint64_t a1, const char *a2, const char **a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", *a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t JSC::ArrayPatternNode::appendIndex(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  result = a1 + 56;
  LOBYTE(v9) = a2;
  *((_QWORD *)&v9 + 1) = a3;
  v10 = 0;
  v5 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 64))
  {
    result = WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, (unint64_t)&v9);
    v6 = *(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
    v7 = *(_OWORD *)result;
    v8 = *(_QWORD *)(result + 16);
  }
  else
  {
    v6 = *(_QWORD *)result + 24 * v5;
    v7 = v9;
    v8 = v10;
  }
  *(_QWORD *)(v6 + 16) = v8;
  *(_OWORD *)v6 = v7;
  ++*(_DWORD *)(a1 + 68);
  return result;
}

uint64_t WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 24 * v9);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(const void **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v6, 24 * v7);
      if (v6)
      {
        if (*(const void **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE *v16;
  _DWORD *v17;
  _OWORD *v18;
  int v19;
  int v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  int *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  WTF::AtomStringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;

  if ((*(_DWORD *)(a1 + 7368) | 4) != 4)
    goto LABEL_2;
  v16 = (_BYTE *)(a1 + 7344);
  v17 = (_DWORD *)(a1 + 7368);
  v18 = (_OWORD *)(a1 + 7296);
  v58 = *(_OWORD *)(a1 + 7296);
  v19 = *(_DWORD *)(a1 + 7316);
  v57 = *(_QWORD *)(a1 + 7336);
  v56 = *(_OWORD *)(a1 + 7320);
  v53 = *(_BYTE *)(a1 + 7344);
  v54 = v19;
  v20 = *((_DWORD *)a2 + 263);
  v21 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
  v22 = *(unsigned int *)(a1 + 7404);
  v23 = *(int **)(a1 + 7288);
  v24 = *v23;
  v51 = v23[1];
  v52 = *(_BYTE *)(a1 + 7345);
  v25 = *((_BYTE *)v23 + 56);
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 5, a3, a4, a5, a6, a7);
  if (!result || *v17 <= 0x13u && ((1 << *v17) & 0x80114) != 0)
  {
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v21, v22, v26, v27, v28, v29, v30);
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v35 = v24;
    *(_BYTE *)(v35 + 56) = v25;
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    *(_DWORD *)(v35 + 4) = v36;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x197E69AD0);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1, v31, v32, v33, v34);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v51;
    *v18 = v58;
    *(_DWORD *)(a1 + 7312) = v20;
    *(_DWORD *)(a1 + 7316) = v54;
    *(_OWORD *)(a1 + 7320) = v56;
    *(_QWORD *)(a1 + 7336) = v57;
    *v16 = v53;
    *(_BYTE *)(a1 + 7345) = v52;
    *((_DWORD *)a2 + 263) = v20;
    v41 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v40, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
LABEL_2:
    *(_QWORD *)&v56 = *(_QWORD *)(a1 + 7416);
    DWORD2(v56) = *(_DWORD *)(a1 + 7424);
    v10 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)&v58 = v10;
    if (v10 && (v11 = v10, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10) & 1) != 0))
    {
      v12 = *(_DWORD *)(a1 + 12);
      if (!v12)
        goto LABEL_29;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
        return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v58, &v56, a1 + 7444);
      if (!*(_QWORD *)(a1 + 7320))
        return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v58, &v56, a1 + 7444);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11))
        return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v58, &v56, a1 + 7444);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v14 = **(_QWORD **)(a1 + 7320);
      if (*(_QWORD *)(v13 + 1248) != v14 && *(_QWORD *)(v13 + 880) != v14)
        return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v58, &v56, a1 + 7444);
      v42 = *(_DWORD *)(a1 + 12);
      if (!v42)
      {
LABEL_29:
        __break(0xC471u);
        JUMPOUT(0x197E69AC8);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1) == 0)
        return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v58, &v56, a1 + 7444);
      if (!*(_QWORD *)(a1 + 7360))
      {
        v55 = **(_QWORD **)(a1 + 7320);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v55);
      }
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    }
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  const WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  int32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  __int128 *v60;
  int v61;
  __int128 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned __int8 v90;
  WTF::StringImpl *v91;
  uint64_t NewTargetExpr;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  JSC::ASTBuilder *v107;
  uint64_t *v108;
  void (**v109)(JSC::IntegerNode *__hidden);
  _QWORD *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  JSC::ASTBuilder *v122;
  uint64_t *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  int v166;
  JSC::ASTBuilder *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  JSC::ASTBuilder *v182;
  uint64_t *v183;
  char v184;
  double v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  JSC::ASTBuilder *v193;
  uint64_t *v194;
  char v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  JSC::ASTBuilder *v204;
  uint64_t *v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 v222;
  int v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  JSC::ASTBuilder *v230;
  uint64_t *v231;
  int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  JSC::ASTBuilder *v239;
  uint64_t *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  char v259;
  unsigned __int8 v260;
  int v261;
  int v262;
  JSC::ASTBuilder *v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t *v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  int v274;
  int v275;
  uint64_t *v276;
  uint64_t *v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  const WTF::StringImpl *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned __int16 *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BYTE *v300;
  size_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  size_t v308;
  int *v309;
  _BYTE *v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t *v317;
  int v318;
  uint64_t *v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _BOOL4 v335;
  int v336;
  WTF *v337;
  int v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  JSC::ParserArena *v379;
  uint64_t v380;
  unsigned int v381;
  int v382;
  int v383;
  unsigned int *v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t *v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  uint64_t v414;
  int v415;
  char v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t *v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t *v451;
  int v452;
  int v454;
  int v455;
  int v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  char *v462;
  uint64_t v463;
  int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  _BOOL8 v471;
  int v474;
  int v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __n128 SpreadExpression;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t i;
  int v495;
  int v496;
  int v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  int v505;
  int v506;
  int v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  int v511;
  int v512;
  uint64_t *v513;
  uint64_t Arguments;
  uint64_t *v515;
  uint64_t v516;
  int v517;
  BOOL v518;
  int v519;
  int v520;
  int v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t *v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  _BOOL4 v534;
  const char *v535;
  uint64_t v537;
  int v538;
  int32x2_t v539;
  uint64_t v540;
  unint64_t v541;
  __int128 v542;
  WTF *v543;
  uint64_t *v544;
  uint64_t v545;
  int v546;
  __int16 v547;
  int v548;
  int v549;
  int v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t *v554;
  int v555;
  int v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  JSC::ASTBuilder *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  int v565;
  uint64_t *v566;
  uint64_t v567;
  unsigned int v568;
  uint64_t v569;
  int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t *v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  int v590;
  int v591;
  unsigned int v592;
  int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  uint64_t v598;
  unsigned int v599;
  int v600;
  int v601;
  int v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  char *v606;
  uint64_t *v607;
  int v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  int v614;
  int v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  int v619;
  uint64_t *v620;
  WTF::AtomStringImpl *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  WTF::StringImpl *v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  char *v634;
  char v635;
  uint64_t v636;
  int v637;
  int v638;
  int v639;
  int v640;
  unsigned int v641;
  unsigned __int8 *v642;
  WTF::StringImpl *v643;
  _QWORD *v644;
  uint64_t v645;
  uint64_t v646;
  unsigned int v647;
  int v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int v652;
  int v653;
  int v654;
  uint64_t v655;
  uint64_t v657;
  WTF::StringImpl *v658;
  uint64_t v659;
  unint64_t v660;
  char v661;
  uint64_t v662;
  int v663;
  int v664;
  int v665;
  int v666;
  unsigned __int8 *v667;
  WTF::StringImpl *v668;
  char *v669;
  uint64_t v670;
  uint64_t *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  JSC::ASTBuilder *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  int v683;
  int v684;
  uint64_t *v685;
  uint64_t v686;
  int v687;
  int v688;
  uint64_t *v689;
  char v690;
  uint64_t v691;
  unsigned int v692;
  unsigned int v693;
  uint64_t v694;
  int v695;
  int v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  unsigned int v707;
  uint64_t v708;
  uint64_t v709;
  _QWORD *v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  void *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  const char *v729;
  uint64_t v730;
  int v731;
  uint64_t v732;
  int v733;
  int v734;
  int v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  int v739;
  int v740;
  int v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  _QWORD *v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  int v751;
  int v752;
  uint64_t v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  _QWORD *v758;
  unint64_t v759;
  void *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  void *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  _QWORD *v775;
  uint64_t v776;
  uint64_t v777;
  _QWORD *v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  void *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  void *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  int v798;
  int v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  int v804;
  int v805;
  int v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  int v814;
  int v815;
  int v816;
  uint64_t v817;
  int v818;
  uint64_t v819;
  char v820;
  unsigned __int8 v821;
  _QWORD *v822;
  int v823;
  int v824;
  int v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  int v829;
  const char *v830;
  unint64_t v831;
  int v832;
  _DWORD *v833;
  _QWORD *v834;
  uint64_t *v835;
  uint64_t v836;
  uint64_t v837;
  int v838;
  uint64_t v839;
  _QWORD *v840;
  _QWORD *v841;
  _QWORD *v842;
  JSC::ASTBuilder *v843;
  uint64_t ElementList;
  uint64_t v845;
  uint64_t v846;
  JSC::ArgumentListNode *v847;
  int v848;
  int v849;
  int v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  int v858;
  int v859;
  uint64_t v860;
  int v861;
  uint64_t v862;
  int v863;
  int v864;
  int v865;
  uint64_t v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  JSC::ASTBuilder *v871;
  JSC::ASTBuilder *v872;
  int v873;
  int v874;
  int v875;
  uint64_t v876;
  int v877;
  uint64_t v878;
  int v879;
  int v880;
  int v881;
  int v882;
  uint64_t v883;
  int v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  const char *v888;
  uint64_t v889;
  int v890;
  unsigned int v891;
  uint64_t v892;
  int v893;
  unsigned int v894;
  uint64_t v895;
  unsigned int v896;
  unsigned int v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  const char *v902;
  const char *v903;
  uint64_t v904;
  int v905;
  unsigned int v906;
  unsigned int v907;
  const char *v908;
  uint64_t v909;
  const char *v910;
  int v911;
  int v912;
  int v913;
  uint64_t v914;
  int v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  int v919;
  int v920;
  int v921;
  int v922;
  uint64_t v923;
  int v924;
  uint64_t v925;
  int v926;
  uint64_t v927;
  int v928;
  int v929;
  int v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  uint64_t v934;
  unsigned int v935;
  unsigned int v936;
  unsigned int v937;
  unsigned int v938;
  uint64_t v939;
  int v940;
  _BOOL4 v941;
  int v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  int v949;
  int v950;
  uint64_t v951;
  int v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  uint64_t v957;
  int v958;
  uint64_t v959;
  int v961;
  int v962;
  uint64_t *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int v971;
  uint64_t v972;
  int v973;
  int v974;
  uint64_t v975;
  int v976;
  uint64_t v977;
  _DWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  __int128 v982;
  __n128 v983;
  uint64_t v984;
  unsigned int v985;
  __int128 v986;
  int v987;
  uint64_t v988;
  unsigned int v989;
  unsigned int v990;
  unsigned int v991;
  uint64_t v992;
  _BOOL4 v993;
  __int128 *v994;
  unint64_t v995;
  unsigned __int8 *v996;
  __int128 v997;
  JSC::ASTBuilder *v998;
  uint64_t v999;
  int v1000;
  WTF *v1001;
  uint64_t v1002;
  __int128 v1003;
  uint64_t v1004;
  int v1005;
  __int128 v1006;
  __int128 v1007;
  uint64_t v1008;
  int v1009;
  __int128 v1010;
  uint64_t v1011;
  int v1012;
  _BYTE v1013[24];
  __int128 v1014;
  int v1015;
  uint64_t v1016;
  int v1017;
  __int128 v1018;
  uint64_t v1019;

  v998 = a2;
  v996 = (unsigned __int8 *)(a1 + 7344);
  v995 = a1 + 7416;
  v9 = (char *)(a1 + 7368);
  v1004 = *(_QWORD *)(a1 + 7416);
  v1005 = *(_DWORD *)(a1 + 7424);
  v994 = (__int128 *)(a1 + 7400);
  v1003 = *(_OWORD *)(a1 + 7400);
  v1001 = 0;
  v1002 = 0;
  v10 = *(_DWORD *)(a1 + 7368);
  if (v10 != 519)
  {
    if (v10 != 543)
    {
      *(_QWORD *)&v997 = 0;
      v11 = 1;
      goto LABEL_4;
    }
    *(_QWORD *)&v997 = 0;
    goto LABEL_476;
  }
  do
  {
    if (HIDWORD(v1002) == (_DWORD)v1002)
    {
      v461 = WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1001, HIDWORD(v1002) + 1, v995);
      v462 = (char *)v1001 + 12 * HIDWORD(v1002);
      v463 = *(_QWORD *)v461;
      v464 = *(_DWORD *)(v461 + 8);
    }
    else
    {
      v462 = (char *)v1001 + 12 * HIDWORD(v1002);
      v463 = *(_QWORD *)v995;
      v464 = *(_DWORD *)(v995 + 8);
    }
    *((_DWORD *)v462 + 2) = v464;
    *(_QWORD *)v462 = v463;
    ++HIDWORD(v1002);
    v465 = *(_DWORD *)(a1 + 7400);
    v466 = *(_DWORD *)(a1 + 7412);
    v467 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v465;
    *(_DWORD *)(a1 + 7448) = v466;
    *(_DWORD *)(a1 + 7452) = v467;
    v468 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v468 + 4) = v465;
    v469 = *(_DWORD *)(a1 + 12);
    if (!v469)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F4C0);
    }
    v470 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v469 - 1) + 9) & 1;
    *(_BYTE *)(v468 + 56) = 0;
    v10 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v468, (uint64_t)v9, 0, v470, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v10;
  }
  while (v10 == 519);
  v11 = HIDWORD(v1002) == 0;
  v471 = v10 == 543;
  *(_QWORD *)&v997 = HIDWORD(v1002);
  if (v10 == 19 && HIDWORD(v1002) != 0)
  {
    v823 = *(_DWORD *)(a1 + 7400);
    v824 = *(_DWORD *)(a1 + 7412);
    v825 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v823;
    *(_DWORD *)(a1 + 7448) = v824;
    *(_DWORD *)(a1 + 7452) = v825;
    v826 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v826 + 4) = v823;
    v827 = *(_DWORD *)(a1 + 12);
    if (!v827)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F5A0);
    }
    v828 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v827 - 1) + 9) & 1;
    *(_BYTE *)(v826 + 56) = 0;
    v829 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v826, (uint64_t)v9, 0, v828, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v829;
    if (v829 != 12)
      goto LABEL_937;
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2408) && !v996[40])
    {
      v935 = *(_DWORD *)(a1 + 12);
      v936 = v935 - 1;
      v937 = v935 - 1;
      while (1)
      {
        v938 = v937;
        if (!v937)
          break;
        if (!v935)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F5F0);
        }
        v939 = *(_QWORD *)a1;
        v940 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v937-- + 10) & 0x405400;
        if (v940 == 0x400000)
        {
          v941 = v996[1] != 0;
          v942 = v996[192];
          if (!v996[192])
            goto LABEL_870;
          goto LABEL_997;
        }
      }
      v941 = v996[1] != 0;
      if (v996[192])
      {
LABEL_997:
        if (v935 <= v938)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F620);
        }
        v939 = *(_QWORD *)a1;
        v942 = *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * v938 + 14) - 1 < 2;
        goto LABEL_870;
      }
      if (!v935)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F640);
      }
      v938 = 0;
      v942 = 0;
      v939 = *(_QWORD *)a1;
LABEL_870:
      v943 = *(_DWORD *)(v939 + 720 * v936 + 10);
      if ((v942 & 1) == 0 && !v941 && (v943 & 0x100100) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_97;
        v903 = "new.target is only valid inside functions or static blocks";
        v904 = a1;
        v905 = 0;
        goto LABEL_794;
      }
      if ((v943 & 0x800) != 0)
      {
        if (v935 <= v938)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F618);
        }
        if ((*(_BYTE *)(v939 + 720 * v938 + 12) & 1) != 0)
          v961 = v942;
        else
          v961 = 1;
        if (((v941 | v961) & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "new.target is not valid inside arrow functions in global code");
          goto LABEL_97;
        }
        *(_BYTE *)(v939 + 720 * v936 + 32) |= 0x20u;
      }
      NewTargetExpr = JSC::ASTBuilder::createNewTargetExpr((uint64_t)v998, v1003, SDWORD2(v1003));
      v948 = *(_DWORD *)(a1 + 7400);
      v949 = *(_DWORD *)(a1 + 7412);
      v950 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v948;
      *(_DWORD *)(a1 + 7448) = v949;
      *(_DWORD *)(a1 + 7452) = v950;
      v951 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v951 + 4) = v948;
      v952 = *(_DWORD *)(a1 + 12);
      if (!v952)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F5F8);
      }
      *(_QWORD *)&v997 = v997 - 1;
      v953 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v952 - 1) + 9) & 1;
      *(_BYTE *)(v951 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v951, (uint64_t)v9, 0, v953, v944, v945, v946, v947);
      v328 = v471;
      goto LABEL_497;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_97;
    v830 = "\"new.\" can only be followed with target";
    goto LABEL_672;
  }
  if (v10 == 543)
  {
LABEL_476:
    v568 = *(_DWORD *)(a1 + 12);
    if (!v568)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F548);
    }
    v569 = *(_QWORD *)a1;
    v570 = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v571 = v570 - 1;
      if (v570 == 1)
        break;
      --v570;
      v572 = v571;
      if ((*(_DWORD *)(v569 + 720 * v571 + 10) & 0x405400) == 0x400000)
        goto LABEL_480;
    }
    v572 = 0;
LABEL_480:
    v573 = v568 - 1;
    do
    {
      v574 = v573;
      if (!v573)
        break;
      --v573;
    }
    while ((*(_BYTE *)(v569 + 720 * v574 + 13) & 8) == 0);
    if (v574 <= v571 && (*(_DWORD *)(v569 + 720 * (v568 - 1) + 10) & 0x100) == 0)
    {
      if (v568 <= v571)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F5D8);
      }
      if ((*(_BYTE *)(v569 + 720 * v572 + 13) & 2) == 0 || *(_DWORD *)(v569 + 720 * v572 + 20))
        goto LABEL_823;
    }
    v575 = (uint64_t *)*((_QWORD *)v998 + 1);
    NewTargetExpr = *v575;
    if ((unint64_t)(v575[1] - *v575) <= 0x1F)
    {
      JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
      NewTargetExpr = *v575;
    }
    *v575 = NewTargetExpr + 32;
    *(_DWORD *)(NewTargetExpr + 8) = v1003;
    *(int32x2_t *)(NewTargetExpr + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
    *(_DWORD *)(NewTargetExpr + 20) = -1;
    *(_BYTE *)(NewTargetExpr + 24) = 0;
    *(_BYTE *)(NewTargetExpr + 25) = 126;
    *(_BYTE *)(NewTargetExpr + 26) = 0;
    *(_QWORD *)NewTargetExpr = &off_1E35848C8;
    v576 = *(_DWORD *)(a1 + 7400);
    v577 = *(_DWORD *)(a1 + 7412);
    v578 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v576;
    *(_DWORD *)(a1 + 7448) = v577;
    *(_DWORD *)(a1 + 7452) = v578;
    v579 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v579 + 4) = v576;
    v580 = *(_DWORD *)(a1 + 12);
    if (!v580)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F550);
    }
    v581 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v580 - 1) + 9) & 1;
    *(_BYTE *)(v579 + 56) = 0;
    v582 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v579, (uint64_t)v9, 0, v581, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v582;
    v583 = *(_DWORD *)(a1 + 12);
    if (v582 != 2)
    {
      if (!v583)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F588);
      }
      v584 = v583 - 1;
      goto LABEL_491;
    }
    if (!v583)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F560);
    }
    v584 = v583 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v583 - 1) + 14) != 2)
    {
LABEL_491:
      v585 = ~v584 + v583;
      v586 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v587 = v586 - 1;
        if (v586 == 1)
          break;
        --v586;
        v588 = v587;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v587 + 12) & 0x40) != 0)
          goto LABEL_494;
      }
      v588 = v585;
LABEL_494:
      if (v583 <= v587)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F558);
      }
      v589 = v588;
      *(_DWORD *)(*(_QWORD *)a1 + 720 * v588 + 10) |= 0x20u;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
        goto LABEL_496;
      v891 = *(_DWORD *)(a1 + 12);
      if (v891 <= v587)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F5C0);
      }
      v892 = *(_QWORD *)a1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v588 + 11) & 8) != 0)
        goto LABEL_741;
      if (v891 <= v571)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F5E0);
      }
      if ((*(_BYTE *)(v892 + 720 * v572 + 13) & 2) != 0)
      {
LABEL_741:
        if (v891 <= v571)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F5D0);
        }
        v589 = v572;
      }
      if (v574 > v571)
      {
LABEL_496:
        v328 = 1;
        goto LABEL_497;
      }
      v893 = *(_DWORD *)(v892 + 720 * v589 + 20);
      v328 = 1;
      if (v893 == 1)
      {
LABEL_823:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
        goto LABEL_97;
      }
LABEL_497:
      if (NewTargetExpr)
      {
        v327 = 0;
        goto LABEL_220;
      }
LABEL_93:
      if (*(_DWORD *)v9 != 20 && (*(_DWORD *)v9 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse base expression");
        goto LABEL_97;
      }
      goto LABEL_937;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_97;
    v830 = "super call is not valid in this context";
LABEL_672:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v830);
    goto LABEL_97;
  }
LABEL_4:
  if (v10 == 539)
  {
    v873 = *(_DWORD *)(a1 + 7400);
    v874 = *(_DWORD *)(a1 + 7412);
    v875 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v873;
    *(_DWORD *)(a1 + 7448) = v874;
    *(_DWORD *)(a1 + 7452) = v875;
    v876 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v876 + 4) = v873;
    v877 = *(_DWORD *)(a1 + 12);
    if (!v877)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F5B8);
    }
    v878 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v877 - 1) + 9) & 1;
    *(_BYTE *)(v876 + 56) = 0;
    v879 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v876, (uint64_t)v9, 0, v878, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v879;
    *(_QWORD *)v1013 = *(_QWORD *)(a1 + 7444);
    *(_DWORD *)&v1013[8] = *(_DWORD *)(a1 + 7452);
    if (v879 == 19)
    {
      v880 = *(_DWORD *)(a1 + 7400);
      v881 = *(_DWORD *)(a1 + 7412);
      v882 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v880;
      *(_DWORD *)(a1 + 7448) = v881;
      *(_DWORD *)(a1 + 7452) = v882;
      v883 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v883 + 4) = v880;
      v884 = *(_DWORD *)(a1 + 12);
      if (!v884)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F5C8);
      }
      v885 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v884 - 1) + 9) & 1;
      *(_BYTE *)(v883 + 56) = 0;
      v886 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v883, (uint64_t)v9, 0, v885, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v886;
      if (v886 != 12)
        goto LABEL_937;
      v887 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v887 + 48) + 3888) && !v996[40])
      {
        if (*(_DWORD *)(a1 + 7480) == 1)
        {
          v962 = *(_DWORD *)(a1 + 12);
          if (!v962)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F628);
          }
          v964 = *(_QWORD *)(v887 + 96);
          v963 = (uint64_t *)(v887 + 96);
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v962 - 1), v964, 0);
          *(_QWORD *)(a1 + 7320) = v963;
          JSC::ASTBuilder::createResolve((uint64_t)v998, (uint64_t)&v1003, v963, &v1004, (uint64_t *)(a1 + 7444), 1);
          JSC::ASTBuilder::createImportMetaExpr(*((_QWORD *)v998 + 1), (uint64_t)&v1003, v965);
          v971 = *(_DWORD *)(a1 + 12);
          if (!v971)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F630);
          }
          NewTargetExpr = v966;
          v972 = *(_QWORD *)a1 + 720 * (v971 - 1);
          *(_DWORD *)(v972 + 10) |= 4u;
          LODWORD(v972) = *(_DWORD *)(a1 + 7400);
          v973 = *(_DWORD *)(a1 + 7412);
          v974 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v972;
          *(_DWORD *)(a1 + 7448) = v973;
          *(_DWORD *)(a1 + 7452) = v974;
          v975 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v975 + 4) = v972;
          v976 = *(_DWORD *)(a1 + 12);
          if (!v976)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F638);
          }
          v977 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v976 - 1) + 9) & 1;
          *(_BYTE *)(v975 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v975, (uint64_t)v9, 0, v977, v967, v968, v969, v970);
LABEL_860:
          v328 = 0;
          goto LABEL_497;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_97;
        v888 = "import.meta is only valid inside modules";
        v889 = a1;
        v890 = 0;
LABEL_736:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v889, v890, v888);
        goto LABEL_97;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_97;
      v888 = "\"import.\" can only be followed with meta";
LABEL_735:
      v889 = a1;
      v890 = 1;
      goto LABEL_736;
    }
    if (!v11)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with import");
      goto LABEL_97;
    }
    if (v879 != 2)
    {
      if (v879 == 20 || (v879 & 0x100000) != 0)
        goto LABEL_937;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_97;
      v888 = "import call expects one or two arguments";
      goto LABEL_735;
    }
    v911 = *(_DWORD *)(a1 + 7400);
    v912 = *(_DWORD *)(a1 + 7412);
    v913 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v911;
    *(_DWORD *)(a1 + 7448) = v912;
    *(_DWORD *)(a1 + 7452) = v913;
    v914 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v914 + 4) = v911;
    v915 = *(_DWORD *)(a1 + 12);
    if (!v915)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F5E8);
    }
    v916 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v915 - 1) + 9) & 1;
    *(_BYTE *)(v914 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v914, (uint64_t)v9, 0, v916, a5, a6, a7, a8);
    v917 = *(_DWORD *)(a1 + 7300);
    v918 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
    v919 = *(_DWORD *)(a1 + 7368);
    if (v918)
    {
      if (v919 != 6)
      {
        v927 = 0;
        goto LABEL_889;
      }
      v920 = *(_DWORD *)(a1 + 7400);
      v921 = *(_DWORD *)(a1 + 7412);
      v922 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v920;
      *(_DWORD *)(a1 + 7448) = v921;
      *(_DWORD *)(a1 + 7452) = v922;
      v923 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v923 + 4) = v920;
      v924 = *(_DWORD *)(a1 + 12);
      if (!v924)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F600);
      }
      v925 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v924 - 1) + 9) & 1;
      *(_BYTE *)(v923 + 56) = 0;
      v926 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v923, (uint64_t)v9, 0, v925, a5, a6, a7, a8);
      v927 = 0;
      *(_DWORD *)(a1 + 7368) = v926;
      if (v926 == 3)
        goto LABEL_858;
      v927 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      v919 = *(_DWORD *)(a1 + 7368);
      if (v927)
      {
        if (v919 == 6)
        {
          v954 = *(_DWORD *)(a1 + 7400);
          v955 = *(_DWORD *)(a1 + 7412);
          v956 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v954;
          *(_DWORD *)(a1 + 7448) = v955;
          *(_DWORD *)(a1 + 7452) = v956;
          v957 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v957 + 4) = v954;
          v958 = *(_DWORD *)(a1 + 12);
          if (!v958)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F610);
          }
          v959 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v958 - 1) + 9) & 1;
          *(_BYTE *)(v957 + 56) = 0;
          v919 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v957, (uint64_t)v9, 0, v959, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v919;
        }
LABEL_889:
        if (v919 == 3)
        {
LABEL_858:
          v928 = *(_DWORD *)(a1 + 7400);
          v929 = *(_DWORD *)(a1 + 7412);
          v930 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v928;
          *(_DWORD *)(a1 + 7448) = v929;
          *(_DWORD *)(a1 + 7452) = v930;
          v931 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v931 + 4) = v928;
          v932 = *(_DWORD *)(a1 + 12);
          if (!v932)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F608);
          }
          v933 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v932 - 1) + 9) & 1;
          *(_BYTE *)(v931 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v931, (uint64_t)v9, 0, v933, a5, a6, a7, a8);
          JSC::ASTBuilder::createImportExpr(*((_QWORD *)v998 + 1), (uint64_t)&v1003, v918, v927, &v1004, (uint64_t *)v1013, (uint64_t *)(a1 + 7444));
          NewTargetExpr = v934;
          *(_DWORD *)(a1 + 7300) = v917;
          goto LABEL_860;
        }
        if (v919 != 20 && (v919 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "import call expects one or two arguments");
          goto LABEL_904;
        }
LABEL_903:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_904:
        *(_DWORD *)(a1 + 7300) = v917;
        goto LABEL_97;
      }
    }
    if (v919 != 20 && (v919 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
      goto LABEL_904;
    }
    goto LABEL_903;
  }
  if (v10 != 12)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v56 = **(_QWORD **)(a1 + 7376);
  v12 = v56 == *(_QWORD *)(v55 + 896) && v996[40] == 0;
  if ((*((_BYTE *)v998 + 24) & 2) == 0 && v56 == *(_QWORD *)(v55 + 880))
  {
    v57 = *(_DWORD *)(a1 + 12);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x197E6F538);
    }
    v58 = v57 - 1;
    v59 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v58 + 12) & 0x10) == 0 && !v996[1])
    {
      v993 = v12;
      if (*(_BYTE *)(v59 + 720 * v58 + 14) == 2)
      {
        v12 = v993;
        goto LABEL_7;
      }
      v60 = (__int128 *)(a1 + 7296);
      v1010 = *(_OWORD *)(a1 + 7296);
      v61 = *(_DWORD *)(a1 + 7316);
      v62 = (__int128 *)(a1 + 7320);
      *(_QWORD *)&v1013[16] = *(_QWORD *)(a1 + 7336);
      *(_OWORD *)v1013 = *(_OWORD *)(a1 + 7320);
      v991 = *v996;
      LODWORD(v992) = v61;
      v63 = *((_DWORD *)v998 + 263);
      v64 = *(int *)(a1 + 7408);
      v65 = *(int *)(a1 + 7404);
      v66 = *(_QWORD *)(a1 + 7288);
      v67 = *(_DWORD *)v66;
      v990 = *(_DWORD *)(v66 + 4);
      v68 = *(_BYTE *)(v66 + 56);
      v1016 = *(_QWORD *)v995;
      v1017 = *(_DWORD *)(v995 + 8);
      v1007 = *v994;
      v69 = *(_DWORD *)(a1 + 7400);
      v70 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v69;
      *(_DWORD *)(a1 + 7448) = v70;
      *(_DWORD *)(a1 + 7452) = v65;
      *(_DWORD *)(v66 + 4) = v69;
      v71 = *(_BYTE *)(v59 + 720 * v58 + 9) & 1;
      *(_BYTE *)(v66 + 56) = 0;
      v72 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v66, (uint64_t)v9, 0, v71, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v72;
      if (v72 != 19)
        goto LABEL_40;
      v1006 = *v60;
      v989 = *(_DWORD *)(a1 + 7316);
      v1018 = *v62;
      v1019 = *(_QWORD *)(a1 + 7336);
      v609 = *v996;
      v987 = v996[1];
      LODWORD(v988) = v609;
      v985 = *((_DWORD *)v998 + 263);
      v610 = *(int *)(a1 + 7408);
      v611 = *(int *)(a1 + 7404);
      v612 = *(_QWORD *)(a1 + 7288);
      LODWORD(v984) = *(_DWORD *)(v612 + 4);
      v983.n128_u32[0] = *(_DWORD *)v612;
      LODWORD(v982) = *(unsigned __int8 *)(v612 + 56);
      v613 = *(_DWORD *)(a1 + 7400);
      v614 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v613;
      *(_DWORD *)(a1 + 7448) = v614;
      v980 = v611;
      v981 = v610;
      *(_DWORD *)(a1 + 7452) = v611;
      *(_DWORD *)(v612 + 4) = v613;
      v615 = *(_DWORD *)(a1 + 12);
      if (!v615)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F570);
      }
      v616 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v615 - 1) + 9) & 1;
      *(_BYTE *)(v612 + 56) = 0;
      *(_QWORD *)&v986 = v9;
      v617 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v612, (uint64_t)v9, 0, v616, v76, v77, v78, v79);
      *(_DWORD *)(a1 + 7368) = v617;
      if (v617 != 12
        || (v618 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), **(_QWORD **)(a1 + 7376) != *(_QWORD *)(v618 + 1768)))
      {
        v9 = (char *)v986;
LABEL_40:
        v80 = *(_QWORD *)(a1 + 7288);
        *(_BYTE *)(v80 + 150) = 0;
        v81 = *(WTF::StringImpl **)(v80 + 152);
        *(_QWORD *)(v80 + 152) = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
          {
            WTF::StringImpl::~StringImpl(v81, v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v713, v714, v715, v716, v717, v718, v719, v720);
          }
          else
          {
            *(_DWORD *)v81 -= 2;
          }
        }
        v82 = *(_QWORD *)(v80 + 88);
        v83 = *(_QWORD *)(v80 + 96);
        *(_QWORD *)(v80 + 80) = v82 + v64;
        *(_QWORD *)(v80 + 112) = v82 + v65;
        *(_DWORD *)(v80 + 20) = 0;
        *(_DWORD *)(v80 + 36) = 0;
        if (v82 + v64 >= v83)
          v84 = 0;
        else
          v84 = *(_BYTE *)(v82 + v64);
        v12 = v993;
        *(_BYTE *)(v80 + 176) = v84;
        v85 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v85 = v67;
        *(_BYTE *)(v85 + 56) = v68;
        v86 = *(_DWORD *)(a1 + 7400);
        v87 = *(_DWORD *)(a1 + 7412);
        v88 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v86;
        *(_DWORD *)(a1 + 7448) = v87;
        *(_DWORD *)(a1 + 7452) = v88;
        *(_DWORD *)(v85 + 4) = v86;
        v89 = *(_DWORD *)(a1 + 12);
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F540);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v85, (uint64_t)v9, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1, v76, v77, v78, v79);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v990;
        *v60 = v1010;
        *(_DWORD *)(a1 + 7312) = v63;
        v90 = v991;
        *(_DWORD *)(a1 + 7316) = v992;
        *v62 = *(_OWORD *)v1013;
        *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v1013[16];
        *(_WORD *)v996 = v90;
        *((_DWORD *)v998 + 263) = v63;
        v91 = *(WTF::StringImpl **)(a1 + 7360);
        *(_QWORD *)(a1 + 7360) = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
          {
            WTF::StringImpl::~StringImpl(v91, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v721, v722, v723, v724, v725, v726, v727, v728);
          }
          else
          {
            *(_DWORD *)v91 -= 2;
          }
        }
        goto LABEL_7;
      }
      v996[195] = 1;
      v619 = *(_DWORD *)(a1 + 12);
      if (!v619)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F578);
      }
      v620 = (uint64_t *)(v618 + 880);
      JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v619 - 1), *(_QWORD *)(v618 + 880), 0);
      *(_QWORD *)(a1 + 7320) = v620;
      JSC::ASTBuilder::createResolve((uint64_t)v998, (uint64_t)&v1007, v620, &v1016, (uint64_t *)(a1 + 7444), 0);
      NewTargetExpr = v628;
      v629 = *(_QWORD *)(a1 + 7288);
      *(_BYTE *)(v629 + 150) = 0;
      v630 = *(WTF::StringImpl **)(v629 + 152);
      *(_QWORD *)(v629 + 152) = 0;
      if (v630)
      {
        if (*(_DWORD *)v630 == 2)
        {
          WTF::StringImpl::~StringImpl(v630, v621, v622, v623, v624, v625, v626, v627);
          WTF::fastFree(v759, v760, v761, v762, v763, v764, v765, v766);
        }
        else
        {
          *(_DWORD *)v630 -= 2;
        }
      }
      v631 = *(_QWORD *)(v629 + 88);
      v632 = *(_QWORD *)(v629 + 96);
      v633 = v980;
      v634 = (char *)(v631 + v981);
      *(_QWORD *)(v629 + 80) = v631 + v981;
      *(_QWORD *)(v629 + 112) = v631 + v633;
      *(_DWORD *)(v629 + 20) = 0;
      *(_DWORD *)(v629 + 36) = 0;
      if ((unint64_t)v634 >= v632)
        v635 = 0;
      else
        v635 = *v634;
      *(_BYTE *)(v629 + 176) = v635;
      v636 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v636 = v983.n128_u32[0];
      *(_BYTE *)(v636 + 56) = v982;
      v637 = *(_DWORD *)(a1 + 7400);
      v638 = *(_DWORD *)(a1 + 7412);
      v639 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v637;
      *(_DWORD *)(a1 + 7448) = v638;
      *(_DWORD *)(a1 + 7452) = v639;
      *(_DWORD *)(v636 + 4) = v637;
      v640 = *(_DWORD *)(a1 + 12);
      if (!v640)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F580);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v636, v986, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v640 - 1) + 9) & 1, v624, v625, v626, v627);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v984;
      *v60 = v1006;
      v641 = v985;
      *(_DWORD *)(a1 + 7312) = v985;
      *(_DWORD *)(a1 + 7316) = v989;
      *v62 = v1018;
      *(_QWORD *)(a1 + 7336) = v1019;
      v642 = v996;
      *v996 = v988;
      v642[1] = v987;
      *((_DWORD *)v998 + 263) = v641;
      v643 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v643)
      {
        if (*(_DWORD *)v643 == 2)
        {
          WTF::StringImpl::~StringImpl(v643, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v767, v768, v769, v770, v771, v772, v773, v774);
        }
        else
        {
          *(_DWORD *)v643 -= 2;
        }
      }
      if (NewTargetExpr)
      {
        if (!v993)
        {
          v327 = 0;
          v328 = 0;
          v9 = (char *)v986;
          goto LABEL_220;
        }
        v9 = (char *)v986;
        goto LABEL_932;
      }
      v12 = v993;
      v9 = (char *)v986;
    }
  }
LABEL_7:
  if ((unint64_t)&v979 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v996[8] = 1;
    }
    goto LABEL_93;
  }
  v13 = *(_DWORD *)v9;
  if (*(int *)v9 > 512)
  {
    if (v13 > 540)
    {
      switch(v13)
      {
        case 541:
          v28 = *(_DWORD *)(a1 + 7300);
          *(_QWORD *)&v1013[8] = 0;
          *(_QWORD *)&v1013[16] = 0;
          *(_QWORD *)v1013 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          NewTargetExpr = JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::ASTBuilder>(a1, (uint64_t)v998, 0, (uint64_t)v1013);
          goto LABEL_52;
        case 542:
        case 543:
          goto LABEL_92;
        case 544:
          v130 = *(_DWORD *)(a1 + 12);
          if (!v130)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F3C0);
          }
          v125 = v130 - 1;
          v126 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v125 + 9) & 1) == 0)
            goto LABEL_212;
          goto LABEL_92;
        case 545:
          v112 = *(_DWORD *)(a1 + 12);
          if (!v112)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F3C8);
          }
          goto LABEL_91;
        case 546:
          v124 = *(_DWORD *)(a1 + 12);
          if (!v124)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F3B8);
          }
          v125 = v124 - 1;
          v126 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v124 - 1) + 12) & 0x10) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[90]>(a1);
            goto LABEL_93;
          }
          if (*(_DWORD *)(a1 + 7316))
          {
            v127 = *(_DWORD *)(a1 + 12);
            while (1)
            {
              v128 = v127;
              if (v127 == 1)
                break;
              --v127;
              if ((*(_BYTE *)(v126 + 720 * (v128 - 1) + 12) & 0x40) != 0)
                goto LABEL_86;
            }
            v127 = 0;
LABEL_86:
            if (v124 <= v128 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F498);
            }
            if ((*(_BYTE *)(v126 + 720 * v127 + 11) & 0x40) != 0 || ((1 << v996[130]) & 0x6000) != 0)
            {
              v99 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::ASTBuilder>(a1, (uint64_t)v998, a3, a4, a5, a6, a7, a8);
              goto LABEL_216;
            }
            goto LABEL_212;
          }
          if (*v996)
            goto LABEL_212;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57]>(a1);
          break;
        default:
          if (v13 == 191489)
          {
            v274 = 0;
LABEL_185:
            v275 = JSC::Lexer<unsigned char>::scanRegExp(*(unsigned int **)(a1 + 7288), v9, v274, a4, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v275;
            if (v275 == 16)
            {
              v276 = *(uint64_t **)(a1 + 7376);
              v277 = *(uint64_t **)(a1 + 7384);
              *(_QWORD *)&v1018 = *(_QWORD *)v995;
              DWORD2(v1018) = *(_DWORD *)(v995 + 8);
              *(_OWORD *)v1013 = *v994;
              v278 = *(_DWORD *)(a1 + 7400);
              v279 = *(_DWORD *)(a1 + 7412);
              v280 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v278;
              *(_DWORD *)(a1 + 7448) = v279;
              *(_DWORD *)(a1 + 7452) = v280;
              v281 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v281 + 4) = v278;
              v282 = *(_DWORD *)(a1 + 12);
              if (!v282)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F448);
              }
              v283 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v282 - 1) + 9) & 1;
              *(_BYTE *)(v281 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v281, (uint64_t)v9, 0, v283, a5, a6, a7, a8);
              NewTargetExpr = JSC::ASTBuilder::createRegExp((uint64_t)v998, (uint64_t)v1013, v276, v277, (unsigned int *)&v1018);
              if (!NewTargetExpr)
              {
                v284 = *v276;
                if (*v276)
                {
                  v285 = *(unsigned int *)(v284 + 16);
                  v286 = *(const WTF::StringImpl **)(v284 + 8);
                  LODWORD(v284) = *(_DWORD *)(v284 + 4);
                  v287 = (v285 >> 2) & 1;
                }
                else
                {
                  v286 = 0;
                  v287 = 1;
                }
                v288 = v284 | (unint64_t)(v287 << 32);
                v289 = *v277;
                if (*v277)
                {
                  v290 = *(unsigned int *)(v289 + 16);
                  v291 = *(unsigned __int16 **)(v289 + 8);
                  LODWORD(v289) = *(_DWORD *)(v289 + 4);
                  v292 = (v290 >> 2) & 1;
                }
                else
                {
                  v291 = 0;
                  v292 = 1;
                }
                v299 = 2
                     * JSC::Yarr::checkSyntax(v286, v288, v291, v289 | (unint64_t)(v292 << 32));
                v300 = (_BYTE *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v299];
                if (v300)
                {
                  v301 = strlen((const char *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v299]);
                  if (v301)
                  {
                    v308 = v301;
                    if (v301 >> 31)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E6F4B8);
                    }
                    v309 = (int *)WTF::fastCompactMalloc((WTF *)(v301 + 20));
                    v310 = v309 + 5;
                    *v309 = 2;
                    v309[1] = v308;
                    *((_QWORD *)v309 + 1) = v309 + 5;
                    v309[4] = 4;
                    if (v308 == 1)
                      *v310 = *v300;
                    else
                      memcpy(v310, v300, v308);
                  }
                  else
                  {
                    v309 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                  JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, (WTF::AtomStringImpl *)v309, v302, v303, v304, v305, v306, v307);
                  if (*v309 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v309, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
                  }
                  else
                  {
                    *v309 -= 2;
                  }
                }
                else
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, 0, v293, v294, v295, v296, v297, v298);
                }
              }
              goto LABEL_217;
            }
            if (v275 == 20 || (v275 & 0x100000) != 0)
              goto LABEL_92;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Invalid regular expression");
            goto LABEL_93;
          }
          if (v13 != 1048592)
            goto LABEL_92;
          v110 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
          v111 = **(_QWORD **)(a1 + 7376);
          if (v111 != v110[41])
            goto LABEL_320;
          v443 = *(_DWORD *)(a1 + 12);
          if (!v443)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F4A0);
          }
          v125 = v443 - 1;
          v126 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v125 + 9) & 1) != 0)
          {
LABEL_320:
            if (v111 != v110[16] || !*v996)
              goto LABEL_68;
            v444 = *(_DWORD *)(a1 + 12);
            if (!v444)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F4B0);
            }
            v125 = v444 - 1;
            v126 = *(_QWORD *)a1;
            if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v125 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
            {
LABEL_68:
              if (v111 != v110[62])
                goto LABEL_92;
              v112 = *(_DWORD *)(a1 + 12);
              if (!v112)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6A240);
              }
LABEL_91:
              v125 = v112 - 1;
              v126 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v125 + 9) & 1) != 0
                || (*(_BYTE *)(v126 + 720 * v125 + 11) & 2) != 0)
              {
                goto LABEL_92;
              }
            }
          }
          goto LABEL_212;
      }
      goto LABEL_93;
    }
    if (v13 > 522)
    {
      if (v13 == 523)
      {
        v212 = *(_DWORD *)(a1 + 7300);
        v1018 = *v994;
        v241 = *(_DWORD *)(a1 + 7408);
        v242 = *(_DWORD *)(a1 + 7400);
        v243 = *(_DWORD *)(a1 + 7412);
        v244 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v242;
        *(_DWORD *)(a1 + 7448) = v243;
        *(_DWORD *)(a1 + 7452) = v244;
        v245 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v245 + 4) = v242;
        v246 = *(_DWORD *)(a1 + 12);
        if (!v246)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F430);
        }
        v247 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v246 - 1) + 9) & 1;
        *(_BYTE *)(v245 + 56) = 0;
        v248 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v245, (uint64_t)v9, 0, v247, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v248;
        v1015 = 0;
        v1014 = 0u;
        *(_OWORD *)&v1013[8] = 0u;
        *(_QWORD *)v1013 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        if (v248 == 191488)
        {
          v253 = *(_DWORD *)(a1 + 7400);
          v254 = *(_DWORD *)(a1 + 7412);
          v255 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v253;
          *(_DWORD *)(a1 + 7448) = v254;
          *(_DWORD *)(a1 + 7452) = v255;
          v256 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v256 + 4) = v253;
          v257 = *(_DWORD *)(a1 + 12);
          if (!v257)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F460);
          }
          v258 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v257 - 1) + 9) & 1;
          *(_BYTE *)(v256 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v256, (uint64_t)v9, 0, v258, v249, v250, v251, v252);
          v259 = 2;
        }
        else
        {
          v259 = 0;
        }
        v260 = v996[130];
        v996[130] = v259;
        v261 = *(_DWORD *)(a1 + 12);
        if (!v261)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F438);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v261 - 1) + 12) & 1) != 0)
          v262 = v996[144];
        else
          v262 = 0;
        v263 = v998;
        if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, v998, 0, 0, v262, v262 != 2, v241, (uint64_t **)v1013, 0, 0) & 1) != 0)
        {
          NewTargetExpr = JSC::ASTBuilder::createFunctionExpr((uint64_t)v263, (uint64_t)&v1018, (uint64_t)v1013, a4, a5, a6, a7, a8);
        }
        else
        {
          if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse function expression");
          }
          NewTargetExpr = 0;
        }
        v996[130] = v260;
LABEL_178:
        *(_DWORD *)(a1 + 7300) = v212;
        goto LABEL_217;
      }
      if (v13 != 526)
      {
LABEL_92:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        goto LABEL_93;
      }
      v113 = *(_DWORD *)(a1 + 7400);
      v114 = *(_DWORD *)(a1 + 7404);
      v115 = *(_DWORD *)(a1 + 7408);
      v116 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v113;
      *(_DWORD *)(a1 + 7448) = v116;
      *(_DWORD *)(a1 + 7452) = v114;
      v117 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v117 + 4) = v113;
      v118 = *(_DWORD *)(a1 + 12);
      if (!v118)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F418);
      }
      v119 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v118 - 1) + 9) & 1;
      *(_BYTE *)(v117 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v117, (uint64_t)v9, 0, v119, a5, a6, a7, a8);
      v120 = *(_DWORD *)(a1 + 12);
      if (!v120)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F420);
      }
      v121 = v120 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v121 + 11) & 8) != 0)
        *(_BYTE *)(*(_QWORD *)a1 + 720 * v121 + 32) |= 4u;
      v122 = v998;
      *((_DWORD *)v998 + 6) |= 8u;
      v123 = (uint64_t *)*((_QWORD *)v122 + 1);
      NewTargetExpr = *v123;
      if ((unint64_t)(v123[1] - *v123) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v122 + 1));
        NewTargetExpr = *v123;
      }
      *v123 = NewTargetExpr + 32;
      *(_DWORD *)(NewTargetExpr + 8) = v113;
      *(_DWORD *)(NewTargetExpr + 12) = v115;
      *(_DWORD *)(NewTargetExpr + 16) = v114;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = 126;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      v109 = &off_1E3584748;
LABEL_146:
      *(_QWORD *)NewTargetExpr = v109;
      if (!v12)
        goto LABEL_219;
    }
    else
    {
      if (v13 != 513)
      {
        if (v13 == 514)
        {
          *(_OWORD *)v1013 = *v994;
          v93 = *(_DWORD *)(a1 + 7400);
          v94 = *(_DWORD *)(a1 + 7412);
          v95 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v93;
          *(_DWORD *)(a1 + 7448) = v94;
          *(_DWORD *)(a1 + 7452) = v95;
          v96 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v96 + 4) = v93;
          v97 = *(_DWORD *)(a1 + 12);
          if (!v97)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F410);
          }
          v98 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 9) & 1;
          *(_BYTE *)(v96 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v96, (uint64_t)v9, 0, v98, a5, a6, a7, a8);
          JSC::ASTBuilder::createBoolean((uint64_t)v998, (uint64_t)v1013, 0);
          goto LABEL_216;
        }
        goto LABEL_92;
      }
      v232 = *(_DWORD *)(a1 + 7400);
      v233 = *(_DWORD *)(a1 + 7404);
      v234 = *(_DWORD *)(a1 + 7408);
      v235 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v232;
      *(_DWORD *)(a1 + 7448) = v235;
      *(_DWORD *)(a1 + 7452) = v233;
      v236 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v236 + 4) = v232;
      v237 = *(_DWORD *)(a1 + 12);
      if (!v237)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F428);
      }
      v238 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v237 - 1) + 9) & 1;
      *(_BYTE *)(v236 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v236, (uint64_t)v9, 0, v238, a5, a6, a7, a8);
      v239 = v998;
      ++*((_DWORD *)v998 + 7);
      v240 = (uint64_t *)*((_QWORD *)v239 + 1);
      NewTargetExpr = *v240;
      if ((unint64_t)(v240[1] - *v240) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v239 + 1));
        NewTargetExpr = *v240;
      }
      *v240 = NewTargetExpr + 32;
      *(_DWORD *)(NewTargetExpr + 8) = v232;
      *(_DWORD *)(NewTargetExpr + 12) = v234;
      *(_DWORD *)(NewTargetExpr + 16) = v233;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_QWORD *)NewTargetExpr = &off_1E357B068;
      *(_DWORD *)(NewTargetExpr + 24) = 16785408;
      if (!v12)
        goto LABEL_219;
    }
LABEL_932:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 112))(NewTargetExpr)
      && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    {
      if (*(_DWORD *)v9 == 12
        || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, *(_DWORD *)v9, *(_QWORD **)(a1 + 7376))
        || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| *(_DWORD *)v9 == 546|| *(_DWORD *)v9 == 1048592&& **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v978 = *(_DWORD **)(a1 + 7496);
        if (v978)
          *v978 = 2;
        goto LABEL_937;
      }
      v328 = 0;
      v327 = 1;
      goto LABEL_220;
    }
    goto LABEL_219;
  }
  switch(v13)
  {
    case 0:
      v14 = *(_DWORD *)(a1 + 7400);
      v15 = *(_DWORD *)(a1 + 7404);
      v16 = *(_DWORD *)(a1 + 7408);
      v17 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v14;
      *(_DWORD *)(a1 + 7448) = v17;
      *(_DWORD *)(a1 + 7452) = v15;
      v18 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v18 + 4) = v14;
      v19 = *(_DWORD *)(a1 + 12);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3F0);
      }
      v20 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v19 - 1) + 9) & 1;
      *(_BYTE *)(v18 + 56) = 0;
      v21 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v18, (uint64_t)v9, 0, v20, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v21;
      v28 = *(_DWORD *)(a1 + 7300);
      if (v21 == 1)
      {
        v519 = *(_DWORD *)(a1 + 7400);
        v520 = *(_DWORD *)(a1 + 7412);
        v521 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v519;
        *(_DWORD *)(a1 + 7448) = v520;
        *(_DWORD *)(a1 + 7452) = v521;
        v522 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v522 + 4) = v519;
        v523 = *(_DWORD *)(a1 + 12);
        if (!v523)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F4D0);
        }
        v524 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v523 - 1) + 9) & 1;
        *(_BYTE *)(v522 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v522, (uint64_t)v9, 0, v524, v24, v25, v26, v27);
        v525 = (uint64_t *)*((_QWORD *)v998 + 1);
        NewTargetExpr = *v525;
        if ((unint64_t)(v525[1] - *v525) <= 0x27)
        {
          JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
          NewTargetExpr = *v525;
        }
        *v525 = NewTargetExpr + 40;
        *(_DWORD *)(NewTargetExpr + 8) = v14;
        *(_DWORD *)(NewTargetExpr + 12) = v16;
        *(_DWORD *)(NewTargetExpr + 16) = v15;
        *(_DWORD *)(NewTargetExpr + 20) = -1;
        *(_BYTE *)(NewTargetExpr + 24) = 0;
        *(_BYTE *)(NewTargetExpr + 25) = 126;
        *(_BYTE *)(NewTargetExpr + 26) = 0;
        *(_QWORD *)NewTargetExpr = &off_1E35851C8;
        *(_QWORD *)(NewTargetExpr + 32) = 0;
        goto LABEL_52;
      }
      v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::ASTBuilder>(a1, (uint64_t)v998, v22, v23, v24, v25, v26, v27);
      if (!v29)
      {
        if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
        }
        NewTargetExpr = 0;
        goto LABEL_52;
      }
      v30 = v29;
      v31 = *(_QWORD *)v29
         && **(_QWORD **)v29 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v998 + 41952) + 16)
         && (v547 = *(_WORD *)(v29 + 24), (v547 & 0x7FF) == 1)
         && (v547 & 0x3800) == 0;
      LODWORD(v992) = v28;
      v993 = v12;
      v32 = (uint64_t *)*((_QWORD *)v998 + 1);
      v33 = *v32;
      if ((unint64_t)(v32[1] - *v32) <= 0x37)
      {
        v732 = v31;
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
        v31 = v732;
        v33 = *v32;
      }
      *v32 = v33 + 56;
      v989 = v16;
      v990 = v14;
      *(_DWORD *)(v33 + 8) = v14;
      *(_DWORD *)(v33 + 12) = v16;
      v991 = v15;
      *(_DWORD *)(v33 + 16) = v15;
      *(_DWORD *)(v33 + 20) = -1;
      *(_BYTE *)(v33 + 24) = 0;
      *(_BYTE *)(v33 + 25) = 126;
      *(_BYTE *)(v33 + 26) = 0;
      *(_QWORD *)v33 = &off_1E357ABE0;
      *(_QWORD *)(v33 + 32) = v30;
      *(_QWORD *)(v33 + 40) = 0;
      v34 = v33;
      *(_BYTE *)(v33 + 48) = 0;
      while (1)
      {
        v35 = *(_DWORD *)v9;
        if (*(_DWORD *)v9 != 6)
          break;
        v36 = v31;
        v37 = *(_DWORD *)(a1 + 7400);
        v38 = *(_DWORD *)(a1 + 7412);
        v39 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v37;
        *(_DWORD *)(a1 + 7448) = v38;
        *(_DWORD *)(a1 + 7452) = v39;
        v40 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v40 + 4) = v37;
        v41 = *(_DWORD *)(a1 + 12);
        if (!v41)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F32CLL);
        }
        v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
        *(_BYTE *)(v40 + 56) = 0;
        v43 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v40, (uint64_t)v9, 0, v42, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v43;
        if (v43 == 1)
          goto LABEL_180;
        v46 = *(_DWORD *)(a1 + 7400);
        v47 = *(int32x2_t *)(v996 + 60);
        v48 = JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::ASTBuilder>(a1, (uint64_t)v998, v44, v45, a5, a6, a7, a8);
        if (!v48)
        {
          if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
          }
          NewTargetExpr = 0;
          v12 = v993;
          goto LABEL_364;
        }
        v49 = v48;
        if (*(_QWORD *)v48
          && ((v50 = *(_WORD *)(v48 + 24), **(_QWORD **)v48 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v998 + 41952) + 16))
            ? (v51 = (v50 & 0x7FF) == 1)
            : (v51 = 0),
              v51))
        {
          v534 = (v50 & 0x3800) == 0;
          if ((v534 & v36) == 1)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Attempted to redefine __proto__ property");
            goto LABEL_363;
          }
          v31 = v534 | v36;
        }
        else
        {
          v31 = v36;
        }
        v52 = *((_QWORD *)v998 + 1);
        v53 = *(_QWORD *)v52;
        v54 = *(_QWORD *)(v52 + 8);
        if ((unint64_t)(v54 - *(_QWORD *)v52) <= 0x37)
        {
          LODWORD(v988) = v31;
          if (v54)
          {
            v710 = (_QWORD *)(v52 + 24);
            v711 = v54 - 8000;
            *(_QWORD *)v1013 = v54 - 8000;
            v712 = *(unsigned int *)(v52 + 36);
            if ((_DWORD)v712 == *(_DWORD *)(v52 + 32))
            {
              v822 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v710, v712 + 1, (unint64_t)v1013);
              v712 = *(unsigned int *)(v52 + 36);
              *(_QWORD *)(*(_QWORD *)(v52 + 24) + 8 * v712) = *v822;
            }
            else
            {
              *(_QWORD *)(*v710 + 8 * v712) = v711;
            }
            *(_DWORD *)(v52 + 36) = v712 + 1;
          }
          v53 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v52 + 8) = v53 + 8000;
          v31 = v988;
        }
        *(_QWORD *)v52 = v53 + 56;
        *(_DWORD *)(v53 + 8) = v46;
        *(int32x2_t *)(v53 + 12) = vrev64_s32(v47);
        *(_DWORD *)(v53 + 20) = -1;
        *(_BYTE *)(v53 + 24) = 0;
        *(_WORD *)(v53 + 25) = 126;
        *(_QWORD *)v53 = &off_1E357ABE0;
        *(_QWORD *)(v53 + 32) = v49;
        *(_QWORD *)(v53 + 40) = 0;
        *(_BYTE *)(v53 + 48) = 0;
        *(_QWORD *)(v34 + 40) = v53;
        v34 = v53;
      }
      if (v35 == 1)
      {
LABEL_180:
        v264 = *(_DWORD *)(a1 + 7400);
        v265 = *(_DWORD *)(a1 + 7412);
        v266 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v264;
        *(_DWORD *)(a1 + 7448) = v265;
        *(_DWORD *)(a1 + 7452) = v266;
        v267 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v267 + 4) = v264;
        v268 = *(_DWORD *)(a1 + 12);
        if (!v268)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F468);
        }
        v269 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v268 - 1) + 9) & 1;
        *(_BYTE *)(v267 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v267, (uint64_t)v9, 0, v269, a5, a6, a7, a8);
        v270 = (uint64_t *)*((_QWORD *)v998 + 1);
        NewTargetExpr = *v270;
        v12 = v993;
        v271 = v991;
        v28 = v992;
        v273 = v989;
        v272 = v990;
        if ((unint64_t)(v270[1] - *v270) <= 0x27)
        {
          JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
          NewTargetExpr = *v270;
        }
        *v270 = NewTargetExpr + 40;
        *(_DWORD *)(NewTargetExpr + 8) = v272;
        *(_DWORD *)(NewTargetExpr + 12) = v273;
        *(_DWORD *)(NewTargetExpr + 16) = v271;
        *(_DWORD *)(NewTargetExpr + 20) = -1;
        *(_BYTE *)(NewTargetExpr + 24) = 0;
        *(_BYTE *)(NewTargetExpr + 25) = 126;
        *(_BYTE *)(NewTargetExpr + 26) = 0;
        *(_QWORD *)NewTargetExpr = &off_1E35851C8;
        *(_QWORD *)(NewTargetExpr + 32) = v33;
        goto LABEL_52;
      }
      if (v35 == 20 || (v35 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_363:
        NewTargetExpr = 0;
        v12 = v993;
LABEL_364:
        v28 = v992;
        goto LABEL_52;
      }
      v12 = v993;
      v28 = v992;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, "}", "object literal");
      goto LABEL_416;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 13:
      goto LABEL_92;
    case 2:
      v206 = *(_DWORD *)(a1 + 7400);
      v207 = *(_DWORD *)(a1 + 7412);
      v208 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v206;
      *(_DWORD *)(a1 + 7448) = v207;
      *(_DWORD *)(a1 + 7452) = v208;
      v209 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v209 + 4) = v206;
      v210 = *(_DWORD *)(a1 + 12);
      if (!v210)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F400);
      }
      v211 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v210 - 1) + 9) & 1;
      *(_BYTE *)(v209 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v209, (uint64_t)v9, 0, v211, a5, a6, a7, a8);
      v212 = *(_DWORD *)(a1 + 7300);
      v213 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, (uint64_t)v998);
      v214 = *(_DWORD *)(a1 + 7368);
      if (v214 == 3)
      {
        NewTargetExpr = v213;
        v215 = *(_DWORD *)(a1 + 7400);
        v216 = *(_DWORD *)(a1 + 7412);
        v217 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v215;
        *(_DWORD *)(a1 + 7448) = v216;
        *(_DWORD *)(a1 + 7452) = v217;
        v218 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v218 + 4) = v215;
        v219 = *(_DWORD *)(a1 + 12);
        if (!v219)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F450);
        }
        v220 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v219 - 1) + 9) & 1;
        *(_BYTE *)(v218 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v218, (uint64_t)v9, 0, v220, a5, a6, a7, a8);
      }
      else
      {
        if (v214 == 20 || (v214 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(a1);
        }
        NewTargetExpr = 0;
      }
      goto LABEL_178;
    case 4:
      v135 = *(_DWORD *)(a1 + 7400);
      v136 = *(_DWORD *)(a1 + 7404);
      v137 = *(_DWORD *)(a1 + 7408);
      v991 = v135;
      LODWORD(v992) = v137;
      v138 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v135;
      *(_DWORD *)(a1 + 7448) = v138;
      *(_DWORD *)(a1 + 7452) = v136;
      v139 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v139 + 4) = v135;
      v140 = *(_DWORD *)(a1 + 12);
      if (!v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3D8);
      }
      v141 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v140 - 1) + 9) & 1;
      *(_BYTE *)(v139 + 56) = 0;
      v142 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v139, (uint64_t)v9, 0, v141, a5, a6, a7, a8);
      v147 = 0;
      *(_DWORD *)(a1 + 7368) = v142;
      v28 = *(_DWORD *)(a1 + 7300);
      while (2)
      {
        if (v142 != 5)
        {
          if (v142 == 37)
          {
            *(_OWORD *)v1013 = *v994;
            *(_QWORD *)&v1018 = *(_QWORD *)v995;
            DWORD2(v1018) = *(_DWORD *)(v995 + 8);
            *(_QWORD *)&v1010 = *(_QWORD *)(a1 + 7428);
            DWORD2(v1010) = *(_DWORD *)(a1 + 7436);
            v739 = *(_DWORD *)(a1 + 7400);
            v740 = *(_DWORD *)(a1 + 7412);
            v741 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v739;
            *(_DWORD *)(a1 + 7448) = v740;
            *(_DWORD *)(a1 + 7452) = v741;
            v742 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v742 + 4) = v739;
            v743 = *(_DWORD *)(a1 + 12);
            if (!v743)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F590);
            }
            v744 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v743 - 1) + 9) & 1;
            *(_BYTE *)(v742 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v742, (uint64_t)v9, 0, v744, v143, v144, v145, v146);
            v745 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(a1, (uint64_t)v998);
            if (!v745)
            {
              if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                goto LABEL_421;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
              goto LABEL_416;
            }
            JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v998 + 1), (uint64_t)v1013, v745, (uint64_t *)&v1018, (uint64_t *)&v1010, (uint64_t *)(a1 + 7444));
            v148 = v746;
          }
          else
          {
            if (v142 == 6)
            {
              v857 = *(_DWORD *)(a1 + 7400);
              v858 = *(_DWORD *)(a1 + 7412);
              v859 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v857;
              *(_DWORD *)(a1 + 7448) = v858;
              *(_DWORD *)(a1 + 7452) = v859;
              v860 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v860 + 4) = v857;
              v861 = *(_DWORD *)(a1 + 12);
              if (!v861)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F440);
              }
              v862 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v861 - 1) + 9) & 1;
              *(_BYTE *)(v860 + 56) = 0;
              v142 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v860, (uint64_t)v9, 0, v862, v143, v144, v145, v146);
              *(_DWORD *)(a1 + 7368) = v142;
              ++v147;
              continue;
            }
            *(_DWORD *)v1013 = 0;
            *(_QWORD *)&v1013[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v1013[16] = a1;
            *(_QWORD *)(a1 + 7496) = v1013;
            v148 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, v1013);
            v149 = *(_QWORD *)&v1013[8];
            if (!v148 && *(_QWORD *)&v1013[8])
              **(_DWORD **)&v1013[8] = *(_DWORD *)v1013;
            *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = v149;
          }
          v989 = v136;
          v990 = v28;
          if (!v148)
          {
            v606 = v9;
            if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
            }
            NewTargetExpr = 0;
            goto LABEL_521;
          }
          v988 = a1 + 7444;
          v993 = v12;
          v150 = (uint64_t *)*((_QWORD *)v998 + 1);
          v151 = *v150;
          if ((unint64_t)(v150[1] - *v150) <= 0x17)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
            v151 = *v150;
          }
          *v150 = v151 + 24;
          *(_QWORD *)v151 = 0;
          *(_QWORD *)(v151 + 8) = v148;
          *(_DWORD *)(v151 + 16) = v147;
          v152 = (_QWORD *)v151;
LABEL_115:
          while (1)
          {
            v153 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 != 6)
              break;
            v154 = *(_DWORD *)(a1 + 7400);
            v155 = *(_DWORD *)(a1 + 7412);
            v156 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v154;
            *(_DWORD *)(a1 + 7448) = v155;
            *(_DWORD *)(a1 + 7452) = v156;
            v157 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v157 + 4) = v154;
            v158 = *(_DWORD *)(a1 + 12);
            if (!v158)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F2C4);
            }
            v159 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v158 - 1) + 9) & 1;
            *(_BYTE *)(v157 + 56) = 0;
            v160 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v157, (uint64_t)v9, 0, v159, a5, a6, a7, a8);
            v166 = 0;
            *(_DWORD *)(a1 + 7368) = v160;
            while (v160 != 37)
            {
              if (v160 == 5)
              {
                v600 = *(_DWORD *)(a1 + 7400);
                v601 = *(_DWORD *)(a1 + 7412);
                v602 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v600;
                *(_DWORD *)(a1 + 7448) = v601;
                *(_DWORD *)(a1 + 7452) = v602;
                v603 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v603 + 4) = v600;
                v604 = *(_DWORD *)(a1 + 12);
                if (!v604)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6F568);
                }
                v605 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v604 - 1) + 9) & 1;
                *(_BYTE *)(v603 + 56) = 0;
                v606 = v9;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v603, (uint64_t)v9, 0, v605, v161, v162, v163, v164);
                if (v166)
                {
                  v872 = v998;
                  ++*((_DWORD *)v998 + 7);
                  v607 = (uint64_t *)*((_QWORD *)v872 + 1);
                  NewTargetExpr = *v607;
                  if ((unint64_t)(v607[1] - *v607) <= 0x2F)
                    goto LABEL_721;
                }
                else
                {
                  v607 = (uint64_t *)*((_QWORD *)v998 + 1);
                  NewTargetExpr = *v607;
                  if ((unint64_t)(v607[1] - *v607) >= 0x30)
                    goto LABEL_520;
LABEL_721:
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v607);
                  NewTargetExpr = *v607;
                }
LABEL_520:
                *v607 = NewTargetExpr + 48;
                v608 = v992;
                *(_DWORD *)(NewTargetExpr + 8) = v991;
                *(_DWORD *)(NewTargetExpr + 12) = v608;
                *(_DWORD *)(NewTargetExpr + 16) = v989;
                *(_DWORD *)(NewTargetExpr + 20) = -1;
                *(_BYTE *)(NewTargetExpr + 24) = 0;
                *(_BYTE *)(NewTargetExpr + 25) = 126;
                *(_BYTE *)(NewTargetExpr + 26) = 0;
                *(_QWORD *)NewTargetExpr = &off_1E3585048;
                *(_QWORD *)(NewTargetExpr + 32) = v151;
                *(_DWORD *)(NewTargetExpr + 40) = v166;
                v12 = v993;
LABEL_521:
                v9 = v606;
LABEL_207:
                v28 = v990;
                goto LABEL_52;
              }
              if (v160 != 6)
              {
                *(_DWORD *)v1013 = 0;
                *(_QWORD *)&v1013[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v1013[16] = a1;
                *(_QWORD *)(a1 + 7496) = v1013;
                v167 = v998;
                v168 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, v1013);
                v169 = *(_QWORD *)&v1013[8];
                if (v168)
                {
                  v170 = v168;
                  *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = *(_QWORD *)&v1013[8];
                  v171 = *((_QWORD *)v167 + 1);
                  v172 = *(_QWORD *)v171;
                  v173 = *(_QWORD *)(v171 + 8);
                  if ((unint64_t)(v173 - *(_QWORD *)v171) <= 0x17)
                  {
                    if (v173)
                    {
                      v644 = (_QWORD *)(v171 + 24);
                      v645 = v173 - 8000;
                      *(_QWORD *)v1013 = v173 - 8000;
                      v646 = *(unsigned int *)(v171 + 36);
                      if ((_DWORD)v646 == *(_DWORD *)(v171 + 32))
                      {
                        v758 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v644, v646 + 1, (unint64_t)v1013);
                        v646 = *(unsigned int *)(v171 + 36);
                        *(_QWORD *)(*(_QWORD *)(v171 + 24) + 8 * v646) = *v758;
                      }
                      else
                      {
                        *(_QWORD *)(*v644 + 8 * v646) = v645;
                      }
                      *(_DWORD *)(v171 + 36) = v646 + 1;
                    }
                    v172 = WTF::fastMalloc((WTF *)0x1F40);
                    *(_QWORD *)(v171 + 8) = v172 + 8000;
                  }
                  *(_QWORD *)v171 = v172 + 24;
                  *(_QWORD *)v172 = 0;
                  *(_QWORD *)(v172 + 8) = v170;
                  *(_DWORD *)(v172 + 16) = v166;
                  *v152 = v172;
                  v152 = (_QWORD *)v172;
                  goto LABEL_115;
                }
                if (*(_QWORD *)&v1013[8])
                  **(_DWORD **)&v1013[8] = *(_DWORD *)v1013;
                *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = v169;
                if (*(_DWORD *)v9 != 20 && (*(_DWORD *)v9 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
                  goto LABEL_990;
                }
LABEL_989:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                goto LABEL_990;
              }
              v733 = *(_DWORD *)(a1 + 7400);
              v734 = *(_DWORD *)(a1 + 7412);
              v735 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v733;
              *(_DWORD *)(a1 + 7448) = v734;
              *(_DWORD *)(a1 + 7452) = v735;
              v736 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v736 + 4) = v733;
              v737 = *(_DWORD *)(a1 + 12);
              if (!v737)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F2BCLL);
              }
              v738 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v737 - 1) + 9) & 1;
              *(_BYTE *)(v736 + 56) = 0;
              v160 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v736, (uint64_t)v9, 0, v738, v161, v162, v163, v164);
              *(_DWORD *)(a1 + 7368) = v160;
              ++v166;
            }
            v555 = *(_DWORD *)(a1 + 7400);
            *(_QWORD *)&v165 = *(_QWORD *)(v996 + 60);
            *(_QWORD *)&v1018 = *(_QWORD *)v995;
            DWORD2(v1018) = *(_DWORD *)(v995 + 8);
            *(_QWORD *)&v1010 = *(_QWORD *)(a1 + 7428);
            DWORD2(v1010) = *(_DWORD *)(a1 + 7436);
            v556 = *(_DWORD *)(a1 + 7412);
            *(_DWORD *)(a1 + 7444) = v555;
            *(_DWORD *)(a1 + 7448) = v556;
            v986 = v165;
            *(_DWORD *)(a1 + 7452) = v165;
            v557 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v557 + 4) = v555;
            v558 = *(_DWORD *)(a1 + 12);
            if (!v558)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F3B0);
            }
            v987 = v555;
            v559 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v558 - 1) + 9) & 1;
            *(_BYTE *)(v557 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v557, (uint64_t)v9, 0, v559, v161, v162, v163, v164);
            *(_DWORD *)v1013 = 0;
            *(_QWORD *)&v1013[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v1013[16] = a1;
            *(_QWORD *)(a1 + 7496) = v1013;
            v560 = v998;
            v561 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, v1013);
            v562 = *(_QWORD *)&v1013[8];
            if (!v561)
            {
              if (*(_QWORD *)&v1013[8])
                **(_DWORD **)&v1013[8] = *(_DWORD *)v1013;
              *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = v562;
              if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                goto LABEL_989;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
LABEL_990:
              NewTargetExpr = 0;
              v12 = v993;
              goto LABEL_207;
            }
            *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = *(_QWORD *)&v1013[8];
            v563 = (uint64_t *)*((_QWORD *)v560 + 1);
            v564 = *v563;
            if ((unint64_t)(v563[1] - *v563) <= 0x47)
            {
              v909 = v561;
              JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v560 + 1));
              v561 = v909;
              v564 = *v563;
            }
            *v563 = v564 + 72;
            *(_DWORD *)(v564 + 8) = v987;
            *(int32x2_t *)(v564 + 12) = vrev64_s32(*(int32x2_t *)&v986);
            *(_DWORD *)(v564 + 20) = -1;
            *(_BYTE *)(v564 + 24) = 0;
            *(_BYTE *)(v564 + 25) = 126;
            *(_BYTE *)(v564 + 26) = 0;
            *(_QWORD *)v564 = &off_1E3585648;
            *(_QWORD *)(v564 + 64) = v561;
            *(_QWORD *)(v564 + 28) = v1010;
            *(_DWORD *)(v564 + 36) = DWORD2(v1010);
            *(_QWORD *)(v564 + 52) = -1;
            *(_DWORD *)(v564 + 60) = -1;
            *(_DWORD *)(v564 + 48) = DWORD2(v1018);
            *(_QWORD *)(v564 + 40) = v1018;
            v565 = *(_DWORD *)(v988 + 8);
            *(_QWORD *)(v564 + 52) = *(_QWORD *)v988;
            *(_DWORD *)(v564 + 60) = v565;
            v566 = (uint64_t *)*((_QWORD *)v560 + 1);
            v567 = *v566;
            if ((unint64_t)(v566[1] - *v566) <= 0x17)
            {
              JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v560 + 1));
              v567 = *v566;
            }
            *v566 = v567 + 24;
            *(_QWORD *)v567 = 0;
            *(_QWORD *)(v567 + 8) = v564;
            *(_DWORD *)(v567 + 16) = v166;
            *v152 = v567;
            v152 = (_QWORD *)v567;
          }
          if (v153 == 5)
          {
            v311 = *(_DWORD *)(a1 + 7400);
            v312 = *(_DWORD *)(a1 + 7412);
            v313 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v311;
            *(_DWORD *)(a1 + 7448) = v312;
            *(_DWORD *)(a1 + 7452) = v313;
            v314 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v314 + 4) = v311;
            v315 = *(_DWORD *)(a1 + 12);
            v12 = v993;
            if (!v315)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F490);
            }
            v316 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v315 - 1) + 9) & 1;
            *(_BYTE *)(v314 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v314, (uint64_t)v9, 0, v316, a5, a6, a7, a8);
            v317 = (uint64_t *)*((_QWORD *)v998 + 1);
            NewTargetExpr = *v317;
            if ((unint64_t)(v317[1] - *v317) <= 0x2F)
            {
              JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
              NewTargetExpr = *v317;
            }
            *v317 = NewTargetExpr + 48;
            v318 = v992;
            *(_DWORD *)(NewTargetExpr + 8) = v991;
            *(_DWORD *)(NewTargetExpr + 12) = v318;
            *(_DWORD *)(NewTargetExpr + 16) = v989;
            *(_DWORD *)(NewTargetExpr + 20) = -1;
            *(_BYTE *)(NewTargetExpr + 24) = 0;
            *(_BYTE *)(NewTargetExpr + 25) = 126;
            *(_BYTE *)(NewTargetExpr + 26) = 0;
            *(_QWORD *)NewTargetExpr = &off_1E3585048;
            *(_QWORD *)(NewTargetExpr + 32) = v151;
            *(_DWORD *)(NewTargetExpr + 40) = 0;
            goto LABEL_207;
          }
          v12 = v993;
          if (v153 == 37)
          {
            v28 = v990;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "The '...' operator should come before a target expression");
            goto LABEL_416;
          }
          v518 = v153 != 20 && (v153 & 0x100000) == 0;
          v28 = v990;
          if (!v518)
          {
LABEL_421:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_416;
          }
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected either a closing ']' or a ',' following an array element");
LABEL_416:
          NewTargetExpr = 0;
LABEL_52:
          *(_DWORD *)(a1 + 7300) = v28;
          goto LABEL_217;
        }
        break;
      }
      v445 = *(_DWORD *)(a1 + 7400);
      v446 = *(_DWORD *)(a1 + 7412);
      v447 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v445;
      *(_DWORD *)(a1 + 7448) = v446;
      *(_DWORD *)(a1 + 7452) = v447;
      v448 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v448 + 4) = v445;
      v449 = *(_DWORD *)(a1 + 12);
      if (!v449)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F4A8);
      }
      v450 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v449 - 1) + 9) & 1;
      *(_BYTE *)(v448 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v448, (uint64_t)v9, 0, v450, v143, v144, v145, v146);
      if (v147)
      {
        v871 = v998;
        ++*((_DWORD *)v998 + 7);
        v451 = (uint64_t *)*((_QWORD *)v871 + 1);
        NewTargetExpr = *v451;
        if ((unint64_t)(v451[1] - *v451) > 0x2F)
          goto LABEL_325;
      }
      else
      {
        v451 = (uint64_t *)*((_QWORD *)v998 + 1);
        NewTargetExpr = *v451;
        if ((unint64_t)(v451[1] - *v451) >= 0x30)
        {
LABEL_325:
          *v451 = NewTargetExpr + 48;
          v452 = v992;
          *(_DWORD *)(NewTargetExpr + 8) = v991;
          *(_DWORD *)(NewTargetExpr + 12) = v452;
          *(_DWORD *)(NewTargetExpr + 16) = v136;
          *(_DWORD *)(NewTargetExpr + 20) = -1;
          *(_BYTE *)(NewTargetExpr + 24) = 0;
          *(_BYTE *)(NewTargetExpr + 25) = 126;
          *(_BYTE *)(NewTargetExpr + 26) = 0;
          *(_QWORD *)NewTargetExpr = &off_1E3585048;
          *(_QWORD *)(NewTargetExpr + 32) = 0;
          *(_DWORD *)(NewTargetExpr + 40) = v147;
          goto LABEL_52;
        }
      }
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v451);
      NewTargetExpr = *v451;
      goto LABEL_325;
    case 8:
      v99 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::ASTBuilder>(a1, (uint64_t)v998, 1, a4, a5, a6, a7, a8);
      goto LABEL_216;
    case 9:
      v185 = *(double *)(a1 + 7376);
      v186 = *(_DWORD *)(a1 + 7400);
      v187 = *(_DWORD *)(a1 + 7404);
      v188 = *(_DWORD *)(a1 + 7408);
      v189 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v186;
      *(_DWORD *)(a1 + 7448) = v189;
      *(_DWORD *)(a1 + 7452) = v187;
      v190 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v190 + 4) = v186;
      v191 = *(_DWORD *)(a1 + 12);
      if (!v191)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3E8);
      }
      v192 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v191 - 1) + 9) & 1;
      *(_BYTE *)(v190 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v190, (uint64_t)v9, 0, v192, a5, a6, a7, a8);
      v193 = v998;
      ++*((_DWORD *)v998 + 7);
      v194 = (uint64_t *)*((_QWORD *)v193 + 1);
      NewTargetExpr = *v194;
      if ((unint64_t)(v194[1] - *v194) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v193 + 1));
        NewTargetExpr = *v194;
      }
      *v194 = NewTargetExpr + 40;
      if ((*(_QWORD *)&v185 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || v185 != (double)(int)v185
        || (v195 = 3, !(int)v185) && (*(_QWORD *)&v185 & 0x8000000000000000) != 0)
      {
        if (*(_QWORD *)&v185 >> 49 == 32766)
          v195 = 3;
        else
          v195 = 2;
      }
      *(_DWORD *)(NewTargetExpr + 8) = v186;
      *(_DWORD *)(NewTargetExpr + 12) = v188;
      *(_DWORD *)(NewTargetExpr + 16) = v187;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = v195;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      *(double *)(NewTargetExpr + 32) = v185;
      v109 = &off_1E3578920;
      goto LABEL_146;
    case 10:
      v174 = *(double *)(a1 + 7376);
      v175 = *(_DWORD *)(a1 + 7400);
      v176 = *(_DWORD *)(a1 + 7404);
      v177 = *(_DWORD *)(a1 + 7408);
      v178 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v175;
      *(_DWORD *)(a1 + 7448) = v178;
      *(_DWORD *)(a1 + 7452) = v176;
      v179 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v179 + 4) = v175;
      v180 = *(_DWORD *)(a1 + 12);
      if (!v180)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3E0);
      }
      v181 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v180 - 1) + 9) & 1;
      *(_BYTE *)(v179 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v179, (uint64_t)v9, 0, v181, a5, a6, a7, a8);
      v182 = v998;
      ++*((_DWORD *)v998 + 7);
      v183 = (uint64_t *)*((_QWORD *)v182 + 1);
      NewTargetExpr = *v183;
      if ((unint64_t)(v183[1] - *v183) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v182 + 1));
        NewTargetExpr = *v183;
      }
      *v183 = NewTargetExpr + 40;
      if ((*(_QWORD *)&v174 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || v174 != (double)(int)v174
        || (v184 = 3, !(int)v174) && (*(_QWORD *)&v174 & 0x8000000000000000) != 0)
      {
        if (*(_QWORD *)&v174 >> 49 == 32766)
          v184 = 3;
        else
          v184 = 2;
      }
      *(_DWORD *)(NewTargetExpr + 8) = v175;
      *(_DWORD *)(NewTargetExpr + 12) = v177;
      *(_DWORD *)(NewTargetExpr + 16) = v176;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = v184;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      *(double *)(NewTargetExpr + 32) = v174;
      v109 = &off_1E3578AB0;
      goto LABEL_146;
    case 11:
      v221 = *(_QWORD *)(a1 + 7376);
      v222 = v996[40];
      v223 = *(_DWORD *)(a1 + 7400);
      v224 = *(_DWORD *)(a1 + 7404);
      v225 = *(_DWORD *)(a1 + 7408);
      v226 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v223;
      *(_DWORD *)(a1 + 7448) = v226;
      *(_DWORD *)(a1 + 7452) = v224;
      v227 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v227 + 4) = v223;
      v228 = *(_DWORD *)(a1 + 12);
      if (!v228)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F408);
      }
      v229 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v228 - 1) + 9) & 1;
      *(_BYTE *)(v227 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v227, (uint64_t)v9, 0, v229, a5, a6, a7, a8);
      v230 = v998;
      ++*((_DWORD *)v998 + 7);
      v231 = (uint64_t *)*((_QWORD *)v230 + 1);
      NewTargetExpr = *v231;
      if ((unint64_t)(v231[1] - *v231) <= 0x2F)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v230 + 1));
        NewTargetExpr = *v231;
      }
      *v231 = NewTargetExpr + 48;
      *(_DWORD *)(NewTargetExpr + 8) = v223;
      *(_DWORD *)(NewTargetExpr + 12) = v225;
      *(_DWORD *)(NewTargetExpr + 16) = v224;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = 8;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      *(_QWORD *)NewTargetExpr = &off_1E3583E38;
      *(_QWORD *)(NewTargetExpr + 32) = v221;
      *(_BYTE *)(NewTargetExpr + 40) = v222;
      *(_BYTE *)(NewTargetExpr + 41) = 0;
      if (v12)
        goto LABEL_932;
      goto LABEL_219;
    case 12:
      v131 = *(_DWORD *)(a1 + 12);
      if (!v131)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3D0);
      }
      v125 = v131 - 1;
      v126 = *(_QWORD *)a1;
      v132 = *(uint64_t **)(a1 + 7376);
      v133 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v125 + 12) & 0x10) != 0)
      {
        v134 = *v132;
        if (*v132 == *(_QWORD *)(v133 + 880))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_93;
          v729 = "Cannot use 'arguments' as an identifier in static block";
          v730 = a1;
          v731 = 0;
          goto LABEL_652;
        }
      }
      else
      {
        v134 = *v132;
      }
      if (v134 != *(_QWORD *)(v133 + 896) || v996[40])
      {
        if (v996[1] && v134 == *(_QWORD *)(v133 + 880))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_93;
          v729 = "Cannot reference 'arguments' in class field initializer";
          v730 = a1;
          v731 = 1;
LABEL_652:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v730, v731, v729);
          goto LABEL_93;
        }
LABEL_212:
        *(_QWORD *)&v1018 = *(_QWORD *)v995;
        DWORD2(v1018) = *(_DWORD *)(v995 + 8);
        v319 = *(uint64_t **)(a1 + 7376);
        if (*(_BYTE *)(v126 + 720 * v125 + 14) == 2
          && *v319 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
        {
          if (v13 == 20 || (v13 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "arguments is not valid in this context");
          }
          goto LABEL_656;
        }
        *(_OWORD *)v1013 = *v994;
        v320 = *(_DWORD *)(a1 + 7400);
        v321 = *(_DWORD *)(a1 + 7412);
        v322 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v320;
        *(_DWORD *)(a1 + 7448) = v321;
        *(_DWORD *)(a1 + 7452) = v322;
        v323 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v323 + 4) = v320;
        v324 = *(_BYTE *)(v126 + 720 * v125 + 9) & 1;
        *(_BYTE *)(v323 + 56) = 0;
        v325 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v323, (uint64_t)v9, 0, v324, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v325;
        if (v325 == 38)
        {
LABEL_656:
          NewTargetExpr = 0;
          goto LABEL_217;
        }
        v326 = *(_DWORD *)(a1 + 12);
        if (!v326)
        {
          __break(0xC471u);
          JUMPOUT(0x197E6F3A8);
        }
        JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v326 - 1), *v319, *v319 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248));
        *(_QWORD *)(a1 + 7320) = v319;
        JSC::ASTBuilder::createResolve((uint64_t)v998, (uint64_t)v1013, v319, (uint64_t *)&v1018, (uint64_t *)(a1 + 7444), 1);
LABEL_216:
        NewTargetExpr = v99;
        goto LABEL_217;
      }
      *(_QWORD *)&v1010 = *(_QWORD *)v995;
      DWORD2(v1010) = *(_DWORD *)(v995 + 8);
      v1018 = *v994;
      v797 = *(_DWORD *)(a1 + 7400);
      v798 = *(_DWORD *)(a1 + 7412);
      v799 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v797;
      *(_DWORD *)(a1 + 7448) = v798;
      *(_DWORD *)(a1 + 7452) = v799;
      v800 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v800 + 4) = v797;
      v801 = *(_BYTE *)(v126 + 720 * v125 + 9) & 1;
      *(_BYTE *)(v800 + 56) = 0;
      v802 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v800, (uint64_t)v9, 0, v801, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v802;
      if (v802 == 523)
      {
        v803 = *(_QWORD *)(a1 + 7288);
        if (!*(_BYTE *)(v803 + 56))
        {
          v804 = *(_DWORD *)(a1 + 7400);
          v805 = *(_DWORD *)(a1 + 7412);
          v806 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v804;
          *(_DWORD *)(a1 + 7448) = v805;
          *(_DWORD *)(a1 + 7452) = v806;
          *(_DWORD *)(v803 + 4) = v804;
          v807 = *(_DWORD *)(a1 + 12);
          if (!v807)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F5A8);
          }
          v808 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v807 - 1) + 9) & 1;
          *(_BYTE *)(v803 + 56) = 0;
          v813 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v803, (uint64_t)v9, 0, v808, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v813;
          if (v813 == 191488)
          {
            v814 = *(_DWORD *)(a1 + 7400);
            v815 = *(_DWORD *)(a1 + 7412);
            v816 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v814;
            *(_DWORD *)(a1 + 7448) = v815;
            *(_DWORD *)(a1 + 7452) = v816;
            v817 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v817 + 4) = v814;
            v818 = *(_DWORD *)(a1 + 12);
            if (!v818)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F5B0);
            }
            v819 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v818 - 1) + 9) & 1;
            *(_BYTE *)(v817 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v817, (uint64_t)v9, 0, v819, v809, v810, v811, v812);
            v820 = 16;
          }
          else
          {
            v820 = 9;
          }
          v821 = v996[130];
          v996[130] = v820;
          v1015 = 0;
          v1014 = 0u;
          *(_OWORD *)&v1013[8] = 0u;
          *(_QWORD *)v1013 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, v998, 0, 0, 0, 1, SDWORD2(v1018), (uint64_t **)v1013, 0, 0) & 1) != 0)
          {
            NewTargetExpr = JSC::ASTBuilder::createFunctionExpr((uint64_t)v998, (uint64_t)&v1018, (uint64_t)v1013, a4, a5, a6, a7, a8);
          }
          else
          {
            if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              v908 = "Cannot parse async function expression";
              if (v813 == 191488)
                v908 = "Cannot parse async generator function expression";
              *(_QWORD *)&v1007 = v908;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 1, (const char **)&v1007);
            }
            NewTargetExpr = 0;
          }
          v996[130] = v821;
          goto LABEL_217;
        }
      }
      else if (v802 == 38)
      {
        NewTargetExpr = 0;
        goto LABEL_217;
      }
      v838 = *(_DWORD *)(a1 + 12);
      if (!v838)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F598);
      }
      JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v838 - 1), *v132, 0);
      *(_QWORD *)(a1 + 7320) = v132;
      JSC::ASTBuilder::createResolve((uint64_t)v998, (uint64_t)&v1018, v132, (uint64_t *)&v1010, (uint64_t *)(a1 + 7444), 1);
      NewTargetExpr = v839;
LABEL_217:
      if (!NewTargetExpr)
        goto LABEL_93;
      if (v12)
        goto LABEL_932;
LABEL_219:
      v327 = 0;
      v328 = 0;
LABEL_220:
      v329 = 0;
      v330 = a1 + 7444;
      v331 = *(_DWORD *)(a1 + 7368);
      v332 = a1 + 7428;
      do
      {
        if (v331 == 39)
        {
          v993 = v329;
          *(_QWORD *)&v986 = v330;
          v989 = v327;
          if ((_QWORD)v997)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_97;
            v910 = "Cannot call constructor in an optional chain";
            goto LABEL_850;
          }
          v990 = v328;
          if ((v328 & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use super as the base of an optional chain");
            goto LABEL_97;
          }
          v647 = *(_DWORD *)(a1 + 7412);
          v1018 = *(_OWORD *)(a1 + 7296);
          LODWORD(v992) = *(_DWORD *)(a1 + 7316);
          *(_OWORD *)v1013 = *(_OWORD *)(a1 + 7320);
          *(_QWORD *)&v1013[16] = *(_QWORD *)(a1 + 7336);
          v987 = *v996;
          v985 = v996[1];
          v648 = *((_DWORD *)v998 + 263);
          v649 = *(int *)(a1 + 7408);
          v650 = *(int *)(a1 + 7404);
          v651 = *(_QWORD *)(a1 + 7288);
          v652 = *(_DWORD *)v651;
          LODWORD(v984) = *(_DWORD *)(v651 + 4);
          v983.n128_u32[0] = *(unsigned __int8 *)(v651 + 56);
          v653 = *(_DWORD *)(a1 + 7400);
          *(_DWORD *)(a1 + 7444) = v653;
          v991 = v647;
          *(_DWORD *)(a1 + 7448) = v647;
          *(_DWORD *)(a1 + 7452) = v650;
          *(_DWORD *)(v651 + 4) = v653;
          v654 = *(_DWORD *)(a1 + 12);
          if (!v654)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F1C8);
          }
          v655 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v654 - 1) + 9) & 1;
          *(_BYTE *)(v651 + 56) = 0;
          v331 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v651, (uint64_t)v9, 0, v655, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v331;
          if (v331 > 8 || ((1 << v331) & 0x114) == 0)
          {
            v657 = *(_QWORD *)(a1 + 7288);
            *(_BYTE *)(v657 + 150) = 0;
            v658 = *(WTF::StringImpl **)(v657 + 152);
            *(_QWORD *)(v657 + 152) = 0;
            if (v658)
            {
              if (*(_DWORD *)v658 == 2)
              {
                WTF::StringImpl::~StringImpl(v658, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v781, v782, v783, v784, v785, v786, v787, v788);
              }
              else
              {
                *(_DWORD *)v658 -= 2;
              }
            }
            v659 = *(_QWORD *)(v657 + 88);
            v660 = *(_QWORD *)(v657 + 96);
            *(_QWORD *)(v657 + 80) = v659 + v649;
            *(_QWORD *)(v657 + 112) = v659 + v650;
            *(_DWORD *)(v657 + 20) = 0;
            *(_DWORD *)(v657 + 36) = 0;
            if (v659 + v649 >= v660)
              v661 = 0;
            else
              v661 = *(_BYTE *)(v659 + v649);
            *(_BYTE *)(v657 + 176) = v661;
            v662 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)v662 = v652;
            *(_BYTE *)(v662 + 56) = v983.n128_u8[0];
            v663 = *(_DWORD *)(a1 + 7400);
            v664 = *(_DWORD *)(a1 + 7412);
            v665 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v663;
            *(_DWORD *)(a1 + 7448) = v664;
            *(_DWORD *)(a1 + 7452) = v665;
            *(_DWORD *)(v662 + 4) = v663;
            v666 = *(_DWORD *)(a1 + 12);
            if (!v666)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F1A0);
            }
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v662, (uint64_t)v9, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v666 - 1) + 9) & 1, a5, a6, a7, a8);
            *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v984;
            *(_OWORD *)(a1 + 7296) = v1018;
            *(_DWORD *)(a1 + 7312) = v648;
            *(_DWORD *)(a1 + 7316) = v992;
            *(_OWORD *)(a1 + 7320) = *(_OWORD *)v1013;
            *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v1013[16];
            v667 = v996;
            *v996 = v987;
            v667[1] = v985;
            *((_DWORD *)v998 + 263) = v648;
            v668 = *(WTF::StringImpl **)(a1 + 7360);
            *(_QWORD *)(a1 + 7360) = 0;
            if (v668)
            {
              if (*(_DWORD *)v668 == 2)
              {
                WTF::StringImpl::~StringImpl(v668, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v789, v790, v791, v792, v793, v794, v795, v796);
              }
              else
              {
                *(_DWORD *)v668 -= 2;
              }
            }
            v331 = 19;
          }
          v334 = NewTargetExpr;
          v327 = v989;
          v328 = v990;
          v330 = v986;
          v333 = v991;
          v329 = v993;
        }
        else
        {
          v333 = 0;
          v334 = 0;
        }
        v335 = 0;
        while (v331 > 3)
        {
          switch(v331)
          {
            case 19:
              v993 = v335;
              v329 = v328;
              ++*(_DWORD *)(a1 + 7304);
              *(_QWORD *)v1013 = *(_QWORD *)v995;
              *(_DWORD *)&v1013[8] = *(_DWORD *)(v995 + 8);
              v381 = *(_DWORD *)(a1 + 7400);
              v382 = *(_DWORD *)(a1 + 7412);
              v383 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v381;
              *(_DWORD *)(a1 + 7448) = v382;
              *(_DWORD *)(a1 + 7452) = v383;
              v384 = *(unsigned int **)(a1 + 7288);
              v384[1] = v381;
              v385 = *(_DWORD *)(a1 + 12);
              if (!v385)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F2ACLL);
              }
              v386 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v385 - 1) + 9) & 1;
              *(_QWORD *)&v986 = v9;
              v387 = JSC::Lexer<unsigned char>::lexExpectIdentifier(v384, (uint64_t)v9, 1u, v386, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v387;
              v388 = *(uint64_t **)(a1 + 7376);
              v991 = v333;
              v992 = v334;
              if (v387 == 12)
              {
                v389 = 0;
              }
              else
              {
                if (v387 != 13)
                {
                  if (v387 != 20 && (v387 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                    {
                      v902 = "'?.'";
                      if (!v992)
                        v902 = "'.'";
                      *(_QWORD *)&v1018 = v902;
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*>(a1, "Expected a property name after ", (const char **)&v1018);
                    }
                    goto LABEL_97;
                  }
LABEL_937:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  goto LABEL_97;
                }
                if ((v329 & 1) != 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot access private names from super");
                  goto LABEL_97;
                }
                v705 = *(_DWORD *)(a1 + 12);
                if (!v705)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6F28CLL);
                }
                v706 = v327;
                v707 = v705 - 1;
                v708 = *(_QWORD *)a1;
                v709 = *v388;
                if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v705 - 1) + 14) == 2
                  && (JSC::Scope::hasPrivateName(*(_QWORD *)(v708 + 720 * v707 + 160), *v388) & 1) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    *(_QWORD *)&v1018 = v709;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[44],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)&v1018);
                  }
                  goto LABEL_97;
                }
                JSC::Scope::useVariable(v708 + 720 * v707, v709, 0);
                v389 = 1;
                v996[194] = 1;
                *(_QWORD *)(a1 + 7336) = v388;
                *(_DWORD *)(a1 + 7368) = 12;
                v327 = v706;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 240))(NewTargetExpr))
                *((_DWORD *)v998 + 6) |= 0x200u;
              v394 = *((_QWORD *)v998 + 1);
              v396 = *(_QWORD *)v394;
              v395 = *(_QWORD *)(v394 + 8);
              if ((unint64_t)(v395 - *(_QWORD *)v394) <= 0x57)
              {
                v989 = v327;
                if (v395)
                {
                  v747 = (_QWORD *)(v394 + 24);
                  v748 = v395 - 8000;
                  *(_QWORD *)&v1018 = v395 - 8000;
                  v749 = *(unsigned int *)(v394 + 36);
                  if ((_DWORD)v749 == *(_DWORD *)(v394 + 32))
                  {
                    v840 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v747, v749 + 1, (unint64_t)&v1018);
                    v749 = *(unsigned int *)(v394 + 36);
                    *(_QWORD *)(*(_QWORD *)(v394 + 24) + 8 * v749) = *v840;
                  }
                  else
                  {
                    *(_QWORD *)(*v747 + 8 * v749) = v748;
                  }
                  *(_DWORD *)(v394 + 36) = v749 + 1;
                }
                v396 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v394 + 8) = v396 + 8000;
                v327 = v989;
              }
              *(_QWORD *)v394 = v396 + 88;
              *(_DWORD *)(v396 + 8) = v1003;
              *(int32x2_t *)(v396 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
              *(_DWORD *)(v396 + 20) = -1;
              *(_BYTE *)(v396 + 24) = 0;
              *(_BYTE *)(v396 + 25) = 126;
              *(_BYTE *)(v396 + 26) = 0;
              *(_QWORD *)(v396 + 32) = NewTargetExpr;
              *(_QWORD *)(v396 + 40) = v388;
              *(_DWORD *)(v396 + 48) = v389;
              *(_QWORD *)v396 = &off_1E35854C8;
              *(_QWORD *)(v396 + 52) = *(_QWORD *)v1013;
              *(_DWORD *)(v396 + 60) = *(_DWORD *)&v1013[8];
              *(_QWORD *)(v396 + 76) = -1;
              *(_DWORD *)(v396 + 84) = -1;
              *(_QWORD *)(v396 + 64) = v1004;
              *(_DWORD *)(v396 + 72) = v1005;
              v397 = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v396 + 76) = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v396 + 84) = v397;
              v398 = *(_DWORD *)(a1 + 12);
              if ((v329 & 1) != 0)
              {
                if (!v398)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6F2A4);
                }
                v691 = *(_QWORD *)a1;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v398 - 1) + 11) & 8) != 0)
                {
                  v692 = *(_DWORD *)(a1 + 12);
                  while (1)
                  {
                    v693 = v692;
                    if (v692 == 1)
                      break;
                    --v692;
                    if ((*(_BYTE *)(v691 + 720 * (v693 - 1) + 12) & 0x40) != 0)
                      goto LABEL_600;
                  }
                  v692 = 0;
LABEL_600:
                  if (v398 <= v693 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F294);
                  }
                  *(_BYTE *)(v691 + 720 * v692 + 32) |= 0x10u;
                }
              }
              v399 = *(_DWORD *)(a1 + 7400);
              v400 = *(_DWORD *)(a1 + 7412);
              v401 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v399;
              *(_DWORD *)(a1 + 7448) = v400;
              *(_DWORD *)(a1 + 7452) = v401;
              v402 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v402 + 4) = v399;
              v9 = (char *)v986;
              v333 = v991;
              if (!v398)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F29CLL);
              }
              v403 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v398 - 1) + 9) & 1;
              *(_BYTE *)(v402 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v402, (uint64_t)v9, 0, v403, v390, v391, v392, v393);
              break;
            case 4:
              v993 = v335;
              v990 = v328;
              v991 = v333;
              v988 = v332;
              ++*(_DWORD *)(a1 + 7304);
              *(_QWORD *)v1013 = *(_QWORD *)v995;
              *(_DWORD *)&v1013[8] = *(_DWORD *)(v995 + 8);
              v422 = *(_DWORD *)(a1 + 7400);
              v423 = *(_DWORD *)(a1 + 7412);
              v424 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v422;
              *(_DWORD *)(a1 + 7448) = v423;
              *(_DWORD *)(a1 + 7452) = v424;
              v425 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v425 + 4) = v422;
              v426 = *(_DWORD *)(a1 + 12);
              if (!v426)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F284);
              }
              v427 = v330;
              v428 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v426 - 1) + 9) & 1;
              *(_BYTE *)(v425 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v425, (uint64_t)v9, 0, v428, a5, a6, a7, a8);
              v429 = *(_DWORD *)(a1 + 7300);
              v430 = *(_DWORD *)(a1 + 7296);
              v431 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, (uint64_t)v998);
              if (!v431)
              {
                if (*(_DWORD *)v9 != 20 && (*(_DWORD *)v9 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subscript expression");
                  goto LABEL_780;
                }
                goto LABEL_779;
              }
              v432 = v431;
              v992 = v334;
              v989 = v327;
              v433 = *(_DWORD *)(a1 + 7296);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 240))(NewTargetExpr))
                *((_DWORD *)v998 + 6) |= 0x200u;
              v434 = (uint64_t *)*((_QWORD *)v998 + 1);
              v396 = *v434;
              if ((unint64_t)(v434[1] - *v434) <= 0x57)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                v396 = *v434;
              }
              *v434 = v396 + 88;
              *(_DWORD *)(v396 + 8) = v1003;
              *(int32x2_t *)(v396 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
              *(_DWORD *)(v396 + 20) = -1;
              *(_BYTE *)(v396 + 24) = 0;
              *(_BYTE *)(v396 + 25) = 126;
              *(_BYTE *)(v396 + 26) = 0;
              *(_QWORD *)v396 = &off_1E3585348;
              *(_QWORD *)(v396 + 64) = NewTargetExpr;
              *(_QWORD *)(v396 + 72) = v432;
              *(_BYTE *)(v396 + 80) = v430 != v433;
              *(_QWORD *)(v396 + 28) = *(_QWORD *)v1013;
              *(_DWORD *)(v396 + 36) = *(_DWORD *)&v1013[8];
              *(_QWORD *)(v396 + 52) = -1;
              *(_DWORD *)(v396 + 60) = -1;
              *(_QWORD *)(v396 + 40) = v1004;
              *(_DWORD *)(v396 + 48) = v1005;
              v435 = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v396 + 52) = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v396 + 60) = v435;
              if ((v990 & 1) != 0)
              {
                v894 = *(_DWORD *)(a1 + 12);
                if (!v894)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6F27CLL);
                }
                v895 = *(_QWORD *)a1;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v894 - 1) + 11) & 8) != 0)
                {
                  v896 = *(_DWORD *)(a1 + 12);
                  while (1)
                  {
                    v897 = v896;
                    if (v896 == 1)
                      break;
                    --v896;
                    if ((*(_BYTE *)(v895 + 720 * (v897 - 1) + 12) & 0x40) != 0)
                      goto LABEL_765;
                  }
                  v896 = 0;
LABEL_765:
                  if (v894 <= v897 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F204);
                  }
                  *(_BYTE *)(v895 + 720 * v896 + 32) |= 0x10u;
                }
              }
              v436 = *(_DWORD *)v9;
              v327 = v989;
              v333 = v991;
              if (*(_DWORD *)v9 != 5)
              {
                if (v436 != 20 && (v436 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, "]", "subscript expression");
                  goto LABEL_780;
                }
LABEL_779:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_780:
                v129 = 0;
                *(_DWORD *)(a1 + 7300) = v429;
                goto LABEL_237;
              }
              v437 = *(_DWORD *)(a1 + 7400);
              v438 = *(_DWORD *)(a1 + 7412);
              v439 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v437;
              *(_DWORD *)(a1 + 7448) = v438;
              *(_DWORD *)(a1 + 7452) = v439;
              v440 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v440 + 4) = v437;
              v441 = *(_DWORD *)(a1 + 12);
              if (!v441)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F274);
              }
              v330 = v427;
              v442 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v441 - 1) + 9) & 1;
              *(_BYTE *)(v440 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v440, (uint64_t)v9, 0, v442, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7300) = v429;
              v332 = v988;
              v329 = v990;
              break;
            case 8:
              v993 = v335;
              v992 = v334;
              if (v334)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use tagged templates in an optional chain");
                goto LABEL_97;
              }
              v329 = v328;
              if ((v328 & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_97;
                v910 = "Cannot use super as tag for tagged templates";
LABEL_850:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v910);
                goto LABEL_97;
              }
              *(_QWORD *)v1013 = *(_QWORD *)v995;
              *(_DWORD *)&v1013[8] = *(_DWORD *)(v995 + 8);
              v898 = *(_DWORD *)(a1 + 7300);
              v899 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::ASTBuilder>(a1, (uint64_t)v998, 0, a4, a5, a6, a7, a8);
              if (!v899)
              {
                if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse template literal");
                }
                v129 = 0;
                *(_DWORD *)(a1 + 7300) = v898;
                goto LABEL_237;
              }
              JSC::ASTBuilder::createTaggedTemplate(*((JSC::ParserArena **)v998 + 1), (uint64_t)&v1003, NewTargetExpr, v899, &v1004, (uint64_t *)v1013, (uint64_t *)v330);
              v396 = v900;
              v996[193] = 1;
              *(_DWORD *)(a1 + 7300) = v898;
              break;
            default:
              goto LABEL_232;
          }
LABEL_231:
          v335 = v993;
          v331 = *(_DWORD *)v9;
          NewTargetExpr = v396;
          v328 = 0;
          v334 = v992;
        }
        if (v331 == 2)
        {
          v993 = v335;
          v989 = v327;
          v990 = v328;
          v988 = v332;
          v992 = v334;
          if ((v328 & 1) != 0)
          {
            if (v996[1])
            {
              if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                goto LABEL_937;
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_97;
              v903 = "super call is not valid in class field initializer context";
              v904 = a1;
              v905 = 1;
LABEL_794:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v904, v905, v903);
              goto LABEL_97;
            }
            ++*(_DWORD *)(a1 + 7304);
            v590 = *(_DWORD *)(a1 + 7300);
            if ((_QWORD)v997)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with super call");
              v415 = v590;
              goto LABEL_452;
            }
            v987 = *(_DWORD *)(a1 + 7300);
          }
          else
          {
            ++*(_DWORD *)(a1 + 7304);
            v987 = *(_DWORD *)(a1 + 7300);
            if ((_QWORD)v997)
            {
              v1008 = *(_QWORD *)v330;
              v1009 = *(_DWORD *)(v330 + 8);
              v474 = *(_DWORD *)v9;
              if (*(_DWORD *)v9 != 2)
              {
                v415 = v987;
                if (v474 == 20 || (v474 & 0x100000) != 0)
                {
LABEL_446:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
                }
                goto LABEL_447;
              }
              v475 = *(_DWORD *)(a1 + 7400);
              v476 = *(_DWORD *)(a1 + 7412);
              v477 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v475;
              *(_DWORD *)(a1 + 7448) = v476;
              *(_DWORD *)(a1 + 7452) = v477;
              v478 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v478 + 4) = v475;
              v479 = *(_DWORD *)(a1 + 12);
              if (!v479)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F198);
              }
              v480 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v479 - 1) + 9) & 1;
              *(_BYTE *)(v478 + 56) = 0;
              v481 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v478, (uint64_t)v9, 0, v480, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v481;
              v1018 = *v994;
              v415 = v987;
              if (v481 != 3)
              {
                v1016 = *(_QWORD *)v995;
                v1017 = *(_DWORD *)(v995 + 8);
                v984 = a1 + 7428;
                v1011 = *(_QWORD *)(a1 + 7428);
                v1012 = *(_DWORD *)(a1 + 7436);
                LODWORD(v986) = *(_DWORD *)(a1 + 7296);
                if (v481 == 37)
                {
                  *(_OWORD *)v1013 = *v994;
                  *(_QWORD *)&v1010 = *(_QWORD *)v995;
                  DWORD2(v1010) = *(_DWORD *)(v995 + 8);
                  *(_QWORD *)&v1007 = *(_QWORD *)v984;
                  DWORD2(v1007) = *(_DWORD *)(v984 + 8);
                  v848 = *(_DWORD *)(a1 + 7400);
                  v849 = *(_DWORD *)(a1 + 7412);
                  v850 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v848;
                  *(_DWORD *)(a1 + 7448) = v849;
                  *(_DWORD *)(a1 + 7452) = v850;
                  v851 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v851 + 4) = v848;
                  v852 = *(_DWORD *)(a1 + 12);
                  if (!v852)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F188);
                  }
                  v853 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v852 - 1) + 9) & 1;
                  *(_BYTE *)(v851 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v851, (uint64_t)v9, 0, v853, v482, v483, v484, v485);
                  v854 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
                  if (*(_QWORD *)(a1 + 7360))
                  {
                    v488 = 0;
                    v486 = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v1006 = *(_QWORD *)v330;
                    DWORD2(v1006) = *(_DWORD *)(v330 + 8);
                    SpreadExpression = JSC::ASTBuilder::createSpreadExpression((JSC::ParserArena *)*((_QWORD *)v998 + 1), (uint64_t)v1013, v854, (uint64_t *)&v1010, (uint64_t *)&v1007, (uint64_t *)&v1006);
                    v486 = v855;
                    v488 = 1;
                  }
                }
                else
                {
                  *(_DWORD *)v1013 = 0;
                  *(_QWORD *)&v1013[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v1013[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v1013;
                  v486 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, v1013);
                  v488 = 0;
                  *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = *(_QWORD *)&v1013[8];
                }
                v489 = *(_DWORD *)v9;
                if (v486)
                {
                  if (v489 == 37)
                  {
                    v415 = v987;
                    if (!*(_QWORD *)(a1 + 7360))
LABEL_698:
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
                  }
                  else
                  {
                    v490 = v333;
                    v491 = v330;
                    v985 = v488 != 0;
                    v492 = (uint64_t *)*((_QWORD *)v998 + 1);
                    v493 = *v492;
                    if ((unint64_t)(v492[1] - *v492) <= 0x2F)
                    {
                      JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                      v493 = *v492;
                    }
                    *v492 = v493 + 48;
                    *(_DWORD *)(v493 + 8) = v1018;
                    *(int32x2_t *)(v493 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1018 + 4));
                    *(_DWORD *)(v493 + 20) = -1;
                    *(_BYTE *)(v493 + 24) = 0;
                    *(_BYTE *)(v493 + 25) = 126;
                    *(_BYTE *)(v493 + 26) = 0;
                    *(_QWORD *)v493 = &off_1E3585948;
                    *(_QWORD *)(v493 + 32) = 0;
                    *(_QWORD *)(v493 + 40) = v486;
                    for (i = v493; ; i = v504)
                    {
                      v495 = *(_DWORD *)v9;
                      v415 = v987;
                      if (*(_DWORD *)v9 == 3)
                        break;
                      if (v495 != 6)
                      {
                        if (v495 == 20 || (v495 & 0x100000) != 0)
                          goto LABEL_446;
                        if (!*(_QWORD *)(a1 + 7360))
                          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                        goto LABEL_447;
                      }
                      v496 = *(_DWORD *)(a1 + 7400);
                      SpreadExpression.n128_u64[0] = *(_QWORD *)(v996 + 60);
                      v497 = *(_DWORD *)(a1 + 7412);
                      *(_DWORD *)(a1 + 7444) = v496;
                      *(_DWORD *)(a1 + 7448) = v497;
                      v983 = SpreadExpression;
                      *(_DWORD *)(a1 + 7452) = SpreadExpression.n128_u32[0];
                      v498 = *(_QWORD *)(a1 + 7288);
                      *(_DWORD *)(v498 + 4) = v496;
                      v499 = *(_DWORD *)(a1 + 12);
                      if (!v499)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E6F264);
                      }
                      v500 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v499 - 1) + 9) & 1;
                      *(_BYTE *)(v498 + 56) = 0;
                      v501 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v498, (uint64_t)v9, 0, v500, a5, a6, a7, a8);
                      *(_DWORD *)(a1 + 7368) = v501;
                      if (v501 == 3)
                        break;
                      *(_QWORD *)&v982 = i;
                      if (v501 == 37)
                      {
                        *(_OWORD *)v1013 = *v994;
                        *(_QWORD *)&v1010 = *(_QWORD *)v995;
                        DWORD2(v1010) = *(_DWORD *)(v995 + 8);
                        *(_QWORD *)&v1007 = *(_QWORD *)v984;
                        DWORD2(v1007) = *(_DWORD *)(v984 + 8);
                        v863 = *(_DWORD *)(a1 + 7400);
                        v864 = *(_DWORD *)(a1 + 7412);
                        v865 = *(_DWORD *)(a1 + 7404);
                        *(_DWORD *)(a1 + 7444) = v863;
                        *(_DWORD *)(a1 + 7448) = v864;
                        *(_DWORD *)(a1 + 7452) = v865;
                        v866 = *(_QWORD *)(a1 + 7288);
                        *(_DWORD *)(v866 + 4) = v863;
                        v867 = *(_DWORD *)(a1 + 12);
                        if (!v867)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197E6F25CLL);
                        }
                        v868 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v867 - 1) + 9) & 1;
                        *(_BYTE *)(v866 + 56) = 0;
                        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v866, (uint64_t)v9, 0, v868, a5, a6, a7, a8);
                        v869 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
                        if (*(_QWORD *)(a1 + 7360))
                        {
                          v502 = 0;
                        }
                        else
                        {
                          *(_QWORD *)&v1006 = *(_QWORD *)v491;
                          DWORD2(v1006) = *(_DWORD *)(v491 + 8);
                          JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v998 + 1), (uint64_t)v1013, v869, (uint64_t *)&v1010, (uint64_t *)&v1007, (uint64_t *)&v1006);
                          v502 = v870;
                          v488 = 1;
                        }
                        v415 = v987;
                      }
                      else
                      {
                        *(_DWORD *)v1013 = 0;
                        *(_QWORD *)&v1013[8] = *(_QWORD *)(a1 + 7496);
                        *(_QWORD *)&v1013[16] = a1;
                        *(_QWORD *)(a1 + 7496) = v1013;
                        v502 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, v1013);
                        v488 = 0;
                        *(_QWORD *)(*(_QWORD *)&v1013[16] + 7496) = *(_QWORD *)&v1013[8];
                      }
                      if (*(_QWORD *)(a1 + 7360))
                        goto LABEL_447;
                      if (*(_DWORD *)v9 == 37)
                        goto LABEL_698;
                      if (v488 == 1)
                        v985 = 1;
                      v503 = (uint64_t *)*((_QWORD *)v998 + 1);
                      v504 = *v503;
                      if ((unint64_t)(v503[1] - *v503) <= 0x2F)
                      {
                        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                        v504 = *v503;
                      }
                      *v503 = v504 + 48;
                      *(_DWORD *)(v504 + 8) = v496;
                      SpreadExpression.n128_u64[1] = v983.n128_u64[1];
                      *(int32x2_t *)(v504 + 12) = vrev64_s32((int32x2_t)v983.n128_u64[0]);
                      *(_DWORD *)(v504 + 20) = -1;
                      *(_BYTE *)(v504 + 24) = 0;
                      *(_BYTE *)(v504 + 25) = 126;
                      *(_BYTE *)(v504 + 26) = 0;
                      *(_QWORD *)v504 = &off_1E3585948;
                      *(_QWORD *)(v504 + 32) = 0;
                      *(_QWORD *)(v504 + 40) = v502;
                      *(_QWORD *)(v982 + 32) = v504;
                    }
                    v505 = *(_DWORD *)(a1 + 7400);
                    v506 = *(_DWORD *)(a1 + 7412);
                    v507 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v505;
                    *(_DWORD *)(a1 + 7448) = v506;
                    *(_DWORD *)(a1 + 7452) = v507;
                    v508 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v508 + 4) = v505;
                    v509 = *(_DWORD *)(a1 + 12);
                    if (!v509)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E6F26CLL);
                    }
                    v510 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v509 - 1) + 9) & 1;
                    *(_BYTE *)(v508 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v508, (uint64_t)v9, 0, v510, a5, a6, a7, a8);
                    v330 = v491;
                    v511 = v986;
                    if ((v985 & 1) == 0)
                    {
                      v512 = *(_DWORD *)(a1 + 7296);
                      v513 = (uint64_t *)*((_QWORD *)v998 + 1);
                      Arguments = *v513;
                      if ((unint64_t)(v513[1] - *v513) <= 0xF)
                      {
                        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                        Arguments = *v513;
                      }
                      *v513 = Arguments + 16;
                      *(_QWORD *)Arguments = v493;
                      *(_BYTE *)(Arguments + 8) = v511 != v512;
                      v333 = v490;
                      v415 = v987;
                      goto LABEL_405;
                    }
                    v843 = v998;
                    ElementList = JSC::ASTBuilder::createElementList(v998, (JSC::ArgumentListNode *)v493);
                    JSC::ASTBuilder::createArray(*((JSC::ParserArena **)v843 + 1), (uint64_t)&v1018, ElementList);
                    JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v843 + 1), (uint64_t)&v1018, v845, &v1016, &v1011, (uint64_t *)v330);
                    JSC::ASTBuilder::createArgumentsList(*((_QWORD *)v843 + 1), (uint64_t)&v1018, v846);
                    Arguments = JSC::ASTBuilder::createArguments(*((JSC::ASTBuilder **)v843 + 1), v847, v511 != *(_DWORD *)(a1 + 7296));
                    v333 = v490;
                    v415 = v987;
                    if (Arguments)
                      goto LABEL_405;
                  }
                }
                else if (v489 == 20 || (v489 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  v415 = v987;
                }
                else
                {
                  v415 = v987;
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
                }
LABEL_447:
                if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
                }
LABEL_452:
                v129 = 0;
                *(_DWORD *)(a1 + 7300) = v415;
                goto LABEL_237;
              }
              v548 = *(_DWORD *)(a1 + 7400);
              v549 = *(_DWORD *)(a1 + 7412);
              v550 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v548;
              *(_DWORD *)(a1 + 7448) = v549;
              *(_DWORD *)(a1 + 7452) = v550;
              v551 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v551 + 4) = v548;
              v552 = *(_DWORD *)(a1 + 12);
              if (!v552)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F190);
              }
              v553 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v552 - 1) + 9) & 1;
              *(_BYTE *)(v551 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v551, (uint64_t)v9, 0, v553, v482, v483, v484, v485);
              v554 = (uint64_t *)*((_QWORD *)v998 + 1);
              Arguments = *v554;
              if ((unint64_t)(v554[1] - *v554) <= 0xF)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                Arguments = *v554;
              }
              *v554 = Arguments + 16;
              *(_QWORD *)Arguments = 0;
              *(_BYTE *)(Arguments + 8) = 0;
LABEL_405:
              v515 = (uint64_t *)*((_QWORD *)v998 + 1);
              v516 = *v515;
              if ((unint64_t)(v515[1] - *v515) <= 0x4F)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                v516 = *v515;
              }
              *v515 = v516 + 80;
              *(_QWORD *)&v997 = v997 - 1;
              *(_DWORD *)(v516 + 8) = v1003;
              *(int32x2_t *)(v516 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
              *(_DWORD *)(v516 + 20) = -1;
              *(_BYTE *)(v516 + 24) = 0;
              *(_BYTE *)(v516 + 25) = 126;
              *(_BYTE *)(v516 + 26) = 0;
              *(_QWORD *)v516 = &off_1E3585AC8;
              *(_QWORD *)(v516 + 64) = NewTargetExpr;
              *(_QWORD *)(v516 + 72) = Arguments;
              *(_QWORD *)(v516 + 28) = v1008;
              *(_DWORD *)(v516 + 36) = v1009;
              *(_QWORD *)(v516 + 52) = -1;
              *(_DWORD *)(v516 + 60) = -1;
              *(_QWORD *)(v516 + 40) = v1004;
              *(_DWORD *)(v516 + 48) = v1005;
              v517 = *(_DWORD *)(v330 + 8);
              *(_QWORD *)(v516 + 52) = *(_QWORD *)v330;
              NewTargetExpr = v516;
              *(_DWORD *)(v516 + 60) = v517;
              goto LABEL_292;
            }
          }
          v991 = v333;
          v339 = *(_DWORD *)(a1 + 12);
          if (!v339)
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F1B0);
          }
          v340 = *(unsigned int *)(*(_QWORD *)a1 + 720 * (v339 - 1) + 180);
          v999 = *(_QWORD *)v330;
          v1000 = *(_DWORD *)(v330 + 8);
          v1013[0] = 0;
          BYTE8(v1014) = 0;
          v341 = *(_QWORD *)(a1 + 7216);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 136))(NewTargetExpr))
          {
            v418 = *(_QWORD *)(*(_QWORD *)(v341 + 41952) + 48);
            v419 = **(_QWORD **)(NewTargetExpr + 40);
            if (v419 == *(_QWORD *)(v418 + 320) || v419 == *(_QWORD *)(v418 + 80))
            {
              if (BYTE8(v1014))
              {
                v420 = *(_QWORD *)&v1013[8];
                if (*(_QWORD *)&v1013[8])
                {
                  v856 = v1014;
                  if ((unint64_t)v1014 <= *(_QWORD *)(*(_QWORD *)&v1013[8] + 24))
                    v856 = *(_QWORD *)(*(_QWORD *)&v1013[8] + 24);
                  *(_QWORD *)(*(_QWORD *)&v1013[8] + 24) = v856;
                }
                *(_QWORD *)(*(_QWORD *)v1013 + 7528) = v420;
              }
              v421 = *(_QWORD *)(a1 + 7528);
              *(_QWORD *)v1013 = a1;
              *(_QWORD *)&v1013[8] = v421;
              if (v421)
                v421 = *(_QWORD *)(v421 + 16) + 1;
              *(_QWORD *)&v1013[16] = v421;
              *(_QWORD *)&v1014 = v421;
              *(_QWORD *)(a1 + 7528) = v1013;
              BYTE8(v1014) = 1;
            }
          }
          v343 = *(_DWORD *)v9;
          if (*(_DWORD *)v9 == 2)
          {
            v344 = *(_DWORD *)(a1 + 7400);
            v345 = *(_DWORD *)(a1 + 7412);
            v346 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v344;
            *(_DWORD *)(a1 + 7448) = v345;
            *(_DWORD *)(a1 + 7452) = v346;
            v347 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v347 + 4) = v344;
            v348 = *(_DWORD *)(a1 + 12);
            if (!v348)
            {
              __break(0xC471u);
              JUMPOUT(0x197E6F1A8);
            }
            v349 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v348 - 1) + 9) & 1;
            *(_BYTE *)(v347 + 56) = 0;
            v350 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v347, (uint64_t)v9, 0, v349, v342, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v350;
            v355 = *v994;
            v1010 = *v994;
            if (v350 == 3)
            {
              v454 = *(_DWORD *)(a1 + 7400);
              v455 = *(_DWORD *)(a1 + 7412);
              v456 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v454;
              *(_DWORD *)(a1 + 7448) = v455;
              *(_DWORD *)(a1 + 7452) = v456;
              v457 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v457 + 4) = v454;
              v458 = *(_DWORD *)(a1 + 12);
              if (!v458)
              {
                __break(0xC471u);
                JUMPOUT(0x197E6F1B8);
              }
              v459 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v458 - 1) + 9) & 1;
              *(_BYTE *)(v457 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v457, (uint64_t)v9, 0, v459, v351, v352, v353, v354);
              v460 = (uint64_t *)*((_QWORD *)v998 + 1);
              a5 = *v460;
              if ((unint64_t)(v460[1] - *v460) <= 0xF)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                a5 = *v460;
              }
              *v460 = a5 + 16;
              *(_QWORD *)a5 = 0;
              *(_BYTE *)(a5 + 8) = 0;
            }
            else
            {
              v1011 = *(_QWORD *)v995;
              v1012 = *(_DWORD *)(v995 + 8);
              v1008 = *(_QWORD *)v988;
              v1009 = *(_DWORD *)(a1 + 7436);
              v356 = *(unsigned int *)(a1 + 7296);
              if (v350 == 37)
              {
                v983.n128_u64[0] = v340;
                v694 = v330;
                v695 = *(_DWORD *)(a1 + 7400);
                *(_QWORD *)&v355 = *(_QWORD *)(v996 + 60);
                *(_QWORD *)&v1007 = *(_QWORD *)v995;
                DWORD2(v1007) = *(_DWORD *)(v995 + 8);
                *(_QWORD *)&v1006 = *(_QWORD *)v988;
                DWORD2(v1006) = *(_DWORD *)(v988 + 8);
                v696 = *(_DWORD *)(a1 + 7412);
                *(_DWORD *)(a1 + 7444) = v695;
                *(_DWORD *)(a1 + 7448) = v696;
                v997 = v355;
                *(_DWORD *)(a1 + 7452) = v355;
                v697 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v697 + 4) = v695;
                v698 = *(_DWORD *)(a1 + 12);
                if (!v698)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E6F224);
                }
                v699 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v698 - 1) + 9) & 1;
                *(_BYTE *)(v697 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v697, (uint64_t)v9, 0, v699, v351, v352, v353, v354);
                LODWORD(v1018) = 0;
                *((_QWORD *)&v1018 + 1) = *(_QWORD *)(a1 + 7496);
                v1019 = a1;
                *(_QWORD *)(a1 + 7496) = &v1018;
                v700 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, &v1018);
                *(_QWORD *)(v1019 + 7496) = *((_QWORD *)&v1018 + 1);
                if (*(_QWORD *)(a1 + 7360))
                {
                  v360 = 0;
                  v357 = 0;
                }
                else
                {
                  v701 = v700;
                  *(_QWORD *)&v1018 = *(_QWORD *)v694;
                  DWORD2(v1018) = *(_DWORD *)(v694 + 8);
                  v702 = (uint64_t *)*((_QWORD *)v998 + 1);
                  v357 = *v702;
                  if ((unint64_t)(v702[1] - *v702) <= 0x47)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                    v357 = *v702;
                  }
                  *v702 = v357 + 72;
                  *(_DWORD *)(v357 + 8) = v695;
                  *((_QWORD *)&v359 + 1) = *((_QWORD *)&v997 + 1);
                  *(int32x2_t *)(v357 + 12) = vrev64_s32(*(int32x2_t *)&v997);
                  *(_DWORD *)(v357 + 20) = -1;
                  *(_BYTE *)(v357 + 24) = 0;
                  *(_BYTE *)(v357 + 25) = 126;
                  *(_BYTE *)(v357 + 26) = 0;
                  *(_QWORD *)v357 = &off_1E3585648;
                  *(_QWORD *)(v357 + 64) = v701;
                  *(_QWORD *)(v357 + 28) = v1006;
                  *(_DWORD *)(v357 + 36) = DWORD2(v1006);
                  *(_QWORD *)(v357 + 40) = v1007;
                  *(_DWORD *)(v357 + 48) = DWORD2(v1007);
                  v703 = v1018;
                  *(_DWORD *)(v357 + 60) = DWORD2(v1018);
                  v360 = 1;
                  *(_QWORD *)(v357 + 52) = v703;
                }
                v330 = v694;
                v340 = v983.n128_u64[0];
              }
              else
              {
                LODWORD(v1018) = 0;
                *((_QWORD *)&v1018 + 1) = *(_QWORD *)(a1 + 7496);
                v1019 = a1;
                *(_QWORD *)(a1 + 7496) = &v1018;
                v357 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, &v1018);
                v360 = 0;
                *(_QWORD *)(v1019 + 7496) = *((_QWORD *)&v1018 + 1);
              }
              v361 = *(_DWORD *)v9;
              if (v357)
              {
                *(_QWORD *)&v986 = v330;
                if (v361 != 37)
                {
                  LODWORD(v997) = v360 != 0;
                  v362 = *((_QWORD *)v998 + 1);
                  v364 = *(_QWORD *)v362;
                  v363 = *(_QWORD *)(v362 + 8);
                  if ((unint64_t)(v363 - *(_QWORD *)v362) <= 0x2F)
                  {
                    v985 = v360;
                    v983.n128_u64[0] = v340;
                    v704 = v357;
                    if (v363)
                    {
                      v775 = (_QWORD *)(v362 + 24);
                      v776 = v363 - 8000;
                      *(_QWORD *)&v1018 = v363 - 8000;
                      v777 = *(unsigned int *)(v362 + 36);
                      if ((_DWORD)v777 == *(_DWORD *)(v362 + 32))
                      {
                        v841 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v775, v777 + 1, (unint64_t)&v1018);
                        v777 = *(unsigned int *)(v362 + 36);
                        *(_QWORD *)(*(_QWORD *)(v362 + 24) + 8 * v777) = *v841;
                      }
                      else
                      {
                        *(_QWORD *)(*v775 + 8 * v777) = v776;
                      }
                      *(_DWORD *)(v362 + 36) = v777 + 1;
                    }
                    v364 = WTF::fastMalloc((WTF *)0x1F40);
                    *(_QWORD *)(v362 + 8) = v364 + 8000;
                    v357 = v704;
                    v340 = v983.n128_u64[0];
                    v360 = v985;
                  }
                  *(_QWORD *)v362 = v364 + 48;
                  v366 = DWORD1(v1010);
                  v365 = DWORD2(v1010);
                  v985 = v1010;
                  *(_DWORD *)(v364 + 8) = v1010;
                  *(_DWORD *)(v364 + 12) = v365;
                  *(_DWORD *)(v364 + 16) = v366;
                  *(_DWORD *)(v364 + 20) = -1;
                  *(_BYTE *)(v364 + 24) = 0;
                  *(_BYTE *)(v364 + 25) = 126;
                  *(_BYTE *)(v364 + 26) = 0;
                  *(_QWORD *)(v364 + 32) = 0;
                  *(_QWORD *)(v364 + 40) = v357;
                  v367 = v364;
                  *(_QWORD *)v364 = &off_1E3585948;
                  while (1)
                  {
                    v368 = *(_DWORD *)v9;
                    if (*(_DWORD *)v9 == 3)
                      break;
                    if (v368 != 6)
                    {
                      if (v368 == 20 || (v368 & 0x100000) != 0)
                      {
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                        goto LABEL_336;
                      }
                      v330 = v986;
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                      goto LABEL_366;
                    }
                    v983.n128_u64[0] = v367;
                    v369 = *(_DWORD *)(a1 + 7400);
                    *(_QWORD *)&v359 = *(_QWORD *)(v996 + 60);
                    v370 = *(_DWORD *)(a1 + 7412);
                    *(_DWORD *)(a1 + 7444) = v369;
                    *(_DWORD *)(a1 + 7448) = v370;
                    v982 = v359;
                    *(_DWORD *)(a1 + 7452) = v359;
                    v371 = *(_QWORD *)(a1 + 7288);
                    LODWORD(v981) = v369;
                    *(_DWORD *)(v371 + 4) = v369;
                    v372 = *(_DWORD *)(a1 + 12);
                    if (!v372)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E6F214);
                    }
                    v373 = v360;
                    v374 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v372 - 1) + 9) & 1;
                    *(_BYTE *)(v371 + 56) = 0;
                    v375 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v371, (uint64_t)v9, 0, v374, v358, a6, a7, a8);
                    *(_DWORD *)(a1 + 7368) = v375;
                    if (v375 == 3)
                      break;
                    LODWORD(v984) = v366;
                    if (v375 == 37)
                    {
                      LODWORD(v980) = v365;
                      v1018 = *v994;
                      *(_QWORD *)&v1007 = *(_QWORD *)v995;
                      DWORD2(v1007) = *(_DWORD *)(v995 + 8);
                      *(_QWORD *)&v1006 = *(_QWORD *)v988;
                      DWORD2(v1006) = *(_DWORD *)(v988 + 8);
                      v750 = *(_DWORD *)(a1 + 7400);
                      v751 = *(_DWORD *)(a1 + 7412);
                      v752 = *(_DWORD *)(a1 + 7404);
                      *(_DWORD *)(a1 + 7444) = v750;
                      *(_DWORD *)(a1 + 7448) = v751;
                      *(_DWORD *)(a1 + 7452) = v752;
                      v753 = *(_QWORD *)(a1 + 7288);
                      *(_DWORD *)(v753 + 4) = v750;
                      v754 = *(_DWORD *)(a1 + 12);
                      if (!v754)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E6F20CLL);
                      }
                      v755 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v754 - 1) + 9) & 1;
                      *(_BYTE *)(v753 + 56) = 0;
                      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v753, (uint64_t)v9, 0, v755, v358, a6, a7, a8);
                      v756 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
                      if (*(_QWORD *)(a1 + 7360))
                      {
                        v376 = 0;
                      }
                      else
                      {
                        v1016 = *(_QWORD *)v986;
                        v1017 = *(_DWORD *)(v986 + 8);
                        JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v998 + 1), (uint64_t)&v1018, v756, (uint64_t *)&v1007, (uint64_t *)&v1006, &v1016);
                        v373 = 1;
                      }
                      v365 = v980;
                      v360 = v373;
                    }
                    else
                    {
                      LODWORD(v1018) = 0;
                      *((_QWORD *)&v1018 + 1) = *(_QWORD *)(a1 + 7496);
                      v1019 = a1;
                      *(_QWORD *)(a1 + 7496) = &v1018;
                      v376 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v998, &v1018);
                      v360 = 0;
                      *(_QWORD *)(v1019 + 7496) = *((_QWORD *)&v1018 + 1);
                    }
                    if (*(_QWORD *)(a1 + 7360))
                      goto LABEL_336;
                    if (*(_DWORD *)v9 == 37)
                      goto LABEL_609;
                    v377 = v365;
                    v378 = v356;
                    if ((_DWORD)v360 == 1)
                      LODWORD(v997) = 1;
                    v379 = (JSC::ParserArena *)*((_QWORD *)v998 + 1);
                    v380 = *(_QWORD *)v379;
                    if (*((_QWORD *)v379 + 1) - *(_QWORD *)v379 <= 0x2FuLL)
                    {
                      v980 = v376;
                      v757 = v360;
                      JSC::ParserArena::allocateFreeablePool(v379);
                      v360 = v757;
                      v376 = v980;
                      v380 = *(_QWORD *)v379;
                    }
                    *(_QWORD *)v379 = v380 + 48;
                    *(_DWORD *)(v380 + 8) = v981;
                    *((_QWORD *)&v359 + 1) = *((_QWORD *)&v982 + 1);
                    *(int32x2_t *)(v380 + 12) = vrev64_s32(*(int32x2_t *)&v982);
                    *(_DWORD *)(v380 + 20) = -1;
                    *(_BYTE *)(v380 + 24) = 0;
                    *(_BYTE *)(v380 + 25) = 126;
                    *(_BYTE *)(v380 + 26) = 0;
                    *(_QWORD *)v380 = &off_1E3585948;
                    *(_QWORD *)(v380 + 32) = 0;
                    *(_QWORD *)(v380 + 40) = v376;
                    *(_QWORD *)(v983.n128_u64[0] + 32) = v380;
                    v367 = v380;
                    v356 = v378;
                    v365 = v377;
                    v366 = v984;
                  }
                  v404 = *(_DWORD *)(a1 + 7400);
                  v405 = *(_DWORD *)(a1 + 7412);
                  v406 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v404;
                  *(_DWORD *)(a1 + 7448) = v405;
                  *(_DWORD *)(a1 + 7452) = v406;
                  v407 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v407 + 4) = v404;
                  v408 = *(_DWORD *)(a1 + 12);
                  if (!v408)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F21CLL);
                  }
                  v409 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v408 - 1) + 9) & 1;
                  *(_BYTE *)(v407 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v407, (uint64_t)v9, 0, v409, v358, a6, a7, a8);
                  if ((v997 & 1) == 0)
                  {
                    v410 = *(_DWORD *)(a1 + 7296);
                    v411 = *((_QWORD *)v998 + 1);
                    a5 = *(_QWORD *)v411;
                    v412 = *(_QWORD *)(v411 + 8);
                    if ((unint64_t)(v412 - *(_QWORD *)v411) <= 0xF)
                    {
                      LODWORD(v997) = v356;
                      v983.n128_u64[0] = v340;
                      if (v412)
                      {
                        v778 = (_QWORD *)(v411 + 24);
                        v779 = v412 - 8000;
                        *(_QWORD *)&v1018 = v412 - 8000;
                        v780 = *(unsigned int *)(v411 + 36);
                        if ((_DWORD)v780 == *(_DWORD *)(v411 + 32))
                        {
                          v842 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v778, v780 + 1, (unint64_t)&v1018);
                          v780 = *(unsigned int *)(v411 + 36);
                          *(_QWORD *)(*(_QWORD *)(v411 + 24) + 8 * v780) = *v842;
                        }
                        else
                        {
                          *(_QWORD *)(*v778 + 8 * v780) = v779;
                        }
                        *(_DWORD *)(v411 + 36) = v780 + 1;
                      }
                      a5 = WTF::fastMalloc((WTF *)0x1F40);
                      *(_QWORD *)(v411 + 8) = a5 + 8000;
                      v340 = v983.n128_u64[0];
                      LODWORD(v356) = v997;
                    }
                    *(_QWORD *)v411 = a5 + 16;
                    *(_QWORD *)a5 = v364;
                    *(_BYTE *)(a5 + 8) = (_DWORD)v356 != v410;
                    goto LABEL_279;
                  }
                  LODWORD(v984) = v366;
                  LODWORD(v980) = v365;
                  LODWORD(v997) = v356;
                  v983.n128_u64[0] = v340;
                  v674 = (uint64_t *)*((_QWORD *)v998 + 1);
                  v675 = *v674;
                  if ((unint64_t)(v674[1] - *v674) <= 0x17)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                    v675 = *v674;
                  }
                  *v674 = v675 + 24;
                  v676 = *(_QWORD *)(v364 + 40);
                  *(_QWORD *)v675 = 0;
                  *(_QWORD *)(v675 + 8) = v676;
                  *(_DWORD *)(v675 + 16) = 0;
                  v677 = *(_QWORD *)(v364 + 32);
                  if (v677)
                  {
                    v834 = (_QWORD *)v675;
                    do
                    {
                      v835 = (uint64_t *)*((_QWORD *)v998 + 1);
                      v836 = *v835;
                      if ((unint64_t)(v835[1] - *v835) <= 0x17)
                      {
                        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                        v836 = *v835;
                      }
                      *v835 = v836 + 24;
                      v837 = *(_QWORD *)(v677 + 40);
                      *(_QWORD *)v836 = 0;
                      *(_QWORD *)(v836 + 8) = v837;
                      *(_DWORD *)(v836 + 16) = 0;
                      *v834 = v836;
                      v677 = *(_QWORD *)(v677 + 32);
                      v834 = (_QWORD *)v836;
                    }
                    while (v677);
                  }
                  v678 = v998;
                  JSC::ASTBuilder::createArray(*((JSC::ParserArena **)v998 + 1), (uint64_t)&v1010, v675);
                  v680 = v679;
                  v681 = (uint64_t *)*((_QWORD *)v678 + 1);
                  v682 = *v681;
                  if ((unint64_t)(v681[1] - *v681) <= 0x47)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v678 + 1));
                    v682 = *v681;
                  }
                  *v681 = v682 + 72;
                  v683 = v980;
                  *(_DWORD *)(v682 + 8) = v985;
                  *(_DWORD *)(v682 + 12) = v683;
                  *(_DWORD *)(v682 + 16) = v984;
                  *(_DWORD *)(v682 + 20) = -1;
                  *(_BYTE *)(v682 + 24) = 0;
                  *(_BYTE *)(v682 + 25) = 126;
                  *(_BYTE *)(v682 + 26) = 0;
                  *(_QWORD *)v682 = &off_1E3585648;
                  *(_QWORD *)(v682 + 64) = v680;
                  *(_QWORD *)(v682 + 28) = v1008;
                  *(_DWORD *)(v682 + 36) = v1009;
                  *(_QWORD *)(v682 + 52) = -1;
                  *(_DWORD *)(v682 + 60) = -1;
                  *(_DWORD *)(v682 + 48) = v1012;
                  *(_QWORD *)(v682 + 40) = v1011;
                  v684 = *(_DWORD *)(v986 + 8);
                  *(_QWORD *)(v682 + 52) = *(_QWORD *)v986;
                  *(_DWORD *)(v682 + 60) = v684;
                  v685 = (uint64_t *)*((_QWORD *)v998 + 1);
                  v686 = *v685;
                  if ((unint64_t)(v685[1] - *v685) <= 0x2F)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                    v686 = *v685;
                  }
                  *v685 = v686 + 48;
                  v687 = v980;
                  *(_DWORD *)(v686 + 8) = v985;
                  *(_DWORD *)(v686 + 12) = v687;
                  *(_DWORD *)(v686 + 16) = v984;
                  *(_DWORD *)(v686 + 20) = -1;
                  *(_BYTE *)(v686 + 24) = 0;
                  *(_WORD *)(v686 + 25) = 126;
                  *(_QWORD *)v686 = &off_1E3585948;
                  *(_QWORD *)(v686 + 32) = 0;
                  *(_QWORD *)(v686 + 40) = v682;
                  v688 = *(_DWORD *)(a1 + 7296);
                  v689 = (uint64_t *)*((_QWORD *)v998 + 1);
                  a5 = *v689;
                  if ((unint64_t)(v689[1] - *v689) <= 0xF)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
                    a5 = *v689;
                  }
                  v51 = (_DWORD)v997 == v688;
                  *v689 = a5 + 16;
                  v690 = !v51;
                  *(_QWORD *)a5 = v686;
                  *(_BYTE *)(a5 + 8) = v690;
                  v330 = v986;
                  v413 = v990;
                  v340 = v983.n128_u64[0];
LABEL_281:
                  if (v989)
                  {
                    v831 = v340;
                    if (!a5 || *(_DWORD *)v9 == 38)
                    {
                      v591 = v987;
                      v832 = *(_DWORD *)(a1 + 12);
                      if (!v832)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E6F1C0);
                      }
                      JSC::Scope::revertToPreviousUsedVariables((JSC::Scope *)(*(_QWORD *)a1 + 720 * (v832 - 1)), v831, a3, a4, a5, a6, a7, a8);
                      v833 = *(_DWORD **)(a1 + 7496);
                      if (v833)
                        *v833 = 2;
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                      v416 = 0;
                      goto LABEL_682;
                    }
                  }
                  else if (!a5)
                  {
                    v591 = v987;
                    if (*(_DWORD *)v9 == 20 || (*(_DWORD *)v9 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                    }
                    else if (!*(_QWORD *)(a1 + 7360))
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
                    }
                    v416 = 0;
                    goto LABEL_682;
                  }
                  if ((v413 & 1) == 0)
                  {
LABEL_284:
                    v333 = v991;
                    v993 = v991 == HIDWORD(v999);
                    if (BYTE8(v1014))
                      v414 = v1014 - *(_QWORD *)&v1013[16];
                    else
                      v414 = 0;
                    v415 = v987;
                    NewTargetExpr = JSC::ASTBuilder::makeFunctionCallNode((uint64_t)v998, (uint64_t)&v1003, NewTargetExpr, v329 & 1, a5, &v1004, &v999, (uint64_t *)v330, v414, v991 == HIDWORD(v999));
                    v416 = 1;
                    goto LABEL_287;
                  }
                  v591 = v987;
                  *(_QWORD *)&v986 = v9;
                  v592 = *(_DWORD *)(a1 + 12);
                  if (!v592)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F254);
                  }
                  a2 = (JSC::ASTBuilder *)v329;
                  v593 = *(_DWORD *)(a1 + 12);
                  while (1)
                  {
                    v594 = v593 - 1;
                    if (v593 == 1)
                      break;
                    --v593;
                    v595 = v594;
                    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v594 + 12) & 0x40) != 0)
                      goto LABEL_510;
                  }
                  v595 = 0;
LABEL_510:
                  if (v592 <= v594)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F22CLL);
                  }
                  v596 = v595;
                  *(_DWORD *)(*(_QWORD *)a1 + 720 * v595 + 10) |= 0x10u;
                  v597 = *(_DWORD *)(a1 + 12);
                  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
                  {
                    if (!v597)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E6F234);
                    }
                    v598 = *(_QWORD *)a1;
                    v599 = v597 - 1;
LABEL_514:
                    v9 = (char *)v986;
                    if ((*(_BYTE *)(v598 + 720 * v599 + 11) & 8) != 0)
                    {
                      if (v597 <= v594)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E6F244);
                      }
                      *(_BYTE *)(v598 + 720 * v596 + 32) |= 8u;
                      v9 = (char *)v986;
                    }
                    goto LABEL_284;
                  }
                  if (!v597)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F24CLL);
                  }
                  v599 = v597 - 1;
                  v906 = *(_DWORD *)(a1 + 12);
                  while (1)
                  {
                    v907 = v906;
                    if (v906 == 1)
                      break;
                    --v906;
                    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v907 - 1) + 10) & 0x405400) == 0x400000)
                      goto LABEL_799;
                  }
                  v906 = 0;
LABEL_799:
                  if (v597 <= v907 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E6F23CLL);
                  }
                  v598 = *(_QWORD *)a1;
                  if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v906 + 15) == 2
                    || (*(_BYTE *)(v598 + 720 * v906 + 13) & 2) != 0 && *(_BYTE *)(v598 + 720 * v906 + 16) == 1)
                  {
                    goto LABEL_514;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
                  v416 = 0;
                  v9 = (char *)v986;
LABEL_682:
                  v333 = v991;
                  v415 = v591;
LABEL_287:
                  if (BYTE8(v1014))
                  {
                    v417 = *(_QWORD *)&v1013[8];
                    if (*(_QWORD *)&v1013[8])
                    {
                      v673 = v1014;
                      if ((unint64_t)v1014 <= *(_QWORD *)(*(_QWORD *)&v1013[8] + 24))
                        v673 = *(_QWORD *)(*(_QWORD *)&v1013[8] + 24);
                      *(_QWORD *)(*(_QWORD *)&v1013[8] + 24) = v673;
                    }
                    *(_QWORD *)(*(_QWORD *)v1013 + 7528) = v417;
                  }
                  if ((v416 & 1) == 0)
                    goto LABEL_452;
                  *(_QWORD *)&v997 = 0;
LABEL_292:
                  *(_DWORD *)(a1 + 7300) = v415;
                  v396 = NewTargetExpr;
                  v332 = v988;
                  v327 = v989;
                  v329 = v990;
                  goto LABEL_231;
                }
                if (!*(_QWORD *)(a1 + 7360))
LABEL_609:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
LABEL_336:
                a5 = 0;
LABEL_279:
                v330 = v986;
              }
              else
              {
                if (v361 == 20 || (v361 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
                }
                a5 = 0;
              }
            }
          }
          else
          {
            if (v343 == 20 || (v343 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
            }
LABEL_366:
            a5 = 0;
          }
          v413 = v990;
          goto LABEL_281;
        }
LABEL_232:
        v336 = *(_DWORD *)v9;
        if (v334)
        {
          v669 = v9;
          v670 = v328;
          if (!v335)
            *(_BYTE *)(v334 + 26) = 1;
          v671 = (uint64_t *)*((_QWORD *)v998 + 1);
          v672 = *v671;
          if ((unint64_t)(v671[1] - *v671) <= 0x2F)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
            v672 = *v671;
          }
          *v671 = v672 + 48;
          *(_DWORD *)(v672 + 8) = v1003;
          *(int32x2_t *)(v672 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
          *(_DWORD *)(v672 + 20) = -1;
          *(_BYTE *)(v672 + 24) = 0;
          *(_BYTE *)(v672 + 25) = 126;
          *(_BYTE *)(v672 + 26) = 0;
          *(_QWORD *)v672 = &off_1E35884F8;
          *(_QWORD *)(v672 + 32) = NewTargetExpr;
          *(_BYTE *)(v672 + 40) = v336 != 39;
          v336 = *(_DWORD *)v669;
          NewTargetExpr = v672;
          v328 = v670;
          v9 = v669;
        }
        v331 = 39;
      }
      while (v336 == 39);
      if ((v328 & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v535 = "Cannot use new with super call";
          if (!(_QWORD)v997)
            v535 = "super is not valid in this context";
          *(_QWORD *)v1013 = v535;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 0, (const char **)v1013);
        }
LABEL_97:
        v129 = 0;
        goto LABEL_237;
      }
      if ((_QWORD)v997)
      {
        v537 = v330;
        v538 = v1003;
        v539 = vrev64_s32(*(int32x2_t *)((char *)&v1003 + 4));
        v540 = 12 * v997 - 12;
        v541 = v997 - 1;
        *(_QWORD *)&v542 = -1;
        *((_QWORD *)&v542 + 1) = -1;
        do
        {
          if (v541 >= HIDWORD(v1002))
          {
            __break(0xC471u);
            JUMPOUT(0x197E6F530);
          }
          v543 = v1001;
          v544 = (uint64_t *)*((_QWORD *)v998 + 1);
          v129 = *v544;
          if ((unint64_t)(v544[1] - *v544) <= 0x4F)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v998 + 1));
            *(_QWORD *)&v542 = -1;
            *((_QWORD *)&v542 + 1) = -1;
            v129 = *v544;
          }
          *v544 = v129 + 80;
          *(_DWORD *)(v129 + 8) = v538;
          *(int32x2_t *)(v129 + 12) = v539;
          *(_DWORD *)(v129 + 20) = -1;
          *(_BYTE *)(v129 + 24) = 0;
          *(_WORD *)(v129 + 25) = 126;
          *(_OWORD *)(v129 + 28) = v542;
          *(_OWORD *)(v129 + 44) = v542;
          *(_DWORD *)(v129 + 60) = -1;
          *(_QWORD *)v129 = &off_1E3585AC8;
          *(_QWORD *)(v129 + 64) = NewTargetExpr;
          *(_QWORD *)(v129 + 72) = 0;
          v545 = *(_QWORD *)((char *)v543 + v540);
          *(_DWORD *)(v129 + 36) = *(_DWORD *)((char *)v543 + v540 + 8);
          *(_QWORD *)(v129 + 28) = v545;
          *(_QWORD *)(v129 + 40) = v1004;
          *(_DWORD *)(v129 + 48) = v1005;
          v546 = *(_DWORD *)(v537 + 8);
          *(_QWORD *)(v129 + 52) = *(_QWORD *)v537;
          v540 -= 12;
          --v541;
          NewTargetExpr = v129;
          *(_DWORD *)(v129 + 60) = v546;
        }
        while (v541 != -1);
      }
      else
      {
        v129 = NewTargetExpr;
      }
LABEL_237:
      v337 = v1001;
      if (v1001)
      {
        v1001 = 0;
        LODWORD(v1002) = 0;
        WTF::fastFree((unint64_t)v337, a2, a3, a4, a5, a6, a7, a8);
      }
      return v129;
    case 14:
      v196 = *(_QWORD *)(a1 + 7376);
      v197 = *(_DWORD *)(a1 + 7400);
      v198 = *(_DWORD *)(a1 + 7404);
      v199 = *(_DWORD *)(a1 + 7408);
      v200 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v197;
      *(_DWORD *)(a1 + 7448) = v200;
      *(_DWORD *)(a1 + 7452) = v198;
      v201 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v201 + 4) = v197;
      v202 = *(_DWORD *)(a1 + 12);
      if (!v202)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F3F8);
      }
      v203 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v202 - 1) + 9) & 1;
      *(_BYTE *)(v201 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v201, (uint64_t)v9, 0, v203, a5, a6, a7, a8);
      v204 = v998;
      ++*((_DWORD *)v998 + 7);
      v205 = (uint64_t *)*((_QWORD *)v204 + 1);
      NewTargetExpr = *v205;
      if ((unint64_t)(v205[1] - *v205) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v204 + 1));
        NewTargetExpr = *v205;
      }
      *v205 = NewTargetExpr + 40;
      *(_DWORD *)(NewTargetExpr + 8) = v197;
      *(_DWORD *)(NewTargetExpr + 12) = v199;
      *(_DWORD *)(NewTargetExpr + 16) = v198;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = 4;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      *(_QWORD *)NewTargetExpr = &off_1E3583FC0;
      *(_QWORD *)(NewTargetExpr + 32) = v196;
      if (v12)
        goto LABEL_932;
      goto LABEL_219;
    default:
      if (v13 == 25)
      {
        v274 = 61;
        goto LABEL_185;
      }
      if (v13 != 512)
        goto LABEL_92;
      v100 = *(_DWORD *)(a1 + 7400);
      v101 = *(_DWORD *)(a1 + 7404);
      v102 = *(_DWORD *)(a1 + 7408);
      v103 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v100;
      *(_DWORD *)(a1 + 7448) = v103;
      *(_DWORD *)(a1 + 7452) = v101;
      v104 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v104 + 4) = v100;
      v105 = *(_DWORD *)(a1 + 12);
      if (!v105)
      {
        __break(0xC471u);
        JUMPOUT(0x197E6F458);
      }
      v106 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v105 - 1) + 9) & 1;
      *(_BYTE *)(v104 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v104, (uint64_t)v9, 0, v106, a5, a6, a7, a8);
      v107 = v998;
      ++*((_DWORD *)v998 + 7);
      v108 = (uint64_t *)*((_QWORD *)v107 + 1);
      NewTargetExpr = *v108;
      if ((unint64_t)(v108[1] - *v108) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v107 + 1));
        NewTargetExpr = *v108;
      }
      *v108 = NewTargetExpr + 32;
      *(_DWORD *)(NewTargetExpr + 8) = v100;
      *(_DWORD *)(NewTargetExpr + 12) = v102;
      *(_DWORD *)(NewTargetExpr + 16) = v101;
      *(_DWORD *)(NewTargetExpr + 20) = -1;
      *(_BYTE *)(NewTargetExpr + 24) = 0;
      *(_BYTE *)(NewTargetExpr + 25) = 16;
      *(_BYTE *)(NewTargetExpr + 26) = 0;
      v109 = &off_1E357AEE0;
      goto LABEL_146;
  }
}

uint64_t JSC::ASTBuilder::createNewTargetExpr(uint64_t a1, uint64_t a2, int a3)
{
  JSC::ParserArena *v5;
  uint64_t result;

  *(_DWORD *)(a1 + 24) |= 0x400u;
  v5 = *(JSC::ParserArena **)(a1 + 8);
  result = *(_QWORD *)v5;
  if (*((_QWORD *)v5 + 1) - *(_QWORD *)v5 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v5);
    result = *(_QWORD *)v5;
  }
  *(_QWORD *)v5 = result + 32;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = HIDWORD(a2);
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 25) = 126;
  *(_BYTE *)(result + 26) = 0;
  *(_QWORD *)result = &off_1E3584BC8;
  return result;
}

int32x2_t JSC::ASTBuilder::createImportMetaExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v7 - v6) <= 0x27)
  {
    if (v7)
    {
      v10 = (_QWORD *)(a1 + 24);
      v11 = v7 - 8000;
      v14 = v7 - 8000;
      v12 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 32))
      {
        v13 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v12 + 1, (unint64_t)&v14);
        v12 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12) = *v13;
      }
      else
      {
        *(_QWORD *)(*v10 + 8 * v12) = v11;
      }
      *(_DWORD *)(a1 + 36) = v12 + 1;
    }
    v6 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v6 + 8000;
  }
  *(_QWORD *)a1 = v6 + 40;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E3584D48;
  *(_QWORD *)(v6 + 32) = a3;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot parse expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

__n128 JSC::ASTBuilder::createImportExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v15 - v14) <= 0x4F)
  {
    if (v15)
    {
      v21 = (_QWORD *)(a1 + 24);
      v22 = v15 - 8000;
      v25 = v15 - 8000;
      v23 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 32))
      {
        v24 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v23 + 1, (unint64_t)&v25);
        v23 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v23) = *v24;
      }
      else
      {
        *(_QWORD *)(*v21 + 8 * v23) = v22;
      }
      *(_DWORD *)(a1 + 36) = v23 + 1;
    }
    v14 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v14 + 8000;
  }
  *(_QWORD *)a1 = v14 + 80;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v14 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v14 + 20) = -1;
  *(_BYTE *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 25) = 126;
  *(_BYTE *)(v14 + 26) = 0;
  *(_DWORD *)(v14 + 60) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v14 + 44) = result;
  *(__n128 *)(v14 + 28) = result;
  *(_QWORD *)v14 = &off_1E3584A48;
  *(_QWORD *)(v14 + 64) = a3;
  *(_QWORD *)(v14 + 72) = a4;
  v18 = *a6;
  *(_DWORD *)(v14 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v14 + 28) = v18;
  v19 = *a5;
  *(_DWORD *)(v14 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v14 + 40) = v19;
  v20 = *a7;
  *(_DWORD *)(v14 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v14 + 52) = v20;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  int v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  JSC::ParserArena *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  JSC::ParserArena *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  JSC::ParserArena *v55;
  uint64_t v56;
  JSC::ParserArena *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v13 = 0;
      v3[6].i8[4] = 1;
      return v13;
    }
    return 0;
  }
  v5 = *(_DWORD *)(a1 + 7400);
  v6 = *(int32x2_t *)(a1 + 7404);
  LODWORD(v58) = 0;
  v59 = *(_QWORD *)(a1 + 7496);
  v60 = a1;
  *(_QWORD *)(a1 + 7496) = &v58;
  v7 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v58);
  *(_QWORD *)(v60 + 7496) = v59;
  if (!v7)
  {
    v52 = *(_DWORD *)(a1 + 7368);
    if (v52 != 20 && (v52 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
      return 0;
    }
    goto LABEL_39;
  }
  v12 = v7;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 7448);
  if (*(_DWORD *)(a1 + 7368) == 6)
  {
    *(_BYTE *)(v7 + 24) = 1;
    v15 = *(_QWORD *)(v7 + 8);
    v16 = *(_DWORD *)(v7 + 16);
    v58 = v15;
    LODWORD(v59) = v16;
    v17 = *(_QWORD *)(a1 + 7520);
    if (v17 && (v15 & 0x80000000) == 0)
      JSC::DebuggerPausePositions::appendPause(v17, (uint64_t)&v58);
    v18 = *(_DWORD *)(a1 + 7400);
    v19 = *(_DWORD *)(a1 + 7412);
    v20 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v18;
    *(_DWORD *)(a1 + 7448) = v19;
    *(_DWORD *)(a1 + 7452) = v20;
    v21 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v21 + 4) = v18;
    v22 = *(_DWORD *)(a1 + 12);
    if (!v22)
      goto LABEL_40;
    v23 = (_DWORD *)(a1 + 7368);
    v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
    *(_BYTE *)(v21 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v21, a1 + 7368, 0, v24, v8, v9, v10, v11);
    *v3 = vadd_s32(*v3, (int32x2_t)0x100000001);
    v25 = *(_DWORD *)(a1 + 7400);
    v26 = v3[13];
    LODWORD(v58) = 0;
    v59 = *(_QWORD *)(a1 + 7496);
    v60 = a1;
    *(_QWORD *)(a1 + 7496) = &v58;
    v27 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v58);
    *(_QWORD *)(v60 + 7496) = v59;
    if (v27)
    {
      LODWORD(v57) = v25;
      *(_BYTE *)(v27 + 24) = 1;
      v32 = *(_QWORD *)(v27 + 8);
      v33 = *(_DWORD *)(v27 + 16);
      v58 = v32;
      LODWORD(v59) = v33;
      if (*(_QWORD *)(a1 + 7520) && (v32 & 0x80000000) == 0)
      {
        v53 = v27;
        JSC::DebuggerPausePositions::appendPause(*(_QWORD *)(a1 + 7520), (uint64_t)&v58);
        v27 = v53;
      }
      *(_DWORD *)(v27 + 20) = *(_DWORD *)(a1 + 7448);
      v34 = *(JSC::ParserArena **)(a2 + 8);
      v13 = *(_QWORD *)v34;
      if (*((_QWORD *)v34 + 1) - *(_QWORD *)v34 <= 0x2FuLL)
      {
        v54 = v27;
        v55 = *(JSC::ParserArena **)(a2 + 8);
        JSC::ParserArena::allocateFreeablePool(v55);
        v34 = v55;
        v27 = v54;
        v13 = *(_QWORD *)v55;
      }
      *(_QWORD *)v34 = v13 + 48;
      *(_DWORD *)(v13 + 8) = v5;
      *(int32x2_t *)(v13 + 12) = vrev64_s32(v6);
      *(_DWORD *)(v13 + 20) = -1;
      *(_BYTE *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 25) = 126;
      *(_BYTE *)(v13 + 26) = 0;
      *(_QWORD *)v13 = &off_1E35896F8;
      *(_QWORD *)(v13 + 32) = v12;
      *(_QWORD *)(v13 + 40) = 0;
      v35 = *(uint64_t **)(a2 + 8);
      v36 = *v35;
      if ((unint64_t)(v35[1] - *v35) <= 0x2F)
      {
        v56 = v27;
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v27 = v56;
        v36 = *v35;
      }
      *v35 = v36 + 48;
      *(_DWORD *)(v36 + 8) = (_DWORD)v57;
      *(int32x2_t *)(v36 + 12) = vrev64_s32(v26);
      *(_DWORD *)(v36 + 20) = -1;
      *(_BYTE *)(v36 + 24) = 0;
      *(_WORD *)(v36 + 25) = 126;
      *(_QWORD *)v36 = &off_1E35896F8;
      *(_QWORD *)(v36 + 32) = v27;
      *(_QWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v13 + 40) = v36;
      if (*v23 != 6)
      {
LABEL_21:
        *(_DWORD *)(v13 + 20) = *(_DWORD *)(a1 + 7448);
        return v13;
      }
      while (1)
      {
        v37 = *(_DWORD *)(a1 + 7400);
        v38 = *(_DWORD *)(a1 + 7412);
        v39 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v37;
        *(_DWORD *)(a1 + 7448) = v38;
        *(_DWORD *)(a1 + 7452) = v39;
        v40 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v40 + 4) = v37;
        v41 = *(_DWORD *)(a1 + 12);
        if (!v41)
          break;
        v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
        *(_BYTE *)(v40 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v40, a1 + 7368, 0, v42, v28, v29, v30, v31);
        v43 = *(_DWORD *)(a1 + 7400);
        v44 = v3[13];
        LODWORD(v58) = 0;
        v59 = *(_QWORD *)(a1 + 7496);
        v60 = a1;
        *(_QWORD *)(a1 + 7496) = &v58;
        v45 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v58);
        *(_QWORD *)(v60 + 7496) = v59;
        if (!v45)
          goto LABEL_35;
        v46 = v45;
        *(_DWORD *)(v45 + 20) = *(_DWORD *)(a1 + 7448);
        *(_BYTE *)(v45 + 24) = 1;
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(_DWORD *)(v45 + 16);
        v58 = v47;
        LODWORD(v59) = v48;
        v49 = *(_QWORD *)(a1 + 7520);
        if (v49 && (v47 & 0x80000000) == 0)
          JSC::DebuggerPausePositions::appendPause(v49, (uint64_t)&v58);
        v50 = *(JSC::ParserArena **)(a2 + 8);
        v51 = *(_QWORD *)v50;
        if (*((_QWORD *)v50 + 1) - *(_QWORD *)v50 <= 0x2FuLL)
        {
          v57 = *(JSC::ParserArena **)(a2 + 8);
          JSC::ParserArena::allocateFreeablePool(v50);
          v50 = v57;
          v51 = *(_QWORD *)v57;
        }
        *(_QWORD *)v50 = v51 + 48;
        *(_DWORD *)(v51 + 8) = v43;
        *(int32x2_t *)(v51 + 12) = vrev64_s32(v44);
        *(_DWORD *)(v51 + 20) = -1;
        *(_BYTE *)(v51 + 24) = 0;
        *(_WORD *)(v51 + 25) = 126;
        *(_QWORD *)v51 = &off_1E35896F8;
        *(_QWORD *)(v51 + 32) = v46;
        *(_QWORD *)(v51 + 40) = 0;
        *(_QWORD *)(v36 + 40) = v51;
        v36 = v51;
        if (*v23 != 6)
          goto LABEL_21;
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x197E6FF5CLL);
    }
LABEL_35:
    if (*v23 != 20 && (*v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
      return 0;
    }
LABEL_39:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  return v7;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(uint64_t a1, const char *a2, const char *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", "Expected '");
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", "' to ");
    WTF::PrintStream::printf(v7, "%s", "end");
    WTF::PrintStream::printf(v7, "%s", " a ");
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::Scope::revertToPreviousUsedVariables(JSC::Scope *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;

  v10 = *((unsigned int *)this + 45);
  if (v10 < a2)
  {
    v18 = (uint64_t *)((char *)this + 168);
    if (*((unsigned int *)this + 44) < a2)
      WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, (void *)a2, a3, a4, a5, a6, a7, a8);
    v13 = *v18;
    if (*v18)
    {
      v14 = *((unsigned int *)this + 45);
      if (v14 != a2)
      {
        v15 = v13 + 72 * a2;
        v16 = v13 + 72 * v14;
        *(_QWORD *)&v17 = -1;
        *((_QWORD *)&v17 + 1) = -1;
        do
        {
          *(_QWORD *)v16 = 0x800000000;
          *(_OWORD *)(v16 + 8) = v17;
          *(_OWORD *)(v16 + 24) = v17;
          *(_OWORD *)(v16 + 40) = v17;
          *(_OWORD *)(v16 + 56) = v17;
          v16 += 72;
        }
        while (v16 != v15);
      }
    }
  }
  else if (v10 != a2)
  {
    v11 = 72 * v10 - 72 * a2;
    v12 = (unint64_t *)(*((_QWORD *)this + 21) + 72 * a2 + 8);
    do
    {
      if (*((_DWORD *)v12 - 1) != 8)
        WTF::fastFree(*v12, (void *)a2, a3, a4, a5, a6, a7, a8);
      v12 += 9;
      v11 -= 72;
    }
    while (v11);
  }
  *((_DWORD *)this + 45) = a2;
}

uint64_t JSC::Scope::hasPrivateName(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v3 = *(_DWORD *)(v2 - 8);
      v4 = *(_DWORD *)(a2 + 16);
      if ((v4 & 0x20) != 0)
        v4 = *(_DWORD *)(a2 + 32);
      v5 = v3 & (v4 >> 8);
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (v6 == a2)
      {
        return 1;
      }
      else
      {
        v7 = 1;
        do
        {
          result = v6 != 0;
          if (!v6)
            break;
          v5 = (v5 + v7) & v3;
          v6 = *(_QWORD *)(v2 + 16 * v5);
          ++v7;
        }
        while (v6 != a2);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[44],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, WTF::PrintStream **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  WTF *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v35 = off_1E3572250;
    v36 = (WTF *)v38;
    v37 = xmmword_199122F80;
    v38[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v35, "%s", "Cannot reference undeclared private field '");
    WTF::PrintStream::printImpl<WTF::UniquedStringImpl *,char [2],char [2]>((WTF *)&v35, *a2, v4, v5, v6, v7, v8, v9, v10, v11);
    v35[5]((WTF::StringPrintStream *)&v35);
    WTF::String::fromUTF8WithLatin1Fallback(v36, v37, &v34);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v34, v12, v13, v14, v15, v16, v17);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v36 != (WTF *)v38)
      WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  JSC::ParserArena *v30;
  uint64_t result;
  JSC::ParserArena *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::ParserArena *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  JSC::ParserArena *v43;
  _QWORD *v44;
  int v45;
  const char *v47;
  int v48;
  int v49;
  int v50;
  int v52;
  JSC::ParserArena *v53;
  JSC::ParserArena *v54;
  int v55;
  int v56;
  int v57;
  char v58;

  v11 = *(_DWORD *)(a1 + 7300);
  v12 = *(_DWORD *)(a1 + 7400);
  v13 = *(_DWORD *)(a1 + 7404);
  v14 = *(_DWORD *)(a1 + 7408);
  v58 = 0;
  v15 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 1, a3, &v58, a6, a7, a8);
  if (!v15)
  {
    v45 = *(_DWORD *)(a1 + 7368);
    if (v45 != 20 && (v45 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse head template element");
      goto LABEL_63;
    }
    goto LABEL_35;
  }
  v16 = v15;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD **)v17;
  if (*(_QWORD *)(v17 + 8) - *(_QWORD *)v17 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v18 = *(_QWORD **)v17;
  }
  *(_QWORD *)v17 = v18 + 2;
  *v18 = 0;
  v18[1] = v16;
  if (v58)
  {
    v32 = *(JSC::ParserArena **)(a2 + 8);
    result = *(_QWORD *)v32;
    if (*((_QWORD *)v32 + 1) - *(_QWORD *)v32 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v32);
      result = *(_QWORD *)v32;
    }
    *(_QWORD *)v32 = result + 48;
    *(_DWORD *)(result + 8) = v12;
    *(_DWORD *)(result + 12) = v14;
    *(_DWORD *)(result + 16) = v13;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E35842C8;
    *(_QWORD *)(result + 32) = v18;
    *(_QWORD *)(result + 40) = 0;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 7368) == 1)
  {
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_63;
    v47 = "Template literal expression cannot be empty";
    goto LABEL_62;
  }
  v19 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
  if (!v19)
  {
    v48 = *(_DWORD *)(a1 + 7368);
    if (v48 != 20 && (v48 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_63;
LABEL_61:
      v47 = "Cannot parse expression in template literal";
LABEL_62:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v47);
      goto LABEL_63;
    }
LABEL_35:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_63;
  }
  v23 = v19;
  v56 = v12;
  v24 = *(_QWORD *)(a2 + 8);
  v25 = *(_QWORD **)v24;
  if (*(_QWORD *)(v24 + 8) - *(_QWORD *)v24 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v25 = *(_QWORD **)v24;
  }
  *(_QWORD *)v24 = v25 + 2;
  *v25 = 0;
  v25[1] = v23;
  v26 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 0, a3, &v58, v20, v21, v22);
  if (!v26)
  {
    v49 = *(_DWORD *)(a1 + 7368);
    if (v49 != 20 && (v49 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        goto LABEL_57;
      goto LABEL_63;
    }
    goto LABEL_35;
  }
  v27 = v26;
  v55 = v13;
  v57 = v11;
  v28 = *(_QWORD *)(a2 + 8);
  v29 = *(_QWORD **)v28;
  if (*(_QWORD *)(v28 + 8) - *(_QWORD *)v28 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v29 = *(_QWORD **)v28;
  }
  *(_QWORD *)v28 = v29 + 2;
  *v29 = 0;
  v29[1] = v27;
  *v18 = v29;
  if (v58)
  {
LABEL_13:
    v30 = *(JSC::ParserArena **)(a2 + 8);
    result = *(_QWORD *)v30;
    if (*((_QWORD *)v30 + 1) - *(_QWORD *)v30 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v30);
      result = *(_QWORD *)v30;
    }
    *(_QWORD *)v30 = result + 48;
    *(_DWORD *)(result + 8) = v56;
    *(_DWORD *)(result + 12) = v14;
    *(_DWORD *)(result + 16) = v55;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E35842C8;
    *(_QWORD *)(result + 32) = v18;
    *(_QWORD *)(result + 40) = v25;
LABEL_16:
    v11 = v57;
    goto LABEL_17;
  }
  v33 = v25;
  while (1)
  {
    if (*(_DWORD *)(a1 + 7368) == 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Template literal expression cannot be empty");
      goto LABEL_53;
    }
    v34 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
    if (!v34)
    {
      v50 = *(_DWORD *)(a1 + 7368);
      if (v50 == 20 || (v50 & 0x100000) != 0)
        goto LABEL_52;
      v11 = v57;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_63;
      goto LABEL_61;
    }
    v38 = v34;
    v39 = *(JSC::ParserArena **)(a2 + 8);
    v40 = *(_QWORD **)v39;
    if (*((_QWORD *)v39 + 1) - *(_QWORD *)v39 <= 0xFuLL)
    {
      v53 = *(JSC::ParserArena **)(a2 + 8);
      JSC::ParserArena::allocateFreeablePool(v53);
      v39 = v53;
      v40 = *(_QWORD **)v53;
    }
    *(_QWORD *)v39 = v40 + 2;
    *v40 = 0;
    v40[1] = v38;
    *v33 = v40;
    v41 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 0, a3, &v58, v35, v36, v37);
    if (!v41)
      break;
    v42 = v41;
    v43 = *(JSC::ParserArena **)(a2 + 8);
    v44 = *(_QWORD **)v43;
    if (*((_QWORD *)v43 + 1) - *(_QWORD *)v43 <= 0xFuLL)
    {
      v54 = *(JSC::ParserArena **)(a2 + 8);
      JSC::ParserArena::allocateFreeablePool(v43);
      v43 = v54;
      v44 = *(_QWORD **)v54;
    }
    *(_QWORD *)v43 = v44 + 2;
    *v44 = 0;
    v44[1] = v42;
    *v29 = v44;
    v33 = v40;
    v29 = v44;
    if (v58)
      goto LABEL_13;
  }
  v52 = *(_DWORD *)(a1 + 7368);
  if (v52 == 20 || (v52 & 0x100000) != 0)
  {
LABEL_52:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_53:
    result = 0;
    goto LABEL_16;
  }
  v11 = v57;
  if (!*(_QWORD *)(a1 + 7360))
LABEL_57:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse template element");
LABEL_63:
  result = 0;
LABEL_17:
  *(_DWORD *)(a1 + 7300) = v11;
  return result;
}

__n128 JSC::ASTBuilder::createTaggedTemplate(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v14) <= 0x4F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v14 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v14 + 80;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v14 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v14 + 20) = -1;
  *(_BYTE *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 25) = 126;
  *(_BYTE *)(v14 + 26) = 0;
  *(_DWORD *)(v14 + 60) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v14 + 44) = result;
  *(__n128 *)(v14 + 28) = result;
  *(_QWORD *)v14 = &off_1E3584448;
  *(_QWORD *)(v14 + 64) = a3;
  *(_QWORD *)(v14 + 72) = a4;
  v17 = *a6;
  *(_DWORD *)(v14 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v14 + 28) = v17;
  v18 = *a5;
  *(_DWORD *)(v14 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v14 + 40) = v18;
  v19 = *a7;
  *(_DWORD *)(v14 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v14 + 52) = v19;
  *(_DWORD *)(v14 + 20) = *((_DWORD *)a7 + 1);
  return result;
}

uint64_t WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 12 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x15555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 12 * v8;
    v11 = WTF::fastMalloc((WTF *)(12 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 12 * v9;
      v20 = v5;
      do
      {
        v21 = *(_QWORD *)v20;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v20 + 8);
        *(_QWORD *)v11 = v21;
        v11 += 12;
        v20 += 12;
        v19 -= 12;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x15555556)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 12 * v4;
    v9 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 12 * v7;
      v18 = v6;
      do
      {
        v19 = *(_QWORD *)v18;
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(v18 + 8);
        *(_QWORD *)v9 = v19;
        v9 += 12;
        v18 += 12;
        v17 -= 12;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

int32x2_t JSC::ASTBuilder::createResolve(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  int32x2_t v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  if (a6 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 41952) + 880) == v9)
    *(_DWORD *)(a1 + 24) |= 2u;
  if (!v9 || (*(_BYTE *)(v9 + 16) & 0x20) == 0 || (*(_BYTE *)(v9 + 36) & 4) == 0)
    goto LABEL_6;
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 93392);
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(unsigned int *)(v15 + 16);
  if (v16)
  {
    v18 = v17 - 1;
    v19 = *(_DWORD *)(v15 + 24);
    v20 = *(_DWORD *)(v9 + 32);
    v21 = (v19 ^ (v20 >> 8)) & ((_DWORD)v17 - 1);
    v22 = *(_QWORD *)(v16 + 32 * v21);
    if (v22)
    {
      v23 = v20 >> 8;
      v24 = -1;
      do
      {
        v25 = *(_DWORD *)(v22 + 16);
        if ((v25 & 0x20) != 0)
          v25 = *(_DWORD *)(v22 + 32);
        if (++v24 > (((_DWORD)v21 + (_DWORD)v17 - ((v19 ^ (v25 >> 8)) & v18)) & v18))
          break;
        if (v22 == v9 && v25 >> 8 == v23)
        {
          v26 = v16 + 32 * v21;
          goto LABEL_20;
        }
        v21 = ((_DWORD)v21 + 1) & v18;
        v22 = *(_QWORD *)(v16 + 32 * v21);
      }
      while (v22);
    }
    v26 = v16 + 32 * v17;
  }
  else
  {
    v26 = 32 * v17;
  }
LABEL_20:
  if (v26 != v16 + 32 * v17)
  {
    v27 = *(_BYTE *)(v26 + 8);
    *(_OWORD *)v39[0].i8 = *(_OWORD *)(v26 + 9);
    *(int32x2_t *)((char *)&v39[1] + 7) = *(int32x2_t *)(v26 + 24);
    v28 = *(_QWORD **)(a1 + 8);
    v29 = *v28;
    if (v28[1] - *v28 <= 0x6FuLL)
    {
      v37 = v28;
      v38 = a5;
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v28);
      v28 = v37;
      a5 = v38;
      v29 = *v37;
    }
    *v28 = v29 + 112;
    *(_DWORD *)(v29 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v29 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v29 + 20) = -1;
    *(_BYTE *)(v29 + 24) = 0;
    *(_QWORD *)v29 = off_1E3583CB8;
    *(_BYTE *)(v29 + 25) = 126;
    *(_BYTE *)(v29 + 26) = 0;
    v30 = *a4;
    *(_DWORD *)(v29 + 36) = *((_DWORD *)a4 + 2);
    *(_QWORD *)(v29 + 28) = v30;
    v31 = *a4;
    *(_DWORD *)(v29 + 48) = *((_DWORD *)a4 + 2);
    *(_QWORD *)(v29 + 40) = v31;
    v32 = *a5;
    *(_DWORD *)(v29 + 60) = *((_DWORD *)a5 + 2);
    *(_QWORD *)(v29 + 52) = v32;
    *(_QWORD *)v29 = &off_1E3586548;
    *(_BYTE *)(v29 + 64) = v27;
    result = v39[0];
    *(_OWORD *)(v29 + 65) = *(_OWORD *)v39[0].i8;
    *(int32x2_t *)(v29 + 80) = *(int32x2_t *)((char *)&v39[1] + 7);
    *(_QWORD *)(v29 + 88) = a3;
    *(_QWORD *)(v29 + 96) = 0;
    *(_BYTE *)(v29 + 104) = 0;
  }
  else
  {
LABEL_6:
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    if ((unint64_t)(v12 - *(_QWORD *)v10) <= 0x37)
    {
      if (v12)
      {
        v33 = (_QWORD *)(v10 + 24);
        v34 = v12 - 8000;
        v39[0] = (int32x2_t)(v12 - 8000);
        v35 = *(unsigned int *)(v10 + 36);
        if ((_DWORD)v35 == *(_DWORD *)(v10 + 32))
        {
          v36 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v35 + 1, (unint64_t)v39);
          v35 = *(unsigned int *)(v10 + 36);
          *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8 * v35) = *v36;
        }
        else
        {
          *(_QWORD *)(*v33 + 8 * v35) = v34;
        }
        *(_DWORD *)(v10 + 36) = v35 + 1;
      }
      v11 = WTF::fastMalloc((WTF *)0x1F40);
      *(_QWORD *)(v10 + 8) = v11 + 8000;
    }
    *(_QWORD *)v10 = v11 + 56;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)a2;
    result = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(int32x2_t *)(v11 + 12) = result;
    *(_DWORD *)(v11 + 20) = -1;
    *(_BYTE *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 25) = 126;
    *(_BYTE *)(v11 + 26) = 0;
    *(_QWORD *)v11 = &off_1E3584EC8;
    *(_QWORD *)(v11 + 32) = a3;
    v14 = *a4;
    *(_DWORD *)(v11 + 48) = *((_DWORD *)a4 + 2);
    *(_QWORD *)(v11 + 40) = v14;
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "compound expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

int32x2_t JSC::ASTBuilder::createThisExpr(uint64_t a1, uint64_t a2)
{
  JSC::ParserArena *v3;
  uint64_t v4;
  int32x2_t result;

  *(_DWORD *)(a1 + 24) |= 8u;
  v3 = *(JSC::ParserArena **)(a1 + 8);
  v4 = *(_QWORD *)v3;
  if (*((_QWORD *)v3 + 1) - *(_QWORD *)v3 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v3);
    v4 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v4 + 32;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v4 + 12) = result;
  *(_DWORD *)(v4 + 20) = -1;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 25) = 126;
  *(_BYTE *)(v4 + 26) = 0;
  *(_QWORD *)v4 = &off_1E3584748;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[90]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "The 'await' keyword is disallowed in the IdentifierReference position within static block");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "Cannot use 'await' within a parameter default expression");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int32x2_t *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int8 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  BOOL v63;
  double *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t LogicalNot;
  double *v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint64_t result;
  int v82;
  int v83;
  const char *v84;
  int v85;
  int v86;
  const char *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  __int8 v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  const char *v102;
  int v103;
  const char *v104;
  int v105;
  __int128 v106;
  int v107[3];

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7404);
  v11 = *(_DWORD *)(a1 + 7408);
  v98 = *(_QWORD *)(a1 + 7416);
  v99 = *(_DWORD *)(a1 + 7424);
  v12 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v12;
  *(_DWORD *)(a1 + 7452) = v10;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v9;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197E71EB4);
  }
  v16 = (int32x2_t *)(a1 + 7300);
  v17 = (_DWORD *)(a1 + 7368);
  v18 = (uint64_t *)(a1 + 7444);
  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v20 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v20;
  v25 = *(_QWORD *)(a1 + 7416);
  v95 = a1;
  v96 = v25;
  v97 = *(_DWORD *)(a1 + 7424);
  v93 = 0;
  v94 = *(_QWORD *)(a1 + 7496);
  *(_QWORD *)(a1 + 7496) = &v93;
  v26 = *(_BYTE *)(a1 + 7440);
  *(_BYTE *)(a1 + 7440) = 1;
  v107[0] = 0;
  if ((_DWORD)v20 != 546)
    goto LABEL_10;
  v27 = *(_DWORD *)(a1 + 12);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x197E71EBCLL);
  }
  v28 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    v29 = v28;
    if (v28 == 1)
      break;
    --v28;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 12) & 0x40) != 0)
      goto LABEL_7;
  }
  v28 = 0;
LABEL_7:
  if (v27 <= v29 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E71EC4);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 11) & 0x40) != 0 || ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 12) & 0x10) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
      *(_BYTE *)(a1 + 7440) = v26;
      goto LABEL_124;
    }
    v44 = (double *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::ASTBuilder>(a1, a2);
  }
  else
  {
LABEL_10:
    v91 = v9;
    v92 = v26;
    v90 = v11;
    v106 = *(_OWORD *)(a1 + 7400);
    if ((v20 & 0x100) != 0)
    {
      v32 = a1 + 7444;
      v33 = v10;
      do
      {
        v30 = v20;
        ++*(_DWORD *)(a1 + 7300);
        JSC::ASTBuilder::appendUnaryToken(a2, v107, v20, (unsigned int *)(a1 + 7416), v21, v22, v23, v24);
        v38 = *(_DWORD *)(a1 + 7400);
        v39 = *(_DWORD *)(a1 + 7412);
        v40 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v38;
        *(_DWORD *)(a1 + 7448) = v39;
        *(_DWORD *)(a1 + 7452) = v40;
        v41 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v41 + 4) = v38;
        v42 = *(_DWORD *)(a1 + 12);
        if (!v42)
        {
          __break(0xC471u);
          JUMPOUT(0x197E71EA4);
        }
        v31 = (v30 & 0xFFFFFFFC) == 256;
        v43 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1;
        *(_BYTE *)(v41 + 56) = 0;
        v20 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v41, a1 + 7368, 0, v43, v34, v35, v36, v37);
        *(_DWORD *)(a1 + 7368) = v20;
        ++*(_DWORD *)(a1 + 7304);
        if ((v20 & 0x100) == 0)
        {
          v18 = (uint64_t *)(a1 + 7444);
          v16 = (int32x2_t *)(a1 + 7300);
          goto LABEL_21;
        }
      }
      while ((v30 & 0xFFFFFFFC) != 0x100);
      if (!*(_QWORD *)(a1 + 7360))
      {
        v104 = JSC::operatorString((JSC *)1, v30);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v104);
      }
      goto LABEL_18;
    }
    v30 = 0;
    v31 = 0;
LABEL_21:
    v104 = *(const char **)(a1 + 7416);
    v105 = *(_DWORD *)(a1 + 7424);
    v45 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2);
    if (v45)
    {
      v44 = (double *)v45;
      if ((v30 & 0xFFFFFFFC) == 0x100)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 256))(v45))
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v102 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v44);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, &v102);
          }
          v44 = 0;
          v11 = v90;
          v9 = v91;
          goto LABEL_19;
        }
        if (((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 88))(v44) & 1) == 0)
        {
          v83 = *(_DWORD *)(a1 + 12);
          if (!v83)
          {
            __break(0xC471u);
            JUMPOUT(0x197E71EFCLL);
          }
          v32 = (uint64_t)v18;
          v33 = v10;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v83 - 1) + 9) & 1) != 0
            || ((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 296))(v44) & 1) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if ((v30 & 0xFFFFFFFD) == 0x100)
                v84 = "++";
              else
                v84 = "--";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v84);
            }
LABEL_18:
            v44 = 0;
            v10 = v33;
            v11 = v90;
            v9 = v91;
            v18 = (uint64_t *)v32;
LABEL_19:
            v16 = (int32x2_t *)(a1 + 7300);
LABEL_91:
            v26 = v92;
            goto LABEL_92;
          }
        }
      }
      v46 = *(_DWORD *)(a1 + 12);
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197E71ECCLL);
      }
      v16 = (int32x2_t *)(a1 + 7300);
      v89 = v18;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v46 - 1) + 9) & 1) != 0
        && (*(unsigned int (**)(double *))(*(_QWORD *)v44 + 112))(v44))
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v48 = **(_QWORD **)(a1 + 7320);
        v49 = v48 == *(_QWORD *)(v47 + 1248) || v48 == *(_QWORD *)(v47 + 880);
        if (v31 && v49)
        {
          v50 = *(_DWORD *)(a1 + 12);
          if (!v50)
          {
            __break(0xC471u);
            JUMPOUT(0x197E71EF4);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v50 - 1) + 9) & 1) != 0)
          {
            v18 = v89;
            if (!*(_QWORD *)(a1 + 7360))
            {
              v102 = **(const char ***)(a1 + 7320);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v102);
            }
LABEL_113:
            v44 = 0;
LABEL_90:
            v11 = v90;
            v9 = v91;
            goto LABEL_91;
          }
          v49 = 1;
        }
      }
      else
      {
        v49 = 0;
      }
      if (*v17 == 257)
      {
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v44 + 256))(v44))
        {
          if (((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 88))(v44) & 1) == 0)
          {
            v88 = *(_DWORD *)(a1 + 12);
            if (!v88)
            {
              __break(0xC471u);
              JUMPOUT(0x197E71F0CLL);
            }
            v86 = v10;
            v16 = (int32x2_t *)(a1 + 7300);
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v88 - 1) + 9) & 1) != 0
              || ((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 296))(v44) & 1) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v87 = "Postfix -- operator applied to value that is not a reference";
                goto LABEL_155;
              }
LABEL_156:
              v44 = 0;
              v10 = v86;
LABEL_136:
              v11 = v90;
              v9 = v91;
              v18 = v89;
              goto LABEL_19;
            }
          }
          *v16 = vadd_s32(*v16, (int32x2_t)0x100000001);
          JSC::ASTBuilder::makePostfixNode(a2, (uint64_t)&v106, (uint64_t)v44, 6, (uint64_t *)&v104, v89, (uint64_t *)(a1 + 7428));
          v44 = v64;
          ++*(_DWORD *)(a1 + 7296);
          if (!v49)
            goto LABEL_62;
          v65 = *(_DWORD *)(a1 + 12);
          if (!v65)
          {
            __break(0xC471u);
            JUMPOUT(0x197E71EECLL);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v65 - 1) + 9) & 1) == 0)
          {
LABEL_62:
            if (!v31)
            {
              v66 = *(_DWORD *)(a1 + 7400);
              v67 = *(_DWORD *)(a1 + 7412);
              v68 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v66;
              *(_DWORD *)(a1 + 7448) = v67;
              *(_DWORD *)(a1 + 7452) = v68;
              v60 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v60 + 4) = v66;
              v61 = *(_DWORD *)(a1 + 12);
              v18 = v89;
              if (!v61)
              {
                __break(0xC471u);
                JUMPOUT(0x197E71EDCLL);
              }
              goto LABEL_64;
            }
LABEL_133:
            if (!*(_QWORD *)(a1 + 7360))
            {
              v102 = JSC::operatorString(0, v30);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v102);
            }
            v44 = 0;
            goto LABEL_136;
          }
          if (!*(_QWORD *)(a1 + 7360))
          {
            v102 = **(const char ***)(a1 + 7320);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)&v102);
          }
LABEL_110:
          v44 = 0;
          v11 = v90;
          v9 = v91;
          v18 = v89;
          goto LABEL_91;
        }
      }
      else
      {
        if (*v17 != 256)
        {
          v18 = v89;
LABEL_65:
          v102 = (const char *)*v18;
          v103 = *((_DWORD *)v18 + 2);
          if (v107[0])
          {
            v70 = *(_DWORD *)(a2 + 1052);
            while (1)
            {
              v71 = *(_QWORD *)(a2 + 1040) + 16 * v70;
              v104 = *(const char **)(v71 - 12);
              v105 = *(_DWORD *)(v71 - 4);
              v72 = *(_DWORD *)(v71 - 16);
              if (v72 <= 773)
              {
                switch(v72)
                {
                  case 256:
                  case 258:
                    v100 = v104 | ((unint64_t)(HIDWORD(v104) + 2) << 32);
                    v101 = v105;
                    v73 = a2;
                    v74 = (uint64_t)v44;
                    v75 = 5;
                    goto LABEL_75;
                  case 257:
                  case 259:
                    v100 = v104 | ((unint64_t)(HIDWORD(v104) + 2) << 32);
                    v101 = v105;
                    v73 = a2;
                    v74 = (uint64_t)v44;
                    v75 = 6;
LABEL_75:
                    JSC::ASTBuilder::makePrefixNode(v73, (uint64_t)&v106, v74, v75, (uint64_t *)&v104, (uint64_t *)&v100, (uint64_t *)&v102);
                    v44 = v77;
                    ++*(_DWORD *)(a1 + 7296);
                    goto LABEL_89;
                  case 260:
                    LogicalNot = JSC::ASTBuilder::createLogicalNot(a2, (uint64_t)&v106, v44);
                    goto LABEL_88;
                  case 261:
                    JSC::ASTBuilder::makeBitwiseNotNode(a2, (uint64_t)&v106, v44);
                    goto LABEL_88;
                  default:
                    goto LABEL_158;
                }
              }
              if (v72 <= 775)
              {
                if (v72 == 774)
                  JSC::ASTBuilder::makeTypeOfNode(a2, (uint64_t)&v106, v44);
                else
                  JSC::ASTBuilder::createVoid(a2, (uint64_t)&v106, (uint64_t)v44);
              }
              else
              {
                switch(v72)
                {
                  case 776:
                    if ((*(unsigned int (**)(double *))(*(_QWORD *)v44 + 112))(v44))
                    {
                      v78 = *(_DWORD *)(a1 + 12);
                      if (!v78)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E71ED4);
                      }
                      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1) != 0)
                      {
                        if (!*(_QWORD *)(a1 + 7360))
                        {
                          v100 = **(_QWORD **)(a1 + 7320);
                          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v100);
                        }
                        goto LABEL_113;
                      }
                    }
                    if ((*(unsigned int (**)(double *))(*(_QWORD *)v44 + 96))(v44))
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                      {
                        v100 = **(_QWORD **)(a1 + 7336);
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v100);
                      }
                      goto LABEL_113;
                    }
                    LogicalNot = (uint64_t)JSC::ASTBuilder::makeDeleteNode(a2, (uint64_t)&v106, (_QWORD **)v44, (uint64_t *)(*(_QWORD *)(a2 + 1040) + 16 * *(unsigned int *)(a2 + 1052) - 12), (uint64_t *)&v102, (uint64_t *)&v102);
                    break;
                  case 174336:
                    JSC::ASTBuilder::createUnaryPlus(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v106, (uint64_t)v44);
                    break;
                  case 174337:
                    JSC::ASTBuilder::makeNegateNode(a2, (uint64_t)&v106, (uint64_t)v44);
                    break;
                  default:
LABEL_158:
                    __break(0xC471u);
                    JUMPOUT(0x197E71EACLL);
                }
              }
LABEL_88:
              v44 = (double *)LogicalNot;
LABEL_89:
              v79 = v107[0];
              v70 = *(_DWORD *)(a2 + 1052) - 1;
              *(_DWORD *)(a2 + 1052) = v70;
              v107[0] = v79 - 1;
              if (v79 == 1)
                goto LABEL_90;
            }
          }
          goto LABEL_90;
        }
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v44 + 256))(v44))
        {
          if (((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 88))(v44) & 1) == 0)
          {
            v85 = *(_DWORD *)(a1 + 12);
            if (!v85)
            {
              __break(0xC471u);
              JUMPOUT(0x197E71F04);
            }
            v86 = v10;
            v16 = (int32x2_t *)(a1 + 7300);
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 9) & 1) != 0
              || ((*(uint64_t (**)(double *))(*(_QWORD *)v44 + 296))(v44) & 1) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v87 = "Postfix ++ operator applied to value that is not a reference";
LABEL_155:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v87);
                goto LABEL_156;
              }
              goto LABEL_156;
            }
          }
          *v16 = vadd_s32(*v16, (int32x2_t)0x100000001);
          JSC::ASTBuilder::makePostfixNode(a2, (uint64_t)&v106, (uint64_t)v44, 5, (uint64_t *)&v104, v89, (uint64_t *)(a1 + 7428));
          v44 = v55;
          ++*(_DWORD *)(a1 + 7296);
          if (!v49)
            goto LABEL_42;
          v56 = *(_DWORD *)(a1 + 12);
          if (!v56)
          {
            __break(0xC471u);
            JUMPOUT(0x197E71EE4);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v56 - 1) + 9) & 1) == 0)
          {
LABEL_42:
            if (!v31)
            {
              v57 = *(_DWORD *)(a1 + 7400);
              v58 = *(_DWORD *)(a1 + 7412);
              v59 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v57;
              *(_DWORD *)(a1 + 7448) = v58;
              *(_DWORD *)(a1 + 7452) = v59;
              v60 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v60 + 4) = v57;
              v61 = *(_DWORD *)(a1 + 12);
              v18 = v89;
              if (!v61)
              {
                __break(0xC471u);
                JUMPOUT(0x197E71708);
              }
LABEL_64:
              v69 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1;
              *(_BYTE *)(v60 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v60, a1 + 7368, 0, v69, v51, v52, v53, v54);
              goto LABEL_65;
            }
            goto LABEL_133;
          }
          if (!*(_QWORD *)(a1 + 7360))
          {
            v102 = **(const char ***)(a1 + 7320);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v102);
          }
          goto LABEL_110;
        }
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        v102 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v44);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, &v102);
      }
      goto LABEL_110;
    }
    v63 = (*v17 & 0x100000) == 0 && *v17 != 20;
    if (v30)
    {
      v26 = v92;
      if (v63)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v102 = JSC::operatorString((JSC *)1, v30);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, &v102);
        }
      }
      else
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      v44 = 0;
      v11 = v90;
      v9 = v91;
    }
    else
    {
      v11 = v90;
      v9 = v91;
      v26 = v92;
      if (v63)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
      }
      else
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      v44 = 0;
    }
  }
LABEL_92:
  v16[17].i8[4] = v26;
  if (v44)
  {
    *(_DWORD *)(a2 + 24) |= 0x80u;
    v80 = *(uint64_t **)(a2 + 8);
    result = *v80;
    if ((unint64_t)(v80[1] - *v80) <= 0x47)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
      result = *v80;
    }
    *v80 = result + 72;
    *(_DWORD *)(result + 8) = v9;
    *(_DWORD *)(result + 12) = v11;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E358AF00;
    *(_QWORD *)(result + 64) = v44;
    *(_QWORD *)(result + 28) = v96;
    *(_DWORD *)(result + 36) = v97;
    *(_QWORD *)(result + 52) = -1;
    *(_DWORD *)(result + 60) = -1;
    *(_DWORD *)(result + 48) = v99;
    *(_QWORD *)(result + 40) = v98;
    v82 = *((_DWORD *)v18 + 2);
    *(_QWORD *)(result + 52) = *v18;
    *(_DWORD *)(result + 60) = v82;
    goto LABEL_96;
  }
LABEL_124:
  if (*v17 == 20 || (*v17 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Failed to parse await expression");
  }
  result = 0;
LABEL_96:
  *(_QWORD *)(v95 + 7496) = v94;
  return result;
}

int32x2_t JSC::ASTBuilder::createNull(uint64_t a1, uint64_t a2)
{
  JSC::ParserArena *v3;
  uint64_t v4;
  int32x2_t result;

  ++*(_DWORD *)(a1 + 28);
  v3 = *(JSC::ParserArena **)(a1 + 8);
  v4 = *(_QWORD *)v3;
  if (*((_QWORD *)v3 + 1) - *(_QWORD *)v3 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v3);
    v4 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v4 + 32;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v4 + 12) = result;
  *(_DWORD *)(v4 + 20) = -1;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 25) = 16;
  *(_BYTE *)(v4 + 26) = 0;
  *(_QWORD *)v4 = &off_1E357AEE0;
  return result;
}

int32x2_t JSC::ASTBuilder::createBoolean(uint64_t a1, uint64_t a2, char a3)
{
  JSC::ParserArena *v5;
  uint64_t v6;
  int32x2_t result;

  ++*(_DWORD *)(a1 + 28);
  v5 = *(JSC::ParserArena **)(a1 + 8);
  v6 = *(_QWORD *)v5;
  if (*((_QWORD *)v5 + 1) - *(_QWORD *)v5 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v5);
    v6 = *(_QWORD *)v5;
  }
  *(_QWORD *)v5 = v6 + 32;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 32;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E357B068;
  *(_BYTE *)(v6 + 27) = a3;
  return result;
}

uint64_t JSC::ASTBuilder::createRegExp(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v10;
  unsigned int v11;
  const WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  JSC::ParserArena *v17;
  uint64_t result;
  __int128 v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;

  v10 = *a3;
  if (*a3)
  {
    v11 = *(_DWORD *)(v10 + 16);
    v12 = *(const WTF::StringImpl **)(v10 + 8);
    v10 = *(unsigned int *)(v10 + 4);
    v13 = (unint64_t)((v11 >> 2) & 1) << 32;
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  v14 = *a4;
  if (*a4)
  {
    v15 = *(unsigned __int16 **)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  if (JSC::Yarr::checkSyntax(v12, v13 | v10, v15, v16))
    return 0;
  v17 = *(JSC::ParserArena **)(a1 + 8);
  result = *(_QWORD *)v17;
  if (*((_QWORD *)v17 + 1) - *(_QWORD *)v17 <= 0x4FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v17);
    result = *(_QWORD *)v17;
  }
  *(_QWORD *)v17 = result + 80;
  *(_DWORD *)(result + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 25) = 126;
  *(_BYTE *)(result + 26) = 0;
  *(_DWORD *)(result + 60) = -1;
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  *(_OWORD *)(result + 44) = v19;
  *(_OWORD *)(result + 28) = v19;
  *(_QWORD *)result = &off_1E35845C8;
  *(_QWORD *)(result + 64) = a3;
  *(_QWORD *)(result + 72) = a4;
  if (*a3)
    v20 = *(_DWORD *)(*a3 + 4) + 2;
  else
    v20 = 2;
  v21 = a5[2];
  v22 = *a5 | ((unint64_t)(a5[1] + v20) << 32);
  *(_QWORD *)(result + 28) = v22;
  *(_DWORD *)(result + 36) = v21;
  v23 = *(_QWORD *)a5;
  *(_DWORD *)(result + 48) = a5[2];
  *(_QWORD *)(result + 40) = v23;
  *(_QWORD *)(result + 52) = v22;
  *(_DWORD *)(result + 60) = v21;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(uint64_t a1, WTF::StringImpl *a2, int a3, char a4, char a5, int a6, int a7, uint64_t **a8, int a9, uint64_t a10)
{
  _BYTE *v10;
  int v11;
  int v12;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  const char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int *v39;
  _OWORD *v40;
  int v41;
  __int128 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BOOL4 v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  WTF::StringImpl *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  int v73;
  int v74;
  __int128 v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  __int128 *v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  char v101;
  void *v102;
  uint64_t v103;
  unsigned int *v104;
  WTF *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  WTF::AtomStringImpl *v122;
  WTF *v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  char v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  unsigned __int8 v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  int v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  WTF::StringImpl *v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF *v252;
  int v253;
  uint64_t v254;
  const char *v255;
  char v256;
  int v257;
  int v258;
  int v259;
  BOOL v261;
  char v262;
  BOOL v263;
  unint64_t v264;
  BOOL *v265;
  int v267;
  WTF *v270;
  _BYTE v271[24];
  WTF *v272;
  int v273;
  __int128 v274;
  uint64_t *v275;
  WTF *v276;
  WTF *v277;
  uint64_t v278;
  _BYTE v279[64];
  int v280;
  char v281;
  int v282;
  char v283;
  _BYTE v284[24];
  WTF *v285;
  int v286;
  WTF::StringImpl *v287[12];
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _BYTE v293[32];
  int v294;
  __int128 v295;
  _QWORD v296[2];
  uint64_t v297[10];
  int v298;
  int v299;
  __int128 v300;
  int v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  int v310;
  int v311;
  char v312;
  __int128 v313;

  v10 = (_BYTE *)(a1 + 7344);
  v312 = a5;
  v310 = a7;
  v311 = a6;
  v11 = *(unsigned __int8 *)(a1 + 7474);
  v309 = v11;
  v12 = 1 << v11;
  if (((1 << v11) & 0x1F8FFF) == 0)
  {
    __break(0xC471u);
    goto LABEL_314;
  }
  v16 = *(_DWORD *)(a1 + 12);
  v17 = v16 - 1;
  v307 = a1;
  v308 = (v16 - 1);
  v18 = *(_DWORD *)(a1 + 7368);
  v265 = (BOOL *)(a1 + 7344);
  if (v18 != 546)
  {
    if (v18 != 1048592
      || (v10 = (_BYTE *)(a1 + 7344),
          **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    {
      v21 = 0;
      v20 = 0;
      goto LABEL_58;
    }
  }
  if (!*v10)
    goto LABEL_10;
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197E73704);
  }
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v17 + 10);
  if ((v19 & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
  {
    v20 = 0;
    v21 = 1;
LABEL_58:
    v262 = 1;
    goto LABEL_12;
  }
  if ((v19 & 0x2000) != 0)
  {
LABEL_10:
    v262 = 0;
    v20 = "in an async function";
  }
  else if ((v19 & 0x100000) != 0)
  {
    v262 = 0;
    v20 = "in a static block";
  }
  else
  {
    if (*(_DWORD *)(a1 + 7480) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7357CLL);
    }
    v262 = 0;
    v20 = "in a module";
  }
  v21 = 1;
LABEL_12:
  v306 = v20;
  v22 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v24 = v23;
  v303 = v22;
  v304 = v23;
  v305 = (uint64_t *)a1;
  if (*(_DWORD *)(v22 + 12) <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197E736E4);
  }
  v25 = v22;
  v26 = v23;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v22 + 720 * v23, v11);
  v32 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v32)
  {
    __break(0xC471u);
    JUMPOUT(0x197E736ECLL);
  }
  v33 = *(_QWORD *)a1;
  v34 = v32 - 1;
  if ((_DWORD)v32 != 1 && (*(_DWORD *)(v33 + 720 * (v32 - 1) + 10) & 0x400000) != 0)
  {
    v35 = 720 * v32;
    while (1)
    {
      v36 = v35 - 720;
      if (v35 == 720)
        break;
      v37 = *(_BYTE *)(v33 + v35 - 1428);
      v35 -= 720;
      if ((v37 & 0x40) != 0)
      {
        if (*(_BYTE *)(v33 + v36 - 712) != 2)
          *(_BYTE *)(v33 + 720 * (v32 - 1) + 8) = 0;
        break;
      }
    }
  }
  if (*(_DWORD *)(v25 + 12) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197E736F4);
  }
  v38 = *(_QWORD *)v25 + 720 * v26;
  *(_DWORD *)(v38 + 20) = a6;
  v39 = (int *)(a1 + 7368);
  *(_BYTE *)(v38 + 15) = a5;
  v40 = (_OWORD *)(a1 + 7316);
  v41 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 1;
  v42 = (__int128 *)(a1 + 7400);
  v43 = *(_DWORD *)(a1 + 7408);
  v44 = *(_QWORD *)(a1 + 7328);
  *(_QWORD *)(a1 + 7328) = 0;
  v301 = -1;
  v302 = v43;
  v300 = 0uLL;
  v298 = 0;
  v299 = -1;
  v297[0] = a1;
  v297[1] = (uint64_t)&v301;
  v297[2] = (uint64_t)a8;
  v297[3] = (uint64_t)&v309;
  v297[4] = (uint64_t)a2;
  v297[5] = (uint64_t)&v300;
  v297[6] = (uint64_t)&v299;
  v297[7] = (uint64_t)&v310;
  v297[8] = (uint64_t)&v302;
  v297[9] = (uint64_t)&v303;
  v45 = *(_QWORD *)(a1 + 7216);
  v296[0] = v45;
  if ((v12 & 0x840) != 0)
  {
    v300 = *v42;
    *((_DWORD *)a8 + 8) = *(_DWORD *)(a1 + 7400);
    v299 = v43 - *(_DWORD *)(a1 + 7404);
    v196 = v299;
    v301 = v43;
    *((_DWORD *)a8 + 6) = v43;
    *((_DWORD *)a8 + 10) = v196;
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v297) & 1) != 0)
    {
      v52 = 1;
      goto LABEL_38;
    }
    if (*(_DWORD *)(v307 + 12) <= v308)
    {
      __break(0xC471u);
      JUMPOUT(0x197E737CCLL);
    }
    JSC::Scope::MaybeParseAsGeneratorFunctionForScope::MaybeParseAsGeneratorFunctionForScope((uint64_t)&v274, &v303, (*(_DWORD *)(*(_QWORD *)v307 + 720 * v308 + 10) >> 9) & 1);
    if (*(_DWORD *)(v307 + 12) <= v308)
    {
      __break(0xC471u);
      JUMPOUT(0x197E737D4);
    }
    v219 = *v265;
    *v265 = (*(_DWORD *)(*(_QWORD *)v307 + 720 * v308 + 10) & 0x2000 | (1 << v309) & 0x38F80) == 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, (WTF::AtomStringImpl *)v296, (uint64_t)a8, v214, v215, v216, v217, v218);
    v220 = *(_QWORD *)(a1 + 7360);
    *v265 = v219;
    if (*(_DWORD *)(v274 + 12) <= DWORD2(v274))
    {
      __break(0xC471u);
      JUMPOUT(0x197E737DCLL);
    }
    *(_DWORD *)(*(_QWORD *)v274 + 720 * DWORD2(v274) + 10) = *(_DWORD *)(*(_QWORD *)v274 + 720 * DWORD2(v274) + 10) & 0xFFFFFDFF | (v275 << 9);
    if (v220)
      goto LABEL_41;
    v221 = *v39;
    if (*v39 == 38)
    {
      v222 = *(_QWORD *)(a1 + 7288);
      if (!*(_BYTE *)(v222 + 56))
      {
        v223 = *(_DWORD *)(a1 + 7400);
        v224 = *(_DWORD *)(a1 + 7412);
        v225 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v223;
        *(_DWORD *)(a1 + 7448) = v224;
        *(_DWORD *)(a1 + 7452) = v225;
        *(_DWORD *)(v222 + 4) = v223;
        v226 = *(_DWORD *)(a1 + 12);
        if (!v226)
        {
          __break(0xC471u);
          JUMPOUT(0x197E737E4);
        }
        v227 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v226 - 1) + 9) & 1;
        *(_BYTE *)(v222 + 56) = 0;
        v228 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v222, a1 + 7368, 0, v227, v28, v29, v30, v31);
        *(_DWORD *)(a1 + 7368) = v228;
        v74 = v228 == 0;
        goto LABEL_65;
      }
    }
    else if (v221 != 20 && (v221 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a '=>' after arrow function parameter declaration");
      goto LABEL_41;
    }
LABEL_209:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_41;
  }
  v46 = *(_BYTE *)(v33 + 720 * v34 + 9);
  v47 = (v46 & 1) == 0;
  if (a9 || (v12 & 0x201) == 0)
  {
    if (v32 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x197E736FCLL);
    }
    if ((*(_BYTE *)(v33 + 720 * v17 + 11) & 2) != 0)
      v47 = 0;
  }
  v48 = a3;
  if (a3 == 2)
  {
LABEL_37:
    v300 = *v42;
    *((_DWORD *)a8 + 8) = *(_DWORD *)(a1 + 7400);
    v51 = *(_DWORD *)(a1 + 7408);
    v299 = v51 - *(_DWORD *)(a1 + 7404);
    *((_DWORD *)a8 + 10) = v299;
    v301 = v51;
    *((_DWORD *)a8 + 6) = v51;
    v52 = 1;
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v297) & 1) != 0)
      goto LABEL_38;
    v55 = *v265;
    *v265 = ((1 << v309) & 0x38F80) == 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, (WTF::AtomStringImpl *)v296, (uint64_t)a8, v27, v28, v29, v30, v31);
    v58 = *(_QWORD *)(a1 + 7360);
    *v265 = v55;
    if (v58)
      goto LABEL_41;
    v73 = *v39;
    if (!*v39)
    {
      if ((a10 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 7448) != (_DWORD)a10)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[80]>(a1);
        goto LABEL_41;
      }
      v74 = 2;
LABEL_65:
      v259 = v41;
      v298 = v74;
      *(_QWORD *)(a1 + 7328) = v44;
      v295 = *(_OWORD *)(a1 + 7296);
      v75 = *(_OWORD *)(a1 + 7332);
      *(_OWORD *)v293 = *v40;
      *(_OWORD *)&v293[16] = v75;
      v294 = *(_DWORD *)(a1 + 7348);
      v76 = *((_DWORD *)a2 + 263);
      v288 = 0x800000000;
      *(_QWORD *)&v77 = -1;
      *((_QWORD *)&v77 + 1) = -1;
      v289 = v77;
      v290 = v77;
      v291 = v77;
      v292 = v77;
      if (*(_DWORD *)(v303 + 12) <= v304)
      {
        __break(0xC471u);
        JUMPOUT(0x197E73764);
      }
      v78 = *(_QWORD *)v303;
      *(_QWORD *)&v274 = &v303;
      *((_QWORD *)&v274 + 1) = &v288;
      v275 = &v307;
      v79 = v78 + 720 * v304;
      v80 = *(_DWORD *)(v79 + 180);
      if (v80)
      {
        v81 = *(_QWORD *)(v79 + 168);
        v82 = v81 + 72 * v80;
        do
        {
          v83 = *(unsigned int *)(v81 + 4);
          v84 = (_QWORD *)(v81 + 8);
          if ((_DWORD)v83 != 8)
            v84 = (_QWORD *)*v84;
          v85 = 0;
          while ((_DWORD)v83 != v85)
          {
            LODWORD(v86) = v85;
            v87 = v84[v85++];
            if (v87 != -1)
            {
              v86 = v86;
              goto LABEL_74;
            }
          }
          v86 = *(unsigned int *)(v81 + 4);
LABEL_74:
          if ((_DWORD)v83 != (_DWORD)v86)
          {
            v264 = v86 | (v83 << 32);
            do
            {
              LODWORD(v230) = v86;
              JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(WTF::UniquedStringImpl *)#1}::operator()((uint64_t **)&v274, (WTF::StringImpl *)v84[v264], v57, v27, v28, v29, v30, v31);
              if (HIDWORD(v264) <= (v230 + 1))
                v86 = (v230 + 1);
              else
                v86 = HIDWORD(v264);
              while ((_DWORD)v86 - 1 != (_DWORD)v230)
              {
                v230 = (v230 + 1);
                if (v84[v230] != -1)
                {
                  LODWORD(v86) = v230;
                  goto LABEL_199;
                }
              }
              v230 = v86;
LABEL_199:
              v264 = v230 | v264 & 0xFFFFFFFF00000000;
            }
            while ((_DWORD)v83 != (_DWORD)v86);
          }
          v81 += 72;
        }
        while (v81 != v82);
      }
      v88 = a8;
      v287[0] = a2;
      v287[1] = (WTF::StringImpl *)v296;
      v287[2] = (WTF::StringImpl *)&v300;
      v287[3] = (WTF::StringImpl *)&v299;
      v287[4] = (WTF::StringImpl *)&v310;
      v287[5] = (WTF::StringImpl *)&v302;
      v287[6] = (WTF::StringImpl *)&v301;
      v287[7] = (WTF::StringImpl *)&v312;
      v287[8] = (WTF::StringImpl *)&v311;
      v287[9] = (WTF::StringImpl *)&v298;
      v287[10] = (WTF::StringImpl *)a8;
      v287[11] = (WTF::StringImpl *)a1;
      if (((0x70E04u >> v309) & 1) != 0)
      {
        v161 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
        v163 = v162;
        v164 = 1 << v309;
        if (v309 == 11)
          v165 = 8;
        else
          v165 = 7;
        if ((v164 & 0x30000) != 0)
          v165 = 15;
        if ((v164 & 0x30E00) == 0)
          v165 = 1;
        if (*(_DWORD *)(v161 + 12) <= v162)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7379CLL);
        }
        v166 = v161;
        v167 = v162;
        JSC::Scope::setSourceParseMode(*(_QWORD *)v161 + 720 * v162, v165);
        v175 = *(unsigned int *)(a1 + 12);
        if (!(_DWORD)v175)
        {
          __break(0xC471u);
          JUMPOUT(0x197E737A4);
        }
        if ((_DWORD)v175 != 1)
        {
          v176 = v175 - 1;
          v177 = *(_QWORD *)a1;
          if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v175 - 1) + 10) & 0x400000) != 0)
          {
            v178 = 720 * v175;
            while (1)
            {
              v179 = v178 - 720;
              if (v178 == 720)
                break;
              v180 = *(_BYTE *)(v177 + v178 - 1428);
              v178 -= 720;
              if ((v180 & 0x40) != 0)
              {
                if (*(_BYTE *)(v177 + v179 - 712) != 2)
                  *(_BYTE *)(v177 + 720 * v176 + 8) = 0;
                break;
              }
            }
          }
        }
        if (*(_DWORD *)(v166 + 12) <= v163)
        {
          __break(0xC471u);
          JUMPOUT(0x197E737ACLL);
        }
        v181 = *(_QWORD *)v166;
        v182 = *(_QWORD *)v166 + 720 * v167;
        *(_BYTE *)(v182 + 15) = 0;
        *(_DWORD *)(v182 + 20) = v311;
        if (*(_DWORD *)(v303 + 12) <= v304)
        {
          __break(0xC471u);
          JUMPOUT(0x197E737B4);
        }
        if ((*(_BYTE *)(*(_QWORD *)v303 + 720 * v304 + 13) & 4) != 0)
          *(_DWORD *)(v181 + 720 * v167 + 10) = *(_DWORD *)(v181 + 720 * v167 + 10) & 0xFB7FFFFF | 0x4000000;
        a8[1] = (uint64_t *)JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v287, v168, v169, v170, v171, v172, v173, v174);
        if (*(_DWORD *)(v166 + 12) <= v163)
        {
          __break(0xC471u);
          JUMPOUT(0x197E737BCLL);
        }
        if ((*(_BYTE *)(*(_QWORD *)v166 + 720 * v167 + 9) & 1) != 0)
        {
          if (*(_DWORD *)(v303 + 12) <= v304)
          {
            __break(0xC471u);
            JUMPOUT(0x197E737C4);
          }
          *(_BYTE *)(*(_QWORD *)v303 + 720 * v304 + 9) |= 1u;
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v284, (uint64_t *)a1, 1, v183, v184, v185, v186, v187);
        v195 = v285;
        if (v285)
        {
          v285 = 0;
          v286 = 0;
          WTF::fastFree((unint64_t)v195, v188, v189, v190, v191, v192, v193, v194);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v284, (WTF::AtomStringImpl *)v188, v189, v190, v191, v192, v193, v194);
      }
      else
      {
        a8[1] = (uint64_t *)JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v287, v56, v57, v27, v28, v29, v30, v31);
      }
      v91 = (__int128 *)(a1 + 7296);
      *(_OWORD *)(a1 + 7296) = v295;
      *(_DWORD *)(a1 + 7312) = v76;
      *v40 = *(_OWORD *)v293;
      *(_OWORD *)(a1 + 7330) = *(_OWORD *)&v293[14];
      *((_DWORD *)a2 + 263) = v76;
      v92 = a8[1];
      if (!v92)
      {
        if (*v39 == 20 || (*v39 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v274 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(a1, 1, "Cannot parse the body of this ", (const char **)&v274);
        }
        goto LABEL_205;
      }
      v93 = *(_QWORD *)(a1 + 7288);
      *((_DWORD *)v92 + 7) = *(_DWORD *)(v93 + 80) - *(_DWORD *)(v93 + 88);
      if (*(_DWORD *)(v303 + 12) <= v304)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7376CLL);
      }
      if (a3 == 2 || (*(_BYTE *)(*(_QWORD *)v303 + 720 * v304 + 9) & 1) == 0)
        goto LABEL_84;
      if (((1 << v309) & 0x100067) == 0 && ((1 << v309) & 0x30E00) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7324CLL);
      }
      v136 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v137 = **a8;
      if (*(_QWORD *)(v136 + 880) == v137)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_205;
        *(_QWORD *)&v274 = *(_QWORD *)(v136 + 880);
      }
      else
      {
        if (*(_QWORD *)(v136 + 1248) != v137)
        {
LABEL_84:
          v94 = *(_QWORD *)(a1 + 7400);
          v95 = *(_QWORD *)(a1 + 7408);
          *((_DWORD *)a8 + 7) = *(_DWORD *)(a1 + 7380);
          v96 = v298;
          if (v298)
          {
            v97 = HIDWORD(v94);
            LODWORD(v274) = v300;
            *(int32x2_t *)((char *)&v274 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v300 + 4));
            v98 = *(_QWORD *)(a1 + 7520);
            if (v98)
            {
              JSC::DebuggerPausePositions::appendEntry(v98, (uint64_t)&v274);
              v229 = *(_QWORD *)(a1 + 7520);
              *(_QWORD *)&v274 = __PAIR64__(v95, v94);
              DWORD2(v274) = HIDWORD(v94);
              if (v229)
                JSC::DebuggerPausePositions::appendLeave(v229, (uint64_t)&v274);
            }
            v96 = v298;
            LODWORD(v99) = *((_DWORD *)a8 + 7);
          }
          else
          {
            LODWORD(v94) = *(_DWORD *)(v93 + 132);
            LODWORD(v97) = *(_DWORD *)(v93 + 136);
            v95 = *(_QWORD *)(v93 + 140);
            v99 = HIDWORD(v95);
            *((_DWORD *)a8 + 7) = HIDWORD(v95);
          }
          if (*(_QWORD *)(a1 + 7464) && (v96 != 2 ? (v100 = 8) : (v100 = 16), (int)v99 - *((_DWORD *)a8 + 6) > v100))
          {
            LOWORD(v276) = 0;
            v277 = (WTF *)v279;
            v278 = 8;
            v280 = 1;
            v101 = v283 & 0xE0;
            v283 &= 0xE0u;
            LODWORD(v274) = v94;
            *(_QWORD *)((char *)&v274 + 4) = v95;
            HIDWORD(v274) = v97;
            v275 = (uint64_t *)__PAIR64__(*((_DWORD *)a8 + 4), v99);
            v281 = v312;
            v282 = v311;
            if (!v96)
            {
              v283 = v101 | 0x10;
              v280 = *v39;
            }
            if (*(_DWORD *)(v303 + 12) <= v304)
            {
              __break(0xC471u);
              JUMPOUT(0x197E73784);
            }
            JSC::Scope::fillParametersForSourceProviderCache(*(_QWORD *)v303 + 720 * v304, (uint64_t)&v274, (uint64_t)&v288, v27, v28, v29, v30, v31);
            JSC::SourceProviderCacheItem::create((uint64_t *)&v313, (unsigned int *)&v274);
            v104 = (unsigned int *)v313;
            v105 = v277;
            if (v279 != (_BYTE *)v277 && v277)
            {
              v277 = 0;
              LODWORD(v278) = 0;
              WTF::fastFree((unint64_t)v105, v102, v103, v27, v28, v29, v30, v31);
            }
          }
          else
          {
            v104 = 0;
          }
          if (*(_DWORD *)(v303 + 12) <= v304)
          {
            __break(0xC471u);
            JUMPOUT(0x197E73774);
          }
          v305 = 0;
          JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v271, (uint64_t *)a1, 1, v27, v28, v29, v30, v31);
          v113 = v272;
          if (v272)
          {
            v272 = 0;
            v273 = 0;
            WTF::fastFree((unint64_t)v113, v106, v107, v108, v109, v110, v111, v112);
          }
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v271, (WTF::AtomStringImpl *)v106, v107, v108, v109, v110, v111, v112);
          if (!v298)
          {
            v313 = *v91;
            v267 = *(_DWORD *)(a1 + 7316);
            v275 = *(uint64_t **)(a1 + 7336);
            v274 = *(_OWORD *)(a1 + 7320);
            v261 = v265[1];
            v263 = *v265;
            v146 = *(int *)(a1 + 7408);
            v147 = *(int *)(a1 + 7404);
            v148 = *(int **)(a1 + 7288);
            v149 = *v148;
            v257 = v148[1];
            v258 = *((_DWORD *)a2 + 263);
            v150 = *((_BYTE *)v148 + 56);
            *((_BYTE *)v148 + 150) = 0;
            v151 = (WTF::StringImpl *)*((_QWORD *)v148 + 19);
            *((_QWORD *)v148 + 19) = 0;
            if (v151)
            {
              if (*(_DWORD *)v151 == 2)
              {
                v256 = v150;
                WTF::StringImpl::~StringImpl(v151, v89, v90, v27, v28, v29, v30, v31);
                WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
                v150 = v256;
              }
              else
              {
                *(_DWORD *)v151 -= 2;
              }
            }
            v152 = *((_QWORD *)v148 + 11);
            v153 = *((_QWORD *)v148 + 12);
            *((_QWORD *)v148 + 10) = v152 + v146;
            *((_QWORD *)v148 + 14) = v152 + v147;
            v148[5] = 0;
            v148[9] = 0;
            if (v152 + v146 >= v153)
              v154 = 0;
            else
              v154 = *(_BYTE *)(v152 + v146);
            *((_BYTE *)v148 + 176) = v154;
            v155 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)v155 = v149;
            *(_BYTE *)(v155 + 56) = v150;
            v156 = *(_DWORD *)(a1 + 7400);
            v157 = *(_DWORD *)(a1 + 7412);
            v158 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v156;
            *(_DWORD *)(a1 + 7448) = v157;
            *(_DWORD *)(a1 + 7452) = v158;
            *(_DWORD *)(v155 + 4) = v156;
            v159 = *(_DWORD *)(a1 + 12);
            if (!v159)
            {
              __break(0xC471u);
              JUMPOUT(0x197E73794);
            }
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v155, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v159 - 1) + 9) & 1, v28, v29, v30, v31);
            *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v257;
            *v91 = v313;
            *(_DWORD *)(a1 + 7312) = v258;
            *(_DWORD *)(a1 + 7316) = v267;
            *(_OWORD *)(a1 + 7320) = v274;
            *(_QWORD *)(a1 + 7336) = v275;
            *v265 = v263;
            v265[1] = v261;
            v88 = a8;
            *((_DWORD *)a2 + 263) = v258;
            v160 = *(WTF::StringImpl **)(a1 + 7360);
            *(_QWORD *)(a1 + 7360) = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
              {
                WTF::StringImpl::~StringImpl(v160, v89, v90, v27, v28, v29, v30, v31);
                WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
              }
              else
              {
                *(_DWORD *)v160 -= 2;
              }
            }
            goto LABEL_105;
          }
          v114 = *v39;
          if (*v39 == 1)
          {
            v115 = *(_DWORD *)(a1 + 7400);
            v116 = *(_DWORD *)(a1 + 7412);
            v117 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v115;
            *(_DWORD *)(a1 + 7448) = v116;
            *(_DWORD *)(a1 + 7452) = v117;
            v118 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v118 + 4) = v115;
            v119 = *(_DWORD *)(a1 + 12);
            if (!v119)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7377CLL);
            }
            v120 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v119 - 1) + 9) & 1;
            *(_BYTE *)(v118 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v118, a1 + 7368, 0, v120, v28, v29, v30, v31);
LABEL_105:
            if (v104)
            {
              v121 = *(_QWORD *)(a1 + 7464);
              v122 = (WTF::AtomStringImpl *)*((unsigned int *)v88 + 6);
              v270 = (WTF *)v104;
              JSC::SourceProviderCache::add(v121, v122, (uint64_t *)&v270, v27, v28, v29, v30, v31);
              v123 = v270;
              if (v270)
              {
                v124 = *((unsigned int *)v270 + 6);
                if ((_DWORD)v124)
                {
                  v125 = 0;
                  v126 = (unsigned int *)((char *)v270 + 33);
                  do
                  {
                    v127 = (WTF::StringImpl *)(*v126 | ((unint64_t)*((unsigned __int8 *)v126 + 4) << 32));
                    if (*(_DWORD *)v127 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v127, v89, v90, v27, v28, v29, v30, v31);
                      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
                      v124 = *((unsigned int *)v123 + 6);
                    }
                    else
                    {
                      *(_DWORD *)v127 -= 2;
                    }
                    ++v125;
                    v126 = (unsigned int *)((char *)v126 + 5);
                  }
                  while (v125 < v124);
                }
                WTF::fastFree((unint64_t)v123, v89, v90, v27, v28, v29, v30, v31);
              }
            }
            *((_DWORD *)v88 + 9) = *(_DWORD *)(a1 + 7444);
            v52 = 1;
            goto LABEL_116;
          }
          if (v114 == 20 || (v114 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v274 = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*,char const(&)[6]>(a1, (const char **)&v274);
          }
          if (v104)
          {
            v233 = v104[6];
            if ((_DWORD)v233)
            {
              v234 = 0;
              v235 = (unsigned int *)((char *)v104 + 33);
              do
              {
                v236 = (WTF::StringImpl *)(*v235 | ((unint64_t)*((unsigned __int8 *)v235 + 4) << 32));
                if (*(_DWORD *)v236 == 2)
                {
                  WTF::StringImpl::~StringImpl(v236, v89, v90, v27, v28, v29, v30, v31);
                  WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
                  v233 = v104[6];
                }
                else
                {
                  *(_DWORD *)v236 -= 2;
                }
                ++v234;
                v235 = (unsigned int *)((char *)v235 + 5);
              }
              while (v234 < v233);
            }
            WTF::fastFree((unint64_t)v104, v89, v90, v27, v28, v29, v30, v31);
          }
LABEL_205:
          v52 = 0;
LABEL_116:
          v41 = v259;
          if (HIDWORD(v288) != 8)
            WTF::fastFree(v289, v89, v90, v27, v28, v29, v30, v31);
          goto LABEL_38;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_205;
        *(_QWORD *)&v274 = **a8;
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[46]>(a1, (uint64_t *)&v274);
      goto LABEL_205;
    }
    if (v73 != 20 && (v73 & 0x100000) == 0)
    {
      *(_QWORD *)&v274 = JSC::stringForFunctionMode();
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const*,char const(&)[6]>(a1, (const char **)&v274);
      goto LABEL_41;
    }
    goto LABEL_209;
  }
  if ((v21 & 1) != 0)
    goto LABEL_43;
  v49 = *v39;
  if (*v39 == 544)
    goto LABEL_31;
  if (v49 == 12)
    goto LABEL_43;
  if (v49 != 1048592)
  {
    v50 = 0;
    v48 = a3;
    goto LABEL_32;
  }
  v48 = a3;
  if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v45 + 41952) + 328))
LABEL_31:
    v50 = (v46 & 1) == 0;
  else
    v50 = 0;
LABEL_32:
  if (v50 || !v47)
  {
    if (!v50)
    {
LABEL_36:
      if (v48 != 1)
        goto LABEL_37;
      if (v49 == 2)
      {
        if (v11)
        {
          if (v11 != 9)
            goto LABEL_209;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Async function statements must have a name");
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Function statements must have a name");
        }
LABEL_216:
        v52 = 0;
        goto LABEL_38;
      }
      if ((*(_BYTE *)(v33 + 720 * v34 + 9) & 1) != 0 && v49 == 532)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v274 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v43, *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v274 + 1) = v231;
          v287[0] = (WTF::StringImpl *)JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v274, (const char **)v287);
        }
        goto LABEL_216;
      }
      if ((v49 - 531) <= 1)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v274 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v43, *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v274 + 1) = v232;
          v287[0] = (WTF::StringImpl *)JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v274, (const char **)v287);
        }
        goto LABEL_216;
      }
      if ((v49 & 0x200) == 0)
        goto LABEL_209;
      if ((*v39 - 544) >= 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v274 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v43, *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v274 + 1) = v254;
          v287[0] = (WTF::StringImpl *)JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v274, (const char **)v287);
        }
        goto LABEL_216;
      }
      if (v49 == 546)
      {
        if (*v265 && (*(_DWORD *)(v33 + 720 * v34 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_209;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_216;
        *(_QWORD *)&v274 = JSC::stringForFunctionMode();
        v287[0] = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
        v255 = "Cannot use 'await' as a ";
      }
      else
      {
        if (v49 == 544)
        {
          if ((*(_BYTE *)(v33 + 720 * v34 + 9) & 1) == 0)
            goto LABEL_209;
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v274 = JSC::stringForFunctionMode();
            v287[0] = (WTF::StringImpl *)"in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v274, (const char **)v287);
          }
          goto LABEL_216;
        }
        if ((*(_BYTE *)(v33 + 720 * v34 + 9) & 1) == 0 && (*(_BYTE *)(v33 + 720 * v34 + 11) & 2) == 0)
          goto LABEL_209;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_216;
        *(_QWORD *)&v274 = JSC::stringForFunctionMode();
        v287[0] = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
        v255 = "Cannot use 'yield' as a ";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v255, (const char **)&v274, (const char **)v287);
      goto LABEL_216;
    }
  }
  else if (v49 != 545)
  {
    if (v49 != 1048592)
      goto LABEL_36;
    if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(v45 + 41952) + 496))
    {
      if (v48 == 1)
        goto LABEL_209;
      goto LABEL_37;
    }
  }
LABEL_43:
  v59 = *(uint64_t **)(a1 + 7376);
  *a8 = v59;
  *(_QWORD *)(a1 + 7328) = v59;
  if ((v262 & 1) != 0)
  {
    if ((v12 & 0x30E00) != 0 && !a9 && *v39 == 546)
    {
      if (*(_QWORD *)(a1 + 7360))
      {
LABEL_41:
        v52 = 0;
        goto LABEL_38;
      }
      *(_QWORD *)&v274 = JSC::stringForFunctionMode();
      v213 = " named 'await'";
LABEL_171:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const(&)[15]>(a1, (const char **)&v274, v213);
      goto LABEL_41;
    }
    if ((v12 & 0x70004) != 0 && !a9 && *v39 == 545)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_41;
      *(_QWORD *)&v274 = JSC::stringForFunctionMode();
      v213 = " named 'yield'";
      goto LABEL_171;
    }
  }
  else if (a9 == 1 || (v12 & 0x30E00) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],char const*&>(a1, &v306);
    goto LABEL_41;
  }
  v60 = v46 & 1;
  v61 = *(_DWORD *)(a1 + 7400);
  v62 = *(_DWORD *)(a1 + 7412);
  v63 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v61;
  *(_DWORD *)(a1 + 7448) = v62;
  *(_DWORD *)(a1 + 7452) = v63;
  v64 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v64 + 4) = v61;
  *(_BYTE *)(v64 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v64, a1 + 7368, 0, v60, v28, v29, v30, v31);
  if ((a4 & 1) != 0)
    goto LABEL_37;
  if (*(_DWORD *)(v303 + 12) <= v304)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7378CLL);
  }
  v65 = v41;
  v66 = *(_QWORD *)v303 + 720 * v304;
  v67 = *a8;
  v68 = (WTF::StringImpl *)**a8;
  if (v68)
    *(_DWORD *)v68 += 2;
  v287[0] = v68;
  LOWORD(v288) = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v66 + 120, v287, &v288, (uint64_t)&v274);
  v71 = v287[0];
  v287[0] = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v69, v70, v27, v28, v29, v30, v31);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  *(_WORD *)(v274 + 8) &= ~4u;
  v72 = *(_QWORD *)(*(_QWORD *)v66 + 41952);
  if (*(_QWORD *)(v72 + 1248) != *v67 && *(_QWORD *)(v72 + 880) != *v67)
  {
    v41 = v65;
    goto LABEL_37;
  }
  v253 = *(_DWORD *)(a1 + 12);
  if (!v253)
  {
    __break(0xC471u);
LABEL_314:
    JUMPOUT(0x197E72EB4);
  }
  v41 = v65;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v253 - 1) + 9) & 1) == 0)
    goto LABEL_37;
  if (!*(_QWORD *)(a1 + 7360))
  {
    *(_QWORD *)&v274 = **a8;
    v287[0] = (WTF::StringImpl *)JSC::stringForFunctionMode();
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[18],char const*,char const(&)[21]>(a1, (uint64_t *)&v274, (const char **)v287);
  }
  v52 = 0;
  v41 = v65;
LABEL_38:
  *(_DWORD *)v40 = v41;
  v53 = v305;
  if (v305)
  {
    v305 = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v274, v53, 0, v27, v28, v29, v30, v31);
    v252 = v276;
    if (v276)
    {
      v276 = 0;
      LODWORD(v277) = 0;
      WTF::fastFree((unint64_t)v252, v245, v246, v247, v248, v249, v250, v251);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v274, (WTF::AtomStringImpl *)v245, v246, v247, v248, v249, v250, v251);
  }
  return v52;
}

uint64_t JSC::ASTBuilder::createFunctionExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int32x2_t v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v11 = *(uint64_t **)(a1 + 8);
  v12 = *v11;
  if ((unint64_t)(v11[1] - *v11) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    v12 = *v11;
  }
  *v11 = v12 + 40;
  v14 = *(_DWORD ***)a3;
  v13 = *(_QWORD *)(a3 + 8);
  v15 = *(unsigned int *)(a3 + 24);
  v16 = *(_DWORD *)(a3 + 28);
  v17 = *(_DWORD *)(a3 + 32);
  v18 = *(_DWORD *)(a3 + 40);
  v19 = **(_DWORD ***)(a1 + 16);
  if (v19)
    ++v19[2];
  v20 = (v16 + 1);
  if (v17 <= 1)
    v17 = 1;
  v21 = (v17 - 1);
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  v22 = v18 & ~(v18 >> 31);
  *(int32x2_t *)(v12 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_BYTE *)(v12 + 25) = 126;
  *(_BYTE *)(v12 + 26) = 0;
  *(_QWORD *)v12 = off_1E357AA60;
  *(_QWORD *)(v12 + 32) = v13;
  if (v19)
    ++v19[2];
  v23 = v15 | (v20 << 32);
  v24 = *(_DWORD **)(v13 + 80);
  *(_QWORD *)(v13 + 80) = v19;
  v25 = v21 | (v22 << 32);
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  *(_QWORD *)(v13 + 88) = v23;
  *(_QWORD *)(v13 + 96) = v25;
  v26 = *v14;
  if (*v14)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  *(_DWORD *)(v13 + 36) = 1;
  *(_QWORD *)v12 = &off_1E358A860;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v28 = *(_QWORD *)(a3 + 8);
  v29 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(v28 + 136) = *(_DWORD *)(a3 + 36);
  v30 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v28 + 16) = v29;
  *(int32x2_t *)(v28 + 20) = vrev64_s32(v30);
  return v12;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _QWORD *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;
  char v122;
  char v123;
  int v124;
  int v125;
  int v126;
  _BYTE v127[24];
  WTF *v128;
  int v129;
  uint64_t v130;

  if ((_BYTE)dword_1ECF4C6C3)
  {
    v2 = *a1;
    if (!*(_QWORD *)(*a1 + 7520))
    {
      v3 = *(_QWORD *)(v2 + 7464);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_DWORD *)a1[1];
          v6 = *(_DWORD *)(v4 - 8);
          v7 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
          v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
          v9 = v6 & (v8 ^ HIWORD(v8));
          v10 = *(_DWORD *)(v4 + 16 * v9);
          if (v10 != v5)
          {
            v11 = 1;
            while (v10 != 0x7FFFFFFF)
            {
              v9 = ((_DWORD)v9 + v11) & v6;
              v10 = *(_DWORD *)(v4 + 16 * v9);
              ++v11;
              if (v10 == v5)
                goto LABEL_9;
            }
            return 0;
          }
LABEL_9:
          v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
          if (v12)
          {
            v13 = *(_DWORD *)(v12 + 28);
            v15 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v16 = *(_QWORD *)v12 >> 33;
            v17 = HIDWORD(v14) & 0x7FFFFFFF;
            v18 = (char *)a1[3];
            v19 = *(_DWORD *)(a1[2] + 32);
            v124 = *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 112) - *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 88);
            if ((_DWORD)v16 == v19)
              v20 = *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 112) - *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 88);
            else
              v20 = HIDWORD(v14) & 0x7FFFFFFF;
            v21 = *v18;
            v22 = 1 << *v18;
            if ((v22 & 0x840) != 0)
              v23 = (v14 & 0x8000000000000000) == 0;
            else
              v23 = 2;
            v24 = v13 >> 30;
            if ((v15 & 0x100000000) != 0)
            {
              v25 = 16;
            }
            else
            {
              if (v24)
              {
                if (v24 == 1)
                  goto LABEL_19;
              }
              else if ((v22 & 0x60400) == 0)
              {
LABEL_19:
                v25 = 16 * ((v13 & 0x10000000 | *(_QWORD *)(v12 + 16) & 1 | *(_QWORD *)v12 & 0x100000000) == 0);
                goto LABEL_20;
              }
              v25 = 0;
            }
LABEL_20:
            v26 = *(_DWORD *)(v2 + 12);
            if (v26)
            {
              v125 = v19;
              v126 = v23;
              v27 = v15 >> 1;
              v28 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v26 - 1) + 8);
              v29 = a1[5];
              v30 = *(_DWORD *)a1[6];
              v31 = *(_DWORD *)a1[7];
              v32 = *(_DWORD *)a1[8];
              v33 = v14 >> 1;
              v34 = *(uint64_t **)(a1[4] + 8);
              v35 = *v34;
              if ((unint64_t)(v34[1] - *v34) <= 0x8F)
              {
                v107 = v20;
                v103 = *(_QWORD *)v12 >> 33;
                v123 = v21;
                v104 = HIDWORD(v14) & 0x7FFFFFFF;
                v119 = v25;
                v121 = v24;
                v115 = v14 >> 1;
                v117 = a1[5];
                v111 = *(_DWORD *)a1[8];
                v113 = *(_DWORD *)a1[7];
                v109 = *(_DWORD *)a1[6];
                JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v34);
                v30 = v109;
                v32 = v111;
                v20 = v107;
                v31 = v113;
                v33 = v115;
                v29 = v117;
                v25 = v119;
                LOWORD(v24) = v121;
                LODWORD(v17) = v104;
                v21 = v123;
                LODWORD(v16) = v103;
                v23 = v126;
                v35 = *v34;
              }
              v36 = v27 - v20;
              *v34 = v35 + 144;
              v130 = v35;
              v37 = v34 + 5;
              v38 = *((unsigned int *)v34 + 13);
              if ((_DWORD)v38 == *((_DWORD *)v34 + 12))
              {
                v105 = v17;
                v106 = v16;
                v118 = v25;
                v120 = v24;
                v122 = v21;
                v114 = v33;
                v116 = v29;
                v110 = v32;
                v112 = v31;
                v108 = v30;
                v88 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v130);
                v30 = v108;
                v32 = v110;
                v31 = v112;
                v33 = v114;
                v29 = v116;
                v25 = v118;
                LOWORD(v24) = v120;
                LODWORD(v17) = v105;
                LODWORD(v16) = v106;
                v21 = v122;
                v23 = v126;
                v38 = *((unsigned int *)v34 + 13);
                *(_QWORD *)(v34[5] + 8 * v38) = *v88;
              }
              else
              {
                *(_QWORD *)(*v37 + 8 * v38) = v35;
              }
              *((_DWORD *)v34 + 13) = v38 + 1;
              *(_DWORD *)(v35 + 16) = v16;
              *(_DWORD *)(v35 + 20) = v27;
              *(_DWORD *)(v35 + 24) = v17;
              *(_DWORD *)(v35 + 28) = -1;
              *(_BYTE *)(v35 + 32) = 0;
              *(_QWORD *)v35 = &off_1E3596470;
              *(_QWORD *)(v35 + 8) = &unk_1E3596490;
              *(_WORD *)(v35 + 33) = v25 | ((v23 == 0) << 8) | v28 & 3 | (4 * (v15 & 1)) | (32 * v24) | *(_WORD *)(v35 + 33) & 0xF800;
              *(_BYTE *)(v35 + 35) = v21;
              *(_QWORD *)(v35 + 40) = 0;
              *(_QWORD *)(v35 + 48) = 0;
              *(_DWORD *)(v35 + 56) = v30;
              *(_DWORD *)(v35 + 60) = v36;
              *(_DWORD *)(v35 + 64) = v31;
              *(_DWORD *)(v35 + 68) = v32;
              *(_DWORD *)(v35 + 72) = v5;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)(v35 + 88) = 0;
              *(_QWORD *)(v35 + 96) = -1;
              *(_QWORD *)(v35 + 104) = 0;
              *(_QWORD *)(v35 + 112) = 0;
              *(_QWORD *)(v35 + 120) = -1;
              *(_DWORD *)(v35 + 128) = *(_DWORD *)(v29 + 8);
              *(_DWORD *)(v35 + 132) = v33;
              *(_DWORD *)(v35 + 136) = 0;
              v39 = a1[2];
              *(_QWORD *)(v39 + 8) = v35;
              *(_DWORD *)(v39 + 28) = *(_DWORD *)v12 >> 1;
              *(_DWORD *)(v39 + 16) = *(_DWORD *)(v12 + 16) >> 1;
              v40 = (uint64_t *)a1[9];
              v41 = *v40;
              v42 = *((_DWORD *)v40 + 2);
              if (*(_DWORD *)(v41 + 12) <= v42)
              {
                __break(0xC471u);
                JUMPOUT(0x197E73F94);
              }
              v43 = v16;
              JSC::Scope::restoreFromSourceProviderCache(*(_QWORD *)v41 + 720 * v42, v12);
              *(_QWORD *)(a1[9] + 16) = 0;
              JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v127, (uint64_t *)v2, 1, v44, v45, v46, v47, v48);
              v56 = v128;
              if (v128)
              {
                v128 = 0;
                v129 = 0;
                WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
              }
              JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v127, (WTF::AtomStringImpl *)v49, v50, v51, v52, v53, v54, v55);
              v65 = *(_QWORD *)(v12 + 8);
              v64 = *(_QWORD *)(v12 + 16);
              v66 = *(_QWORD *)v12;
              if ((v64 & 0x8000000000000000) != 0)
                v67 = *(_DWORD *)(v12 + 28) & 0xFFFFFF;
              else
                v67 = 1;
              v68 = v126;
              v69 = v43;
              *(_QWORD *)(v2 + 7372) = 0;
              *(_DWORD *)(v2 + 7368) = v67;
              *(_DWORD *)(v2 + 7380) = v65 >> 1;
              v70 = v65 >> 33;
              *(_QWORD *)(v2 + 7392) = 0;
              *(_QWORD *)(v2 + 7384) = 0;
              v71 = HIDWORD(v64) & 0x7FFFFFFF;
              *(_DWORD *)(v2 + 7400) = v66 >> 33;
              *(_DWORD *)(v2 + 7404) = v71;
              *(_DWORD *)(v2 + 7408) = v65 >> 1;
              *(_DWORD *)(v2 + 7412) = v65 >> 33;
              *(_QWORD *)(v2 + 7416) = -1;
              *(_QWORD *)(v2 + 7424) = -1;
              *(_QWORD *)(v2 + 7432) = -1;
              if (v69 == v125)
              {
                *(_DWORD *)(v2 + 7404) = v124;
                LODWORD(v71) = v124;
              }
              v72 = *(_QWORD *)(v2 + 7288);
              *(_BYTE *)(v72 + 150) = 0;
              v73 = *(WTF::StringImpl **)(v72 + 152);
              *(_QWORD *)(v72 + 152) = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                {
                  WTF::StringImpl::~StringImpl(v73, v57, v58, v59, v60, v61, v62, v63);
                  WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
                  v68 = v126;
                }
                else
                {
                  *(_DWORD *)v73 -= 2;
                }
              }
              v74 = *(_QWORD *)(v72 + 88);
              v75 = *(_QWORD *)(v72 + 96);
              v76 = (char *)(v74 + v70);
              *(_QWORD *)(v72 + 80) = v76;
              *(_QWORD *)(v72 + 112) = v74 + (int)v71;
              v77 = v2 + 7368;
              *(_DWORD *)(v72 + 20) = 0;
              *(_DWORD *)(v72 + 36) = 0;
              if ((unint64_t)v76 >= v75)
                v78 = 0;
              else
                v78 = *v76;
              *(_BYTE *)(v72 + 176) = v78;
              v79 = *(_QWORD *)(v2 + 7288);
              v80 = *(_DWORD *)(v2 + 7400);
              *(_DWORD *)v79 = v80;
              if ((v68 - 1) < 2)
              {
                v81 = *(_QWORD *)(a1[2] + 8);
                if (v81)
                  v82 = v81 + 8;
                else
                  v82 = 0;
                *(_DWORD *)(v82 + 20) = *(_DWORD *)(v79 + 80) - *(_DWORD *)(v79 + 88);
                v83 = *(_DWORD *)(v2 + 7412);
                v84 = *(_DWORD *)(v2 + 7404);
                *(_DWORD *)(v2 + 7444) = v80;
                *(_DWORD *)(v2 + 7448) = v83;
                *(_DWORD *)(v2 + 7452) = v84;
                *(_DWORD *)(v79 + 4) = v80;
                v85 = *(_DWORD *)(v2 + 12);
                if (!v85)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E73F9CLL);
                }
                v86 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v85 - 1) + 9) & 1;
                *(_BYTE *)(v79 + 56) = 0;
                *(_DWORD *)(v2 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v79, v77, 0, v86, v60, v61, v62, v63);
                goto LABEL_43;
              }
              if (v68)
              {
LABEL_43:
                *(_DWORD *)(a1[2] + 36) = *(_DWORD *)(v2 + 7444);
                return 1;
              }
              v97 = *(_DWORD *)(v2 + 7412);
              v98 = *(_DWORD *)(v2 + 7404);
              *(_DWORD *)(v2 + 7444) = v80;
              *(_DWORD *)(v2 + 7448) = v97;
              *(_DWORD *)(v2 + 7452) = v98;
              *(_DWORD *)(v79 + 4) = v80;
              v99 = *(_DWORD *)(v2 + 12);
              if (v99)
              {
                v100 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v99 - 1) + 9) & 1;
                *(_BYTE *)(v79 + 56) = 0;
                *(_DWORD *)(v2 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v79, v77, 0, v100, v60, v61, v62, v63);
                v101 = *(_QWORD *)(a1[2] + 8);
                if (v101)
                  v102 = v101 + 8;
                else
                  v102 = 0;
                *(_DWORD *)(v102 + 20) = *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 80)
                                       - *(_DWORD *)(*(_QWORD *)(v2 + 7288) + 88);
                goto LABEL_43;
              }
              __break(0xC471u);
            }
            else
            {
              __break(0xC471u);
            }
            JUMPOUT(0x197E73F8CLL);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t JSC::Scope::MaybeParseAsGeneratorFunctionForScope::MaybeParseAsGeneratorFunctionForScope(uint64_t result, _DWORD *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  *(_OWORD *)result = *(_OWORD *)a2;
  v3 = a2[2];
  if (*(_DWORD *)(*(_QWORD *)a2 + 12) <= v3
    || (*(_BYTE *)(result + 16) = (*(_DWORD *)(**(_QWORD **)a2 + 720 * v3 + 10) & 0x200) != 0,
        v4 = *(_DWORD *)(result + 8),
        *(_DWORD *)(*(_QWORD *)result + 12) <= v4))
  {
    __break(0xC471u);
    JUMPOUT(0x197E74020);
  }
  v5 = **(_QWORD **)result + 720 * v4;
  if (a3)
    v6 = 512;
  else
    v6 = 0;
  *(_DWORD *)(v5 + 10) = *(_DWORD *)(v5 + 10) & 0xFFFFFDFF | v6;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  unint64_t v59;
  const char *v60;
  const char *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  const char *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  unint64_t v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  const char *v105;
  int v106;
  uint64_t v107;
  BOOL isAllowedIdentifierLet;
  uint64_t v109;
  uint64_t v110;
  int v111;
  BOOL isAllowedIdentifierYield;
  int v113;
  unsigned int v114;
  uint64_t v115;
  const char *v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _BOOL4 v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  const char **Range;
  uint64_t v160;
  const char *v161;
  unsigned __int8 v162;

  v8 = (_BYTE *)(a1 + 7344);
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E74A6CLL);
  }
  if (v9 == 20)
    return;
  v14 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 0;
  v15 = a1 + 7368;
  v16 = *(_DWORD *)(a1 + 7368);
  if ((v10 & 0x840) != 0)
  {
    if (v16 == 12)
      goto LABEL_167;
    v10 = v14;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v16, *(_QWORD **)(a1 + 7376));
    v111 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v111, *(_QWORD **)(a1 + 7376)), v111 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if (v111 != 2)
        goto LABEL_167;
    }
    else
    {
      if (v111 == 546)
        goto LABEL_167;
      if (v111 != 2)
      {
        if (v111 != 1048592
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
        {
          v113 = *(_DWORD *)(a1 + 12);
          if (!v113)
          {
            __break(0xC471u);
            JUMPOUT(0x197E75584);
          }
          v114 = v113 - 1;
          if (v111 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v114 + 9) & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_74;
            Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v160 = v115;
            v161 = JSC::stringForFunctionMode();
LABEL_100:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&Range, &v161);
            goto LABEL_74;
          }
          if ((v111 - 531) <= 1)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_74;
            Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v160 = v156;
            v161 = JSC::stringForFunctionMode();
LABEL_118:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v161);
            goto LABEL_74;
          }
          if ((v111 & 0x200) != 0)
          {
            if ((v111 - 544) >= 3)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_74;
              Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              v160 = v157;
              v161 = JSC::stringForFunctionMode();
              goto LABEL_153;
            }
            if (v111 == 544)
            {
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v114 + 9) & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_74;
                goto LABEL_64;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v114 + 9) & 1) != 0
                   || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v114 + 11) & 2) != 0)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_74;
              Range = (const char **)JSC::stringForFunctionMode();
              v161 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
              goto LABEL_194;
            }
          }
          if (v111 != 20 && (v111 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
            goto LABEL_74;
          }
          goto LABEL_334;
        }
LABEL_167:
        *(_DWORD *)(a3 + 16) = 1;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, 0, 0, 0, a7, a8))goto LABEL_74;
        if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
          goto LABEL_74;
        }
        goto LABEL_132;
      }
    }
    v117 = *(_DWORD *)(a1 + 7400);
    v118 = *(_DWORD *)(a1 + 7412);
    v119 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v117;
    *(_DWORD *)(a1 + 7448) = v118;
    *(_DWORD *)(a1 + 7452) = v119;
    v120 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v120 + 4) = v117;
    v121 = *(_DWORD *)(a1 + 12);
    if (!v121)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7558CLL);
    }
    v14 = 720;
    v122 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v121 - 1) + 9) & 1;
    *(_BYTE *)(v120 + 56) = 0;
    v123 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v120, v15, 0, v122, v109, v110, a7, a8);
    *(_DWORD *)(a1 + 7368) = v123;
    if (v123 != 3)
    {
      LOBYTE(v8) = 0;
      v162 = 0;
      Range = 0;
      goto LABEL_276;
    }
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_271;
  }
  if (v16 != 2)
  {
    LODWORD(v46) = *(_DWORD *)(a1 + 12);
    if (!(_DWORD)v46)
    {
      __break(0xC471u);
      goto LABEL_292;
    }
    v47 = v46 - 1;
    v48 = *(_QWORD *)a1;
    v49 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9);
    if ((v49 & 1) != 0 && v16 == 532)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_74;
      v50 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v51 = (WTF::AtomStringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      if (v52 <= v15)
      {
        v46 = 0x100000000;
        v51 = (WTF::AtomStringImpl *)"";
        goto LABEL_54;
      }
      LODWORD(v46) = a3 - v15;
      if ((int)v52 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v46) = v52 - v15;
        if (!(_DWORD)v15)
        {
          v46 = v52;
          goto LABEL_54;
        }
      }
      v46 = v46;
      v53 = v52 - v15;
      if ((v52 & 0xFF00000000) != 0)
      {
        if (v53 >= v46)
        {
          v51 = (WTF::AtomStringImpl *)((char *)v51 + v15);
          v46 = v46 | 0x100000000;
LABEL_54:
          Range = (const char **)v51;
          v160 = v46;
          v61 = "getter";
          switch(v9)
          {
            case 0:
              v61 = "function";
              break;
            case 1:
            case 2:
              v61 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v61 = "setter";
              break;
            case 5:
              v61 = "method";
              break;
            case 6:
              v61 = "arrow function";
              break;
            case 7:
            case 9:
              v61 = "async function";
              break;
            case 8:
            case 11:
              v61 = "async arrow function";
              break;
            case 10:
              v61 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E74EA4);
            case 15:
            case 16:
              v61 = "async generator function";
              break;
            case 17:
              v61 = "async generator method";
              break;
            case 18:
              v61 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E74EE4);
          }
          v161 = v61;
          goto LABEL_100;
        }
      }
      else if (v53 >= v46)
      {
        v51 = (WTF::AtomStringImpl *)((char *)v51 + 2 * v15);
        goto LABEL_54;
      }
      goto LABEL_292;
    }
    if ((v16 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_74;
      v56 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v57 = (WTF::AtomStringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
      if (v58 <= v15)
      {
        v46 = 0x100000000;
        v57 = (WTF::AtomStringImpl *)"";
        goto LABEL_66;
      }
      LODWORD(v46) = a3 - v15;
      if ((int)v58 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v46) = v58 - v15;
        if (!(_DWORD)v15)
        {
          v46 = v58;
          goto LABEL_66;
        }
      }
      v46 = v46;
      v59 = v58 - v15;
      if ((v58 & 0xFF00000000) != 0)
      {
        if (v59 >= v46)
        {
          v57 = (WTF::AtomStringImpl *)((char *)v57 + v15);
          v46 = v46 | 0x100000000;
LABEL_66:
          Range = (const char **)v57;
          v160 = v46;
          v68 = "getter";
          switch(v9)
          {
            case 0:
              v68 = "function";
              break;
            case 1:
            case 2:
              v68 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v68 = "setter";
              break;
            case 5:
              v68 = "method";
              break;
            case 6:
              v68 = "arrow function";
              break;
            case 7:
            case 9:
              v68 = "async function";
              break;
            case 8:
            case 11:
              v68 = "async arrow function";
              break;
            case 10:
              v68 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E74EC4);
            case 15:
            case 16:
              v68 = "async generator function";
              break;
            case 17:
              v68 = "async generator method";
              break;
            case 18:
              v68 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E74FB0);
          }
          v161 = v68;
          goto LABEL_118;
        }
      }
      else if (v59 >= v46)
      {
        v57 = (WTF::AtomStringImpl *)((char *)v57 + 2 * v15);
        goto LABEL_66;
      }
LABEL_292:
      __break(1u);
LABEL_293:
      v145 = *(_DWORD *)(a1 + 12);
      if (!v145)
      {
        __break(0xC471u);
        JUMPOUT(0x197E755A4);
      }
      v146 = *(_QWORD *)a1 + (v145 - 1) * (unint64_t)v14;
      *(_DWORD *)(v146 + 10) = *(_DWORD *)(v146 + 10) & 0xFB7FFFFF | 0x4000000;
      while ((v46 & 1) == 0)
      {
        if ((v8 & 1) == 0)
          ++*(_DWORD *)(a3 + 16);
        v138 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 != 6)
          goto LABEL_300;
        v139 = *(_DWORD *)(a1 + 7400);
        v140 = *(_DWORD *)(a1 + 7412);
        v141 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v139;
        *(_DWORD *)(a1 + 7448) = v140;
        *(_DWORD *)(a1 + 7452) = v141;
        v142 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v142 + 4) = v139;
        v143 = *(_DWORD *)(a1 + 12);
        if (!v143)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7559CLL);
        }
        v144 = *(_BYTE *)(*(_QWORD *)a1 + (v143 - 1) * (unint64_t)v14 + 9) & 1;
        *(_BYTE *)(v142 + 56) = 0;
        v123 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v142, v15, 0, v144, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v123;
LABEL_276:
        if (v123 == 37)
        {
          v147 = *(_DWORD *)(a1 + 7400);
          v148 = *(_DWORD *)(a1 + 7412);
          v149 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v147;
          *(_DWORD *)(a1 + 7448) = v148;
          *(_DWORD *)(a1 + 7452) = v149;
          v150 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v150 + 4) = v147;
          v151 = *(_DWORD *)(a1 + 12);
          if (!v151)
          {
            __break(0xC471u);
            JUMPOUT(0x197E755ACLL);
          }
          v152 = *(_BYTE *)(*(_QWORD *)a1 + (v151 - 1) * (unint64_t)v14 + 9) & 1;
          *(_BYTE *)(v150 + 56) = 0;
          v153 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v150, v15, 0, v152, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v153;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v153, *(_QWORD **)(a1 + 7376)))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
            goto LABEL_323;
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, (WTF::AtomStringImpl **)&Range, &v162, 0, v154, v155);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_323;
          if (*(_DWORD *)v15 == 6)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
            goto LABEL_323;
          }
          v137 = 0;
          LODWORD(v46) = 1;
        }
        else
        {
          if (v123 == 3)
            goto LABEL_271;
          if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, (WTF::AtomStringImpl **)&Range, &v162, 0, a7, a8))
          {
            if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
            }
            goto LABEL_323;
          }
          v136 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v130, v131, v132, v133, v134, v135);
          v137 = v136 != 0;
          if (v136)
            LOBYTE(v8) = 1;
          v46 = *(_QWORD *)(a1 + 7360);
          if (v46)
            goto LABEL_323;
        }
        if (Range)
        {
          if ((v8 & 1) != 0)
          {
            v161 = *Range;
            v158 = "' not allowed in function with default parameter values";
          }
          else
          {
            if (!v162)
            {
              v161 = *Range;
              if ((_DWORD)v46)
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v161);
              else
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v161);
              goto LABEL_323;
            }
            v161 = *Range;
            v158 = "' not allowed in function with destructuring parameters";
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v161, v158);
LABEL_323:
          if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
          {
            v14 = v10;
            if (!*(_QWORD *)(a1 + 7360))
            {
LABEL_231:
              Range = (const char **)JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*>(a1, (const char **)&Range);
            }
            goto LABEL_74;
          }
LABEL_334:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_273:
          v14 = v10;
          goto LABEL_74;
        }
        if (((v137 | v46) & 1) != 0 || v162)
          goto LABEL_293;
      }
      v138 = *(_DWORD *)v15;
LABEL_300:
      if (v138 != 3)
      {
        if (v138 != 20 && (v138 & 0x100000) == 0)
        {
          v14 = v10;
          if (!*(_QWORD *)(a1 + 7360))
            goto LABEL_79;
          goto LABEL_74;
        }
        goto LABEL_334;
      }
LABEL_271:
      v124 = *(_DWORD *)(a1 + 7400);
      v125 = *(_DWORD *)(a1 + 7412);
      v126 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v124;
      *(_DWORD *)(a1 + 7448) = v125;
      *(_DWORD *)(a1 + 7452) = v126;
      v127 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v127 + 4) = v124;
      v128 = *(_DWORD *)(a1 + 12);
      if (!v128)
      {
        __break(0xC471u);
        JUMPOUT(0x197E75594);
      }
      v129 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v128 - 1) + 9) & 1;
      *(_BYTE *)(v127 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v127, v15, 0, v129, a5, a6, a7, a8);
      goto LABEL_273;
    }
    if ((v16 & 0x200) == 0)
    {
LABEL_48:
      if (v16 != 20 && (v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v60 = "getter";
          switch(v9)
          {
            case 0:
              v60 = "function";
              break;
            case 1:
            case 2:
              v60 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v60 = "setter";
              break;
            case 5:
              v60 = "method";
              break;
            case 6:
              v60 = "arrow function";
              break;
            case 7:
            case 9:
              v60 = "async function";
              break;
            case 8:
            case 11:
              v60 = "async arrow function";
              break;
            case 10:
              v60 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E74F70);
            case 15:
            case 16:
              v60 = "async generator function";
              break;
            case 17:
              v60 = "async generator method";
              break;
            case 18:
              v60 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E75010);
          }
          Range = (const char **)v60;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, (const char **)&Range);
        }
        goto LABEL_74;
      }
      goto LABEL_132;
    }
    if ((v16 - 544) < 3)
    {
      if (v16 == 546)
      {
        if (*v8 && (*(_DWORD *)(v48 + 720 * v47 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_48;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_74;
        Range = (const char **)JSC::stringForFunctionMode();
        v161 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
        v90 = "Cannot use 'await' as a ";
LABEL_195:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v90, (const char **)&Range, &v161);
        goto LABEL_74;
      }
      if (v16 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9) & 1) == 0)
          goto LABEL_48;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_74;
LABEL_64:
        Range = (const char **)JSC::stringForFunctionMode();
        v161 = "in strict mode";
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&Range, &v161);
        goto LABEL_74;
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9) & 1) == 0 && (*(_BYTE *)(v48 + 720 * v47 + 11) & 2) == 0)
        goto LABEL_48;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_74;
      v91 = "getter";
      switch(v9)
      {
        case 0:
          v91 = "function";
          break;
        case 1:
        case 2:
          v91 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v91 = "setter";
          break;
        case 5:
          v91 = "method";
          break;
        case 6:
          v91 = "arrow function";
          break;
        case 7:
        case 9:
          v91 = "async function";
          break;
        case 8:
        case 11:
          v91 = "async arrow function";
          break;
        case 10:
          v91 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197E74FF0);
        case 15:
        case 16:
          v91 = "async generator function";
          break;
        case 17:
          v91 = "async generator method";
          break;
        case 18:
          v91 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197E75140);
      }
      Range = (const char **)v91;
      if ((v49 & 1) != 0)
      {
        v105 = "in strict mode";
      }
      else
      {
        if ((*(_BYTE *)(v48 + 720 * v47 + 11) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197E74FD0);
        }
        v105 = "in a generator function";
      }
      v161 = v105;
LABEL_194:
      v90 = "Cannot use 'yield' as a ";
      goto LABEL_195;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_74;
    v85 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
    v15 = *(unsigned int *)(a1 + 7408);
    a3 = *(unsigned int *)(a1 + 7412);
    v86 = (WTF::AtomStringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85);
    if (v87 <= v15)
    {
      v46 = 0x100000000;
      v86 = (WTF::AtomStringImpl *)"";
    }
    else
    {
      LODWORD(v46) = a3 - v15;
      if ((int)v87 - (int)v15 > (a3 - v15) || (LODWORD(v46) = v87 - v15, (_DWORD)v15))
      {
        v46 = v46;
        v88 = v87 - v15;
        if ((v87 & 0xFF00000000) != 0)
        {
          if (v88 < v46)
            goto LABEL_292;
          v86 = (WTF::AtomStringImpl *)((char *)v86 + v15);
          v46 = v46 | 0x100000000;
        }
        else
        {
          if (v88 < v46)
            goto LABEL_292;
          v86 = (WTF::AtomStringImpl *)((char *)v86 + 2 * v15);
        }
      }
      else
      {
        v46 = v87;
      }
    }
    Range = (const char **)v86;
    v160 = v46;
    v89 = "getter";
    switch(v9)
    {
      case 0:
        v89 = "function";
        break;
      case 1:
      case 2:
        v89 = "generator function";
        break;
      case 3:
        break;
      case 4:
        v89 = "setter";
        break;
      case 5:
        v89 = "method";
        break;
      case 6:
        v89 = "arrow function";
        break;
      case 7:
      case 9:
        v89 = "async function";
        break;
      case 8:
      case 11:
        v89 = "async arrow function";
        break;
      case 10:
        v89 = "async method";
        break;
      case 12:
      case 13:
      case 14:
      case 19:
        __break(0xC471u);
        JUMPOUT(0x197E74F90);
      case 15:
      case 16:
        v89 = "async generator function";
        break;
      case 17:
        v89 = "async generator method";
        break;
      case 18:
        v89 = "generator method";
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E75038);
    }
    v161 = v89;
LABEL_153:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v161);
    goto LABEL_74;
  }
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E75018);
  }
  v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v23 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, v15, 0, v22, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v23;
  if (v9 == 3)
  {
    if (v23 == 3)
    {
      v62 = *(_DWORD *)(a1 + 7400);
      v63 = *(_DWORD *)(a1 + 7412);
      v64 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v62;
      *(_DWORD *)(a1 + 7448) = v63;
      *(_DWORD *)(a1 + 7452) = v64;
      v65 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v65 + 4) = v62;
      v66 = *(_DWORD *)(a1 + 12);
      if (!v66)
      {
        __break(0xC471u);
        JUMPOUT(0x197E75268);
      }
      v67 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v66 - 1) + 9) & 1;
      *(_BYTE *)(v65 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v65, v15, 0, v67, v24, v25, v26, v27);
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_74;
    }
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_74;
      v93 = "getter functions must have no parameters";
      goto LABEL_148;
    }
LABEL_132:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_74;
  }
  if (v9 == 4)
  {
    if (v23 != 3)
    {
      Range = 0;
      v162 = 0;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, (WTF::AtomStringImpl **)&Range, &v162, 0, v26, v27))
      {
        v100 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v94, v95, v96, v97, v98, v99);
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_74;
        if (v100 || v162)
        {
          if (Range)
          {
            v161 = *Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v161);
            goto LABEL_74;
          }
          v106 = *(_DWORD *)(a1 + 12);
          if (!v106)
          {
            __break(0xC471u);
            JUMPOUT(0x197E75368);
          }
          v107 = *(_QWORD *)a1 + 720 * (v106 - 1);
          *(_DWORD *)(v107 + 10) = *(_DWORD *)(v107 + 10) & 0xFB7FFFFF | 0x4000000;
        }
        *(_DWORD *)(a3 + 16) = v100 == 0;
        v101 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 == 3)
        {
          v102 = *(_DWORD *)(a1 + 7400);
          v103 = *(_DWORD *)(a1 + 7412);
          v104 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v102;
          *(_DWORD *)(a1 + 7448) = v103;
          *(_DWORD *)(a1 + 7452) = v104;
          v72 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v72 + 4) = v102;
          v73 = *(_DWORD *)(a1 + 12);
          if (!v73)
          {
            __break(0xC471u);
            JUMPOUT(0x197E74A34);
          }
LABEL_73:
          v74 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v73 - 1) + 9) & 1;
          *(_BYTE *)(v72 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v72, v15, 0, v74, v24, v25, v26, v27);
          goto LABEL_74;
        }
        if (v101 != 6)
        {
          if (v101 != 20 && (v101 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
            goto LABEL_74;
          }
          goto LABEL_132;
        }
      }
      else if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
      {
        goto LABEL_132;
      }
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_74;
    v93 = "setter functions must have one parameter";
LABEL_148:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v93);
    goto LABEL_74;
  }
  if (v23 == 3)
  {
    *(_DWORD *)(a3 + 16) = 0;
LABEL_72:
    v69 = *(_DWORD *)(a1 + 7400);
    v70 = *(_DWORD *)(a1 + 7412);
    v71 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v69;
    *(_DWORD *)(a1 + 7448) = v70;
    *(_DWORD *)(a1 + 7452) = v71;
    v72 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v72 + 4) = v69;
    v73 = *(_DWORD *)(a1 + 12);
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x197E75040);
    }
    goto LABEL_73;
  }
  v28 = 0;
  v162 = 0;
  Range = 0;
  while (1)
  {
    if (v23 == 37)
    {
      v75 = *(_DWORD *)(a1 + 7400);
      v76 = *(_DWORD *)(a1 + 7412);
      v77 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v75;
      *(_DWORD *)(a1 + 7448) = v76;
      *(_DWORD *)(a1 + 7452) = v77;
      v78 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v78 + 4) = v75;
      v79 = *(_DWORD *)(a1 + 12);
      if (!v79)
      {
        __break(0xC471u);
        JUMPOUT(0x197E75058);
      }
      v80 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v79 - 1) + 9) & 1;
      *(_BYTE *)(v78 + 56) = 0;
      v81 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v78, v15, 0, v80, v24, v25, v26, v27);
      *(_DWORD *)(a1 + 7368) = v81;
      if (v81 == 546
        || v81 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v8)
          goto LABEL_387;
        v84 = *(_DWORD *)(a1 + 12);
        if (!v84)
        {
          __break(0xC471u);
          JUMPOUT(0x197E75050);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v84 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_387:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_228;
        }
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, (WTF::AtomStringImpl **)&Range, &v162, 0, v82, v83);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_228;
      if (*(_DWORD *)v15 == 6)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_228;
      }
      v36 = 0;
      LODWORD(v37) = 1;
    }
    else
    {
      if (v23 == 3)
        goto LABEL_72;
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4uLL, (WTF::AtomStringImpl **)&Range, &v162, 0, v26, v27))
      {
        if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_228;
      }
      v35 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v29, v30, v31, v32, v33, v34);
      v36 = v35 != 0;
      if (v35)
        v28 = 1;
      v37 = *(_QWORD *)(a1 + 7360);
      if (v37)
        goto LABEL_228;
    }
    if (Range)
    {
      if ((v28 & 1) != 0)
      {
        v161 = *Range;
        v116 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v162)
        {
          if ((_DWORD)v37)
          {
            v161 = *Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v161);
          }
          else
          {
            if ((v10 & 0x160438) == 0)
            {
              v38 = 0;
              goto LABEL_18;
            }
            v161 = *Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v161);
          }
LABEL_228:
          if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
            goto LABEL_132;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_74;
          goto LABEL_231;
        }
        v161 = *Range;
        v116 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v161, v116);
      goto LABEL_228;
    }
    v38 = v162;
LABEL_18:
    if (((v36 | v37) & 1) != 0 || v38)
    {
      v54 = *(_DWORD *)(a1 + 12);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197E75048);
      }
      v55 = *(_QWORD *)a1 + 720 * (v54 - 1);
      *(_DWORD *)(v55 + 10) = *(_DWORD *)(v55 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if ((v37 & 1) != 0)
      break;
    if ((v28 & 1) == 0)
      ++*(_DWORD *)(a3 + 16);
    v39 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 != 6)
      goto LABEL_71;
    v40 = *(_DWORD *)(a1 + 7400);
    v41 = *(_DWORD *)(a1 + 7412);
    v42 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v40;
    *(_DWORD *)(a1 + 7448) = v41;
    *(_DWORD *)(a1 + 7452) = v42;
    v43 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v43 + 4) = v40;
    v44 = *(_DWORD *)(a1 + 12);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x197E74F50);
    }
    v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
    *(_BYTE *)(v43 + 56) = 0;
    v23 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v43, v15, 0, v45, v24, v25, v26, v27);
    *(_DWORD *)(a1 + 7368) = v23;
  }
  v39 = *(_DWORD *)v15;
LABEL_71:
  if (v39 == 3)
    goto LABEL_72;
  if (v39 == 20 || (v39 & 0x100000) != 0)
    goto LABEL_132;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_74;
LABEL_79:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
LABEL_74:
  *(_DWORD *)(a1 + 7316) = v14;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],char const*&>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot declare function named 'await' ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const(&)[15]>(uint64_t a1, const char **a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot declare ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[18],char const*,char const(&)[21]>(uint64_t a1, uint64_t *a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "'");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v40, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "' is not a valid ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " name in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const*,char const(&)[6]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected an opening '{' at the start of a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", " body");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[80]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "Parameters should match arguments offered as parameters in Function constructor");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  __int16 v35;
  __int16 v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  __int16 v50;
  _QWORD *v51;
  int v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  __int16 v62;
  int v63;
  int v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  __int16 v73;
  int v74;
  const char *v75;
  int v76;
  int v77;
  _DWORD *v78;
  char v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  char v86;
  const char *v87;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = **(unsigned __int8 **)(a1 + 56);
  v12 = **(_DWORD **)(a1 + 64);
  v13 = **(_DWORD **)(a1 + 72);
  v86 = *(_BYTE *)(v8 + 7345);
  v85 = *(_QWORD *)(a1 + 16);
  v83 = **(_DWORD **)(a1 + 48);
  v84 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v81 = **(_DWORD **)(a1 + 32);
  v82 = **(_DWORD **)(a1 + 40);
  v79 = **(_BYTE **)(a1 + 56);
  v80 = **(_DWORD **)(a1 + 24);
  if (v13 != 2)
  {
    if (v13)
      goto LABEL_3;
    v78 = (_DWORD *)(v8 + 7456);
    v77 = *(_DWORD *)(v8 + 7456);
    *(_DWORD *)(v8 + 7456) = 0;
    if (*(_QWORD *)(v8 + 7520))
    {
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(v8, v9))
      {
        goto LABEL_29;
      }
    }
    else if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v8, v10))
    {
LABEL_29:
      v26 = 256;
LABEL_8:
      v27 = *(_DWORD *)(v8 + 12);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x197E764A4);
      }
      v28 = *(_BYTE *)(v8 + 7474);
      v29 = v27 - 1;
      v30 = *(_QWORD *)v8;
      if (v12 == 1)
      {
        v36 = 16;
      }
      else
      {
        v31 = v30 + 720 * v29;
        v32 = *(_DWORD *)(v31 + 10);
        v33 = *(_BYTE *)(v31 + 32);
        if (v11)
        {
          if (v11 == 1)
          {
LABEL_12:
            v34 = v32 & 0x20 | v33 & 0x10;
            v35 = ~(8 * v32) & 0x10;
            if (v34)
              v36 = 0;
            else
              v36 = v35;
            goto LABEL_15;
          }
        }
        else if (((1 << v28) & 0x60400) == 0)
        {
          goto LABEL_12;
        }
        v36 = 0;
      }
LABEL_15:
      v37 = *(_DWORD *)(v8 + 7408);
      v38 = *(_DWORD *)(v8 + 7404);
      v39 = v30 + 720 * v29;
      v40 = *(_BYTE *)(v39 + 8);
      v41 = *(_BYTE *)(v39 + 9);
      v42 = *(uint64_t **)(v9 + 8);
      v43 = *v42;
      if ((unint64_t)(v42[1] - *v42) <= 0x8F)
      {
        v73 = v26;
        JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v42);
        v26 = v73;
        v43 = *v42;
      }
      v44 = v37 - v38;
      *v42 = v43 + 144;
      v87 = (const char *)v43;
      v45 = v42 + 5;
      v46 = *((unsigned int *)v42 + 13);
      if ((_DWORD)v46 == *((_DWORD *)v42 + 12))
      {
        v50 = v26;
        v51 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v87);
        v26 = v50;
        v46 = *((unsigned int *)v42 + 13);
        *(_QWORD *)(v42[5] + 8 * v46) = *v51;
      }
      else
      {
        *(_QWORD *)(*v45 + 8 * v46) = v43;
      }
      v47 = (_BYTE *)(v8 + 7345);
      v48 = v86;
      *((_DWORD *)v42 + 13) = v46 + 1;
      *(_DWORD *)(v43 + 16) = *(_DWORD *)(v8 + 7400);
      *(int32x2_t *)(v43 + 20) = vrev64_s32(*(int32x2_t *)(v8 + 7404));
      *(_DWORD *)(v43 + 28) = -1;
      *(_BYTE *)(v43 + 32) = 0;
      *(_QWORD *)v43 = &off_1E3596470;
      *(_QWORD *)(v43 + 8) = &unk_1E3596490;
      *(_WORD *)(v43 + 33) = v36 | v26 | *(_WORD *)(v43 + 33) & 0xF800 | v40 & 3 | (32 * (v79 & 3)) | (4 * (v41 & 3));
      *(_BYTE *)(v43 + 35) = v28;
      *(_QWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_DWORD *)(v43 + 56) = v80;
      *(_DWORD *)(v43 + 60) = v44;
      *(_DWORD *)(v43 + 64) = v81;
      *(_DWORD *)(v43 + 68) = v82;
      *(_DWORD *)(v43 + 72) = v83;
      *(_QWORD *)(v43 + 80) = 0;
      *(_QWORD *)(v43 + 88) = 0;
      *(_QWORD *)(v43 + 96) = -1;
      *(_QWORD *)(v43 + 104) = 0;
      *(_QWORD *)(v43 + 112) = 0;
      *(_QWORD *)(v43 + 120) = -1;
      *(_DWORD *)(v43 + 128) = *(_DWORD *)(v85 + 8);
      *(_QWORD *)(v43 + 132) = v84;
      goto LABEL_20;
    }
    v76 = *(_DWORD *)(v8 + 7368);
    if (v76 != 20 && (v76 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v8 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse body of this arrow function");
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  *(_BYTE *)(v8 + 7345) = 0;
LABEL_3:
  v14 = *(_DWORD *)(v8 + 7400);
  v15 = *(_DWORD *)(v8 + 7412);
  v16 = *(_DWORD *)(v8 + 7404);
  *(_DWORD *)(v8 + 7444) = v14;
  *(_DWORD *)(v8 + 7448) = v15;
  *(_DWORD *)(v8 + 7452) = v16;
  v17 = *(_QWORD *)(v8 + 7288);
  *(_DWORD *)(v17 + 4) = v14;
  v18 = *(_DWORD *)(v8 + 12);
  if (!v18)
    goto LABEL_62;
  v19 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v17, v8 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(v8 + 7368) = v20;
  if (v20 != 1)
  {
    v78 = (_DWORD *)(v8 + 7456);
    v77 = *(_DWORD *)(v8 + 7456);
    *(_DWORD *)(v8 + 7456) = 0;
    if (*(_QWORD *)(v8 + 7520))
    {
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(v8, v9, 0, v21, v22, v23, v24, v25))
      {
        goto LABEL_7;
      }
    }
    else if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(v8, v10, 0, v21, v22, v23, v24, v25))
    {
LABEL_7:
      v26 = 0;
      goto LABEL_8;
    }
    v74 = *(_DWORD *)(v8 + 7368);
    if (v74 != 20 && (v74 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v8 + 7360))
      {
        v75 = "Cannot parse body of this arrow function";
        if (v13 == 2)
          v75 = "Cannot parse body of this function";
        v87 = v75;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(v8, 1, &v87);
      }
      goto LABEL_59;
    }
LABEL_58:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
LABEL_59:
    v43 = 0;
    v47 = (_BYTE *)(v8 + 7345);
    v48 = v86;
LABEL_20:
    *v78 = v77;
    goto LABEL_21;
  }
  v52 = *(_DWORD *)(v8 + 12);
  if (!v52)
  {
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x197E7649CLL);
  }
  v53 = *(_BYTE *)(v8 + 7474);
  v54 = v52 - 1;
  v55 = *(_QWORD *)v8;
  if (v12 == 1)
  {
    v59 = v8 + 7345;
    v62 = 16;
  }
  else
  {
    v56 = v55 + 720 * v54;
    v57 = *(_DWORD *)(v56 + 10);
    v58 = *(_BYTE *)(v56 + 32);
    v59 = v8 + 7345;
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_34:
        v60 = v57 & 0x20 | v58 & 0x10;
        v61 = ~(8 * v57) & 0x10;
        if (v60)
          v62 = 0;
        else
          v62 = v61;
        goto LABEL_37;
      }
    }
    else if (((1 << v53) & 0x60400) == 0)
    {
      goto LABEL_34;
    }
    v62 = 0;
  }
LABEL_37:
  v63 = *(_DWORD *)(v8 + 7408);
  v64 = *(_DWORD *)(v8 + 7404);
  v65 = v55 + 720 * v54;
  v66 = *(_BYTE *)(v65 + 8);
  v67 = *(_BYTE *)(v65 + 9);
  v68 = *(uint64_t **)(v9 + 8);
  v43 = *v68;
  if ((unint64_t)(v68[1] - *v68) <= 0x8F)
  {
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v68);
    v43 = *v68;
  }
  v69 = v63 - v64;
  *v68 = v43 + 144;
  v87 = (const char *)v43;
  v70 = v68 + 5;
  v71 = *((unsigned int *)v68 + 13);
  if ((_DWORD)v71 == *((_DWORD *)v68 + 12))
  {
    v72 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v87);
    v71 = *((unsigned int *)v68 + 13);
    *(_QWORD *)(v68[5] + 8 * v71) = *v72;
  }
  else
  {
    *(_QWORD *)(*v70 + 8 * v71) = v43;
  }
  v47 = (_BYTE *)v59;
  v48 = v86;
  *((_DWORD *)v68 + 13) = v71 + 1;
  *(_DWORD *)(v43 + 16) = *(_DWORD *)(v8 + 7400);
  *(int32x2_t *)(v43 + 20) = vrev64_s32(*(int32x2_t *)(v59 + 59));
  *(_DWORD *)(v43 + 28) = -1;
  *(_BYTE *)(v43 + 32) = 0;
  *(_QWORD *)v43 = &off_1E3596470;
  *(_QWORD *)(v43 + 8) = &unk_1E3596490;
  *(_WORD *)(v43 + 33) = v62 | *(_WORD *)(v43 + 33) & 0xF800 | v66 & 3 | (32 * (v79 & 3)) | (4 * (v67 & 3));
  *(_BYTE *)(v43 + 35) = v53;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)(v43 + 48) = 0;
  *(_DWORD *)(v43 + 56) = v80;
  *(_DWORD *)(v43 + 60) = v69;
  *(_DWORD *)(v43 + 64) = v81;
  *(_DWORD *)(v43 + 68) = v82;
  *(_DWORD *)(v43 + 72) = v83;
  *(_QWORD *)(v43 + 80) = 0;
  *(_QWORD *)(v43 + 88) = 0;
  *(_QWORD *)(v43 + 96) = -1;
  *(_QWORD *)(v43 + 104) = 0;
  *(_QWORD *)(v43 + 112) = 0;
  *(_QWORD *)(v43 + 120) = -1;
  *(_DWORD *)(v43 + 128) = *(_DWORD *)(v85 + 8);
  *(_QWORD *)(v43 + 132) = v84;
LABEL_21:
  *v47 = v48;
  return v43;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(uint64_t a1, int a2, const char *a3, const char **a4)
{
  void (**v7)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  WTF *v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v7 = off_1E3572250;
    v33 = off_1E3572250;
    v34 = (WTF *)v36;
    v35 = xmmword_199122F80;
    v36[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v33);
      v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v33[4])(&v33);
      WTF::PrintStream::printf(v8, "%s", ". ");
      v33[5]((WTF::StringPrintStream *)&v33);
      v7 = v33;
    }
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v7[4])(&v33);
    WTF::PrintStream::printf(v9, "%s", a3);
    WTF::PrintStream::printf(v9, "%s", *a4);
    WTF::PrintStream::printf(v9, "%s", ".");
    v33[5]((WTF::StringPrintStream *)&v33);
    WTF::String::fromUTF8WithLatin1Fallback(v34, v35, &v32);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v32, v10, v11, v12, v13, v14, v15);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    if (v34 != (WTF *)v36)
      WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[46]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' is not a valid function name in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Scope::fillParametersForSourceProviderCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int *v34;
  int v35;
  char v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;

  v10 = *(_BYTE *)(a2 + 124) & 0xFD | (2 * ((*(unsigned __int8 *)(a1 + 10) >> 1) & 1));
  *(_BYTE *)(a2 + 124) = v10;
  v11 = v10 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a1 + 10) >> 2) & 1));
  *(_BYTE *)(a2 + 124) = v11;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 9);
  v12 = v11 & 0xFFFFFFFE | (*(unsigned __int8 *)(a1 + 10) >> 3) & 1;
  *(_BYTE *)(a2 + 124) = v12;
  *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a2 + 124) = (*(_BYTE *)(a1 + 10) >> 2) & 8 | v12 & 0xF7;
  v13 = *(_DWORD *)(a1 + 180);
  if (v13)
  {
    v15 = *(_QWORD *)(a1 + 168);
    v78 = v15 + 72 * v13;
    while (1)
    {
      v16 = 0;
      v17 = *(unsigned int *)(v15 + 4);
      v18 = (_DWORD)v17 == 8 ? v15 + 8 : *(_QWORD *)(v15 + 8);
      while ((_DWORD)v17 != v16)
      {
        v19 = v16;
        v20 = *(_QWORD *)(v18 + 8 * v16++);
        if (v20 != -1)
        {
          v21 = v19;
          goto LABEL_9;
        }
      }
      v21 = *(unsigned int *)(v15 + 4);
LABEL_9:
      if ((_DWORD)v17 != (_DWORD)v21)
        break;
LABEL_52:
      v15 += 72;
      if (v15 == v78)
        goto LABEL_56;
    }
    v22 = v21 | (v17 << 32);
    while (1)
    {
      v23 = *(int **)(v18 + 8 * v22);
      v79 = v23;
      if (v23)
        *v23 += 2;
      v24 = *(_QWORD *)(a1 + 120);
      if (v24)
      {
        v25 = v23[4];
        if ((v25 & 0x20) != 0)
          v25 = v23[8];
        v26 = *(_DWORD *)(v24 - 8);
        v27 = v26 & (v25 >> 8);
        v28 = *(int **)(v24 + 16 * v27);
        if (v28 == v23)
        {
LABEL_21:
          if (*v23 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          else
          {
            *v23 -= 2;
          }
          goto LABEL_40;
        }
        v29 = 1;
        while (v28)
        {
          v27 = (v27 + v29) & v26;
          v28 = *(int **)(v24 + 16 * v27);
          ++v29;
          if (v28 == v23)
          {
            if (!v23)
              goto LABEL_40;
            goto LABEL_21;
          }
        }
      }
      if (v23)
        *v23 += 2;
      v30 = *(_QWORD *)(a1 + 144);
      if (v30)
      {
        v31 = v23[4];
        if ((v31 & 0x20) != 0)
          v31 = v23[8];
        v32 = *(_DWORD *)(v30 - 8);
        v33 = v32 & (v31 >> 8);
        v34 = *(int **)(v30 + 16 * v33);
        if (v34 == v23)
        {
LABEL_33:
          v36 = 1;
          goto LABEL_36;
        }
        v35 = 1;
        while (v34)
        {
          v33 = (v33 + v35) & v32;
          v34 = *(int **)(v30 + 16 * v33);
          ++v35;
          if (v34 == v23)
          {
            if (!v23)
              goto LABEL_40;
            goto LABEL_33;
          }
        }
      }
      if (v23)
      {
        v36 = 0;
LABEL_36:
        v37 = *v23 - 2;
        if (*v23 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          v37 = *v23;
        }
        else
        {
          *v23 = v37;
        }
        v38 = v37 - 2;
        if (v38)
        {
          *v23 = v38;
          if ((v36 & 1) != 0)
            goto LABEL_40;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
          if ((v36 & 1) != 0)
            goto LABEL_40;
        }
      }
      v77 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v77 == *(_DWORD *)(a2 + 40))
      {
        WTF::Vector<WTF::UniquedStringImpl *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *&>(a2 + 32, (unint64_t)&v79);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v77) = v79;
        *(_DWORD *)(a2 + 44) = v77 + 1;
      }
LABEL_40:
      if (HIDWORD(v22) <= (v21 + 1))
        v39 = (v21 + 1);
      else
        v39 = HIDWORD(v22);
      while ((_DWORD)v39 - 1 != (_DWORD)v21)
      {
        v21 = (v21 + 1);
        if (*(_QWORD *)(v18 + 8 * v21) != -1)
        {
          LODWORD(v39) = v21;
          goto LABEL_46;
        }
      }
      v21 = v39;
LABEL_46:
      v22 = v21 | v22 & 0xFFFFFFFF00000000;
      LODWORD(v21) = v39;
      if ((_DWORD)v17 == (_DWORD)v39)
        goto LABEL_52;
    }
  }
LABEL_56:
  v64 = 0;
  v67 = *(_QWORD *)(a3 + 8);
  v66 = a3 + 8;
  v65 = v67;
  v68 = *(unsigned int *)(v66 - 4);
  if ((_DWORD)v68 == 8)
    v69 = v66;
  else
    v69 = v65;
  while ((_DWORD)v68 != v64)
  {
    v70 = v64;
    v71 = *(_QWORD *)(v69 + 8 * v64++);
    if (v71 != -1)
    {
      v72 = v70;
      goto LABEL_62;
    }
  }
  v72 = *(unsigned int *)(v66 - 4);
LABEL_62:
  if ((_DWORD)v68 != (_DWORD)v72)
  {
    v73 = v72 | (v68 << 32);
    do
    {
      v74 = *(int **)(v69 + 8 * v73);
      v79 = v74;
      v75 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v75 == *(_DWORD *)(a2 + 40))
      {
        WTF::Vector<WTF::UniquedStringImpl *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *&>(a2 + 32, (unint64_t)&v79);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v75) = v74;
        *(_DWORD *)(a2 + 44) = v75 + 1;
      }
      if (HIDWORD(v73) <= (v72 + 1))
        v76 = (v72 + 1);
      else
        v76 = HIDWORD(v73);
      while ((_DWORD)v76 - 1 != (_DWORD)v72)
      {
        v72 = (v72 + 1);
        if (*(_QWORD *)(v69 + 8 * v72) != -1)
        {
          LODWORD(v76) = v72;
          goto LABEL_74;
        }
      }
      v72 = v76;
LABEL_74:
      v73 = v72 | v73 & 0xFFFFFFFF00000000;
      LODWORD(v72) = v76;
    }
    while ((_DWORD)v68 != (_DWORD)v76);
  }
}

uint64_t JSC::SourceProviderCacheItem::create(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v4 = a2[11];
  v5 = 8 * v4;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v6)
    goto LABEL_5;
  v7 = (unint64_t)(v5 + 51) >> 4;
  if (v4 <= 0x2F)
  {
    v8 = 23 * v7 + 7;
  }
  else if (v4 > 0x4DD
         || (v8 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v7 + 626),
             *(_DWORD *)(v6 + 8052) <= v8))
  {
LABEL_5:
    result = bmalloc_allocate_casual(v5 + 36, 1);
    goto LABEL_10;
  }
  v10 = v6 + 8 * v8;
  v11 = v10 + 8064;
  *(_BYTE *)(v10 + 8064) = 1;
  v12 = *(unsigned int *)(v10 + 8080);
  if ((_DWORD)v12)
  {
    *(_DWORD *)(v11 + 16) = v12 - *(_DWORD *)(v11 + 20);
    result = *(_QWORD *)(v11 + 8) - v12;
  }
  else
  {
    v36 = *(_QWORD *)(v11 + 40);
    v37 = *(_QWORD *)(v11 + 24);
    if (!v36)
    {
      if (*(_BYTE *)(v11 + 5) == 6)
      {
        v39 = *(unsigned int *)(v11 + 32);
        v40 = *(_DWORD *)(v11 + 36);
        if (v39 < v40)
        {
          *(_QWORD *)(v11 + 8 * v39 + 56) = 0;
          v41 = (unint64_t *)(8 * v8 + 8 * v39 + v6 + 8128);
          v42 = v40 - 1 - v39;
          while (v42)
          {
            v37 += 1024;
            v44 = *v41++;
            v43 = v44;
            LODWORD(v39) = v39 + 1;
            --v42;
            if (v44)
            {
              v36 = __rbit64(v43);
              *(_DWORD *)(v11 + 32) = v39;
              *(_QWORD *)(v11 + 24) = v37;
              goto LABEL_16;
            }
          }
          *(_DWORD *)(v11 + 32) = v40;
        }
      }
      *(_BYTE *)v11 = 0;
      goto LABEL_5;
    }
LABEL_16:
    v38 = __clz(v36);
    *(_QWORD *)(v11 + 40) = v36 & ~(0x8000000000000000 >> v38);
    result = v37 + 16 * v38;
  }
  *(_BYTE *)v11 = 0;
LABEL_10:
  v13 = *(_QWORD *)(result + 8);
  v14 = *(_QWORD *)(result + 16);
  v15 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL | a2[31] & 1;
  *(_QWORD *)result = v15;
  v16 = v15 & 0xFFFFFFFF00000001 | (2 * a2[4]);
  *(_QWORD *)result = v16;
  v17 = v16 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((a2[31] & 2) != 0) << 32);
  *(_QWORD *)result = v17;
  v18 = v17 & 0x1FFFFFFFFLL | ((unint64_t)*a2 << 33);
  *(_QWORD *)result = v18;
  v19 = v13 & 0xFFFFFFFFFFFFFFFELL | a2[6] & 1;
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v19;
  v20 = v19 & 0xFFFFFFFF00000001 | (2 * (a2[1] & 0x7FFFFFFF));
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v20;
  v21 = v20 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(a2[30] & 1) << 32);
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v21;
  v22 = v21 & 0x1FFFFFFFFLL | ((unint64_t)a2[2] << 33);
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v22;
  v23 = v14 & 0xFFFFFFFFFFFFFFFELL | (*((unsigned __int8 *)a2 + 124) >> 3) & 1;
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v22;
  *(_QWORD *)(result + 16) = v23;
  v24 = v23 & 0xFFFFFFFF00000001 | (2 * (a2[5] & 0x7FFFFFFF));
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v22;
  *(_QWORD *)(result + 16) = v24;
  v25 = v24 & 0x80000000FFFFFFFFLL | ((unint64_t)(a2[3] & 0x7FFFFFFF) << 32);
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v22;
  *(_QWORD *)(result + 16) = v25;
  v26 = v25 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*((_BYTE *)a2 + 124) >> 4) << 63);
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v22;
  *(_QWORD *)(result + 16) = v26;
  v27 = a2[11];
  *(_DWORD *)(result + 24) = v27;
  v28 = *(unsigned __int16 *)(result + 31);
  v29 = a2[28] & 0xFFFFFF | (unint64_t)(v28 << 24);
  *(_DWORD *)(result + 28) = v29;
  *(_BYTE *)(result + 32) = BYTE1(v28);
  v29 &= 0xFFFFFFFFC0FFFFFFLL;
  v30 = v29 | ((unint64_t)(*((_BYTE *)a2 + 25) & 0x3F) << 24);
  v29 >>= 32;
  *(_BYTE *)(result + 32) = v29;
  *(_DWORD *)(result + 28) = v30;
  v31 = v30 & 0xFF3FFFFFFFLL | ((unint64_t)(a2[29] & 3) << 30);
  *(_BYTE *)(result + 32) = v29;
  *(_DWORD *)(result + 28) = v31;
  v31 &= ~0x100000000uLL;
  v32 = v31 | ((unint64_t)((*((unsigned __int8 *)a2 + 124) >> 2) & 1) << 32);
  *(_DWORD *)(result + 28) = v31;
  *(_BYTE *)(result + 32) = BYTE4(v32);
  if ((_DWORD)v27)
  {
    v33 = 0;
    v34 = result + 33;
    while (v33 < a2[11])
    {
      v35 = *(_DWORD **)(*((_QWORD *)a2 + 4) + 8 * v33);
      *v35 += 2;
      *(_BYTE *)(v34 + 4) = BYTE4(v35);
      *(_DWORD *)v34 = (_DWORD)v35;
      v34 += 5;
      if (v27 == ++v33)
        goto LABEL_14;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:
    *a1 = result;
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*,char const(&)[6]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected a closing '}' after a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", " body");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::ASTBuilder::createFunctionMetadata(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, __int16 a11, char a12, int a13, char a14, char a15)
{
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int16 v21;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v17 = *(uint64_t **)(a1 + 8);
  v18 = *v17;
  if ((unint64_t)(v17[1] - *v17) <= 0x8F)
  {
    v24 = a2;
    v25 = a8;
    v26 = a7;
    v27 = a6;
    v28 = a5;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    a5 = v28;
    a6 = v27;
    a7 = v26;
    a8 = v25;
    a2 = v24;
    v18 = *v17;
  }
  *v17 = v18 + 144;
  v34 = v18;
  v19 = v17 + 5;
  v20 = *((unsigned int *)v17 + 13);
  if ((_DWORD)v20 == *((_DWORD *)v17 + 12))
  {
    v33 = a2;
    v31 = a7;
    v32 = a8;
    v29 = a5;
    v30 = a6;
    v23 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v34);
    a5 = v29;
    a6 = v30;
    a7 = v31;
    a8 = v32;
    a2 = v33;
    v20 = *((unsigned int *)v17 + 13);
    *(_QWORD *)(v17[5] + 8 * v20) = *v23;
  }
  else
  {
    *(_QWORD *)(*v19 + 8 * v20) = v18;
  }
  *((_DWORD *)v17 + 13) = v20 + 1;
  *(_DWORD *)(v18 + 16) = *(_DWORD *)a3;
  *(int32x2_t *)(v18 + 20) = vrev64_s32(*(int32x2_t *)(a3 + 4));
  *(_DWORD *)(v18 + 28) = -1;
  *(_BYTE *)(v18 + 32) = 0;
  *(_QWORD *)v18 = &off_1E3596470;
  *(_QWORD *)(v18 + 8) = &unk_1E3596490;
  if (a15)
    v21 = 256;
  else
    v21 = 0;
  *(_WORD *)(v18 + 33) = a9 & 3 | (4 * (a10 & 3)) & 0xEF | (16 * (a12 & 1)) | v21 | *(_WORD *)(v18 + 33) & 0xF800;
  *(_BYTE *)(v18 + 35) = a14;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_DWORD *)(v18 + 56) = a4;
  *(_DWORD *)(v18 + 60) = a5;
  *(_DWORD *)(v18 + 64) = a6;
  *(_DWORD *)(v18 + 68) = a7;
  *(_DWORD *)(v18 + 72) = a8;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = -1;
  *(_QWORD *)(v18 + 104) = 0;
  *(_QWORD *)(v18 + 112) = 0;
  *(_QWORD *)(v18 + 120) = -1;
  *(_DWORD *)(v18 + 128) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v18 + 132) = a13;
  *(_DWORD *)(v18 + 136) = 0;
  return v18;
}

void JSC::Scope::restoreFromSourceProviderCache(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[24];

  v2 = *(_DWORD *)(a1 + 10) & 0xFFFFFFFD | (2 * (((*(_QWORD *)a2 >> 31) >> 1) & 1));
  *(_DWORD *)(a1 + 10) = v2;
  v3 = v2 & 0xFFFFFFFB | (4 * (*(_BYTE *)(a2 + 32) & 1));
  *(_DWORD *)(a1 + 10) = v3;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 8) & 1;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 31) & 0x3F;
  v4 = v3 & 0xFFFFFFF7 | (8 * (*(_DWORD *)a2 & 1));
  *(_DWORD *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 10) = v4 & 0xFFFFFFDF | (32 * (*(_DWORD *)(a2 + 16) & 1));
  v5 = *(_DWORD *)(a1 + 180);
  if (v5)
  {
    if (*(_DWORD *)(a2 + 24))
    {
      v7 = 0;
      v8 = (unsigned int *)(*(_QWORD *)(a1 + 168) + 72 * v5 - 72);
      v9 = (int *)(a2 + 33);
      do
      {
        v10 = *((unsigned __int8 *)v9 + 4);
        v11 = *v9;
        v9 = (int *)((char *)v9 + 5);
        WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)v12, v8, v11 | (unint64_t)(v10 << 32));
        ++v7;
      }
      while (v7 < *(unsigned int *)(a2 + 24));
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, WTF::AtomStringImpl **a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  WTF::PrintStream **NumericIdentifier;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  WTF::PrintStream *v130;
  WTF::PrintStream *v131;
  const char *v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  const char *v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  _DWORD *v167;
  int v168;
  WTF::PrintStream *v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  unint64_t *v185;
  const WTF::StringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  WTF::PrintStream **v193;
  WTF::PrintStream *v194;
  WTF::PrintStream **v195;
  unsigned int v196;
  WTF::PrintStream *Range;
  uint64_t v198;
  const char *v199;

  v9 = (unsigned __int8 *)(a1 + 7344);
  if ((unint64_t)&v194 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
    v19 = 0;
    v9[8] = 1;
    return v19;
  }
  ++*(_DWORD *)(a1 + 7296);
  v12 = *(_DWORD *)(a1 + 7300);
  v13 = (int *)(a1 + 7368);
  v14 = *(_DWORD *)(a1 + 7368);
  if (v14 == 12)
  {
LABEL_3:
    v19 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::SyntaxChecker>(a1, a3, *(WTF::AtomStringImpl **)(a1 + 7376), a4, (uint64_t)a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 7400);
    v21 = *(_DWORD *)(a1 + 7412);
    v22 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v20;
    *(_DWORD *)(a1 + 7448) = v21;
    *(_DWORD *)(a1 + 7452) = v22;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v20;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197E77EF4);
    }
    v25 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 9) & 1;
    *(_BYTE *)(v23 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v23, a1 + 7368, 0, v25, v15, v16, v17, v18);
    goto LABEL_5;
  }
  if (v14 > 544)
  {
    if (v14 == 545)
    {
LABEL_9:
      v27 = *(_DWORD *)(a1 + 12);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x197E77F44);
      }
      v28 = v27 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 11) & 2) == 0)
      {
        goto LABEL_109;
      }
      if (v14 == 1048592)
      {
        v35 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v36 = **(_QWORD **)(a1 + 7376);
        goto LABEL_186;
      }
LABEL_187:
      if ((_DWORD)a3 == 5)
        goto LABEL_188;
      v170 = *(_DWORD *)(a1 + 12);
      if (!v170)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7845CLL);
      }
      v171 = v170 - 1;
      if (v14 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v171 + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = (WTF::PrintStream *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v198 = v172;
          v199 = (const char *)JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&Range, &v199);
        }
        goto LABEL_188;
      }
      if ((v14 - 531) <= 1)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = (WTF::PrintStream *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v198 = v173;
          v199 = (const char *)JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v199);
        }
        goto LABEL_188;
      }
      if ((v14 & 0x200) != 0)
      {
        if ((v14 - 544) >= 3)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = (WTF::PrintStream *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v198 = v174;
            v199 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v199);
          }
          goto LABEL_188;
        }
        if (v14 == 544)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v171 + 9) & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              Range = (WTF::PrintStream *)JSC::destructuringKindToVariableKindName(a3);
              v199 = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, (const char **)&Range, &v199);
            }
            goto LABEL_188;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v171 + 9) & 1) != 0
               || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v171 + 11) & 2) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_188;
          Range = (WTF::PrintStream *)JSC::destructuringKindToVariableKindName(a3);
          v199 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
          v132 = "Cannot use 'yield' as a ";
          goto LABEL_115;
        }
      }
      else if ((_DWORD)a3 != 4 && v14 == 13)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = (WTF::PrintStream *)JSC::destructuringKindToVariableKindName(a3);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*>(a1, "Cannot use a private name as a ", (const char **)&Range);
        }
        goto LABEL_188;
      }
      if (v14 != 20 && (v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a parameter pattern or a ')' in parameter list");
        goto LABEL_188;
      }
      goto LABEL_97;
    }
    if (v14 == 546)
    {
LABEL_12:
      v29 = *v9;
      if (*v9)
      {
        v30 = *(_DWORD *)(a1 + 12);
        if (!v30)
        {
          __break(0xC471u);
          JUMPOUT(0x197E77F1CLL);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 10) & 0x102000) == 0
          && *(_DWORD *)(a1 + 7480) != 1)
        {
          goto LABEL_3;
        }
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_188;
      if (a3 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x197E77F14);
      }
      Range = (WTF::PrintStream *)off_1E357B2E8[(int)a3];
      if (!v29)
        goto LABEL_112;
      v31 = *(_DWORD *)(a1 + 12);
      if (!v31)
      {
        __break(0xC471u);
        JUMPOUT(0x197E78464);
      }
      v32 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v31 - 1) + 10);
      if ((v32 & 0x2000) != 0)
      {
LABEL_112:
        v33 = "in an async function";
      }
      else if ((v32 & 0x100000) != 0)
      {
        v33 = "in a static block";
      }
      else
      {
        if (*(_DWORD *)(a1 + 7480) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7839CLL);
        }
        v33 = "in a module";
      }
      v199 = v33;
LABEL_114:
      v132 = "Cannot use 'await' as a ";
LABEL_115:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v132, (const char **)&Range, &v199);
      goto LABEL_188;
    }
    if (v14 != 1048592)
      goto LABEL_187;
    v35 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v36 = **(_QWORD **)(a1 + 7376);
    if (v36 != v35[41])
    {
LABEL_32:
      if (v36 != v35[62])
      {
LABEL_186:
        if (v36 == v35[16])
        {
LABEL_110:
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_3;
          goto LABEL_12;
        }
        goto LABEL_187;
      }
      goto LABEL_9;
    }
LABEL_25:
    v34 = *(_DWORD *)(a1 + 12);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x197E781DCLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v34 - 1) + 9) & 1) == 0)
    {
      if (v14 == 544)
      {
        if ((a3 - 1) <= 1)
        {
LABEL_174:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
          goto LABEL_188;
        }
        goto LABEL_3;
      }
LABEL_109:
      if (v14 != 1048592)
        goto LABEL_3;
      goto LABEL_110;
    }
    if (v14 != 1048592)
      goto LABEL_187;
    v35 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v36 = **(_QWORD **)(a1 + 7376);
    goto LABEL_32;
  }
  if (v14 == 544)
    goto LABEL_25;
  v37 = a6;
  if (v14)
  {
    if (v14 == 4)
    {
      v98 = *(_DWORD *)(a1 + 7400);
      v99 = *(_DWORD *)(a1 + 7412);
      v100 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v98;
      *(_DWORD *)(a1 + 7448) = v99;
      *(_DWORD *)(a1 + 7452) = v100;
      v101 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v101 + 4) = v98;
      v102 = *(_DWORD *)(a1 + 12);
      if (!v102)
      {
        __break(0xC471u);
        JUMPOUT(0x197E78420);
      }
      v103 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v102 - 1) + 9) & 1;
      *(_BYTE *)(v101 + 56) = 0;
      v104 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v101, a1 + 7368, 0, v103, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v104;
      if (a5)
        *a5 = 1;
      v109 = (v37 + 1);
      v110 = "Expected either a closing ']' or a ',' following an element destructuring pattern";
      while (1)
      {
        if (v104 == 6)
        {
          v126 = *(_DWORD *)(a1 + 7400);
          v127 = *(_DWORD *)(a1 + 7412);
          v128 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v126;
          *(_DWORD *)(a1 + 7448) = v127;
          *(_DWORD *)(a1 + 7452) = v128;
          v122 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v122 + 4) = v126;
          v123 = *(_DWORD *)(a1 + 12);
          if (!v123)
          {
            __break(0xC471u);
            JUMPOUT(0x197E77A70);
          }
        }
        else
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_188;
          if (v104 == 37)
          {
            v151 = *(_DWORD *)(a1 + 7400);
            v152 = *(_DWORD *)(a1 + 7412);
            v153 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v151;
            *(_DWORD *)(a1 + 7448) = v152;
            *(_DWORD *)(a1 + 7452) = v153;
            v154 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v154 + 4) = v151;
            v155 = *(_DWORD *)(a1 + 12);
            if (!v155)
            {
              __break(0xC471u);
              JUMPOUT(0x197E78474);
            }
            v156 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v155 - 1) + 9) & 1;
            *(_BYTE *)(v154 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v154, a1 + 7368, 0, v156, v105, v106, v107, v108);
            v159 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (unint64_t)a4, (uint64_t)a5, v109, v157, v158);
            if ((_DWORD)a3 == 5 && !v159)
              goto LABEL_188;
            v118 = *v13;
            if (v159)
            {
              v110 = "Expected a closing ']' following a rest element destructuring pattern";
LABEL_137:
              if (v118 == 5)
              {
LABEL_138:
                v160 = *(_DWORD *)(a1 + 7400);
                v161 = *(_DWORD *)(a1 + 7412);
                v162 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v160;
                *(_DWORD *)(a1 + 7448) = v161;
                *(_DWORD *)(a1 + 7452) = v162;
                v163 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v163 + 4) = v160;
                v164 = *(_DWORD *)(a1 + 12);
                if (!v164)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E78428);
                }
                v165 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v164 - 1) + 9) & 1;
                *(_BYTE *)(v163 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v163, a1 + 7368, 0, v165, v105, v106, v107, v108);
                v19 = 33;
                goto LABEL_5;
              }
              if (v118 != 20 && (v118 & 0x100000) == 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_188;
                Range = (WTF::PrintStream *)v110;
LABEL_129:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 1, (const char **)&Range);
                goto LABEL_188;
              }
            }
            else
            {
LABEL_155:
              if (v118 != 20 && (v118 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
                goto LABEL_188;
              }
            }
LABEL_97:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_188;
          }
          if (v104 == 5)
            goto LABEL_138;
          v111 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (unint64_t)a4, (uint64_t)a5, v109, v107, v108);
          if ((_DWORD)a3 == 5 && !v111)
            goto LABEL_188;
          if (!v111)
          {
LABEL_154:
            v118 = *v13;
            goto LABEL_155;
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v112, v113, v114, v115, v116, v117);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_188;
          v118 = *v13;
          if (*v13 != 6)
            goto LABEL_137;
          v119 = *(_DWORD *)(a1 + 7400);
          v120 = *(_DWORD *)(a1 + 7412);
          v121 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v119;
          *(_DWORD *)(a1 + 7448) = v120;
          *(_DWORD *)(a1 + 7452) = v121;
          v122 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v122 + 4) = v119;
          v123 = *(_DWORD *)(a1 + 12);
          if (!v123)
          {
            __break(0xC471u);
            JUMPOUT(0x197E77F34);
          }
        }
        v124 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v123 - 1) + 9) & 1;
        *(_BYTE *)(v122 + 56) = 0;
        v104 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v122, a1 + 7368, 0, v124, v105, v106, v107, v108);
        *(_DWORD *)(a1 + 7368) = v104;
      }
    }
    goto LABEL_187;
  }
  v40 = *(_DWORD *)(a1 + 7400);
  v41 = *(_DWORD *)(a1 + 7412);
  v42 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v40;
  *(_DWORD *)(a1 + 7448) = v41;
  *(_DWORD *)(a1 + 7452) = v42;
  v43 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v43 + 4) = v40;
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197E78410);
  }
  v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
  *(_BYTE *)(v43 + 56) = 0;
  v50 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v50;
  if (a5)
    *a5 = 1;
  v196 = v37 + 1;
  v194 = (WTF::PrintStream *)"Expected either a closing '}' or an ',' after a property destructuring pattern";
  while (1)
  {
    if (v50 == 37)
    {
      v133 = *(_DWORD *)(a1 + 7400);
      v134 = *(_DWORD *)(a1 + 7412);
      v135 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v133;
      *(_DWORD *)(a1 + 7448) = v134;
      *(_DWORD *)(a1 + 7452) = v135;
      v136 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v136 + 4) = v133;
      v137 = *(_DWORD *)(a1 + 12);
      if (!v137)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7846CLL);
      }
      v138 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v137 - 1) + 9) & 1;
      *(_BYTE *)(v136 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v136, a1 + 7368, 0, v138, v46, v47, v48, v49);
      v143 = JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, a4, v139, v140, v141, v142);
      v19 = 0;
      if (*(_QWORD *)(a1 + 7360) || !v143)
        goto LABEL_5;
      v144 = "Expected a closing '}' following a rest element destructuring pattern";
LABEL_120:
      v194 = (WTF::PrintStream *)v144;
      v90 = *v13;
LABEL_121:
      if ((_DWORD)a3 == 5)
      {
        if (v90 != 1)
          goto LABEL_188;
      }
      else if (v90 != 1)
      {
        if (v90 != 20 && (v90 & 0x100000) == 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_188;
          Range = v194;
          goto LABEL_129;
        }
        goto LABEL_97;
      }
      v145 = *(_DWORD *)(a1 + 7400);
      v146 = *(_DWORD *)(a1 + 7412);
      v147 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v145;
      *(_DWORD *)(a1 + 7448) = v146;
      *(_DWORD *)(a1 + 7452) = v147;
      v148 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v148 + 4) = v145;
      v149 = *(_DWORD *)(a1 + 12);
      if (!v149)
      {
        __break(0xC471u);
        JUMPOUT(0x197E78418);
      }
      v150 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v149 - 1) + 9) & 1;
      *(_BYTE *)(v148 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v148, a1 + 7368, 0, v150, v46, v47, v48, v49);
      v19 = 34;
      goto LABEL_5;
    }
    if (v50 == 1)
    {
      v144 = "Expected either a closing '}' or an ',' after a property destructuring pattern";
      goto LABEL_120;
    }
    if (v50 > 544)
    {
      if (v50 != 1048592)
      {
        if (v50 == 545)
        {
          v175 = *(_DWORD *)(a1 + 12);
          if (!v175)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7831CLL);
          }
          v176 = v175 - 1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v176 + 9) & 1) != 0
            || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v176 + 11) & 2) != 0)
          {
            goto LABEL_46;
          }
        }
        else if (v50 != 546)
        {
          goto LABEL_255;
        }
      }
    }
    else
    {
      switch(v50)
      {
        case 4:
          v177 = *(_DWORD *)(a1 + 12);
          v178 = *(_DWORD *)(a1 + 7400);
          v179 = *(_DWORD *)(a1 + 7412);
          v180 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v178;
          *(_DWORD *)(a1 + 7448) = v179;
          *(_DWORD *)(a1 + 7452) = v180;
          v181 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v181 + 4) = v178;
          if (!v177)
          {
            __break(0xC471u);
            JUMPOUT(0x197E78324);
          }
          v182 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v177 - 1) + 9) & 1;
          *(_BYTE *)(v181 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v181, a1 + 7368, 0, v182, v46, v47, v48, v49);
          v183 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
          v184 = *(_DWORD *)(a1 + 7368);
          if (!v183)
          {
            if (v184 != 20 && (v184 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
              goto LABEL_188;
            }
            goto LABEL_97;
          }
          if (v184 != 5)
          {
            if (v184 != 20 && (v184 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected ']' to end end a computed property name");
              goto LABEL_188;
            }
            goto LABEL_97;
          }
          NumericIdentifier = 0;
          goto LABEL_47;
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
          goto LABEL_255;
        case 9:
        case 10:
          v185 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
          NumericIdentifier = (WTF::PrintStream **)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v185, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v186, v187, v188, v189, v190, v191);
          goto LABEL_47;
        case 11:
          v192 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
          JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v192, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), v9[40]);
          NumericIdentifier = v193;
          if (v193)
            goto LABEL_47;
          if (*v13 == 20 || (*v13 & 0x100000) != 0)
            goto LABEL_97;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
          goto LABEL_188;
        case 12:
          break;
        case 14:
          goto LABEL_46;
        default:
          if (v50 != 544)
          {
            if ((v50 - 531) >= 2)
            {
LABEL_255:
              if ((v50 & 0x200) == 0)
              {
                if ((_DWORD)a3 == 5)
                  goto LABEL_188;
                if (v50 != 20 && (v50 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a property name");
                  goto LABEL_188;
                }
                goto LABEL_97;
              }
            }
LABEL_46:
            NumericIdentifier = *(WTF::PrintStream ***)(a1 + 7376);
LABEL_47:
            v53 = *(_DWORD *)(a1 + 7400);
            v54 = *(_DWORD *)(a1 + 7412);
            v55 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v53;
            *(_DWORD *)(a1 + 7448) = v54;
            *(_DWORD *)(a1 + 7452) = v55;
            v56 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v56 + 4) = v53;
            v57 = *(_DWORD *)(a1 + 12);
            if (!v57)
            {
              __break(0xC471u);
              JUMPOUT(0x197E783A4);
            }
            v58 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v57 - 1) + 9) & 1;
            *(_BYTE *)(v56 + 56) = 0;
            v59 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v56, a1 + 7368, 0, v58, v46, v47, v48, v49);
            *(_DWORD *)(a1 + 7368) = v59;
            if (v59 != 18)
            {
              if ((_DWORD)a3 == 5)
                goto LABEL_188;
              if (v50 == 531)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  Range = *NumericIdentifier;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &Range);
                }
                goto LABEL_188;
              }
              if (v50 == 532)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  Range = *NumericIdentifier;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&Range);
                }
                goto LABEL_188;
              }
              if ((v50 & 0x200) == 0)
              {
                if (v59 != 20 && (v59 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' prior to a named destructuring property");
                  goto LABEL_188;
                }
                goto LABEL_97;
              }
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_188;
              v169 = *NumericIdentifier;
LABEL_161:
              Range = v169;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[58],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &Range);
              goto LABEL_188;
            }
            v64 = *(_DWORD *)(a1 + 7400);
            v65 = *(_DWORD *)(a1 + 7412);
            v66 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v64;
            *(_DWORD *)(a1 + 7448) = v65;
            *(_DWORD *)(a1 + 7452) = v66;
            v67 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v67 + 4) = v64;
            v68 = *(_DWORD *)(a1 + 12);
            if (!v68)
            {
              __break(0xC471u);
              JUMPOUT(0x197E783ACLL);
            }
LABEL_57:
            v80 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v68 - 1) + 9) & 1;
            *(_BYTE *)(v67 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v67, a1 + 7368, 0, v80, v60, v61, v62, v63);
            v83 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (unint64_t)a4, (uint64_t)a5, v196, v81, v82);
            goto LABEL_58;
          }
          v51 = *(_DWORD *)(a1 + 12);
          if (!v51)
          {
            __break(0xC471u);
            JUMPOUT(0x197E783CCLL);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v51 - 1) + 9) & 1) != 0)
            goto LABEL_46;
          if ((a3 - 1) <= 1)
            goto LABEL_174;
          break;
      }
    }
    v195 = *(WTF::PrintStream ***)(a1 + 7376);
    v69 = *(_DWORD *)(a1 + 7368);
    v70 = *(_DWORD *)(a1 + 7400);
    v71 = *(_DWORD *)(a1 + 7412);
    v72 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v70;
    *(_DWORD *)(a1 + 7448) = v71;
    *(_DWORD *)(a1 + 7452) = v72;
    v73 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v73 + 4) = v70;
    v74 = *(_DWORD *)(a1 + 12);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x197E77F24);
    }
    v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
    *(_BYTE *)(v73 + 56) = 0;
    v76 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v73, a1 + 7368, 0, v75, v46, v47, v48, v49);
    *(_DWORD *)(a1 + 7368) = v76;
    if (v76 == 18)
    {
      v77 = *(_DWORD *)(a1 + 7400);
      v78 = *(_DWORD *)(a1 + 7412);
      v79 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v77;
      *(_DWORD *)(a1 + 7448) = v78;
      *(_DWORD *)(a1 + 7452) = v79;
      v67 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v67 + 4) = v77;
      v68 = *(_DWORD *)(a1 + 12);
      if (!v68)
      {
        __break(0xC471u);
        JUMPOUT(0x197E77F3CLL);
      }
      goto LABEL_57;
    }
    if (v50 == 1048592)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_188;
      v169 = *v195;
      goto LABEL_161;
    }
    if (v69 == 546
      || v69 == 1048592 && *v195 == *(WTF::PrintStream **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
    {
      if (!*v9)
        break;
      v97 = *(_DWORD *)(a1 + 12);
      if (!v97)
      {
        __break(0xC471u);
        JUMPOUT(0x197E783B4);
      }
      if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 10) & 0x102000) != 0
        || *(_DWORD *)(a1 + 7480) == 1)
      {
        break;
      }
    }
    if ((_DWORD)a3 != 5)
    {
      v83 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::SyntaxChecker>(a1, a3, (WTF::AtomStringImpl *)v195, a4, v60, v61, v62, v63);
      goto LABEL_60;
    }
    v129 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v130 = *(WTF::PrintStream **)(v129 + 1248);
    v131 = *v195;
    if (v130 == *v195 || *(WTF::PrintStream **)(v129 + 880) == v131)
    {
      v166 = *(_DWORD *)(a1 + 12);
      if (!v166)
      {
        __break(0xC471u);
        JUMPOUT(0x197E783BCLL);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v166 - 1) + 9) & 1) != 0)
      {
        v167 = *(_DWORD **)(a1 + 7496);
        if (v167 && *v167 == 1)
          *v167 = 0;
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = v131;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&Range);
        }
        goto LABEL_188;
      }
    }
    if (v76 == 21)
    {
      v168 = *(_DWORD *)(a1 + 12);
      if (!v168)
      {
        __break(0xC471u);
        JUMPOUT(0x197E783C4);
      }
      JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v168 - 1), (uint64_t)v131, v130 == v131);
    }
    v83 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::SyntaxChecker>(a1, 5, (WTF::AtomStringImpl *)v195, a4, v60, v61, v62, v63);
LABEL_58:
    if ((_DWORD)a3 == 5 && !v83)
      goto LABEL_188;
LABEL_60:
    if (!v83)
      goto LABEL_154;
    JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v84, v85, v86, v87, v88, v89);
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_188;
    v90 = *v13;
    if (*v13 != 6)
      goto LABEL_121;
    v91 = *(_DWORD *)(a1 + 7400);
    v92 = *(_DWORD *)(a1 + 7412);
    v93 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v91;
    *(_DWORD *)(a1 + 7448) = v92;
    *(_DWORD *)(a1 + 7452) = v93;
    v94 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v94 + 4) = v91;
    v95 = *(_DWORD *)(a1 + 12);
    if (!v95)
    {
      __break(0xC471u);
      JUMPOUT(0x197E77F2CLL);
    }
    v96 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v95 - 1) + 9) & 1;
    *(_BYTE *)(v94 + 56) = 0;
    v50 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v94, a1 + 7368, 0, v96, v46, v47, v48, v49);
    *(_DWORD *)(a1 + 7368) = v50;
  }
  if (!*(_QWORD *)(a1 + 7360))
  {
    Range = (WTF::PrintStream *)JSC::destructuringKindToVariableKindName(a3);
    v199 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
    goto LABEL_114;
  }
LABEL_188:
  v19 = 0;
LABEL_5:
  *(_DWORD *)(a1 + 7300) = v12;
  return v19;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __n128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_DWORD *)(a1 + 7368) != 21)
    return 0;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197E78568);
  }
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 2u, v16, a5, a6, a7, a8);
  v24 = 0;
  v25 = *(_QWORD *)(a1 + 7496);
  v26 = a1;
  *(_QWORD *)(a1 + 7496) = &v24;
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, (unint64_t)&v24, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v26 + 7496) = v25;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentElement<JSC::SyntaxChecker>(a1, a2, a4, a5, a6, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6);
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestBindingOrAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, WTF::AtomStringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestElement<JSC::SyntaxChecker>(a1, a3, a4);
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::SyntaxChecker>(uint64_t a1, int a2, WTF::AtomStringImpl *a3, WTF::AtomStringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;

  if (a2 != 4)
  {
    if ((a2 - 1) < 3)
    {
      if (a2 == 2)
        v11 = 2;
      else
        v11 = 1;
      v12 = JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(a1, a3, v11, 2, a5, a6, a7, a8);
      if (!v12)
        return 31;
      if ((v12 & 1) == 0)
      {
LABEL_10:
        if (v12 < 2)
          return 31;
        v13 = *(_DWORD *)(a1 + 7368);
        if (v13 == 20 || (v13 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          v17 = *(_QWORD *)a3;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot declare a lexical variable twice: '", &v17);
        }
        return 0;
      }
      v16 = *(_DWORD *)(a1 + 12);
      if (v16)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v16 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v17 = *(_QWORD *)a3;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot destructure to a variable named '", &v17);
          }
          return 0;
        }
        goto LABEL_10;
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x197E78740);
    }
    if (a2)
      return 31;
    v14 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v14 & 1) != 0)
    {
      v15 = *(_DWORD *)(a1 + 12);
      if (!v15)
        goto LABEL_30;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v17 = *(_QWORD *)a3;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a variable named '", &v17);
        }
        return 0;
      }
    }
    if (v14 < 2)
      return 31;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v17 = *(_QWORD *)a3;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v17);
    }
    return 0;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::declareRestOrNormalParameter(a1, a3, a4, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(a1 + 7360))
    return 31;
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 7496);
  v4 = a1;
  *(_QWORD *)(a1 + 7496) = &v2;
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>();
  *(_QWORD *)(v4 + 7496) = v3;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  _OWORD *v18;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  WTF::AtomStringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;

  if ((*(_DWORD *)(a1 + 7368) | 4) == 4)
  {
    v16 = (_BYTE *)(a1 + 7344);
    v17 = (_DWORD *)(a1 + 7368);
    v18 = (_OWORD *)(a1 + 7296);
    v55 = *(_OWORD *)(a1 + 7296);
    v19 = *(_DWORD *)(a1 + 7316);
    v54 = *(_QWORD *)(a1 + 7336);
    v53 = *(_OWORD *)(a1 + 7320);
    v51 = *(_BYTE *)(a1 + 7344);
    v52 = v19;
    v50 = *(_BYTE *)(a1 + 7345);
    v20 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v21 = *(unsigned int *)(a1 + 7404);
    v22 = *(int **)(a1 + 7288);
    v24 = *v22;
    v23 = v22[1];
    v25 = *((_BYTE *)v22 + 56);
    result = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 5, a3, a4, a5);
    if ((_DWORD)result && (*v17 > 0x13u || ((1 << *v17) & 0x80114) == 0))
      return result;
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v20, v21, v26, v27, v28, v29, v30);
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v35 = v24;
    *(_BYTE *)(v35 + 56) = v25;
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    *(_DWORD *)(v35 + 4) = v36;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
      goto LABEL_25;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1, v31, v32, v33, v34);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v23;
    *v18 = v55;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v52;
    *(_OWORD *)(a1 + 7320) = v53;
    *(_QWORD *)(a1 + 7336) = v54;
    *v16 = v51;
    *(_BYTE *)(a1 + 7345) = v50;
    v41 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v40, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
  v10 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10 > 0x30 || (v11 = v10, ((1 << v10) & 0x1000002030004) == 0))
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 12);
  if (!v12)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197E78A34);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
    return 31;
  v13 = *(_QWORD **)(a1 + 7320);
  result = 31;
  if (v13)
  {
    if (v11 - 1 <= 1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (*(_QWORD *)(v15 + 1248) == *v13 || *(_QWORD *)(v15 + 880) == *v13)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v53 = *v13;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v53);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int32x2_t *v10;
  char *v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 i;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  const WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  char v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  WTF *v102;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  int32x2_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  __int8 v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  __int32 v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  _DWORD *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 j;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  uint64_t *v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  const WTF::StringImpl *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  size_t v246;
  size_t v247;
  int *v248;
  _BYTE *v249;
  int v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  int v264;
  uint64_t *v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int *v281;
  int v282;
  int *v283;
  unsigned int v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  int32x2_t *v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  int v319;
  unsigned __int16 *v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  unsigned __int16 *v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  int v365;
  int v366;
  WTF::StringImpl *v367;
  int *v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  unsigned int v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  uint64_t v430;
  int v432;
  int v433;
  int v434;
  _OWORD *v435;
  uint64_t v436;
  __int128 v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  int v446;
  uint64_t v447;
  void *v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v456;
  const char *v458;
  unsigned int v459;
  unsigned int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v470;
  WTF::StringImpl *v471;
  uint64_t v472;
  unint64_t v473;
  char *v474;
  char v475;
  uint64_t v476;
  int v477;
  int v478;
  int v479;
  int v480;
  uint64_t v481;
  WTF::StringImpl *v482;
  int v483;
  int v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int v489;
  int v490;
  int v491;
  int v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  int v496;
  int v497;
  int v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  int v502;
  int32x2_t *v503;
  uint64_t *v504;
  unsigned int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  int v513;
  unint64_t v514;
  void *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  int v550;
  uint64_t v551;
  uint64_t v553;
  int v554;
  int v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  int v561;
  int v562;
  int v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  int v571;
  int v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  char v577;
  __int8 v578;
  int v579;
  int v580;
  int v581;
  int v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  int v586;
  _DWORD *v587;
  int v588;
  _DWORD *v589;
  int v590;
  int v591;
  int v592;
  uint64_t v593;
  int v594;
  uint64_t v595;
  int v596;
  const char *v597;
  int v598;
  int v599;
  int v600;
  const char *v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  int v621;
  int v622;
  int v623;
  int v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  int v628;
  uint64_t v629;
  const char *v630;
  uint64_t v631;
  int v632;
  const char *v633;
  const char *v634;
  int v635;
  const char *v637;
  uint64_t v638;
  int v639;
  unsigned int v640;
  uint64_t v641;
  unsigned int v642;
  unsigned int v643;
  int v644;
  _QWORD *v645;
  uint64_t v646;
  int v647;
  unsigned int v648;
  int v649;
  int v650;
  int v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  int v664;
  int v665;
  int v666;
  int v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  uint64_t v675;
  int v676;
  _BOOL4 v677;
  int v678;
  int v679;
  int v680;
  int v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  int v686;
  int v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  int v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  int v701;
  int v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  int v706;
  int v707;
  int v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  int v712;
  int v713;
  int v714;
  int v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  int v719;
  int v720;
  int v721;
  uint64_t v722;
  int v723;
  uint64_t v724;
  int v725;
  int v726;
  int v727;
  int v728;
  uint64_t v729;
  int v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  unsigned int v735;
  int v736;
  _QWORD *v737;
  uint64_t v738;
  int v739;
  int32x2_t *v740;
  uint64_t v741;
  uint64_t v742;
  __int128 v743;
  WTF *v744;
  uint64_t v745;
  _BYTE v746[24];
  __int128 v747;

  v8 = (uint64_t)a2;
  v10 = (int32x2_t *)(a1 + 7300);
  v11 = (char *)(a1 + 7368);
  v744 = 0;
  v745 = 0;
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 519)
  {
    if (v12 != 543)
    {
      v13 = 0;
      v14 = 0;
      goto LABEL_4;
    }
    v13 = 0;
LABEL_339:
    v372 = *(_DWORD *)(a1 + 12);
    if (!v372)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C7A8);
    }
    v373 = v13;
    v374 = v372 - 1;
    v375 = *(_QWORD *)a1;
    v376 = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v377 = v376 - 1;
      if (v376 == 1)
        break;
      --v376;
      v378 = v377;
      if ((*(_DWORD *)(v375 + 720 * v377 + 10) & 0x405400) == 0x400000)
        goto LABEL_343;
    }
    v378 = 0;
LABEL_343:
    v742 = v8;
    v379 = v372 - 1;
    do
    {
      v380 = v379;
      if (!v379)
        break;
      --v379;
    }
    while ((*(_BYTE *)(v375 + 720 * v380 + 13) & 8) == 0);
    if (v380 <= v377 && (*(_DWORD *)(v375 + 720 * v374 + 10) & 0x100) == 0)
    {
      if (v372 <= v377)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C8ECLL);
      }
      if ((*(_BYTE *)(v375 + 720 * v378 + 13) & 2) == 0 || *(_DWORD *)(v375 + 720 * v378 + 20))
        goto LABEL_362;
    }
    v381 = *(_DWORD *)(a1 + 7400);
    v382 = *(_DWORD *)(a1 + 7412);
    v383 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v381;
    *(_DWORD *)(a1 + 7448) = v382;
    *(_DWORD *)(a1 + 7452) = v383;
    v384 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v384 + 4) = v381;
    v385 = *(_BYTE *)(v375 + 720 * v374 + 9) & 1;
    *(_BYTE *)(v384 + 56) = 0;
    v386 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v384, (uint64_t)v11, 0, v385, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v386;
    v387 = *(_DWORD *)(a1 + 12);
    if (v386 != 2)
    {
      if (!v387)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C7D8);
      }
      v388 = v387 - 1;
      goto LABEL_351;
    }
    if (!v387)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C7C8);
    }
    v388 = v387 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v387 - 1) + 14) != 2)
    {
LABEL_351:
      v389 = ~v388 + v387;
      v390 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v391 = v390 - 1;
        if (v390 == 1)
          break;
        --v390;
        v392 = v391;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v391 + 12) & 0x40) != 0)
          goto LABEL_354;
      }
      v392 = v389;
LABEL_354:
      if (v387 <= v391)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C7B0);
      }
      v393 = v392;
      *(_DWORD *)(*(_QWORD *)a1 + 720 * v392 + 10) |= 0x20u;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
      {
        v16 = 0;
        LODWORD(v24) = 14;
        v63 = 1;
      }
      else
      {
        v394 = *(_DWORD *)(a1 + 12);
        if (v394 <= v391)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C7B8);
        }
        v395 = *(_QWORD *)a1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v392 + 11) & 8) != 0)
          goto LABEL_665;
        if (v394 <= v377)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C7C0);
        }
        if ((*(_BYTE *)(v395 + 720 * v378 + 13) & 2) != 0)
        {
LABEL_665:
          if (v394 <= v377)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7C88CLL);
          }
          v393 = v378;
        }
        v16 = 0;
        LODWORD(v24) = 14;
        v63 = 1;
        if (v380 <= v377)
        {
          v13 = v373;
          if (*(_DWORD *)(v395 + 720 * v393 + 20) != 1)
            goto LABEL_46;
LABEL_362:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
          goto LABEL_38;
        }
      }
      v13 = v373;
      goto LABEL_46;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_38;
    v597 = "super call is not valid in this context";
LABEL_627:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v597);
    goto LABEL_38;
  }
  do
  {
    if (HIDWORD(v745) == (_DWORD)v745)
    {
      v308 = WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v744, HIDWORD(v745) + 1, a1 + 7416);
      v309 = (char *)v744 + 12 * HIDWORD(v745);
      v310 = *(_QWORD *)v308;
      v311 = *(_DWORD *)(v308 + 8);
    }
    else
    {
      v309 = (char *)v744 + 12 * HIDWORD(v745);
      v310 = *(_QWORD *)(a1 + 7416);
      v311 = *(_DWORD *)(a1 + 7424);
    }
    *((_DWORD *)v309 + 2) = v311;
    *(_QWORD *)v309 = v310;
    ++HIDWORD(v745);
    v312 = *(_DWORD *)(a1 + 7400);
    v313 = *(_DWORD *)(a1 + 7412);
    v314 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v312;
    *(_DWORD *)(a1 + 7448) = v313;
    *(_DWORD *)(a1 + 7452) = v314;
    v315 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v315 + 4) = v312;
    v316 = *(_DWORD *)(a1 + 12);
    if (!v316)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C728);
    }
    v317 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v316 - 1) + 9) & 1;
    *(_BYTE *)(v315 + 56) = 0;
    v12 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v315, (uint64_t)v11, 0, v317, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v12;
  }
  while (v12 == 519);
  v13 = HIDWORD(v745);
  v14 = HIDWORD(v745) != 0;
  v63 = v12 == 543;
  if (v12 != 19 || HIDWORD(v745) == 0)
  {
    if (v12 != 543)
    {
LABEL_4:
      if (v12 != 539)
      {
        v15 = *(_QWORD *)(a1 + 7216);
        v16 = v12 == 12
           && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 896)
           && v10[10].i8[4] == 0;
        if ((unint64_t)&v732 < *(_QWORD *)(v15 + 93104))
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
            v10[6].i8[4] = 1;
          }
          goto LABEL_34;
        }
        v17 = *(_DWORD *)v11;
        if (*(int *)v11 > 511)
        {
          switch(v17)
          {
            case 512:
              v18 = *(_DWORD *)(a1 + 7400);
              v19 = *(_DWORD *)(a1 + 7412);
              v20 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v18;
              *(_DWORD *)(a1 + 7448) = v19;
              *(_DWORD *)(a1 + 7452) = v20;
              v21 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v21 + 4) = v18;
              v22 = *(_DWORD *)(a1 + 12);
              if (!v22)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C60CLL);
              }
              v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
              *(_BYTE *)(v21 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v21, (uint64_t)v11, 0, v23, a5, a6, a7, a8);
              LODWORD(v24) = 8;
              goto LABEL_44;
            case 513:
              v155 = *(_DWORD *)(a1 + 7400);
              v156 = *(_DWORD *)(a1 + 7412);
              v157 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v155;
              *(_DWORD *)(a1 + 7448) = v156;
              *(_DWORD *)(a1 + 7452) = v157;
              v61 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v61 + 4) = v155;
              v62 = *(_DWORD *)(a1 + 12);
              if (!v62)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C63CLL);
              }
              goto LABEL_132;
            case 514:
              v58 = *(_DWORD *)(a1 + 7400);
              v59 = *(_DWORD *)(a1 + 7412);
              v60 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v58;
              *(_DWORD *)(a1 + 7448) = v59;
              *(_DWORD *)(a1 + 7452) = v60;
              v61 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v61 + 4) = v58;
              v62 = *(_DWORD *)(a1 + 12);
              if (!v62)
              {
                __break(0xC471u);
                JUMPOUT(0x197E78DA0);
              }
LABEL_132:
              v158 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1;
              *(_BYTE *)(v61 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v61, (uint64_t)v11, 0, v158, a5, a6, a7, a8);
              LODWORD(v24) = 9;
              goto LABEL_44;
            case 515:
            case 516:
            case 517:
            case 518:
            case 519:
            case 520:
            case 521:
            case 522:
            case 524:
            case 525:
            case 527:
            case 528:
            case 529:
            case 530:
            case 531:
            case 532:
            case 533:
            case 534:
            case 535:
            case 536:
            case 537:
            case 538:
            case 539:
            case 540:
            case 542:
            case 543:
              goto LABEL_33;
            case 523:
              v128 = *(_DWORD *)(a1 + 7300);
              v129 = *(_DWORD *)(a1 + 7400);
              v130 = *(_DWORD *)(a1 + 7412);
              v131 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v129;
              *(_DWORD *)(a1 + 7448) = v130;
              *(_DWORD *)(a1 + 7452) = v131;
              v132 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v132 + 4) = v129;
              v133 = *(_DWORD *)(a1 + 12);
              if (!v133)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C624);
              }
              v134 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v133 - 1) + 9) & 1;
              *(_BYTE *)(v132 + 56) = 0;
              v135 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v132, (uint64_t)v11, 0, v134, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v135;
              v747 = 0u;
              *(_OWORD *)&v746[8] = 0u;
              *(_QWORD *)v746 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              if (v135 == 191488)
              {
                v140 = *(_DWORD *)(a1 + 7400);
                v141 = *(_DWORD *)(a1 + 7412);
                v142 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v140;
                *(_DWORD *)(a1 + 7448) = v141;
                *(_DWORD *)(a1 + 7452) = v142;
                v143 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v143 + 4) = v140;
                v144 = *(_DWORD *)(a1 + 12);
                if (!v144)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C69CLL);
                }
                v145 = v13;
                v146 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v144 - 1) + 9) & 1;
                *(_BYTE *)(v143 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v143, (uint64_t)v11, 0, v146, v136, v137, v138, v139);
                v147 = 2;
              }
              else
              {
                v145 = v13;
                v147 = 0;
              }
              v148 = v10[21].i8[6];
              v10[21].i8[6] = v147;
              v149 = *(_DWORD *)(a1 + 12);
              if (!v149)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C62CLL);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v149 - 1) + 12) & 1) != 0)
                v150 = v10[23].u8[4];
              else
                v150 = 0;
              if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, v8, 0, 0, v150, (_DWORD)v150 != 2, (uint64_t)v746, 0) & 1) != 0)
              {
                LODWORD(v24) = 12;
              }
              else
              {
                if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse function expression");
                }
                LODWORD(v24) = 0;
              }
              v10[21].i8[6] = v148;
              *(_DWORD *)(a1 + 7300) = v128;
              v13 = v145;
              goto LABEL_43;
            case 526:
              v120 = *(_DWORD *)(a1 + 7400);
              v121 = *(_DWORD *)(a1 + 7412);
              v122 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v120;
              *(_DWORD *)(a1 + 7448) = v121;
              *(_DWORD *)(a1 + 7452) = v122;
              v123 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v123 + 4) = v120;
              v124 = *(_DWORD *)(a1 + 12);
              if (!v124)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C614);
              }
              v125 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v124 - 1) + 9) & 1;
              *(_BYTE *)(v123 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v123, (uint64_t)v11, 0, v125, a5, a6, a7, a8);
              v126 = *(_DWORD *)(a1 + 12);
              if (!v126)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C61CLL);
              }
              v127 = v126 - 1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v127 + 11) & 8) != 0)
                *(_BYTE *)(*(_QWORD *)a1 + 720 * v127 + 32) |= 4u;
              LODWORD(v24) = 7;
              goto LABEL_44;
            case 541:
              v38 = *(_DWORD *)(a1 + 7300);
              *(_QWORD *)&v746[8] = 0;
              *(_QWORD *)&v746[16] = 0;
              *(_QWORD *)v746 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              LODWORD(v24) = JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::SyntaxChecker>(a1, v8, 0, (WTF ***)v746);
              goto LABEL_42;
            case 544:
              v159 = *(_DWORD *)(a1 + 12);
              if (!v159)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C64CLL);
              }
              v56 = v159 - 1;
              v57 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v56 + 9) & 1) == 0)
                goto LABEL_219;
              goto LABEL_33;
            case 545:
              v55 = *(_DWORD *)(a1 + 12);
              if (!v55)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C644);
              }
              goto LABEL_32;
            case 546:
              v151 = *(_DWORD *)(a1 + 12);
              if (!v151)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C634);
              }
              v56 = v151 - 1;
              v57 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v151 - 1) + 12) & 0x10) != 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[90]>(a1);
                goto LABEL_34;
              }
              if (*(_DWORD *)(a1 + 7316))
              {
                v152 = *(_DWORD *)(a1 + 12);
                while (1)
                {
                  v153 = v152;
                  if (v152 == 1)
                    break;
                  --v152;
                  if ((*(_BYTE *)(v57 + 720 * (v153 - 1) + 12) & 0x40) != 0)
                    goto LABEL_127;
                }
                v152 = 0;
LABEL_127:
                if (v151 <= v153 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C6BCLL);
                }
                if ((*(_BYTE *)(v57 + 720 * v152 + 11) & 0x40) != 0 || ((1 << v10[21].i8[6]) & 0x6000) != 0)
                {
                  v154 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, v8, a3, a4, a5, a6, a7, a8);
LABEL_173:
                  LODWORD(v24) = v154;
                  goto LABEL_43;
                }
              }
              else if (!v10[5].i8[4])
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57]>(a1);
                goto LABEL_34;
              }
              goto LABEL_219;
            default:
              if (v17 != 191489)
              {
                if (v17 != 1048592)
                  goto LABEL_33;
                v53 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
                v54 = **(_QWORD **)(a1 + 7376);
                if (v54 != v53[41])
                  goto LABEL_277;
                v307 = *(_DWORD *)(a1 + 12);
                if (!v307)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C720);
                }
                v56 = v307 - 1;
                v57 = *(_QWORD *)a1;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v56 + 9) & 1) != 0)
                {
LABEL_277:
                  if (v54 != v53[16] || !v10[5].i8[4])
                    goto LABEL_28;
                  v324 = *(_DWORD *)(a1 + 12);
                  if (!v324)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7C778);
                  }
                  v56 = v324 - 1;
                  v57 = *(_QWORD *)a1;
                  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v56 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
                  {
LABEL_28:
                    if (v54 != v53[62])
                      goto LABEL_33;
                    v55 = *(_DWORD *)(a1 + 12);
                    if (!v55)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E78D18);
                    }
LABEL_32:
                    v56 = v55 - 1;
                    v57 = *(_QWORD *)a1;
                    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v56 + 9) & 1) != 0
                      || (*(_BYTE *)(v57 + 720 * v56 + 11) & 2) != 0)
                    {
                      goto LABEL_33;
                    }
                  }
                }
LABEL_219:
                v265 = *(uint64_t **)(a1 + 7376);
                if (*(_BYTE *)(v57 + 720 * v56 + 14) == 2
                  && *v265 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
                {
                  if (v17 != 20 && (v17 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "arguments is not valid in this context");
                    goto LABEL_34;
                  }
                  goto LABEL_33;
                }
                v266 = *(_DWORD *)(a1 + 7400);
                v267 = *(_DWORD *)(a1 + 7412);
                v268 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v266;
                *(_DWORD *)(a1 + 7448) = v267;
                *(_DWORD *)(a1 + 7452) = v268;
                v269 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v269 + 4) = v266;
                v270 = *(_BYTE *)(v57 + 720 * v56 + 9) & 1;
                *(_BYTE *)(v269 + 56) = 0;
                v271 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v269, (uint64_t)v11, 0, v270, a5, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v271;
                if (v271 == 38)
                  goto LABEL_34;
                v742 = v8;
                v272 = *(_DWORD *)(a1 + 12);
                if (!v272)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C5E0);
                }
                v740 = v10;
                v741 = v13;
                v273 = *v265;
                v274 = v272 - 1;
                v275 = *(_QWORD *)a1;
                v276 = *(_QWORD *)a1 + 720 * v274;
                if (*v265 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248))
                  v277 = 2;
                else
                  v277 = *(_DWORD *)(v276 + 10) & 2;
                *(_DWORD *)(v276 + 10) = v277 | *(_DWORD *)(v276 + 10) & 0xFFFFFFFD;
                v278 = *(unsigned int *)(v276 + 180);
                if (!(_DWORD)v278)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C5E8);
                }
                v279 = v278 - 1;
                v280 = *(_QWORD *)(v275 + 720 * v274 + 168);
                v281 = (unsigned int *)(v280 + 72 * (v278 - 1));
                v283 = (int *)(v281 + 1);
                v282 = v281[1];
                v284 = *v281;
                if (v282 == 8)
                {
                  if (v284)
                  {
                    v285 = *v281;
                    v286 = (_QWORD *)(v280 + 72 * v279 + 8);
                    v287 = v286;
                    v288 = v285;
                    while (*v287 != v273)
                    {
                      ++v287;
                      if (!--v288)
                      {
                        if (v284 <= 7)
                          goto LABEL_232;
                        v435 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
                        v436 = 0;
                        *(_QWORD *)&v437 = -1;
                        *((_QWORD *)&v437 + 1) = -1;
                        *v435 = v437;
                        v435[1] = v437;
                        v435[2] = v437;
                        v435[3] = v437;
                        v435[4] = v437;
                        v435[5] = v437;
                        v435[6] = v437;
                        v435[7] = v437;
                        v435[8] = v437;
                        v435[9] = v437;
                        v435[10] = v437;
                        v435[11] = v437;
                        v435[12] = v437;
                        v435[13] = v437;
                        v435[14] = v437;
                        v435[15] = v437;
                        v435[16] = v437;
                        v435[17] = v437;
                        v435[18] = v437;
                        v435[19] = v437;
                        v435[20] = v437;
                        v435[21] = v437;
                        v435[22] = v437;
                        v435[23] = v437;
                        v435[24] = v437;
                        v435[25] = v437;
                        v435[26] = v437;
                        v435[27] = v437;
                        v435[28] = v437;
                        v435[29] = v437;
                        v435[30] = v437;
                        v435[31] = v437;
                        *v283 = 64;
                        do
                        {
                          v438 = v286[v436];
                          if (v438 != -1)
                          {
                            v439 = (~(v438 << 32) + v438) ^ ((unint64_t)(~(v438 << 32) + v438) >> 22);
                            v440 = 9 * ((v439 + ~(v439 << 13)) ^ ((v439 + ~(v439 << 13)) >> 8));
                            v441 = (v440 ^ (v440 >> 15)) + ~((v440 ^ (v440 >> 15)) << 27);
                            v442 = v441 ^ (v441 >> 31);
                            v443 = v442 & 0x3F;
                            v444 = *((_QWORD *)v435 + v443);
                            if (v444 != -1 && v444 != v438)
                            {
                              LOBYTE(v443) = v442 & 0x3F;
                              v446 = 1;
                              do
                              {
                                v443 = ((_BYTE)v443 + (_BYTE)v446) & 0x3F;
                                v447 = *((_QWORD *)v435 + v443);
                                ++v446;
                              }
                              while (v447 != -1 && v447 != v438);
                            }
                            *((_QWORD *)v435 + v443) = v438;
                          }
                          ++v436;
                        }
                        while (v436 != 8);
                        v284 = *v281;
                        *v286 = v435;
                        v282 = 64;
                        goto LABEL_434;
                      }
                    }
                    goto LABEL_234;
                  }
                  v285 = 0;
LABEL_232:
                  *(_QWORD *)(v280 + 72 * v279 + 8 * v285 + 8) = v273;
                }
                else
                {
LABEL_434:
                  if (3 * v282 <= 4 * v284)
                  {
                    v739 = v16;
                    v738 = (2 * v282);
                    v530 = v280 + 72 * v279;
                    v531 = *(_QWORD *)(v530 + 8);
                    v737 = (_QWORD *)(v530 + 8);
                    v449 = (void *)WTF::fastMalloc((WTF *)(8 * v738));
                    memset(v449, 255, 8 * (2 * v282));
                    v539 = v738;
                    *v283 = v738;
                    if (v282)
                    {
                      v540 = v539;
                      v541 = 0;
                      v542 = v540 - 1;
                      do
                      {
                        v543 = *(_QWORD *)(v531 + 8 * v541);
                        if (v543 != -1)
                        {
                          v544 = (~(v543 << 32) + v543) ^ ((unint64_t)(~(v543 << 32) + v543) >> 22);
                          v545 = 9 * ((v544 + ~(v544 << 13)) ^ ((v544 + ~(v544 << 13)) >> 8));
                          v546 = (v545 ^ (v545 >> 15)) + ~((v545 ^ (v545 >> 15)) << 27);
                          v547 = v542 & ((v546 >> 31) ^ v546);
                          v548 = *((_QWORD *)v449 + v547);
                          if (v548 != -1 && v548 != v543)
                          {
                            v550 = 1;
                            do
                            {
                              v547 = ((_DWORD)v547 + v550) & v542;
                              v551 = *((_QWORD *)v449 + v547);
                              ++v550;
                            }
                            while (v551 != -1 && v551 != v543);
                          }
                          *((_QWORD *)v449 + v547) = v543;
                        }
                        ++v541;
                      }
                      while (v541 != v282);
                    }
                    WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
                    v282 = *v283;
                    *v737 = v449;
                    v16 = v739;
                  }
                  else
                  {
                    v449 = *(void **)(v280 + 72 * v279 + 8);
                  }
                  v450 = (~(v273 << 32) + v273) ^ ((unint64_t)(~(v273 << 32) + v273) >> 22);
                  v451 = 9 * ((v450 + ~(v450 << 13)) ^ ((v450 + ~(v450 << 13)) >> 8));
                  v452 = (v451 ^ (v451 >> 15)) + ~((v451 ^ (v451 >> 15)) << 27);
                  v453 = (v282 - 1) & ((v452 >> 31) ^ v452);
                  v454 = *((_QWORD *)v449 + v453);
                  if (v454 != -1 && v454 != v273)
                  {
                    v456 = 1;
                    do
                    {
                      v453 = ((_DWORD)v453 + v456) & (v282 - 1);
                      v454 = *((_QWORD *)v449 + v453);
                      ++v456;
                    }
                    while (v454 != -1 && v454 != v273);
                  }
                  if (v454 == v273)
                    goto LABEL_234;
                  *((_QWORD *)v449 + v453) = v273;
                  v284 = *v281;
                }
                *v281 = v284 + 1;
LABEL_234:
                *(_QWORD *)(a1 + 7320) = v265;
                LODWORD(v24) = 2;
                v10 = v740;
                v13 = v741;
                v8 = v742;
                goto LABEL_44;
              }
              LODWORD(a3) = 0;
LABEL_175:
              v223 = JSC::Lexer<unsigned char>::scanRegExp(*(unsigned int **)(a1 + 7288), v11, a3, a4, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v223;
              if (v223 != 16)
              {
                if (v223 != 20 && (v223 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Invalid regular expression");
                  goto LABEL_34;
                }
LABEL_33:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                goto LABEL_34;
              }
              v224 = *(uint64_t **)(a1 + 7376);
              v225 = *(uint64_t **)(a1 + 7384);
              v226 = *(_DWORD *)(a1 + 7400);
              v227 = *(_DWORD *)(a1 + 7412);
              v228 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v226;
              *(_DWORD *)(a1 + 7448) = v227;
              *(_DWORD *)(a1 + 7452) = v228;
              v229 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v229 + 4) = v226;
              v230 = *(_DWORD *)(a1 + 12);
              if (!v230)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C694);
              }
              v231 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v230 - 1) + 9) & 1;
              *(_BYTE *)(v229 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v229, (uint64_t)v11, 0, v231, a5, a6, a7, a8);
              v232 = *v224;
              if (*v224)
              {
                v233 = *(const WTF::StringImpl **)(v232 + 8);
                v234 = *(unsigned int *)(v232 + 4);
                v235 = (unint64_t)((*(_DWORD *)(v232 + 16) >> 2) & 1) << 32;
              }
              else
              {
                v233 = 0;
                v234 = 0;
                v235 = 0x100000000;
              }
              v236 = *v225;
              if (!*v225)
                goto LABEL_182;
              v237 = *(unsigned int *)(v236 + 4);
              if ((_DWORD)v237)
              {
                v319 = *(_DWORD *)(v236 + 16);
                v320 = *(unsigned __int16 **)(v236 + 8);
                LODWORD(v236) = 0;
                if ((v319 & 4) != 0)
                {
                  do
                  {
                    v322 = *(unsigned __int8 *)v320;
                    v320 = (unsigned __int16 *)((char *)v320 + 1);
                    v321 = v322;
                    switch(v322)
                    {
                      case 'd':
                        if ((v236 & 1) != 0)
                          goto LABEL_187;
                        v323 = 1;
                        break;
                      case 'e':
                      case 'f':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'l':
                        goto LABEL_187;
                      case 'g':
                        if ((v236 & 2) != 0)
                          goto LABEL_187;
                        v323 = 2;
                        break;
                      case 'i':
                        if ((v236 & 4) != 0)
                          goto LABEL_187;
                        v323 = 4;
                        break;
                      case 'm':
                        if ((v236 & 8) != 0)
                          goto LABEL_187;
                        v323 = 8;
                        break;
                      default:
                        switch(v321)
                        {
                          case 's':
                            if ((v236 & 0x10) != 0)
                              goto LABEL_187;
                            v323 = 16;
                            break;
                          case 'u':
                            if ((v236 & 0x20) != 0)
                              goto LABEL_187;
                            v323 = 32;
                            break;
                          case 'v':
                            if ((v236 & 0x40) != 0)
                              goto LABEL_187;
                            v323 = 64;
                            break;
                          case 'y':
                            if ((v236 & 0x80) != 0)
                              goto LABEL_187;
                            v323 = 128;
                            break;
                          default:
                            goto LABEL_187;
                        }
                        break;
                    }
                    LODWORD(v236) = v323 | v236;
                    --v237;
                  }
                  while (v237);
                }
                else
                {
                  do
                  {
                    v599 = *v320++;
                    v598 = v599;
                    switch(v599)
                    {
                      case 'd':
                        if ((v236 & 1) != 0)
                          goto LABEL_187;
                        v600 = 1;
                        break;
                      case 'e':
                      case 'f':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'l':
                        goto LABEL_187;
                      case 'g':
                        if ((v236 & 2) != 0)
                          goto LABEL_187;
                        v600 = 2;
                        break;
                      case 'i':
                        if ((v236 & 4) != 0)
                          goto LABEL_187;
                        v600 = 4;
                        break;
                      case 'm':
                        if ((v236 & 8) != 0)
                          goto LABEL_187;
                        v600 = 8;
                        break;
                      default:
                        switch(v598)
                        {
                          case 's':
                            if ((v236 & 0x10) != 0)
                              goto LABEL_187;
                            v600 = 16;
                            break;
                          case 'u':
                            if ((v236 & 0x20) != 0)
                              goto LABEL_187;
                            v600 = 32;
                            break;
                          case 'v':
                            if ((v236 & 0x40) != 0)
                              goto LABEL_187;
                            v600 = 64;
                            break;
                          case 'y':
                            if ((v236 & 0x80) != 0)
                              goto LABEL_187;
                            v600 = 128;
                            break;
                          default:
                            goto LABEL_187;
                        }
                        break;
                    }
                    LODWORD(v236) = v600 | v236;
                    --v237;
                  }
                  while (v237);
                }
                if ((v236 & 0x20) != 0 && (v236 & 0x40) != 0)
                  goto LABEL_187;
              }
              else
              {
                LODWORD(v236) = 0;
              }
LABEL_182:
              if ((v236 & 0x20) != 0)
                v238 = 1;
              else
                v238 = (v236 >> 5) & 2;
              if (!JSC::Yarr::parse<JSC::Yarr::SyntaxChecker>((WTF::AtomStringImpl *)v746, v233, v235 | v234, v238, 0xFFFFFFFFLL, 1, a7, a8))
              {
                LODWORD(v24) = 10;
LABEL_44:
                v742 = v8;
                if (!v16)
                {
LABEL_45:
                  v63 = 0;
                  goto LABEL_46;
                }
                if ((v24 - 1) > 1 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
                {
                  v63 = 0;
                  v16 = 0;
                  goto LABEL_46;
                }
                v586 = *(_DWORD *)v11;
                if (*(_DWORD *)v11 == 12)
                {
LABEL_611:
                  v587 = *(_DWORD **)(a1 + 7496);
                  if (v587)
                    *v587 = 2;
                  goto LABEL_613;
                }
                v63 = 0;
                v16 = 1;
                if (v586 > 544)
                {
                  if (v586 == 545)
                    goto LABEL_757;
                  if (v586 == 546)
                    goto LABEL_611;
                  if (v586 != 1048592)
                    goto LABEL_46;
                  v645 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
                  v646 = **(_QWORD **)(a1 + 7376);
                  if (v646 != v645[41])
                  {
LABEL_756:
                    if (v646 != v645[62])
                    {
LABEL_761:
                      if (v646 != v645[16])
                        goto LABEL_45;
                      goto LABEL_611;
                    }
LABEL_757:
                    v647 = *(_DWORD *)(a1 + 12);
                    if (!v647)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E7C91CLL);
                    }
                    v648 = v647 - 1;
                    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v648 + 9) & 1) == 0
                      && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v648 + 11) & 2) == 0)
                    {
                      goto LABEL_611;
                    }
                    if (v586 != 1048592)
                      goto LABEL_45;
                    v645 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
                    v646 = **(_QWORD **)(a1 + 7376);
                    goto LABEL_761;
                  }
                }
                else if (v586 != 544)
                {
                  goto LABEL_46;
                }
                v644 = *(_DWORD *)(a1 + 12);
                if (!v644)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C8E4);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v644 - 1) + 9) & 1) == 0)
                  goto LABEL_611;
                if (v586 != 1048592)
                  goto LABEL_45;
                v645 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
                v646 = **(_QWORD **)(a1 + 7376);
                goto LABEL_756;
              }
              v232 = *v224;
LABEL_187:
              if (v232)
              {
                a2 = *(WTF::AtomStringImpl **)(v232 + 8);
                a3 = *(unsigned int *)(v232 + 4) | ((unint64_t)((*(_DWORD *)(v232 + 16) >> 2) & 1) << 32);
              }
              else
              {
                a2 = 0;
                a3 = 0x100000000;
              }
              v239 = *v225;
              if (*v225 && (v240 = *(unsigned int *)(v239 + 4), (_DWORD)v240))
              {
                v355 = *(unsigned __int16 **)(v239 + 8);
                if ((*(_DWORD *)(v239 + 16) & 4) != 0)
                {
                  v241 = 0;
                  v243 = 28;
                  do
                  {
                    v357 = *(unsigned __int8 *)v355;
                    v355 = (unsigned __int16 *)((char *)v355 + 1);
                    v356 = v357;
                    switch(v357)
                    {
                      case 'd':
                        if ((v241 & 1) != 0)
                          goto LABEL_678;
                        v358 = 1;
                        break;
                      case 'e':
                      case 'f':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'l':
                        goto LABEL_196;
                      case 'g':
                        if ((v241 & 2) != 0)
                          goto LABEL_196;
                        v358 = 2;
                        break;
                      case 'i':
                        if ((v241 & 4) != 0)
                          goto LABEL_196;
                        v358 = 4;
                        break;
                      case 'm':
                        if ((v241 & 8) != 0)
                          goto LABEL_196;
                        v358 = 8;
                        break;
                      default:
                        switch(v356)
                        {
                          case 's':
                            if ((v241 & 0x10) != 0)
                              goto LABEL_678;
                            v358 = 16;
                            goto LABEL_312;
                          case 'u':
                            if ((v241 & 0x20) != 0)
                              goto LABEL_678;
                            v358 = 32;
                            goto LABEL_312;
                          case 'v':
                            if ((v241 & 0x40) != 0)
                              goto LABEL_678;
                            v358 = 64;
                            goto LABEL_312;
                          case 'y':
                            if ((v241 & 0x80) != 0)
                              goto LABEL_678;
                            v358 = 128;
                            goto LABEL_312;
                          default:
                            goto LABEL_196;
                        }
                        goto LABEL_196;
                    }
LABEL_312:
                    v241 |= v358;
                    --v240;
                  }
                  while (v240);
                }
                else
                {
                  v241 = 0;
                  v243 = 28;
                  do
                  {
                    v603 = *v355++;
                    v602 = v603;
                    switch(v603)
                    {
                      case 'd':
                        if ((v241 & 1) != 0)
                          goto LABEL_678;
                        v604 = 1;
                        break;
                      case 'e':
                      case 'f':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'l':
                        goto LABEL_196;
                      case 'g':
                        if ((v241 & 2) != 0)
                          goto LABEL_196;
                        v604 = 2;
                        break;
                      case 'i':
                        if ((v241 & 4) != 0)
                          goto LABEL_196;
                        v604 = 4;
                        break;
                      case 'm':
                        if ((v241 & 8) != 0)
                          goto LABEL_196;
                        v604 = 8;
                        break;
                      default:
                        switch(v602)
                        {
                          case 's':
                            if ((v241 & 0x10) != 0)
                              goto LABEL_678;
                            v604 = 16;
                            goto LABEL_672;
                          case 'u':
                            if ((v241 & 0x20) != 0)
                              goto LABEL_678;
                            v604 = 32;
                            goto LABEL_672;
                          case 'v':
                            if ((v241 & 0x40) != 0)
                              goto LABEL_678;
                            v604 = 64;
                            goto LABEL_672;
                          case 'y':
                            if ((v241 & 0x80) != 0)
                              goto LABEL_678;
                            v604 = 128;
                            goto LABEL_672;
                          default:
                            goto LABEL_196;
                        }
                        goto LABEL_196;
                    }
LABEL_672:
                    v241 |= v604;
                    --v240;
                  }
                  while (v240);
                }
                if ((v241 & 0x20) != 0 && (v241 & 0x40) != 0)
                {
LABEL_678:
                  v243 = 28;
LABEL_196:
                  v244 = 2 * v243;
                  v245 = (_BYTE *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v244];
                  if (v245)
                  {
                    v246 = strlen((const char *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v244]);
                    if (v246)
                    {
                      v247 = v246;
                      if (v246 >> 31)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E7C750);
                      }
                      v248 = (int *)WTF::fastCompactMalloc((WTF *)(v246 + 20));
                      v249 = v248 + 5;
                      *v248 = 2;
                      v248[1] = v247;
                      *((_QWORD *)v248 + 1) = v248 + 5;
                      v248[4] = 4;
                      if (v247 == 1)
                        *v249 = *v245;
                      else
                        memcpy(v249, v245, v247);
                      v366 = 4;
                    }
                    else
                    {
                      v248 = &WTF::StringImpl::s_emptyAtomString;
                      v365 = WTF::StringImpl::s_emptyAtomString;
                      WTF::StringImpl::s_emptyAtomString += 2;
                      v366 = v365 + 4;
                    }
                    *v248 = v366;
                  }
                  else
                  {
                    v248 = 0;
                  }
                  v367 = *(WTF::StringImpl **)(a1 + 7360);
                  *(_QWORD *)(a1 + 7360) = v248;
                  v368 = v248;
                  if (v367)
                  {
                    if (*(_DWORD *)v367 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v367, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v396, v397, v398, v399, v400, v401, v402, v403);
                      v368 = *(int **)(a1 + 7360);
                    }
                    else
                    {
                      *(_DWORD *)v367 -= 2;
                      v368 = v248;
                    }
                  }
                  if (!v368 || !v368[1])
                  {
                    v369 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v369 = 0x1200000002;
                    *(_QWORD *)(v369 + 8) = "Unparseable script";
                    *(_DWORD *)(v369 + 16) = 4;
                    v370 = *(WTF::StringImpl **)(a1 + 7360);
                    *(_QWORD *)(a1 + 7360) = v369;
                    if (v370)
                    {
                      if (*(_DWORD *)v370 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v370, a2, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v413, v414, v415, v416, v417, v418, v419, v420);
                      }
                      else
                      {
                        *(_DWORD *)v370 -= 2;
                      }
                    }
                  }
                  if (v245)
                  {
                    if (*v248 == 2)
                    {
                      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v248, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v404, v405, v406, v407, v408, v409, v410, v411);
                    }
                    else
                    {
                      *v248 -= 2;
                    }
                  }
                  goto LABEL_34;
                }
              }
              else
              {
                v241 = 0;
              }
              if ((v241 & 0x20) != 0)
                v242 = 1;
              else
                v242 = (v241 >> 5) & 2;
              v243 = JSC::Yarr::parse<JSC::Yarr::SyntaxChecker>((WTF::AtomStringImpl *)v746, a2, a3, v242, 0xFFFFFFFFLL, 1, a7, a8);
              goto LABEL_196;
          }
        }
        a3 = 61;
        switch(v17)
        {
          case 0:
            v25 = *(_DWORD *)(a1 + 7400);
            v26 = *(_DWORD *)(a1 + 7412);
            v27 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v25;
            *(_DWORD *)(a1 + 7448) = v26;
            *(_DWORD *)(a1 + 7452) = v27;
            v28 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v28 + 4) = v25;
            v29 = *(_DWORD *)(a1 + 12);
            if (!v29)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C654);
            }
            v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
            *(_BYTE *)(v28 + 56) = 0;
            v31 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v28, (uint64_t)v11, 0, v30, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v31;
            v38 = *(_DWORD *)(a1 + 7300);
            if (v31 == 1)
            {
              v359 = *(_DWORD *)(a1 + 7400);
              v360 = *(_DWORD *)(a1 + 7412);
              v361 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v359;
              *(_DWORD *)(a1 + 7448) = v360;
              *(_DWORD *)(a1 + 7452) = v361;
              v362 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v362 + 4) = v359;
              v363 = *(_DWORD *)(a1 + 12);
              if (!v363)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C780);
              }
              v364 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v363 - 1) + 9) & 1;
              *(_BYTE *)(v362 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v362, (uint64_t)v11, 0, v364, v34, v35, v36, v37);
              LODWORD(v24) = 11;
              goto LABEL_42;
            }
            v39 = v13;
            v40 = JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::SyntaxChecker>(a1, v8, v32, v33, v34, v35, v36, v37);
            if (!(_WORD)v40)
            {
LABEL_636:
              if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
                goto LABEL_370;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
              goto LABEL_371;
            }
            for (i = (v40 & 0xFF0000) != 0; ; i |= (v52 & 0xFF0000) != 0)
            {
              v42 = *(_DWORD *)v11;
              if (*(_DWORD *)v11 != 6)
                break;
              v43 = *(_DWORD *)(a1 + 7400);
              v44 = *(_DWORD *)(a1 + 7412);
              v45 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v43;
              *(_DWORD *)(a1 + 7448) = v44;
              *(_DWORD *)(a1 + 7452) = v45;
              v46 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v46 + 4) = v43;
              v47 = *(_DWORD *)(a1 + 12);
              if (!v47)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C5FCLL);
              }
              v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 9) & 1;
              *(_BYTE *)(v46 + 56) = 0;
              v49 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v46, (uint64_t)v11, 0, v48, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v49;
              if (v49 == 1)
                goto LABEL_206;
              v52 = JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::SyntaxChecker>(a1, v8, v50, v51, a5, a6, a7, a8);
              if (!(_WORD)v52)
                goto LABEL_636;
              if ((((v52 & 0xFF0000) != 0) & i) == 1)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Attempted to redefine __proto__ property");
                goto LABEL_371;
              }
            }
            if (v42 == 1)
            {
LABEL_206:
              v250 = *(_DWORD *)(a1 + 7400);
              v251 = *(_DWORD *)(a1 + 7412);
              v252 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v250;
              *(_DWORD *)(a1 + 7448) = v251;
              *(_DWORD *)(a1 + 7452) = v252;
              v253 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v253 + 4) = v250;
              v254 = *(_DWORD *)(a1 + 12);
              if (!v254)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C6B4);
              }
              v255 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v254 - 1) + 9) & 1;
              *(_BYTE *)(v253 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v253, (uint64_t)v11, 0, v255, a5, a6, a7, a8);
              LODWORD(v24) = 11;
              goto LABEL_208;
            }
            if (v42 == 20 || (v42 & 0x100000) != 0)
              goto LABEL_370;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, "}", "object literal");
            goto LABEL_409;
          case 2:
            v182 = *(_DWORD *)(a1 + 7400);
            v183 = *(_DWORD *)(a1 + 7412);
            v184 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v182;
            *(_DWORD *)(a1 + 7448) = v183;
            *(_DWORD *)(a1 + 7452) = v184;
            v185 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v185 + 4) = v182;
            v186 = *(_DWORD *)(a1 + 12);
            if (!v186)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C67CLL);
            }
            v187 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v186 - 1) + 9) & 1;
            *(_BYTE *)(v185 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v185, (uint64_t)v11, 0, v187, a5, a6, a7, a8);
            v188 = *(_DWORD *)(a1 + 7300);
            if ((unint64_t)&v732 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
                v10[6].i8[4] = 1;
              }
            }
            else
            {
              *(_DWORD *)v746 = 0;
              *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
              *(_QWORD *)&v746[16] = a1;
              *(_QWORD *)(a1 + 7496) = v746;
              v189 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
              *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
              v190 = *(_DWORD *)(a1 + 7368);
              if (v189)
              {
                if (v190 != 6)
                {
                  LODWORD(v24) = v189;
                  goto LABEL_150;
                }
                v325 = *(_DWORD *)(a1 + 7400);
                v326 = *(_DWORD *)(a1 + 7412);
                v327 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v325;
                *(_DWORD *)(a1 + 7448) = v326;
                *(_DWORD *)(a1 + 7452) = v327;
                v328 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v328 + 4) = v325;
                v329 = *(_DWORD *)(a1 + 12);
                if (!v329)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C758);
                }
                v330 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v329 - 1) + 9) & 1;
                *(_BYTE *)(v328 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v328, (uint64_t)v11, 0, v330, a5, a6, a7, a8);
                *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
                *(_DWORD *)v746 = 0;
                *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v746[16] = a1;
                *(_QWORD *)(a1 + 7496) = v746;
                v331 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
                *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
                if (v331)
                {
                  do
                  {
                    v190 = *(_DWORD *)v11;
                    if (*(_DWORD *)v11 != 6)
                    {
                      LODWORD(v24) = 47;
                      goto LABEL_150;
                    }
                    v332 = *(_DWORD *)(a1 + 7400);
                    v333 = *(_DWORD *)(a1 + 7412);
                    v334 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v332;
                    *(_DWORD *)(a1 + 7448) = v333;
                    *(_DWORD *)(a1 + 7452) = v334;
                    v335 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v335 + 4) = v332;
                    v336 = *(_DWORD *)(a1 + 12);
                    if (!v336)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E7C748);
                    }
                    v337 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v336 - 1) + 9) & 1;
                    *(_BYTE *)(v335 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v335, (uint64_t)v11, 2u, v337, a5, a6, a7, a8);
                    *(_DWORD *)v746 = 0;
                    *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                    *(_QWORD *)&v746[16] = a1;
                    *(_QWORD *)(a1 + 7496) = v746;
                    v338 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
                    *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
                  }
                  while (v338);
                }
                if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
                  goto LABEL_469;
                }
LABEL_763:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                goto LABEL_469;
              }
              if (v190 == 20 || (v190 & 0x100000) != 0)
                goto LABEL_763;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
            }
LABEL_469:
            LODWORD(v24) = 0;
            v190 = *(_DWORD *)v11;
LABEL_150:
            if (v190 == 3)
            {
              v191 = *(_DWORD *)(a1 + 7400);
              v192 = *(_DWORD *)(a1 + 7412);
              v193 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v191;
              *(_DWORD *)(a1 + 7448) = v192;
              *(_DWORD *)(a1 + 7452) = v193;
              v194 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v194 + 4) = v191;
              v195 = *(_DWORD *)(a1 + 12);
              if (!v195)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C6A4);
              }
              v196 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v195 - 1) + 9) & 1;
              *(_BYTE *)(v194 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v194, (uint64_t)v11, 0, v196, a5, a6, a7, a8);
            }
            else
            {
              if (v190 != 20 && (v190 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(a1);
              }
              else
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              }
              LODWORD(v24) = 0;
            }
            v10->i32[0] = v188;
LABEL_43:
            if ((_DWORD)v24)
              goto LABEL_44;
LABEL_34:
            if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse base expression");
              goto LABEL_38;
            }
            goto LABEL_613;
          case 4:
            v197 = *(_DWORD *)(a1 + 7400);
            v198 = *(_DWORD *)(a1 + 7412);
            v199 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v197;
            *(_DWORD *)(a1 + 7448) = v198;
            *(_DWORD *)(a1 + 7452) = v199;
            v200 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v200 + 4) = v197;
            v201 = *(_DWORD *)(a1 + 12);
            if (!v201)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C684);
            }
            v202 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v201 - 1) + 9) & 1;
            *(_BYTE *)(v200 + 56) = 0;
            v203 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v200, (uint64_t)v11, 2u, v202, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v203;
            v38 = *(_DWORD *)(a1 + 7300);
            while (2)
            {
              switch(v203)
              {
                case 5:
                  v304 = *(_DWORD *)(a1 + 7400);
                  v305 = *(_DWORD *)(a1 + 7412);
                  v306 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v304;
                  *(_DWORD *)(a1 + 7448) = v305;
                  *(_DWORD *)(a1 + 7452) = v306;
                  v259 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v259 + 4) = v304;
                  v260 = *(_DWORD *)(a1 + 12);
                  if (!v260)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E79E74);
                  }
                  goto LABEL_212;
                case 37:
                  v507 = *(_DWORD *)(a1 + 7400);
                  v508 = *(_DWORD *)(a1 + 7412);
                  v509 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v507;
                  *(_DWORD *)(a1 + 7448) = v508;
                  *(_DWORD *)(a1 + 7452) = v509;
                  v510 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v510 + 4) = v507;
                  v511 = *(_DWORD *)(a1 + 12);
                  if (!v511)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7C848);
                  }
                  v39 = v13;
                  v512 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v511 - 1) + 9) & 1;
                  *(_BYTE *)(v510 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v510, (uint64_t)v11, 0, v512, a5, a6, a7, a8);
                  *(_DWORD *)v746 = 0;
                  *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v746[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v746;
                  v513 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
                  v205 = *(_DWORD **)&v746[8];
                  if (!v513)
                  {
LABEL_507:
                    if (v205)
                      *v205 = *(_DWORD *)v746;
                    *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = v205;
                    if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
                      goto LABEL_370;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
LABEL_371:
                    LODWORD(v24) = 0;
LABEL_208:
                    v13 = v39;
                    goto LABEL_42;
                  }
                  break;
                case 6:
                  v609 = *(_DWORD *)(a1 + 7400);
                  v610 = *(_DWORD *)(a1 + 7412);
                  v611 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v609;
                  *(_DWORD *)(a1 + 7448) = v610;
                  *(_DWORD *)(a1 + 7452) = v611;
                  v612 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v612 + 4) = v609;
                  v613 = *(_DWORD *)(a1 + 12);
                  if (!v613)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7C604);
                  }
                  v614 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v613 - 1) + 9) & 1;
                  *(_BYTE *)(v612 + 56) = 0;
                  v203 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v612, (uint64_t)v11, 2u, v614, a5, a6, a7, a8);
                  *(_DWORD *)(a1 + 7368) = v203;
                  continue;
                default:
                  *(_DWORD *)v746 = 0;
                  *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v746[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v746;
                  v204 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
                  v205 = *(_DWORD **)&v746[8];
                  if (!v204)
                  {
                    if (*(_QWORD *)&v746[8])
                      **(_DWORD **)&v746[8] = *(_DWORD *)v746;
                    *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = v205;
                    if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
                      goto LABEL_409;
                    }
                    goto LABEL_416;
                  }
                  v39 = v13;
                  break;
              }
              break;
            }
            for (*(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = v205; ; *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = v205)
            {
              v206 = *(_DWORD *)v11;
              if (*(_DWORD *)v11 != 6)
                break;
              v207 = *(_DWORD *)(a1 + 7400);
              v208 = *(_DWORD *)(a1 + 7412);
              v209 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v207;
              *(_DWORD *)(a1 + 7448) = v208;
              *(_DWORD *)(a1 + 7452) = v209;
              v210 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v210 + 4) = v207;
              v211 = *(_DWORD *)(a1 + 12);
              if (!v211)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C5D8);
              }
              v212 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v211 - 1) + 9) & 1;
              *(_BYTE *)(v210 + 56) = 0;
              v213 = (uint64_t)v11;
              for (j = 2; ; j = 0)
              {
                v215 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v210, v213, j, v212, a5, a6, a7, a8);
                *(_DWORD *)v11 = v215;
                if (v215 == 37)
                  break;
                if (v215 == 5)
                {
                  v496 = *(_DWORD *)(a1 + 7400);
                  v497 = *(_DWORD *)(a1 + 7412);
                  v498 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v496;
                  *(_DWORD *)(a1 + 7448) = v497;
                  *(_DWORD *)(a1 + 7452) = v498;
                  v499 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v499 + 4) = v496;
                  v500 = *(_DWORD *)(a1 + 12);
                  if (!v500)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7C840);
                  }
                  v501 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v500 - 1) + 9) & 1;
                  *(_BYTE *)(v499 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v499, (uint64_t)v11, 0, v501, a5, a6, a7, a8);
                  LODWORD(v24) = 30;
                  goto LABEL_208;
                }
                if (v215 != 6)
                {
                  *(_DWORD *)v746 = 0;
                  *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v746[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v746;
                  v216 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
                  v205 = *(_DWORD **)&v746[8];
                  if (v216)
                    goto LABEL_169;
                  if (*(_QWORD *)&v746[8])
                    **(_DWORD **)&v746[8] = *(_DWORD *)v746;
                  *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = v205;
                  if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
                    goto LABEL_371;
                  }
LABEL_370:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  goto LABEL_371;
                }
                v605 = *(_DWORD *)(a1 + 7400);
                v606 = *(_DWORD *)(a1 + 7412);
                v607 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v605;
                *(_DWORD *)(a1 + 7448) = v606;
                *(_DWORD *)(a1 + 7452) = v607;
                v210 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v210 + 4) = v605;
                v608 = *(_DWORD *)(a1 + 12);
                if (!v608)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C5D0);
                }
                v212 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v608 - 1) + 9) & 1;
                *(_BYTE *)(v210 + 56) = 0;
                v213 = (uint64_t)v11;
              }
              v483 = *(_DWORD *)(a1 + 7400);
              v484 = *(_DWORD *)(a1 + 7412);
              v485 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v483;
              *(_DWORD *)(a1 + 7448) = v484;
              *(_DWORD *)(a1 + 7452) = v485;
              v486 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v486 + 4) = v483;
              v487 = *(_DWORD *)(a1 + 12);
              if (!v487)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C6ACLL);
              }
              v488 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v487 - 1) + 9) & 1;
              *(_BYTE *)(v486 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v486, (uint64_t)v11, 0, v488, a5, a6, a7, a8);
              *(_DWORD *)v746 = 0;
              *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
              *(_QWORD *)&v746[16] = a1;
              *(_QWORD *)(a1 + 7496) = v746;
              v489 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v8, v746);
              v205 = *(_DWORD **)&v746[8];
              if (!v489)
                goto LABEL_507;
LABEL_169:
              ;
            }
            if (v206 == 5)
            {
              v256 = *(_DWORD *)(a1 + 7400);
              v257 = *(_DWORD *)(a1 + 7412);
              v258 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v256;
              *(_DWORD *)(a1 + 7448) = v257;
              *(_DWORD *)(a1 + 7452) = v258;
              v259 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v259 + 4) = v256;
              v260 = *(_DWORD *)(a1 + 12);
              if (!v260)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C6C4);
              }
              v13 = v39;
LABEL_212:
              v261 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v260 - 1) + 9) & 1;
              *(_BYTE *)(v259 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v259, (uint64_t)v11, 0, v261, a5, a6, a7, a8);
              LODWORD(v24) = 30;
              goto LABEL_42;
            }
            v13 = v39;
            if (v206 == 37)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "The '...' operator should come before a target expression");
              goto LABEL_409;
            }
            if (v206 != 20 && (v206 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected either a closing ']' or a ',' following an array element");
              goto LABEL_409;
            }
LABEL_416:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_409:
            LODWORD(v24) = 0;
LABEL_42:
            *(_DWORD *)(a1 + 7300) = v38;
            goto LABEL_43;
          case 8:
            v154 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::SyntaxChecker>(a1, v8, 1, a4, a5, a6, a7, a8);
            goto LABEL_173;
          case 9:
            v170 = *(_DWORD *)(a1 + 7400);
            v171 = *(_DWORD *)(a1 + 7412);
            v172 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v170;
            *(_DWORD *)(a1 + 7448) = v171;
            *(_DWORD *)(a1 + 7452) = v172;
            v173 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v173 + 4) = v170;
            v174 = *(_DWORD *)(a1 + 12);
            if (!v174)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C66CLL);
            }
            v175 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v174 - 1) + 9) & 1;
            *(_BYTE *)(v173 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v173, (uint64_t)v11, 0, v175, a5, a6, a7, a8);
            LODWORD(v24) = 3;
            goto LABEL_44;
          case 10:
            v217 = *(_DWORD *)(a1 + 7400);
            v218 = *(_DWORD *)(a1 + 7412);
            v219 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v217;
            *(_DWORD *)(a1 + 7448) = v218;
            *(_DWORD *)(a1 + 7452) = v219;
            v220 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v220 + 4) = v217;
            v221 = *(_DWORD *)(a1 + 12);
            if (!v221)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C68CLL);
            }
            v222 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v221 - 1) + 9) & 1;
            *(_BYTE *)(v220 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v220, (uint64_t)v11, 0, v222, a5, a6, a7, a8);
            LODWORD(v24) = 4;
            goto LABEL_44;
          case 11:
            v176 = *(_DWORD *)(a1 + 7400);
            v177 = *(_DWORD *)(a1 + 7412);
            v178 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v176;
            *(_DWORD *)(a1 + 7448) = v177;
            *(_DWORD *)(a1 + 7452) = v178;
            v179 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v179 + 4) = v176;
            v180 = *(_DWORD *)(a1 + 12);
            if (!v180)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C674);
            }
            v181 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v180 - 1) + 9) & 1;
            *(_BYTE *)(v179 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v179, (uint64_t)v11, 0, v181, a5, a6, a7, a8);
            LODWORD(v24) = 6;
            goto LABEL_44;
          case 12:
            v166 = *(_DWORD *)(a1 + 12);
            if (!v166)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C664);
            }
            v56 = v166 - 1;
            v57 = *(_QWORD *)a1;
            v167 = *(uint64_t **)(a1 + 7376);
            v168 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v56 + 12) & 0x10) != 0)
            {
              v169 = *v167;
              if (*v167 == *(_QWORD *)(v168 + 880))
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
                goto LABEL_34;
              }
            }
            else
            {
              v169 = *v167;
            }
            if (v169 != *(_QWORD *)(v168 + 896) || v10[10].i8[4])
            {
              if (v10[5].i8[5] && v169 == *(_QWORD *)(v168 + 880))
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot reference 'arguments' in class field initializer");
                goto LABEL_34;
              }
              goto LABEL_219;
            }
            v553 = v13;
            v554 = *(_DWORD *)(a1 + 7400);
            v555 = *(_DWORD *)(a1 + 7412);
            v556 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v554;
            *(_DWORD *)(a1 + 7448) = v555;
            *(_DWORD *)(a1 + 7452) = v556;
            v557 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v557 + 4) = v554;
            v558 = *(_BYTE *)(v57 + 720 * v56 + 9) & 1;
            *(_BYTE *)(v557 + 56) = 0;
            v559 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v557, (uint64_t)v11, 0, v558, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v559;
            if (v559 == 523)
            {
              v560 = *(_QWORD *)(a1 + 7288);
              if (!*(_BYTE *)(v560 + 56))
              {
                v561 = *(_DWORD *)(a1 + 7400);
                v562 = *(_DWORD *)(a1 + 7412);
                v563 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v561;
                *(_DWORD *)(a1 + 7448) = v562;
                *(_DWORD *)(a1 + 7452) = v563;
                *(_DWORD *)(v560 + 4) = v561;
                v564 = *(_DWORD *)(a1 + 12);
                if (!v564)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7C858);
                }
                v565 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v564 - 1) + 9) & 1;
                *(_BYTE *)(v560 + 56) = 0;
                v570 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v560, (uint64_t)v11, 0, v565, a5, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v570;
                if (v570 == 191488)
                {
                  v571 = *(_DWORD *)(a1 + 7400);
                  v572 = *(_DWORD *)(a1 + 7412);
                  v573 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v571;
                  *(_DWORD *)(a1 + 7448) = v572;
                  *(_DWORD *)(a1 + 7452) = v573;
                  v574 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v574 + 4) = v571;
                  v575 = *(_DWORD *)(a1 + 12);
                  if (!v575)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7C860);
                  }
                  v576 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v575 - 1) + 9) & 1;
                  *(_BYTE *)(v574 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v574, (uint64_t)v11, 0, v576, v566, v567, v568, v569);
                  v577 = 16;
                }
                else
                {
                  v577 = 9;
                }
                v578 = v10[21].i8[6];
                v10[21].i8[6] = v577;
                v747 = 0u;
                *(_OWORD *)&v746[8] = 0u;
                *(_QWORD *)v746 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
                if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, v8, 0, 0, 0, 1, (uint64_t)v746, 0) & 1) != 0)
                {
                  LODWORD(v24) = 12;
                }
                else
                {
                  if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
                  {
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  }
                  else if (!*(_QWORD *)(a1 + 7360))
                  {
                    v601 = "Cannot parse async function expression";
                    if (v570 == 191488)
                      v601 = "Cannot parse async generator function expression";
                    *(_QWORD *)&v743 = v601;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 1, (const char **)&v743);
                  }
                  LODWORD(v24) = 0;
                }
                v10[21].i8[6] = v578;
                v13 = v553;
                goto LABEL_43;
              }
            }
            else if (v559 == 38)
            {
              goto LABEL_34;
            }
            v579 = *(_DWORD *)(a1 + 12);
            if (!v579)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C850);
            }
            JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v579 - 1), *v167, 0);
            *(_QWORD *)(a1 + 7320) = v167;
            LODWORD(v24) = 2;
            goto LABEL_44;
          case 14:
            v160 = *(_DWORD *)(a1 + 7400);
            v161 = *(_DWORD *)(a1 + 7412);
            v162 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v160;
            *(_DWORD *)(a1 + 7448) = v161;
            *(_DWORD *)(a1 + 7452) = v162;
            v163 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v163 + 4) = v160;
            v164 = *(_DWORD *)(a1 + 12);
            if (!v164)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C65CLL);
            }
            v165 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v164 - 1) + 9) & 1;
            *(_BYTE *)(v163 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v163, (uint64_t)v11, 0, v165, a5, a6, a7, a8);
            LODWORD(v24) = 5;
            goto LABEL_44;
          case 25:
            goto LABEL_175;
          default:
            goto LABEL_33;
        }
      }
      v742 = v8;
      v615 = *(_DWORD *)(a1 + 7400);
      v616 = *(_DWORD *)(a1 + 7412);
      v617 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v615;
      *(_DWORD *)(a1 + 7448) = v616;
      *(_DWORD *)(a1 + 7452) = v617;
      v618 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v618 + 4) = v615;
      v619 = *(_DWORD *)(a1 + 12);
      if (!v619)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C894);
      }
      v620 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v619 - 1) + 9) & 1;
      *(_BYTE *)(v618 + 56) = 0;
      v621 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v618, (uint64_t)v11, 0, v620, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v621;
      if (v621 == 19)
      {
        v622 = *(_DWORD *)(a1 + 7400);
        v623 = *(_DWORD *)(a1 + 7412);
        v624 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v622;
        *(_DWORD *)(a1 + 7448) = v623;
        *(_DWORD *)(a1 + 7452) = v624;
        v625 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v625 + 4) = v622;
        v626 = *(_DWORD *)(a1 + 12);
        if (!v626)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C89CLL);
        }
        v627 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v626 - 1) + 9) & 1;
        *(_BYTE *)(v625 + 56) = 0;
        v628 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v625, (uint64_t)v11, 0, v627, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v628;
        if (v628 != 12)
          goto LABEL_613;
        v629 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v629 + 48) + 3888) && !v10[10].i8[4])
        {
          if (*(_DWORD *)(a1 + 7480) == 1)
          {
            v694 = *(_DWORD *)(a1 + 12);
            if (!v694)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C92CLL);
            }
            JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v694 - 1), *(_QWORD *)(v629 + 96), 0);
            *(_QWORD *)(a1 + 7320) = v629 + 96;
            v699 = *(_DWORD *)(a1 + 12);
            if (!v699)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C934);
            }
            v700 = *(_QWORD *)a1 + 720 * (v699 - 1);
            *(_DWORD *)(v700 + 10) |= 4u;
            LODWORD(v700) = *(_DWORD *)(a1 + 7400);
            v701 = *(_DWORD *)(a1 + 7412);
            v702 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v700;
            *(_DWORD *)(a1 + 7448) = v701;
            *(_DWORD *)(a1 + 7452) = v702;
            v703 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v703 + 4) = v700;
            v704 = *(_DWORD *)(a1 + 12);
            if (!v704)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C93CLL);
            }
            v705 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v704 - 1) + 9) & 1;
            *(_BYTE *)(v703 + 56) = 0;
            v63 = 0;
            v16 = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v703, (uint64_t)v11, 0, v705, v695, v696, v697, v698);
            LODWORD(v24) = -2147483647;
            goto LABEL_46;
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_38;
          v630 = "import.meta is only valid inside modules";
          v631 = a1;
          v632 = 0;
LABEL_703:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v631, v632, v630);
          goto LABEL_38;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_38;
        v630 = "\"import.\" can only be followed with meta";
LABEL_702:
        v631 = a1;
        v632 = 1;
        goto LABEL_703;
      }
      if (v14)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with import");
        goto LABEL_38;
      }
      if (v621 != 2)
      {
        if (v621 == 20 || (v621 & 0x100000) != 0)
          goto LABEL_613;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_38;
        v630 = "import call expects one or two arguments";
        goto LABEL_702;
      }
      v649 = *(_DWORD *)(a1 + 7400);
      v650 = *(_DWORD *)(a1 + 7412);
      v651 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v649;
      *(_DWORD *)(a1 + 7448) = v650;
      *(_DWORD *)(a1 + 7452) = v651;
      v652 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v652 + 4) = v649;
      v653 = *(_DWORD *)(a1 + 12);
      if (!v653)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C8F4);
      }
      v654 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v653 - 1) + 9) & 1;
      *(_BYTE *)(v652 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v652, (uint64_t)v11, 0, v654, a5, a6, a7, a8);
      v655 = *(_DWORD *)(a1 + 7300);
      v656 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
      v657 = *(_DWORD *)(a1 + 7368);
      if (v656)
      {
        if (v657 != 6)
          goto LABEL_813;
        v658 = *(_DWORD *)(a1 + 7400);
        v659 = *(_DWORD *)(a1 + 7412);
        v660 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v658;
        *(_DWORD *)(a1 + 7448) = v659;
        *(_DWORD *)(a1 + 7452) = v660;
        v661 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v661 + 4) = v658;
        v662 = *(_DWORD *)(a1 + 12);
        if (!v662)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C904);
        }
        v663 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v662 - 1) + 9) & 1;
        *(_BYTE *)(v661 + 56) = 0;
        v664 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v661, (uint64_t)v11, 0, v663, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v664;
        if (v664 == 3)
          goto LABEL_787;
        v685 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
        v657 = *(_DWORD *)(a1 + 7368);
        if (v685)
        {
          if (v657 == 6)
          {
            v686 = *(_DWORD *)(a1 + 7400);
            v687 = *(_DWORD *)(a1 + 7412);
            v688 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v686;
            *(_DWORD *)(a1 + 7448) = v687;
            *(_DWORD *)(a1 + 7452) = v688;
            v689 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v689 + 4) = v686;
            v690 = *(_DWORD *)(a1 + 12);
            if (!v690)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C914);
            }
            v691 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v690 - 1) + 9) & 1;
            *(_BYTE *)(v689 + 56) = 0;
            v657 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v689, (uint64_t)v11, 0, v691, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v657;
          }
LABEL_813:
          if (v657 == 3)
          {
LABEL_787:
            v665 = *(_DWORD *)(a1 + 7400);
            v666 = *(_DWORD *)(a1 + 7412);
            v667 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v665;
            *(_DWORD *)(a1 + 7448) = v666;
            *(_DWORD *)(a1 + 7452) = v667;
            v668 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v668 + 4) = v665;
            v669 = *(_DWORD *)(a1 + 12);
            if (!v669)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C90CLL);
            }
            v670 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v669 - 1) + 9) & 1;
            *(_BYTE *)(v668 + 56) = 0;
            v63 = 0;
            v16 = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v668, (uint64_t)v11, 0, v670, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7300) = v655;
            v13 = 0;
            LODWORD(v24) = 15;
            goto LABEL_46;
          }
          if (v657 != 20 && (v657 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "import call expects one or two arguments");
            goto LABEL_823;
          }
LABEL_822:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_823:
          v24 = 0;
          *(_DWORD *)(a1 + 7300) = v655;
          goto LABEL_95;
        }
      }
      if (v657 != 20 && (v657 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
        goto LABEL_823;
      }
      goto LABEL_822;
    }
    goto LABEL_339;
  }
  v742 = v8;
  v590 = *(_DWORD *)(a1 + 7400);
  v591 = *(_DWORD *)(a1 + 7412);
  v592 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v590;
  *(_DWORD *)(a1 + 7448) = v591;
  *(_DWORD *)(a1 + 7452) = v592;
  v593 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v593 + 4) = v590;
  v594 = *(_DWORD *)(a1 + 12);
  if (!v594)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7C870);
  }
  v595 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v594 - 1) + 9) & 1;
  *(_BYTE *)(v593 + 56) = 0;
  v596 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v593, (uint64_t)v11, 0, v595, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v596;
  if (v596 != 12)
    goto LABEL_613;
  if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2408) || v10[10].i8[4])
  {
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_38;
    v597 = "\"new.\" can only be followed with target";
    goto LABEL_627;
  }
  v671 = *(_DWORD *)(a1 + 12);
  v672 = v671 - 1;
  v673 = v671 - 1;
  while (1)
  {
    v674 = v673;
    if (!v673)
      break;
    if (!v671)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C8FCLL);
    }
    v675 = *(_QWORD *)a1;
    v676 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v673-- + 10) & 0x405400;
    if (v676 == 0x400000)
    {
      v677 = v10[5].i8[5] != 0;
      v678 = v10[29].u8[4];
      if (!v10[29].i8[4])
        goto LABEL_797;
      goto LABEL_916;
    }
  }
  v677 = v10[5].i8[5] != 0;
  if (v10[29].i8[4])
  {
LABEL_916:
    if (v671 <= v674)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C94CLL);
    }
    v675 = *(_QWORD *)a1;
    v678 = *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * v674 + 14) - 1 < 2;
    goto LABEL_797;
  }
  if (!v671)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7C944);
  }
  v674 = 0;
  v678 = 0;
  v675 = *(_QWORD *)a1;
LABEL_797:
  v679 = *(_DWORD *)(v675 + 720 * v672 + 10);
  if ((v678 & 1) == 0 && !v677 && (v679 & 0x100100) == 0)
  {
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_38;
    v637 = "new.target is only valid inside functions or static blocks";
    v638 = a1;
    v639 = 0;
    goto LABEL_735;
  }
  if ((v679 & 0x800) != 0)
  {
    if (v671 <= v674)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C924);
    }
    if ((*(_BYTE *)(v675 + 720 * v674 + 12) & 1) != 0)
      v693 = v678;
    else
      v693 = 1;
    if (((v677 | v693) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "new.target is not valid inside arrow functions in global code");
      goto LABEL_38;
    }
    *(_BYTE *)(v675 + 720 * v672 + 32) |= 0x20u;
  }
  v680 = *(_DWORD *)(a1 + 7400);
  v681 = *(_DWORD *)(a1 + 7412);
  v682 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v680;
  *(_DWORD *)(a1 + 7448) = v681;
  *(_DWORD *)(a1 + 7452) = v682;
  v683 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v683 + 4) = v680;
  --v13;
  v684 = *(_BYTE *)(v675 + 720 * v672 + 9) & 1;
  *(_BYTE *)(v683 + 56) = 0;
  v16 = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v683, (uint64_t)v11, 0, v684, a5, a6, a7, a8);
  LODWORD(v24) = 0x80000000;
LABEL_46:
  v64 = *(_DWORD *)(a1 + 7368);
LABEL_47:
  if (v64 == 39)
  {
    v740 = v10;
    v741 = v13;
    if (v13)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_38;
      v633 = "Cannot call constructor in an optional chain";
      goto LABEL_708;
    }
    if (v63)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use super as the base of an optional chain");
      goto LABEL_38;
    }
    v743 = *(_OWORD *)(a1 + 7296);
    v739 = *(_DWORD *)(a1 + 7316);
    *(_QWORD *)&v746[16] = *(_QWORD *)(a1 + 7336);
    *(_OWORD *)v746 = *(_OWORD *)(a1 + 7320);
    LODWORD(v738) = v740[5].u8[4];
    v461 = v740[5].u8[5];
    v733 = *(int *)(a1 + 7408);
    v462 = *(int *)(a1 + 7404);
    v463 = *(_QWORD *)(a1 + 7288);
    v736 = *(_DWORD *)(v463 + 4);
    LODWORD(v737) = v461;
    v464 = *(_DWORD *)v463;
    v734 = *(unsigned __int8 *)(v463 + 56);
    v735 = v464;
    v465 = *(_DWORD *)(a1 + 7400);
    v466 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v465;
    *(_DWORD *)(a1 + 7448) = v466;
    *(_DWORD *)(a1 + 7452) = v462;
    *(_DWORD *)(v463 + 4) = v465;
    v467 = *(_DWORD *)(a1 + 12);
    if (!v467)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7C4B4);
    }
    v468 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v467 - 1) + 9) & 1;
    *(_BYTE *)(v463 + 56) = 0;
    v64 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v463, (uint64_t)v11, 0, v468, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v64;
    if (v64 > 8 || ((1 << v64) & 0x114) == 0)
    {
      v470 = *(_QWORD *)(a1 + 7288);
      *(_BYTE *)(v470 + 150) = 0;
      v471 = *(WTF::StringImpl **)(v470 + 152);
      *(_QWORD *)(v470 + 152) = 0;
      if (v471)
      {
        if (*(_DWORD *)v471 == 2)
        {
          WTF::StringImpl::~StringImpl(v471, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v514, v515, v516, v517, v518, v519, v520, v521);
        }
        else
        {
          *(_DWORD *)v471 -= 2;
        }
      }
      v472 = *(_QWORD *)(v470 + 88);
      v473 = *(_QWORD *)(v470 + 96);
      v474 = (char *)(v472 + v733);
      *(_QWORD *)(v470 + 80) = v472 + v733;
      *(_QWORD *)(v470 + 112) = v472 + v462;
      *(_DWORD *)(v470 + 20) = 0;
      *(_DWORD *)(v470 + 36) = 0;
      if ((unint64_t)v474 >= v473)
        v475 = 0;
      else
        v475 = *v474;
      *(_BYTE *)(v470 + 176) = v475;
      v476 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v476 = v735;
      *(_BYTE *)(v476 + 56) = v734;
      v477 = *(_DWORD *)(a1 + 7400);
      v478 = *(_DWORD *)(a1 + 7412);
      v479 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v477;
      *(_DWORD *)(a1 + 7448) = v478;
      *(_DWORD *)(a1 + 7452) = v479;
      *(_DWORD *)(v476 + 4) = v477;
      v480 = *(_DWORD *)(a1 + 12);
      if (!v480)
      {
        __break(0xC471u);
        JUMPOUT(0x197E7C4ACLL);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v476, (uint64_t)v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v480 - 1) + 9) & 1, a5, a6, a7, a8);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v736;
      *(_OWORD *)(a1 + 7296) = v743;
      *(_DWORD *)(a1 + 7312) = 0;
      *(_DWORD *)(a1 + 7316) = v739;
      *(_OWORD *)(a1 + 7320) = *(_OWORD *)v746;
      *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v746[16];
      v481 = (uint64_t)v740;
      v740[5].i8[4] = v738;
      *(_BYTE *)(v481 + 45) = (_BYTE)v737;
      v482 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v482)
      {
        if (*(_DWORD *)v482 == 2)
        {
          WTF::StringImpl::~StringImpl(v482, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v522, v523, v524, v525, v526, v527, v528, v529);
        }
        else
        {
          *(_DWORD *)v482 -= 2;
        }
      }
      v64 = 19;
    }
    v65 = v24;
    v10 = v740;
    v13 = v741;
  }
  else
  {
    v65 = 0;
  }
  v66 = v64 - 2;
  while (2)
  {
    switch(v66)
    {
      case 0u:
        if (v63)
        {
          if (v10[5].i8[5])
          {
            if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
              goto LABEL_613;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_38;
            v637 = "super call is not valid in class field initializer context";
            v638 = a1;
            v639 = 1;
LABEL_735:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v638, v639, v637);
            goto LABEL_38;
          }
          ++*(_DWORD *)(a1 + 7304);
          v96 = *(_DWORD *)(a1 + 7300);
          if (v13)
          {
            LODWORD(v741) = *(_DWORD *)(a1 + 7300);
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with super call");
            goto LABEL_620;
          }
LABEL_81:
          v97 = *(_DWORD *)(a1 + 12);
          if (!v97)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7C474);
          }
          v98 = v97 - 1;
          v99 = *(_QWORD *)a1;
          v100 = *(unsigned int *)(*(_QWORD *)a1 + 720 * v98 + 180);
          v101 = *(_DWORD *)(a1 + 7368);
          LODWORD(v741) = v96;
          if (v101 != 2)
          {
            if (v101 != 20 && (v101 & 0x100000) == 0)
            {
              v117 = v10;
              if (!*(_QWORD *)(a1 + 7360))
              {
                v119 = 1;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
                goto LABEL_84;
              }
LABEL_285:
              v119 = 1;
              goto LABEL_84;
            }
LABEL_283:
            v117 = v10;
LABEL_284:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_285;
          }
          v104 = *(_DWORD *)(a1 + 7400);
          v105 = *(_DWORD *)(a1 + 7412);
          v106 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v104;
          *(_DWORD *)(a1 + 7448) = v105;
          *(_DWORD *)(a1 + 7452) = v106;
          v107 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v107 + 4) = v104;
          v108 = *(_BYTE *)(v99 + 720 * v98 + 9) & 1;
          *(_BYTE *)(v107 + 56) = 0;
          v109 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v107, (uint64_t)v11, 2u, v108, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v109;
          if (v109 == 3)
          {
            v262 = *(_DWORD *)(a1 + 7400);
            v263 = *(_DWORD *)(a1 + 7412);
            v264 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v262;
            *(_DWORD *)(a1 + 7448) = v263;
            *(_DWORD *)(a1 + 7452) = v264;
            v115 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v115 + 4) = v262;
            v116 = *(_DWORD *)(a1 + 12);
            if (!v116)
            {
              __break(0xC471u);
              JUMPOUT(0x197E79BACLL);
            }
          }
          else
          {
            if (v109 != 37)
            {
              *(_DWORD *)v746 = 0;
              *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
              *(_QWORD *)&v746[16] = a1;
              *(_QWORD *)(a1 + 7496) = v746;
              v110 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v742, v746);
              *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
              if (v110)
                goto LABEL_101;
LABEL_515:
              v117 = v10;
              if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v119 = 1;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
                  goto LABEL_84;
                }
                goto LABEL_285;
              }
              goto LABEL_284;
            }
            v490 = *(_DWORD *)(a1 + 7400);
            v491 = *(_DWORD *)(a1 + 7412);
            v492 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v490;
            *(_DWORD *)(a1 + 7448) = v491;
            *(_DWORD *)(a1 + 7452) = v492;
            v493 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v493 + 4) = v490;
            v494 = *(_DWORD *)(a1 + 12);
            if (!v494)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C43CLL);
            }
            v495 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v494 - 1) + 9) & 1;
            *(_BYTE *)(v493 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v493, (uint64_t)v11, 0, v495, a5, a6, a7, a8);
            *(_DWORD *)v746 = 0;
            *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v746[16] = a1;
            *(_QWORD *)(a1 + 7496) = v746;
            JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v742, v746);
            *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_515;
LABEL_101:
            v111 = *(_DWORD *)v11;
            if (*(_DWORD *)v11 == 6)
            {
              while (1)
              {
                v719 = *(_DWORD *)(a1 + 7400);
                v720 = *(_DWORD *)(a1 + 7412);
                v721 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v719;
                *(_DWORD *)(a1 + 7448) = v720;
                *(_DWORD *)(a1 + 7452) = v721;
                v722 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v722 + 4) = v719;
                v723 = *(_DWORD *)(a1 + 12);
                if (!v723)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7CBC0);
                }
                v724 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v723 - 1) + 9) & 1;
                *(_BYTE *)(v722 + 56) = 0;
                v725 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v722, (uint64_t)v11, 2u, v724, a5, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v725;
                if (v725 == 3)
                  break;
                if (v725 == 37)
                {
                  v726 = *(_DWORD *)(a1 + 7400);
                  v727 = *(_DWORD *)(a1 + 7412);
                  v728 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v726;
                  *(_DWORD *)(a1 + 7448) = v727;
                  *(_DWORD *)(a1 + 7452) = v728;
                  v729 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v729 + 4) = v726;
                  v730 = *(_DWORD *)(a1 + 12);
                  if (!v730)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E7CBB8);
                  }
                  v731 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v730 - 1) + 9) & 1;
                  *(_BYTE *)(v729 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v729, (uint64_t)v11, 0, v731, a5, a6, a7, a8);
                }
                *(_DWORD *)v746 = 0;
                *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v746[16] = a1;
                *(_QWORD *)(a1 + 7496) = v746;
                JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v742, v746);
                *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
                if (*(_QWORD *)(a1 + 7360))
                {
                  v117 = v10;
                  goto LABEL_285;
                }
                v111 = *(_DWORD *)v11;
                if (*(_DWORD *)v11 != 6)
                {
                  if (v111 != 37)
                    goto LABEL_103;
                  v117 = v10;
                  goto LABEL_993;
                }
              }
            }
            else
            {
              if (v111 == 37)
              {
                v117 = v10;
                if (!*(_QWORD *)(a1 + 7360))
LABEL_993:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
                goto LABEL_285;
              }
LABEL_103:
              if (v111 != 3)
              {
                if (v111 != 20 && (v111 & 0x100000) == 0)
                {
                  v117 = v10;
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                  goto LABEL_285;
                }
                goto LABEL_283;
              }
            }
            v112 = *(_DWORD *)(a1 + 7400);
            v113 = *(_DWORD *)(a1 + 7412);
            v114 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v112;
            *(_DWORD *)(a1 + 7448) = v113;
            *(_DWORD *)(a1 + 7452) = v114;
            v115 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v115 + 4) = v112;
            v116 = *(_DWORD *)(a1 + 12);
            if (!v116)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C434);
            }
          }
          v117 = v10;
          v118 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v116 - 1) + 9) & 1;
          *(_BYTE *)(v115 + 56) = 0;
          v119 = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v115, (uint64_t)v11, 0, v118, a5, a6, a7, a8);
LABEL_84:
          if (v16)
          {
            if ((v119 & 1) != 0 || *(_DWORD *)v11 == 38)
            {
              v588 = *(_DWORD *)(a1 + 12);
              if (!v588)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C868);
              }
              JSC::Scope::revertToPreviousUsedVariables((JSC::Scope *)(*(_QWORD *)a1 + 720 * (v588 - 1)), v100, a3, a4, a5, a6, a7, a8);
              v589 = *(_DWORD **)(a1 + 7496);
              if (v589)
                *v589 = 2;
              goto LABEL_619;
            }
          }
          else if (v119)
          {
            goto LABEL_598;
          }
          if (v63)
          {
            v421 = *(_DWORD *)(a1 + 12);
            if (!v421)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C46CLL);
            }
            v10 = v117;
            v422 = *(_DWORD *)(a1 + 12);
            while (1)
            {
              v423 = v422 - 1;
              if (v422 == 1)
                break;
              --v422;
              v424 = v423;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v423 + 12) & 0x40) != 0)
                goto LABEL_388;
            }
            v424 = 0;
LABEL_388:
            if (v421 <= v423)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C444);
            }
            v425 = v424;
            *(_DWORD *)(*(_QWORD *)a1 + 720 * v424 + 10) |= 0x10u;
            v426 = *(_DWORD *)(a1 + 12);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
            {
              if (!v426)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C44CLL);
              }
              v430 = *(_QWORD *)a1;
              v427 = v426 - 1;
            }
            else
            {
              if (!v426)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C464);
              }
              v427 = v426 - 1;
              v428 = *(_DWORD *)(a1 + 12);
              while (1)
              {
                v429 = v428;
                if (v428 == 1)
                  break;
                --v428;
                if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v429 - 1) + 10) & 0x405400) == 0x400000)
                  goto LABEL_394;
              }
              v428 = 0;
LABEL_394:
              if (v426 <= v429 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C454);
              }
              v430 = *(_QWORD *)a1;
              if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v428 + 15) != 2
                && ((*(_BYTE *)(v430 + 720 * v428 + 13) & 2) == 0 || *(_BYTE *)(v430 + 720 * v428 + 16) != 1))
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
                goto LABEL_620;
              }
            }
            if ((*(_BYTE *)(v430 + 720 * v427 + 11) & 8) != 0)
            {
              if (v426 <= v423)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C45CLL);
              }
              v13 = 0;
              *(_BYTE *)(v430 + 720 * v425 + 32) |= 8u;
            }
            else
            {
              v13 = 0;
            }
            LODWORD(v24) = 18;
          }
          else
          {
            LODWORD(v24) = 18;
            v10 = v117;
            v13 = 0;
          }
          goto LABEL_88;
        }
        ++*(_DWORD *)(a1 + 7304);
        v96 = *(_DWORD *)(a1 + 7300);
        if (!v13)
          goto LABEL_81;
        v339 = *(_DWORD *)v11;
        LODWORD(v741) = *(_DWORD *)(a1 + 7300);
        if (v339 != 2)
        {
          if (v339 != 20 && (v339 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
            goto LABEL_598;
          }
          goto LABEL_597;
        }
        v340 = *(_DWORD *)(a1 + 7400);
        v341 = *(_DWORD *)(a1 + 7412);
        v342 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v340;
        *(_DWORD *)(a1 + 7448) = v341;
        *(_DWORD *)(a1 + 7452) = v342;
        v343 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v343 + 4) = v340;
        v344 = *(_DWORD *)(a1 + 12);
        if (!v344)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C42CLL);
        }
        --v13;
        v345 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v344 - 1) + 9) & 1;
        *(_BYTE *)(v343 + 56) = 0;
        v346 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v343, (uint64_t)v11, 2u, v345, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v346;
        if (v346 == 3)
        {
          v432 = *(_DWORD *)(a1 + 7400);
          v433 = *(_DWORD *)(a1 + 7412);
          v434 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v432;
          *(_DWORD *)(a1 + 7448) = v433;
          *(_DWORD *)(a1 + 7452) = v434;
          v352 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v352 + 4) = v432;
          v353 = *(_DWORD *)(a1 + 12);
          if (!v353)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7A96CLL);
          }
        }
        else
        {
          if (v346 == 37)
          {
            v580 = *(_DWORD *)(a1 + 7400);
            v581 = *(_DWORD *)(a1 + 7412);
            v582 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v580;
            *(_DWORD *)(a1 + 7448) = v581;
            *(_DWORD *)(a1 + 7452) = v582;
            v583 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v583 + 4) = v580;
            v584 = *(_DWORD *)(a1 + 12);
            if (!v584)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C424);
            }
            v585 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v584 - 1) + 9) & 1;
            *(_BYTE *)(v583 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v583, (uint64_t)v11, 0, v585, a5, a6, a7, a8);
            JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
            if (*(_QWORD *)(a1 + 7360))
            {
LABEL_593:
              if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
                goto LABEL_598;
              }
              goto LABEL_597;
            }
          }
          else
          {
            *(_DWORD *)v746 = 0;
            *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v746[16] = a1;
            *(_QWORD *)(a1 + 7496) = v746;
            v347 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v742, v746);
            *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
            if (!v347)
              goto LABEL_593;
          }
          v348 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 == 6)
          {
            do
            {
              v706 = *(_DWORD *)(a1 + 7400);
              v707 = *(_DWORD *)(a1 + 7412);
              v708 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v706;
              *(_DWORD *)(a1 + 7448) = v707;
              *(_DWORD *)(a1 + 7452) = v708;
              v709 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v709 + 4) = v706;
              v710 = *(_DWORD *)(a1 + 12);
              if (!v710)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7CA88);
              }
              v711 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v710 - 1) + 9) & 1;
              *(_BYTE *)(v709 + 56) = 0;
              v712 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v709, (uint64_t)v11, 2u, v711, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v712;
              if (v712 == 3)
                goto LABEL_305;
              if (v712 == 37)
              {
                v713 = *(_DWORD *)(a1 + 7400);
                v714 = *(_DWORD *)(a1 + 7412);
                v715 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v713;
                *(_DWORD *)(a1 + 7448) = v714;
                *(_DWORD *)(a1 + 7452) = v715;
                v716 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v716 + 4) = v713;
                v717 = *(_DWORD *)(a1 + 12);
                if (!v717)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E7CA80);
                }
                v718 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v717 - 1) + 9) & 1;
                *(_BYTE *)(v716 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v716, (uint64_t)v11, 0, v718, a5, a6, a7, a8);
                JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
              }
              else
              {
                *(_DWORD *)v746 = 0;
                *(_QWORD *)&v746[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v746[16] = a1;
                *(_QWORD *)(a1 + 7496) = v746;
                JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v742, v746);
                *(_QWORD *)(*(_QWORD *)&v746[16] + 7496) = *(_QWORD *)&v746[8];
              }
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_598;
              v348 = *(_DWORD *)v11;
            }
            while (*(_DWORD *)v11 == 6);
            if (v348 == 37)
              goto LABEL_980;
          }
          else if (v348 == 37)
          {
            if (!*(_QWORD *)(a1 + 7360))
LABEL_980:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
            goto LABEL_598;
          }
          if (v348 != 3)
          {
            if (v348 != 20 && (v348 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
              goto LABEL_598;
            }
LABEL_597:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_598:
            if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
              goto LABEL_620;
            }
LABEL_619:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_620:
            v24 = 0;
            *(_DWORD *)(a1 + 7300) = v741;
            goto LABEL_95;
          }
LABEL_305:
          v349 = *(_DWORD *)(a1 + 7400);
          v350 = *(_DWORD *)(a1 + 7412);
          v351 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v349;
          *(_DWORD *)(a1 + 7448) = v350;
          *(_DWORD *)(a1 + 7452) = v351;
          v352 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v352 + 4) = v349;
          v353 = *(_DWORD *)(a1 + 12);
          if (!v353)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7C41CLL);
          }
        }
        v354 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v353 - 1) + 9) & 1;
        *(_BYTE *)(v352 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v352, (uint64_t)v11, 0, v354, a5, a6, a7, a8);
        LODWORD(v24) = 19;
LABEL_88:
        *(_DWORD *)(a1 + 7300) = v741;
        v63 = 0;
        v66 = *(_DWORD *)v11 - 2;
        if (v66 > 0x11)
          goto LABEL_89;
        continue;
      case 2u:
        v741 = v13;
        ++*(_DWORD *)(a1 + 7304);
        v289 = *(_DWORD *)(a1 + 7400);
        v290 = *(_DWORD *)(a1 + 7412);
        v291 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v289;
        *(_DWORD *)(a1 + 7448) = v290;
        *(_DWORD *)(a1 + 7452) = v291;
        v292 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v292 + 4) = v289;
        v293 = *(_DWORD *)(a1 + 12);
        if (!v293)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C414);
        }
        v294 = v10;
        v295 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v293 - 1) + 9) & 1;
        *(_BYTE *)(v292 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v292, (uint64_t)v11, 0, v295, a5, a6, a7, a8);
        v296 = *(_DWORD *)(a1 + 7300);
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, v742))
        {
          if (v63)
          {
            v640 = *(_DWORD *)(a1 + 12);
            if (!v640)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C40CLL);
            }
            v641 = *(_QWORD *)a1;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v640 - 1) + 11) & 8) != 0)
            {
              v642 = *(_DWORD *)(a1 + 12);
              while (1)
              {
                v643 = v642;
                if (v642 == 1)
                  break;
                --v642;
                if ((*(_BYTE *)(v641 + 720 * (v643 - 1) + 12) & 0x40) != 0)
                  goto LABEL_741;
              }
              v642 = 0;
LABEL_741:
              if (v640 <= v643 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197E7C3FCLL);
              }
              *(_BYTE *)(v641 + 720 * v642 + 32) |= 0x10u;
            }
          }
          v297 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 == 5)
          {
            v298 = *(_DWORD *)(a1 + 7400);
            v299 = *(_DWORD *)(a1 + 7412);
            v300 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v298;
            *(_DWORD *)(a1 + 7448) = v299;
            *(_DWORD *)(a1 + 7452) = v300;
            v301 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v301 + 4) = v298;
            v302 = *(_DWORD *)(a1 + 12);
            if (!v302)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C404);
            }
            v303 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v302 - 1) + 9) & 1;
            *(_BYTE *)(v301 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v301, (uint64_t)v11, 0, v303, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7300) = v296;
            LODWORD(v24) = 16;
            v10 = v294;
            v13 = v741;
            goto LABEL_74;
          }
          if (v297 != 20 && (v297 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, "]", "subscript expression");
LABEL_727:
            v24 = 0;
            *(_DWORD *)(a1 + 7300) = v296;
            goto LABEL_95;
          }
        }
        else if (*(_DWORD *)v11 != 20 && (*(_DWORD *)v11 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subscript expression");
          goto LABEL_727;
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        goto LABEL_727;
      case 6u:
        if (v65)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use tagged templates in an optional chain");
          goto LABEL_38;
        }
        if (v63)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_38;
          v633 = "Cannot use super as tag for tagged templates";
LABEL_708:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v633);
          goto LABEL_38;
        }
        v635 = *(_DWORD *)(a1 + 7300);
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::SyntaxChecker>(a1, v742, 0, a4, a5, a6, a7, a8))
        {
          v10[29].i8[5] = 1;
          *(_DWORD *)(a1 + 7300) = v635;
          LODWORD(v24) = 53;
          goto LABEL_74;
        }
        if (*(_DWORD *)v11 == 20 || (*(_DWORD *)v11 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse template literal");
        }
        v24 = 0;
        *(_DWORD *)(a1 + 7300) = v635;
LABEL_95:
        v102 = v744;
        if (v744)
        {
          v744 = 0;
          LODWORD(v745) = 0;
          WTF::fastFree((unint64_t)v102, a2, a3, a4, a5, a6, a7, a8);
        }
        return v24;
      case 0x11u:
        ++*(_DWORD *)(a1 + 7304);
        v67 = *(_DWORD *)(a1 + 7400);
        v68 = *(_DWORD *)(a1 + 7412);
        v69 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v67;
        *(_DWORD *)(a1 + 7448) = v68;
        *(_DWORD *)(a1 + 7452) = v69;
        v70 = *(unsigned int **)(a1 + 7288);
        v70[1] = v67;
        v71 = *(_DWORD *)(a1 + 12);
        if (!v71)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C3ACLL);
        }
        v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9);
        v73 = (unsigned __int8 *)*((_QWORD *)v70 + 10);
        v74 = (unsigned __int8 *)*((_QWORD *)v70 + 12);
        if (v73 >= v74 || (*v73 | 0x20u) - 97 > 0x19)
          goto LABEL_76;
        v75 = v70[22];
        v76 = v73 - v75;
        v77 = v70[28] - v75;
        v78 = *v70 | (unint64_t)(v76 << 32);
        v79 = v73 + 1;
        do
        {
          if (v79 >= v74)
          {
            LOBYTE(v80) = 0;
            goto LABEL_68;
          }
          v81 = *v79++;
          v80 = v81;
          v82 = (v81 | 0x20) - 97;
        }
        while ((v81 - 48) < 0xA || v82 < 0x1A);
        if ((v80 & 0x80) == 0
          && ((v80 - 36) > 0x3B || ((1 << (v80 - 36)) & 0x900000000000001) == 0))
        {
          v74 = v79 - 1;
LABEL_68:
          *((_BYTE *)v70 + 176) = v80;
          *((_QWORD *)v70 + 10) = v74;
          *(_QWORD *)(a1 + 7376) = 0;
          *(_DWORD *)(a1 + 7400) = *v70;
          v85 = v70[22];
          *(_DWORD *)(a1 + 7404) = v70[28] - v85;
          *(_DWORD *)(a1 + 7408) = (_DWORD)v73 - v85;
          *(_DWORD *)(a1 + 7412) = v70[20] - v85;
          *(_QWORD *)(a1 + 7416) = v78;
          *(_DWORD *)(a1 + 7424) = v77;
          v86 = v70[22];
          v87 = v70[20] - v86;
          v88 = v70[28] - v86;
          v10[16] = (int32x2_t)(*v70 | (unint64_t)(v87 << 32));
          *(_DWORD *)(a1 + 7436) = v88;
          v70[15] = 12;
          *(_DWORD *)(a1 + 7368) = 12;
          if (!v63)
            goto LABEL_71;
LABEL_69:
          if (!v71)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7C3A4);
          }
          v89 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 11) & 8) != 0)
          {
            v459 = v71;
            while (1)
            {
              v460 = v459;
              if (v459 == 1)
                break;
              --v459;
              if ((*(_BYTE *)(v89 + 720 * (v460 - 1) + 12) & 0x40) != 0)
                goto LABEL_479;
            }
            v459 = 0;
LABEL_479:
            if (v71 <= v460 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C394);
            }
            *(_BYTE *)(v89 + 720 * v459 + 32) |= 0x10u;
          }
LABEL_71:
          LODWORD(v24) = 17;
          goto LABEL_72;
        }
LABEL_76:
        *((_BYTE *)v70 + 56) = 0;
        v95 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(v70, (uint64_t)v11, 5u, v72 & 1, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v95;
        if (v95 == 12)
        {
          v71 = *(_DWORD *)(a1 + 12);
          if (!v63)
            goto LABEL_71;
          goto LABEL_69;
        }
        v741 = v13;
        if (v95 != 13)
        {
          if (v95 != 20 && (v95 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v634 = "'?.'";
              if (!v65)
                v634 = "'.'";
              *(_QWORD *)v746 = v634;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*>(a1, "Expected a property name after ", (const char **)v746);
            }
            goto LABEL_38;
          }
LABEL_613:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_38;
        }
        if (v63)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot access private names from super");
LABEL_38:
          v24 = 0;
          goto LABEL_95;
        }
        v502 = *(_DWORD *)(a1 + 12);
        if (!v502)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C38CLL);
        }
        v503 = v10;
        v504 = *(uint64_t **)(a1 + 7376);
        v505 = v502 - 1;
        v24 = *(_QWORD *)a1;
        v506 = *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (v502 - 1) + 14);
        v740 = (int32x2_t *)*v504;
        if (v506 == 2 && (JSC::Scope::hasPrivateName(*(_QWORD *)(v24 + 720 * v505 + 160), (uint64_t)v740) & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)v746 = v740;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[44],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)v746);
          }
          goto LABEL_38;
        }
        JSC::Scope::useVariable(v24 + 720 * v505, (uint64_t)v740, 0);
        v10 = v503;
        v503[29].i8[6] = 1;
        *(_QWORD *)(a1 + 7336) = v504;
        *(_DWORD *)(a1 + 7368) = 12;
        v71 = *(_DWORD *)(a1 + 12);
        LODWORD(v24) = 25;
        v13 = v741;
LABEL_72:
        v90 = *(_DWORD *)(a1 + 7400);
        v91 = *(_DWORD *)(a1 + 7412);
        v92 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v90;
        *(_DWORD *)(a1 + 7448) = v91;
        *(_DWORD *)(a1 + 7452) = v92;
        v93 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v93 + 4) = v90;
        if (!v71)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7C39CLL);
        }
        v94 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
        *(_BYTE *)(v93 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v93, (uint64_t)v11, 0, v94, a5, a6, a7, a8);
LABEL_74:
        v63 = 0;
        v66 = *(_DWORD *)v11 - 2;
        if (v66 <= 0x11)
          continue;
LABEL_89:
        if (v65)
          v24 = 24;
        else
          v24 = v24;
        v64 = 39;
        if (*(_DWORD *)v11 != 39)
        {
          if (v63)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v458 = "Cannot use new with super call";
              if (!v13)
                v458 = "super is not valid in this context";
              *(_QWORD *)v746 = v458;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(a1, 0, (const char **)v746);
            }
            goto LABEL_38;
          }
          if (v13)
          {
            if (v13 - 1 >= (unint64_t)HIDWORD(v745))
            {
              __break(0xC471u);
              JUMPOUT(0x197E7C7D0);
            }
            v24 = 19;
          }
          goto LABEL_95;
        }
        goto LABEL_47;
      default:
        goto LABEL_89;
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t i;

  v3 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v29 >= *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    v30 = 0;
    v31 = *(_QWORD *)(a1 + 7496);
    i = a1;
    *(_QWORD *)(a1 + 7496) = &v30;
    result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v30);
    *(_QWORD *)(i + 7496) = v31;
    v10 = *(_DWORD *)(a1 + 7368);
    if ((_DWORD)result)
    {
      if (v10 != 6)
        return result;
      v11 = *(_DWORD *)(a1 + 7400);
      v12 = *(_DWORD *)(a1 + 7412);
      v13 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v11;
      *(_DWORD *)(a1 + 7448) = v12;
      *(_DWORD *)(a1 + 7452) = v13;
      v14 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v14 + 4) = v11;
      v15 = *(_DWORD *)(a1 + 12);
      if (!v15)
      {
LABEL_23:
        __break(0xC471u);
        JUMPOUT(0x197E7D038);
      }
      v16 = (_DWORD *)(a1 + 7368);
      v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
      *(_BYTE *)(v14 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v14, a1 + 7368, 0, v17, v6, v7, v8, v9);
      *v3 = vadd_s32(*v3, (int32x2_t)0x100000001);
      v30 = 0;
      v31 = *(_QWORD *)(a1 + 7496);
      for (i = a1; ; i = a1)
      {
        *(_QWORD *)(a1 + 7496) = &v30;
        v18 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v30);
        *(_QWORD *)(i + 7496) = v31;
        if (!v18)
          break;
        if (*v16 != 6)
          return 47;
        v23 = *(_DWORD *)(a1 + 7400);
        v24 = *(_DWORD *)(a1 + 7412);
        v25 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v23;
        *(_DWORD *)(a1 + 7448) = v24;
        *(_DWORD *)(a1 + 7452) = v25;
        v26 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v26 + 4) = v23;
        v27 = *(_DWORD *)(a1 + 12);
        if (!v27)
          goto LABEL_23;
        v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
        *(_BYTE *)(v26 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 2u, v28, v19, v20, v21, v22);
        v30 = 0;
        v31 = *(_QWORD *)(a1 + 7496);
      }
      if (*v16 != 20 && (*v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
        return 0;
      }
    }
    else if (v10 != 20 && (v10 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
      return 0;
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
  result = 0;
  v3[6].i8[4] = 1;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateLiteral<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  const char *v18;
  int v19;
  int v20;
  char v22;

  v11 = *(_DWORD *)(a1 + 7300);
  v22 = 0;
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::SyntaxChecker>(a1, 1, a3, &v22, a5, a6, a7, a8))
  {
    v20 = *(_DWORD *)(a1 + 7368);
    if (v20 != 20 && (v20 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse head template element");
      goto LABEL_15;
    }
    goto LABEL_24;
  }
  do
  {
    if (v22)
    {
      result = 52;
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 7368) == 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_15;
      v18 = "Template literal expression cannot be empty";
      goto LABEL_14;
    }
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2))
    {
      v19 = *(_DWORD *)(a1 + 7368);
      if (v19 == 20 || (v19 & 0x100000) != 0)
        goto LABEL_24;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_15;
      v18 = "Cannot parse expression in template literal";
LABEL_14:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v18);
      goto LABEL_15;
    }
  }
  while (JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::SyntaxChecker>(a1, 0, a3, &v22, v12, v13, v14, v15));
  v16 = *(_DWORD *)(a1 + 7368);
  if (v16 != 20 && (v16 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse template element");
    goto LABEL_15;
  }
LABEL_24:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_15:
  result = 0;
LABEL_11:
  *(_DWORD *)(a1 + 7300) = v11;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t result;
  int v52;
  const char *v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  const char *v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7D958);
  }
  v15 = (_BYTE *)(a1 + 7440);
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v23 = v18;
  *(_DWORD *)(a1 + 7368) = v18;
  v65 = 0;
  v66 = *(_QWORD *)(a1 + 7496);
  v67 = a1;
  *(_QWORD *)(a1 + 7496) = &v65;
  v24 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  v25 = *(_BYTE *)(a1 + 7440);
  *(_BYTE *)(a1 + 7440) = 1;
  if (v18 != 546)
    goto LABEL_10;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7D960);
  }
  v27 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    v28 = v27;
    if (v27 == 1)
      break;
    --v27;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 12) & 0x40) != 0)
      goto LABEL_7;
  }
  v27 = 0;
LABEL_7:
  if (v26 <= v28 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7D968);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 11) & 0x40) == 0 && ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) == 0)
  {
LABEL_10:
    if ((v18 & 0x100) != 0)
    {
      while (1)
      {
        v34 = v18;
        ++*(_DWORD *)(a1 + 7300);
        *(_DWORD *)(a2 + 12) = v18;
        v41 = *(_DWORD *)(a1 + 7400);
        v42 = *(_DWORD *)(a1 + 7412);
        v43 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v41;
        *(_DWORD *)(a1 + 7448) = v42;
        *(_DWORD *)(a1 + 7452) = v43;
        v44 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v44 + 4) = v41;
        v45 = *(_DWORD *)(a1 + 12);
        if (!v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7D950);
        }
        v46 = v34 & 0xFFFFFFFC;
        v47 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v45 - 1) + 9) & 1;
        *(_BYTE *)(v44 + 56) = 0;
        v18 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v44, a1 + 7368, 0, v47, v19, v20, v21, v22);
        *(_DWORD *)(a1 + 7368) = v18;
        ++*(_DWORD *)(a1 + 7304);
        if ((v18 & 0x100) == 0)
          break;
        if (v46 == 256)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v48 = 1;
          goto LABEL_33;
        }
      }
      v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
      if (v29)
      {
        if (v46 != 256)
          goto LABEL_13;
        if ((v29 & 0x80000000) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v68 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(v29);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, &v68);
          }
        }
        else
        {
          if (v29 <= 0x19)
          {
            v35 = 1;
            if (((1 << v29) & 0x2030004) != 0)
              goto LABEL_14;
          }
          v49 = *(_DWORD *)(a1 + 12);
          if (!v49)
          {
            __break(0xC471u);
            JUMPOUT(0x197E7D978);
          }
          if (v29 == 18 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1) == 0)
          {
            v29 = 18;
            v35 = 1;
            goto LABEL_14;
          }
          if (!*(_QWORD *)(a1 + 7360))
          {
            if ((v34 & 0xFFFFFFFD) == 0x100)
              v64 = "++";
            else
              v64 = "--";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v64);
          }
        }
      }
      else
      {
        if (*v16 == 20 || (*v16 & 0x100000) != 0)
          goto LABEL_125;
        if (!*(_QWORD *)(a1 + 7360))
        {
          if (v34 <= 773)
          {
            v53 = "logical-not";
            switch(v34)
            {
              case 256:
              case 258:
                v53 = "prefix-increment";
                goto LABEL_96;
              case 257:
              case 259:
                v53 = "prefix-decrement";
                goto LABEL_96;
              case 260:
                goto LABEL_96;
              case 261:
                v53 = "bitwise-not";
                goto LABEL_96;
              default:
                goto LABEL_134;
            }
          }
          switch(v34)
          {
            case 774:
              v53 = "typeof";
              break;
            case 775:
              v53 = "void";
              break;
            case 776:
              v53 = "delete";
              break;
            default:
LABEL_134:
              __break(0xC471u);
              JUMPOUT(0x197E7D948);
          }
LABEL_96:
          v68 = v53;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, &v68);
        }
      }
      goto LABEL_23;
    }
    v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
    if (!v29)
    {
      if (*v16 == 20 || (*v16 & 0x100000) != 0)
      {
LABEL_125:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
      }
      goto LABEL_23;
    }
    v34 = 0;
LABEL_13:
    v35 = 0;
LABEL_14:
    v36 = *(_DWORD *)(a1 + 12);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197E7D970);
    }
    LOBYTE(v37) = 0;
    v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9);
    if (v29 <= 2 && (v38 & 1) != 0)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v40 = **(_QWORD **)(a1 + 7320);
      v37 = v40 == *(_QWORD *)(v39 + 1248) || v40 == *(_QWORD *)(v39 + 880);
      if ((v35 & v37) == 1)
      {
        if (*(_QWORD *)(a1 + 7360))
        {
LABEL_23:
          *v15 = v25;
          *(_DWORD *)(a2 + 12) = v24;
          goto LABEL_24;
        }
        v68 = **(const char ***)(a1 + 7320);
LABEL_22:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v68);
        goto LABEL_23;
      }
    }
    if (*v16 == 257)
    {
      if ((v29 & 0x80000000) == 0)
      {
        if ((v29 > 0x19 || ((1 << v29) & 0x2030004) == 0) && (v29 != 18 || (v38 & 1) != 0))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v63 = "Postfix -- operator applied to value that is not a reference";
          goto LABEL_112;
        }
        ++*(_DWORD *)(a1 + 7304);
        *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
        v54 = !v37;
        if ((v38 & 1) == 0)
          v54 = 1;
        if ((v54 & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v68 = **(const char ***)(a1 + 7320);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)&v68);
          }
          goto LABEL_23;
        }
        goto LABEL_77;
      }
    }
    else
    {
      if (*v16 != 256)
        goto LABEL_79;
      if ((v29 & 0x80000000) == 0)
      {
        if ((v29 > 0x19 || ((1 << v29) & 0x2030004) == 0) && (v29 != 18 || (v38 & 1) != 0))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v63 = "Postfix ++ operator applied to value that is not a reference";
LABEL_112:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v63);
          goto LABEL_23;
        }
        ++*(_DWORD *)(a1 + 7304);
        *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
        v50 = !v37;
        if ((v38 & 1) == 0)
          v50 = 1;
        if ((v50 & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v68 = **(const char ***)(a1 + 7320);
          goto LABEL_22;
        }
LABEL_77:
        if (v35)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v48 = 0;
LABEL_33:
            v68 = JSC::operatorString((JSC *)v48, v34);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v68);
          }
          goto LABEL_23;
        }
        v55 = v38 & 1;
        v56 = *(_DWORD *)(a1 + 7400);
        v57 = *(_DWORD *)(a1 + 7412);
        v58 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v56;
        *(_DWORD *)(a1 + 7448) = v57;
        *(_DWORD *)(a1 + 7452) = v58;
        v59 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v59 + 4) = v56;
        *(_BYTE *)(v59 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v55, v30, v31, v32, v33);
        v29 = 21;
LABEL_79:
        if ((v23 & 0x100) == 0)
        {
LABEL_80:
          *v15 = v25;
          *(_DWORD *)(a2 + 12) = v24;
          goto LABEL_81;
        }
        v60 = *(_DWORD *)(a2 + 12);
        if ((v60 - 256) >= 6 && (v60 - 774) >= 3 && (v60 - 174336) > 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197E7D980);
        }
        if (v60 > 773)
        {
          if ((v60 - 774) < 2)
            goto LABEL_80;
          v61 = v60 - 174336;
        }
        else
        {
          if ((v60 - 256) < 4)
          {
            ++*(_DWORD *)(a1 + 7296);
            goto LABEL_80;
          }
          v61 = v60 - 260;
        }
        if (v61 >= 2)
        {
          if (v29 >= 3)
          {
            if (v29 == 25)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v68 = **(const char ***)(a1 + 7336);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v68);
              }
              goto LABEL_23;
            }
          }
          else
          {
            v62 = *(_DWORD *)(a1 + 12);
            if (!v62)
            {
              __break(0xC471u);
              JUMPOUT(0x197E7D988);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v68 = **(const char ***)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v68);
              }
              goto LABEL_23;
            }
          }
        }
        goto LABEL_80;
      }
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v68 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(v29);
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, &v68);
    }
    goto LABEL_23;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 12) & 0x10) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
    goto LABEL_23;
  }
  v52 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, a2);
  *v15 = v25;
  *(_DWORD *)(a2 + 12) = v24;
  if (v52)
  {
LABEL_81:
    result = 55;
    goto LABEL_55;
  }
LABEL_24:
  if (*v16 == 20 || (*v16 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Failed to parse await expression");
  }
  result = 0;
LABEL_55:
  *(_QWORD *)(v67 + 7496) = v66;
  return result;
}

uint64_t JSC::SyntaxChecker::createRegExp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;

  v2 = a1;
  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 16);
    a1 = *(_QWORD *)(a1 + 8);
    v2 = *(unsigned int *)(v2 + 4);
    v4 = (unint64_t)((v3 >> 2) & 1) << 32;
  }
  else
  {
    v4 = 0x100000000;
  }
  if (a2)
  {
    v5 = *(unsigned __int16 **)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 4) | ((unint64_t)((*(_DWORD *)(a2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  if (JSC::Yarr::checkSyntax((const WTF::StringImpl *)a1, v4 | v2, v5, v6))
    return 0;
  else
    return 10;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  const char *v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int16 v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BOOL4 v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  WTF::StringImpl **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  int v86;
  unsigned int v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int v113;
  char v114;
  uint64_t **v115;
  unsigned int v116;
  char v117;
  int v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  WTF *v131;
  unsigned __int8 v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int *v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int *v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int *v159;
  int v160;
  char v161;
  int v162;
  int v163;
  uint64_t v164;
  _QWORD *v165;
  _OWORD *v166;
  WTF *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _OWORD *v177;
  WTF *v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  int v197;
  _OWORD *v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  WTF *v206;
  uint64_t casual;
  unint64_t v208;
  int v209;
  unsigned int v210;
  _BOOL4 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  _DWORD *v235;
  WTF *v236;
  WTF *v238;
  WTF *v239;
  WTF::StringImpl **v240;
  WTF::StringImpl **v241;
  int v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  _QWORD **v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unsigned int *v264;
  WTF::StringImpl *v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  int v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  WTF::StringImpl **v288;
  WTF::StringImpl *v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  WTF::StringImpl **v306;
  WTF::StringImpl *v307;
  WTF::AtomStringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  uint64_t v312;
  uint64_t v313;
  WTF::StringImpl **v314;
  WTF::StringImpl *v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  WTF::StringImpl **v329;
  WTF::StringImpl *v330;
  unint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  WTF::StringImpl **v348;
  WTF::StringImpl *v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  int v375;
  unsigned int v376;
  BOOL v377;
  char v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  int v382;
  int v383;
  int v384;
  int v385;
  uint64_t v386;
  int v387;
  int v388;
  _QWORD *v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v395;
  WTF::StringImpl *v396;
  uint64_t v397;
  unint64_t v398;
  char v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  int v404;
  WTF::AtomStringImpl *v405;
  uint64_t v406;
  uint64_t v407;
  WTF::StringImpl *v408;
  uint64_t v409;
  __int128 *v410;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  unsigned int v414;
  unsigned int v415;
  char v416;
  unsigned __int8 v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  int v432;
  int v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int *v446;
  char v447;
  _QWORD **v448;
  unsigned int v449;
  uint64_t v450;
  int v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  WTF *v459;
  const char *v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  WTF::StringImpl *v464;
  uint64_t v465;
  char hasDeclaredParameter;
  WTF::AtomStringImpl *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int128 *v471;
  uint64_t v472;
  __int128 v473;
  uint64_t v474;
  unsigned int v475;
  unint64_t *v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  const char *v497;
  unsigned int v498;
  unsigned int v499;
  unint64_t v500;
  uint64_t v501;
  int v502;
  int v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  int v533;
  int v534;
  int v535;
  uint64_t v536;
  unint64_t v537;
  void *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  WTF *v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unsigned int *v554;
  WTF::StringImpl *v555;
  unint64_t v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  int v566;
  uint64_t v567;
  WTF::AtomStringImpl *v568;
  uint64_t v569;
  uint64_t v570;
  WTF::StringImpl *v571;
  uint64_t v572;
  unint64_t v573;
  char v574;
  uint64_t v575;
  int v576;
  int v577;
  int v578;
  int v579;
  WTF::AtomStringImpl *v580;
  uint64_t v581;
  uint64_t v582;
  WTF::StringImpl *v583;
  unint64_t v584;
  unint64_t v585;
  unsigned int *v586;
  WTF::StringImpl *v587;
  unint64_t v588;
  void *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  const char *v597;
  uint64_t v598;
  unint64_t v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  void *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v616;
  const char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  void *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t v643;
  int v644;
  uint64_t v645;
  int v646;
  int v647;
  int v648;
  const char *v649;
  unint64_t v650;
  WTF::StringImpl **v651;
  WTF::StringImpl *v652;
  int v653;
  const char *v654;
  WTF::StringImpl **v655;
  uint64_t v656;
  WTF::StringImpl *v657;
  WTF::StringImpl *v658;
  uint64_t v659;
  int v660;
  int v661;
  int v662;
  char v663;
  char v664;
  uint64_t v665;
  int v666;
  int v667;
  char v668;
  _DWORD *v669;
  char v670;
  unsigned int v671;
  unsigned int v672;
  int v673[2];
  int v674[2];
  int v675[2];
  int v676;
  uint64_t v677;
  char v678;
  __int128 *v679;
  char v680;
  uint64_t v681;
  int v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  uint64_t *v689;
  unsigned int v690;
  uint64_t v691;
  _QWORD **v692;
  int v693;
  unsigned int v694;
  int *v695;
  uint64_t v696;
  unsigned int v697;
  WTF::StringImpl **v698;
  WTF *v699;
  WTF *v700;
  int v701;
  __int128 v702;
  void *ptr;
  WTF *v704;
  WTF *v705;
  uint64_t v706;
  _BYTE v707[64];
  int v708;
  char v709;
  int v710;
  unsigned __int8 v711;
  _BYTE v712[24];
  WTF *v713;
  int v714;
  WTF::StringImpl *v715;
  _OWORD v716[4];
  _OWORD v717[2];
  int v718;
  __int128 v719;
  _QWORD v720[2];
  const char *v721;
  __int128 v722;
  int v723;
  unsigned __int8 v724[24];

  v8 = a1 + 7344;
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x1F8FFF) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7F0F0);
  }
  v11 = a8;
  v12 = a6;
  v14 = a1;
  v15 = *(_DWORD *)(a1 + 12);
  v16 = v15 - 1;
  v17 = *(_DWORD *)(a1 + 7368);
  v692 = (_QWORD **)a7;
  v690 = a5;
  v688 = a3;
  if (v17 == 546)
    goto LABEL_3;
  if (v17 == 1048592)
  {
    a5 = a5;
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
    {
LABEL_3:
      if (!*(_BYTE *)v8)
        goto LABEL_10;
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x197E80A18);
      }
      v18 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v16 + 10);
      if ((v18 & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
      {
        v20 = 0;
        v21 = 1;
        v19 = 1;
        goto LABEL_12;
      }
      if ((v18 & 0x2000) != 0)
      {
LABEL_10:
        v19 = 0;
        v20 = "in an async function";
      }
      else if ((v18 & 0x100000) != 0)
      {
        v19 = 0;
        v20 = "in a static block";
      }
      else
      {
        if (*(_DWORD *)(a1 + 7480) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197E80554);
        }
        v19 = 0;
        v20 = "in a module";
      }
      v21 = 1;
      goto LABEL_12;
    }
    v21 = 0;
    v20 = 0;
    v19 = 1;
  }
  else
  {
    v21 = 0;
    v20 = 0;
    v19 = 1;
    a5 = a5;
  }
LABEL_12:
  v721 = v20;
  v22 = *(_BYTE *)(a1 + 7472);
  LOBYTE(v702) = v22;
  LOBYTE(v715) = 0;
  LOBYTE(v717[0]) = 0;
  LOBYTE(v722) = 0;
  LOBYTE(v720[0]) = 0;
  LOBYTE(v719) = 0;
  v724[0] = 0;
  if (v15)
  {
    v23 = *(_QWORD *)a1 + 720 * v15 - 720;
    v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v15 - 712);
    LOBYTE(v702) = v22;
    v24 = *(_BYTE *)(v23 + 9);
    LOBYTE(v715) = v24;
    v25 = *(_DWORD *)(v23 + 10);
    v26 = (v25 >> 8) & 1;
    LOBYTE(v717[0]) = BYTE1(v25) & 1;
    v27 = (v25 >> 9) & 1;
    LOBYTE(v722) = (v25 & 0x200) != 0;
    v28 = (v25 >> 11) & 1;
    LOBYTE(v720[0]) = (v25 & 0x800) != 0;
    v29 = (v25 >> 13) & 1;
    LOBYTE(v719) = (v25 & 0x2000) != 0;
    v30 = (v25 >> 20) & 1;
    v724[0] = v30;
  }
  else
  {
    v30 = 0;
    v29 = 0;
    v28 = 0;
    v27 = 0;
    v26 = 0;
    v24 = 0;
  }
  v31 = *(void **)(a1 + 7216);
  if (v15 == *(_DWORD *)(a1 + 8))
  {
    v697 = a4;
    WTF::Vector<JSC::Scope,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::ImplementationVisibility &,unsigned char &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &>(a1, v31, (uint64_t)&v702, (uint64_t)&v715, (uint64_t)v717, (uint64_t)&v722, (uint64_t)v720, (uint64_t)&v719, v724);
    a4 = v697;
    a3 = v688;
    a5 = v690;
    a7 = (uint64_t)v692;
    v36 = *(_DWORD *)(v14 + 12);
    v35 = v36 - 1;
  }
  else
  {
    v32 = *(_QWORD *)a1 + 720 * v15;
    *(_QWORD *)v32 = v31;
    *(_BYTE *)(v32 + 8) = v22;
    *(_BYTE *)(v32 + 9) = v24;
    if (v26)
      v33 = 8389056;
    else
      v33 = 8388800;
    *(_DWORD *)(v32 + 10) = (v30 << 20) | (v29 << 13) | (v28 << 11) | (v27 << 9) | v33 | *(_DWORD *)(v32 + 10) & 0xF0000000;
    *(_WORD *)(v32 + 14) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    *(_DWORD *)(v32 + 20) = 1;
    *(_QWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    *(_BYTE *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 48) = 0x800000000;
    *(_QWORD *)&v34 = -1;
    *((_QWORD *)&v34 + 1) = -1;
    *(_OWORD *)(v32 + 56) = v34;
    *(_OWORD *)(v32 + 72) = v34;
    *(_OWORD *)(v32 + 88) = v34;
    *(_OWORD *)(v32 + 104) = v34;
    *(_QWORD *)(v32 + 120) = 0;
    *(_BYTE *)(v32 + 128) = 0;
    *(_QWORD *)(v32 + 136) = 0;
    *(_QWORD *)(v32 + 144) = 0;
    *(_BYTE *)(v32 + 152) = 0;
    *(_QWORD *)(v32 + 160) = 0;
    *(_QWORD *)(v32 + 168) = v32 + 184;
    *(_QWORD *)(v32 + 616) = 0x800000000;
    *(_OWORD *)(v32 + 624) = v34;
    *(_OWORD *)(v32 + 640) = v34;
    *(_OWORD *)(v32 + 656) = v34;
    *(_OWORD *)(v32 + 672) = v34;
    *(_OWORD *)(v32 + 688) = 0u;
    *(_OWORD *)(v32 + 704) = 0u;
    *(_OWORD *)(v32 + 208) = v34;
    *(_OWORD *)(v32 + 224) = v34;
    *(_OWORD *)(v32 + 240) = v34;
    *(_OWORD *)(v32 + 176) = xmmword_19914EEF0;
    *(_OWORD *)(v32 + 192) = v34;
    v35 = *(_DWORD *)(a1 + 12);
    v36 = v35 + 1;
    *(_DWORD *)(a1 + 12) = v35 + 1;
  }
  if (v36 <= v35)
  {
    __break(0xC471u);
    JUMPOUT(0x197E809F8);
  }
  v37 = v35;
  v38 = *(_QWORD *)v14;
  switch(v9)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 19:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFE8F007F;
      v41 = -32384;
      goto LABEL_22;
    case 1:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFE8F007F;
      v42 = 4228992;
      goto LABEL_23;
    case 2:
    case 18:
      v39 = v38 + 720 * v37;
      v43 = *(_DWORD *)(v39 + 10) & 0xFE8F007F | 0x1408380;
      goto LABEL_24;
    case 6:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFE8F007F;
      v41 = -26240;
LABEL_22:
      v42 = v41 | 0x1400000;
      goto LABEL_23;
    case 7:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFE8F007F;
      v42 = 4252032;
      goto LABEL_23;
    case 8:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFE8F007F;
      v42 = 4258176;
      goto LABEL_23;
    case 9:
    case 10:
      v39 = v38 + 720 * v37;
      v43 = (*(_DWORD *)(v39 + 10) & 0xFE8F007F | 0x1409980) + 2048;
      goto LABEL_24;
    case 11:
      v39 = v38 + 720 * v37;
      v43 = *(_DWORD *)(v39 + 10) & 0xFE8F007F | 0x140B980;
      goto LABEL_24;
    case 12:
      v39 = v38 + 720 * v37;
      v43 = *(_DWORD *)(v39 + 10) | 0x10000;
      goto LABEL_24;
    case 13:
    case 14:
      v39 = v38 + 720 * v37;
      v43 = *(_DWORD *)(v39 + 10) | 0x30000;
      goto LABEL_24;
    case 15:
      v39 = v38 + 720 * v37;
      v43 = *(_DWORD *)(v39 + 10) & 0xFE8F007F | 0x40E780;
      goto LABEL_24;
    case 16:
    case 17:
      v39 = v38 + 720 * v37;
      v43 = (*(_DWORD *)(v39 + 10) & 0xFE8F007F | 0x1409980) + 2560;
      goto LABEL_24;
    case 20:
      v39 = v38 + 720 * v37;
      v40 = *(_DWORD *)(v39 + 10) & 0xFFFF01FF;
      v42 = 24150400;
LABEL_23:
      v43 = v40 | v42;
LABEL_24:
      *(_DWORD *)(v39 + 10) = v43;
      break;
    default:
      break;
  }
  v44 = *(unsigned int *)(v14 + 12);
  if (!(_DWORD)v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80A00);
  }
  v45 = *(_QWORD *)v14;
  v46 = v44 - 1;
  if ((_DWORD)v44 != 1 && (*(_DWORD *)(v45 + 720 * (v44 - 1) + 10) & 0x400000) != 0)
  {
    v47 = 720 * v44;
    while (1)
    {
      v48 = v47 - 720;
      if (v47 == 720)
        break;
      v49 = *(_BYTE *)(v45 + v47 - 1428);
      v47 -= 720;
      if ((v49 & 0x40) != 0)
      {
        if (*(_BYTE *)(v45 + v48 - 712) != 2)
          *(_BYTE *)(v45 + 720 * (v44 - 1) + 8) = 0;
        break;
      }
    }
  }
  v681 = a2;
  v684 = v9;
  if (v44 <= v37)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80A08);
  }
  v50 = (int *)(v14 + 7368);
  v51 = v45 + 720 * v37;
  v687 = v12;
  *(_DWORD *)(v51 + 20) = v12;
  *(_BYTE *)(v51 + 15) = a5;
  v695 = (int *)(v14 + 7368);
  v696 = v14 + 7316;
  v693 = *(_DWORD *)(v14 + 7316);
  *(_DWORD *)(v14 + 7316) = 1;
  v52 = *(_DWORD *)(v14 + 7408);
  v53 = *(_QWORD *)(v14 + 7328);
  *(_QWORD *)(v14 + 7328) = 0;
  v54 = *(_QWORD *)(v14 + 7216);
  v720[0] = v54;
  v694 = v37;
  if ((v10 & 0x840) == 0)
  {
    v55 = *(_BYTE *)(v45 + 720 * v46 + 9);
    v56 = (v55 & 1) == 0;
    if (v11 || (v10 & 0x201) == 0)
    {
      if (v44 <= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x197E80A10);
      }
      if ((*(_BYTE *)(v45 + 720 * v16 + 11) & 2) != 0)
        v56 = 0;
    }
    if (a3 == 2)
      goto LABEL_41;
    if ((v21 & 1) != 0)
      goto LABEL_268;
    v209 = *v50;
    v210 = *v50 - 544;
    if (*v50 == 544)
      goto LABEL_182;
    if (v209 == 12)
      goto LABEL_268;
    if (v209 != 1048592)
    {
      v211 = 0;
      a7 = (uint64_t)v692;
      v50 = (int *)(v14 + 7368);
      a3 = v688;
      goto LABEL_183;
    }
    a7 = (uint64_t)v692;
    v50 = (int *)(v14 + 7368);
    a3 = v688;
    if (**(_QWORD **)(v14 + 7376) == *(_QWORD *)(*(_QWORD *)(v54 + 41952) + 328))
LABEL_182:
      v211 = (v55 & 1) == 0;
    else
      v211 = 0;
LABEL_183:
    if (v211 || !v56)
    {
      if (!v211)
      {
LABEL_187:
        if (a3 != 1)
          goto LABEL_41;
        if (v209 == 2)
        {
          if (!v684)
          {
            if (!*(_QWORD *)(v14 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Function statements must have a name");
            goto LABEL_51;
          }
          if (v684 == 9)
          {
            if (!*(_QWORD *)(v14 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Async function statements must have a name");
            goto LABEL_51;
          }
          goto LABEL_191;
        }
        if ((*(_BYTE *)(v45 + 720 * v46 + 9) & 1) != 0 && v209 == 532)
        {
          if (!*(_QWORD *)(v14 + 7360))
          {
            *(_QWORD *)&v702 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v14 + 7288) + 64), v52, *(_DWORD *)(v14 + 7412));
            *((_QWORD *)&v702 + 1) = v549;
            v715 = (WTF::StringImpl *)JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(v14, (uint64_t)&v702, (const char **)&v715);
          }
          goto LABEL_51;
        }
        if ((v209 - 531) <= 1)
        {
          if (!*(_QWORD *)(v14 + 7360))
          {
            *(_QWORD *)&v702 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v14 + 7288) + 64), v52, *(_DWORD *)(v14 + 7412));
            *((_QWORD *)&v702 + 1) = v564;
            v715 = (WTF::StringImpl *)JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(v14, (uint64_t)&v702, (const char **)&v715);
          }
          goto LABEL_51;
        }
        if ((v209 & 0x200) != 0)
        {
          if (v210 >= 3)
          {
            if (!*(_QWORD *)(v14 + 7360))
            {
              *(_QWORD *)&v702 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v14 + 7288) + 64), v52, *(_DWORD *)(v14 + 7412));
              *((_QWORD *)&v702 + 1) = v598;
              v715 = (WTF::StringImpl *)JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(v14, (uint64_t)&v702, (const char **)&v715);
            }
            goto LABEL_51;
          }
          if (v209 == 546)
          {
            if (*(_BYTE *)v8 && (*(_DWORD *)(v45 + 720 * v46 + 10) & 0x102000) == 0 && *(_DWORD *)(v14 + 7480) != 1)
              goto LABEL_191;
            if (*(_QWORD *)(v14 + 7360))
              goto LABEL_51;
            *(_QWORD *)&v702 = JSC::stringForFunctionMode();
            v715 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(v14);
            v649 = "Cannot use 'await' as a ";
LABEL_672:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(v14, v649, (const char **)&v702, (const char **)&v715);
            goto LABEL_51;
          }
          if (v209 == 544)
          {
            if ((*(_BYTE *)(v45 + 720 * v46 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(v14 + 7360))
              {
                *(_QWORD *)&v702 = JSC::stringForFunctionMode();
                v715 = (WTF::StringImpl *)"in strict mode";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(v14, (const char **)&v702, (const char **)&v715);
              }
              goto LABEL_51;
            }
            goto LABEL_191;
          }
          if ((*(_BYTE *)(v45 + 720 * v46 + 9) & 1) != 0 || (*(_BYTE *)(v45 + 720 * v46 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(v14 + 7360))
              goto LABEL_51;
            *(_QWORD *)&v702 = JSC::stringForFunctionMode();
            v715 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(v14);
            v649 = "Cannot use 'yield' as a ";
            goto LABEL_672;
          }
        }
LABEL_191:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(v14);
        goto LABEL_51;
      }
    }
    else if (v209 != 545)
    {
      if (v209 != 1048592)
        goto LABEL_187;
      if (**(_QWORD **)(v14 + 7376) != *(_QWORD *)(*(_QWORD *)(v54 + 41952) + 496))
      {
        if (a3 == 1)
          goto LABEL_191;
LABEL_41:
        v57 = *(_DWORD *)(v14 + 7400);
        v58 = *(_DWORD *)(v14 + 7404);
        v52 = *(_DWORD *)(v14 + 7408);
        *(_DWORD *)(a7 + 28) = v57;
        *(_DWORD *)(a7 + 36) = v52 - v58;
        *(_DWORD *)(a7 + 20) = v52;
        if (!(_BYTE)dword_1ECF4C6C3)
          goto LABEL_50;
        if (*(_QWORD *)(v14 + 7520))
          goto LABEL_50;
        v59 = *(_QWORD *)(v14 + 7464);
        if (!v59)
          goto LABEL_50;
        v60 = *(_QWORD *)(v59 + 8);
        if (!v60)
          goto LABEL_50;
        v61 = *(_DWORD *)(v60 - 8);
        v62 = 9 * ((v52 + ~(v52 << 15)) ^ ((v52 + ~(v52 << 15)) >> 10));
        v63 = (v62 ^ (v62 >> 6)) + ~((v62 ^ (v62 >> 6)) << 11);
        v64 = v61 & (v63 ^ HIWORD(v63));
        v65 = *(_DWORD *)(v60 + 16 * v64);
        if (v65 != v52)
        {
          v66 = 1;
          while (v65 != 0x7FFFFFFF)
          {
            v64 = ((_DWORD)v64 + v66) & v61;
            v65 = *(_DWORD *)(v60 + 16 * v64);
            ++v66;
            if (v65 == v52)
              goto LABEL_49;
          }
          goto LABEL_50;
        }
LABEL_49:
        v67 = *(_QWORD *)(v60 + 16 * v64 + 8);
        if (!v67)
        {
LABEL_50:
          v685 = v58;
          v68 = *(_BYTE *)v8;
          *(_BYTE *)v8 = (v10 & 0x38F80) == 0;
          JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(v14, (uint64_t)v720, a7, a4, a5, a6, a7, a8);
          v70 = *(_QWORD *)(v14 + 7360);
          *(_BYTE *)v8 = v68;
          if (v70)
          {
LABEL_51:
            v71 = 0;
            *(_DWORD *)v696 = v693;
            goto LABEL_52;
          }
          v85 = *v50;
          if (!*v50)
          {
            v86 = 2;
            goto LABEL_65;
          }
          if (v85 != 20 && (v85 & 0x100000) == 0)
          {
            *(_QWORD *)&v702 = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const*,char const(&)[6]>(v14, (const char **)&v702);
            goto LABEL_51;
          }
          goto LABEL_191;
        }
        v498 = *(_DWORD *)(v14 + 12);
        if (!v498)
        {
          __break(0xC471u);
          JUMPOUT(0x197E80FE4);
        }
        v499 = v57;
        v500 = *(_QWORD *)v67;
        v501 = *(_QWORD *)(v14 + 7288);
        v502 = *(_DWORD *)(v501 + 112);
        v503 = *(_DWORD *)(v501 + 88);
        *((_DWORD *)v692 + 2) = 36;
        *((_DWORD *)v692 + 6) = *(_DWORD *)v67 >> 1;
        *((_DWORD *)v692 + 3) = *(_DWORD *)(v67 + 16) >> 1;
        if (v498 <= v694)
        {
          __break(0xC471u);
          JUMPOUT(0x197E80FECLL);
        }
        v504 = v500 >> 33;
        JSC::Scope::restoreFromSourceProviderCache(*(_QWORD *)v14 + 720 * v694, v67);
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v702, (uint64_t *)v14, 0, v505, v506, v507, v508, v509);
        std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)&v702, v510, v511, v512, v513, v514, v515, v516);
        v523 = *(_QWORD *)(v67 + 8);
        v522 = *(_QWORD *)(v67 + 16);
        v524 = *(_QWORD *)v67;
        if ((v522 & 0x8000000000000000) != 0)
          v525 = *(_DWORD *)(v67 + 28) & 0xFFFFFF;
        else
          v525 = 1;
        *(_DWORD *)(v14 + 7368) = v525;
        *(_QWORD *)(v8 + 28) = 0;
        *(_DWORD *)(v14 + 7380) = v523 >> 1;
        *(_QWORD *)(v14 + 7392) = 0;
        v526 = HIDWORD(v522) & 0x7FFFFFFF;
        *(_QWORD *)(v14 + 7384) = 0;
        *(_DWORD *)(v14 + 7400) = v524 >> 33;
        *(_DWORD *)(v14 + 7404) = v526;
        *(_DWORD *)(v14 + 7408) = v523 >> 1;
        *(_DWORD *)(v14 + 7412) = v523 >> 33;
        *(_QWORD *)(v14 + 7416) = -1;
        *(_QWORD *)(v14 + 7424) = -1;
        *(_QWORD *)(v14 + 7432) = -1;
        if ((_DWORD)v504 == v499)
        {
          v526 = (v502 - v503);
          *(_DWORD *)(v14 + 7404) = v526;
        }
        JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v14 + 7288), (WTF::AtomStringImpl *)(v523 >> 33), v526, v517, v518, v519, v520, v521);
        v531 = *(_QWORD *)(v14 + 7288);
        v532 = *(_DWORD *)(v14 + 7400);
        *(_DWORD *)v531 = v532;
        v533 = *(_DWORD *)(v14 + 7412);
        v534 = *(_DWORD *)(v14 + 7404);
        *(_DWORD *)(v14 + 7444) = v532;
        *(_DWORD *)(v14 + 7448) = v533;
        *(_DWORD *)(v14 + 7452) = v534;
        *(_DWORD *)(v531 + 4) = v532;
        v535 = *(_DWORD *)(v14 + 12);
        if (!v535)
        {
          __break(0xC471u);
          JUMPOUT(0x197E80FF4);
        }
LABEL_515:
        v536 = *(_BYTE *)(*(_QWORD *)v14 + 720 * (v535 - 1) + 9) & 1;
        *(_BYTE *)(v531 + 56) = 0;
        *(_DWORD *)(v14 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v531, (uint64_t)v695, 0, v536, v527, v528, v529, v530);
        *((_DWORD *)v692 + 8) = *(_DWORD *)(v14 + 7444);
        *(_DWORD *)v696 = v693;
        return 1;
      }
    }
LABEL_268:
    v298 = *(_QWORD *)(v14 + 7376);
    *(_QWORD *)a7 = v298;
    *(_QWORD *)(v14 + 7328) = v298;
    if ((v19 & 1) != 0)
    {
      if ((v10 & 0x30E00) != 0 && !v11 && *v50 == 546)
      {
        if (*(_QWORD *)(v14 + 7360))
          goto LABEL_51;
        *(_QWORD *)&v702 = JSC::stringForFunctionMode();
        v460 = " named 'await'";
        goto LABEL_526;
      }
      v299 = a4;
      if ((v10 & 0x70004) != 0 && !v11 && *v50 == 545)
      {
        if (*(_QWORD *)(v14 + 7360))
          goto LABEL_51;
        *(_QWORD *)&v702 = JSC::stringForFunctionMode();
        v460 = " named 'yield'";
LABEL_526:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const(&)[15]>(v14, (const char **)&v702, v460);
        goto LABEL_51;
      }
    }
    else if (v11 == 1 || (v299 = a4, (v10 & 0x30E00) != 0))
    {
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],char const*&>(v14, &v721);
      goto LABEL_51;
    }
    v300 = v55 & 1;
    v301 = *(_DWORD *)(v14 + 7400);
    v302 = *(_DWORD *)(v14 + 7412);
    v303 = *(_DWORD *)(v14 + 7404);
    *(_DWORD *)(v14 + 7444) = v301;
    *(_DWORD *)(v14 + 7448) = v302;
    *(_DWORD *)(v14 + 7452) = v303;
    v304 = *(_QWORD *)(v14 + 7288);
    *(_DWORD *)(v304 + 4) = v301;
    *(_BYTE *)(v304 + 56) = 0;
    *(_DWORD *)(v14 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v304, (uint64_t)v50, 0, v300, a5, a6, a7, a8);
    a7 = (uint64_t)v692;
    if ((v299 & 1) == 0)
    {
      if (*(_DWORD *)(v14 + 12) <= v694)
      {
        __break(0xC471u);
        JUMPOUT(0x197E80F3CLL);
      }
      v305 = *(_QWORD *)v14 + 720 * v694;
      v306 = (WTF::StringImpl **)*v692;
      v307 = (WTF::StringImpl *)**v692;
      if (v307)
        *(_DWORD *)v307 += 2;
      v715 = v307;
      LOWORD(v717[0]) = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v305 + 120, &v715, v717, (uint64_t)&v702);
      v311 = v715;
      v715 = 0;
      if (v311)
      {
        if (*(_DWORD *)v311 == 2)
        {
          WTF::StringImpl::~StringImpl(v311, v308, v309, a4, a5, a6, v310, a8);
          WTF::fastFree(v339, v340, v341, v342, v343, v344, v345, v346);
        }
        else
        {
          *(_DWORD *)v311 -= 2;
        }
      }
      *(_WORD *)(v702 + 8) &= ~4u;
      v312 = *(_QWORD *)(*(_QWORD *)v305 + 41952);
      if (*(WTF::StringImpl **)(v312 + 1248) == *v306 || *(WTF::StringImpl **)(v312 + 880) == *v306)
      {
        v565 = *(_DWORD *)(v14 + 12);
        if (!v565)
        {
          __break(0xC471u);
          JUMPOUT(0x197E81028);
        }
        a7 = (uint64_t)v692;
        v50 = (int *)(v14 + 7368);
        if ((*(_BYTE *)(*(_QWORD *)v14 + 720 * (v565 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(v14 + 7360))
          {
            *(_QWORD *)&v702 = **v692;
            v715 = (WTF::StringImpl *)JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[18],char const*,char const(&)[21]>(v14, (uint64_t *)&v702, (const char **)&v715);
          }
          goto LABEL_51;
        }
      }
      else
      {
        a7 = (uint64_t)v692;
      }
    }
    goto LABEL_41;
  }
  v362 = *(_DWORD *)(v14 + 7404);
  v363 = *(_DWORD *)(v14 + 7400);
  *(_DWORD *)(a7 + 28) = v363;
  v685 = v362;
  *(_DWORD *)(a7 + 20) = v52;
  *(_DWORD *)(a7 + 36) = v52 - v362;
  if ((_BYTE)dword_1ECF4C6C3)
  {
    if (!*(_QWORD *)(v14 + 7520))
    {
      v364 = *(_QWORD *)(v14 + 7464);
      if (v364)
      {
        v365 = *(_QWORD *)(v364 + 8);
        if (v365)
        {
          v366 = *(_DWORD *)(v365 - 8);
          v367 = 9 * ((v52 + ~(v52 << 15)) ^ ((v52 + ~(v52 << 15)) >> 10));
          v368 = (v367 ^ (v367 >> 6)) + ~((v367 ^ (v367 >> 6)) << 11);
          v369 = v366 & (v368 ^ HIWORD(v368));
          v370 = *(_DWORD *)(v365 + 16 * v369);
          if (v370 == v52)
          {
LABEL_364:
            v372 = *(_QWORD *)(v365 + 16 * v369 + 8);
            a7 = (uint64_t)v692;
            v50 = (int *)(v14 + 7368);
            if (v372)
            {
              v619 = *(_QWORD *)(v372 + 16);
              v620 = *(_QWORD *)v372 >> 33;
              v621 = *(_QWORD *)(v14 + 7288);
              v622 = *(_DWORD *)(v621 + 112);
              v623 = *(_DWORD *)(v621 + 88);
              *((_DWORD *)v692 + 2) = 36;
              *((_DWORD *)v692 + 6) = *(_DWORD *)v372 >> 1;
              *((_DWORD *)v692 + 3) = *(_DWORD *)(v372 + 16) >> 1;
              JSC::Scope::restoreFromSourceProviderCache(v45 + 720 * v37, v372);
              JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v702, (uint64_t *)v14, 0, v624, v625, v626, v627, v628);
              std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)&v702, v629, v630, v631, v632, v633, v634, v635);
              v642 = *(_QWORD *)(v372 + 8);
              v641 = *(_QWORD *)(v372 + 16);
              v643 = *(_QWORD *)v372;
              if ((v641 & 0x8000000000000000) != 0)
                v644 = *(_DWORD *)(v372 + 28) & 0xFFFFFF;
              else
                v644 = 1;
              *(_DWORD *)(v14 + 7368) = v644;
              *(_QWORD *)(v8 + 28) = 0;
              *(_DWORD *)(v14 + 7380) = v642 >> 1;
              *(_QWORD *)(v14 + 7392) = 0;
              v645 = HIDWORD(v641) & 0x7FFFFFFF;
              *(_QWORD *)(v14 + 7384) = 0;
              *(_DWORD *)(v14 + 7400) = v643 >> 33;
              *(_DWORD *)(v14 + 7404) = v645;
              *(_DWORD *)(v14 + 7408) = v642 >> 1;
              *(_DWORD *)(v14 + 7412) = v642 >> 33;
              *(_QWORD *)(v14 + 7416) = -1;
              *(_QWORD *)(v14 + 7424) = -1;
              *(_QWORD *)(v14 + 7432) = -1;
              if ((_DWORD)v620 == v363)
              {
                v645 = (v622 - v623);
                *(_DWORD *)(v14 + 7404) = v645;
              }
              JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v14 + 7288), (WTF::AtomStringImpl *)(v642 >> 33), v645, v636, v637, v638, v639, v640);
              v531 = *(_QWORD *)(v14 + 7288);
              v646 = *(_DWORD *)(v14 + 7400);
              *(_DWORD *)v531 = v646;
              v647 = *(_DWORD *)(v14 + 7412);
              v648 = *(_DWORD *)(v14 + 7404);
              *(_DWORD *)(v14 + 7444) = v646;
              *(_DWORD *)(v14 + 7448) = v647;
              *(_DWORD *)(v14 + 7452) = v648;
              *(_DWORD *)(v531 + 4) = v646;
              v535 = *(_DWORD *)(v14 + 12);
              if (v619 < 0)
              {
                if (!v535)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E80960);
                }
              }
              else if (!v535)
              {
                __break(0xC471u);
                JUMPOUT(0x197E81048);
              }
              goto LABEL_515;
            }
          }
          else
          {
            v371 = 1;
            while (v370 != 0x7FFFFFFF)
            {
              v369 = ((_DWORD)v369 + v371) & v366;
              v370 = *(_DWORD *)(v365 + 16 * v369);
              ++v371;
              if (v370 == v52)
                goto LABEL_364;
            }
          }
        }
      }
    }
  }
  if (v44 <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F4CLL);
  }
  v373 = *(_DWORD *)(v45 + 720 * v16 + 10);
  v374 = v45 + 720 * v37;
  v375 = *(_DWORD *)(v374 + 10);
  *(_DWORD *)(v374 + 10) = v375 & 0xFFFFFDFF | (((v373 >> 9) & 1) << 9);
  if (*(_DWORD *)(v14 + 12) <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F54);
  }
  v376 = v37;
  v377 = (*(_DWORD *)(*(_QWORD *)v14 + 720 * v16 + 10) & 0x2000 | v10 & 0x38F80) == 0;
  v378 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v377;
  JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(v14, (uint64_t)v720, a7, a4, a5, a6, a7, a8);
  v379 = *(_QWORD *)(v14 + 7360);
  *(_BYTE *)v8 = v378;
  if (*(_DWORD *)(v14 + 12) <= v376)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F5CLL);
  }
  *(_DWORD *)(*(_QWORD *)v14 + 720 * v376 + 10) = *(_DWORD *)(*(_QWORD *)v14 + 720 * v376 + 10) & 0xFFFFFDFF | v375 & 0x200;
  if (v379)
    goto LABEL_51;
  v380 = *v50;
  if (*v50 != 38)
  {
    if (v380 != 20 && (v380 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 1, "Expected a '=>' after arrow function parameter declaration");
      goto LABEL_51;
    }
    goto LABEL_191;
  }
  v381 = *(_QWORD *)(v14 + 7288);
  if (*(_BYTE *)(v381 + 56))
    goto LABEL_191;
  v382 = *(_DWORD *)(v14 + 7400);
  v383 = *(_DWORD *)(v14 + 7412);
  v384 = *(_DWORD *)(v14 + 7404);
  *(_DWORD *)(v14 + 7444) = v382;
  *(_DWORD *)(v14 + 7448) = v383;
  *(_DWORD *)(v14 + 7452) = v384;
  *(_DWORD *)(v381 + 4) = v382;
  v385 = *(_DWORD *)(v14 + 12);
  if (!v385)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F7CLL);
  }
  v57 = v363;
  v386 = *(_BYTE *)(*(_QWORD *)v14 + 720 * (v385 - 1) + 9) & 1;
  *(_BYTE *)(v381 + 56) = 0;
  v387 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v381, (uint64_t)v50, 0, v386, a5, a6, a7, a8);
  *(_DWORD *)(v14 + 7368) = v387;
  v86 = v387 == 0;
LABEL_65:
  v87 = v694;
  v672 = v57;
  *(_QWORD *)(v14 + 7328) = v53;
  v719 = *(_OWORD *)(v14 + 7296);
  v88 = *(_OWORD *)(v14 + 7332);
  v717[0] = *(_OWORD *)v696;
  v717[1] = v88;
  v718 = *(_DWORD *)(v14 + 7348);
  v715 = (WTF::StringImpl *)0x800000000;
  *(_QWORD *)&v89 = -1;
  *((_QWORD *)&v89 + 1) = -1;
  v716[0] = v89;
  v716[1] = v89;
  v716[2] = v89;
  v716[3] = v89;
  if (*(_DWORD *)(v14 + 12) <= v694)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80AB0);
  }
  v90 = *(_QWORD *)v14 + 720 * v694;
  v91 = *(_DWORD *)(v90 + 180);
  v686 = v86;
  if (v91)
  {
    v92 = *(_QWORD *)(v90 + 168);
    v93 = v92 + 72 * v91;
    while (1)
    {
      v94 = *(unsigned int *)(v92 + 4);
      v95 = (_QWORD *)(v92 + 8);
      if ((_DWORD)v94 != 8)
        v95 = (_QWORD *)*v95;
      v96 = 0;
      while ((_DWORD)v94 != v96)
      {
        v97 = v96;
        v98 = v95[v96++];
        if (v98 != -1)
        {
          v99 = v97;
          goto LABEL_74;
        }
      }
      v99 = *(unsigned int *)(v92 + 4);
LABEL_74:
      if ((_DWORD)v94 != (_DWORD)v99)
        break;
LABEL_75:
      v92 += 72;
      if (v92 == v93)
        goto LABEL_78;
    }
    v461 = v99 | (v94 << 32);
    *(_QWORD *)v674 = v14;
    while (1)
    {
      if (*(_DWORD *)(v14 + 12) <= v87)
      {
        __break(0xC471u);
        JUMPOUT(0x197E80CF8);
      }
      v462 = v461;
      v463 = *(_QWORD *)v14;
      v464 = (WTF::StringImpl *)v95[v461];
      v465 = v463 + 720 * v87;
      if (!v464)
        break;
      *(_DWORD *)v464 += 2;
      hasDeclaredParameter = JSC::Scope::hasDeclaredParameter(v465, v464, v69, a4, a5, a6, a7, a8);
      if (*(_DWORD *)v464 == 2)
      {
        v680 = hasDeclaredParameter;
        WTF::StringImpl::~StringImpl(v464, v467, v69, a4, a5, a6, a7, a8);
        WTF::fastFree(v537, v538, v539, v540, v541, v542, v543, v544);
        if ((v680 & 1) != 0)
          goto LABEL_468;
        goto LABEL_467;
      }
      *(_DWORD *)v464 -= 2;
      if ((hasDeclaredParameter & 1) == 0)
        goto LABEL_467;
LABEL_468:
      if (HIDWORD(v462) <= (v99 + 1))
        v468 = (v99 + 1);
      else
        v468 = HIDWORD(v462);
      while ((_DWORD)v468 - 1 != (_DWORD)v99)
      {
        v99 = (v99 + 1);
        if (v95[v99] != -1)
        {
          LODWORD(v468) = v99;
          goto LABEL_474;
        }
      }
      v99 = v468;
LABEL_474:
      v461 = v99 | v462 & 0xFFFFFFFF00000000;
      LODWORD(v99) = v468;
      v87 = v694;
      v50 = v695;
      v86 = v686;
      v14 = *(_QWORD *)v674;
      if ((_DWORD)v94 == (_DWORD)v468)
        goto LABEL_75;
    }
    if ((JSC::Scope::hasDeclaredParameter(v465, 0, v69, a4, a5, a6, a7, a8) & 1) != 0)
      goto LABEL_468;
LABEL_467:
    WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)&v702, (unsigned int *)&v715, (uint64_t)v464);
    goto LABEL_468;
  }
LABEL_78:
  v100 = (__int128 *)(v14 + 7296);
  v679 = (__int128 *)(v14 + 7296);
  if ((v10 & 0x70E04) == 0)
  {
    if (v86 == 2)
    {
      *(_BYTE *)(v8 + 1) = 0;
LABEL_81:
      v101 = *(_DWORD *)(v14 + 7400);
      v102 = *(_DWORD *)(v14 + 7412);
      v103 = *(_DWORD *)(v14 + 7404);
      *(_DWORD *)(v14 + 7444) = v101;
      *(_DWORD *)(v14 + 7448) = v102;
      *(_DWORD *)(v14 + 7452) = v103;
      v104 = *(_QWORD *)(v14 + 7288);
      *(_DWORD *)(v104 + 4) = v101;
      v105 = *(_DWORD *)(v14 + 12);
      if (!v105)
      {
        __break(0xC471u);
        JUMPOUT(0x197E80AD8);
      }
      v106 = *(_BYTE *)(*(_QWORD *)v14 + 720 * (v105 - 1) + 9) & 1;
      *(_BYTE *)(v104 + 56) = 0;
      v107 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v104, (uint64_t)v50, 0, v106, a5, a6, a7, a8);
      *(_DWORD *)(v14 + 7368) = v107;
      if (v107 == 1)
      {
        v115 = v692;
        v116 = v694;
        v117 = v690;
        v121 = v686;
        v118 = v688;
        if (!*(_DWORD *)(v14 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x197E80F44);
        }
        v122 = 36;
        goto LABEL_93;
      }
      v676 = *(_DWORD *)(v14 + 7456);
      *(_DWORD *)(v14 + 7456) = 0;
      if (!*(_QWORD *)(v14 + 7520))
      {
        *(_QWORD *)v724 = 0;
        v723 = 0;
        v722 = *v100;
        v682 = *(_DWORD *)(v14 + 7316);
        v702 = *(_OWORD *)(v14 + 7320);
        ptr = *(void **)(v14 + 7336);
        v670 = *(_BYTE *)v8;
        v110 = *(int *)(v14 + 7408);
        v111 = *(int *)(v14 + 7404);
        v112 = *(int **)(v14 + 7288);
        v113 = *v112;
        v666 = v112[1];
        v668 = *(_BYTE *)(v8 + 1);
        v114 = *((_BYTE *)v112 + 56);
        while (JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(v14, (uint64_t)v720, v724, &v723, a5, a6, a7, a8))
        {
          if (!*(_QWORD *)v724)
            goto LABEL_87;
          if (v723 == 12)
          {
            v389 = *(_QWORD **)(*(_QWORD *)(v14 + 7216) + 41952);
            if (v389[3] == **(_QWORD **)v724)
            {
              v390 = *(unsigned int *)(v14 + 12);
              if (!(_DWORD)v390)
              {
                __break(0xC471u);
                JUMPOUT(0x197E80F64);
              }
              v391 = *(_QWORD *)v14;
              v392 = *(_QWORD *)v14 + 720 * (v390 - 1);
              *(_BYTE *)(v392 + 9) |= 1u;
              if (v390 <= (int)v390 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197E80F6CLL);
              }
              v393 = *(_DWORD *)(v391 + 720 * ((int)v390 - 1) + 10);
              if ((v393 & 0x800000) == 0)
                goto LABEL_707;
              if ((v393 & 0x4400) != 0 && (_DWORD)v390 != 1)
              {
                v650 = (int)v390 - 2;
                if (v650 >= v390)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E81050);
                }
                v50 = v695;
                if ((*(_BYTE *)(v391 + 720 * (int)v650 + 12) & 0x80) == 0)
                {
LABEL_707:
                  v651 = *(WTF::StringImpl ***)(v14 + 7328);
                  v108 = (WTF::StringImpl *)v389[110];
                  if (v651)
                  {
                    v652 = *v651;
                    if (v108 == v652)
                    {
                      v50 = v695;
                      if (!*(_QWORD *)(v14 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot name a function 'arguments' in strict mode");
                      goto LABEL_492;
                    }
                    if ((WTF::StringImpl *)v389[156] == v652)
                    {
                      v50 = v695;
                      if (!*(_QWORD *)(v14 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot name a function 'eval' in strict mode");
                      goto LABEL_492;
                    }
                  }
                  if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)v14, v108, v109, a4, a5, a6, a7, a8))
                  {
                    v50 = v695;
                    if (!*(_QWORD *)(v14 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot declare a variable named 'arguments' in strict mode");
                    goto LABEL_492;
                  }
                  if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)v14, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v14 + 7216) + 41952) + 1248), v109, a4, a5, a6, a7, a8))
                  {
                    v50 = v695;
                    if (!*(_QWORD *)(v14 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot declare a variable named 'eval' in strict mode");
                    goto LABEL_492;
                  }
                  v653 = *(_DWORD *)(v14 + 12);
                  if (!v653)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E81040);
                  }
                  if ((*(_BYTE *)(*(_QWORD *)v14 + 720 * (v653 - 1) + 13) & 4) != 0)
                  {
                    v50 = v695;
                    if (!*(_QWORD *)(v14 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(v14, "'use strict' directive not allowed inside a function with a non-simple parameter list");
                    goto LABEL_492;
                  }
                  v50 = v695;
                  if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(v14) & 1) == 0)
                  {
                    if (!*(_QWORD *)(v14 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Invalid parameters or function name in strict mode");
                    goto LABEL_492;
                  }
                }
              }
              v395 = *(_QWORD *)(v14 + 7288);
              *(_BYTE *)(v395 + 150) = 0;
              v396 = *(WTF::StringImpl **)(v395 + 152);
              *(_QWORD *)(v395 + 152) = 0;
              if (v396)
              {
                if (*(_DWORD *)v396 == 2)
                {
                  v665 = v395;
                  WTF::StringImpl::~StringImpl(v396, v108, v109, a4, a5, a6, a7, a8);
                  WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
                  v395 = v665;
                }
                else
                {
                  *(_DWORD *)v396 -= 2;
                }
              }
              v397 = *(_QWORD *)(v395 + 88);
              v398 = *(_QWORD *)(v395 + 96);
              *(_QWORD *)(v395 + 80) = v397 + v110;
              *(_QWORD *)(v395 + 112) = v397 + v111;
              *(_DWORD *)(v395 + 20) = 0;
              *(_DWORD *)(v395 + 36) = 0;
              if (v397 + v110 >= v398)
                v399 = 0;
              else
                v399 = *(_BYTE *)(v397 + v110);
              *(_BYTE *)(v395 + 176) = v399;
              v400 = *(_QWORD *)(v14 + 7288);
              *(_DWORD *)v400 = v113;
              *(_BYTE *)(v400 + 56) = v114;
              v401 = *(_DWORD *)(v14 + 7400);
              v402 = *(_DWORD *)(v14 + 7412);
              v403 = *(_DWORD *)(v14 + 7404);
              *(_DWORD *)(v14 + 7444) = v401;
              *(_DWORD *)(v14 + 7448) = v402;
              *(_DWORD *)(v14 + 7452) = v403;
              *(_DWORD *)(v400 + 4) = v401;
              v404 = *(_DWORD *)(v14 + 12);
              if (!v404)
              {
                __break(0xC471u);
                JUMPOUT(0x197E80F74);
              }
              *(_DWORD *)(v14 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v400, (uint64_t)v50, 0, *(_BYTE *)(*(_QWORD *)v14 + 720 * (v404 - 1) + 9) & 1, a5, a6, a7, a8);
              *(_DWORD *)(*(_QWORD *)(v14 + 7288) + 4) = v666;
              *v679 = v722;
              *(_DWORD *)(v14 + 7312) = 0;
              *(_DWORD *)(v14 + 7316) = v682;
              *(_OWORD *)(v14 + 7320) = v702;
              *(_QWORD *)(v14 + 7336) = ptr;
              *(_BYTE *)v8 = v670;
              *(_BYTE *)(v8 + 1) = v668;
              v408 = *(WTF::StringImpl **)(v14 + 7360);
              *(_QWORD *)(v14 + 7360) = 0;
              if (v408)
              {
                if (*(_DWORD *)v408 == 2)
                {
                  WTF::StringImpl::~StringImpl(v408, v405, v406, v407, a5, a6, a7, a8);
                  WTF::fastFree(v488, v489, v490, v491, v492, v493, v494, v495);
                  if (*(_QWORD *)(v14 + 7360))
                    goto LABEL_492;
                }
                else
                {
                  *(_DWORD *)v408 -= 2;
                }
              }
LABEL_87:
              while (JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(v14, (uint64_t)v720, v724, &v723, a5, a6, a7, a8));
              break;
            }
          }
          *(_QWORD *)v724 = 0;
        }
        if (!*(_QWORD *)(v14 + 7360))
        {
          v115 = v692;
          v116 = v694;
          v117 = v690;
          v118 = v688;
          v119 = (_DWORD *)(v14 + 7456);
          v100 = (__int128 *)(v14 + 7296);
          v120 = v676;
          goto LABEL_90;
        }
LABEL_492:
        if (*v50 != 20 && (*v50 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v14 + 7360))
          {
            v497 = "Cannot parse body of this arrow function";
            if (v686 == 2)
              v497 = "Cannot parse body of this function";
            *(_QWORD *)&v702 = v497;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(v14, 1, (const char **)&v702);
            v121 = v686;
            v122 = 0;
            v115 = v692;
            v116 = v694;
            v117 = v690;
            goto LABEL_502;
          }
        }
        else
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(v14);
        }
        v122 = 0;
        v115 = v692;
        v116 = v694;
        v117 = v690;
        v121 = v686;
LABEL_502:
        v118 = v688;
        v100 = (__int128 *)(v14 + 7296);
LABEL_503:
        v119 = (_DWORD *)(v14 + 7456);
        v120 = v676;
LABEL_92:
        *v119 = v120;
LABEL_93:
        *((_DWORD *)v115 + 2) = v122;
        goto LABEL_94;
      }
      v550 = v14;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(v14, v681, 0, a4, a5, a6, a7, a8))
      {
        v115 = v692;
        v116 = v694;
        v50 = v695;
        v117 = v690;
        v118 = v688;
        v119 = (_DWORD *)(v14 + 7456);
        v120 = v676;
        goto LABEL_90;
      }
      if (*v695 == 20 || (*v695 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(v14);
        v122 = 0;
        v115 = v692;
        v116 = v694;
        v50 = v695;
        v117 = v690;
        v121 = v686;
LABEL_639:
        v118 = v688;
        v100 = (__int128 *)(v14 + 7296);
        goto LABEL_503;
      }
      if (!*(_QWORD *)(v14 + 7360))
      {
        v597 = "Cannot parse body of this arrow function";
        if (v686 == 2)
          v597 = "Cannot parse body of this function";
        *(_QWORD *)&v702 = v597;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(v14, 1, (const char **)&v702);
        v121 = v686;
        v122 = 0;
        v115 = v692;
        v116 = v694;
        v50 = v695;
        v117 = v690;
        goto LABEL_639;
      }
      v122 = 0;
      v115 = v692;
      v116 = v694;
      v50 = v695;
      v117 = v690;
      v121 = v686;
      v118 = v688;
      v119 = (_DWORD *)(v14 + 7456);
      v120 = v676;
LABEL_751:
      v14 = v550;
      goto LABEL_92;
    }
    if (v86)
      goto LABEL_81;
    v119 = (_DWORD *)(v14 + 7456);
    v120 = *(_DWORD *)(v14 + 7456);
    *(_DWORD *)(v14 + 7456) = 0;
    if (*(_QWORD *)(v14 + 7520))
    {
      v550 = v14;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v14, v681))
      {
        v115 = v692;
        v116 = v694;
        v50 = v695;
        v117 = v690;
        v118 = v688;
        goto LABEL_90;
      }
      if (*v695 != 20 && (*v695 & 0x100000) == 0)
      {
        if (*(_QWORD *)(v14 + 7360))
        {
          v122 = 0;
          v115 = v692;
          v116 = v694;
          v50 = v695;
          v117 = v690;
          v121 = v686;
          v118 = v688;
          goto LABEL_751;
        }
        v551 = v14;
        goto LABEL_569;
      }
      v596 = v14;
    }
    else
    {
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v14, (uint64_t)v720))
      {
        v115 = v692;
        v116 = v694;
        v117 = v690;
        v118 = v688;
LABEL_90:
        v121 = v686;
        if (!*(_DWORD *)(v14 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x197E80AC8);
        }
        v122 = 36;
        goto LABEL_92;
      }
      if (*v50 != 20 && (*v50 & 0x100000) == 0)
      {
        if (*(_QWORD *)(v14 + 7360))
        {
LABEL_616:
          v122 = 0;
          v115 = v692;
          v116 = v694;
          v50 = v695;
          v117 = v690;
          v121 = v686;
          v118 = v688;
          goto LABEL_92;
        }
        v551 = v14;
LABEL_569:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v551, 1, "Cannot parse body of this arrow function");
        goto LABEL_616;
      }
      v596 = v14;
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(v596);
    goto LABEL_616;
  }
  v413 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(v14);
  v415 = v414;
  if (v684 == 11)
    v416 = 8;
  else
    v416 = 7;
  if ((v10 & 0x30000) != 0)
    v416 = 15;
  if ((v10 & 0x30E00) != 0)
    v417 = v416;
  else
    v417 = 1;
  if (*(_DWORD *)(v413 + 12) <= v414)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F84);
  }
  v418 = v413;
  v419 = v414;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v413 + 720 * v414, v417);
  v424 = *(unsigned int *)(v14 + 12);
  if (!(_DWORD)v424)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F8CLL);
  }
  v425 = *(_QWORD *)v14;
  if ((_DWORD)v424 != 1 && (*(_DWORD *)(v425 + 720 * (v424 - 1) + 10) & 0x400000) != 0)
  {
    v426 = 720 * v424;
    while (1)
    {
      v427 = v426 - 720;
      if (v426 == 720)
        break;
      v428 = *(_BYTE *)(v425 + v426 - 1428);
      v426 -= 720;
      if ((v428 & 0x40) != 0)
      {
        if (*(_BYTE *)(v425 + v427 - 712) != 2)
          *(_BYTE *)(v425 + 720 * (v424 - 1) + 8) = 0;
        break;
      }
    }
  }
  if (*(_DWORD *)(v418 + 12) <= v415)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F94);
  }
  v429 = *(_QWORD *)v418;
  v430 = *(_QWORD *)v418 + 720 * v419;
  *(_BYTE *)(v430 + 15) = 0;
  *(_DWORD *)(v430 + 20) = v687;
  if (v424 <= v694)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80F9CLL);
  }
  if ((*(_BYTE *)(v425 + 720 * v694 + 13) & 4) != 0)
    *(_DWORD *)(v429 + 720 * v419 + 10) = *(_DWORD *)(v429 + 720 * v419 + 10) & 0xFB7FFFFF | 0x4000000;
  v677 = v418;
  v671 = v415;
  v678 = *(_BYTE *)(v8 + 1);
  if (v686 == 2)
  {
    *(_BYTE *)(v8 + 1) = 0;
  }
  else if (!v686)
  {
    v669 = (_DWORD *)(v14 + 7456);
    v667 = *(_DWORD *)(v14 + 7456);
    *(_DWORD *)(v14 + 7456) = 0;
    v546 = v14;
    if (*(_QWORD *)(v14 + 7520))
    {
      v548 = v14;
      v547 = (_QWORD *)v681;
    }
    else
    {
      v547 = v720;
      v548 = v14;
    }
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v548, (uint64_t)v547))
    {
      if (*v695 != 20 && (*v695 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v14 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 1, "Cannot parse body of this arrow function");
          goto LABEL_655;
        }
        goto LABEL_786;
      }
LABEL_738:
      v14 = v546;
      v616 = v546;
      goto LABEL_649;
    }
LABEL_532:
    v448 = v692;
    v449 = v694;
    v50 = v695;
    v14 = v546;
    goto LABEL_446;
  }
  v431 = *(_DWORD *)(v14 + 7400);
  v432 = *(_DWORD *)(v14 + 7412);
  v433 = *(_DWORD *)(v14 + 7404);
  *(_DWORD *)(v14 + 7444) = v431;
  *(_DWORD *)(v14 + 7448) = v432;
  *(_DWORD *)(v14 + 7452) = v433;
  v434 = *(_QWORD *)(v14 + 7288);
  *(_DWORD *)(v434 + 4) = v431;
  v435 = *(_DWORD *)(v14 + 12);
  if (!v435)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80FBCLL);
  }
  v436 = *(_BYTE *)(*(_QWORD *)v14 + 720 * (v435 - 1) + 9) & 1;
  *(_BYTE *)(v434 + 56) = 0;
  v437 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v434, (uint64_t)v50, 0, v436, v420, v421, v422, v423);
  *(_DWORD *)(v14 + 7368) = v437;
  if (v437 == 1)
  {
    if (!*(_DWORD *)(v14 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197E81020);
    }
    v451 = 36;
    v448 = v692;
    v449 = v694;
    v50 = v695;
    v450 = v418;
    goto LABEL_449;
  }
  v669 = (_DWORD *)(v14 + 7456);
  v667 = *(_DWORD *)(v14 + 7456);
  *(_DWORD *)(v14 + 7456) = 0;
  if (*(_QWORD *)(v14 + 7520))
  {
    v546 = v14;
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(v14, v681, 0, v438, v439, v440, v441, v442))
    {
      if (*v695 != 20 && (*v695 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v14 + 7360))
        {
          v654 = "Cannot parse body of this arrow function";
          if (v686 == 2)
            v654 = "Cannot parse body of this function";
          *(_QWORD *)&v702 = v654;
          v618 = v14;
          goto LABEL_654;
        }
LABEL_786:
        v451 = 0;
        v448 = v692;
        v449 = v694;
        v50 = v695;
        v100 = (__int128 *)(v14 + 7296);
        v450 = v677;
        v14 = v546;
        goto LABEL_448;
      }
      goto LABEL_738;
    }
    goto LABEL_532;
  }
  *(_QWORD *)v724 = 0;
  v723 = 0;
  v722 = *v100;
  v683 = *(_DWORD *)(v14 + 7316);
  v443 = v14 + 7320;
  v702 = *(_OWORD *)(v14 + 7320);
  ptr = *(void **)(v14 + 7336);
  v663 = *(_BYTE *)(v8 + 1);
  v664 = *(_BYTE *)v8;
  v444 = *(int *)(v14 + 7408);
  v445 = *(int *)(v14 + 7404);
  v446 = *(int **)(v14 + 7288);
  v661 = *v446;
  v662 = v446[1];
  v447 = *((_BYTE *)v446 + 56);
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(v14, (uint64_t)v720, v724, &v723, v439, v440, v441, v442))
  {
LABEL_444:
    if (*(_QWORD *)(v14 + 7360))
      goto LABEL_644;
    v448 = v692;
    v449 = v694;
LABEL_446:
    v100 = v679;
    v450 = v677;
    v415 = v671;
    if (!*(_DWORD *)(v14 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197E80FACLL);
    }
    v451 = 36;
    goto LABEL_448;
  }
  while (1)
  {
    if (!*(_QWORD *)v724)
      goto LABEL_443;
    *(_QWORD *)v675 = v14;
    if (v723 == 12 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 7216) + 41952) + 24) == **(_QWORD **)v724)
      break;
    *(_QWORD *)v724 = 0;
    v50 = v695;
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(v14, (uint64_t)v720, v724, &v723, v439, v440, v441, v442))goto LABEL_444;
  }
  v566 = *(_DWORD *)(v14 + 12);
  if (!v566)
  {
    __break(0xC471u);
    JUMPOUT(0x197E81030);
  }
  v567 = *(_QWORD *)v14 + 720 * (v566 - 1);
  *(_BYTE *)(v567 + 9) |= 1u;
  if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(v14) & 1) != 0)
  {
LABEL_593:
    v570 = *(_QWORD *)(v14 + 7288);
    *(_BYTE *)(v570 + 150) = 0;
    v571 = *(WTF::StringImpl **)(v570 + 152);
    *(_QWORD *)(v570 + 152) = 0;
    if (v571)
    {
      if (*(_DWORD *)v571 == 2)
      {
        WTF::StringImpl::~StringImpl(v571, v568, v569, v438, v439, v440, v441, v442);
        WTF::fastFree(v599, v600, v601, v602, v603, v604, v605, v606);
      }
      else
      {
        *(_DWORD *)v571 -= 2;
      }
    }
    v572 = *(_QWORD *)(v570 + 88);
    v573 = *(_QWORD *)(v570 + 96);
    *(_QWORD *)(v570 + 80) = v572 + v444;
    *(_QWORD *)(v570 + 112) = v572 + v445;
    *(_DWORD *)(v570 + 20) = 0;
    *(_DWORD *)(v570 + 36) = 0;
    if (v572 + v444 >= v573)
      v574 = 0;
    else
      v574 = *(_BYTE *)(v572 + v444);
    *(_BYTE *)(v570 + 176) = v574;
    v575 = *(_QWORD *)(*(_QWORD *)v675 + 7288);
    *(_DWORD *)v575 = v661;
    *(_BYTE *)(v575 + 56) = v447;
    v576 = *(_DWORD *)(*(_QWORD *)v675 + 7400);
    v577 = *(_DWORD *)(*(_QWORD *)v675 + 7412);
    v578 = *(_DWORD *)(*(_QWORD *)v675 + 7404);
    *(_DWORD *)(*(_QWORD *)v675 + 7444) = v576;
    *(_DWORD *)(*(_QWORD *)v675 + 7448) = v577;
    *(_DWORD *)(*(_QWORD *)v675 + 7452) = v578;
    *(_DWORD *)(v575 + 4) = v576;
    v579 = *(_DWORD *)(*(_QWORD *)v675 + 12);
    if (!v579)
    {
      __break(0xC471u);
      JUMPOUT(0x197E81038);
    }
    v14 = *(_QWORD *)v675;
    v50 = v695;
    *(_DWORD *)(*(_QWORD *)v675 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v575, (uint64_t)v695, 0, *(_BYTE *)(**(_QWORD **)v675 + 720 * (v579 - 1) + 9) & 1, v439, v440, v441, v442);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v675 + 7288) + 4) = v662;
    *v679 = v722;
    *(_DWORD *)(*(_QWORD *)v675 + 7312) = 0;
    *(_DWORD *)(*(_QWORD *)v675 + 7316) = v683;
    *(_OWORD *)v443 = v702;
    *(_QWORD *)(v443 + 16) = ptr;
    *(_BYTE *)v8 = v664;
    *(_BYTE *)(v8 + 1) = v663;
    v583 = *(WTF::StringImpl **)(*(_QWORD *)v675 + 7360);
    *(_QWORD *)(*(_QWORD *)v675 + 7360) = 0;
    if (v583)
    {
      if (*(_DWORD *)v583 == 2)
      {
        WTF::StringImpl::~StringImpl(v583, v580, v581, v582, v439, v440, v441, v442);
        WTF::fastFree(v607, v608, v609, v610, v611, v612, v613, v614);
        v14 = *(_QWORD *)v675;
        v50 = v695;
        if (*(_QWORD *)(*(_QWORD *)v675 + 7360))
          goto LABEL_644;
      }
      else
      {
        *(_DWORD *)v583 -= 2;
        v50 = v695;
        v14 = *(_QWORD *)v675;
      }
    }
LABEL_443:
    while (JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(v14, (uint64_t)v720, v724, &v723, v439, v440, v441, v442));
    goto LABEL_444;
  }
  v655 = *(WTF::StringImpl ***)(v14 + 7328);
  v656 = *(_QWORD *)(*(_QWORD *)(v14 + 7216) + 41952);
  v657 = *(WTF::StringImpl **)(v656 + 880);
  if (v655)
  {
    v658 = *v655;
    if (v657 == v658)
    {
      v50 = v695;
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot name a function 'arguments' in strict mode");
      goto LABEL_644;
    }
    if (*(WTF::StringImpl **)(v656 + 1248) == v658)
    {
      v50 = v695;
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot name a function 'eval' in strict mode");
      goto LABEL_644;
    }
  }
  if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)v14, v657, v569, v438, v439, v440, v441, v442))
  {
    v50 = v695;
    if (!*(_QWORD *)(v14 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot declare a variable named 'arguments' in strict mode");
  }
  else if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)v14, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v14 + 7216) + 41952) + 1248), v659, v438, v439, v440, v441, v442))
  {
    v50 = v695;
    if (!*(_QWORD *)(v14 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Cannot declare a variable named 'eval' in strict mode");
  }
  else
  {
    v660 = *(_DWORD *)(v14 + 12);
    if (!v660)
    {
      __break(0xC471u);
      JUMPOUT(0x197E81058);
    }
    if ((*(_BYTE *)(*(_QWORD *)v14 + 720 * (v660 - 1) + 13) & 4) != 0)
    {
      v50 = v695;
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(v14, "'use strict' directive not allowed inside a function with a non-simple parameter list");
    }
    else
    {
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(v14) & 1) != 0)
        goto LABEL_593;
      v50 = v695;
      if (!*(_QWORD *)(v14 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v14, 0, "Invalid parameters or function name in strict mode");
    }
  }
LABEL_644:
  if (*v50 != 20 && (*v50 & 0x100000) == 0)
  {
    if (*(_QWORD *)(v14 + 7360))
      goto LABEL_655;
    v617 = "Cannot parse body of this arrow function";
    if (v686 == 2)
      v617 = "Cannot parse body of this function";
    *(_QWORD *)&v702 = v617;
    v618 = v14;
LABEL_654:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*>(v618, 1, (const char **)&v702);
    goto LABEL_655;
  }
  v616 = v14;
LABEL_649:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(v616);
LABEL_655:
  v451 = 0;
  v448 = v692;
  v449 = v694;
  v50 = v695;
  v100 = v679;
  v450 = v677;
  v415 = v671;
LABEL_448:
  *v669 = v667;
LABEL_449:
  *(_BYTE *)(v8 + 1) = v678;
  *((_DWORD *)v448 + 2) = v451;
  if (*(_DWORD *)(v450 + 12) <= v415)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80FA4);
  }
  if ((*(_BYTE *)(*(_QWORD *)v450 + 720 * v419 + 9) & 1) != 0)
  {
    if (*(_DWORD *)(v14 + 12) <= v449)
    {
      __break(0xC471u);
      JUMPOUT(0x197E80FB4);
    }
    *(_BYTE *)(*(_QWORD *)v14 + 720 * v449 + 9) |= 1u;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v712, (uint64_t *)v14, 0, v438, v439, v440, v441, v442);
  v459 = v713;
  if (v713)
  {
    v713 = 0;
    v714 = 0;
    WTF::fastFree((unint64_t)v459, v452, v453, v454, v455, v456, v457, v458);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v712, (WTF::AtomStringImpl *)v452, v453, v454, v455, v456, v457, v458);
  v115 = v692;
  v116 = v694;
  v117 = v690;
  v121 = v686;
  v118 = v688;
LABEL_94:
  *v100 = v719;
  *(_DWORD *)(v14 + 7312) = 0;
  *(_OWORD *)v696 = v717[0];
  *(_OWORD *)(v696 + 14) = *(_OWORD *)((char *)v717 + 14);
  if (!*((_DWORD *)v115 + 2))
  {
    if (*v50 == 20 || (*v50 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(v14);
    }
    else if (!*(_QWORD *)(v14 + 7360))
    {
      *(_QWORD *)&v702 = JSC::stringForFunctionMode();
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(v14, 1, "Cannot parse the body of this ", (const char **)&v702);
    }
    goto LABEL_519;
  }
  if (*(_DWORD *)(v14 + 12) <= v116)
  {
    __break(0xC471u);
    JUMPOUT(0x197E80AB8);
  }
  v123 = *(_QWORD *)(v14 + 7288);
  if (v118 == 2 || (*(_BYTE *)(*(_QWORD *)v14 + 720 * v116 + 9) & 1) == 0)
  {
LABEL_98:
    v124 = *(_QWORD *)(v14 + 7400);
    v125 = *(_QWORD *)(v14 + 7408);
    *((_DWORD *)v115 + 6) = *(_DWORD *)(v14 + 7380);
    if (v121)
    {
      v126 = HIDWORD(v124);
      v127 = *(_QWORD *)(v14 + 7520);
      if (v127)
      {
        LODWORD(v702) = 1;
        *(_QWORD *)((char *)&v702 + 4) = __PAIR64__(v52, v672);
        HIDWORD(v702) = v685;
        v409 = *(unsigned int *)(v127 + 12);
        if ((_DWORD)v409 == *(_DWORD *)(v127 + 8))
        {
          v410 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v127, v409 + 1, (unint64_t)&v702);
          v409 = *(unsigned int *)(v127 + 12);
          v411 = *(_QWORD *)v127;
          v412 = *v410;
        }
        else
        {
          v411 = *(_QWORD *)v127;
          v412 = v702;
        }
        *(_OWORD *)(v411 + 16 * v409) = v412;
        ++*(_DWORD *)(v127 + 12);
        v469 = *(_QWORD *)(v14 + 7520);
        v128 = v687;
        if (v469)
        {
          LODWORD(v702) = 3;
          *(_QWORD *)((char *)&v702 + 4) = __PAIR64__(v125, v124);
          HIDWORD(v702) = HIDWORD(v124);
          v470 = *(unsigned int *)(v469 + 12);
          if ((_DWORD)v470 == *(_DWORD *)(v469 + 8))
          {
            v471 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v469, v470 + 1, (unint64_t)&v702);
            v470 = *(unsigned int *)(v469 + 12);
            v472 = *(_QWORD *)v469;
            v473 = *v471;
          }
          else
          {
            v472 = *(_QWORD *)v469;
            v473 = v702;
          }
          *(_OWORD *)(v472 + 16 * v470) = v473;
          ++*(_DWORD *)(v469 + 12);
        }
        v115 = v692;
        v116 = v694;
        v117 = v690;
        v121 = v686;
LABEL_101:
        if (!*(_QWORD *)(v14 + 7464)
          || ((v129 = *((_DWORD *)v115 + 6), v121 != 2) ? (v130 = 8) : (v130 = 16),
              (int)(v129 - *((_DWORD *)v115 + 5)) <= v130))
        {
          v208 = 0;
LABEL_205:
          if (*(_DWORD *)(v14 + 12) <= v116)
          {
            __break(0xC471u);
            JUMPOUT(0x197E80AC0);
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v698, (uint64_t *)v14, 0, a4, a5, a6, a7, a8);
          v238 = v700;
          if (v700)
          {
            v700 = 0;
            v701 = 0;
            WTF::fastFree((unint64_t)v238, v108, v109, a4, a5, a6, a7, a8);
          }
          v239 = v699;
          v699 = 0;
          if (v239)
          {
            v240 = *(WTF::StringImpl ***)v239;
            if (*(_QWORD *)v239)
            {
              v347 = *((unsigned int *)v240 - 1);
              if ((_DWORD)v347)
              {
                v348 = *(WTF::StringImpl ***)v239;
                do
                {
                  v349 = *v348;
                  if (*v348 != (WTF::StringImpl *)-1)
                  {
                    if (v349)
                    {
                      *v348 = 0;
                      if (*(_DWORD *)v349 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v349, v108, v109, a4, a5, a6, a7, a8);
                        WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
                      }
                      else
                      {
                        *(_DWORD *)v349 -= 2;
                      }
                    }
                    else
                    {
                      *v348 = 0;
                    }
                  }
                  v348 += 2;
                  --v347;
                }
                while (v347);
              }
              WTF::fastFree((unint64_t)(v240 - 2), v108, v109, a4, a5, a6, a7, a8);
              v50 = v695;
            }
            WTF::fastFree((unint64_t)v239, v108, v109, a4, a5, a6, a7, a8);
          }
          v241 = v698;
          if (v698)
          {
            v313 = *((unsigned int *)v698 - 1);
            if ((_DWORD)v313)
            {
              v314 = v698;
              do
              {
                v315 = *v314;
                if (*v314 != (WTF::StringImpl *)-1)
                {
                  if (v315)
                  {
                    *v314 = 0;
                    if (*(_DWORD *)v315 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v315, v108, v109, a4, a5, a6, a7, a8);
                      WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
                    }
                    else
                    {
                      *(_DWORD *)v315 -= 2;
                    }
                  }
                  else
                  {
                    *v314 = 0;
                  }
                }
                v314 += 2;
                --v313;
              }
              while (v313);
            }
            WTF::fastFree((unint64_t)(v241 - 2), v108, v109, a4, a5, a6, a7, a8);
            v50 = v695;
          }
          if (!v686)
          {
LABEL_216:
            v249 = v692;
            if (!v208)
            {
LABEL_239:
              *((_DWORD *)v249 + 8) = *(_DWORD *)(v14 + 7444);
              v71 = 1;
              v14 = 0;
              goto LABEL_240;
            }
            v250 = *(_QWORD *)(v14 + 7464);
            v251 = *((_DWORD *)v692 + 5);
            v254 = *(_QWORD *)(v250 + 8);
            v253 = (uint64_t *)(v250 + 8);
            v252 = v254;
            if (v254
              || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v253, 8u, 0), v249 = v692, (v252 = *v253) != 0))
            {
              v255 = *(_DWORD *)(v252 - 8);
            }
            else
            {
              v255 = 0;
            }
            v256 = 9 * ((v251 + ~(v251 << 15)) ^ ((v251 + ~(v251 << 15)) >> 10));
            v257 = (v256 ^ (v256 >> 6)) + ~((v256 ^ (v256 >> 6)) << 11);
            v258 = v255 & (v257 ^ HIWORD(v257));
            v259 = v252 + 16 * v258;
            v260 = *(_DWORD *)v259;
            if (*(_DWORD *)v259 != 0x7FFFFFFF)
            {
              v282 = 0;
              v283 = 1;
              while (v260 != v251)
              {
                if (v260 == 2147483646)
                  v282 = v259;
                v258 = (v258 + v283) & v255;
                v259 = v252 + 16 * v258;
                v260 = *(_DWORD *)v259;
                ++v283;
                if (*(_DWORD *)v259 == 0x7FFFFFFF)
                {
                  if (v282)
                  {
                    *(_DWORD *)v282 = 0x7FFFFFFF;
                    *(_QWORD *)(v282 + 8) = 0;
                    --*(_DWORD *)(*v253 - 16);
                    v259 = v282;
                  }
                  goto LABEL_220;
                }
              }
              v552 = *(unsigned int *)(v208 + 24);
              if ((_DWORD)v552)
              {
                v553 = 0;
                v554 = (unsigned int *)(v208 + 33);
                do
                {
                  v555 = (WTF::StringImpl *)(*v554 | ((unint64_t)*((unsigned __int8 *)v554 + 4) << 32));
                  if (*(_DWORD *)v555 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v555, v108, v109, a4, a5, a6, a7, a8);
                    WTF::fastFree(v556, v557, v558, v559, v560, v561, v562, v563);
                    v552 = *(unsigned int *)(v208 + 24);
                  }
                  else
                  {
                    *(_DWORD *)v555 -= 2;
                  }
                  ++v553;
                  v554 = (unsigned int *)((char *)v554 + 5);
                }
                while (v553 < v552);
              }
              WTF::fastFree(v208, v108, v109, a4, a5, a6, a7, a8);
              goto LABEL_325;
            }
LABEL_220:
            *(_DWORD *)v259 = v251;
            v261 = *(_QWORD *)(v259 + 8);
            *(_QWORD *)(v259 + 8) = v208;
            if (!v261)
            {
LABEL_233:
              v276 = *v253;
              if (*v253)
                v277 = *(_DWORD *)(v276 - 12) + 1;
              else
                v277 = 1;
              *(_DWORD *)(v276 - 12) = v277;
              v278 = *v253;
              if (*v253)
                v279 = *(_DWORD *)(v278 - 12);
              else
                v279 = 0;
              v280 = (*(_DWORD *)(v278 - 16) + v279);
              v281 = *(unsigned int *)(v278 - 4);
              if (v281 > 0x400)
              {
                if (v281 > 2 * v280)
                  goto LABEL_239;
              }
              else
              {
                if (3 * v281 > 4 * v280)
                  goto LABEL_239;
                if (!(_DWORD)v281)
                {
                  v327 = 8;
                  goto LABEL_324;
                }
              }
              v327 = (_DWORD)v281 << (6 * *(_DWORD *)(v278 - 12) >= (2 * v281));
LABEL_324:
              WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v253, v327, (int *)v259);
LABEL_325:
              v249 = v692;
              goto LABEL_239;
            }
            v262 = *(unsigned int *)(v261 + 24);
            if ((_DWORD)v262)
            {
              v263 = 0;
              v264 = (unsigned int *)(v261 + 33);
              do
              {
                v265 = (WTF::StringImpl *)(*v264 | ((unint64_t)*((unsigned __int8 *)v264 + 4) << 32));
                if (*(_DWORD *)v265 == 2)
                {
                  WTF::StringImpl::~StringImpl(v265, v108, v109, a4, a5, a6, a7, a8);
                  WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
                  v249 = v692;
                  v262 = *(unsigned int *)(v261 + 24);
                }
                else
                {
                  *(_DWORD *)v265 -= 2;
                }
                ++v263;
                v264 = (unsigned int *)((char *)v264 + 5);
              }
              while (v263 < v262);
            }
            v274 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (v274)
            {
              if (!(v261 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v261 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v261)) & 1) != 0)
              {
                goto LABEL_231;
              }
              if (v261 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v261 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v261 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v261) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                {
LABEL_231:
                  v275 = *(unsigned int *)(v274 + 8000);
                  if (v275 < 0x3E7)
                  {
                    *(_QWORD *)(v274 + 8 * v275) = v261 | 0x5000000000000;
                    *(_DWORD *)(v274 + 8000) = v275 + 1;
                    goto LABEL_233;
                  }
                  pas_thread_local_cache_append_deallocation_slow(v274, v261, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                  goto LABEL_406;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v274, v261, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v261, (uint64_t)&bmalloc_heap_config, 1);
            }
LABEL_406:
            v249 = v692;
            goto LABEL_233;
          }
          v242 = *v50;
          if (*v50 == 1)
          {
            v243 = *(_DWORD *)(v14 + 7400);
            v244 = *(_DWORD *)(v14 + 7412);
            v245 = *(_DWORD *)(v14 + 7404);
            *(_DWORD *)(v14 + 7444) = v243;
            *(_DWORD *)(v14 + 7448) = v244;
            *(_DWORD *)(v14 + 7452) = v245;
            v246 = *(_QWORD *)(v14 + 7288);
            *(_DWORD *)(v246 + 4) = v243;
            v247 = *(_DWORD *)(v14 + 12);
            if (!v247)
            {
              __break(0xC471u);
              JUMPOUT(0x197E80AD0);
            }
            v248 = *(_BYTE *)(*(_QWORD *)v14 + 720 * (v247 - 1) + 9) & 1;
            *(_BYTE *)(v246 + 56) = 0;
            *(_DWORD *)(v14 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v246, (uint64_t)v50, 0, v248, a5, a6, a7, a8);
            goto LABEL_216;
          }
          if (v242 == 20 || (v242 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(v14);
          }
          else if (!*(_QWORD *)(v14 + 7360))
          {
            *(_QWORD *)&v702 = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],char const*,char const(&)[6]>(v14, (const char **)&v702);
          }
          if (v208)
          {
            v584 = *(unsigned int *)(v208 + 24);
            if ((_DWORD)v584)
            {
              v585 = 0;
              v586 = (unsigned int *)(v208 + 33);
              do
              {
                v587 = (WTF::StringImpl *)(*v586 | ((unint64_t)*((unsigned __int8 *)v586 + 4) << 32));
                if (*(_DWORD *)v587 == 2)
                {
                  WTF::StringImpl::~StringImpl(v587, v108, v109, a4, a5, a6, a7, a8);
                  WTF::fastFree(v588, v589, v590, v591, v592, v593, v594, v595);
                  v584 = *(unsigned int *)(v208 + 24);
                }
                else
                {
                  *(_DWORD *)v587 -= 2;
                }
                ++v585;
                v586 = (unsigned int *)((char *)v586 + 5);
              }
              while (v585 < v584);
            }
            WTF::fastFree(v208, v108, v109, a4, a5, a6, a7, a8);
          }
          v14 = 0;
          goto LABEL_519;
        }
        LOWORD(v704) = 0;
        v131 = (WTF *)v707;
        v705 = (WTF *)v707;
        v706 = 8;
        v708 = 1;
        v132 = v711 & 0xE0;
        v711 &= 0xE0u;
        LODWORD(v702) = v124;
        *(_QWORD *)((char *)&v702 + 4) = v125;
        HIDWORD(v702) = v126;
        ptr = (void *)__PAIR64__(*((_DWORD *)v115 + 3), v129);
        v709 = v117;
        v710 = v128;
        if (!v121)
        {
          v132 |= 0x10u;
          v711 = v132;
          v708 = *v50;
        }
        if (*(_DWORD *)(v14 + 12) <= v116)
        {
          __break(0xC471u);
          JUMPOUT(0x197E80AE0);
        }
        v133 = v716;
        v134 = *(_QWORD *)v14;
        v135 = *(_QWORD *)v14 + 720 * v116;
        v711 = *(_BYTE *)(v135 + 10) & 2 | v132;
        v711 = v711 & 0xFB | (4 * ((*(_BYTE *)(v135 + 10) & 4) != 0));
        LOBYTE(v704) = *(_BYTE *)(v135 + 9);
        v711 = v711 & 0xFE | ((*(_BYTE *)(v135 + 10) & 8) != 0);
        BYTE1(v704) = *(_BYTE *)(v135 + 32);
        v711 = (*(_BYTE *)(v135 + 10) >> 2) & 8 | v711 & 0xF7;
        v136 = *(_DWORD *)(v135 + 180);
        if (v136)
        {
          v137 = *(_QWORD *)(v135 + 168);
          v138 = v134 + 720 * v116;
          v139 = (_QWORD *)(v138 + 120);
          v140 = (uint64_t *)(v138 + 144);
          v689 = (uint64_t *)(v138 + 144);
          v691 = v137 + 72 * v136;
          *(_QWORD *)v673 = v14;
          while (1)
          {
            v141 = 0;
            v142 = *(unsigned int *)(v137 + 4);
            v143 = (_DWORD)v142 == 8 ? v137 + 8 : *(_QWORD *)(v137 + 8);
            while ((_DWORD)v142 != v141)
            {
              v144 = v141;
              v145 = *(_QWORD *)(v143 + 8 * v141++);
              if (v145 != -1)
              {
                v146 = v144;
                goto LABEL_117;
              }
            }
            v146 = *(unsigned int *)(v137 + 4);
LABEL_117:
            if ((_DWORD)v142 != (_DWORD)v146)
              break;
LABEL_161:
            v137 += 72;
            if (v137 == v691)
              goto LABEL_166;
          }
          v147 = v146 | (v142 << 32);
          while (1)
          {
            v148 = *(int **)(v143 + 8 * v147);
            *(_QWORD *)&v722 = v148;
            if (v148)
              *v148 += 2;
            v149 = *v139;
            if (*v139)
            {
              v150 = v148[4];
              if ((v150 & 0x20) != 0)
                v150 = v148[8];
              v151 = *(_DWORD *)(v149 - 8);
              v152 = v151 & (v150 >> 8);
              v153 = *(int **)(v149 + 16 * v152);
              if (v153 == v148)
              {
LABEL_129:
                if (*v148 != 2)
                {
                  *v148 -= 2;
                  goto LABEL_148;
                }
                v187 = v131;
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v148, v108, v109, a4, a5, a6, a7, a8);
                WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
                goto LABEL_165;
              }
              v154 = 1;
              while (v153)
              {
                v152 = (v152 + v154) & v151;
                v153 = *(int **)(v149 + 16 * v152);
                ++v154;
                if (v153 == v148)
                {
                  if (!v148)
                    goto LABEL_148;
                  goto LABEL_129;
                }
              }
            }
            if (v148)
              *v148 += 2;
            v155 = *v140;
            if (*v140)
            {
              v156 = v148[4];
              if ((v156 & 0x20) != 0)
                v156 = v148[8];
              v157 = *(_DWORD *)(v155 - 8);
              v158 = v157 & (v156 >> 8);
              v159 = *(int **)(v155 + 16 * v158);
              if (v159 == v148)
              {
LABEL_141:
                v161 = 1;
                goto LABEL_144;
              }
              v160 = 1;
              while (v159)
              {
                v158 = (v158 + v160) & v157;
                v159 = *(int **)(v155 + 16 * v158);
                ++v160;
                if (v159 == v148)
                {
                  if (!v148)
                    goto LABEL_148;
                  goto LABEL_141;
                }
              }
            }
            if (!v148)
              goto LABEL_375;
            v161 = 0;
LABEL_144:
            v162 = *v148 - 2;
            if (*v148 == 2)
            {
              v165 = v139;
              v166 = v133;
              v167 = v131;
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v148, v108, v109, a4, a5, a6, a7, a8);
              WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
              v140 = v689;
              v131 = v167;
              v133 = v166;
              v139 = v165;
              v14 = *(_QWORD *)v673;
              v116 = v694;
              v162 = *v148;
            }
            else
            {
              *v148 = v162;
            }
            v163 = v162 - 2;
            if (v163)
            {
              *v148 = v163;
              if ((v161 & 1) != 0)
                goto LABEL_148;
            }
            else
            {
              v176 = v139;
              v177 = v133;
              v178 = v131;
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v148, v108, v109, a4, a5, a6, a7, a8);
              WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
              v140 = v689;
              v131 = v178;
              v133 = v177;
              v139 = v176;
              v14 = *(_QWORD *)v673;
              v116 = v694;
              if ((v161 & 1) != 0)
                goto LABEL_148;
            }
LABEL_375:
            v388 = HIDWORD(v706);
            if (HIDWORD(v706) == (_DWORD)v706)
            {
              v187 = v131;
              WTF::Vector<WTF::UniquedStringImpl *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *&>((uint64_t)&v705, (unint64_t)&v722);
LABEL_165:
              v140 = v689;
              v131 = v187;
              v116 = v694;
              goto LABEL_148;
            }
            *((_QWORD *)v705 + HIDWORD(v706)) = v722;
            HIDWORD(v706) = v388 + 1;
LABEL_148:
            if (HIDWORD(v147) <= (v146 + 1))
              v164 = (v146 + 1);
            else
              v164 = HIDWORD(v147);
            v50 = v695;
            while ((_DWORD)v164 - 1 != (_DWORD)v146)
            {
              v146 = (v146 + 1);
              if (*(_QWORD *)(v143 + 8 * v146) != -1)
              {
                LODWORD(v164) = v146;
                goto LABEL_155;
              }
            }
            v146 = v164;
LABEL_155:
            v147 = v146 | v147 & 0xFFFFFFFF00000000;
            LODWORD(v146) = v164;
            if ((_DWORD)v142 == (_DWORD)v164)
              goto LABEL_161;
          }
        }
LABEL_166:
        v196 = 0;
        v197 = HIDWORD(v715);
        if (HIDWORD(v715) == 8)
          v198 = v133;
        else
          v198 = *(_OWORD **)&v716[0];
        while (HIDWORD(v715) != v196)
        {
          v199 = v196;
          v200 = *((_QWORD *)v198 + v196++);
          if (v200 != -1)
          {
            v201 = v199;
            goto LABEL_172;
          }
        }
        v201 = HIDWORD(v715);
LABEL_172:
        if (HIDWORD(v715) != (_DWORD)v201)
        {
          v358 = v201 | ((unint64_t)HIDWORD(v715) << 32);
          do
          {
            v359 = *((_QWORD *)v198 + v358);
            *(_QWORD *)&v722 = v359;
            v360 = HIDWORD(v706);
            if (HIDWORD(v706) == (_DWORD)v706)
            {
              v545 = v131;
              WTF::Vector<WTF::UniquedStringImpl *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *&>((uint64_t)&v705, (unint64_t)&v722);
              v131 = v545;
              v116 = v694;
            }
            else
            {
              *((_QWORD *)v705 + HIDWORD(v706)) = v359;
              HIDWORD(v706) = v360 + 1;
            }
            if (HIDWORD(v358) <= (v201 + 1))
              v361 = (v201 + 1);
            else
              v361 = HIDWORD(v358);
            while ((_DWORD)v361 - 1 != (_DWORD)v201)
            {
              v201 = (v201 + 1);
              if (*((_QWORD *)v198 + v201) != -1)
              {
                LODWORD(v361) = v201;
                goto LABEL_349;
              }
            }
            v201 = v361;
LABEL_349:
            v358 = v201 | v358 & 0xFFFFFFFF00000000;
            LODWORD(v201) = v361;
          }
          while (v197 != (_DWORD)v361);
        }
        v202 = 8 * HIDWORD(v706);
        v203 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v203)
          goto LABEL_177;
        v204 = (unint64_t)(v202 + 51) >> 4;
        if (HIDWORD(v706) <= 0x2F)
        {
          v205 = 23 * v204 + 7;
        }
        else if (HIDWORD(v706) > 0x4DD
               || (v205 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v204 + 626),
                   *(_DWORD *)(v203 + 8052) <= v205))
        {
LABEL_177:
          v206 = v131;
          casual = bmalloc_allocate_casual(v202 + 36, 1);
          v131 = v206;
          v116 = v694;
          v208 = casual;
LABEL_196:
          v215 = *(_QWORD *)(v208 + 8);
          v216 = *(_QWORD *)(v208 + 16);
          v217 = *(_QWORD *)v208 & 0xFFFFFFFFFFFFFFFELL | v711 & 1;
          *(_QWORD *)v208 = v217;
          v218 = v217 & 0xFFFFFFFF00000001 | (2 * (_DWORD)ptr);
          *(_QWORD *)v208 = v218;
          v219 = v218 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v711 & 2) != 0) << 32);
          *(_QWORD *)v208 = v219;
          v220 = v219 & 0x1FFFFFFFFLL | ((unint64_t)v702 << 33);
          *(_QWORD *)v208 = v220;
          v221 = v215 & 0xFFFFFFFFFFFFFFFELL | v704 & 1;
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v221;
          v222 = v221 & 0xFFFFFFFF00000001 | (2 * (DWORD1(v702) & 0x7FFFFFFF));
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v222;
          v223 = v222 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v710 & 1) << 32);
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v223;
          v224 = v223 & 0x1FFFFFFFFLL | ((unint64_t)DWORD2(v702) << 33);
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v224;
          v225 = v216 & 0xFFFFFFFFFFFFFFFELL | (v711 >> 3) & 1;
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v224;
          *(_QWORD *)(v208 + 16) = v225;
          v226 = v225 & 0xFFFFFFFF00000001 | (2 * (HIDWORD(ptr) & 0x7FFFFFFF));
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v224;
          *(_QWORD *)(v208 + 16) = v226;
          v227 = v226 & 0x80000000FFFFFFFFLL | ((unint64_t)(HIDWORD(v702) & 0x7FFFFFFF) << 32);
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v224;
          *(_QWORD *)(v208 + 16) = v227;
          v228 = v227 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(v711 >> 4) << 63);
          *(_QWORD *)v208 = v220;
          *(_QWORD *)(v208 + 8) = v224;
          *(_QWORD *)(v208 + 16) = v228;
          v229 = HIDWORD(v706);
          *(_DWORD *)(v208 + 24) = HIDWORD(v706);
          v230 = *(_DWORD *)(v208 + 28) & 0xC0000000 | ((unint64_t)*(unsigned __int8 *)(v208 + 32) << 32) | v708 & 0xFFFFFFLL | ((unint64_t)(BYTE1(v704) & 0x3F) << 24);
          *(_DWORD *)(v208 + 28) = *(_DWORD *)(v208 + 28) & 0xC0000000 | v708 & 0xFFFFFF | ((BYTE1(v704) & 0x3F) << 24);
          v231 = v230 & 0xFFFFFFFF3FFFFFFFLL | ((unint64_t)(v709 & 3) << 30);
          *(_DWORD *)(v208 + 28) = v231;
          v232 = v231 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v711 >> 2) & 1) << 32);
          *(_DWORD *)(v208 + 28) = v231;
          *(_BYTE *)(v208 + 32) = BYTE4(v232);
          if ((_DWORD)v229)
          {
            v233 = 0;
            v234 = v208 + 33;
            do
            {
              if (v233 >= HIDWORD(v706))
              {
                __break(0xC471u);
                JUMPOUT(0x197E80A64);
              }
              v235 = (_DWORD *)*((_QWORD *)v705 + v233);
              *v235 += 2;
              *(_BYTE *)(v234 + 4) = BYTE4(v235);
              *(_DWORD *)v234 = (_DWORD)v235;
              v234 += 5;
              ++v233;
            }
            while (v229 != v233);
          }
          v236 = v705;
          if (v131 != v705 && v705 != 0)
          {
            v705 = 0;
            LODWORD(v706) = 0;
            WTF::fastFree((unint64_t)v236, v108, v109, a4, a5, a6, a7, a8);
            v116 = v694;
          }
          goto LABEL_205;
        }
        v212 = v203 + 8 * v205;
        v213 = v212 + 8064;
        *(_BYTE *)(v212 + 8064) = 1;
        v214 = *(unsigned int *)(v212 + 8080);
        if ((_DWORD)v214)
        {
          *(_DWORD *)(v213 + 16) = v214 - *(_DWORD *)(v213 + 20);
          v208 = *(_QWORD *)(v213 + 8) - v214;
        }
        else
        {
          v284 = *(_QWORD *)(v213 + 40);
          v285 = *(_QWORD *)(v213 + 24);
          if (!v284)
          {
            if (*(_BYTE *)(v213 + 5) == 6)
            {
              v474 = *(unsigned int *)(v213 + 32);
              v475 = *(_DWORD *)(v213 + 36);
              if (v474 < v475)
              {
                *(_QWORD *)(v213 + 8 * v474 + 56) = 0;
                v476 = (unint64_t *)(8 * v205 + 8 * v474 + v203 + 8128);
                v477 = v475 - 1 - v474;
                while (v477)
                {
                  v285 += 1024;
                  v479 = *v476++;
                  v478 = v479;
                  LODWORD(v474) = v474 + 1;
                  --v477;
                  if (v479)
                  {
                    v284 = __rbit64(v478);
                    *(_DWORD *)(v213 + 32) = v474;
                    *(_QWORD *)(v213 + 24) = v285;
                    v116 = v694;
                    v50 = v695;
                    goto LABEL_252;
                  }
                }
                *(_DWORD *)(v213 + 32) = v475;
                v50 = v695;
              }
            }
            *(_BYTE *)v213 = 0;
            goto LABEL_177;
          }
LABEL_252:
          v286 = __clz(v284);
          *(_QWORD *)(v213 + 40) = v284 & ~(0x8000000000000000 >> v286);
          v208 = v285 + 16 * v286;
        }
        *(_BYTE *)v213 = 0;
        goto LABEL_196;
      }
    }
    else
    {
      LODWORD(v124) = *(_DWORD *)(v123 + 132);
      LODWORD(v126) = *(_DWORD *)(v123 + 136);
      v125 = *(_QWORD *)(v123 + 140);
      *((_DWORD *)v115 + 6) = HIDWORD(v125);
    }
    v128 = v687;
    goto LABEL_101;
  }
  if ((v10 & 0x100067) == 0 && (v10 & 0x30E00) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E7FF78);
  }
  v324 = *(_QWORD *)(*(_QWORD *)(v14 + 7216) + 41952);
  v325 = **v115;
  if (*(_QWORD *)(v324 + 880) == v325)
  {
    if (!*(_QWORD *)(v14 + 7360))
    {
      *(_QWORD *)&v702 = *(_QWORD *)(v324 + 880);
      v326 = v14;
      goto LABEL_518;
    }
    v71 = 0;
  }
  else
  {
    if (*(_QWORD *)(v324 + 1248) != v325)
      goto LABEL_98;
    if (!*(_QWORD *)(v14 + 7360))
    {
      *(_QWORD *)&v702 = **v115;
      v326 = v14;
LABEL_518:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[46]>(v326, (uint64_t *)&v702);
LABEL_519:
      v71 = 0;
      goto LABEL_240;
    }
    v71 = 0;
  }
LABEL_240:
  if (HIDWORD(v715) != 8)
    WTF::fastFree(*(unint64_t *)&v716[0], v108, v109, a4, a5, a6, a7, a8);
  *(_DWORD *)v696 = v693;
  if (v14)
  {
LABEL_52:
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v702, (uint64_t *)v14, 0, a4, a5, a6, a7, a8);
    if (v704)
      WTF::fastFree((unint64_t)v704, v72, v73, v74, v75, v76, v77, v78);
    v79 = (unint64_t)ptr;
    if (!ptr)
      goto LABEL_61;
    v80 = *(WTF::StringImpl ***)ptr;
    if (*(_QWORD *)ptr)
    {
      v328 = *((unsigned int *)v80 - 1);
      if ((_DWORD)v328)
      {
        v329 = *(WTF::StringImpl ***)ptr;
        do
        {
          v330 = *v329;
          if (*v329 != (WTF::StringImpl *)-1)
          {
            if (v330)
            {
              *v329 = 0;
              if (*(_DWORD *)v330 == 2)
              {
                WTF::StringImpl::~StringImpl(v330, (WTF::AtomStringImpl *)v72, v73, v74, v75, v76, v77, v78);
                WTF::fastFree(v331, v332, v333, v334, v335, v336, v337, v338);
              }
              else
              {
                *(_DWORD *)v330 -= 2;
              }
            }
            else
            {
              *v329 = 0;
            }
          }
          v329 += 2;
          --v328;
        }
        while (v328);
      }
      WTF::fastFree((unint64_t)(v80 - 2), v72, v73, v74, v75, v76, v77, v78);
    }
    v81 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v81)
    {
      pas_try_deallocate_slow_no_cache(v79, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_61;
    }
    if (!(v79 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v79 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v79)) & 1) != 0)
    {
LABEL_59:
      v82 = *(unsigned int *)(v81 + 8000);
      if (v82 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v81, v79, (os_unfair_lock_s *)5, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_QWORD *)(v81 + 8 * v82) = v79 | 0x5000000000000;
        *(_DWORD *)(v81 + 8000) = v82 + 1;
      }
LABEL_61:
      v83 = v702;
      if ((_QWORD)v702)
      {
        v287 = *(unsigned int *)(v702 - 4);
        if ((_DWORD)v287)
        {
          v288 = (WTF::StringImpl **)v702;
          do
          {
            v289 = *v288;
            if (*v288 != (WTF::StringImpl *)-1)
            {
              if (v289)
              {
                *v288 = 0;
                if (*(_DWORD *)v289 == 2)
                {
                  WTF::StringImpl::~StringImpl(v289, (WTF::AtomStringImpl *)v72, v73, v74, v75, v76, v77, v78);
                  WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
                }
                else
                {
                  *(_DWORD *)v289 -= 2;
                }
              }
              else
              {
                *v288 = 0;
              }
            }
            v288 += 2;
            --v287;
          }
          while (v287);
        }
        WTF::fastFree(v83 - 16, v72, v73, v74, v75, v76, v77, v78);
      }
      return v71;
    }
    if (v79 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v79 >> 24)
    {
      v74 = 0;
    }
    else
    {
      v74 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v79 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v79) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v74 == 1)
        goto LABEL_59;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v81, v79, 1, v74, v75, v76, v77, v78);
    goto LABEL_61;
  }
  return v71;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  const char *v67;
  const char *v68;
  const char *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  int v95;
  const char *v96;
  BOOL isAllowedIdentifierLet;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  BOOL isAllowedIdentifierYield;
  int v104;
  unsigned int v105;
  uint64_t v106;
  const char *v107;
  int v108;
  uint64_t v109;
  const char *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  _BOOL4 v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  const char *Range;
  uint64_t v146;
  const char *v147;
  unsigned __int8 v148;

  v8 = (_BYTE *)(a1 + 7344);
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E81B38);
  }
  if (v9 == 20)
    return;
  v14 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 0;
  v15 = a1 + 7368;
  v16 = *(_DWORD *)(a1 + 7368);
  if ((v10 & 0x840) != 0)
  {
    if (v16 == 12)
      goto LABEL_174;
    v10 = v14;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v16, *(_QWORD **)(a1 + 7376));
    v102 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v102, *(_QWORD **)(a1 + 7376)), v102 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if (v102 != 2)
        goto LABEL_174;
    }
    else
    {
      if (v102 == 546)
        goto LABEL_174;
      if (v102 != 2)
      {
        if (v102 != 1048592
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
        {
          v104 = *(_DWORD *)(a1 + 12);
          if (!v104)
          {
            __break(0xC471u);
            JUMPOUT(0x197E82944);
          }
          v105 = v104 - 1;
          if (v102 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v105 + 9) & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_103;
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v146 = v106;
            v147 = JSC::stringForFunctionMode();
LABEL_98:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&Range, &v147);
            goto LABEL_103;
          }
          if ((v102 - 531) <= 1)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_103;
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v146 = v142;
            v147 = JSC::stringForFunctionMode();
LABEL_140:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v147);
            goto LABEL_103;
          }
          if ((v102 & 0x200) != 0)
          {
            if ((v102 - 544) >= 3)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_103;
              Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              v146 = v143;
              v147 = JSC::stringForFunctionMode();
              goto LABEL_168;
            }
            if (v102 == 544)
            {
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v105 + 9) & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_103;
                Range = JSC::stringForFunctionMode();
                goto LABEL_218;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v105 + 9) & 1) != 0
                   || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v105 + 11) & 2) != 0)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_103;
              Range = JSC::stringForFunctionMode();
              v147 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
              goto LABEL_201;
            }
          }
          if (v102 != 20 && (v102 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
            goto LABEL_103;
          }
          goto LABEL_384;
        }
LABEL_174:
        *(_DWORD *)(a3 + 12) = 1;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, 0, 0, 0))goto LABEL_103;
        if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
          goto LABEL_103;
        }
        goto LABEL_290;
      }
    }
    v111 = *(_DWORD *)(a1 + 7400);
    v112 = *(_DWORD *)(a1 + 7412);
    v113 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v111;
    *(_DWORD *)(a1 + 7448) = v112;
    *(_DWORD *)(a1 + 7452) = v113;
    v114 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v114 + 4) = v111;
    v115 = *(_DWORD *)(a1 + 12);
    if (!v115)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8294CLL);
    }
    v14 = 720;
    v116 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v115 - 1) + 9) & 1;
    *(_BYTE *)(v114 + 56) = 0;
    v117 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v114, v15, 0, v116, v98, v99, v100, v101);
    *(_DWORD *)(a1 + 7368) = v117;
    if (v117 != 3)
    {
      LOBYTE(v8) = 0;
      v148 = 0;
      Range = 0;
      goto LABEL_326;
    }
    *(_DWORD *)(a3 + 12) = 0;
    goto LABEL_317;
  }
  if (v16 != 2)
  {
    LODWORD(v46) = *(_DWORD *)(a1 + 12);
    if (!(_DWORD)v46)
    {
      __break(0xC471u);
      goto LABEL_345;
    }
    v47 = v46 - 1;
    v48 = *(_QWORD *)a1;
    v49 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9);
    if ((v49 & 1) != 0 && v16 == 532)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_103;
      v50 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v51 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      if (v52 <= v15)
      {
        v46 = 0x100000000;
        v51 = "";
        goto LABEL_65;
      }
      LODWORD(v46) = a3 - v15;
      if ((int)v52 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v46) = v52 - v15;
        if (!(_DWORD)v15)
        {
          v46 = v52;
          goto LABEL_65;
        }
      }
      v46 = v46;
      v53 = v52 - v15;
      if ((v52 & 0xFF00000000) != 0)
      {
        if (v53 >= v46)
        {
          v51 += v15;
          v46 = v46 | 0x100000000;
LABEL_65:
          Range = v51;
          v146 = v46;
          v68 = "getter";
          switch(v9)
          {
            case 0:
              v68 = "function";
              break;
            case 1:
            case 2:
              v68 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v68 = "setter";
              break;
            case 5:
              v68 = "method";
              break;
            case 6:
              v68 = "arrow function";
              break;
            case 7:
            case 9:
              v68 = "async function";
              break;
            case 8:
            case 11:
              v68 = "async arrow function";
              break;
            case 10:
              v68 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E82138);
            case 15:
            case 16:
              v68 = "async generator function";
              break;
            case 17:
              v68 = "async generator method";
              break;
            case 18:
              v68 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E82178);
          }
          v147 = v68;
          goto LABEL_98;
        }
      }
      else if (v53 >= v46)
      {
        v51 += 2 * v15;
        goto LABEL_65;
      }
      goto LABEL_345;
    }
    if ((v16 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_103;
      v56 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v57 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
      if (v58 <= v15)
      {
        v46 = 0x100000000;
        v57 = "";
        goto LABEL_83;
      }
      LODWORD(v46) = a3 - v15;
      if ((int)v58 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v46) = v58 - v15;
        if (!(_DWORD)v15)
        {
          v46 = v58;
          goto LABEL_83;
        }
      }
      v46 = v46;
      v59 = v58 - v15;
      if ((v58 & 0xFF00000000) != 0)
      {
        if (v59 >= v46)
        {
          v57 += v15;
          v46 = v46 | 0x100000000;
LABEL_83:
          Range = v57;
          v146 = v46;
          v72 = "getter";
          switch(v9)
          {
            case 0:
              v72 = "function";
              break;
            case 1:
            case 2:
              v72 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v72 = "setter";
              break;
            case 5:
              v72 = "method";
              break;
            case 6:
              v72 = "arrow function";
              break;
            case 7:
            case 9:
              v72 = "async function";
              break;
            case 8:
            case 11:
              v72 = "async arrow function";
              break;
            case 10:
              v72 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E82158);
            case 15:
            case 16:
              v72 = "async generator function";
              break;
            case 17:
              v72 = "async generator method";
              break;
            case 18:
              v72 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E82244);
          }
          v147 = v72;
          goto LABEL_140;
        }
      }
      else if (v59 >= v46)
      {
        v57 += 2 * v15;
        goto LABEL_83;
      }
LABEL_345:
      __break(1u);
LABEL_346:
      v133 = *(_DWORD *)(a1 + 12);
      if (!v133)
      {
        __break(0xC471u);
        JUMPOUT(0x197E82964);
      }
      v134 = *(_QWORD *)a1 + (v133 - 1) * (unint64_t)v14;
      *(_DWORD *)(v134 + 10) = *(_DWORD *)(v134 + 10) & 0xFB7FFFFF | 0x4000000;
      while ((v46 & 1) == 0)
      {
        if ((v8 & 1) == 0)
          ++*(_DWORD *)(a3 + 12);
        v126 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 != 6)
          goto LABEL_352;
        v127 = *(_DWORD *)(a1 + 7400);
        v128 = *(_DWORD *)(a1 + 7412);
        v129 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v127;
        *(_DWORD *)(a1 + 7448) = v128;
        *(_DWORD *)(a1 + 7452) = v129;
        v130 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v130 + 4) = v127;
        v131 = *(_DWORD *)(a1 + 12);
        if (!v131)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8295CLL);
        }
        v132 = *(_BYTE *)(*(_QWORD *)a1 + (v131 - 1) * (unint64_t)v14 + 9) & 1;
        *(_BYTE *)(v130 + 56) = 0;
        v117 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v130, v15, 0, v132, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v117;
LABEL_326:
        if (v117 == 37)
        {
          v135 = *(_DWORD *)(a1 + 7400);
          v136 = *(_DWORD *)(a1 + 7412);
          v137 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v135;
          *(_DWORD *)(a1 + 7448) = v136;
          *(_DWORD *)(a1 + 7452) = v137;
          v138 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v138 + 4) = v135;
          v139 = *(_DWORD *)(a1 + 12);
          if (!v139)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8296CLL);
          }
          v140 = *(_BYTE *)(*(_QWORD *)a1 + (v139 - 1) * (unint64_t)v14 + 9) & 1;
          *(_BYTE *)(v138 + 56) = 0;
          v141 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v138, v15, 0, v140, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v141;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v141, *(_QWORD **)(a1 + 7376)))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
            goto LABEL_380;
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v148, 0);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_380;
          if (*(_DWORD *)v15 == 6)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
            goto LABEL_380;
          }
          v125 = 0;
          LODWORD(v46) = 1;
        }
        else
        {
          if (v117 == 3)
            goto LABEL_317;
          if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v148, 0))
          {
            if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
            }
            goto LABEL_380;
          }
          v124 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
          v125 = v124 != 0;
          if (v124)
            LOBYTE(v8) = 1;
          v46 = *(_QWORD *)(a1 + 7360);
          if (v46)
            goto LABEL_380;
        }
        if (Range)
        {
          if ((v8 & 1) != 0)
          {
            v147 = *(const char **)Range;
            v144 = "' not allowed in function with default parameter values";
          }
          else
          {
            if (!v148)
            {
              v147 = *(const char **)Range;
              if ((_DWORD)v46)
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v147);
              else
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v147);
              goto LABEL_380;
            }
            v147 = *(const char **)Range;
            v144 = "' not allowed in function with destructuring parameters";
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v147, v144);
LABEL_380:
          if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
          {
            v14 = v10;
            if (!*(_QWORD *)(a1 + 7360))
            {
              Range = JSC::stringForFunctionMode();
LABEL_262:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*>(a1, &Range);
            }
            goto LABEL_103;
          }
LABEL_384:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          v14 = v10;
          goto LABEL_103;
        }
        if (((v125 | v46) & 1) != 0 || v148)
          goto LABEL_346;
      }
      v126 = *(_DWORD *)v15;
LABEL_352:
      if (v126 != 3)
      {
        if (v126 != 20 && (v126 & 0x100000) == 0)
        {
          v14 = v10;
          if (!*(_QWORD *)(a1 + 7360))
            goto LABEL_108;
          goto LABEL_103;
        }
        goto LABEL_384;
      }
LABEL_317:
      v118 = *(_DWORD *)(a1 + 7400);
      v119 = *(_DWORD *)(a1 + 7412);
      v120 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v118;
      *(_DWORD *)(a1 + 7448) = v119;
      *(_DWORD *)(a1 + 7452) = v120;
      v121 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v121 + 4) = v118;
      v122 = *(_DWORD *)(a1 + 12);
      if (!v122)
      {
        __break(0xC471u);
        JUMPOUT(0x197E82954);
      }
      v123 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v122 - 1) + 9) & 1;
      *(_BYTE *)(v121 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v121, v15, 0, v123, a5, a6, a7, a8);
      v14 = v10;
      goto LABEL_103;
    }
    if ((v16 & 0x200) == 0)
    {
LABEL_59:
      if (v16 != 20 && (v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v67 = "getter";
          switch(v9)
          {
            case 0:
              v67 = "function";
              break;
            case 1:
            case 2:
              v67 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v67 = "setter";
              break;
            case 5:
              v67 = "method";
              break;
            case 6:
              v67 = "arrow function";
              break;
            case 7:
            case 9:
              v67 = "async function";
              break;
            case 8:
            case 11:
              v67 = "async arrow function";
              break;
            case 10:
              v67 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E82198);
            case 15:
            case 16:
              v67 = "async generator function";
              break;
            case 17:
              v67 = "async generator method";
              break;
            case 18:
              v67 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E822DCLL);
          }
          Range = v67;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, &Range);
        }
        goto LABEL_103;
      }
      goto LABEL_290;
    }
    if ((v16 - 544) < 3)
    {
      if (v16 == 546)
      {
        v90 = *v8;
        if (*v8 && (*(_DWORD *)(v48 + 720 * v47 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_59;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_103;
        v91 = "getter";
        switch(v9)
        {
          case 0:
            v91 = "function";
            break;
          case 1:
          case 2:
            v91 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v91 = "setter";
            break;
          case 5:
            v91 = "method";
            break;
          case 6:
            v91 = "arrow function";
            break;
          case 7:
          case 9:
            v91 = "async function";
            break;
          case 8:
          case 11:
            v91 = "async arrow function";
            break;
          case 10:
            v91 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197E822BCLL);
          case 15:
          case 16:
            v91 = "async generator function";
            break;
          case 17:
            v91 = "async generator method";
            break;
          case 18:
            v91 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197E8248CLL);
        }
        Range = v91;
        if (!v90 || (v95 = *(_DWORD *)(v48 + 720 * v47 + 10), (v95 & 0x2000) != 0))
        {
          v96 = "in an async function";
        }
        else if ((v95 & 0x100000) != 0)
        {
          v96 = "in a static block";
        }
        else
        {
          if (*(_DWORD *)(a1 + 7480) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197E82344);
          }
          v96 = "in a module";
        }
        v147 = v96;
        v94 = "Cannot use 'await' as a ";
LABEL_202:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v94, &Range, &v147);
        goto LABEL_103;
      }
      if (v16 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9) & 1) == 0)
          goto LABEL_59;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_103;
        v71 = "getter";
        switch(v9)
        {
          case 0:
            v71 = "function";
            break;
          case 1:
          case 2:
            v71 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v71 = "setter";
            break;
          case 5:
            v71 = "method";
            break;
          case 6:
            v71 = "arrow function";
            break;
          case 7:
          case 9:
            v71 = "async function";
            break;
          case 8:
          case 11:
            v71 = "async arrow function";
            break;
          case 10:
            v71 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197E82434);
          case 15:
          case 16:
            v71 = "async generator function";
            break;
          case 17:
            v71 = "async generator method";
            break;
          case 18:
            v71 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197E8259CLL);
        }
        Range = v71;
LABEL_218:
        v147 = "in strict mode";
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, &Range, &v147);
        goto LABEL_103;
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v47 + 9) & 1) == 0 && (*(_BYTE *)(v48 + 720 * v47 + 11) & 2) == 0)
        goto LABEL_59;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_103;
      v92 = "getter";
      switch(v9)
      {
        case 0:
          v92 = "function";
          break;
        case 1:
        case 2:
          v92 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v92 = "setter";
          break;
        case 5:
          v92 = "method";
          break;
        case 6:
          v92 = "arrow function";
          break;
        case 7:
        case 9:
          v92 = "async function";
          break;
        case 8:
        case 11:
          v92 = "async arrow function";
          break;
        case 10:
          v92 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197E8229CLL);
        case 15:
        case 16:
          v92 = "async generator function";
          break;
        case 17:
          v92 = "async generator method";
          break;
        case 18:
          v92 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197E8246CLL);
      }
      Range = v92;
      if ((v49 & 1) != 0)
      {
        v93 = "in strict mode";
      }
      else
      {
        if ((*(_BYTE *)(v48 + 720 * v47 + 11) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197E82264);
        }
        v93 = "in a generator function";
      }
      v147 = v93;
LABEL_201:
      v94 = "Cannot use 'yield' as a ";
      goto LABEL_202;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_103;
    v73 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
    v15 = *(unsigned int *)(a1 + 7408);
    a3 = *(unsigned int *)(a1 + 7412);
    v74 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
    if (v75 <= v15)
    {
      v46 = 0x100000000;
      v74 = "";
    }
    else
    {
      LODWORD(v46) = a3 - v15;
      if ((int)v75 - (int)v15 > (a3 - v15) || (LODWORD(v46) = v75 - v15, (_DWORD)v15))
      {
        v46 = v46;
        v76 = v75 - v15;
        if ((v75 & 0xFF00000000) != 0)
        {
          if (v76 < v46)
            goto LABEL_345;
          v74 += v15;
          v46 = v46 | 0x100000000;
        }
        else
        {
          if (v76 < v46)
            goto LABEL_345;
          v74 += 2 * v15;
        }
      }
      else
      {
        v46 = v75;
      }
    }
    Range = v74;
    v146 = v46;
    v89 = "getter";
    switch(v9)
    {
      case 0:
        v89 = "function";
        break;
      case 1:
      case 2:
        v89 = "generator function";
        break;
      case 3:
        break;
      case 4:
        v89 = "setter";
        break;
      case 5:
        v89 = "method";
        break;
      case 6:
        v89 = "arrow function";
        break;
      case 7:
      case 9:
        v89 = "async function";
        break;
      case 8:
      case 11:
        v89 = "async arrow function";
        break;
      case 10:
        v89 = "async method";
        break;
      case 12:
      case 13:
      case 14:
      case 19:
        __break(0xC471u);
        JUMPOUT(0x197E82224);
      case 15:
      case 16:
        v89 = "async generator function";
        break;
      case 17:
        v89 = "async generator method";
        break;
      case 18:
        v89 = "generator method";
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E82304);
    }
    v147 = v89;
LABEL_168:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v147);
    goto LABEL_103;
  }
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E822E4);
  }
  v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v23 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, v15, 0, v22, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v23;
  if (v9 == 3)
  {
    if (v23 == 3)
    {
      v40 = *(_DWORD *)(a1 + 7400);
      v41 = *(_DWORD *)(a1 + 7412);
      v42 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v40;
      *(_DWORD *)(a1 + 7448) = v41;
      *(_DWORD *)(a1 + 7452) = v42;
      v43 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v43 + 4) = v40;
      v44 = *(_DWORD *)(a1 + 12);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8257CLL);
      }
      v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
      *(_BYTE *)(v43 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v43, v15, 0, v45, v24, v25, v26, v27);
      *(_DWORD *)(a3 + 12) = 0;
      goto LABEL_103;
    }
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_103;
      v70 = "getter functions must have no parameters";
      goto LABEL_74;
    }
LABEL_290:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_103;
  }
  if (v9 == 4)
  {
    if (v23 != 3)
    {
      Range = 0;
      v148 = 0;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v148, 0))
      {
        v60 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_103;
        if (v60 || v148)
        {
          if (Range)
          {
            v147 = *(const char **)Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v147);
            goto LABEL_103;
          }
          v108 = *(_DWORD *)(a1 + 12);
          if (!v108)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8276CLL);
          }
          v109 = *(_QWORD *)a1 + 720 * (v108 - 1);
          *(_DWORD *)(v109 + 10) = *(_DWORD *)(v109 + 10) & 0xFB7FFFFF | 0x4000000;
        }
        *(_DWORD *)(a3 + 12) = v60 == 0;
        v61 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 == 3)
        {
          v62 = *(_DWORD *)(a1 + 7400);
          v63 = *(_DWORD *)(a1 + 7412);
          v64 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v62;
          *(_DWORD *)(a1 + 7448) = v63;
          *(_DWORD *)(a1 + 7452) = v64;
          v65 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v65 + 4) = v62;
          v66 = *(_DWORD *)(a1 + 12);
          if (!v66)
          {
            __break(0xC471u);
            JUMPOUT(0x197E814C4);
          }
LABEL_102:
          v80 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v66 - 1) + 9) & 1;
          *(_BYTE *)(v65 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v65, v15, 0, v80, v24, v25, v26, v27);
          goto LABEL_103;
        }
        if (v61 != 6)
        {
          if (v61 != 20 && (v61 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
            goto LABEL_103;
          }
          goto LABEL_290;
        }
      }
      else if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
      {
        goto LABEL_290;
      }
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_103;
    v70 = "setter functions must have one parameter";
LABEL_74:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v70);
    goto LABEL_103;
  }
  if (v23 == 3)
  {
    *(_DWORD *)(a3 + 12) = 0;
LABEL_101:
    v77 = *(_DWORD *)(a1 + 7400);
    v78 = *(_DWORD *)(a1 + 7412);
    v79 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v77;
    *(_DWORD *)(a1 + 7448) = v78;
    *(_DWORD *)(a1 + 7452) = v79;
    v65 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v65 + 4) = v77;
    v66 = *(_DWORD *)(a1 + 12);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8234CLL);
    }
    goto LABEL_102;
  }
  v28 = 0;
  v148 = 0;
  Range = 0;
  while (1)
  {
    if (v23 == 37)
    {
      v81 = *(_DWORD *)(a1 + 7400);
      v82 = *(_DWORD *)(a1 + 7412);
      v83 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v81;
      *(_DWORD *)(a1 + 7448) = v82;
      *(_DWORD *)(a1 + 7452) = v83;
      v84 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v84 + 4) = v81;
      v85 = *(_DWORD *)(a1 + 12);
      if (!v85)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8244CLL);
      }
      v86 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 9) & 1;
      *(_BYTE *)(v84 + 56) = 0;
      v87 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v84, v15, 0, v86, v24, v25, v26, v27);
      *(_DWORD *)(a1 + 7368) = v87;
      if (v87 == 546
        || v87 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v8)
          goto LABEL_446;
        v88 = *(_DWORD *)(a1 + 12);
        if (!v88)
        {
          __break(0xC471u);
          JUMPOUT(0x197E82444);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v88 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_446:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_253;
        }
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v148, 0);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_253;
      if (*(_DWORD *)v15 == 6)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_253;
      }
      v30 = 0;
      LODWORD(v31) = 1;
    }
    else
    {
      if (v23 == 3)
        goto LABEL_101;
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v148, 0))
      {
        if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_253;
      }
      v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
      v30 = v29 != 0;
      if (v29)
        v28 = 1;
      v31 = *(_QWORD *)(a1 + 7360);
      if (v31)
        goto LABEL_253;
    }
    if (Range)
    {
      if ((v28 & 1) != 0)
      {
        v147 = *(const char **)Range;
        v110 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v148)
        {
          if ((_DWORD)v31)
          {
            v147 = *(const char **)Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v147);
          }
          else
          {
            if ((v10 & 0x160438) == 0)
            {
              v32 = 0;
              goto LABEL_18;
            }
            v147 = *(const char **)Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v147);
          }
LABEL_253:
          if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
            goto LABEL_290;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_103;
          v107 = "getter";
          switch(v9)
          {
            case 0:
              v107 = "function";
              break;
            case 1:
            case 2:
              v107 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v107 = "setter";
              break;
            case 5:
              v107 = "method";
              break;
            case 6:
              v107 = "arrow function";
              break;
            case 7:
            case 9:
              v107 = "async function";
              break;
            case 8:
            case 11:
              v107 = "async arrow function";
              break;
            case 10:
              v107 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
            case 20:
              __break(0xC471u);
              JUMPOUT(0x197E82324);
            case 15:
            case 16:
              v107 = "async generator function";
              break;
            case 17:
              v107 = "async generator method";
              break;
            case 18:
              v107 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E825BCLL);
          }
          Range = v107;
          goto LABEL_262;
        }
        v147 = *(const char **)Range;
        v110 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v147, v110);
      goto LABEL_253;
    }
    v32 = v148;
LABEL_18:
    if (((v30 | v31) & 1) != 0 || v32)
    {
      v54 = *(_DWORD *)(a1 + 12);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8243CLL);
      }
      v55 = *(_QWORD *)a1 + 720 * (v54 - 1);
      *(_DWORD *)(v55 + 10) = *(_DWORD *)(v55 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if ((v31 & 1) != 0)
      break;
    if ((v28 & 1) == 0)
      ++*(_DWORD *)(a3 + 12);
    v33 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 != 6)
      goto LABEL_100;
    v34 = *(_DWORD *)(a1 + 7400);
    v35 = *(_DWORD *)(a1 + 7412);
    v36 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v34;
    *(_DWORD *)(a1 + 7448) = v35;
    *(_DWORD *)(a1 + 7452) = v36;
    v37 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v37 + 4) = v34;
    v38 = *(_DWORD *)(a1 + 12);
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x197E82204);
    }
    v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
    *(_BYTE *)(v37 + 56) = 0;
    v23 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v37, v15, 0, v39, v24, v25, v26, v27);
    *(_DWORD *)(a1 + 7368) = v23;
  }
  v33 = *(_DWORD *)v15;
LABEL_100:
  if (v33 == 3)
    goto LABEL_101;
  if (v33 == 20 || (v33 & 0x100000) != 0)
    goto LABEL_290;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_103;
LABEL_108:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
LABEL_103:
  *(_DWORD *)(a1 + 7316) = v14;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)&v6 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      result = 0;
      *(_BYTE *)(a1 + 7352) = 1;
      return result;
    }
    return 0;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 7496);
  v9 = a1;
  *(_QWORD *)(a1 + 7496) = &v7;
  v3 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v7);
  *(_QWORD *)(v9 + 7496) = v8;
  if (!v3)
  {
    v5 = *(_DWORD *)(a1 + 7368);
    if (v5 == 20 || (v5 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the arrow function expression");
    }
    return 0;
  }
  return 35;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  char v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  _QWORD *v82;

  v82 = 0;
  v11 = (_BYTE *)(a1 + 7344);
  v81 = 0;
  v12 = a1 + 7296;
  v80 = *(_OWORD *)(a1 + 7296);
  v78 = *(_OWORD *)(a1 + 7320);
  v79 = *(_QWORD *)(a1 + 7336);
  v76 = *(_BYTE *)(a1 + 7344);
  v77 = *(_DWORD *)(a1 + 7316);
  v75 = *(_BYTE *)(a1 + 7345);
  v13 = *(int *)(a1 + 7408);
  v14 = *(int *)(a1 + 7404);
  v15 = *(int **)(a1 + 7288);
  v17 = *v15;
  v16 = v15[1];
  v18 = *((_BYTE *)v15 + 56);
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(a1, a2, &v82, &v81, a5, a6, a7, a8))
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    else
      return 35;
  }
  v26 = a3 == 0;
  while (1)
  {
    if (!v26 || !v82)
    {
LABEL_5:
      v26 = 0;
      goto LABEL_6;
    }
    if (v81 != 12 || (v28 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952), v28[3] != *v82))
    {
      v82 = 0;
      v26 = 1;
      goto LABEL_6;
    }
    v29 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v29)
    {
      __break(0xC471u);
      JUMPOUT(0x197E82FF4);
    }
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD *)a1 + 720 * (v29 - 1);
    *(_BYTE *)(v31 + 9) |= 1u;
    if (v29 <= (int)v29 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197E82FFCLL);
    }
    v32 = *(_DWORD *)(v30 + 720 * ((int)v29 - 1) + 10);
    if ((v32 & 0x800000) == 0)
      break;
    if ((v32 & 0x4400) != 0 && (_DWORD)v29 != 1)
    {
      v64 = (int)v29 - 2;
      if (v64 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x197E83144);
      }
      if ((*(_BYTE *)(v30 + 720 * (int)v64 + 12) & 0x80) == 0)
        break;
    }
LABEL_21:
    v34 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v34 + 150) = 0;
    v35 = *(WTF::StringImpl **)(v34 + 152);
    *(_QWORD *)(v34 + 152) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    v36 = *(_QWORD *)(v34 + 88);
    v37 = *(_QWORD *)(v34 + 96);
    *(_QWORD *)(v34 + 80) = v36 + v13;
    *(_QWORD *)(v34 + 112) = v36 + v14;
    *(_DWORD *)(v34 + 20) = 0;
    *(_DWORD *)(v34 + 36) = 0;
    if (v36 + v13 >= v37)
      v38 = 0;
    else
      v38 = *(_BYTE *)(v36 + v13);
    *(_BYTE *)(v34 + 176) = v38;
    v39 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v39 = v17;
    *(_BYTE *)(v39 + 56) = v18;
    v40 = *(_DWORD *)(a1 + 7400);
    v41 = *(_DWORD *)(a1 + 7412);
    v42 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v40;
    *(_DWORD *)(a1 + 7448) = v41;
    *(_DWORD *)(a1 + 7452) = v42;
    *(_DWORD *)(v39 + 4) = v40;
    v43 = *(_DWORD *)(a1 + 12);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x197E83004);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1, v22, v23, v24, v25);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v16;
    *(_OWORD *)v12 = v80;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v77;
    *(_OWORD *)(v12 + 24) = v78;
    *(_QWORD *)(v12 + 40) = v79;
    *v11 = v76;
    v11[1] = v75;
    v47 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (!v47)
      goto LABEL_5;
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v44, v45, v46, v22, v23, v24, v25);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      v26 = 0;
      if (*(_QWORD *)(a1 + 7360))
        return 0;
    }
    else
    {
      v26 = 0;
      *(_DWORD *)v47 -= 2;
    }
LABEL_6:
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(a1, a2, &v82, &v81, v22, v23, v24, v25))goto LABEL_7;
  }
  v65 = *(WTF::StringImpl ***)(a1 + 7328);
  v66 = (WTF::StringImpl *)v28[110];
  if (!v65)
  {
LABEL_43:
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, v66, v20, v21, v22, v23, v24, v25))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'arguments' in strict mode");
      return 0;
    }
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248), v68, v69, v70, v71, v72, v73))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'eval' in strict mode");
      return 0;
    }
    v74 = *(_DWORD *)(a1 + 12);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8314CLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 13) & 4) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "'use strict' directive not allowed inside a function with a non-simple parameter list");
      return 0;
    }
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid parameters or function name in strict mode");
      return 0;
    }
    goto LABEL_21;
  }
  v67 = *v65;
  if (v66 != v67)
  {
    if ((WTF::StringImpl *)v28[156] == v67)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'eval' in strict mode");
      return 0;
    }
    goto LABEL_43;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'arguments' in strict mode");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int32x2_t *v9;
  int v10;
  void *v11;
  int *v12;
  int v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v45;
  int v46;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  _OWORD *v80;
  int v81;
  int v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  int v88;
  int v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  WTF::StringImpl *v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  WTF::AtomStringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  WTF::StringImpl *v164;
  int v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unint64_t v168;
  WTF *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t *v179;
  int v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  const char *v202;
  int v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  char v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  int v229;
  WTF::StringImpl *v230;
  int v231;
  uint64_t v232;
  int v233;
  WTF::AtomStringImpl *v234;
  uint64_t v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  BOOL v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  _OWORD *v277;
  _OWORD *v278;
  __int128 v279;
  int v280;
  WTF::AtomStringImpl *v281;
  uint64_t v282;
  unsigned int v283;
  char v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v291;
  int v292;
  int v293;
  WTF::StringImpl *v294;
  const char *v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  char v305;
  uint64_t v306;
  WTF *v307;
  __int128 v308;
  _OWORD *v309;
  unint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  int v320;
  unsigned int v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unsigned int v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  int v341;
  _BYTE v343[12];
  int v344;
  int v345;
  int v346;
  char *v347;
  _OWORD *v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  int v353;
  WTF *v354;
  uint64_t v355;
  __int128 v356;

  v8 = a1;
  v9 = (int32x2_t *)(a1 + 7300);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)v343 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
    goto LABEL_100;
  v11 = (void *)a2;
  v12 = (int *)(a1 + 7368);
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13 != 12)
  {
    switch(v13)
    {
      case 521:
        v16 = 2;
        goto LABEL_7;
      case 522:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 542:
      case 543:
        goto LABEL_9;
      case 523:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::SyntaxChecker>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_40;
      case 541:
        v350 = 0uLL;
        *(_QWORD *)&v351 = 0;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::SyntaxChecker>(a1, a2, 1, (WTF ***)&v350))
        {
          v124 = (_QWORD *)v350;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(v8, (WTF::AtomStringImpl *)v350, 1, 2, v120, v121, v122, v123) < 2)
          {
            v18 = 43;
            goto LABEL_41;
          }
          if (!*(_QWORD *)(v8 + 7360))
          {
            *(_QWORD *)&v356 = *v124;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],WTF::UniquedStringImpl *,char const(&)[2]>(v8, (uint64_t *)&v356);
          }
        }
        else
        {
          if (*v12 == 20 || (*v12 & 0x100000) != 0)
            goto LABEL_281;
          if (!*(_QWORD *)(v8 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22]>(v8);
        }
        goto LABEL_282;
      case 544:
        v15 = *(_DWORD *)(a1 + 12);
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x197E84ADCLL);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1) != 0)
          goto LABEL_6;
        v80 = (_OWORD *)(a1 + 7296);
        v356 = *(_OWORD *)(a1 + 7296);
        v81 = *(_DWORD *)(a1 + 7316);
        v348 = (_OWORD *)(a1 + 7320);
        *(_QWORD *)&v351 = *(_QWORD *)(a1 + 7336);
        v350 = *(_OWORD *)(a1 + 7320);
        v82 = *(unsigned __int8 *)(a1 + 7344);
        v345 = v81;
        v346 = v82;
        LODWORD(v347) = *(unsigned __int8 *)(a1 + 7345);
        v83 = (WTF::AtomStringImpl *)*(int *)(a1 + 7408);
        v84 = *(int *)(a1 + 7404);
        v85 = *(_QWORD *)(a1 + 7288);
        v344 = *(_DWORD *)(v85 + 4);
        LODWORD(v349) = *(_DWORD *)v85;
        v86 = *(_BYTE *)(v85 + 56);
        v87 = *(_DWORD *)(v8 + 7400);
        v88 = *(_DWORD *)(v8 + 7412);
        *(_DWORD *)(v8 + 7444) = v87;
        *(_DWORD *)(v8 + 7448) = v88;
        *(_DWORD *)(v8 + 7452) = v84;
        *(_DWORD *)(v85 + 4) = v87;
        *(_BYTE *)(v85 + 56) = 0;
        v89 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v85, v8 + 7368, 0, 0, a5, a6, a7, a8);
        *(_DWORD *)(v8 + 7368) = v89;
        if (v89 == 12
          || (v144 = v89, (v89 - 544) < 3)
          || !v89
          || v89 == 1048592
          && ((v145 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952), v146 = **(_QWORD **)(v8 + 7376), v146 == v145[41])
           || v146 == v145[62]
           || v146 == v145[16]))
        {
          v97 = *(_QWORD *)(v8 + 7288);
          *(_BYTE *)(v97 + 150) = 0;
          v98 = *(WTF::StringImpl **)(v97 + 152);
          *(_QWORD *)(v97 + 152) = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
            {
              WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v98 -= 2;
            }
          }
          v99 = *(_QWORD *)(v97 + 88);
          v100 = *(_QWORD *)(v97 + 96);
          *(_QWORD *)(v97 + 80) = (char *)v83 + v99;
          *(_QWORD *)(v97 + 112) = v99 + v84;
          *(_DWORD *)(v97 + 20) = 0;
          *(_DWORD *)(v97 + 36) = 0;
          if ((unint64_t)v83 + v99 >= v100)
            v101 = 0;
          else
            v101 = *((_BYTE *)v83 + v99);
          v102 = v349;
          *(_BYTE *)(v97 + 176) = v101;
          v103 = *(_QWORD *)(v8 + 7288);
          *(_DWORD *)v103 = v102;
          *(_BYTE *)(v103 + 56) = v86;
          v104 = *(_DWORD *)(v8 + 7400);
          v105 = *(_DWORD *)(v8 + 7412);
          v106 = *(_DWORD *)(v8 + 7404);
          *(_DWORD *)(v8 + 7444) = v104;
          *(_DWORD *)(v8 + 7448) = v105;
          *(_DWORD *)(v8 + 7452) = v106;
          *(_DWORD *)(v103 + 4) = v104;
          v107 = *(_DWORD *)(v8 + 12);
          if (!v107)
          {
            __break(0xC471u);
            JUMPOUT(0x197E84BA8);
          }
          *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v103, v8 + 7368, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v107 - 1) + 9) & 1, v93, v94, v95, v96);
          *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v344;
          *v80 = v356;
          *(_DWORD *)(v8 + 7312) = 0;
          *(_DWORD *)(v8 + 7316) = v345;
          v115 = v348;
          *v348 = v350;
          *((_QWORD *)v115 + 2) = v351;
          v9[5].i8[4] = v346;
          v9[5].i8[5] = (char)v347;
          v116 = *(WTF::StringImpl **)(v8 + 7360);
          *(_QWORD *)(v8 + 7360) = 0;
          if (v116)
          {
            if (*(_DWORD *)v116 == 2)
            {
              WTF::StringImpl::~StringImpl(v116, v108, v109, v110, v111, v112, v113, v114);
              WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
            }
            else
            {
              *(_DWORD *)v116 -= 2;
            }
          }
        }
        else
        {
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v8 + 7288), v83, v84, v92, v93, v94, v95, v96);
          v151 = *(_QWORD *)(v8 + 7288);
          *(_DWORD *)v151 = v349;
          *(_BYTE *)(v151 + 56) = v86;
          v152 = *(_DWORD *)(v8 + 7400);
          v153 = *(_DWORD *)(v8 + 7412);
          v154 = *(_DWORD *)(v8 + 7404);
          *(_DWORD *)(v8 + 7444) = v152;
          *(_DWORD *)(v8 + 7448) = v153;
          *(_DWORD *)(v8 + 7452) = v154;
          *(_DWORD *)(v151 + 4) = v152;
          v155 = *(_DWORD *)(v8 + 12);
          if (!v155)
          {
            __break(0xC471u);
            JUMPOUT(0x197E84BE0);
          }
          *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v151, v8 + 7368, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v155 - 1) + 9) & 1, v147, v148, v149, v150);
          *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v344;
          *v80 = v356;
          *(_DWORD *)(v8 + 7312) = 0;
          *(_DWORD *)(v8 + 7316) = v345;
          v163 = v348;
          *v348 = v350;
          *((_QWORD *)v163 + 2) = v351;
          v9[5].i8[4] = v346;
          v9[5].i8[5] = (char)v347;
          v164 = *(WTF::StringImpl **)(v8 + 7360);
          *(_QWORD *)(v8 + 7360) = 0;
          if (v164)
          {
            if (*(_DWORD *)v164 == 2)
            {
              WTF::StringImpl::~StringImpl(v164, v156, v157, v158, v159, v160, v161, v162);
              WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
            }
            else
            {
              *(_DWORD *)v164 -= 2;
            }
          }
          if (v144 != 4)
          {
            v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(v8, v11, 1, v158, v159, v160, v161, v162);
            goto LABEL_40;
          }
        }
LABEL_6:
        a1 = v8;
        a2 = (uint64_t)v11;
        v16 = 1;
LABEL_7:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, v16);
        goto LABEL_40;
      case 545:
      case 546:
        goto LABEL_161;
      default:
        if (v13 != 1048592)
        {
LABEL_9:
          if ((unint64_t)v343 >= *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
          {
            v18 = 0;
            v19 = *(unsigned __int8 *)(a1 + 7505);
            *(_BYTE *)(a1 + 7505) = 0;
            v20 = *(_DWORD *)(a1 + 7368);
            switch(v20)
            {
              case 0:
                v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
                goto LABEL_39;
              case 1:
              case 20:
                goto LABEL_41;
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 13:
              case 15:
              case 16:
              case 18:
              case 19:
                goto LABEL_24;
              case 12:
LABEL_280:
                v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(v8, v11, 0, (uint64_t)a4, a5, a6, a7, a8);
                goto LABEL_39;
              case 14:
                *a3 = *(_QWORD *)(a1 + 7376);
                if (a4)
                  *a4 = *(_DWORD *)(a1 + 7412) - *(_DWORD *)(a1 + 7408);
                LODWORD(v18) = *(_DWORD *)(a1 + 7304);
LABEL_24:
                if ((unint64_t)v343 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
                {
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
                    v9[6].i8[4] = 1;
                  }
                }
                else
                {
                  LODWORD(v350) = 0;
                  *((_QWORD *)&v350 + 1) = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v351 = a1;
                  *(_QWORD *)(a1 + 7496) = &v350;
                  v31 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v350);
                  *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
                  v36 = *(_DWORD *)(v8 + 7368);
                  if (v31)
                  {
                    if (v36 != 6)
                    {
LABEL_27:
                      if (v36 == 17)
                      {
                        v38 = *(_DWORD *)(v8 + 7400);
                        v39 = *(_DWORD *)(v8 + 7412);
                        v40 = *(_DWORD *)(v8 + 7404);
                        *(_DWORD *)(v8 + 7444) = v38;
                        *(_DWORD *)(v8 + 7448) = v39;
                        *(_DWORD *)(v8 + 7452) = v40;
                        v41 = *(_QWORD *)(v8 + 7288);
                        *(_DWORD *)(v41 + 4) = v38;
                        v42 = *(_DWORD *)(v8 + 12);
                        if (!v42)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197E84AE4);
                        }
                        v43 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v42 - 1) + 9) & 1;
                        *(_BYTE *)(v41 + 56) = 0;
                        *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v41, v8 + 7368, 0, v43, v32, v33, v34, v35);
                      }
                      else
                      {
                        v37 = v36 == 1 || v36 == 20;
                        if (!v37 && !*(_BYTE *)(*(_QWORD *)(v8 + 7288) + 56))
                          goto LABEL_33;
                      }
                      v17 = 43;
LABEL_38:
                      if (*a3 && (_DWORD)v18 != *(_DWORD *)(v8 + 7304))
                        *a3 = 0;
LABEL_39:
                      if ((_DWORD)v17)
                      {
LABEL_40:
                        v18 = v17;
                        goto LABEL_41;
                      }
LABEL_282:
                      v18 = 0;
                      goto LABEL_41;
                    }
                    v54 = *(_DWORD *)(v8 + 7400);
                    v55 = *(_DWORD *)(v8 + 7412);
                    v56 = *(_DWORD *)(v8 + 7404);
                    *(_DWORD *)(v8 + 7444) = v54;
                    *(_DWORD *)(v8 + 7448) = v55;
                    *(_DWORD *)(v8 + 7452) = v56;
                    v57 = *(_QWORD *)(v8 + 7288);
                    *(_DWORD *)(v57 + 4) = v54;
                    v58 = *(_DWORD *)(v8 + 12);
                    if (!v58)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E84B04);
                    }
                    v59 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v58 - 1) + 9) & 1;
                    *(_BYTE *)(v57 + 56) = 0;
                    *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v57, v8 + 7368, 0, v59, v32, v33, v34, v35);
                    *v9 = vadd_s32(*v9, (int32x2_t)0x100000001);
                    LODWORD(v350) = 0;
                    *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
                    for (*(_QWORD *)&v351 = v8; ; *(_QWORD *)&v351 = v8)
                    {
                      *(_QWORD *)(v8 + 7496) = &v350;
                      v60 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v11, &v350);
                      *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
                      if (!v60)
                        break;
                      v36 = *v12;
                      if (*v12 != 6)
                        goto LABEL_27;
                      v61 = *(_DWORD *)(v8 + 7400);
                      v62 = *(_DWORD *)(v8 + 7412);
                      v63 = *(_DWORD *)(v8 + 7404);
                      *(_DWORD *)(v8 + 7444) = v61;
                      *(_DWORD *)(v8 + 7448) = v62;
                      *(_DWORD *)(v8 + 7452) = v63;
                      v64 = *(_QWORD *)(v8 + 7288);
                      *(_DWORD *)(v64 + 4) = v61;
                      v65 = *(_DWORD *)(v8 + 12);
                      if (!v65)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E84AFCLL);
                      }
                      v66 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v65 - 1) + 9) & 1;
                      *(_BYTE *)(v64 + 56) = 0;
                      *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v64, v8 + 7368, 2u, v66, v32, v33, v34, v35);
                      LODWORD(v350) = 0;
                      *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
                    }
                    if (*v12 != 20 && (*v12 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(v8 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression in a comma expression");
                      goto LABEL_106;
                    }
LABEL_158:
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
                    goto LABEL_106;
                  }
                  if (v36 == 20 || (v36 & 0x100000) != 0)
                    goto LABEL_158;
                  if (!*(_QWORD *)(v8 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(v8);
                }
LABEL_106:
                if (*v12 != 20 && (*v12 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(v8 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression statement");
                  goto LABEL_34;
                }
LABEL_33:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
LABEL_34:
                v17 = 0;
                goto LABEL_38;
              case 17:
                v141 = *(_DWORD *)(a1 + 7400);
                v142 = *(_DWORD *)(a1 + 7412);
                v143 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v141;
                *(_DWORD *)(a1 + 7448) = v142;
                *(_DWORD *)(a1 + 7452) = v143;
                v51 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v51 + 4) = v141;
                v52 = *(_DWORD *)(v8 + 12);
                if (!v52)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E83B40);
                }
LABEL_54:
                v53 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v52 - 1) + 9) & 1;
                *(_BYTE *)(v51 + 56) = 0;
                *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v51, v8 + 7368, 0, v53, a5, a6, a7, a8);
LABEL_20:
                v17 = 43;
                goto LABEL_40;
              default:
                switch(v20)
                {
                  case 515:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBreakStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 516:
                  case 517:
                    goto LABEL_41;
                  case 518:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 519:
                  case 521:
                  case 526:
                  case 531:
                  case 532:
                  case 535:
                  case 536:
                  case 538:
                  case 539:
                  case 540:
                  case 542:
                  case 543:
                    goto LABEL_24;
                  case 520:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, 0);
                    goto LABEL_39;
                  case 522:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseContinueStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 523:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(a1, a2, v19 != 0);
                    goto LABEL_39;
                  case 524:
                    ++*(_DWORD *)(a1 + 7308);
                    v21 = *(_DWORD *)(a1 + 12);
                    if (!v21)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E84ACCLL);
                    }
                    v22 = v21 - 1;
                    v23 = *(_QWORD *)a1;
                    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v22 + 10) & 0x100100) != 0x100)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Return statements are only valid inside functions");
                      goto LABEL_282;
                    }
                    v24 = *(_DWORD *)(a1 + 7400);
                    v25 = *(_DWORD *)(a1 + 7412);
                    v26 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v24;
                    *(_DWORD *)(a1 + 7448) = v25;
                    *(_DWORD *)(a1 + 7452) = v26;
                    v27 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v27 + 4) = v24;
                    v28 = *(_BYTE *)(v23 + 720 * v22 + 9) & 1;
                    *(_BYTE *)(v27 + 56) = 0;
                    v29 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v27, v8 + 7368, 0, v28, a5, a6, a7, a8);
                    *(_DWORD *)(v8 + 7368) = v29;
                    if (v29 == 1 || v29 == 20)
                      goto LABEL_20;
                    if (v29 == 17)
                    {
                      v117 = *(_DWORD *)(v8 + 7400);
                      v118 = *(_DWORD *)(v8 + 7412);
                      v119 = *(_DWORD *)(v8 + 7404);
                      *(_DWORD *)(v8 + 7444) = v117;
                      *(_DWORD *)(v8 + 7448) = v118;
                      *(_DWORD *)(v8 + 7452) = v119;
                      v51 = *(_QWORD *)(v8 + 7288);
                      *(_DWORD *)(v51 + 4) = v117;
                      v52 = *(_DWORD *)(v8 + 12);
                      if (!v52)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E83A14);
                      }
                      goto LABEL_54;
                    }
                    if (*(_BYTE *)(*(_QWORD *)(v8 + 7288) + 56))
                      goto LABEL_20;
                    if ((unint64_t)v343 < *(_QWORD *)(*(_QWORD *)(v8 + 7216) + 93104))
                    {
                      if (!*(_QWORD *)(v8 + 7360))
                      {
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(v8);
                        v9[6].i8[4] = 1;
                      }
                      goto LABEL_119;
                    }
                    LODWORD(v350) = 0;
                    *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
                    *(_QWORD *)&v351 = v8;
                    *(_QWORD *)(v8 + 7496) = &v350;
                    v45 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v11, &v350);
                    *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
                    v46 = *(_DWORD *)(v8 + 7368);
                    if (v45)
                    {
                      if (v46 != 6)
                      {
LABEL_48:
                        if (v46 == 1 || v46 == 20)
                          goto LABEL_20;
                        if (v46 == 17)
                        {
                          v48 = *(_DWORD *)(v8 + 7400);
                          v49 = *(_DWORD *)(v8 + 7412);
                          v50 = *(_DWORD *)(v8 + 7404);
                          *(_DWORD *)(v8 + 7444) = v48;
                          *(_DWORD *)(v8 + 7448) = v49;
                          *(_DWORD *)(v8 + 7452) = v50;
                          v51 = *(_QWORD *)(v8 + 7288);
                          *(_DWORD *)(v51 + 4) = v48;
                          v52 = *(_DWORD *)(v8 + 12);
                          if (!v52)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197E84B30);
                          }
                          goto LABEL_54;
                        }
                        if (*(_BYTE *)(*(_QWORD *)(v8 + 7288) + 56))
                          goto LABEL_20;
                        if (v46 != 20 && (v46 & 0x100000) == 0)
                        {
                          if (!*(_QWORD *)(v8 + 7360))
                            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Expected a ';' following a return statement");
                          goto LABEL_282;
                        }
                        goto LABEL_281;
                      }
                      v67 = *(_DWORD *)(v8 + 7400);
                      v68 = *(_DWORD *)(v8 + 7412);
                      v69 = *(_DWORD *)(v8 + 7404);
                      *(_DWORD *)(v8 + 7444) = v67;
                      *(_DWORD *)(v8 + 7448) = v68;
                      *(_DWORD *)(v8 + 7452) = v69;
                      v70 = *(_QWORD *)(v8 + 7288);
                      *(_DWORD *)(v70 + 4) = v67;
                      v71 = *(_DWORD *)(v8 + 12);
                      if (!v71)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E84B38);
                      }
                      v72 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v71 - 1) + 9) & 1;
                      *(_BYTE *)(v70 + 56) = 0;
                      *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v70, v8 + 7368, 0, v72, a5, a6, a7, a8);
                      *v9 = vadd_s32(*v9, (int32x2_t)0x100000001);
                      LODWORD(v350) = 0;
                      *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
                      for (*(_QWORD *)&v351 = v8; ; *(_QWORD *)&v351 = v8)
                      {
                        *(_QWORD *)(v8 + 7496) = &v350;
                        v73 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v11, &v350);
                        *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
                        if (!v73)
                          break;
                        v46 = *v12;
                        if (*v12 != 6)
                          goto LABEL_48;
                        v74 = *(_DWORD *)(v8 + 7400);
                        v75 = *(_DWORD *)(v8 + 7412);
                        v76 = *(_DWORD *)(v8 + 7404);
                        *(_DWORD *)(v8 + 7444) = v74;
                        *(_DWORD *)(v8 + 7448) = v75;
                        *(_DWORD *)(v8 + 7452) = v76;
                        v77 = *(_QWORD *)(v8 + 7288);
                        *(_DWORD *)(v77 + 4) = v74;
                        v78 = *(_DWORD *)(v8 + 12);
                        if (!v78)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197E84B28);
                        }
                        v79 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v78 - 1) + 9) & 1;
                        *(_BYTE *)(v77 + 56) = 0;
                        *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v77, v8 + 7368, 2u, v79, a5, a6, a7, a8);
                        LODWORD(v350) = 0;
                        *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
                      }
                      if (*v12 != 20 && (*v12 & 0x100000) == 0)
                      {
                        if (!*(_QWORD *)(v8 + 7360))
                          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression in a comma expression");
                        goto LABEL_119;
                      }
                    }
                    else if (v46 != 20 && (v46 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(v8 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(v8);
                      goto LABEL_119;
                    }
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
LABEL_119:
                    if (*v12 == 20 || (*v12 & 0x100000) != 0)
                      goto LABEL_281;
                    if (!*(_QWORD *)(v8 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse the return expression");
                    goto LABEL_282;
                  case 525:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseIfStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 527:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDoWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 528:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 529:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 530:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseWithStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 533:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseThrowStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 534:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTryStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 537:
                    v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDebuggerStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_39;
                  case 541:
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "'class' declaration is not directly within a block statement");
                    LODWORD(v18) = 0;
                    goto LABEL_34;
                  case 544:
                  case 545:
                  case 546:
                    goto LABEL_280;
                  default:
                    if (v20 != 1048592)
                      goto LABEL_24;
                    if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
                      goto LABEL_280;
                    goto LABEL_281;
                }
            }
          }
LABEL_100:
          if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
            v18 = 0;
            v9[6].i8[4] = 1;
            goto LABEL_41;
          }
          goto LABEL_282;
        }
        if (!JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
        {
LABEL_281:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
          goto LABEL_282;
        }
        break;
    }
  }
  if (**(_QWORD **)(v8 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 896) && !v9[10].i8[4])
  {
    v356 = *(_OWORD *)(v8 + 7296);
    LODWORD(v349) = *(_DWORD *)(v8 + 7316);
    *(_QWORD *)&v351 = *(_QWORD *)(v8 + 7336);
    v350 = *(_OWORD *)(v8 + 7320);
    LODWORD(v348) = v9[5].u8[4];
    v203 = v9[5].u8[5];
    v204 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
    v205 = *(unsigned int *)(v8 + 7404);
    v206 = *(_QWORD *)(v8 + 7288);
    v207 = *(_DWORD *)v206;
    v346 = *(_DWORD *)(v206 + 4);
    LODWORD(v347) = v203;
    v208 = *(_BYTE *)(v206 + 56);
    v209 = *(_DWORD *)(v8 + 7400);
    v210 = *(_DWORD *)(v8 + 7412);
    *(_DWORD *)(v8 + 7444) = v209;
    *(_DWORD *)(v8 + 7448) = v210;
    *(_DWORD *)(v8 + 7452) = v205;
    *(_DWORD *)(v206 + 4) = v209;
    v211 = *(_DWORD *)(v8 + 12);
    if (!v211)
    {
      __break(0xC471u);
      JUMPOUT(0x197E84C60);
    }
    v212 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v211 - 1) + 9) & 1;
    *(_BYTE *)(v206 + 56) = 0;
    v219 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v206, v8 + 7368, 0, v212, a5, a6, a7, a8);
    *(_DWORD *)(v8 + 7368) = v219;
    v220 = *(_QWORD *)(v8 + 7288);
    if (v219 == 523 && !*(_BYTE *)(v220 + 56))
    {
      v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::SyntaxChecker>(v8, (uint64_t)v11, v213, v214, v215, v216, v217, v218);
      goto LABEL_40;
    }
    JSC::Lexer<unsigned char>::setOffset(v220, v204, v205, v214, v215, v216, v217, v218);
    v225 = *(_QWORD *)(v8 + 7288);
    *(_DWORD *)v225 = v207;
    *(_BYTE *)(v225 + 56) = v208;
    v226 = *(_DWORD *)(v8 + 7400);
    v227 = *(_DWORD *)(v8 + 7412);
    v228 = *(_DWORD *)(v8 + 7404);
    *(_DWORD *)(v8 + 7444) = v226;
    *(_DWORD *)(v8 + 7448) = v227;
    *(_DWORD *)(v8 + 7452) = v228;
    *(_DWORD *)(v225 + 4) = v226;
    v229 = *(_DWORD *)(v8 + 12);
    if (!v229)
    {
      __break(0xC471u);
      JUMPOUT(0x197E84C68);
    }
    *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v225, v8 + 7368, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v229 - 1) + 9) & 1, v221, v222, v223, v224);
    *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v346;
    *(_OWORD *)(v8 + 7296) = v356;
    *(_DWORD *)(v8 + 7312) = 0;
    *(_DWORD *)(v8 + 7316) = v349;
    *(_OWORD *)(v8 + 7320) = v350;
    *(_QWORD *)(v8 + 7336) = v351;
    v9[5].i8[4] = (char)v348;
    v9[5].i8[5] = (char)v347;
    v230 = *(WTF::StringImpl **)(v8 + 7360);
    *(_QWORD *)(v8 + 7360) = 0;
    if (v230)
    {
      if (*(_DWORD *)v230 == 2)
      {
        WTF::StringImpl::~StringImpl(v230, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v310, v311, v312, v313, v314, v315, v316, v317);
      }
      else
      {
        *(_DWORD *)v230 -= 2;
      }
    }
  }
LABEL_161:
  v165 = *(_DWORD *)(v8 + 12);
  if (!v165)
  {
    __break(0xC471u);
    JUMPOUT(0x197E84A94);
  }
  if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * (v165 - 1) + 12) & 0x10) != 0)
  {
    if (*v12 == 546)
    {
      if (*(_QWORD *)(v8 + 7360))
        goto LABEL_282;
      v202 = "Cannot use 'await' within static block";
    }
    else
    {
      if (*v12 != 545)
        goto LABEL_163;
      if (*(_QWORD *)(v8 + 7360))
        goto LABEL_282;
      v202 = "Cannot use 'yield' within static block";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, v202);
    goto LABEL_282;
  }
LABEL_163:
  v354 = 0;
  v355 = 0;
  v166 = *(_QWORD *)(v8 + 7288);
  v167 = *(unsigned __int8 **)(v166 + 80);
  v168 = *(_QWORD *)(v166 + 96);
  if ((unint64_t)v167 >= v168)
  {
LABEL_214:
    v231 = *v12;
    if (*v12 == 12)
    {
      if (**(_QWORD **)(v8 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 896)
        || v9[10].i8[4])
      {
        goto LABEL_224;
      }
      v232 = v8 + 7296;
      v356 = *(_OWORD *)(v8 + 7296);
      LODWORD(v349) = *(_DWORD *)(v8 + 7316);
      *(_QWORD *)&v351 = *(_QWORD *)(v8 + 7336);
      v350 = *(_OWORD *)(v8 + 7320);
      LODWORD(v348) = v9[5].u8[4];
      v233 = v9[5].u8[5];
      v234 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
      v235 = *(unsigned int *)(v8 + 7404);
      v236 = *(_DWORD *)v166;
      v346 = *(_DWORD *)(v166 + 4);
      LODWORD(v347) = v233;
      v237 = *(_BYTE *)(v166 + 56);
      v238 = *(_DWORD *)(v8 + 7400);
      v239 = *(_DWORD *)(v8 + 7412);
      *(_DWORD *)(v8 + 7444) = v238;
      *(_DWORD *)(v8 + 7448) = v239;
      *(_DWORD *)(v8 + 7452) = v235;
      *(_DWORD *)(v166 + 4) = v238;
      v240 = *(_DWORD *)(v8 + 12);
      if (!v240)
      {
        __break(0xC471u);
        JUMPOUT(0x197E84C70);
      }
      v241 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v240 - 1) + 9) & 1;
      *(_BYTE *)(v166 + 56) = 0;
      v242 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v166, v8 + 7368, 0, v241, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v242;
      v243 = *(_QWORD *)(v8 + 7288);
      if (v242 == 523 && !*(_BYTE *)(v243 + 56))
      {
        if (!*(_QWORD *)(v8 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v8, "Cannot use async function declaration in single-statement context");
        goto LABEL_234;
      }
      JSC::Lexer<unsigned char>::setOffset(v243, v234, v235, (uint64_t)a4, a5, a6, a7, a8);
      v248 = *(_QWORD *)(v8 + 7288);
      *(_DWORD *)v248 = v236;
      *(_BYTE *)(v248 + 56) = v237;
      v249 = *(_DWORD *)(v8 + 7400);
      v250 = *(_DWORD *)(v8 + 7412);
      v251 = *(_DWORD *)(v8 + 7404);
      *(_DWORD *)(v8 + 7444) = v249;
      *(_DWORD *)(v8 + 7448) = v250;
      *(_DWORD *)(v8 + 7452) = v251;
      *(_DWORD *)(v248 + 4) = v249;
      v252 = *(_DWORD *)(v8 + 12);
      if (!v252)
      {
        __break(0xC471u);
        JUMPOUT(0x197E843F0);
      }
    }
    else
    {
      if (v231 != 544)
      {
        if (v231 == 541)
        {
          if (!*(_QWORD *)(v8 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "'class' declaration is not directly within a block statement");
          goto LABEL_234;
        }
LABEL_224:
        if ((unint64_t)v343 < *(_QWORD *)(*(_QWORD *)(v8 + 7216) + 93104))
        {
          if (!*(_QWORD *)(v8 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(v8);
            v9[6].i8[4] = 1;
          }
        }
        else
        {
          LODWORD(v350) = 0;
          *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
          *(_QWORD *)&v351 = v8;
          *(_QWORD *)(v8 + 7496) = &v350;
          v253 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v11, &v350);
          *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
          v254 = *(_DWORD *)(v8 + 7368);
          if (v253)
          {
            if (v254 != 6)
            {
LABEL_227:
              if (v254 == 17)
              {
                v256 = *(_DWORD *)(v8 + 7400);
                v257 = *(_DWORD *)(v8 + 7412);
                v258 = *(_DWORD *)(v8 + 7404);
                *(_DWORD *)(v8 + 7444) = v256;
                *(_DWORD *)(v8 + 7448) = v257;
                *(_DWORD *)(v8 + 7452) = v258;
                v259 = *(_QWORD *)(v8 + 7288);
                *(_DWORD *)(v259 + 4) = v256;
                v260 = *(_DWORD *)(v8 + 12);
                if (!v260)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E84AD4);
                }
                v261 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v260 - 1) + 9) & 1;
                *(_BYTE *)(v259 + 56) = 0;
                *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v259, v8 + 7368, 0, v261, a5, a6, a7, a8);
              }
              else
              {
                v255 = v254 == 1 || v254 == 20;
                if (!v255 && !*(_BYTE *)(*(_QWORD *)(v8 + 7288) + 56))
                  goto LABEL_233;
              }
LABEL_237:
              v18 = 43;
              goto LABEL_238;
            }
            v262 = *(_DWORD *)(v8 + 7400);
            v263 = *(_DWORD *)(v8 + 7412);
            v264 = *(_DWORD *)(v8 + 7404);
            *(_DWORD *)(v8 + 7444) = v262;
            *(_DWORD *)(v8 + 7448) = v263;
            *(_DWORD *)(v8 + 7452) = v264;
            v265 = *(_QWORD *)(v8 + 7288);
            *(_DWORD *)(v265 + 4) = v262;
            v266 = *(_DWORD *)(v8 + 12);
            if (!v266)
            {
              __break(0xC471u);
              JUMPOUT(0x197E84AF4);
            }
            v267 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v266 - 1) + 9) & 1;
            *(_BYTE *)(v265 + 56) = 0;
            *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v265, v8 + 7368, 0, v267, a5, a6, a7, a8);
            *v9 = vadd_s32(*v9, (int32x2_t)0x100000001);
            LODWORD(v350) = 0;
            *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
            for (*(_QWORD *)&v351 = v8; ; *(_QWORD *)&v351 = v8)
            {
              *(_QWORD *)(v8 + 7496) = &v350;
              v268 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v11, &v350);
              *(_QWORD *)(v351 + 7496) = *((_QWORD *)&v350 + 1);
              if (!v268)
                break;
              v254 = *v12;
              if (*v12 != 6)
                goto LABEL_227;
              v269 = *(_DWORD *)(v8 + 7400);
              v270 = *(_DWORD *)(v8 + 7412);
              v271 = *(_DWORD *)(v8 + 7404);
              *(_DWORD *)(v8 + 7444) = v269;
              *(_DWORD *)(v8 + 7448) = v270;
              *(_DWORD *)(v8 + 7452) = v271;
              v272 = *(_QWORD *)(v8 + 7288);
              *(_DWORD *)(v272 + 4) = v269;
              v273 = *(_DWORD *)(v8 + 12);
              if (!v273)
              {
                __break(0xC471u);
                JUMPOUT(0x197E84AECLL);
              }
              v274 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v273 - 1) + 9) & 1;
              *(_BYTE *)(v272 + 56) = 0;
              *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v272, v8 + 7368, 2u, v274, a5, a6, a7, a8);
              LODWORD(v350) = 0;
              *((_QWORD *)&v350 + 1) = *(_QWORD *)(v8 + 7496);
            }
            if (*v12 != 20 && (*v12 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v8 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression in a comma expression");
              goto LABEL_250;
            }
LABEL_265:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
            goto LABEL_250;
          }
          if (v254 == 20 || (v254 & 0x100000) != 0)
            goto LABEL_265;
          if (!*(_QWORD *)(v8 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(v8);
        }
LABEL_250:
        if (*v12 != 20 && (*v12 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v8 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression statement");
          goto LABEL_234;
        }
        goto LABEL_233;
      }
      v232 = v8 + 7296;
      v356 = *(_OWORD *)(v8 + 7296);
      LODWORD(v349) = *(_DWORD *)(v8 + 7316);
      *(_QWORD *)&v351 = *(_QWORD *)(v8 + 7336);
      v350 = *(_OWORD *)(v8 + 7320);
      LODWORD(v348) = v9[5].u8[4];
      v280 = v9[5].u8[5];
      v281 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
      v282 = *(unsigned int *)(v8 + 7404);
      v283 = *(_DWORD *)v166;
      v346 = *(_DWORD *)(v166 + 4);
      LODWORD(v347) = v280;
      v284 = *(_BYTE *)(v166 + 56);
      v285 = *(_DWORD *)(v8 + 7400);
      v286 = *(_DWORD *)(v8 + 7412);
      *(_DWORD *)(v8 + 7444) = v285;
      *(_DWORD *)(v8 + 7448) = v286;
      *(_DWORD *)(v8 + 7452) = v282;
      *(_DWORD *)(v166 + 4) = v285;
      v287 = *(_DWORD *)(v8 + 12);
      if (!v287)
      {
        __break(0xC471u);
        JUMPOUT(0x197E84C78);
      }
      v288 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v287 - 1) + 9) & 1;
      *(_BYTE *)(v166 + 56) = 0;
      v289 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v166, v8 + 7368, 0, v288, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v289;
      if (v289 == 4)
      {
        if (!*(_QWORD *)(v8 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v8, 1, "Cannot use lexical declaration in single-statement context");
        goto LABEL_234;
      }
      JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v8 + 7288), v281, v282, (uint64_t)a4, a5, a6, a7, a8);
      v248 = *(_QWORD *)(v8 + 7288);
      *(_DWORD *)v248 = v283;
      *(_BYTE *)(v248 + 56) = v284;
      v291 = *(_DWORD *)(v8 + 7400);
      v292 = *(_DWORD *)(v8 + 7412);
      v293 = *(_DWORD *)(v8 + 7404);
      *(_DWORD *)(v8 + 7444) = v291;
      *(_DWORD *)(v8 + 7448) = v292;
      *(_DWORD *)(v8 + 7452) = v293;
      *(_DWORD *)(v248 + 4) = v291;
      v252 = *(_DWORD *)(v8 + 12);
      if (!v252)
      {
        __break(0xC471u);
        JUMPOUT(0x197E84C80);
      }
    }
    *(_DWORD *)(v8 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v248, v8 + 7368, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v252 - 1) + 9) & 1, v244, v245, v246, v247);
    *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v346;
    *(_OWORD *)v232 = v356;
    *(_DWORD *)(v8 + 7312) = 0;
    *(_DWORD *)(v8 + 7316) = v349;
    *(_OWORD *)(v232 + 24) = v350;
    *(_QWORD *)(v232 + 40) = v351;
    v9[5].i8[4] = (char)v348;
    v9[5].i8[5] = (char)v347;
    v294 = *(WTF::StringImpl **)(v8 + 7360);
    *(_QWORD *)(v8 + 7360) = 0;
    if (v294)
    {
      if (*(_DWORD *)v294 == 2)
      {
        WTF::StringImpl::~StringImpl(v294, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
      }
      else
      {
        *(_DWORD *)v294 -= 2;
      }
    }
    goto LABEL_224;
  }
  v169 = 0;
  LODWORD(v170) = 0;
  v171 = v8 + 7428;
  v172 = (char *)&v350 + 8;
  v173 = (char *)&v351 + 4;
  while (2)
  {
    v174 = v168 - (_QWORD)v167;
    while (1)
    {
      v175 = *v167;
      if ((v175 - 9) < 5 || v175 == 32)
        goto LABEL_166;
      v347 = v172;
      v348 = v173;
      v349 = v171;
      if (v175 == 58)
        break;
      v173 = (char *)v348;
      v171 = v349;
      v172 = v347;
      if (v175 != 160)
        goto LABEL_214;
LABEL_166:
      ++v167;
      if (!--v174)
        goto LABEL_214;
    }
    v176 = *v12;
    if (*v12 == 544)
      goto LABEL_171;
    switch(v176)
    {
      case 545:
LABEL_336:
        v320 = *(_DWORD *)(v8 + 12);
        if (!v320)
        {
          __break(0xC471u);
          JUMPOUT(0x197E84BA0);
        }
        v321 = v320 - 1;
        if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * v321 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)v8 + 720 * v321 + 11) & 2) == 0)
        {
          goto LABEL_179;
        }
        if (!*(_QWORD *)(v8 + 7360))
        {
          *(_QWORD *)&v350 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(v8);
          v295 = "Cannot use 'yield' as a label ";
          goto LABEL_293;
        }
        break;
      case 546:
        goto LABEL_174;
      case 1048592:
        v318 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
        v319 = **(_QWORD **)(v8 + 7376);
        if (v319 == v318[41])
        {
LABEL_171:
          v177 = *(_DWORD *)(v8 + 12);
          if (!v177)
          {
            __break(0xC471u);
            JUMPOUT(0x197E84A9CLL);
          }
          if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * (v177 - 1) + 9) & 1) == 0)
          {
            if (v176 == 1048592)
            {
              v318 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
              v319 = **(_QWORD **)(v8 + 7376);
              goto LABEL_354;
            }
            goto LABEL_179;
          }
          if (!*(_QWORD *)(v8 + 7360))
          {
            *(_QWORD *)&v350 = "in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(v8, (const char **)&v350);
          }
        }
        else
        {
LABEL_354:
          if (v319 != v318[16])
          {
LABEL_335:
            if (v319 == v318[62])
              goto LABEL_336;
LABEL_179:
            v179 = *(uint64_t **)(v8 + 7376);
            *(_QWORD *)&v356 = *(_QWORD *)(v8 + 7416);
            DWORD2(v356) = *(_DWORD *)(v8 + 7424);
            v352 = *(_QWORD *)v349;
            v353 = *(_DWORD *)(v349 + 8);
            v180 = *(_DWORD *)(v8 + 7400);
            v181 = *(_DWORD *)(v8 + 7412);
            v182 = *(_DWORD *)(v8 + 7404);
            *(_DWORD *)(v8 + 7444) = v180;
            *(_DWORD *)(v8 + 7448) = v181;
            *(_DWORD *)(v8 + 7452) = v182;
            *(_DWORD *)(v166 + 4) = v180;
            v183 = *(_DWORD *)(v8 + 12);
            if (!v183)
            {
              __break(0xC471u);
              JUMPOUT(0x197E84AACLL);
            }
            v184 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v183 - 1) + 9) & 1;
            *(_BYTE *)(v166 + 56) = 0;
            v185 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v166, v8 + 7368, 0, v184, a5, a6, a7, a8);
            *(_DWORD *)(v8 + 7368) = v185;
            if (v185 == 18)
            {
              v186 = *(_DWORD *)(v8 + 7400);
              v187 = *(_DWORD *)(v8 + 7412);
              v188 = *(_DWORD *)(v8 + 7404);
              *(_DWORD *)(v8 + 7444) = v186;
              *(_DWORD *)(v8 + 7448) = v187;
              *(_DWORD *)(v8 + 7452) = v188;
              v189 = *(_QWORD *)(v8 + 7288);
              *(_DWORD *)(v189 + 4) = v186;
              v190 = *(_DWORD *)(v8 + 12);
              if (!v190)
              {
                __break(0xC471u);
                JUMPOUT(0x197E84AB4);
              }
              v191 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v190 - 1) + 9) & 1;
              *(_BYTE *)(v189 + 56) = 0;
              v192 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v189, v8 + 7368, 0, v191, a5, a6, a7, a8);
              *(_DWORD *)(v8 + 7368) = v192;
              if (!(_DWORD)v170)
              {
LABEL_183:
                v193 = *(_DWORD *)(v8 + 12);
                if (!v193)
                {
LABEL_319:
                  __break(0xC471u);
                  JUMPOUT(0x197E84ABCLL);
                }
                v194 = v193 - 1;
                v195 = *(_QWORD *)v8;
                v196 = v193 - 1;
                while (1)
                {
                  v197 = *(_QWORD *)(v195 + 720 * v194 + 40);
                  if (v197)
                  {
                    v198 = *(unsigned int *)(v197 + 12);
                    v199 = 16 * v198 - 16;
                    v200 = v198;
                    do
                    {
                      if ((int)v200 < 1)
                        goto LABEL_186;
                      if (--v200 >= v198)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E84AC4);
                      }
                      v201 = *(_QWORD *)(*(_QWORD *)v197 + v199);
                      v199 -= 16;
                      a2 = *v179;
                    }
                    while (v201 != *v179);
                    if (v192 != 20 && (v192 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(v8 + 7360))
                      {
                        *(_QWORD *)&v350 = v201;
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(v8, 1, "Cannot find scope for the label '", (uint64_t *)&v350);
                      }
                      goto LABEL_234;
                    }
                    goto LABEL_233;
                  }
LABEL_186:
                  if (!v196 || (*(_BYTE *)(v195 + 720 * v194 + 12) & 0x40) != 0)
                    break;
                  v196 = v194 - 1;
                  v194 = (v194 - 1);
                  if (v193 <= v196)
                    goto LABEL_319;
                }
                *(_QWORD *)&v350 = v179;
                v275 = v347;
                *(_QWORD *)v347 = v356;
                *((_DWORD *)v275 + 2) = DWORD2(v356);
                v276 = v348;
                *(_QWORD *)v348 = v352;
                *((_DWORD *)v276 + 2) = v353;
                if ((_DWORD)v170 == (_DWORD)v355)
                {
                  v277 = (_OWORD *)WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v354, v170 + 1, (unint64_t)&v350);
                  LODWORD(v170) = HIDWORD(v355);
                  v169 = v354;
                  v278 = (_OWORD *)((char *)v354 + 32 * HIDWORD(v355));
                  v279 = v277[1];
                  *v278 = *v277;
                  v278[1] = v279;
                }
                else
                {
                  v308 = v351;
                  v309 = (_OWORD *)((char *)v169 + 32 * v170);
                  *v309 = v350;
                  v309[1] = v308;
                }
                v170 = (v170 + 1);
                HIDWORD(v355) = v170;
                a2 = *v12;
                if ((_DWORD)a2 == 12)
                  goto LABEL_263;
                if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(v8, a2, *(_QWORD **)(v8 + 7376)))
                  goto LABEL_263;
                if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(v8, *(_DWORD *)(v8 + 7368), *(_QWORD **)(v8 + 7376)))
                {
                  goto LABEL_263;
                }
                v304 = *v12;
                if (*v12 == 546)
                  goto LABEL_263;
                if ((v304 - 518) <= 0xA && ((1 << (v304 - 6)) & 0x601) != 0)
                {
                  v305 = 1;
                  goto LABEL_364;
                }
                if (v304 == 1048592
                  && **(_QWORD **)(v8 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 128))
                {
LABEL_263:
                  v166 = *(_QWORD *)(v8 + 7288);
                  v167 = *(unsigned __int8 **)(v166 + 80);
                  v168 = *(_QWORD *)(v166 + 96);
                  v173 = (char *)v348;
                  v171 = v349;
                  v172 = v347;
                  if ((unint64_t)v167 < v168)
                    continue;
                  goto LABEL_214;
                }
                v305 = 0;
LABEL_364:
                *(_QWORD *)&v350 = 0;
                if ((_DWORD)v170)
                {
                  v330 = *(_DWORD *)(v8 + 12);
                  if (!v330)
                  {
LABEL_369:
                    __break(0xC471u);
                    JUMPOUT(0x197E84CFCLL);
                  }
                  v331 = v330 - 1;
                  v332 = v170;
                  while (1)
                  {
                    v333 = *(_QWORD **)v169;
                    v169 = (WTF *)((char *)v169 + 32);
                    JSC::Scope::pushLabel(*(_QWORD *)v8 + 720 * (v330 - 1), v333, v305);
                    if (!--v332)
                      break;
                    v330 = *(_DWORD *)(v8 + 12);
                    if (!v330)
                      goto LABEL_369;
                  }
                  v9[25].i8[5] = 1;
                  v339 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(v8, (uint64_t)v11, &v350, v334, v335, v336, v337, v338);
                  if (*(_DWORD *)(v8 + 12) <= v331)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E84DA8);
                  }
                  v340 = *(_QWORD *)(*(_QWORD *)v8 + 720 * v331 + 40);
                  v341 = *(_DWORD *)(v340 + 12) - 1;
                  do
                  {
                    if (v341 == -1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E84DB0);
                    }
                    *(_DWORD *)(v340 + 12) = v341--;
                    --v170;
                  }
                  while (v170);
                  if (v339)
                    goto LABEL_237;
                }
                else
                {
                  v9[25].i8[5] = 1;
                  v18 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(v8, (uint64_t)v11, &v350, (uint64_t)a4, a5, a6, a7, a8);
                  if ((_DWORD)v18)
                    goto LABEL_238;
                }
                if (*v12 == 20 || (*v12 & 0x100000) != 0)
                  goto LABEL_233;
                if (!*(_QWORD *)(v8 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23]>(v8);
                goto LABEL_234;
              }
              v306 = v170;
              v307 = v169;
              while (*v179 != **(_QWORD **)v307)
              {
                v307 = (WTF *)((char *)v307 + 32);
                if (!--v306)
                  goto LABEL_183;
              }
              if (v192 != 20 && (v192 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(v8 + 7360))
                {
                  *(_QWORD *)&v350 = *v179;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(v8, (uint64_t *)&v350);
                }
                goto LABEL_234;
              }
            }
            else if (v185 != 20 && (v185 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v8 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v8, "Labels must be followed by a ':'");
              goto LABEL_234;
            }
LABEL_233:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(v8);
            goto LABEL_234;
          }
LABEL_174:
          if (v9[5].i8[4])
          {
            v178 = *(_DWORD *)(v8 + 12);
            if (!v178)
            {
              __break(0xC471u);
              JUMPOUT(0x197E84AA4);
            }
            if ((*(_DWORD *)(*(_QWORD *)v8 + 720 * (v178 - 1) + 10) & 0x102000) == 0
              && *(_DWORD *)(v8 + 7480) != 1)
            {
              if (v176 == 1048592)
              {
                v318 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
                v319 = **(_QWORD **)(v8 + 7376);
                goto LABEL_335;
              }
              goto LABEL_179;
            }
          }
          if (!*(_QWORD *)(v8 + 7360))
          {
            *(_QWORD *)&v350 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(v8);
            v295 = "Cannot use 'await' as a label ";
LABEL_293:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(v8, 0, v295, (const char **)&v350);
          }
        }
        break;
      default:
        goto LABEL_179;
    }
    break;
  }
LABEL_234:
  v18 = 0;
LABEL_238:
  if (v354)
    WTF::fastFree((unint64_t)v354, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_41:
  *(_DWORD *)(v8 + 7456) = v10;
  return v18;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v26 = off_1E3572250;
    v27 = (WTF *)v29;
    v28 = xmmword_199122F80;
    v29[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ".");
    v26[5]((WTF::StringPrintStream *)&v26);
    WTF::String::fromUTF8WithLatin1Fallback(v27, v28, &v25);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v25, v3, v4, v5, v6, v7, v8);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (v27 != (WTF *)v29)
      WTF::fastFree((unint64_t)v27, v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  _BYTE v16[12];
  int v17;
  int v18;
  int v19;

  v19 = 0;
  JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::SyntaxChecker>(a1, a2, &v19, &v18, &v17, (uint64_t)v16, (uint64_t)v16, (uint64_t)v16, 1, a3, &v15);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  v8 = *(_DWORD *)(a1 + 7368);
  if (v8 == 17)
  {
    v10 = *(_DWORD *)(a1 + 7400);
    v11 = *(_DWORD *)(a1 + 7412);
    v12 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v10;
    *(_DWORD *)(a1 + 7448) = v11;
    *(_DWORD *)(a1 + 7452) = v12;
    result = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(result + 4) = v10;
    v13 = *(_DWORD *)(a1 + 12);
    if (v13)
    {
      v14 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
      *(_BYTE *)(result + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v14, v4, v5, v6, v7);
      return 43;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    result = 43;
    if (v8 != 1 && v8 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    {
      if ((v8 & 0x100000) != 0)
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      else
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected ';' after variable declaration");
      return 0;
    }
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v54;
  const char *v55;
  int v56;
  char v57;
  uint64_t v58;
  void ***v59;
  __int128 v60;
  _OWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  _QWORD **v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  int *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;

  v8 = a1;
  v93 = 0;
  v94 = 0;
  v9 = *(_QWORD *)(a1 + 7288);
  v10 = *(unsigned __int8 **)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 96);
  if ((unint64_t)v10 >= v11)
  {
    v12 = 0;
LABEL_37:
    v48 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::SyntaxChecker>(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_38;
  }
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = (_BYTE *)(v8 + 7344);
  v15 = (int *)(v8 + 7368);
  v16 = v8 + 7416;
  v17 = v8 + 7428;
  v18 = (char *)&v87 + 8;
  v19 = (char *)&v88 + 4;
  while (2)
  {
    v20 = v11 - (_QWORD)v10;
    while (1)
    {
      v21 = *v10;
      if ((v21 - 9) < 5 || v21 == 32)
        goto LABEL_4;
      v82 = v18;
      v83 = v19;
      v84 = v14;
      v85 = v15;
      v80 = a3;
      v81 = (uint64_t)a2;
      v86 = v8;
      if (v21 == 58)
        break;
      a3 = a3;
      if (v21 != 160)
        goto LABEL_37;
LABEL_4:
      ++v10;
      if (!--v20)
        goto LABEL_37;
    }
    v22 = *v15;
    if (*v15 == 544)
      goto LABEL_9;
    if (v22 == 545)
    {
LABEL_84:
      v64 = *(_DWORD *)(v86 + 12);
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x197E85738);
      }
      v65 = v64 - 1;
      if ((*(_BYTE *)(*(_QWORD *)v86 + 720 * v65 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)v86 + 720 * v65 + 11) & 2) == 0)
      {
        goto LABEL_17;
      }
      if (*(_QWORD *)(v86 + 7360))
        goto LABEL_53;
      v54 = v86;
      *(_QWORD *)&v87 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(v86);
      v55 = "Cannot use 'yield' as a label ";
      goto LABEL_56;
    }
    if (v22 == 546)
      goto LABEL_15;
    if (v22 != 1048592)
      goto LABEL_17;
    v62 = *(_QWORD **)(*(_QWORD *)(v86 + 7216) + 41952);
    v63 = **(_QWORD **)(v86 + 7376);
    if (v63 == v62[41])
    {
LABEL_9:
      v23 = *(_DWORD *)(v86 + 12);
      if (!v23)
      {
LABEL_124:
        __break(0xC471u);
        JUMPOUT(0x197E85694);
      }
      if ((*(_BYTE *)(*(_QWORD *)v86 + 720 * (v23 - 1) + 9) & 1) == 0)
      {
        if (v22 == 1048592)
        {
          v62 = *(_QWORD **)(*(_QWORD *)(v86 + 7216) + 41952);
          v63 = **(_QWORD **)(v86 + 7376);
          goto LABEL_98;
        }
        goto LABEL_17;
      }
      if (!*(_QWORD *)(v86 + 7360))
      {
        *(_QWORD *)&v87 = "in strict mode";
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(v86, (const char **)&v87);
      }
      goto LABEL_53;
    }
LABEL_98:
    if (v63 == v62[16])
    {
LABEL_15:
      if (*v84)
      {
        v24 = *(_DWORD *)(v86 + 12);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8569CLL);
        }
        if ((*(_DWORD *)(*(_QWORD *)v86 + 720 * (v24 - 1) + 10) & 0x102000) == 0
          && *(_DWORD *)(v86 + 7480) != 1)
        {
          if (v22 == 1048592)
          {
            v62 = *(_QWORD **)(*(_QWORD *)(v86 + 7216) + 41952);
            v63 = **(_QWORD **)(v86 + 7376);
            goto LABEL_83;
          }
          goto LABEL_17;
        }
      }
      if (*(_QWORD *)(v86 + 7360))
        goto LABEL_53;
      v54 = v86;
      *(_QWORD *)&v87 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(v86);
      v55 = "Cannot use 'await' as a label ";
LABEL_56:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(v54, 0, v55, (const char **)&v87);
      goto LABEL_53;
    }
LABEL_83:
    if (v63 == v62[62])
      goto LABEL_84;
LABEL_17:
    v25 = *(void ***)(v86 + 7376);
    v91 = *(_QWORD *)v16;
    v92 = *(_DWORD *)(v16 + 8);
    v89 = *(_QWORD *)v17;
    v90 = *(_DWORD *)(v17 + 8);
    v26 = *(_DWORD *)(v86 + 7400);
    v27 = *(_DWORD *)(v86 + 7412);
    v28 = *(_DWORD *)(v86 + 7404);
    *(_DWORD *)(v86 + 7444) = v26;
    *(_DWORD *)(v86 + 7448) = v27;
    *(_DWORD *)(v86 + 7452) = v28;
    *(_DWORD *)(v9 + 4) = v26;
    v29 = *(_DWORD *)(v86 + 12);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x197E856A4);
    }
    v30 = *(_BYTE *)(*(_QWORD *)v86 + 720 * (v29 - 1) + 9) & 1;
    *(_BYTE *)(v9 + 56) = 0;
    v31 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v9, (uint64_t)v85, 0, v30, a5, a6, a7, a8);
    *(_DWORD *)(v86 + 7368) = v31;
    if (v31 != 18)
    {
      if (v31 == 20 || (v31 & 0x100000) != 0)
        goto LABEL_52;
      if (!*(_QWORD *)(v86 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v86, "Labels must be followed by a ':'");
      goto LABEL_53;
    }
    v32 = *(_DWORD *)(v86 + 7400);
    v33 = *(_DWORD *)(v86 + 7412);
    v34 = *(_DWORD *)(v86 + 7404);
    *(_DWORD *)(v86 + 7444) = v32;
    *(_DWORD *)(v86 + 7448) = v33;
    *(_DWORD *)(v86 + 7452) = v34;
    v35 = *(_QWORD *)(v86 + 7288);
    *(_DWORD *)(v35 + 4) = v32;
    v36 = *(_DWORD *)(v86 + 12);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197E856ACLL);
    }
    v37 = *(_BYTE *)(*(_QWORD *)v86 + 720 * (v36 - 1) + 9) & 1;
    *(_BYTE *)(v35 + 56) = 0;
    v38 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, (uint64_t)v85, 0, v37, a5, a6, a7, a8);
    *(_DWORD *)(v86 + 7368) = v38;
    if (!(_DWORD)v13)
    {
LABEL_21:
      v39 = *(_DWORD *)(v86 + 12);
      if (!v39)
      {
LABEL_80:
        __break(0xC471u);
        JUMPOUT(0x197E856B4);
      }
      v40 = v39 - 1;
      v41 = *(_QWORD *)v86;
      v42 = v39 - 1;
      while (1)
      {
        v43 = *(_QWORD *)(v41 + 720 * v40 + 40);
        if (v43)
        {
          v44 = *(unsigned int *)(v43 + 12);
          v45 = 16 * v44 - 16;
          v46 = v44;
          do
          {
            if ((int)v46 < 1)
              goto LABEL_24;
            if (--v46 >= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x197E856BCLL);
            }
            v47 = *(void **)(*(_QWORD *)v43 + v45);
            v45 -= 16;
            a2 = *v25;
          }
          while (v47 != *v25);
          if (v38 != 20 && (v38 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(v86 + 7360))
            {
              *(_QWORD *)&v87 = v47;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(v86, 1, "Cannot find scope for the label '", (uint64_t *)&v87);
            }
            goto LABEL_53;
          }
          goto LABEL_52;
        }
LABEL_24:
        if (!v42 || (*(_BYTE *)(v41 + 720 * v40 + 12) & 0x40) != 0)
          break;
        v42 = v40 - 1;
        v40 = (v40 - 1);
        if (v39 <= v42)
          goto LABEL_80;
      }
      *(_QWORD *)&v87 = v25;
      *(_QWORD *)v82 = v91;
      *((_DWORD *)v82 + 2) = v92;
      *(_QWORD *)v83 = v89;
      *((_DWORD *)v83 + 2) = v90;
      if ((_DWORD)v13 == (_DWORD)v94)
      {
        v50 = (_OWORD *)WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, v13 + 1, (unint64_t)&v87);
        v12 = v93;
        LODWORD(v13) = HIDWORD(v94);
        v51 = (_OWORD *)(v93 + 32 * HIDWORD(v94));
        v52 = v50[1];
        *v51 = *v50;
        v51[1] = v52;
      }
      else
      {
        v60 = v88;
        v61 = (_OWORD *)(v12 + 32 * v13);
        *v61 = v87;
        v61[1] = v60;
      }
      v13 = (v13 + 1);
      HIDWORD(v94) = v13;
      if (*v85 != 12
        && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(v86, *v85, *(_QWORD **)(v86 + 7376))
        && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(v86, *(_DWORD *)(v86 + 7368), *(_QWORD **)(v86 + 7376)))
      {
        v56 = *v85;
        if (*v85 != 546)
        {
          if ((v56 - 518) <= 0xA && ((1 << (v56 - 6)) & 0x601) != 0)
          {
            v57 = 1;
LABEL_103:
            *(_QWORD *)&v87 = 0;
            if ((_DWORD)v13)
            {
              v66 = *(_DWORD *)(v86 + 12);
              if (!v66)
              {
LABEL_108:
                __break(0xC471u);
                JUMPOUT(0x197E8585CLL);
              }
              v67 = v66 - 1;
              v68 = (_QWORD **)v12;
              v69 = v13;
              while (1)
              {
                v70 = *v68;
                v68 += 4;
                JSC::Scope::pushLabel(*(_QWORD *)v86 + 720 * (v66 - 1), v70, v57);
                if (!--v69)
                  break;
                v66 = *(_DWORD *)(v86 + 12);
                if (!v66)
                  goto LABEL_108;
              }
              v84[161] = v80;
              v76 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(v86, v81, &v87, v71, v72, v73, v74, v75);
              if (*(_DWORD *)(v86 + 12) <= v67)
              {
                __break(0xC471u);
                JUMPOUT(0x197E85924);
              }
              v77 = *(_QWORD *)(*(_QWORD *)v86 + 720 * v67 + 40);
              v78 = *(_DWORD *)(v77 + 12) - 1;
              do
              {
                if (v78 == -1)
                  goto LABEL_124;
                *(_DWORD *)(v77 + 12) = v78--;
                --v13;
              }
              while (v13);
              if (v76)
              {
                v48 = 43;
                goto LABEL_38;
              }
            }
            else
            {
              v84[161] = v80;
              v48 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(v86, v81, &v87, a4, a5, a6, a7, a8);
              if ((_DWORD)v48)
                goto LABEL_38;
            }
            if (*v85 != 20 && (*v85 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v86 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23]>(v86);
              goto LABEL_53;
            }
LABEL_52:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(v86);
            goto LABEL_53;
          }
          if (v56 != 1048592
            || **(_QWORD **)(v86 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 7216) + 41952) + 128))
          {
            v57 = 0;
            goto LABEL_103;
          }
        }
      }
      v15 = v85;
      v8 = v86;
      v9 = *(_QWORD *)(v86 + 7288);
      v10 = *(unsigned __int8 **)(v9 + 80);
      v11 = *(_QWORD *)(v9 + 96);
      a2 = (void *)v81;
      v18 = v82;
      a3 = v80;
      v19 = v83;
      v14 = v84;
      if ((unint64_t)v10 < v11)
        continue;
      goto LABEL_37;
    }
    break;
  }
  v58 = v13;
  v59 = (void ***)v12;
  while (*v25 != **v59)
  {
    v59 += 4;
    if (!--v58)
      goto LABEL_21;
  }
  if (v38 == 20 || (v38 & 0x100000) != 0)
    goto LABEL_52;
  if (!*(_QWORD *)(v86 + 7360))
  {
    *(_QWORD *)&v87 = *v25;
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(v86, (uint64_t *)&v87);
  }
LABEL_53:
  v48 = 0;
LABEL_38:
  if (v12)
  {
    v93 = 0;
    LODWORD(v94) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return v48;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE v39[24];
  _OWORD v40[2];
  uint64_t v41;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v23 = 0;
  *(_DWORD *)(a1 + 7368) = v18;
  if (v18 != 191488)
  {
LABEL_3:
    v24 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v23;
    v41 = 0;
    memset(v40, 0, sizeof(v40));
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 1, 1, 0, 1, v40, 1) & 1) == 0)
    {
      if (*v16 == 20 || (*v16 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this function");
      }
      goto LABEL_22;
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::declareFunction((uint64_t)v39, (uint64_t *)a1, *(WTF::StringImpl ***)&v40[0], v25, v26, v27, v28, v29);
    if ((v39[0] & 1) == 0)
      goto LABEL_5;
    v37 = *(_DWORD *)(a1 + 12);
    if (v37)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v38 = **(_QWORD **)&v40[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a function named '", &v38);
        }
        goto LABEL_22;
      }
LABEL_5:
      if ((v39[0] & 2) == 0)
      {
        result = 43;
LABEL_7:
        *(_BYTE *)(a1 + 7474) = v24;
        return result;
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        v38 = **(_QWORD **)&v40[0];
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[77],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v38);
      }
LABEL_22:
      result = 0;
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x197E85B7CLL);
  }
  if (a3 != 1)
  {
    v31 = *(_DWORD *)(a1 + 7400);
    v32 = *(_DWORD *)(a1 + 7412);
    v33 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v31;
    *(_DWORD *)(a1 + 7448) = v32;
    *(_DWORD *)(a1 + 7452) = v33;
    v34 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v34 + 4) = v31;
    v35 = *(_DWORD *)(a1 + 12);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x197E85B84);
    }
    v36 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v35 - 1) + 9) & 1;
    *(_BYTE *)(v34 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v34, a1 + 7368, 0, v36, v19, v20, v21, v22);
    v23 = 2;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use generator function declaration in single-statement context");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  int v36;
  uint64_t v37;
  _BYTE v38[24];
  _OWORD v39[2];
  uint64_t v40;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (v17 == 191488)
  {
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197E85DE4);
    }
    v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
    *(_BYTE *)(v25 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
    v28 = 16;
  }
  else
  {
    v28 = 9;
  }
  v29 = *(_BYTE *)(a1 + 7474);
  *(_BYTE *)(a1 + 7474) = v28;
  if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 1, 1, 0, 1, v39, 1) & 1) == 0)
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this async function");
      goto LABEL_21;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_21:
    result = 0;
    goto LABEL_10;
  }
  if (!*(_QWORD *)&v39[0])
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Async function statements must have a name");
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::declareFunction((uint64_t)v38, (uint64_t *)a1, *(WTF::StringImpl ***)&v39[0], v30, v31, v32, v33, v34);
  if ((v38[0] & 1) == 0)
    goto LABEL_8;
  v36 = *(_DWORD *)(a1 + 12);
  if (!v36)
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x197E85DDCLL);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v37 = **(_QWORD **)&v39[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare an async function named '", &v37);
    }
    goto LABEL_21;
  }
LABEL_8:
  if ((v38[0] & 2) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v37 = **(_QWORD **)&v39[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[84],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v37);
    }
    goto LABEL_21;
  }
  result = 43;
LABEL_10:
  *(_BYTE *)(a1 + 7474) = v29;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v9;
  int v10;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v29;
  int v30;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t i;

  v9 = (int32x2_t *)(a1 + 7300);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v13 = 0;
      v9[6].i8[4] = 1;
      goto LABEL_18;
    }
LABEL_80:
    v13 = 0;
    goto LABEL_18;
  }
  v13 = 0;
  v14 = *(unsigned __int8 *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 0;
  v15 = (int *)(a1 + 7368);
  v16 = *(_DWORD *)(a1 + 7368);
  if (v16 > 514)
  {
    switch(v16)
    {
      case 515:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBreakStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 516:
      case 517:
        goto LABEL_18;
      case 518:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 519:
      case 521:
      case 526:
      case 531:
      case 532:
      case 535:
      case 536:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
        goto LABEL_35;
      case 520:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, 0);
        goto LABEL_17;
      case 522:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseContinueStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 523:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(a1, a2, v14 != 0);
        goto LABEL_17;
      case 524:
        ++*(_DWORD *)(a1 + 7308);
        v18 = *(_DWORD *)(a1 + 12);
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x197E86420);
        }
        v19 = v18 - 1;
        v20 = *(_QWORD *)a1;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v19 + 10) & 0x100100) != 0x100)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Return statements are only valid inside functions");
          goto LABEL_80;
        }
        v21 = *(_DWORD *)(a1 + 7400);
        v22 = *(_DWORD *)(a1 + 7412);
        v23 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v21;
        *(_DWORD *)(a1 + 7448) = v22;
        *(_DWORD *)(a1 + 7452) = v23;
        v24 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v24 + 4) = v21;
        v25 = *(_BYTE *)(v20 + 720 * v19 + 9) & 1;
        *(_BYTE *)(v24 + 56) = 0;
        v26 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v24, a1 + 7368, 0, v25, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v26;
        if (v26 == 1 || v26 == 20)
          goto LABEL_15;
        if (v26 == 17)
        {
          v51 = *(_DWORD *)(a1 + 7400);
          v52 = *(_DWORD *)(a1 + 7412);
          v53 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v51;
          *(_DWORD *)(a1 + 7448) = v52;
          *(_DWORD *)(a1 + 7452) = v53;
          v35 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v35 + 4) = v51;
          v36 = *(_DWORD *)(a1 + 12);
          if (!v36)
          {
            __break(0xC471u);
            JUMPOUT(0x197E86274);
          }
          goto LABEL_33;
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
        {
LABEL_15:
          v13 = 43;
          goto LABEL_18;
        }
        if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
            v9[6].i8[4] = 1;
          }
        }
        else
        {
          v58 = 0;
          v59 = *(_QWORD *)(a1 + 7496);
          i = a1;
          *(_QWORD *)(a1 + 7496) = &v58;
          v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v58);
          *(_QWORD *)(i + 7496) = v59;
          v30 = *(_DWORD *)(a1 + 7368);
          if (v29)
          {
            if (v30 != 6)
            {
LABEL_27:
              if (v30 == 1 || v30 == 20)
                goto LABEL_15;
              if (v30 == 17)
              {
                v32 = *(_DWORD *)(a1 + 7400);
                v33 = *(_DWORD *)(a1 + 7412);
                v34 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v32;
                *(_DWORD *)(a1 + 7448) = v33;
                *(_DWORD *)(a1 + 7452) = v34;
                v35 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v35 + 4) = v32;
                v36 = *(_DWORD *)(a1 + 12);
                if (!v36)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E86430);
                }
LABEL_33:
                v37 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1;
                *(_BYTE *)(v35 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, v37, a5, a6, a7, a8);
                goto LABEL_15;
              }
              if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
                goto LABEL_15;
              if (v30 != 20 && (v30 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a return statement");
                goto LABEL_80;
              }
              goto LABEL_79;
            }
            v38 = *(_DWORD *)(a1 + 7400);
            v39 = *(_DWORD *)(a1 + 7412);
            v40 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v38;
            *(_DWORD *)(a1 + 7448) = v39;
            *(_DWORD *)(a1 + 7452) = v40;
            v41 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v41 + 4) = v38;
            v42 = *(_DWORD *)(a1 + 12);
            if (!v42)
            {
              __break(0xC471u);
              JUMPOUT(0x197E86438);
            }
            v43 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1;
            *(_BYTE *)(v41 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v41, a1 + 7368, 0, v43, a5, a6, a7, a8);
            *v9 = vadd_s32(*v9, (int32x2_t)0x100000001);
            v58 = 0;
            v59 = *(_QWORD *)(a1 + 7496);
            for (i = a1; ; i = a1)
            {
              *(_QWORD *)(a1 + 7496) = &v58;
              v44 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v58);
              *(_QWORD *)(i + 7496) = v59;
              if (!v44)
                break;
              v30 = *v15;
              if (*v15 != 6)
                goto LABEL_27;
              v45 = *(_DWORD *)(a1 + 7400);
              v46 = *(_DWORD *)(a1 + 7412);
              v47 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v45;
              *(_DWORD *)(a1 + 7448) = v46;
              *(_DWORD *)(a1 + 7452) = v47;
              v48 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v48 + 4) = v45;
              v49 = *(_DWORD *)(a1 + 12);
              if (!v49)
              {
                __break(0xC471u);
                JUMPOUT(0x197E86428);
              }
              v50 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1;
              *(_BYTE *)(v48 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 2u, v50, a5, a6, a7, a8);
              v58 = 0;
              v59 = *(_QWORD *)(a1 + 7496);
            }
            if (*v15 != 20 && (*v15 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
              goto LABEL_67;
            }
LABEL_85:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_67;
          }
          if (v30 == 20 || (v30 & 0x100000) != 0)
            goto LABEL_85;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
        }
LABEL_67:
        if (*v15 != 20 && (*v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the return expression");
          goto LABEL_80;
        }
LABEL_79:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        goto LABEL_80;
      case 525:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseIfStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 527:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDoWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 528:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 529:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 530:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseWithStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 533:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseThrowStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 534:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseTryStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 537:
        v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDebuggerStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 544:
      case 545:
      case 546:
        goto LABEL_6;
      default:
        if (v16 != 1048592)
        {
LABEL_35:
          v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*a3 && (_DWORD)v13 != *(_DWORD *)(a1 + 7304))
            *a3 = 0;
          goto LABEL_17;
        }
        if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
        {
LABEL_6:
          v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(a1, a2, 0);
          goto LABEL_17;
        }
        goto LABEL_79;
    }
  }
  if (v16 != 1)
  {
    if (v16)
    {
      switch(v16)
      {
        case 12:
          goto LABEL_6;
        case 14:
          *a3 = *(_QWORD *)(a1 + 7376);
          LODWORD(v13) = *(_DWORD *)(a1 + 7304);
          goto LABEL_35;
        case 17:
          v54 = *(_DWORD *)(a1 + 7400);
          v55 = *(_DWORD *)(a1 + 7412);
          v56 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v54;
          *(_DWORD *)(a1 + 7448) = v55;
          *(_DWORD *)(a1 + 7452) = v56;
          v35 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v35 + 4) = v54;
          v36 = *(_DWORD *)(a1 + 12);
          if (!v36)
          {
            __break(0xC471u);
            JUMPOUT(0x197E862D4);
          }
          goto LABEL_33;
        case 20:
          break;
        default:
          goto LABEL_35;
      }
    }
    else
    {
      v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, a4, a5, a6, a7, a8);
LABEL_17:
      v13 = v17;
    }
  }
LABEL_18:
  *(_DWORD *)(a1 + 7456) = v10;
  return v13;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, _BYTE *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  WTF::AtomStringImpl *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t i;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  int v73;
  int v75;
  WTF::StringImpl *v76;
  uint64_t *v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  _BOOL4 v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  __int16 v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  int v98;
  WTF::StringImpl **v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  int v105;
  _BOOL4 v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const char *v116;
  uint64_t *v117;
  _BOOL4 v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  unsigned int v130;
  WTF::StringImpl *v131;
  int v133;
  _DWORD *v135;
  int v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  BOOL hasLexicallyDeclaredVariable;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v170;
  int v172;
  int v173;
  char v174;
  const char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v16 = 0;
  v17 = 0;
  v18 = a10;
  v170 = (_BYTE *)(a1 + 7344);
  v19 = (_DWORD *)(a1 + 7368);
  v166 = a1 + 7444;
  v167 = a1 + 7416;
  while (1)
  {
    while (1)
    {
      *a4 = 0;
      v20 = *(_DWORD *)(a1 + 7400);
      v21 = *(_DWORD *)(a1 + 7412);
      v22 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v20;
      *(_DWORD *)(a1 + 7448) = v21;
      *(_DWORD *)(a1 + 7452) = v22;
      v23 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v23 + 4) = v20;
      v24 = *(_DWORD *)(a1 + 12);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197E871F8);
      }
      v25 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 9) & 1;
      *(_BYTE *)(v23 + 56) = 0;
      v26 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v23, (uint64_t)v19, 0, v25, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v26;
      ++*a3;
      if (v26 == 12)
        break;
      if (v26 <= 544)
      {
        if (v26 != 544)
        {
          if (v26 == 13)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use a private name to declare a variable");
            return;
          }
          goto LABEL_172;
        }
LABEL_134:
        v124 = *(_DWORD *)(a1 + 12);
        if (!v124)
        {
          __break(0xC471u);
          JUMPOUT(0x197E87294);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v124 - 1) + 9) & 1) == 0)
          break;
        if (v26 != 1048592)
          goto LABEL_172;
        v122 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v123 = **(_QWORD **)(a1 + 7376);
        goto LABEL_138;
      }
      if (v26 == 545)
        goto LABEL_125;
      if (v26 == 546)
        break;
      if (v26 != 1048592)
        goto LABEL_172;
      v122 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v123 = **(_QWORD **)(a1 + 7376);
      if (v123 == v122[41])
        goto LABEL_134;
LABEL_138:
      if (v123 != v122[62])
        goto LABEL_129;
LABEL_125:
      v120 = *(_DWORD *)(a1 + 12);
      if (!v120)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8728CLL);
      }
      v121 = v120 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v121 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v121 + 11) & 2) == 0)
      {
        break;
      }
      if (v26 == 1048592)
      {
        v122 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v123 = **(_QWORD **)(a1 + 7376);
LABEL_129:
        if (v123 == v122[16])
        {
          v26 = 1048592;
          break;
        }
      }
LABEL_172:
      v174 = v170[96];
      v170[96] = 1;
      v148 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v18, 0, 0, 0);
      v170[96] = v174;
      v149 = *(_DWORD *)(a1 + 7368);
      if (!v148)
      {
        if (v149 == 20 || (v149 & 0x100000) != 0)
          goto LABEL_207;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
        return;
      }
      if (a9 == 1 && v149 != 21)
      {
        if (v149 == 20 || (v149 & 0x100000) != 0)
          goto LABEL_207;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an initializer in destructuring variable declaration");
        return;
      }
      *a4 = v148;
      if (v149 == 21)
      {
        v150 = *(_DWORD *)(a1 + 7400);
        v151 = *(_DWORD *)(a1 + 7412);
        v152 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v150;
        *(_DWORD *)(a1 + 7448) = v151;
        *(_DWORD *)(a1 + 7452) = v152;
        v153 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v153 + 4) = v150;
        v154 = *(_DWORD *)(a1 + 12);
        if (!v154)
        {
          __break(0xC471u);
          JUMPOUT(0x197E87284);
        }
        v155 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v154 - 1) + 9) & 1;
        *(_BYTE *)(v153 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v153, (uint64_t)v19, 2u, v155, (uint64_t)a5, a6, a7, a8);
        LODWORD(v176) = 0;
        v177 = *(_QWORD *)(a1 + 7496);
        v178 = a1;
        *(_QWORD *)(a1 + 7496) = &v176;
        v156 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v176);
        *(_QWORD *)(v178 + 7496) = v177;
        if (*(_QWORD *)(a1 + 7360))
          return;
        v37 = 0;
        *a5 = v156;
        v56 = 48;
        goto LABEL_23;
      }
      if (v149 != 6)
        return;
    }
    v31 = *(_DWORD *)(a1 + 12);
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197E87200);
    }
    v32 = *(_QWORD *)a1;
    v33 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v31 - 1) + 10);
    if ((v33 & 0x100000) != 0
      && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
      return;
    }
    if (v26 == 544)
      goto LABEL_7;
    if (v26 != 546)
      break;
LABEL_9:
    LOBYTE(v34) = *v170 != 0;
    v35 = (v33 & 0x102000) != 0 || *v170 == 0;
    if (v35 || (v34 = *(_DWORD *)(a1 + 7480), v34 == 1))
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        if (v18 >= 3)
        {
LABEL_234:
          __break(0xC471u);
          JUMPOUT(0x197E8718CLL);
        }
        v176 = off_1E357B338[(int)v18];
        v115 = ((v33 & 0x2000) == 0) & v34;
        if (v115)
          v116 = "in a static block";
        else
          v116 = "in an async function";
        if ((v33 & 0x100000) == 0 && (v115 & 1) != 0)
        {
          if (*(_DWORD *)(a1 + 7480) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197E871ACLL);
          }
          v116 = "in a module";
        }
        v175 = v116;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", (const char **)&v176, &v175);
      }
      return;
    }
LABEL_14:
    v36 = *(_DWORD *)(a1 + 7424);
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 7416);
    *(_DWORD *)(v13 + 8) = v36;
    v37 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v38 = *(_DWORD *)(a1 + 7400);
    v39 = *(_DWORD *)(a1 + 7412);
    v40 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v38;
    *(_DWORD *)(a1 + 7448) = v39;
    *(_DWORD *)(a1 + 7452) = v40;
    v41 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v41 + 4) = v38;
    v42 = *(_DWORD *)(a1 + 12);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197E87210);
    }
    v173 = v17;
    v43 = *(_BYTE *)(v32 + 720 * (v42 - 1) + 9) & 1;
    *(_BYTE *)(v41 + 56) = 0;
    v172 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v41, (uint64_t)v19, 0, v43, v27, v28, v29, v30);
    *v19 = v172;
    if (!(_DWORD)v18)
    {
      v47 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, v37, v45, v46, (uint64_t)a5, a6, a7, a8);
LABEL_17:
      if (!v47)
        goto LABEL_18;
      goto LABEL_187;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148)
      && *(_DWORD *)(a1 + 7456) == 1
      && ((JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)a1, *(WTF::StringImpl **)v37, v45, v46, (uint64_t)a5, a6, a7, a8) & 1) != 0|| (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)v37, v58, v59, v60, v61, v62, v63) & 1) != 0))
    {
      goto LABEL_191;
    }
    v64 = *(_DWORD *)(a1 + 12);
    if (!v64)
    {
LABEL_233:
      __break(0xC471u);
      JUMPOUT(0x197E872B4);
    }
    v65 = v64 - 1;
    v66 = *(_QWORD *)a1;
    for (i = *(_QWORD *)a1 + 720 * (v64 - 1); ; i = v66 + 720 * v65)
    {
      v68 = *(_DWORD *)(i + 10);
      if ((v68 & 0x80) != 0)
        break;
      if (v64 <= --v65)
        goto LABEL_233;
    }
    if (v64 <= v65)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8729CLL);
    }
    v162 = v12;
    v163 = v11;
    if ((v68 & 0x80000) != 0)
    {
      if (v64 <= v65 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197E872A4);
      }
      v135 = a4;
      v136 = v18;
      v137 = v66 + 720 * (v65 - 1);
      v138 = *(WTF::StringImpl **)v37;
      if (*(_QWORD *)v37)
      {
        *(_DWORD *)v138 += 2;
        hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v137, v138, v45, v46, (uint64_t)a5, a6, a7, a8);
        if (*(_DWORD *)v138 == 2)
        {
          WTF::StringImpl::~StringImpl(v138, v44, v45, v46, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
        }
        else
        {
          *(_DWORD *)v138 -= 2;
        }
        LODWORD(v18) = v136;
        a4 = v135;
        if (hasLexicallyDeclaredVariable)
        {
LABEL_191:
          if ((_DWORD)v18 == 2)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v176 = *(char **)v37;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v176);
            }
          }
          else if ((_DWORD)v18 == 1)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v176 = *(char **)v37;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v176);
            }
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            v176 = *(char **)v37;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v176);
          }
          return;
        }
      }
      else
      {
        LODWORD(v18) = v136;
        a4 = v135;
        if (JSC::Scope::hasLexicallyDeclaredVariable(v137, 0, v45, v46, (uint64_t)a5, a6, a7, a8))
          goto LABEL_191;
      }
      v64 = *(_DWORD *)(a1 + 12);
    }
    v165 = v18;
    v164 = v13;
    if (v64 <= v65)
    {
      __break(0xC471u);
      JUMPOUT(0x197E872ACLL);
    }
    v69 = *(_QWORD *)a1;
    v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 720 * v65) + 41952);
    v71 = *(_QWORD *)(v70 + 1248) == *(_QWORD *)v37 || *(_QWORD *)(v70 + 880) == *(_QWORD *)v37;
    v72 = v69 + 720 * v65;
    v73 = *(_DWORD *)(v72 + 10);
    if ((v73 & 0x800000) == 0 || v71)
      v75 = 0;
    else
      v75 = 0x800000;
    *(_DWORD *)(v72 + 10) = v75 | v73 & 0xFF7FFFFF;
    v76 = *(WTF::StringImpl **)v37;
    if (*(_QWORD *)v37)
      *(_DWORD *)v76 += 2;
    v77 = (uint64_t *)(v72 + 144);
    v78 = *(_QWORD *)(v72 + 144);
    if (v78)
      goto LABEL_53;
    v79 = a4;
    v80 = v19;
    v81 = v71;
    v82 = WTF::fastMalloc((WTF *)0x90);
    v71 = v81;
    v19 = v80;
    a4 = v79;
    *(_QWORD *)(v82 + 16) = 0;
    v82 += 16;
    *(_WORD *)(v82 + 8) = 0;
    *(_QWORD *)(v82 + 16) = 0;
    *(_WORD *)(v82 + 24) = 0;
    *(_QWORD *)(v82 + 32) = 0;
    *(_WORD *)(v82 + 40) = 0;
    *(_QWORD *)(v82 + 48) = 0;
    *(_WORD *)(v82 + 56) = 0;
    *(_QWORD *)(v82 + 64) = 0;
    *(_WORD *)(v82 + 72) = 0;
    *(_QWORD *)(v82 + 80) = 0;
    *(_WORD *)(v82 + 88) = 0;
    *(_QWORD *)(v82 + 96) = 0;
    *(_WORD *)(v82 + 104) = 0;
    *(_QWORD *)(v82 + 112) = 0;
    *(_WORD *)(v82 + 120) = 0;
    *v77 = v82;
    *(_DWORD *)(v82 - 4) = 8;
    *(_DWORD *)(*v77 - 8) = 7;
    *(_DWORD *)(*v77 - 16) = 0;
    *(_DWORD *)(*v77 - 12) = 0;
    v78 = *v77;
    if (*v77)
LABEL_53:
      v83 = *(_DWORD *)(v78 - 8);
    else
      v83 = 0;
    v161 = a4;
    v84 = *((_DWORD *)v76 + 4);
    if ((v84 & 0x20) != 0)
      v84 = *((_DWORD *)v76 + 8);
    v85 = v83 & (v84 >> 8);
    v86 = v78 + 16 * v85;
    v87 = *(WTF::StringImpl **)v86;
    if (!*(_QWORD *)v86)
      goto LABEL_57;
    v104 = 0;
    v105 = 1;
    do
    {
      if (v87 == v76)
      {
        v94 = 1;
        goto LABEL_65;
      }
      if (v87 == (WTF::StringImpl *)-1)
        v104 = v86;
      v85 = (v85 + v105) & v83;
      v86 = v78 + 16 * v85;
      v87 = *(WTF::StringImpl **)v86;
      ++v105;
    }
    while (*(_QWORD *)v86);
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *(_WORD *)(v104 + 8) = 0;
      --*(_DWORD *)(*v77 - 16);
      v86 = v104;
    }
    if (v76)
LABEL_57:
      *(_DWORD *)v76 += 2;
    *(_QWORD *)v86 = v76;
    *(_WORD *)(v86 + 8) = 0;
    v88 = *v77;
    if (*v77)
      v89 = *(_DWORD *)(v88 - 12) + 1;
    else
      v89 = 1;
    *(_DWORD *)(v88 - 12) = v89;
    v90 = *v77;
    if (*v77)
      v91 = *(_DWORD *)(v90 - 12);
    else
      v91 = 0;
    v92 = (*(_DWORD *)(v90 - 16) + v91);
    v93 = *(unsigned int *)(v90 - 4);
    if (v93 > 0x400)
    {
      if (v93 <= 2 * v92)
      {
LABEL_122:
        v117 = v77;
        v118 = v71;
        v119 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v117, (WTF::StringImpl **)v86);
        v71 = v118;
        v86 = v119;
      }
    }
    else if (3 * v93 <= 4 * v92)
    {
      goto LABEL_122;
    }
    v94 = 0;
LABEL_65:
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        v160 = v19;
        v106 = v71;
        WTF::StringImpl::~StringImpl(v76, v44, v45, v46, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        v71 = v106;
        v19 = v160;
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
    v95 = v165;
    if (v165 != 2)
      v95 = 8;
    *(_WORD *)(v86 + 8) |= v95;
    a4 = v161;
    if ((v94 & 1) != 0)
    {
LABEL_154:
      v47 = 2;
      goto LABEL_74;
    }
    v96 = *(WTF::StringImpl **)v37;
    v97 = v69 + 720 * v65;
    v98 = *(_DWORD *)(v97 + 620);
    v99 = (WTF::StringImpl **)(v97 + 624);
    if (v98 == 8)
    {
      v100 = *(unsigned int *)(v69 + 720 * v65 + 616);
      if ((_DWORD)v100)
      {
        if (*v99 == v96)
          goto LABEL_154;
        v101 = 0;
        v102 = v69 + 720 * v65 + 632;
        v18 = v165;
        v13 = v164;
        do
        {
          if (v100 - 1 == v101)
          {
            v47 = 0;
            goto LABEL_75;
          }
          v103 = *(WTF::StringImpl **)(v102 + 8 * v101++);
        }
        while (v103 != v96);
        if (v101 < v100)
          goto LABEL_154;
      }
    }
    else
    {
      v125 = *v99;
      v126 = ((unint64_t)v96 + ~((_QWORD)v96 << 32)) ^ (((unint64_t)v96 + ~((_QWORD)v96 << 32)) >> 22);
      v127 = 9 * ((v126 + ~(v126 << 13)) ^ ((v126 + ~(v126 << 13)) >> 8));
      v128 = (v127 ^ (v127 >> 15)) + ~((v127 ^ (v127 >> 15)) << 27);
      v129 = v98 - 1;
      v130 = v129 & ((v128 >> 31) ^ v128);
      v131 = (WTF::StringImpl *)*((_QWORD *)v125 + v130);
      if (v131 != (WTF::StringImpl *)-1 && v131 != v96)
      {
        v133 = 1;
        do
        {
          v130 = (v130 + v133) & v129;
          v131 = (WTF::StringImpl *)*((_QWORD *)v125 + v130);
          ++v133;
        }
        while (v131 != (WTF::StringImpl *)-1 && v131 != v96);
      }
      if (v131 == v96)
        goto LABEL_154;
    }
    v47 = 0;
LABEL_74:
    v18 = v165;
    v13 = v164;
LABEL_75:
    v12 = v162;
    v11 = v163;
    if (!v71)
      goto LABEL_17;
    LOBYTE(v47) = v47 | 1;
LABEL_187:
    if ((v47 & 1) != 0)
    {
      v157 = *(_DWORD *)(a1 + 12);
      if (!v157)
        goto LABEL_234;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v157 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v176 = *(char **)v37;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v176);
        }
        return;
      }
    }
    if ((v47 & 2) != 0)
      goto LABEL_191;
LABEL_18:
    if (v172 == 21)
    {
      v48 = *(_QWORD *)v167;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v167 + 8);
      *(_QWORD *)v12 = v48;
      LODWORD(v48) = *(_DWORD *)(a1 + 7400);
      v49 = *(_DWORD *)(a1 + 7412);
      v50 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v48;
      *(_DWORD *)(a1 + 7448) = v49;
      *(_DWORD *)(a1 + 7452) = v50;
      v51 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v51 + 4) = v48;
      v52 = *(_DWORD *)(a1 + 12);
      v17 = v173;
      if (!v52)
      {
        __break(0xC471u);
        JUMPOUT(0x197E87208);
      }
      v53 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v52 - 1) + 9) & 1;
      *(_BYTE *)(v51 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v51, (uint64_t)v19, 2u, v53, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(a1 + 7360))
        return;
      LODWORD(v176) = 0;
      v177 = *(_QWORD *)(a1 + 7496);
      v178 = a1;
      *(_QWORD *)(a1 + 7496) = &v176;
      v54 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v176);
      *(_QWORD *)(v178 + 7496) = v177;
      v55 = *(_QWORD *)v166;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v166 + 8);
      *(_QWORD *)v11 = v55;
      *a5 = v54;
      if (!v54)
      {
        if (*v19 != 20 && (*v19 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v176 = *(char **)v37;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v176);
          }
          return;
        }
LABEL_207:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        return;
      }
      v56 = 27;
    }
    else
    {
      v17 = v173;
      if (a9 || (_DWORD)v18 != 2)
      {
        v56 = 27;
        if (a9 && (_DWORD)v18 == 2)
        {
          if (*v19 == 20 || (*v19 & 0x100000) != 0)
            goto LABEL_207;
          if (!*(_QWORD *)(a1 + 7360))
          {
            v176 = *(char **)v37;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(a1, (uint64_t *)&v176);
          }
          return;
        }
      }
      else
      {
        *a11 = 1;
        v56 = 27;
      }
    }
LABEL_23:
    if (v16)
      v57 = v17;
    else
      v57 = 47;
    if (v17)
    {
      v16 = 47;
      v17 = v57;
    }
    else
    {
      v17 = v56;
    }
    if (*v19 != 6)
    {
      if (v37)
        *a4 = 31;
      return;
    }
  }
  if (v26 != 1048592)
    goto LABEL_14;
  v158 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v159 = **(_QWORD **)(a1 + 7376);
  if (v159 != *(_QWORD *)(v158 + 328))
    goto LABEL_225;
LABEL_7:
  if (a10 - 1 > 1)
  {
    if (v26 != 1048592)
      goto LABEL_14;
    v158 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v159 = **(_QWORD **)(a1 + 7376);
LABEL_225:
    if (v159 != *(_QWORD *)(v158 + 128))
      goto LABEL_14;
    goto LABEL_9;
  }
  if ((v26 & 0x100000) != 0)
    goto LABEL_207;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[16]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a variable named ");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a let variable twice: '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a const variable twice: '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a var variable that shadows a let/const/class variable: '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot export a duplicate name '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Expected expression as the intializer for the variable '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "const declared variable '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", " must have an initializer");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t WTF::PrintStream::printImpl<WTF::UniquedStringImpl *,char [2],char [2]>(WTF *a1, WTF::PrintStream *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  WTF::printInternal(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  WTF::PrintStream::printf(a1, "%s", "'");
  return WTF::PrintStream::printf(a1, "%s", ".");
}

void JSC::ModuleScopeData::exportBinding(uint64_t a1, WTF::StringImpl *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unint64_t **v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  WTF::StringImpl **v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = a2;
  v10 = (uint64_t *)(a1 + 16);
  if (a2)
    *(_DWORD *)a2 += 2;
  v11 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 16), 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *((_DWORD *)v9 + 4);
  if ((v13 & 0x20) != 0)
    v13 = *((_DWORD *)v9 + 8);
  v14 = v12 & (v13 >> 8);
  v15 = (WTF::StringImpl **)(v11 + 24 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_9:
    *v15 = v9;
    v17 = (unint64_t **)(v15 + 1);
    v18 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v18)
      WTF::VectorTypeOperations<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>::destruct(*v17, (WTF::AtomStringImpl *)&(*v17)[v18], (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = *v17;
    if (*v17)
    {
      v15[1] = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    *v17 = 0;
    v15[2] = 0;
    v20 = *v10;
    if (*v10)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_19;
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_19:
      v9 = 0;
      goto LABEL_20;
    }
    v15 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v10, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_19;
  }
  v35 = 0;
  v36 = 1;
  while (v16 != v9)
  {
    if (v16 == (WTF::StringImpl *)-1)
      v35 = v15;
    v14 = (v14 + v36) & v12;
    v15 = (WTF::StringImpl **)(v11 + 24 * v14);
    v16 = *v15;
    ++v36;
    if (!*v15)
    {
      if (v35)
      {
        *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = v35;
      }
      goto LABEL_9;
    }
  }
LABEL_20:
  v26 = (_DWORD *)*a3;
  v27 = *((unsigned int *)v15 + 5);
  if ((_DWORD)v27 == *((_DWORD *)v15 + 4))
  {
    v28 = v27 + (v27 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v27 + 1)
      v30 = v27 + 1;
    else
      v30 = v29;
    if (v30 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v31 = v15[1];
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v30));
    *((_DWORD *)v15 + 4) = v30;
    v15[1] = v32;
    memcpy(v32, v31, 8 * v27);
    if (v31)
    {
      if (v15[1] == v31)
      {
        v15[1] = 0;
        *((_DWORD *)v15 + 4) = 0;
      }
      WTF::fastFree((unint64_t)v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v27 = *((unsigned int *)v15 + 5);
    v33 = v15[1];
    if (v26)
      *v26 += 2;
    v34 = (_QWORD *)((char *)v33 + 8 * v27);
  }
  else
  {
    v34 = (_QWORD *)((char *)v15[1] + 8 * v27);
    if (v26)
      *v26 += 2;
  }
  *v34 = v26;
  *((_DWORD *)v15 + 5) = v27 + 1;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  WTF::StringImpl ***v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  uint64_t v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  WTF::StringImpl **v113;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    v25 = v12;
    v110 = (WTF::StringImpl **)a3;
    v111 = v11;
    v109 = v12;
    do
    {
      v26 = *(_QWORD *)(v11 + 24 * v24);
      v113 = (WTF::StringImpl **)(v11 + 24 * v24);
      if (v26)
      {
        if (v26 != -1)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v112 = v22;
          v29 = *(_DWORD *)(v26 + 16);
          if ((v29 & 0x20) != 0)
            v29 = *(_DWORD *)(v26 + 32);
          v30 = 0;
          v31 = v29 >> 8;
          do
          {
            v32 = v31 & v28;
            v22 = (WTF::StringImpl **)(v27 + 24 * (v31 & v28));
            v31 = ++v30 + (v31 & v28);
          }
          while (*v22);
          v33 = v27 + 24 * v32;
          v36 = *(_DWORD *)(v33 + 20);
          v35 = (_DWORD *)(v33 + 20);
          v34 = v36;
          v37 = (WTF::StringImpl ***)(v35 - 3);
          if (v36)
          {
            v63 = *v37;
            v64 = 8 * v34;
            do
            {
              v65 = *v63;
              *v63 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                {
                  WTF::StringImpl::~StringImpl(v65, v15, v16, v17, v18, v19, v20, v21);
                  WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
                }
                else
                {
                  *(_DWORD *)v65 -= 2;
                }
              }
              ++v63;
              v64 -= 8;
            }
            while (v64);
          }
          v38 = (unint64_t)*v37;
          if (*v37)
          {
            *v37 = 0;
            *(_DWORD *)(v27 + 24 * v32 + 16) = 0;
            WTF::fastFree(v38, v15, v16, v17, v18, v19, v20, v21);
          }
          v39 = *v22;
          *v22 = 0;
          v11 = v111;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          v40 = *v113;
          *v113 = 0;
          *v22 = v40;
          v41 = v111 + 24 * v24;
          *v37 = 0;
          *(_QWORD *)(v35 - 1) = 0;
          v43 = *(WTF::StringImpl ***)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v37 = v43;
          LODWORD(v40) = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v27 + 24 * v32 + 16) = (_DWORD)v40;
          LODWORD(v40) = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *v35 = (_DWORD)v40;
          v44 = *(unsigned int *)(v42 + 12);
          v25 = v109;
          if ((_DWORD)v44)
          {
            v74 = *(WTF::StringImpl ***)v42;
            v75 = 8 * v44;
            do
            {
              v76 = *v74;
              *v74 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, v15, v16, v17, v18, v19, v20, v21);
                  WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
              ++v74;
              v75 -= 8;
            }
            while (v75);
          }
          v45 = *(_QWORD *)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            WTF::fastFree(v45, v15, v16, v17, v18, v19, v20, v21);
          }
          v46 = *v113;
          *v113 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
          if (v113 != v110)
            v22 = v112;
        }
      }
      else
      {
        v58 = v11 + 24 * v24;
        v59 = (WTF::StringImpl ***)(v58 + 8);
        v60 = *(unsigned int *)(v58 + 20);
        if ((_DWORD)v60)
        {
          v48 = *v59;
          v49 = 8 * v60;
          do
          {
            v47 = *v48;
            *v48 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::~StringImpl(v47, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
              }
              else
              {
                *(_DWORD *)v47 -= 2;
              }
            }
            ++v48;
            v49 -= 8;
          }
          while (v49);
        }
        v61 = (unint64_t)*v59;
        if (*v59)
        {
          *v59 = 0;
          *(_DWORD *)(v11 + 24 * v24 + 16) = 0;
          WTF::fastFree(v61, v15, v16, v17, v18, v19, v20, v21);
        }
        v62 = *v113;
        *v113 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v10;
  int *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int8 v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  __int128 v72;
  int v73;
  __int128 v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int8 v100;
  int32x2_t *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int32x2_t *v113;
  __int128 v114;
  __int128 v115;
  uint64_t i;

  v10 = (int32x2_t *)(a1 + 7300);
  v11 = (int *)(a1 + 7368);
  v12 = *(_DWORD *)(a1 + 7368);
  switch(v12)
  {
    case 12:
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
        || *(_BYTE *)(a1 + 7384))
      {
        break;
      }
      v13 = a1 + 7296;
      v14 = *(_OWORD *)(a1 + 7296);
      v15 = *(_DWORD *)(a1 + 7316);
      i = *(_QWORD *)(a1 + 7336);
      v16 = *(_OWORD *)(a1 + 7320);
      v114 = v14;
      v115 = v16;
      v111 = *(unsigned __int8 *)(a1 + 7344);
      v112 = v15;
      v113 = (int32x2_t *)(a1 + 7300);
      v17 = *(_BYTE *)(a1 + 7345);
      v18 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v19 = *(unsigned int *)(a1 + 7404);
      v20 = *(_QWORD *)(a1 + 7288);
      v21 = *(_DWORD *)v20;
      v22 = *(_DWORD *)(v20 + 4);
      v23 = *(_BYTE *)(v20 + 56);
      v24 = *(_DWORD *)(a1 + 7400);
      v25 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v24;
      *(_DWORD *)(a1 + 7448) = v25;
      *(_DWORD *)(a1 + 7452) = v19;
      *(_DWORD *)(v20 + 4) = v24;
      v26 = *(_DWORD *)(a1 + 12);
      if (!v26)
      {
LABEL_68:
        __break(0xC471u);
        JUMPOUT(0x197E887A0);
      }
      v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
      *(_BYTE *)(v20 + 56) = 0;
      v33 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, (uint64_t)v11, 0, v27, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v33;
      v34 = *(_QWORD *)(a1 + 7288);
      if (v33 == 523 && !*(_BYTE *)(v34 + 56))
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot use async function declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<unsigned char>::setOffset(v34, v18, v19, v28, v29, v30, v31, v32);
      v39 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v39 = v21;
      *(_BYTE *)(v39 + 56) = v23;
      v40 = *(_DWORD *)(a1 + 7400);
      v41 = *(_DWORD *)(a1 + 7412);
      v42 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v40;
      *(_DWORD *)(a1 + 7448) = v41;
      *(_DWORD *)(a1 + 7452) = v42;
      *(_DWORD *)(v39 + 4) = v40;
      v43 = *(_DWORD *)(a1 + 12);
      if (!v43)
        goto LABEL_68;
      goto LABEL_56;
    case 544:
      v13 = a1 + 7296;
      v72 = *(_OWORD *)(a1 + 7296);
      v73 = *(_DWORD *)(a1 + 7316);
      i = *(_QWORD *)(a1 + 7336);
      v74 = *(_OWORD *)(a1 + 7320);
      v114 = v72;
      v115 = v74;
      v111 = *(unsigned __int8 *)(a1 + 7344);
      v112 = v73;
      v113 = (int32x2_t *)(a1 + 7300);
      v17 = *(_BYTE *)(a1 + 7345);
      v75 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v76 = *(unsigned int *)(a1 + 7404);
      v77 = *(_QWORD *)(a1 + 7288);
      v78 = *(_DWORD *)v77;
      v22 = *(_DWORD *)(v77 + 4);
      v79 = *(_BYTE *)(v77 + 56);
      v80 = *(_DWORD *)(a1 + 7400);
      v81 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v80;
      *(_DWORD *)(a1 + 7448) = v81;
      *(_DWORD *)(a1 + 7452) = v76;
      *(_DWORD *)(v77 + 4) = v80;
      v82 = *(_DWORD *)(a1 + 12);
      if (!v82)
      {
        __break(0xC471u);
        JUMPOUT(0x197E88C40);
      }
      v83 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v82 - 1) + 9) & 1;
      *(_BYTE *)(v77 + 56) = 0;
      v84 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v77, (uint64_t)v11, 0, v83, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v84;
      if (v84 == 4)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use lexical declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v75, v76, v85, v86, v87, v88, v89);
      v39 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v39 = v78;
      *(_BYTE *)(v39 + 56) = v79;
      v90 = *(_DWORD *)(a1 + 7400);
      v91 = *(_DWORD *)(a1 + 7412);
      v92 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v90;
      *(_DWORD *)(a1 + 7448) = v91;
      *(_DWORD *)(a1 + 7452) = v92;
      *(_DWORD *)(v39 + 4) = v90;
      v43 = *(_DWORD *)(a1 + 12);
      if (!v43)
      {
        __break(0xC471u);
        JUMPOUT(0x197E88C48);
      }
LABEL_56:
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, (uint64_t)v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1, v35, v36, v37, v38);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v22;
      *(_OWORD *)v13 = v114;
      *(_DWORD *)(a1 + 7312) = 0;
      v100 = v111;
      *(_DWORD *)(a1 + 7316) = v112;
      *(_OWORD *)(v13 + 24) = v115;
      *(_QWORD *)(v13 + 40) = i;
      v101 = v113;
      v113[5].i8[4] = v100;
      v101[5].i8[5] = v17;
      v102 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::~StringImpl(v102, v93, v94, v95, v96, v97, v98, v99);
          WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        }
        else
        {
          *(_DWORD *)v102 -= 2;
        }
      }
      v10 = v113;
      break;
    case 541:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "'class' declaration is not directly within a block statement");
      return 0;
  }
  if ((unint64_t)&v111 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v10[6].i8[4] = 1;
    }
    goto LABEL_35;
  }
  LODWORD(v115) = 0;
  *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
  i = a1;
  *(_QWORD *)(a1 + 7496) = &v115;
  v44 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v115);
  *(_QWORD *)(i + 7496) = *((_QWORD *)&v115 + 1);
  v49 = *(_DWORD *)(a1 + 7368);
  if (!v44)
  {
    if (v49 == 20 || (v49 & 0x100000) != 0)
      goto LABEL_48;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
LABEL_35:
    if (*v11 != 20 && (*v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression statement");
      return 0;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  if (v49 == 6)
  {
    v58 = *(_DWORD *)(a1 + 7400);
    v59 = *(_DWORD *)(a1 + 7412);
    v60 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v58;
    *(_DWORD *)(a1 + 7448) = v59;
    *(_DWORD *)(a1 + 7452) = v60;
    v61 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v61 + 4) = v58;
    v62 = *(_DWORD *)(a1 + 12);
    if (!v62)
    {
      __break(0xC471u);
      JUMPOUT(0x197E88C1CLL);
    }
    v63 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1;
    *(_BYTE *)(v61 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v61, (uint64_t)v11, 0, v63, v45, v46, v47, v48);
    *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
    LODWORD(v115) = 0;
    *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
    for (i = a1; ; i = a1)
    {
      *(_QWORD *)(a1 + 7496) = &v115;
      v64 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v115);
      *(_QWORD *)(i + 7496) = *((_QWORD *)&v115 + 1);
      if (!v64)
        break;
      v49 = *v11;
      if (*v11 != 6)
        goto LABEL_14;
      v65 = *(_DWORD *)(a1 + 7400);
      v66 = *(_DWORD *)(a1 + 7412);
      v67 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v65;
      *(_DWORD *)(a1 + 7448) = v66;
      *(_DWORD *)(a1 + 7452) = v67;
      v68 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v68 + 4) = v65;
      v69 = *(_DWORD *)(a1 + 12);
      if (!v69)
      {
        __break(0xC471u);
        JUMPOUT(0x197E88C14);
      }
      v70 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v69 - 1) + 9) & 1;
      *(_BYTE *)(v68 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v68, (uint64_t)v11, 2u, v70, v45, v46, v47, v48);
      LODWORD(v115) = 0;
      *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
    }
    if (*v11 != 20 && (*v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
      goto LABEL_35;
    }
LABEL_48:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_35;
  }
LABEL_14:
  if (v49 == 17)
  {
    v52 = *(_DWORD *)(a1 + 7400);
    v53 = *(_DWORD *)(a1 + 7412);
    v54 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v52;
    *(_DWORD *)(a1 + 7448) = v53;
    *(_DWORD *)(a1 + 7452) = v54;
    v55 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v55 + 4) = v52;
    v56 = *(_DWORD *)(a1 + 12);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x197E88C0CLL);
    }
    v57 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v56 - 1) + 9) & 1;
    *(_BYTE *)(v55 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v55, (uint64_t)v11, 0, v57, v45, v46, v47, v48);
  }
  else
  {
    v50 = v49 == 1 || v49 == 20;
    if (!v50 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      goto LABEL_20;
  }
  return 43;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot use 'let' as a label ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Attempted to redeclare the label '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, int a2, const char *a3, uint64_t *a4)
{
  void (**v7)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v7 = off_1E3572250;
    v44 = off_1E3572250;
    v45 = (WTF *)v47;
    v46 = xmmword_199122F80;
    v47[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v44);
      v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v44[4])(&v44);
      WTF::PrintStream::printf(v8, "%s", ". ");
      v44[5]((WTF::StringPrintStream *)&v44);
      v7 = v44;
    }
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v7[4])(&v44);
    WTF::PrintStream::printf(v9, "%s", a3);
    v16 = *a4;
    if (*a4)
    {
      v17 = *(char **)(v16 + 8);
      v18 = *(unsigned int *)(v16 + 4);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v17, v18, (uint64_t)&v41, v15);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v17, v18, 0, v10, v11, v12, v13, v14, (uint64_t)&v41);
      WTF::printExpectedCStringHelper(v9, "StringImpl*", &v41);
      if (v42 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v42])(&v43, &v41);
    }
    else
    {
      WTF::PrintStream::printf(v9, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v9, "%s", "'");
    WTF::PrintStream::printf(v9, "%s", ".");
    v44[5]((WTF::StringPrintStream *)&v44);
    WTF::String::fromUTF8WithLatin1Fallback(v45, v46, &v41);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v41, v19, v20, v21, v22, v23, v24);
    v32 = v41;
    v41 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v45 != (WTF *)v47)
      WTF::fastFree((unint64_t)v45, v25, v26, v27, v28, v29, v30, v31);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot parse statement");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

__n128 WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::LabelInfo>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 32 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[1];
        v20 += 2;
        *v11 = v21;
        v11[1] = v22;
        v11 += 2;
        v19 -= 32;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 32 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18;
          v20 = v18[1];
          v18 += 2;
          *v9 = v19;
          v9[1] = v20;
          v9 += 2;
          v17 -= 32;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, WTF ***a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int i;
  uint64_t v59;
  int v60;
  int v61;
  WTF::StringImpl **v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  WTF::StringImpl **NumericIdentifier;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  _BOOL4 v78;
  int v79;
  BOOL v80;
  int v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  int v85;
  uint64_t v86;
  _BOOL4 v87;
  int v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  char v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  uint64_t *v160;
  WTF::StringImpl *v161;
  const char *v162;
  WTF::StringImpl *v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  _DWORD *v178;
  unsigned int v179;
  _QWORD *v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  uint64_t *v190;
  unsigned int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF *v229;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  WTF::AtomStringImpl *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF::AtomStringImpl *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  WTF::StringImpl *v299;
  unint64_t *v300;
  const WTF::StringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  unint64_t *v310;
  WTF::StringImpl **v311;
  int v312;
  int v313;
  int v314;
  const char *v315;
  uint64_t v316;
  int v317;
  char v318;
  WTF *v319;
  unsigned int v320;
  uint64_t v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  JSC::Scope *v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  WTF::AtomStringImpl *v337;
  uint64_t v338;
  int v339;
  unint64_t *v340;
  WTF::AtomStringImpl *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  unint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WTF::AtomStringImpl *PrivateIdentifier;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  const char *v372;
  unint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  unsigned int v392;
  int v393;
  unint64_t v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  WTF *v402;
  WTF *v403;
  const char *v404;
  const char *v405;
  const char *v406;
  const char *v407;
  const char *v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  WTF *v416;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char v433;
  _QWORD *v434;
  char v435;
  uint64_t *v436;
  int v437;
  char v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  unsigned int v446;
  WTF ***v447;
  WTF::StringImpl *v449[2];
  WTF *v450;
  int v451;
  const char *v452;
  WTF *v453[10];

  v7 = *(_DWORD *)(a1 + 7408);
  *((_DWORD *)a4 + 4) = *(_DWORD *)(a1 + 7400);
  *((_DWORD *)a4 + 5) = v7 - *(_DWORD *)(a1 + 7404);
  *((_DWORD *)a4 + 2) = v7;
  v8 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v14 = v9;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B424);
  }
  v15 = v8;
  v16 = v9;
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) |= 0x8080u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B42CLL);
  }
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) &= ~0x40u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B434);
  }
  *(_BYTE *)(*(_QWORD *)v8 + 720 * v9 + 9) |= 1u;
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B43CLL);
  }
  v447 = a4;
  v22 = (int *)(a1 + 7368);
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v24 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, a1 + 7368, 0, v23, v10, v11, v12, v13);
  *(_DWORD *)(a1 + 7368) = v24;
  v30 = *(_DWORD *)(a1 + 12);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B444);
  }
  v31 = (char *)(a1 + 7344);
  v32 = v30 - 1;
  v33 = *(_QWORD *)a1;
  v34 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 10);
  if ((v34 & 0x100000) == 0)
  {
    if (v24 == 546)
      goto LABEL_8;
    if (v24 == 12)
      goto LABEL_95;
    if (v24 != 1048592)
      goto LABEL_11;
LABEL_442:
    if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      goto LABEL_443;
LABEL_8:
    if ((v34 & 0x102000) != 0 || !*v31 || *(_DWORD *)(a1 + 7480) == 1)
      goto LABEL_11;
LABEL_95:
    *a4 = *(WTF ***)(a1 + 7376);
    v133 = *(_DWORD *)(a1 + 7400);
    v134 = *(_DWORD *)(a1 + 7412);
    v135 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v133;
    *(_DWORD *)(a1 + 7448) = v134;
    *(_DWORD *)(a1 + 7452) = v135;
    v136 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v136 + 4) = v133;
    v137 = *(_BYTE *)(v33 + 720 * v32 + 9) & 1;
    *(_BYTE *)(v136 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v136, a1 + 7368, 0, v137, v26, v27, v28, v29);
    if (*(_DWORD *)(v15 + 12) <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8B4D4);
    }
    v143 = JSC::Scope::declareLexicalVariable(*(_QWORD *)v15 + 720 * v16, (WTF::AtomStringImpl *)*a4, 1, v138, v139, v140, v141, v142);
    v24 = *v22;
    if ((v143 & 1) != 0)
    {
      if (v24 != 20 && (v24 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v453[0] = **a4;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(a1, (uint64_t *)v453);
        }
        goto LABEL_444;
      }
      goto LABEL_443;
    }
    goto LABEL_12;
  }
  switch(v24)
  {
    case 12:
      goto LABEL_95;
    case 1048592:
      goto LABEL_442;
    case 546:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a class name within static block");
      goto LABEL_444;
  }
LABEL_11:
  if (a3 == 1)
  {
    if (!v24)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Class statements must have a name");
      goto LABEL_444;
    }
    v318 = *(_BYTE *)(v33 + 720 * v32 + 9);
    if ((v318 & 1) != 0 && v24 == 532)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v453[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v453[1] = v319;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11],char const(&)[16]>(a1, (uint64_t)v453);
      }
      goto LABEL_444;
    }
    if ((v24 - 531) <= 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v453[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v453[1] = v402;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v453);
      }
      goto LABEL_444;
    }
    if ((v24 & 0x200) != 0)
    {
      if ((v24 - 544) >= 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v453[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v453[1] = v403;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v453);
        }
        goto LABEL_444;
      }
      if (v24 == 546)
      {
        if ((v34 & 0x102000) == 0 && *v31 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_443;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_444;
        v453[0] = (WTF *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
        v404 = "Cannot use 'await' as a ";
      }
      else
      {
        if (v24 == 544)
        {
          if ((v318 & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v453[0] = (WTF *)"in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[11],char const(&)[2],char const*>(a1, (const char **)v453);
            }
            goto LABEL_444;
          }
          goto LABEL_443;
        }
        if ((v318 & 1) == 0 && (v34 & 0x200) == 0)
          goto LABEL_443;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_444;
        v453[0] = (WTF *)JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
        v404 = "Cannot use 'yield' as a ";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[11],char const(&)[2],char const*>(a1, v404, (const char **)v453);
      goto LABEL_444;
    }
LABEL_443:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_444;
  }
LABEL_12:
  if (v24 == 542)
  {
    v35 = *(_DWORD *)(a1 + 7400);
    v36 = *(_DWORD *)(a1 + 7412);
    v37 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v35;
    *(_DWORD *)(a1 + 7448) = v36;
    *(_DWORD *)(a1 + 7452) = v37;
    v38 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v38 + 4) = v35;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8B44CLL);
    }
    v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
    *(_BYTE *)(v38 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, v26, v27, v28, v29);
    v41 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
    v24 = *(_DWORD *)(a1 + 7368);
    if (v41)
    {
      v42 = 2;
      goto LABEL_16;
    }
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the parent class name");
      goto LABEL_444;
    }
    goto LABEL_443;
  }
  v42 = 1;
LABEL_16:
  v446 = v42;
  if (v24)
  {
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '{' at the start of a class body");
      goto LABEL_444;
    }
    goto LABEL_443;
  }
  v43 = *(_DWORD *)(a1 + 7400);
  v44 = *(_DWORD *)(a1 + 7412);
  v45 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v43;
  *(_DWORD *)(a1 + 7448) = v44;
  *(_DWORD *)(a1 + 7452) = v45;
  v46 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v46 + 4) = v43;
  v47 = *(_DWORD *)(a1 + 12);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B454);
  }
  v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 9) & 1;
  *(_BYTE *)(v46 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v46, a1 + 7368, 0, v48, v26, v27, v28, v29);
  v49 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B45CLL);
  }
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) |= 0x8080u;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B464);
  }
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) &= ~0x40u;
  v440 = v50;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8B46CLL);
  }
  v439 = 0;
  v445 = 0;
  v443 = 0;
  v444 = 0;
  v441 = v50;
  v442 = v49;
  v57 = *(_QWORD *)v49 + 720 * v50;
  *(_BYTE *)(v57 + 9) |= 1u;
  *(_DWORD *)(v57 + 10) |= 0x8000000u;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_22:
        for (i = *v22; ; *(_DWORD *)(a1 + 7368) = i)
        {
          if (i == 1)
          {
            v100 = *(_DWORD *)(a1 + 7412);
            *((_DWORD *)v447 + 3) = v100 - 1;
            v101 = *(_DWORD *)(a1 + 7400);
            v102 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v101;
            *(_DWORD *)(a1 + 7448) = v100;
            *(_DWORD *)(a1 + 7452) = v102;
            v103 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v103 + 4) = v101;
            v104 = *(_DWORD *)(a1 + 12);
            if (!v104)
            {
              __break(0xC471u);
              JUMPOUT(0x197E8B484);
            }
            v105 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v104 - 1) + 9) & 1;
            *(_BYTE *)(v103 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v103, a1 + 7368, 0, v105, v53, v54, v55, v56);
            if (((v444 | v443 | HIDWORD(v444) | HIDWORD(v443)) & 1) != 0)
            {
              JSC::Symbols::privateBrandPrivateName[0] += 2;
              v452 = (const char *)JSC::Symbols::privateBrandPrivateName;
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B56CLL);
              }
              JSC::Scope::declareLexicalVariable(*(_QWORD *)v442 + 720 * v441, (WTF::AtomStringImpl *)&v452, 1, v106, v107, v108, v109, v110);
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B574);
              }
              JSC::Scope::useVariable(*(_QWORD *)v442 + 720 * v441, (uint64_t)JSC::Symbols::privateBrandPrivateName, 0);
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B57CLL);
              }
              v274 = *(_QWORD *)v442;
              v449[0] = (WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName;
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v274 + 720 * v441 + 696), (uint64_t *)v449, v269, v270, v271, v272, v273, (uint64_t)v453);
              if (JSC::Symbols::privateBrandPrivateName[0] == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v275, v276, v277, v278, v279, v280, v281);
                WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
              }
              else
              {
                JSC::Symbols::privateBrandPrivateName[0] -= 2;
              }
              JSC::Symbols::privateClassBrandPrivateName[0] += 2;
              v452 = (const char *)JSC::Symbols::privateClassBrandPrivateName;
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B584);
              }
              JSC::Scope::declareLexicalVariable(*(_QWORD *)v442 + 720 * v441, (WTF::AtomStringImpl *)&v452, 1, v277, v278, v279, v280, v281);
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B58CLL);
              }
              JSC::Scope::useVariable(*(_QWORD *)v442 + 720 * v441, (uint64_t)JSC::Symbols::privateClassBrandPrivateName, 0);
              if (*(_DWORD *)(v442 + 12) <= v440)
              {
                __break(0xC471u);
                JUMPOUT(0x197E8B594);
              }
              v287 = *(_QWORD *)v442;
              v449[0] = (WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName;
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v287 + 720 * v441 + 696), (uint64_t *)v449, v282, v283, v284, v285, v286, (uint64_t)v453);
              if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, v288, v289, v106, v107, v108, v109, v110);
                WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
              }
              else
              {
                JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
              }
            }
            JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v453, (uint64_t *)a1, 0, v106, v107, v108, v109, v110);
            JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v449, (uint64_t *)a1, 0, v111, v112, v113, v114, v115);
            v123 = v450;
            if (v450)
            {
              v450 = 0;
              v451 = 0;
              WTF::fastFree((unint64_t)v123, v116, v117, v118, v119, v120, v121, v122);
            }
            JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v449, (WTF::AtomStringImpl *)v116, v117, v118, v119, v120, v121, v122);
            v131 = v453[3];
            if (v453[3])
            {
              v453[3] = 0;
              LODWORD(v453[4]) = 0;
              WTF::fastFree((unint64_t)v131, v124, v125, v126, v127, v128, v129, v130);
            }
            JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v453, (WTF::AtomStringImpl *)v124, v125, v126, v127, v128, v129, v130);
            return 13;
          }
          if (i != 17)
            break;
          v322 = *(_DWORD *)(a1 + 7400);
          v323 = *(_DWORD *)(a1 + 7412);
          v324 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v322;
          *(_DWORD *)(a1 + 7448) = v323;
          *(_DWORD *)(a1 + 7452) = v324;
          v325 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v325 + 4) = v322;
          v326 = *(_DWORD *)(a1 + 12);
          if (!v326)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8B248);
          }
          v327 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v326 - 1) + 9) & 1;
          *(_BYTE *)(v325 + 56) = 0;
          i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v325, a1 + 7368, 0, v327, v53, v54, v55, v56);
        }
        v59 = *(_QWORD *)(a1 + 7216);
        if (i == 532)
        {
          v62 = *(WTF::StringImpl ***)(v59 + 41952);
          if (**(WTF::StringImpl ***)(a1 + 7376) != v62[49])
          {
            v61 = 5;
            i = 532;
            v60 = 1;
            goto LABEL_30;
          }
          v89 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
          *(_OWORD *)v449 = *(_OWORD *)(a1 + 7296);
          v437 = *(_DWORD *)(a1 + 7316);
          v453[2] = *(WTF **)(a1 + 7336);
          *(_OWORD *)v453 = *(_OWORD *)(a1 + 7320);
          v435 = *v31;
          v433 = *(_BYTE *)(a1 + 7345);
          v90 = *(unsigned int *)(a1 + 7404);
          v91 = *(_QWORD *)(a1 + 7288);
          v93 = *(_DWORD *)v91;
          v92 = *(_DWORD *)(v91 + 4);
          v94 = *(_BYTE *)(v91 + 56);
          v95 = *(_DWORD *)(a1 + 7400);
          v96 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v95;
          *(_DWORD *)(a1 + 7448) = v96;
          *(_DWORD *)(a1 + 7452) = v90;
          *(_DWORD *)(v91 + 4) = v95;
          v97 = *(_DWORD *)(a1 + 12);
          if (!v97)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8B414);
          }
          v98 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 9) & 1;
          *(_BYTE *)(v91 + 56) = 0;
          i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v91, a1 + 7368, 0, v98, v53, v54, v55, v56);
          *(_DWORD *)(a1 + 7368) = i;
          v60 = 2;
          v61 = 5;
          if (i > 16)
          {
            if (i != 17 && i != 21)
            {
LABEL_81:
              v59 = *(_QWORD *)(a1 + 7216);
              goto LABEL_27;
            }
          }
          else if (i != 2)
          {
            if (!i)
              v61 = 20;
            goto LABEL_81;
          }
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v89, v90, v52, v53, v54, v55, v56);
          v294 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v294 = v93;
          *(_BYTE *)(v294 + 56) = v94;
          v295 = *(_DWORD *)(a1 + 7400);
          v296 = *(_DWORD *)(a1 + 7412);
          v297 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v295;
          *(_DWORD *)(a1 + 7448) = v296;
          *(_DWORD *)(a1 + 7452) = v297;
          *(_DWORD *)(v294 + 4) = v295;
          v298 = *(_DWORD *)(a1 + 12);
          if (!v298)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8B41CLL);
          }
          i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v294, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v298 - 1) + 9) & 1, v290, v291, v292, v293);
          *(_DWORD *)(a1 + 7368) = i;
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v92;
          *(_OWORD *)(a1 + 7296) = *(_OWORD *)v449;
          *(_DWORD *)(a1 + 7312) = 0;
          *(_DWORD *)(a1 + 7316) = v437;
          *(_OWORD *)(a1 + 7320) = *(_OWORD *)v453;
          *(WTF **)(a1 + 7336) = v453[2];
          *v31 = v435;
          *(_BYTE *)(a1 + 7345) = v433;
          v299 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v299)
          {
            if (*(_DWORD *)v299 == 2)
            {
              WTF::StringImpl::~StringImpl(v299, v50, v51, v52, v53, v54, v55, v56);
              WTF::fastFree(v394, v395, v396, v397, v398, v399, v400, v401);
              i = *v22;
            }
            else
            {
              *(_DWORD *)v299 -= 2;
            }
          }
          v60 = 1;
          v61 = 5;
          goto LABEL_81;
        }
        v60 = 1;
        v61 = 5;
LABEL_27:
        v62 = *(WTF::StringImpl ***)(v59 + 41952);
        if (i == 191488)
        {
          v63 = *(_DWORD *)(a1 + 7400);
          v64 = *(_DWORD *)(a1 + 7412);
          v65 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v63;
          *(_DWORD *)(a1 + 7448) = v64;
          *(_DWORD *)(a1 + 7452) = v65;
          v66 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v66 + 4) = v63;
          v67 = *(_DWORD *)(a1 + 12);
          if (!v67)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8B280);
          }
          v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
          *(_BYTE *)(v66 + 56) = 0;
          i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v66, a1 + 7368, 0, v68, v53, v54, v55, v56);
          *(_DWORD *)(a1 + 7368) = i;
          v61 = 18;
        }
LABEL_30:
        while (2)
        {
          if (i != 12)
          {
            switch(i)
            {
              case 0:
                if (v61 != 20)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse static block without 'static'");
                  goto LABEL_172;
                }
                v78 = 0;
                v87 = 0;
                v88 = 0;
                v79 = 1025;
                goto LABEL_205;
              case 1:
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
              case 12:
                goto LABEL_163;
              case 4:
                v244 = *(_DWORD *)(a1 + 7400);
                v245 = *(_DWORD *)(a1 + 7412);
                v246 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v244;
                *(_DWORD *)(a1 + 7448) = v245;
                *(_DWORD *)(a1 + 7452) = v246;
                v247 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v247 + 4) = v244;
                v248 = *(_DWORD *)(a1 + 12);
                if (!v248)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B370);
                }
                v249 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v248 - 1) + 9) & 1;
                *(_BYTE *)(v247 + 56) = 0;
                v250 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v247, a1 + 7368, 0, v249, v53, v54, v55, v56);
                *(_DWORD *)(a1 + 7368) = v250;
                v251 = *(_DWORD *)(a1 + 12);
                if (!v251)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B378);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v251 - 1) + 12) & 0x10) == 0
                  || v250 != 12
                  || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
                {
                  v252 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
                  v253 = *(_DWORD *)(a1 + 7368);
                  if (v252)
                  {
                    if (v253 == 5)
                    {
                      v88 = v252;
                      v254 = *(_DWORD *)(a1 + 7400);
                      v255 = *(_DWORD *)(a1 + 7412);
                      v256 = *(_DWORD *)(a1 + 7404);
                      *(_DWORD *)(a1 + 7444) = v254;
                      *(_DWORD *)(a1 + 7448) = v255;
                      *(_DWORD *)(a1 + 7452) = v256;
                      v257 = *(_QWORD *)(a1 + 7288);
                      *(_DWORD *)(v257 + 4) = v254;
                      v258 = *(_DWORD *)(a1 + 12);
                      if (!v258)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E8B360);
                      }
                      v259 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v258 - 1) + 9) & 1;
                      *(_BYTE *)(v257 + 56) = 0;
                      v260 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v257, a1 + 7368, 0, v259, v53, v54, v55, v56);
                      v78 = 0;
                      v87 = 0;
                      *(_DWORD *)(a1 + 7368) = v260;
                      v79 = 9;
LABEL_205:
                      NumericIdentifier = v62;
                      goto LABEL_42;
                    }
                    if (v253 != 20 && (v253 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
                      goto LABEL_172;
                    }
                  }
                  else if (v253 != 20 && (v253 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                    {
                      v315 = "Cannot parse computed property name";
                      v316 = a1;
                      v317 = 1;
                      goto LABEL_330;
                    }
                    goto LABEL_172;
                  }
                  goto LABEL_352;
                }
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_172;
                v372 = "Cannot use 'arguments' as an identifier in static block";
                break;
              case 9:
              case 10:
                v300 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
                NumericIdentifier = (WTF::StringImpl **)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v300, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v301, v302, v303, v304, v305, v306);
                v307 = *(_DWORD *)(a1 + 7400);
                v308 = *(_DWORD *)(a1 + 7412);
                v309 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v307;
                *(_DWORD *)(a1 + 7448) = v308;
                *(_DWORD *)(a1 + 7452) = v309;
                v212 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v212 + 4) = v307;
                v213 = *(_DWORD *)(a1 + 12);
                if (!v213)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8A8FCLL);
                }
                goto LABEL_165;
              case 11:
                v310 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
                JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v310, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *(unsigned __int8 *)(a1 + 7384));
                if (v311)
                {
                  NumericIdentifier = v311;
                  v312 = *(_DWORD *)(a1 + 7400);
                  v313 = *(_DWORD *)(a1 + 7412);
                  v314 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v312;
                  *(_DWORD *)(a1 + 7448) = v313;
                  *(_DWORD *)(a1 + 7452) = v314;
                  v212 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v212 + 4) = v312;
                  v213 = *(_DWORD *)(a1 + 12);
                  if (!v213)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E8A950);
                  }
LABEL_165:
                  v214 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v213 - 1) + 9) & 1;
                  *(_BYTE *)(v212 + 56) = 0;
                  v215 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v212, a1 + 7368, 0, v214, v53, v54, v55, v56);
                  v78 = 0;
                  v87 = 0;
                  v88 = 0;
                  *(_DWORD *)(a1 + 7368) = v215;
                  goto LABEL_166;
                }
                if (*v22 == 20 || (*v22 & 0x100000) != 0)
                  goto LABEL_352;
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_172;
                v315 = "Cannot parse big int property name";
                v316 = a1;
                v317 = 1;
                goto LABEL_330;
              case 13:
                NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
                v144 = *(_DWORD *)(a1 + 7400);
                v145 = *(_DWORD *)(a1 + 7412);
                v146 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v144;
                *(_DWORD *)(a1 + 7448) = v145;
                *(_DWORD *)(a1 + 7452) = v146;
                v147 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v147 + 4) = v144;
                v148 = *(_DWORD *)(a1 + 12);
                if (!v148)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B350);
                }
                v149 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v148 - 1) + 9) & 1;
                *(_BYTE *)(v147 + 56) = 0;
                v150 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v147, a1 + 7368, 0, v149, v53, v54, v55, v56);
                *(_DWORD *)(a1 + 7368) = v150;
                v157 = *(_DWORD *)(v442 + 12);
                if (v150 != 2)
                {
                  if (v157 <= v440)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E8B348);
                  }
                  v158 = *(_QWORD *)v442;
                  v159 = *NumericIdentifier;
                  if (*NumericIdentifier)
                    *(_DWORD *)v159 += 2;
                  v160 = (uint64_t *)(v158 + 720 * v441 + 144);
                  v449[0] = v159;
                  JSC::VariableEnvironment::getOrAddPrivateName((uint64_t)v160, v159, v151, v152, v153, v154, v155, v156);
                  LOWORD(v452) = 1027;
                  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>(v160, v449, &v452, (uint64_t)v453);
                  v161 = v449[0];
                  v449[0] = 0;
                  if (v161)
                  {
                    if (*(_DWORD *)v161 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v161, v50, v51, v52, v53, v54, v55, v56);
                      WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
                    }
                    else
                    {
                      *(_DWORD *)v161 -= 2;
                    }
                  }
                  if (LOBYTE(v453[2]))
                  {
                    v78 = 0;
                    v87 = 0;
                    v88 = 0;
                    v79 = 65;
                    goto LABEL_42;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    v315 = "Cannot declare private field twice";
                    v316 = a1;
                    v317 = 0;
                    goto LABEL_330;
                  }
                  goto LABEL_172;
                }
                if (v157 <= v440)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B358);
                }
                if (JSC::Scope::declarePrivateMethod(*(_QWORD *)v442 + 720 * v441, *NumericIdentifier, v60) < 2)
                {
                  if (*NumericIdentifier != v62[350])
                  {
                    v78 = 0;
                    v87 = 0;
                    v88 = 0;
                    LODWORD(v444) = (v60 != 2) | v444;
                    HIDWORD(v444) |= v60 == 2;
                    v79 = 129;
                    goto LABEL_42;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private method named '#constructor'");
                  goto LABEL_172;
                }
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_172;
                v315 = "Cannot declare private method twice";
                v316 = a1;
                v317 = 0;
                goto LABEL_330;
              case 14:
                goto LABEL_164;
              default:
                if (i == 1048592)
                  goto LABEL_31;
                if (i == 546)
                {
                  NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
LABEL_32:
                  v70 = *(unsigned __int8 *)(a1 + 7384);
                  v71 = *(_DWORD *)(a1 + 7400);
                  v72 = *(_DWORD *)(a1 + 7412);
                  v73 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v71;
                  *(_DWORD *)(a1 + 7448) = v72;
                  *(_DWORD *)(a1 + 7452) = v73;
                  v74 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v74 + 4) = v71;
                  v75 = *(_DWORD *)(a1 + 12);
                  if (!v75)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E8B288);
                  }
                  v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
                  *(_BYTE *)(v74 + 56) = 0;
                  v77 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v74, a1 + 7368, 0, v76, v53, v54, v55, v56);
                  v78 = 0;
                  *(_DWORD *)(a1 + 7368) = v77;
                  v79 = 1;
                  if (v61 != 5 || v70)
                  {
                    v87 = 0;
                    v88 = 0;
                  }
                  else if ((v77 & 0x200) != 0 || ((v77 - 9) >= 6 ? (v80 = v77 == 4) : (v80 = 1), v80))
                  {
                    v88 = 0;
                    v87 = *NumericIdentifier == v62[172];
                    v78 = *NumericIdentifier == v62[287];
                  }
                  else
                  {
                    v78 = 0;
                    v87 = 0;
                    v88 = 0;
                  }
                  goto LABEL_42;
                }
LABEL_163:
                if ((i & 0x200) == 0)
                  goto LABEL_352;
LABEL_164:
                NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
                v209 = *(_DWORD *)(a1 + 7400);
                v210 = *(_DWORD *)(a1 + 7412);
                v211 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v209;
                *(_DWORD *)(a1 + 7448) = v210;
                *(_DWORD *)(a1 + 7452) = v211;
                v212 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v212 + 4) = v209;
                v213 = *(_DWORD *)(a1 + 12);
                if (!v213)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B368);
                }
                goto LABEL_165;
            }
LABEL_345:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v372);
            goto LABEL_172;
          }
LABEL_31:
          NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
          if (*NumericIdentifier != *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896))
            goto LABEL_32;
          if (*(_BYTE *)(a1 + 7384) || ((1 << v61) & 0x40400) != 0)
            goto LABEL_32;
          v231 = *(_DWORD *)(a1 + 7400);
          v232 = *(_DWORD *)(a1 + 7412);
          v233 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v231;
          *(_DWORD *)(a1 + 7448) = v232;
          *(_DWORD *)(a1 + 7452) = v233;
          v234 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v234 + 4) = v231;
          v235 = *(_DWORD *)(a1 + 12);
          if (!v235)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8B250);
          }
          v236 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v235 - 1) + 9) & 1;
          *(_BYTE *)(v234 + 56) = 0;
          i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v234, a1 + 7368, 0, v236, v53, v54, v55, v56);
          *(_DWORD *)(a1 + 7368) = i;
          if (i > 0x15 || ((1 << i) & 0x260004) == 0)
          {
            v238 = *(_QWORD *)(a1 + 7288);
            if (!*(_BYTE *)(v238 + 56))
            {
              v61 = 10;
              if (i == 191488)
              {
                v239 = *(_DWORD *)(a1 + 7400);
                v240 = *(_DWORD *)(a1 + 7412);
                v241 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v239;
                *(_DWORD *)(a1 + 7448) = v240;
                *(_DWORD *)(a1 + 7452) = v241;
                *(_DWORD *)(v238 + 4) = v239;
                v242 = *(_DWORD *)(a1 + 12);
                if (!v242)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E8B258);
                }
                v243 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v242 - 1) + 9) & 1;
                *(_BYTE *)(v238 + 56) = 0;
                i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v238, a1 + 7368, 0, v243, v53, v54, v55, v56);
                *(_DWORD *)(a1 + 7368) = i;
                v61 = 17;
              }
              continue;
            }
          }
          break;
        }
        v78 = 0;
        v87 = 0;
        v88 = 0;
        NumericIdentifier = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896);
LABEL_166:
        v79 = 1;
LABEL_42:
        v81 = *v22;
        if (!v87 && !v78)
          break;
        if (v81 == 13)
        {
          v320 = *(_DWORD *)(v442 + 12);
          if (v78)
          {
            if (v320 <= v440)
            {
              __break(0xC471u);
              JUMPOUT(0x197E8B404);
            }
            v321 = 0;
          }
          else
          {
            if (v320 <= v440)
            {
              __break(0xC471u);
              JUMPOUT(0x197E8B40CLL);
            }
            v321 = 1;
          }
          v392 = JSC::Scope::declarePrivateAccessor(*(_QWORD *)v442 + 720 * v441, **(WTF::StringImpl ***)(a1 + 7376), v60, v321, v53, v54, v55, v56);
          if ((v392 & 2) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Declared private setter with an already used name");
            goto LABEL_172;
          }
          if (v60 == 2)
          {
            if (v392 >= 4)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                if (v78)
                  v405 = "setter";
                else
                  v405 = "getter";
                if (v78)
                  v406 = "getter";
                else
                  v406 = "setter";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],char const(&)[7],char const(&)[35],char const(&)[7],char const(&)[16]>(a1, v405, v406);
              }
              goto LABEL_172;
            }
            HIDWORD(v443) = 1;
          }
          else
          {
            if (v392 >= 4)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                if (v78)
                  v407 = "setter";
                else
                  v407 = "getter";
                if (v78)
                  v408 = "getter";
                else
                  v408 = "setter";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],char const(&)[7],char const(&)[31],char const(&)[7],char const(&)[16]>(a1, v407, v408);
              }
              goto LABEL_172;
            }
            LODWORD(v443) = 1;
          }
          if (v78)
            v393 = 256;
          else
            v393 = 512;
          v86 = v79 | v393;
        }
        else
        {
          if (v87)
            v85 = 2;
          else
            v85 = 4;
          v86 = v79 & 0x4C8 | v85;
        }
        if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::SyntaxChecker>(a1, a2, v86, v60, v53, v54, v55, v56))
        {
          if (*v22 != 20 && (*v22 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
            goto LABEL_172;
          }
          goto LABEL_352;
        }
      }
      if (v81 == 2)
      {
        if (v61 != 20)
          goto LABEL_46;
LABEL_287:
        if (v81 != 20 && (v81 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v315 = "Expected block statement for class static block";
            v316 = a1;
            v317 = 1;
            goto LABEL_330;
          }
          goto LABEL_172;
        }
LABEL_352:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        goto LABEL_172;
      }
      if (v61 == 5)
        break;
      if (v61 != 20)
      {
LABEL_46:
        memset(v453, 0, 40);
        if (v60 == 1)
        {
          v82 = *NumericIdentifier == v62[135];
          if (v61 != 5 && *NumericIdentifier == v62[135])
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (((1 << v61) & 0x38FC0) != 0)
              {
                v449[0] = (WTF::StringImpl *)"an ";
                v162 = "arrow function";
                switch(v61)
                {
                  case 6:
                    break;
                  case 7:
                  case 9:
                    v162 = "async function";
                    break;
                  case 8:
                  case 11:
                    v162 = "async arrow function";
                    break;
                  case 10:
                    v162 = "async method";
                    break;
                  case 12:
                  case 13:
                  case 14:
                    __break(0xC471u);
                    JUMPOUT(0x197E8B340);
                  case 15:
                  case 16:
                    v162 = "async generator function";
                    break;
                  case 17:
                    v162 = "async generator method";
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197E8B4C4);
                }
              }
              else
              {
                if (v61 != 18)
                {
                  if (((1 << v61) & 0x87000) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E8B320);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x197E8B4A4);
                }
                v449[0] = (WTF::StringImpl *)"a ";
                v162 = "generator method";
              }
              v452 = v162;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const*,char const(&)[21]>(a1, (const char **)v449, &v452);
            }
            goto LABEL_172;
          }
          if (*NumericIdentifier == v62[135])
            v83 = v446;
          else
            v83 = 0;
          if (*NumericIdentifier == v62[135])
            NumericIdentifier = *v447;
        }
        else
        {
          v83 = 0;
          v82 = 0;
        }
        v453[0] = (WTF *)NumericIdentifier;
        v84 = *(_BYTE *)(a1 + 7474);
        *(_BYTE *)(a1 + 7474) = v61;
        if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, v83, 0, v453, 2) & 1) != 0)
        {
          if (v82)
          {
            if (!v445)
            {
              *(_BYTE *)(a1 + 7474) = v84;
              v445 = 12;
              goto LABEL_22;
            }
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare multiple constructors in a single class");
          }
          else
          {
            if (v60 != 2 || !v453[0] || *(WTF::StringImpl **)v453[0] != v62[270])
            {
              *(_BYTE *)(a1 + 7474) = v84;
              goto LABEL_22;
            }
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
          }
        }
        else if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
        }
        *(_BYTE *)(a1 + 7474) = v84;
        goto LABEL_172;
      }
      if (v81)
        goto LABEL_287;
      v328 = *(_DWORD *)(a1 + 12);
      if (!v328)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B380);
      }
      v329 = (JSC::Scope *)(*(_QWORD *)a1 + 720 * (v328 - 1));
      v330 = *((_DWORD *)v329 + 45);
      JSC::Scope::pushUsedVariableSet(v329, (uint64_t)v50, v51, v52, v53, v54, v55, v56);
      v331 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = 0;
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 2, v332, v333, v334, v335, v336))
      {
        if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse class static block");
        }
        *(_DWORD *)(a1 + 7456) = v331;
        goto LABEL_172;
      }
      v339 = JSC::Symbols::staticInitializerBlockPrivateName[0];
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      if (v339)
      {
        JSC::Symbols::staticInitializerBlockPrivateName[0] = v339;
      }
      else
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName, v337, v338, v52, v53, v54, v55, v56);
        WTF::fastFree(v417, v418, v419, v420, v421, v422, v423, v424);
      }
      v340 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      v453[0] = (WTF *)JSC::Symbols::staticInitializerBlockPrivateName;
      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v340, (uint64_t *)v453);
      v348 = v453[0];
      v453[0] = 0;
      if (v348)
      {
        if (*(_DWORD *)v348 == 2)
        {
          WTF::StringImpl::~StringImpl(v348, v341, v342, v343, v344, v345, v346, v347);
          WTF::fastFree(v425, v426, v427, v428, v429, v430, v431, v432);
        }
        else
        {
          *(_DWORD *)v348 -= 2;
        }
      }
      if (*((unsigned int *)v340 + 5) <= (*v340 - 1) >> 6)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3B4);
      }
      if (*(_DWORD *)(v442 + 12) <= v440)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3BCLL);
      }
      JSC::Scope::markLastUsedVariablesSetAsCaptured((uint64_t *)(*(_QWORD *)v442 + 720 * v441), v330, v342, v343, v344, v345, v346, v347);
      *(_DWORD *)(a1 + 7456) = v331;
    }
    if (!NumericIdentifier)
      goto LABEL_121;
    v163 = *NumericIdentifier;
    if (*NumericIdentifier == v62[135])
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare class field named 'constructor'");
      goto LABEL_172;
    }
    if (v163 == v62[350])
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_172;
      v372 = "Cannot declare private class field named '#constructor'";
      goto LABEL_345;
    }
    if (v60 == 2)
      break;
LABEL_121:
    if (v88)
    {
      if (v60 != 1)
        goto LABEL_302;
      v349 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
      PrivateIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v349, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"instanceComputedName", (WTF::StringImpl *)0x15, v439);
      LODWORD(v439) = v439 + 1;
      goto LABEL_303;
    }
LABEL_122:
    if (v81 == 21)
    {
      v164 = *(_DWORD *)(a1 + 7400);
      v165 = *(_DWORD *)(a1 + 7412);
      v166 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v164;
      *(_DWORD *)(a1 + 7448) = v165;
      *(_DWORD *)(a1 + 7452) = v166;
      v167 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v167 + 4) = v164;
      v168 = *(_DWORD *)(a1 + 12);
      if (!v168)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3F4);
      }
      v169 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v168 - 1) + 9) & 1;
      *(_BYTE *)(v167 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v167, a1 + 7368, 0, v169, v53, v54, v55, v56);
      v175 = *(_DWORD *)(a1 + 12);
      if (!v175)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3FCLL);
      }
      v176 = *(_QWORD *)a1 + 720 * (v175 - 1);
      v179 = *(_DWORD *)(v176 + 180);
      v178 = (_DWORD *)(v176 + 180);
      v177 = v179;
      v180 = v178 - 3;
      v453[0] = (WTF *)0x800000000;
      *(_QWORD *)&v181 = -1;
      *((_QWORD *)&v181 + 1) = -1;
      *(_OWORD *)&v453[1] = v181;
      *(_OWORD *)&v453[3] = v181;
      *(_OWORD *)&v453[5] = v181;
      *(_OWORD *)&v453[7] = v181;
      v182 = *v178;
      v184 = v441;
      v183 = v442;
      if ((_DWORD)v182 == *(v178 - 1))
      {
        v380 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v178 - 3), (void *)(v182 + 1), (unint64_t)v453, v170, v171, v172, v173, v174);
        v388 = *v180 + 72 * *v178;
        *(_OWORD *)v388 = *(_OWORD *)v380;
        v390 = *(_OWORD *)(v380 + 32);
        v389 = *(_OWORD *)(v380 + 48);
        v391 = *(_OWORD *)(v380 + 16);
        *(_QWORD *)(v388 + 64) = *(_QWORD *)(v380 + 64);
        *(_OWORD *)(v388 + 32) = v390;
        *(_OWORD *)(v388 + 48) = v389;
        *(_OWORD *)(v388 + 16) = v391;
        *(_QWORD *)v380 = 0x800000000;
        *(_QWORD *)&v389 = -1;
        *((_QWORD *)&v389 + 1) = -1;
        *(_OWORD *)(v380 + 56) = v389;
        *(_OWORD *)(v380 + 40) = v389;
        *(_OWORD *)(v380 + 24) = v389;
        *(_OWORD *)(v380 + 8) = v389;
        v184 = v441;
        v183 = v442;
        ++*v178;
        if (HIDWORD(v453[0]) != 8)
        {
          WTF::fastFree((unint64_t)v453[1], v381, v382, v383, v384, v385, v386, v387);
          v184 = v441;
          v183 = v442;
        }
      }
      else
      {
        v185 = *v180 + 72 * v182;
        *(_OWORD *)v185 = *(_OWORD *)v453;
        v186 = *(_OWORD *)&v453[2];
        v187 = *(_OWORD *)&v453[4];
        v188 = *(_OWORD *)&v453[6];
        *(WTF **)(v185 + 64) = v453[8];
        *(_OWORD *)(v185 + 32) = v187;
        *(_OWORD *)(v185 + 48) = v188;
        *(_OWORD *)(v185 + 16) = v186;
        ++*v178;
      }
      v189 = *(_BYTE *)(a1 + 7345);
      *(_BYTE *)(a1 + 7345) = 1;
      if (*(_DWORD *)(v183 + 12) <= v440)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3C4);
      }
      *(_DWORD *)(*(_QWORD *)v183 + 720 * v184 + 20) = 0;
      LODWORD(v453[0]) = 0;
      v453[1] = *(WTF **)(a1 + 7496);
      v453[2] = (WTF *)a1;
      *(_QWORD *)(a1 + 7496) = v453;
      v190 = (uint64_t *)v183;
      v191 = v184;
      v192 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v453);
      *((WTF **)v453[2] + 937) = v453[1];
      if (*((_DWORD *)v190 + 3) <= v440)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3CCLL);
      }
      v193 = *v190;
      *(_DWORD *)(*v190 + 720 * v191 + 20) = 1;
      if (!v192)
      {
        if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse initializer for class field");
        }
        *(_BYTE *)(a1 + 7345) = v189;
        goto LABEL_172;
      }
      v438 = v189;
      v194 = v193 + 720 * v191;
      v197 = *(_DWORD *)(v194 + 180);
      v196 = (unsigned int *)(v194 + 180);
      v195 = v197;
      v198 = v191;
      if (v197 > v177)
      {
        v199 = (_QWORD *)(v193 + 720 * v191 + 168);
        do
        {
          v200 = *v199 + 72 * v177;
          v201 = *(unsigned int *)(v200 + 4);
          v202 = (_QWORD *)(v200 + 8);
          if ((_DWORD)v201 != 8)
            v202 = (_QWORD *)*v202;
          v203 = 0;
          while ((_DWORD)v201 != v203)
          {
            LODWORD(v204) = v203;
            v205 = v202[v203++];
            if (v205 != -1)
            {
              v204 = v204;
              goto LABEL_138;
            }
          }
          v204 = v201;
LABEL_138:
          if ((_DWORD)v201 != (_DWORD)v204)
          {
            v434 = v199;
            v436 = (uint64_t *)(v193 + 720 * v198 + 696);
            v206 = v204 | (v201 << 32);
            LODWORD(v207) = v204;
            do
            {
              LODWORD(v208) = v207;
              v449[0] = 0;
              v449[0] = (WTF::StringImpl *)v202[v206];
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v436, (uint64_t *)v449, v52, v53, v54, v55, v56, (uint64_t)v453);
              if (HIDWORD(v206) <= (v208 + 1))
                v207 = (v208 + 1);
              else
                v207 = HIDWORD(v206);
              while ((_DWORD)v207 - 1 != (_DWORD)v208)
              {
                v208 = (v208 + 1);
                if (v202[v208] != -1)
                {
                  LODWORD(v207) = v208;
                  goto LABEL_148;
                }
              }
              v208 = v207;
LABEL_148:
              v206 = v208 | v206 & 0xFFFFFFFF00000000;
              v198 = v441;
            }
            while ((_DWORD)v201 != (_DWORD)v207);
            v195 = *v196;
            v199 = v434;
          }
          ++v177;
        }
        while (v177 < v195);
      }
      *(_BYTE *)(a1 + 7345) = v438;
      v81 = *v22;
    }
    if (v81 == 17)
    {
      v216 = *(_DWORD *)(a1 + 7400);
      v217 = *(_DWORD *)(a1 + 7412);
      v218 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v216;
      *(_DWORD *)(a1 + 7448) = v217;
      *(_DWORD *)(a1 + 7452) = v218;
      v219 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v219 + 4) = v216;
      v220 = *(_DWORD *)(a1 + 12);
      if (!v220)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8B3ECLL);
      }
      v221 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v220 - 1) + 9) & 1;
      *(_BYTE *)(v219 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v219, a1 + 7368, 0, v221, v53, v54, v55, v56);
    }
    else if (v81 != 1 && v81 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    {
      if ((v81 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a class field");
        goto LABEL_172;
      }
      goto LABEL_352;
    }
  }
  if (v163 != v62[270])
  {
    if (!v88)
      goto LABEL_122;
LABEL_302:
    v373 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
    PrivateIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v373, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"staticComputedName", (WTF::StringImpl *)0x13, SHIDWORD(v439));
    ++HIDWORD(v439);
LABEL_303:
    if (*(_DWORD *)(v442 + 12) <= v440)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8B3D4);
    }
    JSC::Scope::declareLexicalVariable(*(_QWORD *)v442 + 720 * v441, PrivateIdentifier, 1, v350, v351, v352, v353, v354);
    if (*(_DWORD *)(v442 + 12) <= v440)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8B3DCLL);
    }
    JSC::Scope::useVariable(*(_QWORD *)v442 + 720 * v441, *(_QWORD *)PrivateIdentifier, 0);
    if (*(_DWORD *)(v442 + 12) <= v440)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8B3E4);
    }
    v379 = *(_QWORD *)v442;
    v449[0] = *(WTF::StringImpl **)PrivateIdentifier;
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v379 + 720 * v441 + 696), (uint64_t *)v449, v374, v375, v376, v377, v378, (uint64_t)v453);
    v81 = *v22;
    goto LABEL_122;
  }
  if (!*(_QWORD *)(a1 + 7360))
  {
    v315 = "Cannot declare a static field named 'prototype'";
    v316 = a1;
    v317 = 0;
LABEL_330:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v316, v317, v315);
  }
LABEL_172:
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v453, (uint64_t *)a1, 0, v52, v53, v54, v55, v56);
  v229 = v453[3];
  if (v453[3])
  {
    v453[3] = 0;
    LODWORD(v453[4]) = 0;
    WTF::fastFree((unint64_t)v229, v222, v223, v224, v225, v226, v227, v228);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v453, (WTF::AtomStringImpl *)v222, v223, v224, v225, v226, v227, v228);
LABEL_444:
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v453, (uint64_t *)a1, 0, v25, v26, v27, v28, v29);
  v416 = v453[3];
  if (v453[3])
  {
    v453[3] = 0;
    LODWORD(v453[4]) = 0;
    WTF::fastFree((unint64_t)v416, v409, v410, v411, v412, v413, v414, v415);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v453, (WTF::AtomStringImpl *)v409, v410, v411, v412, v413, v414, v415);
  return 0;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Failed to parse class");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a class twice: '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "'");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "' is not a valid class name");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11],char const(&)[16]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "class name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "class name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[11]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the keyword '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "class name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[11],char const(&)[2],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot use 'let' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "class name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[11],char const(&)[2],char const*>(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  WTF *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v28 = off_1E3572250;
    v29 = (WTF *)v31;
    v30 = xmmword_199122F80;
    v31[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "class name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", ".");
    v28[5]((WTF::StringPrintStream *)&v28);
    WTF::String::fromUTF8WithLatin1Fallback(v29, v30, &v27);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v27, v5, v6, v7, v8, v9, v10);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v29 != (WTF *)v31)
      WTF::fastFree((unint64_t)v29, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "]");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "computed property name");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Scope::declarePrivateMethod(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = a1 + 144;
  if (a3 == 2)
  {
    v11 = JSC::VariableEnvironment::declareStaticPrivateMethod(v3, a2);
  }
  else
  {
    if (a2)
      *(_DWORD *)a2 += 2;
    v22 = a2;
    v11 = JSC::VariableEnvironment::declarePrivateMethod(v3, &v22, 0);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if (v11)
    return 0;
  else
    return 2;
}

uint64_t JSC::Scope::declarePrivateField(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  WTF::StringImpl *v27;
  __int16 v28;

  v8 = (uint64_t *)(a1 + 144);
  if (a2)
    *(_DWORD *)a2 += 2;
  v27 = a2;
  JSC::VariableEnvironment::getOrAddPrivateName(a1 + 144, a2, a3, a4, a5, a6, a7, a8);
  v28 = 1027;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>(v8, &v27, &v28, (uint64_t)v26);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (v26[16])
    return 0;
  else
    return 2;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],char const(&)[7],char const(&)[35],char const(&)[7],char const(&)[16]>(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot declare a private static ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " if there is a non-static private ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " with used name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],char const(&)[7],char const(&)[31],char const(&)[7],char const(&)[16]>(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot declare a private non-static ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " if there is a static private ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " with used name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  _DWORD *v12;
  int v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  const char *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  const char *v34;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t *v52;
  uint64_t *v53;
  int v54;
  int v55;
  int v56;
  _OWORD v57[2];
  uint64_t v58;

  v11 = (unsigned __int8 *)(a1 + 7384);
  v12 = (_DWORD *)(a1 + 7368);
  v13 = *(_DWORD *)(a1 + 7368);
  if ((v13 - 12) < 3)
    goto LABEL_2;
  if (v13 <= 544)
  {
    if (v13 != 544)
      goto LABEL_109;
LABEL_23:
    v28 = *(_DWORD *)(a1 + 12);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8CEECLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 9) & 1) == 0)
      goto LABEL_2;
    if (v13 != 1048592)
      goto LABEL_109;
    v29 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v30 = **(_QWORD **)(a1 + 7376);
    goto LABEL_27;
  }
  if (v13 == 545)
    goto LABEL_28;
  if (v13 == 546)
    goto LABEL_2;
  if (v13 != 1048592)
    goto LABEL_109;
  v29 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
  v30 = **(_QWORD **)(a1 + 7376);
  if (v30 == v29[41])
    goto LABEL_23;
LABEL_27:
  if (v30 != v29[62])
    goto LABEL_32;
LABEL_28:
  v31 = *(_DWORD *)(a1 + 12);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D0F8);
  }
  v32 = v31 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 9) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 11) & 2) == 0)
    goto LABEL_2;
  if (v13 == 1048592)
  {
    v29 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v30 = **(_QWORD **)(a1 + 7376);
LABEL_32:
    if (v30 != v29[16])
      goto LABEL_69;
LABEL_2:
    v14 = *(uint64_t **)(a1 + 7376);
    if (a4 == 1)
    {
      v15 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v16 = *v14;
      if (*v14 == v15[135])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a getter or setter named 'constructor'");
        return 0;
      }
    }
    else if (a4 == 2)
    {
      v15 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v16 = *v14;
      if (*v14 == v15[270])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
        return 0;
      }
    }
    else
    {
      v15 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v16 = *v14;
    }
    if (v16 == v15[350])
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private accessor named '#constructor'");
      return 0;
    }
    if (v13 == 13 && !a4)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot declare a private setter or getter outside a class");
      return 0;
    }
    v17 = *(_DWORD *)(a1 + 7400);
    v18 = *(_DWORD *)(a1 + 7412);
    v19 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v17;
    *(_DWORD *)(a1 + 7448) = v18;
    *(_DWORD *)(a1 + 7452) = v19;
    v20 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v20 + 4) = v17;
    v21 = *(_DWORD *)(a1 + 12);
    if (v21)
      goto LABEL_7;
    goto LABEL_138;
  }
LABEL_109:
  if ((v13 & 0x200) != 0)
    goto LABEL_2;
  if (v13 != 4)
  {
    if ((v13 - 9) >= 2)
    {
      if (v13 != 11)
        goto LABEL_69;
      v52 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
      JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v52, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *v11);
      if (!v53)
      {
        if (*v12 != 20 && (*v12 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
          return 0;
        }
        goto LABEL_69;
      }
      v14 = v53;
      v54 = *(_DWORD *)(a1 + 7400);
      v55 = *(_DWORD *)(a1 + 7412);
      v56 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v54;
      *(_DWORD *)(a1 + 7448) = v55;
      *(_DWORD *)(a1 + 7452) = v56;
      v20 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v20 + 4) = v54;
      v21 = *(_DWORD *)(a1 + 12);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D094);
      }
      goto LABEL_7;
    }
    v49 = *(_DWORD *)(a1 + 7400);
    v50 = *(_DWORD *)(a1 + 7412);
    v51 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v49;
    *(_DWORD *)(a1 + 7448) = v50;
    *(_DWORD *)(a1 + 7452) = v51;
    v20 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v20 + 4) = v49;
    v21 = *(_DWORD *)(a1 + 12);
    if (v21)
    {
      v14 = 0;
LABEL_7:
      v22 = 1;
      goto LABEL_8;
    }
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x197E8CED0);
  }
  v38 = *(_DWORD *)(a1 + 7400);
  v39 = *(_DWORD *)(a1 + 7412);
  v40 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v38;
  *(_DWORD *)(a1 + 7448) = v39;
  *(_DWORD *)(a1 + 7452) = v40;
  v41 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v41 + 4) = v38;
  v42 = *(_DWORD *)(a1 + 12);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D100);
  }
  v43 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1;
  *(_BYTE *)(v41 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v41, (uint64_t)v12, 0, v43, a5, a6, a7, a8);
  v44 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
  v45 = *(_DWORD *)(a1 + 7368);
  if (!v44)
  {
    if (v45 != 20 && (v45 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
      return 0;
    }
    goto LABEL_69;
  }
  if (v45 != 5)
  {
    if (v45 != 20 && (v45 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
      return 0;
    }
    goto LABEL_69;
  }
  v46 = *(_DWORD *)(a1 + 7400);
  v47 = *(_DWORD *)(a1 + 7412);
  v48 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v46;
  *(_DWORD *)(a1 + 7448) = v47;
  *(_DWORD *)(a1 + 7452) = v48;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v46;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D108);
  }
  v14 = 0;
  v22 = 0;
LABEL_8:
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v24 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, (uint64_t)v12, 0, v23, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v24;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  if ((a3 & 2) != 0)
  {
    if (v24 == 2)
    {
      v25 = v11[90];
      v11[90] = 3;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, v57, 2) & 1) != 0)
      {
LABEL_11:
        v11[90] = v25;
        goto LABEL_12;
      }
      if (*v12 != 20 && (*v12 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v27 = "Cannot parse getter definition";
          goto LABEL_74;
        }
LABEL_82:
        a3 = 0;
        v11[90] = v25;
        return a3;
      }
LABEL_81:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_82;
    }
    if (v24 == 20 || (v24 & 0x100000) != 0)
      goto LABEL_69;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v34 = "Expected a parameter list for getter definition";
LABEL_85:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v34);
    return 0;
  }
  if ((a3 & 4) != 0)
  {
    if (v24 == 2)
    {
      v25 = v11[90];
      v11[90] = 4;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, v57, 2) & 1) != 0)goto LABEL_11;
      if (*v12 == 20 || (*v12 & 0x100000) != 0)
        goto LABEL_81;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_82;
      v27 = "Cannot parse setter definition";
      goto LABEL_74;
    }
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v34 = "Expected a parameter list for setter definition";
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  if ((a3 & 0x100) != 0)
  {
    if (v24 == 2)
    {
      v25 = v11[90];
      v11[90] = 4;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, v57, 2) & 1) != 0)goto LABEL_11;
      if (*v12 != 20 && (*v12 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_82;
        v27 = "Cannot parse private setter definition";
        goto LABEL_74;
      }
      goto LABEL_81;
    }
    if (v24 == 20 || (v24 & 0x100000) != 0)
      goto LABEL_69;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v34 = "Expected a parameter list for private setter definition";
    goto LABEL_85;
  }
  if ((a3 & 0x200) != 0)
  {
    if (v24 == 2)
    {
      v25 = v11[90];
      v11[90] = 3;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, v57, 2) & 1) != 0)goto LABEL_11;
      if (*v12 == 20 || (*v12 & 0x100000) != 0)
        goto LABEL_81;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_82;
      v27 = "Cannot parse private getter definition";
LABEL_74:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v27);
      goto LABEL_82;
    }
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v34 = "Expected a parameter list for private getter definition";
      goto LABEL_85;
    }
LABEL_69:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
LABEL_12:
  if (!v14)
  {
    if (v22)
      return a3;
    else
      return a3 | 8;
  }
  return a3;
}

void JSC::Scope::pushUsedVariableSet(JSC::Scope *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[72];

  *(_QWORD *)v27 = 0x800000000;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  *(_OWORD *)&v27[8] = v9;
  *(_OWORD *)&v27[24] = v9;
  *(_OWORD *)&v27[40] = v9;
  *(_OWORD *)&v27[56] = v9;
  v10 = *((unsigned int *)this + 45);
  if ((_DWORD)v10 == *((_DWORD *)this + 44))
  {
    v15 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, (void *)(v10 + 1), (unint64_t)v27, a4, a5, a6, a7, a8);
    v23 = *((_QWORD *)this + 21) + 72 * *((unsigned int *)this + 45);
    *(_OWORD *)v23 = *(_OWORD *)v15;
    v25 = *(_OWORD *)(v15 + 32);
    v24 = *(_OWORD *)(v15 + 48);
    v26 = *(_OWORD *)(v15 + 16);
    *(_QWORD *)(v23 + 64) = *(_QWORD *)(v15 + 64);
    *(_OWORD *)(v23 + 32) = v25;
    *(_OWORD *)(v23 + 48) = v24;
    *(_OWORD *)(v23 + 16) = v26;
    *(_QWORD *)v15 = 0x800000000;
    *(_QWORD *)&v24 = -1;
    *((_QWORD *)&v24 + 1) = -1;
    *(_OWORD *)(v15 + 56) = v24;
    *(_OWORD *)(v15 + 40) = v24;
    *(_OWORD *)(v15 + 24) = v24;
    *(_OWORD *)(v15 + 8) = v24;
    ++*((_DWORD *)this + 45);
    if (*(_DWORD *)&v27[4] != 8)
      WTF::fastFree(*(unint64_t *)&v27[8], v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v11 = *((_QWORD *)this + 21) + 72 * v10;
    *(_OWORD *)v11 = *(_OWORD *)v27;
    v12 = *(_OWORD *)&v27[16];
    v13 = *(_OWORD *)&v27[32];
    v14 = *(_OWORD *)&v27[48];
    *(_QWORD *)(v11 + 64) = *(_QWORD *)&v27[64];
    *(_OWORD *)(v11 + 32) = v13;
    *(_OWORD *)(v11 + 48) = v14;
    *(_OWORD *)(v11 + 16) = v12;
    ++*((_DWORD *)this + 45);
  }
}

uint64_t *JSC::Scope::markLastUsedVariablesSetAsCaptured(uint64_t *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *((unsigned int *)this + 45);
  if (v8 > a2)
  {
    v9 = (uint64_t)this;
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)(v9 + 168) + 72 * v10;
      v12 = *(unsigned int *)(v11 + 4);
      v13 = (_QWORD *)(v11 + 8);
      if ((_DWORD)v12 != 8)
        v13 = (_QWORD *)*v13;
      v14 = 0;
      while ((_DWORD)v12 != v14)
      {
        LODWORD(v15) = v14;
        v16 = v13[v14++];
        if (v16 != -1)
        {
          v15 = v15;
          goto LABEL_9;
        }
      }
      v15 = v12;
LABEL_9:
      if ((_DWORD)v12 != (_DWORD)v15)
      {
        v17 = v15 | (v12 << 32);
        LODWORD(v18) = v15;
        do
        {
          LODWORD(v19) = v18;
          v21 = 0;
          v21 = v13[v17];
          this = WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v9 + 696), &v21, a4, a5, a6, a7, a8, (uint64_t)&v20);
          if (HIDWORD(v17) <= (v19 + 1))
            v18 = (v19 + 1);
          else
            v18 = HIDWORD(v17);
          while ((_DWORD)v18 - 1 != (_DWORD)v19)
          {
            v19 = (v19 + 1);
            if (v13[v19] != -1)
            {
              LODWORD(v18) = v19;
              goto LABEL_19;
            }
          }
          v19 = v18;
LABEL_19:
          v17 = v19 | v17 & 0xFFFFFFFF00000000;
        }
        while ((_DWORD)v12 != (_DWORD)v18);
        v8 = *(unsigned int *)(v9 + 180);
      }
      ++v10;
    }
    while (v10 < v8);
  }
  return this;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _BYTE v87[24];
  WTF *v88;
  uint64_t v89;

  if (*(int *)(a1 + 7456) <= 0 && a3 != 2)
  {
    v69 = 0;
    v70 = 0;
    goto LABEL_13;
  }
  v12 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D788);
  }
  *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) |= 0x8080u;
  if (a3)
  {
    if (a3 == 1)
    {
      if (*(_DWORD *)(v12 + 12) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D7B0);
      }
      *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) |= 0x80000u;
      if (*(_DWORD *)(v12 + 12) > v13)
        goto LABEL_9;
    }
    else
    {
      if (a3 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D708);
      }
      if (*(_DWORD *)(v12 + 12) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D7C0);
      }
      *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) = *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) & 0xFE8F007F | 0x1708180;
      if (*(_DWORD *)(v12 + 12) > v13)
      {
        *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 20) = 0;
        goto LABEL_10;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197E8D588);
  }
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D7A8);
  }
LABEL_9:
  *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) &= ~0x40u;
LABEL_10:
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D790);
  }
  if ((*(_BYTE *)(*(_QWORD *)v12 + 720 * v13 + 11) & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D630);
  }
  v70 = 1;
  v69 = (uint64_t *)a1;
LABEL_13:
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v14 = *(_DWORD *)(a1 + 7400);
  v15 = *(_DWORD *)(a1 + 7412);
  v16 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v14;
  *(_DWORD *)(a1 + 7448) = v15;
  *(_DWORD *)(a1 + 7452) = v16;
  v17 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v17 + 4) = v14;
  v18 = *(_DWORD *)(a1 + 12);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8D798);
  }
  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v20;
  if (v20 == 1)
  {
    v63 = *(_DWORD *)(a1 + 7400);
    v64 = *(_DWORD *)(a1 + 7412);
    v65 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v63;
    *(_DWORD *)(a1 + 7448) = v64;
    *(_DWORD *)(a1 + 7452) = v65;
    v66 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v66 + 4) = v63;
    v67 = *(_DWORD *)(a1 + 12);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8D7B8);
    }
    v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
    *(_BYTE *)(v66 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v66, a1 + 7368, 0, v68, v21, v22, v23, v24);
    if (v70)
    {
      if (!v69)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D604);
      }
      goto LABEL_20;
    }
    goto LABEL_34;
  }
  v25 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1);
  v33 = *(_DWORD *)(a1 + 7368);
  if (v25)
  {
    if (v33 == 1)
    {
      v34 = *(_DWORD *)(a1 + 7400);
      v35 = *(_DWORD *)(a1 + 7412);
      v36 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v34;
      *(_DWORD *)(a1 + 7448) = v35;
      *(_DWORD *)(a1 + 7452) = v36;
      v37 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v37 + 4) = v34;
      v38 = *(_DWORD *)(a1 + 12);
      if (!v38)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8D7A0);
      }
      v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
      *(_BYTE *)(v37 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
      if (v70)
      {
        if (!v69)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8D650);
        }
LABEL_20:
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v87, (uint64_t *)a1, 0, v28, v29, v30, v31, v32);
        JSC::VariableEnvironment::operator=((uint64_t)&v84, (uint64_t)v87, v40, v41, v42, v43, v44, v45);
        v46 = v88;
        v88 = 0;
        v89 = 0;
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v87, v47, v48, v49, v50, v51, v52, v53);
        if (v46)
          WTF::fastFree((unint64_t)v46, v54, v55, v56, v57, v58, v59, v60);
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v84, (WTF::AtomStringImpl *)v54, v55, v56, v57, v58, v59, v60);
        return 43;
      }
LABEL_34:
      v61 = 43;
      goto LABEL_35;
    }
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a closing '}' at the end of a block statement");
      goto LABEL_53;
    }
  }
  else if (v33 != 20 && (v33 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of the block statement");
    goto LABEL_53;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_53:
  v61 = 0;
LABEL_35:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v84, v26, v27, v28, v29, v30, v31, v32);
  if (v69)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v87, v69, 0, v71, v72, v73, v74, v75);
    v83 = v88;
    if (v88)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      WTF::fastFree((unint64_t)v83, v76, v77, v78, v79, v80, v81, v82);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v87, (WTF::AtomStringImpl *)v76, v77, v78, v79, v80, v81, v82);
  }
  return v61;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const*,char const(&)[21]>(uint64_t a1, const char **a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Cannot declare ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " named 'constructor'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

const char *JSC::stringArticleForFunctionMode(unsigned int a1)
{
  if (a1 > 0x14)
    goto LABEL_6;
  if (((1 << a1) & 0x38FC0) != 0)
    return "an ";
  if (((1 << a1) & 0x4003F) == 0)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x197E8D99CLL);
  }
  return "a ";
}

BOOL JSC::VariableEnvironment::declareStaticPrivateMethod(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (a2)
    *(_DWORD *)a2 += 2;
  v20 = a2;
  v9 = JSC::VariableEnvironment::declarePrivateMethod(a1, &v20, 9);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v9;
}

uint64_t JSC::Scope::declarePrivateAccessor(uint64_t a1, WTF::StringImpl *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int16 v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v8 = a1 + 144;
  if ((_DWORD)a4)
  {
    if (a3 == 2)
    {
      if (a2)
        *(_DWORD *)a2 += 2;
      v28 = a2;
      v9 = 10;
    }
    else
    {
      if (a2)
        *(_DWORD *)a2 += 2;
      v28 = a2;
      v9 = 2;
    }
  }
  else if (a3 == 2)
  {
    if (a2)
      *(_DWORD *)a2 += 2;
    v28 = a2;
    v9 = 12;
  }
  else
  {
    if (a2)
      *(_DWORD *)a2 += 2;
    v28 = a2;
    v9 = 4;
  }
  v17 = JSC::VariableEnvironment::declarePrivateAccessor(v8, &v28, v9, a4, a5, a6, a7, a8);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (v17 == 2)
    return 4;
  else
    return 2 * (v17 == 1);
}

uint64_t WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = (*(_QWORD *)result)++;
  v5 = v4 >> 6;
  v6 = *(unsigned int *)(result + 20);
  if (v4 >> 6 >= v6)
  {
    v9 = (_QWORD *)(result + 8);
    result = WTF::fastMalloc((WTF *)0x200);
    v11 = result;
    v10 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v10 == *(_DWORD *)(v3 + 16))
    {
      result = WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 8, v10 + 1, (unint64_t)&v11);
      v10 = *(unsigned int *)(v3 + 20);
      *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*v9 + 8 * v10) = result;
    }
    v6 = (v10 + 1);
    *(_DWORD *)(v3 + 20) = v6;
    v4 = *(_QWORD *)v3 - 1;
    v5 = v4 >> 6;
  }
  if (v5 >= v6)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v5);
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)(v7 + 8 * (v4 & 0x3F)) = v8;
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[77],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a function that shadows a let/const/class/function variable '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[84],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare an async function that shadows a let/const/class/function variable '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  _BYTE v38[24];
  WTF *v39;
  int v40;

  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
    goto LABEL_28;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[89]>(a1);
    return 0;
  }
  if ((a3 & 1) == 0)
  {
    v28 = *(_DWORD *)(a1 + 7368);
    if (v28 == 20 || (v28 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[96]>(a1);
    }
    return 0;
  }
  v6 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8E130);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) |= 0x8080u;
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197E8E128);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) &= ~0x40u;
  v13 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::SyntaxChecker>(a1, a2, 1, v8, v9, v10, v11, v12);
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_20:
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v38, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
    v37 = v39;
    if (v39)
    {
      v39 = 0;
      v40 = 0;
      WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v38, (WTF::AtomStringImpl *)v30, v31, v32, v33, v34, v35, v36);
    return 0;
  }
  if (!v13)
  {
    v29 = *(_DWORD *)(a1 + 7368);
    if (v29 == 20 || (v29 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected valid function statement after 'function' keyword");
    goto LABEL_20;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v38, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
  v26 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v38, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseIfStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v50;
  unsigned int v51;
  char v52;
  unsigned int *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _OWORD *v91;
  int v92;
  uint64_t v93;
  int *v94;
  WTF *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  int *v99;
  WTF *v100;
  int v101;
  int v102;
  int v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  unsigned int v107;
  _DWORD *v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  __int128 v116;
  WTF *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_138;
  }
  v15 = (int *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
      return 0;
    }
    goto LABEL_15;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8E9F4);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  v28 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v33 = *(_DWORD *)(a1 + 7368);
  if (!v28)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
      return 0;
    }
    goto LABEL_15;
  }
  if (v33 != 3)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
      return 0;
    }
    goto LABEL_15;
  }
  v34 = *(_DWORD *)(a1 + 7400);
  v35 = *(_DWORD *)(a1 + 7412);
  v36 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v34;
  *(_DWORD *)(a1 + 7448) = v35;
  *(_DWORD *)(a1 + 7452) = v36;
  v37 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v37 + 4) = v34;
  v38 = *(_DWORD *)(a1 + 12);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8E9FCLL);
  }
  v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
  *(_BYTE *)(v37 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
  v125 = 0;
  v40 = (_BYTE *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 1;
  v41 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v125);
  v46 = *(_DWORD *)(a1 + 7368);
  if (!v41)
  {
    if (v46 != 20 && (v46 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
      return 0;
    }
LABEL_15:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  if (v46 != 538)
    return 43;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v123 = 0;
  v124 = 0;
  v53 = (unsigned int *)(a1 + 7400);
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  while (1)
  {
    v116 = *(_OWORD *)v53;
    v54 = *(_DWORD *)(a1 + 7400);
    v55 = *(_DWORD *)(a1 + 7412);
    v56 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v54;
    *(_DWORD *)(a1 + 7448) = v55;
    *(_DWORD *)(a1 + 7452) = v56;
    v57 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v57 + 4) = v54;
    v58 = *(_DWORD *)(a1 + 12);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8EA0CLL);
    }
    v59 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1;
    *(_BYTE *)(v57 + 56) = 0;
    v60 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v57, a1 + 7368, 0, v59, v42, v43, v44, v45);
    *(_DWORD *)(a1 + 7368) = v60;
    if (v60 != 525)
    {
      v115 = 0;
      *v40 = 1;
      LODWORD(v112) = 0;
      v65 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v115);
      LODWORD(v112) = v65;
      if (v65)
      {
        if (HIDWORD(v118) == (_DWORD)v118)
        {
          v69 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, HIDWORD(v118) + 1, (unint64_t)&v112);
          *((_DWORD *)v117 + HIDWORD(v118)) = *v69;
        }
        else
        {
          *((_DWORD *)v117 + HIDWORD(v118)) = v65;
        }
        ++HIDWORD(v118);
        v70 = 54;
        v52 = 1;
        goto LABEL_28;
      }
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v70 = 1;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an else block");
          goto LABEL_28;
        }
        goto LABEL_113;
      }
LABEL_112:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_113:
      v70 = 1;
      goto LABEL_28;
    }
    v71 = *(unsigned int *)(a1 + 7400);
    v72 = *(_DWORD *)(a1 + 7412);
    v73 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v71;
    *(_DWORD *)(a1 + 7448) = v72;
    *(_DWORD *)(a1 + 7452) = v73;
    v74 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v74 + 4) = v71;
    v75 = *(_DWORD *)(a1 + 12);
    if (!v75)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8EA14);
    }
    v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
    *(_BYTE *)(v74 + 56) = 0;
    v77 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v74, a1 + 7368, 0, v76, v61, v62, v63, v64);
    *(_DWORD *)(a1 + 7368) = v77;
    if (v77 != 2)
      break;
    v78 = *(_DWORD *)(a1 + 7400);
    v79 = *(_DWORD *)(a1 + 7412);
    v80 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v78;
    *(_DWORD *)(a1 + 7448) = v79;
    *(_DWORD *)(a1 + 7452) = v80;
    v81 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v81 + 4) = v78;
    v82 = *(_DWORD *)(a1 + 12);
    if (!v82)
    {
      __break(0xC471u);
      JUMPOUT(0x197E8EA1CLL);
    }
    v83 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v82 - 1) + 9) & 1;
    *(_BYTE *)(v81 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v81, a1 + 7368, 0, v83, v42, v43, v44, v45);
    v114 = 0;
    v114 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    if (!v114)
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v70 = 1;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
          goto LABEL_28;
        }
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    v84 = *v15;
    if (*v15 == 3)
    {
      v85 = *v53;
      v86 = *(_DWORD *)(a1 + 7412);
      v87 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v85;
      *(_DWORD *)(a1 + 7448) = v86;
      *(_DWORD *)(a1 + 7452) = v87;
      v88 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v88 + 4) = v85;
      v89 = *(_DWORD *)(a1 + 12);
      if (!v89)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8EA04);
      }
      v90 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1;
      *(_BYTE *)(v88 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v88, a1 + 7368, 0, v90, v42, v43, v44, v45);
      v115 = 0;
      *v40 = 1;
      v113 = 0;
      v113 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v115);
      if (!v113)
      {
        if (*v15 != 20 && (*v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v70 = 1;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
            goto LABEL_28;
          }
          goto LABEL_113;
        }
        goto LABEL_112;
      }
      if (v51 == (_DWORD)v120)
      {
        v91 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, v51 + 1, (unint64_t)&v116);
        v92 = HIDWORD(v120);
        v50 = v119;
        *(_OWORD *)(v119 + 16 * HIDWORD(v120)) = *v91;
      }
      else
      {
        *(_OWORD *)(v50 + 16 * v51) = v116;
        v92 = HIDWORD(v120);
      }
      v51 = v92 + 1;
      HIDWORD(v120) = v92 + 1;
      v93 = HIDWORD(v124);
      if (HIDWORD(v124) == (_DWORD)v124)
      {
        v94 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v123, HIDWORD(v124) + 1, (unint64_t)&v114);
        v93 = HIDWORD(v124);
        v95 = v123;
        v96 = *v94;
      }
      else
      {
        v95 = v123;
        v96 = v114;
      }
      *((_DWORD *)v95 + v93) = v96;
      ++HIDWORD(v124);
      v112 = v71 | (v85 << 32);
      if (HIDWORD(v122) == (_DWORD)v122)
      {
        v97 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, HIDWORD(v122) + 1, (unint64_t)&v112);
        *((_QWORD *)v121 + HIDWORD(v122)) = *v97;
      }
      else
      {
        *((_QWORD *)v121 + HIDWORD(v122)) = v71 | (v85 << 32);
      }
      ++HIDWORD(v122);
      v98 = HIDWORD(v118);
      if (HIDWORD(v118) == (_DWORD)v118)
      {
        v99 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, HIDWORD(v118) + 1, (unint64_t)&v113);
        v70 = 0;
        v98 = HIDWORD(v118);
        v100 = v117;
        v101 = *v99;
      }
      else
      {
        v70 = 0;
        v100 = v117;
        v101 = v113;
      }
      *((_DWORD *)v100 + v98) = v101;
      ++HIDWORD(v118);
    }
    else
    {
      if (v84 == 20 || (v84 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
      }
      v70 = 1;
    }
LABEL_28:
    if (v70)
    {
      if (v70 != 54)
        goto LABEL_97;
LABEL_55:
      v102 = HIDWORD(v124);
      if ((v52 & 1) != 0)
      {
        v103 = HIDWORD(v118);
      }
      else
      {
        if (!HIDWORD(v124))
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA2CLL);
        }
        --HIDWORD(v124);
        v66 = HIDWORD(v118);
        if (!HIDWORD(v118))
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA34);
        }
        v107 = --HIDWORD(v118);
        if (!HIDWORD(v122))
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA3CLL);
        }
        --HIDWORD(v122);
        if (!v51)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA44);
        }
        HIDWORD(v120) = --v51;
        LODWORD(v116) = 43;
        if (v107 == (_DWORD)v118)
        {
          v108 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, v66, (unint64_t)&v116);
          *((_DWORD *)v117 + HIDWORD(v118)) = *v108;
        }
        else
        {
          *((_DWORD *)v117 + v107) = 43;
        }
        v103 = ++HIDWORD(v118);
        v102 = HIDWORD(v124);
      }
      if (!v102)
      {
LABEL_58:
        if (!v103)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA24);
        }
        v47 = 43;
        goto LABEL_60;
      }
      while (1)
      {
        HIDWORD(v124) = v102 - 1;
        if (!v103)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA4CLL);
        }
        HIDWORD(v118) = v103 - 1;
        if (v103 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA54);
        }
        v109 = (v103 - 2);
        HIDWORD(v118) = v109;
        if (!HIDWORD(v122))
        {
          __break(0xC471u);
          JUMPOUT(0x197E8EA5CLL);
        }
        --HIDWORD(v122);
        if (!v51)
          break;
        LODWORD(v116) = 43;
        if ((_DWORD)v109 == (_DWORD)v118)
        {
          v110 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, v109 + 1, (unint64_t)&v116);
          *((_DWORD *)v117 + HIDWORD(v118)) = *v110;
        }
        else
        {
          *((_DWORD *)v117 + v109) = 43;
        }
        v103 = ++HIDWORD(v118);
        v102 = HIDWORD(v124);
        --v51;
        if (!HIDWORD(v124))
        {
          HIDWORD(v120) = v51;
          goto LABEL_58;
        }
      }
      __break(0xC471u);
LABEL_138:
      JUMPOUT(0x197E8E9ECLL);
    }
    if (*v15 != 538)
      goto LABEL_55;
  }
  if (v77 != 20 && (v77 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
  }
  else
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
LABEL_97:
  v47 = 0;
LABEL_60:
  v104 = v117;
  if (v117)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v104, (void *)v66, v67, v68, v42, v43, v44, v45);
  }
  if (v50)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v50, (void *)v66, v67, v68, v42, v43, v44, v45);
  }
  v105 = v121;
  if (v121)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    WTF::fastFree((unint64_t)v105, (void *)v66, v67, v68, v42, v43, v44, v45);
  }
  v106 = v123;
  if (v123)
  {
    v123 = 0;
    LODWORD(v124) = 0;
    WTF::fastFree((unint64_t)v106, (void *)v66, v67, v68, v42, v43, v44, v45);
  }
  return v47;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseDoWhileStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v69;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  v69 = 0;
  v16 = *(_DWORD *)(a1 + 12);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8EDCCLL);
  }
  v17 = *(_QWORD *)a1 + 720 * (v16 - 1);
  ++*(_DWORD *)(v17 + 24);
  v18 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v69);
  v23 = *(_DWORD *)(a1 + 12);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8EDD4);
  }
  v24 = v23 - 1;
  v25 = *(_QWORD *)a1;
  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v24 + 24);
  v26 = *(_DWORD *)(a1 + 7368);
  if (!v18)
  {
    if (v26 != 20 && (v26 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement following 'do'");
      return 0;
    }
    goto LABEL_25;
  }
  if (v26 != 528)
  {
    if (v26 != 20 && (v26 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1);
      return 0;
    }
    goto LABEL_25;
  }
  v27 = *(_DWORD *)(a1 + 7400);
  v28 = *(_DWORD *)(a1 + 7412);
  v29 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v27;
  *(_DWORD *)(a1 + 7448) = v28;
  *(_DWORD *)(a1 + 7452) = v29;
  v30 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v30 + 4) = v27;
  v31 = *(_BYTE *)(v25 + 720 * v24 + 9) & 1;
  *(_BYTE *)(v30 + 56) = 0;
  v32 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v30, a1 + 7368, 0, v31, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 7368) = v32;
  if (v32 != 2)
  {
    if (v32 != 20 && (v32 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(a1);
      return 0;
    }
    goto LABEL_25;
  }
  v37 = *(_DWORD *)(a1 + 7400);
  v38 = *(_DWORD *)(a1 + 7412);
  v39 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v37;
  *(_DWORD *)(a1 + 7448) = v38;
  *(_DWORD *)(a1 + 7452) = v39;
  v40 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v40 + 4) = v37;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8EDDCLL);
  }
  v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
  *(_BYTE *)(v40 + 56) = 0;
  v43 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v40, a1 + 7368, 0, v42, v33, v34, v35, v36);
  *(_DWORD *)(a1 + 7368) = v43;
  if (v43 == 3)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a do-while loop condition");
    return 0;
  }
  v44 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v49 = *(_DWORD *)(a1 + 7368);
  if (!v44)
  {
    if (v49 != 20 && (v49 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unable to parse do-while loop condition");
      return 0;
    }
    goto LABEL_25;
  }
  if (v49 != 3)
  {
    if (v49 != 20 && (v49 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(a1);
      return 0;
    }
LABEL_25:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v50 = *(_DWORD *)(a1 + 7400);
  v51 = *(_DWORD *)(a1 + 7412);
  v52 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v50;
  *(_DWORD *)(a1 + 7448) = v51;
  *(_DWORD *)(a1 + 7452) = v52;
  v53 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v53 + 4) = v50;
  v54 = *(_DWORD *)(a1 + 12);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8EDE4);
  }
  v55 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1;
  *(_BYTE *)(v53 + 56) = 0;
  v56 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v53, a1 + 7368, 0, v55, v45, v46, v47, v48);
  *(_DWORD *)(a1 + 7368) = v56;
  if (v56 != 17)
    return 43;
  v61 = *(_DWORD *)(a1 + 7400);
  v62 = *(_DWORD *)(a1 + 7412);
  v63 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v61;
  *(_DWORD *)(a1 + 7448) = v62;
  *(_DWORD *)(a1 + 7452) = v63;
  v64 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v64 + 4) = v61;
  v65 = *(_DWORD *)(a1 + 12);
  if (!v65)
  {
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x197E8EDC4);
  }
  v66 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v65 - 1) + 9) & 1;
  *(_BYTE *)(v64 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v64, a1 + 7368, 0, v66, v57, v58, v59, v60);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseWhileStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v48;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(a1);
      return 0;
    }
    goto LABEL_17;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8F09CLL);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  v28 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  *(_DWORD *)(a1 + 7368) = v28;
  if (v28 == 3)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a while loop condition");
    return 0;
  }
  v29 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v34 = *(_DWORD *)(a1 + 7368);
  if (!v29)
  {
    if (v34 != 20 && (v34 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unable to parse while loop condition");
      return 0;
    }
    goto LABEL_17;
  }
  if (v34 != 3)
  {
    if (v34 != 20 && (v34 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, ")", "while loop condition");
      return 0;
    }
    goto LABEL_17;
  }
  v35 = *(_DWORD *)(a1 + 7400);
  v36 = *(_DWORD *)(a1 + 7412);
  v37 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v35;
  *(_DWORD *)(a1 + 7448) = v36;
  *(_DWORD *)(a1 + 7452) = v37;
  v38 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v38 + 4) = v35;
  v39 = *(_DWORD *)(a1 + 12);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8F0A4);
  }
  v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
  *(_BYTE *)(v38 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, v30, v31, v32, v33);
  v48 = 0;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197E8F0ACLL);
  }
  v42 = *(_QWORD *)a1 + 720 * (v41 - 1);
  ++*(_DWORD *)(v42 + 24);
  v43 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v48);
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197E8F094);
  }
  v45 = *(_QWORD *)a1 + 720 * (v44 - 1);
  --*(_DWORD *)(v45 + 24);
  if (!v43)
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a while loop");
      return 0;
    }
LABEL_17:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  JSC::VariableEnvironment *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  char v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  BOOL v131;
  const char *v132;
  const char *v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  int *v152;
  const char *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  const char *v181;
  const char *v182;
  uint64_t *v183;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  char v199;
  int v200;
  int v201;
  char v202;
  char v203;
  int v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  int v208[3];
  _QWORD v209[2];
  uint64_t v210;
  _QWORD v211[4];
  uint64_t v212;
  int v213;
  uint64_t *v214;
  char v215;
  BOOL v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  unint64_t v222;
  int v223;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90108);
  }
  v15 = (char *)(a1 + 7344);
  v16 = (int *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v23 = v18;
  *(_DWORD *)(a1 + 7368) = v18;
  v24 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v24 + 1;
  if (v18 == 546)
  {
    v141 = *(_DWORD *)(a1 + 12);
    if (!v141)
    {
      __break(0xC471u);
      JUMPOUT(0x197E901A0);
    }
    v142 = v141 - 1;
    v143 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v142 + 11) & 0x20) == 0 && ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "for-await-of can only be used in an async function or async generator");
      goto LABEL_72;
    }
    v144 = *(_DWORD *)(a1 + 7400);
    v145 = *(_DWORD *)(a1 + 7412);
    v146 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v144;
    *(_DWORD *)(a1 + 7448) = v145;
    *(_DWORD *)(a1 + 7452) = v146;
    v147 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v147 + 4) = v144;
    v148 = *(_BYTE *)(v143 + 720 * v142 + 9) & 1;
    *(_BYTE *)(v147 + 56) = 0;
    v18 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v147, a1 + 7368, 0, v148, v19, v20, v21, v22);
    *(_DWORD *)(a1 + 7368) = v18;
  }
  if (v18 != 2)
  {
    if (v18 != 20 && (v18 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(a1);
    }
    else
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
LABEL_72:
    v80 = 0;
    goto LABEL_214;
  }
  v25 = *(_DWORD *)(a1 + 7400);
  v26 = *(_DWORD *)(a1 + 7412);
  v27 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v25;
  *(_DWORD *)(a1 + 7448) = v26;
  *(_DWORD *)(a1 + 7452) = v27;
  v28 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v28 + 4) = v25;
  v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90110);
  }
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
  *(_BYTE *)(v28 + 56) = 0;
  v31 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, v19, v20, v21, v22);
  v37 = v31;
  *(_DWORD *)(a1 + 7368) = v31;
  v38 = *(_DWORD *)(a1 + 7300);
  v218 = *(_QWORD *)(a1 + 7416);
  v219 = *(unsigned int *)(a1 + 7424);
  v217 = v31 == 544;
  v216 = v31 == 521;
  v215 = 0;
  v211[3] = a1;
  v212 = 0;
  v213 = -1;
  v214 = 0;
  v211[0] = &v217;
  v211[1] = &v216;
  v211[2] = &v212;
  if ((v31 == 521) != ((v31 == 544) ^ (v31 == 520)))
  {
    if ((v31 == 521) != (v31 == 544))
    {
      v44 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
      if (*(_DWORD *)(v44 + 12) <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90150);
      }
      *(_DWORD *)(*(_QWORD *)v44 + 720 * v45 + 10) |= 0x8080u;
      if (*(_DWORD *)(v44 + 12) <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90158);
      }
      *(_DWORD *)(*(_QWORD *)v44 + 720 * v45 + 10) &= ~0x40u;
      if (*(_DWORD *)(v44 + 12) <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90160);
      }
      if ((*(_BYTE *)(*(_QWORD *)v44 + 720 * v45 + 11) & 0x80) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197E8FACCLL);
      }
      v212 = v44;
      v213 = v45;
      v214 = (uint64_t *)a1;
    }
    v39 = 0;
    v210 = 0;
    *(_BYTE *)(a1 + 7440) = 0;
    LODWORD(v209[0]) = -1;
    v208[0] = -1;
    if (v37 != 520)
    {
      if (v217)
      {
        v39 = 1;
      }
      else
      {
        if (!v216)
        {
          __break(0xC471u);
          JUMPOUT(0x197E8FD54);
        }
        v39 = 2;
      }
    }
    if (!*(_DWORD *)(a1 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197E90118);
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::SyntaxChecker>(a1, a2, (_DWORD *)&v219 + 1, (_DWORD *)&v210 + 1, &v210, (uint64_t)&v218, (uint64_t)v209, (uint64_t)v208, 0, v39, &v215);
    v40 = *(_DWORD *)(a1 + 12);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90120);
    }
    v41 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 7440) = 1;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_212;
    v42 = *v16;
    if (*v16 != 17)
    {
      if (HIDWORD(v219) != 1)
      {
        if (v42 != 20 && (v42 & 0x100000) == 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "can only declare a single variable in an enumeration");
          goto LABEL_212;
        }
        goto LABEL_211;
      }
      v43 = v40 - 1;
      if (v42 != 131589)
      {
        if (v42 == 12
          && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
          && !*(_BYTE *)(a1 + 7384))
        {
          v136 = *(_DWORD *)(a1 + 7400);
          v137 = *(_DWORD *)(a1 + 7412);
          v138 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v136;
          *(_DWORD *)(a1 + 7448) = v137;
          *(_DWORD *)(a1 + 7452) = v138;
          v139 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v139 + 4) = v136;
          v140 = *(_BYTE *)(v41 + 720 * v43 + 9) & 1;
          *(_BYTE *)(v139 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v139, a1 + 7368, 0, v140, v33, v34, v35, v36);
          if (!(_DWORD)v210)
          {
            LODWORD(v220) = 0;
            *((_QWORD *)&v220 + 1) = *(_QWORD *)(a1 + 7496);
            v221 = a1;
            *(_QWORD *)(a1 + 7496) = &v220;
            v95 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v220);
            *(_QWORD *)(v221 + 7496) = *((_QWORD *)&v220 + 1);
LABEL_61:
            v96 = *v16;
            if (v95)
            {
              if (v96 == 3)
              {
                v97 = *(_DWORD *)(a1 + 7400);
                v98 = *(_DWORD *)(a1 + 7412);
                v99 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v97;
                *(_DWORD *)(a1 + 7448) = v98;
                *(_DWORD *)(a1 + 7452) = v99;
                v100 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v100 + 4) = v97;
                v101 = *(_DWORD *)(a1 + 12);
                if (!v101)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E90168);
                }
                v102 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v101 - 1) + 9) & 1;
                *(_BYTE *)(v100 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v100, a1 + 7368, 0, v102, v33, v34, v35, v36);
                v207 = 0;
                v103 = *(_DWORD *)(a1 + 12);
                if (!v103)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E90170);
                }
                v104 = *(_QWORD *)a1 + 720 * (v103 - 1);
                ++*(_DWORD *)(v104 + 24);
                v105 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v207);
                v106 = *(_DWORD *)(a1 + 12);
                if (!v106)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E90178);
                }
                v107 = *(_QWORD *)a1 + 720 * (v106 - 1);
                --*(_DWORD *)(v107 + 24);
                if (v105)
                {
                  if (v217 || v216)
                  {
                    if (!v214)
                    {
                      __break(0xC471u);
                      goto LABEL_248;
                    }
                    goto LABEL_50;
                  }
                  goto LABEL_46;
                }
                if (*v16 != 20 && (*v16 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    if (v42 == 131589)
                      v182 = "in";
                    else
                      v182 = "of";
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(a1, v182);
                  }
                  goto LABEL_212;
                }
                goto LABEL_211;
              }
              if (v96 != 20 && (v96 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v131 = v42 == 131589;
LABEL_103:
                  if (v131)
                    v132 = "for-in header";
                  else
                    v132 = "for-of header";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v132);
                  goto LABEL_212;
                }
                goto LABEL_212;
              }
            }
            else if (v96 != 20 && (v96 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected expression to enumerate");
              goto LABEL_212;
            }
LABEL_211:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_212;
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_212;
          v181 = "Cannot assign to the loop variable inside a for-of loop header";
          goto LABEL_203;
        }
        if (v42 == 20 || (v42 & 0x100000) != 0)
          goto LABEL_211;
LABEL_18:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected either 'in' or 'of' in enumeration syntax");
        goto LABEL_212;
      }
      if (v23 != 546)
      {
        v90 = *(_DWORD *)(a1 + 7400);
        v91 = *(_DWORD *)(a1 + 7412);
        v92 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v90;
        *(_DWORD *)(a1 + 7448) = v91;
        *(_DWORD *)(a1 + 7452) = v92;
        v93 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v93 + 4) = v90;
        v94 = *(_BYTE *)(v41 + 720 * v43 + 9) & 1;
        *(_BYTE *)(v93 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v93, a1 + 7368, 0, v94, v33, v34, v35, v36);
        if (!(_DWORD)v210)
          goto LABEL_60;
        v180 = *(_DWORD *)(a1 + 12);
        if (!v180)
        {
          __break(0xC471u);
          JUMPOUT(0x197E901B0);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v180 - 1) + 9) & 1) == 0
          && !v217
          && !v216
          && HIDWORD(v210) == 31)
        {
LABEL_60:
          v95 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
          goto LABEL_61;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_212;
        v181 = "Cannot assign to the loop variable inside a for-in loop header";
LABEL_203:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, v181);
        goto LABEL_212;
      }
LABEL_161:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected 'of' in for-await syntax");
      goto LABEL_212;
    }
LABEL_31:
    if (v23 == 546)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unexpected a ';' in for-await-of header");
      goto LABEL_212;
    }
    v48 = *(_DWORD *)(a1 + 7400);
    v49 = *(_DWORD *)(a1 + 7412);
    v50 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v48;
    *(_DWORD *)(a1 + 7448) = v49;
    *(_DWORD *)(a1 + 7452) = v50;
    v51 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v51 + 4) = v48;
    v52 = *(_DWORD *)(a1 + 12);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90128);
    }
    v53 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v52 - 1) + 9) & 1;
    *(_BYTE *)(v51 + 56) = 0;
    v54 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v51, a1 + 7368, 0, v53, v33, v34, v35, v36);
    *(_DWORD *)(a1 + 7368) = v54;
    if (v215 && v216)
    {
      if (v54 != 20 && (v54 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "const variables in for loops must have initializers");
        goto LABEL_212;
      }
      goto LABEL_211;
    }
    if (v54 != 17)
    {
      v55 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
      v56 = *(_DWORD *)(a1 + 7368);
      if (!v55)
      {
        if (v56 == 20 || (v56 & 0x100000) != 0)
          goto LABEL_211;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_212;
        v133 = "Cannot parse for loop condition expression";
LABEL_153:
        v134 = a1;
        v135 = 1;
        goto LABEL_111;
      }
      if (v56 != 17)
      {
        if (v56 != 20 && (v56 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after the for loop condition expression");
          goto LABEL_212;
        }
        goto LABEL_211;
      }
    }
    v57 = *(_DWORD *)(a1 + 7400);
    v58 = *(_DWORD *)(a1 + 7412);
    v59 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v57;
    *(_DWORD *)(a1 + 7448) = v58;
    *(_DWORD *)(a1 + 7452) = v59;
    v60 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v60 + 4) = v57;
    v61 = *(_DWORD *)(a1 + 12);
    if (!v61)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90130);
    }
    v62 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1;
    *(_BYTE *)(v60 + 56) = 0;
    v63 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v60, a1 + 7368, 0, v62, v33, v34, v35, v36);
    *(_DWORD *)(a1 + 7368) = v63;
    if (v63 == 3)
      goto LABEL_41;
    v64 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v65 = *(_DWORD *)(a1 + 7368);
    if (v64)
    {
      if (v65 != 3)
      {
        if (v65 != 20 && (v65 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(a1);
          goto LABEL_212;
        }
        goto LABEL_211;
      }
LABEL_41:
      v66 = *(_DWORD *)(a1 + 7400);
      v67 = *(_DWORD *)(a1 + 7412);
      v68 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v66;
      *(_DWORD *)(a1 + 7448) = v67;
      *(_DWORD *)(a1 + 7452) = v68;
      v69 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v69 + 4) = v66;
      v70 = *(_DWORD *)(a1 + 12);
      if (!v70)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90138);
      }
      v71 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v70 - 1) + 9) & 1;
      *(_BYTE *)(v69 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v69, a1 + 7368, 0, v71, v33, v34, v35, v36);
      v209[0] = 0;
      v72 = *(_DWORD *)(a1 + 12);
      if (!v72)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90140);
      }
      v73 = *(_QWORD *)a1 + 720 * (v72 - 1);
      ++*(_DWORD *)(v73 + 24);
      v74 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, v209);
      v77 = *(_DWORD *)(a1 + 12);
      if (!v77)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90148);
      }
      v78 = *(_QWORD *)a1 + 720 * (v77 - 1);
      --*(_DWORD *)(v78 + 24);
      if (v74)
      {
        if (v217 || v216)
        {
          if (!v214)
          {
            __break(0xC471u);
            JUMPOUT(0x197E8FB94);
          }
LABEL_50:
          v214 = 0;
          JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v220, (uint64_t *)a1, 0, v32, v33, v34, v35, v36);
          JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)&v205, (const JSC::VariableEnvironment *)&v220);
          v88 = v222;
          if (v222)
          {
            v222 = 0;
            v223 = 0;
            WTF::fastFree(v88, v81, v82, v83, v84, v85, v86, v87);
          }
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v220, (WTF::AtomStringImpl *)v81, v82, v83, v84, v85, v86, v87);
          goto LABEL_47;
        }
LABEL_46:
        *(_QWORD *)&v205 = 0;
        BYTE8(v205) = 0;
        v206 = 0;
LABEL_47:
        v79 = (JSC::VariableEnvironment *)&v205;
LABEL_48:
        JSC::VariableEnvironment::~VariableEnvironment(v79, v75, v76, v32, v33, v34, v35, v36);
        v80 = 43;
        goto LABEL_213;
      }
      if (*v16 != 20 && (*v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a for loop");
        goto LABEL_212;
      }
      goto LABEL_211;
    }
    if (v65 == 20 || (v65 & 0x100000) != 0)
      goto LABEL_211;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_212;
    v133 = "Cannot parse for loop iteration expression";
    goto LABEL_153;
  }
  if (v31 == 17)
    goto LABEL_31;
  if (!v31 || v31 == 4)
  {
    v205 = *(_OWORD *)(a1 + 7296);
    v149 = *(_DWORD *)(a1 + 7316);
    v221 = *(_QWORD *)(a1 + 7336);
    v220 = *(_OWORD *)(a1 + 7320);
    v203 = *v15;
    v204 = v149;
    v150 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v151 = *(unsigned int *)(a1 + 7404);
    v152 = *(int **)(a1 + 7288);
    v201 = v152[1];
    v202 = *(_BYTE *)(a1 + 7345);
    v199 = *((_BYTE *)v152 + 56);
    v200 = *v152;
    if (JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(a1, a2))
    {
      v47 = *v16;
      if (*v16 == 131589
        || v47 == 12
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
        && !*(_BYTE *)(a1 + 7384))
      {
        v109 = 0;
        v108 = 0;
        v15 = (char *)(a1 + 7344);
        goto LABEL_82;
      }
    }
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v150, v151, v32, v33, v34, v35, v36);
    v159 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v159 = v200;
    *(_BYTE *)(v159 + 56) = v199;
    v160 = *(_DWORD *)(a1 + 7400);
    v161 = *(_DWORD *)(a1 + 7412);
    v162 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v160;
    *(_DWORD *)(a1 + 7448) = v161;
    *(_DWORD *)(a1 + 7452) = v162;
    *(_DWORD *)(v159 + 4) = v160;
    v163 = *(_DWORD *)(a1 + 12);
    if (!v163)
    {
      __break(0xC471u);
      JUMPOUT(0x197E901A8);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v159, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v163 - 1) + 9) & 1, v155, v156, v157, v158);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v201;
    *(_OWORD *)(a1 + 7296) = v205;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v204;
    *(_OWORD *)(a1 + 7320) = v220;
    *(_QWORD *)(a1 + 7336) = v221;
    *(_BYTE *)(a1 + 7344) = v203;
    *(_BYTE *)(a1 + 7345) = v202;
    v171 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v171)
    {
      if (*(_DWORD *)v171 == 2)
      {
        WTF::StringImpl::~StringImpl(v171, v164, v165, v166, v167, v168, v169, v170);
        WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
      }
      else
      {
        *(_DWORD *)v171 -= 2;
      }
    }
    v15 = (char *)(a1 + 7344);
  }
  v15[96] = 0;
  v46 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v15[96] = 1;
  v47 = *(_DWORD *)(a1 + 7368);
  if (!v46)
  {
    if (v47 != 20 && (v47 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse for loop declarations");
      goto LABEL_212;
    }
    goto LABEL_211;
  }
  if (v47 == 17)
    goto LABEL_31;
  v108 = v46;
  v109 = 1;
LABEL_82:
  if (v38 != *(_DWORD *)(a1 + 7300))
  {
    if (v47 != 20 && (v47 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[71]>(a1);
      goto LABEL_212;
    }
    goto LABEL_211;
  }
  if (v47 == 131589)
  {
    if (v23 == 546)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_212;
      goto LABEL_161;
    }
    v110 = *(_DWORD *)(a1 + 7400);
    v111 = *(_DWORD *)(a1 + 7412);
    v112 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v110;
    *(_DWORD *)(a1 + 7448) = v111;
    *(_DWORD *)(a1 + 7452) = v112;
    v113 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v113 + 4) = v110;
    v114 = *(_DWORD *)(a1 + 12);
    if (!v114)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90180);
    }
    v115 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v114 - 1) + 9) & 1;
    *(_BYTE *)(v113 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v113, a1 + 7368, 0, v115, v33, v34, v35, v36);
    v116 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  }
  else
  {
    if (v47 != 12
      || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
      || v15[40])
    {
      if (v47 == 20 || (v47 & 0x100000) != 0)
        goto LABEL_211;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_212;
      goto LABEL_18;
    }
    v193 = *(_DWORD *)(a1 + 7400);
    v194 = *(_DWORD *)(a1 + 7412);
    v195 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v193;
    *(_DWORD *)(a1 + 7448) = v194;
    *(_DWORD *)(a1 + 7452) = v195;
    v196 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v196 + 4) = v193;
    v197 = *(_DWORD *)(a1 + 12);
    if (!v197)
    {
      __break(0xC471u);
LABEL_248:
      JUMPOUT(0x197E8F784);
    }
    v198 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v197 - 1) + 9) & 1;
    *(_BYTE *)(v196 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v196, a1 + 7368, 0, v198, v33, v34, v35, v36);
    v116 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
  }
  v117 = *v16;
  if (!v116)
  {
    if (v117 != 20 && (v117 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        if (v47 == 131589)
          v153 = "in";
        else
          v153 = "of";
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(a1, v153);
      }
      goto LABEL_212;
    }
    goto LABEL_211;
  }
  if (v117 == 3)
  {
    v118 = *(_DWORD *)(a1 + 7400);
    v119 = *(_DWORD *)(a1 + 7412);
    v120 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v118;
    *(_DWORD *)(a1 + 7448) = v119;
    *(_DWORD *)(a1 + 7452) = v120;
    v121 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v121 + 4) = v118;
    v122 = *(_DWORD *)(a1 + 12);
    if (!v122)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90188);
    }
    v123 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v122 - 1) + 9) & 1;
    *(_BYTE *)(v121 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v121, a1 + 7368, 0, v123, v33, v34, v35, v36);
    *(_QWORD *)&v205 = 0;
    v124 = *(_DWORD *)(a1 + 12);
    if (!v124)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90190);
    }
    v125 = *(_QWORD *)a1 + 720 * (v124 - 1);
    ++*(_DWORD *)(v125 + 24);
    v126 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v205);
    v128 = *(_DWORD *)(a1 + 12);
    if (!v128)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90198);
    }
    v129 = v128 - 1;
    v130 = *(_QWORD *)a1;
    --*(_DWORD *)(*(_QWORD *)a1 + 720 * v129 + 24);
    if (!v126)
    {
      if (*v16 != 20 && (*v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          if (v47 == 131589)
            v154 = "in";
          else
            v154 = "of";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(a1, v154);
        }
        goto LABEL_212;
      }
      goto LABEL_211;
    }
    if ((v109 & 1) == 0
      || v108 <= 0x19 && ((1 << v108) & 0x2030004) != 0
      || v108 == 18 && (*(_BYTE *)(v130 + 720 * v129 + 9) & 1) == 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::SyntaxChecker>(JSC::SyntaxChecker::Statement&)::{lambda(void)#1}::operator()((uint64_t)&v220, (uint64_t)v211, v127, v32, v33, v34, v35, v36);
      v79 = (JSC::VariableEnvironment *)&v220;
      goto LABEL_48;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_212;
    v133 = "Left side of assignment is not a reference";
    v134 = a1;
    v135 = 0;
LABEL_111:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v134, v135, v133);
    goto LABEL_212;
  }
  if (v117 == 20 || (v117 & 0x100000) != 0)
    goto LABEL_211;
  if (!*(_QWORD *)(a1 + 7360))
  {
    v131 = v47 == 131589;
    goto LABEL_103;
  }
LABEL_212:
  v80 = 0;
LABEL_213:
  v183 = v214;
  if (v214)
  {
    v214 = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v220, v183, 0, v32, v33, v34, v35, v36);
    v192 = v222;
    if (v222)
    {
      v222 = 0;
      v223 = 0;
      WTF::fastFree(v192, v185, v186, v187, v188, v189, v190, v191);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v220, (WTF::AtomStringImpl *)v185, v186, v187, v188, v189, v190, v191);
  }
LABEL_214:
  *(_DWORD *)(a1 + 7456) = v24;
  return v80;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseContinueStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  _BOOL4 v60;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  _BOOL4 IsValid;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90604);
  }
  v14 = (int *)(a1 + 7368);
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v16 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v16;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9060CLL);
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 10);
  if ((v23 & 0x100000) != 0)
  {
    IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::continueIsValid((uint64_t *)a1);
    v21 = *(_DWORD *)(a1 + 12);
    if (!v21)
      goto LABEL_82;
    v22 = *(_QWORD *)a1;
    v70 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 24);
    if (v70)
      v71 = 1;
    else
      v71 = IsValid;
    if (v71 != 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'continue' cannot cross static block boundary");
      return 0;
    }
    if (v70)
      v25 = IsValid;
    else
      v25 = 1;
    v24 = *v14;
  }
  else
  {
    v24 = v16;
    v25 = 0;
  }
  if (v24 == 17)
  {
    v52 = *(_DWORD *)(a1 + 7400);
    v53 = *(_DWORD *)(a1 + 7412);
    v54 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v52;
    *(_DWORD *)(a1 + 7448) = v53;
    *(_DWORD *)(a1 + 7452) = v54;
    v55 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v55 + 4) = v52;
    v56 = *(_BYTE *)(v22 + 720 * (v21 - 1) + 9) & 1;
    *(_BYTE *)(v55 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v55, a1 + 7368, 0, v56, v17, v18, v19, v20);
    v21 = *(_DWORD *)(a1 + 12);
    if (v21)
    {
      v22 = *(_QWORD *)a1;
LABEL_35:
      v57 = v21 - 1;
      v58 = v21 - 1;
      while (1)
      {
        v59 = *(_DWORD *)(v22 + 720 * v57 + 24);
        v60 = v59 != 0;
        if (!v58 || v59)
          break;
        if ((*(_BYTE *)(v22 + 720 * v57 + 12) & 0x60) != 0)
        {
          v60 = 0;
          break;
        }
        v58 = v57 - 1;
        v57 = (v57 - 1);
        if (v21 <= v58)
          goto LABEL_82;
      }
      if ((v23 & 0x100000) != 0)
        v72 = v25;
      else
        v72 = v60;
      if (!v72)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'continue' is only valid inside a loop statement");
        return 0;
      }
      return 43;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x197E90444);
  }
  v26 = v24 == 1 || v24 == 20;
  if (v26 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    goto LABEL_35;
  if (v24 != 12
    && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v24, *(_QWORD **)(a1 + 7376))
    && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
  {
    v68 = *v14;
    if (*v14 != 546)
    {
      if (v68 != 1048592)
      {
        if (v68 != 20 && (v68 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a continue statement");
          return 0;
        }
        goto LABEL_51;
      }
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
LABEL_51:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        return 0;
      }
    }
  }
  v27 = *(_DWORD *)(a1 + 12);
  if (!v27)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x197E90614);
  }
  v28 = *(uint64_t **)(a1 + 7376);
  v29 = v27 - 1;
  v30 = *(_QWORD *)a1;
  v31 = v27 - 1;
  v32 = v27 - 1;
  while (1)
  {
    v33 = *(_QWORD *)(v30 + 720 * v32 + 40);
    if (v33)
      break;
LABEL_15:
    if (!v31 || (*(_BYTE *)(v30 + 720 * v32 + 12) & 0x40) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v73 = *v28;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", &v73);
      }
      return 0;
    }
    v31 = v32 - 1;
    v32 = (v32 - 1);
    if (v27 <= v31)
      goto LABEL_75;
  }
  v34 = *(unsigned int *)(v33 + 12);
  v35 = 16 * v34;
  v36 = v34;
  do
  {
    if ((int)v36 < 1)
      goto LABEL_15;
    if (--v36 >= v34)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9061CLL);
    }
    v37 = v35 - 16;
    v38 = *(_QWORD *)v33;
    v39 = *(_QWORD *)(*(_QWORD *)v33 + v35 - 16);
    v40 = *v28;
    v35 -= 16;
  }
  while (v39 != *v28);
  if (!*(_BYTE *)(v38 + v37 + 8))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v73 = v39;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::UniquedStringImpl *,char const(&)[32]>(a1, &v73);
    }
    return 0;
  }
  v41 = *(_DWORD *)(a1 + 7400);
  v42 = *(_DWORD *)(a1 + 7412);
  v43 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v41;
  *(_DWORD *)(a1 + 7448) = v42;
  *(_DWORD *)(a1 + 7452) = v43;
  v44 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v44 + 4) = v41;
  v45 = *(_BYTE *)(v30 + 720 * v29 + 9) & 1;
  *(_BYTE *)(v44 + 56) = 0;
  v46 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v44, a1 + 7368, 0, v45, v38, v40, v19, v20);
  *(_DWORD *)(a1 + 7368) = v46;
  if (v46 == 17)
  {
    v62 = *(_DWORD *)(a1 + 7400);
    v63 = *(_DWORD *)(a1 + 7412);
    v64 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v62;
    *(_DWORD *)(a1 + 7448) = v63;
    *(_DWORD *)(a1 + 7452) = v64;
    v65 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v65 + 4) = v62;
    v66 = *(_DWORD *)(a1 + 12);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90624);
    }
    v67 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v66 - 1) + 9) & 1;
    *(_BYTE *)(v65 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v65, a1 + 7368, 0, v67, v47, v48, v49, v50);
  }
  else
  {
    v51 = v46 == 1 || v46 == 20;
    if (!v51 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    {
      if ((v46 & 0x100000) != 0)
        goto LABEL_51;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted continue statement");
      return 0;
    }
  }
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseBreakStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  char IsValid;
  int v64;
  BOOL v65;
  char v66;
  uint64_t v67;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90A88);
  }
  v14 = (int *)(a1 + 7368);
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a1 + 12);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90A90);
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 10);
  if ((v22 & 0x100000) != 0)
  {
    IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::breakIsValid((uint64_t *)a1);
    v20 = *(_DWORD *)(a1 + 12);
    if (!v20)
      goto LABEL_78;
    v23 = IsValid;
    v21 = *(_QWORD *)a1;
    if (!*(_DWORD *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 24))
    {
      v64 = *(_DWORD *)(v21 + 720 * (v20 - 1) + 28);
      v65 = v64 == 0;
      v66 = v64 ? 1 : IsValid;
      v23 = v65 ? 1 : IsValid;
      if ((v66 & 1) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'break' cannot cross static block boundary");
        return 0;
      }
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *v14;
  if (*v14 == 17)
  {
    v47 = *(_DWORD *)(a1 + 7400);
    v48 = *(_DWORD *)(a1 + 7412);
    v49 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v47;
    *(_DWORD *)(a1 + 7448) = v48;
    *(_DWORD *)(a1 + 7452) = v49;
    v50 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v50 + 4) = v47;
    v51 = *(_BYTE *)(v21 + 720 * (v20 - 1) + 9) & 1;
    *(_BYTE *)(v50 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v50, a1 + 7368, 0, v51, v16, v17, v18, v19);
    v20 = *(_DWORD *)(a1 + 12);
    if (v20)
    {
      v21 = *(_QWORD *)a1;
LABEL_32:
      v52 = v20 - 1;
      v53 = v20 - 1;
      while (1)
      {
        if (*(_DWORD *)(v21 + 720 * v52 + 24) || *(_DWORD *)(v21 + 720 * v52 + 28))
        {
          v54 = 1;
          goto LABEL_40;
        }
        if (!v53 || (*(_BYTE *)(v21 + 720 * v52 + 12) & 0x60) != 0)
          break;
        v53 = v52 - 1;
        v52 = (v52 - 1);
        if (v20 <= v53)
          goto LABEL_78;
      }
      v54 = 0;
LABEL_40:
      if ((v22 & 0x100000) != 0)
        v54 = v23;
      if ((v54 & 1) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'break' is only valid inside a switch or loop statement");
        return 0;
      }
      return 43;
    }
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x197E908D8);
  }
  if (v24 == 1 || v24 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    goto LABEL_32;
  if (v24 == 12
    || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v24, *(_QWORD **)(a1 + 7376))
    || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| (v62 = *v14, *v14 == 546))
  {
LABEL_10:
    v25 = *(_DWORD *)(a1 + 12);
    if (!v25)
    {
LABEL_71:
      __break(0xC471u);
      JUMPOUT(0x197E90A98);
    }
    v26 = *(uint64_t **)(a1 + 7376);
    v27 = v25 - 1;
    v28 = *(_QWORD *)a1;
    v29 = v25 - 1;
    v30 = v25 - 1;
    while (1)
    {
      v31 = *(_QWORD *)(v28 + 720 * v30 + 40);
      if (v31)
        break;
LABEL_13:
      if (!v29 || (*(_BYTE *)(v28 + 720 * v30 + 12) & 0x40) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v67 = *v26;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", &v67);
        }
        return 0;
      }
      v29 = v30 - 1;
      v30 = (v30 - 1);
      if (v25 <= v29)
        goto LABEL_71;
    }
    v32 = *(unsigned int *)(v31 + 12);
    v33 = 16 * v32 - 16;
    v34 = v32;
    do
    {
      if ((int)v34 < 1)
        goto LABEL_13;
      if (--v34 >= v32)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90AA0);
      }
      v35 = *(_QWORD *)(*(_QWORD *)v31 + v33);
      v33 -= 16;
    }
    while (v35 != *v26);
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    v39 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v39 + 4) = v36;
    v40 = *(_BYTE *)(v28 + 720 * v27 + 9) & 1;
    *(_BYTE *)(v39 + 56) = 0;
    v41 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, v40, v16, v17, v18, v19);
    *(_DWORD *)(a1 + 7368) = v41;
    if (v41 == 17)
    {
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      v59 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v59 + 4) = v56;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197E90AA8);
      }
      v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
      *(_BYTE *)(v59 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, v42, v43, v44, v45);
    }
    else
    {
      v46 = v41 == 1 || v41 == 20;
      if (!v46 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        if ((v41 & 0x100000) != 0)
          goto LABEL_54;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a ';' following a targeted break statement");
        return 0;
      }
    }
    return 43;
  }
  if (v62 == 1048592)
  {
    if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      goto LABEL_54;
    goto LABEL_10;
  }
  if (v62 != 20 && (v62 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a break statement");
    return 0;
  }
LABEL_54:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseWithStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v42;
  const char *v43;
  uint64_t v44;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
    goto LABEL_37;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v8 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'with' statements are not valid in strict mode");
    return 0;
  }
  *(_DWORD *)(*(_QWORD *)a1 + 720 * (v8 - 1) + 10) |= 8u;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197E90D68);
  }
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 == 2)
  {
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197E90D70);
    }
    v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
    *(_BYTE *)(v25 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
    v28 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v33 = *(_DWORD *)(a1 + 7368);
    if (v28)
    {
      if (v33 == 3)
      {
        v34 = *(_DWORD *)(a1 + 7400);
        v35 = *(_DWORD *)(a1 + 7412);
        v36 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v34;
        *(_DWORD *)(a1 + 7448) = v35;
        *(_DWORD *)(a1 + 7452) = v36;
        v37 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v37 + 4) = v34;
        v38 = *(_DWORD *)(a1 + 12);
        if (v38)
        {
          v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
          *(_BYTE *)(v37 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
          v44 = 0;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v44))
            return 43;
          v42 = *(_DWORD *)(a1 + 7368);
          if (v42 != 20 && (v42 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "A 'with' statement must have a body");
            return 0;
          }
          goto LABEL_19;
        }
LABEL_37:
        __break(0xC471u);
        JUMPOUT(0x197E90D60);
      }
      if (v33 != 20 && (v33 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          return 0;
        v43 = ")";
LABEL_31:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(a1, v43);
        return 0;
      }
    }
    else if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse 'with' subject expression");
      return 0;
    }
  }
  else if (v17 != 20 && (v17 & 0x100000) == 0)
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v43 = "(";
    goto LABEL_31;
  }
LABEL_19:
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  _BYTE v112[24];
  WTF *v113;
  int v114;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
    goto LABEL_70;
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(a1);
      return 0;
    }
LABEL_29:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912B4);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  v28 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v33 = *(_DWORD *)(a1 + 7368);
  if (!v28)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch subject expression");
      return 0;
    }
    goto LABEL_29;
  }
  if (v33 != 3)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(a1);
      return 0;
    }
    goto LABEL_29;
  }
  v34 = *(_DWORD *)(a1 + 7400);
  v35 = *(_DWORD *)(a1 + 7412);
  v36 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v34;
  *(_DWORD *)(a1 + 7448) = v35;
  *(_DWORD *)(a1 + 7452) = v36;
  v37 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v37 + 4) = v34;
  v38 = *(_DWORD *)(a1 + 12);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912BCLL);
  }
  v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
  *(_BYTE *)(v37 + 56) = 0;
  v40 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
  *(_DWORD *)(a1 + 7368) = v40;
  if (v40)
  {
    if (v40 != 20 && (v40 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(a1);
      return 0;
    }
    goto LABEL_29;
  }
  v45 = *(_DWORD *)(a1 + 7400);
  v46 = *(_DWORD *)(a1 + 7412);
  v47 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v45;
  *(_DWORD *)(a1 + 7448) = v46;
  *(_DWORD *)(a1 + 7452) = v47;
  v48 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v48 + 4) = v45;
  v49 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912C4);
  }
  v50 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1;
  *(_BYTE *)(v48 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 0, v50, v41, v42, v43, v44);
  v51 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v51 + 12) <= v52)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912CCLL);
  }
  *(_DWORD *)(*(_QWORD *)v51 + 720 * v52 + 10) |= 0x8080u;
  if (*(_DWORD *)(v51 + 12) <= v52)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912D4);
  }
  *(_DWORD *)(*(_QWORD *)v51 + 720 * v52 + 10) &= ~0x40u;
  v59 = *(_DWORD *)(a1 + 12);
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912DCLL);
  }
  v60 = *(_QWORD *)a1 + 720 * (v59 - 1);
  ++*(_DWORD *)(v60 + 28);
  JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::SyntaxChecker>(a1, a2, v53, v54, v55, v56, v57, v58);
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  if (*v15 != 517)
    goto LABEL_19;
  v67 = *(_DWORD *)(a1 + 7400);
  v68 = *(_DWORD *)(a1 + 7412);
  v69 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v67;
  *(_DWORD *)(a1 + 7448) = v68;
  *(_DWORD *)(a1 + 7452) = v69;
  v70 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v70 + 4) = v67;
  v71 = *(_DWORD *)(a1 + 12);
  if (!v71)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912ECLL);
  }
  v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
  *(_BYTE *)(v70 + 56) = 0;
  v73 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v70, a1 + 7368, 0, v72, v63, v64, v65, v66);
  *(_DWORD *)(a1 + 7368) = v73;
  if (v73 == 18)
  {
    v74 = *(_DWORD *)(a1 + 7400);
    v75 = *(_DWORD *)(a1 + 7412);
    v76 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v74;
    *(_DWORD *)(a1 + 7448) = v75;
    *(_DWORD *)(a1 + 7452) = v76;
    v77 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v77 + 4) = v74;
    v78 = *(_DWORD *)(a1 + 12);
    if (v78)
    {
      v79 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1;
      *(_BYTE *)(v77 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v77, a1 + 7368, 0, v79, v63, v64, v65, v66);
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1))
        goto LABEL_18;
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_49;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch default clause");
        goto LABEL_18;
      }
LABEL_60:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_18;
    }
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x197E912ACLL);
  }
  if (v73 == 20 || (v73 & 0x100000) != 0)
    goto LABEL_60;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch default clause");
LABEL_18:
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_49:
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v112, (uint64_t *)a1, 0, v62, v63, v64, v65, v66);
    v111 = v113;
    if (v113)
    {
      v113 = 0;
      v114 = 0;
      WTF::fastFree((unint64_t)v111, v104, v105, v106, v107, v108, v109, v110);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v112, (WTF::AtomStringImpl *)v104, v105, v106, v107, v108, v109, v110);
    return 0;
  }
LABEL_19:
  JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::SyntaxChecker>(a1, a2, v61, v62, v63, v64, v65, v66);
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  v80 = *(_DWORD *)(a1 + 12);
  if (!v80)
  {
    __break(0xC471u);
    JUMPOUT(0x197E912E4);
  }
  v81 = v80 - 1;
  v82 = *(_QWORD *)a1;
  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v81 + 28);
  v83 = *(_DWORD *)(a1 + 7368);
  if (v83 != 1)
  {
    if (v83 == 20 || (v83 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(a1);
    goto LABEL_49;
  }
  v84 = *(_DWORD *)(a1 + 7400);
  v85 = *(_DWORD *)(a1 + 7412);
  v86 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v84;
  *(_DWORD *)(a1 + 7448) = v85;
  *(_DWORD *)(a1 + 7452) = v86;
  v87 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v87 + 4) = v84;
  v88 = *(_BYTE *)(v82 + 720 * v81 + 9) & 1;
  *(_BYTE *)(v87 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v87, a1 + 7368, 0, v88, v63, v64, v65, v66);
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v112, (uint64_t *)a1, 0, v89, v90, v91, v92, v93);
  v101 = v113;
  if (v113)
  {
    v113 = 0;
    v114 = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v112, (WTF::AtomStringImpl *)v94, v95, v96, v97, v98, v99, v100);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseThrowStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
    goto LABEL_30;
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v16 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v16;
  if (v16 == 1 || v16 == 20)
    goto LABEL_34;
  if (v16 == 17)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected expression after 'throw'");
    return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
LABEL_34:
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot have a newline after 'throw'");
    return 0;
  }
  v19 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v24 = *(_DWORD *)(a1 + 7368);
  if (!v19)
  {
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for throw statement");
      return 0;
    }
    goto LABEL_29;
  }
  if (v24 == 17)
  {
    v25 = *(_DWORD *)(a1 + 7400);
    v26 = *(_DWORD *)(a1 + 7412);
    v27 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v25;
    *(_DWORD *)(a1 + 7448) = v26;
    *(_DWORD *)(a1 + 7452) = v27;
    v28 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v28 + 4) = v25;
    v29 = *(_DWORD *)(a1 + 12);
    if (v29)
    {
      v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
      *(_BYTE *)(v28 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, v20, v21, v22, v23);
      return 43;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x197E914D4);
  }
  result = 43;
  if (v24 != 1 && v24 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if ((v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after a throw statement");
      return 0;
    }
LABEL_29:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseTryStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  WTF::AtomStringImpl *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  int v112;
  uint64_t v113;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  int v157;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF *v166;
  uint64_t v167;
  char v168;
  uint64_t *v169;
  uint64_t v170[3];
  WTF *v171;
  uint64_t v172;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DB4);
  }
  v15 = (int *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a block statement as body of a try statement");
      return 0;
    }
    goto LABEL_108;
  }
  v23 = *(_DWORD *)(a1 + 7308);
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v18, v19, v20, v21, v22))
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of try block");
      return 0;
    }
LABEL_108:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v31 = *(_DWORD *)(a1 + 7308);
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v32 = *(_DWORD *)(a1 + 7368);
  if (v32 != 535)
  {
    v92 = 0;
    v85 = 0;
    goto LABEL_48;
  }
  v33 = *(_DWORD *)(a1 + 7400);
  v34 = *(_DWORD *)(a1 + 7412);
  v35 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v33;
  *(_DWORD *)(a1 + 7448) = v34;
  *(_DWORD *)(a1 + 7452) = v35;
  v36 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v36 + 4) = v33;
  v37 = *(_DWORD *)(a1 + 12);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DBCLL);
  }
  v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1;
  *(_BYTE *)(v36 + 56) = 0;
  v39 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v36, a1 + 7368, 0, v38, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v39;
  if (v39 != 2)
  {
    if (v39)
    {
      if (v39 != 20 && (v39 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(a1);
        goto LABEL_83;
      }
    }
    else
    {
      v142 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v26, v27, v28, v29, v30);
      v32 = *(_DWORD *)(a1 + 7368);
      if (v142)
      {
        v85 = v142;
        v92 = 0;
        goto LABEL_48;
      }
      if (v32 != 20 && (v32 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
        goto LABEL_83;
      }
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_83:
    v113 = 0;
    goto LABEL_55;
  }
  v40 = *(_DWORD *)(a1 + 7400);
  v41 = *(_DWORD *)(a1 + 7412);
  v42 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v40;
  *(_DWORD *)(a1 + 7448) = v41;
  *(_DWORD *)(a1 + 7452) = v42;
  v43 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v43 + 4) = v40;
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DC4);
  }
  v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
  *(_BYTE *)(v43 + 56) = 0;
  v46 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v46;
  v47 = *(_DWORD *)(a1 + 12);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DCCLL);
  }
  v48 = *(_DWORD *)(a1 + 7456);
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 12) & 0x10) != 0 && v46 == 546)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as identifier within static block");
LABEL_178:
    v113 = 0;
    *(_DWORD *)(a1 + 7456) = v48;
    goto LABEL_55;
  }
  *(_DWORD *)(a1 + 7456) = v48 + 1;
  v49 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v55 = v50;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DD4);
  }
  v56 = v49;
  v57 = v50;
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) |= 0x8080u;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DDCLL);
  }
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) &= ~0x40u;
  v58 = *v15;
  if (*v15 == 12)
  {
LABEL_13:
    if (*(_DWORD *)(v49 + 12) <= v50)
    {
      __break(0xC471u);
      JUMPOUT(0x197E91DE4);
    }
    *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) |= 0x40000u;
    v59 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v60 = *(_DWORD *)(a1 + 7400);
    v61 = *(_DWORD *)(a1 + 7412);
    v62 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v60;
    *(_DWORD *)(a1 + 7448) = v61;
    *(_DWORD *)(a1 + 7452) = v62;
    v63 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v63 + 4) = v60;
    v64 = *(_DWORD *)(a1 + 12);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x197E91DECLL);
    }
    v65 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v64 - 1) + 9) & 1;
    *(_BYTE *)(v63 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v63, a1 + 7368, 0, v65, v51, v52, v53, v54);
    if (*(_DWORD *)(v56 + 12) <= v55)
    {
      __break(0xC471u);
      JUMPOUT(0x197E91DF4);
    }
    if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v56 + 720 * v57, v59, 0, v66, v67, v68, v69, v70) & 1) != 0)
    {
      v157 = *(_DWORD *)(a1 + 12);
      if (!v157)
      {
        __break(0xC471u);
        JUMPOUT(0x197E91F10);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v157 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v170[0] = *(_QWORD *)v59;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],WTF::UniquedStringImpl *,char const(&)[17]>(a1, v170);
        }
        goto LABEL_175;
      }
    }
    goto LABEL_17;
  }
  if (v58 > 544)
  {
    if (v58 == 545)
      goto LABEL_96;
    if (v58 == 546)
      goto LABEL_13;
    if (v58 != 1048592)
      goto LABEL_169;
    v152 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v153 = **(_QWORD **)(a1 + 7376);
    if (v153 != v152[41])
    {
LABEL_95:
      if (v153 != v152[62])
      {
LABEL_100:
        if (v153 == v152[16])
          goto LABEL_13;
        goto LABEL_169;
      }
LABEL_96:
      v154 = *(_DWORD *)(a1 + 12);
      if (!v154)
      {
        __break(0xC471u);
LABEL_182:
        JUMPOUT(0x197E918E8);
      }
      v155 = v154 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v155 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v155 + 11) & 2) == 0)
      {
        goto LABEL_13;
      }
      if (v58 != 1048592)
        goto LABEL_169;
      v152 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v153 = **(_QWORD **)(a1 + 7376);
      goto LABEL_100;
    }
  }
  else if (v58 != 544)
  {
    goto LABEL_169;
  }
  v151 = *(_DWORD *)(a1 + 12);
  if (!v151)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91F08);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v151 - 1) + 9) & 1) == 0)
    goto LABEL_13;
  if (v58 == 1048592)
  {
    v152 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v153 = **(_QWORD **)(a1 + 7376);
    goto LABEL_95;
  }
LABEL_169:
  v59 = 0;
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 3, 0, 0, 0))
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
      goto LABEL_175;
    }
    goto LABEL_174;
  }
LABEL_17:
  v76 = *v15;
  if (*v15 != 3)
  {
    if (v76 != 20 && (v76 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(a1);
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  v77 = *(_DWORD *)(a1 + 7400);
  v78 = *(_DWORD *)(a1 + 7412);
  v79 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v77;
  *(_DWORD *)(a1 + 7448) = v78;
  *(_DWORD *)(a1 + 7452) = v79;
  v80 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v80 + 4) = v77;
  v81 = *(_DWORD *)(a1 + 12);
  if (!v81)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91DFCLL);
  }
  v82 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v81 - 1) + 9) & 1;
  *(_BYTE *)(v80 + 56) = 0;
  v83 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v80, a1 + 7368, 0, v82, v72, v73, v74, v75);
  *(_DWORD *)(a1 + 7368) = v83;
  if (v83)
  {
    if (v83 != 20 && (v83 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected exception handler to be a block statement");
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  v84 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 1, v71, v72, v73, v74, v75);
  if (!v84)
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
      goto LABEL_175;
    }
LABEL_174:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_175:
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v170, (uint64_t *)a1, 0, v71, v72, v73, v74, v75);
    v166 = v171;
    if (v171)
    {
      v171 = 0;
      LODWORD(v172) = 0;
      WTF::fastFree((unint64_t)v166, v159, v160, v161, v162, v163, v164, v165);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v170, (WTF::AtomStringImpl *)v159, v160, v161, v162, v163, v164, v165);
    goto LABEL_178;
  }
  v85 = v84;
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v170, (uint64_t *)a1, 0, v71, v72, v73, v74, v75);
  JSC::VariableEnvironment::operator=((uint64_t)&v167, (uint64_t)v170, v86, v87, v88, v89, v90, v91);
  v92 = v171;
  v171 = 0;
  v172 = 0;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v170, v93, v94, v95, v96, v97, v98, v99);
  if (!v59)
    goto LABEL_47;
  v100 = v167;
  if (v167)
    v101 = *(_DWORD *)(v167 - 12);
  else
    v101 = 0;
  LODWORD(v102) = (_DWORD)v169;
  if (v169)
  {
    v102 = *v169;
    if (*v169)
      LODWORD(v102) = *(_DWORD *)(v102 - 12);
  }
  if ((_DWORD)v102 + v101 != 1)
    goto LABEL_39;
  v103 = *(WTF::StringImpl **)v59;
  if (!*(_QWORD *)v59)
  {
    if (v167)
      goto LABEL_28;
LABEL_39:
    __break(0xC471u);
    goto LABEL_182;
  }
  v104 = *(_DWORD *)v103;
  *(_DWORD *)v103 += 2;
  v100 = v167;
  if (!v167)
  {
    if (v104)
    {
      *(_DWORD *)v103 = v104;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    goto LABEL_39;
  }
LABEL_28:
  v105 = *(_DWORD *)(v100 - 8);
  v106 = *((_DWORD *)v103 + 4);
  if ((v106 & 0x20) != 0)
    v106 = *((_DWORD *)v103 + 8);
  v107 = v105 & (v106 >> 8);
  v108 = *(WTF::StringImpl **)(v100 + 16 * v107);
  if (v108 == v103)
  {
    v111 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      goto LABEL_47;
    }
LABEL_46:
    *(_DWORD *)v103 = v111;
    goto LABEL_47;
  }
  v109 = 1;
  do
  {
    v110 = v108;
    if (!v108)
    {
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          goto LABEL_84;
        *(_DWORD *)v103 -= 2;
      }
      goto LABEL_39;
    }
    v107 = (v107 + v109) & v105;
    v108 = *(WTF::StringImpl **)(v100 + 16 * v107);
    ++v109;
  }
  while (v108 != v103);
  if (!v103)
    goto LABEL_47;
  v111 = *(_DWORD *)v103 - 2;
  if (*(_DWORD *)v103 != 2)
    goto LABEL_46;
LABEL_84:
  WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
  WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
  if (!v110)
    goto LABEL_39;
LABEL_47:
  *(_DWORD *)(a1 + 7456) = v48;
  v32 = *(_DWORD *)(a1 + 7368);
LABEL_48:
  if (v32 != 536)
  {
    v112 = 0;
    goto LABEL_50;
  }
  v116 = *(_DWORD *)(a1 + 7400);
  v117 = *(_DWORD *)(a1 + 7412);
  v118 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v116;
  *(_DWORD *)(a1 + 7448) = v117;
  *(_DWORD *)(a1 + 7452) = v118;
  v119 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v119 + 4) = v116;
  v120 = *(_DWORD *)(a1 + 12);
  if (!v120)
  {
    __break(0xC471u);
    JUMPOUT(0x197E91E18);
  }
  v121 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v120 - 1) + 9) & 1;
  *(_BYTE *)(v119 + 56) = 0;
  v122 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v119, a1 + 7368, 0, v121, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v122;
  if (v122)
  {
    if (v122 == 20 || (v122 & 0x100000) != 0)
      goto LABEL_141;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected block statement for finally body");
LABEL_142:
    v113 = 0;
  }
  else
  {
    v112 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v26, v27, v28, v29, v30);
    if (!v112)
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse finally body");
        goto LABEL_142;
      }
LABEL_141:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_142;
    }
LABEL_50:
    if (!(v112 | v85))
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Try statements must have at least a catch or finally block");
        goto LABEL_142;
      }
      goto LABEL_141;
    }
    v113 = 43;
    if (v31 != v23 && !v112)
    {
      v123 = *(_DWORD *)(a1 + 12);
      if (!v123)
      {
        __break(0xC471u);
        JUMPOUT(0x197E91E20);
      }
      v124 = v123 - 1;
      do
      {
        v125 = v124;
        if (!v124)
          break;
        --v124;
      }
      while ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v125 + 12) & 0x40) == 0);
      if (v123 <= v125)
      {
        __break(0xC471u);
        JUMPOUT(0x197E91E28);
      }
      v113 = 43;
    }
  }
  if (v92)
    WTF::fastFree((unint64_t)v92, v24, v25, v26, v27, v28, v29, v30);
LABEL_55:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v167, v24, v25, v26, v27, v28, v29, v30);
  return v113;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseDebuggerStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (v13)
  {
    v14 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v14, a5, a6, a7, a8);
    if (JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon(a1, v15, v16, v17, v18, v19, v20, v21))
    {
      return 43;
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 7368);
      if (v22 != 20 && (v22 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Debugger keyword must be followed by a ';'");
      }
      else
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      return 0;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[89]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "Function declarations are only allowed inside blocks or switch statements in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[96]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Function declarations are only allowed inside block statements or at the top level of a program");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "'if' condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(uint64_t a1, const char *a2, const char *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", "Expected '");
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", "' to ");
    WTF::PrintStream::printf(v7, "%s", "end");
    WTF::PrintStream::printf(v7, "%s", " an ");
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

__n128 WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSTokenLocation&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "while");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "for-loop header");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", ")");
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "end");
    WTF::PrintStream::printf(v5, "%s", " a ");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected statement as body of for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::SyntaxChecker>(JSC::SyntaxChecker::Statement&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _BYTE v20[24];
  WTF *v21;
  int v22;

  v10 = *(uint64_t **)(a2 + 24);
  if (**(_BYTE **)a2 || **(_BYTE **)(a2 + 8))
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v11 + 16))
    {
      *(_QWORD *)(v11 + 16) = 0;
      JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v20, v10, 0, a4, a5, a6, a7, a8);
      JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)a1, (const JSC::VariableEnvironment *)v20);
      v19 = v21;
      if (v21)
      {
        v21 = 0;
        v22 = 0;
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v20, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  return JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 5, 0, 0, 0);
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "for-loop header");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[71]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a reference on the left hand side of an enumeration statement");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse subject for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected a statement as the body of a for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " loop");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

JSC::VariableEnvironment *JSC::VariableEnvironment::VariableEnvironment(JSC::VariableEnvironment *this, const JSC::VariableEnvironment *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v32;

  *(_QWORD *)this = 0;
  if (!*(_QWORD *)a2)
    goto LABEL_38;
  v4 = *(unsigned int *)(*(_QWORD *)a2 - 12);
  if (!(_DWORD)v4)
    goto LABEL_38;
  v5 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v4)
      goto LABEL_44;
  }
  else if (3 * v7 > 4 * v4)
  {
LABEL_6:
    v8 = (double)v4;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_44:
  v8 = (double)v4;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(16 * v11 + 16));
  v13 = (_WORD *)(v12 + 24);
  v14 = v11;
  do
  {
    *((_QWORD *)v13 - 1) = 0;
    *v13 = 0;
    v13 += 8;
    --v14;
  }
  while (v14);
  *(_QWORD *)this = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*(_QWORD *)this - 8) = v11 - 1;
  *(_DWORD *)(*(_QWORD *)this - 12) = v4;
  *(_DWORD *)(*(_QWORD *)this - 16) = 0;
  v15 = *(_WORD **)a2;
  if (*(_QWORD *)a2)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[8 * v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = *(_WORD **)a2;
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = *(_WORD **)a2;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 8;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v18 = &v15[8 * v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[8 * v16];
LABEL_21:
  if (v15)
    v15 += 8 * *((unsigned int *)v15 - 1);
  while (v18 != v15)
  {
    v20 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = *(_DWORD **)v18;
    v23 = *(_DWORD *)(*(_QWORD *)v18 + 16);
    if ((v23 & 0x20) != 0)
      v23 = v22[8];
    v24 = 0;
    v25 = v23 >> 8;
    do
    {
      v26 = v25 & v21;
      v25 = ++v24 + v26;
    }
    while (*(_QWORD *)(v20 + 16 * v26));
    if (v22)
      *v22 += 2;
    v27 = v20 + 16 * v26;
    *(_QWORD *)v27 = v22;
    *(_WORD *)(v27 + 8) = v18[4];
    v28 = v18 + 8;
    v18 = v17;
    if (v28 != v17)
    {
      v18 = v28;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 8;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
LABEL_38:
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  v29 = (_QWORD *)*((_QWORD *)a2 + 2);
  if (v29)
  {
    v32 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    v30 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(v32, v29);
  }
  else
  {
    v30 = 0;
  }
  *((_QWORD *)this + 2) = v30;
  return this;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_37;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_37:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastMalloc((WTF *)(16 * v12 + 16));
  v14 = (_WORD *)(v13 + 24);
  v15 = v12;
  do
  {
    *((_QWORD *)v14 - 1) = 0;
    *v14 = 0;
    v14 += 8;
    --v15;
  }
  while (v15);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v16 = (_WORD *)*a2;
  if (*a2)
  {
    v18 = *((unsigned int *)v16 - 1);
    v19 = &v16[8 * v18];
    if (*((_DWORD *)v16 - 3))
    {
      v17 = (_WORD *)*a2;
      if ((_DWORD)v18)
      {
        v29 = 16 * v18;
        v17 = (_WORD *)*a2;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 8;
          v29 -= 16;
          if (!v29)
          {
            v17 = v19;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v17 = &v16[8 * v18];
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = &v16[8 * v18];
LABEL_18:
  if (v16)
    v16 += 8 * *((unsigned int *)v16 - 1);
  while (v17 != v16)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = *(_DWORD **)v17;
    v23 = *(_DWORD *)(*(_QWORD *)v17 + 16);
    if ((v23 & 0x20) != 0)
      v23 = v22[8];
    v24 = 0;
    v25 = v23 >> 8;
    do
    {
      v26 = v25 & v21;
      v25 = ++v24 + v26;
    }
    while (*(_QWORD *)(v20 + 16 * v26));
    if (v22)
      *v22 += 2;
    v27 = v20 + 16 * v26;
    *(_QWORD *)v27 = v22;
    *(_WORD *)(v27 + 8) = v17[4];
    v28 = v17 + 8;
    v17 = v19;
    if (v28 != v19)
    {
      v17 = v28;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 8;
        if (v17 == v19)
        {
          v17 = v19;
          break;
        }
      }
    }
  }
  return a1;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::UniquedStringImpl *,char const(&)[32]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot continue to the label '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as it is not targeting a loop");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "start");
    WTF::PrintStream::printf(v5, "%s", " a ");
    WTF::PrintStream::printf(v5, "%s", "subject of a 'with' statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "subject of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "subject of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "{");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "body of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;

  if (*(_DWORD *)(a1 + 7368) != 516)
    return;
  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E94C88);
  }
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  v17 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v22 = *(_DWORD *)(a1 + 7368);
  if (!v17)
  {
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch clause");
      return;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return;
  }
  if (v22 != 18)
  {
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
LABEL_16:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch clause expression");
      return;
    }
    goto LABEL_20;
  }
  v23 = *(_DWORD *)(a1 + 7400);
  v24 = *(_DWORD *)(a1 + 7412);
  v25 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v23;
  *(_DWORD *)(a1 + 7448) = v24;
  *(_DWORD *)(a1 + 7452) = v25;
  v26 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v26 + 4) = v23;
  v27 = *(_DWORD *)(a1 + 12);
  if (!v27)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197E94C78);
  }
  v28 = v27 - 1;
  for (i = *(_QWORD *)a1; ; i = *(_QWORD *)a1)
  {
    v30 = *(_BYTE *)(i + 720 * v28 + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v30, v18, v19, v20, v21);
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1))
      break;
    if (*v15 != 516)
      return;
    v35 = *(_DWORD *)(a1 + 7400);
    v36 = *(_DWORD *)(a1 + 7412);
    v37 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v35;
    *(_DWORD *)(a1 + 7448) = v36;
    *(_DWORD *)(a1 + 7452) = v37;
    v38 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v38 + 4) = v35;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
      goto LABEL_37;
    v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
    *(_BYTE *)(v38 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, v31, v32, v33, v34);
    v41 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v42 = *(_DWORD *)(a1 + 7368);
    if (!v41)
    {
      if (v42 == 20 || (v42 & 0x100000) != 0)
        goto LABEL_20;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch case expression");
      return;
    }
    if (v42 != 18)
    {
      if (v42 == 20 || (v42 & 0x100000) != 0)
        goto LABEL_20;
      goto LABEL_16;
    }
    v43 = *(_DWORD *)(a1 + 7400);
    v44 = *(_DWORD *)(a1 + 7412);
    v45 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v43;
    *(_DWORD *)(a1 + 7448) = v44;
    *(_DWORD *)(a1 + 7452) = v45;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v43;
    v46 = *(_DWORD *)(a1 + 12);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197E94C80);
    }
    v28 = v46 - 1;
  }
  if (*v15 == 20 || (*v15 & 0x100000) != 0)
    goto LABEL_20;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch clause");
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "}");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "body of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "'catch' target");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a catch variable named '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "'catch' target");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int *v22;
  int v23;
  char v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *NumericIdentifier;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  const char *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::AtomStringImpl *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  char v212;
  unint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v238;
  char v239;
  char v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;

  v9 = (int *)(a1 + 7368);
  v10 = *(_DWORD *)(a1 + 7368);
  if (v10 == 191488)
  {
    v159 = *(_DWORD *)(a1 + 7400);
    v160 = *(_DWORD *)(a1 + 7412);
    v161 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v159;
    *(_DWORD *)(a1 + 7448) = v160;
    *(_DWORD *)(a1 + 7452) = v161;
    v162 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v162 + 4) = v159;
    v163 = *(_DWORD *)(a1 + 12);
    if (!v163)
    {
      __break(0xC471u);
      JUMPOUT(0x197E966C4);
    }
    v164 = a2;
    v165 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v163 - 1) + 9) & 1;
    *(_BYTE *)(v162 + 56) = 0;
    v12 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v162, (uint64_t)v9, 0, v165, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v12;
    v11 = 18;
    a2 = v164;
  }
  else
  {
    v11 = 5;
    v12 = *(_DWORD *)(a1 + 7368);
  }
  v13 = a1 + 7344;
  if (v12 == 12)
    goto LABEL_83;
  if (v12 <= 36)
  {
    v15 = 0;
    v14 = 0;
    switch(v12)
    {
      case 4:
LABEL_193:
        v181 = *(_DWORD *)(a1 + 7400);
        v182 = *(_DWORD *)(a1 + 7412);
        v183 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v181;
        *(_DWORD *)(a1 + 7448) = v182;
        *(_DWORD *)(a1 + 7452) = v183;
        v184 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v184 + 4) = v181;
        v185 = *(_DWORD *)(a1 + 12);
        if (!v185)
        {
          __break(0xC471u);
          JUMPOUT(0x197E966A4);
        }
        v186 = a2;
        v187 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v185 - 1) + 9) & 1;
        *(_BYTE *)(v184 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v184, (uint64_t)v9, 0, v187, a5, a6, a7, a8);
        LODWORD(v245) = 0;
        *((_QWORD *)&v245 + 1) = *(_QWORD *)(a1 + 7496);
        v246 = a1;
        *(_QWORD *)(a1 + 7496) = &v245;
        v188 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v186, &v245);
        *(_QWORD *)(v246 + 7496) = *((_QWORD *)&v245 + 1);
        v193 = *(_DWORD *)(a1 + 7368);
        if (!v188)
        {
          if (v193 == 20 || (v193 & 0x100000) != 0)
            goto LABEL_239;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
          goto LABEL_240;
        }
        if (v193 != 5)
        {
          if (v193 == 20 || (v193 & 0x100000) != 0)
            goto LABEL_239;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
          goto LABEL_240;
        }
        v194 = *(_DWORD *)(a1 + 7400);
        v195 = *(_DWORD *)(a1 + 7412);
        v196 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v194;
        *(_DWORD *)(a1 + 7448) = v195;
        *(_DWORD *)(a1 + 7452) = v196;
        v197 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v197 + 4) = v194;
        v198 = *(_DWORD *)(a1 + 12);
        if (!v198)
        {
          __break(0xC471u);
          JUMPOUT(0x197E966B4);
        }
        v199 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v198 - 1) + 9) & 1;
        *(_BYTE *)(v197 + 56) = 0;
        v200 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v197, (uint64_t)v9, 0, v199, v189, v190, v191, v192);
        *(_DWORD *)(a1 + 7368) = v200;
        if (v200 == 2)
        {
          v212 = *(_BYTE *)(v13 + 130);
          *(_BYTE *)(v13 + 130) = v11;
          JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, v186, *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952));
          v44 = 0;
          if (*(_QWORD *)(a1 + 7360))
            LOWORD(v43) = 0;
          else
            LOWORD(v43) = 9;
          *(_BYTE *)(v13 + 130) = v212;
          return v44 & 0x10000 | (unsigned __int16)v43;
        }
        if (v11 == 5)
        {
          if (v200 == 18)
          {
            v205 = *(_DWORD *)(a1 + 7400);
            v206 = *(_DWORD *)(a1 + 7412);
            v207 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v205;
            *(_DWORD *)(a1 + 7448) = v206;
            *(_DWORD *)(a1 + 7452) = v207;
            v208 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v208 + 4) = v205;
            v209 = *(_DWORD *)(a1 + 12);
            if (!v209)
            {
              __break(0xC471u);
              JUMPOUT(0x197E966BCLL);
            }
            v210 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v209 - 1) + 9) & 1;
            *(_BYTE *)(v208 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v208, (uint64_t)v9, 0, v210, v201, v202, v203, v204);
            LODWORD(v245) = 0;
            *((_QWORD *)&v245 + 1) = *(_QWORD *)(a1 + 7496);
            v246 = a1;
            *(_QWORD *)(a1 + 7496) = &v245;
            v211 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v186, &v245);
            *(_QWORD *)(v246 + 7496) = *((_QWORD *)&v245 + 1);
            if (v211)
            {
              v44 = 0;
              LOWORD(v43) = 9;
              return v44 & 0x10000 | (unsigned __int16)v43;
            }
            v166 = *v9;
            goto LABEL_177;
          }
          if (v200 != 20 && (v200 & 0x100000) == 0)
            goto LABEL_241;
        }
        else if (v200 != 20 && (v200 & 0x100000) == 0)
        {
          goto LABEL_105;
        }
        goto LABEL_239;
      case 9:
      case 10:
LABEL_55:
        v61 = a2;
        v62 = *(unint64_t **)(a1 + 7248);
        if (!v62)
        {
          v62 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
          v62[1] = 0;
          v62[2] = 0;
          *v62 = 0;
          WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v62, v142, v143, v144, v145, v146, v147, v148);
          bzero(v62 + 3, 0x800uLL);
          v150 = *(unint64_t **)(a1 + 7248);
          *(_QWORD *)(a1 + 7248) = v62;
          if (v150)
          {
            WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v150, v149, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
            v62 = *(unint64_t **)(a1 + 7248);
          }
        }
        NumericIdentifier = (_QWORD *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v62, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), a3, a4, a5, a6, a7, a8);
        v68 = *(_DWORD *)(a1 + 7400);
        v69 = *(_DWORD *)(a1 + 7412);
        v70 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v68;
        *(_DWORD *)(a1 + 7448) = v69;
        *(_DWORD *)(a1 + 7452) = v70;
        v71 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v71 + 4) = v68;
        v72 = *(_DWORD *)(a1 + 12);
        if (!v72)
        {
          __break(0xC471u);
          JUMPOUT(0x197E96694);
        }
        v73 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1;
        *(_BYTE *)(v71 + 56) = 0;
        v74 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v71, (uint64_t)v9, 0, v73, v63, v64, v65, v66);
        *(_DWORD *)(a1 + 7368) = v74;
        if (v74 == 2)
        {
          v139 = *(_BYTE *)(v13 + 130);
          *(_BYTE *)(v13 + 130) = v11;
          v140 = a1;
          a2 = v61;
          v141 = (uint64_t)NumericIdentifier;
          goto LABEL_156;
        }
        if (v11 != 5)
          goto LABEL_243;
        if (v74 != 18)
          goto LABEL_235;
        v79 = *(_DWORD *)(a1 + 7400);
        v80 = *(_DWORD *)(a1 + 7412);
        v81 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v79;
        *(_DWORD *)(a1 + 7448) = v80;
        *(_DWORD *)(a1 + 7452) = v81;
        v82 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v82 + 4) = v79;
        v83 = *(_DWORD *)(a1 + 12);
        if (!v83)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9669CLL);
        }
        v84 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v83 - 1) + 9) & 1;
        *(_BYTE *)(v82 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v82, (uint64_t)v9, 0, v84, v75, v76, v77, v78);
        LODWORD(v245) = 0;
        *((_QWORD *)&v245 + 1) = *(_QWORD *)(a1 + 7496);
        v246 = a1;
        *(_QWORD *)(a1 + 7496) = &v245;
        v85 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v61, &v245);
        *(_QWORD *)(v246 + 7496) = *((_QWORD *)&v245 + 1);
        if (v85)
          goto LABEL_62;
        goto LABEL_176;
      case 11:
LABEL_214:
        v61 = a2;
        v213 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v213, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *(unsigned __int8 *)(v13 + 40));
        if (!v214)
        {
          if (*v9 == 20 || (*v9 & 0x100000) != 0)
            goto LABEL_239;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
          goto LABEL_240;
        }
        NumericIdentifier = v214;
        v219 = *(_DWORD *)(a1 + 7400);
        v220 = *(_DWORD *)(a1 + 7412);
        v221 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v219;
        *(_DWORD *)(a1 + 7448) = v220;
        *(_DWORD *)(a1 + 7452) = v221;
        v222 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v222 + 4) = v219;
        v223 = *(_DWORD *)(a1 + 12);
        if (!v223)
        {
          __break(0xC471u);
          JUMPOUT(0x197E966CCLL);
        }
        v224 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v223 - 1) + 9) & 1;
        *(_BYTE *)(v222 + 56) = 0;
        v74 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v222, (uint64_t)v9, 0, v224, v215, v216, v217, v218);
        *(_DWORD *)(a1 + 7368) = v74;
        if (v74 == 2)
        {
          v229 = *(_BYTE *)(v13 + 130);
          *(_BYTE *)(v13 + 130) = v11;
          JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, v61, (uint64_t)NumericIdentifier);
          v44 = 0;
          LOWORD(v43) = *(_QWORD *)(a1 + 7360) == 0;
          *(_BYTE *)(v13 + 130) = v229;
          return v44 & 0x10000 | (unsigned __int16)v43;
        }
        if (v11 != 5)
        {
LABEL_243:
          if (v74 != 20 && (v74 & 0x100000) == 0)
            goto LABEL_105;
          goto LABEL_239;
        }
        if (v74 == 18)
        {
          v230 = *(_DWORD *)(a1 + 7400);
          v231 = *(_DWORD *)(a1 + 7412);
          v232 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v230;
          *(_DWORD *)(a1 + 7448) = v231;
          *(_DWORD *)(a1 + 7452) = v232;
          v233 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v233 + 4) = v230;
          v234 = *(_DWORD *)(a1 + 12);
          if (!v234)
          {
            __break(0xC471u);
            JUMPOUT(0x197E966E4);
          }
          v235 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v234 - 1) + 9) & 1;
          *(_BYTE *)(v233 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v233, (uint64_t)v9, 0, v235, v225, v226, v227, v228);
          if (JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1))
          {
LABEL_62:
            if (*NumericIdentifier == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v61 + 41952) + 16))
              v44 = 0x10000;
            else
              v44 = 0;
            LOWORD(v43) = v44 | 1;
            return v44 & 0x10000 | (unsigned __int16)v43;
          }
          goto LABEL_176;
        }
LABEL_235:
        if (v74 == 20 || (v74 & 0x100000) != 0)
          goto LABEL_239;
LABEL_241:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected ':' after property name");
        break;
      case 14:
        goto LABEL_6;
      default:
        goto LABEL_77;
    }
    goto LABEL_240;
  }
  if (v12 == 37)
    goto LABEL_69;
  if ((v12 - 545) < 2)
    goto LABEL_5;
  if (v12 == 1048592)
  {
LABEL_83:
    if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
      || *(_BYTE *)(a1 + 7384)
      || v10 == 191488)
    {
      goto LABEL_5;
    }
    v97 = v9;
    v242 = a2;
    v98 = *(_DWORD *)(a1 + 7316);
    v244 = *(_OWORD *)(a1 + 7296);
    v245 = *(_OWORD *)(a1 + 7320);
    v246 = *(_QWORD *)(a1 + 7336);
    v240 = *(_BYTE *)v13;
    v241 = v98;
    v99 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v100 = *(unsigned int *)(a1 + 7404);
    v101 = *(_QWORD *)(a1 + 7288);
    v102 = *(_DWORD *)v101;
    v238 = *(_DWORD *)(v101 + 4);
    v239 = *(_BYTE *)(a1 + 7345);
    v103 = *(_BYTE *)(v101 + 56);
    v104 = *(_DWORD *)(a1 + 7400);
    v105 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v104;
    *(_DWORD *)(a1 + 7448) = v105;
    *(_DWORD *)(a1 + 7452) = v100;
    *(_DWORD *)(v101 + 4) = v104;
    v106 = *(_DWORD *)(a1 + 12);
    if (!v106)
    {
      __break(0xC471u);
      JUMPOUT(0x197E966D4);
    }
    v107 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v106 - 1) + 9) & 1;
    *(_BYTE *)(v101 + 56) = 0;
    v108 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v101, (uint64_t)v97, 0, v107, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v108;
    if (v108 == 18 || (v12 = v108, v108 <= 6) && ((1 << v108) & 0x46) != 0)
    {
      JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v99, v100, a4, a5, a6, a7, a8);
      v113 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v113 = v102;
      *(_BYTE *)(v113 + 56) = v103;
      v114 = *(_DWORD *)(a1 + 7400);
      v115 = *(_DWORD *)(a1 + 7412);
      v116 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v114;
      *(_DWORD *)(a1 + 7448) = v115;
      *(_DWORD *)(a1 + 7452) = v116;
      *(_DWORD *)(v113 + 4) = v114;
      v117 = *(_DWORD *)(a1 + 12);
      if (!v117)
      {
        __break(0xC471u);
        JUMPOUT(0x197E966DCLL);
      }
      v12 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v113, (uint64_t)v97, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v117 - 1) + 9) & 1, v109, v110, v111, v112);
      *(_DWORD *)(a1 + 7368) = v12;
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v238;
      *(_OWORD *)(a1 + 7296) = v244;
      *(_DWORD *)(a1 + 7312) = 0;
      *(_DWORD *)(a1 + 7316) = v241;
      *(_OWORD *)(a1 + 7320) = v245;
      *(_QWORD *)(a1 + 7336) = v246;
      *(_BYTE *)(a1 + 7344) = v240;
      *(_BYTE *)(a1 + 7345) = v239;
      v121 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
        {
          WTF::StringImpl::~StringImpl(v121, v118, v119, v120, a5, a6, a7, a8);
          WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
          v12 = *v97;
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
      }
      v11 = 5;
      goto LABEL_91;
    }
    v175 = *(_QWORD *)(a1 + 7288);
    if (*(_BYTE *)(v175 + 56))
    {
      if (v12 != 20 && (v12 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a property name following keyword 'async'");
        goto LABEL_240;
      }
      goto LABEL_239;
    }
    if (v12 == 191488)
    {
      v176 = *(_DWORD *)(a1 + 7400);
      v177 = *(_DWORD *)(a1 + 7412);
      v178 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v176;
      *(_DWORD *)(a1 + 7448) = v177;
      *(_DWORD *)(a1 + 7452) = v178;
      *(_DWORD *)(v175 + 4) = v176;
      v179 = *(_DWORD *)(a1 + 12);
      if (!v179)
      {
        __break(0xC471u);
        JUMPOUT(0x197E966ECLL);
      }
      v180 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v179 - 1) + 9) & 1;
      *(_BYTE *)(v175 + 56) = 0;
      v12 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v175, (uint64_t)v97, 0, v180, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v12;
      v11 = 17;
    }
    else
    {
      v11 = 10;
    }
    if (v12 == 12)
      goto LABEL_91;
    if (v12 <= 36)
    {
      v15 = 0;
      v14 = 0;
      a2 = v242;
      v13 = a1 + 7344;
      v9 = v97;
      switch(v12)
      {
        case 4:
          goto LABEL_193;
        case 5:
        case 6:
        case 7:
        case 8:
        case 12:
        case 13:
          goto LABEL_77;
        case 9:
        case 10:
          goto LABEL_55;
        case 11:
          goto LABEL_214;
        case 14:
          goto LABEL_6;
        default:
          a2 = v242;
          v13 = a1 + 7344;
          v9 = v97;
          goto LABEL_77;
      }
    }
    a2 = v242;
    v9 = v97;
    if (v12 != 37)
    {
      if ((v12 - 545) >= 2)
      {
        a2 = v242;
        v13 = a1 + 7344;
        v9 = v97;
        if (v12 == 1048592)
          goto LABEL_5;
        goto LABEL_77;
      }
LABEL_91:
      a2 = v242;
      v13 = a1 + 7344;
      v9 = v97;
      goto LABEL_5;
    }
LABEL_69:
    v90 = *(_DWORD *)(a1 + 7400);
    v91 = *(_DWORD *)(a1 + 7412);
    v92 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v90;
    *(_DWORD *)(a1 + 7448) = v91;
    *(_DWORD *)(a1 + 7452) = v92;
    v93 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v93 + 4) = v90;
    v94 = *(_DWORD *)(a1 + 12);
    if (!v94)
    {
      __break(0xC471u);
      JUMPOUT(0x197E966ACLL);
    }
    v95 = a2;
    v96 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v94 - 1) + 9) & 1;
    *(_BYTE *)(v93 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v93, (uint64_t)v9, 0, v96, a5, a6, a7, a8);
    if (JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::SyntaxChecker>(a1, v95))
    {
      v44 = 0;
      LOWORD(v43) = 32;
      return v44 & 0x10000 | (unsigned __int16)v43;
    }
    if (*v9 != 20 && (*v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
      goto LABEL_240;
    }
    goto LABEL_239;
  }
LABEL_77:
  if ((v12 & 0x200) == 0)
  {
    if (v12 != 20 && (v12 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a property name");
      goto LABEL_240;
    }
    goto LABEL_239;
  }
LABEL_5:
  v14 = *(_BYTE *)(v13 + 40) == 0;
  v15 = 1;
LABEL_6:
  v16 = *(uint64_t **)(a1 + 7376);
  v17 = *(unsigned int *)(a1 + 7408);
  v18 = *(_DWORD *)(a1 + 7412);
  if (v11 != 18
    && v14
    && ((v19 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), *v16 == *(_QWORD *)(v19 + 1376))
     || *v16 == *(_QWORD *)(v19 + 2296)))
  {
    v243 = *(unsigned int *)(a1 + 7408);
    v86 = *(_DWORD *)(a1 + 7400);
    v87 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v86;
    *(_DWORD *)(a1 + 7448) = v18;
    *(_DWORD *)(a1 + 7452) = v87;
    v88 = *(unsigned int **)(a1 + 7288);
    v88[1] = v86;
    v89 = *(_DWORD *)(a1 + 12);
    if (!v89)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9668CLL);
    }
    v46 = a2;
    v47 = JSC::Lexer<unsigned char>::lexExpectIdentifier(v88, (uint64_t)v9, 1u, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1, a5, a6, a7, a8);
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 7400);
    v21 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v20;
    *(_DWORD *)(a1 + 7448) = v18;
    *(_DWORD *)(a1 + 7452) = v21;
    v22 = *(unsigned int **)(a1 + 7288);
    v22[1] = v20;
    v23 = *(_DWORD *)(a1 + 12);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9662CLL);
    }
    v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9);
    v25 = (unsigned __int8 *)*((_QWORD *)v22 + 10);
    v26 = (unsigned __int8 *)*((_QWORD *)v22 + 12);
    if (v25 < v26 && (*v25 | 0x20u) - 97 <= 0x19)
    {
      v27 = v22[22];
      v28 = v25 - v27;
      v29 = v22[28] - v27;
      v30 = *v22 | (unint64_t)(v28 << 32);
      v31 = v25 + 1;
      do
      {
        if (v31 >= v26)
        {
          LOBYTE(v32) = 0;
          goto LABEL_23;
        }
        v33 = *v31++;
        v32 = v33;
        v34 = (v33 | 0x20) - 97;
      }
      while ((v33 - 48) < 0xA || v34 < 0x1A);
      if ((v32 & 0x80) == 0)
      {
        v26 = v31 - 1;
        if ((v32 - 36) > 0x3B || ((1 << (v32 - 36)) & 0x900000000000001) == 0)
        {
LABEL_23:
          *((_BYTE *)v22 + 176) = v32;
          *((_QWORD *)v22 + 10) = v26;
          *(_QWORD *)(a1 + 7376) = 0;
          *(_DWORD *)(a1 + 7400) = *v22;
          v36 = v22[22];
          *(_DWORD *)(a1 + 7404) = v22[28] - v36;
          *(_DWORD *)(a1 + 7408) = (_DWORD)v25 - v36;
          *(_DWORD *)(a1 + 7412) = v22[20] - v36;
          *(_QWORD *)(a1 + 7416) = v30;
          *(_DWORD *)(a1 + 7424) = v29;
          v37 = v22[22];
          v38 = v22[20] - v37;
          v39 = v22[28] - v37;
          *(_QWORD *)(v13 + 84) = *v22 | (unint64_t)(v38 << 32);
          *(_DWORD *)(a1 + 7436) = v39;
          v40 = 12;
          v22[15] = 12;
          *(_DWORD *)(a1 + 7368) = 12;
LABEL_24:
          if (v11 != 5)
          {
            if (v40 != 20 && (v40 & 0x100000) == 0)
            {
LABEL_105:
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a parenthesis for argument list");
              goto LABEL_240;
            }
            goto LABEL_239;
          }
          if ((v15 & 1) != 0)
          {
            if (v40 != 6 && v40 != 1)
            {
              if (v40 == 21)
              {
                v127 = *(_DWORD **)(a1 + 7496);
                if (v127)
                {
                  if (!*v127)
                    *v127 = 1;
                }
              }
              if (v14)
              {
                v41 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
                if (*v16 == *(_QWORD *)(v41 + 1376))
                {
                  v42 = 2;
LABEL_32:
                  LOWORD(v43) = JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::SyntaxChecker>(a1, a2, v42, 0, a5, a6, a7, a8);
LABEL_33:
                  v44 = 0;
                  return v44 & 0x10000 | (unsigned __int16)v43;
                }
                if (*v16 == *(_QWORD *)(v41 + 2296))
                {
                  v42 = 4;
                  goto LABEL_32;
                }
              }
              if (v40 != 20 && (v40 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  *(_QWORD *)&v245 = *v16;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v245);
                }
                goto LABEL_240;
              }
              goto LABEL_239;
            }
            v56 = *(_DWORD *)(a1 + 12);
            if (!v56)
            {
              __break(0xC471u);
              goto LABEL_260;
            }
            v57 = v56 - 1;
            v58 = *(_QWORD *)a1;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v57 + 9) & 1) != 0 && v12 == 532)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_240;
              v128 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
              v129 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128);
              if (v130 <= v17)
              {
                v131 = 0x100000000;
                v129 = "";
              }
              else
              {
                LODWORD(v131) = v18 - v17;
                if ((int)v130 - (int)v17 > (v18 - v17) || (LODWORD(v131) = v130 - v17, (_DWORD)v17))
                {
                  v131 = v131;
                  v132 = v130 - v17;
                  if ((v130 & 0xFF00000000) != 0)
                  {
                    if (v132 < v131)
                      goto LABEL_260;
                    v129 += v17;
                    v131 = v131 | 0x100000000;
                  }
                  else
                  {
                    if (v132 < v131)
                      goto LABEL_260;
                    v129 += 2 * v17;
                  }
                }
                else
                {
                  v131 = v130;
                }
              }
              *(_QWORD *)&v245 = v129;
              *((_QWORD *)&v245 + 1) = v131;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24],char const(&)[16]>(a1, (uint64_t)&v245);
              goto LABEL_240;
            }
            if ((v12 - 531) > 1)
            {
              if ((v12 & 0x200) == 0)
                goto LABEL_49;
              if ((v12 - 544) < 3)
              {
                if (v12 == 546)
                {
                  if (*(_BYTE *)v13
                    && (*(_DWORD *)(v58 + 720 * v57 + 10) & 0x102000) == 0
                    && *(_DWORD *)(a1 + 7480) != 1)
                  {
                    goto LABEL_49;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    *(_QWORD *)&v245 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
                    v138 = "Cannot use 'await' as a ";
LABEL_150:
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[24],char const(&)[2],char const*>(a1, v138, (const char **)&v245);
                  }
                }
                else
                {
                  if (v12 == 544)
                  {
                    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v57 + 9) & 1) != 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                      {
                        *(_QWORD *)&v245 = "in strict mode";
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[24],char const(&)[2],char const*>(a1, (const char **)&v245);
                      }
                      goto LABEL_240;
                    }
LABEL_49:
                    JSC::Scope::useVariable(v58 + 720 * v57, *v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248) == *v16);
                    v59 = *(_DWORD *)(a1 + 12);
                    if (v59)
                    {
                      v60 = v59 - 1;
                      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v59 - 1) + 11) & 8) != 0)
                      {
                        v44 = 0;
                        *(_BYTE *)(*(_QWORD *)a1 + 720 * v60 + 32) |= 1u;
                      }
                      else
                      {
                        v44 = 0;
                      }
                      LOWORD(v43) = 17;
                      return v44 & 0x10000 | (unsigned __int16)v43;
                    }
LABEL_261:
                    __break(0xC471u);
                    JUMPOUT(0x197E96678);
                  }
                  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v57 + 9) & 1) == 0
                    && (*(_BYTE *)(v58 + 720 * v57 + 11) & 2) == 0)
                  {
                    goto LABEL_49;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    *(_QWORD *)&v245 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
                    v138 = "Cannot use 'yield' as a ";
                    goto LABEL_150;
                  }
                }
LABEL_240:
                LOWORD(v43) = 0;
                goto LABEL_33;
              }
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_240;
              v133 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
              v134 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 24))(v133);
              if (v17 >= v135)
              {
                v136 = 0x100000000;
                v134 = "";
                goto LABEL_141;
              }
              LODWORD(v136) = v18 - v17;
              if ((int)v135 - (int)v17 <= (v18 - v17))
              {
                LODWORD(v136) = v135 - v17;
                if (!(_DWORD)v17)
                {
                  v136 = v135;
                  goto LABEL_141;
                }
              }
              v136 = v136;
              v137 = v135 - v17;
              if ((v135 & 0xFF00000000) != 0)
              {
                if (v137 >= v136)
                {
                  v134 += v17;
                  v136 = v136 | 0x100000000;
LABEL_141:
                  *(_QWORD *)&v245 = v134;
                  *((_QWORD *)&v245 + 1) = v136;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)&v245);
                  goto LABEL_240;
                }
              }
              else if (v137 >= v136)
              {
                v134 += 2 * v17;
                goto LABEL_141;
              }
LABEL_260:
              __break(1u);
              goto LABEL_261;
            }
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_240;
            v122 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
            v123 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122);
            if (v124 <= v17)
            {
              v125 = 0x100000000;
              v123 = "";
            }
            else
            {
              LODWORD(v125) = v18 - v17;
              if ((int)v124 - (int)v17 > (v18 - v17) || (LODWORD(v125) = v124 - v17, (_DWORD)v17))
              {
                v125 = v125;
                v126 = v124 - v17;
                if ((v124 & 0xFF00000000) != 0)
                {
                  if (v126 < v125)
                    goto LABEL_260;
                  v123 += v17;
                  v125 = v125 | 0x100000000;
                }
                else
                {
                  if (v126 < v125)
                    goto LABEL_260;
                  v123 += 2 * v17;
                }
              }
              else
              {
                v125 = v124;
              }
            }
            *(_QWORD *)&v245 = v123;
            *((_QWORD *)&v245 + 1) = v125;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)&v245);
            goto LABEL_240;
          }
          if (v40 != 20 && (v40 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as property name");
            goto LABEL_240;
          }
LABEL_239:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_240;
        }
      }
    }
    v243 = v17;
    v46 = a2;
    *((_BYTE *)v22 + 56) = 0;
    v47 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(v22, (uint64_t)v9, 5u, v24 & 1, a5, a6, a7, a8);
  }
  v40 = v47;
  *v9 = v47;
  if (((1 << v11) & 0x40400) != 0 || v47 != 18)
  {
    a2 = v46;
    v17 = v243;
    if (v47 != 2)
      goto LABEL_24;
    v139 = *(_BYTE *)(v13 + 130);
    *(_BYTE *)(v13 + 130) = v11;
    v140 = a1;
    v141 = (uint64_t)v16;
LABEL_156:
    JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::SyntaxChecker>(v140, a2, v141);
    v44 = 0;
    LOWORD(v43) = *(_QWORD *)(a1 + 7360) == 0;
    *(_BYTE *)(v13 + 130) = v139;
  }
  else
  {
    v48 = *(_DWORD *)(a1 + 7400);
    v49 = *(_DWORD *)(a1 + 7412);
    v50 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v48;
    *(_DWORD *)(a1 + 7448) = v49;
    *(_DWORD *)(a1 + 7452) = v50;
    v51 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v51 + 4) = v48;
    v52 = *(_DWORD *)(a1 + 12);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x197E96634);
    }
    v53 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v52 - 1) + 9) & 1;
    *(_BYTE *)(v51 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v51, (uint64_t)v9, 0, v53, a5, a6, a7, a8);
    LODWORD(v245) = 0;
    *((_QWORD *)&v245 + 1) = *(_QWORD *)(a1 + 7496);
    v246 = a1;
    *(_QWORD *)(a1 + 7496) = &v245;
    v54 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v46, &v245);
    v55 = *((_QWORD *)&v245 + 1);
    if (!v54)
    {
      if (*((_QWORD *)&v245 + 1))
        **((_DWORD **)&v245 + 1) = v245;
      *(_QWORD *)(v246 + 7496) = v55;
LABEL_176:
      v166 = *v9;
LABEL_177:
      if (v166 != 20 && (v166 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for property declaration");
        goto LABEL_240;
      }
      goto LABEL_239;
    }
    *(_QWORD *)(v246 + 7496) = *((_QWORD *)&v245 + 1);
    if (v16 && *v16 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v46 + 41952) + 16))
      v43 = 65537;
    else
      v43 = 1;
    v44 = v43 & 0x10000;
  }
  return v44 & 0x10000 | (unsigned __int16)v43;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;

  v4 = 0;
  v5 = *(_DWORD **)(a1 + 7496);
  v6 = a1;
  *(_QWORD *)(a1 + 7496) = &v4;
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v4);
  v3 = v5;
  if (!(_DWORD)result && v5)
    *v5 = v4;
  *(_QWORD *)(v6 + 7496) = v3;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  v6 = a3;
  if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, (uint64_t)&v6, 2) & 1) == 0)
  {
    v4 = *(_DWORD *)(a1 + 7368);
    if (v4 != 20 && (v4 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
    }
    else
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24],char const(&)[16]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "shorthand property name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "shorthand property name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[24]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the keyword '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "shorthand property name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[24],char const(&)[2],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot use 'let' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "shorthand property name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[24],char const(&)[2],char const*>(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  WTF *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v28 = off_1E3572250;
    v29 = (WTF *)v31;
    v30 = xmmword_199122F80;
    v31[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "shorthand property name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", ".");
    v28[5]((WTF::StringPrintStream *)&v28);
    WTF::String::fromUTF8WithLatin1Fallback(v29, v30, &v27);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v27, v5, v6, v7, v8, v9, v10);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v29 != (WTF *)v31)
      WTF::fastFree((unint64_t)v29, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Expected a ':' following the property name '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, __n128 a10)
{
  int32x2_t *v11;
  int *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  _BOOL4 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const char *v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  _BOOL4 v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int32 v83;
  unsigned int v84;
  _BOOL4 v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const char *v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  __int8 v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  const char *v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  unsigned int v126;
  _QWORD *v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  int32x4_t v134;
  uint64_t v135;
  char v136;
  char v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t **v157;
  WTF::StringImpl *v158;
  int v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  WTF::StringImpl *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  int v214;
  uint64_t v215;
  char v216;
  int v217;
  int v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  char v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  int v241;
  uint64_t v242;
  __int128 v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  int v262;
  WTF::AtomStringImpl *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  unint64_t v273;
  char v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  WTF::AtomStringImpl *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  int v290;
  int v291;
  int v292;
  int v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  int32x4_t v323;
  uint64_t v324;
  char v325;
  WTF::StringImpl *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  int v339;
  int v340;
  WTF::AtomStringImpl *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t **v349;
  uint64_t v350;
  WTF::StringImpl *v351;
  int v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  unsigned int v357;
  int v358;
  int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  BOOL v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  int v387;
  int v388;
  int v389;
  WTF::AtomStringImpl *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t **v397;
  uint64_t v398;
  WTF::StringImpl *v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int v404;
  char v405;
  int v406;
  int v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  int v423;
  int v424;
  int v425;
  uint64_t **v426;
  uint64_t v427;
  WTF::StringImpl *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  unint64_t v440;
  char v441;
  int v442;
  int v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  int v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  void *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  void *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  int v495;
  int v496;
  int v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  int v508;
  int v509;
  int v510;
  uint64_t v511;
  __int128 v512;
  _DWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  int v533;
  int v534;
  uint64_t v535;
  __int128 v536;
  _DWORD *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  WTF::AtomStringImpl *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  int v558;
  int v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  const char *v563;
  uint64_t v564;
  WTF::StringImpl **v565;
  int v566;
  unsigned int v567;
  int v568;
  int v569;
  unint64_t v570;
  _OWORD *v571;
  uint64_t v572;
  int v573;
  int v574;
  WTF::AtomStringImpl *v575;
  int v576;
  int v577;
  int v578;
  int v579;
  _DWORD *v580;
  int v581;
  _DWORD *v582;
  int v583;
  WTF::StringImpl **v584;
  uint64_t **v585;
  int v586;
  int v587;
  int32x4_t v588;
  __n128 v589;
  _BYTE v590[72];
  char v591;
  char v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  __int128 v595;
  uint64_t *v596;
  __int128 v597;
  __int128 v598;
  uint64_t v599;
  __int128 v600;
  uint64_t v601;
  _QWORD v602[2];
  __int128 v603;
  uint64_t *v604;
  __int128 v605;
  uint64_t v606;
  uint64_t *v607;
  _BYTE v608[9];

  v580 = (_DWORD *)a3;
  v11 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v564 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v51 = 0;
      v11[6].i8[4] = 1;
      return v51;
    }
    return 0;
  }
  v13 = (int *)(a1 + 7368);
  v14 = *(_DWORD *)(a1 + 7368);
  v588.i64[0] = a1 + 7300;
  if (v14 == 545)
  {
    v214 = *(_DWORD *)(a1 + 12);
    if (!v214)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99804);
    }
    v215 = *(_QWORD *)a1 + 720 * (v214 - 1);
    v216 = *(_BYTE *)(v215 + 9);
    v217 = *(_DWORD *)(v215 + 10);
    v11 = (int32x2_t *)v588.i64[0];
    if ((v216 & 1) != 0 || (v217 & 0x200) != 0)
    {
      if ((v217 & 0x1200) == 0x200)
      {
        v218 = *(_DWORD *)(a1 + 7316);
        if (v218)
        {
          v603 = *(_OWORD *)(a1 + 7296);
          v599 = *(_QWORD *)(a1 + 7336);
          v598 = *(_OWORD *)(a1 + 7320);
          v219 = *(_BYTE *)(v588.i64[0] + 44);
          v589.n128_u32[0] = *(unsigned __int8 *)(v588.i64[0] + 45);
          v220 = *(int *)(a1 + 7408);
          v221 = *(int *)(a1 + 7404);
          v222 = *(_QWORD *)(a1 + 7288);
          v223 = *(_DWORD *)v222;
          v587 = *(_DWORD *)(v222 + 4);
          v224 = *(_BYTE *)(v222 + 56);
          v225 = *(_DWORD *)(a1 + 7400);
          v226 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v225;
          *(_DWORD *)(a1 + 7448) = v226;
          *(_DWORD *)(a1 + 7452) = v221;
          *(_DWORD *)(v222 + 4) = v225;
          *(_BYTE *)(v222 + 56) = 0;
          v231 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v222, a1 + 7368, 0, v216 & 1, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v231;
          v232 = *(_QWORD *)(a1 + 7288);
          if (!*(_BYTE *)(v232 + 56))
          {
            if (v231 == 191488)
            {
              v257 = *(_DWORD *)(a1 + 7400);
              v258 = *(_DWORD *)(a1 + 7412);
              v259 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v257;
              *(_DWORD *)(a1 + 7448) = v258;
              *(_DWORD *)(a1 + 7452) = v259;
              *(_DWORD *)(v232 + 4) = v257;
              v260 = *(_DWORD *)(a1 + 12);
              if (!v260)
              {
                __break(0xC471u);
                JUMPOUT(0x197E998DCLL);
              }
              v261 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v260 - 1) + 9) & 1;
              *(_BYTE *)(v232 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v232, a1 + 7368, 0, v261, v227, v228, v229, v230);
            }
            *(_DWORD *)v590 = 0;
            *(_QWORD *)&v590[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v590[16] = a1;
            *(_QWORD *)(a1 + 7496) = v590;
            v262 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v590);
            *(_QWORD *)(*(_QWORD *)&v590[16] + 7496) = *(_QWORD *)&v590[8];
            if (!v262)
            {
              v270 = *(_QWORD *)(a1 + 7288);
              *(_BYTE *)(v270 + 150) = 0;
              v271 = *(WTF::StringImpl **)(v270 + 152);
              *(_QWORD *)(v270 + 152) = 0;
              if (v271)
              {
                if (*(_DWORD *)v271 == 2)
                {
                  WTF::StringImpl::~StringImpl(v271, v263, v264, v265, v266, v267, v268, v269);
                  WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
                }
                else
                {
                  *(_DWORD *)v271 -= 2;
                }
              }
              v272 = *(_QWORD *)(v270 + 88);
              v273 = *(_QWORD *)(v270 + 96);
              *(_QWORD *)(v270 + 80) = v272 + v220;
              *(_QWORD *)(v270 + 112) = v272 + v221;
              *(_DWORD *)(v270 + 20) = 0;
              *(_DWORD *)(v270 + 36) = 0;
              if (v272 + v220 >= v273)
                v274 = 0;
              else
                v274 = *(_BYTE *)(v272 + v220);
              *(_BYTE *)(v270 + 176) = v274;
              v275 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)v275 = v223;
              *(_BYTE *)(v275 + 56) = v224;
              v276 = *(_DWORD *)(a1 + 7400);
              v277 = *(_DWORD *)(a1 + 7412);
              v278 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v276;
              *(_DWORD *)(a1 + 7448) = v277;
              *(_DWORD *)(a1 + 7452) = v278;
              *(_DWORD *)(v275 + 4) = v276;
              v279 = *(_DWORD *)(a1 + 12);
              if (!v279)
              {
                __break(0xC471u);
                JUMPOUT(0x197E999ECLL);
              }
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v275, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v279 - 1) + 9) & 1, v266, v267, v268, v269);
              v287 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v287 + 4) = v587;
              *(_OWORD *)(a1 + 7296) = v603;
              *(_DWORD *)(a1 + 7312) = 0;
              *(_DWORD *)(a1 + 7316) = v218;
              *(_OWORD *)(a1 + 7320) = v598;
              *(_QWORD *)(a1 + 7336) = v599;
              v288 = v588.i64[0];
              *(_BYTE *)(v588.i64[0] + 44) = v219;
              *(_BYTE *)(v288 + 45) = v589.n128_u8[0];
              v289 = *(WTF::StringImpl **)(a1 + 7360);
              *(_QWORD *)(a1 + 7360) = 0;
              if (v289)
              {
                if (*(_DWORD *)v289 == 2)
                {
                  WTF::StringImpl::~StringImpl(v289, v280, v281, v282, v283, v284, v285, v286);
                  WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
                  v287 = *(_QWORD *)(a1 + 7288);
                }
                else
                {
                  *(_DWORD *)v289 -= 2;
                }
              }
              v290 = *(_DWORD *)(a1 + 7400);
              v291 = *(_DWORD *)(a1 + 7412);
              v292 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v290;
              *(_DWORD *)(a1 + 7448) = v291;
              *(_DWORD *)(a1 + 7452) = v292;
              *(_DWORD *)(v287 + 4) = v290;
              v293 = *(_DWORD *)(a1 + 12);
              if (!v293)
              {
                __break(0xC471u);
                JUMPOUT(0x197E999F4);
              }
              v294 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v293 - 1) + 9) & 1;
              *(_BYTE *)(v287 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v287, a1 + 7368, 0, v294, v283, v284, v285, v286);
            }
          }
          return 54;
        }
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression within parameters");
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression out of generator");
      }
      return 0;
    }
  }
  v575 = (WTF::AtomStringImpl *)*(int *)(a1 + 7408);
  v589.n128_u32[0] = *(_DWORD *)(a1 + 7300);
  v597 = *(_OWORD *)(a1 + 7296);
  v15 = *(_DWORD *)(a1 + 7316);
  v595 = *(_OWORD *)(a1 + 7320);
  v596 = *(uint64_t **)(a1 + 7336);
  v578 = v11[5].u8[4];
  v579 = v15;
  v16 = v11[5].u8[5];
  v572 = *(int *)(a1 + 7404);
  v17 = *(int **)(a1 + 7288);
  v576 = v17[1];
  v577 = v16;
  v18 = *v17;
  v573 = *((unsigned __int8 *)v17 + 56);
  v574 = v18;
  if (v14 == 2)
  {
    v123 = *(_DWORD *)(a1 + 12);
    if (!v123)
    {
      __break(0xC471u);
      JUMPOUT(0x197E993BCLL);
    }
    v124 = *(_QWORD *)a1 + 720 * (v123 - 1);
    v126 = *(_DWORD *)(v124 + 180);
    v125 = (_DWORD *)(v124 + 180);
    v127 = v125 - 3;
    *(_QWORD *)v590 = 0x800000000;
    *(_QWORD *)&v128 = -1;
    *((_QWORD *)&v128 + 1) = -1;
    *(_OWORD *)&v590[8] = v128;
    *(_OWORD *)&v590[24] = v128;
    *(_OWORD *)&v590[40] = v128;
    *(_OWORD *)&v590[56] = v128;
    v130 = *(v125 - 1);
    v129 = *v125;
    v570 = v126;
    if ((_DWORD)v129 == v130)
    {
      v210 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v125 - 3), (void *)(v129 + 1), (unint64_t)v590, a4, a5, a6, a7, a8);
      v211 = *v127 + 72 * *v125;
      *(_OWORD *)v211 = *(_OWORD *)v210;
      a10 = *(__n128 *)(v210 + 32);
      v212 = *(_OWORD *)(v210 + 48);
      v213 = *(_OWORD *)(v210 + 16);
      *(_QWORD *)(v211 + 64) = *(_QWORD *)(v210 + 64);
      *(__n128 *)(v211 + 32) = a10;
      *(_OWORD *)(v211 + 48) = v212;
      *(_OWORD *)(v211 + 16) = v213;
      *(_QWORD *)v210 = 0x800000000;
      *(_QWORD *)&v212 = -1;
      *((_QWORD *)&v212 + 1) = -1;
      *(_OWORD *)(v210 + 56) = v212;
      *(_OWORD *)(v210 + 40) = v212;
      *(_OWORD *)(v210 + 24) = v212;
      *(_OWORD *)(v210 + 8) = v212;
      ++*v125;
      if (*(_DWORD *)&v590[4] != 8)
        WTF::fastFree(*(unint64_t *)&v590[8], a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v131 = *v127 + 72 * v129;
      *(_OWORD *)v131 = *(_OWORD *)v590;
      v132 = *(_OWORD *)&v590[16];
      a10 = *(__n128 *)&v590[32];
      v133 = *(_OWORD *)&v590[48];
      *(_QWORD *)(v131 + 64) = *(_QWORD *)&v590[64];
      *(__n128 *)(v131 + 32) = a10;
      *(_OWORD *)(v131 + 48) = v133;
      *(_OWORD *)(v131 + 16) = v132;
      ++*v125;
    }
    v19 = *v13;
  }
  else
  {
    v570 = 0;
    v19 = v14;
  }
  v20 = 0;
  v581 = 0;
  v583 = 0;
  v571 = (_OWORD *)(a1 + 7316);
  v582 = (_DWORD *)(a1 + 7296);
  v587 = a2[2];
  a2[2] = 0;
  v584 = (WTF::StringImpl **)(a1 + 7360);
  v585 = (uint64_t **)(a1 + 7320);
  while (1)
  {
    if (v19 != 13)
    {
      v21 = a2[3];
      a2[3] = 0;
      v22 = v11[17].u8[4];
      v11[17].i8[4] = 1;
      if (v19 == 546)
      {
        v23 = *(_DWORD *)(a1 + 12);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x197E99350);
        }
        v24 = *(_DWORD *)(a1 + 12);
        while (1)
        {
          v25 = v24;
          if (v24 == 1)
            break;
          --v24;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v25 - 1) + 12) & 0x40) != 0)
            goto LABEL_12;
        }
        v24 = 0;
LABEL_12:
        if (v23 <= v25 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197E98F68);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v24 + 11) & 0x40) != 0 || ((1 << v11[21].i8[6]) & 0x6000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 12) & 0x10) != 0)
          {
            v586 = v21;
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
            goto LABEL_112;
          }
          v43 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v11[17].i8[4] = v22;
          a2[3] = v21;
          if (!v43)
            goto LABEL_113;
          goto LABEL_59;
        }
      }
      v586 = v21;
      v26 = v19;
      if ((v19 & 0x100) != 0)
      {
        while (1)
        {
          v28 = v26;
          ++*(_DWORD *)(a1 + 7300);
          a2[3] = v26;
          v36 = *(_DWORD *)(a1 + 7400);
          v37 = *(_DWORD *)(a1 + 7412);
          v38 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v36;
          *(_DWORD *)(a1 + 7448) = v37;
          *(_DWORD *)(a1 + 7452) = v38;
          v39 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v39 + 4) = v36;
          v40 = *(_DWORD *)(a1 + 12);
          if (!v40)
          {
            __break(0xC471u);
            JUMPOUT(0x197E98EF4);
          }
          v41 = v28 & 0xFFFFFFFC;
          v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v40 - 1) + 9) & 1;
          *(_BYTE *)(v39 + 56) = 0;
          v26 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, v42, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v26;
          ++*(_DWORD *)(a1 + 7304);
          if ((v26 & 0x100) == 0)
            break;
          if (v41 == 256)
          {
            if (!*v584)
            {
              if ((v28 - 256) >= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x197E98F14);
              }
              *(_QWORD *)v590 = off_1E357B318[v28 - 256];
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v590);
            }
            goto LABEL_112;
          }
        }
        v27 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        if (!v27)
        {
          if (*v13 != 20 && (*v13 & 0x100000) == 0)
          {
            if (!*v584)
            {
              if (v28 <= 773)
              {
                v122 = "logical-not";
                switch(v28)
                {
                  case 256:
                  case 258:
                    v122 = "prefix-increment";
                    goto LABEL_281;
                  case 257:
                  case 259:
                    v122 = "prefix-decrement";
                    goto LABEL_281;
                  case 260:
                    goto LABEL_281;
                  case 261:
                    v122 = "bitwise-not";
                    goto LABEL_281;
                  default:
                    goto LABEL_412;
                }
              }
              switch(v28)
              {
                case 774:
                  v122 = "typeof";
                  break;
                case 775:
                  v122 = "void";
                  break;
                case 776:
                  v122 = "delete";
                  break;
                default:
LABEL_412:
                  __break(0xC471u);
                  JUMPOUT(0x197E98F34);
              }
LABEL_281:
              *(_QWORD *)v590 = v122;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, (const char **)v590);
            }
            goto LABEL_112;
          }
LABEL_229:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_112;
        }
        if (v41 == 256)
        {
          if ((v27 & 0x80000000) != 0)
          {
            if (!*v584)
            {
              *(_QWORD *)v590 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(v27);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, (const char **)v590);
            }
LABEL_112:
            *(_BYTE *)(v588.i64[0] + 140) = v22;
            a2[3] = v586;
LABEL_113:
            if (*v13 != 20 && (*v13 & 0x100000) == 0)
            {
              v11 = (int32x2_t *)v588.i64[0];
              if (!*v584)
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
              goto LABEL_117;
            }
LABEL_400:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            v11 = (int32x2_t *)v588.i64[0];
            goto LABEL_117;
          }
          if (v27 > 0x19 || ((1 << v27) & 0x2030004) == 0)
          {
            v104 = *(_DWORD *)(a1 + 12);
            if (!v104)
            {
              __break(0xC471u);
              JUMPOUT(0x197E98F70);
            }
            if (v27 != 18 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v104 - 1) + 9) & 1) != 0)
            {
              if (!*v584)
              {
                if ((v28 & 0xFFFFFFFD) == 0x100)
                  v105 = "++";
                else
                  v105 = "--";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v105);
              }
              goto LABEL_112;
            }
            v27 = 18;
          }
          v29 = 1;
LABEL_19:
          v30 = *(_DWORD *)(a1 + 12);
          if (!v30)
          {
            __break(0xC471u);
            JUMPOUT(0x197E98F90);
          }
          LOBYTE(v31) = 0;
          v32 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9);
          if (v27 <= 2 && (v32 & 1) != 0)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            v34 = **(_QWORD **)(a1 + 7320);
            v31 = v34 == *(_QWORD *)(v33 + 1248) || v34 == *(_QWORD *)(v33 + 880);
            if ((v29 & v31) == 1)
            {
              if (*v584)
                goto LABEL_112;
              *(_QWORD *)v590 = **(_QWORD **)(a1 + 7320);
              goto LABEL_236;
            }
          }
          if (*v13 == 257)
          {
            if ((v27 & 0x80000000) != 0)
            {
LABEL_294:
              if (!*v584)
              {
                *(_QWORD *)v590 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(v27);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, (const char **)v590);
              }
              goto LABEL_112;
            }
            if ((v27 > 0x19 || ((1 << v27) & 0x2030004) == 0) && (v27 != 18 || (v32 & 1) != 0))
            {
              if (*v584)
                goto LABEL_112;
              v63 = "Postfix -- operator applied to value that is not a reference";
              goto LABEL_111;
            }
            ++*(_DWORD *)(a1 + 7304);
            *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
            v44 = !v31;
            if ((v32 & 1) == 0)
              v44 = 1;
            if ((v44 & 1) == 0)
            {
              if (!*v584)
              {
                *(_QWORD *)v590 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)v590);
              }
              goto LABEL_112;
            }
            if (v29)
            {
              if (*v584)
                goto LABEL_112;
              if (v28 <= 773)
              {
                v208 = "logical-not";
                switch(v28)
                {
                  case 256:
                  case 258:
LABEL_312:
                    v208 = "increment";
                    goto LABEL_316;
                  case 257:
                  case 259:
LABEL_315:
                    v208 = "decrement";
                    goto LABEL_316;
                  case 260:
                    goto LABEL_316;
                  case 261:
LABEL_338:
                    v208 = "bitwise-not";
                    goto LABEL_316;
                  default:
                    goto LABEL_323;
                }
              }
              if (v28 != 774)
              {
                if (v28 != 775)
                {
                  if (v28 != 776)
                  {
LABEL_323:
                    __break(0xC471u);
                    JUMPOUT(0x197E98790);
                  }
LABEL_327:
                  v208 = "delete";
LABEL_316:
                  *(_QWORD *)v590 = v208;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v590);
                  goto LABEL_112;
                }
LABEL_337:
                v208 = "void";
                goto LABEL_316;
              }
LABEL_336:
              v208 = "typeof";
              goto LABEL_316;
            }
          }
          else
          {
            if (*v13 != 256)
              goto LABEL_56;
            if ((v27 & 0x80000000) != 0)
              goto LABEL_294;
            if ((v27 > 0x19 || ((1 << v27) & 0x2030004) == 0) && (v27 != 18 || (v32 & 1) != 0))
            {
              if (*v584)
                goto LABEL_112;
              v63 = "Postfix ++ operator applied to value that is not a reference";
LABEL_111:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v63);
              goto LABEL_112;
            }
            ++*(_DWORD *)(a1 + 7304);
            *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
            v35 = !v31;
            if ((v32 & 1) == 0)
              v35 = 1;
            if ((v35 & 1) == 0)
            {
              if (*v584)
                goto LABEL_112;
              *(_QWORD *)v590 = **(_QWORD **)(a1 + 7320);
LABEL_236:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v590);
              goto LABEL_112;
            }
            if (v29)
            {
              if (*v584)
                goto LABEL_112;
              if (v28 <= 773)
              {
                v208 = "logical-not";
                switch(v28)
                {
                  case 256:
                  case 258:
                    goto LABEL_312;
                  case 257:
                  case 259:
                    goto LABEL_315;
                  case 260:
                    goto LABEL_316;
                  case 261:
                    goto LABEL_338;
                  default:
                    goto LABEL_454;
                }
              }
              if (v28 != 774)
              {
                if (v28 != 775)
                {
                  if (v28 != 776)
                  {
LABEL_454:
                    __break(0xC471u);
                    JUMPOUT(0x197E993A4);
                  }
                  goto LABEL_327;
                }
                goto LABEL_337;
              }
              goto LABEL_336;
            }
          }
          v45 = v32 & 1;
          v46 = *(_DWORD *)(a1 + 7400);
          v47 = *(_DWORD *)(a1 + 7412);
          v48 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v46;
          *(_DWORD *)(a1 + 7448) = v47;
          *(_DWORD *)(a1 + 7452) = v48;
          v49 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v49 + 4) = v46;
          *(_BYTE *)(v49 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v49, a1 + 7368, 0, v45, a5, a6, a7, a8);
          v27 = 21;
LABEL_56:
          v50 = v586;
          if ((v19 & 0x100) == 0)
          {
            v43 = v27;
            goto LABEL_58;
          }
          v53 = a2[3];
          if ((v53 - 256) >= 6 && (v53 - 774) >= 3 && (v53 - 174336) > 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197E977E8);
          }
          v43 = 22;
          if (v53 > 773)
          {
            if ((v53 - 174336) < 2)
              goto LABEL_58;
            if (v53 == 774)
            {
              v43 = 28;
              goto LABEL_58;
            }
            if (v53 == 775)
            {
LABEL_58:
              *(_BYTE *)(v588.i64[0] + 140) = v22;
              a2[3] = v50;
LABEL_59:
              v20 = *v13;
              goto LABEL_60;
            }
          }
          else if ((v53 - 256) <= 5)
          {
            if (((1 << v53) & 5) != 0 || ((1 << v53) & 0xA) != 0)
            {
              ++*v582;
              v43 = 20;
            }
            goto LABEL_58;
          }
          if (v27 >= 3)
          {
            if (v27 == 25)
            {
              if (!*v584)
              {
                *(_QWORD *)v590 = **(_QWORD **)(a1 + 7336);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)v590);
              }
              goto LABEL_112;
            }
          }
          else
          {
            v55 = *(_DWORD *)(a1 + 12);
            if (!v55)
            {
              __break(0xC471u);
              JUMPOUT(0x197E98F88);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v55 - 1) + 9) & 1) != 0)
            {
              if (!*v584)
              {
                *(_QWORD *)v590 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v590);
              }
              goto LABEL_112;
            }
          }
          v43 = 29;
          goto LABEL_58;
        }
      }
      else
      {
        v27 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        if (!v27)
        {
          if (*v13 != 20 && (*v13 & 0x100000) == 0)
          {
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
            goto LABEL_112;
          }
          goto LABEL_229;
        }
        v28 = 0;
      }
      v29 = 0;
      goto LABEL_19;
    }
    v311 = *(_DWORD *)(a1 + 12);
    if (!v311)
    {
      __break(0xC471u);
      JUMPOUT(0x197E98F3CLL);
    }
    JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v311 - 1), **(_QWORD **)(a1 + 7376), 0);
    *(_BYTE *)(v588.i64[0] + 238) = 1;
    v316 = *(_DWORD *)(a1 + 7400);
    v317 = *(_DWORD *)(a1 + 7412);
    v318 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v316;
    *(_DWORD *)(a1 + 7448) = v317;
    *(_DWORD *)(a1 + 7452) = v318;
    v319 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v319 + 4) = v316;
    v320 = *(_DWORD *)(a1 + 12);
    if (!v320)
    {
      __break(0xC471u);
      JUMPOUT(0x197E98F44);
    }
    v321 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v320 - 1) + 9) & 1;
    *(_BYTE *)(v319 + 56) = 0;
    v322 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v319, a1 + 7368, 0, v321, v312, v313, v314, v315);
    *(_DWORD *)(a1 + 7368) = v322;
    if (v20 >= 131589 || v322 != 131589)
    {
      v11 = (int32x2_t *)v588.i64[0];
      if (!*v584)
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[79]>(a1);
LABEL_117:
      a2[2] = v587;
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*v584)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
        goto LABEL_121;
      }
LABEL_282:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_121;
    }
    v22 = *(unsigned __int8 *)(v588.i64[0] + 140);
    v43 = 57;
    v20 = 131589;
LABEL_60:
    v51 = a2[2] ? 23 : v43;
    a2[2] = v51;
    v52 = v22 ? 245760 : 15360;
    v11 = (int32x2_t *)v588.i64[0];
    if ((v52 & v20) == 0)
      break;
    if (v20 <= 52223)
    {
      v56 = v583;
      if (v20 == 34816)
      {
LABEL_95:
        v56 = 1;
        goto LABEL_100;
      }
      if (v20 == 17408)
        v581 = 1;
    }
    else
    {
      v56 = v583;
      if (v20 == 52224)
        goto LABEL_95;
      if (v20 == 4403200)
      {
        if ((v19 & 0xFFFFFFFC) == 0x100)
        {
          v56 = v583;
          v11 = (int32x2_t *)v588.i64[0];
        }
        else
        {
          v56 = v583;
          v11 = (int32x2_t *)v588.i64[0];
          if ((v19 & 0x100) != 0)
          {
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[139]>(a1);
            goto LABEL_117;
          }
        }
      }
    }
    if ((v56 & 1) == 0)
      goto LABEL_101;
LABEL_100:
    if ((v581 & 1) != 0)
    {
      if (v20 != 20 && (v20 & 0x100000) == 0)
      {
        v11 = (int32x2_t *)v588.i64[0];
        if (!*v584)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[112]>(a1);
        goto LABEL_117;
      }
      goto LABEL_400;
    }
LABEL_101:
    v583 = v56;
    *v11 = vadd_s32(*v11, (int32x2_t)0x100000001);
    v57 = *(_DWORD *)(a1 + 7400);
    v58 = *(_DWORD *)(a1 + 7412);
    v59 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v57;
    *(_DWORD *)(a1 + 7448) = v58;
    *(_DWORD *)(a1 + 7452) = v59;
    v60 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v60 + 4) = v57;
    v61 = *(_DWORD *)(a1 + 12);
    if (!v61)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99374);
    }
    v62 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1;
    *(_BYTE *)(v60 + 56) = 0;
    v19 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v60, a1 + 7368, 2u, v62, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v19;
  }
  a2[2] = v587;
  if (v20 != 7)
  {
    v54 = 0;
    goto LABEL_76;
  }
  *v11 = vadd_s32(*v11, (int32x2_t)0x100000001);
  v106 = *(_DWORD *)(a1 + 7400);
  v107 = *(_DWORD *)(a1 + 7412);
  v108 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v106;
  *(_DWORD *)(a1 + 7448) = v107;
  *(_DWORD *)(a1 + 7452) = v108;
  v109 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v109 + 4) = v106;
  v110 = *(_DWORD *)(a1 + 12);
  if (!v110)
  {
    __break(0xC471u);
    JUMPOUT(0x197E993ACLL);
  }
  v111 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v110 - 1) + 9) & 1;
  *(_BYTE *)(v109 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v109, a1 + 7368, 2u, v111, a5, a6, a7, a8);
  v112 = v11[17].i8[4];
  v11[17].i8[4] = 1;
  *(_DWORD *)v590 = 0;
  *(_QWORD *)&v590[8] = *(_QWORD *)(a1 + 7496);
  *(_QWORD *)&v590[16] = a1;
  *(_QWORD *)(a1 + 7496) = v590;
  v113 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v590);
  *(_QWORD *)(*(_QWORD *)&v590[16] + 7496) = *(_QWORD *)&v590[8];
  v11[17].i8[4] = v112;
  v114 = *(_DWORD *)(a1 + 7368);
  if (v113)
  {
    if (v114 == 18)
    {
      v115 = *(_DWORD *)(a1 + 7400);
      v116 = *(_DWORD *)(a1 + 7412);
      v117 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v115;
      *(_DWORD *)(a1 + 7448) = v116;
      *(_DWORD *)(a1 + 7452) = v117;
      v118 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v118 + 4) = v115;
      v119 = *(_DWORD *)(a1 + 12);
      if (!v119)
      {
        __break(0xC471u);
        JUMPOUT(0x197E993B4);
      }
      v120 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v119 - 1) + 9) & 1;
      *(_BYTE *)(v118 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v118, a1 + 7368, 2u, v120, a5, a6, a7, a8);
      *(_DWORD *)v590 = 0;
      *(_QWORD *)&v590[8] = *(_QWORD *)(a1 + 7496);
      *(_QWORD *)&v590[16] = a1;
      *(_QWORD *)(a1 + 7496) = v590;
      v121 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v590);
      *(_QWORD *)(*(_QWORD *)&v590[16] + 7496) = *(_QWORD *)&v590[8];
      if (v121)
      {
        v54 = 0;
        v51 = 26;
        goto LABEL_76;
      }
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        v11 = (int32x2_t *)v588.i64[0];
        if (!*v584)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse right hand side of ternary operator");
        goto LABEL_121;
      }
LABEL_409:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      v11 = (int32x2_t *)v588.i64[0];
      goto LABEL_121;
    }
    if (v114 == 20 || (v114 & 0x100000) != 0)
      goto LABEL_282;
    if (!*v584)
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected ':' in ternary operator");
  }
  else
  {
    if (v114 == 20 || (v114 & 0x100000) != 0)
      goto LABEL_409;
    v11 = (int32x2_t *)v588.i64[0];
    if (!*v584)
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse left hand side of ternary operator");
  }
LABEL_121:
  v64 = *(_DWORD *)(a1 + 12);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99384);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v64 - 1) + 12) & 0x10) != 0)
  {
    if (*v13 == 546)
    {
      v51 = 0;
      if (*v584)
        return v51;
    }
    else
    {
      v51 = 0;
    }
    v54 = 1;
    v11 = (int32x2_t *)v588.i64[0];
LABEL_76:
    if ((v14 & 0x200) == 0)
      goto LABEL_77;
  }
  else
  {
    v51 = 0;
    v54 = 1;
    if ((v14 & 0x200) != 0)
      goto LABEL_124;
LABEL_77:
    if (v14 != 2 && v14 != 1048592 && v14 != 12)
    {
LABEL_125:
      v66 = v14 | 4;
      if (v54)
      {
        if (v66 != 4)
        {
          if (*v584)
            return 0;
          if (*v13 != 20 && (*v13 & 0x100000) == 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
            return 0;
          }
          goto LABEL_386;
        }
        if (*v580 != 1 && *v584)
          return 0;
      }
      else if (v66 != 4 || (_DWORD)v51 != 30 && (_DWORD)v51 != 11 || *v13 != 21)
      {
        if (v589.n128_u32[0] != v11->i32[0])
        {
          v100 = *v13;
          if (*v13 < 0 || v100 < 21 || v100 > 0x24)
            return v51;
          goto LABEL_318;
        }
        v67 = *(_DWORD *)(a1 + 7368) - 21;
        if (v67 > 0xF)
          return v51;
        ++*(_DWORD *)(a1 + 7304);
        if ((v51 & 0x80000000) != 0)
        {
LABEL_292:
          if (!*v584)
          {
            *(_QWORD *)v590 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(v51);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[57]>(a1, (const char **)v590);
          }
          return 0;
        }
        v70 = (unsigned __int16)v67 == 13 || (unsigned __int16)v67 == 14 || (unsigned __int16)v67 == 15;
        if (v51 > 0x19 || ((1 << v51) & 0x2030004) == 0)
        {
          v101 = *(_DWORD *)(a1 + 12);
          if (!v101)
          {
LABEL_452:
            __break(0xC471u);
            JUMPOUT(0x197E9937CLL);
          }
          if ((_DWORD)v51 != 18
            || ((v70 | *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (v101 - 1) + 9)) & 1) != 0)
          {
LABEL_190:
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Left side of assignment is not a reference");
            return 0;
          }
        }
        ++*(_DWORD *)(a1 + 7296);
        v71 = *(_DWORD *)(a1 + 7400);
        v72 = *(_DWORD *)(a1 + 7412);
        v73 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v71;
        *(_DWORD *)(a1 + 7448) = v72;
        *(_DWORD *)(a1 + 7452) = v73;
        v74 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v74 + 4) = v71;
        v75 = *(_DWORD *)(a1 + 12);
        if (!v75)
        {
LABEL_421:
          __break(0xC471u);
          JUMPOUT(0x197E98F80);
        }
        v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
        *(_BYTE *)(v74 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v74, a1 + 7368, 2u, v76, a5, a6, a7, a8);
        v77 = *(_DWORD *)(a1 + 12);
        if (!v77)
        {
LABEL_420:
          __break(0xC471u);
          JUMPOUT(0x197E98F78);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v77 - 1) + 9) & 1) != 0
          && *v585
          && (v51 - 1) <= 1)
        {
          v102 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          v103 = **v585;
          if (*(_QWORD *)(v102 + 1248) == v103)
          {
LABEL_378:
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'eval' in strict mode");
          }
          else
          {
            if (*(_QWORD *)(v102 + 880) != v103)
            {
              *v585 = 0;
              goto LABEL_149;
            }
LABEL_380:
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'arguments' in strict mode");
          }
          return 0;
        }
LABEL_149:
        *(_DWORD *)v590 = 0;
        *(_QWORD *)&v590[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v590[16] = a1;
        *(_QWORD *)(a1 + 7496) = v590;
        v78 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v590);
        *(_QWORD *)(*(_QWORD *)&v590[16] + 7496) = *(_QWORD *)&v590[8];
        if (v78)
        {
          v83 = v11->i32[0];
          if (v589.n128_u32[0] == v11->i32[0])
          {
            LODWORD(v51) = v78;
            do
            {
              v84 = *v13 - 21;
              if (v84 > 0xF)
                goto LABEL_181;
              ++*(_DWORD *)(a1 + 7304);
              if ((v51 & 0x80000000) != 0)
                goto LABEL_292;
              v87 = (unsigned __int16)v84 == 13 || (unsigned __int16)v84 == 14 || (unsigned __int16)v84 == 15;
              if (v51 > 0x19 || ((1 << v51) & 0x2030004) == 0)
              {
                v96 = *(_DWORD *)(a1 + 12);
                if (!v96)
                  goto LABEL_452;
                if ((_DWORD)v51 != 18
                  || ((v87 | *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (v96 - 1) + 9)) & 1) != 0)
                {
                  goto LABEL_190;
                }
              }
              ++*(_DWORD *)(a1 + 7296);
              v88 = *(_DWORD *)(a1 + 7400);
              v89 = *(_DWORD *)(a1 + 7412);
              v90 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v88;
              *(_DWORD *)(a1 + 7448) = v89;
              *(_DWORD *)(a1 + 7452) = v90;
              v91 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v91 + 4) = v88;
              v92 = *(_DWORD *)(a1 + 12);
              if (!v92)
                goto LABEL_421;
              v93 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v92 - 1) + 9) & 1;
              *(_BYTE *)(v91 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v91, a1 + 7368, 2u, v93, v79, v80, v81, v82);
              v94 = *(_DWORD *)(a1 + 12);
              if (!v94)
                goto LABEL_420;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v94 - 1) + 9) & 1) != 0
                && v51 <= 2
                && *v585)
              {
                v97 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
                v98 = **v585;
                if (*(_QWORD *)(v97 + 1248) == v98)
                  goto LABEL_378;
                if (*(_QWORD *)(v97 + 880) == v98)
                  goto LABEL_380;
                *v585 = 0;
              }
              *(_DWORD *)v590 = 0;
              *(_QWORD *)&v590[8] = *(_QWORD *)(a1 + 7496);
              *(_QWORD *)&v590[16] = a1;
              *(_QWORD *)(a1 + 7496) = v590;
              v95 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v590);
              *(_QWORD *)(*(_QWORD *)&v590[16] + 7496) = *(_QWORD *)&v590[8];
              if (!v95)
                goto LABEL_382;
              LODWORD(v51) = v95;
              v83 = v11->i32[0];
            }
            while (v589.n128_u32[0] == v11->i32[0]);
          }
          v589.n128_u32[0] = v83;
          if (*v13 < 21 || *v13 > 0x24)
          {
LABEL_181:
            v11->i32[0] = v589.n128_u32[0] + 1;
            return 27;
          }
LABEL_318:
          if (!*v584)
          {
            *(_QWORD *)v590 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            *(_QWORD *)&v590[8] = v209;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::StringView,char const(&)[22]>(a1, (uint64_t)v590);
          }
          return 0;
        }
LABEL_382:
        if (*v13 != 20 && (*v13 & 0x100000) == 0)
        {
          if (!*v584)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the right hand side of an assignment expression");
          return 0;
        }
LABEL_386:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        return 0;
      }
      *(_OWORD *)v590 = *(_OWORD *)v582;
      *(_OWORD *)&v590[20] = *v571;
      *(_OWORD *)&v590[34] = *(_OWORD *)((char *)v571 + 14);
      v134.i64[1] = *(_QWORD *)&v590[42];
      *(int32x2_t *)v134.i8 = v11[13];
      v135 = *(_QWORD *)(a1 + 7288);
      a10.n128_u64[0] = *(_QWORD *)v135;
      v136 = *(_BYTE *)(v135 + 56);
      v588 = v134;
      v589 = a10;
      v134.i64[1] = a10.n128_u64[0];
      *(int32x4_t *)&v590[56] = vrev64q_s32(v134);
      v591 = v136;
      v137 = *(_BYTE *)(v135 + 150);
      v592 = v137;
      v138 = *(WTF::StringImpl **)(v135 + 152);
      if (v138)
        *(_DWORD *)v138 += 2;
      v593 = v138;
      v139 = *v584;
      if (*v584)
        *(_DWORD *)v139 += 2;
      v594 = v139;
      *(_DWORD *)&v590[16] = 0;
      *(_BYTE *)(v135 + 150) = 0;
      v140 = *(WTF::StringImpl **)(v135 + 152);
      *(_QWORD *)(v135 + 152) = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2)
        {
          WTF::StringImpl::~StringImpl(v140, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
        }
        else
        {
          *(_DWORD *)v140 -= 2;
        }
      }
      v141 = *(_QWORD *)(v135 + 88);
      v142 = *(_QWORD *)(v135 + 96);
      v143 = (char *)v575 + v141;
      *(_QWORD *)(v135 + 80) = (char *)v575 + v141;
      *(_QWORD *)(v135 + 112) = v141 + v572;
      *(_DWORD *)(v135 + 20) = 0;
      *(_DWORD *)(v135 + 36) = 0;
      if ((unint64_t)v143 >= v142)
        v144 = 0;
      else
        v144 = *v143;
      *(_BYTE *)(v135 + 176) = v144;
      v145 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v145 = v574;
      *(_BYTE *)(v145 + 56) = v573;
      v146 = *(_DWORD *)(a1 + 7400);
      v147 = *(_DWORD *)(a1 + 7412);
      v148 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v146;
      *(_DWORD *)(a1 + 7448) = v147;
      *(_DWORD *)(a1 + 7452) = v148;
      *(_DWORD *)(v145 + 4) = v146;
      v149 = *(_DWORD *)(a1 + 12);
      if (!v149)
      {
        __break(0xC471u);
        JUMPOUT(0x197E99564);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v145, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v149 - 1) + 9) & 1, a5, a6, a7, a8);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v576;
      *(_OWORD *)v582 = v597;
      *(_DWORD *)(a1 + 7312) = 0;
      *(_DWORD *)(a1 + 7316) = v579;
      v157 = v585;
      *(_OWORD *)v585 = v595;
      v157[2] = v596;
      v11[5].i8[4] = v578;
      v11[5].i8[5] = v577;
      v158 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
        {
          WTF::StringImpl::~StringImpl(v158, v150, v151, v152, v153, v154, v155, v156);
          WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
        }
        else
        {
          *(_DWORD *)v158 -= 2;
        }
      }
      v159 = JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(a1, (uint64_t)a2);
      if (*v580 == 1)
      {
        if (v159 && *v13 == 21)
        {
LABEL_272:
          v168 = *(_DWORD *)(a1 + 7400);
          v169 = *(_DWORD *)(a1 + 7412);
          v170 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v168;
          *(_DWORD *)(a1 + 7448) = v169;
          *(_DWORD *)(a1 + 7452) = v170;
          v171 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v171 + 4) = v168;
          v172 = *(_DWORD *)(a1 + 12);
          if (!v172)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9956CLL);
          }
          v173 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v172 - 1) + 9) & 1;
          *(_BYTE *)(v171 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v171, a1 + 7368, 0, v173, v163, v164, v165, v166);
          LODWORD(v598) = 0;
          *((_QWORD *)&v598 + 1) = *(_QWORD *)(a1 + 7496);
          v599 = a1;
          *(_QWORD *)(a1 + 7496) = &v598;
          v174 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v598);
          *(_QWORD *)(v599 + 7496) = *((_QWORD *)&v598 + 1);
          v51 = 48;
          if (!v174)
          {
            if (*v584)
              v51 = 0;
            else
              v51 = 48;
          }
        }
        else
        {
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v588.u32[1], v588.u32[0], v162, v163, v164, v165, v166);
          v237 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v237 = v589.n128_u32[0];
          *(_BYTE *)(v237 + 56) = v136;
          v238 = *(_DWORD *)(a1 + 7400);
          v239 = *(_DWORD *)(a1 + 7412);
          v240 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v238;
          *(_DWORD *)(a1 + 7448) = v239;
          *(_DWORD *)(a1 + 7452) = v240;
          *(_DWORD *)(v237 + 4) = v238;
          v241 = *(_DWORD *)(a1 + 12);
          if (!v241)
          {
            __break(0xC471u);
            JUMPOUT(0x197E998E4);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v237, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v241 - 1) + 9) & 1, v233, v234, v235, v236);
          v242 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v242 + 4) = v589.n128_u32[1];
          v243 = *(_OWORD *)&v590[16];
          v244 = v582;
          *(_OWORD *)v582 = *(_OWORD *)v590;
          *((_OWORD *)v244 + 1) = v243;
          *((_OWORD *)v244 + 2) = *(_OWORD *)&v590[32];
          *((_WORD *)v244 + 24) = *(_WORD *)&v590[48];
          *(_BYTE *)(v242 + 150) = v137;
          JSC::Lexer<unsigned char>::setErrorMessage(v242, (WTF::AtomStringImpl *)&v593, v245, v246, v247, v248, v249, v250);
          WTF::String::operator=((unint64_t *)v584, (WTF::AtomStringImpl *)&v594, v251, v252, v253, v254, v255, v256);
          v51 = 0;
          v139 = v594;
        }
      }
      else
      {
        v167 = *v13;
        if (v159)
        {
          if (v167 == 21)
            goto LABEL_272;
          if (v167 != 20 && (v167 & 0x100000) == 0)
          {
            if (!*v584)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected '=' following assignment pattern");
            goto LABEL_355;
          }
LABEL_354:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_355;
        }
        if (v167 == 20 || (v167 & 0x100000) != 0)
          goto LABEL_354;
        if (!*v584)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse assignment pattern");
LABEL_355:
        v51 = 0;
      }
      v594 = 0;
      if (v139)
      {
        if (*(_DWORD *)v139 == 2)
        {
          WTF::StringImpl::~StringImpl(v139, v160, v161, v162, v163, v164, v165, v166);
          WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
        }
        else
        {
          *(_DWORD *)v139 -= 2;
        }
      }
      v175 = v593;
      v593 = 0;
      if (v175)
      {
        if (*(_DWORD *)v175 == 2)
        {
          WTF::StringImpl::~StringImpl(v175, v160, v161, v162, v163, v164, v165, v166);
          WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
        }
        else
        {
          *(_DWORD *)v175 -= 2;
        }
      }
      return v51;
    }
  }
LABEL_124:
  v65 = *v13;
  if (*v13 == 20 || ((v65 != 38) & ~v54) != 0)
    goto LABEL_125;
  v587 = v14;
  v593 = 0;
  v594 = 0;
  *(_OWORD *)v590 = *(_OWORD *)v582;
  *(_DWORD *)&v590[16] = 0;
  *(_OWORD *)&v590[20] = *v571;
  *(_OWORD *)&v590[34] = *(_OWORD *)((char *)v571 + 14);
  *(int32x2_t *)v323.i8 = v11[13];
  v324 = *(_QWORD *)(a1 + 7288);
  v325 = *(_BYTE *)(v324 + 56);
  v323.i64[1] = *(_QWORD *)v324;
  *(int32x4_t *)&v590[56] = vrev64q_s32(v323);
  v591 = v325;
  v592 = *(_BYTE *)(v324 + 150);
  v326 = *(WTF::StringImpl **)(v324 + 152);
  if (v326)
    *(_DWORD *)v326 += 2;
  v593 = v326;
  v565 = &v594;
  WTF::String::operator=((unint64_t *)&v594, (WTF::AtomStringImpl *)v584, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)&v590[16] = 0;
  JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v575, v572, v327, v328, v329, v330, v331);
  v336 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v336 = v574;
  *(_BYTE *)(v336 + 56) = v573;
  v337 = *(_DWORD *)(a1 + 7400);
  v338 = *(_DWORD *)(a1 + 7412);
  v339 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v337;
  *(_DWORD *)(a1 + 7448) = v338;
  *(_DWORD *)(a1 + 7452) = v339;
  *(_DWORD *)(v336 + 4) = v337;
  v340 = *(_DWORD *)(a1 + 12);
  if (!v340)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99BA8);
  }
  v348 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v336, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v340 - 1) + 9) & 1, v332, v333, v334, v335);
  *(_DWORD *)(a1 + 7368) = v348;
  *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v576;
  *(_OWORD *)v582 = v597;
  *(_DWORD *)(a1 + 7312) = 0;
  *(_DWORD *)(a1 + 7316) = v579;
  v349 = v585;
  *(_OWORD *)v585 = v595;
  v349[2] = v596;
  v350 = v588.i64[0];
  *(_BYTE *)(v588.i64[0] + 44) = v578;
  *(_BYTE *)(v350 + 45) = v577;
  v351 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v351)
  {
    if (*(_DWORD *)v351 == 2)
    {
      WTF::StringImpl::~StringImpl(v351, v341, v342, v343, v344, v345, v346, v347);
      WTF::fastFree(v469, v470, v471, v472, v473, v474, v475, v476);
      v348 = *v13;
    }
    else
    {
      *(_DWORD *)v351 -= 2;
    }
  }
  if (*v580 != 2 || v348 != 12)
  {
    v586 = 0;
    goto LABEL_433;
  }
  if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    || *(_BYTE *)(v588.i64[0] + 84))
  {
    v586 = 0;
LABEL_459:
    if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
    {
      if (!*v584)
      {
        *(_QWORD *)&v603 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],char const*>(a1, (const char **)&v603);
      }
      goto LABEL_517;
    }
    v600 = *(_OWORD *)v582;
    v401 = *(_DWORD *)(a1 + 7316);
    v603 = *(_OWORD *)v585;
    v604 = v585[2];
    v583 = *(unsigned __int8 *)(v588.i64[0] + 44);
    v581 = *(unsigned __int8 *)(v588.i64[0] + 45);
    v567 = *(_DWORD *)(a1 + 7408);
    v402 = *(unsigned int *)(a1 + 7404);
    v403 = *(_QWORD *)(a1 + 7288);
    v404 = *(_DWORD *)v403;
    v568 = *(_DWORD *)(v403 + 4);
    v569 = v401;
    v405 = *(_BYTE *)(v403 + 56);
    v406 = *(_DWORD *)(a1 + 7400);
    v407 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v406;
    *(_DWORD *)(a1 + 7448) = v407;
    *(_DWORD *)(a1 + 7452) = v402;
    *(_DWORD *)(v403 + 4) = v406;
    v408 = *(_DWORD *)(a1 + 12);
    if (!v408)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99BD0);
    }
    v409 = v402;
    v410 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v408 - 1) + 9) & 1;
    *(_BYTE *)(v403 + 56) = 0;
    v411 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v403, a1 + 7368, 0, v410, v393, v394, v395, v396);
    *(_DWORD *)(a1 + 7368) = v411;
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v567, v409, v412, v413, v414, v415, v416);
    v421 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v421 = v404;
    *(_BYTE *)(v421 + 56) = v405;
    v422 = *(_DWORD *)(a1 + 7400);
    v423 = *(_DWORD *)(a1 + 7412);
    v424 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v422;
    *(_DWORD *)(a1 + 7448) = v423;
    *(_DWORD *)(a1 + 7452) = v424;
    *(_DWORD *)(v421 + 4) = v422;
    v425 = *(_DWORD *)(a1 + 12);
    if (!v425)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99BD8);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v421, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v425 - 1) + 9) & 1, v417, v418, v419, v420);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v568;
    *(_OWORD *)v582 = v600;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v569;
    v426 = v585;
    *(_OWORD *)v585 = v603;
    v426[2] = v604;
    v427 = v588.i64[0];
    *(_BYTE *)(v588.i64[0] + 44) = v583;
    *(_BYTE *)(v427 + 45) = v581;
    v428 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v428)
    {
      if (*(_DWORD *)v428 == 2)
      {
        WTF::StringImpl::~StringImpl(v428, v390, v391, v392, v393, v394, v395, v396);
        WTF::fastFree(v485, v486, v487, v488, v489, v490, v491, v492);
      }
      else
      {
        *(_DWORD *)v428 -= 2;
      }
    }
    if (v411 != 38)
      goto LABEL_517;
LABEL_443:
    if (v587 == 2)
    {
      v400 = *(_DWORD *)(a1 + 12);
      if (!v400)
      {
        __break(0xC471u);
        JUMPOUT(0x197E99BC8);
      }
      JSC::Scope::revertToPreviousUsedVariables((JSC::Scope *)(*(_QWORD *)a1 + 720 * (v400 - 1)), v570, v391, v392, v393, v394, v395, v396);
    }
    v51 = JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionExpression<JSC::SyntaxChecker>(a1, (uint64_t)a2, v586);
    goto LABEL_447;
  }
  v557 = *(_DWORD *)(a1 + 7400);
  v558 = *(_DWORD *)(a1 + 7412);
  v559 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v557;
  *(_DWORD *)(a1 + 7448) = v558;
  *(_DWORD *)(a1 + 7452) = v559;
  v560 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v560 + 4) = v557;
  v561 = *(_DWORD *)(a1 + 12);
  if (!v561)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99C4CLL);
  }
  v562 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v561 - 1) + 9) & 1;
  *(_BYTE *)(v560 + 56) = 0;
  v348 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v560, a1 + 7368, 0, v562, v344, v345, v346, v347);
  *(_DWORD *)(a1 + 7368) = v348;
  v586 = 1;
LABEL_433:
  if (v348 != 2)
  {
    if (v348 != 12
      && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))&& !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))&& *v13 != 546&& (*v13 != 1048592|| **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    {
      goto LABEL_517;
    }
    goto LABEL_459;
  }
  v605 = *(_OWORD *)v582;
  v352 = *(_DWORD *)(a1 + 7316);
  v603 = *(_OWORD *)v585;
  v604 = v585[2];
  v583 = *(unsigned __int8 *)(v588.i64[0] + 44);
  v581 = *(unsigned __int8 *)(v588.i64[0] + 45);
  v353 = *(_DWORD *)(a1 + 7408);
  v566 = v352;
  v567 = v353;
  v354 = *(unsigned int *)(a1 + 7404);
  v355 = *(_QWORD *)(a1 + 7288);
  v357 = *(_DWORD *)v355;
  v356 = *(_DWORD *)(v355 + 4);
  v568 = *(unsigned __int8 *)(v355 + 56);
  v569 = v356;
  v358 = *(_DWORD *)(a1 + 7400);
  v359 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v358;
  *(_DWORD *)(a1 + 7448) = v359;
  *(_DWORD *)(a1 + 7452) = v354;
  *(_DWORD *)(v355 + 4) = v358;
  v360 = *(_DWORD *)(a1 + 12);
  if (!v360)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99BB0);
  }
  v361 = v354;
  v362 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v360 - 1) + 9) & 1;
  *(_BYTE *)(v355 + 56) = 0;
  v363 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v355, a1 + 7368, 0, v362, v344, v345, v346, v347);
  *(_DWORD *)(a1 + 7368) = v363;
  if (v363 == 3)
  {
    v368 = *(_DWORD *)(a1 + 7400);
    v369 = *(_DWORD *)(a1 + 7412);
    v370 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v368;
    *(_DWORD *)(a1 + 7448) = v369;
    *(_DWORD *)(a1 + 7452) = v370;
    v371 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v371 + 4) = v368;
    v372 = *(_DWORD *)(a1 + 12);
    if (!v372)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99BB8);
    }
    v373 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v372 - 1) + 9) & 1;
    *(_BYTE *)(v371 + 56) = 0;
    v374 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v371, a1 + 7368, 0, v373, v364, v365, v366, v367);
    *(_DWORD *)(a1 + 7368) = v374;
    v380 = v374 == 38;
LABEL_438:
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v567, v361, v375, v376, v377, v378, v379);
    v385 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v385 = v357;
    *(_BYTE *)(v385 + 56) = v568;
    v386 = *(_DWORD *)(a1 + 7400);
    v387 = *(_DWORD *)(a1 + 7412);
    v388 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v386;
    *(_DWORD *)(a1 + 7448) = v387;
    *(_DWORD *)(a1 + 7452) = v388;
    *(_DWORD *)(v385 + 4) = v386;
    v389 = *(_DWORD *)(a1 + 12);
    if (!v389)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99BC0);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v385, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v389 - 1) + 9) & 1, v381, v382, v383, v384);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v569;
    *(_OWORD *)v582 = v605;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v566;
    v397 = v585;
    *(_OWORD *)v585 = v603;
    v397[2] = v604;
    v398 = v588.i64[0];
    *(_BYTE *)(v588.i64[0] + 44) = v583;
    *(_BYTE *)(v398 + 45) = v581;
    v399 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v399)
    {
      if (*(_DWORD *)v399 == 2)
      {
        WTF::StringImpl::~StringImpl(v399, v390, v391, v392, v393, v394, v395, v396);
        WTF::fastFree(v477, v478, v479, v480, v481, v482, v483, v484);
      }
      else
      {
        *(_DWORD *)v399 -= 2;
      }
    }
    if (!v380)
      goto LABEL_517;
    goto LABEL_443;
  }
  v602[0] = *(_QWORD *)(a1 + 7216);
  v429 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  *(_QWORD *)&v600 = v429;
  *((_QWORD *)&v600 + 1) = v430;
  v601 = a1;
  if (*(_DWORD *)(v429 + 12) <= v430)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99BE0);
  }
  *(_DWORD *)(*(_QWORD *)v429 + 720 * v430 + 10) = *(_DWORD *)(*(_QWORD *)v429
                                                                             + 720 * v430
                                                                             + 10) & 0xFE8F007F | 0x1409980;
  JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded((uint64_t *)a1);
  HIDWORD(v564) = 0;
  v608[0] = 0;
  v607 = 0;
  v435 = *(_DWORD *)(a1 + 7368);
  while (2)
  {
    if (v435 == 37)
    {
      v495 = *(_DWORD *)(a1 + 7400);
      v496 = *(_DWORD *)(a1 + 7412);
      v497 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v495;
      *(_DWORD *)(a1 + 7448) = v496;
      *(_DWORD *)(a1 + 7452) = v497;
      v498 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v498 + 4) = v495;
      v499 = *(_DWORD *)(a1 + 12);
      if (!v499)
      {
        __break(0xC471u);
        JUMPOUT(0x197E99C34);
      }
      v500 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v499 - 1) + 9) & 1;
      *(_BYTE *)(v498 + 56) = 0;
      v501 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v498, a1 + 7368, 0, v500, v431, v432, v433, v434);
      *(_DWORD *)(a1 + 7368) = v501;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v501, *(_QWORD **)(a1 + 7376)))
      {
        if (!*v584)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
        goto LABEL_537;
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v602, 4, &v607, v608, 0);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_537;
      if (*v13 == 6)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_537;
      }
      v439 = 0;
      LODWORD(v440) = 1;
    }
    else
    {
      if (v435 == 3)
        goto LABEL_489;
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v602, 4, &v607, v608, 0))
      {
        if (*v13 == 20 || (*v13 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*v584)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_537;
      }
      v439 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, v602);
      if (v439)
        HIDWORD(v564) = 1;
      v440 = (unint64_t)*v584;
      if (*v584)
        goto LABEL_537;
    }
    if (v607)
    {
      if ((v564 & 0x100000000) != 0)
      {
        v606 = *v607;
        v563 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v608[0])
        {
          v606 = *v607;
          if ((_DWORD)v440)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, &v606);
          else
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, &v606);
          goto LABEL_537;
        }
        v606 = *v607;
        v563 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, &v606, v563);
      goto LABEL_537;
    }
    if (v439)
      v441 = 1;
    else
      v441 = v440;
    if ((v441 & 1) != 0 || v608[0])
    {
      v493 = *(_DWORD *)(a1 + 12);
      if (!v493)
      {
        __break(0xC471u);
        JUMPOUT(0x197E99C2CLL);
      }
      v494 = *(_QWORD *)a1 + 720 * (v493 - 1);
      *(_DWORD *)(v494 + 10) = *(_DWORD *)(v494 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if (*v13 != 6)
      LOBYTE(v440) = 1;
    if ((v440 & 1) == 0)
    {
      v442 = *(_DWORD *)(a1 + 7400);
      v443 = *(_DWORD *)(a1 + 7412);
      v444 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v442;
      *(_DWORD *)(a1 + 7448) = v443;
      *(_DWORD *)(a1 + 7452) = v444;
      v445 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v445 + 4) = v442;
      v446 = *(_DWORD *)(a1 + 12);
      if (!v446)
      {
        __break(0xC471u);
        JUMPOUT(0x197E99C1CLL);
      }
      v447 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v446 - 1) + 9) & 1;
      *(_BYTE *)(v445 + 56) = 0;
      v435 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v445, a1 + 7368, 0, v447, v431, v432, v433, v434);
      *(_DWORD *)(a1 + 7368) = v435;
      continue;
    }
    break;
  }
  if (*v13 != 3)
  {
LABEL_537:
    v380 = 0;
    goto LABEL_491;
  }
LABEL_489:
  v448 = *(_DWORD *)(a1 + 7400);
  v449 = *(_DWORD *)(a1 + 7412);
  v450 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v448;
  *(_DWORD *)(a1 + 7448) = v449;
  *(_DWORD *)(a1 + 7452) = v450;
  v451 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v451 + 4) = v448;
  v452 = *(_DWORD *)(a1 + 12);
  if (!v452)
  {
    __break(0xC471u);
    JUMPOUT(0x197E99C24);
  }
  v453 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v452 - 1) + 9) & 1;
  *(_BYTE *)(v451 + 56) = 0;
  v454 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v451, a1 + 7368, 0, v453, v431, v432, v433, v434);
  *(_DWORD *)(a1 + 7368) = v454;
  v380 = v454 == 38;
LABEL_491:
  if (!*v584)
  {
    v601 = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v598, (uint64_t *)a1, 0, v438, v431, v432, v433, v434);
    std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)&v598, v455, v456, v457, v458, v459, v460, v461);
    JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)&v600, v462, v463, v464, v465, v466, v467, v468);
    goto LABEL_438;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)&v600, v436, v437, v438, v431, v432, v433, v434);
LABEL_517:
  if (v65 != 38)
  {
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v590[56], *(unsigned int *)&v590[60], v392, v393, v394, v395, v396);
    v530 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v530 = *(_DWORD *)&v590[68];
    *(_BYTE *)(v530 + 56) = v591;
    v531 = *(_DWORD *)(a1 + 7400);
    v532 = *(_DWORD *)(a1 + 7412);
    v533 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v531;
    *(_DWORD *)(a1 + 7448) = v532;
    *(_DWORD *)(a1 + 7452) = v533;
    *(_DWORD *)(v530 + 4) = v531;
    v534 = *(_DWORD *)(a1 + 12);
    if (!v534)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99C44);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v530, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v534 - 1) + 9) & 1, v526, v527, v528, v529);
    v535 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v535 + 4) = *(_DWORD *)&v590[64];
    v536 = *(_OWORD *)&v590[16];
    v537 = v582;
    *(_OWORD *)v582 = *(_OWORD *)v590;
    *((_OWORD *)v537 + 1) = v536;
    *((_OWORD *)v537 + 2) = *(_OWORD *)&v590[32];
    *((_WORD *)v537 + 24) = *(_WORD *)&v590[48];
    *(_BYTE *)(v535 + 150) = v592;
    JSC::Lexer<unsigned char>::setErrorMessage(v535, (WTF::AtomStringImpl *)&v593, v538, v539, v540, v541, v542, v543);
    WTF::String::operator=((unint64_t *)v584, (WTF::AtomStringImpl *)v565, v544, v545, v546, v547, v548, v549);
    JSC::Parser<JSC::Lexer<unsigned char>>::SavePointWithError::~SavePointWithError((uint64_t)v590, v550, v551, v552, v553, v554, v555, v556);
    v14 = v587;
    v11 = (int32x2_t *)v588.i64[0];
    goto LABEL_125;
  }
  if (!*v584)
  {
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v590[56], *(unsigned int *)&v590[60], v392, v393, v394, v395, v396);
    v506 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v506 = *(_DWORD *)&v590[68];
    *(_BYTE *)(v506 + 56) = v591;
    v507 = *(_DWORD *)(a1 + 7400);
    v508 = *(_DWORD *)(a1 + 7412);
    v509 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v507;
    *(_DWORD *)(a1 + 7448) = v508;
    *(_DWORD *)(a1 + 7452) = v509;
    *(_DWORD *)(v506 + 4) = v507;
    v510 = *(_DWORD *)(a1 + 12);
    if (!v510)
    {
      __break(0xC471u);
      JUMPOUT(0x197E99C3CLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v506, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v510 - 1) + 9) & 1, v502, v503, v504, v505);
    v511 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v511 + 4) = *(_DWORD *)&v590[64];
    v512 = *(_OWORD *)&v590[16];
    v513 = v582;
    *(_OWORD *)v582 = *(_OWORD *)v590;
    *((_OWORD *)v513 + 1) = v512;
    *((_OWORD *)v513 + 2) = *(_OWORD *)&v590[32];
    *((_WORD *)v513 + 24) = *(_WORD *)&v590[48];
    *(_BYTE *)(v511 + 150) = v592;
    JSC::Lexer<unsigned char>::setErrorMessage(v511, (WTF::AtomStringImpl *)&v593, v514, v515, v516, v517, v518, v519);
    WTF::String::operator=((unint64_t *)v584, (WTF::AtomStringImpl *)v565, v520, v521, v522, v523, v524, v525);
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  v51 = 0;
LABEL_447:
  JSC::Parser<JSC::Lexer<unsigned char>>::SavePointWithError::~SavePointWithError((uint64_t)v590, v390, v391, v392, v393, v394, v395, v396);
  return v51;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3)
{
  char *v4;
  char v5;
  char v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v4 = (char *)(a1 + 7474);
  if (a3)
    v5 = 11;
  else
    v5 = 6;
  v6 = *v4;
  *v4 = v5;
  if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 1, 0, 1, (uint64_t)&v9, 0) & 1) != 0)
  {
    result = 12;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 7368);
    if (v8 == 20 || (v8 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse arrow function expression");
    }
    result = 0;
  }
  *v4 = v6;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::SavePointWithError::~SavePointWithError(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::StringView,char const(&)[22]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Left hand side of operator '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' must be a reference");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[57]>(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v26 = off_1E3572250;
    v27 = (WTF *)v29;
    v28 = xmmword_199122F80;
    v29[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " can't be the left hand side of an assignment expression");
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ".");
    v26[5]((WTF::StringPrintStream *)&v26);
    WTF::String::fromUTF8WithLatin1Fallback(v27, v28, &v25);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v25, v3, v4, v5, v6, v7, v8);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (v27 != (WTF *)v29)
      WTF::fastFree((unint64_t)v27, v9, v10, v11, v12, v13, v14, v15);
  }
}

const char *JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::SyntaxChecker>(int a1)
{
  const char *result;

  if (a1 == 0x80000000)
    return "new.target";
  if (a1 == -2147483647)
    return "import.meta";
  result = (const char *)4150;
  __break(0xC471u);
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[79]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[139]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to dis"
      "ambiguate the expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[112]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Coalescing and logical operators used together in the same expression; parentheses must be used to disambiguate");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "The ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", " operator requires a reference expression");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

const char *JSC::operatorString(JSC *this, int a2)
{
  int v2;
  const char *result;
  const char *v4;
  const char *v5;

  if (a2 <= 773)
  {
    v2 = (int)this;
    result = "logical-not";
    switch(a2)
    {
      case 256:
      case 258:
        v4 = "increment";
        v5 = "prefix-increment";
        goto LABEL_9;
      case 257:
      case 259:
        v4 = "decrement";
        v5 = "prefix-decrement";
LABEL_9:
        if (v2)
          return v5;
        else
          return v4;
      case 260:
        return result;
      case 261:
        return "bitwise-not";
      default:
        goto LABEL_15;
    }
  }
  if (a2 == 774)
    return "typeof";
  if (a2 == 775)
    return "void";
  if (a2 != 776)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197E9A778);
  }
  return "delete";
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*,char const(&)[9]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse subexpression of ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", "operator");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v26 = off_1E3572250;
    v27 = (WTF *)v29;
    v28 = xmmword_199122F80;
    v29[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " can't come after a prefix operator");
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ".");
    v26[5]((WTF::StringPrintStream *)&v26);
    WTF::String::fromUTF8WithLatin1Fallback(v27, v28, &v25);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v25, v3, v4, v5, v6, v7, v8);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (v27 != (WTF *)v29)
      WTF::fastFree((unint64_t)v27, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Prefix ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", " operator applied to value that is not a reference");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v26 = off_1E3572250;
    v27 = (WTF *)v29;
    v28 = xmmword_199122F80;
    v29[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " can't come before a postfix operator");
    WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ".");
    v26[5]((WTF::StringPrintStream *)&v26);
    WTF::String::fromUTF8WithLatin1Fallback(v27, v28, &v25);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v25, v3, v4, v5, v6, v7, v8);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (v27 != (WTF *)v29)
      WTF::fastFree((unint64_t)v27, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "'");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' cannot be modified in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot delete unqualified property '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot delete private field ");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot use 'await' as a parameter name ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Lexer<unsigned char>::setErrorMessage(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "argument list");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::SyntaxChecker>(uint64_t a1, char a2, int a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;

  if ((a2 & 1) == 0)
  {
    v10 = *(_DWORD *)(a1 + 7368);
    if (v10 != 1)
    {
      if (v10 != 20 && (v10 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[67]>(a1);
        return 0;
      }
      goto LABEL_17;
    }
  }
  v11 = JSC::Lexer<unsigned char>::scanTemplateString(*(unsigned int **)(a1 + 7288), a1 + 7368, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v11;
  if (v11 != 15)
  {
    if (v11 != 20 && (v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected an template element");
      return 0;
    }
LABEL_17:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  *a4 = *(_BYTE *)(a1 + 7392);
  v16 = *(_DWORD *)(a1 + 7400);
  v17 = *(_DWORD *)(a1 + 7412);
  v18 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v16;
  *(_DWORD *)(a1 + 7448) = v17;
  *(_DWORD *)(a1 + 7452) = v18;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v16;
  v20 = *(_DWORD *)(a1 + 12);
  if (v20)
  {
    v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v21, v12, v13, v14, v15);
    return 49;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[67]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a closing '}' following an expression in template literal");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;

  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result > 0x30 || ((1 << result) & 0x1000002030004) == 0)
  {
    v16 = *(_DWORD **)(a1 + 7496);
    if (v16 && *v16 == 1)
      *v16 = 0;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    return 0;
  }
  v10 = *(_DWORD *)(a1 + 12);
  if (v10)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v10 - 1) + 9) & 1) == 0)
      return 31;
    v12 = *(uint64_t **)(a1 + 7320);
    v11 = 31;
    if (!v12 || (result - 1) > 1)
      return v11;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v14 = *v12;
    if (*(_QWORD *)(v13 + 1248) != *v12 && *(_QWORD *)(v13 + 880) != v14)
      return 31;
    v15 = *(_DWORD **)(a1 + 7496);
    if (v15 && *v15 == 1)
      *v15 = 0;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v17 = v14;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v17);
    }
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestElement<JSC::SyntaxChecker>(uint64_t a1, unsigned int a2, WTF::AtomStringImpl **a3)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL isAllowedIdentifierLet;
  BOOL isAllowedIdentifierYield;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *Range;
  uint64_t v36;

  v4 = a1 + 7344;
  if ((unint64_t)&v33 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v16 = 0;
      *(_BYTE *)(v4 + 8) = 1;
      return v16;
    }
    return 0;
  }
  v7 = *(_DWORD *)(a1 + 7368);
  if (v7 != 12)
  {
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v7, *(_QWORD **)(a1 + 7376));
    v7 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v7, *(_QWORD **)(a1 + 7376)), v7 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if (a2 - 1 <= 1 && v7 == 544)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
        return 0;
      }
    }
    else if (v7 != 546)
    {
      if (v7 != 1048592
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v26 = *(_DWORD *)(a1 + 12);
        if (!v26)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x197E9BB28);
        }
        v27 = v26 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 9) & 1) != 0 && v7 == 532)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v36 = v28;
            v34 = (const char *)JSC::destructuringKindToVariableKindName(a2);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&Range, &v34);
          }
          return 0;
        }
        if ((v7 - 531) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v36 = v29;
            v34 = (const char *)JSC::destructuringKindToVariableKindName(a2);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v34);
          }
          return 0;
        }
        if ((v7 & 0x200) != 0)
        {
          if ((v7 - 544) >= 3)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              v36 = v31;
              v34 = (const char *)JSC::destructuringKindToVariableKindName(a2);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v34);
            }
            return 0;
          }
          if (v7 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v30 = (const char *)JSC::destructuringKindToVariableKindName(a2);
                v34 = "in strict mode";
                Range = v30;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, &Range, &v34);
              }
              return 0;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 9) & 1) != 0
                 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              return 0;
            Range = (const char *)JSC::destructuringKindToVariableKindName(a2);
            v34 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
            v32 = "Cannot use 'yield' as a ";
            goto LABEL_42;
          }
        }
        if (v7 == 20 || (v7 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a binding element");
        }
        return 0;
      }
      v7 = 1048592;
    }
  }
  if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v7, *(_QWORD **)(a1 + 7376)))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      Range = (const char *)JSC::destructuringKindToVariableKindName(a2);
      v34 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
      v32 = "Cannot use 'await' as a ";
LABEL_42:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v32, &Range, &v34);
    }
    return 0;
  }
  v16 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::SyntaxChecker>(a1, a2, *(WTF::AtomStringImpl **)(a1 + 7376), a3, v8, v9, v10, v11);
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
    goto LABEL_50;
  v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, a1 + 7368, 0, v22, v12, v13, v14, v15);
  return v16;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<unsigned char>>::FunctionDefinitionType,std::optional<int>)::{lambda(WTF::UniquedStringImpl *)#1}::operator()(uint64_t **a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  char hasDeclaredParameter;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  WTF::StringImpl *v40;

  v8 = **a1;
  v9 = *((_DWORD *)*a1 + 2);
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v12 = *(_QWORD *)v8 + 720 * v9;
  if (!this)
  {
    if ((JSC::Scope::hasDeclaredParameter(v12, 0, a3, a4, a5, a6, a7, a8) & 1) != 0)
      return;
LABEL_5:
    WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)v39, (unsigned int *)a1[1], (uint64_t)this);
    v27 = a1[2];
    v28 = (uint64_t *)*v27;
    v29 = *((_DWORD *)v27 + 2);
    if (*((_DWORD *)v28 + 3) > v29)
    {
      v30 = *v28;
      v40 = this;
      WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v30 + 720 * v29 + 696), (uint64_t *)&v40, v22, v23, v24, v25, v26, (uint64_t)v39);
      return;
    }
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x197E9BE08);
  }
  *(_DWORD *)this += 2;
  hasDeclaredParameter = JSC::Scope::hasDeclaredParameter(v12, this, a3, a4, a5, a6, a7, a8);
  v21 = hasDeclaredParameter;
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    if ((hasDeclaredParameter & 1) != 0)
      return;
    goto LABEL_5;
  }
  WTF::StringImpl::~StringImpl(this, v14, v15, v16, v17, v18, v19, v20);
  WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  if ((v21 & 1) == 0)
    goto LABEL_5;
}

_QWORD *WTF::Vector<WTF::UniquedStringImpl *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t JSC::FuncExprNode::FuncExprNode(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(a1 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = 126;
  *(_BYTE *)(a1 + 26) = 0;
  *(_QWORD *)a1 = off_1E357AA60;
  *(_QWORD *)(a1 + 32) = a4;
  v12 = *a5;
  if (*a5)
    ++*(_DWORD *)(v12 + 8);
  v13 = *(_DWORD **)(a4 + 80);
  *(_QWORD *)(a4 + 80) = v12;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  *(_QWORD *)(a4 + 88) = a5[1];
  *(_QWORD *)(a4 + 96) = a5[2];
  v14 = (_DWORD *)*a3;
  if (*a3)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)(a4 + 40);
  *(_QWORD *)(a4 + 40) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  *(_DWORD *)(a4 + 36) = 1;
  *(_QWORD *)a1 = &off_1E358A860;
  return a1;
}

uint64_t JSC::BaseFuncExprNode::isBaseFuncExprNode(JSC::BaseFuncExprNode *this)
{
  return 1;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int i;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  WTF::AtomStringImpl *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  WTF::AtomStringImpl *NumericIdentifier;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  BOOL v91;
  unsigned __int8 v92;
  char v93;
  _QWORD *MethodDefinition;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  char v104;
  char v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  unint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v168;
  char v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  _DWORD *v183;
  unsigned int v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t Property;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::AtomStringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WTF::AtomStringImpl *v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  int v288;
  int v289;
  int v290;
  WTF::StringImpl *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  const WTF::StringImpl *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  int v325;
  JSC::Scope *v326;
  unsigned int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  WTF::AtomStringImpl *v334;
  uint64_t v335;
  int v336;
  unint64_t *v337;
  WTF::AtomStringImpl *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  WTF::StringImpl *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  WTF::AtomStringImpl *v355;
  int v356;
  int v357;
  int v358;
  unint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  int v367;
  unint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  int v376;
  unint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  const char *v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  const char *v432;
  const char *v433;
  const char *v434;
  const char *v435;
  const char *v436;
  _QWORD *v437;
  unsigned int *v438;
  uint64_t v439;
  uint64_t *v440;
  _QWORD *v441;
  char v442;
  char v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char v453;
  __int128 *v454;
  uint64_t v455;
  uint64_t v457;
  unsigned int v458;
  unint64_t v459;
  unint64_t v460;
  char *v461;
  __int128 v462;
  WTF *v463;
  int v464;
  const char *v465;
  __int128 v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  int v470;
  __int128 v471;
  uint64_t v472;
  int v473;
  _BYTE v474[72];

  v472 = *(_QWORD *)(a1 + 7416);
  v473 = *(_DWORD *)(a1 + 7424);
  v454 = (__int128 *)(a1 + 7400);
  v471 = *(_OWORD *)(a1 + 7400);
  v7 = DWORD2(v471);
  *(_DWORD *)(a4 + 16) = v471;
  *(_DWORD *)(a4 + 20) = *(_DWORD *)(a1 + 7408) - *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a4 + 8) = v7;
  v8 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v14 = v9;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0C8);
  }
  v15 = v8;
  v16 = v9;
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) |= 0x8080u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0D0);
  }
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) &= ~0x40u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0D8);
  }
  *(_BYTE *)(*(_QWORD *)v8 + 720 * v9 + 9) |= 1u;
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0E0);
  }
  v22 = (unsigned int *)(a1 + 7368);
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v24 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v20, a1 + 7368, 0, v23, v10, v11, v12, v13);
  *(_DWORD *)(a1 + 7368) = v24;
  v30 = *(_DWORD *)(a1 + 12);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0E8);
  }
  v461 = (char *)(a1 + 7344);
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 12) & 0x10) != 0)
  {
    if (v24 == 12)
      goto LABEL_8;
    if (v24 == 546)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a class name within static block");
      goto LABEL_324;
    }
  }
  else if (v24 == 12)
  {
    goto LABEL_8;
  }
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierAwait(a1, v24, *(_QWORD **)(a1 + 7376)))
  {
    if (a3 != 1)
      goto LABEL_11;
    v318 = *v22;
    if (!*v22)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Class statements must have a name");
      goto LABEL_324;
    }
    v319 = *(_DWORD *)(a1 + 12);
    if (!v319)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9E160);
    }
    v320 = v319 - 1;
    v321 = *(_QWORD *)a1;
    if (v318 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v320 + 9) & 1) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)v474 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        *(_QWORD *)&v474[8] = v322;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11],char const(&)[16]>(a1, (uint64_t)v474);
      }
      goto LABEL_324;
    }
    if (v318 - 531 <= 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)v474 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        *(_QWORD *)&v474[8] = v398;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v474);
      }
      goto LABEL_324;
    }
    if ((v318 & 0x200) == 0)
    {
LABEL_323:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_324;
    }
    if (v318 - 544 >= 3)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)v474 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        *(_QWORD *)&v474[8] = v423;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v474);
      }
      goto LABEL_324;
    }
    if (v318 == 546)
    {
      if (*v461 && (*(_DWORD *)(v321 + 720 * v320 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
        goto LABEL_323;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_324;
      *(_QWORD *)v474 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
      v432 = "Cannot use 'await' as a ";
    }
    else
    {
      if (v318 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v320 + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)v474 = "in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[11],char const(&)[2],char const*>(a1, (const char **)v474);
          }
          goto LABEL_324;
        }
        goto LABEL_323;
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v320 + 9) & 1) == 0 && (*(_BYTE *)(v321 + 720 * v320 + 11) & 2) == 0)
        goto LABEL_323;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_324;
      *(_QWORD *)v474 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
      v432 = "Cannot use 'yield' as a ";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[11],char const(&)[2],char const*>(a1, v432, (const char **)v474);
    goto LABEL_324;
  }
  v30 = *(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)a4 = *(_QWORD *)(a1 + 7376);
  v31 = *(_DWORD *)(a1 + 7400);
  v32 = *(_DWORD *)(a1 + 7412);
  v33 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v31;
  *(_DWORD *)(a1 + 7448) = v32;
  *(_DWORD *)(a1 + 7452) = v33;
  v34 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v34 + 4) = v31;
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0F0);
  }
  v35 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1;
  *(_BYTE *)(v34 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v34, a1 + 7368, 0, v35, v26, v27, v28, v29);
  if (*(_DWORD *)(v15 + 12) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E0F8);
  }
  if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v15 + 720 * v16, *(WTF::AtomStringImpl **)a4, 1, v36, v37, v38, v39, v40) & 1) != 0)
  {
    if (*v22 != 20 && (*v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)v474 = **(_QWORD **)a4;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(a1, (uint64_t *)v474);
      }
      goto LABEL_324;
    }
    goto LABEL_323;
  }
LABEL_11:
  v469 = v472;
  v470 = v473;
  v41 = *v22;
  if (*v22 != 542)
  {
    v48 = 0;
    goto LABEL_14;
  }
  v42 = *(_DWORD *)(a1 + 7400);
  v43 = *(_DWORD *)(a1 + 7412);
  v44 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v42;
  *(_DWORD *)(a1 + 7448) = v43;
  *(_DWORD *)(a1 + 7452) = v44;
  v45 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v45 + 4) = v42;
  v46 = *(_DWORD *)(a1 + 12);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E100);
  }
  v47 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v46 - 1) + 9) & 1;
  *(_BYTE *)(v45 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v45, a1 + 7368, 0, v47, v26, v27, v28, v29);
  v469 = *(_QWORD *)(a1 + 7416);
  v470 = *(_DWORD *)(a1 + 7424);
  v48 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2);
  v41 = *(_DWORD *)(a1 + 7368);
  if (!v48)
  {
    if (v41 != 20 && (v41 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the parent class name");
      goto LABEL_324;
    }
    goto LABEL_323;
  }
LABEL_14:
  if (v48)
    v49 = 2;
  else
    v49 = 1;
  v453 = v49;
  v467 = *(_QWORD *)(a1 + 7444);
  v468 = *(_DWORD *)(a1 + 7452);
  if (v41)
  {
    if (v41 != 20 && (v41 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '{' at the start of a class body");
      goto LABEL_324;
    }
    goto LABEL_323;
  }
  v447 = v48;
  v50 = *(_DWORD *)(a1 + 7400);
  v51 = *(_DWORD *)(a1 + 7412);
  v52 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v50;
  *(_DWORD *)(a1 + 7448) = v51;
  *(_DWORD *)(a1 + 7452) = v52;
  v53 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v53 + 4) = v50;
  v54 = *(_DWORD *)(a1 + 12);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E108);
  }
  v55 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1;
  *(_BYTE *)(v53 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v53, a1 + 7368, 0, v55, v26, v27, v28, v29);
  v56 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E110);
  }
  v451 = v56;
  *(_DWORD *)(*(_QWORD *)v56 + 720 * v57 + 10) |= 0x8080u;
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E118);
  }
  *(_DWORD *)(*(_QWORD *)v56 + 720 * v57 + 10) &= ~0x40u;
  v445 = v57;
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9E120);
  }
  v444 = 0;
  v64 = 0;
  v449 = 0;
  v450 = 0;
  v452 = 0;
  v448 = 0;
  v65 = *(_QWORD *)v56 + 720 * v57;
  *(_BYTE *)(v65 + 9) |= 1u;
  *(_DWORD *)(v65 + 10) |= 0x8000000u;
  v446 = v57;
  v455 = a2;
LABEL_23:
  v457 = v64;
  while (2)
  {
    for (i = *v22; ; *(_DWORD *)(a1 + 7368) = i)
    {
      if (i == 1)
      {
        v132 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a4 + 12) = v132 - 1;
        v133 = *(_DWORD *)(a1 + 7400);
        v134 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v133;
        *(_DWORD *)(a1 + 7448) = v132;
        *(_DWORD *)(a1 + 7452) = v134;
        v135 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v135 + 4) = v133;
        v136 = *(_DWORD *)(a1 + 12);
        if (!v136)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E128);
        }
        v137 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v136 - 1) + 9) & 1;
        *(_BYTE *)(v135 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v135, a1 + 7368, 0, v137, v60, v61, v62, v63);
        v144 = v448;
        v143 = BYTE4(v448);
        if (((v449 | v448 | HIDWORD(v449) | HIDWORD(v448)) & 1) != 0)
        {
          JSC::Symbols::privateBrandPrivateName[0] += 2;
          *(_QWORD *)&v466 = JSC::Symbols::privateBrandPrivateName;
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E130);
          }
          JSC::Scope::declareLexicalVariable(*(_QWORD *)v451 + 720 * v446, (WTF::AtomStringImpl *)&v466, 1, v138, v139, v140, v141, v142);
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E138);
          }
          JSC::Scope::useVariable(*(_QWORD *)v451 + 720 * v446, (uint64_t)JSC::Symbols::privateBrandPrivateName, 0);
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E140);
          }
          v236 = *(_QWORD *)v451;
          *(_QWORD *)&v462 = JSC::Symbols::privateBrandPrivateName;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v236 + 720 * v446 + 696), (uint64_t *)&v462, v231, v232, v233, v234, v235, (uint64_t)v474);
          if (JSC::Symbols::privateBrandPrivateName[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v237, v238, v239, v240, v241, v242, v243);
            WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
          }
          else
          {
            JSC::Symbols::privateBrandPrivateName[0] -= 2;
          }
          JSC::Symbols::privateClassBrandPrivateName[0] += 2;
          *(_QWORD *)&v466 = JSC::Symbols::privateClassBrandPrivateName;
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E148);
          }
          JSC::Scope::declareLexicalVariable(*(_QWORD *)v451 + 720 * v446, (WTF::AtomStringImpl *)&v466, 1, v239, v240, v241, v242, v243);
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E150);
          }
          JSC::Scope::useVariable(*(_QWORD *)v451 + 720 * v446, (uint64_t)JSC::Symbols::privateClassBrandPrivateName, 0);
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E158);
          }
          v249 = *(_QWORD *)v451;
          *(_QWORD *)&v462 = JSC::Symbols::privateClassBrandPrivateName;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v249 + 720 * v446 + 696), (uint64_t *)&v462, v244, v245, v246, v247, v248, (uint64_t)v474);
          v144 = v448;
          v143 = BYTE4(v448);
          if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, v250, v251, v138, v139, v140, v141, v142);
            WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
          }
          else
          {
            JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
          }
        }
        if (v450)
          *(_BYTE *)(v450 + 48) = (v144 | v143) & 1;
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v474, (uint64_t *)a1, 1, v138, v139, v140, v141, v142);
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v462, (uint64_t *)a1, 1, v145, v146, v147, v148, v149);
        v157 = JSC::ASTBuilder::createClassExpr(*(JSC::ParserArena **)(a2 + 8), **(_DWORD ***)(a2 + 16), (uint64_t)&v471, (uint64_t *)a4, (uint64_t *)&v462, (uint64_t *)v474, v452, v447, v450, &v472, &v469, &v467);
        v158 = v463;
        if (v463)
        {
          v463 = 0;
          v464 = 0;
          WTF::fastFree((unint64_t)v158, v150, v151, v152, v153, v154, v155, v156);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v462, (WTF::AtomStringImpl *)v150, v151, v152, v153, v154, v155, v156);
        v166 = *(_QWORD *)&v474[24];
        if (*(_QWORD *)&v474[24])
        {
          *(_QWORD *)&v474[24] = 0;
          *(_DWORD *)&v474[32] = 0;
          WTF::fastFree(v166, v159, v160, v161, v162, v163, v164, v165);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v474, (WTF::AtomStringImpl *)v159, v160, v161, v162, v163, v164, v165);
        return v157;
      }
      if (i != 17)
        break;
      v276 = *(_DWORD *)(a1 + 7400);
      v277 = *(_DWORD *)(a1 + 7412);
      v278 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v276;
      *(_DWORD *)(a1 + 7448) = v277;
      *(_DWORD *)(a1 + 7452) = v278;
      v279 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v279 + 4) = v276;
      v280 = *(_DWORD *)(a1 + 12);
      if (!v280)
      {
        __break(0xC471u);
        JUMPOUT(0x197E9E058);
      }
      v281 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v280 - 1) + 9) & 1;
      *(_BYTE *)(v279 + 56) = 0;
      i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v279, a1 + 7368, 0, v281, v60, v61, v62, v63);
    }
    v462 = *v454;
    v458 = *(_DWORD *)(a1 + 7408);
    v67 = *(_QWORD *)(a1 + 7216);
    if (i == 532)
    {
      v70 = *(WTF::AtomStringImpl **)(v67 + 41952);
      if (**(_QWORD **)(a1 + 7376) != *((_QWORD *)v70 + 49))
      {
        v69 = 5;
        i = 532;
        v68 = 1;
        goto LABEL_32;
      }
      v466 = *(_OWORD *)(a1 + 7296);
      v103 = *(_DWORD *)(a1 + 7316);
      *(_QWORD *)&v474[16] = *(_QWORD *)(a1 + 7336);
      *(_OWORD *)v474 = *(_OWORD *)(a1 + 7320);
      v104 = *v461;
      v105 = *(_BYTE *)(a1 + 7345);
      v106 = *(_DWORD *)(v455 + 1052);
      v107 = *(unsigned int *)(a1 + 7404);
      v108 = *(_QWORD *)(a1 + 7288);
      v110 = *(_DWORD *)v108;
      v109 = *(_DWORD *)(v108 + 4);
      v111 = *(_BYTE *)(v108 + 56);
      v112 = *(_DWORD *)(a1 + 7400);
      v113 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v112;
      *(_DWORD *)(a1 + 7448) = v113;
      *(_DWORD *)(a1 + 7452) = v107;
      *(_DWORD *)(v108 + 4) = v112;
      v114 = *(_DWORD *)(a1 + 12);
      if (!v114)
      {
        __break(0xC471u);
        JUMPOUT(0x197E9E050);
      }
      v115 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v114 - 1) + 9) & 1;
      *(_BYTE *)(v108 + 56) = 0;
      v116 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v108, a1 + 7368, 0, v115, v60, v61, v62, v63);
      *(_DWORD *)(a1 + 7368) = v116;
      if (v116 <= 0x15 && ((1 << v116) & 0x220004) != 0)
      {
        JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v458, v107, (uint64_t)v59, v60, v61, v62, v63);
        v286 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v286 = v110;
        *(_BYTE *)(v286 + 56) = v111;
        v287 = *(_DWORD *)(a1 + 7400);
        v288 = *(_DWORD *)(a1 + 7412);
        v289 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v287;
        *(_DWORD *)(a1 + 7448) = v288;
        *(_DWORD *)(a1 + 7452) = v289;
        *(_DWORD *)(v286 + 4) = v287;
        v290 = *(_DWORD *)(a1 + 12);
        if (!v290)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9DFF8);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v286, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v290 - 1) + 9) & 1, v282, v283, v284, v285);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v109;
        *(_OWORD *)(a1 + 7296) = v466;
        *(_DWORD *)(a1 + 7312) = v106;
        *(_DWORD *)(a1 + 7316) = v103;
        *(_OWORD *)(a1 + 7320) = *(_OWORD *)v474;
        *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v474[16];
        *v461 = v104;
        *(_BYTE *)(a1 + 7345) = v105;
        *(_DWORD *)(v455 + 1052) = v106;
        v291 = *(WTF::StringImpl **)(a1 + 7360);
        *(_QWORD *)(a1 + 7360) = 0;
        if (v291)
        {
          if (*(_DWORD *)v291 == 2)
          {
            WTF::StringImpl::~StringImpl(v291, v57, v58, (uint64_t)v59, v60, v61, v62, v63);
            WTF::fastFree(v377, v378, v379, v380, v381, v382, v383, v384);
          }
          else
          {
            *(_DWORD *)v291 -= 2;
          }
          v68 = 1;
          v69 = 5;
        }
        else
        {
          v68 = 1;
          v69 = 5;
        }
      }
      else
      {
        v458 = *(_DWORD *)(a1 + 7408);
        v68 = 2;
        if (v116)
          v69 = 5;
        else
          v69 = 20;
      }
      v67 = *(_QWORD *)(a1 + 7216);
      i = *(_DWORD *)(a1 + 7368);
    }
    else
    {
      v68 = 1;
      v69 = 5;
    }
    v70 = *(WTF::AtomStringImpl **)(v67 + 41952);
    if (i == 191488)
    {
      v71 = *(_DWORD *)(a1 + 7400);
      v72 = *(_DWORD *)(a1 + 7412);
      v73 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v71;
      *(_DWORD *)(a1 + 7448) = v72;
      *(_DWORD *)(a1 + 7452) = v73;
      v74 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v74 + 4) = v71;
      v75 = *(_DWORD *)(a1 + 12);
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x197E9E040);
      }
      v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
      *(_BYTE *)(v74 + 56) = 0;
      i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v74, a1 + 7368, 0, v76, v60, v61, v62, v63);
      *(_DWORD *)(a1 + 7368) = i;
      v69 = 18;
    }
LABEL_32:
    while (i == 12)
    {
LABEL_33:
      NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
      if (*(_QWORD *)NumericIdentifier != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896))
        goto LABEL_34;
      if (*(_BYTE *)(a1 + 7384) || ((1 << v69) & 0x40400) != 0)
        goto LABEL_34;
      v196 = *(_DWORD *)(a1 + 7400);
      v197 = *(_DWORD *)(a1 + 7412);
      v198 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v196;
      *(_DWORD *)(a1 + 7448) = v197;
      *(_DWORD *)(a1 + 7452) = v198;
      v199 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v199 + 4) = v196;
      v200 = *(_DWORD *)(a1 + 12);
      if (!v200)
      {
        __break(0xC471u);
        JUMPOUT(0x197E9E028);
      }
      v201 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v200 - 1) + 9) & 1;
      *(_BYTE *)(v199 + 56) = 0;
      i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v199, a1 + 7368, 0, v201, v60, v61, v62, v63);
      *(_DWORD *)(a1 + 7368) = i;
      v202 = i > 0x15 || ((1 << i) & 0x260004) == 0;
      if (!v202 || (v203 = *(_QWORD *)(a1 + 7288), *(_BYTE *)(v203 + 56)))
      {
        v87 = 0;
        v86 = 0;
        v117 = 0;
        NumericIdentifier = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896);
        v88 = 1;
        goto LABEL_44;
      }
      v69 = 10;
      if (i == 191488)
      {
        v204 = *(_DWORD *)(a1 + 7400);
        v205 = *(_DWORD *)(a1 + 7412);
        v206 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v204;
        *(_DWORD *)(a1 + 7448) = v205;
        *(_DWORD *)(a1 + 7452) = v206;
        *(_DWORD *)(v203 + 4) = v204;
        v207 = *(_DWORD *)(a1 + 12);
        if (!v207)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E030);
        }
        v208 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v207 - 1) + 9) & 1;
        *(_BYTE *)(v203 + 56) = 0;
        i = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v203, a1 + 7368, 0, v208, v60, v61, v62, v63);
        *(_DWORD *)(a1 + 7368) = i;
        v69 = 17;
      }
    }
    switch(i)
    {
      case 0u:
        if (v69 == 20)
        {
          v87 = 0;
          v86 = 0;
          v117 = 0;
          v88 = 1025;
          goto LABEL_203;
        }
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse static block without 'static'");
        goto LABEL_351;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xCu:
        goto LABEL_206;
      case 4u:
        v252 = *(_DWORD *)(a1 + 7400);
        v253 = *(_DWORD *)(a1 + 7412);
        v254 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v252;
        *(_DWORD *)(a1 + 7448) = v253;
        *(_DWORD *)(a1 + 7452) = v254;
        v255 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v255 + 4) = v252;
        v256 = *(_DWORD *)(a1 + 12);
        if (!v256)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E018);
        }
        v257 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v256 - 1) + 9) & 1;
        *(_BYTE *)(v255 + 56) = 0;
        v258 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v255, a1 + 7368, 0, v257, v60, v61, v62, v63);
        *(_DWORD *)(a1 + 7368) = v258;
        v259 = *(_DWORD *)(a1 + 12);
        if (!v259)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E020);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v259 - 1) + 12) & 0x10) != 0
          && v258 == 12
          && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_351;
          v397 = "Cannot use 'arguments' as an identifier in static block";
LABEL_333:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v397);
          goto LABEL_351;
        }
        v260 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
        v261 = *(_DWORD *)(a1 + 7368);
        if (!v260)
        {
          if (v261 != 20 && (v261 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v365 = "Cannot parse computed property name";
              v366 = a1;
              v367 = 1;
              goto LABEL_366;
            }
            goto LABEL_351;
          }
          goto LABEL_350;
        }
        if (v261 != 5)
        {
          if (v261 != 20 && (v261 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
            goto LABEL_351;
          }
          goto LABEL_350;
        }
        v87 = v260;
        v262 = *(_DWORD *)(a1 + 7400);
        v263 = *(_DWORD *)(a1 + 7412);
        v264 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v262;
        *(_DWORD *)(a1 + 7448) = v263;
        *(_DWORD *)(a1 + 7452) = v264;
        v265 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v265 + 4) = v262;
        v266 = *(_DWORD *)(a1 + 12);
        if (!v266)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E010);
        }
        v267 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v266 - 1) + 9) & 1;
        *(_BYTE *)(v265 + 56) = 0;
        v268 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v265, a1 + 7368, 0, v267, v60, v61, v62, v63);
        v86 = 0;
        v117 = 0;
        *(_DWORD *)(a1 + 7368) = v268;
        v88 = 9;
LABEL_203:
        NumericIdentifier = v70;
        goto LABEL_44;
      case 9u:
      case 0xAu:
        v308 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v308, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v309, v310, v311, v312, v313, v314);
        v315 = *(_DWORD *)(a1 + 7400);
        v316 = *(_DWORD *)(a1 + 7412);
        v317 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v315;
        *(_DWORD *)(a1 + 7448) = v316;
        *(_DWORD *)(a1 + 7452) = v317;
        v272 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v272 + 4) = v315;
        v273 = *(_DWORD *)(a1 + 12);
        if (!v273)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9D52CLL);
        }
        goto LABEL_208;
      case 0xBu:
        v354 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v354, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *(unsigned __int8 *)(a1 + 7384));
        if (!v355)
        {
          if (*v22 != 20 && (*v22 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v365 = "Cannot parse big int property name";
              v366 = a1;
              v367 = 1;
              goto LABEL_366;
            }
            goto LABEL_351;
          }
LABEL_350:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          goto LABEL_351;
        }
        NumericIdentifier = v355;
        v356 = *(_DWORD *)(a1 + 7400);
        v357 = *(_DWORD *)(a1 + 7412);
        v358 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v356;
        *(_DWORD *)(a1 + 7448) = v357;
        *(_DWORD *)(a1 + 7452) = v358;
        v272 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v272 + 4) = v356;
        v273 = *(_DWORD *)(a1 + 12);
        if (!v273)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9D870);
        }
LABEL_208:
        v274 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v273 - 1) + 9) & 1;
        *(_BYTE *)(v272 + 56) = 0;
        v275 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v272, a1 + 7368, 0, v274, v60, v61, v62, v63);
        v87 = 0;
        v86 = 0;
        v117 = 0;
        *(_DWORD *)(a1 + 7368) = v275;
        v88 = 1;
LABEL_44:
        v90 = *v22;
        if (v86 || v117)
        {
          if (v90 == 13)
          {
            v323 = *(_DWORD *)(v451 + 12);
            a2 = v455;
            if (v117)
            {
              if (v323 <= v445)
              {
                __break(0xC471u);
                JUMPOUT(0x197E9E0B0);
              }
              v324 = 0;
            }
            else
            {
              if (v323 <= v445)
              {
                __break(0xC471u);
                JUMPOUT(0x197E9E0C0);
              }
              v324 = 1;
            }
            v375 = JSC::Scope::declarePrivateAccessor(*(_QWORD *)v451 + 720 * v446, **(WTF::StringImpl ***)(a1 + 7376), v68, v324, v60, v61, v62, v63);
            if ((v375 & 2) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Declared private setter with an already used name");
              goto LABEL_351;
            }
            if ((_DWORD)v68 == 2)
            {
              if (v375 >= 4)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  if (v117)
                    v435 = "setter";
                  else
                    v435 = "getter";
                  if (v117)
                    v436 = "getter";
                  else
                    v436 = "setter";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],char const(&)[7],char const(&)[35],char const(&)[7],char const(&)[16]>(a1, v435, v436);
                }
                goto LABEL_351;
              }
              HIDWORD(v448) = 1;
            }
            else
            {
              if (v375 >= 4)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  if (v117)
                    v433 = "setter";
                  else
                    v433 = "getter";
                  if (v117)
                    v434 = "getter";
                  else
                    v434 = "setter";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],char const(&)[7],char const(&)[31],char const(&)[7],char const(&)[16]>(a1, v433, v434);
                }
                goto LABEL_351;
              }
              LODWORD(v448) = 1;
            }
            if (v117)
              v376 = 256;
            else
              v376 = 512;
            v102 = v376 | v88;
          }
          else
          {
            if (v86)
              v101 = 2;
            else
              v101 = 4;
            v102 = v101 | v88 & 0x4C8u;
            a2 = v455;
          }
          v96 = JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::ASTBuilder>(a1, (uint64_t **)a2, v102, v458, v68, v61, v62, v63);
          v97 = v457;
          if (v96)
            goto LABEL_63;
          if (*v22 != 20 && (*v22 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
            goto LABEL_351;
          }
          goto LABEL_350;
        }
        if (v69 == 5 && v90 != 2)
        {
          a2 = v455;
          if (!NumericIdentifier)
            goto LABEL_124;
          v168 = *(_QWORD *)NumericIdentifier;
          if (*(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare class field named 'constructor'");
            goto LABEL_351;
          }
          if (v168 == *((_QWORD *)v70 + 350))
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_351;
            v397 = "Cannot declare private class field named '#constructor'";
            goto LABEL_333;
          }
          if ((_DWORD)v68 == 2)
          {
            if (v168 == *((_QWORD *)v70 + 270))
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v365 = "Cannot declare a static field named 'prototype'";
                v366 = a1;
                v367 = 0;
LABEL_366:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v366, v367, v365);
              }
              goto LABEL_351;
            }
            if (v87)
              goto LABEL_288;
LABEL_125:
            v169 = 1;
          }
          else
          {
LABEL_124:
            if (!v87)
              goto LABEL_125;
            if ((_DWORD)v68 == 1)
            {
              v359 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
              NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v359, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"instanceComputedName", (WTF::StringImpl *)0x15, v444);
              LODWORD(v444) = v444 + 1;
              goto LABEL_289;
            }
LABEL_288:
            v368 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
            NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v368, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"staticComputedName", (WTF::StringImpl *)0x13, SHIDWORD(v444));
            ++HIDWORD(v444);
LABEL_289:
            if (*(_DWORD *)(v451 + 12) <= v445)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E070);
            }
            JSC::Scope::declareLexicalVariable(*(_QWORD *)v451 + 720 * v446, NumericIdentifier, 1, v360, v361, v362, v363, v364);
            if (*(_DWORD *)(v451 + 12) <= v445)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E078);
            }
            JSC::Scope::useVariable(*(_QWORD *)v451 + 720 * v446, *(_QWORD *)NumericIdentifier, 0);
            if (*(_DWORD *)(v451 + 12) <= v445)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E080);
            }
            v374 = *(_QWORD *)v451;
            *(_QWORD *)&v466 = *(_QWORD *)NumericIdentifier;
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v374 + 720 * v446 + 696), (uint64_t *)&v466, v369, v370, v371, v372, v373, (uint64_t)v474);
            v169 = 0;
            v90 = *v22;
          }
          if (v90 == 21)
          {
            v170 = *(_DWORD *)(a1 + 7400);
            v171 = *(_DWORD *)(a1 + 7412);
            v172 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v170;
            *(_DWORD *)(a1 + 7448) = v171;
            *(_DWORD *)(a1 + 7452) = v172;
            v173 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v173 + 4) = v170;
            v174 = *(_DWORD *)(a1 + 12);
            if (!v174)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E090);
            }
            v442 = v169;
            v175 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v174 - 1) + 9) & 1;
            *(_BYTE *)(v173 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v173, a1 + 7368, 0, v175, v60, v61, v62, v63);
            v181 = *(_DWORD *)(a1 + 12);
            if (!v181)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E098);
            }
            v182 = *(_QWORD *)a1 + 720 * (v181 - 1);
            v184 = *(_DWORD *)(v182 + 180);
            v183 = (_DWORD *)(v182 + 180);
            v185 = v183 - 3;
            *(_QWORD *)v474 = 0x800000000;
            *(_QWORD *)&v186 = -1;
            *((_QWORD *)&v186 + 1) = -1;
            *(_OWORD *)&v474[8] = v186;
            *(_OWORD *)&v474[24] = v186;
            *(_OWORD *)&v474[40] = v186;
            *(_OWORD *)&v474[56] = v186;
            v187 = *v183;
            v460 = v184;
            if ((_DWORD)v187 == *(v183 - 1))
            {
              v385 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v183 - 3), (void *)(v187 + 1), (unint64_t)v474, v176, v177, v178, v179, v180);
              v393 = *v185 + 72 * *v183;
              *(_OWORD *)v393 = *(_OWORD *)v385;
              v395 = *(_OWORD *)(v385 + 32);
              v394 = *(_OWORD *)(v385 + 48);
              v396 = *(_OWORD *)(v385 + 16);
              *(_QWORD *)(v393 + 64) = *(_QWORD *)(v385 + 64);
              *(_OWORD *)(v393 + 32) = v395;
              *(_OWORD *)(v393 + 48) = v394;
              *(_OWORD *)(v393 + 16) = v396;
              *(_QWORD *)v385 = 0x800000000;
              *(_QWORD *)&v394 = -1;
              *((_QWORD *)&v394 + 1) = -1;
              *(_OWORD *)(v385 + 56) = v394;
              *(_OWORD *)(v385 + 40) = v394;
              *(_OWORD *)(v385 + 24) = v394;
              *(_OWORD *)(v385 + 8) = v394;
              ++*v183;
              if (*(_DWORD *)&v474[4] != 8)
                WTF::fastFree(*(unint64_t *)&v474[8], v386, v387, v388, v389, v390, v391, v392);
            }
            else
            {
              v188 = *v185 + 72 * v187;
              *(_OWORD *)v188 = *(_OWORD *)v474;
              v189 = *(_OWORD *)&v474[16];
              v190 = *(_OWORD *)&v474[32];
              v191 = *(_OWORD *)&v474[48];
              *(_QWORD *)(v188 + 64) = *(_QWORD *)&v474[64];
              *(_OWORD *)(v188 + 32) = v190;
              *(_OWORD *)(v188 + 48) = v191;
              *(_OWORD *)(v188 + 16) = v189;
              ++*v183;
            }
            v443 = *(_BYTE *)(a1 + 7345);
            *(_BYTE *)(a1 + 7345) = 1;
            if (*(_DWORD *)(v451 + 12) <= v445)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E060);
            }
            *(_DWORD *)(*(_QWORD *)v451 + 720 * v446 + 20) = 0;
            *(_DWORD *)v474 = 0;
            *(_QWORD *)&v474[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v474[16] = a1;
            *(_QWORD *)(a1 + 7496) = v474;
            v192 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v455, v474);
            *(_QWORD *)(*(_QWORD *)&v474[16] + 7496) = *(_QWORD *)&v474[8];
            if (*(_DWORD *)(v451 + 12) <= v445)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E068);
            }
            v59 = (_QWORD *)v192;
            v128 = *(_QWORD *)v451;
            *(_DWORD *)(*(_QWORD *)v451 + 720 * v446 + 20) = 1;
            v124 = v460;
            if (!v192)
            {
              if (*v22 == 20 || (*v22 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse initializer for class field");
              }
              *(_BYTE *)(a1 + 7345) = v443;
              goto LABEL_351;
            }
            v193 = v128 + 720 * v446;
            v194 = *(_DWORD *)(v193 + 180);
            v129 = (unsigned int *)(v193 + 180);
            v130 = v194;
            if (v194 > v460)
            {
              v131 = (_QWORD *)(v128 + 720 * v446 + 168);
              do
              {
                v118 = *v131 + 72 * v124;
                v119 = *(unsigned int *)(v118 + 4);
                v120 = (_QWORD *)(v118 + 8);
                if ((_DWORD)v119 != 8)
                  v120 = (_QWORD *)*v120;
                v121 = 0;
                while ((_DWORD)v119 != v121)
                {
                  LODWORD(v122) = v121;
                  v123 = v120[v121++];
                  if (v123 != -1)
                  {
                    v122 = v122;
                    goto LABEL_95;
                  }
                }
                v122 = v119;
LABEL_95:
                if ((_DWORD)v119 != (_DWORD)v122)
                {
                  v437 = v131;
                  v438 = v129;
                  v459 = v124;
                  v439 = v128;
                  v440 = (uint64_t *)(v128 + 720 * v446 + 696);
                  v125 = v122 | (v119 << 32);
                  LODWORD(v126) = v122;
                  v441 = v59;
                  do
                  {
                    LODWORD(v127) = v126;
                    *(_QWORD *)&v466 = 0;
                    *(_QWORD *)&v466 = v120[v125];
                    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v440, (uint64_t *)&v466, (uint64_t)v59, v60, v61, v62, v63, (uint64_t)v474);
                    if (HIDWORD(v125) <= (v127 + 1))
                      v126 = (v127 + 1);
                    else
                      v126 = HIDWORD(v125);
                    while ((_DWORD)v126 - 1 != (_DWORD)v127)
                    {
                      v127 = (v127 + 1);
                      if (v120[v127] != -1)
                      {
                        LODWORD(v126) = v127;
                        goto LABEL_105;
                      }
                    }
                    v127 = v126;
LABEL_105:
                    v125 = v127 | v125 & 0xFFFFFFFF00000000;
                    v59 = v441;
                  }
                  while ((_DWORD)v119 != (_DWORD)v126);
                  v129 = v438;
                  v128 = v439;
                  v130 = *v438;
                  a2 = v455;
                  v124 = v459;
                  v131 = v437;
                }
                ++v124;
              }
              while (v124 < v130);
            }
            v169 = v442;
            *(_BYTE *)(a1 + 7345) = v443;
            v90 = *v22;
          }
          else
          {
            v59 = 0;
          }
          if (v90 == 17)
          {
            v223 = *(_DWORD *)(a1 + 7400);
            v224 = *(_DWORD *)(a1 + 7412);
            v225 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v223;
            *(_DWORD *)(a1 + 7448) = v224;
            *(_DWORD *)(a1 + 7452) = v225;
            v226 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v226 + 4) = v223;
            v227 = *(_DWORD *)(a1 + 12);
            if (!v227)
            {
              __break(0xC471u);
              JUMPOUT(0x197E9E088);
            }
            v228 = v59;
            v229 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v227 - 1) + 9) & 1;
            *(_BYTE *)(v226 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v226, a1 + 7368, 0, v229, v60, v61, v62, v63);
            v59 = v228;
          }
          else if (v90 != 1 && v90 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
          {
            if ((v90 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a class field");
              goto LABEL_351;
            }
            goto LABEL_350;
          }
          if ((v169 & 1) != 0)
            Property = JSC::ASTBuilder::createProperty(a2, (_DWORD **)NumericIdentifier, v59, v88, 1, v59 == 0, v68);
          else
            Property = JSC::ASTBuilder::createProperty(*(_QWORD *)(a2 + 8), (uint64_t)NumericIdentifier, v87, (uint64_t)v59, v88, v68);
          v96 = Property;
          goto LABEL_62;
        }
        if (v69 != 20)
        {
          memset(v474, 0, 44);
          if ((_DWORD)v68 == 1)
          {
            v91 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135);
            if (v69 != 5 && *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v466 = JSC::stringArticleForFunctionMode(v69);
                v465 = JSC::stringForFunctionMode();
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const*,char const(&)[21]>(a1, (const char **)&v466, &v465);
              }
              goto LABEL_351;
            }
            v92 = v453;
            if (*(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
              NumericIdentifier = *(WTF::AtomStringImpl **)a4;
            else
              v92 = 0;
          }
          else
          {
            v92 = 0;
            v91 = 0;
          }
          *(_QWORD *)v474 = NumericIdentifier;
          v93 = *(_BYTE *)(a1 + 7474);
          *(_BYTE *)(a1 + 7474) = v69;
          a2 = v455;
          if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, v455, 2, 0, v92, 0, v458, v474, 2, 0) & 1) == 0)
          {
            if (*v22 == 20 || (*v22 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
            }
            goto LABEL_295;
          }
          MethodDefinition = (_QWORD *)JSC::ASTBuilder::createMethodDefinition(v455, (uint64_t)&v462, (uint64_t)v474, (uint64_t)v59, v60, v61, v62, v63);
          v58 = (uint64_t)MethodDefinition;
          if (v91)
          {
            if (v452)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare multiple constructors in a single class");
              goto LABEL_295;
            }
            *(_BYTE *)(a1 + 7474) = v93;
            v452 = (uint64_t)MethodDefinition;
            continue;
          }
          if ((_DWORD)v68 == 2 && *(_QWORD *)v474 && **(_QWORD **)v474 == *((_QWORD *)v70 + 270))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
LABEL_295:
            *(_BYTE *)(a1 + 7474) = v93;
            goto LABEL_351;
          }
          if (v87)
            v95 = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(v455 + 8), v87, (uint64_t)MethodDefinition, v88, 0, v68);
          else
            v95 = JSC::ASTBuilder::createProperty(v455, *(_DWORD ***)v474, MethodDefinition, v88, 0, 0, v68);
          v96 = v95;
          *(_BYTE *)(a1 + 7474) = v93;
LABEL_62:
          v97 = v457;
LABEL_63:
          v98 = *(uint64_t **)(a2 + 8);
          v99 = *v98;
          v100 = v98[1] - *v98;
          if (v97)
          {
            if (v100 <= 0x37)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              v97 = v457;
              v99 = *v98;
            }
            *v98 = v99 + 56;
            *(_DWORD *)(v99 + 8) = v462;
            *(int32x2_t *)(v99 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v462 + 4));
            *(_DWORD *)(v99 + 20) = -1;
            *(_BYTE *)(v99 + 24) = 0;
            *(_BYTE *)(v99 + 25) = 126;
            *(_BYTE *)(v99 + 26) = 0;
            *(_QWORD *)v99 = &off_1E357ABE0;
            *(_QWORD *)(v99 + 32) = v96;
            *(_QWORD *)(v99 + 40) = 0;
            *(_BYTE *)(v99 + 48) = 0;
            *(_QWORD *)(v97 + 40) = v99;
            v64 = v99;
          }
          else
          {
            if (v100 <= 0x37)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              v99 = *v98;
            }
            *v98 = v99 + 56;
            *(_DWORD *)(v99 + 8) = v462;
            *(int32x2_t *)(v99 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v462 + 4));
            *(_DWORD *)(v99 + 20) = -1;
            *(_BYTE *)(v99 + 24) = 0;
            *(_BYTE *)(v99 + 25) = 126;
            *(_BYTE *)(v99 + 26) = 0;
            *(_QWORD *)v99 = &off_1E357ABE0;
            *(_QWORD *)(v99 + 32) = v96;
            *(_QWORD *)(v99 + 40) = 0;
            *(_BYTE *)(v99 + 48) = 0;
            v64 = v99;
            v450 = v99;
          }
          goto LABEL_23;
        }
        if (v90)
        {
          if (v90 != 20 && (v90 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v365 = "Expected block statement for class static block";
              v366 = a1;
              v367 = 1;
              goto LABEL_366;
            }
            goto LABEL_351;
          }
          goto LABEL_350;
        }
        v325 = *(_DWORD *)(a1 + 12);
        if (!v325)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E0B8);
        }
        v326 = (JSC::Scope *)(*(_QWORD *)a1 + 720 * (v325 - 1));
        v327 = *((_DWORD *)v326 + 45);
        JSC::Scope::pushUsedVariableSet(v326, (uint64_t)v57, v58, (uint64_t)v59, v60, v61, v62, v63);
        v328 = *(_DWORD *)(a1 + 7456);
        *(_DWORD *)(a1 + 7456) = 0;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, v455, 2, v329, v330, v331, v332, v333))
        {
          v336 = JSC::Symbols::staticInitializerBlockPrivateName[0];
          JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
          if (v336)
          {
            JSC::Symbols::staticInitializerBlockPrivateName[0] = v336;
          }
          else
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName, v334, v335, (uint64_t)v59, v60, v61, v62, v63);
            WTF::fastFree(v407, v408, v409, v410, v411, v412, v413, v414);
          }
          v337 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
          JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
          *(_QWORD *)v474 = JSC::Symbols::staticInitializerBlockPrivateName;
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v337, (uint64_t *)v474);
          v345 = *(WTF::StringImpl **)v474;
          *(_QWORD *)v474 = 0;
          a2 = v455;
          if (v345)
          {
            if (*(_DWORD *)v345 == 2)
            {
              WTF::StringImpl::~StringImpl(v345, v338, v339, v340, v341, v342, v343, v344);
              WTF::fastFree(v415, v416, v417, v418, v419, v420, v421, v422);
            }
            else
            {
              *(_DWORD *)v345 -= 2;
            }
          }
          v346 = *v337 - 1;
          if (v346 >> 6 >= *((unsigned int *)v337 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E0A0);
          }
          v347 = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(v455 + 8), *(_QWORD *)(v337[1] + 8 * (v346 >> 6)) + 8 * (v346 & 0x3F), v88, v68);
          if (*(_DWORD *)(v451 + 12) <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E0A8);
          }
          v96 = v347;
          JSC::Scope::markLastUsedVariablesSetAsCaptured((uint64_t *)(*(_QWORD *)v451 + 720 * v446), v327, v348, v349, v350, v351, v352, v353);
          *(_DWORD *)(a1 + 7456) = v328;
          goto LABEL_62;
        }
        if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse class static block");
        }
        *(_DWORD *)(a1 + 7456) = v328;
LABEL_351:
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v474, (uint64_t *)a1, 0, (uint64_t)v59, v60, v61, v62, v63);
        v431 = *(_QWORD *)&v474[24];
        if (*(_QWORD *)&v474[24])
        {
          *(_QWORD *)&v474[24] = 0;
          *(_DWORD *)&v474[32] = 0;
          WTF::fastFree(v431, v424, v425, v426, v427, v428, v429, v430);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v474, (WTF::AtomStringImpl *)v424, v425, v426, v427, v428, v429, v430);
LABEL_324:
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v474, (uint64_t *)a1, 0, v25, v26, v27, v28, v29);
        v406 = *(_QWORD *)&v474[24];
        if (*(_QWORD *)&v474[24])
        {
          *(_QWORD *)&v474[24] = 0;
          *(_DWORD *)&v474[32] = 0;
          WTF::fastFree(v406, v399, v400, v401, v402, v403, v404, v405);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v474, (WTF::AtomStringImpl *)v399, v400, v401, v402, v403, v404, v405);
        return 0;
      case 0xDu:
        NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
        v209 = *(_DWORD *)(a1 + 7400);
        v210 = *(_DWORD *)(a1 + 7412);
        v211 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v209;
        *(_DWORD *)(a1 + 7448) = v210;
        *(_DWORD *)(a1 + 7452) = v211;
        v212 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v212 + 4) = v209;
        v213 = *(_DWORD *)(a1 + 12);
        if (!v213)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E008);
        }
        v214 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v213 - 1) + 9) & 1;
        *(_BYTE *)(v212 + 56) = 0;
        v215 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v212, a1 + 7368, 0, v214, v60, v61, v62, v63);
        *(_DWORD *)(a1 + 7368) = v215;
        v222 = *(_DWORD *)(v451 + 12);
        if (v215 == 2)
        {
          if (v222 <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E000);
          }
          if (JSC::Scope::declarePrivateMethod(*(_QWORD *)v451 + 720 * v446, *(WTF::StringImpl **)NumericIdentifier, v68) >= 2)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v365 = "Cannot declare private method twice";
              v366 = a1;
              v367 = 0;
              goto LABEL_366;
            }
            goto LABEL_351;
          }
          if (*(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 350))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private method named '#constructor'");
            goto LABEL_351;
          }
          v87 = 0;
          v86 = 0;
          v117 = 0;
          LODWORD(v449) = ((_DWORD)v68 != 2) | v449;
          HIDWORD(v449) |= (_DWORD)v68 == 2;
          v88 = 129;
        }
        else
        {
          if (v222 <= v445)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9DFF0);
          }
          if (JSC::Scope::declarePrivateField(*(_QWORD *)v451 + 720 * v446, *(WTF::StringImpl **)NumericIdentifier, v216, v217, v218, v219, v220, v221) >= 2)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v365 = "Cannot declare private field twice";
              v366 = a1;
              v367 = 0;
              goto LABEL_366;
            }
            goto LABEL_351;
          }
          v87 = 0;
          v86 = 0;
          v117 = 0;
          v88 = 65;
        }
        goto LABEL_44;
      case 0xEu:
        goto LABEL_207;
      default:
        if (i == 1048592)
          goto LABEL_33;
        if (i == 546)
        {
          NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
LABEL_34:
          v78 = *(unsigned __int8 *)(a1 + 7384);
          v79 = *(_DWORD *)(a1 + 7400);
          v80 = *(_DWORD *)(a1 + 7412);
          v81 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v79;
          *(_DWORD *)(a1 + 7448) = v80;
          *(_DWORD *)(a1 + 7452) = v81;
          v82 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v82 + 4) = v79;
          v83 = *(_DWORD *)(a1 + 12);
          if (!v83)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9E048);
          }
          v84 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v83 - 1) + 9) & 1;
          *(_BYTE *)(v82 + 56) = 0;
          v85 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v82, a1 + 7368, 0, v84, v60, v61, v62, v63);
          v86 = 0;
          v87 = 0;
          *(_DWORD *)(a1 + 7368) = v85;
          v88 = 1;
          if (v69 != 5 || v78)
          {
            v117 = 0;
          }
          else if ((v85 & 0x200) != 0 || ((v85 - 9) >= 6 ? (v89 = v85 == 4) : (v89 = 1), v89))
          {
            v87 = 0;
            v86 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 172);
            v117 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 287);
          }
          else
          {
            v87 = 0;
            v86 = 0;
            v117 = 0;
          }
          goto LABEL_44;
        }
LABEL_206:
        if ((i & 0x200) == 0)
          goto LABEL_350;
LABEL_207:
        NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
        v269 = *(_DWORD *)(a1 + 7400);
        v270 = *(_DWORD *)(a1 + 7412);
        v271 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v269;
        *(_DWORD *)(a1 + 7448) = v270;
        *(_DWORD *)(a1 + 7452) = v271;
        v272 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v272 + 4) = v269;
        v273 = *(_DWORD *)(a1 + 12);
        if (!v273)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9E038);
        }
        goto LABEL_208;
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::ASTBuilder>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  int *v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t result;
  const char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  const char *v47;
  int v51;
  int v52;
  int v53;
  unint64_t *v54;
  uint64_t *v55;
  int v56;
  int v57;
  int v58;
  _OWORD v59[3];
  __int128 v60;

  v13 = (unsigned __int8 *)(a1 + 7384);
  v14 = (int *)(a1 + 7368);
  v60 = *(_OWORD *)(a1 + 7400);
  v15 = *(_DWORD *)(a1 + 7368);
  if (v15 == 12
    || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| (v34 = *v14, *v14 == 546)|| v34 == 1048592 && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)|| v15 == 13|| v34 == 14|| (v34 & 0x200) != 0)
  {
    v16 = *(uint64_t **)(a1 + 7376);
    if ((_DWORD)a5 == 1)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
      if (*v16 == v17[135])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a getter or setter named 'constructor'");
        return 0;
      }
    }
    else if ((_DWORD)a5 == 2)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
      if (*v16 == v17[270])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
        return 0;
      }
    }
    else
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
    }
    if (v18 == v17[350])
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private accessor named '#constructor'");
      return 0;
    }
    if (*v14 == 13 && (_DWORD)a5 == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot declare a private setter or getter outside a class");
      return 0;
    }
    v20 = *(_DWORD *)(a1 + 7400);
    v21 = *(_DWORD *)(a1 + 7412);
    v22 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v20;
    *(_DWORD *)(a1 + 7448) = v21;
    *(_DWORD *)(a1 + 7452) = v22;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v20;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
LABEL_126:
      __break(0xC471u);
      JUMPOUT(0x197E9E7BCLL);
    }
LABEL_10:
    v25 = 0;
LABEL_11:
    v26 = 0.0;
    goto LABEL_12;
  }
  if (v34 == 4)
  {
    v35 = *(_DWORD *)(a1 + 7400);
    v36 = *(_DWORD *)(a1 + 7412);
    v37 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v35;
    *(_DWORD *)(a1 + 7448) = v36;
    *(_DWORD *)(a1 + 7452) = v37;
    v38 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v38 + 4) = v35;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9E8E0);
    }
    v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
    *(_BYTE *)(v38 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v38, (uint64_t)v14, 0, v40, a5, a6, a7, a8);
    v41 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
    v42 = *(_DWORD *)(a1 + 7368);
    if (!v41)
    {
      if (v42 != 20 && (v42 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
        return 0;
      }
      goto LABEL_70;
    }
    if (v42 != 5)
    {
      if (v42 != 20 && (v42 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
        return 0;
      }
      goto LABEL_70;
    }
    v25 = v41;
    v43 = *(_DWORD *)(a1 + 7400);
    v44 = *(_DWORD *)(a1 + 7412);
    v45 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v43;
    *(_DWORD *)(a1 + 7448) = v44;
    *(_DWORD *)(a1 + 7452) = v45;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v43;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9E8E8);
    }
    v16 = 0;
    goto LABEL_11;
  }
  if ((v34 - 9) >= 2)
  {
    if (v34 != 11)
      goto LABEL_70;
    v54 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
    JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v54, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *v13);
    if (!v55)
    {
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
        return 0;
      }
      goto LABEL_70;
    }
    v16 = v55;
    v56 = *(_DWORD *)(a1 + 7400);
    v57 = *(_DWORD *)(a1 + 7412);
    v58 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v56;
    *(_DWORD *)(a1 + 7448) = v57;
    *(_DWORD *)(a1 + 7452) = v58;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v56;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9E85CLL);
    }
    goto LABEL_10;
  }
  v26 = *(double *)(a1 + 7376);
  v51 = *(_DWORD *)(a1 + 7400);
  v52 = *(_DWORD *)(a1 + 7412);
  v53 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v51;
  *(_DWORD *)(a1 + 7448) = v52;
  *(_DWORD *)(a1 + 7452) = v53;
  v23 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v23 + 4) = v51;
  v24 = *(_DWORD *)(a1 + 12);
  if (!v24)
    goto LABEL_126;
  v16 = 0;
  v25 = 0;
LABEL_12:
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 9) & 1;
  *(_BYTE *)(v23 + 56) = 0;
  v28 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v23, (uint64_t)v14, 0, v27, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v28;
  memset(v59, 0, 44);
  if ((a3 & 2) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 3;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)
      {
LABEL_15:
        v13[90] = v31;
        goto LABEL_16;
      }
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v33 = "Cannot parse getter definition";
          goto LABEL_57;
        }
        goto LABEL_84;
      }
      goto LABEL_83;
    }
    if (v28 == 20 || (v28 & 0x100000) != 0)
      goto LABEL_70;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v47 = "Expected a parameter list for getter definition";
LABEL_87:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v47);
    return 0;
  }
  if ((a3 & 4) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 4;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v33 = "Cannot parse setter definition";
LABEL_57:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v33);
        }
LABEL_84:
        result = 0;
        v13[90] = v31;
        return result;
      }
LABEL_83:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_84;
    }
    if (v28 == 20 || (v28 & 0x100000) != 0)
      goto LABEL_70;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v47 = "Expected a parameter list for setter definition";
    goto LABEL_87;
  }
  if ((a3 & 0x100) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 4;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_84;
        v33 = "Cannot parse private setter definition";
        goto LABEL_57;
      }
      goto LABEL_83;
    }
    if (v28 != 20 && (v28 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v47 = "Expected a parameter list for private setter definition";
      goto LABEL_87;
    }
    goto LABEL_70;
  }
  if ((a3 & 0x200) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 3;
      if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_84;
        v33 = "Cannot parse private getter definition";
        goto LABEL_57;
      }
      goto LABEL_83;
    }
    if (v28 != 20 && (v28 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v47 = "Expected a parameter list for private getter definition";
      goto LABEL_87;
    }
LABEL_70:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
LABEL_16:
  if (v16)
    return JSC::ASTBuilder::createGetterOrSetterProperty(a2, (uint64_t)&v60, a3, v16, (uint64_t)v59, a5, v29, v30);
  if (v25)
    return JSC::ASTBuilder::createGetterOrSetterProperty(a2, (uint64_t)&v60, (unsigned __int16)a3 | 8u, v25, (uint64_t)v59, a5, v29, v30);
  return JSC::ASTBuilder::createGetterOrSetterProperty((uint64_t)a2, *(uint64_t ***)(a1 + 7216), (const WTF::StringImpl *)(a1 + 7232), (uint64_t)&v60, a3, (uint64_t)v59, a5, v30, v26);
}

uint64_t JSC::ASTBuilder::createProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6)
{
  uint64_t result;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  result = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v13 - result) <= 0x1F)
  {
    if (v13)
    {
      v15 = (_QWORD *)(a1 + 24);
      v16 = v13 - 8000;
      v19 = v13 - 8000;
      v17 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 32))
      {
        v18 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v17 + 1, (unint64_t)&v19);
        v17 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v17) = *v18;
      }
      else
      {
        *(_QWORD *)(*v15 + 8 * v17) = v16;
      }
      *(_DWORD *)(a1 + 36) = v17 + 1;
    }
    result = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = result + 8000;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | a5 & 0x7FF | ((a6 & 3) << 12);
  return result;
}

uint64_t JSC::ASTBuilder::createProperty(uint64_t a1, _DWORD **a2, _QWORD *a3, __int16 a4, int a5, int a6, char a7)
{
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::ParserArena *v20;
  uint64_t result;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  if (!a6)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a3 + 152))(a3))
    {
      v22 = a3[4];
      v23 = *a2;
      if (*a2)
        *v23 += 2;
      v24 = *(WTF::StringImpl **)(v22 + 48);
      *(_QWORD *)(v22 + 48) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    else if ((*(unsigned int (**)(_QWORD *))(*a3 + 176))(a3))
    {
      v33 = (_QWORD *)a3[20];
      if (!*v33)
        v33 = a2;
      a3[21] = v33;
    }
  }
  v20 = *(JSC::ParserArena **)(a1 + 8);
  result = *(_QWORD *)v20;
  if (*((_QWORD *)v20 + 1) - *(_QWORD *)v20 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v20);
    result = *(_QWORD *)v20;
  }
  *(_QWORD *)v20 = result + 32;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | a4 & 0x7FF | ((a5 == 0) << 11) & 0xCFFF | ((a7 & 3) << 12);
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _QWORD v122[3];
  WTF *v123;
  uint64_t v124;

  v11 = a3 == 2 || *(_DWORD *)(a1 + 7456) > 0;
  if (!v11)
  {
    v12 = 0;
    goto LABEL_9;
  }
  v59 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F168);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) |= 0x8080u;
  if (!a3)
  {
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9F178);
    }
LABEL_29:
    *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) &= ~0x40u;
    goto LABEL_30;
  }
  if (a3 == 1)
  {
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9F180);
    }
    *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) |= 0x80000u;
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9EE5CLL);
    }
    goto LABEL_29;
  }
  if (a3 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F07CLL);
  }
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F190);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) = *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) & 0xFE8F007F | 0x1708180;
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x197E9EDB0);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 20) = 0;
LABEL_30:
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F170);
  }
  v12 = (uint64_t *)a1;
  if ((*(_BYTE *)(*(_QWORD *)v59 + 720 * v60 + 11) & 0x80) == 0)
    goto LABEL_82;
LABEL_9:
  v13 = *(_DWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(a1 + 7404);
  v15 = *(_DWORD *)(a1 + 7380);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v16 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v13;
  *(_DWORD *)(a1 + 7448) = v16;
  *(_DWORD *)(a1 + 7452) = v14;
  v17 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v17 + 4) = v13;
  v18 = *(_DWORD *)(a1 + 12);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F158);
  }
  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v20;
  if (v20 != 1)
  {
    v25 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
    v33 = *(_DWORD *)(a1 + 7368);
    if (v25)
    {
      if (v33 == 1)
      {
        v34 = v25;
        v35 = *(_DWORD *)(a1 + 7380);
        v36 = *(_DWORD *)(a1 + 7400);
        v37 = *(_DWORD *)(a1 + 7412);
        v38 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v36;
        *(_DWORD *)(a1 + 7448) = v37;
        *(_DWORD *)(a1 + 7452) = v38;
        v39 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v39 + 4) = v36;
        v40 = *(_DWORD *)(a1 + 12);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x197E9F160);
        }
        v41 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v40 - 1) + 9) & 1;
        *(_BYTE *)(v39 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, v41, v29, v30, v31, v32);
        if (v11)
        {
          if (!v12)
          {
            __break(0xC471u);
            JUMPOUT(0x197E9F004);
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v122, (uint64_t *)a1, 1, v28, v29, v30, v31, v32);
          JSC::VariableEnvironment::operator=((uint64_t)&v119, (uint64_t)v122, v61, v62, v63, v64, v65, v66);
          v42 = v123;
          v113 = v124;
          v123 = 0;
          v124 = 0;
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, v67, v68, v69, v70, v71, v72, v73);
          v43 = v113;
          v12 = 0;
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
        v44 = *(_DWORD *)(a1 + 7444);
        v45 = *(uint64_t **)(a2 + 8);
        v46 = *v45;
        if ((unint64_t)(v45[1] - *v45) <= 0x5F)
        {
          v117 = v43;
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v45);
          v43 = v117;
          v46 = *v45;
        }
        *v45 = v46 + 96;
        if (v46)
          v47 = v46 + 40;
        else
          v47 = 0;
        v122[0] = v47;
        v48 = v45 + 5;
        v49 = *((unsigned int *)v45 + 13);
        if ((_DWORD)v49 == *((_DWORD *)v45 + 12))
        {
          v114 = v43;
          v74 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)v122);
          v43 = v114;
          v49 = *((unsigned int *)v45 + 13);
          *(_QWORD *)(v45[5] + 8 * v49) = *v74;
        }
        else
        {
          *(_QWORD *)(*v48 + 8 * v49) = v47;
        }
        *((_DWORD *)v45 + 13) = v49 + 1;
        *(_BYTE *)(v46 + 24) = 0;
        v50 = v119;
        *(_BYTE *)(v46 + 56) = v120;
        v51 = v121;
        v119 = 0;
        v121 = 0;
        *(_QWORD *)(v46 + 64) = v51;
        *(_QWORD *)(v46 + 72) = v42;
        *(_QWORD *)(v46 + 80) = v43;
        *(_QWORD *)v46 = &off_1E358B420;
        *(_QWORD *)(v46 + 32) = 0;
        *(_QWORD *)(v46 + 40) = &unk_1E358B4C0;
        *(_QWORD *)(v46 + 48) = v50;
        *(_QWORD *)(v46 + 88) = v34;
        *(_DWORD *)(v46 + 28) = v44;
        *(_DWORD *)(v46 + 8) = v13;
        *(_DWORD *)(v46 + 12) = v15;
        *(_DWORD *)(v46 + 16) = v14;
        *(_DWORD *)(v46 + 20) = v35;
        goto LABEL_24;
      }
      if (v33 != 20 && (v33 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a closing '}' at the end of a block statement");
        goto LABEL_69;
      }
    }
    else if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of the block statement");
      goto LABEL_69;
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_69:
    v46 = 0;
    goto LABEL_24;
  }
  v75 = *(_DWORD *)(a1 + 7380);
  v76 = *(_DWORD *)(a1 + 7400);
  v77 = *(_DWORD *)(a1 + 7412);
  v78 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v76;
  *(_DWORD *)(a1 + 7448) = v77;
  *(_DWORD *)(a1 + 7452) = v78;
  v79 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v79 + 4) = v76;
  v80 = *(_DWORD *)(a1 + 12);
  if (!v80)
  {
    __break(0xC471u);
    JUMPOUT(0x197E9F188);
  }
  v81 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v80 - 1) + 9) & 1;
  *(_BYTE *)(v79 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v79, a1 + 7368, 0, v81, v21, v22, v23, v24);
  if (v11)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197E9F11CLL);
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v122, (uint64_t *)a1, 1, v28, v29, v30, v31, v32);
    JSC::VariableEnvironment::operator=((uint64_t)&v119, (uint64_t)v122, v91, v92, v93, v94, v95, v96);
    v82 = v123;
    v115 = v124;
    v123 = 0;
    v124 = 0;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, v97, v98, v99, v100, v101, v102, v103);
    v83 = v115;
    v12 = 0;
  }
  else
  {
    v82 = 0;
    v83 = 0;
  }
  v84 = *(_DWORD *)(a1 + 7444);
  v85 = *(uint64_t **)(a2 + 8);
  v46 = *v85;
  if ((unint64_t)(v85[1] - *v85) <= 0x5F)
  {
    v118 = v83;
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v85);
    v83 = v118;
    v46 = *v85;
  }
  *v85 = v46 + 96;
  if (v46)
    v86 = v46 + 40;
  else
    v86 = 0;
  v122[0] = v86;
  v87 = v85 + 5;
  v88 = *((unsigned int *)v85 + 13);
  if ((_DWORD)v88 == *((_DWORD *)v85 + 12))
  {
    v116 = v83;
    v104 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)v122);
    v83 = v116;
    v88 = *((unsigned int *)v85 + 13);
    *(_QWORD *)(v85[5] + 8 * v88) = *v104;
  }
  else
  {
    *(_QWORD *)(*v87 + 8 * v88) = v86;
  }
  *((_DWORD *)v85 + 13) = v88 + 1;
  *(_BYTE *)(v46 + 24) = 0;
  v89 = v119;
  *(_BYTE *)(v46 + 56) = v120;
  v90 = v121;
  v119 = 0;
  v121 = 0;
  *(_QWORD *)(v46 + 64) = v90;
  *(_QWORD *)(v46 + 72) = v82;
  *(_QWORD *)(v46 + 80) = v83;
  *(_QWORD *)v46 = &off_1E358B420;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = &unk_1E358B4C0;
  *(_QWORD *)(v46 + 48) = v89;
  *(_QWORD *)(v46 + 88) = 0;
  *(_DWORD *)(v46 + 28) = v84;
  *(_DWORD *)(v46 + 8) = v13;
  *(_DWORD *)(v46 + 12) = v15;
  *(_DWORD *)(v46 + 16) = v14;
  *(_DWORD *)(v46 + 20) = v75;
LABEL_24:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v119, v26, v27, v28, v29, v30, v31, v32);
  if (v12)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v122, v12, 0, v52, v53, v54, v55, v56);
    v112 = v123;
    if (v123)
    {
      v123 = 0;
      LODWORD(v124) = 0;
      WTF::fastFree((unint64_t)v112, v105, v106, v107, v108, v109, v110, v111);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, (WTF::AtomStringImpl *)v105, v106, v107, v108, v109, v110, v111);
  }
  return v46;
}

uint64_t JSC::ASTBuilder::createProperty(JSC::ParserArena *a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - result) <= 0x1F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    result = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  *(_WORD *)(result + 24) = a3 & 0x7FF | ((a4 & 3) << 12) | *(_WORD *)(result + 24) & 0x8000 | 0x800;
  return result;
}

uint64_t JSC::ASTBuilder::createMethodDefinition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int32x2_t v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v11 = *(uint64_t **)(a1 + 8);
  v12 = *v11;
  if ((unint64_t)(v11[1] - *v11) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    v12 = *v11;
  }
  *v11 = v12 + 40;
  v14 = *(_DWORD ***)a3;
  v13 = *(_QWORD *)(a3 + 8);
  v15 = *(unsigned int *)(a3 + 24);
  v16 = *(_DWORD *)(a3 + 28);
  v17 = *(_DWORD *)(a3 + 32);
  v18 = *(_DWORD *)(a3 + 40);
  v19 = **(_DWORD ***)(a1 + 16);
  if (v19)
    ++v19[2];
  v20 = (v16 + 1);
  if (v17 <= 1)
    v17 = 1;
  v21 = (v17 - 1);
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  v22 = v18 & ~(v18 >> 31);
  *(int32x2_t *)(v12 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_BYTE *)(v12 + 25) = 126;
  *(_BYTE *)(v12 + 26) = 0;
  *(_QWORD *)v12 = off_1E357AA60;
  *(_QWORD *)(v12 + 32) = v13;
  if (v19)
    ++v19[2];
  v23 = v15 | (v20 << 32);
  v24 = *(_DWORD **)(v13 + 80);
  *(_QWORD *)(v13 + 80) = v19;
  v25 = v21 | (v22 << 32);
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  *(_QWORD *)(v13 + 88) = v23;
  *(_QWORD *)(v13 + 96) = v25;
  v26 = *v14;
  if (*v14)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  *(_DWORD *)(v13 + 36) = 3;
  *(_QWORD *)v12 = &off_1E358AC00;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v28 = *(_QWORD *)(a3 + 8);
  v29 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(v28 + 136) = *(_DWORD *)(a3 + 36);
  v30 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v28 + 16) = v29;
  *(int32x2_t *)(v28 + 20) = vrev64_s32(v30);
  return v12;
}

uint64_t JSC::ASTBuilder::createProperty(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, __int16 a4, int a5, char a6)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - result) <= 0x1F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    result = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | a4 & 0x7FF | ((a5 == 0) << 11) & 0xCFFF | ((a6 & 3) << 12);
  return result;
}

uint64_t JSC::ASTBuilder::createClassExpr(JSC::ParserArena *a1, _DWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v19 = *((unsigned int *)a4 + 2);
  v18 = *((_DWORD *)a4 + 3);
  v21 = *((_DWORD *)a4 + 4);
  v20 = *((_DWORD *)a4 + 5);
  if (a2)
    ++a2[2];
  v22 = (v18 + 1);
  if (v21 <= 1)
    v21 = 1;
  v23 = (v21 - 1);
  v24 = v20 & ~(v20 >> 31);
  v25 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) - *(_QWORD *)a1 <= 0xCFuLL)
  {
    v51 = v19;
    v53 = a8;
    v49 = a7;
    JSC::ParserArena::allocateFreeablePool(a1);
    v19 = v51;
    a8 = v53;
    a7 = v49;
    v25 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v25 + 208;
  v26 = v25 + 64;
  if (!v25)
    v26 = 0;
  v54 = v26;
  v27 = *((unsigned int *)a1 + 13);
  if ((_DWORD)v27 == *((_DWORD *)a1 + 12))
  {
    v45 = (uint64_t)a1 + 40;
    v50 = a7;
    v52 = a8;
    v46 = v19;
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v45, (unint64_t)&v54);
    v19 = v46;
    a7 = v50;
    a8 = v52;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a1 + 5) + 8 * v27) = v26;
    *((_DWORD *)a1 + 13) = v27 + 1;
  }
  v28 = *a4;
  *(_DWORD *)(v25 + 8) = *(_DWORD *)a3;
  v29 = *(int32x2_t *)(a3 + 4);
  *(_QWORD *)&v30 = -1;
  *((_QWORD *)&v30 + 1) = -1;
  *(_OWORD *)(v25 + 28) = v30;
  *(_OWORD *)(v25 + 44) = v30;
  v31 = v19 | (v22 << 32);
  *(_DWORD *)(v25 + 20) = -1;
  *(_BYTE *)(v25 + 25) = 126;
  *(_DWORD *)(v25 + 60) = -1;
  *(_QWORD *)(v25 + 72) = 0;
  v32 = *a6;
  *a6 = 0;
  *(_QWORD *)(v25 + 72) = v32;
  *(_BYTE *)(v25 + 80) = *((_BYTE *)a6 + 8);
  v33 = a6[2];
  a6[2] = 0;
  v34 = a9;
  *(int32x2_t *)(v25 + 12) = vrev64_s32(v29);
  *(_BYTE *)(v25 + 24) = 0;
  *(_BYTE *)(v25 + 26) = 0;
  *(_QWORD *)(v25 + 88) = v33;
  *(_QWORD *)(v25 + 96) = 0;
  *(_QWORD *)(v25 + 104) = 0;
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)v25 = &off_1E358B1C0;
  *(_QWORD *)(v25 + 64) = &unk_1E358B340;
  v35 = *a5;
  *a5 = 0;
  *(_QWORD *)(v25 + 112) = v35;
  *(_BYTE *)(v25 + 120) = *((_BYTE *)a5 + 8);
  v36 = a5[2];
  a5[2] = 0;
  *(_QWORD *)(v25 + 128) = v36;
  if (a2)
    ++a2[2];
  *(_QWORD *)(v25 + 136) = a2;
  *(_QWORD *)(v25 + 144) = v31;
  *(_QWORD *)(v25 + 152) = v23 | (v24 << 32);
  *(_QWORD *)(v25 + 160) = v28;
  *(_QWORD *)(v25 + 168) = v28;
  *(_QWORD *)(v25 + 176) = a7;
  *(_QWORD *)(v25 + 184) = a8;
  *(_QWORD *)(v25 + 192) = a9;
  if (!a9)
  {
LABEL_20:
    v40 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v37 = *(_QWORD *)(v34 + 32);
    v38 = *(_WORD *)(v37 + 24);
    if ((v38 & 0x3000) != 0 && (v38 & 0x800) == 0)
      break;
    if ((*(_WORD *)(v37 + 24) & 0x3C0) != 0)
      goto LABEL_31;
LABEL_19:
    v34 = *(_QWORD *)(v34 + 40);
    if (!v34)
      goto LABEL_20;
  }
  v47 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x3C0) == 0 && v47 == 0)
    goto LABEL_19;
LABEL_31:
  v40 = 1;
LABEL_21:
  *(_BYTE *)(v25 + 200) = v40;
  v41 = *a11;
  *(_DWORD *)(v25 + 36) = *((_DWORD *)a11 + 2);
  *(_QWORD *)(v25 + 28) = v41;
  v42 = *a10;
  *(_DWORD *)(v25 + 48) = *((_DWORD *)a10 + 2);
  *(_QWORD *)(v25 + 40) = v42;
  v43 = *a12;
  *(_DWORD *)(v25 + 60) = *((_DWORD *)a12 + 2);
  *(_QWORD *)(v25 + 52) = v43;
  if (a2)
  {
    if (a2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 8))(a2);
    else
      --a2[2];
  }
  return v25;
}

uint64_t JSC::ASTBuilder::createGetterOrSetterProperty(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  int32x2_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  JSC::ParserArena *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int16 v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned int v66;

  v11 = *(_QWORD *)(a5 + 8);
  v12 = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(v11 + 136) = *(_DWORD *)(a5 + 36);
  v13 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v11 + 16) = v12;
  *(int32x2_t *)(v11 + 20) = vrev64_s32(v13);
  v14 = (_DWORD *)*a4;
  if (*a4)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)(v11 + 48);
  *(_QWORD *)(v11 + 48) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      v39 = a6;
      v40 = a3;
      v41 = a4;
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      a4 = v41;
      a3 = v40;
      a6 = v39;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v17 = *(unsigned int *)(a5 + 24);
  v16 = *(_DWORD *)(a5 + 28);
  v18 = *(_DWORD *)(a5 + 32);
  v19 = *(_DWORD *)(a5 + 40);
  v20 = (_DWORD *)*a1[2];
  if (v20)
    ++v20[2];
  v21 = (v16 + 1);
  if (v18 <= 1)
    v18 = 1;
  v22 = (v18 - 1);
  v23 = v19 & ~(v19 >> 31);
  v24 = a1[1];
  v25 = *v24;
  if ((unint64_t)(v24[1] - *v24) <= 0x27)
  {
    v66 = a6;
    v61 = a3;
    v65 = a4;
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a1[1]);
    a4 = v65;
    a3 = v61;
    a6 = v66;
    v25 = *v24;
  }
  *v24 = v25 + 40;
  v26 = (_DWORD **)(*a1)[5244];
  v27 = *(_QWORD *)(a5 + 8);
  *(_DWORD *)(v25 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v25 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v25 + 20) = -1;
  *(_BYTE *)(v25 + 24) = 0;
  *(_BYTE *)(v25 + 25) = 126;
  *(_BYTE *)(v25 + 26) = 0;
  *(_QWORD *)v25 = off_1E357AA60;
  *(_QWORD *)(v25 + 32) = v27;
  if (v20)
    ++v20[2];
  v28 = v17 | (v21 << 32);
  v29 = *(_DWORD **)(v27 + 80);
  *(_QWORD *)(v27 + 80) = v20;
  v30 = v22 | (v23 << 32);
  if (v29)
  {
    if (v29[2] == 1)
    {
      v36 = a6;
      v37 = a3;
      v38 = a4;
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
      a4 = v38;
      a3 = v37;
      a6 = v36;
    }
    else
    {
      --v29[2];
    }
  }
  *(_QWORD *)(v27 + 88) = v28;
  *(_QWORD *)(v27 + 96) = v30;
  v31 = *v26;
  if (*v26)
    *v31 += 2;
  v32 = *(WTF::StringImpl **)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      v50 = a6;
      v51 = a3;
      v52 = a4;
      WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      a4 = v52;
      LOWORD(a3) = v51;
      LOBYTE(a6) = v50;
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  *(_DWORD *)(v27 + 36) = 3;
  *(_QWORD *)v25 = &off_1E358AC00;
  v33 = (JSC::ParserArena *)a1[1];
  v34 = *(_QWORD *)v33;
  if (*((_QWORD *)v33 + 1) - *(_QWORD *)v33 <= 0x1FuLL)
  {
    v62 = a6;
    v63 = a3;
    v64 = a4;
    JSC::ParserArena::allocateFreeablePool(v33);
    a4 = v64;
    LOWORD(a3) = v63;
    LOBYTE(a6) = v62;
    v34 = *(_QWORD *)v33;
  }
  *(_QWORD *)v33 = v34 + 32;
  *(_QWORD *)v34 = a4;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = v25;
  *(_WORD *)(v34 + 24) = a3 & 0x7FF | ((a6 & 3) << 12) | *(_WORD *)(v34 + 24) & 0x8000 | 0x800;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  return v34;
}

uint64_t JSC::ASTBuilder::createGetterOrSetterProperty(uint64_t **a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v14;
  int v15;
  int32x2_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  JSC::ParserArena *v24;
  uint64_t v25;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v8 = a6;
  v14 = *(_QWORD *)(a5 + 8);
  v15 = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(v14 + 136) = *(_DWORD *)(a5 + 36);
  v16 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v14 + 16) = v15;
  *(int32x2_t *)(v14 + 20) = vrev64_s32(v16);
  v17 = *(_DWORD *)(a5 + 24);
  v18 = *(_DWORD *)(a5 + 28);
  v19 = *(_DWORD *)(a5 + 32);
  v20 = *(_DWORD *)(a5 + 40);
  v21 = (_DWORD *)*a1[2];
  if (v21)
    ++v21[2];
  v27 = v21;
  v28 = v17;
  v29 = v18 + 1;
  if (v19 <= 1)
    v19 = 1;
  v30 = v19 - 1;
  v31 = v20 & ~(v20 >> 31);
  v22 = a1[1];
  v23 = *v22;
  if ((unint64_t)(v22[1] - *v22) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a1[1]);
    v23 = *v22;
    v14 = *(_QWORD *)(a5 + 8);
  }
  *v22 = v23 + 40;
  JSC::MethodDefinitionNode::MethodDefinitionNode(v23, a2, (_QWORD *)(*a1)[5244], v14, (uint64_t *)&v27, a6, a7, a8);
  v24 = (JSC::ParserArena *)a1[1];
  v25 = *(_QWORD *)v24;
  if (*((_QWORD *)v24 + 1) - *(_QWORD *)v24 <= 0x1FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v24);
    v25 = *(_QWORD *)v24;
  }
  *(_QWORD *)v24 = v25 + 32;
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = a4;
  *(_QWORD *)(v25 + 16) = v23;
  *(_WORD *)(v25 + 24) = a3 & 0x7FF | ((v8 & 3) << 12) | *(_WORD *)(v25 + 24) & 0x8000 | 0x800;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  return v25;
}

uint64_t JSC::ASTBuilder::createGetterOrSetterProperty(uint64_t a1, uint64_t **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v14;
  int v15;
  int32x2_t v16;
  unint64_t *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **NumericIdentifier;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD **v51;
  _DWORD **v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD **v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _DWORD **v97;
  uint64_t v98;
  __int16 v99;
  char v100;
  uint64_t v101;

  v99 = a5;
  v100 = a7;
  v14 = *(_QWORD *)(a6 + 8);
  v15 = *(_DWORD *)(a6 + 32);
  *(_DWORD *)(v14 + 136) = *(_DWORD *)(a6 + 36);
  v16 = *(int32x2_t *)(a4 + 4);
  *(_DWORD *)(v14 + 16) = v15;
  *(int32x2_t *)(v14 + 20) = vrev64_s32(v16);
  v17 = (unint64_t *)*((_QWORD *)a3 + 2);
  if (!v17)
  {
    v17 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v17, v71, v72, v73, v74, v75, v76, v77);
    bzero(v17 + 3, 0x800uLL);
    v79 = (unint64_t *)*((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = v17;
    if (v79)
    {
      WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v79, v78, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      v17 = (unint64_t *)*((_QWORD *)a3 + 2);
    }
  }
  NumericIdentifier = (_DWORD **)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v17, a2, a9, a3, a4, a5, a6, a7, a8);
  v26 = *(_QWORD *)(a6 + 8);
  v27 = *NumericIdentifier;
  if (*NumericIdentifier)
    *v27 += 2;
  v28 = *(WTF::StringImpl **)(v26 + 48);
  *(_QWORD *)(v26 + 48) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      v52 = NumericIdentifier;
      WTF::StringImpl::~StringImpl(v28, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      NumericIdentifier = v52;
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v30 = *(unsigned int *)(a6 + 24);
  v29 = *(_DWORD *)(a6 + 28);
  v31 = *(_DWORD *)(a6 + 32);
  v32 = *(_DWORD *)(a6 + 40);
  v33 = **(_DWORD ***)(a1 + 16);
  if (v33)
    ++v33[2];
  v34 = (v29 + 1);
  if (v31 <= 1)
    v31 = 1;
  v35 = (v31 - 1);
  v36 = v32 & ~(v32 >> 31);
  v98 = a1;
  v37 = *(_QWORD *)(a1 + 8);
  v39 = *(_QWORD *)v37;
  v38 = *(_QWORD *)(v37 + 8);
  if ((unint64_t)(v38 - *(_QWORD *)v37) <= 0x27)
  {
    v97 = NumericIdentifier;
    if (v38)
    {
      v88 = (_QWORD *)(v37 + 24);
      v89 = v38 - 8000;
      v101 = v38 - 8000;
      v90 = *(unsigned int *)(v37 + 36);
      if ((_DWORD)v90 == *(_DWORD *)(v37 + 32))
      {
        v95 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v90 + 1, (unint64_t)&v101);
        v90 = *(unsigned int *)(v37 + 36);
        *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8 * v90) = *v95;
      }
      else
      {
        *(_QWORD *)(*v88 + 8 * v90) = v89;
      }
      *(_DWORD *)(v37 + 36) = v90 + 1;
    }
    v39 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v37 + 8) = v39 + 8000;
    NumericIdentifier = v97;
  }
  *(_QWORD *)v37 = v39 + 40;
  v40 = a2[5244];
  v41 = *(_QWORD *)(a6 + 8);
  *(_DWORD *)(v39 + 8) = *(_DWORD *)a4;
  *(int32x2_t *)(v39 + 12) = vrev64_s32(*(int32x2_t *)(a4 + 4));
  *(_DWORD *)(v39 + 20) = -1;
  *(_BYTE *)(v39 + 24) = 0;
  *(_BYTE *)(v39 + 25) = 126;
  *(_BYTE *)(v39 + 26) = 0;
  *(_QWORD *)v39 = off_1E357AA60;
  *(_QWORD *)(v39 + 32) = v41;
  if (v33)
    ++v33[2];
  v42 = v30 | (v34 << 32);
  v43 = *(_DWORD **)(v41 + 80);
  *(_QWORD *)(v41 + 80) = v33;
  v44 = v35 | (v36 << 32);
  if (v43)
  {
    if (v43[2] == 1)
    {
      v51 = NumericIdentifier;
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
      NumericIdentifier = v51;
    }
    else
    {
      --v43[2];
    }
  }
  *(_QWORD *)(v41 + 88) = v42;
  *(_QWORD *)(v41 + 96) = v44;
  v45 = (_DWORD *)*v40;
  if (*v40)
    *v45 += 2;
  v46 = *(WTF::StringImpl **)(v41 + 40);
  *(_QWORD *)(v41 + 40) = v45;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      v61 = NumericIdentifier;
      WTF::StringImpl::~StringImpl(v46, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      NumericIdentifier = v61;
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  *(_DWORD *)(v41 + 36) = 3;
  *(_QWORD *)v39 = &off_1E358AC00;
  v47 = *(_QWORD *)(v98 + 8);
  v49 = *(_QWORD *)v47;
  v48 = *(_QWORD *)(v47 + 8);
  if ((unint64_t)(v48 - *(_QWORD *)v47) <= 0x1F)
  {
    v91 = NumericIdentifier;
    if (v48)
    {
      v92 = (_QWORD *)(v47 + 24);
      v93 = v48 - 8000;
      v101 = v48 - 8000;
      v94 = *(unsigned int *)(v47 + 36);
      if ((_DWORD)v94 == *(_DWORD *)(v47 + 32))
      {
        v96 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v94 + 1, (unint64_t)&v101);
        v94 = *(unsigned int *)(v47 + 36);
        *(_QWORD *)(*(_QWORD *)(v47 + 24) + 8 * v94) = *v96;
      }
      else
      {
        *(_QWORD *)(*v92 + 8 * v94) = v93;
      }
      *(_DWORD *)(v47 + 36) = v94 + 1;
    }
    v49 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v47 + 8) = v49 + 8000;
    NumericIdentifier = v91;
  }
  *(_QWORD *)v47 = v49 + 32;
  *(_QWORD *)v49 = NumericIdentifier;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = v39;
  *(_WORD *)(v49 + 24) = v99 & 0x7FF | ((v100 & 3) << 12) | *(_WORD *)(v49 + 24) & 0x8000 | 0x800;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  return v49;
}

uint64_t JSC::MethodDefinitionNode::MethodDefinitionNode(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(a1 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = 126;
  *(_BYTE *)(a1 + 26) = 0;
  *(_QWORD *)a1 = off_1E357AA60;
  *(_QWORD *)(a1 + 32) = a4;
  v12 = *a5;
  if (*a5)
    ++*(_DWORD *)(v12 + 8);
  v13 = *(_DWORD **)(a4 + 80);
  *(_QWORD *)(a4 + 80) = v12;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  *(_QWORD *)(a4 + 88) = a5[1];
  *(_QWORD *)(a4 + 96) = a5[2];
  v14 = (_DWORD *)*a3;
  if (*a3)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)(a4 + 40);
  *(_QWORD *)(a4 + 40) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  *(_DWORD *)(a4 + 36) = 3;
  *(_QWORD *)a1 = &off_1E358AC00;
  return a1;
}

uint64_t JSC::StatementNode::hasCompletionValue(JSC::StatementNode *this)
{
  return 1;
}

uint64_t JSC::StatementNode::hasEarlyBreakOrContinue(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isEmptyStatement(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isDebuggerStatement(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isFunctionNode(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isReturnNode(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isExprStatement(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isBreak(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isContinue(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isLabel(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isBlock(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isFuncDeclNode(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isModuleDeclarationNode(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isForOfNode(JSC::StatementNode *this)
{
  return 0;
}

uint64_t JSC::StatementNode::isDefineFieldNode(JSC::StatementNode *this)
{
  return 0;
}

void JSC::PropertyListNode::~PropertyListNode(JSC::PropertyListNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::PropertyListNode::emitBytecode(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::PropertyListNode::emitBytecode(a1, a2, a3, 0, 0, 0, a7, a8);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t **v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::StringImpl ***v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  _DWORD *v42;
  _QWORD *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  signed int v76;
  signed int v77;
  signed int v78;
  _BOOL4 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  _BOOL4 v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  unsigned int v113;
  char v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  _DWORD *v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  _QWORD *v127;
  _BYTE *v128;
  char v129;
  char v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  _WORD *v133;
  unsigned __int16 v134;
  unsigned __int16 v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  _BYTE *v142;
  char v143;
  char v144;
  WTF::StringImpl **v145;
  char v146;
  _BYTE *v147;
  uint64_t v148;
  char v149;
  char *v150;
  char *v151;
  WTF::StringImpl **v152;
  char v153;
  char v154;
  _BYTE *v155;
  char v156;
  char v157;
  _DWORD *v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  signed int v178;
  signed int v179;
  signed int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  __int128 v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _DWORD *v216;
  uint64_t v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  BOOL v224;
  uint64_t v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  unsigned int v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  char v253;
  _BOOL4 v254;
  _BOOL4 v255;
  _BOOL4 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  unsigned int v261;
  unsigned int v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  __int16 v266;
  __int16 v267;
  __int16 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  unsigned int v273;
  unsigned int v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  int v279;
  unsigned int v280;
  unsigned __int16 v281;
  WTF::StringImpl *v282;
  int v283;
  unsigned int v284;
  uint64_t v285;
  __int128 v286;
  WTF::StringImpl *v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  _QWORD *v317;
  WTF::AtomStringImpl *v318;
  uint64_t v319;
  WTF::AtomStringImpl *v320;
  WTF::AtomStringImpl *v321;
  WTF::AtomStringImpl *v322;
  _DWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  unint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  uint64_t v355;
  _BYTE *v356;
  uint64_t v357;
  _DWORD *v358;
  int v359;
  int v360[2];
  uint64_t v361;
  WTF::StringImpl *v362;
  _BYTE v363[29];
  _DWORD *v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  _DWORD **v370;
  uint64_t v371;

  v8 = a6;
  v9 = a5;
  v10 = (uint64_t)a2;
  v11 = a1;
  v371 = *MEMORY[0x1E0C80C00];
  v366 = a4;
  v367 = a3;
  v12 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)v360 = a1;
  if (!v12)
    goto LABEL_2;
  v357 = a5;
  v355 = a6;
  v365 = 0;
  do
  {
    v316 = *(_QWORD *)(v11 + 32);
    if ((*(_WORD *)(v316 + 24) & 0x300) != 0)
    {
      v368 = *(unint64_t *)(v11 + 32);
      v364 = **(_DWORD ***)v316;
      WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::add<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>&>((uint64_t *)&v362, (uint64_t *)&v365, (uint64_t *)&v364, &v368, a5, a6, a7, a8);
      if (!v363[8])
        *((_QWORD *)v362 + 2) = *(_QWORD *)(v11 + 32);
    }
    v11 = *(_QWORD *)(v11 + 40);
  }
  while (v11);
  v317 = v365;
  v318 = (WTF::AtomStringImpl *)WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::begin(v365);
  v320 = v318;
  v321 = a2;
  if (v317)
    v322 = (WTF::AtomStringImpl *)&v317[3 * *((unsigned int *)v317 - 1)];
  else
    v322 = 0;
  if (v322 != v318)
  {
    do
    {
      v323 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
      JSC::BytecodeGenerator::emitNewObject(v10, (uint64_t)v323, v324, v325, v326, v327, v328, v329);
      if (v323)
        ++*v323;
      v364 = v323;
      v336 = (uint64_t *)*((_QWORD *)v320 + 1);
      v337 = *((_QWORD *)v320 + 2);
      *(_QWORD *)&v368 = &v366;
      *((_QWORD *)&v368 + 1) = &v367;
      v369 = v10;
      v370 = &v364;
      if (v336)
        JSC::PropertyListNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *,JSC::RegisterID *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *)::$_0::operator()((uint64_t)&v368, (uint64_t)v336, v330, v331, v332, v333, v334, v335);
      if (v337)
        JSC::PropertyListNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *,JSC::RegisterID *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *)::$_0::operator()((uint64_t)&v368, v337, v330, v331, v332, v333, v334, v335);
      JSC::BytecodeGenerator::variable((uint64_t)&v362, v10, *v336, 0, v332, v333, v334, v335);
      JSC::BytecodeGenerator::emitPutToScope(v10, *(_QWORD *)(v10 + 248), (uint64_t)&v362, (uint64_t)v364, 1, 1, v338, v339);
      v340 = v362;
      v362 = 0;
      if (v340)
      {
        if (*(_DWORD *)v340 == 2)
        {
          WTF::StringImpl::~StringImpl(v340, a2, a3, v319, a5, a6, a7, a8);
          WTF::fastFree(v341, v342, v343, v344, v345, v346, v347, v348);
        }
        else
        {
          *(_DWORD *)v340 -= 2;
        }
      }
      if (v364)
        --*v364;
      while (1)
      {
        v320 = (WTF::AtomStringImpl *)((char *)v320 + 24);
        if (v320 == v321)
          break;
        if ((unint64_t)(*(_QWORD *)v320 + 1) > 1)
          goto LABEL_413;
      }
      v320 = v321;
LABEL_413:
      ;
    }
    while (v320 != v322);
  }
  if (v317)
    WTF::fastFree((unint64_t)(v317 - 2), a2, a3, v319, a5, a6, a7, a8);
  v8 = v355;
  v9 = v357;
  v11 = *(_QWORD *)v360;
  if (*(_QWORD *)v360)
  {
LABEL_2:
    v13 = v11;
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 32);
      v15 = *(_WORD *)(v14 + 24);
      if ((v15 & 1) == 0)
        break;
      if ((v15 & 0x3000) == 0x1000)
        v16 = &v366;
      else
        v16 = &v367;
      if ((*(_WORD *)(v14 + 24) & 0x300) == 0)
      {
        v17 = *v16;
        v18 = (*(_WORD *)(v14 + 24) & 0x3000) != 0 && (v15 & 0x800) == 0;
        if (v18 && *(_QWORD *)(v14 + 8))
        {
          JSC::PropertyListNode::emitSaveComputedFieldName(v10, *(_QWORD *)(v13 + 32), a3, v14, a5, a6, a7, a8);
          v14 = *(_QWORD *)(v13 + 32);
          v15 = *(_WORD *)(v14 + 24);
        }
        if ((v15 & 0x3800) != 0x1000 || (v15 & 0x80) != 0)
        {
          if ((v15 & 0x400) != 0 || (v15 & 0x3000) == 0x2000 && (v15 & 0x800) == 0)
          {
            JSC::PropertyListNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *,JSC::RegisterID *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *)::$_1::operator()((uint64_t)&v362, v13);
            v182 = *(_DWORD *)(v8 + 12);
            if (v182 == *(_DWORD *)(v8 + 8))
            {
              v186 = v8;
              WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::UnlinkedFunctionExecutable::ClassElementDefinition>(v8, (unint64_t)&v362);
            }
            else
            {
              v183 = *(_QWORD *)v8 + 40 * v182;
              v184 = v362;
              v362 = 0;
              *(_QWORD *)v183 = v184;
              v185 = *(_OWORD *)v363;
              *(_OWORD *)(v183 + 21) = *(_OWORD *)&v363[13];
              *(_OWORD *)(v183 + 8) = v185;
              v186 = v8;
              ++*(_DWORD *)(v8 + 12);
            }
            v187 = v362;
            v362 = 0;
            if (v187)
            {
              if (*(_DWORD *)v187 == 2)
              {
                WTF::StringImpl::~StringImpl(v187, a2, a3, v181, a5, a6, a7, a8);
                WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
              }
              else
              {
                *(_DWORD *)v187 -= 2;
              }
            }
            v8 = v186;
            v11 = *(_QWORD *)v360;
          }
          else
          {
            JSC::PropertyListNode::emitPutConstantProperty(v11, (JSC::BytecodeGenerator *)v10, v17, v14, a5, a6, a7, a8);
          }
        }
        else
        {
          v250 = *(_QWORD *)(v14 + 16);
          if (v250)
          {
            v251 = *(_BYTE *)(v250 + 8);
            *(_QWORD *)&v368 = *(_QWORD *)(v250 + 9);
            *(_DWORD *)((char *)&v368 + 7) = *(_DWORD *)(v250 + 16);
            LOBYTE(v250) = 1;
          }
          else
          {
            v251 = 0;
          }
          if ((v15 & 0x400) != 0)
          {
            v253 = 3;
          }
          else
          {
            v252 = 2 * ((v15 & 0x3C0) != 0);
            if (*(_QWORD *)(v14 + 8))
              v253 = 1;
            else
              v253 = v252;
          }
          v282 = **(WTF::StringImpl ***)v14;
          if (v282)
            *(_DWORD *)v282 += 2;
          v362 = v282;
          v283 = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v363 = *(_QWORD *)(v13 + 8);
          *(_DWORD *)&v363[8] = v283;
          v363[12] = v251;
          *(_QWORD *)&v363[13] = v368;
          *(_DWORD *)&v363[20] = *(_DWORD *)((char *)&v368 + 7);
          v363[24] = v250;
          v363[28] = v253;
          v284 = *(_DWORD *)(v9 + 12);
          if (v284 == *(_DWORD *)(v9 + 8))
          {
            WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::UnlinkedFunctionExecutable::ClassElementDefinition>(v9, (unint64_t)&v362);
          }
          else
          {
            v285 = *(_QWORD *)v9 + 40 * v284;
            v362 = 0;
            *(_QWORD *)v285 = v282;
            v286 = *(_OWORD *)v363;
            *(_OWORD *)(v285 + 21) = *(_OWORD *)&v363[13];
            *(_OWORD *)(v285 + 8) = v286;
            ++*(_DWORD *)(v9 + 12);
          }
          v287 = v362;
          v362 = 0;
          if (v287)
          {
            if (*(_DWORD *)v287 == 2)
            {
              WTF::StringImpl::~StringImpl(v287, a2, a3, v14, a5, a6, a7, a8);
              WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
            }
            else
            {
              *(_DWORD *)v287 -= 2;
            }
          }
        }
      }
      v13 = *(_QWORD *)(v13 + 40);
      if (!v13)
        return v367;
    }
    v364 = 0;
    v365 = 0;
    v20 = v13;
    v355 = v8;
    v357 = v9;
    while (1)
    {
      v21 = *(uint64_t ***)(v20 + 32);
      v22 = *((_WORD *)v21 + 12);
      if ((v22 & 0x28) != 0)
      {
LABEL_35:
        v359 = 0;
LABEL_36:
        v356 = v363;
        v30 = *(_QWORD *)v360;
        while (2)
        {
          v31 = *(_QWORD *)(v13 + 32);
          v32 = *(_WORD *)(v31 + 24);
          v33 = &v366;
          if ((v32 & 0x3000) != 0x1000)
            v33 = &v367;
          v34 = *v33;
          if ((*(_WORD *)(v31 + 24) & 0x3000) != 0 && (v32 & 0x800) == 0)
          {
            v36 = *(WTF::StringImpl ****)(v13 + 32);
            if (*(_QWORD *)(v31 + 8))
            {
              JSC::PropertyListNode::emitSaveComputedFieldName(v10, *(_QWORD *)(v13 + 32), a3, v14, a5, a6, a7, a8);
              v36 = *(WTF::StringImpl ****)(v13 + 32);
              v32 = *((_WORD *)v36 + 12);
            }
          }
          else
          {
            v36 = *(WTF::StringImpl ****)(v13 + 32);
          }
          if ((v32 & 0x300) != 0)
            goto LABEL_50;
          if ((v32 & 0x3800) == 0x1000)
          {
            v145 = v36[2];
            if (v145)
            {
              v146 = *((_BYTE *)v145 + 8);
              *(_QWORD *)&v368 = *(WTF::StringImpl **)((char *)v145 + 9);
              *(_DWORD *)((char *)&v368 + 7) = *((_DWORD *)v145 + 4);
              LOBYTE(v145) = 1;
            }
            else
            {
              v146 = 0;
            }
            v147 = v356;
            v148 = v357;
            if ((v32 & 0x400) != 0)
            {
              v149 = 3;
            }
            else
            {
              v149 = 2 * ((v32 & 0x3C0) != 0);
              if (v36[1])
                v149 = 1;
            }
            v188 = **v36;
            if (v188)
              *(_DWORD *)v188 += 2;
            v362 = v188;
            v189 = *(_DWORD *)(v13 + 16);
            *(_QWORD *)v147 = *(_QWORD *)(v13 + 8);
            *((_DWORD *)v147 + 2) = v189;
            v363[12] = v146;
            *(_QWORD *)&v363[13] = v368;
            *(_DWORD *)&v363[20] = *(_DWORD *)((char *)&v368 + 7);
            v363[24] = (_BYTE)v145;
            v363[28] = v149;
            v190 = *(unsigned int *)(v148 + 12);
            if ((_DWORD)v190 != *(_DWORD *)(v148 + 8))
            {
              v191 = *(_QWORD *)v148 + 40 * v190;
              v362 = 0;
              *(_QWORD *)v191 = v188;
              v192 = *(_OWORD *)v147;
              v193 = *(_OWORD *)(v147 + 13);
              goto LABEL_238;
            }
            v195 = WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v148, v190 + 1, (unint64_t)&v362);
            v196 = *(_QWORD *)v148 + 40 * *(unsigned int *)(v148 + 12);
            v197 = *(_QWORD *)v195;
            *(_QWORD *)v195 = 0;
            *(_QWORD *)v196 = v197;
            v198 = *(_OWORD *)(v195 + 21);
            *(_OWORD *)(v196 + 8) = *(_OWORD *)(v195 + 8);
            *(_OWORD *)(v196 + 21) = v198;
LABEL_239:
            ++*(_DWORD *)(v148 + 12);
            goto LABEL_240;
          }
          if ((v32 & 0x400) != 0 || (v32 & 0x3000) == 0x2000 && (v32 & 0x800) == 0)
          {
            v152 = v36[2];
            if (v152)
            {
              v153 = *((_BYTE *)v152 + 8);
              *(_QWORD *)&v368 = *(WTF::StringImpl **)((char *)v152 + 9);
              *(_DWORD *)((char *)&v368 + 7) = *((_DWORD *)v152 + 4);
              LOBYTE(v152) = 1;
            }
            else
            {
              v153 = 0;
            }
            v148 = v355;
            if ((v32 & 0x400) != 0)
            {
              v154 = 3;
            }
            else
            {
              v154 = 2 * ((v32 & 0x3C0) != 0);
              if (v36[1])
                v154 = 1;
            }
            v278 = **v36;
            if (v278)
              *(_DWORD *)v278 += 2;
            v362 = v278;
            v279 = *(_DWORD *)(v13 + 16);
            *(_QWORD *)v363 = *(_QWORD *)(v13 + 8);
            *(_DWORD *)&v363[8] = v279;
            v363[12] = v153;
            *(_QWORD *)&v363[13] = v368;
            *(_DWORD *)&v363[20] = *(_DWORD *)((char *)&v368 + 7);
            v363[24] = (_BYTE)v152;
            v363[28] = v154;
            v280 = *(_DWORD *)(v148 + 12);
            if (v280 != *(_DWORD *)(v148 + 8))
            {
              v191 = *(_QWORD *)v148 + 40 * v280;
              v362 = 0;
              *(_QWORD *)v191 = v278;
              v192 = *(_OWORD *)v363;
              v193 = *(_OWORD *)&v363[13];
LABEL_238:
              *(_OWORD *)(v191 + 21) = v193;
              *(_OWORD *)(v191 + 8) = v192;
              goto LABEL_239;
            }
            WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::UnlinkedFunctionExecutable::ClassElementDefinition>(v148, (unint64_t)&v362);
LABEL_240:
            v194 = v362;
            v362 = 0;
            if (v194)
            {
              if (*(_DWORD *)v194 == 2)
              {
                WTF::StringImpl::~StringImpl(v194, a2, a3, v14, a5, a6, a7, a8);
                WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
              }
              else
              {
                *(_DWORD *)v194 -= 2;
              }
            }
LABEL_50:
            v13 = *(_QWORD *)(v13 + 40);
            if (!v13)
            {
              if (v364)
                WTF::fastFree((unint64_t)(v364 - 4), a2, a3, v14, a5, a6, a7, a8);
              if (v365)
                WTF::fastFree((unint64_t)(v365 - 2), a2, a3, v14, a5, a6, a7, a8);
              return v367;
            }
            continue;
          }
          break;
        }
        if ((*(_WORD *)(v31 + 24) & 1) != 0)
        {
          JSC::PropertyListNode::emitPutConstantProperty(v30, (JSC::BytecodeGenerator *)v10, v34, v31, a5, a6, a7, a8);
          goto LABEL_50;
        }
        v37 = *(_WORD *)(v31 + 24);
        v38 = *(_QWORD *)(v31 + 16);
        v39 = *(_BYTE *)(v10 + 709);
        v40 = *(_BYTE *)(v10 + 710);
        *(_WORD *)(v10 + 709) = 0;
        v41 = *(_QWORD *)(*(_QWORD *)(v10 + 696) + 93104);
        if ((v37 & 0x20) != 0)
        {
          if ((unint64_t)&v355 >= v41)
          {
            if (*(_BYTE *)(v38 + 24))
              JSC::BytecodeGenerator::emitDebugHook((char *)v10, 5, v38 + 8, v14, a5, a6, a7, a8);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v10, v34);
          }
          else
          {
            *(_BYTE *)(v10 + 706) = 1;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
          }
          *(_BYTE *)(v10 + 710) = v40;
          *(_BYTE *)(v10 + 709) = v39;
          goto LABEL_50;
        }
        if ((unint64_t)&v355 >= v41)
        {
          if (*(_BYTE *)(v38 + 24)
            && (*(_BYTE *)(v10 + 104) & 1) != 0
            && !*(_BYTE *)(v10 + 707)
            && (*(_DWORD *)(v10 + 736) != *(_DWORD *)(v38 + 8)
             || *(_DWORD *)(v10 + 740) != *(_DWORD *)(v38 + 12)
             || *(_DWORD *)(v10 + 744) != *(_DWORD *)(v38 + 16)
             || *(_DWORD *)(v10 + 748) != 5))
          {
            v217 = *(_QWORD *)(v38 + 8);
            *(_DWORD *)(v10 + 744) = *(_DWORD *)(v38 + 16);
            *(_QWORD *)(v10 + 736) = v217;
            *(_DWORD *)(v10 + 748) = 5;
            v218 = *(_DWORD *)(v38 + 8);
            v219 = *(_DWORD *)(v38 + 12);
            v220 = *(_DWORD *)(v38 + 16);
            if (v218 != -1 || v219 != -1 || v220 != -1)
            {
              v221 = *(_QWORD *)(v10 + 192);
              v222 = *(_DWORD *)(v221 + 176);
              a3 = v219 - v222;
              v223 = v220 - v222;
              if (v220 < v222)
                v223 = 0;
              v224 = a3 >= v223;
              v225 = a3 - v223;
              if (v224)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(v10 + 24), *(unsigned int *)(v10 + 12), a3, 0, 0, (v218 + ~*(_DWORD *)(v221 + 184)) | (unint64_t)(v225 << 32));
            }
            JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v10, 5, a3, v14, a5, a6, a7, a8);
          }
          v216 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 16))(v38, v10, 0);
        }
        else
        {
          *(_BYTE *)(v10 + 706) = 1;
          v216 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
        }
        v42 = v216;
        *(_BYTE *)(v10 + 710) = v40;
        *(_BYTE *)(v10 + 709) = v39;
        if (v216)
          ++*v216;
        v43 = *(_QWORD **)(v31 + 16);
        if ((*(unsigned int (**)(_QWORD *))(*v43 + 152))(v43))
        {
          if ((*(_WORD *)(v43[4] + 33) & 0x10) == 0)
          {
            JSC::Symbols::homeObjectPrivateName += 2;
            v362 = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
            v122 = JSC::BytecodeGenerator::addConstant(v10, (WTF::AtomStringImpl *)&v362, a3, v14, a5, a6, a7, a8);
            JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(v10 + 688), v42[1], v122);
            JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(v10, (void *)v42[1], v122, *(unsigned int *)(v34 + 4), (unint64_t)*(unsigned __int8 *)(v10 + 712) << 8, v123, v124, v125);
            v126 = v362;
            v362 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
              {
                WTF::StringImpl::~StringImpl(v126, a2, a3, v14, a5, a6, a7, a8);
                WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
              }
              else
              {
                *(_DWORD *)v126 -= 2;
              }
            }
          }
        }
        v44 = *(_WORD *)(v31 + 24);
        if ((v44 & 0x3000) != 0)
          v45 = 20;
        else
          v45 = 16;
        if ((v359 & 1) != 0)
        {
          v46 = **(_QWORD **)v31;
          v47 = (uint64_t *)&v365;
          if ((v44 & 0x3000) == 0x2000)
            v47 = (uint64_t *)&v364;
          v48 = *(_DWORD *)(v46 + 16);
          if ((v48 & 0x20) != 0)
            v48 = *(_DWORD *)(v46 + 32);
          v49 = *v47;
          v50 = *(_DWORD *)(v49 - 8);
          v51 = v50 & (v48 >> 8);
          v52 = (uint64_t *)(v49 + 24 * v51);
          v53 = *v52;
          if (*v52 != v46)
          {
            v54 = 1;
            while (v53)
            {
              v51 = (v51 + v54) & v50;
              v52 = (uint64_t *)(v49 + 24 * v51);
              v53 = *v52;
              ++v54;
              if (*v52 == v46)
                goto LABEL_74;
            }
            v52 = (uint64_t *)(v49 + 24 * *(unsigned int *)(v49 - 4));
          }
LABEL_74:
          v55 = v52[2];
          if (v55 == v31 || (v44 & 0x4000) != 0)
            goto LABEL_127;
          if ((v44 & 2) != 0)
          {
            if (v42)
              ++*v42;
            if (!v55)
            {
              v57 = JSC::BytecodeGenerator::emitLoad(v10, 0, 10, v14, a5, a6, a7, a8);
              v63 = 0;
              v64 = 0;
              v65 = v42;
              v66 = (uint64_t)v57;
              v67 = v42;
              if (v57)
                goto LABEL_84;
LABEL_85:
              v68 = v52[2];
              if (v68)
              {
                v127 = *(_QWORD **)(v68 + 16);
                if ((*(unsigned int (**)(_QWORD *, _DWORD *, uint64_t))(*v127 + 152))(v127, v65, v66))
                {
                  if ((*(_WORD *)(v127[4] + 33) & 0x10) == 0)
                    JSC::emitPutHomeObject(v10, v63, v34, v58, v59, v60, v61, v62);
                }
              }
              v69 = JSC::BytecodeGenerator::addConstant(v10, *(WTF::AtomStringImpl **)v31, v66, v58, v59, v60, v61, v62);
              JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(v10 + 688), *(_DWORD *)(v34 + 4), v69);
              v76 = *(_DWORD *)(v34 + 4);
              v77 = v67[1];
              v78 = v64[1];
              v79 = (v76 + 128) < 0x90;
              if (v76 > 0x3FFFFFFF)
                v79 = (v76 - 1073741808) < 0x80;
              if ((v69 | v45) > 0xFF || !v79)
                goto LABEL_129;
              v80 = (v77 - 1073741808) < 0x80;
              if (v77 <= 0x3FFFFFFF)
                v80 = (v77 + 128) < 0x90;
              if (!v80)
                goto LABEL_129;
              v81 = (v78 - 1073741808) < 0x80;
              if (v78 <= 0x3FFFFFFF)
                v81 = (v78 + 128) < 0x90;
              if (v81)
              {
                JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x3E, v70, v71, v72, v73, v74, v75);
                LOBYTE(v362) = 62;
                v82 = *(unsigned int *)(v10 + 12);
                v83 = *(unsigned int *)(v10 + 16);
                if (v82 > v83)
                {
                  *(_DWORD *)(v10 + 16) = v83 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v83) = 62;
                  v86 = *(_DWORD *)(v10 + 12);
                  v87 = *(_DWORD *)(v10 + 16);
                }
                else
                {
                  if ((_DWORD)v82 == *(_DWORD *)(v10 + 8))
                  {
                    v138 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v82 + 1), (unint64_t)&v362);
                    v82 = *(unsigned int *)(v10 + 12);
                    v84 = *(_QWORD *)v10;
                    v85 = *v138;
                  }
                  else
                  {
                    v84 = *(_QWORD *)v10;
                    v85 = 62;
                  }
                  *(_BYTE *)(v84 + v82) = v85;
                  v86 = *(_DWORD *)(v10 + 12) + 1;
                  v87 = *(_DWORD *)(v10 + 16) + 1;
                  *(_DWORD *)(v10 + 12) = v86;
                  *(_DWORD *)(v10 + 16) = v87;
                }
                v88 = v76 + 16;
                if (v76 <= 0x3FFFFFFF)
                  v88 = v76;
                LOBYTE(v362) = v88;
                if (v86 > v87)
                {
                  *(_DWORD *)(v10 + 16) = v87 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v87) = v88;
                  v91 = *(_DWORD *)(v10 + 12);
                  v92 = *(_DWORD *)(v10 + 16);
                }
                else
                {
                  v89 = v86;
                  if (v86 == *(_DWORD *)(v10 + 8))
                  {
                    v139 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v86 + 1), (unint64_t)&v362);
                    v89 = *(unsigned int *)(v10 + 12);
                    v90 = *(_QWORD *)v10;
                    v88 = *v139;
                  }
                  else
                  {
                    v90 = *(_QWORD *)v10;
                  }
                  *(_BYTE *)(v90 + v89) = v88;
                  v91 = *(_DWORD *)(v10 + 12) + 1;
                  v92 = *(_DWORD *)(v10 + 16) + 1;
                  *(_DWORD *)(v10 + 12) = v91;
                  *(_DWORD *)(v10 + 16) = v92;
                }
                LOBYTE(v362) = v69;
                if (v91 > v92)
                {
                  *(_DWORD *)(v10 + 16) = v92 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v92) = v69;
                  v93 = *(_DWORD *)(v10 + 12);
                  v94 = *(_DWORD *)(v10 + 16);
                }
                else
                {
                  if (v91 == *(_DWORD *)(v10 + 8))
                    *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v91 + 1), (unint64_t)&v362);
                  else
                    *(_BYTE *)(*(_QWORD *)v10 + v91) = v69;
                  v93 = *(_DWORD *)(v10 + 12) + 1;
                  v94 = *(_DWORD *)(v10 + 16) + 1;
                  *(_DWORD *)(v10 + 12) = v93;
                  *(_DWORD *)(v10 + 16) = v94;
                }
                LOBYTE(v362) = v45;
                if (v93 > v94)
                {
                  *(_DWORD *)(v10 + 16) = v94 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v94) = v45;
                  v95 = *(_DWORD *)(v10 + 12);
                  v96 = *(_DWORD *)(v10 + 16);
                }
                else
                {
                  if (v93 == *(_DWORD *)(v10 + 8))
                    *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v93 + 1), (unint64_t)&v362);
                  else
                    *(_BYTE *)(*(_QWORD *)v10 + v93) = v45;
                  v95 = *(_DWORD *)(v10 + 12) + 1;
                  v96 = *(_DWORD *)(v10 + 16) + 1;
                  *(_DWORD *)(v10 + 12) = v95;
                  *(_DWORD *)(v10 + 16) = v96;
                }
                v97 = v77 + 16;
                if (v77 <= 0x3FFFFFFF)
                  v97 = v77;
                LOBYTE(v362) = v97;
                if (v95 > v96)
                {
                  *(_DWORD *)(v10 + 16) = v96 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v96) = v97;
                  v100 = *(_DWORD *)(v10 + 12);
                  v101 = *(_DWORD *)(v10 + 16);
                }
                else
                {
                  v98 = v95;
                  if (v95 == *(_DWORD *)(v10 + 8))
                  {
                    v140 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v95 + 1), (unint64_t)&v362);
                    v98 = *(unsigned int *)(v10 + 12);
                    v99 = *(_QWORD *)v10;
                    v97 = *v140;
                  }
                  else
                  {
                    v99 = *(_QWORD *)v10;
                  }
                  *(_BYTE *)(v99 + v98) = v97;
                  v100 = *(_DWORD *)(v10 + 12) + 1;
                  v101 = *(_DWORD *)(v10 + 16) + 1;
                  *(_DWORD *)(v10 + 12) = v100;
                  *(_DWORD *)(v10 + 16) = v101;
                }
                v102 = v78 + 16;
                if (v78 <= 0x3FFFFFFF)
                  v102 = v78;
                LOBYTE(v362) = v102;
                if (v100 > v101)
                {
                  *(_DWORD *)(v10 + 16) = v101 + 1;
                  *(_BYTE *)(*(_QWORD *)v10 + v101) = v102;
                }
                else
                {
                  v103 = v100;
                  if (v100 == *(_DWORD *)(v10 + 8))
                  {
                    v141 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v100 + 1), (unint64_t)&v362);
                    v103 = *(unsigned int *)(v10 + 12);
                    v104 = *(_QWORD *)v10;
                    v102 = *v141;
                  }
                  else
                  {
                    v104 = *(_QWORD *)v10;
                  }
                  *(_BYTE *)(v104 + v103) = v102;
                  *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
                }
              }
              else
              {
LABEL_129:
                v105 = (v76 - 1073741760) < 0x8000;
                if (v76 <= 0x3FFFFFFF)
                  v105 = (v76 + 0x8000) >> 6 < 0x201;
                if ((v69 | v45) >> 16 || !v105)
                  goto LABEL_245;
                v106 = (v77 - 1073741760) < 0x8000;
                if (v77 <= 0x3FFFFFFF)
                  v106 = (v77 + 0x8000) >> 6 < 0x201;
                if (!v106)
                  goto LABEL_245;
                v107 = (v78 - 1073741760) < 0x8000;
                if (v78 <= 0x3FFFFFFF)
                  v107 = (v78 + 0x8000) >> 6 < 0x201;
                if (v107)
                {
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x3E, v70, v71, v72, v73, v74, v75);
                  LOBYTE(v362) = 0x80;
                  v108 = *(unsigned int *)(v10 + 12);
                  v109 = *(unsigned int *)(v10 + 16);
                  if (v108 > v109)
                  {
                    *(_DWORD *)(v10 + 16) = v109 + 1;
                    *(_BYTE *)(*(_QWORD *)v10 + v109) = 0x80;
                    v112 = *(_DWORD *)(v10 + 12);
                    v113 = *(_DWORD *)(v10 + 16);
                  }
                  else
                  {
                    if ((_DWORD)v108 == *(_DWORD *)(v10 + 8))
                    {
                      v150 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v108 + 1), (unint64_t)&v362);
                      v108 = *(unsigned int *)(v10 + 12);
                      v110 = *(_QWORD *)v10;
                      v111 = *v150;
                    }
                    else
                    {
                      v110 = *(_QWORD *)v10;
                      v111 = 0x80;
                    }
                    *(_BYTE *)(v110 + v108) = v111;
                    v112 = *(_DWORD *)(v10 + 12) + 1;
                    v113 = *(_DWORD *)(v10 + 16) + 1;
                    *(_DWORD *)(v10 + 12) = v112;
                    *(_DWORD *)(v10 + 16) = v113;
                  }
                  v114 = 62;
                  LOBYTE(v362) = 62;
                  v358 = v42;
                  if (v112 > v113)
                  {
                    v116 = v64;
                    v118 = v67;
                    *(_DWORD *)(v10 + 16) = v113 + 1;
                    *(_BYTE *)(*(_QWORD *)v10 + v113) = 62;
                  }
                  else
                  {
                    v115 = v112;
                    v116 = v64;
                    if (v112 == *(_DWORD *)(v10 + 8))
                    {
                      v151 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v112 + 1), (unint64_t)&v362);
                      v115 = *(unsigned int *)(v10 + 12);
                      v117 = *(_QWORD *)v10;
                      v114 = *v151;
                    }
                    else
                    {
                      v117 = *(_QWORD *)v10;
                    }
                    *(_BYTE *)(v117 + v115) = v114;
                    v118 = v67;
                    *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
                  }
                  v119 = v76 + 64;
                  if (v76 <= 0x3FFFFFFF)
                    v119 = v76;
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v119);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, (unsigned __int16)v69);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v45);
                  v120 = v77 + 64;
                  if (v77 <= 0x3FFFFFFF)
                    v120 = v77;
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v120);
                  v121 = v78 + 64;
                  if (v78 <= 0x3FFFFFFF)
                    v121 = v78;
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v121);
                  v67 = v118;
                  v64 = v116;
                  v42 = v358;
                }
                else
                {
LABEL_245:
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x3E, v70, v71, v72, v73, v74, v75);
                  LOBYTE(v362) = -126;
                  v199 = *(unsigned int *)(v10 + 12);
                  v200 = *(unsigned int *)(v10 + 16);
                  if (v199 > v200)
                  {
                    *(_DWORD *)(v10 + 16) = v200 + 1;
                    *(_BYTE *)(*(_QWORD *)v10 + v200) = -126;
                    v203 = *(_DWORD *)(v10 + 12);
                    v204 = *(_DWORD *)(v10 + 16);
                  }
                  else
                  {
                    if ((_DWORD)v199 == *(_DWORD *)(v10 + 8))
                    {
                      v304 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v199 + 1), (unint64_t)&v362);
                      v199 = *(unsigned int *)(v10 + 12);
                      v201 = *(_QWORD *)v10;
                      v202 = *v304;
                    }
                    else
                    {
                      v201 = *(_QWORD *)v10;
                      v202 = -126;
                    }
                    *(_BYTE *)(v201 + v199) = v202;
                    v203 = *(_DWORD *)(v10 + 12) + 1;
                    v204 = *(_DWORD *)(v10 + 16) + 1;
                    *(_DWORD *)(v10 + 12) = v203;
                    *(_DWORD *)(v10 + 16) = v204;
                  }
                  v205 = 62;
                  LOBYTE(v362) = 62;
                  if (v203 > v204)
                  {
                    *(_DWORD *)(v10 + 16) = v204 + 1;
                    *(_BYTE *)(*(_QWORD *)v10 + v204) = 62;
                  }
                  else
                  {
                    v206 = v203;
                    if (v203 == *(_DWORD *)(v10 + 8))
                    {
                      v305 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v203 + 1), (unint64_t)&v362);
                      v206 = *(unsigned int *)(v10 + 12);
                      v207 = *(_QWORD *)v10;
                      v205 = *v305;
                    }
                    else
                    {
                      v207 = *(_QWORD *)v10;
                    }
                    *(_BYTE *)(v207 + v206) = v205;
                    *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
                  }
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v76);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v69);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v45);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v77);
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v78);
                }
              }
              --*v64;
              --*v67;
LABEL_127:
              v30 = *(_QWORD *)v360;
              if (!v42)
                goto LABEL_50;
              goto LABEL_128;
            }
            v128 = *(_BYTE **)(v55 + 16);
            v129 = *(_BYTE *)(v10 + 709);
            v130 = *(_BYTE *)(v10 + 710);
            *(_WORD *)(v10 + 709) = 0;
            if ((unint64_t)&v355 < *(_QWORD *)(*(_QWORD *)(v10 + 696) + 93104))
            {
              *(_BYTE *)(v10 + 706) = 1;
              v57 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
            }
            else
            {
              if (v128[24])
                JSC::BytecodeGenerator::emitDebugHook((char *)v10, 5, (uint64_t)(v128 + 8), v14, a5, a6, a7, a8);
              v57 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v128 + 16))(v128, v10, 0);
            }
            *(_BYTE *)(v10 + 710) = v130;
            *(_BYTE *)(v10 + 709) = v129;
            v65 = v42;
            v66 = (uint64_t)v57;
            v63 = (uint64_t)v57;
            if (!v57)
            {
              v64 = 0;
              v67 = v42;
              goto LABEL_85;
            }
          }
          else
          {
            if (v42)
              ++*v42;
            if (v55)
            {
              v142 = *(_BYTE **)(v55 + 16);
              v143 = *(_BYTE *)(v10 + 709);
              v144 = *(_BYTE *)(v10 + 710);
              *(_WORD *)(v10 + 709) = 0;
              if ((unint64_t)&v355 < *(_QWORD *)(*(_QWORD *)(v10 + 696) + 93104))
              {
                *(_BYTE *)(v10 + 706) = 1;
                v57 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
              }
              else
              {
                if (v142[24])
                  JSC::BytecodeGenerator::emitDebugHook((char *)v10, 5, (uint64_t)(v142 + 8), v14, a5, a6, a7, a8);
                v57 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v142 + 16))(v142, v10, 0);
              }
              *(_BYTE *)(v10 + 710) = v144;
              *(_BYTE *)(v10 + 709) = v143;
              v65 = v57;
              v66 = (uint64_t)v42;
              v63 = (uint64_t)v57;
              if (!v57)
              {
                v67 = 0;
                v64 = v42;
                goto LABEL_85;
              }
            }
            else
            {
              v57 = JSC::BytecodeGenerator::emitLoad(v10, 0, 10, v14, a5, a6, a7, a8);
              v63 = 0;
              v67 = 0;
              v65 = v57;
              v66 = (uint64_t)v42;
              v64 = v42;
              if (!v57)
                goto LABEL_85;
            }
          }
LABEL_84:
          ++*v57;
          v67 = v65;
          v64 = (_DWORD *)v66;
          goto LABEL_85;
        }
        if ((v44 & 8) == 0)
        {
          v131 = *(WTF::AtomStringImpl **)v31;
          if ((v44 & 2) != 0)
            JSC::BytecodeGenerator::emitPutGetterById(v10, v34, v131, v45, (uint64_t)v42, a6, a7, a8);
          else
            JSC::BytecodeGenerator::emitPutSetterById(v10, v34, v131, v45, (uint64_t)v42, a6, a7, a8);
          goto LABEL_127;
        }
        v155 = *(_BYTE **)(v31 + 8);
        v156 = *(_BYTE *)(v10 + 709);
        v157 = *(_BYTE *)(v10 + 710);
        *(_WORD *)(v10 + 709) = 0;
        if ((unint64_t)&v355 < *(_QWORD *)(*(_QWORD *)(v10 + 696) + 93104))
        {
          *(_BYTE *)(v10 + 706) = 1;
          v158 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
        }
        else
        {
          if (v155[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)v10, 5, (uint64_t)(v155 + 8), v14, a5, a6, a7, a8);
          v158 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v155 + 16))(v155, v10, 0);
        }
        v159 = v158;
        *(_BYTE *)(v10 + 710) = v157;
        *(_BYTE *)(v10 + 709) = v156;
        if (v158)
          ++*v158;
        if (JSC::BytecodeGenerator::shouldSetFunctionName((JSC::BytecodeGenerator *)v10, *(JSC::ExpressionNode **)(v31 + 16)))
        {
          v166 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v10);
          JSC::OpToPropertyKey::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(v10, v166[1], v159[1], v167, v168, v169, v170, v171);
          ++*v166;
          --*v159;
          JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(v10, v42[1], v166[1], v172, v173, v174, v175, v176);
          v159 = v166;
        }
        v177 = *(_WORD *)(v31 + 24);
        v178 = *(_DWORD *)(v34 + 4);
        v179 = v159[1];
        v180 = v42[1];
        if ((v177 & 2) != 0)
        {
          JSC::OpPutGetterByVal::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(v10, v178, v159[1], v45, v42[1]);
        }
        else
        {
          v226 = (v178 - 1073741808) < 0x80;
          if (v178 <= 0x3FFFFFFF)
            v226 = (v178 + 128) < 0x90;
          if (!v226)
            goto LABEL_317;
          v227 = (v179 - 1073741808) < 0x80;
          if (v179 <= 0x3FFFFFFF)
            v227 = (v179 + 128) < 0x90;
          if (!v227)
            goto LABEL_317;
          v228 = (v180 - 1073741808) < 0x80;
          if (v180 <= 0x3FFFFFFF)
            v228 = (v180 + 128) < 0x90;
          if (v228)
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x40, v160, v161, v162, v163, v164, v165);
            LOBYTE(v362) = 64;
            v229 = *(unsigned int *)(v10 + 12);
            v230 = *(unsigned int *)(v10 + 16);
            if (v229 > v230)
            {
              *(_DWORD *)(v10 + 16) = v230 + 1;
              *(_BYTE *)(*(_QWORD *)v10 + v230) = 64;
              v233 = *(_DWORD *)(v10 + 12);
              v234 = *(_DWORD *)(v10 + 16);
            }
            else
            {
              if ((_DWORD)v229 == *(_DWORD *)(v10 + 8))
              {
                v349 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v229 + 1), (unint64_t)&v362);
                v229 = *(unsigned int *)(v10 + 12);
                v231 = *(_QWORD *)v10;
                v232 = *v349;
              }
              else
              {
                v231 = *(_QWORD *)v10;
                v232 = 64;
              }
              *(_BYTE *)(v231 + v229) = v232;
              v233 = *(_DWORD *)(v10 + 12) + 1;
              v234 = *(_DWORD *)(v10 + 16) + 1;
              *(_DWORD *)(v10 + 12) = v233;
              *(_DWORD *)(v10 + 16) = v234;
            }
            v235 = v178 + 16;
            if (v178 <= 0x3FFFFFFF)
              v235 = v178;
            LOBYTE(v362) = v235;
            if (v233 > v234)
            {
              *(_DWORD *)(v10 + 16) = v234 + 1;
              *(_BYTE *)(*(_QWORD *)v10 + v234) = v235;
              v238 = *(_DWORD *)(v10 + 12);
              v239 = *(_DWORD *)(v10 + 16);
            }
            else
            {
              v236 = v233;
              if (v233 == *(_DWORD *)(v10 + 8))
              {
                v350 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v233 + 1), (unint64_t)&v362);
                v236 = *(unsigned int *)(v10 + 12);
                v237 = *(_QWORD *)v10;
                v235 = *v350;
              }
              else
              {
                v237 = *(_QWORD *)v10;
              }
              *(_BYTE *)(v237 + v236) = v235;
              v238 = *(_DWORD *)(v10 + 12) + 1;
              v239 = *(_DWORD *)(v10 + 16) + 1;
              *(_DWORD *)(v10 + 12) = v238;
              *(_DWORD *)(v10 + 16) = v239;
            }
            v240 = v179 + 16;
            if (v179 <= 0x3FFFFFFF)
              v240 = v179;
            LOBYTE(v362) = v240;
            if (v238 > v239)
            {
              *(_DWORD *)(v10 + 16) = v239 + 1;
              *(_BYTE *)(*(_QWORD *)v10 + v239) = v240;
              v243 = *(_DWORD *)(v10 + 12);
              v244 = *(_DWORD *)(v10 + 16);
            }
            else
            {
              v241 = v238;
              if (v238 == *(_DWORD *)(v10 + 8))
              {
                v351 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v238 + 1), (unint64_t)&v362);
                v241 = *(unsigned int *)(v10 + 12);
                v242 = *(_QWORD *)v10;
                v240 = *v351;
              }
              else
              {
                v242 = *(_QWORD *)v10;
              }
              *(_BYTE *)(v242 + v241) = v240;
              v243 = *(_DWORD *)(v10 + 12) + 1;
              v244 = *(_DWORD *)(v10 + 16) + 1;
              *(_DWORD *)(v10 + 12) = v243;
              *(_DWORD *)(v10 + 16) = v244;
            }
            LOBYTE(v362) = v45;
            if (v243 > v244)
            {
              *(_DWORD *)(v10 + 16) = v244 + 1;
              *(_BYTE *)(*(_QWORD *)v10 + v244) = v45;
              v245 = *(_DWORD *)(v10 + 12);
              v246 = *(_DWORD *)(v10 + 16);
            }
            else
            {
              if (v243 == *(_DWORD *)(v10 + 8))
                *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v243 + 1), (unint64_t)&v362);
              else
                *(_BYTE *)(*(_QWORD *)v10 + v243) = v45;
              v245 = *(_DWORD *)(v10 + 12) + 1;
              v246 = *(_DWORD *)(v10 + 16) + 1;
              *(_DWORD *)(v10 + 12) = v245;
              *(_DWORD *)(v10 + 16) = v246;
            }
            v247 = v180 + 16;
            if (v180 <= 0x3FFFFFFF)
              v247 = v180;
            LOBYTE(v362) = v247;
            if (v245 > v246)
            {
              *(_DWORD *)(v10 + 16) = v246 + 1;
              *(_BYTE *)(*(_QWORD *)v10 + v246) = v247;
            }
            else
            {
              v248 = v245;
              if (v245 == *(_DWORD *)(v10 + 8))
              {
                v352 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v245 + 1), (unint64_t)&v362);
                v248 = *(unsigned int *)(v10 + 12);
                v249 = *(_QWORD *)v10;
                v247 = *v352;
              }
              else
              {
                v249 = *(_QWORD *)v10;
              }
              *(_BYTE *)(v249 + v248) = v247;
              *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
            }
          }
          else
          {
LABEL_317:
            if (v178 <= 0x3FFFFFFF)
              v254 = (v178 + 0x8000) >> 6 < 0x201;
            else
              v254 = (v178 - 1073741760) < 0x8000;
            if (!v254)
              goto LABEL_343;
            v255 = (v179 - 1073741760) < 0x8000;
            if (v179 <= 0x3FFFFFFF)
              v255 = (v179 + 0x8000) >> 6 < 0x201;
            if (v255
              && (v180 <= 0x3FFFFFFF
                ? (v256 = (v180 + 0x8000) >> 6 < 0x201)
                : (v256 = (v180 - 1073741760) < 0x8000),
                  v256))
            {
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x40, v160, v161, v162, v163, v164, v165);
              LOBYTE(v362) = 0x80;
              v257 = *(unsigned int *)(v10 + 12);
              v258 = *(unsigned int *)(v10 + 16);
              if (v257 > v258)
              {
                *(_DWORD *)(v10 + 16) = v258 + 1;
                *(_BYTE *)(*(_QWORD *)v10 + v258) = 0x80;
                v261 = *(_DWORD *)(v10 + 12);
                v262 = *(_DWORD *)(v10 + 16);
              }
              else
              {
                if ((_DWORD)v257 == *(_DWORD *)(v10 + 8))
                {
                  v353 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v257 + 1), (unint64_t)&v362);
                  v257 = *(unsigned int *)(v10 + 12);
                  v259 = *(_QWORD *)v10;
                  v260 = *v353;
                }
                else
                {
                  v259 = *(_QWORD *)v10;
                  v260 = 0x80;
                }
                *(_BYTE *)(v259 + v257) = v260;
                v261 = *(_DWORD *)(v10 + 12) + 1;
                v262 = *(_DWORD *)(v10 + 16) + 1;
                *(_DWORD *)(v10 + 12) = v261;
                *(_DWORD *)(v10 + 16) = v262;
              }
              v263 = 64;
              LOBYTE(v362) = 64;
              if (v261 > v262)
              {
                *(_DWORD *)(v10 + 16) = v262 + 1;
                *(_BYTE *)(*(_QWORD *)v10 + v262) = 64;
              }
              else
              {
                v264 = v261;
                if (v261 == *(_DWORD *)(v10 + 8))
                {
                  v354 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v261 + 1), (unint64_t)&v362);
                  v264 = *(unsigned int *)(v10 + 12);
                  v265 = *(_QWORD *)v10;
                  v263 = *v354;
                }
                else
                {
                  v265 = *(_QWORD *)v10;
                }
                *(_BYTE *)(v265 + v264) = v263;
                *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
              }
              v266 = v178 + 64;
              if (v178 <= 0x3FFFFFFF)
                v266 = v178;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v266);
              v267 = v179 + 64;
              if (v179 <= 0x3FFFFFFF)
                v267 = v179;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v267);
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v45);
              v268 = v180 + 64;
              if (v180 <= 0x3FFFFFFF)
                v268 = v180;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v268);
            }
            else
            {
LABEL_343:
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0x40, v160, v161, v162, v163, v164, v165);
              LOBYTE(v362) = -126;
              v269 = *(unsigned int *)(v10 + 12);
              v270 = *(unsigned int *)(v10 + 16);
              if (v269 > v270)
              {
                *(_DWORD *)(v10 + 16) = v270 + 1;
                *(_BYTE *)(*(_QWORD *)v10 + v270) = -126;
                v273 = *(_DWORD *)(v10 + 12);
                v274 = *(_DWORD *)(v10 + 16);
              }
              else
              {
                if ((_DWORD)v269 == *(_DWORD *)(v10 + 8))
                {
                  v314 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v269 + 1), (unint64_t)&v362);
                  v269 = *(unsigned int *)(v10 + 12);
                  v271 = *(_QWORD *)v10;
                  v272 = *v314;
                }
                else
                {
                  v271 = *(_QWORD *)v10;
                  v272 = -126;
                }
                *(_BYTE *)(v271 + v269) = v272;
                v273 = *(_DWORD *)(v10 + 12) + 1;
                v274 = *(_DWORD *)(v10 + 16) + 1;
                *(_DWORD *)(v10 + 12) = v273;
                *(_DWORD *)(v10 + 16) = v274;
              }
              v275 = 64;
              LOBYTE(v362) = 64;
              if (v273 > v274)
              {
                *(_DWORD *)(v10 + 16) = v274 + 1;
                *(_BYTE *)(*(_QWORD *)v10 + v274) = 64;
              }
              else
              {
                v276 = v273;
                if (v273 == *(_DWORD *)(v10 + 8))
                {
                  v315 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v273 + 1), (unint64_t)&v362);
                  v276 = *(unsigned int *)(v10 + 12);
                  v277 = *(_QWORD *)v10;
                  v275 = *v315;
                }
                else
                {
                  v277 = *(_QWORD *)v10;
                }
                *(_BYTE *)(v277 + v276) = v275;
                *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
              }
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v178);
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v179);
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v45);
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v10, v180);
            }
          }
        }
        --*v159;
        v30 = *(_QWORD *)v360;
LABEL_128:
        --*v42;
        goto LABEL_50;
      }
      if ((v22 & 0x3000) == 0x2000)
        a2 = (WTF::AtomStringImpl *)&v364;
      else
        a2 = (WTF::AtomStringImpl *)&v365;
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v24 = **v21;
          v25 = *(_DWORD *)(v24 + 16);
          if ((v25 & 0x20) != 0)
            v25 = *(_DWORD *)(v24 + 32);
          v26 = *(_DWORD *)(v23 - 8);
          v27 = v26 & (v25 >> 8);
          v28 = *(_QWORD *)(v23 + 24 * v27);
          if (v28 == v24)
            goto LABEL_35;
          v29 = 1;
          while (v28)
          {
            v27 = (v27 + v29) & v26;
            v28 = *(_QWORD *)(v23 + 24 * v27);
            ++v29;
            if (v28 == v24)
              goto LABEL_35;
          }
        }
        goto LABEL_33;
      }
      v368 = *(unint64_t *)(v20 + 32);
      v361 = **v21;
      WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::add<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>&>((uint64_t *)&v362, (uint64_t *)a2, &v361, &v368, a5, a6, a7, a8);
      if (!v363[8])
        break;
LABEL_33:
      v20 = *(_QWORD *)(v20 + 40);
      if (!v20)
      {
        v359 = 1;
        goto LABEL_36;
      }
    }
    v132 = *((_QWORD *)v362 + 1);
    v135 = *(_WORD *)(v132 + 24);
    v133 = (_WORD *)(v132 + 24);
    v134 = v135;
    if (((*((_WORD *)v21 + 12) ^ v135) & 0x7FF) != 0)
    {
      v136 = (char *)v362 + 16;
      v137 = *((_QWORD *)v362 + 2);
      if (!v137)
      {
LABEL_187:
        *(_QWORD *)v136 = v21;
        goto LABEL_33;
      }
      v281 = *(_WORD *)(v137 + 24);
      v133 = (_WORD *)(v137 + 24);
      v134 = v281;
    }
    else
    {
      v136 = (char *)v362 + 8;
    }
    *v133 = v134 | 0x4000;
    goto LABEL_187;
  }
  return v367;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseProperty<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, WTF::StringImpl *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  char v29;
  unsigned int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned int v34;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  _BYTE *v74;
  int v75;
  uint64_t *v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  double v104;
  _QWORD *v105;
  _QWORD *v106;
  WTF::AtomStringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int *v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  unsigned int *v121;
  int v122;
  uint64_t v123;
  _DWORD *v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  WTF::StringImpl *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  unint64_t v169;
  unint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  const char *v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  _BYTE *v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  WTF::StringImpl *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  const char *v191;
  const char *v192;
  const char *v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  _BYTE *v203;
  uint64_t v204;
  _QWORD *v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _DWORD *v229;
  WTF::StringImpl *v230;
  uint64_t *v231;
  uint64_t *v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  int v267;
  WTF::AtomStringImpl *v268;
  uint64_t v269;
  WTF::StringImpl *v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int *v285;
  int v286;
  _BYTE *v287;
  int v288;
  unint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *NumericIdentifier;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  _DWORD *v312;
  _QWORD *v313;
  WTF::AtomStringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v323;
  uint64_t v324;
  _DWORD *v325;
  WTF::StringImpl *v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  int v339;
  uint64_t v340;
  int v341;
  int *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  int v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  WTF::AtomStringImpl *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _BYTE *v387;
  unint64_t *v388;
  _BYTE *v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  int *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  _QWORD *v410;
  char v411;
  _QWORD *v412;
  char v414;
  uint64_t v415;
  int v416;
  int v417;
  int v418;
  int v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v425;
  uint64_t *v426;
  int v427;
  int32x2_t v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t *v432;
  uint64_t v433;
  _DWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t *v437;
  uint64_t v438;
  int v439;
  uint64_t *v440;
  unsigned int v441;
  _BYTE *v442;
  _BYTE *v443;
  int v444;
  int v445;
  char v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  int v450;
  int *v451;
  int *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  char v461;
  unsigned int v462;
  unsigned int v463;
  int v464;
  unsigned int v465;
  char v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  _QWORD *v470;
  unsigned int v471;
  int v472;
  int v473;
  int32x2_t v474;
  uint64_t *v475;
  int v476;
  uint64_t v477;
  __int128 v478;
  int v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;

  v10 = a1;
  LODWORD(v11) = 191488;
  LOBYTE(v479) = 0;
  v12 = a1 + 7368;
  LODWORD(v13) = *(_DWORD *)(a1 + 7368);
  if ((_DWORD)v13 == 191488)
  {
    LODWORD(v14) = *(_DWORD *)(a1 + 7420);
    v233 = *(_DWORD *)(a1 + 7400);
    v234 = *(_DWORD *)(a1 + 7412);
    v235 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v233;
    *(_DWORD *)(a1 + 7448) = v234;
    *(_DWORD *)(a1 + 7452) = v235;
    v236 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v236 + 4) = v233;
    v237 = *(_DWORD *)(v10 + 12);
    if (!v237)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA2240);
    }
    v238 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v237 - 1) + 9) & 1;
    *(_BYTE *)(v236 + 56) = 0;
    v239 = v12;
    v240 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v236, v12, 0, v238, a5, a6, a7, a8);
    v12 = v239;
    v16 = v240;
    *(_DWORD *)(v10 + 7368) = v240;
    v15 = 18;
  }
  else
  {
    LODWORD(v14) = 0;
    v15 = 5;
    v16 = *(_DWORD *)(a1 + 7368);
  }
  LODWORD(v17) = 0;
  v18 = (_BYTE *)(v10 + 7344);
  LODWORD(v19) = v479;
  v20 = (WTF::StringImpl *)(v10 + 7420);
  v21 = (uint64_t *)(v10 + 7444);
  v477 = a2;
  if (v16 != 14)
  {
    v475 = (uint64_t *)(v10 + 7444);
    if (v16 <= 36)
    {
      v116 = 1;
      v117 = (int *)(v10 + 7420);
      switch(v16)
      {
        case 4:
LABEL_328:
          v443 = v18;
          v479 = (int)v19;
          if ((_DWORD)v13 == (_DWORD)v11)
            v336 = (int)v14;
          else
            v336 = *v117;
          v337 = *(_DWORD *)(v10 + 7400);
          v338 = *(_DWORD *)(v10 + 7412);
          v339 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v337;
          *(_DWORD *)(v10 + 7448) = v338;
          *(_DWORD *)(v10 + 7452) = v339;
          v340 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)(v340 + 4) = v337;
          v341 = *(_DWORD *)(v10 + 12);
          if (!v341)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA2228);
          }
          v342 = (int *)v12;
          v343 = v15;
          v8 = (WTF::StringImpl *)v10;
          v344 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v341 - 1) + 9) & 1;
          *(_BYTE *)(v340 + 56) = 0;
          *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v340, v12, 0, v344, a5, a6, a7, a8);
          v345 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v10);
          v350 = *(_DWORD *)(v10 + 7368);
          if (!v345)
          {
            if (v350 == 20 || (v350 & 0x100000) != 0)
              goto LABEL_405;
            if (!*(_QWORD *)(v10 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v10, 1, "Cannot parse computed property name");
            return 0;
          }
          if (v350 != 5)
          {
            if (v350 == 20 || (v350 & 0x100000) != 0)
              goto LABEL_405;
            if (!*(_QWORD *)(v10 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(v10);
            return 0;
          }
          v351 = v345;
          v352 = *(_DWORD *)(v10 + 7400);
          v353 = *(_DWORD *)(v10 + 7412);
          v354 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v352;
          *(_DWORD *)(v10 + 7448) = v353;
          *(_DWORD *)(v10 + 7452) = v354;
          v355 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)(v355 + 4) = v352;
          v356 = *(_DWORD *)(v10 + 12);
          if (!v356)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA2230);
          }
          v357 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v356 - 1) + 9) & 1;
          *(_BYTE *)(v355 + 56) = 0;
          v358 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v355, (uint64_t)v342, 0, v357, v346, v347, v348, v349);
          *(_DWORD *)(v10 + 7368) = v358;
          if (v358 == 2)
          {
            v414 = v443[130];
            v443[130] = v343;
            v415 = JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::ASTBuilder>(v10, (WTF::StringImpl *)a2, *(uint64_t **)(*(_QWORD *)(v10 + 7216) + 41952), v336);
            if (*(_QWORD *)(v10 + 7360))
              result = 0;
            else
              result = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), v351, v415, 9, 0, 0);
            v443[130] = v414;
            return result;
          }
          if (v343 == 5)
          {
            if (v358 != 18)
              goto LABEL_397;
            v363 = *(_DWORD *)(v10 + 7400);
            v364 = *(_DWORD *)(v10 + 7412);
            v365 = *(_DWORD *)(v10 + 7404);
            *(_DWORD *)(v10 + 7444) = v363;
            *(_DWORD *)(v10 + 7448) = v364;
            *(_DWORD *)(v10 + 7452) = v365;
            v366 = *(_QWORD *)(v10 + 7288);
            *(_DWORD *)(v366 + 4) = v363;
            v367 = *(_DWORD *)(v10 + 12);
            if (!v367)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA2238);
            }
            v368 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v367 - 1) + 9) & 1;
            *(_BYTE *)(v366 + 56) = 0;
            *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v366, (uint64_t)v342, 0, v368, v359, v360, v361, v362);
            v369 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v10);
            if (v369)
            {
              *(_DWORD *)(v369 + 20) = *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 80)
                                     - *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 88);
              return JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), v351, v369, 9, 1, 0);
            }
            v416 = *v342;
            goto LABEL_384;
          }
          if (v358 == 20 || (v358 & 0x100000) != 0)
            goto LABEL_405;
          goto LABEL_381;
        case 9:
        case 10:
LABEL_297:
          v285 = (int *)v12;
          v286 = v15;
          v287 = v18;
          v479 = (int)v19;
          if ((_DWORD)v13 == (_DWORD)v11)
            v288 = (int)v14;
          else
            v288 = *v117;
          v289 = *(unint64_t **)(v10 + 7248);
          if (!v289)
          {
            v289 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v289[1] = 0;
            v289[2] = 0;
            *v289 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v289, v370, v371, v372, v373, v374, v375, v376);
            bzero(v289 + 3, 0x800uLL);
            v378 = *(unint64_t **)(v10 + 7248);
            *(_QWORD *)(v10 + 7248) = v289;
            if (v378)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v378, v377, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v379, v380, v381, v382, v383, v384, v385, v386);
              v289 = *(unint64_t **)(v10 + 7248);
            }
          }
          NumericIdentifier = (uint64_t *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v289, *(uint64_t ***)(v10 + 7216), *(double *)(v10 + 7376), a3, (uint64_t)a4, a5, a6, a7, a8);
          v295 = *(_DWORD *)(v10 + 7400);
          v296 = *(_DWORD *)(v10 + 7412);
          v297 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v295;
          *(_DWORD *)(v10 + 7448) = v296;
          *(_DWORD *)(v10 + 7452) = v297;
          v298 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)(v298 + 4) = v295;
          v299 = *(_DWORD *)(v10 + 12);
          if (!v299)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA21C8);
          }
          v300 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v299 - 1) + 9) & 1;
          *(_BYTE *)(v298 + 56) = 0;
          v301 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v298, (uint64_t)v285, 0, v300, v290, v291, v292, v293);
          *(_DWORD *)(v10 + 7368) = v301;
          if (v301 == 2)
          {
            v411 = v287[130];
            v287[130] = v286;
            v412 = (_QWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::ASTBuilder>(v10, (WTF::StringImpl *)a2, NumericIdentifier, v288);
            if (*(_QWORD *)(v10 + 7360))
              result = 0;
            else
              result = JSC::ASTBuilder::createProperty(a2, (_DWORD **)NumericIdentifier, v412, 1, 0, 0, 0);
            v287[130] = v411;
            return result;
          }
          if (v286 != 5)
          {
            if (v301 != 20 && (v301 & 0x100000) == 0)
              goto LABEL_137;
            goto LABEL_316;
          }
          if (v301 == 18)
          {
            v306 = *(_DWORD *)(v10 + 7400);
            v307 = *(_DWORD *)(v10 + 7412);
            v308 = *(_DWORD *)(v10 + 7404);
            *(_DWORD *)(v10 + 7444) = v306;
            *(_DWORD *)(v10 + 7448) = v307;
            *(_DWORD *)(v10 + 7452) = v308;
            v309 = *(_QWORD *)(v10 + 7288);
            *(_DWORD *)(v309 + 4) = v306;
            v310 = *(_DWORD *)(v10 + 12);
            if (!v310)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA21D0);
            }
            v311 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v310 - 1) + 9) & 1;
            *(_BYTE *)(v309 + 56) = 0;
            *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v309, (uint64_t)v285, 0, v311, v302, v303, v304, v305);
            LODWORD(v480) = 0;
            *((_QWORD *)&v480 + 1) = *(_QWORD *)(v10 + 7496);
            v481 = v10;
            *(_QWORD *)(v10 + 7496) = &v480;
            v312 = (_DWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v10, a2, &v480);
            *(_QWORD *)(v481 + 7496) = *((_QWORD *)&v480 + 1);
            if (!v312)
            {
              v249 = *v285;
              goto LABEL_372;
            }
            v313 = v312;
            v312[5] = *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 80) - *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 88);
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v312 + 152))(v312))
            {
              v324 = v313[4];
              v325 = (_DWORD *)*NumericIdentifier;
              if (*NumericIdentifier)
                *v325 += 2;
              v326 = *(WTF::StringImpl **)(v324 + 48);
              *(_QWORD *)(v324 + 48) = v325;
              if (v326)
              {
                if (*(_DWORD *)v326 == 2)
                {
                  WTF::StringImpl::~StringImpl(v326, v314, v315, v316, v317, v318, v319, v320);
                  WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
                }
                else
                {
                  *(_DWORD *)v326 -= 2;
                }
              }
            }
            else if ((*(unsigned int (**)(_QWORD *))(*v313 + 176))(v313))
            {
              v425 = (uint64_t *)v313[20];
              if (!*v425)
                v425 = NumericIdentifier;
              v313[21] = v425;
            }
            v321 = *(uint64_t **)(a2 + 8);
            result = *v321;
            if ((unint64_t)(v321[1] - *v321) <= 0x1F)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              result = *v321;
            }
            *v321 = result + 32;
            *(_QWORD *)result = NumericIdentifier;
            *(_QWORD *)(result + 8) = 0;
            *(_QWORD *)(result + 16) = v313;
            goto LABEL_55;
          }
          if (v301 == 20 || (v301 & 0x100000) != 0)
            goto LABEL_316;
          if (*(_QWORD *)(v10 + 7360))
            return 0;
          v327 = v10;
          goto LABEL_326;
        case 11:
LABEL_348:
          v452 = (int *)v12;
          v476 = v15;
          v479 = (int)v19;
          v387 = v18;
          v388 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v10 + 7232));
          v8 = (WTF::StringImpl *)v10;
          v389 = v387;
          JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v388, *(JSC::VM **)(v10 + 7216), *(const JSC::Identifier **)(v10 + 7376), v387[40]);
          if (!v390)
          {
            if (*v452 == 20 || (*v452 & 0x100000) != 0)
              goto LABEL_405;
            if (!*(_QWORD *)(v10 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v10, 1, "Cannot parse big int property name");
            return 0;
          }
          v395 = v390;
          v396 = &v479;
          if (v116)
            v396 = (int *)v20;
          v397 = *v396;
          if ((_DWORD)v13 == (_DWORD)v11)
            v398 = (int)v14;
          else
            v398 = v397;
          v399 = *(_DWORD *)(v10 + 7400);
          v400 = *(_DWORD *)(v10 + 7412);
          v401 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v399;
          *(_DWORD *)(v10 + 7448) = v400;
          *(_DWORD *)(v10 + 7452) = v401;
          v402 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)(v402 + 4) = v399;
          v403 = *(_DWORD *)(v10 + 12);
          if (!v403)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA2248);
          }
          v404 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v403 - 1) + 9) & 1;
          *(_BYTE *)(v402 + 56) = 0;
          v358 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v402, (uint64_t)v452, 0, v404, v391, v392, v393, v394);
          *(_DWORD *)(v10 + 7368) = v358;
          if (v358 == 2)
          {
            v409 = v389[130];
            v389[130] = v476;
            v410 = (_QWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::ASTBuilder>(v10, (WTF::StringImpl *)v477, v395, v398);
            if (*(_QWORD *)(v10 + 7360))
              result = 0;
            else
              result = JSC::ASTBuilder::createProperty(v477, (_DWORD **)v395, v410, 1, 0, 0, 0);
            v389[130] = v409;
            return result;
          }
          if (v476 != 5)
          {
            if (v358 == 20 || (v358 & 0x100000) != 0)
              goto LABEL_405;
LABEL_381:
            if (*((_QWORD *)v8 + 920))
              return 0;
            v165 = "Expected a parenthesis for argument list";
            v166 = (uint64_t)v8;
            goto LABEL_139;
          }
          if (v358 != 18)
          {
LABEL_397:
            if (v358 == 20 || (v358 & 0x100000) != 0)
              goto LABEL_405;
            if (!*((_QWORD *)v8 + 920))
            {
              v327 = (uint64_t)v8;
LABEL_326:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v327, "Expected ':' after property name");
            }
            return 0;
          }
          v417 = *(_DWORD *)(v10 + 7400);
          v418 = *(_DWORD *)(v10 + 7412);
          v419 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v417;
          *(_DWORD *)(v10 + 7448) = v418;
          *(_DWORD *)(v10 + 7452) = v419;
          v420 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)(v420 + 4) = v417;
          v421 = *(_DWORD *)(v10 + 12);
          if (!v421)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA2250);
          }
          v422 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v421 - 1) + 9) & 1;
          *(_BYTE *)(v420 + 56) = 0;
          *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v420, (uint64_t)v452, 0, v422, v405, v406, v407, v408);
          v423 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v10);
          if (v423)
          {
            *(_DWORD *)(v423 + 20) = *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 80)
                                   - *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 88);
            return JSC::ASTBuilder::createProperty(v477, (_DWORD **)v395, (_QWORD *)v423, 1, 1, 0, 0);
          }
          v416 = *v452;
LABEL_384:
          if (v416 != 20 && (v416 & 0x100000) == 0)
          {
            if (*((_QWORD *)v8 + 920))
              return 0;
            v165 = "Cannot parse expression for property declaration";
            v166 = (uint64_t)v8;
            goto LABEL_139;
          }
          break;
        case 12:
          goto LABEL_91;
        default:
          goto LABEL_174;
      }
      goto LABEL_405;
    }
    if (v16 == 37)
    {
LABEL_427:
      v427 = *(_DWORD *)(v10 + 7400);
      v428 = *(int32x2_t *)(v18 + 60);
      *(_QWORD *)&v480 = *(_QWORD *)(v10 + 7416);
      DWORD2(v480) = *(_DWORD *)(v10 + 7424);
      *(_QWORD *)&v478 = *(_QWORD *)(v10 + 7428);
      DWORD2(v478) = *(_DWORD *)(v10 + 7436);
      v429 = *(_DWORD *)(v10 + 7412);
      *(_DWORD *)(v10 + 7444) = v427;
      *(_DWORD *)(v10 + 7448) = v429;
      v474 = v428;
      *(_DWORD *)(v10 + 7452) = v428.i32[0];
      v430 = *(_QWORD *)(v10 + 7288);
      *(_DWORD *)(v430 + 4) = v427;
      v431 = *(_DWORD *)(v10 + 12);
      if (!v431)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA2220);
      }
      v432 = v21;
      v433 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v431 - 1) + 9) & 1;
      *(_BYTE *)(v430 + 56) = 0;
      v434 = (_DWORD *)v12;
      *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v430, v12, 0, v433, a5, a6, a7, a8);
      v435 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(v10, a2);
      if (!v435)
      {
        if (*v434 != 20 && (*v434 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v10 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v10, 1, "Cannot parse subject of a spread operation");
          return 0;
        }
        goto LABEL_316;
      }
      v436 = v435;
      v437 = *(uint64_t **)(a2 + 8);
      v438 = *v437;
      if ((unint64_t)(v437[1] - *v437) <= 0x47)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v438 = *v437;
      }
      *v437 = v438 + 72;
      *(_DWORD *)(v438 + 8) = v427;
      *(int32x2_t *)(v438 + 12) = vrev64_s32(v474);
      *(_DWORD *)(v438 + 20) = -1;
      *(_BYTE *)(v438 + 24) = 0;
      *(_BYTE *)(v438 + 25) = 126;
      *(_BYTE *)(v438 + 26) = 0;
      *(_QWORD *)v438 = &off_1E35857C8;
      *(_QWORD *)(v438 + 64) = v436;
      *(_QWORD *)(v438 + 28) = v478;
      *(_DWORD *)(v438 + 36) = DWORD2(v478);
      *(_QWORD *)(v438 + 52) = -1;
      *(_DWORD *)(v438 + 60) = -1;
      *(_DWORD *)(v438 + 48) = DWORD2(v480);
      *(_QWORD *)(v438 + 40) = v480;
      v439 = *((_DWORD *)v432 + 2);
      *(_QWORD *)(v438 + 52) = *v432;
      *(_DWORD *)(v438 + 60) = v439;
      v440 = *(uint64_t **)(a2 + 8);
      result = *v440;
      if ((unint64_t)(v440[1] - *v440) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        result = *v440;
      }
      *v440 = result + 32;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v438;
      *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | 0x20;
      return result;
    }
    if ((v16 - 545) >= 2)
    {
      if (v16 != 1048592)
        goto LABEL_174;
LABEL_91:
      if (**(_QWORD **)(v10 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952) + 896))
      {
        v21 = (uint64_t *)(v10 + 7444);
        if (*(_BYTE *)(v10 + 7384))
        {
          LODWORD(v17) = 0;
          goto LABEL_94;
        }
        v451 = (int *)v12;
        v8 = (WTF::StringImpl *)v10;
        v442 = (_BYTE *)(v10 + 7344);
        LODWORD(v19) = *(_DWORD *)v20;
        if ((_DWORD)v13 == 191488)
        {
          LODWORD(v17) = 1;
          v18 = (_BYTE *)(v10 + 7344);
          v21 = (uint64_t *)(v10 + 7444);
          goto LABEL_288;
        }
        v478 = *(_OWORD *)(v10 + 7296);
        v250 = *(_DWORD *)(v10 + 7316);
        v480 = *(_OWORD *)(v10 + 7320);
        v481 = *(_QWORD *)(v10 + 7336);
        v466 = *v442;
        v472 = v250;
        v461 = *(_BYTE *)(v10 + 7345);
        v456 = *(_DWORD *)(a2 + 1052);
        v441 = *(_DWORD *)(v10 + 7408);
        v251 = *(unsigned int *)(v10 + 7404);
        v252 = *(_QWORD *)(v10 + 7288);
        v253 = *(_DWORD *)v252;
        v446 = *(_BYTE *)(v252 + 56);
        v450 = *(_DWORD *)(v252 + 4);
        v254 = *(_DWORD *)(v10 + 7400);
        v255 = *(_DWORD *)(v10 + 7412);
        *(_DWORD *)(v10 + 7444) = v254;
        *(_DWORD *)(v10 + 7448) = v255;
        *(_DWORD *)(v10 + 7452) = v251;
        *(_DWORD *)(v252 + 4) = v254;
        v256 = *(_DWORD *)(v10 + 12);
        if (!v256)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA2258);
        }
        v257 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v256 - 1) + 9) & 1;
        *(_BYTE *)(v252 + 56) = 0;
        v258 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v252, v12, 0, v257, a5, a6, a7, a8);
        *(_DWORD *)(v10 + 7368) = v258;
        LODWORD(v22) = v258;
        if (v258 <= 0x12 && ((1 << v258) & 0x40046) != 0)
        {
          v479 = (int)v19;
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v10 + 7288), (WTF::AtomStringImpl *)v441, v251, (uint64_t)a4, a5, a6, a7, a8);
          v263 = *(_QWORD *)(v10 + 7288);
          *(_DWORD *)v263 = v253;
          *(_BYTE *)(v263 + 56) = v446;
          v264 = *(_DWORD *)(v10 + 7400);
          v265 = *(_DWORD *)(v10 + 7412);
          v266 = *(_DWORD *)(v10 + 7404);
          *(_DWORD *)(v10 + 7444) = v264;
          *(_DWORD *)(v10 + 7448) = v265;
          *(_DWORD *)(v10 + 7452) = v266;
          *(_DWORD *)(v263 + 4) = v264;
          v267 = *(_DWORD *)(v10 + 12);
          if (!v267)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA2260);
          }
          v16 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v263, (uint64_t)v451, 0, *(_BYTE *)(*(_QWORD *)v10 + 720 * (v267 - 1) + 9) & 1, v259, v260, v261, v262);
          *(_DWORD *)(v10 + 7368) = v16;
          *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 4) = v450;
          *(_OWORD *)(v10 + 7296) = v478;
          *(_DWORD *)(v10 + 7312) = v456;
          *(_DWORD *)(v10 + 7316) = v472;
          *(_OWORD *)(v10 + 7320) = v480;
          *(_QWORD *)(v10 + 7336) = v481;
          *v442 = v466;
          *(_BYTE *)(v10 + 7345) = v461;
          *(_DWORD *)(v477 + 1052) = v456;
          v270 = *(WTF::StringImpl **)(v10 + 7360);
          *(_QWORD *)(v10 + 7360) = 0;
          if (v270)
          {
            if (*(_DWORD *)v270 == 2)
            {
              WTF::StringImpl::~StringImpl(v270, v268, (uint64_t)a3, (uint64_t)a4, a5, a6, v269, a8);
              WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
              v16 = *v451;
            }
            else
            {
              *(_DWORD *)v270 -= 2;
            }
          }
          LODWORD(v17) = 1;
          v15 = 5;
          v18 = (_BYTE *)(v10 + 7344);
          v21 = (uint64_t *)(v10 + 7444);
          v12 = (uint64_t)v451;
          goto LABEL_95;
        }
        v271 = *(_QWORD *)(v10 + 7288);
        if (!*(_BYTE *)(v271 + 56))
        {
          if ((_DWORD)v22 == 191488)
          {
            v272 = *(_DWORD *)(v10 + 7400);
            v273 = *(_DWORD *)(v10 + 7412);
            v274 = *(_DWORD *)(v10 + 7404);
            *(_DWORD *)(v10 + 7444) = v272;
            *(_DWORD *)(v10 + 7448) = v273;
            *(_DWORD *)(v10 + 7452) = v274;
            *(_DWORD *)(v271 + 4) = v272;
            v275 = *(_DWORD *)(v10 + 12);
            if (!v275)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA2268);
            }
            v276 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v275 - 1) + 9) & 1;
            *(_BYTE *)(v271 + 56) = 0;
            LODWORD(v22) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v271, (uint64_t)v451, 0, v276, a5, a6, a7, a8);
            *(_DWORD *)(v10 + 7368) = (_DWORD)v22;
            v26 = 17;
          }
          else
          {
            v26 = 10;
          }
          LODWORD(v17) = 1;
          if ((_DWORD)v22 != 14)
            goto LABEL_295;
          v18 = (_BYTE *)(v10 + 7344);
          v21 = (uint64_t *)(v10 + 7444);
          v15 = v26;
          v12 = (uint64_t)v451;
          goto LABEL_4;
        }
        if ((_DWORD)v22 != 20 && (v22 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v10 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v10, 1, "Expected a property name following keyword 'async'");
          return 0;
        }
LABEL_405:
        v323 = (uint64_t)v8;
        goto LABEL_317;
      }
      LODWORD(v17) = 0;
    }
    v21 = (uint64_t *)(v10 + 7444);
    goto LABEL_94;
  }
LABEL_4:
  a7 = 0;
  v22 = 0;
  v479 = (int)v19;
  v16 = 14;
  while (1)
  {
    v19 = *(uint64_t **)(v10 + 7376);
    v23 = *(unsigned int *)(v10 + 7408);
    v36 = (_DWORD)v17 == 0;
    v24 = (unsigned int *)&v479;
    if (v36)
      v24 = (unsigned int *)v20;
    v25 = *v24;
    v20 = (_DWORD)v13 == (_DWORD)v11 ? (WTF::StringImpl *)v14 : (WTF::StringImpl *)v25;
    v26 = *(_DWORD *)(v10 + 7412);
    v473 = v26;
    if (v15 != 18)
    {
      if ((_DWORD)v22)
      {
        v118 = *(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952);
        if (*v19 == *(_QWORD *)(v118 + 1376) || *v19 == *(_QWORD *)(v118 + 2296))
          break;
      }
    }
    v27 = *(_DWORD *)(v10 + 7400);
    v28 = *(_DWORD *)(v10 + 7404);
    *(_DWORD *)(v10 + 7444) = v27;
    *(_DWORD *)(v10 + 7448) = v26;
    *(_DWORD *)(v10 + 7452) = v28;
    v13 = *(unsigned int **)(v10 + 7288);
    v13[1] = v27;
    LODWORD(v17) = *(_DWORD *)(v10 + 12);
    if ((_DWORD)v17)
    {
      v29 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v17 - 1) + 9);
      a4 = (WTF::StringImpl *)*((_QWORD *)v13 + 10);
      v17 = *((_QWORD *)v13 + 12);
      if ((unint64_t)a4 >= v17 || (*(unsigned __int8 *)a4 | 0x20u) - 97 > 0x19)
        goto LABEL_44;
      v30 = v13[22];
      a5 = v13[28] - v30;
      a6 = *v13 | ((unint64_t)(a4 - v30) << 32);
      v31 = (unsigned __int8 *)a4 + 1;
      do
      {
        if ((unint64_t)v31 >= v17)
        {
          LOBYTE(v32) = 0;
          goto LABEL_29;
        }
        v33 = *v31++;
        v32 = v33;
        v34 = (v33 | 0x20) - 97;
      }
      while ((v33 - 48) < 0xA || v34 < 0x1A);
      if ((v32 & 0x80) != 0
        || ((v32 - 36) <= 0x3B
          ? (v36 = ((1 << (v32 - 36)) & 0x900000000000001) == 0)
          : (v36 = 1),
            !v36))
      {
LABEL_44:
        v467 = a7;
        v8 = v22;
        v14 = (WTF::StringImpl *)v23;
        v50 = v15;
        v11 = (uint64_t)v18;
        *((_BYTE *)v13 + 56) = 0;
        v51 = v13;
        v13 = (unsigned int *)v12;
        v52 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(v51, v12, 1u, v29 & 1, a5, a6, a7, a8);
        goto LABEL_45;
      }
      v17 = (unint64_t)(v31 - 1);
LABEL_29:
      *((_BYTE *)v13 + 176) = v32;
      *((_QWORD *)v13 + 10) = v17;
      a3 = (const WTF::StringImpl *)(v17 - (_QWORD)a4);
      if ((uint64_t)(v17 - (_QWORD)a4) < 0)
        goto LABEL_294;
      v37 = *((_QWORD *)v13 + 24);
      v475 = v21;
      if ((WTF::StringImpl *)v17 == a4)
      {
        v11 = *(_QWORD *)(v37 + 41952) + 8;
        goto LABEL_67;
      }
      v38 = (_QWORD *)*((_QWORD *)v13 + 23);
      if (*(char *)a4 < 0)
      {
        v20 = (WTF::StringImpl *)*((_QWORD *)v13 + 23);
        v455 = v23;
        v459 = a6;
        v464 = a5;
        v471 = a7;
        v445 = (int)v22;
        v176 = v15;
        v177 = v18;
        if (a3 == (const WTF::StringImpl *)1)
        {
          v222 = a4;
          JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v37 + 41968), *(unsigned __int8 *)a4, (uint64_t)a4, a5, a6, a7, a8, &v480);
          a4 = v222;
          v8 = (WTF::StringImpl *)v480;
          v18 = v177;
          v15 = v176;
          LODWORD(v22) = v445;
          a7 = v471;
          v185 = v20;
        }
        else
        {
          v14 = a4;
          WTF::AtomStringImpl::add((uint64_t)a4, (unint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, &v480);
          v8 = (WTF::StringImpl *)v480;
          v184 = *(_DWORD *)v480;
          *(_DWORD *)v480 += 2;
          if (v184)
          {
            *(_DWORD *)v8 = v184;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v8, v178, v179, v180, v181, v182, v183, a8);
            WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
          }
          v185 = v20;
          v18 = v177;
          v15 = v176;
          LODWORD(v22) = v445;
          a7 = v471;
          a4 = v14;
        }
        v186 = (*(_QWORD *)v185)++;
        v187 = v186 >> 6;
        v188 = *((unsigned int *)v185 + 5);
        LODWORD(a5) = v464;
        a6 = v459;
        if (v186 >> 6 >= v188)
        {
          v449 = (_QWORD *)((char *)v185 + 8);
          v451 = (int *)a4;
          v14 = v185;
          v225 = WTF::fastMalloc((WTF *)0x200);
          *(_QWORD *)&v480 = v225;
          v226 = *((unsigned int *)v14 + 5);
          if ((_DWORD)v226 == *((_DWORD *)v14 + 4))
          {
            v227 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v449, v226 + 1, (unint64_t)&v480);
            v226 = *((unsigned int *)v20 + 5);
            *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * v226) = *v227;
          }
          else
          {
            *(_QWORD *)(*v449 + 8 * v226) = v225;
          }
          v188 = (v226 + 1);
          v185 = v20;
          *((_DWORD *)v20 + 5) = v188;
          v186 = *(_QWORD *)v20 - 1;
          v187 = v186 >> 6;
          v18 = v177;
          v15 = v176;
          LODWORD(v22) = v445;
          LODWORD(a5) = v464;
          a7 = v471;
          LODWORD(a4) = (_DWORD)v451;
          a6 = v459;
        }
        v23 = v455;
        if (v187 >= v188)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA2218);
        }
        v46 = *((_QWORD *)v185 + 1);
        v189 = *(_QWORD *)(v46 + 8 * v187);
        v48 = v186 & 0x3F;
        *(_QWORD *)(v189 + 8 * v48) = v8;
        v49 = v186 >> 6;
        if (v49 >= v188)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA0E78);
        }
LABEL_66:
        v11 = *(_QWORD *)(v46 + 8 * v49) + 8 * v48;
LABEL_67:
        *(_QWORD *)(v10 + 7376) = v11;
        *(_DWORD *)(v10 + 7400) = *v13;
        v93 = v13[22];
        *(_DWORD *)(v10 + 7404) = v13[28] - v93;
        *(_DWORD *)(v10 + 7408) = (_DWORD)a4 - v93;
        *(_DWORD *)(v10 + 7412) = v13[20] - v93;
        *(_QWORD *)(v10 + 7416) = a6;
        *(_DWORD *)(v10 + 7424) = a5;
        v94 = v13[22];
        v95 = v13[20] - v94;
        v96 = v13[28] - v94;
        *(_QWORD *)(v18 + 84) = *v13 | (unint64_t)(v95 << 32);
        *(_DWORD *)(v10 + 7436) = v96;
        v52 = 12;
        v13[15] = 12;
        *(_DWORD *)(v10 + 7368) = 12;
        goto LABEL_68;
      }
      v39 = *(unsigned __int8 *)a4;
      if (a3 == (const WTF::StringImpl *)1)
      {
        v40 = v38 + 3;
        v11 = v38[v39 + 3];
        if (v11)
          goto LABEL_67;
        if (*(_BYTE *)(v37 + 44265))
        {
          v41 = *(_QWORD *)(v37 + 8 * v39 + 42216);
          v8 = *(WTF::StringImpl **)(v41 + 8);
          if ((v8 & 1) != 0)
            v42 = 0;
          else
            v42 = *(_DWORD **)(v41 + 8);
          *v42 += 2;
        }
        else
        {
          LOBYTE(v478) = *(_BYTE *)a4;
          v442 = v18;
          v194 = v15;
          v20 = v22;
          v451 = (int *)v19;
          v195 = a7;
          v465 = a5;
          v460 = a6;
          v14 = a4;
          v11 = (uint64_t)v38;
          WTF::AtomStringImpl::add((uint64_t)&v478, 1uLL, (uint64_t)a4, a5, a6, a7, a8, &v480);
          v38 = (_QWORD *)v11;
          a4 = v14;
          a6 = v460;
          a5 = v465;
          a7 = v195;
          v19 = (uint64_t *)v451;
          v22 = v20;
          v15 = v194;
          v18 = v442;
          v8 = (WTF::StringImpl *)v480;
        }
        v43 = (*v38)++;
        v44 = v43 >> 6;
        v45 = *((unsigned int *)v38 + 5);
        if (v43 >> 6 >= v45)
        {
          v454 = v23;
          v458 = a6;
          v463 = a5;
          v469 = a7;
          v14 = a4;
          v20 = v22;
          v145 = v15;
          v11 = (uint64_t)v18;
          v448 = v38 + 1;
          v451 = (int *)v19;
          v146 = v38;
          v147 = WTF::fastMalloc((WTF *)0x200);
          *(_QWORD *)&v480 = v147;
          v148 = *((unsigned int *)v146 + 5);
          if ((_DWORD)v148 == *((_DWORD *)v146 + 4))
          {
            v163 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v448, v148 + 1, (unint64_t)&v480);
            v38 = v146;
            v148 = *((unsigned int *)v146 + 5);
            *(_QWORD *)(v146[1] + 8 * v148) = *v163;
          }
          else
          {
            v38 = v146;
            *(_QWORD *)(*v448 + 8 * v148) = v147;
          }
          a4 = v14;
          v45 = (v148 + 1);
          *((_DWORD *)v38 + 5) = v45;
          v43 = *v38 - 1;
          v44 = v43 >> 6;
          v18 = (_BYTE *)v11;
          v15 = v145;
          v19 = (uint64_t *)v451;
          v23 = v454;
          LODWORD(v22) = (_DWORD)v20;
          a5 = v463;
          a7 = v469;
          a6 = v458;
        }
        if (v44 >= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA1F78);
        }
        v46 = v38[1];
        v47 = *(_QWORD *)(v46 + 8 * v44);
        v48 = v43 & 0x3F;
        *(_QWORD *)(v47 + 8 * v48) = v8;
        v49 = v43 >> 6;
        if (v49 >= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA1F80);
        }
        LODWORD(v17) = *(char *)a4;
        if ((v17 & 0x80000000) == 0)
        {
          v40[*(unsigned __int8 *)a4] = *(_QWORD *)(v46 + 8 * v49) + 8 * v48;
          goto LABEL_66;
        }
      }
      else
      {
        v447 = v38 + 131;
        v451 = (int *)(v17 - (_QWORD)a4);
        v11 = v38[v39 + 131];
        v453 = v23;
        v457 = a6;
        v462 = a5;
        if (v11)
        {
          v468 = a7;
          v74 = v18;
          v75 = v16;
          v76 = v19;
          v77 = v15;
          v14 = (WTF::StringImpl *)v10;
          v78 = (int)v22;
          v20 = a4;
          v8 = (WTF::StringImpl *)*((_QWORD *)v13 + 23);
          v79 = WTF::equalInternal<unsigned char>(*(_QWORD *)v11, (unint64_t)a4, (uint64_t)a3);
          v38 = v8;
          a4 = v20;
          a5 = v462;
          a7 = v468;
          LODWORD(v22) = v78;
          v10 = (uint64_t)v14;
          v15 = v77;
          v19 = v76;
          v16 = v75;
          v18 = v74;
          v23 = v453;
          a6 = v457;
          if (v79)
            goto LABEL_67;
        }
        v444 = (int)v22;
        v20 = (WTF::StringImpl *)v38;
        v14 = (WTF::StringImpl *)a7;
        v80 = v15;
        v11 = (uint64_t)v18;
        v81 = a4;
        WTF::AtomStringImpl::add((uint64_t)a4, (unint64_t)v451, (uint64_t)a4, a5, a6, a7, a8, &v480);
        v8 = (WTF::StringImpl *)v480;
        v87 = *(_DWORD *)v480;
        *(_DWORD *)v480 += 2;
        if (v87)
        {
          *(_DWORD *)v8 = v87;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v8, v82, (uint64_t)a3, v83, v84, v85, v86, a8);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
        }
        v88 = v20;
        v89 = (*(_QWORD *)v20)++;
        v90 = v89 >> 6;
        v91 = *((unsigned int *)v20 + 5);
        LODWORD(v22) = v444;
        if (v89 >> 6 >= v91)
        {
          v470 = (_QWORD *)((char *)v20 + 8);
          v149 = WTF::fastMalloc((WTF *)0x200);
          *(_QWORD *)&v480 = v149;
          v150 = *((unsigned int *)v20 + 5);
          if ((_DWORD)v150 == *((_DWORD *)v20 + 4))
          {
            v164 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v470, v150 + 1, (unint64_t)&v480);
            v88 = v20;
            v150 = *((unsigned int *)v20 + 5);
            *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * v150) = *v164;
          }
          else
          {
            v88 = v20;
            *(_QWORD *)(*v470 + 8 * v150) = v149;
          }
          v18 = (_BYTE *)v11;
          v15 = v80;
          LODWORD(v22) = v444;
          a7 = (uint64_t)v14;
          a4 = v81;
          v91 = (v150 + 1);
          *((_DWORD *)v88 + 5) = v91;
          v89 = *(_QWORD *)v88 - 1;
          v90 = v89 >> 6;
        }
        else
        {
          v18 = (_BYTE *)v11;
          v15 = v80;
          a7 = (uint64_t)v14;
          a4 = v81;
        }
        v23 = v453;
        a6 = v457;
        a5 = v462;
        if (v90 >= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA1F88);
        }
        v46 = *((_QWORD *)v88 + 1);
        v92 = *(_QWORD *)(v46 + 8 * v90);
        v48 = v89 & 0x3F;
        *(_QWORD *)(v92 + 8 * v48) = v8;
        v49 = v89 >> 6;
        if (v49 >= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA1F90);
        }
        LODWORD(v17) = *(char *)a4;
        if ((v17 & 0x80000000) == 0)
        {
          v447[*(unsigned __int8 *)a4] = *(_QWORD *)(v46 + 8 * v49) + 8 * v48;
          goto LABEL_66;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
LABEL_294:
    __break(1u);
LABEL_295:
    if ((int)v22 <= 36)
    {
      v116 = 0;
      v117 = &v479;
      a2 = v477;
      v18 = v442;
      v15 = v26;
      v16 = (int)v22;
      v10 = (uint64_t)v8;
      v12 = (uint64_t)v451;
      switch((int)v22)
      {
        case 4:
          goto LABEL_328;
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_174;
        case 9:
        case 10:
          goto LABEL_297;
        case 11:
          goto LABEL_348;
        case 12:
          goto LABEL_443;
        default:
          v18 = v442;
          v15 = v26;
          v16 = (int)v22;
          v10 = (uint64_t)v8;
          v12 = (uint64_t)v451;
          goto LABEL_174;
      }
    }
    v21 = v475;
    a2 = v477;
    v18 = v442;
    v10 = (uint64_t)v8;
    v12 = (uint64_t)v451;
    if ((_DWORD)v22 == 37)
      goto LABEL_427;
    if (((_DWORD)v22 - 545) < 2)
      goto LABEL_445;
    v18 = v442;
    v10 = (uint64_t)v8;
    v12 = (uint64_t)v451;
    if ((_DWORD)v22 == 1048592)
    {
LABEL_443:
      if (**(_QWORD **)(v10 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952) + 896) && !v442[40])
        LODWORD(v19) = *(_DWORD *)v20;
      LODWORD(v17) = 1;
LABEL_445:
      v18 = v442;
      v21 = v475;
      v15 = v26;
      v16 = (int)v22;
LABEL_288:
      v10 = (uint64_t)v8;
      v12 = (uint64_t)v451;
LABEL_94:
      v479 = (int)v19;
      goto LABEL_95;
    }
    v16 = (int)v22;
    v15 = v26;
LABEL_174:
    v479 = (int)v19;
    if ((v16 & 0x200) == 0)
    {
      if (v16 != 20 && (v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v10 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v10, "Expected a property name");
        return 0;
      }
      goto LABEL_316;
    }
    v21 = v475;
LABEL_95:
    v22 = (WTF::StringImpl *)(v18[40] == 0);
    a7 = 1;
  }
  v467 = a7;
  v119 = *(_DWORD *)(v10 + 7400);
  v120 = *(_DWORD *)(v10 + 7404);
  *(_DWORD *)(v10 + 7444) = v119;
  *(_DWORD *)(v10 + 7448) = v26;
  *(_DWORD *)(v10 + 7452) = v120;
  v121 = *(unsigned int **)(v10 + 7288);
  v121[1] = v119;
  v122 = *(_DWORD *)(v10 + 12);
  if (!v122)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA21D8);
  }
  v8 = v22;
  v14 = (WTF::StringImpl *)v23;
  v50 = v15;
  v11 = (uint64_t)v18;
  v13 = (unsigned int *)v12;
  v52 = JSC::Lexer<unsigned char>::lexExpectIdentifier(v121, v12, 1u, *(_BYTE *)(*(_QWORD *)v10 + 720 * (v122 - 1) + 9) & 1, a5, a6, a7, a8);
LABEL_45:
  *v13 = v52;
  v15 = v50;
  if (((1 << v50) & 0x40400) != 0 || v52 != 18)
  {
    v475 = v21;
    v18 = (_BYTE *)v11;
    v23 = (uint64_t)v14;
    LODWORD(v22) = (_DWORD)v8;
    a7 = v467;
    if (v52 == 2)
    {
      v202 = *(_BYTE *)(v11 + 130);
      v203 = v18;
      v18[130] = v15;
      v204 = JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::ASTBuilder>(v10, (WTF::StringImpl *)v477, v19, (int)v20);
      if (*(_QWORD *)(v10 + 7360))
      {
        result = 0;
      }
      else
      {
        v205 = (_QWORD *)v204;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v204 + 152))(v204))
        {
          v228 = v205[4];
          v229 = (_DWORD *)*v19;
          if (*v19)
            *v229 += 2;
          v230 = *(WTF::StringImpl **)(v228 + 48);
          *(_QWORD *)(v228 + 48) = v229;
          if (v230)
          {
            if (*(_DWORD *)v230 == 2)
            {
              WTF::StringImpl::~StringImpl(v230, v206, v207, v208, v209, v210, v211, v212);
              WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
            }
            else
            {
              *(_DWORD *)v230 -= 2;
            }
          }
        }
        else if ((*(unsigned int (**)(_QWORD *))(*v205 + 176))(v205))
        {
          v426 = (uint64_t *)v205[20];
          if (!*v426)
            v426 = v19;
          v205[21] = v426;
        }
        v213 = *(uint64_t **)(v477 + 8);
        result = *v213;
        if ((unint64_t)(v213[1] - *v213) <= 0x1F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v477 + 8));
          result = *v213;
        }
        *v213 = result + 32;
        *(_QWORD *)result = v19;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = v205;
        *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | 0x801;
      }
      v203[130] = v202;
      return result;
    }
LABEL_68:
    if (v15 != 5)
    {
      if (v52 != 20 && (v52 & 0x100000) == 0)
      {
LABEL_137:
        if (*(_QWORD *)(v10 + 7360))
          return 0;
        v165 = "Expected a parenthesis for argument list";
        v166 = v10;
        goto LABEL_139;
      }
LABEL_316:
      v323 = v10;
LABEL_317:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(v323);
      return 0;
    }
    if ((a7 & 1) == 0)
    {
      if (v52 != 20 && (v52 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v10 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v10, 1, "Expected an identifier as property name");
        return 0;
      }
      goto LABEL_316;
    }
    if (v52 != 6 && v52 != 1)
    {
      if (v52 == 21)
      {
        v171 = *(_DWORD **)(v10 + 7496);
        if (v171)
        {
          if (!*v171)
            *v171 = 1;
        }
      }
      if ((_DWORD)v22)
      {
        v97 = *(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952);
        if (*v19 == *(_QWORD *)(v97 + 1376))
        {
          v98 = 2;
          return JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::ASTBuilder>(v10, (uint64_t **)v477, v98, v23, 0, a6, a7, a8);
        }
        if (*v19 == *(_QWORD *)(v97 + 2296))
        {
          v98 = 4;
          return JSC::Parser<JSC::Lexer<unsigned char>>::parseGetterSetter<JSC::ASTBuilder>(v10, (uint64_t **)v477, v98, v23, 0, a6, a7, a8);
        }
      }
      if (v52 != 20 && (v52 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v10 + 7360))
        {
          *(_QWORD *)&v480 = *v19;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(v10, (uint64_t *)&v480);
        }
        return 0;
      }
      goto LABEL_316;
    }
    v99 = *(_DWORD *)(v10 + 12);
    if (!v99)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA1F68);
    }
    v100 = v99 - 1;
    v101 = *(_QWORD *)v10;
    if ((*(_BYTE *)(*(_QWORD *)v10 + 720 * v100 + 9) & 1) != 0 && v16 == 532)
    {
      if (*(_QWORD *)(v10 + 7360))
        return 0;
      v167 = **(_QWORD **)(*(_QWORD *)(v10 + 7288) + 64);
      v168 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167);
      if (v169 <= v23)
      {
        v17 = 0x100000000;
        v168 = "";
        goto LABEL_163;
      }
      LODWORD(v17) = v473 - v23;
      if ((int)v169 - (int)v23 <= (v473 - v23))
      {
        LODWORD(v17) = v169 - v23;
        if (!(_DWORD)v23)
        {
          v17 = v169;
          goto LABEL_163;
        }
      }
      v17 = v17;
      v170 = v169 - v23;
      if ((v169 & 0xFF00000000) != 0)
      {
        if (v170 >= v17)
        {
          v168 += v23;
          v17 = v17 | 0x100000000;
LABEL_163:
          *(_QWORD *)&v480 = v168;
          *((_QWORD *)&v480 + 1) = v17;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24],char const(&)[16]>(v10, (uint64_t)&v480);
          return 0;
        }
      }
      else if (v170 >= v17)
      {
        v168 += 2 * v23;
        goto LABEL_163;
      }
    }
    else if ((v16 - 531) <= 1)
    {
      if (*(_QWORD *)(v10 + 7360))
        return 0;
      v151 = **(_QWORD **)(*(_QWORD *)(v10 + 7288) + 64);
      v152 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151);
      if (v153 <= v23)
      {
        v17 = 0x100000000;
        v152 = "";
        goto LABEL_155;
      }
      LODWORD(v17) = v473 - v23;
      if ((int)v153 - (int)v23 <= (v473 - v23))
      {
        LODWORD(v17) = v153 - v23;
        if (!(_DWORD)v23)
        {
          v17 = v153;
          goto LABEL_155;
        }
      }
      v17 = v17;
      v154 = v153 - v23;
      if ((v153 & 0xFF00000000) != 0)
      {
        if (v154 >= v17)
        {
          v152 += v23;
          v17 = v17 | 0x100000000;
LABEL_155:
          *(_QWORD *)&v480 = v152;
          *((_QWORD *)&v480 + 1) = v17;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24]>(v10, (uint64_t)&v480);
          return 0;
        }
      }
      else if (v154 >= v17)
      {
        v152 += 2 * v23;
        goto LABEL_155;
      }
    }
    else
    {
      if ((v16 & 0x200) == 0)
        goto LABEL_82;
      if ((v16 - 544) < 3)
      {
        if (v16 != 546)
        {
          if (v16 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)v10 + 720 * v100 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(v10 + 7360))
              {
                *(_QWORD *)&v480 = "in strict mode";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[24],char const(&)[2],char const*>(v10, (const char **)&v480);
              }
              return 0;
            }
            goto LABEL_82;
          }
          if ((*(_BYTE *)(*(_QWORD *)v10 + 720 * v100 + 9) & 1) != 0)
          {
            if (*(_QWORD *)(v10 + 7360))
              return 0;
            v192 = "in strict mode";
            goto LABEL_201;
          }
          if ((*(_BYTE *)(v101 + 720 * v100 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(v10 + 7360))
              return 0;
            v192 = "in a generator function";
LABEL_201:
            *(_QWORD *)&v480 = v192;
            v193 = "Cannot use 'yield' as a ";
LABEL_202:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[24],char const(&)[2],char const*>(v10, v193, (const char **)&v480);
            return 0;
          }
LABEL_82:
          *(_QWORD *)&v478 = *(_QWORD *)(v10 + 7416);
          DWORD2(v478) = *(_DWORD *)(v10 + 7424);
          v480 = *(_OWORD *)(v10 + 7400);
          JSC::Scope::useVariable(v101 + 720 * v100, *v19, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952) + 1248) == *v19);
          v102 = *(_DWORD *)(v10 + 12);
          if (!v102)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA1F70);
          }
          v103 = v102 - 1;
          if ((*(_BYTE *)(*(_QWORD *)v10 + 720 * v103 + 11) & 8) != 0)
            *(_BYTE *)(*(_QWORD *)v10 + 720 * v103 + 32) |= 1u;
          *(int32x2_t *)&v104 = JSC::ASTBuilder::createResolve(v477, (uint64_t)&v480, v19, (uint64_t *)&v478, v475, 1);
          v106 = v105;
          if ((*(unsigned int (**)(_QWORD *, double))(*v105 + 152))(v105, v104))
          {
            v134 = v106[4];
            v135 = (_DWORD *)*v19;
            if (*v19)
              *v135 += 2;
            v136 = *(WTF::StringImpl **)(v134 + 48);
            *(_QWORD *)(v134 + 48) = v135;
            if (v136)
            {
              if (*(_DWORD *)v136 == 2)
              {
                WTF::StringImpl::~StringImpl(v136, v107, v108, v109, v110, v111, v112, v113);
                WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
              }
              else
              {
                *(_DWORD *)v136 -= 2;
              }
            }
          }
          else if ((*(unsigned int (**)(_QWORD *))(*v106 + 176))(v106))
          {
            v232 = (uint64_t *)v106[20];
            if (!*v232)
              v232 = v19;
            v106[21] = v232;
          }
          v114 = *(_QWORD *)(v477 + 8);
          result = *(_QWORD *)v114;
          v115 = *(_QWORD *)(v114 + 8);
          if ((unint64_t)(v115 - *(_QWORD *)v114) <= 0x1F)
          {
            if (v115)
            {
              v199 = (_QWORD *)(v114 + 24);
              v200 = v115 - 8000;
              v482 = v115 - 8000;
              v201 = *(unsigned int *)(v114 + 36);
              if ((_DWORD)v201 == *(_DWORD *)(v114 + 32))
              {
                v224 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v199, v201 + 1, (unint64_t)&v482);
                v201 = *(unsigned int *)(v114 + 36);
                *(_QWORD *)(*(_QWORD *)(v114 + 24) + 8 * v201) = *v224;
              }
              else
              {
                *(_QWORD *)(*v199 + 8 * v201) = v200;
              }
              *(_DWORD *)(v114 + 36) = v201 + 1;
            }
            result = WTF::fastMalloc((WTF *)0x1F40);
            *(_QWORD *)(v114 + 8) = result + 8000;
          }
          *(_QWORD *)v114 = result + 32;
          *(_QWORD *)result = v19;
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(result + 16) = v106;
          *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | 0x11;
          return result;
        }
        if (*v18)
        {
          v190 = *(_DWORD *)(v101 + 720 * v100 + 10);
          if ((v190 & 0x102000) == 0 && *(_DWORD *)(v10 + 7480) != 1)
            goto LABEL_82;
          if (*(_QWORD *)(v10 + 7360))
            return 0;
          if ((v190 & 0x2000) != 0)
          {
            v191 = "in an async function";
          }
          else if ((v190 & 0x100000) != 0)
          {
            v191 = "in a static block";
          }
          else
          {
            if (*(_DWORD *)(v10 + 7480) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA21A8);
            }
            v191 = "in a module";
          }
        }
        else
        {
          if (*(_QWORD *)(v10 + 7360))
            return 0;
          v191 = "in an async function";
        }
        *(_QWORD *)&v480 = v191;
        v193 = "Cannot use 'await' as a ";
        goto LABEL_202;
      }
      if (*(_QWORD *)(v10 + 7360))
        return 0;
      v172 = **(_QWORD **)(*(_QWORD *)(v10 + 7288) + 64);
      v173 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172);
      if (v174 <= v23)
      {
        v17 = 0x100000000;
        v173 = "";
        goto LABEL_179;
      }
      LODWORD(v17) = v473 - v23;
      if ((int)v174 - (int)v23 <= (v473 - v23))
      {
        LODWORD(v17) = v174 - v23;
        if (!(_DWORD)v23)
        {
          v17 = v174;
LABEL_179:
          *(_QWORD *)&v480 = v173;
          *((_QWORD *)&v480 + 1) = v17;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[24]>(v10, (uint64_t)&v480);
          return 0;
        }
      }
      v17 = v17;
      v175 = v174 - v23;
      if ((v174 & 0xFF00000000) != 0)
      {
        if (v175 >= v17)
        {
          v173 += v23;
          v17 = v17 | 0x100000000;
          goto LABEL_179;
        }
      }
      else if (v175 >= v17)
      {
        v173 += 2 * v23;
        goto LABEL_179;
      }
    }
    goto LABEL_294;
  }
  v55 = *(_DWORD *)(v10 + 7400);
  v56 = *(_DWORD *)(v10 + 7412);
  v57 = *(_DWORD *)(v10 + 7404);
  *(_DWORD *)(v10 + 7444) = v55;
  *(_DWORD *)(v10 + 7448) = v56;
  *(_DWORD *)(v10 + 7452) = v57;
  v58 = *(_QWORD *)(v10 + 7288);
  *(_DWORD *)(v58 + 4) = v55;
  v59 = *(_DWORD *)(v10 + 12);
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA1F60);
  }
  v60 = *(_BYTE *)(*(_QWORD *)v10 + 720 * (v59 - 1) + 9) & 1;
  *(_BYTE *)(v58 + 56) = 0;
  *(_DWORD *)(v10 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v58, (uint64_t)v13, 0, v60, v53, a6, v54, a8);
  LODWORD(v480) = 0;
  *((_QWORD *)&v480 + 1) = *(_QWORD *)(v10 + 7496);
  v481 = v10;
  *(_QWORD *)(v10 + 7496) = &v480;
  v61 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v10, v477, &v480);
  v62 = *((_QWORD *)&v480 + 1);
  if (!v61)
  {
    if (*((_QWORD *)&v480 + 1))
      **((_DWORD **)&v480 + 1) = v480;
    *(_QWORD *)(v481 + 7496) = v62;
    v249 = *v13;
LABEL_372:
    if (v249 != 20 && (v249 & 0x100000) == 0)
    {
      if (*(_QWORD *)(v10 + 7360))
        return 0;
      v165 = "Cannot parse expression for property declaration";
      v166 = v10;
LABEL_139:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(v166, 1, v165);
      return 0;
    }
    goto LABEL_316;
  }
  v63 = (_QWORD *)v61;
  *(_QWORD *)(v481 + 7496) = *((_QWORD *)&v480 + 1);
  *(_DWORD *)(v61 + 20) = *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 80) - *(_DWORD *)(*(_QWORD *)(v10 + 7288) + 88);
  if (!v19)
    return JSC::ASTBuilder::createProperty(v477, 0, (_QWORD *)v61, 1, 1, 0, 0);
  if (*v19 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 7216) + 41952) + 16))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 152))(v61))
    {
      v123 = v63[4];
      v124 = (_DWORD *)*v19;
      if (*v19)
        *v124 += 2;
      v125 = *(WTF::StringImpl **)(v123 + 48);
      *(_QWORD *)(v123 + 48) = v124;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
        {
          WTF::StringImpl::~StringImpl(v125, v64, v65, v66, v67, v68, v69, v70);
          WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
        }
        else
        {
          *(_DWORD *)v125 -= 2;
        }
      }
    }
    else if ((*(unsigned int (**)(_QWORD *))(*v63 + 176))(v63))
    {
      v231 = (uint64_t *)v63[20];
      if (!*v231)
        v231 = v19;
      v63[21] = v231;
    }
  }
  v71 = *(_QWORD *)(v477 + 8);
  result = *(_QWORD *)v71;
  v73 = *(_QWORD *)(v71 + 8);
  if ((unint64_t)(v73 - *(_QWORD *)v71) <= 0x1F)
  {
    if (v73)
    {
      v196 = (_QWORD *)(v71 + 24);
      v197 = v73 - 8000;
      *(_QWORD *)&v480 = v73 - 8000;
      v198 = *(unsigned int *)(v71 + 36);
      if ((_DWORD)v198 == *(_DWORD *)(v71 + 32))
      {
        v223 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v196, v198 + 1, (unint64_t)&v480);
        v198 = *(unsigned int *)(v71 + 36);
        *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8 * v198) = *v223;
      }
      else
      {
        *(_QWORD *)(*v196 + 8 * v198) = v197;
      }
      *(_DWORD *)(v71 + 36) = v198 + 1;
    }
    result = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v71 + 8) = result + 8000;
  }
  *(_QWORD *)v71 = result + 32;
  *(_QWORD *)result = v19;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v63;
LABEL_55:
  *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | 1;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;

  v4 = 0;
  v5 = *(_DWORD **)(a1 + 7496);
  v6 = a1;
  *(_QWORD *)(a1 + 7496) = &v4;
  result = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v4);
  v3 = v5;
  if (!result && v5)
    *v5 = v4;
  *(_QWORD *)(v6 + 7496) = v3;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parsePropertyMethod<JSC::ASTBuilder>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;

  v18 = *(_OWORD *)(a1 + 7400);
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = a3;
  if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, &v14, 2, 0) & 1) != 0)
    return JSC::ASTBuilder::createMethodDefinition((uint64_t)a2, (uint64_t)&v18, (uint64_t)&v14, v6, v7, v8, v9, v10);
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 20 && (v12 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
  }
  else
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  return 0;
}

double JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int32x2_t *v10;
  int v12;
  __n128 *v13;
  __int128 v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  unsigned int v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  double v73;
  double v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  void (**v82)(JSC::VoidNode *__hidden);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  BOOL v92;
  uint64_t *v93;
  int v94;
  __int16 *v95;
  uint64_t v96;
  _QWORD *v97;
  _OWORD *v98;
  __int128 v99;
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  __int32 v112;
  int v113;
  char v114;
  __int16 *v115;
  int v116;
  __int32 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  const char *v147;
  int v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  _QWORD *AssignNode;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  __int128 v184;
  int v185;
  __int16 *v186;
  __int128 v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  _BYTE *v192;
  BOOL v193;
  unsigned int v194;
  int v195;
  uint64_t v196;
  __int128 v197;
  uint64_t *v198;
  uint64_t v199;
  int v200;
  char v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  __int128 v218;
  int v219;
  __int128 v220;
  int v221;
  uint64_t v222;
  BOOL v223;
  unsigned int v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  uint64_t v228;
  _DWORD *v229;
  unsigned int v230;
  _QWORD *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int v241;
  int v242;
  uint64_t *v243;
  double v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  __int8 v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  int v265;
  __int128 *v266;
  int32x4_t v267;
  uint64_t v268;
  char v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  char v277;
  uint64_t v278;
  int v279;
  int v280;
  int v281;
  int v282;
  WTF::AtomStringImpl *v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  _QWORD *v287;
  WTF::StringImpl *v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  char v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  unint64_t v322;
  char v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  __n128 *v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  WTF::AtomStringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  uint64_t v349;
  unint64_t v350;
  char *v351;
  char v352;
  int v353;
  uint64_t v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  _QWORD *v360;
  WTF::StringImpl *v361;
  int v362;
  int v363;
  int v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  int v368;
  BOOL v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  WTF::AtomStringImpl *v384;
  uint64_t v385;
  WTF::StringImpl *v386;
  uint64_t v387;
  unint64_t v388;
  char *v389;
  char v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  _QWORD *v397;
  WTF::StringImpl *v398;
  int v399;
  unsigned int v400;
  uint64_t v401;
  unsigned int v402;
  _DWORD *v403;
  unsigned int v404;
  uint64_t *v405;
  BOOL v406;
  uint64_t v407;
  unint64_t *v408;
  char v409;
  __int8 v410;
  int v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  int v420;
  unint64_t v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  void *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int32x4_t v453;
  uint64_t v454;
  char v455;
  char v456;
  WTF::StringImpl *v457;
  WTF::StringImpl *v458;
  WTF::StringImpl *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  char *v463;
  char v464;
  uint64_t v465;
  int v466;
  int v467;
  int v468;
  int v469;
  WTF::AtomStringImpl *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  WTF::StringImpl *v479;
  uint64_t v480;
  WTF::AtomStringImpl *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  int v491;
  int v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  JSC::ParserArena *v498;
  uint64_t v499;
  WTF::StringImpl *v500;
  unint64_t v501;
  void *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  __int128 *v559;
  const char *v560;
  unint64_t v561;
  void *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  void *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  _QWORD *v596;
  _QWORD *v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  __int128 v604;
  uint64_t v605;
  BOOL isAllowedIdentifierLet;
  int v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  _OWORD *v619;
  __int128 v620;
  __int128 v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  int v640;
  int v641;
  int v642;
  uint64_t v643;
  _OWORD *v644;
  __int128 v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  __int128 v661;
  __int128 v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  _QWORD *v666;
  uint64_t v667;
  uint64_t v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *v675;
  _QWORD *v676;
  int v677;
  int v678;
  int v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  int v683;
  _QWORD *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  int v691;
  int v692;
  int v693;
  uint64_t v694;
  _OWORD *v695;
  __int128 v696;
  __int128 v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  _QWORD *v710;
  _QWORD *v711;
  int v712;
  unsigned int v713;
  char v714;
  uint64_t v715;
  char v716;
  uint64_t *v717;
  _QWORD *v718;
  _QWORD *v719;
  _QWORD *v720;
  int v721;
  const char *v722;
  int v723;
  const char *v724;
  int v725;
  int v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  int v733;
  int v734;
  uint64_t v735;
  int v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  int v740;
  int v741;
  int v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  __int128 v747;
  int v748;
  int v749;
  int v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  void *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  unsigned int v765;
  const char *v766;
  uint64_t v768;
  int v769;
  _BOOL4 v770;
  _QWORD *v771;
  _OWORD *v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  int v776;
  int v777;
  int v778;
  int v779;
  int v780;
  int v781;
  int v782;
  int v783;
  _DWORD *v784;
  unint64_t v785;
  int v786;
  uint64_t *v787;
  _QWORD *v788;
  int v789;
  int v790;
  __n128 *v791;
  uint64_t v792;
  uint64_t v793;
  unsigned int v794;
  unsigned int v795;
  WTF::StringImpl **v796;
  int v797;
  __int32 v798;
  _BYTE *v799;
  char *v800;
  __int16 *v801;
  int v802;
  __int16 *v803;
  uint64_t v804;
  int32x4_t v805;
  uint64_t v806;
  __int128 v807;
  _BYTE v808[72];
  char v809;
  char v810;
  WTF::StringImpl *v811;
  WTF::StringImpl *v812;
  __int128 v813;
  uint64_t v814;
  __int128 v815;
  __int128 v816;
  uint64_t v817;
  int v818;
  char v819;
  uint64_t v820;
  int v821;
  __n128 v822;
  _BYTE v823[32];
  int v824;
  __int128 v825;
  _BYTE v826[28];
  char v827;
  __int16 v828;
  char v829;
  _BYTE v830[44];
  char v831;
  __int16 v832;
  char v833;
  __int128 v834;
  _OWORD v835[2];
  __int128 v836;
  _BYTE v837[28];
  uint64_t v838;

  v784 = (_DWORD *)a3;
  v838 = *MEMORY[0x1E0C80C00];
  v10 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v768 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v10[6].i8[4] = 1;
    }
    return a9.n128_f64[0];
  }
  v802 = *(_DWORD *)(a1 + 7368);
  v12 = v802;
  if (v802 == 545)
  {
    v712 = *(_DWORD *)(a1 + 12);
    if (!v712)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA69E4);
    }
    v713 = v712 - 1;
    v12 = v802;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v713 + 9) & 1) != 0
      || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v713 + 11) & 2) != 0)
    {
      a9.n128_f64[0] = JSC::Parser<JSC::Lexer<unsigned char>>::parseYieldExpression<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return a9.n128_f64[0];
    }
  }
  v817 = *(_QWORD *)(a1 + 7416);
  v818 = *(_DWORD *)(a1 + 7424);
  v13 = (__n128 *)(a1 + 7400);
  v14 = *(_OWORD *)(a1 + 7400);
  v15 = (int *)(a1 + 7296);
  v790 = *(_DWORD *)(a1 + 7296);
  v798 = *(_DWORD *)(a1 + 7300);
  v815 = *(_OWORD *)(a1 + 7296);
  v816 = v14;
  v16 = *(_DWORD *)(a1 + 7316);
  v813 = *(_OWORD *)(a1 + 7320);
  v814 = *(_QWORD *)(a1 + 7336);
  v779 = *(unsigned __int8 *)(a1 + 7344);
  v780 = v16;
  v17 = *(unsigned __int8 *)(a1 + 7345);
  v786 = *((_DWORD *)a2 + 263);
  v18 = *(_DWORD *)(a1 + 7408);
  v19 = *(_DWORD *)(a1 + 7404);
  v20 = *(int **)(a1 + 7288);
  v777 = v20[1];
  v778 = v17;
  v21 = *v20;
  v775 = *((unsigned __int8 *)v20 + 56);
  v776 = v21;
  if (v12 == 2)
  {
    v227 = *(_DWORD *)(a1 + 12);
    if (!v227)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA6880);
    }
    v228 = *(_QWORD *)a1 + 720 * (v227 - 1);
    v230 = *(_DWORD *)(v228 + 180);
    v229 = (_DWORD *)(v228 + 180);
    v785 = v230;
    v231 = v229 - 3;
    *(_QWORD *)v808 = 0x800000000;
    *(_QWORD *)&v232 = -1;
    *((_QWORD *)&v232 + 1) = -1;
    *(_OWORD *)&v808[8] = v232;
    *(_OWORD *)&v808[24] = v232;
    *(_OWORD *)&v808[40] = v232;
    *(_OWORD *)&v808[56] = v232;
    v233 = *v229;
    if ((_DWORD)v233 == *(v229 - 1))
    {
      v659 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v229 - 3), (void *)(v233 + 1), (unint64_t)v808, a4, a5, a6, a7, a8);
      v660 = *v231 + 72 * *v229;
      *(_OWORD *)v660 = *(_OWORD *)v659;
      v14 = *(_OWORD *)(v659 + 32);
      v661 = *(_OWORD *)(v659 + 48);
      v662 = *(_OWORD *)(v659 + 16);
      *(_QWORD *)(v660 + 64) = *(_QWORD *)(v659 + 64);
      *(_OWORD *)(v660 + 32) = v14;
      *(_OWORD *)(v660 + 48) = v661;
      *(_OWORD *)(v660 + 16) = v662;
      *(_QWORD *)v659 = 0x800000000;
      *(_QWORD *)&v661 = -1;
      *((_QWORD *)&v661 + 1) = -1;
      *(_OWORD *)(v659 + 56) = v661;
      *(_OWORD *)(v659 + 40) = v661;
      *(_OWORD *)(v659 + 24) = v661;
      *(_OWORD *)(v659 + 8) = v661;
      ++*v229;
      if (*(_DWORD *)&v808[4] != 8)
        WTF::fastFree(*(unint64_t *)&v808[8], a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v234 = *v231 + 72 * v233;
      *(_OWORD *)v234 = *(_OWORD *)v808;
      v235 = *(_OWORD *)&v808[16];
      v14 = *(_OWORD *)&v808[32];
      v236 = *(_OWORD *)&v808[48];
      *(_QWORD *)(v234 + 64) = *(_QWORD *)&v808[64];
      *(_OWORD *)(v234 + 32) = v14;
      *(_OWORD *)(v234 + 48) = v236;
      *(_OWORD *)(v234 + 16) = v235;
      ++*v229;
    }
    v237 = *(_DWORD *)(a1 + 7404);
    v782 = *(_DWORD *)(a1 + 7408);
    v783 = v237;
  }
  else
  {
    v785 = 0;
    v782 = v18;
    v783 = v19;
  }
  LODWORD(v804) = 0;
  LODWORD(v793) = 0;
  v789 = 0;
  LODWORD(v22) = 0;
  v23 = (int *)(a1 + 7368);
  v24 = a1 + 7416;
  v772 = (_OWORD *)(a1 + 7316);
  v788 = (_QWORD *)(a1 + 7320);
  v773 = v19;
  v774 = v18;
  v781 = *(_DWORD *)(a1 + 7400);
  a9 = *v13;
  v822 = *v13;
  v796 = (WTF::StringImpl **)(a1 + 7360);
  v805.i64[0] = a1 + 7444;
  v771 = a2 + 4;
  v800 = &v830[24];
  v801 = (__int16 *)&v830[12];
  v799 = &v808[8];
  v787 = a2 + 118;
  v806 = a1 + 7296;
  *(_QWORD *)&v807 = a1 + 7416;
  v791 = (__n128 *)(a1 + 7400);
  while (1)
  {
    v820 = *(_QWORD *)v24;
    v821 = *(_DWORD *)(v24 + 8);
    v25 = *v15;
    LODWORD(v792) = *v23;
    v26 = v792;
    if ((_DWORD)v792 != 13)
    {
      LODWORD(v803) = v10[17].u8[4];
      v10[17].i8[4] = 1;
      if (v26 != 546)
        goto LABEL_15;
      v27 = *(_DWORD *)(a1 + 12);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA678CLL);
      }
      v28 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v29 = v28;
        if (v28 == 1)
          break;
        --v28;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 12) & 0x40) != 0)
          goto LABEL_12;
      }
      v28 = 0;
LABEL_12:
      if (v27 <= v29 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA6724);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 11) & 0x40) != 0 || ((1 << v10[21].i8[6]) & 0x6000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 12) & 0x10) == 0)
        {
          v36 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAwaitExpression<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_116;
        }
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
      }
      else
      {
LABEL_15:
        v797 = v25;
        *(__n128 *)v830 = *v13;
        if ((v26 & 0x100) != 0)
        {
          v30 = 1;
          do
          {
            v31 = v26;
            v39 = v26 & 0xFFFFFFFC;
            v32 = (v26 & 0xFFFFFFFC) == 256;
            ++v10->i32[0];
            v40 = v10[15];
            *(_DWORD *)v808 = v26;
            *(_DWORD *)&v808[4] = *(_DWORD *)v807;
            *(int32x2_t *)&v808[8] = v40;
            v41 = *((unsigned int *)a2 + 263);
            if ((_DWORD)v41 == *((_DWORD *)a2 + 262))
            {
              v559 = (__int128 *)WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 130), (void *)(v41 + 1), (unint64_t)v808, a4, a5, a6, a7, a8);
              v41 = *((unsigned int *)a2 + 263);
              v42 = a2[130];
              v43 = *v559;
            }
            else
            {
              v42 = a2[130];
              v43 = *(_OWORD *)v808;
            }
            *(_OWORD *)(v42 + 16 * v41) = v43;
            ++*((_DWORD *)a2 + 263);
            v44 = *(_DWORD *)(a1 + 7400);
            v45 = *(_DWORD *)(a1 + 7412);
            v46 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v44;
            *(_DWORD *)(a1 + 7448) = v45;
            *(_DWORD *)(a1 + 7452) = v46;
            v47 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v47 + 4) = v44;
            v48 = *(_DWORD *)(a1 + 12);
            if (!v48)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA66C4);
            }
            v49 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 9) & 1;
            *(_BYTE *)(v47 + 56) = 0;
            v26 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v47, a1 + 7368, 0, v49, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v26;
            ++*(_DWORD *)(a1 + 7304);
            if ((v26 & 0x100) == 0)
              goto LABEL_17;
            ++v30;
          }
          while (v39 != 256);
          if (*v796)
            goto LABEL_222;
          v25 = v797;
          if ((v31 - 256) >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA66BCLL);
          }
          *(_QWORD *)v808 = off_1E357B318[v31 - 256];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v808);
          goto LABEL_35;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
LABEL_17:
        v33 = *(_DWORD *)(a1 + 7420);
        v794 = *(_DWORD *)(a1 + 7416);
        v795 = v33;
        v34 = *(_DWORD *)(a1 + 7424);
        v35 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, a5, a6, a7, a8);
        if (v35)
        {
          v36 = v35;
          if ((v31 & 0xFFFFFFFC) == 0x100)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 256))(v35))
            {
              if (!*v796)
              {
                *(_QWORD *)v808 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>(v36);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, (const char **)v808);
              }
              goto LABEL_222;
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36) & 1) == 0)
            {
              v721 = *(_DWORD *)(a1 + 12);
              if (!v721)
              {
                __break(0xC471u);
                JUMPOUT(0x197EA6734);
              }
              v15 = (int *)v806;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v721 - 1) + 9) & 1) != 0
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 296))(v36) & 1) == 0)
              {
                if (!*v796)
                {
                  if ((v31 & 0xFFFFFFFD) == 0x100)
                    v722 = "++";
                  else
                    v722 = "--";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v722);
                }
                goto LABEL_608;
              }
            }
          }
          v37 = *(_DWORD *)(a1 + 12);
          if (!v37)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA6784);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1) != 0
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 112))(v36))
          {
            v143 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            v144 = **(_QWORD **)(a1 + 7320);
            v38 = v144 == *(_QWORD *)(v143 + 1248) || v144 == *(_QWORD *)(v143 + 880);
            if (v32 && v38)
            {
              v145 = *(_DWORD *)(a1 + 12);
              if (!v145)
              {
                __break(0xC471u);
                JUMPOUT(0x197EA672CLL);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v145 - 1) + 9) & 1) != 0)
              {
                if (*v796)
                  goto LABEL_222;
                goto LABEL_221;
              }
              v38 = 1;
            }
          }
          else
          {
            v38 = 0;
          }
          if (*v23 == 257)
          {
            v770 = v38;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 256))(v36))
            {
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36) & 1) == 0)
              {
                v725 = *(_DWORD *)(a1 + 12);
                if (!v725)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EA674CLL);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v725 - 1) + 9) & 1) != 0
                  || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 296))(v36) & 1) == 0)
                {
                  if (!*v796)
                  {
                    v724 = "Postfix -- operator applied to value that is not a reference";
                    goto LABEL_677;
                  }
LABEL_608:
                  v36 = 0;
                  v15 = (int *)v806;
                  goto LABEL_115;
                }
              }
              v769 = v34;
              *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
              if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 336))(v36, *a2))
                *((_DWORD *)a2 + 6) |= 2u;
              v132 = a2[1];
              v120 = *(_QWORD *)v132;
              v133 = *(_QWORD *)(v132 + 8);
              if ((unint64_t)(v133 - *(_QWORD *)v132) <= 0x57)
              {
                if (v133)
                {
                  v666 = (_QWORD *)(v132 + 24);
                  v667 = v133 - 8000;
                  *(_QWORD *)v808 = v133 - 8000;
                  v668 = *(unsigned int *)(v132 + 36);
                  if ((_DWORD)v668 == *(_DWORD *)(v132 + 32))
                  {
                    v719 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v666, v668 + 1, (unint64_t)v808);
                    v668 = *(unsigned int *)(v132 + 36);
                    *(_QWORD *)(*(_QWORD *)(v132 + 24) + 8 * v668) = *v719;
                  }
                  else
                  {
                    *(_QWORD *)(*v666 + 8 * v668) = v667;
                  }
                  *(_DWORD *)(v132 + 36) = v668 + 1;
                }
                v120 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v132 + 8) = v120 + 8000;
              }
              *(_QWORD *)v132 = v120 + 88;
              *(_DWORD *)(v120 + 8) = *(_DWORD *)v830;
              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
              *(_QWORD *)(v120 + 12) = a9.n128_u64[0];
              *(_DWORD *)(v120 + 20) = -1;
              *(_BYTE *)(v120 + 24) = 0;
              *(_QWORD *)v120 = off_1E3583CB8;
              *(_BYTE *)(v120 + 25) = 126;
              *(_BYTE *)(v120 + 26) = 0;
              v134 = *(_DWORD *)(v805.i64[0] + 8);
              *(_QWORD *)(v120 + 28) = *(_QWORD *)v805.i64[0];
              v135 = v794;
              v136 = v795;
              *(_DWORD *)(v120 + 36) = v134;
              *(_DWORD *)(v120 + 40) = v135;
              v137 = v769;
              *(_DWORD *)(v120 + 44) = v136;
              *(_DWORD *)(v120 + 48) = v137;
              v138 = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v120 + 60) = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v120 + 52) = v138;
              *(_QWORD *)(v120 + 64) = 0;
              *(_QWORD *)(v120 + 72) = v36;
              *(_BYTE *)(v120 + 80) = 6;
              *(_QWORD *)v120 = &off_1E3586CE0;
              ++*(_DWORD *)(a1 + 7296);
              v15 = (int *)v806;
              if (!v770)
                goto LABEL_165;
              v139 = *(_DWORD *)(a1 + 12);
              if (!v139)
              {
                __break(0xC471u);
                JUMPOUT(0x197EA675CLL);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v139 - 1) + 9) & 1) == 0)
              {
LABEL_165:
                if (!v32)
                {
                  v140 = *(_DWORD *)(a1 + 7400);
                  v141 = *(_DWORD *)(a1 + 7412);
                  v142 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v140;
                  *(_DWORD *)(a1 + 7448) = v141;
                  *(_DWORD *)(a1 + 7452) = v142;
                  v130 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v130 + 4) = v140;
                  v131 = *(_DWORD *)(a1 + 12);
                  if (!v131)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EA3430);
                  }
                  goto LABEL_47;
                }
                if (*v796)
                  goto LABEL_608;
                if (v31 <= 773)
                {
                  v560 = "logical-not";
                  switch(v31)
                  {
                    case 256:
                    case 258:
LABEL_548:
                      v560 = "increment";
                      goto LABEL_607;
                    case 257:
                    case 259:
LABEL_606:
                      v560 = "decrement";
                      goto LABEL_607;
                    case 260:
                      goto LABEL_607;
                    case 261:
LABEL_632:
                      v560 = "bitwise-not";
                      goto LABEL_607;
                    default:
                      goto LABEL_780;
                  }
                }
                if (v31 != 774)
                {
                  if (v31 != 775)
                  {
                    if (v31 != 776)
                    {
LABEL_780:
                      __break(0xC471u);
                      JUMPOUT(0x197EA677CLL);
                    }
                    goto LABEL_622;
                  }
LABEL_631:
                  v560 = "void";
                  goto LABEL_607;
                }
LABEL_630:
                v560 = "typeof";
                goto LABEL_607;
              }
              if (!*v796)
              {
                *(_QWORD *)v808 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)v808);
              }
LABEL_222:
              v36 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            if (*v23 != 256)
            {
LABEL_48:
              *(_QWORD *)v808 = *(_QWORD *)v805.i64[0];
              *(_DWORD *)&v808[8] = *(_DWORD *)(v805.i64[0] + 8);
              if (v30)
              {
                v53 = *((_DWORD *)a2 + 263);
                do
                {
                  v55 = a2[130] + 16 * v53;
                  v56 = *(_DWORD *)(v55 - 16);
                  if (v56 <= 773)
                  {
                    v58 = *(unsigned int *)(v55 - 12);
                    v57 = *(_DWORD *)(v55 - 8);
                    v59 = *(_DWORD *)(v55 - 4);
                    switch(v56)
                    {
                      case 256:
                      case 258:
                        if (v36 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 336))(v36, *a2))
                          *((_DWORD *)a2 + 6) |= 2u;
                        v60 = a2[1];
                        v61 = *(_QWORD *)v60;
                        v62 = *(_QWORD *)(v60 + 8);
                        if ((unint64_t)(v62 - *(_QWORD *)v60) <= 0x57)
                        {
                          if (v62)
                          {
                            v517 = (_QWORD *)(v60 + 24);
                            v518 = v62 - 8000;
                            *(_QWORD *)&v825 = v62 - 8000;
                            v519 = *(unsigned int *)(v60 + 36);
                            if ((_DWORD)v519 == *(_DWORD *)(v60 + 32))
                            {
                              v596 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v517, v519 + 1, (unint64_t)&v825);
                              v519 = *(unsigned int *)(v60 + 36);
                              *(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * v519) = *v596;
                            }
                            else
                            {
                              *(_QWORD *)(*v517 + 8 * v519) = v518;
                            }
                            *(_DWORD *)(v60 + 36) = v519 + 1;
                          }
                          v61 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v60 + 8) = v61 + 8000;
                        }
                        *(_QWORD *)v60 = v61 + 88;
                        *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                        *(int32x2_t *)(v61 + 12) = vrev64_s32(*(int32x2_t *)&v830[4]);
                        *(_DWORD *)(v61 + 20) = -1;
                        *(_BYTE *)(v61 + 24) = 0;
                        *(_BYTE *)(v61 + 25) = 126;
                        *(_BYTE *)(v61 + 26) = 0;
                        a9.n128_u64[0] = __PAIR64__(v58, v59);
                        *(_QWORD *)(v61 + 28) = v58 | ((unint64_t)(v57 + 2) << 32);
                        a9.n128_u64[1] = __PAIR64__(v59, v57);
                        *(__n128 *)(v61 + 36) = a9;
                        *(_QWORD *)(v61 + 52) = *(_QWORD *)v808;
                        *(_DWORD *)(v61 + 60) = *(_DWORD *)&v808[8];
                        *(_QWORD *)v61 = &off_1E3586B48;
                        *(_QWORD *)(v61 + 64) = 0;
                        *(_QWORD *)(v61 + 72) = v36;
                        v54 = 5;
                        goto LABEL_51;
                      case 257:
                      case 259:
                        if (v36 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 336))(v36, *a2))
                          *((_DWORD *)a2 + 6) |= 2u;
                        v65 = a2[1];
                        v61 = *(_QWORD *)v65;
                        v66 = *(_QWORD *)(v65 + 8);
                        if ((unint64_t)(v66 - *(_QWORD *)v65) <= 0x57)
                        {
                          if (v66)
                          {
                            v520 = (_QWORD *)(v65 + 24);
                            v521 = v66 - 8000;
                            *(_QWORD *)&v825 = v66 - 8000;
                            v522 = *(unsigned int *)(v65 + 36);
                            if ((_DWORD)v522 == *(_DWORD *)(v65 + 32))
                            {
                              v597 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v520, v522 + 1, (unint64_t)&v825);
                              v522 = *(unsigned int *)(v65 + 36);
                              *(_QWORD *)(*(_QWORD *)(v65 + 24) + 8 * v522) = *v597;
                            }
                            else
                            {
                              *(_QWORD *)(*v520 + 8 * v522) = v521;
                            }
                            *(_DWORD *)(v65 + 36) = v522 + 1;
                          }
                          v61 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v65 + 8) = v61 + 8000;
                        }
                        *(_QWORD *)v65 = v61 + 88;
                        *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                        *(int32x2_t *)(v61 + 12) = vrev64_s32(*(int32x2_t *)&v830[4]);
                        *(_DWORD *)(v61 + 20) = -1;
                        *(_BYTE *)(v61 + 24) = 0;
                        *(_BYTE *)(v61 + 25) = 126;
                        *(_BYTE *)(v61 + 26) = 0;
                        a9.n128_u64[0] = __PAIR64__(v58, v59);
                        *(_QWORD *)(v61 + 28) = v58 | ((unint64_t)(v57 + 2) << 32);
                        a9.n128_u64[1] = __PAIR64__(v59, v57);
                        *(__n128 *)(v61 + 36) = a9;
                        *(_QWORD *)(v61 + 52) = *(_QWORD *)v808;
                        *(_DWORD *)(v61 + 60) = *(_DWORD *)&v808[8];
                        *(_QWORD *)v61 = &off_1E3586B48;
                        *(_QWORD *)(v61 + 64) = 0;
                        *(_QWORD *)(v61 + 72) = v36;
                        v54 = 6;
LABEL_51:
                        *(_BYTE *)(v61 + 80) = v54;
                        v15 = (int *)v806;
                        ++*(_DWORD *)v806;
                        goto LABEL_52;
                      case 260:
                        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36))
                        {
                          v85 = a2[1];
                          v61 = *(_QWORD *)v85;
                          v86 = *(_QWORD *)(v85 + 8);
                          if ((unint64_t)(v86 - *(_QWORD *)v85) <= 0x2F)
                          {
                            if (v86)
                            {
                              v556 = (_QWORD *)(v85 + 24);
                              v557 = v86 - 8000;
                              *(_QWORD *)&v825 = v86 - 8000;
                              v558 = *(unsigned int *)(v85 + 36);
                              if ((_DWORD)v558 == *(_DWORD *)(v85 + 32))
                              {
                                v684 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v556, v558 + 1, (unint64_t)&v825);
                                v558 = *(unsigned int *)(v85 + 36);
                                *(_QWORD *)(*(_QWORD *)(v85 + 24) + 8 * v558) = *v684;
                              }
                              else
                              {
                                *(_QWORD *)(*v556 + 8 * v558) = v557;
                              }
                              *(_DWORD *)(v85 + 36) = v558 + 1;
                            }
                            v61 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v85 + 8) = v61 + 8000;
                            v15 = (int *)v806;
                          }
                          *(_QWORD *)v85 = v61 + 48;
                          *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                          *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v61 + 20) = -1;
                          *(_BYTE *)(v61 + 24) = 0;
                          *(_BYTE *)(v61 + 25) = 32;
                          *(_BYTE *)(v61 + 26) = 0;
                          *(_QWORD *)(v61 + 32) = v36;
                          *(_DWORD *)(v61 + 40) = 184;
                          *(_QWORD *)v61 = &off_1E3587A78;
                          goto LABEL_52;
                        }
                        v87 = *(double *)(v36 + 32);
                        ++*((_DWORD *)a2 + 7);
                        v88 = a2[1];
                        v36 = *(_QWORD *)v88;
                        v89 = *(_QWORD *)(v88 + 8);
                        if ((unint64_t)(v89 - *(_QWORD *)v88) <= 0x1F)
                        {
                          if (v89)
                          {
                            v593 = (_QWORD *)(v88 + 24);
                            v594 = v89 - 8000;
                            *(_QWORD *)&v825 = v89 - 8000;
                            v595 = *(unsigned int *)(v88 + 36);
                            if ((_DWORD)v595 == *(_DWORD *)(v88 + 32))
                            {
                              v710 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v593, v595 + 1, (unint64_t)&v825);
                              v595 = *(unsigned int *)(v88 + 36);
                              *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * v595) = *v710;
                            }
                            else
                            {
                              *(_QWORD *)(*v593 + 8 * v595) = v594;
                            }
                            *(_DWORD *)(v88 + 36) = v595 + 1;
                          }
                          v36 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v88 + 8) = v36 + 8000;
                          v15 = (int *)v806;
                        }
                        *(_QWORD *)v88 = v36 + 32;
                        *(_DWORD *)(v36 + 8) = *(_DWORD *)v830;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                        *(_QWORD *)(v36 + 12) = a9.n128_u64[0];
                        *(_DWORD *)(v36 + 20) = -1;
                        *(_BYTE *)(v36 + 24) = 0;
                        *(_BYTE *)(v36 + 25) = 32;
                        *(_BYTE *)(v36 + 26) = 0;
                        *(_QWORD *)v36 = &off_1E357B068;
                        *(_BYTE *)(v36 + 27) = v87 == 0.0;
                        goto LABEL_53;
                      case 261:
                        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36))
                        {
                          v83 = a2[1];
                          v61 = *(_QWORD *)v83;
                          v84 = *(_QWORD *)(v83 + 8);
                          if ((unint64_t)(v84 - *(_QWORD *)v83) <= 0x2F)
                          {
                            if (v84)
                            {
                              v547 = (_QWORD *)(v83 + 24);
                              v548 = v84 - 8000;
                              *(_QWORD *)&v825 = v84 - 8000;
                              v549 = *(unsigned int *)(v83 + 36);
                              if ((_DWORD)v549 == *(_DWORD *)(v83 + 32))
                              {
                                v671 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v547, v549 + 1, (unint64_t)&v825);
                                v549 = *(unsigned int *)(v83 + 36);
                                *(_QWORD *)(*(_QWORD *)(v83 + 24) + 8 * v549) = *v671;
                              }
                              else
                              {
                                *(_QWORD *)(*v547 + 8 * v549) = v548;
                              }
                              *(_DWORD *)(v83 + 36) = v549 + 1;
                            }
                            v61 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v83 + 8) = v61 + 8000;
                            v15 = (int *)v806;
                          }
                          *(_QWORD *)v83 = v61 + 48;
                          *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                          *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v61 + 20) = -1;
                          *(_BYTE *)(v61 + 24) = 0;
                          *(_BYTE *)(v61 + 25) = 11;
                          *(_BYTE *)(v61 + 26) = 0;
                          *(_QWORD *)(v61 + 32) = v36;
                          *(_DWORD *)(v61 + 40) = 194;
                          *(_QWORD *)v61 = &off_1E3578C40;
                          goto LABEL_52;
                        }
                        v238 = *(_QWORD *)(v36 + 32);
                        v239 = (v238 >> 52) & 0x7FF;
                        v74 = -1.0;
                        if ((v239 - 1023) <= 0x53)
                        {
                          v240 = v238 >> (51 - (v238 >> 52));
                          if (v239 > 0x433)
                            LODWORD(v240) = v238 << ((v238 >> 52) - 51);
                          if (v239 >= 0x41F)
                            v241 = v240;
                          else
                            v241 = (((1 << ((v238 >> 52) + 1)) - 1) & v240) + (1 << ((v238 >> 52) + 1));
                          if ((v238 & 0x8000000000000000) == 0)
                            v242 = v241;
                          else
                            v242 = -v241;
                          v74 = (double)~v242;
                        }
                        v243 = (uint64_t *)a2[1];
                        v36 = *v243;
                        if ((unint64_t)(v243[1] - *v243) <= 0x27)
                        {
                          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                          v36 = *v243;
                        }
                        *v243 = v36 + 40;
                        if (v74 != (double)(int)v74)
                        {
                          v244 = v74;
LABEL_312:
                          v91 = *(_QWORD *)&v244 >> 49 == 32766;
                          goto LABEL_111;
                        }
                        v90 = 3;
                        if (!(int)v74)
                        {
                          v244 = v74;
                          if ((*(_QWORD *)&v74 & 0x8000000000000000) != 0)
                            goto LABEL_312;
                        }
                        break;
                      default:
                        goto LABEL_766;
                    }
LABEL_114:
                    *(_DWORD *)(v36 + 8) = *(_DWORD *)v830;
                    a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                    *(_QWORD *)(v36 + 12) = a9.n128_u64[0];
                    *(_DWORD *)(v36 + 20) = -1;
                    *(_BYTE *)(v36 + 24) = 0;
                    *(_BYTE *)(v36 + 25) = v90;
                    *(_BYTE *)(v36 + 26) = 0;
                    *(double *)(v36 + 32) = v74;
                    *(_QWORD *)v36 = &off_1E3578920;
                    goto LABEL_53;
                  }
                  if (v56 <= 775)
                  {
                    if (v56 == 774)
                    {
                      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 112))(v36);
                      v68 = a2[1];
                      v61 = *(_QWORD *)v68;
                      v69 = *(_QWORD *)(v68 + 8);
                      v70 = v69 - *(_QWORD *)v68;
                      if (v67)
                      {
                        if (v70 <= 0x27)
                        {
                          if (v69)
                          {
                            v553 = (_QWORD *)(v68 + 24);
                            v554 = v69 - 8000;
                            *(_QWORD *)&v825 = v554;
                            v555 = *(unsigned int *)(v68 + 36);
                            if ((_DWORD)v555 == *(_DWORD *)(v68 + 32))
                            {
                              v676 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v553, v555 + 1, (unint64_t)&v825);
                              v555 = *(unsigned int *)(v68 + 36);
                              *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v555) = *v676;
                            }
                            else
                            {
                              *(_QWORD *)(*v553 + 8 * v555) = v554;
                            }
                            *(_DWORD *)(v68 + 36) = v555 + 1;
                          }
                          v61 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v68 + 8) = v61 + 8000;
                          v15 = (int *)v806;
                        }
                        *(_QWORD *)v68 = v61 + 40;
                        v71 = *(_QWORD *)(v36 + 32);
                        *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                        *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                        *(_DWORD *)(v61 + 20) = -1;
                        *(_BYTE *)(v61 + 24) = 0;
                        *(_BYTE *)(v61 + 25) = 4;
                        *(_BYTE *)(v61 + 26) = 0;
                        *(_QWORD *)v61 = &off_1E35875F8;
                        *(_QWORD *)(v61 + 32) = v71;
                        goto LABEL_52;
                      }
                      if (v70 <= 0x27)
                      {
                        if (v69)
                        {
                          v598 = (_QWORD *)(v68 + 24);
                          v599 = v69 - 8000;
                          *(_QWORD *)&v825 = v599;
                          v600 = *(unsigned int *)(v68 + 36);
                          if ((_DWORD)v600 == *(_DWORD *)(v68 + 32))
                          {
                            v711 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v598, v600 + 1, (unint64_t)&v825);
                            v600 = *(unsigned int *)(v68 + 36);
                            *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v600) = *v711;
                          }
                          else
                          {
                            *(_QWORD *)(*v598 + 8 * v600) = v599;
                          }
                          *(_DWORD *)(v68 + 36) = v600 + 1;
                        }
                        v61 = WTF::fastMalloc((WTF *)0x1F40);
                        *(_QWORD *)(v68 + 8) = v61 + 8000;
                        v15 = (int *)v806;
                      }
                      *(_QWORD *)v68 = v61 + 40;
                      *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                      a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                      *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                      *(_DWORD *)(v61 + 20) = -1;
                      *(_BYTE *)(v61 + 24) = 0;
                      *(_BYTE *)(v61 + 25) = 4;
                      *(_BYTE *)(v61 + 26) = 0;
                      v82 = &off_1E3587778;
                    }
                    else
                    {
                      ++*((_DWORD *)a2 + 7);
                      v80 = a2[1];
                      v61 = *(_QWORD *)v80;
                      v81 = *(_QWORD *)(v80 + 8);
                      if ((unint64_t)(v81 - *(_QWORD *)v80) <= 0x27)
                      {
                        if (v81)
                        {
                          v544 = (_QWORD *)(v80 + 24);
                          v545 = v81 - 8000;
                          *(_QWORD *)&v825 = v81 - 8000;
                          v546 = *(unsigned int *)(v80 + 36);
                          if ((_DWORD)v546 == *(_DWORD *)(v80 + 32))
                          {
                            v670 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v544, v546 + 1, (unint64_t)&v825);
                            v546 = *(unsigned int *)(v80 + 36);
                            *(_QWORD *)(*(_QWORD *)(v80 + 24) + 8 * v546) = *v670;
                          }
                          else
                          {
                            *(_QWORD *)(*v544 + 8 * v546) = v545;
                          }
                          *(_DWORD *)(v80 + 36) = v546 + 1;
                        }
                        v61 = WTF::fastMalloc((WTF *)0x1F40);
                        *(_QWORD *)(v80 + 8) = v61 + 8000;
                        v15 = (int *)v806;
                      }
                      *(_QWORD *)v80 = v61 + 40;
                      *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                      a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                      *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                      *(_DWORD *)(v61 + 20) = -1;
                      *(_BYTE *)(v61 + 24) = 0;
                      *(_BYTE *)(v61 + 25) = 126;
                      *(_BYTE *)(v61 + 26) = 0;
                      v82 = &off_1E3587478;
                    }
                    *(_QWORD *)v61 = v82;
                    *(_QWORD *)(v61 + 32) = v36;
                  }
                  else
                  {
                    switch(v56)
                    {
                      case 776:
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 112))(v36))
                        {
                          v72 = *(_DWORD *)(a1 + 12);
                          if (!v72)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197EA6754);
                          }
                          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1) != 0)
                          {
                            if (!*v796)
                            {
                              *(_QWORD *)&v825 = **(_QWORD **)(a1 + 7320);
                              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v825);
                            }
                            goto LABEL_222;
                          }
                        }
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 96))(v36))
                        {
                          if (!*v796)
                          {
                            *(_QWORD *)&v825 = **(_QWORD **)(a1 + 7336);
                            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v825);
                          }
                          goto LABEL_222;
                        }
                        v61 = (uint64_t)JSC::ASTBuilder::makeDeleteNode((uint64_t)a2, (uint64_t)v830, (_QWORD **)v36, (uint64_t *)(a2[130] + 16 * *((unsigned int *)a2 + 263) - 12), (uint64_t *)v808, (uint64_t *)v808);
                        break;
                      case 174336:
                        v63 = a2[1];
                        v61 = *(_QWORD *)v63;
                        v64 = *(_QWORD *)(v63 + 8);
                        if ((unint64_t)(v64 - *(_QWORD *)v63) <= 0x2F)
                        {
                          if (v64)
                          {
                            v541 = (_QWORD *)(v63 + 24);
                            v542 = v64 - 8000;
                            *(_QWORD *)&v825 = v64 - 8000;
                            v543 = *(unsigned int *)(v63 + 36);
                            if ((_DWORD)v543 == *(_DWORD *)(v63 + 32))
                            {
                              v669 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v541, v543 + 1, (unint64_t)&v825);
                              v543 = *(unsigned int *)(v63 + 36);
                              *(_QWORD *)(*(_QWORD *)(v63 + 24) + 8 * v543) = *v669;
                            }
                            else
                            {
                              *(_QWORD *)(*v541 + 8 * v543) = v542;
                            }
                            *(_DWORD *)(v63 + 36) = v543 + 1;
                          }
                          v61 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v63 + 8) = v61 + 8000;
                          v15 = (int *)v806;
                        }
                        *(_QWORD *)v63 = v61 + 48;
                        *(_DWORD *)(v61 + 8) = *(_DWORD *)v830;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                        *(_QWORD *)(v61 + 12) = a9.n128_u64[0];
                        *(_DWORD *)(v61 + 20) = -1;
                        *(_BYTE *)(v61 + 24) = 0;
                        *(_BYTE *)(v61 + 25) = 2;
                        *(_BYTE *)(v61 + 26) = 0;
                        *(_QWORD *)(v61 + 32) = v36;
                        *(_DWORD *)(v61 + 40) = 192;
                        *(_QWORD *)v61 = &off_1E35878F8;
                        break;
                      case 174337:
                        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36))
                        {
                          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36))
                          {
                            v714 = *(_BYTE *)(v36 + 41);
                            v715 = *(_QWORD *)(v36 + 32);
                            v716 = *(_BYTE *)(v36 + 40);
                            v717 = (uint64_t *)a2[1];
                            v36 = *v717;
                            if ((unint64_t)(v717[1] - *v717) <= 0x2F)
                            {
                              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                              v36 = *v717;
                            }
                            *v717 = v36 + 48;
                            *(_DWORD *)(v36 + 8) = *(_DWORD *)v830;
                            a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                            *(_QWORD *)(v36 + 12) = a9.n128_u64[0];
                            *(_DWORD *)(v36 + 20) = -1;
                            *(_BYTE *)(v36 + 24) = 0;
                            *(_BYTE *)(v36 + 25) = 8;
                            *(_BYTE *)(v36 + 26) = 0;
                            *(_QWORD *)v36 = &off_1E3583E38;
                            *(_QWORD *)(v36 + 32) = v715;
                            *(_BYTE *)(v36 + 40) = v716;
                            *(_BYTE *)(v36 + 41) = v714 ^ 1;
                            v15 = (int *)v806;
                          }
                          else
                          {
                            v198 = (uint64_t *)a2[1];
                            v199 = *v198;
                            if ((unint64_t)(v198[1] - *v198) <= 0x2F)
                            {
                              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                              v199 = *v198;
                            }
                            *v198 = v199 + 48;
                            v200 = *(_BYTE *)(v36 + 25) & 0x7E;
                            if (v200 == 8)
                              v201 = 8;
                            else
                              v201 = 10;
                            if (v200 == 2)
                              v202 = 2;
                            else
                              v202 = v201;
                            *(_DWORD *)(v199 + 8) = *(_DWORD *)v830;
                            a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                            *(_QWORD *)(v199 + 12) = a9.n128_u64[0];
                            *(_DWORD *)(v199 + 20) = -1;
                            *(_BYTE *)(v199 + 24) = 0;
                            *(_BYTE *)(v199 + 25) = v202;
                            *(_BYTE *)(v199 + 26) = 0;
                            *(_QWORD *)(v199 + 32) = v36;
                            *(_DWORD *)(v199 + 40) = 183;
                            *(_QWORD *)v199 = &off_1E35787A0;
                            v36 = v199;
                          }
                          goto LABEL_53;
                        }
                        v73 = *(double *)(v36 + 32);
                        v74 = -v73;
                        v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 376))(v36);
                        v76 = a2[1];
                        v36 = *(_QWORD *)v76;
                        v77 = *(_QWORD *)(v76 + 8);
                        v78 = v77 - *(_QWORD *)v76;
                        if (!v75)
                        {
                          if (v78 <= 0x27)
                          {
                            if (v77)
                            {
                              v550 = (_QWORD *)(v76 + 24);
                              v551 = v77 - 8000;
                              *(_QWORD *)&v825 = v77 - 8000;
                              v552 = *(unsigned int *)(v76 + 36);
                              if ((_DWORD)v552 == *(_DWORD *)(v76 + 32))
                              {
                                v675 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v550, v552 + 1, (unint64_t)&v825);
                                v552 = *(unsigned int *)(v76 + 36);
                                *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v552) = *v675;
                              }
                              else
                              {
                                *(_QWORD *)(*v550 + 8 * v552) = v551;
                              }
                              *(_DWORD *)(v76 + 36) = v552 + 1;
                            }
                            v36 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v76 + 8) = v36 + 8000;
                            v15 = (int *)v806;
                          }
                          *(_QWORD *)v76 = v36 + 40;
                          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                            || (double)(int)v74 != v74
                            || (v79 = 3, !(int)v74) && (*(_QWORD *)&v74 & 0x8000000000000000) != 0)
                          {
                            if (*(_QWORD *)&v74 >> 49 == 32766)
                              v79 = 3;
                            else
                              v79 = 2;
                          }
                          *(_DWORD *)(v36 + 8) = *(_DWORD *)v830;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
                          *(_QWORD *)(v36 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v36 + 20) = -1;
                          *(_BYTE *)(v36 + 24) = 0;
                          *(_BYTE *)(v36 + 25) = v79;
                          *(_BYTE *)(v36 + 26) = 0;
                          *(double *)(v36 + 32) = v74;
                          *(_QWORD *)v36 = &off_1E3578AB0;
                          goto LABEL_53;
                        }
                        if (v78 <= 0x27)
                        {
                          if (v77)
                          {
                            v672 = (_QWORD *)(v76 + 24);
                            v673 = v77 - 8000;
                            *(_QWORD *)&v825 = v77 - 8000;
                            v674 = *(unsigned int *)(v76 + 36);
                            if ((_DWORD)v674 == *(_DWORD *)(v76 + 32))
                            {
                              v720 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v672, v674 + 1, (unint64_t)&v825);
                              v674 = *(unsigned int *)(v76 + 36);
                              *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v674) = *v720;
                            }
                            else
                            {
                              *(_QWORD *)(*v672 + 8 * v674) = v673;
                            }
                            *(_DWORD *)(v76 + 36) = v674 + 1;
                          }
                          v36 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v76 + 8) = v36 + 8000;
                          v15 = (int *)v806;
                        }
                        *(_QWORD *)v76 = v36 + 40;
                        if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || (double)(int)v74 != v74
                          || (v90 = 3, !(int)v74) && (*(_QWORD *)&v74 & 0x8000000000000000) != 0)
                        {
                          v91 = *(_QWORD *)&v74 >> 49 == 32766;
LABEL_111:
                          if (v91)
                            v90 = 3;
                          else
                            v90 = 2;
                        }
                        goto LABEL_114;
                      default:
LABEL_766:
                        __break(0xC471u);
                        JUMPOUT(0x197EA66E8);
                    }
                  }
LABEL_52:
                  v36 = v61;
LABEL_53:
                  v53 = *((_DWORD *)a2 + 263) - 1;
                  *((_DWORD *)a2 + 263) = v53;
                  --v30;
                }
                while (v30);
              }
LABEL_115:
              v25 = v797;
              goto LABEL_116;
            }
            v770 = v38;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 256))(v36))
            {
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36) & 1) == 0)
              {
                v723 = *(_DWORD *)(a1 + 12);
                if (!v723)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EA673CLL);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v723 - 1) + 9) & 1) != 0
                  || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 296))(v36) & 1) == 0)
                {
                  if (!*v796)
                  {
                    v724 = "Postfix ++ operator applied to value that is not a reference";
LABEL_677:
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, v724);
                    goto LABEL_608;
                  }
                  goto LABEL_608;
                }
              }
              v769 = v34;
              *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
              if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 336))(v36, *a2))
                *((_DWORD *)a2 + 6) |= 2u;
              v118 = a2[1];
              v120 = *(_QWORD *)v118;
              v119 = *(_QWORD *)(v118 + 8);
              if ((unint64_t)(v119 - *(_QWORD *)v118) <= 0x57)
              {
                if (v119)
                {
                  v663 = (_QWORD *)(v118 + 24);
                  v664 = v119 - 8000;
                  *(_QWORD *)v808 = v119 - 8000;
                  v665 = *(unsigned int *)(v118 + 36);
                  if ((_DWORD)v665 == *(_DWORD *)(v118 + 32))
                  {
                    v718 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v663, v665 + 1, (unint64_t)v808);
                    v665 = *(unsigned int *)(v118 + 36);
                    *(_QWORD *)(*(_QWORD *)(v118 + 24) + 8 * v665) = *v718;
                  }
                  else
                  {
                    *(_QWORD *)(*v663 + 8 * v665) = v664;
                  }
                  *(_DWORD *)(v118 + 36) = v665 + 1;
                }
                v120 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v118 + 8) = v120 + 8000;
              }
              *(_QWORD *)v118 = v120 + 88;
              *(_DWORD *)(v120 + 8) = *(_DWORD *)v830;
              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v830[4]);
              *(_QWORD *)(v120 + 12) = a9.n128_u64[0];
              *(_DWORD *)(v120 + 20) = -1;
              *(_BYTE *)(v120 + 24) = 0;
              *(_QWORD *)v120 = off_1E3583CB8;
              *(_BYTE *)(v120 + 25) = 126;
              *(_BYTE *)(v120 + 26) = 0;
              v121 = *(_DWORD *)(v805.i64[0] + 8);
              *(_QWORD *)(v120 + 28) = *(_QWORD *)v805.i64[0];
              v122 = v794;
              v123 = v795;
              *(_DWORD *)(v120 + 36) = v121;
              *(_DWORD *)(v120 + 40) = v122;
              v124 = v769;
              *(_DWORD *)(v120 + 44) = v123;
              *(_DWORD *)(v120 + 48) = v124;
              v125 = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v120 + 60) = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v120 + 52) = v125;
              *(_QWORD *)(v120 + 64) = 0;
              *(_QWORD *)(v120 + 72) = v36;
              *(_BYTE *)(v120 + 80) = 5;
              *(_QWORD *)v120 = &off_1E3586CE0;
              ++*(_DWORD *)(a1 + 7296);
              v15 = (int *)v806;
              if (!v770)
                goto LABEL_154;
              v126 = *(_DWORD *)(a1 + 12);
              if (!v126)
              {
                __break(0xC471u);
                JUMPOUT(0x197EA6744);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v126 - 1) + 9) & 1) == 0)
              {
LABEL_154:
                if (!v32)
                {
                  v127 = *(_DWORD *)(a1 + 7400);
                  v128 = *(_DWORD *)(a1 + 7412);
                  v129 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v127;
                  *(_DWORD *)(a1 + 7448) = v128;
                  *(_DWORD *)(a1 + 7452) = v129;
                  v130 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v130 + 4) = v127;
                  v131 = *(_DWORD *)(a1 + 12);
                  if (!v131)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EA32CCLL);
                  }
LABEL_47:
                  v52 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v131 - 1) + 9) & 1;
                  *(_BYTE *)(v130 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v130, a1 + 7368, 0, v52, a5, a6, a7, a8);
                  v36 = v120;
                  goto LABEL_48;
                }
                if (*v796)
                  goto LABEL_608;
                if (v31 <= 773)
                {
                  v560 = "logical-not";
                  switch(v31)
                  {
                    case 256:
                    case 258:
                      goto LABEL_548;
                    case 257:
                    case 259:
                      goto LABEL_606;
                    case 260:
                      goto LABEL_607;
                    case 261:
                      goto LABEL_632;
                    default:
                      goto LABEL_618;
                  }
                }
                if (v31 != 774)
                {
                  if (v31 != 775)
                  {
                    if (v31 != 776)
                    {
LABEL_618:
                      __break(0xC471u);
                      JUMPOUT(0x197EA5B24);
                    }
LABEL_622:
                    v560 = "delete";
LABEL_607:
                    *(_QWORD *)v808 = v560;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v808);
                    goto LABEL_608;
                  }
                  goto LABEL_631;
                }
                goto LABEL_630;
              }
              if (*v796)
                goto LABEL_222;
              v144 = **(_QWORD **)(a1 + 7320);
LABEL_221:
              *(_QWORD *)v808 = v144;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v808);
              goto LABEL_222;
            }
          }
          if (!*v796)
          {
            *(_QWORD *)v808 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>(v36);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, (const char **)v808);
          }
          goto LABEL_222;
        }
        v51 = (*v23 & 0x100000) == 0 && *v23 != 20;
        if (v31)
        {
          v25 = v797;
          if (v51)
          {
            if (!*v796)
            {
              if (v31 <= 773)
              {
                v147 = "logical-not";
                switch(v31)
                {
                  case 256:
                  case 258:
                    v147 = "prefix-increment";
                    goto LABEL_237;
                  case 257:
                  case 259:
                    v147 = "prefix-decrement";
                    goto LABEL_237;
                  case 260:
                    goto LABEL_237;
                  case 261:
                    v147 = "bitwise-not";
                    goto LABEL_237;
                  default:
                    goto LABEL_747;
                }
              }
              switch(v31)
              {
                case 774:
                  v147 = "typeof";
                  break;
                case 775:
                  v147 = "void";
                  break;
                case 776:
                  v147 = "delete";
                  break;
                default:
LABEL_747:
                  __break(0xC471u);
                  JUMPOUT(0x197EA658CLL);
              }
LABEL_237:
              *(_QWORD *)v808 = v147;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, (const char **)v808);
            }
            goto LABEL_35;
          }
        }
        else
        {
          v25 = v797;
          if (v51)
          {
            if (!*v796)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
            goto LABEL_35;
          }
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
LABEL_35:
      v36 = 0;
LABEL_116:
      v10[17].i8[4] = (char)v803;
      goto LABEL_117;
    }
    v726 = *(_DWORD *)(a1 + 12);
    if (!v726)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA6714);
    }
    v727 = *(uint64_t **)(a1 + 7376);
    JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v726 - 1), *v727, 0);
    v10[29].i8[6] = 1;
    v732 = *(_DWORD *)(a1 + 7400);
    v733 = *(_DWORD *)(a1 + 7412);
    v734 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v732;
    *(_DWORD *)(a1 + 7448) = v733;
    *(_DWORD *)(a1 + 7452) = v734;
    v735 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v735 + 4) = v732;
    v736 = *(_DWORD *)(a1 + 12);
    if (!v736)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA671CLL);
    }
    v737 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v736 - 1) + 9) & 1;
    *(_BYTE *)(v735 + 56) = 0;
    v738 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v735, a1 + 7368, 0, v737, v728, v729, v730, v731);
    *(_DWORD *)(a1 + 7368) = v738;
    if ((int)v22 >= 131589 || v738 != 131589)
      break;
    a9.n128_u64[0] = (unint64_t)JSC::ASTBuilder::createPrivateIdentifierNode(a2[1], (uint64_t)&v822, (uint64_t)v727);
    v36 = v739;
    v15 = (int *)v806;
LABEL_117:
    if (!v36)
    {
      if (*v23 != 20 && (*v23 & 0x100000) == 0)
      {
        v103 = v802;
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
        goto LABEL_364;
      }
LABEL_694:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      v103 = v802;
      goto LABEL_364;
    }
    v92 = v25 != *v15;
    *(_QWORD *)v830 = v820;
    *(_DWORD *)&v830[8] = v821;
    v93 = (uint64_t *)v805.i64[0];
    v94 = *(_DWORD *)(v805.i64[0] + 8);
    v95 = v801;
    *((_DWORD *)v801 + 2) = v94;
    v96 = *v93;
    *(_QWORD *)v95 = v96;
    v97 = v800;
    *((_DWORD *)v800 + 2) = v94;
    *v97 = v96;
    *(_QWORD *)v808 = v36;
    v98 = v799;
    *((_DWORD *)v799 + 8) = *(_DWORD *)&v830[32];
    v99 = *(_OWORD *)&v830[16];
    *v98 = *(_OWORD *)v830;
    v98[1] = v99;
    v808[44] = v92;
    v100 = *((_DWORD *)a2 + 11);
    if (v100 == *((_DWORD *)a2 + 10))
    {
      a9.n128_u64[0] = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>((uint64_t)v771, (unint64_t)v808).n128_u64[0];
    }
    else
    {
      v101 = a2[4] + 48 * v100;
      a9 = *(__n128 *)v808;
      *((_QWORD *)&v14 + 1) = *(_QWORD *)&v808[24];
      v102 = *(_OWORD *)&v808[32];
      *(_OWORD *)(v101 + 16) = *(_OWORD *)&v808[16];
      *(_OWORD *)(v101 + 32) = v102;
      *(__n128 *)v101 = a9;
      ++*((_DWORD *)a2 + 11);
    }
    v103 = v802;
    v22 = *v23;
    if (v10[17].i8[4])
      v104 = 245760;
    else
      v104 = 15360;
    v105 = v104 & v22;
    if ((v104 & v22) == 0)
    {
      v106 = v804;
      if ((_DWORD)v804)
      {
        v803 = &v832;
        v800 = (char *)&v834 + 8;
        v801 = &v828;
        v799 = &v823[12];
        v181 = *((_DWORD *)a2 + 239);
        do
        {
          LODWORD(v804) = v106;
          v182 = *((_DWORD *)a2 + 11);
          v183 = a2[4] + 48 * v182;
          v184 = *(_OWORD *)(v183 - 32);
          v836 = *(_OWORD *)(v183 - 48);
          *(_OWORD *)v837 = v184;
          *(_OWORD *)&v837[12] = *(_OWORD *)(v183 - 20);
          v185 = *(unsigned __int8 *)(v183 - 4);
          v186 = v801;
          *v801 = *(_WORD *)(v183 - 3);
          *((_BYTE *)v186 + 2) = *(_BYTE *)(v183 - 1);
          *(_OWORD *)((char *)v835 + 12) = *(_OWORD *)(v183 - 68);
          v835[0] = *(_OWORD *)(v183 - 80);
          v834 = *(_OWORD *)(v183 - 96);
          v187 = v834;
          v188 = *(unsigned __int8 *)(v183 - 52);
          v189 = (uint64_t)v803;
          *v803 = *(_WORD *)(v183 - 51);
          *(_BYTE *)(v189 + 2) = *(_BYTE *)(v183 - 49);
          *((_DWORD *)a2 + 11) = v182 - 2;
          v190 = *(_DWORD *)(a2[118] + 8 * v181 - 8);
          *(_OWORD *)v830 = v187;
          *(_OWORD *)&v830[16] = v835[0];
          *(_OWORD *)&v830[28] = *(_OWORD *)((char *)v835 + 12);
          v831 = v188;
          *(_OWORD *)&v826[12] = *(_OWORD *)&v837[12];
          v825 = v836;
          *(_OWORD *)v826 = *(_OWORD *)v837;
          v827 = v185;
          JSC::ASTBuilder::makeBinaryNode((uint64_t)a2, (uint64_t)&v822, v190, (double **)v830, (uint64_t)&v825);
          *(_QWORD *)v823 = *(_QWORD *)v800;
          *(_DWORD *)&v823[8] = *((_DWORD *)v800 + 2);
          v192 = v799;
          *(_QWORD *)v799 = *((_QWORD *)&v836 + 1);
          *((_DWORD *)v192 + 2) = *(_DWORD *)v837;
          *(_QWORD *)&v823[24] = *(_QWORD *)&v837[16];
          v824 = *(_DWORD *)&v837[24];
          if (v188)
            v193 = 1;
          else
            v193 = v185 != 0;
          *(_QWORD *)v808 = v191;
          *(_OWORD *)&v808[8] = *(_OWORD *)v823;
          *(_OWORD *)&v808[24] = *(_OWORD *)&v823[16];
          *(_DWORD *)&v808[40] = v824;
          v808[44] = v193;
          v194 = *((_DWORD *)a2 + 11);
          v103 = v802;
          v195 = v804;
          if (v194 == *((_DWORD *)a2 + 10))
          {
            a9.n128_u64[0] = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>((uint64_t)v771, (unint64_t)v808).n128_u64[0];
          }
          else
          {
            v196 = a2[4] + 48 * v194;
            a9 = *(__n128 *)v808;
            *((_QWORD *)&v14 + 1) = *(_QWORD *)&v808[24];
            v197 = *(_OWORD *)&v808[32];
            *(_OWORD *)(v196 + 16) = *(_OWORD *)&v808[16];
            *(_OWORD *)(v196 + 32) = v197;
            *(__n128 *)v196 = a9;
            ++*((_DWORD *)a2 + 11);
          }
          v181 = *((_DWORD *)a2 + 239) - 1;
          *((_DWORD *)a2 + 239) = v181;
          v106 = v195 - 1;
        }
        while (v106);
        LODWORD(v22) = *v23;
      }
      v107 = *((_DWORD *)a2 + 11);
      v108 = *(_QWORD *)(a2[4] + 48 * v107 - 48);
      *((_DWORD *)a2 + 11) = v107 - 1;
      if (!v108)
        goto LABEL_365;
      if ((_DWORD)v22 != 7)
      {
        v109 = 0;
        goto LABEL_128;
      }
      *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
      v245 = *(_DWORD *)(a1 + 7400);
      v246 = *(_DWORD *)(a1 + 7412);
      v247 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v245;
      *(_DWORD *)(a1 + 7448) = v246;
      *(_DWORD *)(a1 + 7452) = v247;
      v248 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v248 + 4) = v245;
      v249 = *(_DWORD *)(a1 + 12);
      if (!v249)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA68DCLL);
      }
      v250 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v249 - 1) + 9) & 1;
      *(_BYTE *)(v248 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v248, a1 + 7368, 0, v250, a5, a6, a7, a8);
      v251 = v10[17].i8[4];
      v10[17].i8[4] = 1;
      *(_DWORD *)v808 = 0;
      *(_QWORD *)&v808[8] = *(_QWORD *)(a1 + 7496);
      *(_QWORD *)&v808[16] = a1;
      *(_QWORD *)(a1 + 7496) = v808;
      v252 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v808);
      *(_QWORD *)(*(_QWORD *)&v808[16] + 7496) = *(_QWORD *)&v808[8];
      v10[17].i8[4] = v251;
      if (!v252)
      {
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          v103 = v802;
          if (!*v796)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse left hand side of ternary operator");
          goto LABEL_369;
        }
        goto LABEL_732;
      }
      v253 = v252;
      *(_DWORD *)(v252 + 20) = *(_DWORD *)(a1 + 7448);
      v254 = *(_DWORD *)(a1 + 7368);
      if (v254 == 18)
      {
        v255 = *(_DWORD *)(a1 + 7400);
        v256 = *(_DWORD *)(a1 + 7412);
        v257 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v255;
        *(_DWORD *)(a1 + 7448) = v256;
        *(_DWORD *)(a1 + 7452) = v257;
        v258 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v258 + 4) = v255;
        v259 = *(_DWORD *)(a1 + 12);
        if (!v259)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA68E4);
        }
        v260 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v259 - 1) + 9) & 1;
        *(_BYTE *)(v258 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v258, a1 + 7368, 0, v260, a5, a6, a7, a8);
        *(_DWORD *)v808 = 0;
        *(_QWORD *)&v808[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v808[16] = a1;
        *(_QWORD *)(a1 + 7496) = v808;
        v261 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v808);
        *(_QWORD *)(*(_QWORD *)&v808[16] + 7496) = *(_QWORD *)&v808[8];
        if (v261)
        {
          v262 = v261;
          *(_DWORD *)(v261 + 20) = *(_DWORD *)(a1 + 7448);
          v263 = (uint64_t *)a2[1];
          v264 = *v263;
          if ((unint64_t)(v263[1] - *v263) <= 0x37)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
            v264 = *v263;
          }
          v109 = 0;
          *v263 = v264 + 56;
          v265 = v782;
          *(_DWORD *)(v264 + 8) = v781;
          *(_DWORD *)(v264 + 12) = v265;
          *(_DWORD *)(v264 + 16) = v783;
          *(_DWORD *)(v264 + 20) = -1;
          *(_BYTE *)(v264 + 24) = 0;
          *(_BYTE *)(v264 + 25) = 126;
          *(_BYTE *)(v264 + 26) = 0;
          *(_QWORD *)v264 = &off_1E3588678;
          *(_QWORD *)(v264 + 32) = v108;
          *(_QWORD *)(v264 + 40) = v253;
          v108 = v264;
          *(_QWORD *)(v264 + 48) = v262;
LABEL_310:
          v103 = v802;
          goto LABEL_128;
        }
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          v103 = v802;
          if (!*v796)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse right hand side of ternary operator");
          goto LABEL_369;
        }
LABEL_732:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        v103 = v802;
        goto LABEL_369;
      }
      if (v254 != 20 && (v254 & 0x100000) == 0)
      {
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected ':' in ternary operator");
        goto LABEL_369;
      }
LABEL_484:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      goto LABEL_369;
    }
    if ((int)v22 <= 52223)
    {
      if ((_DWORD)v22 == 34816)
      {
LABEL_253:
        LODWORD(v793) = 1;
        goto LABEL_254;
      }
      if ((_DWORD)v22 == 17408)
        v789 = 1;
    }
    else
    {
      if ((_DWORD)v22 == 52224)
        goto LABEL_253;
      if ((_DWORD)v22 == 4403200)
      {
        if ((v792 & 0xFFFFFFFC) == 0x100)
        {
          v15 = (int *)v806;
        }
        else
        {
          v15 = (int *)v806;
          v103 = v802;
          if ((v792 & 0x100) != 0)
          {
            if (!*v796)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[139]>(a1);
            goto LABEL_364;
          }
        }
      }
    }
LABEL_254:
    if ((v793 & 1) != 0 && (v789 & 1) != 0)
    {
      if ((_DWORD)v22 != 20 && (v22 & 0x100000) == 0)
      {
        v103 = v802;
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[112]>(a1);
        goto LABEL_364;
      }
      goto LABEL_694;
    }
    *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
    v205 = *(_DWORD *)(a1 + 7400);
    v206 = *(_DWORD *)(a1 + 7412);
    v207 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v205;
    *(_DWORD *)(a1 + 7448) = v206;
    *(_DWORD *)(a1 + 7452) = v207;
    v208 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v208 + 4) = v205;
    v209 = *(_DWORD *)(a1 + 12);
    v13 = v791;
    if (!v209)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA67B0);
    }
    v210 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v209 - 1) + 9) & 1;
    *(_BYTE *)(v208 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v208, a1 + 7368, 0, v210, a5, a6, a7, a8);
    v211 = *((_DWORD *)a2 + 239);
    if (!(_DWORD)v804)
    {
      v212 = 0;
      goto LABEL_259;
    }
    while (1)
    {
      v213 = v211 - 1;
      v214 = *v787;
      v215 = *(_DWORD *)(*v787 + 8 * v213 + 4);
      if (v215 == (_DWORD)v105)
        break;
      if (v215 <= (int)v105)
        goto LABEL_273;
      v330 = v13;
      LODWORD(a3) = *(_DWORD *)(v214 + 8 * v213);
LABEL_267:
      v216 = *((_DWORD *)a2 + 11);
      v217 = a2[4] + 48 * v216;
      v218 = *(_OWORD *)(v217 - 32);
      v836 = *(_OWORD *)(v217 - 48);
      *(_OWORD *)v837 = v218;
      *(_OWORD *)&v837[12] = *(_OWORD *)(v217 - 20);
      v219 = *(unsigned __int8 *)(v217 - 4);
      v828 = *(_WORD *)(v217 - 3);
      v829 = *(_BYTE *)(v217 - 1);
      *(_OWORD *)((char *)v835 + 12) = *(_OWORD *)(v217 - 68);
      v835[0] = *(_OWORD *)(v217 - 80);
      v834 = *(_OWORD *)(v217 - 96);
      v220 = v834;
      v221 = *(unsigned __int8 *)(v217 - 52);
      v832 = *(_WORD *)(v217 - 51);
      v833 = *(_BYTE *)(v217 - 49);
      *((_DWORD *)a2 + 11) = v216 - 2;
      *(_OWORD *)v830 = v220;
      *(_OWORD *)&v830[16] = v835[0];
      *(_OWORD *)&v830[28] = *(_OWORD *)((char *)v835 + 12);
      v831 = v221;
      *(_OWORD *)&v826[12] = *(_OWORD *)&v837[12];
      v825 = v836;
      *(_OWORD *)v826 = *(_OWORD *)v837;
      v827 = v219;
      JSC::ASTBuilder::makeBinaryNode((uint64_t)a2, (uint64_t)&v822, a3, (double **)v830, (uint64_t)&v825);
      *(_QWORD *)v823 = *((_QWORD *)&v834 + 1);
      *(_QWORD *)&v823[12] = *((_QWORD *)&v836 + 1);
      *(_DWORD *)&v823[8] = v835[0];
      *(_DWORD *)&v823[20] = *(_DWORD *)v837;
      *(_QWORD *)&v823[24] = *(_QWORD *)&v837[16];
      v824 = *(_DWORD *)&v837[24];
      if (v221)
        v223 = 1;
      else
        v223 = v219 != 0;
      *(_QWORD *)v808 = v222;
      *(_OWORD *)&v808[8] = *(_OWORD *)v823;
      *(_OWORD *)&v808[24] = *(_OWORD *)&v823[16];
      *(_DWORD *)&v808[40] = v824;
      v808[44] = v223;
      v224 = *((_DWORD *)a2 + 11);
      v15 = (int *)v806;
      v13 = v330;
      if (v224 == *((_DWORD *)a2 + 10))
      {
        a9.n128_u64[0] = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>((uint64_t)v771, (unint64_t)v808).n128_u64[0];
      }
      else
      {
        v225 = a2[4] + 48 * v224;
        a9 = *(__n128 *)v808;
        *((_QWORD *)&v14 + 1) = *(_QWORD *)&v808[24];
        v226 = *(_OWORD *)&v808[32];
        *(_OWORD *)(v225 + 16) = *(_OWORD *)&v808[16];
        *(_OWORD *)(v225 + 32) = v226;
        *(__n128 *)v225 = a9;
        ++*((_DWORD *)a2 + 11);
      }
      v212 = 0;
      v211 = *((_DWORD *)a2 + 239) - 1;
      *((_DWORD *)a2 + 239) = v211;
      LODWORD(v804) = v804 - 1;
      if (!(_DWORD)v804)
        goto LABEL_259;
    }
    a3 = *(unsigned int *)(v214 + 8 * v213);
    if ((a3 & 0x400000) == 0)
    {
      v330 = v13;
      goto LABEL_267;
    }
LABEL_273:
    v212 = v804;
LABEL_259:
    LODWORD(v804) = v212 + 1;
    *(_QWORD *)v808 = v22 | (v105 << 32);
    if (v211 == *((_DWORD *)a2 + 238))
    {
      WTF::Vector<std::pair<int,int>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>((uint64_t)v787, (unint64_t)v808);
    }
    else
    {
      *(_QWORD *)(a2[118] + 8 * v211) = v22 | (v105 << 32);
      ++*((_DWORD *)a2 + 239);
    }
    v24 = v807;
  }
  v103 = v802;
  if (!*v796)
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[79]>(a1);
LABEL_364:
  LODWORD(v22) = *v23;
LABEL_365:
  if ((_DWORD)v22 == 20 || (v22 & 0x100000) != 0)
    goto LABEL_484;
  if (!*v796)
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
LABEL_369:
  v331 = *(_DWORD *)(a1 + 12);
  if (!v331)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA690CLL);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v331 - 1) + 12) & 0x10) != 0)
  {
    if (*v23 == 546)
    {
      v108 = 0;
      if (*v796)
        return a9.n128_f64[0];
    }
    else
    {
      v108 = 0;
    }
    v109 = 1;
    goto LABEL_310;
  }
  v108 = 0;
  v109 = 1;
LABEL_128:
  if ((v103 & 0x200) == 0 && v103 != 2 && v103 != 1048592 && v103 != 12
    || (v110 = *v23, *v23 == 20)
    || ((v110 != 38) & ~v109) != 0)
  {
LABEL_134:
    v111 = v103 | 4;
    if (v109)
    {
      if (v111 != 4)
      {
        if (*v796)
          return a9.n128_f64[0];
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>(a1);
          return a9.n128_f64[0];
        }
        goto LABEL_699;
      }
      if (*v784 != 1 && *v796)
        return a9.n128_f64[0];
    }
    else if (v111 != 4
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108) & 1) == 0
           && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 56))(v108)
           || *v23 != 21)
    {
      v112 = v798;
      if (v798 != v10->i32[0])
      {
        v146 = *v23;
        if (*v23 < 0 || v146 < 21 || v146 > 0x24)
          return a9.n128_f64[0];
        goto LABEL_564;
      }
      v113 = 0;
      v114 = 0;
      v115 = (__int16 *)(a2 + 66);
      while (2)
      {
        v116 = *v23 - 21;
        v803 = v115;
        v804 = v108;
        v148 = 0;
        v115 = 0;
        v149 = 0;
        v150 = 0;
        switch(v116)
        {
          case 0:
            goto LABEL_194;
          case 1:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 1;
            goto LABEL_194;
          case 2:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 2;
            goto LABEL_194;
          case 3:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 3;
            goto LABEL_194;
          case 4:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 4;
            goto LABEL_194;
          case 5:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 15;
            goto LABEL_194;
          case 6:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 16;
            goto LABEL_194;
          case 7:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 17;
            goto LABEL_194;
          case 8:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 10;
            goto LABEL_194;
          case 9:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 11;
            goto LABEL_194;
          case 10:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 7;
            goto LABEL_194;
          case 11:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 8;
            goto LABEL_194;
          case 12:
            v148 = 0;
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 9;
            goto LABEL_194;
          case 13:
            LODWORD(v115) = 0;
            v149 = 0;
            v150 = 12;
            v148 = 1;
            goto LABEL_194;
          case 14:
            v148 = 0;
            v149 = 0;
            v150 = 13;
            LODWORD(v115) = 1;
            goto LABEL_194;
          case 15:
            v148 = 0;
            LODWORD(v115) = 0;
            v150 = 14;
            v149 = 1;
LABEL_194:
            ++*(_DWORD *)(a1 + 7304);
            v151 = v804;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v804 + 256))(v804))
            {
              if (!*v796)
              {
                *(_QWORD *)v808 = JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>(v804);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[57]>(a1, (const char **)v808);
              }
              return a9.n128_f64[0];
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 88))(v151) & 1) == 0)
            {
              v742 = *(_DWORD *)(a1 + 12);
              if (!v742)
              {
                __break(0xC471u);
                JUMPOUT(0x197EA67B8);
              }
              v151 = v804;
              if (((v148 | v115 | v149 | *(unsigned __int8 *)(*(_QWORD *)a1
                                                                           + 720 * (v742 - 1)
                                                                           + 9)) & 1) != 0
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v804 + 296))(v804) & 1) == 0)
              {
                if (!*v796)
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Left side of assignment is not a reference");
                return a9.n128_f64[0];
              }
            }
            v157 = *(_DWORD *)v806;
            *(_QWORD *)v808 = v151;
            *(_QWORD *)&v808[8] = v817;
            *(_DWORD *)&v808[16] = v818;
            *(_QWORD *)&v808[20] = *(_QWORD *)v807;
            *(_DWORD *)&v808[28] = *(_DWORD *)(v807 + 8);
            *(_DWORD *)&v808[32] = v157;
            v808[36] = v150;
            v158 = *((unsigned int *)a2 + 135);
            v115 = v803;
            if ((_DWORD)v158 == *((_DWORD *)a2 + 134))
            {
              v601 = WTF::Vector<JSC::ASTBuilder::AssignmentInfo,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v803, (void *)(v158 + 1), (unint64_t)v808, v152, v153, v154, v155, v156);
              v602 = a2[66] + 40 * *((unsigned int *)a2 + 135);
              v603 = *(_QWORD *)(v601 + 32);
              v604 = *(_OWORD *)(v601 + 16);
              *(_OWORD *)v602 = *(_OWORD *)v601;
              *(_OWORD *)(v602 + 16) = v604;
              *(_QWORD *)(v602 + 32) = v603;
            }
            else
            {
              v159 = *(_QWORD *)v803 + 40 * v158;
              v160 = *(_OWORD *)v808;
              v161 = *(_OWORD *)&v808[16];
              *(_QWORD *)(v159 + 32) = *(_QWORD *)&v808[32];
              *(_OWORD *)v159 = v160;
              *(_OWORD *)(v159 + 16) = v161;
            }
            ++*((_DWORD *)a2 + 135);
            v817 = *(_QWORD *)v807;
            v818 = *(_DWORD *)(v807 + 8);
            ++*(_DWORD *)(a1 + 7296);
            v162 = *(_DWORD *)(a1 + 7400);
            v163 = *(_DWORD *)(a1 + 7412);
            v164 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v162;
            *(_DWORD *)(a1 + 7448) = v163;
            *(_DWORD *)(a1 + 7452) = v164;
            v165 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v165 + 4) = v162;
            v166 = *(_DWORD *)(a1 + 12);
            if (!v166)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA67D0);
            }
            v167 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v166 - 1) + 9) & 1;
            *(_BYTE *)(v165 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v165, a1 + 7368, 0, v167, v153, v154, v155, v156);
            v168 = *(_DWORD *)(a1 + 12);
            if (!v168)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA67D8);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v168 - 1) + 9) & 1) != 0
              && *v788
              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v151 + 112))(v151))
            {
              v203 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              v204 = **(_QWORD **)(a1 + 7320);
              if (*(_QWORD *)(v203 + 1248) == v204)
              {
                v740 = *(_DWORD *)(a1 + 12);
                if (!v740)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EA67C8);
                }
                v115 = v803;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v740 - 1) + 9) & 1) != 0)
                {
                  if (!*v796)
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'eval' in strict mode");
                  return a9.n128_f64[0];
                }
              }
              if (*(_QWORD *)(v203 + 880) == v204)
              {
                v741 = *(_DWORD *)(a1 + 12);
                if (!v741)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EA67C0);
                }
                v115 = v803;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v741 - 1) + 9) & 1) != 0)
                {
                  if (!*v796)
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'arguments' in strict mode");
                  return a9.n128_f64[0];
                }
              }
              *v788 = 0;
            }
            *(_DWORD *)v808 = 0;
            *(_QWORD *)&v808[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v808[16] = a1;
            *(_QWORD *)(a1 + 7496) = v808;
            v169 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v808);
            *(_QWORD *)(*(_QWORD *)&v808[16] + 7496) = *(_QWORD *)&v808[8];
            if (!v169)
            {
              if (*v23 != 20 && (*v23 & 0x100000) == 0)
              {
                if (!*v796)
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the right hand side of an assignment expression");
                return a9.n128_f64[0];
              }
LABEL_699:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              return a9.n128_f64[0];
            }
            v108 = v169;
            v117 = v10->i32[0];
            ++v113;
            v114 = 1;
            v112 = v798;
            if (v798 == v10->i32[0])
              continue;
            if (*v23 >= 21 && *v23 <= 0x24)
            {
LABEL_564:
              if (!*v796)
              {
                *(_QWORD *)v808 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
                *(_QWORD *)&v808[8] = v605;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::StringView,char const(&)[22]>(a1, (uint64_t)v808);
              }
              return a9.n128_f64[0];
            }
LABEL_204:
            v10->i32[0] = v117 + 1;
LABEL_142:
            if (v113)
            {
              v170 = *((_DWORD *)a2 + 135);
              AssignNode = (_QWORD *)v108;
              do
              {
                v172 = *(_DWORD *)v806;
                v173 = v170 - 1;
                v174 = *(_QWORD *)v115;
                v175 = (uint64_t *)(*(_QWORD *)v115 + 40 * v173);
                if (*v175 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*v175 + 336))(*v175, *a2))
                  *((_DWORD *)a2 + 6) |= 2u;
                v176 = *v175;
                v177 = v174 + 40 * v173;
                v178 = *(unsigned __int8 *)(v177 + 36);
                v180 = *(_DWORD *)(v177 + 28);
                v179 = *(_DWORD *)(v177 + 32);
                *(_DWORD *)v808 = *(_DWORD *)(v177 + 20);
                *(_DWORD *)&v808[4] = *(_DWORD *)(v177 + 24) + 1;
                *(_DWORD *)&v808[8] = v180;
                AssignNode = (_QWORD *)JSC::ASTBuilder::makeAssignNode((uint64_t)a2, (uint64_t)&v816, v176, v178, AssignNode, v179 != v790, v179 != v172, v177 + 8, (uint64_t)v808, v805.i64[0]);
                v170 = *((_DWORD *)a2 + 135) - 1;
                *((_DWORD *)a2 + 135) = v170;
                --v113;
              }
              while (v113);
            }
            break;
          default:
            v117 = v112;
            if ((v114 & 1) == 0)
              goto LABEL_142;
            goto LABEL_204;
        }
        return a9.n128_f64[0];
      }
    }
    *(_OWORD *)v808 = *(_OWORD *)v806;
    *(_OWORD *)&v808[20] = *v772;
    *(_OWORD *)&v808[34] = *(_OWORD *)((char *)v772 + 14);
    v453.i64[1] = *(_QWORD *)&v808[42];
    *(int32x2_t *)v453.i8 = v10[13];
    v454 = *(_QWORD *)(a1 + 7288);
    *(_QWORD *)&v14 = *(_QWORD *)v454;
    v455 = *(_BYTE *)(v454 + 56);
    v805 = v453;
    v807 = v14;
    v453.i64[1] = v14;
    *(int32x4_t *)&v808[56] = vrev64q_s32(v453);
    v809 = v455;
    v456 = *(_BYTE *)(v454 + 150);
    v810 = v456;
    v457 = *(WTF::StringImpl **)(v454 + 152);
    if (v457)
      *(_DWORD *)v457 += 2;
    v811 = v457;
    v458 = *v796;
    if (*v796)
      *(_DWORD *)v458 += 2;
    v812 = v458;
    *(_DWORD *)&v808[16] = v786;
    *(_BYTE *)(v454 + 150) = 0;
    v459 = *(WTF::StringImpl **)(v454 + 152);
    *(_QWORD *)(v454 + 152) = 0;
    if (v459)
    {
      if (*(_DWORD *)v459 == 2)
      {
        WTF::StringImpl::~StringImpl(v459, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v561, v562, v563, v564, v565, v566, v567, v568);
      }
      else
      {
        *(_DWORD *)v459 -= 2;
      }
    }
    v460 = *(_QWORD *)(v454 + 88);
    v461 = *(_QWORD *)(v454 + 96);
    v462 = v773;
    v463 = (char *)(v460 + v774);
    *(_QWORD *)(v454 + 80) = v460 + v774;
    *(_QWORD *)(v454 + 112) = v460 + v462;
    *(_DWORD *)(v454 + 20) = 0;
    *(_DWORD *)(v454 + 36) = 0;
    if ((unint64_t)v463 >= v461)
      v464 = 0;
    else
      v464 = *v463;
    *(_BYTE *)(v454 + 176) = v464;
    v465 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v465 = v776;
    *(_BYTE *)(v465 + 56) = v775;
    v466 = *(_DWORD *)(a1 + 7400);
    v467 = *(_DWORD *)(a1 + 7412);
    v468 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v466;
    *(_DWORD *)(a1 + 7448) = v467;
    *(_DWORD *)(a1 + 7452) = v468;
    *(_DWORD *)(v465 + 4) = v466;
    v469 = *(_DWORD *)(a1 + 12);
    if (!v469)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA69B4);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v465, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v469 - 1) + 9) & 1, a5, a6, a7, a8);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v777;
    *(_OWORD *)v806 = v815;
    v477 = v786;
    *(_DWORD *)(a1 + 7312) = v786;
    *(_DWORD *)(a1 + 7316) = v780;
    v478 = v788;
    *(_OWORD *)v788 = v813;
    v478[2] = v814;
    v10[5].i8[4] = v779;
    v10[5].i8[5] = v778;
    *((_DWORD *)a2 + 263) = v477;
    v479 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v479)
    {
      if (*(_DWORD *)v479 == 2)
      {
        WTF::StringImpl::~StringImpl(v479, v470, v471, v472, v473, v474, v475, v476);
        WTF::fastFree(v569, v570, v571, v572, v573, v574, v575, v576);
      }
      else
      {
        *(_DWORD *)v479 -= 2;
      }
    }
    v480 = JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(a1, (uint64_t)a2);
    v488 = v480;
    if (*v784 == 1)
    {
      if (v480 && *v23 == 21)
      {
LABEL_458:
        v490 = *(_DWORD *)(a1 + 7400);
        v491 = *(_DWORD *)(a1 + 7412);
        v492 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v490;
        *(_DWORD *)(a1 + 7448) = v491;
        *(_DWORD *)(a1 + 7452) = v492;
        v493 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v493 + 4) = v490;
        v494 = *(_DWORD *)(a1 + 12);
        if (!v494)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA69BCLL);
        }
        v495 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v494 - 1) + 9) & 1;
        *(_BYTE *)(v493 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v493, a1 + 7368, 0, v495, v484, v485, v486, v487);
        *(_DWORD *)v830 = 0;
        *(_QWORD *)&v830[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v830[16] = a1;
        *(_QWORD *)(a1 + 7496) = v830;
        v496 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v830);
        *(_QWORD *)(*(_QWORD *)&v830[16] + 7496) = *(_QWORD *)&v830[8];
        if (v496)
        {
          v497 = v496;
          v498 = (JSC::ParserArena *)a2[1];
          v499 = *(_QWORD *)v498;
          if (*((_QWORD *)v498 + 1) - *(_QWORD *)v498 <= 0x2FuLL)
          {
            JSC::ParserArena::allocateFreeablePool(v498);
            v499 = *(_QWORD *)v498;
          }
          *(_QWORD *)v498 = v499 + 48;
          *(_DWORD *)(v499 + 8) = v816;
          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v816 + 4));
          *(_QWORD *)(v499 + 12) = a9.n128_u64[0];
          *(_DWORD *)(v499 + 20) = -1;
          *(_BYTE *)(v499 + 24) = 0;
          *(_BYTE *)(v499 + 25) = 126;
          *(_BYTE *)(v499 + 26) = 0;
          *(_QWORD *)v499 = &off_1E358B880;
          *(_QWORD *)(v499 + 32) = v488;
          *(_QWORD *)(v499 + 40) = v497;
        }
        else if (!*v796)
        {
          a9.n128_u64[0] = (unint64_t)JSC::ASTBuilder::createDestructuringAssignment((JSC::ParserArena *)a2[1], (uint64_t)&v816, v488);
        }
      }
      else
      {
        JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v805.u32[1], v805.u32[0], v483, v484, v485, v486, v487);
        v638 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v638 = v807;
        *(_BYTE *)(v638 + 56) = v455;
        v639 = *(_DWORD *)(a1 + 7400);
        v640 = *(_DWORD *)(a1 + 7412);
        v641 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v639;
        *(_DWORD *)(a1 + 7448) = v640;
        *(_DWORD *)(a1 + 7452) = v641;
        *(_DWORD *)(v638 + 4) = v639;
        v642 = *(_DWORD *)(a1 + 12);
        if (!v642)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA69C4);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v638, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v642 - 1) + 9) & 1, v634, v635, v636, v637);
        v643 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v643 + 4) = DWORD1(v807);
        v644 = (_OWORD *)v806;
        *(_WORD *)(v806 + 48) = *(_WORD *)&v808[48];
        v645 = *(_OWORD *)&v808[32];
        v646 = *(_OWORD *)v808;
        v644[1] = *(_OWORD *)&v808[16];
        v644[2] = v645;
        *v644 = v646;
        *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
        *(_BYTE *)(v643 + 150) = v456;
        JSC::Lexer<unsigned char>::setErrorMessage(v643, (WTF::AtomStringImpl *)&v811, v647, v648, v649, v650, v651, v652);
        WTF::String::operator=((unint64_t *)v796, (WTF::AtomStringImpl *)&v812, v653, v654, v655, v656, v657, v658);
        v458 = v812;
      }
    }
    else
    {
      v489 = *v23;
      if (v480)
      {
        if (v489 == 21)
          goto LABEL_458;
        if (v489 != 20 && (v489 & 0x100000) == 0)
        {
          if (!*v796)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected '=' following assignment pattern");
          goto LABEL_463;
        }
      }
      else if (v489 != 20 && (v489 & 0x100000) == 0)
      {
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse assignment pattern");
        goto LABEL_463;
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
LABEL_463:
    v812 = 0;
    if (v458)
    {
      if (*(_DWORD *)v458 == 2)
      {
        WTF::StringImpl::~StringImpl(v458, v481, v482, v483, v484, v485, v486, v487);
        WTF::fastFree(v577, v578, v579, v580, v581, v582, v583, v584);
      }
      else
      {
        *(_DWORD *)v458 -= 2;
      }
    }
    v500 = v811;
    v811 = 0;
    if (v500)
    {
      if (*(_DWORD *)v500 == 2)
      {
        WTF::StringImpl::~StringImpl(v500, v481, v482, v483, v484, v485, v486, v487);
        WTF::fastFree(v585, v586, v587, v588, v589, v590, v591, v592);
      }
      else
      {
        *(_DWORD *)v500 -= 2;
      }
    }
    return a9.n128_f64[0];
  }
  v811 = 0;
  v812 = 0;
  v266 = (__int128 *)v806;
  *(_OWORD *)v808 = *(_OWORD *)v806;
  *(_DWORD *)&v808[16] = *((_DWORD *)a2 + 263);
  *(_OWORD *)&v808[20] = *v772;
  *(_OWORD *)&v808[34] = *(_OWORD *)((char *)v772 + 14);
  *(int32x2_t *)v267.i8 = v10[13];
  v268 = *(_QWORD *)(a1 + 7288);
  v269 = *(_BYTE *)(v268 + 56);
  v267.i64[1] = *(_QWORD *)v268;
  *(int32x4_t *)&v808[56] = vrev64q_s32(v267);
  v809 = v269;
  v810 = *(_BYTE *)(v268 + 150);
  v270 = *(WTF::StringImpl **)(v268 + 152);
  if (v270)
    *(_DWORD *)v270 += 2;
  v811 = v270;
  v271 = *v796;
  if (*v796)
    *(_DWORD *)v271 += 2;
  v812 = v271;
  *(_DWORD *)&v808[16] = v786;
  *(_BYTE *)(v268 + 150) = 0;
  v272 = *(WTF::StringImpl **)(v268 + 152);
  *(_QWORD *)(v268 + 152) = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v421, v422, v423, v424, v425, v426, v427, v428);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v273 = *(_QWORD *)(v268 + 88);
  v274 = *(_QWORD *)(v268 + 96);
  v275 = v773;
  v276 = (char *)(v273 + v774);
  *(_QWORD *)(v268 + 80) = v273 + v774;
  *(_QWORD *)(v268 + 112) = v273 + v275;
  *(_DWORD *)(v268 + 20) = 0;
  *(_DWORD *)(v268 + 36) = 0;
  if ((unint64_t)v276 >= v274)
    v277 = 0;
  else
    v277 = *v276;
  *(_BYTE *)(v268 + 176) = v277;
  v278 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v278 = v776;
  *(_BYTE *)(v278 + 56) = v775;
  v279 = *(_DWORD *)(a1 + 7400);
  v280 = *(_DWORD *)(a1 + 7412);
  v281 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v279;
  *(_DWORD *)(a1 + 7448) = v280;
  *(_DWORD *)(a1 + 7452) = v281;
  *(_DWORD *)(v278 + 4) = v279;
  v282 = *(_DWORD *)(a1 + 12);
  if (!v282)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA68ECLL);
  }
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v278, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v282 - 1) + 9) & 1, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v777;
  *v266 = v815;
  v286 = v786;
  *(_DWORD *)(a1 + 7312) = v786;
  *(_DWORD *)(a1 + 7316) = v780;
  v287 = v788;
  *(_OWORD *)v788 = v813;
  v287[2] = v814;
  v10[5].i8[4] = v779;
  v10[5].i8[5] = v778;
  *((_DWORD *)a2 + 263) = v286;
  v288 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
    {
      WTF::StringImpl::~StringImpl(v288, v283, v284, v285, a5, a6, a7, a8);
      WTF::fastFree(v429, v430, v431, v432, v433, v434, v435, v436);
    }
    else
    {
      *(_DWORD *)v288 -= 2;
    }
  }
  v289 = *v23;
  if (*v784 != 2)
  {
    LODWORD(v803) = 0;
    goto LABEL_329;
  }
  if (v289 == 12)
  {
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
      && !v10[10].i8[4])
    {
      v748 = *(_DWORD *)(a1 + 7400);
      v749 = *(_DWORD *)(a1 + 7412);
      v750 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v748;
      *(_DWORD *)(a1 + 7448) = v749;
      *(_DWORD *)(a1 + 7452) = v750;
      v751 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v751 + 4) = v748;
      v752 = *(_DWORD *)(a1 + 12);
      if (!v752)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA69ECLL);
      }
      v753 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v752 - 1) + 9) & 1;
      *(_BYTE *)(v751 + 56) = 0;
      v289 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v751, a1 + 7368, 0, v753, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v289;
      LODWORD(v803) = 1;
      goto LABEL_654;
    }
    LODWORD(v803) = 0;
    v266 = (__int128 *)v806;
    goto LABEL_373;
  }
  LODWORD(v803) = 0;
LABEL_654:
  v266 = (__int128 *)v806;
LABEL_329:
  if (v289 != 2)
  {
    if (v289 == 12)
      goto LABEL_373;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v289, *(_QWORD **)(a1 + 7376));
    v607 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet)
      goto LABEL_824;
    if (v607 == 546)
      goto LABEL_572;
    if (v607 == 545)
      goto LABEL_794;
    if (v607 != 1048592)
      goto LABEL_577;
    v762 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v763 = **(_QWORD **)(a1 + 7376);
    if (v763 == *(_QWORD *)(v762 + 496))
    {
LABEL_794:
      v764 = *(_DWORD *)(a1 + 12);
      if (!v764)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA69F4);
      }
      v765 = v764 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v765 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v765 + 11) & 2) == 0)
      {
LABEL_824:
        if (v607 != 546
          && (v607 != 1048592
           || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
        {
          v266 = (__int128 *)v806;
LABEL_373:
          v836 = *v266;
          LODWORD(v804) = *(_DWORD *)(a1 + 7316);
          *(_OWORD *)v830 = *(_OWORD *)v788;
          *(_QWORD *)&v830[16] = v788[2];
          LODWORD(v801) = v10[5].u8[4];
          LODWORD(v800) = v10[5].u8[5];
          LODWORD(v799) = *((_DWORD *)a2 + 263);
          v793 = *(int *)(a1 + 7408);
          v332 = *(int *)(a1 + 7404);
          v333 = *(_QWORD *)(a1 + 7288);
          v334 = *(_DWORD *)v333;
          v797 = *(_DWORD *)(v333 + 4);
          v794 = *(unsigned __int8 *)(v333 + 56);
          v795 = v334;
          v335 = *(_DWORD *)(a1 + 7400);
          v336 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v335;
          *(_DWORD *)(a1 + 7448) = v336;
          *(_DWORD *)(a1 + 7452) = v332;
          *(_DWORD *)(v333 + 4) = v335;
          v337 = *(_DWORD *)(a1 + 12);
          if (!v337)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA6924);
          }
          v338 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v337 - 1) + 9) & 1;
          *(_BYTE *)(v333 + 56) = 0;
          v346 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v333, a1 + 7368, 0, v338, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v346;
          v347 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v347 + 150) = 0;
          v348 = *(WTF::StringImpl **)(v347 + 152);
          *(_QWORD *)(v347 + 152) = 0;
          if (v348)
          {
            if (*(_DWORD *)v348 == 2)
            {
              WTF::StringImpl::~StringImpl(v348, v339, v340, v341, v342, v343, v344, v345);
              WTF::fastFree(v523, v524, v525, v526, v527, v528, v529, v530);
            }
            else
            {
              *(_DWORD *)v348 -= 2;
            }
          }
          v349 = *(_QWORD *)(v347 + 88);
          v350 = *(_QWORD *)(v347 + 96);
          v351 = (char *)(v349 + v793);
          *(_QWORD *)(v347 + 80) = v349 + v793;
          *(_QWORD *)(v347 + 112) = v349 + v332;
          *(_DWORD *)(v347 + 20) = 0;
          *(_DWORD *)(v347 + 36) = 0;
          if ((unint64_t)v351 >= v350)
            v352 = 0;
          else
            v352 = *v351;
          v353 = v802;
          *(_BYTE *)(v347 + 176) = v352;
          v354 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v354 = v795;
          *(_BYTE *)(v354 + 56) = v794;
          v355 = *(_DWORD *)(a1 + 7400);
          v356 = *(_DWORD *)(a1 + 7412);
          v357 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v355;
          *(_DWORD *)(a1 + 7448) = v356;
          *(_DWORD *)(a1 + 7452) = v357;
          *(_DWORD *)(v354 + 4) = v355;
          v358 = *(_DWORD *)(a1 + 12);
          if (!v358)
          {
            __break(0xC471u);
            JUMPOUT(0x197EA692CLL);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v354, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v358 - 1) + 9) & 1, v342, v343, v344, v345);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v797;
          *(_OWORD *)v806 = v836;
          v359 = (int)v799;
          *(_DWORD *)(a1 + 7312) = (_DWORD)v799;
          *(_DWORD *)(a1 + 7316) = v804;
          a9.n128_u64[0] = *(_QWORD *)v830;
          v360 = v788;
          *(_OWORD *)v788 = *(_OWORD *)v830;
          v360[2] = *(_QWORD *)&v830[16];
          v10[5].i8[4] = (char)v801;
          v10[5].i8[5] = (char)v800;
          *((_DWORD *)a2 + 263) = v359;
          v361 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v361)
          {
            if (*(_DWORD *)v361 == 2)
            {
              WTF::StringImpl::~StringImpl(v361, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
            }
            else
            {
              *(_DWORD *)v361 -= 2;
            }
          }
          if (v346 != 38)
            goto LABEL_577;
LABEL_402:
          if (v353 == 2)
          {
            v399 = *(_DWORD *)(a1 + 12);
            if (!v399)
            {
              __break(0xC471u);
              JUMPOUT(0x197EA6904);
            }
            v400 = v399 - 1;
            v401 = *(_QWORD *)a1 + 720 * v400;
            v404 = *(_DWORD *)(v401 + 180);
            v403 = (_DWORD *)(v401 + 180);
            v402 = v404;
            v405 = (uint64_t *)(v403 - 3);
            v406 = v785 == v404;
            if (v785 > v404)
            {
              if (v785 > *(unsigned int *)(*(_QWORD *)a1 + 720 * v400 + 176))
                WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v403 - 3), (void *)v785, a3, a4, a5, a6, a7, a8);
              v743 = *v405;
              if (*v405)
              {
                v744 = *v403;
                if (v785 != v744)
                {
                  v745 = v743 + 72 * v785;
                  v746 = v743 + 72 * v744;
                  *(_QWORD *)&v747 = -1;
                  *((_QWORD *)&v747 + 1) = -1;
                  do
                  {
                    *(_QWORD *)v746 = 0x800000000;
                    *(_OWORD *)(v746 + 8) = v747;
                    *(_OWORD *)(v746 + 24) = v747;
                    *(_OWORD *)(v746 + 40) = v747;
                    *(_OWORD *)(v746 + 56) = v747;
                    v746 += 72;
                  }
                  while (v746 != v745);
                }
              }
            }
            else if (!v406)
            {
              v407 = 72 * v402 - 72 * v785;
              v408 = (unint64_t *)(*v405 + 72 * v785 + 8);
              do
              {
                if (*((_DWORD *)v408 - 1) != 8)
                  WTF::fastFree(*v408, a2, a3, a4, a5, a6, a7, a8);
                v408 += 9;
                v407 -= 72;
              }
              while (v407);
            }
            *v403 = v785;
          }
          memset(&v830[8], 0, 36);
          *(_QWORD *)v830 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          if ((_DWORD)v803)
            v409 = 11;
          else
            v409 = 6;
          v410 = v10[21].i8[6];
          v10[21].i8[6] = v409;
          if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, (WTF::StringImpl *)a2, 2, 1, 0, 1, SDWORD2(v816), (uint64_t **)v830, 0, 0) & 1) != 0)
          {
            JSC::ASTBuilder::createArrowFunctionExpr((uint64_t)a2, (uint64_t)&v816, (uint64_t)v830, a4, a5, a6, a7, a8);
          }
          else if (*v23 == 20 || (*v23 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*v796)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse arrow function expression");
          }
          v411 = 0;
          v10[21].i8[6] = v410;
          goto LABEL_417;
        }
LABEL_572:
        if (!v10[5].i8[4])
          goto LABEL_892;
        v608 = *(_DWORD *)(a1 + 12);
        if (!v608)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA69CCLL);
        }
        v266 = (__int128 *)v806;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v608 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_892:
          if (!*v796)
          {
            *(_QWORD *)v830 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],char const*>(a1, (const char **)v830);
          }
          goto LABEL_577;
        }
        goto LABEL_373;
      }
      if (v607 != 1048592)
        goto LABEL_577;
      v762 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v763 = **(_QWORD **)(a1 + 7376);
    }
    if (v763 != *(_QWORD *)(v762 + 128))
      goto LABEL_577;
    goto LABEL_572;
  }
  *(_OWORD *)v823 = *v266;
  v290 = *(_DWORD *)(a1 + 7316);
  v836 = *(_OWORD *)v788;
  *(_QWORD *)v837 = v788[2];
  v291 = v10[5].u8[4];
  LODWORD(v799) = v10[5].u8[5];
  v797 = *((_DWORD *)a2 + 263);
  v792 = *(int *)(a1 + 7408);
  v292 = *(int *)(a1 + 7404);
  v293 = *(_QWORD *)(a1 + 7288);
  v294 = *(_DWORD *)(v293 + 4);
  v794 = *(_DWORD *)v293;
  v795 = v294;
  LODWORD(v793) = *(unsigned __int8 *)(v293 + 56);
  v295 = *(_DWORD *)(a1 + 7400);
  v296 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v295;
  *(_DWORD *)(a1 + 7448) = v296;
  *(_DWORD *)(a1 + 7452) = v292;
  *(_DWORD *)(v293 + 4) = v295;
  v297 = *(_DWORD *)(a1 + 12);
  if (!v297)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA68F4);
  }
  v298 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v297 - 1) + 9) & 1;
  *(_BYTE *)(v293 + 56) = 0;
  v299 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v293, a1 + 7368, 0, v298, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v299;
  LODWORD(v801) = v290;
  LODWORD(v800) = v291;
  if (v299 == 3)
  {
    v414 = *(_DWORD *)(a1 + 7400);
    v415 = *(_DWORD *)(a1 + 7412);
    v416 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v414;
    *(_DWORD *)(a1 + 7448) = v415;
    *(_DWORD *)(a1 + 7452) = v416;
    v417 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v417 + 4) = v414;
    v418 = *(_DWORD *)(a1 + 12);
    if (!v418)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA6954);
    }
    v419 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v418 - 1) + 9) & 1;
    *(_BYTE *)(v417 + 56) = 0;
    v420 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v417, a1 + 7368, 0, v419, v300, v301, v302, v303);
    *(_DWORD *)(a1 + 7368) = v420;
    v369 = v420 == 38;
LABEL_392:
    v385 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v385 + 150) = 0;
    v386 = *(WTF::StringImpl **)(v385 + 152);
    *(_QWORD *)(v385 + 152) = 0;
    if (v386)
    {
      if (*(_DWORD *)v386 == 2)
      {
        WTF::StringImpl::~StringImpl(v386, v384, v378, v379, v380, v381, v382, v383);
        WTF::fastFree(v501, v502, v503, v504, v505, v506, v507, v508);
      }
      else
      {
        *(_DWORD *)v386 -= 2;
      }
    }
    v387 = *(_QWORD *)(v385 + 88);
    v388 = *(_QWORD *)(v385 + 96);
    v389 = (char *)(v387 + v792);
    *(_QWORD *)(v385 + 80) = v387 + v792;
    *(_QWORD *)(v385 + 112) = v387 + v292;
    *(_DWORD *)(v385 + 20) = 0;
    *(_DWORD *)(v385 + 36) = 0;
    if ((unint64_t)v389 >= v388)
      v390 = 0;
    else
      v390 = *v389;
    v353 = v802;
    *(_BYTE *)(v385 + 176) = v390;
    v391 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v391 = v794;
    *(_BYTE *)(v391 + 56) = v793;
    v392 = *(_DWORD *)(a1 + 7400);
    v393 = *(_DWORD *)(a1 + 7412);
    v394 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v392;
    *(_DWORD *)(a1 + 7448) = v393;
    *(_DWORD *)(a1 + 7452) = v394;
    *(_DWORD *)(v391 + 4) = v392;
    v395 = *(_DWORD *)(a1 + 12);
    if (!v395)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA68FCLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v391, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v395 - 1) + 9) & 1, v380, v381, v382, v383);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v795;
    *(_OWORD *)v806 = *(_OWORD *)v823;
    v396 = v797;
    *(_DWORD *)(a1 + 7312) = v797;
    *(_DWORD *)(a1 + 7316) = (_DWORD)v801;
    a9.n128_u64[0] = v836;
    v397 = v788;
    *(_OWORD *)v788 = v836;
    v397[2] = *(_QWORD *)v837;
    v10[5].i8[4] = (char)v800;
    v10[5].i8[5] = (char)v799;
    *((_DWORD *)a2 + 263) = v396;
    v398 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v398)
    {
      if (*(_DWORD *)v398 == 2)
      {
        WTF::StringImpl::~StringImpl(v398, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v509, v510, v511, v512, v513, v514, v515, v516);
      }
      else
      {
        *(_DWORD *)v398 -= 2;
      }
    }
    if (!v369)
      goto LABEL_577;
    goto LABEL_402;
  }
  v822.n128_u64[0] = *(_QWORD *)(a1 + 7216);
  v304 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  *(_QWORD *)&v834 = v304;
  *((_QWORD *)&v834 + 1) = v305;
  *(_QWORD *)&v835[0] = a1;
  if (*(_DWORD *)(v304 + 12) <= v305)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA6944);
  }
  *(_DWORD *)(*(_QWORD *)v304 + 720 * v305 + 10) = *(_DWORD *)(*(_QWORD *)v304
                                                                             + 720 * v305
                                                                             + 10) & 0xFE8F007F | 0x1409980;
  v310 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v310)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA694CLL);
  }
  if ((_DWORD)v310 != 1)
  {
    v311 = v310 - 1;
    v312 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v310 - 1) + 10) & 0x400000) != 0)
    {
      v313 = 720 * v310;
      while (1)
      {
        v314 = v313 - 720;
        if (v313 == 720)
          break;
        v315 = *(_BYTE *)(v312 + v313 - 1428);
        v313 -= 720;
        if ((v315 & 0x40) != 0)
        {
          if (*(_BYTE *)(v312 + v314 - 712) != 2)
            *(_BYTE *)(v312 + 720 * v311 + 8) = 0;
          break;
        }
      }
    }
  }
  v316 = 0;
  v819 = 0;
  *(_QWORD *)v830 = 0;
  v317 = *v23;
  while (2)
  {
    if (v317 == 37)
    {
      v804 = v108;
      v677 = *(_DWORD *)(a1 + 7400);
      v678 = *(_DWORD *)(a1 + 7412);
      v679 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v677;
      *(_DWORD *)(a1 + 7448) = v678;
      *(_DWORD *)(a1 + 7452) = v679;
      v680 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v680 + 4) = v677;
      v681 = *(_DWORD *)(a1 + 12);
      if (!v681)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA6934);
      }
      v682 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v681 - 1) + 9) & 1;
      *(_BYTE *)(v680 + 56) = 0;
      v683 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v680, a1 + 7368, 0, v682, v306, v307, v308, v309);
      *(_DWORD *)(a1 + 7368) = v683;
      if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v683, *(_QWORD **)(a1 + 7376)))
      {
        v108 = v804;
        if (!*v796)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
        goto LABEL_757;
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)&v822, 4uLL, (WTF::AtomStringImpl **)v830, &v819, 0, v308, v309);
      v108 = v804;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_757;
      if (*v23 == 6)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        v108 = v804;
        goto LABEL_757;
      }
      v321 = 0;
      LODWORD(v322) = 1;
      v108 = v804;
    }
    else
    {
      if (v317 == 3)
        goto LABEL_386;
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)&v822, 4uLL, (WTF::AtomStringImpl **)v830, &v819, 0, v308, v309))
      {
        if (*v23 == 20 || (*v23 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*v796)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_757;
      }
      v321 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, &v822, v319, v320, v306, v307, v308, v309);
      if (v321)
        v316 = 1;
      v322 = (unint64_t)*v796;
      if (*v796)
        goto LABEL_757;
    }
    if (*(_QWORD *)v830)
    {
      if ((v316 & 1) != 0)
      {
        v820 = **(_QWORD **)v830;
        v766 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v819)
        {
          v820 = **(_QWORD **)v830;
          if ((_DWORD)v322)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, &v820);
          else
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, &v820);
          goto LABEL_757;
        }
        v820 = **(_QWORD **)v830;
        v766 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, &v820, v766);
      goto LABEL_757;
    }
    if (v321)
      v323 = 1;
    else
      v323 = v322;
    if ((v323 & 1) != 0 || v819)
    {
      v539 = *(_DWORD *)(a1 + 12);
      if (!v539)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA693CLL);
      }
      v540 = *(_QWORD *)a1 + 720 * (v539 - 1);
      *(_DWORD *)(v540 + 10) = *(_DWORD *)(v540 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if (*v23 != 6)
      LOBYTE(v322) = 1;
    if ((v322 & 1) == 0)
    {
      v324 = *(_DWORD *)(a1 + 7400);
      v325 = *(_DWORD *)(a1 + 7412);
      v326 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v324;
      *(_DWORD *)(a1 + 7448) = v325;
      *(_DWORD *)(a1 + 7452) = v326;
      v327 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v327 + 4) = v324;
      v328 = *(_DWORD *)(a1 + 12);
      if (!v328)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA6888);
      }
      v329 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v328 - 1) + 9) & 1;
      *(_BYTE *)(v327 + 56) = 0;
      v317 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v327, a1 + 7368, 0, v329, v306, v307, v308, v309);
      *(_DWORD *)(a1 + 7368) = v317;
      continue;
    }
    break;
  }
  if (*v23 != 3)
  {
LABEL_757:
    v369 = 0;
    goto LABEL_388;
  }
LABEL_386:
  v362 = *(_DWORD *)(a1 + 7400);
  v363 = *(_DWORD *)(a1 + 7412);
  v364 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v362;
  *(_DWORD *)(a1 + 7448) = v363;
  *(_DWORD *)(a1 + 7452) = v364;
  v365 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v365 + 4) = v362;
  v366 = *(_DWORD *)(a1 + 12);
  if (!v366)
  {
    __break(0xC471u);
    JUMPOUT(0x197EA695CLL);
  }
  v367 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v366 - 1) + 9) & 1;
  *(_BYTE *)(v365 + 56) = 0;
  v368 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v365, a1 + 7368, 0, v367, v306, v307, v308, v309);
  *(_DWORD *)(a1 + 7368) = v368;
  v369 = v368 == 38;
LABEL_388:
  if (!*v796)
  {
    *(_QWORD *)&v835[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v825, (uint64_t *)a1, 0, v320, v306, v307, v308, v309);
    v377 = *(_QWORD *)&v826[8];
    if (*(_QWORD *)&v826[8])
    {
      *(_QWORD *)&v826[8] = 0;
      *(_DWORD *)&v826[16] = 0;
      WTF::fastFree(v377, v370, v371, v372, v373, v374, v375, v376);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v825, (WTF::AtomStringImpl *)v370, v371, v372, v373, v374, v375, v376);
    v384 = *(WTF::AtomStringImpl **)&v835[0];
    if (*(_QWORD *)&v835[0])
    {
      *(_QWORD *)&v835[0] = 0;
      JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v830, (uint64_t *)v384, 0, v379, v380, v381, v382, v383);
      v761 = *(_QWORD *)&v830[24];
      if (*(_QWORD *)&v830[24])
      {
        *(_QWORD *)&v830[24] = 0;
        *(_DWORD *)&v830[32] = 0;
        WTF::fastFree(v761, v754, v755, v756, v757, v758, v759, v760);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v830, (WTF::AtomStringImpl *)v754, v755, v756, v757, v758, v759, v760);
    }
    goto LABEL_392;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)&v834, v318, v319, v320, v306, v307, v308, v309);
LABEL_577:
  if (v110 == 38)
  {
    if (!*v796)
    {
      JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v808[56], *(unsigned int *)&v808[60], a4, a5, a6, a7, a8);
      v613 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v613 = *(_DWORD *)&v808[68];
      *(_BYTE *)(v613 + 56) = v809;
      v614 = *(_DWORD *)(a1 + 7400);
      v615 = *(_DWORD *)(a1 + 7412);
      v616 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v614;
      *(_DWORD *)(a1 + 7448) = v615;
      *(_DWORD *)(a1 + 7452) = v616;
      *(_DWORD *)(v613 + 4) = v614;
      v617 = *(_DWORD *)(a1 + 12);
      if (!v617)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA69DCLL);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v613, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v617 - 1) + 9) & 1, v609, v610, v611, v612);
      v618 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v618 + 4) = *(_DWORD *)&v808[64];
      v619 = (_OWORD *)v806;
      *(_WORD *)(v806 + 48) = *(_WORD *)&v808[48];
      v620 = *(_OWORD *)&v808[32];
      v621 = *(_OWORD *)v808;
      v619[1] = *(_OWORD *)&v808[16];
      v619[2] = v620;
      *v619 = v621;
      *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
      *(_BYTE *)(v618 + 150) = v810;
      JSC::Lexer<unsigned char>::setErrorMessage(v618, (WTF::AtomStringImpl *)&v811, v622, v623, v624, v625, v626, v627);
      WTF::String::operator=((unint64_t *)v796, (WTF::AtomStringImpl *)&v812, v628, v629, v630, v631, v632, v633);
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    v411 = 0;
  }
  else
  {
    JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v808[56], *(unsigned int *)&v808[60], a4, a5, a6, a7, a8);
    v689 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v689 = *(_DWORD *)&v808[68];
    *(_BYTE *)(v689 + 56) = v809;
    v690 = *(_DWORD *)(a1 + 7400);
    v691 = *(_DWORD *)(a1 + 7412);
    v692 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v690;
    *(_DWORD *)(a1 + 7448) = v691;
    *(_DWORD *)(a1 + 7452) = v692;
    *(_DWORD *)(v689 + 4) = v690;
    v693 = *(_DWORD *)(a1 + 12);
    if (!v693)
    {
      __break(0xC471u);
      JUMPOUT(0x197EA69D4);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v689, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v693 - 1) + 9) & 1, v685, v686, v687, v688);
    v694 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v694 + 4) = *(_DWORD *)&v808[64];
    v695 = (_OWORD *)v806;
    *(_WORD *)(v806 + 48) = *(_WORD *)&v808[48];
    v696 = *(_OWORD *)&v808[32];
    v697 = *(_OWORD *)v808;
    v695[1] = *(_OWORD *)&v808[16];
    v695[2] = v696;
    *v695 = v697;
    *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
    *(_BYTE *)(v694 + 150) = v810;
    JSC::Lexer<unsigned char>::setErrorMessage(v694, (WTF::AtomStringImpl *)&v811, v698, v699, v700, v701, v702, v703);
    WTF::String::operator=((unint64_t *)v796, (WTF::AtomStringImpl *)&v812, v704, v705, v706, v707, v708, v709);
    v411 = 1;
  }
LABEL_417:
  v412 = v812;
  v812 = 0;
  v103 = v802;
  if (v412)
  {
    if (*(_DWORD *)v412 == 2)
    {
      WTF::StringImpl::~StringImpl(v412, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v437, v438, v439, v440, v441, v442, v443, v444);
    }
    else
    {
      *(_DWORD *)v412 -= 2;
    }
  }
  v413 = v811;
  v811 = 0;
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
    {
      WTF::StringImpl::~StringImpl(v413, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v445, v446, v447, v448, v449, v450, v451, v452);
    }
    else
    {
      *(_DWORD *)v413 -= 2;
    }
  }
  if (v411)
    goto LABEL_134;
  return a9.n128_f64[0];
}

double JSC::Parser<JSC::Lexer<unsigned char>>::parseYieldExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char *v60;
  _OWORD *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v97;
  int v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v10 + 10) & 0x1200) == 0x200)
  {
    if (*(_DWORD *)(a1 + 7316))
    {
      v98 = *(_DWORD *)(a1 + 7316);
      v110 = *(_OWORD *)(a1 + 7400);
      v108 = *(_QWORD *)(a1 + 7416);
      v109 = *(_DWORD *)(a1 + 7424);
      v107 = *(_OWORD *)(a1 + 7296);
      v105 = *(_OWORD *)(a1 + 7320);
      v106 = *(_QWORD *)(a1 + 7336);
      v99 = *(_BYTE *)(a1 + 7345);
      v100 = *(_BYTE *)(a1 + 7344);
      v102 = *(_DWORD *)(a2 + 1052);
      v101 = *(int *)(a1 + 7408);
      v12 = *(int *)(a1 + 7404);
      v13 = *(_QWORD *)(a1 + 7288);
      v15 = *(_DWORD *)v13;
      v16 = *(_DWORD *)(v13 + 4);
      v17 = *(_BYTE *)(v13 + 56);
      v18 = *(_DWORD *)(a1 + 7400);
      v19 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v18;
      *(_DWORD *)(a1 + 7448) = v19;
      *(_DWORD *)(a1 + 7452) = v12;
      *(_DWORD *)(v13 + 4) = v18;
      v20 = *(_BYTE *)(v11 + 720 * v10 + 9) & 1;
      *(_BYTE *)(v13 + 56) = 0;
      v25 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v20, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v25;
      v26 = *(_QWORD *)(a1 + 7288);
      if (*(_BYTE *)(v26 + 56))
      {
LABEL_5:
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(_QWORD *)v27;
        v29 = *(_QWORD *)(v27 + 8);
        if ((unint64_t)(v29 - *(_QWORD *)v27) <= 0x4F)
        {
          if (v29)
          {
            v92 = (_QWORD *)(v27 + 24);
            v93 = v29 - 8000;
            v111 = v29 - 8000;
            v94 = *(unsigned int *)(v27 + 36);
            if ((_DWORD)v94 == *(_DWORD *)(v27 + 32))
            {
              v95 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v94 + 1, (unint64_t)&v111);
              v94 = *(unsigned int *)(v27 + 36);
              *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v94) = *v95;
            }
            else
            {
              *(_QWORD *)(*v92 + 8 * v94) = v93;
            }
            *(_DWORD *)(v27 + 36) = v94 + 1;
          }
          v28 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v27 + 8) = v28 + 8000;
        }
        *(_QWORD *)v27 = v28 + 80;
        *(_DWORD *)(v28 + 8) = v110;
        *(int32x2_t *)(v28 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v110 + 4));
        *(_DWORD *)(v28 + 20) = -1;
        *(_BYTE *)(v28 + 24) = 0;
        *(_BYTE *)(v28 + 25) = 126;
        *(_BYTE *)(v28 + 26) = 0;
        *(_QWORD *)&v30 = -1;
        *((_QWORD *)&v30 + 1) = -1;
        *(_OWORD *)(v28 + 28) = v30;
        *(_OWORD *)(v28 + 44) = v30;
        *(_DWORD *)(v28 + 60) = -1;
        *(_QWORD *)v28 = &off_1E358AD80;
        *(_QWORD *)(v28 + 64) = 0;
        *(_BYTE *)(v28 + 72) = 0;
        return *(double *)&v30;
      }
      v97 = v16;
      if (v25 == 191488)
      {
        v34 = *(_DWORD *)(a1 + 7400);
        v35 = *(_DWORD *)(a1 + 7412);
        v36 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v34;
        *(_DWORD *)(a1 + 7448) = v35;
        *(_DWORD *)(a1 + 7452) = v36;
        *(_DWORD *)(v26 + 4) = v34;
        v37 = *(_DWORD *)(a1 + 12);
        if (!v37)
        {
          __break(0xC471u);
          JUMPOUT(0x197EA6FB4);
        }
        v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1;
        *(_BYTE *)(v26 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v38, v21, v22, v23, v24);
      }
      v103 = *(_QWORD *)(a1 + 7416);
      v104 = *(_DWORD *)(a1 + 7424);
      LODWORD(v111) = 0;
      v112 = *(_QWORD *)(a1 + 7496);
      v113 = a1;
      *(_QWORD *)(a1 + 7496) = &v111;
      v39 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v111);
      *(_QWORD *)(v113 + 7496) = v112;
      if (v39)
      {
        *(_QWORD *)&v30 = JSC::ASTBuilder::createYield((JSC::ParserArena *)*(_QWORD *)(a2 + 8), (uint64_t)&v110, v39, v25 == 191488, &v108, &v103, (uint64_t *)(a1 + 7444)).n128_u64[0];
        return *(double *)&v30;
      }
      v47 = *(_QWORD *)(a1 + 7288);
      *(_BYTE *)(v47 + 150) = 0;
      v48 = *(WTF::StringImpl **)(v47 + 152);
      *(_QWORD *)(v47 + 152) = 0;
      v50 = v12;
      v49 = (_OWORD *)(a1 + 7296);
      v51 = v101;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          v50 = v12;
          v49 = (_OWORD *)(a1 + 7296);
          v51 = v101;
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      v52 = *(_QWORD *)(v47 + 88);
      v53 = *(_QWORD *)(v47 + 96);
      *(_QWORD *)(v47 + 80) = v52 + v51;
      *(_QWORD *)(v47 + 112) = v52 + v50;
      *(_DWORD *)(v47 + 20) = 0;
      *(_DWORD *)(v47 + 36) = 0;
      if (v52 + v51 >= v53)
        v54 = 0;
      else
        v54 = *(_BYTE *)(v52 + v51);
      *(_BYTE *)(v47 + 176) = v54;
      v55 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v55 = v15;
      *(_BYTE *)(v55 + 56) = v17;
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      *(_DWORD *)(v55 + 4) = v56;
      v59 = *(_DWORD *)(a1 + 12);
      if (!v59)
      {
        __break(0xC471u);
        JUMPOUT(0x197EA6FBCLL);
      }
      v60 = (char *)v49 + 24;
      v61 = v49;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v55, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v59 - 1) + 9) & 1, v43, v44, v45, v46);
      v69 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v69 + 4) = v97;
      *v61 = v107;
      *(_DWORD *)(a1 + 7312) = v102;
      *(_DWORD *)(a1 + 7316) = v98;
      *(_OWORD *)v60 = v105;
      *((_QWORD *)v60 + 2) = v106;
      *(_BYTE *)(a1 + 7344) = v100;
      *(_BYTE *)(a1 + 7345) = v99;
      *(_DWORD *)(a2 + 1052) = v102;
      v70 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          v69 = *(_QWORD *)(a1 + 7288);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
      v71 = *(_DWORD *)(a1 + 7400);
      v72 = *(_DWORD *)(a1 + 7412);
      v73 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v71;
      *(_DWORD *)(a1 + 7448) = v72;
      *(_DWORD *)(a1 + 7452) = v73;
      *(_DWORD *)(v69 + 4) = v71;
      v74 = *(_DWORD *)(a1 + 12);
      if (v74)
      {
        v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
        *(_BYTE *)(v69 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v69, a1 + 7368, 0, v75, v65, v66, v67, v68);
        goto LABEL_5;
      }
      __break(0xC471u);
LABEL_48:
      JUMPOUT(0x197EA6FACLL);
    }
    v33 = *(_DWORD *)(a1 + 7368);
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression within parameters");
      return *(double *)&v30;
    }
LABEL_11:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return *(double *)&v30;
  }
  v31 = *(_DWORD *)(a1 + 7368);
  if (v31 == 20 || (v31 & 0x100000) != 0)
    goto LABEL_11;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression out of generator");
  return *(double *)&v30;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  return JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 5, 1, 0, 0, 2, 0);
}

int32x2_t JSC::ASTBuilder::createDestructuringAssignment(JSC::ParserArena *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E358B880;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = 0;
  return result;
}

const char *JSC::Parser<JSC::Lexer<unsigned char>>::metaPropertyName<JSC::ASTBuilder>(uint64_t a1)
{
  const char *result;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return "new.target";
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) & 1) != 0)
    return "import.meta";
  result = (const char *)4150;
  __break(0xC471u);
  return result;
}

__n128 JSC::ASTBuilder::createYield(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v14) <= 0x4F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v14 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v14 + 80;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v14 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v14 + 20) = -1;
  *(_BYTE *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 25) = 126;
  *(_BYTE *)(v14 + 26) = 0;
  *(_DWORD *)(v14 + 60) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v14 + 44) = result;
  *(__n128 *)(v14 + 28) = result;
  *(_QWORD *)v14 = &off_1E358AD80;
  *(_QWORD *)(v14 + 64) = a3;
  *(_BYTE *)(v14 + 72) = a4;
  v17 = *a6;
  *(_DWORD *)(v14 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v14 + 28) = v17;
  v18 = *a5;
  *(_DWORD *)(v14 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v14 + 40) = v18;
  v19 = *a7;
  *(_DWORD *)(v14 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v14 + 52) = v19;
  return result;
}

int32x2_t JSC::ASTBuilder::createPrivateIdentifierNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v7 - v6) <= 0x27)
  {
    if (v7)
    {
      v10 = (_QWORD *)(a1 + 24);
      v11 = v7 - 8000;
      v14 = v7 - 8000;
      v12 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 32))
      {
        v13 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v12 + 1, (unint64_t)&v14);
        v12 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12) = *v13;
      }
      else
      {
        *(_QWORD *)(*v10 + 8 * v12) = v11;
      }
      *(_DWORD *)(a1 + 36) = v12 + 1;
    }
    v6 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v6 + 8000;
  }
  *(_QWORD *)a1 = v6 + 40;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E357AD60;
  *(_QWORD *)(v6 + 32) = a3;
  return result;
}

double JSC::ASTBuilder::appendBinaryOperation(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  _BYTE v18[32];
  int v19;
  _OWORD v20[3];
  _OWORD v21[3];
  _BYTE v22[48];

  ++*a3;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 944) + 8 * *(unsigned int *)(a1 + 956) - 8);
  v9 = *(_OWORD *)(a4 + 16);
  v21[0] = *(_OWORD *)a4;
  v21[1] = v9;
  v21[2] = *(_OWORD *)(a4 + 32);
  v10 = *(_OWORD *)(a5 + 16);
  v20[0] = *(_OWORD *)a5;
  v20[1] = v10;
  v20[2] = *(_OWORD *)(a5 + 32);
  JSC::ASTBuilder::makeBinaryNode(a1, a2, v8, (double **)v21, (uint64_t)v20);
  *(_QWORD *)v18 = *(_QWORD *)(a4 + 8);
  *(_DWORD *)&v18[8] = *(_DWORD *)(a4 + 16);
  *(_QWORD *)&v18[12] = *(_QWORD *)(a5 + 8);
  *(_DWORD *)&v18[20] = *(_DWORD *)(a5 + 16);
  *(_QWORD *)&v18[24] = *(_QWORD *)(a5 + 32);
  v19 = *(_DWORD *)(a5 + 40);
  if (*(_BYTE *)(a4 + 44))
    v12 = 1;
  else
    v12 = *(_BYTE *)(a5 + 44) != 0;
  *(_QWORD *)v22 = v11;
  *(_OWORD *)&v22[8] = *(_OWORD *)v18;
  *(_OWORD *)&v22[24] = *(_OWORD *)&v18[16];
  *(_DWORD *)&v22[40] = v19;
  v22[44] = v12;
  v13 = *(_DWORD *)(a1 + 44);
  if (v13 == *(_DWORD *)(a1 + 40))
  {
    *(_QWORD *)&v15 = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>(a1 + 32, (unint64_t)v22).n128_u64[0];
  }
  else
  {
    v14 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 48 * v13);
    v15 = *(_OWORD *)v22;
    v16 = *(_OWORD *)&v22[32];
    v14[1] = *(_OWORD *)&v22[16];
    v14[2] = v16;
    *v14 = v15;
    ++*(_DWORD *)(a1 + 44);
  }
  return *(double *)&v15;
}

void JSC::PrivateIdentifierNode::~PrivateIdentifierNode(JSC::PrivateIdentifierNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::PrivateIdentifierNode::emitBytecode()
{
  __break(0xC471u);
}

uint64_t JSC::PrivateIdentifierNode::isPrivateIdentifier(JSC::PrivateIdentifierNode *this)
{
  return 1;
}

double JSC::ASTBuilder::appendUnaryToken(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;

  ++*a2;
  v8 = *(_QWORD *)(a4 + 1);
  *(_QWORD *)&v11 = a3 | ((unint64_t)*a4 << 32);
  *((_QWORD *)&v11 + 1) = v8;
  v9 = *(unsigned int *)(a1 + 1052);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 1048))
  {
    *(_QWORD *)&result = WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,JSC::JSTextPosition>>(a1 + 1040, (unint64_t)&v11, a3, (uint64_t)a4, a5, a6, a7, a8).n128_u64[0];
  }
  else
  {
    result = *(double *)&v11;
    *(_OWORD *)(*(_QWORD *)(a1 + 1040) + 16 * v9) = v11;
    ++*(_DWORD *)(a1 + 1052);
  }
  return result;
}

uint64_t JSC::ASTBuilder::createLogicalNot(uint64_t a1, uint64_t a2, double *a3)
{
  JSC::ParserArena *v6;
  uint64_t result;
  double v8;
  uint64_t *v9;

  if ((*(unsigned int (**)(double *))(*(_QWORD *)a3 + 24))(a3))
  {
    v8 = a3[4];
    ++*(_DWORD *)(a1 + 28);
    v9 = *(uint64_t **)(a1 + 8);
    result = *v9;
    if ((unint64_t)(v9[1] - *v9) <= 0x1F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
      result = *v9;
    }
    *v9 = result + 32;
    *(_DWORD *)(result + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 32;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E357B068;
    *(_BYTE *)(result + 27) = v8 == 0.0;
  }
  else
  {
    v6 = *(JSC::ParserArena **)(a1 + 8);
    result = *(_QWORD *)v6;
    if (*((_QWORD *)v6 + 1) - *(_QWORD *)v6 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v6);
      result = *(_QWORD *)v6;
    }
    *(_QWORD *)v6 = result + 48;
    *(_DWORD *)(result + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 32;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)(result + 32) = a3;
    *(_DWORD *)(result + 40) = 184;
    *(_QWORD *)result = &off_1E3587A78;
  }
  return result;
}

int32x2_t JSC::ASTBuilder::createUnaryPlus(JSC::ParserArena *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 2;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)(v6 + 32) = a3;
  *(_DWORD *)(v6 + 40) = 192;
  *(_QWORD *)v6 = &off_1E35878F8;
  return result;
}

int32x2_t JSC::ASTBuilder::createVoid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::ParserArena *v5;
  uint64_t v6;
  int32x2_t result;

  ++*(_DWORD *)(a1 + 28);
  v5 = *(JSC::ParserArena **)(a1 + 8);
  v6 = *(_QWORD *)v5;
  if (*((_QWORD *)v5 + 1) - *(_QWORD *)v5 <= 0x27uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v5);
    v6 = *(_QWORD *)v5;
  }
  *(_QWORD *)v5 = v6 + 40;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E3587478;
  *(_QWORD *)(v6 + 32) = a3;
  return result;
}

__n128 WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,JSC::JSTextPosition>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 0xB)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 10;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x197EA791CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 0xB)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 10;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

__n128 WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_OWORD **)a1;
      v13 = 48 * v4;
      v14 = (__int128 *)v3;
      do
      {
        v15 = *v14;
        v16 = v14[2];
        v12[1] = v14[1];
        v12[2] = v16;
        *v12 = v15;
        v12 += 3;
        v14 += 3;
        v13 -= 48;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0xB)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 10;
  }
  else if (a2 >= 0x5555556)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = 48 * a2;
    result = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = result;
  }
  return result;
}

_QWORD *WTF::Vector<std::pair<int,int>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<std::pair<int,int>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<std::pair<int,int>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0xB)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 10;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197EA7D14);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0xB)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 10;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::ASTBuilder::createArrowFunctionExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  int32x2_t v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_DWORD *)(a1 + 24) |= 0x40u;
  v10 = *(_QWORD *)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 24);
  v11 = *(_DWORD *)(a3 + 28);
  v13 = *(unsigned __int16 *)(v10 + 33) << 23 >> 31;
  v14 = *(_DWORD *)(a3 + 32);
  v15 = *(_DWORD *)(a3 + 40);
  v16 = **(_DWORD ***)(a1 + 16);
  if (v16)
    ++v16[2];
  v17 = (v11 + v13 + 1);
  if (v14 <= 1)
    v18 = 1;
  else
    v18 = v14;
  v19 = (v18 - 1);
  v20 = v15 & ~(v15 >> 31);
  v21 = *(uint64_t **)(a1 + 8);
  v22 = *v21;
  if ((unint64_t)(v21[1] - *v21) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    v22 = *v21;
    v10 = *(_QWORD *)(a3 + 8);
  }
  *v21 = v22 + 40;
  v23 = *(_DWORD ***)a3;
  *(_DWORD *)(v22 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v22 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v22 + 20) = -1;
  *(_BYTE *)(v22 + 24) = 0;
  *(_BYTE *)(v22 + 25) = 126;
  *(_BYTE *)(v22 + 26) = 0;
  *(_QWORD *)v22 = off_1E357AA60;
  *(_QWORD *)(v22 + 32) = v10;
  if (v16)
    ++v16[2];
  v24 = v12 | (v17 << 32);
  v25 = *(_DWORD **)(v10 + 80);
  *(_QWORD *)(v10 + 80) = v16;
  v26 = v19 | (v20 << 32);
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  *(_QWORD *)(v10 + 88) = v24;
  *(_QWORD *)(v10 + 96) = v26;
  v27 = *v23;
  if (*v23)
    *v27 += 2;
  v28 = *(WTF::StringImpl **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  *(_DWORD *)(v10 + 36) = 1;
  *(_QWORD *)v22 = &off_1E358AA80;
  v29 = *(_QWORD *)(a3 + 8);
  v30 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(v29 + 136) = *(_DWORD *)(a3 + 36);
  v31 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v29 + 16) = v30;
  *(int32x2_t *)(v29 + 20) = vrev64_s32(v31);
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  return v22;
}

uint64_t WTF::Vector<JSC::ASTBuilder::AssignmentInfo,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 40 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ASTBuilder::AssignmentInfo,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 0xB)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 10;
    goto LABEL_11;
  }
  if (v13 < 0x6666667)
  {
    v15 = 40 * v13;
    v16 = WTF::fastMalloc((WTF *)(40 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v9 = v16;
LABEL_11:
    if ((_DWORD)v14)
    {
      v17 = 40 * v14;
      v18 = v10;
      do
      {
        v19 = *(_OWORD *)v18;
        v20 = *(_OWORD *)(v18 + 16);
        *(_QWORD *)(v16 + 32) = *(_QWORD *)(v18 + 32);
        *(_OWORD *)v16 = v19;
        *(_OWORD *)(v16 + 16) = v20;
        v16 += 40;
        v18 += 40;
        v17 -= 40;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::ASTBuilder::AssignmentInfo,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(unsigned int *)(a1 + 12);
    if (v10 < 0xB)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 10;
    }
    else
    {
      if (v10 >= 0x6666667)
      {
        __break(0xC471u);
        return;
      }
      v14 = 40 * v10;
      v15 = WTF::fastMalloc((WTF *)(40 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v13)
    {
      v16 = 40 * v13;
      v17 = v12;
      do
      {
        v18 = *(_OWORD *)v17;
        v19 = *(_OWORD *)(v17 + 16);
        *(_QWORD *)(v15 + 32) = *(_QWORD *)(v17 + 32);
        *(_OWORD *)v15 = v18;
        *(_OWORD *)(v15 + 16) = v19;
        v15 += 40;
        v17 += 40;
        v16 -= 40;
      }
      while (v16);
    }
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

int32x2_t JSC::ASTBuilder::createArray(uint64_t a1, uint64_t a2, int a3)
{
  JSC::ParserArena *v5;
  uint64_t v6;
  int32x2_t result;

  if (a3)
  {
    ++*(_DWORD *)(a1 + 28);
    v5 = *(JSC::ParserArena **)(a1 + 8);
    v6 = *(_QWORD *)v5;
    if (*((_QWORD *)v5 + 1) - *(_QWORD *)v5 > 0x2FuLL)
      goto LABEL_3;
LABEL_5:
    JSC::ParserArena::allocateFreeablePool(v5);
    v6 = *(_QWORD *)v5;
    goto LABEL_3;
  }
  v5 = *(JSC::ParserArena **)(a1 + 8);
  v6 = *(_QWORD *)v5;
  if (*((_QWORD *)v5 + 1) - *(_QWORD *)v5 < 0x30uLL)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)v5 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E3585048;
  *(_QWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 40) = a3;
  return result;
}

__n128 JSC::ASTBuilder::createSpreadExpression(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v12) <= 0x47)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v12 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v12 + 72;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v12 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_BYTE *)(v12 + 25) = 126;
  *(_BYTE *)(v12 + 26) = 0;
  *(_DWORD *)(v12 + 60) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v12 + 44) = result;
  *(__n128 *)(v12 + 28) = result;
  *(_QWORD *)v12 = &off_1E3585648;
  *(_QWORD *)(v12 + 64) = a3;
  v15 = *a5;
  *(_DWORD *)(v12 + 36) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v12 + 28) = v15;
  v16 = *a4;
  *(_DWORD *)(v12 + 48) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v12 + 40) = v16;
  v17 = *a6;
  *(_DWORD *)(v12 + 60) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v12 + 52) = v17;
  return result;
}

int32x2_t JSC::ASTBuilder::createArray(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  JSC::ParserArena *v7;
  uint64_t v8;
  int32x2_t result;

  if (a3)
  {
    ++*(_DWORD *)(a1 + 28);
    v7 = *(JSC::ParserArena **)(a1 + 8);
    v8 = *(_QWORD *)v7;
    if (*((_QWORD *)v7 + 1) - *(_QWORD *)v7 > 0x2FuLL)
      goto LABEL_3;
LABEL_5:
    JSC::ParserArena::allocateFreeablePool(v7);
    v8 = *(_QWORD *)v7;
    goto LABEL_3;
  }
  v7 = *(JSC::ParserArena **)(a1 + 8);
  v8 = *(_QWORD *)v7;
  if (*((_QWORD *)v7 + 1) - *(_QWORD *)v7 < 0x30uLL)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)v7 = v8 + 48;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v8 + 12) = result;
  *(_DWORD *)(v8 + 20) = -1;
  *(_BYTE *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 25) = 126;
  *(_BYTE *)(v8 + 26) = 0;
  *(_QWORD *)v8 = &off_1E3585048;
  *(_QWORD *)(v8 + 32) = a4;
  *(_DWORD *)(v8 + 40) = a3;
  return result;
}

int32x2_t JSC::ASTBuilder::createArray(JSC::ParserArena *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E3585048;
  *(_QWORD *)(v6 + 32) = a3;
  *(_DWORD *)(v6 + 40) = 0;
  return result;
}

void JSC::NullNode::~NullNode(JSC::NullNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::NullNode::isNull(JSC::NullNode *this)
{
  return 1;
}

uint64_t JSC::NullNode::jsValue()
{
  return 2;
}

void JSC::BooleanNode::~BooleanNode(JSC::BooleanNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BooleanNode::isBoolean(JSC::BooleanNode *this)
{
  return 1;
}

uint64_t JSC::BooleanNode::jsValue(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 27))
    return 7;
  else
    return 6;
}

int32x2_t JSC::ASTBuilder::createArgumentsList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v7 - v6) <= 0x2F)
  {
    if (v7)
    {
      v10 = (_QWORD *)(a1 + 24);
      v11 = v7 - 8000;
      v14 = v7 - 8000;
      v12 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 32))
      {
        v13 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v12 + 1, (unint64_t)&v14);
        v12 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12) = *v13;
      }
      else
      {
        *(_QWORD *)(*v10 + 8 * v12) = v11;
      }
      *(_DWORD *)(a1 + 36) = v12 + 1;
    }
    v6 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v6 + 8000;
  }
  *(_QWORD *)a1 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = 126;
  *(_BYTE *)(v6 + 26) = 0;
  *(_QWORD *)v6 = &off_1E3585948;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a3;
  return result;
}

uint64_t JSC::ASTBuilder::createElementList(JSC::ASTBuilder *this, JSC::ArgumentListNode *a2)
{
  JSC::ParserArena *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  JSC::ParserArena *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = (JSC::ParserArena *)*((_QWORD *)this + 1);
  result = *(_QWORD *)v4;
  if (*((_QWORD *)v4 + 1) - *(_QWORD *)v4 <= 0x17uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v4);
    result = *(_QWORD *)v4;
  }
  *(_QWORD *)v4 = result + 24;
  v7 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 16) = 0;
  if (v7)
  {
    v8 = (_QWORD *)result;
    do
    {
      v9 = (JSC::ParserArena *)*((_QWORD *)this + 1);
      v10 = *(_QWORD *)v9;
      if (*((_QWORD *)v9 + 1) - *(_QWORD *)v9 <= 0x17uLL)
      {
        v12 = v8;
        v13 = result;
        JSC::ParserArena::allocateFreeablePool(v9);
        v8 = v12;
        result = v13;
        v10 = *(_QWORD *)v9;
      }
      *(_QWORD *)v9 = v10 + 24;
      v11 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = v11;
      *(_DWORD *)(v10 + 16) = 0;
      *v8 = v10;
      v7 = *(_QWORD *)(v7 + 32);
      v8 = (_QWORD *)v10;
    }
    while (v7);
  }
  return result;
}

uint64_t JSC::ASTBuilder::createArguments(JSC::ASTBuilder *this, JSC::ArgumentListNode *a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  result = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  if ((unint64_t)(v7 - result) <= 0xF)
  {
    if (v7)
    {
      v9 = (_QWORD *)((char *)this + 24);
      v10 = v7 - 8000;
      v13 = v7 - 8000;
      v11 = *((unsigned int *)this + 9);
      if ((_DWORD)v11 == *((_DWORD *)this + 8))
      {
        v12 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v11 + 1, (unint64_t)&v13);
        v11 = *((unsigned int *)this + 9);
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v11) = *v12;
      }
      else
      {
        *(_QWORD *)(*v9 + 8 * v11) = v10;
      }
      *((_DWORD *)this + 9) = v11 + 1;
    }
    result = WTF::fastMalloc((WTF *)0x1F40);
    *((_QWORD *)this + 1) = result + 8000;
  }
  *(_QWORD *)this = result + 16;
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 v6;
  int v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 0x20) != 0)
    v3 = *(_DWORD *)(a2 + 32);
  v4 = v2 & (v3 >> 8);
  v5 = *(_QWORD *)(a1 + 16 * v4);
  if (v5 == a2)
    return 1;
  v8 = 1;
  do
  {
    v6 = v5 != 0;
    if (!v5)
      break;
    v4 = (v4 + v8) & v2;
    v5 = *(_QWORD *)(a1 + 16 * v4);
    ++v8;
  }
  while (v5 != a2);
  return v6;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseTemplateString<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v27;

  if ((a3 & 1) == 0)
  {
    v11 = *(_DWORD *)(a1 + 7368);
    if (v11 != 1)
    {
      if (v11 != 20 && (v11 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[67]>(a1);
        return 0;
      }
      goto LABEL_19;
    }
  }
  v12 = JSC::Lexer<unsigned char>::scanTemplateString(*(unsigned int **)(a1 + 7288), a1 + 7368, a4, a4, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v12;
  if (v12 != 15)
  {
    if (v12 != 20 && (v12 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected an template element");
      return 0;
    }
LABEL_19:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v27 = *(_OWORD *)(a1 + 7376);
  *a5 = *(_BYTE *)(a1 + 7392);
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7404);
  v19 = *(_DWORD *)(a1 + 7408);
  v20 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v18;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v17;
  v22 = *(_DWORD *)(a1 + 12);
  if (v22)
  {
    v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v23, v13, v14, v15, v16);
    v24 = *(uint64_t **)(a2 + 8);
    result = *v24;
    if ((unint64_t)(v24[1] - *v24) <= 0x2F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
      result = *v24;
    }
    *v24 = result + 48;
    *(_DWORD *)(result + 8) = v17;
    *(_DWORD *)(result + 12) = v19;
    *(_DWORD *)(result + 16) = v18;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E3584148;
    *(_OWORD *)(result + 32) = v27;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::ASTBuilder::createAssignmentElement(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  JSC::ParserArena *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*a2 && (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 336))(*a2, *(_QWORD *)a1))
    *(_DWORD *)(a1 + 24) |= 2u;
  v8 = *(JSC::ParserArena **)(a1 + 8);
  result = *(_QWORD *)v8;
  if (*((_QWORD *)v8 + 1) - *(_QWORD *)v8 <= 0x27uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v8);
    result = *(_QWORD *)v8;
  }
  *(_QWORD *)v8 = result + 40;
  v10 = *a2;
  *(_QWORD *)result = &off_1E358B7C0;
  v11 = *a3;
  *(_DWORD *)(result + 16) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(result + 8) = v11;
  v12 = *a4;
  *(_DWORD *)(result + 28) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(result + 20) = v12;
  *(_QWORD *)(result + 32) = v10;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v21 = *(_QWORD *)(a1 + 7416);
  v22 = *(_DWORD *)(a1 + 7424);
  v10 = JSC::Parser<JSC::Lexer<unsigned char>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = v10;
  if (v10 && (v11 = v10, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10) & 1) != 0))
  {
    v12 = *(_DWORD *)(a1 + 12);
    if (!v12)
      goto LABEL_23;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
      return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v20, &v21, a1 + 7444);
    if (!*(_QWORD *)(a1 + 7320))
      return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v20, &v21, a1 + 7444);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11))
      return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v20, &v21, a1 + 7444);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v14 = **(_QWORD **)(a1 + 7320);
    if (*(_QWORD *)(v13 + 1248) != v14 && *(_QWORD *)(v13 + 880) != v14)
      return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v20, &v21, a1 + 7444);
    v15 = *(_DWORD *)(a1 + 12);
    if (!v15)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x197EA8B74);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1) == 0)
      return JSC::Parser<JSC::Lexer<unsigned char>>::createAssignmentElement<JSC::ASTBuilder>(a2, &v20, &v21, a1 + 7444);
    v18 = *(_DWORD **)(a1 + 7496);
    if (v18 && *v18 == 1)
      *v18 = 0;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v19 = v14;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v19);
    }
  }
  else
  {
    v17 = *(_DWORD **)(a1 + 7496);
    if (v17 && *v17 == 1)
      *v17 = 0;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
  }
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseObjectRestElement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl **a5, uint64_t a6)
{
  uint64_t v7;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL isAllowedIdentifierLet;
  BOOL isAllowedIdentifierYield;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  const char *Range;
  uint64_t v38;

  v7 = a1 + 7344;
  if ((unint64_t)&v35 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v18 = 0;
      *(_BYTE *)(v7 + 8) = 1;
      return v18;
    }
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13 != 12)
  {
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v13, *(_QWORD **)(a1 + 7376));
    v13 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v13, *(_QWORD **)(a1 + 7376)), v13 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if ((a3 - 1) <= 1 && v13 == 544)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
        return 0;
      }
    }
    else if (v13 != 546)
    {
      if (v13 != 1048592
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v28 = *(_DWORD *)(a1 + 12);
        if (!v28)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x197EA8DACLL);
        }
        v29 = v28 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0 && v13 == 532)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v38 = v30;
            v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&Range, &v36);
          }
          return 0;
        }
        if ((v13 - 531) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v38 = v31;
            v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v36);
          }
          return 0;
        }
        if ((v13 & 0x200) != 0)
        {
          if ((v13 - 544) >= 3)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              v38 = v33;
              v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v36);
            }
            return 0;
          }
          if (v13 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v32 = (const char *)JSC::destructuringKindToVariableKindName(a3);
                v36 = "in strict mode";
                Range = v32;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, &Range, &v36);
              }
              return 0;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0
                 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              return 0;
            Range = (const char *)JSC::destructuringKindToVariableKindName(a3);
            v36 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
            v34 = "Cannot use 'yield' as a ";
            goto LABEL_42;
          }
        }
        if (v13 == 20 || (v13 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a binding element");
        }
        return 0;
      }
      v13 = 1048592;
    }
  }
  if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v13, *(_QWORD **)(a1 + 7376)))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      Range = (const char *)JSC::destructuringKindToVariableKindName(a3);
      v36 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(a1);
      v34 = "Cannot use 'await' as a ";
LABEL_42:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v34, &Range, &v36);
    }
    return 0;
  }
  v18 = JSC::Parser<JSC::Lexer<unsigned char>>::createBindingPattern<JSC::ASTBuilder>(a1, a2, a3, a4, *(WTF::AtomStringImpl **)(a1 + 7376), a1 + 7368, a6, a5);
  v19 = *(_DWORD *)(a1 + 7400);
  v20 = *(_DWORD *)(a1 + 7412);
  v21 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v19;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v21;
  v22 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v22 + 4) = v19;
  v23 = *(_DWORD *)(a1 + 12);
  if (!v23)
    goto LABEL_50;
  v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
  *(_BYTE *)(v22 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v22, a1 + 7368, 0, v24, v14, v15, v16, v17);
  return v18;
}

double JSC::ObjectPatternNode::appendEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  LOBYTE(v11) = 0;
  *((_QWORD *)&v11 + 1) = a4;
  *(_QWORD *)&v12 = a5;
  BYTE8(v12) = 0;
  v5 = *(_DWORD *)(a1 + 68);
  if (v5 == *(_DWORD *)(a1 + 64))
  {
    *(_QWORD *)&v7 = WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPatternNode::Entry>(a1 + 56, (unint64_t)&v10).n128_u64[0];
  }
  else
  {
    v6 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 48 * v5);
    v7 = v10;
    v8 = v12;
    v6[1] = v11;
    v6[2] = v8;
    *v6 = v7;
    ++*(_DWORD *)(a1 + 68);
  }
  return *(double *)&v7;
}

__n128 WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPatternNode::Entry>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 48 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x5555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 48 * v8;
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 48 * v9;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[2];
        v11[1] = v20[1];
        v11[2] = v22;
        *v11 = v21;
        v11 += 3;
        v20 += 3;
        v19 -= 48;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 48 * v4;
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 48 * v7;
        v18 = (__int128 *)v6;
        do
        {
          v19 = *v18;
          v20 = v18[2];
          v9[1] = v18[1];
          v9[2] = v20;
          *v9 = v19;
          v9 += 3;
          v18 += 3;
          v17 -= 48;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::Scope::useVariable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v58;
  uint64_t v59;

  v2 = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    return;
  }
  v4 = v2 - 1;
  v5 = *(_QWORD *)(a1 + 168);
  v6 = (unsigned int *)(v5 + 72 * (v2 - 1));
  v7 = (int *)(v6 + 1);
  v8 = v6[1];
  v9 = *v6;
  if (v8 != 8)
  {
LABEL_27:
    if (3 * v8 <= 4 * v9)
    {
      v37 = v5 + 72 * v4;
      v40 = *(_QWORD *)(v37 + 8);
      v38 = (_QWORD *)(v37 + 8);
      v39 = v40;
      v28 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v8)));
      memset(v28, 255, 8 * (2 * v8));
      v48 = v40;
      *v7 = 2 * v8;
      if (v8)
      {
        v49 = 0;
        v50 = 2 * v8 - 1;
        do
        {
          v51 = *(_QWORD *)(v39 + 8 * v49);
          if (v51 != -1)
          {
            v52 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v50 & ((v54 >> 31) ^ v54);
            v56 = *((_QWORD *)v28 + v55);
            if (v56 != -1 && v56 != v51)
            {
              v58 = 1;
              do
              {
                v55 = ((_DWORD)v55 + v58) & v50;
                v59 = *((_QWORD *)v28 + v55);
                ++v58;
              }
              while (v59 != -1 && v59 != v51);
            }
            *((_QWORD *)v28 + v55) = v51;
          }
          ++v49;
        }
        while (v49 != v8);
      }
      WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
      v8 = *v7;
      *v38 = v28;
    }
    else
    {
      v28 = *(void **)(v5 + 72 * v4 + 8);
    }
    v29 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = (v8 - 1) & ((v31 >> 31) ^ v31);
    v33 = *((_QWORD *)v28 + v32);
    if (v33 != -1 && v33 != a2)
    {
      v35 = 1;
      do
      {
        v32 = ((_DWORD)v32 + v35) & (v8 - 1);
        v33 = *((_QWORD *)v28 + v32);
        ++v35;
      }
      while (v33 != -1 && v33 != a2);
    }
    if (v33 == a2)
      return;
    *((_QWORD *)v28 + v32) = a2;
    v9 = *v6;
LABEL_9:
    *v6 = v9 + 1;
    return;
  }
  if (!v9)
  {
    v10 = 0;
LABEL_8:
    *(_QWORD *)(v5 + 72 * v4 + 8 * v10 + 8) = a2;
    goto LABEL_9;
  }
  v10 = *v6;
  v11 = (_QWORD *)(v5 + 72 * v4 + 8);
  v12 = v11;
  v13 = v10;
  while (*v12 != a2)
  {
    ++v12;
    if (!--v13)
    {
      if (v9 <= 7)
        goto LABEL_8;
      v14 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
      v15 = 0;
      *(_QWORD *)&v16 = -1;
      *((_QWORD *)&v16 + 1) = -1;
      *v14 = v16;
      v14[1] = v16;
      v14[2] = v16;
      v14[3] = v16;
      v14[4] = v16;
      v14[5] = v16;
      v14[6] = v16;
      v14[7] = v16;
      v14[8] = v16;
      v14[9] = v16;
      v14[10] = v16;
      v14[11] = v16;
      v14[12] = v16;
      v14[13] = v16;
      v14[14] = v16;
      v14[15] = v16;
      v14[16] = v16;
      v14[17] = v16;
      v14[18] = v16;
      v14[19] = v16;
      v14[20] = v16;
      v14[21] = v16;
      v14[22] = v16;
      v14[23] = v16;
      v14[24] = v16;
      v14[25] = v16;
      v14[26] = v16;
      v14[27] = v16;
      v14[28] = v16;
      v14[29] = v16;
      v14[30] = v16;
      v14[31] = v16;
      *v7 = 64;
      do
      {
        v17 = v11[v15];
        if (v17 != -1)
        {
          v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v20 ^ (v20 >> 31);
          v22 = v21 & 0x3F;
          v23 = *((_QWORD *)v14 + v22);
          if (v23 != -1 && v23 != v17)
          {
            LOBYTE(v22) = v21 & 0x3F;
            v25 = 1;
            do
            {
              v22 = ((_BYTE)v22 + (_BYTE)v25) & 0x3F;
              v26 = *((_QWORD *)v14 + v22);
              ++v25;
            }
            while (v26 != -1 && v26 != v17);
          }
          *((_QWORD *)v14 + v22) = v17;
        }
        ++v15;
      }
      while (v15 != 8);
      v9 = *v6;
      *v11 = v14;
      v8 = 64;
      goto LABEL_27;
    }
  }
}

void WTF::SegmentedVector<JSC::Identifier,64ul>::clear(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *a1;
  if (!*a1)
  {
LABEL_14:
    if (*((_DWORD *)a1 + 5))
    {
      v17 = 0;
      do
      {
        WTF::fastFree(*(_QWORD *)(a1[1] + 8 * v17++), a2, a3, a4, a5, a6, a7, a8);
        v18 = *((unsigned int *)a1 + 5);
      }
      while (v17 < v18);
      if (!*((_DWORD *)a1 + 4))
        goto LABEL_18;
      if ((_DWORD)v18)
        *((_DWORD *)a1 + 5) = 0;
    }
    else if (!*((_DWORD *)a1 + 4))
    {
LABEL_18:
      *a1 = 0;
      return;
    }
    v19 = a1[1];
    if (v19)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_18;
  }
  v10 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (v10 >> 6 < *((unsigned int *)a1 + 5))
  {
    v12 = *(_QWORD *)(a1[1] + 8 * (v10 >> 6));
    v13 = 8 * (v10 & 0x3F);
    v14 = *(_QWORD *)(v12 + v13);
    *(_QWORD *)(v12 + v13) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_QWORD *)(StatusReg + 752);
        if (v15)
        {
          if (v14 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) == 0)
          {
            if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, v14, 1, a4, a5, a6, a7, a8);
          }
          else
          {
LABEL_11:
            v16 = *(unsigned int *)(v15 + 8000);
            if (v16 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v15, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v15 + 8 * v16) = v14 | 0x5000000000000;
              *(_DWORD *)(v15 + 8000) = v16 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
        }
        v9 = *a1;
        goto LABEL_4;
      }
      *(_DWORD *)v14 -= 2;
    }
LABEL_4:
    if (++v10 >= v9)
      goto LABEL_14;
  }
  __break(0xC471u);
}

void WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *a1;
  if (*a1)
  {
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (v10 >> 6 >= *((unsigned int *)a1 + 5))
      {
        __break(0xC471u);
        return;
      }
      v12 = *(_QWORD *)(a1[1] + 8 * (v10 >> 6));
      v13 = 8 * (v10 & 0x3F);
      v14 = *(_QWORD *)(v12 + v13);
      *(_QWORD *)(v12 + v13) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, a4, a5, a6, a7, a8);
          v15 = *(_QWORD *)(StatusReg + 752);
          if (v15)
          {
            if (v14 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) == 0)
            {
              if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_11;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, v14, 1, a4, a5, a6, a7, a8);
            }
            else
            {
LABEL_11:
              v16 = *(unsigned int *)(v15 + 8000);
              if (v16 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v15, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v15 + 8 * v16) = v14 | 0x5000000000000;
                *(_DWORD *)(v15 + 8000) = v16 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
          }
          v9 = *a1;
          goto LABEL_4;
        }
        *(_DWORD *)v14 -= 2;
      }
LABEL_4:
      ++v10;
    }
    while (v10 < v9);
  }
  if (*((_DWORD *)a1 + 5))
  {
    v17 = 0;
    do
      WTF::fastFree(*(_QWORD *)(a1[1] + 8 * v17++), a2, a3, a4, a5, a6, a7, a8);
    while (v17 < *((unsigned int *)a1 + 5));
  }
  v18 = a1[1];
  if (v18)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::ASTBuilder::createAsyncFunctionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  JSC::ParserArena *v24;
  _DWORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;

  if ((_DWORD)a4 != 8)
    return JSC::ASTBuilder::createFunctionExpr(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 24);
  v13 = *(_DWORD *)(a3 + 28);
  v14 = *(unsigned __int16 *)(v11 + 33) << 23 >> 31;
  v15 = *(_DWORD *)(a3 + 32);
  v16 = *(_DWORD *)(a3 + 40);
  v17 = **(_DWORD ***)(a1 + 16);
  if (v17)
    ++v17[2];
  v25 = v17;
  v26 = v12;
  v27 = v13 + v14 + 1;
  if (v15 <= 1)
    v18 = 1;
  else
    v18 = v15;
  v28 = v18 - 1;
  v29 = v16 & ~(v16 >> 31);
  v19 = *(uint64_t **)(a1 + 8);
  v20 = *v19;
  if ((unint64_t)(v19[1] - *v19) <= 0x27)
  {
    v24 = *(JSC::ParserArena **)(a1 + 8);
    JSC::ParserArena::allocateFreeablePool(v24);
    v19 = (uint64_t *)v24;
    v20 = *(_QWORD *)v24;
    v11 = *(_QWORD *)(a3 + 8);
  }
  *v19 = v20 + 40;
  JSC::FuncExprNode::FuncExprNode(v20, a2, *(_QWORD **)a3, v11, (uint64_t *)&v25, a6, a7, a8);
  v21 = *(_QWORD *)(a3 + 8);
  v22 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(v21 + 136) = *(_DWORD *)(a3 + 36);
  v23 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v21 + 16) = v22;
  *(int32x2_t *)(v21 + 20) = vrev64_s32(v23);
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  return v20;
}

double JSC::ASTBuilder::createExprStatement(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v12;
  double result;

  v10 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v10) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v10 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v10 + 48;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v10 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E35899B8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = a3;
  v12 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v10 + 28) = a5;
  result = *(double *)a4;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)a4;
  *(_DWORD *)(v10 + 16) = v12;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[19],WTF::UniquedStringImpl *,char const(&)[50]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Exported binding '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' needs to refer to a top-level declared variable");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

BOOL WTF::hasUnpairedSurrogate(unsigned __int16 *a1, uint64_t a2)
{
  _BOOL8 v2;
  unsigned __int16 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  if ((a2 & 0xFF00000000) != 0 || !(_DWORD)a2)
    return 0;
  v4 = &a1[a2];
  do
  {
    v5 = *a1;
    if ((v5 & 0xF800) != 0xD800 || (char *)v4 - (char *)a1 == 2)
    {
      v6 = *a1;
    }
    else
    {
      v6 = *a1;
      if ((v5 & 0x400) == 0)
      {
        v7 = a1[1];
        v8 = v7 & 0xFC00;
        v6 = v7 + (v5 << 10) - 56613888;
        if (v8 != 56320)
          v6 = *a1;
      }
    }
    v9 = (v6 & 0xFFFFF800) == 55296;
    v2 = v9;
    if (v9)
      break;
    if ((char *)v4 - (char *)a1 == 2)
    {
      v11 = 1;
    }
    else
    {
      v10 = v5 & 0xFC00;
      v11 = 1;
      if (v10 == 55296)
      {
        if ((a1[1] & 0xFC00) == 0xDC00)
          v11 = 2;
        else
          v11 = 1;
      }
    }
    a1 += v11;
  }
  while (a1 != v4);
  return v2;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[65]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a well-formed-unicode string for the module export name");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleName<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v18;
  uint64_t *v19;

  v9 = *(_DWORD *)(a1 + 7368);
  if (v9 == 14)
  {
    v10 = *(_DWORD *)(a1 + 7400);
    v11 = *(_DWORD *)(a1 + 7404);
    v12 = *(_DWORD *)(a1 + 7408);
    v13 = *(_QWORD *)(a1 + 7376);
    v14 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v10;
    *(_DWORD *)(a1 + 7448) = v14;
    *(_DWORD *)(a1 + 7452) = v11;
    result = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(result + 4) = v10;
    v16 = *(_DWORD *)(a1 + 12);
    if (v16)
    {
      v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v16 - 1) + 9) & 1;
      *(_BYTE *)(result + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v18, a5, a6, a7, a8);
      v19 = *(uint64_t **)(a2 + 8);
      result = *v19;
      if ((unint64_t)(v19[1] - *v19) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        result = *v19;
      }
      *v19 = result + 40;
      *(_DWORD *)(result + 8) = v10;
      *(_DWORD *)(result + 12) = v12;
      *(_DWORD *)(result + 16) = v11;
      *(_DWORD *)(result + 20) = -1;
      *(_BYTE *)(result + 24) = 0;
      *(_QWORD *)result = &off_1E357B1F0;
      *(_QWORD *)(result + 32) = v13;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    if (v9 != 20 && (v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Imported modules names must be string literals");
    }
    else
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseImportAttributes<JSC::ASTBuilder>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  unsigned int v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;

  v72 = 0;
  v11 = *a2;
  v10 = a2[1];
  if ((unint64_t)(v10 - *a2) <= 0x47)
  {
    if (v10)
    {
      v65 = a2 + 3;
      v66 = v10 - 8000;
      *(_QWORD *)&v70 = v10 - 8000;
      v67 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v67 == *((_DWORD *)a2 + 8))
      {
        v68 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v67 + 1, (unint64_t)&v70);
        v67 = *((unsigned int *)a2 + 9);
        *(_QWORD *)(a2[3] + 8 * v67) = *v68;
      }
      else
      {
        *(_QWORD *)(*v65 + 8 * v67) = v66;
      }
      *((_DWORD *)a2 + 9) = v67 + 1;
    }
    v11 = WTF::fastMalloc((WTF *)0x1F40);
    a2[1] = v11 + 8000;
  }
  *a2 = v11 + 72;
  *(_QWORD *)&v70 = v11;
  v12 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v12 == *((_DWORD *)a2 + 12))
  {
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>((uint64_t)(a2 + 5), (unint64_t)&v70);
  }
  else
  {
    *(_QWORD *)(a2[5] + 8 * v12) = v11;
    *((_DWORD *)a2 + 13) = v12 + 1;
  }
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)v11 = &off_1E357B210;
  *(_QWORD *)(v11 + 8) = v11 + 24;
  *(_QWORD *)(v11 + 16) = 3;
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13)
  {
    if (v13 == 20 || (v13 & 0x100000) != 0)
    {
LABEL_52:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected opening '{' at the start of import attribute");
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 7400);
    v15 = *(_DWORD *)(a1 + 7412);
    v16 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v14;
    *(_DWORD *)(a1 + 7448) = v15;
    *(_DWORD *)(a1 + 7452) = v16;
    v17 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v17 + 4) = v14;
    v18 = *(_DWORD *)(a1 + 12);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAA568);
    }
    v19 = (int *)(a1 + 7368);
    v20 = v18 - 1;
    for (i = *(_QWORD *)a1; ; i = *(_QWORD *)a1)
    {
      v22 = *(_BYTE *)(i + 720 * v20 + 9) & 1;
      *(_BYTE *)(v17 + 56) = 0;
      v23 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v22, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v23;
      if (v23 == 1)
        goto LABEL_31;
      if ((v23 & 0x200) == 0 && (v23 | 2) != 0xE)
      {
        if (v23 == 20 || (v23 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected an attribute key");
        goto LABEL_53;
      }
      v24 = *(uint64_t **)(a1 + 7376);
      v69 = *v24;
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v72, &v69, a4, a5, a6, a7, a8, (uint64_t)&v70);
      if (!v71)
      {
        if (*v19 == 20 || (*v19 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v70 = *v24;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "A duplicate key for import attributes '", (uint64_t *)&v70);
        }
        goto LABEL_53;
      }
      v25 = *(_DWORD *)(a1 + 7400);
      v26 = *(_DWORD *)(a1 + 7412);
      v27 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v25;
      *(_DWORD *)(a1 + 7448) = v26;
      *(_DWORD *)(a1 + 7452) = v27;
      v28 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v28 + 4) = v25;
      v29 = *(_DWORD *)(a1 + 12);
      if (!v29)
        goto LABEL_74;
      v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
      *(_BYTE *)(v28 + 56) = 0;
      v31 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v31;
      if (v31 != 18)
      {
        if (v31 == 20 || (v31 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected ':' after attribute key");
        goto LABEL_53;
      }
      v32 = *(_DWORD *)(a1 + 7400);
      v33 = *(_DWORD *)(a1 + 7412);
      v34 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v32;
      *(_DWORD *)(a1 + 7448) = v33;
      *(_DWORD *)(a1 + 7452) = v34;
      v35 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v35 + 4) = v32;
      v36 = *(_DWORD *)(a1 + 12);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x197EAA550);
      }
      v37 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1;
      *(_BYTE *)(v35 + 56) = 0;
      v38 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, v37, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v38;
      if (v38 != 14)
      {
        if (v38 == 20 || (v38 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected an attribute value");
        goto LABEL_53;
      }
      v39 = *(_QWORD *)(a1 + 7376);
      v40 = *(_DWORD *)(a1 + 7400);
      v41 = *(_DWORD *)(a1 + 7412);
      v42 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v40;
      *(_DWORD *)(a1 + 7448) = v41;
      *(_DWORD *)(a1 + 7452) = v42;
      v43 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v43 + 4) = v40;
      v44 = *(_DWORD *)(a1 + 12);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x197EAA558);
      }
      v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
      *(_BYTE *)(v43 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, a5, a6, a7, a8);
      *(_QWORD *)&v70 = v24;
      *((_QWORD *)&v70 + 1) = v39;
      v46 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v46 == *(_DWORD *)(v11 + 16))
      {
        v47 = (__int128 *)WTF::Vector<std::tuple<JSC::Identifier const*,JSC::Identifier const*>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 8, (void *)(v46 + 1), (unint64_t)&v70, a4, a5, a6, a7, a8);
        v46 = *(unsigned int *)(v11 + 20);
        v48 = *(_QWORD *)(v11 + 8);
        v49 = *v47;
      }
      else
      {
        v48 = *(_QWORD *)(v11 + 8);
        v49 = v70;
      }
      *(_OWORD *)(v48 + 16 * v46) = v49;
      ++*(_DWORD *)(v11 + 20);
      v50 = *v19;
      if (*v19 != 6)
        break;
      v51 = *(_DWORD *)(a1 + 7400);
      v52 = *(_DWORD *)(a1 + 7412);
      v53 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v51;
      *(_DWORD *)(a1 + 7448) = v52;
      *(_DWORD *)(a1 + 7452) = v53;
      v17 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v17 + 4) = v51;
      v54 = *(_DWORD *)(a1 + 12);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197EAA560);
      }
      v20 = v54 - 1;
    }
    if (v50 == 1)
    {
LABEL_31:
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      v59 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v59 + 4) = v56;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x197EAA548);
      }
      v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
      *(_BYTE *)(v59 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, a5, a6, a7, a8);
      goto LABEL_54;
    }
    if (v50 == 20 || (v50 & 0x100000) != 0)
      goto LABEL_52;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[17]>(a1);
  }
LABEL_53:
  v11 = 0;
LABEL_54:
  if (v72)
    WTF::fastFree(v72 - 16, a2, a3, a4, a5, a6, a7, a8);
  return v11;
}

_QWORD *JSC::ASTBuilder::createExportSpecifierList(JSC::ASTBuilder *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD **)this;
  if (*((_QWORD *)this + 1) - *(_QWORD *)this <= 0x2FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(this);
    v2 = *(_QWORD **)this;
  }
  *(_QWORD *)this = v2 + 6;
  v5 = v2;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3 == *((_DWORD *)this + 12))
  {
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>((uint64_t)this + 40, (unint64_t)&v5);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3) = v2;
    *((_DWORD *)this + 13) = v3 + 1;
  }
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = 0;
  *v2 = &off_1E357B230;
  v2[1] = v2 + 3;
  v2[2] = 3;
  return v2;
}

int32x2_t JSC::ASTBuilder::createExportSpecifier(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int32x2_t result;

  v8 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v8) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v8 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v8 + 48;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v8 + 12) = result;
  *(_DWORD *)(v8 + 20) = -1;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)v8 = &off_1E357B250;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  return result;
}

_QWORD *JSC::ASTBuilder::appendExportSpecifier(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    result = (_QWORD *)WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v4) = a2;
  }
  *(_DWORD *)(a1 + 20) = v4 + 1;
  return result;
}

int32x2_t JSC::ASTBuilder::createExportNamedDeclaration(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int32x2_t result;

  v10 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v10) <= 0x3F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v10 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v10 + 64;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v10 + 12) = result;
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = -1;
  *(_QWORD *)v10 = &off_1E3589D98;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = a3;
  *(_QWORD *)(v10 + 48) = a4;
  *(_QWORD *)(v10 + 56) = a5;
  return result;
}

int32x2_t JSC::ASTBuilder::createExportAllDeclaration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int32x2_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v9 - v8) <= 0x37)
  {
    if (v9)
    {
      v12 = (_QWORD *)(a1 + 24);
      v13 = v9 - 8000;
      v16 = v9 - 8000;
      v14 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 32))
      {
        v15 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v14 + 1, (unint64_t)&v16);
        v14 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14) = *v15;
      }
      else
      {
        *(_QWORD *)(*v12 + 8 * v14) = v13;
      }
      *(_DWORD *)(a1 + 36) = v14 + 1;
    }
    v8 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v8 + 8000;
  }
  *(_QWORD *)a1 = v8 + 56;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v8 + 12) = result;
  *(_DWORD *)(v8 + 20) = -1;
  *(_BYTE *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 28) = -1;
  *(_QWORD *)v8 = &off_1E3589BA0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t FuncDeclStatement;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  WTF::StringImpl *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  char v82[8];
  uint64_t *v83;
  unsigned int v84;
  _OWORD v85[3];
  __int128 v86;
  uint64_t v87[2];
  unsigned __int8 v88;
  unsigned __int8 v89;
  WTF::StringImpl *v90;

  v9 = (_DWORD *)(a1 + 7368);
  v86 = *(_OWORD *)(a1 + 7400);
  v10 = *(unsigned int *)(a1 + 7408);
  v11 = *(_DWORD *)(a1 + 7400);
  v12 = *(_DWORD *)(a1 + 7412);
  v13 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v11;
  *(_DWORD *)(a1 + 7448) = v12;
  *(_DWORD *)(a1 + 7452) = v13;
  v14 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v14 + 4) = v11;
  v15 = *(_DWORD *)(a1 + 12);
  if (!v15)
  {
    __break(0xC471u);
    goto LABEL_56;
  }
  v17 = a5;
  v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
  *(_BYTE *)(v14 + 56) = 0;
  v22 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v14, (uint64_t)v9, 0, v21, a5, a6, a7, a8);
  v27 = 0;
  *(_DWORD *)(a1 + 7368) = v22;
  if (v22 != 191488)
  {
LABEL_3:
    v28 = (_BYTE *)(a1 + 7474);
    v29 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v27;
    memset(v85, 0, 44);
    if (v17 == 1)
    {
      *(_QWORD *)&v85[0] = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104;
      v30 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 1, v10, v85, 1, a6);
    }
    else
    {
      v30 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 1, v10, v85, 1, a6);
    }
    if ((v30 & 1) == 0)
    {
      if (*v9 == 20 || (*v9 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this function");
      }
      goto LABEL_43;
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::declareFunction((uint64_t)v82, (uint64_t *)a1, *(WTF::StringImpl ***)&v85[0], v31, v32, v33, v34, v35);
    if ((v82[0] & 1) == 0)
      goto LABEL_7;
    v81 = *(_DWORD *)(a1 + 12);
    if (v81)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v81 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v87[0] = **(_QWORD **)&v85[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a function named '", v87);
        }
        goto LABEL_43;
      }
LABEL_7:
      if ((v82[0] & 2) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v87[0] = **(_QWORD **)&v85[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[77],WTF::UniquedStringImpl *,char const(&)[2]>(a1, v87);
        }
      }
      else
      {
        if (a4)
        {
LABEL_9:
          FuncDeclStatement = JSC::ASTBuilder::createFuncDeclStatement(a2, (uint64_t)&v86, (uint64_t)v85, v37, v38, v39, v40, v41);
          v43 = v83;
          v44 = v84;
          if (*((_DWORD *)v83 + 3) <= v84)
          {
            __break(0xC471u);
            JUMPOUT(0x197EAACFCLL);
          }
          v45 = FuncDeclStatement;
          v46 = *((_QWORD *)&v85[0] + 1);
          v47 = *v83;
          v87[0] = *((_QWORD *)&v85[0] + 1);
          v48 = v47 + 720 * v84;
          v49 = (_QWORD *)(v48 + 704);
          v50 = (_DWORD *)(v48 + 716);
          v51 = *(unsigned int *)(v48 + 716);
          if ((_DWORD)v51 == *(_DWORD *)(v48 + 712))
          {
            v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v51 + 1, (unint64_t)v87);
            v51 = *v50;
            *(_QWORD *)(*v49 + 8 * v51) = *v53;
          }
          else
          {
            *(_QWORD *)(*v49 + 8 * v51) = *((_QWORD *)&v85[0] + 1);
          }
          *v50 = v51 + 1;
          if (*(_DWORD *)(a1 + 7456) != 1)
          {
            v54 = *(_DWORD *)(a1 + 12);
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x197EAAD04);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1) == 0 && !*v28)
            {
              if (*((_DWORD *)v43 + 3) <= v44)
              {
                __break(0xC471u);
                JUMPOUT(0x197EAAD0CLL);
              }
              v55 = *v43;
              v90 = (WTF::StringImpl *)v46;
              v89 = 0;
              WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::inlineSet<JSC::FunctionMetadataNode * const&,JSC::Scope::NeedsDuplicateDeclarationCheck>((uint64_t)v87, (uint64_t *)(v55 + 720 * v44 + 688), (unint64_t *)&v90, &v89);
            }
          }
          goto LABEL_13;
        }
        v56 = (uint64_t *)(*(_QWORD *)(a1 + 7512) + 8);
        v57 = **(WTF::StringImpl ***)&v85[0];
        if (**(_QWORD **)&v85[0])
          *(_DWORD *)v57 += 2;
        v90 = v57;
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(v56, (WTF::AtomStringImpl *)&v90, v36, v37, v38, v39, v40, v41, (uint64_t)v87);
        v65 = v88;
        v66 = v90;
        v90 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
          {
            WTF::StringImpl::~StringImpl(v66, v58, v59, v60, v61, v62, v63, v64);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v66 -= 2;
          }
        }
        if (v65)
        {
          JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v85[0], *(_QWORD **)&v85[0], v60, v61, v62, v63, v64);
          goto LABEL_9;
        }
        if (!*(_QWORD *)(a1 + 7360))
        {
          v87[0] = **(_QWORD **)&v85[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate function name: '", v87);
        }
      }
LABEL_43:
      v45 = 0;
LABEL_13:
      *v28 = v29;
      return v45;
    }
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x197EAACF4);
  }
  if (a3 != 1)
  {
    v75 = *(_DWORD *)(a1 + 7400);
    v76 = *(_DWORD *)(a1 + 7412);
    v77 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v75;
    *(_DWORD *)(a1 + 7448) = v76;
    *(_DWORD *)(a1 + 7452) = v77;
    v78 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v78 + 4) = v75;
    v79 = *(_DWORD *)(a1 + 12);
    if (!v79)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAAD14);
    }
    v80 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v79 - 1) + 9) & 1;
    *(_BYTE *)(v78 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v78, (uint64_t)v9, 0, v80, v23, v24, v25, v26);
    v27 = 2;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use generator function declaration in single-statement context");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseClassDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD **v23;
  uint64_t v24;
  uint64_t v25;
  JSC::ParserArena *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  WTF::AtomStringImpl *v36[3];
  uint64_t v37;
  int v38;
  __int128 v39;
  unint64_t v40;
  int v41;

  v39 = *(_OWORD *)(a1 + 7400);
  v37 = *(_QWORD *)(a1 + 7416);
  v38 = *(_DWORD *)(a1 + 7424);
  v7 = *(_DWORD *)(a1 + 7400);
  memset(v36, 0, sizeof(v36));
  if (a4 == 1)
  {
    v8 = 0;
    v36[0] = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104);
  }
  else
  {
    v8 = 1;
  }
  v9 = JSC::Parser<JSC::Lexer<unsigned char>>::parseClass<JSC::ASTBuilder>(a1, a2, v8, (uint64_t)v36);
  if (!v9)
  {
    v33 = *(_DWORD *)(a1 + 7368);
    if (v33 == 20 || (v33 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22]>(a1);
    }
    return 0;
  }
  v14 = (_QWORD *)v9;
  v15 = (WTF::StringImpl **)v36[0];
  if (JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(a1, v36[0], 1, 2, v10, v11, v12, v13) >= 2)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v40 = (unint64_t)*v15;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v40);
    }
    return 0;
  }
  if (!a3)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *v15, v16, v17, v18, v19, v20, v21))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *v15, v15, v28, v29, v30, v31, v32);
      goto LABEL_6;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v40 = (unint64_t)*v15;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate class name: '", (uint64_t *)&v40);
    }
    return 0;
  }
LABEL_6:
  v35 = *(_DWORD *)(a1 + 7452);
  v34 = *(_QWORD *)(a1 + 7444);
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = (_DWORD **)v14[20];
  v40 = v37 | ((unint64_t)(HIDWORD(v37) + 1) << 32);
  v41 = v38;
  JSC::ASTBuilder::createAssignResolve(a2, (uint64_t)&v39, v23, v14, &v37, (uint64_t *)&v40, &v34, 0);
  v25 = v24;
  v26 = *(JSC::ParserArena **)(a2 + 8);
  result = *(_QWORD *)v26;
  if (*((_QWORD *)v26 + 1) - *(_QWORD *)v26 <= 0x2FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v26);
    result = *(_QWORD *)v26;
  }
  *(_QWORD *)v26 = result + 48;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E358B120;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v25;
  *(_DWORD *)(result + 28) = v22;
  *(_DWORD *)(result + 8) = v7;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)((char *)&v39 + 4));
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  _BYTE *v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t FuncDeclStatement;
  uint64_t v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  uint64_t v58;
  unsigned int v59;
  _OWORD v60[3];
  __int128 v61;

  v9 = (_DWORD *)(a1 + 7368);
  v61 = *(_OWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v16 = a5;
  v20 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v21 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, (uint64_t)v9, 0, v20, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v21;
  memset(v60, 0, 44);
  if (v21 == 191488)
  {
    v26 = *(_DWORD *)(a1 + 7400);
    v27 = *(_DWORD *)(a1 + 7412);
    v28 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v26;
    *(_DWORD *)(a1 + 7448) = v27;
    *(_DWORD *)(a1 + 7452) = v28;
    v29 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v29 + 4) = v26;
    v30 = *(_DWORD *)(a1 + 12);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAB298);
    }
    v31 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1;
    *(_BYTE *)(v29 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v29, (uint64_t)v9, 0, v31, v22, v23, v24, v25);
    v32 = 16;
  }
  else
  {
    v32 = 9;
  }
  v33 = (_BYTE *)(a1 + 7474);
  v34 = *(_BYTE *)(a1 + 7474);
  *(_BYTE *)(a1 + 7474) = v32;
  if (v16 == 1)
  {
    *(_QWORD *)&v60[0] = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104;
    v35 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 1, a3, v60, 1, a6);
  }
  else
  {
    v35 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 1, a3, v60, 1, a6);
  }
  if ((v35 & 1) == 0)
  {
    if (*v9 != 20 && (*v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse this async function");
      goto LABEL_26;
    }
LABEL_25:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    goto LABEL_26;
  }
  if (!*(_QWORD *)&v60[0])
  {
    if (*v9 != 20 && (*v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Async function statements must have a name");
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::declareFunction((uint64_t)v57, (uint64_t *)a1, *(WTF::StringImpl ***)&v60[0], v36, v37, v38, v39, v40);
  if ((v57[0] & 1) == 0)
    goto LABEL_10;
  v50 = *(_DWORD *)(a1 + 12);
  if (!v50)
  {
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x197EAB290);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v50 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare an async function named '", &v56);
    }
    goto LABEL_26;
  }
LABEL_10:
  if ((v57[0] & 2) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[84],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v56);
    }
    goto LABEL_26;
  }
  if (!a4)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v60[0], v41, v42, v43, v44, v45, v46))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v60[0], *(_QWORD **)&v60[0], v51, v52, v53, v54, v55);
      goto LABEL_12;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate function name: '", &v56);
    }
LABEL_26:
    v48 = 0;
    goto LABEL_14;
  }
LABEL_12:
  FuncDeclStatement = JSC::ASTBuilder::createFuncDeclStatement(a2, (uint64_t)&v61, (uint64_t)v60, v42, v43, v44, v45, v46);
  if (*(_DWORD *)(v58 + 12) <= v59)
  {
    __break(0xC471u);
    JUMPOUT(0x197EAB2A0);
  }
  v48 = FuncDeclStatement;
  JSC::Scope::appendFunction(*(_QWORD *)v58 + 720 * v59, *((uint64_t *)&v60[0] + 1));
LABEL_14:
  *v33 = v34;
  return v48;
}

__n128 JSC::ASTBuilder::createAssignResolve(uint64_t a1, uint64_t a2, _DWORD **a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, char a8)
{
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  if ((*(unsigned int (**)(_QWORD *))(*a4 + 152))(a4))
  {
    v30 = a4[4];
    v31 = *a3;
    if (*a3)
      *v31 += 2;
    v32 = *(WTF::StringImpl **)(v30 + 48);
    *(_QWORD *)(v30 + 48) = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  else if ((*(unsigned int (**)(_QWORD *))(*a4 + 176))(a4))
  {
    v33 = (_QWORD *)a4[20];
    if (!*v33)
      v33 = a3;
    a4[21] = v33;
  }
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  if ((unint64_t)(v25 - *(_QWORD *)v23) <= 0x57)
  {
    if (v25)
    {
      v42 = (_QWORD *)(v23 + 24);
      v43 = v25 - 8000;
      v46 = v25 - 8000;
      v44 = *(unsigned int *)(v23 + 36);
      if ((_DWORD)v44 == *(_DWORD *)(v23 + 32))
      {
        v45 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v44 + 1, (unint64_t)&v46);
        v44 = *(unsigned int *)(v23 + 36);
        *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * v44) = *v45;
      }
      else
      {
        *(_QWORD *)(*v42 + 8 * v44) = v43;
      }
      *(_DWORD *)(v23 + 36) = v44 + 1;
    }
    v24 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v23 + 8) = v24 + 8000;
  }
  *(_QWORD *)v23 = v24 + 88;
  *(_DWORD *)(v24 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v24 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v24 + 20) = -1;
  *(_BYTE *)(v24 + 24) = 0;
  *(_BYTE *)(v24 + 25) = 126;
  *(_BYTE *)(v24 + 26) = 0;
  *(_DWORD *)(v24 + 60) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v24 + 44) = result;
  *(__n128 *)(v24 + 28) = result;
  *(_QWORD *)v24 = &off_1E3588AF8;
  *(_QWORD *)(v24 + 64) = a3;
  *(_QWORD *)(v24 + 72) = a4;
  *(_BYTE *)(v24 + 80) = a8;
  v27 = *a6;
  *(_DWORD *)(v24 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v24 + 28) = v27;
  v28 = *a5;
  *(_DWORD *)(v24 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v24 + 40) = v28;
  v29 = *a7;
  *(_DWORD *)(v24 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v24 + 52) = v29;
  return result;
}

int32x2_t JSC::ASTBuilder::createExportDefaultDeclaration(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int32x2_t result;

  v8 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v8) <= 0x37)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v8 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v8 + 56;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v8 + 12) = result;
  *(_DWORD *)(v8 + 20) = -1;
  *(_BYTE *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 28) = -1;
  *(_QWORD *)v8 = &off_1E3589C48;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[83]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a variable name or a module export name string for the export declaration");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", "}");
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "end");
    WTF::PrintStream::printf(v5, "%s", " an ");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  _BYTE v25[12];
  uint64_t v26;
  uint64_t v27;
  int v28;

  v6 = *(_DWORD *)(a1 + 7400);
  v7 = *(_DWORD *)(a1 + 7404);
  v8 = *(_DWORD *)(a1 + 7408);
  v28 = 0;
  v9 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::ASTBuilder>(a1, a2, &v28, &v27, &v26, (uint64_t)v25, (uint64_t)v25, (uint64_t)v25, 1, a3, a4, &v24);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  v14 = v9;
  v15 = *(_DWORD *)(a1 + 7368);
  if (v15 == 17)
  {
    v17 = *(_DWORD *)(a1 + 7400);
    v18 = *(_DWORD *)(a1 + 7412);
    v19 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v17;
    *(_DWORD *)(a1 + 7448) = v18;
    *(_DWORD *)(a1 + 7452) = v19;
    result = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(result + 4) = v17;
    v21 = *(_DWORD *)(a1 + 12);
    if (!v21)
    {
      __break(0xC471u);
      return result;
    }
    v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v22, v10, v11, v12, v13);
  }
  else
  {
    v16 = v15 == 1 || v15 == 20;
    if (!v16 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    {
      if ((v15 & 0x100000) != 0)
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      else
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected ';' after variable declaration");
      return 0;
    }
  }
  v23 = *(uint64_t **)(a2 + 8);
  result = *v23;
  if ((unint64_t)(v23[1] - *v23) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v23;
  }
  *v23 = result + 48;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E3589A58;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v14;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 12) = v8;
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[88]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "Expected 'function' keyword following 'async' keyword with no preceding line terminator");
    WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", ".");
    v25[5]((WTF::StringPrintStream *)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

int32x2_t JSC::ASTBuilder::createExportLocalDeclaration(JSC::ParserArena *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 48;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 28) = -1;
  *(_QWORD *)v6 = &off_1E3589CF0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a3;
  return result;
}

void JSC::ModuleNameNode::~ModuleNameNode(JSC::ModuleNameNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[17]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "}");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "import attribute");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::ImportAttributesListNode::~ImportAttributesListNode(JSC::ImportAttributesListNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ImportAttributesListNode *v9;

  v9 = (JSC::ImportAttributesListNode *)*((_QWORD *)this + 1);
  if ((JSC::ImportAttributesListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  JSC::ImportAttributesListNode *v9;

  v9 = (JSC::ImportAttributesListNode *)*((_QWORD *)this + 1);
  if ((JSC::ImportAttributesListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t *WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v11 - 4);
        v28 = 0;
        v27 = v11 + 8 * v32;
        goto LABEL_11;
      }
      if (v20 == -1)
        v29 = v19;
      v18 = (v18 + v30) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v30;
    }
    while (*v19);
    if (v29)
    {
      *v29 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v29;
    }
  }
  *v19 = v14;
  v21 = *v9;
  if (*v9)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_10;
    goto LABEL_28;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v31 = 8;
      goto LABEL_23;
    }
LABEL_28:
    v31 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
LABEL_23:
    result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v9, v31, (uint64_t)v19, a3, a4, a5, a6, a7);
    v19 = result;
    v23 = *v9;
    if (*v9)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
LABEL_10:
  v27 = v23 + 8 * v26;
  v28 = 1;
LABEL_11:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v27;
  *(_BYTE *)(a8 + 16) = v28;
  return result;
}

unint64_t WTF::Vector<std::tuple<JSC::Identifier const*,JSC::Identifier const*>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
      if (v15 < 4)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_34;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_OWORD *)(v16 + v27) = *(_OWORD *)(v10 + v27);
          v27 += 16;
        }
        while (16 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x197EAC1A8);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 4)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_43;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void JSC::ExportSpecifierListNode::~ExportSpecifierListNode(JSC::ExportSpecifierListNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExportSpecifierListNode *v9;

  v9 = (JSC::ExportSpecifierListNode *)*((_QWORD *)this + 1);
  if ((JSC::ExportSpecifierListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  JSC::ExportSpecifierListNode *v9;

  v9 = (JSC::ExportSpecifierListNode *)*((_QWORD *)this + 1);
  if ((JSC::ExportSpecifierListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ExportSpecifierNode::~ExportSpecifierNode(JSC::ExportSpecifierNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 4)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 4)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t JSC::ASTBuilder::createFuncDeclStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int32x2_t v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v11 = *(uint64_t **)(a1 + 8);
  v12 = *v11;
  if ((unint64_t)(v11[1] - *v11) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    v12 = *v11;
  }
  *v11 = v12 + 48;
  v14 = *(_DWORD ***)a3;
  v13 = *(_QWORD *)(a3 + 8);
  v15 = *(unsigned int *)(a3 + 24);
  v16 = *(_DWORD *)(a3 + 28);
  v17 = *(_DWORD *)(a3 + 32);
  v18 = *(_DWORD *)(a3 + 40);
  v19 = **(_DWORD ***)(a1 + 16);
  if (v19)
    ++v19[2];
  v20 = (v16 + 1);
  if (v17 <= 1)
    v17 = 1;
  v21 = (v17 - 1);
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  v22 = v18 & ~(v18 >> 31);
  *(int32x2_t *)(v12 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 28) = -1;
  *(_QWORD *)v12 = &off_1E358A9E0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v13;
  if (v19)
    ++v19[2];
  v23 = v15 | (v20 << 32);
  v24 = *(_DWORD **)(v13 + 80);
  *(_QWORD *)(v13 + 80) = v19;
  v25 = v21 | (v22 << 32);
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  *(_QWORD *)(v13 + 88) = v23;
  *(_QWORD *)(v13 + 96) = v25;
  v26 = *v14;
  if (*v14)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  *(_DWORD *)(v13 + 36) = 2;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  if (**(_QWORD **)a3 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 41952) + 880))
    *(_DWORD *)(a1 + 24) |= 2u;
  v28 = *(_QWORD *)(a3 + 8);
  v29 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(v28 + 136) = *(_DWORD *)(a3 + 36);
  v30 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v28 + 16) = v29;
  *(int32x2_t *)(v28 + 20) = vrev64_s32(v30);
  return v12;
}

_QWORD *JSC::Scope::appendFunction(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (_QWORD *)(a1 + 704);
  v4 = *(unsigned int *)(a1 + 716);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 712))
  {
    result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 716);
    *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * v4) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v4) = a2;
  }
  *(_DWORD *)(a1 + 716) = v4 + 1;
  return result;
}

__n128 WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::Identifier const*,JSC::Identifier const*>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 16 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 16 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, unsigned int a11, _BYTE *a12)
{
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  WTF::AtomStringImpl *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  int v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  void (**v74)(JSC::EmptyVarExpression *__hidden);
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v79;
  char *v80;
  int v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  const char *v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned __int8 v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  int32x2_t v117;
  int v118;
  uint64_t v121;
  _OWORD *v123;
  unsigned __int8 *v125;
  uint64_t v128;
  unint64_t v129;
  int v130;
  const char *v131;
  int v132;
  _OWORD v133[3];
  char *v134;
  uint64_t v135;
  uint64_t v136;

  v118 = 0;
  v14 = 0;
  v15 = 0;
  v125 = (unsigned __int8 *)(a1 + 7344);
  memset(&v133[1], 255, 24);
  v16 = (_OWORD *)(a1 + 7400);
  v17 = (int *)(a1 + 7368);
  v121 = a1 + 7444;
  v18 = a1 + 7416;
  v117 = 0;
  v123 = (_OWORD *)(a1 + 7400);
  while (2)
  {
    v128 = v14;
    while (1)
    {
      *a4 = 0;
      v133[0] = *v16;
      v19 = *(_DWORD *)(a1 + 7400);
      v20 = *(_DWORD *)(a1 + 7412);
      v21 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v19;
      *(_DWORD *)(a1 + 7448) = v20;
      *(_DWORD *)(a1 + 7452) = v21;
      v22 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v22 + 4) = v19;
      v23 = *(_DWORD *)(a1 + 12);
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x197EAD458);
      }
      v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
      *(_BYTE *)(v22 + 56) = 0;
      v25 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v22, (uint64_t)v17, 0, v24, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v25;
      if (v15)
        v133[0] = *v16;
      ++*a3;
      if (v25 == 12)
        break;
      if (v25 == 13)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use a private name to declare a variable");
        return 0;
      }
      if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v25, *(_QWORD **)(a1 + 7376)))
        break;
      v88 = *v17;
      if (*v17 == 546)
        break;
      v89 = a4;
      if (v88 != 545)
      {
        v28 = a10 == 2;
        v90 = a2;
        if (v88 != 1048592)
          goto LABEL_87;
        v91 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v92 = **(_QWORD **)(a1 + 7376);
        if (v92 != *(_QWORD *)(v91 + 496))
          goto LABEL_86;
      }
      v93 = *(_DWORD *)(a1 + 12);
      if (!v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197EAD448);
      }
      v94 = v93 - 1;
      v28 = a10 == 2;
      v90 = a2;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v94 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v94 + 11) & 2) == 0)
      {
        break;
      }
      if (v88 == 1048592)
      {
        v91 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v92 = **(_QWORD **)(a1 + 7376);
LABEL_86:
        v28 = a10 == 2;
        v90 = a2;
        if (v92 == *(_QWORD *)(v91 + 128))
          break;
      }
LABEL_87:
      v95 = v125[96];
      v125[96] = 1;
      v96 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, v90, a10, a11, 0, 0, v28, 0);
      v125[96] = v95;
      v97 = *(_DWORD *)(a1 + 7368);
      if (!v96)
      {
        if (v97 != 20 && (v97 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
          return 0;
        }
        goto LABEL_137;
      }
      v98 = v96;
      if (a9 == 1 && v97 != 21)
      {
        if (v97 != 20 && (v97 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an initializer in destructuring variable declaration");
          return 0;
        }
LABEL_137:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        return 0;
      }
      *v89 = v96;
      if (v97 == 21)
      {
        v99 = *(_DWORD *)(a1 + 7400);
        v100 = *(_DWORD *)(a1 + 7412);
        v101 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v99;
        *(_DWORD *)(a1 + 7448) = v100;
        *(_DWORD *)(a1 + 7452) = v101;
        v102 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v102 + 4) = v99;
        v103 = *(_DWORD *)(a1 + 12);
        if (!v103)
        {
          __break(0xC471u);
          JUMPOUT(0x197EAD440);
        }
        v104 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v103 - 1) + 9) & 1;
        *(_BYTE *)(v102 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v102, (uint64_t)v17, 0, v104, (uint64_t)a5, a6, a7, a8);
        LODWORD(v134) = 0;
        v135 = *(_QWORD *)(a1 + 7496);
        v136 = a1;
        *(_QWORD *)(a1 + 7496) = &v134;
        v105 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v134);
        *(_QWORD *)(v136 + 7496) = v135;
        if (*(_QWORD *)(a1 + 7360))
          return 0;
        v106 = v105;
        v107 = *(uint64_t **)(a2 + 8);
        v66 = *v107;
        if ((unint64_t)(v107[1] - *v107) <= 0x2F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
          v66 = *v107;
        }
        v39 = 0;
        *v107 = v66 + 48;
        *(_DWORD *)(v66 + 8) = v133[0];
        *(int32x2_t *)(v66 + 12) = vrev64_s32(*(int32x2_t *)((char *)v133 + 4));
        *(_DWORD *)(v66 + 20) = -1;
        *(_BYTE *)(v66 + 24) = 0;
        *(_BYTE *)(v66 + 25) = 126;
        *(_BYTE *)(v66 + 26) = 0;
        *(_QWORD *)v66 = &off_1E358B880;
        *(_QWORD *)(v66 + 32) = v98;
        *(_QWORD *)(v66 + 40) = v106;
        *a5 = v106;
        a4 = v89;
        v61 = a10 == 2;
        v62 = a2;
        v14 = v128;
        goto LABEL_25;
      }
      a4 = v89;
      v16 = v123;
      if (v97 != 6)
        return v15;
    }
    v30 = *(_DWORD *)(a1 + 12);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAD460);
    }
    v31 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 10);
    if ((v31 & 0x100000) != 0
      && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
      return 0;
    }
    v32 = *v17;
    if (*v17 == 544)
    {
LABEL_10:
      if (a10 - 1 <= 1)
      {
        if ((v32 & 0x100000) != 0)
          goto LABEL_137;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64]>(a1);
        return 0;
      }
      if (v32 == 1048592)
      {
        v114 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v115 = **(_QWORD **)(a1 + 7376);
        goto LABEL_151;
      }
    }
    else
    {
      if (v32 == 546)
        goto LABEL_12;
      if (v32 == 1048592)
      {
        v114 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v115 = **(_QWORD **)(a1 + 7376);
        if (v115 == *(_QWORD *)(v114 + 328))
          goto LABEL_10;
LABEL_151:
        if (v115 == *(_QWORD *)(v114 + 128))
        {
LABEL_12:
          v33 = *v125;
          v34 = (v31 & 0x102000) != 0 || v33 == 0;
          if (v34 || *(_DWORD *)(a1 + 7480) == 1)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (a10 >= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x197EAD3B4);
              }
              v134 = off_1E357B338[a10];
              if (v33)
                v86 = (v31 >> 13) & 1;
              else
                v86 = 1;
              v87 = "in a static block";
              if (v86)
                v87 = "in an async function";
              if ((v31 & 0x100000) == 0 && (v86 & 1) == 0)
              {
                if (*(_DWORD *)(a1 + 7480) != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EAD3D4);
                }
                v87 = "in a module";
              }
              v131 = v87;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", (const char **)&v134, &v131);
            }
            return 0;
          }
        }
      }
    }
    v131 = *(const char **)v18;
    v35 = v131;
    v132 = *(_DWORD *)(v18 + 8);
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7404);
    v38 = *(_DWORD *)(a1 + 7408);
    *(_DWORD *)(a6 + 8) = v132;
    *(_QWORD *)a6 = v35;
    v39 = *(WTF::AtomStringImpl **)(a1 + 7376);
    *(_QWORD *)&v133[2] = *(_QWORD *)(v18 + 16);
    v133[1] = *(_OWORD *)v18;
    LODWORD(v35) = *(_DWORD *)(a1 + 7400);
    v40 = *(_DWORD *)(a1 + 7412);
    v41 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = (_DWORD)v35;
    *(_DWORD *)(a1 + 7448) = v40;
    *(_DWORD *)(a1 + 7452) = v41;
    v42 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v42 + 4) = (_DWORD)v35;
    v43 = *(_DWORD *)(a1 + 12);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAD4A8);
    }
    v44 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1;
    *(_BYTE *)(v42 + 56) = 0;
    v45 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v42, (uint64_t)v17, 0, v44, v26, v27, v28, v29);
    *(_DWORD *)(a1 + 7368) = v45;
    v50 = JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(a1, v39, a10, 2, v46, v47, v48, v49);
    if (v50)
    {
      if ((v50 & 1) != 0)
      {
        v113 = *(_DWORD *)(a1 + 12);
        if (!v113)
        {
          __break(0xC471u);
          JUMPOUT(0x197EAD450);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v113 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v134 = *(char **)v39;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v134);
          }
          return 0;
        }
      }
      if (v50 >= 2)
      {
        if (a10 == 2)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v134 = *(char **)v39;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v134);
          }
        }
        else if (a10 == 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v134 = *(char **)v39;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v134);
          }
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          v134 = *(char **)v39;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v134);
        }
        return 0;
      }
    }
    if (!a11)
    {
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)v39, v51, v52, (uint64_t)a5, a6, a7, a8))
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v134 = *(char **)v39;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v134);
        }
        return 0;
      }
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)v39, v39, v108, v109, v110, v111, v112);
    }
    if (v45 != 21)
    {
      v116 = a4;
      if (a9 || a10 != 2)
      {
        v14 = v128;
        if (a9 && a10 == 2)
        {
          if (*v17 == 20 || (*v17 & 0x100000) != 0)
            goto LABEL_137;
          if (!*(_QWORD *)(a1 + 7360))
          {
            v134 = *(char **)v39;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(a1, (uint64_t *)&v134);
          }
          return 0;
        }
        if (!a10)
        {
          v73 = *(uint64_t **)(a2 + 8);
          v66 = *v73;
          if ((unint64_t)(v73[1] - *v73) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
            v14 = v128;
            v66 = *v73;
          }
          *v73 = v66 + 40;
          *(_DWORD *)(v66 + 8) = v36;
          *(_DWORD *)(v66 + 12) = v38;
          *(_DWORD *)(v66 + 16) = v37;
          *(_DWORD *)(v66 + 20) = -1;
          *(_BYTE *)(v66 + 24) = 0;
          *(_BYTE *)(v66 + 25) = 126;
          *(_BYTE *)(v66 + 26) = 0;
          v74 = &off_1E3589E40;
          goto LABEL_40;
        }
      }
      else
      {
        *a12 = 1;
        v14 = v128;
      }
      v85 = *(uint64_t **)(a2 + 8);
      v66 = *v85;
      if ((unint64_t)(v85[1] - *v85) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v14 = v128;
        v66 = *v85;
      }
      *v85 = v66 + 40;
      *(_DWORD *)(v66 + 8) = v36;
      *(_DWORD *)(v66 + 12) = v38;
      *(_DWORD *)(v66 + 16) = v37;
      *(_DWORD *)(v66 + 20) = -1;
      *(_BYTE *)(v66 + 24) = 0;
      *(_BYTE *)(v66 + 25) = 126;
      *(_BYTE *)(v66 + 26) = 0;
      v74 = &off_1E3589FC0;
LABEL_40:
      *(_QWORD *)v66 = v74;
      *(_QWORD *)(v66 + 32) = v39;
      a4 = v116;
      v61 = a10 == 2;
      v62 = a2;
LABEL_25:
      if (v15)
      {
        if (!v14)
        {
          v79 = a4;
          *(_BYTE *)(v15 + 24) = 1;
          v80 = *(char **)(v15 + 8);
          v81 = *(_DWORD *)(v15 + 16);
          v134 = v80;
          LODWORD(v135) = v81;
          v82 = *(_QWORD *)(a1 + 7520);
          if (v82 && (v80 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v82, (uint64_t)&v134);
          v83 = *(uint64_t **)(v62 + 8);
          v84 = *v83;
          if ((unint64_t)(v83[1] - *v83) <= 0x2F)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v62 + 8));
            v84 = *v83;
          }
          *v83 = v84 + 48;
          *(_DWORD *)(v84 + 8) = v118;
          *(int32x2_t *)(v84 + 12) = v117;
          *(_DWORD *)(v84 + 20) = -1;
          *(_BYTE *)(v84 + 24) = 0;
          *(_BYTE *)(v84 + 25) = 126;
          *(_BYTE *)(v84 + 26) = 0;
          *(_QWORD *)v84 = &off_1E35896F8;
          *(_QWORD *)(v84 + 32) = v15;
          *(_QWORD *)(v84 + 40) = 0;
          v15 = v84;
          v128 = v84;
          a4 = v79;
        }
        v67 = a4;
        *(_BYTE *)(v66 + 24) = 1;
        v68 = *(char **)(v66 + 8);
        v69 = *(_DWORD *)(v66 + 16);
        v134 = v68;
        LODWORD(v135) = v69;
        v70 = *(_QWORD *)(a1 + 7520);
        if (v70 && (v68 & 0x80000000) == 0)
          JSC::DebuggerPausePositions::appendPause(v70, (uint64_t)&v134);
        v71 = *(uint64_t **)(v62 + 8);
        v72 = *v71;
        if ((unint64_t)(v71[1] - *v71) <= 0x2F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v62 + 8));
          v72 = *v71;
        }
        *v71 = v72 + 48;
        *(_DWORD *)(v72 + 8) = v133[0];
        *(int32x2_t *)(v72 + 12) = vrev64_s32(*(int32x2_t *)((char *)v133 + 4));
        *(_DWORD *)(v72 + 20) = -1;
        *(_BYTE *)(v72 + 24) = 0;
        *(_BYTE *)(v72 + 25) = 126;
        *(_BYTE *)(v72 + 26) = 0;
        *(_QWORD *)v72 = &off_1E35896F8;
        *(_QWORD *)(v72 + 32) = v66;
        *(_QWORD *)(v72 + 40) = 0;
        *(_QWORD *)(v128 + 40) = v72;
        v14 = v72;
        a4 = v67;
      }
      else
      {
        v118 = v133[0];
        v117 = vrev64_s32(*(int32x2_t *)((char *)v133 + 4));
        v15 = v66;
      }
      goto LABEL_27;
    }
    v53 = *(_DWORD *)(a1 + 7424);
    v129 = *(unsigned int *)(a1 + 7416) | ((unint64_t)(*(_DWORD *)(a1 + 7420) + 1) << 32);
    v130 = v53;
    v54 = *(_DWORD *)(v18 + 8);
    *(_QWORD *)a7 = *(_QWORD *)v18;
    *(_DWORD *)(a7 + 8) = v54;
    v55 = *(_DWORD *)(a1 + 7400);
    v56 = *(_DWORD *)(a1 + 7412);
    v57 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v55;
    *(_DWORD *)(a1 + 7448) = v56;
    *(_DWORD *)(a1 + 7452) = v57;
    v58 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v58 + 4) = v55;
    v59 = *(_DWORD *)(a1 + 12);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x197EAD4A0);
    }
    v60 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v59 - 1) + 9) & 1;
    *(_BYTE *)(v58 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v58, (uint64_t)v17, 0, v60, (uint64_t)a5, a6, a7, a8);
    v61 = a10 == 2;
    v62 = a2;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    LODWORD(v134) = 0;
    v135 = *(_QWORD *)(a1 + 7496);
    v136 = a1;
    *(_QWORD *)(a1 + 7496) = &v134;
    v63 = (_QWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v134);
    *(_QWORD *)(v136 + 7496) = v135;
    v64 = *(_QWORD *)v121;
    *(_DWORD *)(a8 + 8) = *(_DWORD *)(v121 + 8);
    *(_QWORD *)a8 = v64;
    *a5 = (uint64_t)v63;
    if (!v63)
    {
      if (*v17 == 20 || (*v17 & 0x100000) != 0)
        goto LABEL_137;
      if (!*(_QWORD *)(a1 + 7360))
      {
        v134 = *(char **)v39;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v134);
      }
      return 0;
    }
    JSC::ASTBuilder::createAssignResolve(a2, (uint64_t)v133, (_DWORD **)v39, v63, (uint64_t *)&v131, (uint64_t *)&v129, (uint64_t *)v121, a10 == 2);
    v66 = v65;
    v14 = v128;
    if (v65)
      goto LABEL_25;
LABEL_27:
    v16 = v123;
    if (*v17 == 6)
      continue;
    break;
  }
  if (v39)
  {
    v75 = *(uint64_t **)(v62 + 8);
    v76 = *v75;
    if ((unint64_t)(v75[1] - *v75) <= 0x2F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v62 + 8));
      v76 = *v75;
    }
    *v75 = v76 + 48;
    v77 = *(_QWORD *)&v133[1];
    *(_QWORD *)v76 = &off_1E358B760;
    *(_QWORD *)(v76 + 8) = v77;
    *(_DWORD *)(v76 + 16) = DWORD2(v133[1]);
    *(_QWORD *)(v76 + 20) = *(_QWORD *)((char *)&v133[1] + 12);
    *(_DWORD *)(v76 + 28) = DWORD1(v133[2]);
    *(_QWORD *)(v76 + 32) = v39;
    *(_BYTE *)(v76 + 40) = v61;
    *a4 = v76;
  }
  return v15;
}

int32x2_t JSC::ASTBuilder::createImportDeclaration(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int32x2_t result;

  v10 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v10) <= 0x3F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v10 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v10 + 64;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v10 + 12) = result;
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = -1;
  *(_QWORD *)v10 = &off_1E3589AF8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = a3;
  *(_QWORD *)(v10 + 48) = a4;
  *(_QWORD *)(v10 + 56) = a5;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseImportClauseItem<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  BOOL v72;
  BOOL isAllowedIdentifierLet;
  BOOL isAllowedIdentifierYield;
  WTF::PrintStream *v75;

  v11 = *(_DWORD *)(a1 + 7400);
  v12 = *(_DWORD *)(a1 + 7404);
  v13 = *(_DWORD *)(a1 + 7408);
  if (a3 == 2)
  {
    v14 = *(_DWORD *)(a1 + 7368);
    v15 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v17 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v11;
    *(_DWORD *)(a1 + 7448) = v17;
    *(_DWORD *)(a1 + 7452) = v12;
    v18 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v18 + 4) = v11;
    v19 = *(_DWORD *)(a1 + 12);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADBE8);
    }
    v20 = a1 + 7368;
    v21 = (WTF::AtomStringImpl *)(v16 + 192);
    v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v19 - 1) + 9) & 1;
    *(_BYTE *)(v18 + 56) = 0;
    goto LABEL_4;
  }
  if (a3 != 1)
  {
    if (a3)
    {
      v21 = 0;
      v15 = 0;
      goto LABEL_7;
    }
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v34 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v11;
    *(_DWORD *)(a1 + 7448) = v34;
    *(_DWORD *)(a1 + 7452) = v12;
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v35 + 4) = v11;
    v36 = *(_DWORD *)(a1 + 12);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADBF8);
    }
    v29 = a1 + 7368;
    v37 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1;
    *(_BYTE *)(v35 + 56) = 0;
    v38 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, v37, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v38;
    if (v38 != 12
      || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 888)
      || *(_BYTE *)(a1 + 7384))
    {
      if (v38 != 20 && (v38 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected 'as' before imported binding name");
        return 0;
      }
      goto LABEL_29;
    }
    v61 = *(_DWORD *)(a1 + 7400);
    v62 = *(_DWORD *)(a1 + 7412);
    v63 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v61;
    *(_DWORD *)(a1 + 7448) = v62;
    *(_DWORD *)(a1 + 7452) = v63;
    v64 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v64 + 4) = v61;
    v65 = *(_DWORD *)(a1 + 12);
    if (!v65)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADC18);
    }
    v66 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v65 - 1) + 9) & 1;
    *(_BYTE *)(v64 + 56) = 0;
    v67 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v64, a1 + 7368, 0, v66, v39, v40, v41, v42);
    *(_DWORD *)(a1 + 7368) = v67;
    if (v67 == 12)
    {
      v14 = 12;
    }
    else
    {
      isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v67, *(_QWORD **)(a1 + 7376));
      v14 = *(_DWORD *)(a1 + 7368);
      if (!isAllowedIdentifierLet)
      {
        isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376));
        v14 = *(_DWORD *)(a1 + 7368);
        if (!isAllowedIdentifierYield && v14 != 546)
        {
          if (v14 != 1048592)
            goto LABEL_91;
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_29;
          v14 = 1048592;
        }
      }
    }
    v15 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v68 = *(_DWORD *)(a1 + 7400);
    v69 = *(_DWORD *)(a1 + 7412);
    v70 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v68;
    *(_DWORD *)(a1 + 7448) = v69;
    *(_DWORD *)(a1 + 7452) = v70;
    v18 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v18 + 4) = v68;
    v58 = *(_DWORD *)(a1 + 12);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADC20);
    }
    v21 = (WTF::AtomStringImpl *)(v33 + 32);
    goto LABEL_43;
  }
  v14 = *(_DWORD *)(a1 + 7368);
  v21 = *(WTF::AtomStringImpl **)(a1 + 7376);
  if (v14 == 14)
  {
    v44 = *(_QWORD *)v21;
    if (*(_QWORD *)v21)
    {
      v45 = *(unsigned int *)(v44 + 16);
      v46 = *(unsigned __int16 **)(v44 + 8);
      LODWORD(v44) = *(_DWORD *)(v44 + 4);
      v47 = (v45 >> 2) & 1;
    }
    else
    {
      v46 = 0;
      v47 = 1;
    }
    if (WTF::hasUnpairedSurrogate(v46, v44 | (unint64_t)(v47 << 32)))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[65]>(a1);
      return 0;
    }
  }
  v26 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v11;
  *(_DWORD *)(a1 + 7448) = v26;
  *(_DWORD *)(a1 + 7452) = v12;
  v27 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v27 + 4) = v11;
  v28 = *(_DWORD *)(a1 + 12);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197EADBF0);
  }
  v29 = a1 + 7368;
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 9) & 1;
  *(_BYTE *)(v27 + 56) = 0;
  v31 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v27, a1 + 7368, 0, v30, a5, a6, a7, a8);
  v32 = 0;
  *(_DWORD *)(a1 + 7368) = v31;
  if (v31 == 12)
    v32 = **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 888)
       && *(_BYTE *)(a1 + 7384) == 0;
  if (v14 == 14 && !v32)
  {
    if (v31 != 20 && (v31 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected 'as' after the module export name string");
      return 0;
    }
    goto LABEL_29;
  }
  if (v32)
  {
    v48 = *(_DWORD *)(a1 + 7400);
    v49 = *(_DWORD *)(a1 + 7412);
    v50 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v48;
    *(_DWORD *)(a1 + 7448) = v49;
    *(_DWORD *)(a1 + 7452) = v50;
    v51 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v51 + 4) = v48;
    v52 = *(_DWORD *)(a1 + 12);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADC00);
    }
    v53 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v52 - 1) + 9) & 1;
    *(_BYTE *)(v51 + 56) = 0;
    v54 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v51, a1 + 7368, 0, v53, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v54;
    if (v54 == 12)
    {
      v14 = 12;
      goto LABEL_42;
    }
    v71 = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v54, *(_QWORD **)(a1 + 7376));
    v14 = *(_DWORD *)(a1 + 7368);
    if (v71
      || (v72 = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)), v14 = *(_DWORD *)(a1 + 7368), v72)|| v14 == 546)
    {
LABEL_42:
      v15 = *(WTF::AtomStringImpl **)(a1 + 7376);
      v55 = *(_DWORD *)(a1 + 7400);
      v56 = *(_DWORD *)(a1 + 7412);
      v57 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v55;
      *(_DWORD *)(a1 + 7448) = v56;
      *(_DWORD *)(a1 + 7452) = v57;
      v18 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v18 + 4) = v55;
      v58 = *(_DWORD *)(a1 + 12);
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x197EADC08);
      }
LABEL_43:
      v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1;
      *(_BYTE *)(v18 + 56) = 0;
      v20 = v29;
LABEL_4:
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v18, v20, 0, v22, a5, a6, a7, a8);
      goto LABEL_5;
    }
    if (v14 == 1048592)
    {
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v14 = 1048592;
        goto LABEL_42;
      }
LABEL_29:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
      return 0;
    }
LABEL_91:
    if (v14 != 20 && (v14 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a variable name for the import declaration");
      return 0;
    }
    goto LABEL_29;
  }
  v15 = v21;
LABEL_5:
  if (v14 == 546)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as an imported binding name");
    return 0;
  }
  if ((v14 & 0x200) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use keyword as imported binding name");
    return 0;
  }
LABEL_7:
  v23 = JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(a1, v15, 2, a3 == 0, a5, a6, a7, a8);
  if (v23)
  {
    if ((v23 & 1) == 0)
      goto LABEL_45;
    v60 = *(_DWORD *)(a1 + 12);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EADC10);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v75 = *(WTF::PrintStream **)v15;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[42],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v75);
      }
    }
    else
    {
LABEL_45:
      if (v23 < 2)
        goto LABEL_8;
      if (!*(_QWORD *)(a1 + 7360))
      {
        v75 = *(WTF::PrintStream **)v15;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[49],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v75);
      }
    }
    return 0;
  }
LABEL_8:
  v24 = *(uint64_t **)(a2 + 8);
  result = *v24;
  if ((unint64_t)(v24[1] - *v24) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v24;
  }
  *v24 = result + 48;
  *(_DWORD *)(result + 8) = v11;
  *(_DWORD *)(result + 12) = v13;
  *(_DWORD *)(result + 16) = v12;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E357B290;
  *(_QWORD *)(result + 32) = v21;
  *(_QWORD *)(result + 40) = v15;
  return result;
}

_QWORD *JSC::ASTBuilder::appendImportSpecifier(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2;
  v2 = *((unsigned int *)result + 5);
  if ((_DWORD)v2 == *((_DWORD *)result + 4))
    return WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ImportSpecifierNode *&>((uint64_t)(result + 1), (unint64_t)&v3);
  *(_QWORD *)(result[1] + 8 * v2) = a2;
  *((_DWORD *)result + 5) = v2 + 1;
  return result;
}

void JSC::ImportSpecifierListNode::~ImportSpecifierListNode(JSC::ImportSpecifierListNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ImportSpecifierListNode *v9;

  v9 = (JSC::ImportSpecifierListNode *)*((_QWORD *)this + 1);
  if ((JSC::ImportSpecifierListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  JSC::ImportSpecifierListNode *v9;

  v9 = (JSC::ImportSpecifierListNode *)*((_QWORD *)this + 1);
  if ((JSC::ImportSpecifierListNode *)((char *)this + 24) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[42],WTF::UniquedStringImpl *,char const(&)[16]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare an imported binding named ");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[49],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, WTF::PrintStream **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  WTF *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v35 = off_1E3572250;
    v36 = (WTF *)v38;
    v37 = xmmword_199122F80;
    v38[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v35, "%s", "Cannot declare an imported binding name twice: '");
    WTF::PrintStream::printImpl<WTF::UniquedStringImpl *,char [2],char [2]>((WTF *)&v35, *a2, v4, v5, v6, v7, v8, v9, v10, v11);
    v35[5]((WTF::StringPrintStream *)&v35);
    WTF::String::fromUTF8WithLatin1Fallback(v36, v37, &v34);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v34, v12, v13, v14, v15, v16, v17);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v36 != (WTF *)v38)
      WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
  }
}

void JSC::ImportSpecifierNode::~ImportSpecifierNode(JSC::ImportSpecifierNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ImportSpecifierNode *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::ImportSpecifierNode *,3ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::ImportSpecifierNode *,3ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 4)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 3;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  void **v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void ***v55;
  int v56;
  char v57;
  __int128 v58;
  _OWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD **v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;

  v8 = a1;
  v112 = 0;
  v113 = 0;
  v9 = *(_QWORD *)(a1 + 7288);
  v10 = *(unsigned __int8 **)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 96);
  if ((unint64_t)v10 >= v11)
  {
    v12 = 0;
LABEL_37:
    v46 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::ASTBuilder>(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_38;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_BYTE *)(v8 + 7344);
  v15 = (int *)(v8 + 7368);
  v16 = v8 + 7416;
  v17 = v8 + 7428;
  while (2)
  {
    v18 = v11 - (_QWORD)v10;
    while (1)
    {
      v19 = *v10;
      if ((v19 - 9) < 5 || v19 == 32)
        goto LABEL_4;
      v20 = a3;
      v104 = v15;
      v105 = v8;
      v103 = (uint64_t)a2;
      if (v19 == 58)
        break;
      if (v19 != 160)
        goto LABEL_37;
LABEL_4:
      ++v10;
      if (!--v18)
        goto LABEL_37;
    }
    v21 = *v15;
    if (*v15 == 544)
      goto LABEL_9;
    switch(v21)
    {
      case 545:
LABEL_84:
        v62 = *(_DWORD *)(v105 + 12);
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x197EAE7ECLL);
        }
        v63 = v62 - 1;
        if ((*(_BYTE *)(*(_QWORD *)v105 + 720 * v63 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)v105 + 720 * v63 + 11) & 2) == 0)
        {
          goto LABEL_17;
        }
        if (!*(_QWORD *)(v105 + 7360))
        {
          v52 = v105;
          *(_QWORD *)&v106 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(v105);
          v53 = "Cannot use 'yield' as a label ";
          goto LABEL_56;
        }
        break;
      case 546:
        goto LABEL_12;
      case 1048592:
        v60 = *(_QWORD **)(*(_QWORD *)(v105 + 7216) + 41952);
        v61 = **(_QWORD **)(v105 + 7376);
        if (v61 == v60[41])
        {
LABEL_9:
          v22 = *(_DWORD *)(v105 + 12);
          if (!v22)
          {
LABEL_132:
            __break(0xC471u);
            JUMPOUT(0x197EAE748);
          }
          if ((*(_BYTE *)(*(_QWORD *)v105 + 720 * (v22 - 1) + 9) & 1) == 0)
          {
            if (v21 == 1048592)
            {
              v60 = *(_QWORD **)(*(_QWORD *)(v105 + 7216) + 41952);
              v61 = **(_QWORD **)(v105 + 7376);
              goto LABEL_98;
            }
            goto LABEL_17;
          }
          if (!*(_QWORD *)(v105 + 7360))
          {
            *(_QWORD *)&v106 = "in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(v105, (const char **)&v106);
          }
        }
        else
        {
LABEL_98:
          if (v61 != v60[16])
          {
LABEL_83:
            if (v61 == v60[62])
              goto LABEL_84;
LABEL_17:
            v24 = *(void ***)(v105 + 7376);
            v110 = *(_QWORD *)v16;
            v111 = *(_DWORD *)(v16 + 8);
            v108 = *(_QWORD *)v17;
            v109 = *(_DWORD *)(v17 + 8);
            v25 = *(_DWORD *)(v105 + 7400);
            v100 = *(_DWORD *)(v105 + 7408);
            v101 = *(_DWORD *)(v105 + 7404);
            v26 = *(_DWORD *)(v105 + 7412);
            *(_DWORD *)(v105 + 7444) = v25;
            *(_DWORD *)(v105 + 7448) = v26;
            *(_DWORD *)(v105 + 7452) = v101;
            v102 = v25;
            *(_DWORD *)(v9 + 4) = v25;
            v27 = *(_DWORD *)(v105 + 12);
            if (!v27)
            {
              __break(0xC471u);
              JUMPOUT(0x197EAE758);
            }
            v28 = *(_BYTE *)(*(_QWORD *)v105 + 720 * (v27 - 1) + 9) & 1;
            *(_BYTE *)(v9 + 56) = 0;
            v29 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v9, (uint64_t)v104, 0, v28, a5, a6, a7, a8);
            *(_DWORD *)(v105 + 7368) = v29;
            if (v29 == 18)
            {
              v30 = *(_DWORD *)(v105 + 7400);
              v31 = *(_DWORD *)(v105 + 7412);
              v32 = *(_DWORD *)(v105 + 7404);
              *(_DWORD *)(v105 + 7444) = v30;
              *(_DWORD *)(v105 + 7448) = v31;
              *(_DWORD *)(v105 + 7452) = v32;
              v33 = *(_QWORD *)(v105 + 7288);
              *(_DWORD *)(v33 + 4) = v30;
              v34 = *(_DWORD *)(v105 + 12);
              if (!v34)
              {
                __break(0xC471u);
                JUMPOUT(0x197EAE760);
              }
              v35 = *(_BYTE *)(*(_QWORD *)v105 + 720 * (v34 - 1) + 9) & 1;
              *(_BYTE *)(v33 + 56) = 0;
              v36 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v33, (uint64_t)v104, 0, v35, a5, a6, a7, a8);
              *(_DWORD *)(v105 + 7368) = v36;
              if (!v13)
              {
LABEL_21:
                v37 = *(_DWORD *)(v105 + 12);
                if (!v37)
                {
LABEL_80:
                  __break(0xC471u);
                  JUMPOUT(0x197EAE768);
                }
                v38 = v37 - 1;
                v39 = *(_QWORD *)v105;
                v40 = v37 - 1;
                while (1)
                {
                  v41 = *(_QWORD *)(v39 + 720 * v38 + 40);
                  if (v41)
                  {
                    v42 = *(unsigned int *)(v41 + 12);
                    v43 = 16 * v42 - 16;
                    v44 = v42;
                    do
                    {
                      if ((int)v44 < 1)
                        goto LABEL_24;
                      if (--v44 >= v42)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197EAE770);
                      }
                      v45 = *(void **)(*(_QWORD *)v41 + v43);
                      v43 -= 16;
                      a2 = *v24;
                    }
                    while (v45 != *v24);
                    if (v36 != 20 && (v36 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(v105 + 7360))
                      {
                        *(_QWORD *)&v106 = v45;
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(v105, 1, "Cannot find scope for the label '", (uint64_t *)&v106);
                      }
                      goto LABEL_53;
                    }
                    goto LABEL_52;
                  }
LABEL_24:
                  if (!v40 || (*(_BYTE *)(v39 + 720 * v38 + 12) & 0x40) != 0)
                    break;
                  v40 = v38 - 1;
                  v38 = (v38 - 1);
                  if (v37 <= v40)
                    goto LABEL_80;
                }
                *(_QWORD *)&v106 = v24;
                *((_QWORD *)&v106 + 1) = v110;
                LODWORD(v107) = v111;
                *(_QWORD *)((char *)&v107 + 4) = v108;
                HIDWORD(v107) = v109;
                if (v13 == (_DWORD)v113)
                {
                  v48 = (_OWORD *)WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v112, v13 + 1, (unint64_t)&v106);
                  v13 = HIDWORD(v113);
                  v12 = v112;
                  v49 = (_OWORD *)(v112 + 32 * HIDWORD(v113));
                  v50 = v48[1];
                  *v49 = *v48;
                  v49[1] = v50;
                }
                else
                {
                  v58 = v107;
                  v59 = (_OWORD *)(v12 + 32 * v13);
                  *v59 = v106;
                  v59[1] = v58;
                }
                v99 = v13 + 1;
                HIDWORD(v113) = v13 + 1;
                if (*v104 == 12)
                  goto LABEL_46;
                if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(v105, *v104, *(_QWORD **)(v105 + 7376)))
                {
                  goto LABEL_46;
                }
                if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(v105, *(_DWORD *)(v105 + 7368), *(_QWORD **)(v105 + 7376)))
                {
                  goto LABEL_46;
                }
                v56 = *v104;
                if (*v104 == 546)
                  goto LABEL_46;
                if ((v56 - 518) <= 0xA && ((1 << (v56 - 6)) & 0x601) != 0)
                {
                  v57 = 1;
                  goto LABEL_103;
                }
                if (v56 == 1048592
                  && **(_QWORD **)(v105 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 + 7216) + 41952) + 128))
                {
LABEL_46:
                  v15 = v104;
                  v8 = v105;
                  v9 = *(_QWORD *)(v105 + 7288);
                  v10 = *(unsigned __int8 **)(v9 + 80);
                  v11 = *(_QWORD *)(v9 + 96);
                  a2 = (void *)v103;
                  a3 = v20;
                  ++v13;
                  if ((unint64_t)v10 < v11)
                    continue;
                  goto LABEL_37;
                }
                v57 = 0;
LABEL_103:
                *(_QWORD *)&v106 = 0;
                if (v13 == -1)
                {
                  v14[161] = v20;
                  v46 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(v105, v103, &v106, 0, a5, a6, a7, a8);
                  if (v46)
                    goto LABEL_38;
                }
                else
                {
                  v64 = *(_DWORD *)(v105 + 12);
                  if (!v64)
                  {
LABEL_108:
                    __break(0xC471u);
                    JUMPOUT(0x197EAE918);
                  }
                  v65 = v64 - 1;
                  v66 = v13 + 1;
                  v67 = v99 - 1;
                  v68 = (_QWORD **)v12;
                  while (1)
                  {
                    v69 = *v68;
                    v68 += 4;
                    JSC::Scope::pushLabel(*(_QWORD *)v105 + 720 * (v64 - 1), v69, v57);
                    if (!--v66)
                      break;
                    v64 = *(_DWORD *)(v105 + 12);
                    if (!v64)
                      goto LABEL_108;
                  }
                  v14[161] = v20;
                  v74 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(v105, v103, &v106, 0, v70, v71, v72, v73);
                  if (*(_DWORD *)(v105 + 12) <= v65)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EAEB60);
                  }
                  v75 = v74;
                  v76 = *(_QWORD *)(*(_QWORD *)v105 + 720 * v65 + 40);
                  v77 = *(_DWORD *)(v76 + 12) - 1;
                  v78 = v13 + 1;
                  do
                  {
                    if (v77 == -1)
                      goto LABEL_132;
                    *(_DWORD *)(v76 + 12) = v77--;
                    --v78;
                  }
                  while (v78);
                  if (v74)
                  {
                    v79 = (_QWORD *)(v12 + 32 * v67);
                    v80 = v79 + 1;
                    v83 = *v79;
                    v82 = (char *)v79 + 20;
                    v81 = v83;
                    v84 = *(uint64_t **)(v103 + 8);
                    v85 = *v84;
                    if ((unint64_t)(v84[1] - *v84) <= 0x5F)
                    {
                      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v103 + 8));
                      v85 = *v84;
                    }
                    *v84 = v85 + 96;
                    *(_DWORD *)(v85 + 8) = v102;
                    *(_DWORD *)(v85 + 12) = v100;
                    *(_DWORD *)(v85 + 16) = v101;
                    *(_DWORD *)(v85 + 20) = -1;
                    *(_BYTE *)(v85 + 24) = 0;
                    *(_DWORD *)(v85 + 28) = -1;
                    *(_QWORD *)(v85 + 32) = 0;
                    *(_QWORD *)&v86 = -1;
                    *((_QWORD *)&v86 + 1) = -1;
                    *(_OWORD *)(v85 + 40) = v86;
                    *(_OWORD *)(v85 + 56) = v86;
                    *(_DWORD *)(v85 + 72) = -1;
                    *(_QWORD *)v85 = &off_1E358A660;
                    *(_QWORD *)(v85 + 80) = v81;
                    *(_QWORD *)(v85 + 88) = v75;
                    v87 = *(_QWORD *)v82;
                    *(_DWORD *)(v85 + 48) = *((_DWORD *)v82 + 2);
                    *(_QWORD *)(v85 + 40) = v87;
                    v88 = *v80;
                    *(_DWORD *)(v85 + 60) = *((_DWORD *)v80 + 2);
                    *(_QWORD *)(v85 + 52) = v88;
                    v89 = *(_QWORD *)v82;
                    *(_DWORD *)(v85 + 72) = *((_DWORD *)v82 + 2);
                    *(_QWORD *)(v85 + 64) = v89;
                    if (v13)
                    {
                      v90 = v12 + 32 * v99 - 64;
                      do
                      {
                        v92 = (uint64_t *)(v90 + 20);
                        v91 = *(_QWORD *)v90;
                        v93 = *(uint64_t **)(v103 + 8);
                        v46 = *v93;
                        if ((unint64_t)(v93[1] - *v93) <= 0x5F)
                        {
                          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v103 + 8));
                          v46 = *v93;
                        }
                        *v93 = v46 + 96;
                        *(_DWORD *)(v46 + 8) = v102;
                        *(_DWORD *)(v46 + 12) = v100;
                        *(_DWORD *)(v46 + 16) = v101;
                        *(_DWORD *)(v46 + 20) = -1;
                        *(_BYTE *)(v46 + 24) = 0;
                        *(_DWORD *)(v46 + 28) = -1;
                        *(_QWORD *)(v46 + 32) = 0;
                        *(_QWORD *)&v94 = -1;
                        *((_QWORD *)&v94 + 1) = -1;
                        *(_OWORD *)(v46 + 40) = v94;
                        *(_OWORD *)(v46 + 56) = v94;
                        *(_DWORD *)(v46 + 72) = -1;
                        *(_QWORD *)v46 = &off_1E358A660;
                        *(_QWORD *)(v46 + 80) = v91;
                        *(_QWORD *)(v46 + 88) = v85;
                        v95 = *v92;
                        *(_DWORD *)(v46 + 48) = *(_DWORD *)(v90 + 28);
                        *(_QWORD *)(v46 + 40) = v95;
                        v96 = *(_QWORD *)(v90 + 8);
                        *(_DWORD *)(v46 + 60) = *(_DWORD *)(v90 + 16);
                        *(_QWORD *)(v46 + 52) = v96;
                        v97 = *v92;
                        *(_DWORD *)(v46 + 72) = *(_DWORD *)(v90 + 28);
                        *(_QWORD *)(v46 + 64) = v97;
                        v90 -= 32;
                        v85 = v46;
                        --v67;
                      }
                      while (v67);
                    }
                    else
                    {
                      v46 = v85;
                    }
                    goto LABEL_38;
                  }
                }
                if (*v104 == 20 || (*v104 & 0x100000) != 0)
                  goto LABEL_52;
                if (!*(_QWORD *)(v105 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23]>(v105);
                goto LABEL_53;
              }
              v54 = v13;
              v55 = (void ***)v12;
              while (*v24 != **v55)
              {
                v55 += 4;
                if (!--v54)
                  goto LABEL_21;
              }
              if (v36 != 20 && (v36 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(v105 + 7360))
                {
                  *(_QWORD *)&v106 = *v24;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(v105, (uint64_t *)&v106);
                }
                goto LABEL_53;
              }
            }
            else if (v29 != 20 && (v29 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v105 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(v105, "Labels must be followed by a ':'");
              goto LABEL_53;
            }
LABEL_52:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(v105);
            goto LABEL_53;
          }
LABEL_12:
          if (*v14)
          {
            v23 = *(_DWORD *)(v105 + 12);
            if (!v23)
            {
              __break(0xC471u);
              JUMPOUT(0x197EAE750);
            }
            if ((*(_DWORD *)(*(_QWORD *)v105 + 720 * (v23 - 1) + 10) & 0x102000) == 0
              && *(_DWORD *)(v105 + 7480) != 1)
            {
              if (v21 == 1048592)
              {
                v60 = *(_QWORD **)(*(_QWORD *)(v105 + 7216) + 41952);
                v61 = **(_QWORD **)(v105 + 7376);
                goto LABEL_83;
              }
              goto LABEL_17;
            }
          }
          if (!*(_QWORD *)(v105 + 7360))
          {
            v52 = v105;
            *(_QWORD *)&v106 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(v105);
            v53 = "Cannot use 'await' as a label ";
LABEL_56:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],char const*>(v52, 0, v53, (const char **)&v106);
          }
        }
        break;
      default:
        goto LABEL_17;
    }
    break;
  }
LABEL_53:
  v46 = 0;
LABEL_38:
  if (v12)
  {
    v112 = 0;
    LODWORD(v113) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return v46;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v10;
  uint64_t SwitchStatement;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unsigned int *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  int v87;
  __int128 *v88;
  __int32 v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  _BOOL4 v126;
  int v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  WTF **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t *v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  int v212;
  char v213;
  int v214;
  unsigned int v215;
  uint64_t *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  unsigned int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  int v285;
  _OWORD *v286;
  int v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  WTF *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  unint64_t v297;
  int v298;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t *v318;
  int v319;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  char v326;
  uint64_t v327;
  uint64_t *v328;
  int v329;
  void (**v330)(JSC::ContinueNode *__hidden);
  int v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  unint64_t v358;
  int v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  _QWORD *v373;
  int v374;
  int v375;
  int v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  __int32 v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  int v405;
  int v406;
  int v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  int v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  int v424;
  WTF::AtomStringImpl *v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  WTF::AtomStringImpl *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  WTF *v470;
  int v471;
  uint64_t v472;
  WTF::StringImpl *v473;
  int v474;
  int v475;
  unsigned int v476;
  unsigned int v477;
  WTF::StringImpl *v478;
  int v479;
  WTF::StringImpl *v480;
  int v481;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  unsigned int v493;
  int v494;
  int v495;
  int v496;
  uint64_t v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  unint64_t v504;
  int v505;
  int v506;
  int v507;
  int v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  WTF *v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  int v527;
  int v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  unint64_t v535;
  int v536;
  int v537;
  int v538;
  int v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  __int32 v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  WTF *v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  int v561;
  int v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  int v566;
  int v567;
  int v568;
  int v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unsigned int v578;
  uint64_t v579;
  int v580;
  int v581;
  int v582;
  BOOL v583;
  unsigned int v584;
  unsigned int v585;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  int v597;
  int v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  BOOL v606;
  int v607;
  int v608;
  int v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  int v619;
  int v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  unint64_t v632;
  int v633;
  int v634;
  int v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  int v646;
  int v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  _QWORD *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  int v670;
  int v671;
  int v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  int v676;
  int v677;
  int v678;
  int v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  void *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  int v695;
  int v696;
  int v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  uint64_t *v701;
  unsigned int v702;
  WTF *v703;
  uint64_t v704;
  JSC::ParserArena *v705;
  uint64_t v706;
  int v707;
  WTF *v708;
  WTF *v709;
  uint64_t v710;
  uint64_t v711;
  int32x2_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  char *v717;
  int v718;
  int v719;
  int32x2_t v720;
  uint64_t *v721;
  uint64_t v722;
  unint64_t v723;
  WTF *v724;
  uint64_t v725;
  int32x2_t v726;
  uint64_t v727;
  uint64_t *v728;
  uint64_t v729;
  __int32 v730;
  int v731;
  int v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unsigned int v737;
  int v738;
  _BOOL4 v739;
  int v740;
  int v741;
  int v742;
  uint64_t v743;
  int v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  unsigned int v755;
  uint64_t v756;
  int v757;
  int v758;
  int v759;
  int v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  int v769;
  int v770;
  int v771;
  uint64_t v772;
  int v773;
  uint64_t v774;
  int v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  unint64_t v784;
  int v785;
  int v786;
  int v787;
  int v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  int v798;
  int v799;
  uint64_t v800;
  int v801;
  uint64_t v802;
  int v803;
  uint64_t *v804;
  uint64_t v805;
  uint64_t v806;
  unsigned int v807;
  char *v808;
  int v809;
  int v810;
  int32x2_t v811;
  uint64_t *v812;
  uint64_t v813;
  uint64_t *v814;
  int v815;
  uint64_t v816;
  _QWORD *v817;
  int v818;
  unsigned int v819;
  uint64_t v820;
  int v821;
  uint64_t v822;
  int v823;
  int v824;
  int v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t v833;
  WTF **v834;
  int v835;
  int v836;
  int v837;
  uint64_t v838;
  int v839;
  uint64_t v840;
  uint64_t *v841;
  void (**v842)(JSC::ContinueNode *__hidden);
  int v843;
  uint64_t v845;
  uint64_t *v846;
  uint64_t v847;
  int v848;
  _BOOL4 v849;
  uint64_t *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  WTF *v861;
  __int128 *v862;
  int32x2_t v863;
  _QWORD *v864;
  uint64_t v865;
  const char *v866;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  unint64_t v876;
  void *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  uint64_t v887;
  void *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  int v896;
  int v897;
  int v898;
  uint64_t v899;
  int v900;
  uint64_t v901;
  uint64_t *v902;
  const char *v903;
  unint64_t v904;
  void *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  void *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  int v923;
  int v924;
  int v925;
  uint64_t v926;
  int v927;
  uint64_t v928;
  int v929;
  uint64_t v930;
  void *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  void *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  int v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  unsigned int v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  int v960;
  char IsValid;
  int v962;
  BOOL v963;
  char v964;
  int v965;
  int v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  WTF::AtomStringImpl *v970;
  unsigned int v971;
  uint64_t v972;
  uint64_t v973;
  const char *v975;
  int v976;
  int v977;
  const char *v978;
  const char *v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  int v987;
  int v988;
  int v989;
  WTF::AtomStringImpl *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  int v997;
  WTF::StringImpl *v998;
  _BOOL4 v999;
  int v1000;
  int v1001;
  int v1002;
  const char *v1003;
  JSC::ParserArena *v1004;
  JSC::ParserArena *v1006;
  unint64_t v1007;
  void *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  JSC::ParserArena *v1015;
  uint64_t v1016;
  uint64_t v1017;
  JSC::ParserArena *v1018;
  int v1019;
  uint64_t *v1020;
  void *v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  int v1029;
  int v1030;
  int v1031;
  uint64_t v1032;
  int v1033;
  uint64_t v1034;
  int v1035;
  uint64_t *v1036;
  int v1037;
  int v1038;
  uint64_t *v1039;
  unsigned int v1040;
  uint64_t v1041;
  uint64_t v1042;
  WTF *v1043;
  uint64_t v1044;
  uint64_t v1045;
  int32x2_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  WTF *v1049;
  uint64_t v1050;
  int32x2_t v1051;
  int v1052;
  _QWORD *v1053;
  WTF *v1054[2];
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  uint64_t v1059;
  int v1060;
  uint64_t v1061;
  int v1062;
  uint64_t v1063;
  int v1064;
  uint64_t v1065;
  uint64_t v1066;
  WTF *v1067[2];
  __int128 *v1068;
  uint64_t v1069;
  __int128 v1070;
  uint64_t *v1071;
  char v1072;
  BOOL v1073;
  BOOL v1074;
  uint64_t v1075;
  int v1076;
  __int128 v1077;
  int v1078;
  __int128 v1079;
  __int128 v1080;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;

  v9 = (unsigned __int8 *)(a1 + 7344);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)&v1036 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      SwitchStatement = 0;
      v9[8] = 1;
      goto LABEL_27;
    }
    goto LABEL_174;
  }
  SwitchStatement = 0;
  v14 = 0;
  v15 = *(unsigned __int8 *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 0;
  v16 = (int *)(a1 + 7368);
  v17 = *(_DWORD *)(a1 + 7368);
  if (v17 <= 514)
  {
    if (v17 != 1)
    {
      if (v17)
      {
        switch(v17)
        {
          case 12:
            goto LABEL_12;
          case 14:
            *a3 = *(_QWORD *)(a1 + 7376);
            if (a4)
              *a4 = *(_DWORD *)(a1 + 7412) - *(_DWORD *)(a1 + 7408);
            v14 = *(_DWORD *)(a1 + 7304);
            goto LABEL_100;
          case 17:
            v311 = *(_DWORD *)(a1 + 7400);
            v312 = *(_DWORD *)(a1 + 7404);
            v313 = *(_DWORD *)(a1 + 7408);
            v314 = *(_DWORD *)(a1 + 7412);
            *(_DWORD *)(a1 + 7444) = v311;
            *(_DWORD *)(a1 + 7448) = v314;
            *(_DWORD *)(a1 + 7452) = v312;
            v315 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v315 + 4) = v311;
            v316 = *(_DWORD *)(a1 + 12);
            if (!v316)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3B04);
            }
            v317 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v316 - 1) + 9) & 1;
            *(_BYTE *)(v315 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v315, a1 + 7368, 0, v317, a5, a6, a7, a8);
            v318 = *(uint64_t **)(a2 + 8);
            SwitchStatement = *v318;
            if ((unint64_t)(v318[1] - *v318) <= 0x27)
            {
              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v318);
              SwitchStatement = *v318;
            }
            *v318 = SwitchStatement + 40;
            *(_DWORD *)(SwitchStatement + 8) = v311;
            *(_DWORD *)(SwitchStatement + 12) = v313;
            *(_DWORD *)(SwitchStatement + 16) = v312;
            *(_BYTE *)(SwitchStatement + 24) = 0;
            *(_DWORD *)(SwitchStatement + 28) = -1;
            *(_QWORD *)(SwitchStatement + 32) = 0;
            *(_QWORD *)SwitchStatement = &off_1E3589878;
            goto LABEL_25;
          case 20:
            goto LABEL_27;
          default:
            goto LABEL_100;
        }
      }
      else
      {
        SwitchStatement = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_27;
  }
  switch(v17)
  {
    case 515:
      v195 = *(_DWORD *)(a1 + 7400);
      v196 = *(_DWORD *)(a1 + 7404);
      v197 = *(_DWORD *)(a1 + 7416);
      v198 = *(_DWORD *)(a1 + 7420);
      v199 = *(_DWORD *)(a1 + 7424);
      v200 = *(_DWORD *)(a1 + 7428);
      v201 = *(_QWORD *)(a1 + 7432);
      v202 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v195;
      *(_DWORD *)(a1 + 7448) = v202;
      *(_DWORD *)(a1 + 7452) = v196;
      v203 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v203 + 4) = v195;
      v204 = *(_DWORD *)(a1 + 12);
      if (!v204)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3AD4);
      }
      LODWORD(v1053) = v199;
      v205 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v204 - 1) + 9) & 1;
      *(_BYTE *)(v203 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v203, a1 + 7368, 0, v205, a5, a6, a7, a8);
      v210 = *(_DWORD *)(a1 + 12);
      if (!v210)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3ADCLL);
      }
      v211 = *(_QWORD *)a1;
      v212 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v210 - 1) + 10);
      if ((v212 & 0x100000) != 0)
      {
        IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::breakIsValid((uint64_t *)a1);
        v210 = *(_DWORD *)(a1 + 12);
        if (!v210)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3D80);
        }
        v213 = IsValid;
        v211 = *(_QWORD *)a1;
        if (!*(_DWORD *)(*(_QWORD *)a1 + 720 * (v210 - 1) + 24))
        {
          v962 = *(_DWORD *)(v211 + 720 * (v210 - 1) + 28);
          v963 = v962 == 0;
          v964 = v962 ? 1 : IsValid;
          v213 = v963 ? 1 : IsValid;
          if ((v964 & 1) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'break' cannot cross static block boundary");
            goto LABEL_174;
          }
        }
      }
      else
      {
        v213 = 0;
      }
      v214 = *v16;
      if (*v16 == 17)
      {
        v319 = *(_DWORD *)(a1 + 7400);
        v320 = *(_DWORD *)(a1 + 7412);
        v321 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v319;
        *(_DWORD *)(a1 + 7448) = v320;
        *(_DWORD *)(a1 + 7452) = v321;
        v322 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v322 + 4) = v319;
        v323 = *(_BYTE *)(v211 + 720 * (v210 - 1) + 9) & 1;
        *(_BYTE *)(v322 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v322, a1 + 7368, 0, v323, v206, v207, v208, v209);
        v210 = *(_DWORD *)(a1 + 12);
        if (!v210)
        {
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x197EAFF24);
        }
        v211 = *(_QWORD *)a1;
      }
      else if (v214 != 1 && v214 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        if (v214 == 12)
          goto LABEL_111;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v214, *(_QWORD **)(a1 + 7376)))
          goto LABEL_111;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
        {
          goto LABEL_111;
        }
        v947 = *v16;
        if (*v16 == 546)
          goto LABEL_111;
        v948 = v10;
        if (v947 == 1048592)
        {
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_173;
LABEL_111:
          v215 = *(_DWORD *)(a1 + 12);
          if (!v215)
          {
LABEL_1043:
            __break(0xC471u);
            JUMPOUT(0x197EB3AF4);
          }
          v216 = *(uint64_t **)(a1 + 7376);
          v217 = v215 - 1;
          v218 = *(_QWORD *)a1;
          v219 = v215 - 1;
          v220 = v215 - 1;
          while (1)
          {
            v221 = *(_QWORD *)(v218 + 720 * v220 + 40);
            if (v221)
              break;
LABEL_114:
            if (!v219 || (*(_BYTE *)(v218 + 720 * v220 + 12) & 0x40) != 0)
              goto LABEL_510;
            v219 = v220 - 1;
            v220 = (v220 - 1);
            if (v215 <= v219)
              goto LABEL_1043;
          }
          v222 = *(unsigned int *)(v221 + 12);
          v223 = 16 * v222 - 16;
          v224 = v222;
          do
          {
            if ((int)v224 < 1)
              goto LABEL_114;
            if (--v224 >= v222)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3BDCLL);
            }
            v225 = *(_QWORD *)(*(_QWORD *)v221 + v223);
            v223 -= 16;
          }
          while (v225 != *v216);
          v226 = *(_DWORD *)(a1 + 7428);
          v227 = *(_QWORD *)(a1 + 7432);
          v228 = *(_DWORD *)(a1 + 7400);
          v229 = *(_DWORD *)(a1 + 7412);
          v230 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v228;
          *(_DWORD *)(a1 + 7448) = v229;
          *(_DWORD *)(a1 + 7452) = v230;
          v231 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v231 + 4) = v228;
          v232 = *(_BYTE *)(v218 + 720 * v217 + 9) & 1;
          *(_BYTE *)(v231 + 56) = 0;
          v233 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v231, a1 + 7368, 0, v232, v206, v207, v208, v209);
          *(_DWORD *)(a1 + 7368) = v233;
          if (v233 == 17)
          {
            v835 = *(_DWORD *)(a1 + 7400);
            v836 = *(_DWORD *)(a1 + 7412);
            v837 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v835;
            *(_DWORD *)(a1 + 7448) = v836;
            *(_DWORD *)(a1 + 7452) = v837;
            v838 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v838 + 4) = v835;
            v839 = *(_DWORD *)(a1 + 12);
            if (!v839)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3CBCLL);
            }
            v840 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v839 - 1) + 9) & 1;
            *(_BYTE *)(v838 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v838, a1 + 7368, 0, v840, v234, v235, v236, v237);
          }
          else
          {
            v238 = v233 == 1 || v233 == 20;
            if (!v238 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
            {
              if ((v233 & 0x100000) != 0)
                goto LABEL_173;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected a ';' following a targeted break statement");
              goto LABEL_174;
            }
          }
          v841 = *(uint64_t **)(a2 + 8);
          SwitchStatement = *v841;
          if ((unint64_t)(v841[1] - *v841) <= 0x57)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v841);
            SwitchStatement = *v841;
          }
          *v841 = SwitchStatement + 88;
          *(_BYTE *)(SwitchStatement + 24) = 0;
          *(_QWORD *)(SwitchStatement + 32) = 0;
          v842 = &off_1E358A480;
          goto LABEL_527;
        }
        if (v947 == 20 || (v947 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a break statement");
LABEL_1111:
        SwitchStatement = 0;
        v10 = v948;
        goto LABEL_27;
      }
      v324 = v210 - 1;
      v325 = v210 - 1;
      while (1)
      {
        if (*(_DWORD *)(v211 + 720 * v324 + 24) || *(_DWORD *)(v211 + 720 * v324 + 28))
        {
          v326 = 1;
          goto LABEL_213;
        }
        if (!v325 || (*(_BYTE *)(v211 + 720 * v324 + 12) & 0x60) != 0)
          break;
        v325 = v324 - 1;
        v324 = (v324 - 1);
        if (v210 <= v325)
          goto LABEL_211;
      }
      v326 = 0;
LABEL_213:
      if ((v212 & 0x100000) != 0)
        v326 = v213;
      if ((v326 & 1) != 0)
      {
        v327 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v328 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v328;
        v329 = (int)v1053;
        if ((unint64_t)(v328[1] - *v328) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v328);
          SwitchStatement = *v328;
        }
        *v328 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        v330 = &off_1E358A480;
LABEL_219:
        *(_QWORD *)SwitchStatement = v330;
        *(_QWORD *)(SwitchStatement + 80) = v327;
        *(_DWORD *)(SwitchStatement + 40) = v200;
        *(_QWORD *)(SwitchStatement + 44) = v201;
        *(_DWORD *)(SwitchStatement + 52) = v197;
        *(_DWORD *)(SwitchStatement + 56) = v198;
        *(_DWORD *)(SwitchStatement + 60) = v329;
        *(_DWORD *)(SwitchStatement + 64) = v200;
        *(_QWORD *)(SwitchStatement + 68) = v201;
        *(_DWORD *)(SwitchStatement + 28) = v200;
        *(_DWORD *)(SwitchStatement + 8) = v197;
        *(_DWORD *)(SwitchStatement + 12) = v198;
        *(_DWORD *)(SwitchStatement + 16) = v329;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        goto LABEL_25;
      }
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'break' is only valid inside a switch or loop statement");
      goto LABEL_174;
    case 516:
    case 517:
      goto LABEL_27;
    case 518:
      v88 = (__int128 *)(a1 + 7400);
      v1079 = *(_OWORD *)(a1 + 7400);
      v89 = *(_DWORD *)(a1 + 7400);
      v90 = *(_DWORD *)(a1 + 7412);
      v91 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v89;
      *(_DWORD *)(a1 + 7448) = v90;
      *(_DWORD *)(a1 + 7452) = v91;
      v92 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v92 + 4) = v89;
      v93 = *(_DWORD *)(a1 + 12);
      if (!v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A6CLL);
      }
      v94 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v93 - 1) + 9) & 1;
      *(_BYTE *)(v92 + 56) = 0;
      v95 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v92, a1 + 7368, 0, v94, a5, a6, a7, a8);
      v100 = v95;
      *(_DWORD *)(a1 + 7368) = v95;
      v101 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = v101 + 1;
      if (v95 != 546)
        goto LABEL_43;
      v951 = *(_DWORD *)(a1 + 12);
      if (!v951)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3D78);
      }
      v952 = v951 - 1;
      v953 = *(_QWORD *)a1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v952 + 11) & 0x20) == 0 && ((1 << v9[130]) & 0x6000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "for-await-of can only be used in an async function or async generator");
        goto LABEL_427;
      }
      v954 = *(_DWORD *)(a1 + 7400);
      v955 = *(_DWORD *)(a1 + 7412);
      v956 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v954;
      *(_DWORD *)(a1 + 7448) = v955;
      *(_DWORD *)(a1 + 7452) = v956;
      v957 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v957 + 4) = v954;
      v958 = *(_BYTE *)(v953 + 720 * v952 + 9) & 1;
      *(_BYTE *)(v957 + 56) = 0;
      v95 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v957, a1 + 7368, 0, v958, v96, v97, v98, v99);
      *(_DWORD *)(a1 + 7368) = v95;
LABEL_43:
      if (v95 != 2)
      {
        if (v95 != 20 && (v95 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(a1);
        }
        else
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
LABEL_427:
        SwitchStatement = 0;
        goto LABEL_88;
      }
      v1051.i32[0] = v89;
      v102 = *(_DWORD *)(a1 + 7400);
      v103 = *(_DWORD *)(a1 + 7412);
      v104 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v102;
      *(_DWORD *)(a1 + 7448) = v103;
      *(_DWORD *)(a1 + 7452) = v104;
      v105 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v105 + 4) = v102;
      v106 = *(_DWORD *)(a1 + 12);
      if (!v106)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A74);
      }
      v1049 = (WTF *)(a1 + 7444);
      v107 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v106 - 1) + 9) & 1;
      *(_BYTE *)(v105 + 56) = 0;
      v108 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v105, a1 + 7368, 0, v107, v96, v97, v98, v99);
      v114 = v108;
      *(_DWORD *)(a1 + 7368) = v108;
      v115 = *(_DWORD *)(a1 + 7300);
      v1078 = 0;
      v1077 = *v88;
      v1050 = a1 + 7416;
      v1075 = *(_QWORD *)(a1 + 7416);
      v1076 = *(_DWORD *)(a1 + 7424);
      v1074 = v108 == 544;
      v1073 = v108 == 521;
      v1072 = 0;
      *(_QWORD *)&v1070 = 0;
      DWORD2(v1070) = -1;
      v1071 = 0;
      v1067[0] = (WTF *)&v1074;
      v1067[1] = (WTF *)&v1073;
      v1068 = &v1070;
      v1069 = a1;
      LODWORD(v1053) = v101;
      if ((v108 == 521) != ((v108 == 544) ^ (v108 == 520)))
      {
        if ((v108 == 521) != (v108 == 544))
        {
          v492 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
          if (*(_DWORD *)(v492 + 12) <= v493)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3B7CLL);
          }
          *(_DWORD *)(*(_QWORD *)v492 + 720 * v493 + 10) |= 0x8080u;
          if (*(_DWORD *)(v492 + 12) <= v493)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3B84);
          }
          *(_DWORD *)(*(_QWORD *)v492 + 720 * v493 + 10) &= ~0x40u;
          if (*(_DWORD *)(v492 + 12) <= v493)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3B8CLL);
          }
          if ((*(_BYTE *)(*(_QWORD *)v492 + 720 * v493 + 11) & 0x80) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB31C4);
          }
          *(_QWORD *)&v1070 = v492;
          DWORD2(v1070) = v493;
          v1071 = (uint64_t *)a1;
        }
        v116 = 0;
        v1065 = 0;
        v1066 = 0;
        v9[96] = 0;
        v1063 = -1;
        v1064 = -1;
        v1061 = -1;
        v1062 = -1;
        if (v114 != 520)
        {
          if (v1074)
          {
            v116 = 1;
          }
          else
          {
            if (!v1073)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB2F78);
            }
            v116 = 2;
          }
        }
        v117 = *(_DWORD *)(a1 + 12);
        if (!v117)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3AACLL);
        }
        v118 = *(_QWORD *)(*(_QWORD *)a1 + 720 * (v117 - 1) + 696);
        if (v118)
          v119 = *(_DWORD *)(v118 - 12);
        else
          v119 = 0;
        v120 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclarationList<JSC::ASTBuilder>(a1, a2, &v1078, &v1066, &v1065, (uint64_t)&v1075, (uint64_t)&v1063, (uint64_t)&v1061, 0, v116, 1u, &v1072);
        v121 = *(_DWORD *)(a1 + 12);
        if (!v121)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3AB4);
        }
        v122 = v120;
        v123 = v121 - 1;
        v124 = *(_QWORD *)a1;
        v125 = *(_QWORD *)(*(_QWORD *)a1 + 720 * v123 + 696);
        if (v125)
          LODWORD(v125) = *(_DWORD *)(v125 - 12);
        v126 = v125 > v119;
        v9[96] = 1;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_934;
        v127 = *v16;
        if (*v16 == 17)
        {
LABEL_56:
          if (v100 != 546)
          {
            LODWORD(v1050) = v126;
            if (v122)
            {
              *(_BYTE *)(v122 + 24) = 1;
              v128 = *(_QWORD *)(v122 + 8);
              v129 = *(_DWORD *)(v122 + 16);
              *(_QWORD *)&v1080 = v128;
              DWORD2(v1080) = v129;
              v130 = *(_QWORD *)(a1 + 7520);
              if (v130)
              {
                if ((v128 & 0x80000000) == 0)
                  JSC::DebuggerPausePositions::appendPause(v130, (uint64_t)&v1080);
              }
            }
LABEL_59:
            v131 = *(_DWORD *)(a1 + 7400);
            v132 = *(_DWORD *)(a1 + 7412);
            v133 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v131;
            *(_DWORD *)(a1 + 7448) = v132;
            *(_DWORD *)(a1 + 7452) = v133;
            v134 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v134 + 4) = v131;
            v135 = *(_DWORD *)(a1 + 12);
            if (!v135)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3A84);
            }
            v136 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v135 - 1) + 9) & 1;
            *(_BYTE *)(v134 + 56) = 0;
            v137 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v134, a1 + 7368, 0, v136, v110, v111, v112, v113);
            *(_DWORD *)(a1 + 7368) = v137;
            if (v1072 && v1073)
            {
              if (v137 != 20 && (v137 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "const variables in for loops must have initializers");
                goto LABEL_934;
              }
              goto LABEL_933;
            }
            if (v137 == 17)
            {
              v139 = 0;
            }
            else
            {
              v138 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
              if (!v138)
              {
                if (*v16 == 20 || (*v16 & 0x100000) != 0)
                  goto LABEL_933;
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v975 = "Cannot parse for loop condition expression";
LABEL_822:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v975);
                }
LABEL_934:
                SwitchStatement = 0;
                goto LABEL_86;
              }
              v139 = v138;
              *(_BYTE *)(v138 + 24) = 1;
              v140 = *(_QWORD *)(v138 + 8);
              v141 = *(_DWORD *)(v138 + 16);
              *(_QWORD *)&v1080 = v140;
              DWORD2(v1080) = v141;
              v142 = *(_QWORD *)(a1 + 7520);
              if (v142 && (v140 & 0x80000000) == 0)
                JSC::DebuggerPausePositions::appendPause(v142, (uint64_t)&v1080);
              v143 = *v16;
              if (*v16 != 17)
              {
                if (v143 == 20 || (v143 & 0x100000) != 0)
                  goto LABEL_933;
                v101 = (int)v1053;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after the for loop condition expression");
                goto LABEL_303;
              }
            }
            v144 = *(_DWORD *)(a1 + 7400);
            v145 = *(_DWORD *)(a1 + 7412);
            v146 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v144;
            *(_DWORD *)(a1 + 7448) = v145;
            *(_DWORD *)(a1 + 7452) = v146;
            v147 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v147 + 4) = v144;
            v148 = *(_DWORD *)(a1 + 12);
            if (!v148)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3A8CLL);
            }
            v149 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v148 - 1) + 9) & 1;
            *(_BYTE *)(v147 + 56) = 0;
            v150 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v147, a1 + 7368, 0, v149, v110, v111, v112, v113);
            *(_DWORD *)(a1 + 7368) = v150;
            if (v150 == 3)
            {
              v152 = 0;
LABEL_70:
              v157 = *(_DWORD *)(a1 + 7400);
              v158 = *(_DWORD *)(a1 + 7412);
              v159 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v157;
              *(_DWORD *)(a1 + 7448) = v158;
              *(_DWORD *)(a1 + 7452) = v159;
              v160 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v160 + 4) = v157;
              v161 = *(_DWORD *)(a1 + 12);
              if (!v161)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3A94);
              }
              v162 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v161 - 1) + 9) & 1;
              *(_BYTE *)(v160 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v160, a1 + 7368, 0, v162, v110, v111, v112, v113);
              v1063 = 0;
              v163 = *(_DWORD *)(a1 + 12);
              if (!v163)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3A9CLL);
              }
              v164 = *(_QWORD *)a1 + 720 * (v163 - 1);
              ++*(_DWORD *)(v164 + 24);
              v165 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1063, 0);
              v168 = *(_DWORD *)(a1 + 12);
              if (!v168)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3AA4);
              }
              v169 = v165;
              v170 = *(_QWORD *)a1 + 720 * (v168 - 1);
              --*(_DWORD *)(v170 + 24);
              if (v165)
              {
                if (v1074 || v1073)
                {
                  if (!v1071)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EB34B0);
                  }
                  v1071 = 0;
                  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 1, v109, v110, v111, v112, v113);
                  JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v1054, (const JSC::VariableEnvironment *)&v1080);
                  v694 = v1082;
                  if (v1082)
                  {
                    v1082 = 0;
                    LODWORD(v1083) = 0;
                    WTF::fastFree(v694, v687, v688, v689, v690, v691, v692, v693);
                  }
                  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v687, v688, v689, v690, v691, v692, v693);
                }
                else
                {
                  v1054[0] = 0;
                  LOBYTE(v1054[1]) = 0;
                  v1055 = 0;
                }
                v171 = *(_QWORD *)(a2 + 8);
                SwitchStatement = *(_QWORD *)v171;
                if (*(_QWORD *)(v171 + 8) - *(_QWORD *)v171 <= 0x7FuLL)
                {
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v171);
                  SwitchStatement = *(_QWORD *)v171;
                }
                *(_QWORD *)v171 = SwitchStatement + 128;
                if (SwitchStatement)
                  v172 = SwitchStatement + 40;
                else
                  v172 = 0;
                *(_QWORD *)&v1080 = v172;
                v173 = (_QWORD *)(v171 + 40);
                v174 = *(unsigned int *)(v171 + 52);
                if ((_DWORD)v174 == *(_DWORD *)(v171 + 48))
                {
                  v373 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v173, v174 + 1, (unint64_t)&v1080);
                  v174 = *(unsigned int *)(v171 + 52);
                  *(_QWORD *)(*(_QWORD *)(v171 + 40) + 8 * v174) = *v373;
                }
                else
                {
                  *(_QWORD *)(*v173 + 8 * v174) = v172;
                }
                *(_DWORD *)(v171 + 52) = v174 + 1;
                *(_DWORD *)(SwitchStatement + 20) = -1;
                *(_BYTE *)(SwitchStatement + 24) = 0;
                v175 = v1054[0];
                *(_BYTE *)(SwitchStatement + 56) = v1054[1];
                v176 = v1055;
                v1054[0] = 0;
                v1055 = 0;
                *(_QWORD *)(SwitchStatement + 64) = v176;
                *(_QWORD *)(SwitchStatement + 72) = 0;
                *(_QWORD *)SwitchStatement = &off_1E358A320;
                *(_QWORD *)(SwitchStatement + 32) = 0;
                *(_QWORD *)(SwitchStatement + 40) = &unk_1E358A3C0;
                *(_QWORD *)(SwitchStatement + 48) = v175;
                *(_QWORD *)(SwitchStatement + 80) = 0;
                *(_QWORD *)(SwitchStatement + 88) = v122;
                *(_QWORD *)(SwitchStatement + 96) = v139;
                *(_QWORD *)(SwitchStatement + 104) = v152;
                *(_QWORD *)(SwitchStatement + 112) = v169;
                *(_BYTE *)(SwitchStatement + 120) = v1050;
                *(_DWORD *)(SwitchStatement + 28) = v157;
                *(_DWORD *)(SwitchStatement + 8) = v1051.i32[0];
                *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1079 + 4));
                goto LABEL_84;
              }
              if (*v16 != 20 && (*v16 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a for loop");
                goto LABEL_934;
              }
LABEL_933:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              goto LABEL_934;
            }
            v151 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
            if (v151)
            {
              v152 = v151;
              *(_BYTE *)(v151 + 24) = 1;
              v153 = *(_QWORD *)(v151 + 8);
              v154 = *(_DWORD *)(v151 + 16);
              *(_QWORD *)&v1080 = v153;
              DWORD2(v1080) = v154;
              v155 = *(_QWORD *)(a1 + 7520);
              if (v155 && (v153 & 0x80000000) == 0)
                JSC::DebuggerPausePositions::appendPause(v155, (uint64_t)&v1080);
              v156 = *v16;
              if (*v16 == 3)
                goto LABEL_70;
              if (v156 == 20 || (v156 & 0x100000) != 0)
                goto LABEL_933;
              v101 = (int)v1053;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(a1);
LABEL_303:
              SwitchStatement = 0;
              goto LABEL_87;
            }
            if (*v16 == 20 || (*v16 & 0x100000) != 0)
              goto LABEL_933;
            if (!*(_QWORD *)(a1 + 7360))
            {
              v975 = "Cannot parse for loop iteration expression";
              goto LABEL_822;
            }
            goto LABEL_934;
          }
          goto LABEL_807;
        }
        if (v1078 != 1)
        {
          if (v127 == 20 || (v127 & 0x100000) != 0)
            goto LABEL_933;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "can only declare a single variable in an enumeration");
          goto LABEL_934;
        }
        v1059 = *(_QWORD *)v1050;
        v1060 = *(_DWORD *)(v1050 + 8);
        if (v127 == 131589)
        {
          if (v100 != 546)
          {
            v527 = *(_DWORD *)(a1 + 7400);
            v528 = *(_DWORD *)(a1 + 7412);
            v529 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v527;
            *(_DWORD *)(a1 + 7448) = v528;
            *(_DWORD *)(a1 + 7452) = v529;
            v530 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v530 + 4) = v527;
            v531 = *(_BYTE *)(v124 + 720 * v123 + 9) & 1;
            *(_BYTE *)(v530 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v530, a1 + 7368, 0, v531, v110, v111, v112, v113);
            v1050 = v1065;
            if (v1065)
            {
              v1002 = *(_DWORD *)(a1 + 12);
              if (!v1002)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3DD0);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v1002 - 1) + 9) & 1) != 0
                || v1074
                || v1073
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1066 + 40))(v1066) & 1) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot assign to the loop variable inside a for-in loop header");
                SwitchStatement = 0;
                goto LABEL_86;
              }
            }
            v532 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
LABEL_337:
            if (!v532)
            {
              if (*v16 != 20 && (*v16 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected expression to enumerate");
                goto LABEL_934;
              }
              goto LABEL_933;
            }
            *(_BYTE *)(v532 + 24) = 1;
            v533 = *(_QWORD *)(v532 + 8);
            v534 = *(_DWORD *)(v532 + 16);
            *(_QWORD *)&v1080 = v533;
            DWORD2(v1080) = v534;
            v535 = *(_QWORD *)(a1 + 7520);
            if (v535 && (v533 & 0x80000000) == 0)
              JSC::DebuggerPausePositions::appendPause(v535, (uint64_t)&v1080);
            v1057 = *(_QWORD *)v1049;
            v1058 = *((_DWORD *)v1049 + 2);
            v536 = *v16;
            if (*v16 != 3)
            {
              if (v536 != 20 && (v536 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  if (v127 == 131589)
                    v903 = "for-in header";
                  else
                    v903 = "for-of header";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v903);
                }
                goto LABEL_934;
              }
              goto LABEL_933;
            }
            v1052 = v10;
            v537 = *(_DWORD *)v88;
            v538 = *(_DWORD *)(a1 + 7412);
            v539 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v537;
            *(_DWORD *)(a1 + 7448) = v538;
            *(_DWORD *)(a1 + 7452) = v539;
            v540 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v540 + 4) = v537;
            v541 = *(_DWORD *)(a1 + 12);
            if (!v541)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3C4CLL);
            }
            v542 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v541 - 1) + 9) & 1;
            *(_BYTE *)(v540 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v540, a1 + 7368, 0, v542, v110, v111, v112, v113);
            v1056 = 0;
            v543 = *(_DWORD *)(a1 + 12);
            if (!v543)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3C54);
            }
            v544 = *(_QWORD *)a1 + 720 * (v543 - 1);
            ++*(_DWORD *)(v544 + 24);
            v545 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1056, 0);
            v546 = *(_DWORD *)(a1 + 12);
            if (!v546)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3C5CLL);
            }
            v547 = v545;
            v548 = *(_QWORD *)a1 + 720 * (v546 - 1);
            --*(_DWORD *)(v548 + 24);
            v10 = v1052;
            if (!v545)
            {
              if (*v16 == 20 || (*v16 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                if (v127 == 131589)
                  v1003 = "in";
                else
                  v1003 = "of";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(a1, v1003);
              }
              SwitchStatement = 0;
              v10 = v1052;
              goto LABEL_86;
            }
            if (v1074 || v1073)
            {
              if (!v1071)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB38F0);
              }
              v914 = v545;
              v1071 = 0;
              JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 1, v109, v110, v111, v112, v113);
              JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v1054, (const JSC::VariableEnvironment *)&v1080);
              v922 = v1082;
              if (v1082)
              {
                v1082 = 0;
                LODWORD(v1083) = 0;
                WTF::fastFree(v922, v915, v916, v917, v918, v919, v920, v921);
              }
              JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v915, v916, v917, v918, v919, v920, v921);
              v10 = v1052;
              v547 = v914;
            }
            else
            {
              v1054[0] = 0;
              LOBYTE(v1054[1]) = 0;
              v1055 = 0;
            }
            if (v127 == 131589)
            {
              v549 = v1051.i32[0];
              if (v114 != 520 || !v1050)
              {
                v550 = v1066;
                v551 = *(uint64_t **)(a2 + 8);
                v552 = *v551;
                if ((unint64_t)(v551[1] - *v551) <= 0x2F)
                {
                  v1016 = v547;
                  JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
                  v547 = v1016;
                  v552 = *v551;
                }
                *v551 = v552 + 48;
                *(_DWORD *)(v552 + 8) = v1077;
                *(int32x2_t *)(v552 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1077 + 4));
                *(_DWORD *)(v552 + 20) = -1;
                *(_BYTE *)(v552 + 24) = 0;
                *(_BYTE *)(v552 + 25) = 126;
                *(_BYTE *)(v552 + 26) = 0;
                *(_QWORD *)v552 = &off_1E358B880;
                *(_QWORD *)(v552 + 32) = v550;
                *(_QWORD *)(v552 + 40) = 0;
                v553 = *(_QWORD *)(a2 + 8);
                SwitchStatement = *(_QWORD *)v553;
                if (*(_QWORD *)(v553 + 8) - *(_QWORD *)v553 <= 0x97uLL)
                {
                  v1017 = v547;
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v553);
                  v547 = v1017;
                  SwitchStatement = *(_QWORD *)v553;
                }
                *(_QWORD *)v553 = SwitchStatement + 152;
                if (SwitchStatement)
                  v554 = SwitchStatement + 80;
                else
                  v554 = 0;
                *(_QWORD *)&v1080 = v554;
                v555 = (_QWORD *)(v553 + 40);
                v556 = *(unsigned int *)(v553 + 52);
                if ((_DWORD)v556 == *(_DWORD *)(v553 + 48))
                {
                  v912 = v547;
                  v913 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v555, v556 + 1, (unint64_t)&v1080);
                  v547 = v912;
                  v556 = *(unsigned int *)(v553 + 52);
                  *(_QWORD *)(*(_QWORD *)(v553 + 40) + 8 * v556) = *v913;
                }
                else
                {
                  *(_QWORD *)(*v555 + 8 * v556) = v554;
                }
                *(_DWORD *)(v553 + 52) = v556 + 1;
                *(_DWORD *)(SwitchStatement + 20) = -1;
                *(_BYTE *)(SwitchStatement + 24) = 0;
                v557 = v1054[0];
                *(_BYTE *)(SwitchStatement + 96) = v1054[1];
                v558 = v1055;
                v1054[0] = 0;
                v1055 = 0;
                *(_QWORD *)(SwitchStatement + 104) = v558;
                *(_QWORD *)(SwitchStatement + 112) = 0;
                *(_QWORD *)(SwitchStatement + 120) = 0;
                *(_QWORD *)(SwitchStatement + 128) = v552;
                *(_QWORD *)(SwitchStatement + 136) = v532;
                *(_QWORD *)(SwitchStatement + 144) = v547;
                *(_QWORD *)SwitchStatement = &off_1E358B4E0;
                *(_QWORD *)(SwitchStatement + 80) = &unk_1E358B580;
                *(_QWORD *)(SwitchStatement + 88) = v557;
                *(_DWORD *)(SwitchStatement + 28) = v537;
                *(_DWORD *)(SwitchStatement + 8) = v549;
                *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1079 + 4));
                v559 = v1059;
                *(_QWORD *)(SwitchStatement + 32) = 0;
                *(_QWORD *)(SwitchStatement + 40) = v559;
                *(_DWORD *)(SwitchStatement + 48) = v1060;
                *(_QWORD *)(SwitchStatement + 52) = v1075;
                *(_DWORD *)(SwitchStatement + 60) = v1076;
                *(_QWORD *)(SwitchStatement + 64) = v1057;
                v526 = v1058;
LABEL_331:
                *(_DWORD *)(SwitchStatement + 72) = v526;
LABEL_84:
                v177 = v1054;
LABEL_85:
                JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v177, v166, v167, v109, v110, v111, v112, v113);
LABEL_86:
                v101 = (int)v1053;
LABEL_87:
                v178 = v1071;
                if (v1071)
                {
                  v1071 = 0;
                  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, v178, 0, v109, v110, v111, v112, v113);
                  v1028 = v1082;
                  if (v1082)
                  {
                    v1082 = 0;
                    LODWORD(v1083) = 0;
                    WTF::fastFree(v1028, v1021, v1022, v1023, v1024, v1025, v1026, v1027);
                  }
                  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v1021, v1022, v1023, v1024, v1025, v1026, v1027);
                }
LABEL_88:
                v18 = 0;
                *(_DWORD *)(a1 + 7456) = v101;
                goto LABEL_8;
              }
              v854 = JSC::ASTBuilder::createForInLoop(*(uint64_t **)(a2 + 8), (uint64_t)&v1079, v122, v532, v547, &v1075, &v1059, &v1057, v1051.i32[0], v537, (uint64_t *)v1054);
LABEL_540:
              SwitchStatement = v854;
              goto LABEL_84;
            }
            v845 = v1066;
            v846 = *(uint64_t **)(a2 + 8);
            v847 = *v846;
            v848 = v1051.i32[0];
            if ((unint64_t)(v846[1] - *v846) <= 0x2F)
            {
              v1018 = *(JSC::ParserArena **)(a2 + 8);
              v1050 = v547;
              JSC::ParserArena::allocateFreeablePool(v1018);
              v547 = v1050;
              v847 = *v846;
            }
            v849 = v100 == 546;
            *v846 = v847 + 48;
            *(_DWORD *)(v847 + 8) = v1077;
            *(int32x2_t *)(v847 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1077 + 4));
            *(_DWORD *)(v847 + 20) = -1;
            *(_BYTE *)(v847 + 24) = 0;
            *(_BYTE *)(v847 + 25) = 126;
            *(_BYTE *)(v847 + 26) = 0;
            *(_QWORD *)v847 = &off_1E358B880;
            *(_QWORD *)(v847 + 32) = v845;
            *(_QWORD *)(v847 + 40) = 0;
            v1039 = (uint64_t *)v1054;
            v1037 = v848;
            v1038 = v537;
            v1036 = &v1057;
            v850 = &v1059;
            v851 = a2;
            v852 = v532;
            v853 = v547;
LABEL_539:
            v854 = JSC::ASTBuilder::createForOfLoop(v851, v849, (uint64_t)&v1079, v847, v852, v853, &v1075, v850, v1036, v1037, v1038, v1039);
            goto LABEL_540;
          }
LABEL_839:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected 'of' in for-await syntax");
          goto LABEL_934;
        }
        if (v127 == 12
          && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
          && !v9[40])
        {
          v965 = *(_DWORD *)(a1 + 7400);
          v966 = *(_DWORD *)(a1 + 7412);
          v967 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v965;
          *(_DWORD *)(a1 + 7448) = v966;
          *(_DWORD *)(a1 + 7452) = v967;
          v968 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v968 + 4) = v965;
          v969 = *(_BYTE *)(v124 + 720 * v123 + 9) & 1;
          *(_BYTE *)(v968 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v968, a1 + 7368, 0, v969, v110, v111, v112, v113);
          if (v1065)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot assign to the loop variable inside a for-of loop header");
            goto LABEL_934;
          }
          LODWORD(v1080) = 0;
          *((_QWORD *)&v1080 + 1) = *(_QWORD *)(a1 + 7496);
          v1081 = a1;
          *(_QWORD *)(a1 + 7496) = &v1080;
          v532 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v1080);
          v1050 = 0;
          *(_QWORD *)(v1081 + 7496) = *((_QWORD *)&v1080 + 1);
          goto LABEL_337;
        }
        if (v127 == 20 || (v127 & 0x100000) != 0)
          goto LABEL_933;
LABEL_470:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected either 'in' or 'of' in enumeration syntax");
        goto LABEL_934;
      }
      if (v108 == 17)
      {
        if (v100 != 546)
        {
          LODWORD(v1050) = 0;
          v122 = 0;
          goto LABEL_59;
        }
LABEL_807:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unexpected a ';' in for-await-of header");
        goto LABEL_934;
      }
      if (v108 && v108 != 4)
        goto LABEL_165;
      v1052 = v10;
      *(_OWORD *)v1054 = *(_OWORD *)(a1 + 7296);
      LODWORD(v1047) = *(_DWORD *)(a1 + 7316);
      v1081 = *(_QWORD *)(a1 + 7336);
      v1080 = *(_OWORD *)(a1 + 7320);
      v1046.i32[0] = *v9;
      LODWORD(v1045) = v9[1];
      LODWORD(v1044) = *(_DWORD *)(a2 + 1052);
      v970 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v971 = *(_DWORD *)(a1 + 7404);
      v972 = *(_QWORD *)(a1 + 7288);
      LODWORD(v1043) = *(_DWORD *)(v972 + 4);
      LODWORD(v1042) = *(_DWORD *)v972;
      LODWORD(v972) = *(unsigned __int8 *)(v972 + 56);
      v1040 = v971;
      LODWORD(v1041) = v972;
      v1048 = JSC::Parser<JSC::Lexer<unsigned char>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(a1, a2);
      if (v1048
        && ((v298 = *v16, *v16 == 131589)
         || v298 == 12
         && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
         && !v9[40]))
      {
        v122 = 0;
        v10 = v1052;
      }
      else
      {
        JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v970, v1040, v109, v110, v111, v112, v113);
        v985 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v985 = v1042;
        *(_BYTE *)(v985 + 56) = v1041;
        v986 = *(_DWORD *)(a1 + 7400);
        v987 = *(_DWORD *)(a1 + 7412);
        v988 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v986;
        *(_DWORD *)(a1 + 7448) = v987;
        *(_DWORD *)(a1 + 7452) = v988;
        *(_DWORD *)(v985 + 4) = v986;
        v989 = *(_DWORD *)(a1 + 12);
        if (!v989)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3DB8);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v985, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v989 - 1) + 9) & 1, v981, v982, v983, v984);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = (_DWORD)v1043;
        *(_OWORD *)(a1 + 7296) = *(_OWORD *)v1054;
        v997 = v1044;
        *(_DWORD *)(a1 + 7312) = v1044;
        *(_DWORD *)(a1 + 7316) = v1047;
        *(_OWORD *)(a1 + 7320) = v1080;
        *(_QWORD *)(a1 + 7336) = v1081;
        *v9 = v1046.i8[0];
        v9[1] = v1045;
        *(_DWORD *)(a2 + 1052) = v997;
        v998 = *(WTF::StringImpl **)(a1 + 7360);
        *(_QWORD *)(a1 + 7360) = 0;
        if (v998)
        {
          if (*(_DWORD *)v998 == 2)
          {
            WTF::StringImpl::~StringImpl(v998, v990, v991, v992, v993, v994, v995, v996);
            WTF::fastFree(v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014);
          }
          else
          {
            *(_DWORD *)v998 -= 2;
          }
        }
        v10 = v1052;
LABEL_165:
        v9[96] = 0;
        v294 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
        v9[96] = 1;
        if (!v294)
        {
          if (*v16 != 20 && (*v16 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse for loop declarations");
            goto LABEL_934;
          }
          goto LABEL_933;
        }
        v122 = v294;
        *(_BYTE *)(v294 + 24) = 1;
        v295 = *(_QWORD *)(v294 + 8);
        v296 = *(_DWORD *)(v294 + 16);
        *(_QWORD *)&v1080 = v295;
        DWORD2(v1080) = v296;
        v297 = *(_QWORD *)(a1 + 7520);
        if (v297 && (v295 & 0x80000000) == 0)
          JSC::DebuggerPausePositions::appendPause(v297, (uint64_t)&v1080);
        v298 = *v16;
        if (*v16 == 17)
        {
          v126 = 0;
          goto LABEL_56;
        }
        v1048 = 0;
      }
      if (v115 != *(_DWORD *)(a1 + 7300))
      {
        if (v298 != 20 && (v298 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[71]>(a1);
          goto LABEL_934;
        }
        goto LABEL_933;
      }
      v1063 = *(_QWORD *)v1050;
      v1064 = *(_DWORD *)(v1050 + 8);
      if (v298 == 131589)
      {
        if (v100 == 546)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_934;
          goto LABEL_839;
        }
        v494 = *(_DWORD *)(a1 + 7400);
        v495 = *(_DWORD *)(a1 + 7412);
        v496 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v494;
        *(_DWORD *)(a1 + 7448) = v495;
        *(_DWORD *)(a1 + 7452) = v496;
        v497 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v497 + 4) = v494;
        v498 = *(_DWORD *)(a1 + 12);
        if (!v498)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3B94);
        }
        v499 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v498 - 1) + 9) & 1;
        *(_BYTE *)(v497 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v497, a1 + 7368, 0, v499, v110, v111, v112, v113);
        v500 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      }
      else
      {
        if (v298 != 12
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
          || v9[40])
        {
          if (v298 == 20 || (v298 & 0x100000) != 0)
            goto LABEL_933;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_934;
          goto LABEL_470;
        }
        v1029 = *(_DWORD *)(a1 + 7400);
        v1030 = *(_DWORD *)(a1 + 7412);
        v1031 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v1029;
        *(_DWORD *)(a1 + 7448) = v1030;
        *(_DWORD *)(a1 + 7452) = v1031;
        v1032 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v1032 + 4) = v1029;
        v1033 = *(_DWORD *)(a1 + 12);
        if (!v1033)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3DD8);
        }
        v1034 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v1033 - 1) + 9) & 1;
        *(_BYTE *)(v1032 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v1032, a1 + 7368, 0, v1034, v110, v111, v112, v113);
        v500 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      }
      v501 = v500;
      if (!v500)
      {
        if (*v16 != 20 && (*v16 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (v298 == 131589)
              v978 = "in";
            else
              v978 = "of";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(a1, v978);
          }
          goto LABEL_934;
        }
        goto LABEL_933;
      }
      *(_BYTE *)(v500 + 24) = 1;
      v502 = *(_QWORD *)(v500 + 8);
      v503 = *(_DWORD *)(v500 + 16);
      *(_QWORD *)&v1080 = v502;
      DWORD2(v1080) = v503;
      v504 = *(_QWORD *)(a1 + 7520);
      if (v504 && (v502 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v504, (uint64_t)&v1080);
      v1061 = *(_QWORD *)v1049;
      v1062 = *((_DWORD *)v1049 + 2);
      v505 = *v16;
      if (*v16 != 3)
      {
        if (v505 == 20 || (v505 & 0x100000) != 0)
          goto LABEL_933;
        v101 = (int)v1053;
        if (!*(_QWORD *)(a1 + 7360))
        {
          if (v298 == 131589)
            v866 = "for-in header";
          else
            v866 = "for-of header";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v866);
        }
        goto LABEL_303;
      }
      v506 = *(_DWORD *)v88;
      v507 = *(_DWORD *)(a1 + 7412);
      v508 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v506;
      *(_DWORD *)(a1 + 7448) = v507;
      *(_DWORD *)(a1 + 7452) = v508;
      v509 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v509 + 4) = v506;
      v510 = *(_DWORD *)(a1 + 12);
      if (!v510)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BBCLL);
      }
      v511 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v510 - 1) + 9) & 1;
      *(_BYTE *)(v509 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v509, a1 + 7368, 0, v511, v110, v111, v112, v113);
      v1059 = 0;
      v512 = *(_DWORD *)(a1 + 12);
      if (!v512)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BC4);
      }
      v513 = *(_QWORD *)a1 + 720 * (v512 - 1);
      ++*(_DWORD *)(v513 + 24);
      v514 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1059, 0);
      v516 = *(_DWORD *)(a1 + 12);
      if (!v516)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BCCLL);
      }
      v517 = v514;
      v518 = *(_QWORD *)a1 + 720 * (v516 - 1);
      --*(_DWORD *)(v518 + 24);
      if (!v514)
      {
        if (*v16 != 20 && (*v16 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (v298 == 131589)
              v979 = "in";
            else
              v979 = "of";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(a1, v979);
          }
          goto LABEL_934;
        }
        goto LABEL_933;
      }
      if (v1048)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::ASTBuilder>(JSC::ASTBuilder::Statement&)::{lambda(void)#1}::operator()((uint64_t)&v1080, (uint64_t)v1067, v515, v109, v110, v111, v112, v113);
        if (v298 == 131589)
          v980 = JSC::ASTBuilder::createForInLoop(a2, (uint64_t)&v1079, v1048, v501, v517, (uint64_t)&v1077, &v1075, &v1063, &v1061, v1051.i32[0], v506, (uint64_t *)&v1080);
        else
          v980 = JSC::ASTBuilder::createForOfLoop(a2, v100 == 546, (uint64_t)&v1079, v1048, v501, v517, (uint64_t)&v1077, &v1075, &v1063, &v1061, v1051.i32[0], v506, (uint64_t *)&v1080);
        SwitchStatement = v980;
        v177 = (WTF **)&v1080;
        goto LABEL_85;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 88))(v122) & 1) == 0)
      {
        v1035 = *(_DWORD *)(a1 + 12);
        if (!v1035)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3DE0);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v1035 - 1) + 9) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 296))(v122) & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Left side of assignment is not a reference");
          SwitchStatement = 0;
          goto LABEL_86;
        }
      }
      if (v1074 || v1073)
      {
        if (!v1071)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB38D0);
        }
        v1071 = 0;
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 1, v109, v110, v111, v112, v113);
        JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v1054, (const JSC::VariableEnvironment *)&v1080);
        v875 = v1082;
        if (v1082)
        {
          v1082 = 0;
          LODWORD(v1083) = 0;
          WTF::fastFree(v875, v868, v869, v870, v871, v872, v873, v874);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v868, v869, v870, v871, v872, v873, v874);
      }
      else
      {
        v1054[0] = 0;
        LOBYTE(v1054[1]) = 0;
        v1055 = 0;
      }
      if (v298 == 131589)
      {
        v519 = *(_QWORD *)(a2 + 8);
        SwitchStatement = *(_QWORD *)v519;
        if (*(_QWORD *)(v519 + 8) - *(_QWORD *)v519 <= 0x97uLL)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v519);
          SwitchStatement = *(_QWORD *)v519;
        }
        *(_QWORD *)v519 = SwitchStatement + 152;
        if (SwitchStatement)
          v520 = SwitchStatement + 80;
        else
          v520 = 0;
        *(_QWORD *)&v1080 = v520;
        v521 = (_QWORD *)(v519 + 40);
        v522 = *(unsigned int *)(v519 + 52);
        if ((_DWORD)v522 == *(_DWORD *)(v519 + 48))
        {
          v864 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v521, v522 + 1, (unint64_t)&v1080);
          v522 = *(unsigned int *)(v519 + 52);
          *(_QWORD *)(*(_QWORD *)(v519 + 40) + 8 * v522) = *v864;
        }
        else
        {
          *(_QWORD *)(*v521 + 8 * v522) = v520;
        }
        *(_DWORD *)(v519 + 52) = v522 + 1;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        v523 = v1054[0];
        *(_BYTE *)(SwitchStatement + 96) = v1054[1];
        v524 = v1055;
        v1054[0] = 0;
        v1055 = 0;
        *(_QWORD *)(SwitchStatement + 104) = v524;
        *(_QWORD *)(SwitchStatement + 112) = 0;
        *(_QWORD *)(SwitchStatement + 120) = 0;
        *(_QWORD *)(SwitchStatement + 128) = v122;
        *(_QWORD *)(SwitchStatement + 136) = v501;
        *(_QWORD *)(SwitchStatement + 144) = v517;
        *(_QWORD *)SwitchStatement = &off_1E358B4E0;
        *(_QWORD *)(SwitchStatement + 80) = &unk_1E358B580;
        *(_QWORD *)(SwitchStatement + 88) = v523;
        *(_DWORD *)(SwitchStatement + 28) = v506;
        *(_DWORD *)(SwitchStatement + 8) = v1051.i32[0];
        *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1079 + 4));
        v525 = v1063;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)(SwitchStatement + 40) = v525;
        *(_DWORD *)(SwitchStatement + 48) = v1064;
        *(_QWORD *)(SwitchStatement + 52) = v1075;
        *(_DWORD *)(SwitchStatement + 60) = v1076;
        *(_QWORD *)(SwitchStatement + 64) = v1061;
        v526 = v1062;
        goto LABEL_331;
      }
      v849 = v100 == 546;
      v1039 = (uint64_t *)v1054;
      v1037 = v1051.i32[0];
      v1038 = v506;
      v1036 = &v1061;
      v850 = &v1063;
      v851 = a2;
      v847 = v122;
      v852 = v501;
      v853 = v517;
      goto LABEL_539;
    case 519:
    case 521:
    case 526:
    case 531:
    case 532:
    case 535:
    case 536:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
      goto LABEL_100;
    case 520:
      v18 = 1;
      SwitchStatement = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1u);
      goto LABEL_8;
    case 522:
      v566 = *(_DWORD *)(a1 + 7400);
      v567 = *(_DWORD *)(a1 + 7404);
      v197 = *(_DWORD *)(a1 + 7416);
      v198 = *(_DWORD *)(a1 + 7420);
      v568 = *(_DWORD *)(a1 + 7424);
      v200 = *(_DWORD *)(a1 + 7428);
      v201 = *(_QWORD *)(a1 + 7432);
      v569 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v566;
      *(_DWORD *)(a1 + 7448) = v569;
      *(_DWORD *)(a1 + 7452) = v567;
      v570 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v570 + 4) = v566;
      v571 = *(_DWORD *)(a1 + 12);
      if (!v571)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BACLL);
      }
      v572 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v571 - 1) + 9) & 1;
      *(_BYTE *)(v570 + 56) = 0;
      v573 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v570, a1 + 7368, 0, v572, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v573;
      v578 = *(_DWORD *)(a1 + 12);
      if (!v578)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BB4);
      }
      LODWORD(v1053) = v568;
      v579 = *(_QWORD *)a1;
      v580 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v578 - 1) + 10);
      if ((v580 & 0x100000) != 0)
      {
        v999 = JSC::Parser<JSC::Lexer<unsigned char>>::continueIsValid((uint64_t *)a1);
        v578 = *(_DWORD *)(a1 + 12);
        if (!v578)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3DC8);
        }
        v579 = *(_QWORD *)a1;
        v1000 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v578 - 1) + 24);
        if (v1000)
          v1001 = 1;
        else
          v1001 = v999;
        if (v1001 != 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'continue' cannot cross static block boundary");
          goto LABEL_174;
        }
        if (v1000)
          v582 = v999;
        else
          v582 = 1;
        v581 = *v16;
      }
      else
      {
        v581 = v573;
        v582 = 0;
      }
      if (v581 == 17)
      {
        v731 = *(_DWORD *)(a1 + 7400);
        v732 = *(_DWORD *)(a1 + 7412);
        v733 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v731;
        *(_DWORD *)(a1 + 7448) = v732;
        *(_DWORD *)(a1 + 7452) = v733;
        v734 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v734 + 4) = v731;
        v735 = *(_BYTE *)(v579 + 720 * (v578 - 1) + 9) & 1;
        *(_BYTE *)(v734 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v734, a1 + 7368, 0, v735, v574, v575, v576, v577);
        v578 = *(_DWORD *)(a1 + 12);
        if (!v578)
        {
LABEL_481:
          __break(0xC471u);
          JUMPOUT(0x197EB17C8);
        }
        v579 = *(_QWORD *)a1;
      }
      else
      {
        v583 = v581 == 1 || v581 == 20;
        if (!v583 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
        {
          if (v581 != 12
            && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v581, *(_QWORD **)(a1 + 7376))
            && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
          {
            v960 = *v16;
            if (*v16 != 546)
            {
              v948 = v10;
              if (v960 == 1048592)
              {
                if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
                  goto LABEL_376;
              }
              else if (v960 != 20 && (v960 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a continue statement");
                goto LABEL_1111;
              }
LABEL_173:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              goto LABEL_174;
            }
          }
LABEL_376:
          v584 = *(_DWORD *)(a1 + 12);
          if (!v584)
          {
LABEL_1074:
            __break(0xC471u);
            JUMPOUT(0x197EB3BECLL);
          }
          v216 = *(uint64_t **)(a1 + 7376);
          v585 = v584 - 1;
          v586 = *(_QWORD *)a1;
          v587 = v584 - 1;
          v588 = v584 - 1;
          while (1)
          {
            v589 = *(_QWORD *)(v586 + 720 * v588 + 40);
            if (v589)
              break;
LABEL_379:
            if (!v587 || (*(_BYTE *)(v586 + 720 * v588 + 12) & 0x40) != 0)
            {
LABEL_510:
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v1080 = *v216;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", (uint64_t *)&v1080);
              }
              goto LABEL_174;
            }
            v587 = v588 - 1;
            v588 = (v588 - 1);
            if (v584 <= v587)
              goto LABEL_1074;
          }
          v590 = *(unsigned int *)(v589 + 12);
          v591 = 16 * v590;
          v592 = v590;
          do
          {
            if ((int)v592 < 1)
              goto LABEL_379;
            if (--v592 >= v590)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3CD4);
            }
            v593 = v591 - 16;
            v594 = *(_QWORD *)(*(_QWORD *)v589 + v591 - 16);
            v595 = *v216;
            v591 -= 16;
          }
          while (v594 != *v216);
          if (*(_BYTE *)(*(_QWORD *)v589 + v593 + 8))
          {
            v226 = *(_DWORD *)(a1 + 7428);
            v227 = *(_QWORD *)(a1 + 7432);
            v596 = *(_DWORD *)(a1 + 7400);
            v597 = *(_DWORD *)(a1 + 7412);
            v598 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v596;
            *(_DWORD *)(a1 + 7448) = v597;
            *(_DWORD *)(a1 + 7452) = v598;
            v599 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v599 + 4) = v596;
            v600 = *(_BYTE *)(v586 + 720 * v585 + 9) & 1;
            *(_BYTE *)(v599 + 56) = 0;
            v601 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v599, a1 + 7368, 0, v600, v595, v575, v576, v577);
            *(_DWORD *)(a1 + 7368) = v601;
            if (v601 == 17)
            {
              v896 = *(_DWORD *)(a1 + 7400);
              v897 = *(_DWORD *)(a1 + 7412);
              v898 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v896;
              *(_DWORD *)(a1 + 7448) = v897;
              *(_DWORD *)(a1 + 7452) = v898;
              v899 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v899 + 4) = v896;
              v900 = *(_DWORD *)(a1 + 12);
              if (!v900)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3CF4);
              }
              v901 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v900 - 1) + 9) & 1;
              *(_BYTE *)(v899 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v899, a1 + 7368, 0, v901, v602, v603, v604, v605);
            }
            else
            {
              v606 = v601 == 1 || v601 == 20;
              if (!v606 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
              {
                if ((v601 & 0x100000) != 0)
                  goto LABEL_173;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted continue statement");
                goto LABEL_174;
              }
            }
            v902 = *(uint64_t **)(a2 + 8);
            SwitchStatement = *v902;
            if ((unint64_t)(v902[1] - *v902) <= 0x57)
            {
              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v902);
              SwitchStatement = *v902;
            }
            *v902 = SwitchStatement + 88;
            *(_BYTE *)(SwitchStatement + 24) = 0;
            *(_QWORD *)(SwitchStatement + 32) = 0;
            v842 = &off_1E358A3E0;
LABEL_527:
            *(_QWORD *)SwitchStatement = v842;
            *(_QWORD *)(SwitchStatement + 80) = v216;
            *(_DWORD *)(SwitchStatement + 40) = v226;
            *(_QWORD *)(SwitchStatement + 44) = v227;
            *(_DWORD *)(SwitchStatement + 52) = v197;
            *(_DWORD *)(SwitchStatement + 56) = v198;
            v843 = (int)v1053;
            *(_DWORD *)(SwitchStatement + 60) = (_DWORD)v1053;
            *(_DWORD *)(SwitchStatement + 64) = v226;
            *(_QWORD *)(SwitchStatement + 68) = v227;
            *(_DWORD *)(SwitchStatement + 28) = v226;
            *(_DWORD *)(SwitchStatement + 8) = v197;
            *(_DWORD *)(SwitchStatement + 12) = v198;
            *(_DWORD *)(SwitchStatement + 16) = v843;
            *(_DWORD *)(SwitchStatement + 20) = -1;
LABEL_25:
            *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
            goto LABEL_26;
          }
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v1080 = v594;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::UniquedStringImpl *,char const(&)[32]>(a1, (uint64_t *)&v1080);
          }
          goto LABEL_174;
        }
      }
      v736 = v578 - 1;
      v737 = v578 - 1;
      while (1)
      {
        v738 = *(_DWORD *)(v579 + 720 * v736 + 24);
        v739 = v738 != 0;
        if (!v737 || v738)
          break;
        if ((*(_BYTE *)(v579 + 720 * v736 + 12) & 0x60) != 0)
        {
          v739 = 0;
          break;
        }
        v737 = v736 - 1;
        v736 = (v736 - 1);
        if (v578 <= v737)
          goto LABEL_481;
      }
      if ((v580 & 0x100000) != 0)
        v1019 = v582;
      else
        v1019 = v739;
      if (v1019)
      {
        v327 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v1020 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v1020;
        v329 = (int)v1053;
        if ((unint64_t)(v1020[1] - *v1020) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v1020);
          SwitchStatement = *v1020;
        }
        *v1020 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        v330 = &off_1E358A3E0;
        goto LABEL_219;
      }
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'continue' is only valid inside a loop statement");
LABEL_174:
      SwitchStatement = 0;
      goto LABEL_27;
    case 523:
      v959 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclarationStatement<JSC::ASTBuilder>(a1, a2, v15 != 0);
      goto LABEL_713;
    case 524:
      ++*(_DWORD *)(a1 + 7308);
      v21 = *(_DWORD *)(a1 + 12);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A3CLL);
      }
      v22 = v21 - 1;
      v23 = *(_QWORD *)a1;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v22 + 10) & 0x100100) == 0x100)
      {
        v24 = *(_DWORD *)(a1 + 7400);
        v25 = *(_DWORD *)(a1 + 7404);
        v26 = *(_DWORD *)(a1 + 7416);
        v27 = *(_DWORD *)(a1 + 7420);
        v28 = *(_DWORD *)(a1 + 7424);
        v29 = *(_DWORD *)(a1 + 7428);
        v30 = *(_QWORD *)(a1 + 7432);
        v31 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v24;
        *(_DWORD *)(a1 + 7448) = v31;
        *(_DWORD *)(a1 + 7452) = v25;
        v32 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v32 + 4) = v24;
        v33 = *(_BYTE *)(v23 + 720 * v22 + 9) & 1;
        *(_BYTE *)(v32 + 56) = 0;
        v34 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v32, a1 + 7368, 0, v33, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v34;
        v39 = v34 == 1 || v34 == 20;
        if (!v39)
        {
          if (v34 == 17)
          {
            v29 = *(_DWORD *)(a1 + 7428);
            v30 = *(_QWORD *)(a1 + 7432);
            v560 = *(_DWORD *)(a1 + 7400);
            v561 = *(_DWORD *)(a1 + 7412);
            v562 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v560;
            *(_DWORD *)(a1 + 7448) = v561;
            *(_DWORD *)(a1 + 7452) = v562;
            v563 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v563 + 4) = v560;
            v564 = *(_DWORD *)(a1 + 12);
            if (!v564)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3BA4);
            }
            v565 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v564 - 1) + 9) & 1;
            *(_BYTE *)(v563 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v563, a1 + 7368, 0, v565, v35, v36, v37, v38);
          }
          else if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
          {
            v179 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
            if (!v179)
            {
              if (*v16 == 20 || (*v16 & 0x100000) != 0)
                goto LABEL_173;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the return expression");
              goto LABEL_174;
            }
            v184 = v179;
            v1052 = v10;
            v185 = *(_DWORD *)(a1 + 7368);
            if (v185 == 17)
            {
              v186 = *(_DWORD *)(a1 + 7428);
              v187 = *(_QWORD *)(a1 + 7432);
              v188 = *(_DWORD *)(a1 + 7400);
              v189 = *(_DWORD *)(a1 + 7412);
              v190 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v188;
              *(_DWORD *)(a1 + 7448) = v189;
              *(_DWORD *)(a1 + 7452) = v190;
              v191 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v191 + 4) = v188;
              v192 = *(_DWORD *)(a1 + 12);
              if (!v192)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3ABCLL);
              }
              v193 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v192 - 1) + 9) & 1;
              *(_BYTE *)(v191 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v191, a1 + 7368, 0, v193, v180, v181, v182, v183);
            }
            else
            {
              v186 = *(_DWORD *)(a1 + 7444);
              v187 = *(_QWORD *)(a1 + 7448);
              if (v185 != 1 && v185 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
              {
                if ((v185 & 0x100000) != 0)
                  goto LABEL_960;
                v10 = v1052;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a return statement");
                goto LABEL_174;
              }
            }
            v194 = *(uint64_t **)(a2 + 8);
            SwitchStatement = *v194;
            if ((unint64_t)(v194[1] - *v194) <= 0x57)
            {
              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v194);
              SwitchStatement = *v194;
            }
            *v194 = SwitchStatement + 88;
            *(_BYTE *)(SwitchStatement + 24) = 0;
            *(_QWORD *)(SwitchStatement + 32) = 0;
            *(_QWORD *)SwitchStatement = &off_1E358A520;
            *(_QWORD *)(SwitchStatement + 80) = v184;
            *(_DWORD *)(SwitchStatement + 40) = v186;
            *(_QWORD *)(SwitchStatement + 44) = v187;
            *(_DWORD *)(SwitchStatement + 52) = v26;
            *(_DWORD *)(SwitchStatement + 56) = v27;
            *(_DWORD *)(SwitchStatement + 60) = v28;
            *(_DWORD *)(SwitchStatement + 64) = v186;
            *(_QWORD *)(SwitchStatement + 68) = v187;
            *(_DWORD *)(SwitchStatement + 28) = v186;
            *(_DWORD *)(SwitchStatement + 8) = v26;
            *(_DWORD *)(SwitchStatement + 12) = v27;
            *(_DWORD *)(SwitchStatement + 16) = v28;
            *(_DWORD *)(SwitchStatement + 20) = -1;
            goto LABEL_98;
          }
        }
        v40 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v40;
        if ((unint64_t)(v40[1] - *v40) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v40);
          SwitchStatement = *v40;
        }
        *v40 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)SwitchStatement = &off_1E358A520;
        *(_QWORD *)(SwitchStatement + 80) = 0;
        *(_DWORD *)(SwitchStatement + 40) = v29;
        *(_QWORD *)(SwitchStatement + 44) = v30;
        *(_DWORD *)(SwitchStatement + 52) = v26;
        *(_DWORD *)(SwitchStatement + 56) = v27;
        *(_DWORD *)(SwitchStatement + 60) = v28;
        *(_DWORD *)(SwitchStatement + 64) = v29;
        *(_QWORD *)(SwitchStatement + 68) = v30;
        *(_DWORD *)(SwitchStatement + 28) = v29;
        *(_DWORD *)(SwitchStatement + 8) = v26;
        *(_DWORD *)(SwitchStatement + 12) = v27;
        *(_DWORD *)(SwitchStatement + 16) = v28;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        goto LABEL_25;
      }
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Return statements are only valid inside functions");
      goto LABEL_174;
    case 525:
      v45 = *(_DWORD *)(a1 + 7400);
      v46 = *(_DWORD *)(a1 + 7404);
      v47 = *(_DWORD *)(a1 + 7408);
      v48 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v45;
      *(_DWORD *)(a1 + 7448) = v48;
      *(_DWORD *)(a1 + 7452) = v46;
      v49 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v49 + 4) = v45;
      v50 = *(_DWORD *)(a1 + 12);
      if (!v50)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A54);
      }
      v51 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v50 - 1) + 9) & 1;
      *(_BYTE *)(v49 + 56) = 0;
      v52 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v49, a1 + 7368, 0, v51, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v52;
      if (v52 != 2)
      {
        if (v52 == 20 || (v52 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
        goto LABEL_174;
      }
      v57 = *(_DWORD *)(a1 + 7400);
      v58 = *(_DWORD *)(a1 + 7412);
      v59 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v57;
      *(_DWORD *)(a1 + 7448) = v58;
      *(_DWORD *)(a1 + 7452) = v59;
      v60 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v60 + 4) = v57;
      v61 = *(_DWORD *)(a1 + 12);
      if (!v61)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A5CLL);
      }
      v62 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1;
      *(_BYTE *)(v60 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v60, a1 + 7368, 0, v62, v53, v54, v55, v56);
      v63 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (!v63)
      {
        if (*v16 == 20 || (*v16 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
        goto LABEL_174;
      }
      v68 = v63;
      *(_BYTE *)(v63 + 24) = 1;
      v69 = *(_QWORD *)(v63 + 8);
      v70 = *(_DWORD *)(v63 + 16);
      *(_QWORD *)&v1080 = v69;
      DWORD2(v1080) = v70;
      v71 = *(_QWORD *)(a1 + 7520);
      if (v71 && (v69 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v71, (uint64_t)&v1080);
      v72 = *v16;
      if (*v16 != 3)
      {
        if (v72 == 20 || (v72 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
        goto LABEL_174;
      }
      LODWORD(v1053) = v47;
      v73 = (unsigned int *)(a1 + 7400);
      v74 = *(_DWORD *)(a1 + 7400);
      v75 = *(_DWORD *)(a1 + 7412);
      v76 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v74;
      *(_DWORD *)(a1 + 7448) = v75;
      *(_DWORD *)(a1 + 7452) = v76;
      v77 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v77 + 4) = v74;
      v78 = *(_DWORD *)(a1 + 12);
      if (!v78)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3A64);
      }
      v79 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1;
      *(_BYTE *)(v77 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v77, a1 + 7368, 0, v79, v64, v65, v66, v67);
      v1075 = 0;
      v9[161] = 1;
      v80 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1075, 0);
      v85 = *(_DWORD *)(a1 + 7368);
      if (v80)
      {
        if (v85 != 538)
        {
          v86 = *(uint64_t **)(a2 + 8);
          SwitchStatement = *v86;
          if ((unint64_t)(v86[1] - *v86) <= 0x3F)
          {
            v950 = v80;
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v86);
            v80 = v950;
            SwitchStatement = *v86;
          }
          *v86 = SwitchStatement + 64;
          *(_BYTE *)(SwitchStatement + 24) = 0;
          *(_QWORD *)SwitchStatement = &off_1E358A140;
          *(_QWORD *)(SwitchStatement + 32) = 0;
          *(_QWORD *)(SwitchStatement + 40) = v68;
          *(_QWORD *)(SwitchStatement + 48) = v80;
          *(_QWORD *)(SwitchStatement + 56) = 0;
          *(_DWORD *)(SwitchStatement + 28) = v74;
          v87 = (int)v1053;
          *(_DWORD *)(SwitchStatement + 8) = v45;
          *(_DWORD *)(SwitchStatement + 12) = v87;
          *(_DWORD *)(SwitchStatement + 16) = v46;
          *(_DWORD *)(SwitchStatement + 20) = -1;
          goto LABEL_40;
        }
        v1048 = v80;
        v1049 = 0;
        v1047 = 0;
        v1045 = 0;
        v239 = 0;
        v240 = 0;
        v1080 = 0uLL;
        v1067[0] = 0;
        v1067[1] = 0;
        v1070 = 0uLL;
        v1054[0] = 0;
        v1054[1] = 0;
        LODWORD(v1050) = v46;
        while (1)
        {
          v1046.i32[0] = v240;
          v1051.i32[0] = v239;
          v1079 = *(_OWORD *)v73;
          v241 = *(_DWORD *)(a1 + 7400);
          v242 = *(_DWORD *)(a1 + 7412);
          v243 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v241;
          *(_DWORD *)(a1 + 7448) = v242;
          *(_DWORD *)(a1 + 7452) = v243;
          v244 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v244 + 4) = v241;
          v245 = *(_DWORD *)(a1 + 12);
          if (!v245)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3A7CLL);
          }
          v246 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v245 - 1) + 9) & 1;
          *(_BYTE *)(v244 + 56) = 0;
          v247 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v244, a1 + 7368, 0, v246, v81, v82, v83, v84);
          *(_DWORD *)(a1 + 7368) = v247;
          if (v247 != 525)
          {
            *(_QWORD *)&v1077 = 0;
            v9[161] = 1;
            v1063 = 0;
            v252 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1077, 0);
            v1063 = v252;
            if (v252)
            {
              if (v1051.i32[0] == LODWORD(v1054[1]))
              {
                v256 = (uint64_t *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1054, v1051.u32[0] + 1, (unint64_t)&v1063);
                v239 = HIDWORD(v1054[1]) + 1;
                v257 = *v256;
                v1049 = v1054[0];
                *((_QWORD *)v1054[0] + HIDWORD(v1054[1])) = v257;
              }
              else
              {
                v239 = v1051.i32[0] + 1;
                *((_QWORD *)v1049 + v1051.u32[0]) = v252;
              }
              HIDWORD(v1054[1]) = v239;
              v258 = 54;
              v240 = 1;
              goto LABEL_138;
            }
            if (*v16 == 20 || (*v16 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              v258 = 1;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an else block");
LABEL_890:
              v239 = v1051.i32[0];
              v240 = v1046.i32[0];
LABEL_138:
              v259 = v1048;
              goto LABEL_139;
            }
            v258 = 1;
            goto LABEL_890;
          }
          v261 = *(unsigned int *)(a1 + 7400);
          v262 = *(_DWORD *)(a1 + 7412);
          v263 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v261;
          *(_DWORD *)(a1 + 7448) = v262;
          *(_DWORD *)(a1 + 7452) = v263;
          v264 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v264 + 4) = v261;
          v265 = *(_DWORD *)(a1 + 12);
          if (!v265)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3AC4);
          }
          v266 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v265 - 1) + 9) & 1;
          *(_BYTE *)(v264 + 56) = 0;
          v267 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v264, a1 + 7368, 0, v266, v248, v249, v250, v251);
          *(_DWORD *)(a1 + 7368) = v267;
          if (v267 != 2)
          {
            if (v267 == 20 || (v267 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              goto LABEL_533;
            }
            v703 = v1049;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
LABEL_534:
            v706 = 0;
            SwitchStatement = 0;
            if (v703)
              goto LABEL_443;
            goto LABEL_444;
          }
          v268 = *(_DWORD *)(a1 + 7400);
          v269 = *(_DWORD *)(a1 + 7412);
          v270 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v268;
          *(_DWORD *)(a1 + 7448) = v269;
          *(_DWORD *)(a1 + 7452) = v270;
          v271 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v271 + 4) = v268;
          v272 = *(_DWORD *)(a1 + 12);
          if (!v272)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3ACCLL);
          }
          v273 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v272 - 1) + 9) & 1;
          *(_BYTE *)(v271 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v271, a1 + 7368, 0, v273, v81, v82, v83, v84);
          v1063 = 0;
          v274 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
          v1063 = v274;
          if (!v274)
          {
            if (*v16 != 20 && (*v16 & 0x100000) == 0)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_763;
              v258 = 1;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
              goto LABEL_764;
            }
LABEL_762:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            goto LABEL_763;
          }
          *(_BYTE *)(v274 + 24) = 1;
          v275 = *(_QWORD *)(v274 + 8);
          v276 = *(_DWORD *)(v274 + 16);
          *(_QWORD *)&v1077 = v275;
          DWORD2(v1077) = v276;
          v277 = *(_QWORD *)(a1 + 7520);
          if (v277 && (v275 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v277, (uint64_t)&v1077);
          v278 = *v16;
          if (*v16 != 3)
          {
            if (v278 != 20 && (v278 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
LABEL_763:
              v258 = 1;
LABEL_764:
              v259 = v1048;
              v239 = v1051.i32[0];
              goto LABEL_161;
            }
            goto LABEL_762;
          }
          v1044 = v261;
          v279 = *v73;
          v280 = *(_DWORD *)(a1 + 7412);
          v281 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v279;
          *(_DWORD *)(a1 + 7448) = v280;
          *(_DWORD *)(a1 + 7452) = v281;
          v282 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v282 + 4) = v279;
          v283 = *(_DWORD *)(a1 + 12);
          if (!v283)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3AE4);
          }
          v284 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v283 - 1) + 9) & 1;
          *(_BYTE *)(v282 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v282, a1 + 7368, 0, v284, v81, v82, v83, v84);
          *(_QWORD *)&v1077 = 0;
          v9[161] = 1;
          v1061 = 0;
          v1061 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1077, 0);
          if (v1061)
          {
            v285 = v1045;
            if ((_DWORD)v1045 == DWORD2(v1070))
            {
              v286 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1070, v1045 + 1, (unint64_t)&v1079);
              v285 = HIDWORD(v1070);
              *(_OWORD *)(v1070 + 16 * HIDWORD(v1070)) = *v286;
            }
            else
            {
              *(_OWORD *)(v1070 + 16 * v1045) = v1079;
            }
            v1045 = (v285 + 1);
            HIDWORD(v1070) = v285 + 1;
            v287 = v1047;
            if ((_DWORD)v1047 == DWORD2(v1080))
            {
              v288 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1080, v1047 + 1, (unint64_t)&v1063);
              v287 = HIDWORD(v1080);
              *(_QWORD *)(v1080 + 8 * HIDWORD(v1080)) = *v288;
            }
            else
            {
              *(_QWORD *)(v1080 + 8 * v1047) = v1063;
            }
            v1047 = (v287 + 1);
            HIDWORD(v1080) = v287 + 1;
            v1059 = v1044 | (v279 << 32);
            if (HIDWORD(v1067[1]) == LODWORD(v1067[1]))
            {
              v289 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1067, HIDWORD(v1067[1]) + 1, (unint64_t)&v1059);
              *((_QWORD *)v1067[0] + HIDWORD(v1067[1])) = *v289;
            }
            else
            {
              *((_QWORD *)v1067[0] + HIDWORD(v1067[1])) = v1044 | (v279 << 32);
            }
            ++HIDWORD(v1067[1]);
            v290 = v1051.u32[0];
            if (v1051.i32[0] == LODWORD(v1054[1]))
            {
              v291 = (uint64_t *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1054, v1051.u32[0] + 1, (unint64_t)&v1061);
              v258 = 0;
              v290 = HIDWORD(v1054[1]);
              v239 = HIDWORD(v1054[1]) + 1;
              v292 = v1054[0];
              v293 = *v291;
              v1049 = v1054[0];
            }
            else
            {
              v258 = 0;
              v293 = v1061;
              v239 = v1051.i32[0] + 1;
              v292 = v1049;
            }
            *((_QWORD *)v292 + v290) = v293;
            HIDWORD(v1054[1]) = v239;
            goto LABEL_160;
          }
          if (*v16 == 20 || (*v16 & 0x100000) != 0)
            break;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_903;
          v258 = 1;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
LABEL_904:
          v239 = v1051.i32[0];
LABEL_160:
          v259 = v1048;
LABEL_161:
          v240 = v1046.i32[0];
LABEL_139:
          if (v258)
          {
            v39 = v258 == 54;
            v260 = v1050;
            if (!v39)
            {
LABEL_533:
              v703 = v1049;
              goto LABEL_534;
            }
LABEL_436:
            if ((v240 & 1) != 0)
            {
              v702 = v1047;
            }
            else
            {
              if (!(_DWORD)v1047)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C7CLL);
              }
              v805 = *(_QWORD *)(v1080 + 8 * v1047 - 8);
              HIDWORD(v1080) = v1047 - 1;
              if (!v239)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C84);
              }
              v1052 = v10;
              v806 = *((_QWORD *)v1049 + v239 - 1);
              v807 = v239 - 1;
              HIDWORD(v1054[1]) = v239 - 1;
              if (!HIDWORD(v1067[1]))
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C8CLL);
              }
              v1047 = (v1047 - 1);
              v808 = (char *)v1067[0] + 8 * HIDWORD(v1067[1]);
              v810 = *((_DWORD *)v808 - 2);
              v809 = *((_DWORD *)v808 - 1);
              --HIDWORD(v1067[1]);
              if (!(_DWORD)v1045)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C94);
              }
              v811 = *(int32x2_t *)(v1070 + 16 * v1045 - 12);
              v1045 = (v1045 - 1);
              HIDWORD(v1070) = v1045;
              v812 = *(uint64_t **)(a2 + 8);
              v813 = *v812;
              if ((unint64_t)(v812[1] - *v812) <= 0x3F)
              {
                v1006 = *(JSC::ParserArena **)(a2 + 8);
                v1046 = v811;
                v1051.i32[0] = v239;
                v1044 = v805;
                JSC::ParserArena::allocateFreeablePool(v1006);
                v805 = v1044;
                v239 = v1051.i32[0];
                v259 = v1048;
                v811 = v1046;
                v813 = *v812;
              }
              *v812 = v813 + 64;
              *(_DWORD *)(v813 + 20) = -1;
              *(_BYTE *)(v813 + 24) = 0;
              *(_QWORD *)v813 = &off_1E358A140;
              *(_QWORD *)(v813 + 32) = 0;
              *(_QWORD *)(v813 + 40) = v805;
              *(_QWORD *)(v813 + 48) = v806;
              *(_QWORD *)(v813 + 56) = 0;
              *(_DWORD *)(v813 + 28) = v809;
              *(_DWORD *)(v813 + 8) = v810;
              *(int32x2_t *)(v813 + 12) = vrev64_s32(v811);
              *(_QWORD *)&v1079 = v813;
              *(_DWORD *)(v813 + 20) = *(_DWORD *)(v806 + 20);
              if (v807 == LODWORD(v1054[1]))
              {
                v814 = (uint64_t *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1054, v239, (unint64_t)&v1079);
                v815 = HIDWORD(v1054[1]);
                v816 = *v814;
                v259 = v1048;
                *((_QWORD *)v1054[0] + HIDWORD(v1054[1])) = v816;
                v239 = v815 + 1;
              }
              else
              {
                *((_QWORD *)v1049 + v807) = v813;
              }
              v10 = v1052;
              v260 = v1050;
              v702 = v1047;
              HIDWORD(v1054[1]) = v239;
            }
            if (v702)
            {
              v709 = (WTF *)v1080;
              v710 = v702;
              v711 = v1045 - v702;
              v712 = (int32x2_t)(v710 - 1);
              v713 = 16 * v1045;
              v714 = v1070 - 12;
              v1052 = v10;
              do
              {
                if (!v239)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB3BFCLL);
                }
                if (v239 == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB3C04);
                }
                v254 = *((_QWORD *)v709 + *(_QWORD *)&v712);
                v253 = v1054[0];
                v715 = *((_QWORD *)v1054[0] + v239 - 1);
                v255 = *((_QWORD *)v1054[0] + v239 - 2);
                v716 = v239 - 2;
                HIDWORD(v1054[1]) = v239 - 2;
                if (!HIDWORD(v1067[1]))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB3C0CLL);
                }
                v717 = (char *)v1067[0] + 8 * HIDWORD(v1067[1]);
                v718 = *((_DWORD *)v717 - 2);
                v719 = *((_DWORD *)v717 - 1);
                --HIDWORD(v1067[1]);
                if (!v713)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB3C14);
                }
                v720 = *(int32x2_t *)(v714 + v713);
                *(_QWORD *)&v1079 = 0;
                v721 = *(uint64_t **)(a2 + 8);
                v722 = *v721;
                if ((unint64_t)(v721[1] - *v721) <= 0x3F)
                {
                  v1004 = *(JSC::ParserArena **)(a2 + 8);
                  v1051 = v720;
                  v1049 = v709;
                  LODWORD(v1047) = v711;
                  v1045 = v713;
                  v1046 = v712;
                  v1043 = v1054[0];
                  v1044 = v714;
                  v1041 = v255;
                  v1042 = v254;
                  JSC::ParserArena::allocateFreeablePool(v1004);
                  v255 = v1041;
                  v254 = v1042;
                  v253 = v1043;
                  v714 = v1044;
                  v713 = v1045;
                  v712 = v1046;
                  v711 = v1047;
                  v259 = v1048;
                  v709 = v1049;
                  v720 = v1051;
                  v722 = *v721;
                }
                *v721 = v722 + 64;
                *(_DWORD *)(v722 + 20) = -1;
                *(_BYTE *)(v722 + 24) = 0;
                *(_QWORD *)v722 = &off_1E358A140;
                *(_QWORD *)(v722 + 32) = 0;
                *(_QWORD *)(v722 + 40) = v254;
                *(_QWORD *)(v722 + 48) = v255;
                *(_QWORD *)(v722 + 56) = v715;
                *(_DWORD *)(v722 + 28) = v719;
                *(_DWORD *)(v722 + 8) = v718;
                *(int32x2_t *)(v722 + 12) = vrev64_s32(v720);
                *(_QWORD *)&v1079 = v722;
                *(_DWORD *)(v722 + 20) = *(_DWORD *)(v715 + 20);
                if ((_DWORD)v716 == LODWORD(v1054[1]))
                {
                  v723 = v716 + 1;
                  v724 = v709;
                  v725 = v711;
                  v726 = v712;
                  v727 = v713;
                  v716 = v714;
                  v728 = (uint64_t *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1054, v723, (unint64_t)&v1079);
                  v714 = v716;
                  v713 = v727;
                  v712 = v726;
                  v711 = v725;
                  v709 = v724;
                  LODWORD(v716) = HIDWORD(v1054[1]);
                  v729 = *v728;
                  v259 = v1048;
                  *((_QWORD *)v1054[0] + HIDWORD(v1054[1])) = v729;
                }
                else
                {
                  *((_QWORD *)v253 + v716) = v722;
                }
                v260 = v1050;
                v239 = v716 + 1;
                HIDWORD(v1054[1]) = v716 + 1;
                v730 = v712.i32[0];
                --*(_QWORD *)&v712;
                v713 -= 16;
                v10 = v1052;
              }
              while (v730);
              HIDWORD(v1080) = 0;
              HIDWORD(v1070) = v711;
            }
            if (!v239)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3AECLL);
            }
            v703 = v1054[0];
            v704 = *((_QWORD *)v1054[0] + v239 - 1);
            v705 = *(JSC::ParserArena **)(a2 + 8);
            v706 = *(_QWORD *)v705;
            if (*((_QWORD *)v705 + 1) - *(_QWORD *)v705 <= 0x3FuLL)
            {
              JSC::ParserArena::allocateFreeablePool(v705);
              v259 = v1048;
              v706 = *(_QWORD *)v705;
            }
            *(_QWORD *)v705 = v706 + 64;
            *(_BYTE *)(v706 + 24) = 0;
            *(_QWORD *)v706 = &off_1E358A140;
            *(_QWORD *)(v706 + 32) = 0;
            *(_QWORD *)(v706 + 40) = v68;
            *(_QWORD *)(v706 + 48) = v259;
            *(_QWORD *)(v706 + 56) = v704;
            *(_DWORD *)(v706 + 28) = v74;
            v707 = (int)v1053;
            *(_DWORD *)(v706 + 8) = v45;
            *(_DWORD *)(v706 + 12) = v707;
            *(_DWORD *)(v706 + 16) = v260;
            *(_DWORD *)(v706 + 20) = -1;
LABEL_443:
            v1054[0] = 0;
            LODWORD(v1054[1]) = 0;
            WTF::fastFree((unint64_t)v703, v253, v254, v255, v81, v82, v83, v84);
            SwitchStatement = v706;
LABEL_444:
            if ((_QWORD)v1070)
              WTF::fastFree(v1070, v253, v254, v255, v81, v82, v83, v84);
            v708 = v1067[0];
            if (v1067[0])
            {
              v1067[0] = 0;
              LODWORD(v1067[1]) = 0;
              WTF::fastFree((unint64_t)v708, v253, v254, v255, v81, v82, v83, v84);
            }
            if ((_QWORD)v1080)
              WTF::fastFree(v1080, v253, v254, v255, v81, v82, v83, v84);
            goto LABEL_40;
          }
          v260 = v1050;
          if (*v16 != 538)
            goto LABEL_436;
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_903:
        v258 = 1;
        goto LABEL_904;
      }
      if (v85 == 20 || (v85 & 0x100000) != 0)
        goto LABEL_607;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
      goto LABEL_608;
    case 527:
      v740 = *(_DWORD *)(a1 + 7400);
      v741 = *(_DWORD *)(a1 + 7412);
      v742 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v740;
      *(_DWORD *)(a1 + 7448) = v741;
      *(_DWORD *)(a1 + 7452) = v742;
      v743 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v743 + 4) = v740;
      v744 = *(_DWORD *)(a1 + 12);
      if (!v744)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3C64);
      }
      v745 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v744 - 1) + 9) & 1;
      *(_BYTE *)(v743 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v743, a1 + 7368, 0, v745, a5, a6, a7, a8);
      v1067[0] = 0;
      v746 = *(_DWORD *)(a1 + 12);
      if (!v746)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3C6CLL);
      }
      v747 = *(_QWORD *)a1 + 720 * (v746 - 1);
      ++*(_DWORD *)(v747 + 24);
      v748 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, v1067, 0);
      v753 = *(_DWORD *)(a1 + 12);
      if (!v753)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3C74);
      }
      v754 = v748;
      v755 = v753 - 1;
      v756 = *(_QWORD *)a1;
      --*(_DWORD *)(*(_QWORD *)a1 + 720 * v755 + 24);
      if (v748)
      {
        v757 = *(_DWORD *)(a1 + 7368);
        if (v757 == 528)
        {
          v758 = *(_DWORD *)(a1 + 7400);
          v759 = *(_DWORD *)(a1 + 7404);
          v760 = *(_DWORD *)(a1 + 7408);
          v761 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v758;
          *(_DWORD *)(a1 + 7448) = v761;
          *(_DWORD *)(a1 + 7452) = v759;
          v762 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v762 + 4) = v758;
          v763 = *(_BYTE *)(v756 + 720 * v755 + 9) & 1;
          *(_BYTE *)(v762 + 56) = 0;
          v764 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v762, a1 + 7368, 0, v763, v749, v750, v751, v752);
          *(_DWORD *)(a1 + 7368) = v764;
          if (v764 == 2)
          {
            v769 = *(_DWORD *)(a1 + 7400);
            v770 = *(_DWORD *)(a1 + 7412);
            v771 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v769;
            *(_DWORD *)(a1 + 7448) = v770;
            *(_DWORD *)(a1 + 7452) = v771;
            v772 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v772 + 4) = v769;
            v773 = *(_DWORD *)(a1 + 12);
            if (!v773)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3C9CLL);
            }
            v774 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v773 - 1) + 9) & 1;
            *(_BYTE *)(v772 + 56) = 0;
            v775 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v772, a1 + 7368, 0, v774, v765, v766, v767, v768);
            *(_DWORD *)(a1 + 7368) = v775;
            if (v775 == 3)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a do-while loop condition");
            }
            else
            {
              v776 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
              if (v776)
              {
                v781 = v776;
                *(_BYTE *)(v776 + 24) = 1;
                v782 = *(_QWORD *)(v776 + 8);
                v783 = *(_DWORD *)(v776 + 16);
                *(_QWORD *)&v1080 = v782;
                DWORD2(v1080) = v783;
                v784 = *(_QWORD *)(a1 + 7520);
                if (v784 && (v782 & 0x80000000) == 0)
                  JSC::DebuggerPausePositions::appendPause(v784, (uint64_t)&v1080);
                v785 = *v16;
                if (*v16 == 3)
                {
                  v786 = *(_DWORD *)(a1 + 7400);
                  v787 = *(_DWORD *)(a1 + 7412);
                  v788 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v786;
                  *(_DWORD *)(a1 + 7448) = v787;
                  *(_DWORD *)(a1 + 7452) = v788;
                  v789 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v789 + 4) = v786;
                  v790 = *(_DWORD *)(a1 + 12);
                  if (!v790)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EB3CACLL);
                  }
                  v791 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v790 - 1) + 9) & 1;
                  *(_BYTE *)(v789 + 56) = 0;
                  v792 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v789, a1 + 7368, 0, v791, v777, v778, v779, v780);
                  *(_DWORD *)(a1 + 7368) = v792;
                  if (v792 == 17)
                  {
                    v797 = *(_DWORD *)(a1 + 7400);
                    v798 = *(_DWORD *)(a1 + 7412);
                    v799 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v797;
                    *(_DWORD *)(a1 + 7448) = v798;
                    *(_DWORD *)(a1 + 7452) = v799;
                    v800 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v800 + 4) = v797;
                    v801 = *(_DWORD *)(a1 + 12);
                    if (!v801)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EB3CCCLL);
                    }
                    v802 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v801 - 1) + 9) & 1;
                    *(_BYTE *)(v800 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v800, a1 + 7368, 0, v802, v793, v794, v795, v796);
                  }
                  v803 = v760;
                  v804 = *(uint64_t **)(a2 + 8);
                  SwitchStatement = *v804;
                  if ((unint64_t)(v804[1] - *v804) <= 0x37)
                  {
                    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v804);
                    SwitchStatement = *v804;
                  }
                  *v804 = SwitchStatement + 56;
                  *(_BYTE *)(SwitchStatement + 24) = 0;
                  *(_QWORD *)SwitchStatement = &off_1E358A1E0;
                  *(_QWORD *)(SwitchStatement + 32) = 0;
                  *(_QWORD *)(SwitchStatement + 40) = v754;
                  *(_QWORD *)(SwitchStatement + 48) = v781;
                  *(_DWORD *)(SwitchStatement + 28) = v758;
                  *(_DWORD *)(SwitchStatement + 8) = v740;
                  *(_DWORD *)(SwitchStatement + 12) = v803;
                  *(_DWORD *)(SwitchStatement + 16) = v759;
                  *(_DWORD *)(SwitchStatement + 20) = -1;
                  goto LABEL_40;
                }
                if (v785 == 20 || (v785 & 0x100000) != 0)
                  goto LABEL_607;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(a1);
              }
              else
              {
                if (*v16 == 20 || (*v16 & 0x100000) != 0)
                  goto LABEL_607;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unable to parse do-while loop condition");
              }
            }
          }
          else
          {
            if (v764 == 20 || (v764 & 0x100000) != 0)
              goto LABEL_607;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(a1);
          }
        }
        else
        {
          if (v757 == 20 || (v757 & 0x100000) != 0)
            goto LABEL_607;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1);
        }
      }
      else
      {
        if (*v16 == 20 || (*v16 & 0x100000) != 0)
          goto LABEL_607;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement following 'do'");
      }
      goto LABEL_608;
    case 528:
      v331 = *(_DWORD *)(a1 + 7400);
      v332 = *(_DWORD *)(a1 + 7404);
      v333 = *(_DWORD *)(a1 + 7408);
      v334 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v331;
      *(_DWORD *)(a1 + 7448) = v334;
      *(_DWORD *)(a1 + 7452) = v332;
      v335 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v335 + 4) = v331;
      v336 = *(_DWORD *)(a1 + 12);
      if (!v336)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B0CLL);
      }
      v337 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v336 - 1) + 9) & 1;
      *(_BYTE *)(v335 + 56) = 0;
      v338 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v335, a1 + 7368, 0, v337, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v338;
      if (v338 != 2)
      {
        if (v338 == 20 || (v338 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(a1);
        goto LABEL_174;
      }
      v343 = *(_DWORD *)(a1 + 7400);
      v344 = *(_DWORD *)(a1 + 7412);
      v345 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v343;
      *(_DWORD *)(a1 + 7448) = v344;
      *(_DWORD *)(a1 + 7452) = v345;
      v346 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v346 + 4) = v343;
      v347 = *(_DWORD *)(a1 + 12);
      if (!v347)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B14);
      }
      v348 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v347 - 1) + 9) & 1;
      *(_BYTE *)(v346 + 56) = 0;
      v349 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v346, a1 + 7368, 0, v348, v339, v340, v341, v342);
      *(_DWORD *)(a1 + 7368) = v349;
      if (v349 == 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a while loop condition");
        goto LABEL_174;
      }
      v350 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (!v350)
      {
        if (*v16 == 20 || (*v16 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Unable to parse while loop condition");
        goto LABEL_174;
      }
      v355 = v350;
      *(_BYTE *)(v350 + 24) = 1;
      v356 = *(_QWORD *)(v350 + 8);
      v357 = *(_DWORD *)(v350 + 16);
      *(_QWORD *)&v1080 = v356;
      DWORD2(v1080) = v357;
      v358 = *(_QWORD *)(a1 + 7520);
      if (v358 && (v356 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v358, (uint64_t)&v1080);
      v359 = *(_DWORD *)(a1 + 7368);
      if (v359 != 3)
      {
        if (v359 == 20 || (v359 & 0x100000) != 0)
          goto LABEL_173;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, ")", "while loop condition");
        goto LABEL_174;
      }
      v360 = *(_DWORD *)(a1 + 7400);
      v361 = *(_DWORD *)(a1 + 7412);
      v362 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v360;
      *(_DWORD *)(a1 + 7448) = v361;
      *(_DWORD *)(a1 + 7452) = v362;
      v363 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v363 + 4) = v360;
      v364 = *(_DWORD *)(a1 + 12);
      if (!v364)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B1CLL);
      }
      LODWORD(v1053) = v332;
      v365 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v364 - 1) + 9) & 1;
      *(_BYTE *)(v363 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v363, a1 + 7368, 0, v365, v351, v352, v353, v354);
      *(_QWORD *)&v1080 = 0;
      v366 = *(_DWORD *)(a1 + 12);
      if (!v366)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B24);
      }
      v367 = *(_QWORD *)a1 + 720 * (v366 - 1);
      ++*(_DWORD *)(v367 + 24);
      v368 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v1080, 0);
      v369 = *(_DWORD *)(a1 + 12);
      if (!v369)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B2CLL);
      }
      v370 = v368;
      v371 = *(_QWORD *)a1 + 720 * (v369 - 1);
      --*(_DWORD *)(v371 + 24);
      if (v368)
      {
        v372 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v372;
        if ((unint64_t)(v372[1] - *v372) <= 0x37)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v372);
          SwitchStatement = *v372;
        }
        *v372 = SwitchStatement + 56;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)SwitchStatement = &off_1E358A280;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)(SwitchStatement + 40) = v355;
        *(_QWORD *)(SwitchStatement + 48) = v370;
        *(_DWORD *)(SwitchStatement + 28) = v360;
        *(_DWORD *)(SwitchStatement + 8) = v331;
        *(_DWORD *)(SwitchStatement + 12) = v333;
        *(_DWORD *)(SwitchStatement + 16) = (_DWORD)v1053;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        goto LABEL_40;
      }
      if (*v16 == 20 || (*v16 & 0x100000) != 0)
        goto LABEL_607;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a while loop");
      goto LABEL_608;
    case 529:
      *(_OWORD *)v1067 = *(_OWORD *)(a1 + 7400);
      v607 = *(_DWORD *)(a1 + 7400);
      v608 = *(_DWORD *)(a1 + 7412);
      v609 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v607;
      *(_DWORD *)(a1 + 7448) = v608;
      *(_DWORD *)(a1 + 7452) = v609;
      v610 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v610 + 4) = v607;
      v611 = *(_DWORD *)(a1 + 12);
      if (!v611)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3BD4);
      }
      v612 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v611 - 1) + 9) & 1;
      *(_BYTE *)(v610 + 56) = 0;
      v613 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v610, a1 + 7368, 0, v612, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v613;
      if (v613 == 2)
      {
        v618 = *(_DWORD *)(a1 + 7400);
        v619 = *(_DWORD *)(a1 + 7412);
        v620 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v618;
        *(_DWORD *)(a1 + 7448) = v619;
        *(_DWORD *)(a1 + 7452) = v620;
        v621 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v621 + 4) = v618;
        v622 = *(_DWORD *)(a1 + 12);
        if (!v622)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3BE4);
        }
        v623 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v622 - 1) + 9) & 1;
        *(_BYTE *)(v621 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v621, a1 + 7368, 0, v623, v614, v615, v616, v617);
        v624 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
        if (v624)
        {
          v629 = v624;
          *(_BYTE *)(v624 + 24) = 1;
          v630 = *(_QWORD *)(v624 + 8);
          v631 = *(_DWORD *)(v624 + 16);
          *(_QWORD *)&v1080 = v630;
          DWORD2(v1080) = v631;
          v632 = *(_QWORD *)(a1 + 7520);
          if (v632 && (v630 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v632, (uint64_t)&v1080);
          v633 = *v16;
          if (*v16 == 3)
          {
            v634 = *(_DWORD *)(a1 + 7400);
            v635 = *(_DWORD *)(a1 + 7412);
            v636 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v634;
            *(_DWORD *)(a1 + 7448) = v635;
            *(_DWORD *)(a1 + 7452) = v636;
            v637 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v637 + 4) = v634;
            v638 = *(_DWORD *)(a1 + 12);
            if (!v638)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB3BF4);
            }
            v639 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v638 - 1) + 9) & 1;
            *(_BYTE *)(v637 + 56) = 0;
            v640 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v637, a1 + 7368, 0, v639, v625, v626, v627, v628);
            *(_DWORD *)(a1 + 7368) = v640;
            if (!v640)
            {
              v645 = *(_DWORD *)(a1 + 7400);
              v646 = *(_DWORD *)(a1 + 7412);
              v647 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v645;
              *(_DWORD *)(a1 + 7448) = v646;
              *(_DWORD *)(a1 + 7452) = v647;
              v648 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v648 + 4) = v645;
              v649 = *(_DWORD *)(a1 + 12);
              if (!v649)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C1CLL);
              }
              v650 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v649 - 1) + 9) & 1;
              *(_BYTE *)(v648 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v648, a1 + 7368, 0, v650, v641, v642, v643, v644);
              v651 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
              if (*(_DWORD *)(v651 + 12) <= v652)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C24);
              }
              *(_DWORD *)(*(_QWORD *)v651 + 720 * v652 + 10) |= 0x8080u;
              if (*(_DWORD *)(v651 + 12) <= v652)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C2CLL);
              }
              *(_DWORD *)(*(_QWORD *)v651 + 720 * v652 + 10) &= ~0x40u;
              v659 = *(_DWORD *)(a1 + 12);
              if (!v659)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3C34);
              }
              v660 = *(_QWORD *)a1 + 720 * (v659 - 1);
              ++*(_DWORD *)(v660 + 28);
              v661 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::ASTBuilder>(a1, a2, v653, v654, v655, v656, v657, v658);
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_687;
              v668 = (uint64_t)v661;
              if (*v16 != 517)
              {
                v686 = 0;
LABEL_513:
                v817 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::ASTBuilder>(a1, a2, v662, v663, v664, v665, v666, v667);
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v818 = *(_DWORD *)(a1 + 12);
                  if (!v818)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EB3C3CLL);
                  }
                  v819 = v818 - 1;
                  v820 = *(_QWORD *)a1;
                  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v819 + 28);
                  v821 = *(_DWORD *)(a1 + 7368);
                  if (v821 == 1)
                  {
                    v822 = (uint64_t)v817;
                    v823 = *(_DWORD *)(a1 + 7400);
                    v824 = *(_DWORD *)(a1 + 7412);
                    v825 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v823;
                    *(_DWORD *)(a1 + 7448) = v824;
                    *(_DWORD *)(a1 + 7452) = v825;
                    v826 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v826 + 4) = v823;
                    v827 = *(_BYTE *)(v820 + 720 * v819 + 9) & 1;
                    *(_BYTE *)(v826 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v826, a1 + 7368, 0, v827, v664, v665, v666, v667);
                    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 1, v828, v829, v830, v831, v832);
                    SwitchStatement = JSC::ASTBuilder::createSwitchStatement(a2, (uint64_t)v1067, v629, v668, v686, v822, v607, v634, (uint64_t *)&v1080, (uint64_t *)&v1082);
                    v833 = v1082;
                    if (v1082)
                    {
                      v1082 = 0;
                      LODWORD(v1083) = 0;
                      WTF::fastFree(v833, v388, v389, v390, v391, v392, v393, v394);
                    }
                    v834 = (WTF **)&v1080;
                    goto LABEL_576;
                  }
                  if (v821 == 20 || (v821 & 0x100000) != 0)
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  else
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(a1);
                }
LABEL_687:
                JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 0, v663, v664, v665, v666, v667);
                v938 = v1082;
                if (v1082)
                {
                  v1082 = 0;
                  LODWORD(v1083) = 0;
                  WTF::fastFree(v938, v931, v932, v933, v934, v935, v936, v937);
                }
                JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v931, v932, v933, v934, v935, v936, v937);
                goto LABEL_608;
              }
              v1053 = v661;
              v669 = *(_DWORD *)(a1 + 7408);
              v670 = *(_DWORD *)(a1 + 7400);
              v671 = *(_DWORD *)(a1 + 7412);
              v672 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v670;
              *(_DWORD *)(a1 + 7448) = v671;
              *(_DWORD *)(a1 + 7452) = v672;
              v673 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v673 + 4) = v670;
              v674 = *(_DWORD *)(a1 + 12);
              if (!v674)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB3CA4);
              }
              v675 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v674 - 1) + 9) & 1;
              *(_BYTE *)(v673 + 56) = 0;
              v676 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v673, a1 + 7368, 0, v675, v664, v665, v666, v667);
              *(_DWORD *)(a1 + 7368) = v676;
              if (v676 == 18)
              {
                v677 = *(_DWORD *)(a1 + 7400);
                v678 = *(_DWORD *)(a1 + 7412);
                v679 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v677;
                *(_DWORD *)(a1 + 7448) = v678;
                *(_DWORD *)(a1 + 7452) = v679;
                v680 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v680 + 4) = v677;
                v681 = *(_DWORD *)(a1 + 12);
                if (!v681)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB3CB4);
                }
                v682 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v681 - 1) + 9) & 1;
                *(_BYTE *)(v680 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v680, a1 + 7368, 0, v682, v664, v665, v666, v667);
                v683 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
                if (v683)
                {
                  v684 = v683;
                  v685 = *(uint64_t **)(a2 + 8);
                  v686 = *v685;
                  if ((unint64_t)(v685[1] - *v685) <= 0x17)
                  {
                    v1015 = *(JSC::ParserArena **)(a2 + 8);
                    JSC::ParserArena::allocateFreeablePool(v1015);
                    v685 = (uint64_t *)v1015;
                    v686 = *(_QWORD *)v1015;
                  }
                  *v685 = v686 + 24;
                  *(_QWORD *)v686 = 0;
                  *(_QWORD *)(v686 + 8) = v684;
                  *(_DWORD *)(v686 + 16) = v669;
                  goto LABEL_418;
                }
                if (*v16 != 20 && (*v16 & 0x100000) == 0)
                {
                  v668 = (uint64_t)v1053;
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_687;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch default clause");
LABEL_685:
                  v686 = 0;
LABEL_419:
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_687;
                  goto LABEL_513;
                }
              }
              else if (v676 != 20 && (v676 & 0x100000) == 0)
              {
                v668 = (uint64_t)v1053;
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_687;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch default clause");
                goto LABEL_685;
              }
              JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              v686 = 0;
LABEL_418:
              v668 = (uint64_t)v1053;
              goto LABEL_419;
            }
            if (v640 == 20 || (v640 & 0x100000) != 0)
              goto LABEL_607;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(a1);
          }
          else
          {
            if (v633 == 20 || (v633 & 0x100000) != 0)
              goto LABEL_607;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(a1);
          }
        }
        else
        {
          if (*v16 == 20 || (*v16 & 0x100000) != 0)
            goto LABEL_607;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch subject expression");
        }
      }
      else
      {
        if (v613 == 20 || (v613 & 0x100000) != 0)
          goto LABEL_607;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(a1);
      }
      goto LABEL_608;
    case 530:
      JSC::Parser<JSC::Lexer<unsigned char>>::parseWithStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_713:
      SwitchStatement = v959;
      goto LABEL_40;
    case 533:
      v300 = *(_DWORD *)(a1 + 7400);
      v301 = *(_DWORD *)(a1 + 7404);
      v302 = *(_DWORD *)(a1 + 7416);
      v303 = *(_DWORD *)(a1 + 7420);
      v304 = *(_DWORD *)(a1 + 7424);
      v305 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v300;
      *(_DWORD *)(a1 + 7448) = v305;
      *(_DWORD *)(a1 + 7452) = v301;
      v306 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v306 + 4) = v300;
      v307 = *(_DWORD *)(a1 + 12);
      if (!v307)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3AFCLL);
      }
      v308 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v307 - 1) + 9) & 1;
      *(_BYTE *)(v306 + 56) = 0;
      v309 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v306, a1 + 7368, 0, v308, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v309;
      if (v309 == 1 || v309 == 20)
        goto LABEL_195;
      if (v309 == 17)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected expression after 'throw'");
        goto LABEL_174;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
LABEL_195:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot have a newline after 'throw'");
        goto LABEL_174;
      }
      v1052 = v10;
      v483 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (v483)
      {
        v488 = v483;
        v489 = *(_DWORD *)(a1 + 7444);
        v490 = *(_QWORD *)(a1 + 7448);
        v491 = *(_DWORD *)(a1 + 7368);
        if (v491 == 17)
        {
          v695 = *(_DWORD *)(a1 + 7400);
          v696 = *(_DWORD *)(a1 + 7412);
          v697 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v695;
          *(_DWORD *)(a1 + 7448) = v696;
          *(_DWORD *)(a1 + 7452) = v697;
          v698 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v698 + 4) = v695;
          v699 = *(_DWORD *)(a1 + 12);
          if (!v699)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3C44);
          }
          v700 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v699 - 1) + 9) & 1;
          *(_BYTE *)(v698 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v698, a1 + 7368, 0, v700, v484, v485, v486, v487);
        }
        else if (v491 != 1 && v491 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
        {
          if ((v491 & 0x100000) == 0)
          {
            v10 = v1052;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after a throw statement");
            goto LABEL_174;
          }
          goto LABEL_960;
        }
        v701 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v701;
        if ((unint64_t)(v701[1] - *v701) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v701);
          SwitchStatement = *v701;
        }
        *v701 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)SwitchStatement = &off_1E358A700;
        *(_QWORD *)(SwitchStatement + 80) = v488;
        *(_DWORD *)(SwitchStatement + 28) = v489;
        *(_DWORD *)(SwitchStatement + 8) = v302;
        *(_DWORD *)(SwitchStatement + 12) = v303;
        *(_DWORD *)(SwitchStatement + 16) = v304;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        *(_DWORD *)(SwitchStatement + 40) = v489;
        *(_QWORD *)(SwitchStatement + 44) = v490;
        *(_DWORD *)(SwitchStatement + 52) = v302;
        *(_DWORD *)(SwitchStatement + 56) = v303;
        *(_DWORD *)(SwitchStatement + 60) = v304;
        *(_DWORD *)(SwitchStatement + 64) = v489;
        *(_QWORD *)(SwitchStatement + 68) = v490;
LABEL_98:
        v10 = v1052;
        goto LABEL_25;
      }
      if (*v16 != 20 && (*v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for throw statement");
        goto LABEL_961;
      }
LABEL_960:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_961:
      SwitchStatement = 0;
      v10 = v1052;
      goto LABEL_27;
    case 534:
      v1070 = *(_OWORD *)(a1 + 7400);
      v374 = *(_DWORD *)(a1 + 7400);
      v375 = *(_DWORD *)(a1 + 7412);
      v376 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v374;
      *(_DWORD *)(a1 + 7448) = v375;
      *(_DWORD *)(a1 + 7452) = v376;
      v377 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v377 + 4) = v374;
      v378 = *(_DWORD *)(a1 + 12);
      if (!v378)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B34);
      }
      v379 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v378 - 1) + 9) & 1;
      *(_BYTE *)(v377 + 56) = 0;
      v380 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v377, a1 + 7368, 0, v379, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v380;
      if (v380)
      {
        if (v380 != 20 && (v380 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a block statement as body of a try statement");
          goto LABEL_608;
        }
        goto LABEL_607;
      }
      v386 = *(_DWORD *)(a1 + 7308);
      v387 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v381, v382, v383, v384, v385);
      if (!v387)
      {
        if (*v16 != 20 && (*v16 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of try block");
          goto LABEL_608;
        }
LABEL_607:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_608:
        SwitchStatement = 0;
        goto LABEL_40;
      }
      v395 = v387;
      v396 = *(_DWORD *)(a1 + 7308);
      v397 = *(_DWORD *)(a1 + 7444);
      v1067[0] = 0;
      LOBYTE(v1067[1]) = 0;
      v1068 = 0;
      v398 = *(_DWORD *)(a1 + 7368);
      if (v398 != 535)
      {
        v455 = 0;
        v865 = 0;
        v462 = 0;
        if (v398 != 536)
        {
          if (v398 == 20 || (v398 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Try statements must have at least a catch or finally block");
          }
          SwitchStatement = 0;
          v462 = 0;
          goto LABEL_573;
        }
LABEL_667:
        v1048 = v865;
        v923 = *(_DWORD *)(a1 + 7400);
        v924 = *(_DWORD *)(a1 + 7412);
        v925 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v923;
        *(_DWORD *)(a1 + 7448) = v924;
        *(_DWORD *)(a1 + 7452) = v925;
        v926 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v926 + 4) = v923;
        v927 = *(_DWORD *)(a1 + 12);
        if (!v927)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3CECLL);
        }
        LODWORD(v1050) = v397;
        v1051 = (int32x2_t)v395;
        v928 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v927 - 1) + 9) & 1;
        *(_BYTE *)(v926 + 56) = 0;
        v929 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v926, a1 + 7368, 0, v928, v391, v392, v393, v394);
        *(_DWORD *)(a1 + 7368) = v929;
        if (v929)
        {
          if (v929 != 20 && (v929 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Expected block statement for finally body");
            goto LABEL_967;
          }
        }
        else
        {
          v930 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v390, v391, v392, v393, v394);
          if (v930)
          {
            v857 = v930;
            LODWORD(v1049) = v374;
            goto LABEL_566;
          }
          if (*v16 != 20 && (*v16 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse finally body");
            goto LABEL_967;
          }
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_967:
        SwitchStatement = 0;
        goto LABEL_573;
      }
      v399 = *(_DWORD *)(a1 + 7400);
      v400 = *(_DWORD *)(a1 + 7412);
      v401 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v399;
      *(_DWORD *)(a1 + 7448) = v400;
      *(_DWORD *)(a1 + 7452) = v401;
      v402 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v402 + 4) = v399;
      v403 = *(_DWORD *)(a1 + 12);
      if (!v403)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B3CLL);
      }
      v404 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v403 - 1) + 9) & 1;
      *(_BYTE *)(v402 + 56) = 0;
      v405 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v402, a1 + 7368, 0, v404, v391, v392, v393, v394);
      *(_DWORD *)(a1 + 7368) = v405;
      if (v405 != 2)
      {
        if (v405)
        {
          if (v405 != 20 && (v405 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(a1);
            goto LABEL_799;
          }
        }
        else
        {
          v1046.i32[0] = v396;
          LODWORD(v1047) = v386;
          LODWORD(v1050) = v397;
          v1051 = (int32x2_t)v395;
          LODWORD(v1049) = v374;
          v949 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v390, v391, v392, v393, v394);
          v856 = *(_DWORD *)(a1 + 7368);
          if (v949)
          {
            v455 = v949;
            v462 = 0;
            v1048 = 0;
            goto LABEL_563;
          }
          if (v856 != 20 && (v856 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
            goto LABEL_799;
          }
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_799:
        SwitchStatement = 0;
        goto LABEL_575;
      }
      LODWORD(v1049) = v374;
      v406 = *(_DWORD *)(a1 + 7400);
      v407 = *(_DWORD *)(a1 + 7412);
      v408 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v406;
      *(_DWORD *)(a1 + 7448) = v407;
      *(_DWORD *)(a1 + 7452) = v408;
      v409 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v409 + 4) = v406;
      v410 = *(_DWORD *)(a1 + 12);
      if (!v410)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B44);
      }
      v411 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v410 - 1) + 9) & 1;
      *(_BYTE *)(v409 + 56) = 0;
      v412 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v409, a1 + 7368, 0, v411, v391, v392, v393, v394);
      *(_DWORD *)(a1 + 7368) = v412;
      v413 = *(_DWORD *)(a1 + 12);
      if (!v413)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B4CLL);
      }
      v1046.i32[0] = v396;
      LODWORD(v1047) = v386;
      v414 = *(_DWORD *)(a1 + 7456);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v413 - 1) + 12) & 0x10) != 0 && v412 == 546)
      {
        v976 = *(_DWORD *)(a1 + 7456);
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as identifier within static block");
        SwitchStatement = 0;
        *(_DWORD *)(a1 + 7456) = v976;
        goto LABEL_575;
      }
      LODWORD(v1053) = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = v414 + 1;
      v415 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
      v421 = v416;
      if (*(_DWORD *)(v415 + 12) <= v416)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B54);
      }
      v422 = v415;
      v423 = v416;
      *(_DWORD *)(*(_QWORD *)v415 + 720 * v416 + 10) |= 0x8080u;
      if (*(_DWORD *)(v415 + 12) <= v416)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B5CLL);
      }
      *(_DWORD *)(*(_QWORD *)v415 + 720 * v416 + 10) &= ~0x40u;
      v424 = *v16;
      v1051 = (int32x2_t)v395;
      LODWORD(v1050) = v397;
      if (v424 == 12
        || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v424, *(_QWORD **)(a1 + 7376))
        || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| *v16 == 546|| *v16 == 1048592&& **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v1052 = v10;
        if (*(_DWORD *)(v422 + 12) <= v421)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3B64);
        }
        *(_DWORD *)(*(_QWORD *)v422 + 720 * v423 + 10) |= 0x40000u;
        v425 = *(WTF::AtomStringImpl **)(a1 + 7376);
        v426 = *(uint64_t **)(a2 + 8);
        v427 = *v426;
        if ((unint64_t)(v426[1] - *v426) <= 0x2F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
          v427 = *v426;
        }
        *v426 = v427 + 48;
        *(_QWORD *)v427 = &off_1E358B760;
        v428 = *(_QWORD *)(a1 + 7416);
        *(_DWORD *)(v427 + 16) = *(_DWORD *)(a1 + 7424);
        *(_QWORD *)(v427 + 8) = v428;
        v429 = *(_QWORD *)(a1 + 7428);
        *(_DWORD *)(v427 + 28) = *(_DWORD *)(a1 + 7436);
        *(_QWORD *)(v427 + 20) = v429;
        *(_QWORD *)(v427 + 32) = v425;
        v1048 = v427;
        *(_BYTE *)(v427 + 40) = 0;
        LODWORD(v429) = *(_DWORD *)(a1 + 7400);
        v430 = *(_DWORD *)(a1 + 7412);
        v431 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v429;
        *(_DWORD *)(a1 + 7448) = v430;
        *(_DWORD *)(a1 + 7452) = v431;
        v432 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v432 + 4) = v429;
        v433 = *(_DWORD *)(a1 + 12);
        if (!v433)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3B6CLL);
        }
        v434 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v433 - 1) + 9) & 1;
        *(_BYTE *)(v432 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v432, a1 + 7368, 0, v434, v417, v418, v419, v420);
        v10 = v1052;
        if (*(_DWORD *)(v422 + 12) <= v421)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB3B74);
        }
        if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v422 + 720 * v423, v425, 0, v435, v436, v437, v438, v439) & 1) != 0)
        {
          v977 = *(_DWORD *)(a1 + 12);
          if (!v977)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB3DC0);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v977 - 1) + 9) & 1) != 0)
          {
            v10 = v1052;
            v445 = (int)v1053;
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v1080 = *(_QWORD *)v425;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v1080);
            }
            goto LABEL_636;
          }
          v10 = v1052;
        }
      }
      else
      {
        v1048 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 3, 1, 0, 0, 0, 0);
        if (!v1048)
        {
          if (*v16 != 20 && (*v16 & 0x100000) == 0)
          {
            v445 = (int)v1053;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
            goto LABEL_636;
          }
          goto LABEL_1116;
        }
        v425 = 0;
      }
      v445 = (int)v1053;
      v446 = *v16;
      if (*v16 != 3)
      {
        if (v446 == 20 || (v446 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(a1);
        }
        goto LABEL_636;
      }
      v447 = *(_DWORD *)(a1 + 7400);
      v448 = *(_DWORD *)(a1 + 7412);
      v449 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v447;
      *(_DWORD *)(a1 + 7448) = v448;
      *(_DWORD *)(a1 + 7452) = v449;
      v450 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v450 + 4) = v447;
      v451 = *(_DWORD *)(a1 + 12);
      if (!v451)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3B9CLL);
      }
      v452 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v451 - 1) + 9) & 1;
      *(_BYTE *)(v450 + 56) = 0;
      v453 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v450, a1 + 7368, 0, v452, v441, v442, v443, v444);
      *(_DWORD *)(a1 + 7368) = v453;
      if (v453)
      {
        if (v453 != 20 && (v453 & 0x100000) == 0)
        {
          v445 = (int)v1053;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected exception handler to be a block statement");
          goto LABEL_636;
        }
        goto LABEL_1116;
      }
      v454 = JSC::Parser<JSC::Lexer<unsigned char>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 1, v440, v441, v442, v443, v444);
      if (!v454)
      {
        if (*v16 != 20 && (*v16 & 0x100000) == 0)
        {
          v445 = (int)v1053;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
          goto LABEL_636;
        }
LABEL_1116:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
        v445 = (int)v1053;
LABEL_636:
        JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 0, v440, v441, v442, v443, v444);
        v895 = v1082;
        if (v1082)
        {
          v1082 = 0;
          LODWORD(v1083) = 0;
          WTF::fastFree(v895, v888, v889, v890, v891, v892, v893, v894);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, (WTF::AtomStringImpl *)v888, v889, v890, v891, v892, v893, v894);
        SwitchStatement = 0;
        *(_DWORD *)(a1 + 7456) = v445;
        goto LABEL_575;
      }
      v455 = v454;
      JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v1080, (uint64_t *)a1, 1, v440, v441, v442, v443, v444);
      JSC::VariableEnvironment::operator=((uint64_t)v1067, (uint64_t)&v1080, v456, v457, v458, v459, v460, v461);
      v462 = v1082;
      v1082 = 0;
      v1083 = 0;
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v1080, v463, v464, v465, v466, v467, v468, v469);
      if (!v425)
        goto LABEL_562;
      v470 = v1067[0];
      if (v1067[0])
        v471 = *((_DWORD *)v1067[0] - 3);
      else
        v471 = 0;
      LODWORD(v472) = (_DWORD)v1068;
      if (v1068)
      {
        v472 = *(_QWORD *)v1068;
        if (*(_QWORD *)v1068)
          LODWORD(v472) = *(_DWORD *)(v472 - 12);
        v445 = (int)v1053;
      }
      if ((_DWORD)v472 + v471 != 1)
      {
LABEL_465:
        __break(0xC471u);
        JUMPOUT(0x197EB16ACLL);
      }
      v473 = *(WTF::StringImpl **)v425;
      if (*(_QWORD *)v425)
      {
        v474 = *(_DWORD *)v473;
        *(_DWORD *)v473 += 2;
        v470 = v1067[0];
        if (!v1067[0])
        {
          if (v474)
          {
            *(_DWORD *)v473 = v474;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v473, (WTF::AtomStringImpl *)v388, v389, v390, v391, v392, v393, v394);
            WTF::fastFree(v876, v877, v878, v879, v880, v881, v882, v883);
          }
          goto LABEL_465;
        }
      }
      else if (!v1067[0])
      {
        goto LABEL_465;
      }
      v475 = *((_DWORD *)v470 - 2);
      v476 = *((_DWORD *)v473 + 4);
      if ((v476 & 0x20) != 0)
        v476 = *((_DWORD *)v473 + 8);
      v477 = v475 & (v476 >> 8);
      v478 = (WTF::StringImpl *)*((_QWORD *)v470 + 2 * v477);
      if (v478 == v473)
      {
        v481 = *(_DWORD *)v473 - 2;
        if (*(_DWORD *)v473 == 2)
        {
          WTF::StringImpl::~StringImpl(v473, (WTF::AtomStringImpl *)v388, v389, v390, v391, v392, v393, v394);
          WTF::fastFree(v939, v940, v941, v942, v943, v944, v945, v946);
          goto LABEL_562;
        }
LABEL_561:
        *(_DWORD *)v473 = v481;
        goto LABEL_562;
      }
      v479 = 1;
      do
      {
        v480 = v478;
        if (!v478)
        {
          if (v473)
          {
            if (*(_DWORD *)v473 == 2)
              goto LABEL_651;
            *(_DWORD *)v473 -= 2;
          }
          goto LABEL_465;
        }
        v477 = (v477 + v479) & v475;
        v478 = (WTF::StringImpl *)*((_QWORD *)v470 + 2 * v477);
        ++v479;
      }
      while (v478 != v473);
      if (!v473)
        goto LABEL_562;
      v481 = *(_DWORD *)v473 - 2;
      if (*(_DWORD *)v473 != 2)
        goto LABEL_561;
LABEL_651:
      WTF::StringImpl::~StringImpl(v473, (WTF::AtomStringImpl *)v388, v389, v390, v391, v392, v393, v394);
      WTF::fastFree(v904, v905, v906, v907, v908, v909, v910, v911);
      if (!v480)
        goto LABEL_465;
LABEL_562:
      *(_DWORD *)(a1 + 7456) = v445;
      v856 = *(_DWORD *)(a1 + 7368);
LABEL_563:
      if (v856 == 536)
      {
        v374 = (int)v1049;
        v395 = (uint64_t)v1051;
        v397 = v1050;
        v865 = v1048;
        goto LABEL_667;
      }
      if (v1046.i32[0] == (_DWORD)v1047)
        goto LABEL_565;
      v884 = *(_DWORD *)(a1 + 12);
      if (!v884)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3CDCLL);
      }
      v885 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v886 = v885;
        if (v885 == 1)
          break;
        --v885;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v886 - 1) + 12) & 0x40) != 0)
          goto LABEL_626;
      }
      v885 = 0;
LABEL_626:
      if (v884 <= v886 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB3CE4);
      }
      if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v885 + 15) != 2)
      {
LABEL_565:
        v857 = 0;
      }
      else
      {
        JSC::ASTBuilder::createEmptyStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v1070);
        v857 = v887;
      }
LABEL_566:
      v858 = *(_QWORD *)(a2 + 8);
      SwitchStatement = *(_QWORD *)v858;
      if (*(_QWORD *)(v858 + 8) - *(_QWORD *)v858 <= 0x77uLL)
      {
        JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v858);
        SwitchStatement = *(_QWORD *)v858;
      }
      *(_QWORD *)v858 = SwitchStatement + 120;
      v859 = SwitchStatement + 40;
      if (!SwitchStatement)
        v859 = 0;
      *(_QWORD *)&v1080 = v859;
      v860 = *(unsigned int *)(v858 + 52);
      if ((_DWORD)v860 == *(_DWORD *)(v858 + 48))
      {
        WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v858 + 40, (unint64_t)&v1080);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v858 + 40) + 8 * v860) = v859;
        *(_DWORD *)(v858 + 52) = v860 + 1;
      }
      *(_DWORD *)(SwitchStatement + 20) = -1;
      *(_BYTE *)(SwitchStatement + 24) = 0;
      v861 = v1067[0];
      *(_BYTE *)(SwitchStatement + 56) = v1067[1];
      v862 = v1068;
      v1067[0] = 0;
      v1068 = 0;
      *(_QWORD *)(SwitchStatement + 64) = v862;
      *(_QWORD *)(SwitchStatement + 72) = 0;
      *(_QWORD *)SwitchStatement = &off_1E358A7A0;
      *(_QWORD *)(SwitchStatement + 32) = 0;
      *(_QWORD *)(SwitchStatement + 40) = &unk_1E358A840;
      *(_QWORD *)(SwitchStatement + 48) = v861;
      v863 = v1051;
      *(_QWORD *)(SwitchStatement + 80) = 0;
      *(int32x2_t *)(SwitchStatement + 88) = v863;
      *(_QWORD *)(SwitchStatement + 96) = v1048;
      *(_QWORD *)(SwitchStatement + 104) = v455;
      *(_QWORD *)(SwitchStatement + 112) = v857;
      *(_DWORD *)(SwitchStatement + 28) = v1050;
      *(_DWORD *)(SwitchStatement + 8) = (_DWORD)v1049;
      *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v1070 + 4));
LABEL_573:
      if (v462)
        WTF::fastFree(v462, v388, v389, v390, v391, v392, v393, v394);
LABEL_575:
      v834 = v1067;
LABEL_576:
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v834, (WTF::AtomStringImpl *)v388, v389, v390, v391, v392, v393, v394);
LABEL_40:
      v18 = 0;
LABEL_8:
      if (SwitchStatement)
      {
        *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
        if (v18)
        {
LABEL_26:
          *(_BYTE *)(SwitchStatement + 24) = 1;
          v41 = *(_QWORD *)(SwitchStatement + 8);
          v42 = *(_DWORD *)(SwitchStatement + 16);
          *(_QWORD *)&v1080 = v41;
          DWORD2(v1080) = v42;
          v43 = *(_QWORD *)(a1 + 7520);
          if (v43 && (v41 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v43, (uint64_t)&v1080);
        }
      }
LABEL_27:
      *(_DWORD *)(a1 + 7456) = v10;
      return SwitchStatement;
    case 537:
      JSC::Parser<JSC::Lexer<unsigned char>>::parseDebuggerStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SwitchStatement = v973;
      goto LABEL_101;
    case 544:
    case 545:
    case 546:
      goto LABEL_12;
    default:
      if (v17 != 1048592)
      {
LABEL_100:
        SwitchStatement = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*a3 && v14 != *(_DWORD *)(a1 + 7304))
          *a3 = 0;
LABEL_101:
        v18 = 1;
        goto LABEL_8;
      }
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
        goto LABEL_173;
LABEL_12:
      v19 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(a1, a2, 0);
      SwitchStatement = v19;
      if (!v19)
        goto LABEL_27;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
      if ((v20 & 1) != 0)
        goto LABEL_27;
      goto LABEL_26;
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  int v138;
  int v139;
  _BYTE *v140;
  _BYTE *v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;

  v10 = (char *)(a1 + 7344);
  v11 = a1 + 7368;
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 12)
  {
    if (v12 != 544)
    {
      if (v12 == 541)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "'class' declaration is not directly within a block statement");
        return 0;
      }
      goto LABEL_3;
    }
    v144 = *(_OWORD *)(a1 + 7296);
    v44 = *(_DWORD *)(a1 + 7316);
    v143 = *(_QWORD *)(a1 + 7336);
    v142 = *(_OWORD *)(a1 + 7320);
    v136 = *v10;
    v138 = v44;
    v140 = (_BYTE *)(a1 + 7344);
    v45 = *(_BYTE *)(a1 + 7345);
    v46 = *(_DWORD *)(a2 + 1052);
    v47 = *(int *)(a1 + 7408);
    v48 = *(int *)(a1 + 7404);
    v49 = *(_QWORD *)(a1 + 7288);
    v132 = *(_DWORD *)(v49 + 4);
    v134 = v45;
    v130 = *(_DWORD *)v49;
    v50 = *(_BYTE *)(v49 + 56);
    v51 = *(_DWORD *)(a1 + 7400);
    v52 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v51;
    *(_DWORD *)(a1 + 7448) = v52;
    *(_DWORD *)(a1 + 7452) = v48;
    *(_DWORD *)(v49 + 4) = v51;
    v53 = *(_DWORD *)(a1 + 12);
    if (!v53)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB4858);
    }
    v54 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v53 - 1) + 9) & 1;
    *(_BYTE *)(v49 + 56) = 0;
    v55 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v49, v11, 0, v54, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v55;
    if (v55 == 4)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot use lexical declaration in single-statement context");
      return 0;
    }
    v101 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v101 + 150) = 0;
    v102 = *(_QWORD *)(v101 + 152);
    *(_QWORD *)(v101 + 152) = 0;
    if (!v102)
      goto LABEL_55;
    if (*(_DWORD *)v102 != 2)
    {
      *(_DWORD *)v102 -= 2;
      goto LABEL_55;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v102, v56, v57, v58, v59, v60, v61, v62);
    v112 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v112)
    {
      if (!(v102 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v102 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v102)) & 1) != 0)
      {
        goto LABEL_64;
      }
      if (v102 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v102 >> 24)
      {
        v111 = 0;
      }
      else
      {
        v111 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v102 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v102) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v111 == 1)
        {
LABEL_64:
          v113 = *(unsigned int *)(v112 + 8000);
          if (v113 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v112, v102, (os_unfair_lock_s *)5, v111, v59, v60, v61, v62);
          }
          else
          {
            *(_QWORD *)(v112 + 8 * v113) = v102 | 0x5000000000000;
            *(_DWORD *)(v112 + 8000) = v113 + 1;
          }
          goto LABEL_55;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v112, v102, 1, v111, v59, v60, v61, v62);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v102, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_55:
    v103 = *(_QWORD *)(v101 + 88);
    v104 = *(_QWORD *)(v101 + 96);
    *(_QWORD *)(v101 + 80) = v103 + v47;
    *(_QWORD *)(v101 + 112) = v103 + v48;
    *(_DWORD *)(v101 + 20) = 0;
    *(_DWORD *)(v101 + 36) = 0;
    if (v103 + v47 >= v104)
      v105 = 0;
    else
      v105 = *(_BYTE *)(v103 + v47);
    *(_BYTE *)(v101 + 176) = v105;
    v106 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v106 = v130;
    *(_BYTE *)(v106 + 56) = v50;
    v107 = *(_DWORD *)(a1 + 7400);
    v108 = *(_DWORD *)(a1 + 7412);
    v109 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v107;
    *(_DWORD *)(a1 + 7448) = v108;
    *(_DWORD *)(a1 + 7452) = v109;
    *(_DWORD *)(v106 + 4) = v107;
    v110 = *(_DWORD *)(a1 + 12);
    if (!v110)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB4860);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v106, v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v110 - 1) + 9) & 1, v59, v60, v61, v62);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v132;
    *(_OWORD *)(a1 + 7296) = v144;
    *(_DWORD *)(a1 + 7312) = v46;
    *(_DWORD *)(a1 + 7316) = v138;
    *(_OWORD *)(a1 + 7320) = v142;
    *(_QWORD *)(a1 + 7336) = v143;
    *v140 = v136;
    v140[1] = v134;
    *(_DWORD *)(a2 + 1052) = v46;
    v99 = *(_QWORD *)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v99)
    {
      v100 = *(_DWORD *)v99 - 2;
      if (*(_DWORD *)v99 == 2)
        goto LABEL_66;
      goto LABEL_60;
    }
    goto LABEL_3;
  }
  if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    && !*(_BYTE *)(a1 + 7384))
  {
    v144 = *(_OWORD *)(a1 + 7296);
    v63 = *(_DWORD *)(a1 + 7316);
    v143 = *(_QWORD *)(a1 + 7336);
    v142 = *(_OWORD *)(a1 + 7320);
    v137 = *v10;
    v139 = v63;
    v141 = (_BYTE *)(a1 + 7344);
    v64 = *(_BYTE *)(a1 + 7345);
    v65 = *(_DWORD *)(a2 + 1052);
    v66 = *(int *)(a1 + 7408);
    v67 = *(int *)(a1 + 7404);
    v68 = *(_QWORD *)(a1 + 7288);
    v133 = *(_DWORD *)(v68 + 4);
    v135 = v64;
    v131 = *(_DWORD *)v68;
    v69 = *(_BYTE *)(v68 + 56);
    v70 = *(_DWORD *)(a1 + 7400);
    v71 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v70;
    *(_DWORD *)(a1 + 7448) = v71;
    *(_DWORD *)(a1 + 7452) = v67;
    *(_DWORD *)(v68 + 4) = v70;
    v72 = *(_DWORD *)(a1 + 12);
    if (!v72)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB4870);
    }
    v73 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1;
    *(_BYTE *)(v68 + 56) = 0;
    v74 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v68, v11, 0, v73, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v74;
    v82 = *(_QWORD *)(a1 + 7288);
    if (v74 == 523 && !*(_BYTE *)(v82 + 56))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot use async function declaration in single-statement context");
      return 0;
    }
    *(_BYTE *)(v82 + 150) = 0;
    v83 = *(_QWORD *)(v82 + 152);
    *(_QWORD *)(v82 + 152) = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 != 2)
      {
        *(_DWORD *)v83 -= 2;
        goto LABEL_42;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v83, v75, v76, v77, v78, v79, v80, v81);
      v128 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v128)
      {
        if (!(v83 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v83 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v83)) & 1) != 0)
        {
          goto LABEL_95;
        }
        if (v83 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v83 >> 24)
        {
          v127 = 0;
        }
        else
        {
          v127 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v83 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v83) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v127 == 1)
          {
LABEL_95:
            v129 = *(unsigned int *)(v128 + 8000);
            if (v129 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v128, v83, (os_unfair_lock_s *)5, v127, v78, v79, v80, v81);
            }
            else
            {
              *(_QWORD *)(v128 + 8 * v129) = v83 | 0x5000000000000;
              *(_DWORD *)(v128 + 8000) = v129 + 1;
            }
            goto LABEL_42;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v128, v83, 1, v127, v78, v79, v80, v81);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v83, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
LABEL_42:
    v84 = *(_QWORD *)(v82 + 88);
    v85 = *(_QWORD *)(v82 + 96);
    *(_QWORD *)(v82 + 80) = v84 + v66;
    *(_QWORD *)(v82 + 112) = v84 + v67;
    *(_DWORD *)(v82 + 20) = 0;
    *(_DWORD *)(v82 + 36) = 0;
    if (v84 + v66 >= v85)
      v86 = 0;
    else
      v86 = *(_BYTE *)(v84 + v66);
    *(_BYTE *)(v82 + 176) = v86;
    v87 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v87 = v131;
    *(_BYTE *)(v87 + 56) = v69;
    v88 = *(_DWORD *)(a1 + 7400);
    v89 = *(_DWORD *)(a1 + 7412);
    v90 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v88;
    *(_DWORD *)(a1 + 7448) = v89;
    *(_DWORD *)(a1 + 7452) = v90;
    *(_DWORD *)(v87 + 4) = v88;
    v91 = *(_DWORD *)(a1 + 12);
    if (!v91)
      goto LABEL_114;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v87, v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v91 - 1) + 9) & 1, v78, v79, v80, v81);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v133;
    *(_OWORD *)(a1 + 7296) = v144;
    *(_DWORD *)(a1 + 7312) = v65;
    *(_DWORD *)(a1 + 7316) = v139;
    *(_OWORD *)(a1 + 7320) = v142;
    *(_QWORD *)(a1 + 7336) = v143;
    *v141 = v137;
    v141[1] = v135;
    *(_DWORD *)(a2 + 1052) = v65;
    v99 = *(_QWORD *)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (!v99)
      goto LABEL_3;
    v100 = *(_DWORD *)v99 - 2;
    if (*(_DWORD *)v99 == 2)
    {
LABEL_66:
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v99, v92, v93, v94, v95, v96, v97, v98);
      v119 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v119)
      {
        pas_try_deallocate_slow_no_cache(v99, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_3;
      }
      if (!(v99 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v99 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v99)) & 1) != 0)
      {
        goto LABEL_69;
      }
      if (v99 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v99 >> 24)
      {
        v114 = 0;
      }
      else
      {
        v114 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v99 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v99) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v114 == 1)
        {
LABEL_69:
          v120 = *(unsigned int *)(v119 + 8000);
          if (v120 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v119, v99, (os_unfair_lock_s *)5, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_QWORD *)(v119 + 8 * v120) = v99 | 0x5000000000000;
            *(_DWORD *)(v119 + 8000) = v120 + 1;
          }
          goto LABEL_3;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v119, v99, 1, v114, v115, v116, v117, v118);
      goto LABEL_3;
    }
LABEL_60:
    *(_DWORD *)v99 = v100;
  }
LABEL_3:
  v13 = *(_QWORD *)(a1 + 7416);
  v14 = *(_DWORD *)(a1 + 7424);
  v15 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
  v20 = *(_DWORD *)(a1 + 7368);
  if (!v15)
  {
    if (v20 != 20 && (v20 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression statement");
      return 0;
    }
LABEL_8:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v21 = v15;
  if (v20 == 17)
  {
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (v27)
    {
      v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
      *(_BYTE *)(v26 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v26, v11, 0, v28, v16, v17, v18, v19);
      goto LABEL_12;
    }
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x197EB4708);
  }
  if (v20 != 1 && v20 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    goto LABEL_8;
LABEL_12:
  v29 = *(_DWORD *)(a1 + 7444);
  v30 = *(_QWORD *)(a2 + 8);
  result = *(_QWORD *)v30;
  v31 = *(_QWORD *)(v30 + 8);
  if ((unint64_t)(v31 - *(_QWORD *)v30) <= 0x2F)
  {
    if (v31)
    {
      v40 = (_QWORD *)(v30 + 24);
      v41 = v31 - 8000;
      *(_QWORD *)&v142 = v31 - 8000;
      v42 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v42 == *(_DWORD *)(v30 + 32))
      {
        v43 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v42 + 1, (unint64_t)&v142);
        v42 = *(unsigned int *)(v30 + 36);
        *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * v42) = *v43;
      }
      else
      {
        *(_QWORD *)(*v40 + 8 * v42) = v41;
      }
      *(_DWORD *)(v30 + 36) = v42 + 1;
    }
    v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v32)
    {
      v33 = dword_1ECF54F70;
      if (*(_DWORD *)(v32 + 8052) > dword_1ECF54F70)
      {
        v34 = v32 + 8 * dword_1ECF54F70;
        v35 = v34 + 8064;
        *(_BYTE *)(v34 + 8064) = 1;
        v36 = *(unsigned int *)(v34 + 8080);
        if ((_DWORD)v36)
        {
          *(_DWORD *)(v35 + 16) = v36 - *(_DWORD *)(v35 + 20);
          result = *(_QWORD *)(v35 + 8) - v36;
LABEL_23:
          *(_BYTE *)v35 = 0;
LABEL_24:
          *(_QWORD *)(v30 + 8) = result + 8000;
          goto LABEL_13;
        }
        v37 = *(_QWORD *)(v35 + 40);
        v38 = *(_QWORD *)(v35 + 24);
        if (v37)
        {
LABEL_26:
          v39 = __clz(v37);
          *(_QWORD *)(v35 + 40) = v37 & ~(0x8000000000000000 >> v39);
          result = v38 + 16 * v39;
          goto LABEL_23;
        }
        if (*(_BYTE *)(v35 + 5) == 6)
        {
          v121 = *(unsigned int *)(v35 + 32);
          v122 = *(_DWORD *)(v35 + 36);
          if (v121 < v122)
          {
            *(_QWORD *)(v35 + 8 * v121 + 56) = 0;
            v123 = (unint64_t *)(8 * v33 + 8 * v121 + v32 + 8128);
            v124 = v122 - 1 - v121;
            while (v124)
            {
              v38 += 1024;
              v126 = *v123++;
              v125 = v126;
              LODWORD(v121) = v121 + 1;
              --v124;
              if (v126)
              {
                v37 = __rbit64(v125);
                *(_DWORD *)(v35 + 32) = v121;
                *(_QWORD *)(v35 + 24) = v38;
                goto LABEL_26;
              }
            }
            *(_DWORD *)(v35 + 32) = v122;
          }
        }
        *(_BYTE *)v35 = 0;
      }
    }
    result = bmalloc_allocate_casual(8000, 1);
    goto LABEL_24;
  }
LABEL_13:
  *(_QWORD *)v30 = result + 48;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E35899B8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v21;
  *(_DWORD *)(result + 28) = v29;
  *(_QWORD *)(result + 8) = v13;
  *(_DWORD *)(result + 16) = v14;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

__n128 JSC::ASTBuilder::createLabelStatement(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v12) <= 0x5F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v12 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v12 + 96;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v12 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 28) = -1;
  *(_QWORD *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 72) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v12 + 56) = result;
  *(__n128 *)(v12 + 40) = result;
  *(_QWORD *)v12 = &off_1E358A660;
  *(_QWORD *)(v12 + 80) = a3;
  *(_QWORD *)(v12 + 88) = a4;
  v15 = *a6;
  *(_DWORD *)(v12 + 48) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v12 + 40) = v15;
  v16 = *a5;
  *(_DWORD *)(v12 + 60) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v12 + 52) = v16;
  v17 = *a6;
  *(_DWORD *)(v12 + 72) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v12 + 64) = v17;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclarationStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  WTF *v67[2];
  uint64_t v68;
  uint64_t v69;

  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
    goto LABEL_52;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[89]>(a1);
    return 0;
  }
  if ((a3 & 1) == 0)
  {
    v29 = *(_DWORD *)(a1 + 7368);
    if (v29 == 20 || (v29 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[96]>(a1);
    }
    return 0;
  }
  v6 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197EB4D28);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) |= 0x8080u;
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x197EB4D20);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) &= ~0x40u;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7404);
  v12 = *(_DWORD *)(a1 + 7408);
  v13 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 0, v8, v9);
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_21:
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v65, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
    v38 = v67[1];
    if (v67[1])
    {
      v67[1] = 0;
      LODWORD(v68) = 0;
      WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v65, (WTF::AtomStringImpl *)v31, v32, v33, v34, v35, v36, v37);
    return 0;
  }
  v19 = v13;
  if (!v13)
  {
    v30 = *(_DWORD *)(a1 + 7368);
    if (v30 == 20 || (v30 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected valid function statement after 'function' keyword");
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD **)v20;
  v21 = *(_QWORD *)(v20 + 8);
  if ((unint64_t)(v21 - *(_QWORD *)v20) <= 0xF)
  {
    if (v21)
    {
      v57 = (_QWORD *)(v20 + 24);
      v58 = v21 - 8000;
      v65 = v21 - 8000;
      v59 = *(unsigned int *)(v20 + 36);
      if ((_DWORD)v59 == *(_DWORD *)(v20 + 32))
      {
        v63 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v59 + 1, (unint64_t)&v65);
        v59 = *(unsigned int *)(v20 + 36);
        *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v59) = *v63;
      }
      else
      {
        *(_QWORD *)(*v57 + 8 * v59) = v58;
      }
      *(_DWORD *)(v20 + 36) = v59 + 1;
    }
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v20 + 8) = v22 + 1000;
  }
  *(_QWORD *)v20 = v22 + 2;
  *v22 = 0;
  v22[1] = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19) & 1) == 0)
  {
    if (*v22)
    {
      v28 = v22 + 1;
      *(_QWORD *)(v22[1] + 32) = v19;
    }
    else
    {
      *v22 = v19;
      v28 = v22 + 1;
    }
    *v28 = v19;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)&v65, (uint64_t *)a1, 1, v23, v24, v25, v26, v27);
  v47 = *(_DWORD *)(a1 + 7444);
  v48 = *(_QWORD *)(a2 + 8);
  v39 = *(_QWORD *)v48;
  v49 = *(_QWORD *)(v48 + 8);
  if ((unint64_t)(v49 - *(_QWORD *)v48) <= 0x5F)
  {
    if (v49)
    {
      v60 = (_QWORD *)(v48 + 24);
      v61 = v49 - 8000;
      v69 = v49 - 8000;
      v62 = *(unsigned int *)(v48 + 36);
      if ((_DWORD)v62 == *(_DWORD *)(v48 + 32))
      {
        v64 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v62 + 1, (unint64_t)&v69);
        v62 = *(unsigned int *)(v48 + 36);
        *(_QWORD *)(*(_QWORD *)(v48 + 24) + 8 * v62) = *v64;
      }
      else
      {
        *(_QWORD *)(*v60 + 8 * v62) = v61;
      }
      *(_DWORD *)(v48 + 36) = v62 + 1;
    }
    v39 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v48 + 8) = v39 + 8000;
  }
  *(_QWORD *)v48 = v39 + 96;
  if (v39)
    v50 = v39 + 40;
  else
    v50 = 0;
  v69 = v50;
  v51 = (_QWORD *)(v48 + 40);
  v52 = *(unsigned int *)(v48 + 52);
  if ((_DWORD)v52 == *(_DWORD *)(v48 + 48))
  {
    v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v69);
    v52 = *(unsigned int *)(v48 + 52);
    *(_QWORD *)(*(_QWORD *)(v48 + 40) + 8 * v52) = *v53;
  }
  else
  {
    *(_QWORD *)(*v51 + 8 * v52) = v50;
  }
  *(_DWORD *)(v48 + 52) = v52 + 1;
  *(_DWORD *)(v39 + 20) = -1;
  *(_BYTE *)(v39 + 24) = 0;
  v54 = v65;
  *(_BYTE *)(v39 + 56) = v66;
  *(_QWORD *)(v39 + 32) = 0;
  v55 = *(_OWORD *)v67;
  v67[0] = 0;
  v67[1] = 0;
  v65 = 0;
  *(_OWORD *)(v39 + 64) = v55;
  *(_QWORD *)&v55 = v68;
  v68 = 0;
  *(_QWORD *)(v39 + 80) = v55;
  *(_QWORD *)v39 = &off_1E358B420;
  *(_QWORD *)(v39 + 40) = &unk_1E358B4C0;
  *(_QWORD *)(v39 + 48) = v54;
  *(_QWORD *)(v39 + 88) = v22;
  *(_DWORD *)(v39 + 28) = v47;
  *(_DWORD *)(v39 + 8) = v10;
  *(_DWORD *)(v39 + 12) = v12;
  *(_DWORD *)(v39 + 16) = v11;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v65, v40, v41, v42, v43, v44, v45, v46);
  return v39;
}

int32x2_t JSC::ASTBuilder::createEmptyStatement(JSC::ParserArena *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t result;

  v4 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v4) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v4 + 40;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v4 + 12) = result;
  *(_DWORD *)(v4 + 20) = -1;
  *(_BYTE *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 28) = -1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)v4 = &off_1E3589878;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseWithStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;

  v8 = (int *)(a1 + 7400);
  v53 = *(_OWORD *)(a1 + 7400);
  v9 = *(_DWORD *)(a1 + 12);
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v9 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "'with' statements are not valid in strict mode");
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a1 + 720 * (v9 - 1) + 10) |= 8u;
    v11 = *(_DWORD *)(a1 + 7400);
    v12 = *(_DWORD *)(a1 + 7412);
    v13 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v11;
    *(_DWORD *)(a1 + 7448) = v12;
    *(_DWORD *)(a1 + 7452) = v13;
    v14 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v14 + 4) = v11;
    v15 = *(_DWORD *)(a1 + 12);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB50D0);
    }
    v17 = (int *)(a1 + 7368);
    v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
    *(_BYTE *)(v14 + 56) = 0;
    v19 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v14, a1 + 7368, 0, v18, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v19;
    if (v19 != 2)
    {
      if (v19 == 20 || (v19 & 0x100000) != 0)
        goto LABEL_20;
      if (*(_QWORD *)(a1 + 7360))
        return;
      v49 = "(";
      goto LABEL_32;
    }
    v24 = *(_DWORD *)(a1 + 7400);
    v25 = *(_DWORD *)(a1 + 7412);
    v26 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v24;
    *(_DWORD *)(a1 + 7448) = v25;
    *(_DWORD *)(a1 + 7452) = v26;
    v27 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v27 + 4) = v24;
    v28 = *(_DWORD *)(a1 + 12);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB50D8);
    }
    v29 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 9) & 1;
    *(_BYTE *)(v27 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v27, a1 + 7368, 0, v29, v20, v21, v22, v23);
    v30 = *(_DWORD *)(a1 + 7408);
    v31 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
    if (v31)
    {
      v36 = v31;
      *(_BYTE *)(v31 + 24) = 1;
      v37 = *(_QWORD *)(v31 + 8);
      v38 = *(_DWORD *)(v31 + 16);
      v51 = v37;
      v52 = v38;
      v39 = *(_QWORD *)(a1 + 7520);
      if (v39 && (v37 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v39, (uint64_t)&v51);
      v51 = *(_QWORD *)(a1 + 7444);
      v52 = *(_DWORD *)(a1 + 7452);
      v40 = *v17;
      if (*v17 == 3)
      {
        v41 = *v8;
        v42 = *(_DWORD *)(a1 + 7412);
        v43 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v41;
        *(_DWORD *)(a1 + 7448) = v42;
        *(_DWORD *)(a1 + 7452) = v43;
        v44 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v44 + 4) = v41;
        v45 = *(_DWORD *)(a1 + 12);
        if (v45)
        {
          v46 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v45 - 1) + 9) & 1;
          *(_BYTE *)(v44 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v44, a1 + 7368, 0, v46, v32, v33, v34, v35);
          v50 = 0;
          v47 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v50, 0);
          if (v47)
          {
            JSC::ASTBuilder::createWithStatement(a2, (uint64_t)&v53, v36, v47, v30, (uint64_t)&v51, v11, v41);
            return;
          }
          if (*v17 != 20 && (*v17 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "A 'with' statement must have a body");
            return;
          }
LABEL_20:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
          return;
        }
        __break(0xC471u);
LABEL_41:
        JUMPOUT(0x197EB50C8);
      }
      if (v40 == 20 || (v40 & 0x100000) != 0)
        goto LABEL_20;
      if (*(_QWORD *)(a1 + 7360))
        return;
      v49 = ")";
LABEL_32:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(a1, v49);
      return;
    }
    if (*v17 == 20 || (*v17 & 0x100000) != 0)
      goto LABEL_20;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse 'with' subject expression");
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseDebuggerStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  __int128 v30;

  v9 = a1 + 7368;
  v30 = *(_OWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
    goto LABEL_20;
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v17 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, v9, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 == 17)
  {
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (v26)
    {
      v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
      *(_BYTE *)(v25 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v25, v9, 0, v27, v18, v19, v20, v21);
LABEL_10:
      JSC::ASTBuilder::createDebugger(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v30, v22, v10);
      return;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x197EB5258);
  }
  v28 = v17 == 1 || v17 == 20;
  v22 = v10;
  if (v28)
    goto LABEL_10;
  v22 = v10;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    goto LABEL_10;
  if (v17 != 20 && (v17 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Debugger keyword must be followed by a ';'");
  }
  else
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
}

_QWORD *WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StatementNode *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

int32x2_t JSC::ASTBuilder::createDoWhileStatement(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  int32x2_t v14;
  int32x2_t result;

  v12 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v12) <= 0x37)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v12 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v12 + 56;
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E358A1E0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = a4;
  *(_DWORD *)(v12 + 28) = a6;
  v14 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v12 + 8) = a5;
  result = vrev64_s32(v14);
  *(int32x2_t *)(v12 + 12) = result;
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseForStatement<JSC::ASTBuilder>(JSC::ASTBuilder::Statement&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _BYTE v20[24];
  WTF *v21;
  int v22;

  v10 = *(uint64_t **)(a2 + 24);
  if (**(_BYTE **)a2 || **(_BYTE **)(a2 + 8))
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v11 + 16))
    {
      *(_QWORD *)(v11 + 16) = 0;
      JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v20, v10, 1, a4, a5, a6, a7, a8);
      JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)a1, (const JSC::VariableEnvironment *)v20);
      v19 = v21;
      if (v21)
      {
        v21 = 0;
        v22 = 0;
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v20, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t JSC::ASTBuilder::createForOfLoop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, int a11, int a12, uint64_t *a13)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v17 = *(uint64_t **)(a1 + 8);
  v18 = *v17;
  if ((unint64_t)(v17[1] - *v17) <= 0x2F)
  {
    v22 = a6;
    v23 = a8;
    v20 = a3;
    v21 = a5;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    a3 = v20;
    a5 = v21;
    a6 = v22;
    a8 = v23;
    v18 = *v17;
  }
  *v17 = v18 + 48;
  *(_DWORD *)(v18 + 8) = *(_DWORD *)a7;
  *(int32x2_t *)(v18 + 12) = vrev64_s32(*(int32x2_t *)(a7 + 4));
  *(_DWORD *)(v18 + 20) = -1;
  *(_BYTE *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 25) = 126;
  *(_BYTE *)(v18 + 26) = 0;
  *(_QWORD *)v18 = &off_1E358B880;
  *(_QWORD *)(v18 + 32) = a4;
  *(_QWORD *)(v18 + 40) = 0;
  return JSC::ASTBuilder::createForOfLoop(a1, a2, a3, v18, a5, a6, a8, a9, a10, a11, a12, a13);
}

uint64_t JSC::ASTBuilder::createForInLoop(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, int a9, int a10, uint64_t *a11)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int32x2_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v17 = *a1;
  if ((unint64_t)(a1[1] - *a1) <= 0x97)
  {
    v32 = a5;
    v33 = a3;
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a1);
    a3 = v33;
    a5 = v32;
    v17 = *a1;
  }
  *a1 = v17 + 152;
  if (v17)
    v18 = v17 + 80;
  else
    v18 = 0;
  v36 = v18;
  v19 = a1 + 5;
  v20 = *((unsigned int *)a1 + 13);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 12))
  {
    v34 = a3;
    v35 = a4;
    v30 = a5;
    v31 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v36);
    a5 = v30;
    a3 = v34;
    a4 = v35;
    v20 = *((unsigned int *)a1 + 13);
    *(_QWORD *)(a1[5] + 8 * v20) = *v31;
  }
  else
  {
    *(_QWORD *)(*v19 + 8 * v20) = v18;
  }
  *((_DWORD *)a1 + 13) = v20 + 1;
  *(_DWORD *)(v17 + 8) = *(_DWORD *)a2;
  v21 = *(int32x2_t *)(a2 + 4);
  *(_QWORD *)&v22 = -1;
  *((_QWORD *)&v22 + 1) = -1;
  *(_OWORD *)(v17 + 56) = v22;
  *(_OWORD *)(v17 + 40) = v22;
  *(_DWORD *)(v17 + 20) = -1;
  *(_QWORD *)(v17 + 32) = 0;
  *(_DWORD *)(v17 + 72) = -1;
  *(_QWORD *)(v17 + 88) = 0;
  v23 = *a11;
  *a11 = 0;
  *(_QWORD *)(v17 + 88) = v23;
  *(_BYTE *)(v17 + 96) = *((_BYTE *)a11 + 8);
  v24 = a11[2];
  a11[2] = 0;
  *(int32x2_t *)(v17 + 12) = vrev64_s32(v21);
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 104) = v24;
  *(_QWORD *)(v17 + 112) = 0;
  *(_QWORD *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 128) = a3;
  *(_QWORD *)(v17 + 136) = a4;
  *(_QWORD *)(v17 + 144) = a5;
  *(_QWORD *)v17 = &off_1E358B4E0;
  *(_QWORD *)(v17 + 80) = &unk_1E358B580;
  *(_DWORD *)(v17 + 28) = a10;
  v25 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v17 + 8) = a9;
  *(int32x2_t *)(v17 + 12) = vrev64_s32(v25);
  v26 = *a7;
  *(_DWORD *)(v17 + 48) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v17 + 40) = v26;
  v27 = *a6;
  *(_DWORD *)(v17 + 60) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v17 + 52) = v27;
  v28 = *a8;
  *(_DWORD *)(v17 + 72) = *((_DWORD *)a8 + 2);
  *(_QWORD *)(v17 + 64) = v28;
  return v17;
}

uint64_t JSC::ASTBuilder::createForInLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, int a10, int a11, uint64_t *a12)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;

  v17 = *(uint64_t **)(a1 + 8);
  v18 = *v17;
  if ((unint64_t)(v17[1] - *v17) <= 0x2F)
  {
    v21 = a7;
    v22 = a8;
    v20 = a5;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    a5 = v20;
    a7 = v21;
    a8 = v22;
    v18 = *v17;
  }
  *v17 = v18 + 48;
  *(_DWORD *)(v18 + 8) = *(_DWORD *)a6;
  *(int32x2_t *)(v18 + 12) = vrev64_s32(*(int32x2_t *)(a6 + 4));
  *(_DWORD *)(v18 + 20) = -1;
  *(_BYTE *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 25) = 126;
  *(_BYTE *)(v18 + 26) = 0;
  *(_QWORD *)v18 = &off_1E358B880;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = 0;
  return JSC::ASTBuilder::createForInLoop(*(uint64_t **)(a1 + 8), a2, v18, a4, a5, a7, a8, a9, a10, a11, a12);
}

uint64_t JSC::ASTBuilder::createForOfLoop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, int a10, int a11, uint64_t *a12)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int32x2_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v16 = a1;
  v17 = *(uint64_t **)(a1 + 8);
  v18 = *v17;
  if ((unint64_t)(v17[1] - *v17) <= 0x9F)
  {
    v32 = a6;
    v33 = a5;
    v34 = a4;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    a4 = v34;
    a5 = v33;
    a6 = v32;
    v16 = a1;
    v18 = *v17;
  }
  *v17 = v18 + 160;
  if (v18)
    v19 = v18 + 80;
  else
    v19 = 0;
  v40 = v19;
  v20 = v17 + 5;
  v21 = *((unsigned int *)v17 + 13);
  if ((_DWORD)v21 == *((_DWORD *)v17 + 12))
  {
    v37 = a6;
    v38 = v16;
    v35 = a4;
    v36 = a5;
    v31 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v40);
    a4 = v35;
    a5 = v36;
    a6 = v37;
    v16 = v38;
    v21 = *((unsigned int *)v17 + 13);
    *(_QWORD *)(v17[5] + 8 * v21) = *v31;
  }
  else
  {
    *(_QWORD *)(*v20 + 8 * v21) = v19;
  }
  *((_DWORD *)v17 + 13) = v21 + 1;
  *(_DWORD *)(v18 + 8) = *(_DWORD *)a3;
  v22 = *(int32x2_t *)(a3 + 4);
  *(_QWORD *)&v23 = -1;
  *((_QWORD *)&v23 + 1) = -1;
  *(_OWORD *)(v18 + 56) = v23;
  *(_OWORD *)(v18 + 40) = v23;
  *(_DWORD *)(v18 + 20) = -1;
  *(_QWORD *)(v18 + 32) = 0;
  *(_DWORD *)(v18 + 72) = -1;
  *(_QWORD *)(v18 + 88) = 0;
  v24 = *a12;
  *a12 = 0;
  *(_QWORD *)(v18 + 88) = v24;
  *(_BYTE *)(v18 + 96) = *((_BYTE *)a12 + 8);
  v25 = a12[2];
  a12[2] = 0;
  *(int32x2_t *)(v18 + 12) = vrev64_s32(v22);
  *(_BYTE *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 104) = v25;
  *(_QWORD *)(v18 + 112) = 0;
  *(_QWORD *)(v18 + 120) = 0;
  *(_QWORD *)(v18 + 128) = a4;
  *(_QWORD *)(v18 + 136) = a5;
  *(_QWORD *)(v18 + 144) = a6;
  *(_QWORD *)v18 = &off_1E358B5A0;
  *(_QWORD *)(v18 + 80) = &unk_1E358B640;
  *(_BYTE *)(v18 + 152) = a2;
  *(_DWORD *)(v18 + 28) = a11;
  v26 = *(int32x2_t *)(a3 + 4);
  *(_DWORD *)(v18 + 8) = a10;
  *(int32x2_t *)(v18 + 12) = vrev64_s32(v26);
  v27 = *a8;
  *(_DWORD *)(v18 + 48) = *((_DWORD *)a8 + 2);
  *(_QWORD *)(v18 + 40) = v27;
  v28 = *a7;
  *(_DWORD *)(v18 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v18 + 52) = v28;
  v29 = *a9;
  *(_DWORD *)(v18 + 72) = *((_DWORD *)a9 + 2);
  *(_QWORD *)(v18 + 64) = v29;
  if (a2)
    *(_DWORD *)(v16 + 24) |= 0x80u;
  return v18;
}

double JSC::ASTBuilder::createContinueStatement(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  double result;

  v10 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v10) <= 0x57)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v10 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v10 + 88;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v10 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = -1;
  *(_QWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 72) = -1;
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *(_OWORD *)(v10 + 56) = v12;
  *(_OWORD *)(v10 + 40) = v12;
  *(_QWORD *)v10 = &off_1E358A3E0;
  *(_QWORD *)(v10 + 80) = a3;
  v13 = *a5;
  *(_DWORD *)(v10 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v10 + 40) = v13;
  v14 = *(double *)a4;
  *(_DWORD *)(v10 + 60) = *(_DWORD *)(a4 + 8);
  *(double *)(v10 + 52) = v14;
  v15 = *a5;
  *(_DWORD *)(v10 + 72) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v10 + 64) = v15;
  v16 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)a5;
  result = *(double *)a4;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)a4;
  *(_DWORD *)(v10 + 16) = v16;
  return result;
}

double JSC::ASTBuilder::createBreakStatement(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  double result;

  v10 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v10) <= 0x57)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v10 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v10 + 88;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v10 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = -1;
  *(_QWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 72) = -1;
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *(_OWORD *)(v10 + 56) = v12;
  *(_OWORD *)(v10 + 40) = v12;
  *(_QWORD *)v10 = &off_1E358A480;
  *(_QWORD *)(v10 + 80) = a3;
  v13 = *a5;
  *(_DWORD *)(v10 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v10 + 40) = v13;
  v14 = *(double *)a4;
  *(_DWORD *)(v10 + 60) = *(_DWORD *)(a4 + 8);
  *(double *)(v10 + 52) = v14;
  v15 = *a5;
  *(_DWORD *)(v10 + 72) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v10 + 64) = v15;
  v16 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)a5;
  result = *(double *)a4;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)a4;
  *(_DWORD *)(v10 + 16) = v16;
  return result;
}

int32x2_t JSC::ASTBuilder::createWithStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  JSC::ParserArena *v15;
  uint64_t v16;
  int v17;
  int v18;
  int32x2_t v19;
  int32x2_t result;

  *(_DWORD *)(a1 + 24) |= 4u;
  v15 = *(JSC::ParserArena **)(a1 + 8);
  v16 = *(_QWORD *)v15;
  if (*((_QWORD *)v15 + 1) - *(_QWORD *)v15 <= 0x47uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v15);
    v16 = *(_QWORD *)v15;
  }
  *(_QWORD *)v15 = v16 + 72;
  v17 = *(_DWORD *)(a6 + 4) - a5;
  *(_DWORD *)(v16 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v16 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v16 + 20) = -1;
  *(_BYTE *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 28) = -1;
  *(_QWORD *)v16 = &off_1E358A5C0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = a3;
  *(_QWORD *)(v16 + 48) = a4;
  v18 = *(_DWORD *)(a6 + 8);
  *(_QWORD *)(v16 + 56) = *(_QWORD *)a6;
  *(_DWORD *)(v16 + 64) = v18;
  *(_DWORD *)(v16 + 68) = v17;
  *(_DWORD *)(v16 + 28) = a8;
  v19 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v16 + 8) = a7;
  result = vrev64_s32(v19);
  *(int32x2_t *)(v16 + 12) = result;
  return result;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseSwitchClauses<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::ParserArena *v40;
  _QWORD *result;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  JSC::ParserArena *v67;
  _QWORD *v68;
  _QWORD *v69;

  if (*(_DWORD *)(a1 + 7368) != 516)
    return 0;
  v9 = *(_DWORD *)(a1 + 7408);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197EB61D0);
  }
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v18 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
  v23 = *(_DWORD *)(a1 + 7368);
  if (!v18)
  {
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch clause");
      return 0;
    }
LABEL_41:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  if (v23 != 18)
  {
LABEL_24:
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch clause expression");
      return 0;
    }
    goto LABEL_41;
  }
  v24 = v18;
  v25 = *(_DWORD *)(a1 + 7400);
  v26 = *(_DWORD *)(a1 + 7412);
  v27 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v25;
  *(_DWORD *)(a1 + 7448) = v26;
  *(_DWORD *)(a1 + 7452) = v27;
  v28 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v28 + 4) = v25;
  v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x197EB61C0);
  }
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
  *(_BYTE *)(v28 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, v19, v20, v21, v22);
  v31 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
  if (!v31)
  {
LABEL_29:
    if (*v16 != 20 && (*v16 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch clause");
      return 0;
    }
    goto LABEL_41;
  }
  v36 = v31;
  v37 = *(uint64_t **)(a2 + 8);
  v39 = *v37;
  v38 = v37[1];
  if ((unint64_t)(v38 - *v37) <= 0x17)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v39 = *v37;
    v40 = *(JSC::ParserArena **)(a2 + 8);
    v38 = *((_QWORD *)v40 + 1);
  }
  else
  {
    v40 = *(JSC::ParserArena **)(a2 + 8);
  }
  *v37 = v39 + 24;
  *(_QWORD *)v39 = v24;
  *(_QWORD *)(v39 + 8) = v36;
  *(_DWORD *)(v39 + 16) = v9;
  result = *(_QWORD **)v40;
  if ((unint64_t)(v38 - *(_QWORD *)v40) <= 0xF)
  {
    JSC::ParserArena::allocateFreeablePool(v40);
    result = *(_QWORD **)v40;
  }
  *(_QWORD *)v40 = result + 2;
  *result = v39;
  result[1] = 0;
  if (*v16 == 516)
  {
    v69 = result;
    v42 = result;
    while (1)
    {
      v43 = *(_DWORD *)(a1 + 7408);
      v44 = *(_DWORD *)(a1 + 7400);
      v45 = *(_DWORD *)(a1 + 7412);
      v46 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v44;
      *(_DWORD *)(a1 + 7448) = v45;
      *(_DWORD *)(a1 + 7452) = v46;
      v47 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v47 + 4) = v44;
      v48 = *(_DWORD *)(a1 + 12);
      if (!v48)
        goto LABEL_48;
      v49 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 9) & 1;
      *(_BYTE *)(v47 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v47, a1 + 7368, 0, v49, v32, v33, v34, v35);
      v50 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      v23 = *(_DWORD *)(a1 + 7368);
      if (!v50)
        break;
      if (v23 != 18)
        goto LABEL_24;
      v55 = v50;
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      v59 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v59 + 4) = v56;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB61C8);
      }
      v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
      *(_BYTE *)(v59 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, v51, v52, v53, v54);
      v62 = JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
      if (!v62)
        goto LABEL_29;
      v63 = v62;
      v64 = *(uint64_t **)(a2 + 8);
      v66 = *v64;
      v65 = v64[1];
      if ((unint64_t)(v65 - *v64) <= 0x17)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v66 = *v64;
        v67 = *(JSC::ParserArena **)(a2 + 8);
        v65 = *((_QWORD *)v67 + 1);
      }
      else
      {
        v67 = *(JSC::ParserArena **)(a2 + 8);
      }
      *v64 = v66 + 24;
      *(_QWORD *)v66 = v55;
      *(_QWORD *)(v66 + 8) = v63;
      *(_DWORD *)(v66 + 16) = v43;
      v68 = *(_QWORD **)v67;
      if ((unint64_t)(v65 - *(_QWORD *)v67) <= 0xF)
      {
        JSC::ParserArena::allocateFreeablePool(v67);
        v68 = *(_QWORD **)v67;
      }
      *(_QWORD *)v67 = v68 + 2;
      *v68 = v66;
      v68[1] = 0;
      v42[1] = v68;
      v42 = v68;
      if (*v16 != 516)
        return v69;
    }
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch case expression");
      return 0;
    }
    goto LABEL_41;
  }
  return result;
}

uint64_t JSC::ASTBuilder::createSwitchStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  JSC::ParserArena *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v28;
  int v29;
  int v30;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;

  v15 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD **)v15;
  v16 = *(_QWORD *)(v15 + 8);
  if ((unint64_t)(v16 - *(_QWORD *)v15) <= 0x17)
  {
    v32 = a7;
    v33 = a8;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    a8 = v33;
    a7 = v32;
    v17 = *(_QWORD **)v15;
    v18 = *(JSC::ParserArena **)(a1 + 8);
    v16 = *((_QWORD *)v18 + 1);
  }
  else
  {
    v18 = *(JSC::ParserArena **)(a1 + 8);
  }
  *(_QWORD *)v15 = v17 + 3;
  *v17 = a4;
  v17[1] = a5;
  v17[2] = a6;
  v19 = *(_QWORD *)v18;
  if ((unint64_t)(v16 - *(_QWORD *)v18) <= 0x67)
  {
    v34 = a7;
    v35 = a8;
    JSC::ParserArena::allocateFreeablePool(v18);
    a8 = v35;
    a7 = v34;
    v19 = *(_QWORD *)v18;
  }
  *(_QWORD *)v18 = v19 + 104;
  v20 = v19 + 40;
  if (!v19)
    v20 = 0;
  v36 = v20;
  v21 = *((unsigned int *)v18 + 13);
  if ((_DWORD)v21 == *((_DWORD *)v18 + 12))
  {
    v28 = (uint64_t)v18 + 40;
    v29 = a7;
    v30 = a8;
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v28, (unint64_t)&v36);
    a8 = v30;
    a7 = v29;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v18 + 5) + 8 * v21) = v20;
    *((_DWORD *)v18 + 13) = v21 + 1;
  }
  *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
  v22 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v19 + 20) = -1;
  *(_DWORD *)(v19 + 28) = -1;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  v23 = *a9;
  *a9 = 0;
  *(_QWORD *)(v19 + 48) = v23;
  *(_BYTE *)(v19 + 56) = *((_BYTE *)a9 + 8);
  v24 = a9[2];
  a9[2] = 0;
  *(int32x2_t *)(v19 + 12) = vrev64_s32(v22);
  *(_QWORD *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 64) = v24;
  v25 = *a10;
  *a10 = 0;
  *(_QWORD *)(v19 + 72) = v25;
  LODWORD(v25) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(v19 + 80) = v25;
  LODWORD(v25) = *((_DWORD *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_BYTE *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 84) = v25;
  *(_QWORD *)v19 = &off_1E358B360;
  *(_QWORD *)(v19 + 40) = &unk_1E358B400;
  *(_QWORD *)(v19 + 88) = a3;
  *(_QWORD *)(v19 + 96) = v17;
  *(_DWORD *)(v19 + 28) = a8;
  v26 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v19 + 8) = a7;
  *(int32x2_t *)(v19 + 12) = vrev64_s32(v26);
  return v19;
}

int32x2_t JSC::ASTBuilder::createDebugger(JSC::ParserArena *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  int32x2_t v10;
  int32x2_t result;

  v8 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v8) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v8 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v8 + 40;
  *(_DWORD *)(v8 + 20) = -1;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = &off_1E3589918;
  *(_DWORD *)(v8 + 28) = a4;
  v10 = *(int32x2_t *)(a2 + 4);
  *(_DWORD *)(v8 + 8) = a3;
  result = vrev64_s32(v10);
  *(int32x2_t *)(v8 + 12) = result;
  return result;
}

uint64_t JSC::ASTBuilder::createGeneratorFunctionBody(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t FunctionExpr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  FunctionExpr = JSC::ASTBuilder::createFunctionExpr(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v16 = FunctionExpr;
  if (*a4)
    JSC::FunctionMetadataNode::setEcmaName(*(_QWORD *)(FunctionExpr + 32), *a4, v10, v11, v12, v13, v14, v15);
  return v16;
}

uint64_t JSC::ASTBuilder::createDefineField(JSC::ParserArena *a1, uint64_t a2, _DWORD **a3, uint64_t a4, int a5)
{
  uint64_t result;
  _DWORD *v12;

  result = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - result) <= 0x3F)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    result = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = result + 64;
  *(_DWORD *)(result + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = -1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E358B080;
  v12 = *a3;
  if (*a3)
    *v12 += 2;
  *(_QWORD *)(result + 40) = v12;
  *(_QWORD *)(result + 48) = a4;
  *(_DWORD *)(result + 56) = a5;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int **a6@<X8>)
{
  unsigned int v8;
  int v9;
  uint64_t result;

  if (a2)
  {
    v8 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
  }
  if ((a4 & 0x80000000) != 0 || (v9 = a4 + 1, __OFADD__((_DWORD)a4, 1)) || __OFADD__(v8, v9))
  {
    *a6 = 0;
    goto LABEL_11;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(v8 + v9, (a4 & 0xFF00000000) != 0, a1, v8, a3, a4, a5, a6);
  if (!*a6)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x197EB6590);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, int **a8@<X8>)
{
  int v13;
  int *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  unsigned __int128 *v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  char v22;
  _DWORD *v23;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v23);
        v15 = v23;
        if (v23)
        {
          v16 = v23 + 5;
          *v23 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (a4 == 1)
          {
            *v16 = a3->i8[0];
          }
          else if (a4)
          {
            result = (uint64_t)memcpy(v15 + 5, a3, a4);
          }
          v17 = &v16[a4];
          if ((a6 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a6 == 1)
            {
              *v17 = *a5;
            }
            else if ((_DWORD)a6)
            {
              result = (uint64_t)memcpy(v17, a5, a6);
            }
          }
          else
          {
            v19 = (unsigned __int128 *)v17;
            if (a6 >= 0x10)
            {
              v19 = (unsigned __int128 *)&v17[a6 & 0xFFFFFFF0];
              v20 = (unsigned __int128 *)v17;
              do
              {
                v21 = (unsigned __int128)vld2q_s8(a5);
                a5 += 32;
                *v20++ = v21;
              }
              while (v20 != v19);
            }
            while (v19 != (unsigned __int128 *)&v17[a6])
            {
              v22 = *a5;
              a5 += 2;
              *(_BYTE *)v19 = v22;
              v19 = (unsigned __int128 *)((char *)v19 + 1);
            }
          }
          v17[a6] = a7;
        }
        goto LABEL_11;
      }
LABEL_21:
      v15 = 0;
      goto LABEL_11;
    }
LABEL_20:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_11;
  }
  if (!(_DWORD)result)
    goto LABEL_20;
  if (result > 0x7FFFFFEF)
    goto LABEL_21;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v23);
  v15 = v23;
  if (v23)
  {
    v18 = (char *)(v23 + 5);
    *v23 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(v18, a3, a4, a5, a6, a7);
  }
LABEL_11:
  *a8 = v15;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, _OWORD *__src, uint64_t a5, char a6)
{
  int v7;
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  char *v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  v7 = a5;
  v8 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &result[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v28.val[0] = *a2;
      v11 = a2[1];
      v30.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v30.val[1] = 0uLL;
      v32.val[0] = v11;
      v28.val[1] = 0uLL;
      v14 = result;
      vst2q_s8(v14, v28);
      v14 += 32;
      v32.val[1] = 0uLL;
      vst2q_s8(v14, v32);
      v15 = result + 64;
      vst2q_s8(v15, v30);
      v16 = result + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      result += 128;
    }
    while (result != v9);
    result = v9;
  }
  while (result != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v17;
    result += 2;
  }
  if ((a5 & 0xFF00000000) != 0)
  {
    v18 = v8;
    if (a5 >= 0x40)
    {
      v18 = &v8[2 * (a5 & 0xFFFFFFC0)];
      v19 = 0uLL;
      v20 = v8;
      do
      {
        v29.val[0] = (int8x16_t)*__src;
        v21 = *((int8x16_t *)__src + 1);
        v31.val[0] = (int8x16_t)__src[2];
        v22 = __src[3];
        __src += 4;
        v23 = v22;
        v31.val[1] = 0uLL;
        v33.val[0] = v21;
        v29.val[1] = 0uLL;
        v24 = v20;
        vst2q_s8(v24, v29);
        v24 += 32;
        v33.val[1] = 0uLL;
        vst2q_s8(v24, v33);
        v25 = v20 + 64;
        vst2q_s8(v25, v31);
        v26 = v20 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
        v20 += 128;
      }
      while (v20 != v18);
    }
    while (v18 != &v8[2 * a5])
    {
      v27 = *(unsigned __int8 *)__src;
      __src = (_OWORD *)((char *)__src + 1);
      *(_WORD *)v18 = v27;
      v18 += 2;
    }
  }
  else if ((_DWORD)a5 == 1)
  {
    *(_WORD *)v8 = *(_WORD *)__src;
  }
  else if ((_DWORD)a5)
  {
    result = (char *)memcpy(v8, __src, 2 * a5);
  }
  *(_WORD *)&v8[2 * v7] = a6;
  return result;
}

const char *JSC::SourceProvider::getRange(JSC::SourceProvider *this, unsigned int a2, int a3)
{
  const char *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  result = (const char *)(*(uint64_t (**)(JSC::SourceProvider *))(*(_QWORD *)this + 24))(this);
  v7 = v6;
  if (v6 <= a2)
    return "";
  v8 = a3 - a2;
  if (v6 - a2 > a3 - a2 || (v8 = v6 - a2, a2))
  {
    v9 = v8;
    v10 = v7 - (unint64_t)a2;
    if ((v7 & 0xFF00000000) != 0)
    {
      if (v10 >= v9)
      {
        result += a2;
        return result;
      }
    }
    else if (v10 >= v9)
    {
      result += 2 * a2;
      return result;
    }
    __break(1u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(uint64_t a1, int a2, const char *a3)
{
  void (**v5)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v5 = off_1E3572250;
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
      v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
      WTF::PrintStream::printf(v6, "%s", ". ");
      v31[5]((WTF::StringPrintStream *)&v31);
      v5 = v31;
    }
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v5[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse parameters for this ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(uint64_t a1, JSC::ParserArena **a2, uint64_t a3, uint64_t a4, char ***a5, char *a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t v13;
  int v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  JSC::ParserArena *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  const WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::ASTBuilder *v97;
  WTF::AtomStringImpl *v98;
  __int128 v99;
  __int128 v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  JSC::DestructuringPatternNode *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  char *v139;
  const char *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  JSC::ParserArena *v150;
  const char *v151;
  _QWORD *v152;
  uint64_t v153;
  __int128 v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _OWORD *v197;
  __int128 v198;
  __int128 v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  const char *v209;
  const char **v210;
  _QWORD *v211;
  uint64_t v212;
  const char *v213;
  const char *v214;
  const char *v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  WTF::PrintStream **v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  WTF::AtomStringImpl *v248;
  unint64_t *v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  _DWORD *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::AtomStringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unsigned int v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  _BYTE *v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  _BYTE *v296;
  uint64_t v297;
  const char *v298;
  int v299;
  uint64_t v300;
  uint64_t NumericIdentifier;
  char *v302;
  unsigned int v303;
  const char *v304;
  const char *v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  const char *v311;
  int v312;

  v9 = (_BYTE *)(a1 + 7344);
  if ((unint64_t)&v294 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v216 = a1 + 7344;
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
    v22 = 0;
    *(_BYTE *)(v216 + 8) = 1;
    return v22;
  }
  v13 = a3;
  ++*(_DWORD *)(a1 + 7296);
  v15 = *(_DWORD *)(a1 + 7300);
  v16 = (int *)(a1 + 7368);
  v17 = *(_DWORD *)(a1 + 7368);
  if (v17 == 12)
  {
LABEL_3:
    v22 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::ASTBuilder>(a1, (uint64_t)a2, v13, a4, *(WTF::AtomStringImpl **)(a1 + 7376), a1 + 7368, a7, a5);
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB8304);
    }
    v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v28, v18, v19, v20, v21);
    goto LABEL_5;
  }
  v30 = a8;
  v302 = a6;
  if (v17 > 3)
  {
    if (v17 > 544)
    {
      if (v17 == 545)
      {
LABEL_328:
        v292 = *(_DWORD *)(a1 + 12);
        if (!v292)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB84D0);
        }
        v293 = v292 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v293 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v293 + 11) & 2) == 0)
        {
          if (v17 != 1048592)
            goto LABEL_3;
LABEL_336:
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_3;
          goto LABEL_86;
        }
        if (v17 != 1048592)
          goto LABEL_9;
        v285 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v286 = **(_QWORD **)(a1 + 7376);
LABEL_332:
        if (v286 != v285[16])
          goto LABEL_9;
        goto LABEL_336;
      }
      if (v17 != 1048592)
      {
        if (v17 != 546)
          goto LABEL_9;
LABEL_86:
        if (*v9)
        {
          v142 = *(_DWORD *)(a1 + 12);
          if (!v142)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB84D8);
          }
          if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v142 - 1) + 10) & 0x102000) == 0
            && *(_DWORD *)(a1 + 7480) != 1)
          {
            goto LABEL_3;
          }
        }
        if (*(_QWORD *)(a1 + 7360))
        {
LABEL_10:
          v22 = 0;
          goto LABEL_5;
        }
        *(_QWORD *)&v306 = JSC::destructuringKindToVariableKindName(v13);
        v311 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
        v215 = "Cannot use 'await' as a ";
        goto LABEL_221;
      }
      v285 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v286 = **(_QWORD **)(a1 + 7376);
      if (v286 != v285[41])
      {
        v288 = (_BYTE *)(a1 + 7344);
        v289 = a3;
        v290 = v15;
        goto LABEL_327;
      }
    }
    else
    {
      if (v17 == 4)
      {
        v303 = a3;
        *(_QWORD *)&v306 = *(_QWORD *)(a1 + 7416);
        DWORD2(v306) = *(_DWORD *)(a1 + 7424);
        v150 = a2[1];
        v22 = *(_QWORD *)v150;
        if (*((_QWORD *)v150 + 1) - *(_QWORD *)v150 <= 0x47uLL)
        {
          JSC::ParserArena::allocateFreeablePool(a2[1]);
          v22 = *(_QWORD *)v150;
        }
        *(_QWORD *)v150 = v22 + 72;
        if (v22)
          v151 = (const char *)(v22 + 8);
        else
          v151 = 0;
        v311 = v151;
        v152 = (_QWORD *)((char *)v150 + 40);
        v153 = *((unsigned int *)v150 + 13);
        if ((_DWORD)v153 == *((_DWORD *)v150 + 12))
        {
          v211 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v152, v153 + 1, (unint64_t)&v311);
          v153 = *((unsigned int *)v150 + 13);
          *(_QWORD *)(*((_QWORD *)v150 + 5) + 8 * v153) = *v211;
        }
        else
        {
          *(_QWORD *)(*v152 + 8 * v153) = v151;
        }
        v299 = v15;
        *((_DWORD *)v150 + 13) = v153 + 1;
        *(_QWORD *)&v154 = -1;
        *((_QWORD *)&v154 + 1) = -1;
        *(_OWORD *)(v22 + 16) = v154;
        NumericIdentifier = v22 + 16;
        *(_DWORD *)(v22 + 48) = -1;
        *(_OWORD *)(v22 + 32) = v154;
        *(_QWORD *)v22 = &off_1E358B660;
        *(_QWORD *)(v22 + 8) = &unk_1E358B6C0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_QWORD *)(v22 + 64) = 0;
        v155 = *(_DWORD *)(a1 + 7400);
        v156 = *(_DWORD *)(a1 + 7412);
        v157 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v155;
        *(_DWORD *)(a1 + 7448) = v156;
        *(_DWORD *)(a1 + 7452) = v157;
        v158 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v158 + 4) = v155;
        v159 = *(_DWORD *)(a1 + 12);
        if (!v159)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB83B4);
        }
        v300 = a1 + 7444;
        v160 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v159 - 1) + 9) & 1;
        *(_BYTE *)(v158 + 56) = 0;
        v161 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v158, a1 + 7368, 0, v160, (uint64_t)a5, (uint64_t)a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v161;
        if (v302)
          *v302 = 1;
        v166 = (v30 + 1);
        v298 = "Expected either a closing ']' or a ',' following an element destructuring pattern";
        v167 = v303;
        while (1)
        {
          if (v161 == 6)
          {
            JSC::ArrayPatternNode::appendIndex(v22, 0, 0);
            v217 = *(_DWORD *)(a1 + 7400);
            v218 = *(_DWORD *)(a1 + 7412);
            v219 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v217;
            *(_DWORD *)(a1 + 7448) = v218;
            *(_DWORD *)(a1 + 7452) = v219;
            v182 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v182 + 4) = v217;
            v183 = *(_DWORD *)(a1 + 12);
            if (!v183)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB7D74);
            }
          }
          else
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_140;
            if (v161 == 5)
              goto LABEL_244;
            v168 = v302;
            if (v161 == 37)
            {
              v221 = *(_DWORD *)(a1 + 7400);
              v222 = *(_DWORD *)(a1 + 7412);
              v223 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v221;
              *(_DWORD *)(a1 + 7448) = v222;
              *(_DWORD *)(a1 + 7452) = v223;
              v224 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v224 + 4) = v221;
              v225 = *(_DWORD *)(a1 + 12);
              if (!v225)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB83CCLL);
              }
              v226 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v225 - 1) + 9) & 1;
              *(_BYTE *)(v224 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v224, a1 + 7368, 0, v226, v162, (uint64_t)v168, v164, v165);
              v227 = v303;
              v228 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, v303, a4, (uint64_t)a5, v302, a7, v166);
              if (v227 == 5 && !v228)
              {
LABEL_140:
                v22 = 0;
                goto LABEL_82;
              }
              if (v228)
              {
                JSC::ArrayPatternNode::appendIndex(v22, 2, v228);
                v178 = *v16;
                v298 = "Expected a closing ']' following a rest element destructuring pattern";
LABEL_243:
                if (v178 != 5)
                {
                  if (v178 == 20 || (v178 & 0x100000) != 0)
                    goto LABEL_139;
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_140;
                  v311 = v298;
                  v210 = &v311;
                  goto LABEL_185;
                }
LABEL_244:
                v229 = *(_DWORD *)(a1 + 7400);
                v230 = *(_DWORD *)(a1 + 7412);
                v231 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v229;
                *(_DWORD *)(a1 + 7448) = v230;
                *(_DWORD *)(a1 + 7452) = v231;
                v232 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v232 + 4) = v229;
                v233 = *(_DWORD *)(a1 + 12);
                v15 = v299;
                if (!v233)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EB83BCLL);
                }
                v234 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v233 - 1) + 9) & 1;
                *(_BYTE *)(v232 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v232, a1 + 7368, 0, v234, v162, v163, v164, v165);
                v235 = DWORD2(v306);
                v236 = (_QWORD *)NumericIdentifier;
                *(_DWORD *)(NumericIdentifier + 8) = DWORD2(v306);
                v237 = v306;
                *v236 = v306;
                *(_DWORD *)(v22 + 36) = v235;
                *(_QWORD *)(v22 + 28) = v237;
                v238 = *(_QWORD *)v300;
                *(_DWORD *)(v22 + 48) = *(_DWORD *)(v300 + 8);
                *(_QWORD *)(v22 + 40) = v238;
                goto LABEL_5;
              }
LABEL_250:
              if (*v16 != 20 && (*v16 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
                goto LABEL_140;
              }
              goto LABEL_139;
            }
            v169 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, v167, a4, (uint64_t)a5, v302, a7, v166);
            v176 = (_QWORD *)v169;
            if ((_DWORD)v167 == 5 && !v169)
              goto LABEL_140;
            if (!v169)
              goto LABEL_250;
            JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v170, v171, v172, v173, v174, v175);
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_140;
            JSC::ASTBuilder::appendArrayPatternEntry(v22, v176, v177);
            v178 = *v16;
            if (*v16 != 6)
              goto LABEL_243;
            v179 = *(_DWORD *)(a1 + 7400);
            v180 = *(_DWORD *)(a1 + 7412);
            v181 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v179;
            *(_DWORD *)(a1 + 7448) = v180;
            *(_DWORD *)(a1 + 7452) = v181;
            v182 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v182 + 4) = v179;
            v183 = *(_DWORD *)(a1 + 12);
            if (!v183)
            {
              __break(0xC471u);
              JUMPOUT(0x197EB832CLL);
            }
          }
          v184 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v183 - 1) + 9) & 1;
          *(_BYTE *)(v182 + 56) = 0;
          v161 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v182, a1 + 7368, 0, v184, v162, v163, v164, v165);
          *(_DWORD *)(a1 + 7368) = v161;
        }
      }
      if (v17 != 544)
        goto LABEL_9;
    }
    v287 = *(_DWORD *)(a1 + 12);
    if (!v287)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB83D4);
    }
    v288 = (_BYTE *)(a1 + 7344);
    v289 = a3;
    v290 = v15;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v287 - 1) + 9) & 1) == 0)
    {
      if (v17 == 544)
      {
        if ((a3 - 1) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
          v22 = 0;
          goto LABEL_5;
        }
        goto LABEL_3;
      }
      goto LABEL_336;
    }
    if (v17 != 1048592)
    {
      LODWORD(v13) = a3;
      goto LABEL_9;
    }
    v285 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v286 = **(_QWORD **)(a1 + 7376);
LABEL_327:
    v15 = v290;
    v13 = v289;
    v9 = v288;
    if (v286 != v285[62])
      goto LABEL_332;
    goto LABEL_328;
  }
  if (v17)
  {
LABEL_9:
    if ((_DWORD)v13 == 5)
      goto LABEL_10;
    v31 = *(_DWORD *)(a1 + 12);
    if (!v31)
    {
      __break(0xC471u);
      goto LABEL_316;
    }
    v32 = v31 - 1;
    if (v17 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 9) & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_10;
      v33 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v34 = *(unsigned int *)(a1 + 7408);
      v35 = *(_DWORD *)(a1 + 7412);
      v36 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      if (v37 <= v34)
      {
        v38 = 0x100000000;
        v36 = "";
        goto LABEL_106;
      }
      LODWORD(v38) = v35 - v34;
      if ((int)v37 - (int)v34 <= (v35 - v34))
      {
        LODWORD(v38) = v37 - v34;
        if (!(_DWORD)v34)
        {
          v38 = v37;
          goto LABEL_106;
        }
      }
      v38 = v38;
      v39 = v37 - v34;
      if ((v37 & 0xFF00000000) != 0)
      {
        if (v39 >= v38)
        {
          v36 += v34;
          v38 = v38 | 0x100000000;
LABEL_106:
          *(_QWORD *)&v306 = v36;
          *((_QWORD *)&v306 + 1) = v38;
          if (v13 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB81FCLL);
          }
          v311 = off_1E357B2A0[(int)v13];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&v306, &v311);
          goto LABEL_10;
        }
      }
      else if (v39 >= v38)
      {
        v36 += 2 * v34;
        goto LABEL_106;
      }
      goto LABEL_316;
    }
    if ((v17 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_10;
      v143 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v144 = *(unsigned int *)(a1 + 7408);
      v145 = *(_DWORD *)(a1 + 7412);
      v146 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 24))(v143);
      if (v147 <= v144)
      {
        v148 = 0x100000000;
        v146 = "";
        goto LABEL_153;
      }
      LODWORD(v148) = v145 - v144;
      if ((int)v147 - (int)v144 <= (v145 - v144))
      {
        LODWORD(v148) = v147 - v144;
        if (!(_DWORD)v144)
        {
          v148 = v147;
          goto LABEL_153;
        }
      }
      v148 = v148;
      v149 = v147 - v144;
      if ((v147 & 0xFF00000000) != 0)
      {
        if (v149 >= v148)
        {
          v146 += v144;
          v148 = v148 | 0x100000000;
LABEL_153:
          *(_QWORD *)&v306 = v146;
          *((_QWORD *)&v306 + 1) = v148;
          if (v13 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB821CLL);
          }
          v311 = off_1E357B2A0[(int)v13];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&v306, &v311);
          goto LABEL_10;
        }
      }
      else if (v149 >= v148)
      {
        v146 += 2 * v144;
        goto LABEL_153;
      }
LABEL_316:
      __break(1u);
      goto LABEL_317;
    }
    if ((v17 & 0x200) == 0)
    {
      if ((_DWORD)v13 != 4 && v17 == 13)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          if (v13 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB82DCLL);
          }
          *(_QWORD *)&v306 = off_1E357B2C8[(int)v13];
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*>(a1, "Cannot use a private name as a ", (const char **)&v306);
        }
        goto LABEL_10;
      }
      goto LABEL_230;
    }
    if ((v17 - 544) >= 3)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_10;
      v202 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v203 = *(unsigned int *)(a1 + 7408);
      v204 = *(_DWORD *)(a1 + 7412);
      v205 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202);
      if (v206 <= v203)
      {
        v207 = 0x100000000;
        v205 = "";
      }
      else
      {
        LODWORD(v207) = v204 - v203;
        if ((int)v206 - (int)v203 > (v204 - v203) || (LODWORD(v207) = v206 - v203, (_DWORD)v203))
        {
          v207 = v207;
          v208 = v206 - v203;
          if ((v206 & 0xFF00000000) != 0)
          {
            if (v208 < v207)
              goto LABEL_316;
            v205 += v203;
            v207 = v207 | 0x100000000;
          }
          else
          {
            if (v208 < v207)
              goto LABEL_316;
            v205 += 2 * v203;
          }
        }
        else
        {
          v207 = v206;
        }
      }
      *(_QWORD *)&v306 = v205;
      *((_QWORD *)&v306 + 1) = v207;
      if (v13 >= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB82FCLL);
      }
      v311 = off_1E357B2A0[(int)v13];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&v306, &v311);
      goto LABEL_10;
    }
    if (v17 == 544)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v306 = JSC::destructuringKindToVariableKindName(v13);
          v311 = "in strict mode";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, (const char **)&v306, &v311);
        }
        goto LABEL_10;
      }
      goto LABEL_230;
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 9) & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v32 + 11) & 2) == 0)
    {
LABEL_230:
      if (v17 == 20 || (v17 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a parameter pattern or a ')' in parameter list");
      }
      goto LABEL_10;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_10;
    *(_QWORD *)&v306 = JSC::destructuringKindToVariableKindName(v13);
    v311 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
    v215 = "Cannot use 'yield' as a ";
LABEL_221:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v215, (const char **)&v306, &v311);
    goto LABEL_10;
  }
  v303 = a3;
  v311 = *(const char **)(a1 + 7416);
  v312 = *(_DWORD *)(a1 + 7424);
  v40 = a2[1];
  v22 = *(_QWORD *)v40;
  if (*((_QWORD *)v40 + 1) - *(_QWORD *)v40 <= 0x47uLL)
  {
    v239 = (_BYTE *)(a1 + 7344);
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v9 = v239;
    v22 = *(_QWORD *)v40;
  }
  v296 = v9;
  *(_QWORD *)v40 = v22 + 72;
  v41 = v22 + 8;
  if (!v22)
    v41 = 0;
  *(_QWORD *)&v306 = v41;
  v42 = *((unsigned int *)v40 + 13);
  if ((_DWORD)v42 == *((_DWORD *)v40 + 12))
  {
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>((uint64_t)v40 + 40, (unint64_t)&v306);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v40 + 5) + 8 * v42) = v41;
    *((_DWORD *)v40 + 13) = v42 + 1;
  }
  v299 = v15;
  *(_QWORD *)&v43 = -1;
  *((_QWORD *)&v43 + 1) = -1;
  *(_OWORD *)(v22 + 16) = v43;
  v298 = (const char *)(v22 + 16);
  *(_DWORD *)(v22 + 48) = -1;
  *(_OWORD *)(v22 + 32) = v43;
  *(_QWORD *)v22 = &off_1E358B6E0;
  *(_QWORD *)(v22 + 8) = &unk_1E358B740;
  *(_WORD *)(v22 + 52) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  v295 = v22 + 56;
  *(_QWORD *)(v22 + 64) = 0;
  v44 = *(_DWORD *)(a1 + 7400);
  v45 = *(_DWORD *)(a1 + 7412);
  v46 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v44;
  *(_DWORD *)(a1 + 7448) = v45;
  *(_DWORD *)(a1 + 7452) = v46;
  v47 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v47 + 4) = v44;
  v48 = *(_DWORD *)(a1 + 12);
  v49 = v302;
  if (!v48)
  {
LABEL_317:
    __break(0xC471u);
    JUMPOUT(0x197EB83A4);
  }
  v297 = a1 + 7444;
  v50 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 9) & 1;
  *(_BYTE *)(v47 + 56) = 0;
  v57 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v47, a1 + 7368, 0, v50, (uint64_t)a5, (uint64_t)a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v57;
  if (v49)
    *v49 = 1;
  LODWORD(v300) = v30 + 1;
  while (1)
  {
    if (v57 == 37)
    {
      v187 = *(_DWORD *)(a1 + 7400);
      v188 = *(_DWORD *)(a1 + 7412);
      v189 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v187;
      *(_DWORD *)(a1 + 7448) = v188;
      *(_DWORD *)(a1 + 7452) = v189;
      v190 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v190 + 4) = v187;
      v191 = *(_DWORD *)(a1 + 12);
      if (!v191)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB83C4);
      }
      v192 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v191 - 1) + 9) & 1;
      *(_BYTE *)(v190 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v190, a1 + 7368, 0, v192, v53, v54, v55, v56);
      v195 = JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (uint64_t)a2, v303, a4, a5, a7, v193, v194);
      if (!*(_QWORD *)(a1 + 7360) && v195)
      {
        v306 = *(unint64_t *)(*(_QWORD *)(a1 + 7216) + 41952);
        LOBYTE(v307) = 0;
        *((_QWORD *)&v307 + 1) = v195;
        *(_QWORD *)&v308 = 0;
        BYTE8(v308) = 1;
        v196 = *(_DWORD *)(v22 + 68);
        if (v196 == *(_DWORD *)(v22 + 64))
        {
          WTF::Vector<JSC::ObjectPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPatternNode::Entry>(v295, (unint64_t)&v306);
        }
        else
        {
          v197 = (_OWORD *)(*(_QWORD *)(v22 + 56) + 48 * v196);
          v198 = v306;
          v199 = v308;
          v197[1] = v307;
          v197[2] = v199;
          *v197 = v198;
          ++*(_DWORD *)(v22 + 68);
        }
        v131 = 1;
        *(_BYTE *)(v22 + 52) = 1;
        goto LABEL_161;
      }
      goto LABEL_140;
    }
    if (v57 == 1)
      break;
    if (v57 <= 544)
    {
      switch(v57)
      {
        case 4:
          v58 = *(_DWORD *)(a1 + 12);
          v59 = *(_DWORD *)(a1 + 7400);
          v60 = *(_DWORD *)(a1 + 7412);
          v61 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v59;
          *(_DWORD *)(a1 + 7448) = v60;
          *(_DWORD *)(a1 + 7452) = v61;
          v62 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v62 + 4) = v59;
          if (!v58)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB8364);
          }
          v63 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1;
          *(_BYTE *)(v62 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v62, a1 + 7368, 0, v63, v53, v54, v55, v56);
          LODWORD(v306) = 0;
          *((_QWORD *)&v306 + 1) = *(_QWORD *)(a1 + 7496);
          *(_QWORD *)&v307 = a1;
          *(_QWORD *)(a1 + 7496) = &v306;
          JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, (uint64_t)&v306, v64, v65, v66, v67, v68, v69);
          *(_QWORD *)(v307 + 7496) = *((_QWORD *)&v306 + 1);
          v71 = *(_DWORD *)(a1 + 7368);
          if (!v70)
          {
            if (v71 != 20 && (v71 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
              goto LABEL_140;
            }
            goto LABEL_139;
          }
          if (v71 != 5)
          {
            if (v71 != 20 && (v71 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected ']' to end end a computed property name");
              goto LABEL_140;
            }
            goto LABEL_139;
          }
          v72 = v70;
          v73 = 0;
          NumericIdentifier = 0;
          goto LABEL_43;
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
          goto LABEL_75;
        case 9:
        case 10:
          v130 = *(unint64_t **)(a1 + 7248);
          if (!v130)
          {
            v130 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v130[1] = 0;
            v130[2] = 0;
            *v130 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v130, v241, v242, v243, v244, v245, v246, v247);
            bzero(v130 + 3, 0x800uLL);
            v249 = *(unint64_t **)(a1 + 7248);
            *(_QWORD *)(a1 + 7248) = v130;
            if (v249)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v249, v248, (uint64_t)v51, v52, v53, v54, v55, v56);
              WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
              v130 = *(unint64_t **)(a1 + 7248);
            }
          }
          NumericIdentifier = JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v130, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v51, v52, v53, v54, v55, v56);
          goto LABEL_72;
        case 11:
          v200 = *(unint64_t **)(a1 + 7248);
          if (!v200)
          {
            v200 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v200[1] = 0;
            v200[2] = 0;
            *v200 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v200, v260, v261, v262, v263, v264, v265, v266);
            bzero(v200 + 3, 0x800uLL);
            v274 = *(unint64_t **)(a1 + 7248);
            *(_QWORD *)(a1 + 7248) = v200;
            if (v274)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v274, v267, v268, v269, v270, v271, v272, v273);
              WTF::fastFree(v275, v276, v277, v278, v279, v280, v281, v282);
              v200 = *(unint64_t **)(a1 + 7248);
            }
          }
          JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v200, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), v296[40]);
          NumericIdentifier = v201;
          if (!v201)
          {
            if (*v16 != 20 && (*v16 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
              goto LABEL_140;
            }
LABEL_139:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_140;
          }
LABEL_72:
          v73 = 0;
          v72 = 0;
          break;
        case 12:
          goto LABEL_48;
        case 14:
          v72 = 0;
          NumericIdentifier = *(_QWORD *)(a1 + 7376);
          v73 = 1;
          goto LABEL_43;
        default:
          if ((v57 - 531) < 2)
            goto LABEL_76;
          if (v57 != 544)
            goto LABEL_75;
          v186 = *(_DWORD *)(a1 + 12);
          if (!v186)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB8384);
          }
          v49 = v302;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v186 - 1) + 9) & 1) != 0)
            goto LABEL_76;
          if (v303 - 3 < 0xFFFFFFFE)
            goto LABEL_48;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
          goto LABEL_140;
      }
      goto LABEL_43;
    }
    if (v57 != 1048592)
    {
      if (v57 == 545)
      {
        v283 = *(_DWORD *)(a1 + 12);
        if (!v283)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB8324);
        }
        v284 = v283 - 1;
        v49 = v302;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v284 + 9) & 1) != 0
          || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v284 + 11) & 2) != 0)
        {
          goto LABEL_76;
        }
      }
      else if (v57 != 546)
      {
LABEL_75:
        if ((v57 & 0x200) == 0)
        {
          if (v303 == 5)
            goto LABEL_140;
          if (v57 != 20 && (v57 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a property name");
            goto LABEL_140;
          }
          goto LABEL_139;
        }
LABEL_76:
        v73 = 0;
        v72 = 0;
        NumericIdentifier = *(_QWORD *)(a1 + 7376);
LABEL_43:
        v74 = *(_DWORD *)(a1 + 7400);
        v75 = *(_DWORD *)(a1 + 7412);
        v76 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v74;
        *(_DWORD *)(a1 + 7448) = v75;
        *(_DWORD *)(a1 + 7452) = v76;
        v77 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v77 + 4) = v74;
        v78 = *(_DWORD *)(a1 + 12);
        if (!v78)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB8394);
        }
        v79 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1;
        *(_BYTE *)(v77 + 56) = 0;
        v80 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v77, a1 + 7368, 0, v79, v53, v54, v55, v56);
        *(_DWORD *)(a1 + 7368) = v80;
        if (v80 != 18)
        {
          if (v303 == 5)
            goto LABEL_140;
          if (v57 == 531)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v306 = *(_QWORD *)NumericIdentifier;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)&v306);
            }
            goto LABEL_140;
          }
          if (v57 == 532)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v306 = *(_QWORD *)NumericIdentifier;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v306);
            }
            goto LABEL_140;
          }
          if ((v57 & 0x200) == 0)
          {
            if (v80 != 20 && (v80 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' prior to a named destructuring property");
              goto LABEL_140;
            }
            goto LABEL_139;
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_140;
          *(_QWORD *)&v306 = *(_QWORD *)NumericIdentifier;
          v240 = (WTF::PrintStream **)&v306;
LABEL_256:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[58],WTF::UniquedStringImpl *,char const(&)[2]>(a1, v240);
          goto LABEL_140;
        }
        v85 = *(_DWORD *)(a1 + 7400);
        v86 = *(_DWORD *)(a1 + 7412);
        v87 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v85;
        *(_DWORD *)(a1 + 7448) = v86;
        *(_DWORD *)(a1 + 7452) = v87;
        v88 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v88 + 4) = v85;
        v89 = *(_DWORD *)(a1 + 12);
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB838CLL);
        }
        v90 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1;
        *(_BYTE *)(v88 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v88, a1 + 7368, 0, v90, v81, v82, v83, v84);
        v97 = (JSC::ASTBuilder *)JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, v303, a4, (uint64_t)a5, v302, a7, v300);
        goto LABEL_53;
      }
    }
LABEL_48:
    v98 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v99 = *(_OWORD *)(a1 + 7416);
    v308 = *(_OWORD *)(a1 + 7400);
    v309 = v99;
    v310 = *(_QWORD *)(a1 + 7432);
    v100 = *(_OWORD *)(a1 + 7384);
    v306 = *(_OWORD *)v16;
    v307 = v100;
    v101 = *(_DWORD *)(a1 + 7400);
    v102 = *(_DWORD *)(a1 + 7412);
    v103 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v101;
    *(_DWORD *)(a1 + 7448) = v102;
    *(_DWORD *)(a1 + 7452) = v103;
    v104 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v104 + 4) = v101;
    v105 = *(_DWORD *)(a1 + 12);
    if (!v105)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB830CLL);
    }
    v106 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v105 - 1) + 9) & 1;
    *(_BYTE *)(v104 + 56) = 0;
    v107 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v104, a1 + 7368, 0, v106, v53, v54, v55, v56);
    *(_DWORD *)(a1 + 7368) = v107;
    NumericIdentifier = (uint64_t)v98;
    if (v107 == 18)
    {
      v112 = *(_DWORD *)(a1 + 7400);
      v113 = *(_DWORD *)(a1 + 7412);
      v114 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v112;
      *(_DWORD *)(a1 + 7448) = v113;
      *(_DWORD *)(a1 + 7452) = v114;
      v115 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v115 + 4) = v112;
      v116 = *(_DWORD *)(a1 + 12);
      if (!v116)
      {
        __break(0xC471u);
        JUMPOUT(0x197EB831CLL);
      }
      v117 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v116 - 1) + 9) & 1;
      *(_BYTE *)(v115 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v115, a1 + 7368, 0, v117, v108, v109, v110, v111);
      v118 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, v303, a4, (uint64_t)a5, v49, a7, v300);
    }
    else
    {
      if (v57 == 1048592)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_140;
        v305 = *(const char **)v98;
        v240 = (WTF::PrintStream **)&v305;
        goto LABEL_256;
      }
      if ((_DWORD)v306 == 546
        || (_DWORD)v306 == 1048592
        && **((_QWORD **)&v306 + 1) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v296)
          goto LABEL_370;
        v291 = *(_DWORD *)(a1 + 12);
        if (!v291)
        {
          __break(0xC471u);
          JUMPOUT(0x197EB837CLL);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v291 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_370:
          if (!*(_QWORD *)(a1 + 7360))
          {
            v305 = (const char *)JSC::destructuringKindToVariableKindName(v303);
            v304 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", &v305, &v304);
          }
          goto LABEL_140;
        }
      }
      v127 = v303;
      if (v303 == 5)
      {
        v212 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v213 = *(const char **)(v212 + 1248);
        v214 = *(const char **)v98;
        if (v213 == *(const char **)v98 || *(const char **)(v212 + 880) == v214)
        {
          v258 = *(_DWORD *)(a1 + 12);
          if (!v258)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB8374);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v258 - 1) + 9) & 1) != 0)
          {
            v259 = *(_DWORD **)(a1 + 7496);
            if (v259 && *v259 == 1)
              *v259 = 0;
            if (!*(_QWORD *)(a1 + 7360))
            {
              v305 = v214;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v305);
            }
            goto LABEL_140;
          }
        }
        if (v107 == 21)
        {
          v220 = *(_DWORD *)(a1 + 12);
          if (!v220)
          {
            __break(0xC471u);
            JUMPOUT(0x197EB836CLL);
          }
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v220 - 1), (uint64_t)v214, v213 == v214);
        }
        v128 = a1;
        v129 = (uint64_t)a2;
        v127 = 5;
      }
      else
      {
        v128 = a1;
        v129 = (uint64_t)a2;
      }
      v118 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::ASTBuilder>(v128, v129, v127, a4, v98, (uint64_t)&v306, a7, a5);
    }
    v97 = (JSC::ASTBuilder *)v118;
    v73 = 0;
    v72 = 0;
LABEL_53:
    if (v303 == 5 && !v97)
      goto LABEL_140;
    if (!v97)
      goto LABEL_250;
    JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v91, v92, v93, v94, v95, v96);
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_140;
    if (v72)
    {
      JSC::ASTBuilder::appendObjectPatternEntry(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), v22, v72, v97, v119);
      *(_BYTE *)(v22 + 53) = 1;
    }
    else
    {
      JSC::ASTBuilder::appendObjectPatternEntry(v22, v73, NumericIdentifier, v97, (uint64_t *)v119);
    }
    v49 = v302;
    v120 = *v16;
    if (*v16 != 6)
    {
      v131 = 0;
      goto LABEL_78;
    }
    v121 = *(_DWORD *)(a1 + 7400);
    v122 = *(_DWORD *)(a1 + 7412);
    v123 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v121;
    *(_DWORD *)(a1 + 7448) = v122;
    *(_DWORD *)(a1 + 7452) = v123;
    v124 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v124 + 4) = v121;
    v125 = *(_DWORD *)(a1 + 12);
    if (!v125)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB8314);
    }
    v126 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v125 - 1) + 9) & 1;
    *(_BYTE *)(v124 + 56) = 0;
    v57 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v124, a1 + 7368, 0, v126, v53, v54, v55, v56);
    *(_DWORD *)(a1 + 7368) = v57;
  }
  v131 = 0;
LABEL_161:
  v120 = *v16;
LABEL_78:
  if (v303 != 5)
  {
    if (v120 == 1)
      goto LABEL_80;
    if (v120 == 20 || (v120 & 0x100000) != 0)
      goto LABEL_139;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_140;
    if (v131)
      v209 = "Expected a closing '}' following a rest element destructuring pattern";
    else
      v209 = "Expected either a closing '}' or an ',' after a property destructuring pattern";
    *(_QWORD *)&v306 = v209;
    v210 = (const char **)&v306;
LABEL_185:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 1, v210);
    goto LABEL_140;
  }
  if (v120 != 1)
    goto LABEL_140;
LABEL_80:
  v132 = *(_DWORD *)(a1 + 7400);
  v133 = *(_DWORD *)(a1 + 7412);
  v134 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v132;
  *(_DWORD *)(a1 + 7448) = v133;
  *(_DWORD *)(a1 + 7452) = v134;
  v135 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v135 + 4) = v132;
  v136 = *(_DWORD *)(a1 + 12);
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x197EB83ACLL);
  }
  v137 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v136 - 1) + 9) & 1;
  *(_BYTE *)(v135 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v135, a1 + 7368, 0, v137, v53, v54, v55, v56);
  v138 = v312;
  v139 = (char *)v298;
  *((_DWORD *)v298 + 2) = v312;
  v140 = v311;
  *(_QWORD *)v139 = v311;
  *(_DWORD *)(v22 + 36) = v138;
  *(_QWORD *)(v22 + 28) = v140;
  v141 = *(_QWORD *)v297;
  *(_DWORD *)(v22 + 48) = *(_DWORD *)(v297 + 8);
  *(_QWORD *)(v22 + 40) = v141;
LABEL_82:
  v15 = v299;
LABEL_5:
  *(_DWORD *)(a1 + 7300) = v15;
  return v22;
}

