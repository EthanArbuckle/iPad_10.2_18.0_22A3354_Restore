uint64_t operationInByIdMegamorphicGeneric(unint64_t a1, unint64_t a2, int64_t this, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int OwnStaticPropertySlot;
  unsigned int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 v56;
  unsigned __int16 *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t Error;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  char **v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  char **v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  int v122;
  unint64_t v123;
  JSC::VM *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  int v144;
  double v145;
  const unsigned __int8 *v146;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t varE0[29];

  v9 = a1;
  varE0[16] = *MEMORY[0x1E0C80C00];
  v10 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v10 + 5) = varE0[28];
  if (this)
  {
    if ((this & 1) != 0)
      this &= ~1uLL;
    else
      this = *(_QWORD *)(this + 8);
  }
  v152 = 0xFFFFFFFF00000000;
  v154 = 0;
  v155 = 0;
  v153 = a2;
  v156 = 0x10000;
  v157 = 0;
  LOBYTE(v158) = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  if ((a2 & 0xFFFE000000000002) != 0 || (v11 = *(unsigned __int8 *)(a2 + 5), v11 <= 0x16))
  {
    v70 = WTF::fastCompactMalloc((WTF *)0x20);
    v71.i64[0] = 0x1100000002;
    *(_QWORD *)v70 = 0x1100000002;
    *(_QWORD *)(v70 + 8) = "is not an Object.";
    *(_DWORD *)(v70 + 16) = 4;
    varE0[0] = v70;
    Error = JSC::createError(v9, a2, varE0, (uint64_t)JSC::invalidParameterInSourceAppender, v72, v73, v74, v75, v71);
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
    JSC::VM::throwException(v10, (JSC::JSGlobalObject *)v9, Error, v78, v79, v80, v81, v82);
    v61 = 10;
    goto LABEL_72;
  }
  v12 = (unint64_t)this >> 4;
  v13 = &JSC::DOMAttributeGetterSetter::s_info;
  v14 = 0x3F00000000;
  v15 = a2;
  v16 = 1;
  while (1)
  {
    v17 = *(_BYTE *)(v15 + 6);
    if ((v17 & 8) != 0 && v11 != 36 && v11 != 26 && v15 != *(_QWORD *)(v9 + 672))
      break;
    if (!(_DWORD)v12)
      goto LABEL_19;
    v18 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
    if ((v12 & ~*(_DWORD *)(v18 + 0x20)) != 0)
      goto LABEL_19;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x58);
    if (!v19)
    {
      v36 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x40);
      if (!v36 || *(_BYTE *)(v36 + 5) != 1 && *(_DWORD *)(v36 + 80) < 2u)
        goto LABEL_19;
      v37 = (WTF::StringImpl *)this;
      v38 = v9;
      v39 = v13;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)), v10, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v14 = 0x3F00000000;
      v13 = v39;
      v9 = v38;
      this = (int64_t)v37;
      if (!v19)
        goto LABEL_19;
    }
    if (!*(_DWORD *)(v19 + 24))
      goto LABEL_19;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
    v22 = *(unsigned int *)(v19 + 8);
    v23 = *(_DWORD *)(this + 16);
    if ((v20 & 1) != 0)
    {
      if ((v23 & 0x20) != 0)
        v23 = *(_DWORD *)(this + 32);
      v24 = *(_DWORD *)(v19 + 12);
      v25 = (v23 >> 8) & *(_QWORD *)&v24;
      v26 = *(unsigned __int8 *)(v21 + v25);
      if (!*(_BYTE *)(v21 + v25))
        goto LABEL_19;
      v27 = v21 + v22;
      v28 = 1;
      while (1)
      {
        v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
        if (this == (v29 & 0xFFFFFFFFFFFFLL))
          break;
        v25 = ((_DWORD)v25 + v28) & v24;
        v26 = *(unsigned __int8 *)(v21 + v25);
        ++v28;
        if (!*(_BYTE *)(v21 + v25))
          goto LABEL_19;
      }
      a6 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
    }
    else
    {
      if ((v23 & 0x20) != 0)
        v23 = *(_DWORD *)(this + 32);
      v43 = *(_DWORD *)(v19 + 12);
      v44 = v43 & (v23 >> 8);
      v45 = *(_DWORD *)(v21 + 4 * v44);
      if (!v45)
      {
LABEL_19:
        if ((*(_BYTE *)(v15 + 6) & 0x20) != 0)
        {
          v93 = (WTF::StringImpl *)this;
          v94 = v9;
          v95 = v13;
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v15, v10, this, (uint64_t)&v150);
          v14 = 0x3F00000000;
          v13 = v95;
          v9 = v94;
          this = (int64_t)v93;
        }
        else
        {
          OwnStaticPropertySlot = 0;
        }
        goto LABEL_21;
      }
      v46 = v21 + 4 * v22;
      v47 = 1;
      while (1)
      {
        v48 = (v45 - 1);
        if (this == *(_QWORD *)(v46 + 16 * v48))
          break;
        v44 = (v44 + v47) & v43;
        v45 = *(_DWORD *)(v21 + 4 * v44);
        ++v47;
        if (!v45)
          goto LABEL_19;
      }
      a6 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_19;
    if ((int)a6 <= 63)
    {
      v40 = v15 + 16;
      v41 = a6 << 32;
    }
    else
    {
      v40 = *(_QWORD *)(v15 + 8) - 8;
      v41 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v40 + (v41 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_49;
    v42 = *(unsigned __int8 *)(a4 + 5);
    if (v42 != 5)
    {
      if (v42 == 6)
      {
        v115 = *(_DWORD *)(v18 + 16) & 3;
        v116 = *(_QWORD *)(a4 + 16);
        if (v13 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
        {
          v118 = *(_QWORD *)(a4 + 24);
          v117 = *(_QWORD *)(a4 + 32);
          v150 = *(_QWORD *)(a4 + 8);
          v151 = v116;
          LODWORD(v152) = HIDWORD(a6);
          v154 = v15;
          BYTE1(v156) = 3;
          OwnStaticPropertySlot = 1;
          if (v115 != 2)
            LOBYTE(v156) = 1;
          HIBYTE(v156) = 1;
          v160 = v118;
          v161 = v117;
        }
        else
        {
          v150 = *(_QWORD *)(a4 + 8);
          v151 = v116;
          LODWORD(v152) = HIDWORD(a6);
          v154 = v15;
          OwnStaticPropertySlot = 1;
          BYTE1(v156) = 3;
          if (v115 != 2)
            LOBYTE(v156) = 1;
        }
        goto LABEL_21;
      }
LABEL_49:
      v150 = a4;
      v154 = v15;
      v152 = __PAIR64__(a6, HIDWORD(a6));
      OwnStaticPropertySlot = 1;
      LOWORD(v156) = 257;
      goto LABEL_21;
    }
    v96 = (WTF::StringImpl *)this;
    v97 = v9;
    v98 = v13;
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v15, (uint64_t)v10, (uint64_t)&v150, a4, SHIDWORD(a6), a6);
    v14 = 0x3F00000000;
    v13 = v98;
    v9 = v97;
    this = (int64_t)v96;
    OwnStaticPropertySlot = 1;
LABEL_21:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v31 = *(unsigned __int16 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC), (v31 & 8) != 0))
    {
      v32 = 0;
    }
    else if ((v31 & 0x10) != 0)
    {
      v32 = (v31 >> 5) & 1;
    }
    else
    {
      v32 = 1;
    }
    v33 = v16 & v32;
    if (OwnStaticPropertySlot)
    {
      if (v33 && (!BYTE1(v156) || v156 == 1))
      {
        v119 = (WTF::AtomStringImpl *)*(unsigned int *)a2;
        if (v154 == a2 || (*(_BYTE *)((16 * (_QWORD)v119) | 0x10) & 3) == 0)
        {
          if ((*((_QWORD *)v10 + 11635) & 1) != 0)
            v120 = 0;
          else
            v120 = *((_QWORD *)v10 + 11635);
          JSC::MegamorphicCache::initAsHasHit(v120, v119, (WTF::StringImpl *)this, a4, a5, a6, a7, a8);
        }
      }
      goto LABEL_104;
    }
    v34 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v34 == 0)
      v16 = 0;
    else
      v16 = v33;
    if (!v34)
      v34 = *(_QWORD *)(v15 + 16);
    if ((v34 & 0xFFFE000000000002) == 0)
    {
      v11 = *(unsigned __int8 *)(v34 + 5);
      v15 = v34;
      if (v11 > 0x16)
        continue;
    }
    if (v16)
    {
      v49 = *(unsigned int *)a2;
      if ((*(_BYTE *)((16 * v49) | 0x10) & 3) == 0)
      {
        if ((*((_QWORD *)v10 + 11635) & 1) != 0)
          v50 = 0;
        else
          v50 = *((_QWORD *)v10 + 11635);
        v51 = *(_DWORD *)(this + 16);
        if (v51 < 0x100)
        {
          v84 = (WTF::StringImpl *)this;
          LOWORD(v52) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)this);
          this = (int64_t)v84;
        }
        else
        {
          v52 = v51 >> 8;
        }
        v53 = ((_WORD)v52 + ((unsigned __int16)v49 ^ (unsigned __int16)(v49 >> 9))) & 0x1FF;
        v54 = v50 + 122880;
        v55 = v50 + 122880 + 16 * v53;
        v56 = *(_WORD *)(v55 + 12);
        v57 = (unsigned __int16 *)(v50 + 133120);
        v58 = *(unsigned __int16 *)(v50 + 133120);
        v59 = *(WTF::StringImpl **)v55;
        if (v56 == v58)
        {
          v64 = v54 + 16 * v53;
          v66 = *(_DWORD *)(v64 + 8);
          v65 = (_QWORD *)(v64 + 8);
          v67 = ((_BYTE)v66 + (_BYTE)v59 + ((v66 + (_DWORD)v59) >> 7)) & 0x7F;
          v68 = v50 + 0x20000;
          *(_QWORD *)v55 = 0;
          v69 = *(WTF::StringImpl **)(v68 + 16 * v67);
          *(_QWORD *)(v68 + 16 * v67) = v59;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
            {
              v148 = (WTF::StringImpl *)this;
              WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)v14, this, a4, a5, a6, a7, a8);
              WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
              this = (int64_t)v148;
              v56 = *v57;
              v59 = *(WTF::StringImpl **)v55;
            }
            else
            {
              v59 = 0;
              *(_DWORD *)v69 -= 2;
            }
          }
          else
          {
            v59 = 0;
          }
          *(_QWORD *)(v68 + 16 * v67 + 8) = *v65;
          LOWORD(v58) = v56;
        }
        *(_DWORD *)this += 2;
        *(_QWORD *)v55 = this;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
          {
            WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)v14, this, a4, a5, a6, a7, a8);
            WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
          }
          else
          {
            *(_DWORD *)v59 -= 2;
          }
        }
        v60 = v54 + 16 * v53;
        *(_DWORD *)(v60 + 8) = v49;
        *(_WORD *)(v55 + 12) = v58;
        *(_WORD *)(v60 + 14) = 0;
      }
    }
LABEL_71:
    v61 = 6;
    goto LABEL_72;
  }
  v121 = (WTF::StringImpl *)this;
  v122 = v12;
  v123 = v9;
  v124 = *(JSC::VM **)(v9 + 56);
  v61 = 7;
  while (1)
  {
    v125 = *(_DWORD *)v15 & 0xFFFFFFFE;
    v126 = 16 * v125;
    if ((v17 & 8) == 0)
      break;
    v149 = (*(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *, uint64_t *))(16 * *(unsigned int *)(16 * v125 + 0x4C) + 0x68))(v15, v123, v121, &v150);
    if (*((_DWORD *)v124 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v124, v14, this, a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v149) & 1) != 0)
      {
        if (hasExceptionsAfterHandlingTraps)
          v61 = 6;
        else
          v61 = 7;
        goto LABEL_72;
      }
    }
    else if ((v149 & 1) != 0)
    {
      goto LABEL_104;
    }
    if (BYTE2(v156) == 3)
    {
      if (v157)
        goto LABEL_71;
      v140 = *(unsigned __int8 *)(v15 + 5);
      if (v140 != 61)
      {
LABEL_154:
        if ((v140 - 50) < 0xFFFFFFF5)
          goto LABEL_115;
        if (!v121)
          goto LABEL_115;
        v141 = *((_DWORD *)v121 + 4);
        if ((v141 & 0x20) != 0)
          goto LABEL_115;
        v142 = *((unsigned int *)v121 + 1);
        if (!(_DWORD)v142)
          goto LABEL_115;
        v143 = (unsigned __int8 *)*((_QWORD *)v121 + 1);
        if ((v141 & 4) == 0)
        {
          v144 = *(unsigned __int16 *)v143;
          if ((_DWORD)v142 == 1)
            goto LABEL_160;
          if (v144 == 45)
          {
            v144 = *((unsigned __int16 *)v143 + 1);
            goto LABEL_166;
          }
          if ((v144 - 48) >= 0xA && ((_DWORD)v142 != 8 || v144 != 73))
          {
LABEL_177:
            if ((_DWORD)v142 != 3 || v144 != 78)
              goto LABEL_115;
          }
LABEL_170:
          v9 = v9 & 0xFFFFFF0000000000 | v142 | ((unint64_t)((v141 >> 2) & 1) << 32);
          JSC::jsToNumber(v143, v9);
          WTF::numberToString(varE0, v145);
          if (WTF::equal((unint64_t)v121, (unint64_t)varE0, v146))
            goto LABEL_71;
          goto LABEL_115;
        }
        v144 = *v143;
        if ((_DWORD)v142 == 1)
        {
LABEL_160:
          if ((v144 - 48) < 0xA)
            goto LABEL_71;
          goto LABEL_115;
        }
        if (v144 == 45)
        {
          v144 = v143[1];
LABEL_166:
          if ((v144 - 48) < 0xA)
          {
            if ((_DWORD)v142 == 2)
              goto LABEL_71;
            goto LABEL_170;
          }
          if ((_DWORD)v142 != 9)
            goto LABEL_115;
        }
        else
        {
          if ((v144 - 48) < 0xA)
            goto LABEL_170;
          if ((_DWORD)v142 != 8)
            goto LABEL_177;
        }
        if (v144 != 73)
          goto LABEL_115;
        goto LABEL_170;
      }
    }
    else
    {
      v140 = *(unsigned __int8 *)(v15 + 5);
      if (v140 != 61)
        goto LABEL_154;
      if (BYTE2(v156) == 1)
        goto LABEL_71;
    }
LABEL_115:
    if ((*(_WORD *)(v126 + 12) & 0x800) == 0)
    {
      v129 = *(_DWORD *)v15;
LABEL_117:
      v130 = *(_QWORD *)(16 * (v129 & 0xFFFFFFFE) + 0x30);
      if (!v130)
        v130 = *(_QWORD *)(v15 + 16);
      goto LABEL_119;
    }
    v129 = *(_DWORD *)v15;
    if (BYTE2(v156) == 3)
      goto LABEL_117;
    v139 = 16 * (v129 & 0xFFFFFFFE);
    if ((*(_WORD *)(v139 + 12) & 0x800) != 0)
    {
      v130 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v139 + 76) + 0xB0))(v15, v123);
    }
    else
    {
      v130 = *(_QWORD *)(v139 + 48);
      if (!v130)
        v130 = *(_QWORD *)(v15 + 16);
    }
    if (*((_DWORD *)v124 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v124, v14, this, a4, a5, a6, a7, a8))
      goto LABEL_71;
LABEL_119:
    if ((v130 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v130 + 5) < 0x17u)
      goto LABEL_71;
    v17 = *(_BYTE *)(v130 + 6);
    v15 = v130;
  }
  if (!v122
    || (v122 & ~*(_DWORD *)(16 * v125 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v125), v124, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v127)|| (varE0[0] = (uint64_t)v121, v128 = JSC::PropertyTable::get(v127, varE0), a6 = v128, (_DWORD)v128 == -1))
  {
    if ((*(_BYTE *)(v15 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v15, v124, (unint64_t)v121, (uint64_t)&v150) & 1) != 0)
    {
      goto LABEL_72;
    }
    goto LABEL_115;
  }
  if ((int)v128 <= 63)
  {
    v131 = v15 + 16;
    v132 = v128 << 32;
  }
  else
  {
    v131 = *(_QWORD *)(v15 + 8) - 8;
    v132 = 0x3F00000000 - (v128 << 32);
  }
  v133 = *(_QWORD *)(v131 + (v132 >> 29));
  if ((v133 & 0xFFFE000000000002) != 0)
    goto LABEL_134;
  v134 = *(unsigned __int8 *)(v133 + 5);
  if (v134 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v15, (uint64_t)v124, (uint64_t)&v150, v133, SHIDWORD(v128), v128);
  }
  else
  {
    if (v134 != 6)
    {
LABEL_134:
      v150 = v133;
      v154 = v15;
      v152 = __PAIR64__(v128, HIDWORD(v128));
      v61 = 7;
      LOWORD(v156) = 257;
      goto LABEL_72;
    }
    v135 = *(_DWORD *)(v126 + 16) & 3;
    v136 = *(_QWORD *)(v133 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v133 & 0xFFFFFFFE)
                                                                             + 0x4C)))
    {
      v138 = *(_QWORD *)(v133 + 24);
      v137 = *(_QWORD *)(v133 + 32);
      v150 = *(_QWORD *)(v133 + 8);
      v151 = v136;
      LODWORD(v152) = HIDWORD(v128);
      v154 = v15;
      BYTE1(v156) = 3;
      if (v135 != 2)
        LOBYTE(v156) = 1;
      HIBYTE(v156) = 1;
      v160 = v138;
      v161 = v137;
    }
    else
    {
      v150 = *(_QWORD *)(v133 + 8);
      v151 = v136;
      LODWORD(v152) = HIDWORD(v128);
      v154 = v15;
      BYTE1(v156) = 3;
      if (v135 != 2)
        LOBYTE(v156) = 1;
    }
  }
LABEL_104:
  v61 = 7;
LABEL_72:
  if (v159)
  {
    v62 = *(_DWORD *)(v158 + 4);
    if (!v62)
    {
      __break(0xC471u);
      JUMPOUT(0x19877CC38);
    }
    *(_DWORD *)(v158 + 4) = v62 - 1;
  }
  return v61;
}

uint64_t operationInByValOptimize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t Error;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  unsigned __int16 *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned __int8 *v106;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  _QWORD *v125;
  uint64_t v126;
  WTF::StringImpl **v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char OwnStaticPropertySlot;
  unsigned int v140;
  int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  int v150;
  JSC::VM *v151;
  uint64_t *v152;
  JSC::VM *v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unsigned __int8 *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  unint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  _DWORD *v183;
  WTF::StringImpl *v184;
  _QWORD *v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  WTF::StringImpl **v188;
  WTF::StringImpl *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  unsigned int v216;
  char v217;
  int v218;
  int v219;
  unsigned int v220;
  char v221;
  int v222;
  int v223;
  _WORD *v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unsigned __int16 *v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _BOOL4 v267;
  _DWORD *v268;
  uint64_t v269;
  unint64_t v270;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BOOL4 v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  unint64_t v324;
  JSC::VMTraps *v325;
  uint64_t v326;
  unint64_t v327;
  _BOOL4 v328;
  uint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unsigned int v332;
  unint64_t v333;
  uint64_t v334;
  unsigned __int8 *v335;
  unsigned int v336;
  _BOOL4 v337;
  int v338;
  unsigned int v339;
  uint64_t v340;
  unsigned __int8 *v341;
  int v342;
  double v343;
  const unsigned __int8 *v344;
  BOOL v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unsigned __int8 *v350;
  unsigned int v351;
  BOOL v352;
  BOOL v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  WTF *v359;
  unint64_t v360;
  WTF *v361;
  JSC::VM *v362;
  JSC::VM *v363;
  JSC::VM *v364;
  JSC::VM *v365;
  JSC::VM *v366;
  JSC::JSGlobalObject *v367;
  WTF::StringImpl **v368;
  uint64_t v369;
  unint64_t v370;
  JSC::VM *v371;
  _BYTE *v372;
  uint64_t v373;
  int v374;
  char v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  char v381;
  unint64_t v382;
  WTF::StringImpl **v383;
  WTF::StringImpl *v384;
  unsigned int *v385;
  _QWORD *v386;
  WTF::StringImpl ***v387;
  unsigned int *v388;
  uint64_t v389;
  uint64_t vars0;

  v10 = (JSC::VM *)a1;
  v389 = *MEMORY[0x1E0C80C00];
  v11 = 0xFFFE000000000002;
  v12 = *(JSC::JSGlobalObject **)(a3 + 56);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v75 = WTF::fastCompactMalloc((WTF *)0x20);
    v76.i64[0] = 0x1100000002;
    *(_QWORD *)v75 = 0x1100000002;
    *(_QWORD *)(v75 + 8) = "is not an Object.";
    *(_DWORD *)(v75 + 16) = 4;
    v384 = (WTF::StringImpl *)v75;
    Error = JSC::createError((unint64_t)v12, (unint64_t)v10, (uint64_t *)&v384, (uint64_t)JSC::invalidParameterInSourceAppender, v77, v78, v79, v80, v76);
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v75, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
    JSC::VM::throwException((JSC::VM *)v13, v12, Error, v83, v84, v85, v86, v87);
    return 0;
  }
  v15 = a4;
  v16 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    v68 = a2;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_93;
  }
  else
  {
    *(_QWORD *)&v17 = a2 - 0x2000000000000;
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9 = (int8x8_t)(a2 - 0x2000000000000);
      v68 = v17;
      if (v17 == (double)v68)
      {
LABEL_93:
        if (!a4)
          goto LABEL_94;
        *(_DWORD *)a4 = *(_DWORD *)a1;
        if ((*(_BYTE *)(a1 + 4) & 0xEu) >= 0xA)
        {
          v89 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v89 - 4) > v68)
          {
LABEL_103:
            if (*(_DWORD *)(v89 - 8) > v68)
              goto LABEL_94;
          }
        }
        else if ((*(_BYTE *)(a1 + 4) & 0xE) != 0)
        {
          v89 = *(_QWORD *)(a1 + 8);
          goto LABEL_103;
        }
        *(_DWORD *)(a4 + 4) |= 2u;
LABEL_94:
        v22 = *(_DWORD *)a1 & 0xFFFFFFFE;
        if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
        {
          *(_WORD *)(a3 + 129) |= 0x10u;
LABEL_97:
          if (JSC::JSObject::hasProperty(v10, v12, v68))
            return 7;
          else
            return 6;
        }
        v60 = *(_QWORD *)(v14 + 16);
        v383 = 0;
        *(_WORD *)(a3 + 129) |= 4u;
        if (*(_BYTE *)(a3 + 124))
        {
          --*(_BYTE *)(a3 + 124);
          goto LABEL_97;
        }
        v105 = *(unsigned __int8 *)(a3 + 125);
        if (v105 != 255)
          *(_BYTE *)(a3 + 125) = ++v105;
        if (xmmword_1ECF4C260 < v105)
        {
          *(_BYTE *)(a3 + 125) = 0;
          v214 = *(unsigned __int8 *)(a3 + 126);
          v215 = BYTE4(xmmword_1ECF4C260) << v214;
          v216 = v215;
          if (v215 == 255)
            LOBYTE(v215) = -2;
          if (v216 >> v214 == BYTE4(xmmword_1ECF4C260))
            v217 = v215;
          else
            v217 = -2;
          *(_BYTE *)(a3 + 124) = v217;
          if (v214 != 255)
            *(_BYTE *)(a3 + 126) = v214 + 1;
          *(_BYTE *)(a3 + 127) = 0;
          goto LABEL_195;
        }
        if (!*(_BYTE *)(a3 + 127))
        {
LABEL_195:
          if (v15)
            JSC::ArrayProfile::computeUpdatedPrediction(v15, v60, 16 * v22, a9);
          JSC::repatchArrayInByVal(v12, (unsigned __int8 *)v60, v10, v16, a3, 1, a7, a8, *(double *)&a9);
          goto LABEL_97;
        }
        --*(_BYTE *)(a3 + 127);
        LOBYTE(v380) = 0;
        LODWORD(v382) = v22;
        v106 = (unsigned __int8 *)(a3 + 128);
        if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
          goto LABEL_207;
        __clrex();
LABEL_130:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v106);
        while (1)
        {
          v108 = *(_DWORD *)(a3 + 96);
          if (!v108)
            break;
          v386 = &v382;
          v387 = &v383;
          v388 = &v380;
          v384 = (WTF::StringImpl *)&v382;
          v385 = &v380;
          if (v108 != -1)
            goto LABEL_136;
LABEL_206:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_207:
          if (__stxr(1u, v106))
            goto LABEL_130;
        }
        if (*(_QWORD *)(a3 + 16))
          v108 = 1;
        else
          v108 = 2;
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 88) = 0;
        *(_DWORD *)(a3 + 96) = v108;
        v386 = &v382;
        v387 = &v383;
        v388 = &v380;
        v384 = (WTF::StringImpl *)&v382;
        v385 = &v380;
LABEL_136:
        v368 = &v384;
        ((void (*)(WTF::StringImpl ***))off_1E3596010[v108])(&v368);
        v113 = __ldxr(v106);
        if (v113 == 1)
        {
          if (!__stlxr(0, v106))
            goto LABEL_192;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v106, 0, v109, v110, v111, v112, a7, a8);
LABEL_192:
        if (!(_BYTE)v380)
          goto LABEL_97;
        if (v60)
        {
          if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v60 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v13 + 192, v60);
            if (!(_BYTE)v380)
              goto LABEL_97;
          }
        }
        goto LABEL_195;
      }
    }
  }
  v18 = (_QWORD *)(v13 + 41952);
  v19 = a2 & 0xFFFE000000000002;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v114 = a2;
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 2)
    {
      v15 = *(_QWORD *)(a2 + 8);
      if ((v15 & 1) == 0)
      {
        if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
        {
          v178 = *(WTF::StringImpl **)(v13 + 64768);
          if (v178 != (WTF::StringImpl *)v15)
          {
            *(_DWORD *)v15 += 2;
            *(_QWORD *)(v13 + 64768) = v15;
            if (v178)
            {
              if (*(_DWORD *)v178 == 2)
              {
                v282 = v14;
                v283 = a2 & 0xFFFE000000000002;
                WTF::StringImpl::~StringImpl(v178, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
                v11 = 0xFFFE000000000002;
                v19 = v283;
                v14 = v282;
              }
              else
              {
                *(_DWORD *)v178 -= 2;
              }
            }
            v179 = *(WTF::StringImpl **)(v16 + 8);
            if (v179)
            {
              v180 = v19;
              v181 = v14;
              if ((*((_BYTE *)v179 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v179 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v179, (const WTF::StringImpl *)0xFFFE000000000002, a4, a5, a6, a7, a8, (WTF *)&v384);
                v179 = v384;
              }
              v14 = v181;
              v19 = v180;
              v11 = 0xFFFE000000000002;
            }
            v182 = *(WTF::StringImpl **)(v13 + 64776);
            *(_QWORD *)(v13 + 64776) = v179;
            if (v182)
            {
              if (*(_DWORD *)v182 == 2)
              {
                v272 = v14;
                v273 = v19;
                WTF::StringImpl::~StringImpl(v182, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
                v11 = 0xFFFE000000000002;
                v19 = v273;
                v14 = v272;
              }
              else
              {
                *(_DWORD *)v182 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v16 + 8) + 16) & 0x10) == 0)
          {
            v183 = *(_DWORD **)(v13 + 64776);
            *v183 += 2;
            __dmb(0xAu);
            v184 = *(WTF::StringImpl **)(v16 + 8);
            *(_QWORD *)(v16 + 8) = v183;
            v384 = v184;
            v185 = (_QWORD *)(v13 + 808);
            v186 = *(unsigned int *)(v13 + 820);
            if ((_DWORD)v186 == *(_DWORD *)(v13 + 816))
            {
              v262 = v13;
              v263 = v14;
              v264 = v19;
              v188 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v185, v186 + 1, (unint64_t)&v384);
              v11 = 0xFFFE000000000002;
              v19 = v264;
              v14 = v263;
              v13 = v262;
              v186 = *(unsigned int *)(v262 + 820);
              v187 = (WTF::StringImpl **)(*(_QWORD *)(v262 + 808) + 8 * v186);
              v184 = *v188;
            }
            else
            {
              v187 = (WTF::StringImpl **)(*v185 + 8 * v186);
              v188 = &v384;
            }
            *v188 = 0;
            *v187 = v184;
            *(_DWORD *)(v13 + 820) = v186 + 1;
            v189 = v384;
            v384 = 0;
            if (v189)
            {
              if (*(_DWORD *)v189 == 2)
              {
                v204 = v14;
                v205 = v19;
                WTF::StringImpl::~StringImpl(v189, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
                v11 = 0xFFFE000000000002;
                v19 = v205;
                v14 = v204;
              }
              else
              {
                *(_DWORD *)v189 -= 2;
              }
            }
          }
          v15 = v18[2853];
        }
LABEL_9:
        v20 = *(_DWORD *)v15 + 2;
LABEL_10:
        *(_DWORD *)v15 = v20;
        goto LABEL_11;
      }
      v146 = a2 & 0xFFFE000000000002;
      v147 = v14;
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a2, v12);
      if (*(_DWORD *)(v13 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, v148, a4, a5, a6, a7, a8))
      {
        v15 = 0;
        v149 = v384;
        v384 = 0;
        v14 = v147;
        v19 = v146;
        v11 = 0xFFFE000000000002;
        if (!v149)
          goto LABEL_11;
LABEL_203:
        v150 = *(_DWORD *)v149 - 2;
        if (*(_DWORD *)v149 != 2)
        {
LABEL_204:
          *(_DWORD *)v149 = v150;
          goto LABEL_11;
        }
        goto LABEL_238;
      }
      v15 = (unint64_t)v384;
      if (v384)
      {
        *(_DWORD *)v384 += 2;
        v384 = 0;
        v149 = (WTF::StringImpl *)v15;
        v14 = v147;
        v19 = v146;
        v11 = 0xFFFE000000000002;
        goto LABEL_203;
      }
      v14 = v147;
      v19 = v146;
LABEL_376:
      v11 = 0xFFFE000000000002;
      goto LABEL_11;
    }
    v346 = v14;
    v347 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v11 = 0xFFFE000000000002;
    v19 = 0;
    v14 = v346;
    v114 = v347;
  }
  v368 = (WTF::StringImpl **)v114;
  if (!*(_DWORD *)(v13 + 80)
    || (v265 = v14,
        v266 = v19,
        v267 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, 0xFFFE000000000002, a4, a5, a6, a7, a8),
        v11 = 0xFFFE000000000002,
        v19 = v266,
        v14 = v265,
        !v267))
  {
    if ((v114 & 0xFFFE000000000002) == 0)
    {
      v115 = *(unsigned __int8 *)(v114 + 5);
      if (v115 == 2)
      {
LABEL_144:
        if (*(_DWORD *)(v13 + 80))
        {
          v269 = v14;
          v270 = v19;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
          v11 = 0xFFFE000000000002;
          v19 = v270;
          v14 = v269;
          if (hasExceptionsAfterHandlingTraps)
          {
            v15 = 0;
            goto LABEL_11;
          }
        }
        v15 = *(_QWORD *)(v114 + 8);
        v116 = *((_QWORD *)v12 + 7);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
          {
            v117 = (unint64_t *)(v116 + 64768);
            v118 = *(WTF::StringImpl **)(v116 + 64768);
            if (v118 != (WTF::StringImpl *)v15)
            {
              *(_DWORD *)v15 += 2;
              *v117 = v15;
              if (v118)
              {
                v298 = v19;
                v299 = v14;
                if (*(_DWORD *)v118 == 2)
                {
                  WTF::StringImpl::~StringImpl(v118, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                  WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
                  v14 = v299;
                  v19 = v298;
                  v11 = 0xFFFE000000000002;
                }
                else
                {
                  *(_DWORD *)v118 -= 2;
                }
              }
              v119 = *(WTF::StringImpl **)(v114 + 8);
              if (v119)
              {
                v120 = v19;
                v121 = v14;
                if ((*((_BYTE *)v119 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v119 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v119, (const WTF::StringImpl *)0xFFFE000000000002, a4, a5, a6, a7, a8, (WTF *)&v384);
                  v119 = v384;
                }
                v14 = v121;
                v19 = v120;
                v11 = 0xFFFE000000000002;
              }
              v122 = *(WTF::StringImpl **)(v116 + 64776);
              *(_QWORD *)(v116 + 64776) = v119;
              if (v122)
              {
                v358 = v19;
                v292 = v14;
                if (*(_DWORD *)v122 == 2)
                {
                  WTF::StringImpl::~StringImpl(v122, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                  WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
                  v14 = v292;
                  v19 = v358;
                  v11 = 0xFFFE000000000002;
                }
                else
                {
                  *(_DWORD *)v122 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v114 + 8) + 16) & 0x10) == 0)
            {
              v123 = *(WTF::StringImpl **)(v116 + 64776);
              *(_DWORD *)v123 += 2;
              v384 = v123;
              __dmb(0xAu);
              v124 = *(WTF::StringImpl **)(v114 + 8);
              *(_QWORD *)(v114 + 8) = v384;
              v384 = v124;
              v125 = (_QWORD *)(v116 + 808);
              v126 = *(unsigned int *)(v116 + 820);
              if ((_DWORD)v126 == *(_DWORD *)(v116 + 816))
              {
                v300 = v13;
                v301 = v14;
                v302 = v19;
                v128 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, v126 + 1, (unint64_t)&v384);
                v11 = 0xFFFE000000000002;
                v19 = v302;
                v14 = v301;
                v13 = v300;
                v126 = *(unsigned int *)(v116 + 820);
                v127 = (WTF::StringImpl **)(*(_QWORD *)(v116 + 808) + 8 * v126);
                v124 = *v128;
              }
              else
              {
                v127 = (WTF::StringImpl **)(*v125 + 8 * v126);
                v128 = &v384;
              }
              *v128 = 0;
              *v127 = v124;
              *(_DWORD *)(v116 + 820) = v126 + 1;
              v129 = v384;
              v384 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2)
                {
                  v243 = v14;
                  v244 = v19;
                  WTF::StringImpl::~StringImpl(v129, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
                  WTF::fastFree(v245, v246, v247, v248, v249, v250, v251, v252);
                  v11 = 0xFFFE000000000002;
                  v19 = v244;
                  v14 = v243;
                }
                else
                {
                  *(_DWORD *)v129 -= 2;
                }
              }
            }
            v15 = v117[1];
          }
          goto LABEL_9;
        }
        v194 = v19;
        v147 = v14;
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v114, v12);
        if (*(_DWORD *)(v116 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v116, a2, v195, a4, a5, a6, a7, a8))
        {
          v15 = 0;
          v149 = v384;
          v384 = 0;
          v14 = v147;
          v19 = v194;
          v11 = 0xFFFE000000000002;
          if (!v149)
            goto LABEL_11;
        }
        else
        {
          v15 = (unint64_t)v384;
          if (!v384)
          {
            v14 = v147;
            v19 = v194;
            goto LABEL_376;
          }
          *(_DWORD *)v384 += 2;
          v384 = 0;
          v149 = (WTF::StringImpl *)v15;
          v14 = v147;
          v19 = v194;
          v11 = 0xFFFE000000000002;
        }
        v150 = *(_DWORD *)v149 - 2;
        if (*(_DWORD *)v149 != 2)
          goto LABEL_204;
        WTF::StringImpl::~StringImpl(v149, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
        WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
        v11 = 0xFFFE000000000002;
        v19 = v194;
LABEL_239:
        v14 = v147;
        goto LABEL_11;
      }
      if (v115 == 4)
      {
        v15 = *(_QWORD *)(v114 + 8);
        v166 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v20 = v166 + 2;
        if (v20)
          goto LABEL_10;
        v149 = (WTF::StringImpl *)v15;
        v147 = v14;
        v146 = v19;
LABEL_238:
        WTF::StringImpl::~StringImpl(v149, (WTF::AtomStringImpl *)a2, 0xFFFE000000000002, a4, a5, a6, a7, a8);
        WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
        v11 = 0xFFFE000000000002;
        v19 = v146;
        goto LABEL_239;
      }
    }
    v175 = v14;
    v176 = v19;
    v177 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v368, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v11 = 0xFFFE000000000002;
    v19 = v176;
    v14 = v175;
    v114 = (unint64_t)v177;
    goto LABEL_144;
  }
  v268 = *(_DWORD **)(*v18 + 8);
  v15 = (unint64_t)v268;
  if (v268)
    *v268 += 2;
  v14 = v265;
  v19 = v266;
LABEL_11:
  if (*(_DWORD *)(v13 + 80))
  {
    v222 = *(_DWORD *)(v13 + 80);
    if ((v222 & 0x27) != 0 && (v222 & 0x20) == 0)
    {
      v323 = v14;
      v324 = v19;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, 0xFFFE000000000002, a4, a5, a6, a7, a8);
      v11 = 0xFFFE000000000002;
      v19 = v324;
      v14 = v323;
    }
    if (*(_QWORD *)(v13 + 16))
    {
      v69 = 0;
      goto LABEL_77;
    }
  }
  v21 = NAN;
  v370 = 0xFFFFFFFF00000000;
  v374 = 0x10000;
  v372 = 0;
  v373 = 0;
  v371 = v10;
  v375 = 0;
  LOBYTE(v376) = 0;
  v377 = 0;
  v378 = 0;
  v379 = 0;
  v22 = v15 >> 4;
  v23 = (char *)v10 + 6;
  v367 = v12;
  if ((*((_BYTE *)v10 + 6) & 8) == 0)
  {
    a2 = *((_QWORD *)v12 + 7);
    v24 = v10;
    while (1)
    {
      v25 = *(_DWORD *)v24 & 0xFFFFFFFE;
      v26 = 16 * v25;
      if (!(_DWORD)v22 || (v22 & ~*(_DWORD *)(16 * v25 + 0x20)) != 0)
        goto LABEL_25;
      v27 = *(_QWORD *)(16 * v25 + 0x58);
      if (!v27)
      {
        v39 = *(_QWORD *)(16 * v25 + 0x40);
        if (!v39 || *(_BYTE *)(v39 + 5) != 1 && *(_DWORD *)(v39 + 80) < 2u)
          goto LABEL_25;
        v359 = (WTF *)a3;
        v362 = v10;
        v40 = v16;
        v41 = v13;
        v42 = v14;
        v43 = v15;
        v44 = v22;
        v45 = v19;
        v46 = a2;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v26, (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        a2 = v46;
        v11 = 0xFFFE000000000002;
        v19 = v45;
        v22 = v44;
        v15 = v43;
        v14 = v42;
        v13 = v41;
        v16 = v40;
        a3 = (uint64_t)v359;
        v10 = v362;
        if (!v27)
          goto LABEL_25;
      }
      if (!*(_DWORD *)(v27 + 24))
        goto LABEL_25;
      v28 = *(_QWORD *)(v27 + 16);
      v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(unsigned int *)(v27 + 8);
      v31 = *(_DWORD *)(v15 + 16);
      if ((v28 & 1) != 0)
      {
        if ((v31 & 0x20) != 0)
          v31 = *(_DWORD *)(v15 + 32);
        v32 = *(_DWORD *)(v27 + 12);
        v33 = (v31 >> 8) & *(_QWORD *)&v32;
        v34 = *(unsigned __int8 *)(v29 + v33);
        if (!*(_BYTE *)(v29 + v33))
          goto LABEL_25;
        v35 = v29 + v30;
        v36 = 1;
        while (1)
        {
          v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
          if (v15 == (v37 & 0xFFFFFFFFFFFFLL))
            break;
          v33 = ((_DWORD)v33 + v36) & v32;
          v34 = *(unsigned __int8 *)(v29 + v33);
          ++v36;
          if (!*(_BYTE *)(v29 + v33))
            goto LABEL_25;
        }
        a6 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
      }
      else
      {
        if ((v31 & 0x20) != 0)
          v31 = *(_DWORD *)(v15 + 32);
        v47 = *(_DWORD *)(v27 + 12);
        v48 = v47 & (v31 >> 8);
        v49 = *(_DWORD *)(v29 + 4 * v48);
        if (!v49)
          goto LABEL_25;
        v50 = v29 + 4 * v30;
        v51 = 1;
        while (1)
        {
          v52 = (v49 - 1);
          if (v15 == *(_QWORD *)(v50 + 16 * v52))
            break;
          v48 = (v48 + v51) & v47;
          v49 = *(_DWORD *)(v29 + 4 * v48);
          ++v51;
          if (!v49)
            goto LABEL_25;
        }
        a6 = *(unsigned int *)(v50 + 16 * v52 + 8) | ((unint64_t)*(unsigned __int8 *)(v50 + 16 * v52 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v72 = (uint64_t)(v24 + 16);
          v73 = a6 << 32;
        }
        else
        {
          v72 = *((_QWORD *)v24 + 1) - 8;
          v73 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v72 + (v73 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v74 = *(unsigned __int8 *)(a4 + 5);
          if (v74 == 5)
          {
            v22 = v13;
            v144 = v14;
            v145 = v19;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v24, a2, (uint64_t)&v368, a4, SHIDWORD(a6), a6);
            v19 = v145;
            v14 = v144;
            v13 = v22;
LABEL_185:
            v60 = 1;
            goto LABEL_87;
          }
          if (v74 == 6)
          {
            v190 = *(_DWORD *)(v26 + 16) & 3;
            v191 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v193 = *(_QWORD *)(a4 + 24);
              v192 = *(_QWORD *)(a4 + 32);
              v368 = *(WTF::StringImpl ***)(a4 + 8);
              v369 = v191;
              LODWORD(v370) = HIDWORD(a6);
              v372 = v24;
              BYTE1(v374) = 3;
              v12 = v367;
              v60 = 1;
              if (v190 != 2)
                LOBYTE(v374) = 1;
              HIBYTE(v374) = 1;
              v378 = v193;
              v379 = v192;
            }
            else
            {
              v368 = *(WTF::StringImpl ***)(a4 + 8);
              v369 = v191;
              LODWORD(v370) = HIDWORD(a6);
              v372 = v24;
              v60 = 1;
              BYTE1(v374) = 3;
              v12 = v367;
              if (v190 != 2)
                LOBYTE(v374) = 1;
            }
            goto LABEL_57;
          }
        }
        v368 = (WTF::StringImpl **)a4;
        v372 = v24;
        v370 = __PAIR64__(a6, HIDWORD(a6));
        v60 = 1;
        LOWORD(v374) = 257;
        goto LABEL_87;
      }
LABEL_25:
      if ((*v23 & 0x20) != 0)
      {
        v130 = v15;
        v131 = v13;
        v132 = v14;
        v133 = v15;
        v134 = v22;
        v135 = v19;
        v363 = v10;
        v136 = a3;
        v137 = v16;
        v138 = a2;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v24, (JSC::VM *)a2, v130, (uint64_t)&v368);
        a2 = v138;
        v16 = v137;
        a3 = v136;
        v10 = v363;
        v11 = 0xFFFE000000000002;
        v19 = v135;
        v22 = v134;
        v15 = v133;
        v14 = v132;
        v13 = v131;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_185;
      }
      v38 = *(_QWORD *)(v26 + 48);
      if (!v38)
        v38 = *((_QWORD *)v24 + 2);
      if ((v38 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v38 + 5) < 0x17u)
      {
        if (v15)
        {
          v53 = *(_DWORD *)(v15 + 16);
          v12 = v367;
          if ((v53 & 0x20) != 0)
            goto LABEL_56;
          v54 = *(_WORD **)(v15 + 8);
          v55 = *(unsigned int *)(v15 + 4);
          if ((v53 & 4) == 0)
          {
            if ((_DWORD)v55)
            {
              v56 = (unsigned __int16)*v54 - 48;
              if (v56 <= 9 && (*v54 != 48 || v55 <= 1))
              {
                v94 = v54 + 1;
                v95 = v55 - 1;
                while (v95)
                {
                  if (v56 > 0x19999999)
                    goto LABEL_52;
                  v96 = *v94 - 48;
                  if (v96 > 9)
                    goto LABEL_52;
                  v57 = 0;
                  LOBYTE(v55) = 0;
                  v58 = 0;
                  v93 = __CFADD__(v96, 10 * v56);
                  v56 = v96 + 10 * v56;
                  ++v94;
                  --v95;
                  if (v93)
                    goto LABEL_54;
                }
                v58 = v56 & 0xFFFFFF00;
                v57 = 0x100000000;
                if (v56 == -1)
                {
                  v57 = 0;
                  LOBYTE(v55) = 0;
                }
                else
                {
                  LOBYTE(v55) = v56;
                }
                if (v56 == -1)
                  v58 = 0;
LABEL_54:
                v59 = v55;
LABEL_55:
                if ((v57 & 0x100000000) == 0)
                {
LABEL_56:
                  v60 = 0;
                  goto LABEL_57;
                }
                v151 = (JSC::VM *)*((_QWORD *)v12 + 7);
                v152 = (uint64_t *)v10;
                v355 = v14;
                v357 = v19;
                v364 = (JSC::VM *)(v58 | v59);
                while (2)
                {
                  v22 = 16 * (*(_DWORD *)v152 & 0xFFFFFFFE);
                  v153 = v151;
                  v154 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(v22 + 0x4C)
                                                                                     + 0x70))(v152, v12);
                  v151 = v153;
                  v155 = v154;
                  if (*((_DWORD *)v153 + 20))
                  {
                    v297 = JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, v11, a4, a5, a6, a7, a8);
                    v151 = v153;
                    if (((v297 | v155) & 1) != 0)
                    {
                      v60 = !v297;
                      goto LABEL_229;
                    }
                  }
                  else if ((v154 & 1) != 0)
                  {
                    v60 = 1;
                    goto LABEL_229;
                  }
                  v14 = v355;
                  v19 = v357;
                  if (BYTE2(v374) == 3)
                  {
                    if (v375)
                    {
LABEL_523:
                      v60 = 0;
LABEL_355:
                      v12 = v367;
LABEL_229:
                      v14 = v355;
                      goto LABEL_230;
                    }
                    v156 = *((unsigned __int8 *)v152 + 5);
                    v12 = v367;
                    v14 = v355;
                    v19 = v357;
                    v151 = v153;
                    if (v156 != 61)
                    {
LABEL_220:
                      if ((v156 - 39) <= 0xA)
                      {
                        v333 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v152, a2, v11, a4, a5, a6, a7, a8);
                        v151 = v153;
                        v14 = v355;
                        v19 = v357;
                        if (v333 <= (unint64_t)v364)
                          goto LABEL_56;
                      }
                    }
                  }
                  else
                  {
                    v156 = *((unsigned __int8 *)v152 + 5);
                    if (v156 != 61)
                      goto LABEL_220;
                    if (BYTE2(v374) == 1)
                      goto LABEL_56;
                  }
                  if ((*(_WORD *)(v22 + 12) & 0x800) == 0 || BYTE2(v374) == 3)
                  {
                    v157 = *(_QWORD *)(16 * (*(_DWORD *)v152 & 0xFFFFFFFE) + 0x30);
                    if (!v157)
                      v157 = v152[2];
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v152 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v157 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v152 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0xB0))(v152, v367);
                    }
                    else
                    {
                      v157 = *(_QWORD *)(16 * (*(_DWORD *)v152 & 0xFFFFFFFE) + 0x30);
                      if (!v157)
                        v157 = v152[2];
                    }
                    if (*((_DWORD *)v153 + 20))
                    {
                      v22 = (uint64_t)v153;
                      v353 = JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, v11, a4, a5, a6, a7, a8);
                      v151 = v153;
                      v12 = v367;
                      v14 = v355;
                      v19 = v357;
                      if (v353)
                        goto LABEL_56;
                    }
                    else
                    {
                      v12 = v367;
                      v14 = v355;
                      v19 = v357;
                      v151 = v153;
                    }
                  }
                  if ((v157 & 0xFFFE000000000002) != 0)
                    goto LABEL_56;
                  v60 = 0;
                  v152 = (uint64_t *)v157;
                  v11 = (uint64_t)v364;
                  if (*(unsigned __int8 *)(v157 + 5) <= 0x16u)
                    goto LABEL_57;
                  continue;
                }
              }
LABEL_52:
              v57 = 0;
              LOBYTE(v55) = 0;
            }
            else
            {
              v57 = 0;
            }
            v58 = 0;
            goto LABEL_54;
          }
          if ((_DWORD)v55)
          {
            v332 = *(unsigned __int8 *)v54 - 48;
            if (v332 <= 9 && (v55 < 2 || *(_BYTE *)v54 != 48))
            {
              v334 = v55 - 1;
              v335 = (unsigned __int8 *)v54 + 1;
              while (v334)
              {
                if (v332 > 0x19999999)
                  goto LABEL_439;
                v336 = *v335 - 48;
                if (v336 > 9)
                  goto LABEL_439;
                v59 = 0;
                LOBYTE(v55) = 0;
                v57 = 0;
                v93 = __CFADD__(v336, 10 * v332);
                v332 = v336 + 10 * v332;
                --v334;
                ++v335;
                if (v93)
                  goto LABEL_441;
              }
              if (v332 == -1)
                v59 = 0;
              else
                v59 = v332 & 0xFFFFFF00;
              if (v332 == -1)
                LOBYTE(v55) = 0;
              else
                LOBYTE(v55) = v332;
              if (v332 == -1)
                v57 = 0;
              else
                v57 = 0x100000000;
              goto LABEL_441;
            }
LABEL_439:
            v59 = 0;
            LOBYTE(v55) = 0;
          }
          else
          {
            v59 = 0;
          }
          v57 = 0;
LABEL_441:
          v58 = v55;
          v12 = v367;
          goto LABEL_55;
        }
        v60 = 0;
LABEL_87:
        v12 = v367;
        goto LABEL_57;
      }
      v23 = (_BYTE *)(v38 + 6);
      v24 = (_BYTE *)v38;
      if ((*(_BYTE *)(v38 + 6) & 8) != 0)
        goto LABEL_285;
    }
  }
  v38 = (uint64_t)v10;
LABEL_285:
  v12 = v367;
  v357 = v19;
  if (!v15)
    goto LABEL_294;
  v223 = *(_DWORD *)(v15 + 16);
  if ((v223 & 0x20) != 0)
    goto LABEL_294;
  v224 = *(_WORD **)(v15 + 8);
  v225 = *(unsigned int *)(v15 + 4);
  if ((v223 & 4) == 0)
  {
    if ((_DWORD)v225)
    {
      v226 = (unsigned __int16)*v224 - 48;
      if (v226 <= 9 && (*v224 != 48 || v225 <= 1))
      {
        v240 = v224 + 1;
        v241 = v225 - 1;
        while (v241)
        {
          if (v226 > 0x19999999)
            goto LABEL_290;
          v242 = *v240 - 48;
          if (v242 > 9)
            goto LABEL_290;
          v227 = 0;
          LOBYTE(v225) = 0;
          v228 = 0;
          v93 = __CFADD__(v242, 10 * v226);
          v226 = v242 + 10 * v226;
          ++v240;
          --v241;
          if (v93)
            goto LABEL_292;
        }
        v228 = v226 & 0xFFFFFF00;
        v227 = 0x100000000;
        if (v226 == -1)
        {
          v227 = 0;
          LOBYTE(v225) = 0;
        }
        else
        {
          LOBYTE(v225) = v226;
        }
        if (v226 == -1)
          v228 = 0;
        goto LABEL_292;
      }
LABEL_290:
      v227 = 0;
      LOBYTE(v225) = 0;
    }
    else
    {
      v227 = 0;
    }
    v228 = 0;
LABEL_292:
    v229 = v225;
    goto LABEL_293;
  }
  if ((_DWORD)v225)
  {
    v348 = *(unsigned __int8 *)v224 - 48;
    if (v348 <= 9 && (v225 < 2 || *(_BYTE *)v224 != 48))
    {
      v349 = v225 - 1;
      v350 = (unsigned __int8 *)v224 + 1;
      while (v349)
      {
        if (v348 > 0x19999999)
          goto LABEL_507;
        v351 = *v350 - 48;
        if (v351 > 9)
          goto LABEL_507;
        v229 = 0;
        LOBYTE(v225) = 0;
        v227 = 0;
        v93 = __CFADD__(v351, 10 * v348);
        v348 = v351 + 10 * v348;
        --v349;
        ++v350;
        if (v93)
          goto LABEL_509;
      }
      if (v348 == -1)
        v229 = 0;
      else
        v229 = v348 & 0xFFFFFF00;
      if (v348 == -1)
        LOBYTE(v225) = 0;
      else
        LOBYTE(v225) = v348;
      if (v348 == -1)
        v227 = 0;
      else
        v227 = 0x100000000;
      goto LABEL_509;
    }
LABEL_507:
    v229 = 0;
    LOBYTE(v225) = 0;
  }
  else
  {
    v229 = 0;
  }
  v227 = 0;
LABEL_509:
  v228 = v225;
  v11 = 0xFFFE000000000002;
LABEL_293:
  if ((v227 & 0x100000000) != 0)
  {
    v22 = *((_QWORD *)v367 + 7);
    v253 = (uint64_t *)v10;
    v355 = v14;
    v360 = v228 | v229;
    v366 = (JSC::VM *)v22;
    while (1)
    {
      v254 = 16 * (*(_DWORD *)v253 & 0xFFFFFFFE);
      v255 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v254 + 0x4C) + 0x70))(v253, v12);
      v256 = v255;
      if (*(_DWORD *)(v22 + 80))
      {
        v328 = JSC::VM::hasExceptionsAfterHandlingTraps(v366, a2, v11, a4, a5, a6, a7, a8);
        if (((v328 | v256) & 1) != 0)
        {
          v60 = !v328;
          goto LABEL_355;
        }
      }
      else if ((v255 & 1) != 0)
      {
        v60 = 1;
        goto LABEL_355;
      }
      if (BYTE2(v374) == 3)
      {
        if (v375)
          goto LABEL_523;
        v257 = *((unsigned __int8 *)v253 + 5);
        if (v257 == 61)
          goto LABEL_348;
      }
      else
      {
        v257 = *((unsigned __int8 *)v253 + 5);
        if (v257 == 61)
        {
          if (BYTE2(v374) == 1)
            goto LABEL_523;
          goto LABEL_348;
        }
      }
      if ((v257 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v253, a2, v11, a4, a5, a6, a7, a8) <= v360)
      {
        goto LABEL_523;
      }
LABEL_348:
      if ((*(_WORD *)(v254 + 12) & 0x800) == 0 || BYTE2(v374) == 3)
      {
        v258 = *(_QWORD *)(16 * (*(_DWORD *)v253 & 0xFFFFFFFE) + 0x30);
        if (!v258)
          v258 = v253[2];
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v253 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v258 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v253 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0xB0))(v253, v367);
        }
        else
        {
          v258 = *(_QWORD *)(16 * (*(_DWORD *)v253 & 0xFFFFFFFE) + 0x30);
          if (!v258)
            v258 = v253[2];
        }
        if (*((_DWORD *)v366 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v366, a2, v11, a4, a5, a6, a7, a8))
          goto LABEL_523;
      }
      if ((v258 & 0xFFFE000000000002) != 0)
        goto LABEL_523;
      v60 = 0;
      v253 = (uint64_t *)v258;
      v22 = (uint64_t)v366;
      v12 = v367;
      v14 = v355;
      v19 = v357;
      v11 = v360;
      if (*(unsigned __int8 *)(v258 + 5) <= 0x16u)
        goto LABEL_57;
    }
  }
LABEL_294:
  v365 = (JSC::VM *)*((_QWORD *)v367 + 7);
  while (1)
  {
    v230 = 16 * (*(_DWORD *)v38 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v38 + 6) & 8) == 0)
      break;
    v356 = v14;
    v321 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl ***))(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C) + 0x68))(v38, v12, v15, &v368);
    v322 = v321;
    if (*((_DWORD *)v365 + 20))
    {
      v337 = JSC::VM::hasExceptionsAfterHandlingTraps(v365, a2, v11, a4, a5, a6, a7, a8);
      if (((v337 | v322) & 1) != 0)
      {
        v60 = !v337;
        goto LABEL_410;
      }
    }
    else if ((v321 & 1) != 0)
    {
      v60 = 1;
      goto LABEL_410;
    }
    if (BYTE2(v374) == 3)
    {
      if (!v375)
      {
        v338 = *(unsigned __int8 *)(v38 + 5);
        if (v338 == 61)
          goto LABEL_495;
LABEL_477:
        if (!v15
          || (v338 - 50) < 0xFFFFFFF5
          || (v339 = *(_DWORD *)(v15 + 16), (v339 & 0x20) != 0)
          || (v340 = *(unsigned int *)(v15 + 4), !(_DWORD)v340))
        {
LABEL_495:
          v12 = v367;
          v14 = v356;
          v19 = v357;
          v11 = 0xFFFE000000000002;
          goto LABEL_301;
        }
        v341 = *(unsigned __int8 **)(v15 + 8);
        if ((v339 & 4) == 0)
        {
          v342 = *(unsigned __int16 *)v341;
          if ((_DWORD)v340 == 1)
            goto LABEL_483;
          if (v342 == 45)
          {
            v342 = *((unsigned __int16 *)v341 + 1);
            goto LABEL_487;
          }
          if ((v342 - 48) >= 0xA && ((_DWORD)v340 != 8 || v342 != 73))
          {
LABEL_498:
            if ((_DWORD)v340 != 3 || v342 != 78)
              goto LABEL_495;
          }
LABEL_491:
          v354 = v354 & 0xFFFFFF0000000000 | v340 | ((unint64_t)((v339 >> 2) & 1) << 32);
          JSC::jsToNumber(v341, v354);
          WTF::numberToString(&v384, v343);
          v345 = WTF::equal(v15, (unint64_t)&v384, v344);
          v12 = v367;
          v14 = v356;
          v19 = v357;
          v11 = 0xFFFE000000000002;
          if (v345)
            goto LABEL_56;
          goto LABEL_301;
        }
        v342 = *v341;
        if ((_DWORD)v340 == 1)
        {
LABEL_483:
          v12 = v367;
          v14 = v356;
          v19 = v357;
          v11 = 0xFFFE000000000002;
          if ((v342 - 48) < 0xA)
            goto LABEL_56;
          goto LABEL_301;
        }
        if (v342 == 45)
        {
          v342 = v341[1];
LABEL_487:
          if ((v342 - 48) < 0xA)
          {
            if ((_DWORD)v340 == 2)
              goto LABEL_542;
            goto LABEL_491;
          }
          if ((_DWORD)v340 != 9)
            goto LABEL_495;
        }
        else
        {
          if ((v342 - 48) < 0xA)
            goto LABEL_491;
          if ((_DWORD)v340 != 8)
            goto LABEL_498;
        }
        if (v342 != 73)
          goto LABEL_495;
        goto LABEL_491;
      }
LABEL_542:
      v60 = 0;
LABEL_410:
      v12 = v367;
      v14 = v356;
      v19 = v357;
      goto LABEL_57;
    }
    v338 = *(unsigned __int8 *)(v38 + 5);
    if (v338 != 61)
      goto LABEL_477;
    v12 = v367;
    v14 = v356;
    v19 = v357;
    v11 = 0xFFFE000000000002;
    if (BYTE2(v374) == 1)
      goto LABEL_56;
LABEL_301:
    if ((*(_WORD *)(v230 + 12) & 0x800) != 0)
    {
      v234 = *(_DWORD *)v38;
      if (BYTE2(v374) != 3)
      {
        v319 = v14;
        v320 = 16 * (v234 & 0xFFFFFFFE);
        if ((*(_WORD *)(v320 + 12) & 0x800) != 0)
        {
          v235 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v320 + 76) + 0xB0))(v38, v12);
        }
        else
        {
          v235 = *(_QWORD *)(v320 + 48);
          if (!v235)
            v235 = *(_QWORD *)(v38 + 16);
        }
        if (*((_DWORD *)v365 + 20))
        {
          v352 = JSC::VM::hasExceptionsAfterHandlingTraps(v365, a2, v11, a4, a5, a6, a7, a8);
          v14 = v319;
          v19 = v357;
          v11 = 0xFFFE000000000002;
          if (v352)
            goto LABEL_56;
        }
        else
        {
          v14 = v319;
          v19 = v357;
          v11 = 0xFFFE000000000002;
        }
        goto LABEL_305;
      }
    }
    else
    {
      v234 = *(_DWORD *)v38;
    }
    v235 = *(_QWORD *)(16 * (v234 & 0xFFFFFFFE) + 0x30);
    if (!v235)
      v235 = *(_QWORD *)(v38 + 16);
LABEL_305:
    if ((v235 & 0xFFFE000000000002) != 0)
      goto LABEL_56;
    v60 = 0;
    v38 = v235;
    if (*(unsigned __int8 *)(v235 + 5) <= 0x16u)
      goto LABEL_57;
  }
  if (!(_DWORD)v22)
    goto LABEL_563;
  if ((v22 & ~*(_DWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_563;
  v231 = v14;
  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE)), v365, 0xFFFE000000000002, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
  v11 = 0xFFFE000000000002;
  v19 = v357;
  v14 = v231;
  if (!v232
    || (v384 = (WTF::StringImpl *)v15,
        v233 = JSC::PropertyTable::get(v232, (uint64_t *)&v384),
        v11 = 0xFFFE000000000002,
        v19 = v357,
        v14 = v231,
        a6 = v233,
        (_DWORD)v233 == -1))
  {
LABEL_563:
    if ((*(_BYTE *)(v38 + 6) & 0x20) != 0)
    {
      v361 = (WTF *)v13;
      v259 = v14;
      v260 = v19;
      v261 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v38, v365, v15, (uint64_t)&v368);
      v11 = 0xFFFE000000000002;
      v19 = v260;
      v14 = v259;
      v13 = (uint64_t)v361;
      if ((v261 & 1) != 0)
        goto LABEL_341;
    }
    goto LABEL_301;
  }
  a5 = HIDWORD(v233);
  if ((int)v233 <= 63)
  {
    v236 = v38 + 16;
    v237 = v233 << 32;
  }
  else
  {
    v236 = *(_QWORD *)(v38 + 8) - 8;
    v237 = 0x3F00000000 - (v233 << 32);
  }
  a4 = *(_QWORD *)(v236 + (v237 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_313;
  v238 = *(unsigned __int8 *)(a4 + 5);
  if (v238 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v38, (uint64_t)v365, (uint64_t)&v368, a4, SHIDWORD(v233), v233);
    v19 = v357;
    v14 = v231;
LABEL_341:
    v60 = 1;
  }
  else
  {
    if (v238 != 6)
    {
LABEL_313:
      v368 = (WTF::StringImpl **)a4;
      v372 = (_BYTE *)v38;
      v370 = __PAIR64__(v233, HIDWORD(v233));
      v60 = 1;
      LOWORD(v374) = 257;
      goto LABEL_57;
    }
    v293 = *(_DWORD *)(v230 + 16) & 3;
    v294 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v296 = *(_QWORD *)(a4 + 24);
      v295 = *(_QWORD *)(a4 + 32);
      v368 = *(WTF::StringImpl ***)(a4 + 8);
      v369 = v294;
      LODWORD(v370) = HIDWORD(v233);
      v372 = (_BYTE *)v38;
      BYTE1(v374) = 3;
      v60 = 1;
      if (v293 != 2)
        LOBYTE(v374) = 1;
      HIBYTE(v374) = 1;
      v378 = v296;
      v379 = v295;
    }
    else
    {
      v368 = *(WTF::StringImpl ***)(a4 + 8);
      v369 = v294;
      LODWORD(v370) = HIDWORD(v233);
      v372 = (_BYTE *)v38;
      v60 = 1;
      BYTE1(v374) = 3;
      if (v293 != 2)
        LOBYTE(v374) = 1;
    }
    v14 = v231;
LABEL_230:
    v19 = v357;
  }
LABEL_57:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_58;
  v239 = *(_DWORD *)(v13 + 80);
  if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
  {
    v325 = (JSC::VMTraps *)(v13 + 64);
    v22 = v13;
    v326 = v14;
    v327 = v19;
    JSC::VMTraps::handleTraps(v325, 7u, v11, a4, a5, a6, a7, a8);
    v19 = v327;
    v14 = v326;
    v13 = v22;
  }
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_58:
    if (v19)
      goto LABEL_71;
    v61 = *(unsigned __int8 *)(v16 + 5);
    if (v61 == 2)
    {
      v62 = *(_QWORD *)(v16 + 8);
      if (!v62 || (v62 & 1) != 0 || (*(_BYTE *)(v62 + 16) & 0x10) == 0)
        goto LABEL_71;
      if (v15)
      {
        v63 = *(_DWORD *)(v15 + 16);
        if ((v63 & 0x20) == 0)
        {
          v64 = *(_BYTE **)(v15 + 8);
          v65 = *(unsigned int *)(v15 + 4);
          if ((v63 & 4) != 0)
          {
            if (!(_DWORD)v65)
              goto LABEL_68;
            v66 = *v64 - 48;
            if (v66 > 9 || v65 >= 2 && *v64 == 48)
              goto LABEL_68;
            v329 = v65 - 1;
            v330 = v64 + 1;
            while (v329)
            {
              if (v66 <= 0x19999999)
              {
                v331 = *v330 - 48;
                if (v331 <= 9)
                {
                  v93 = __CFADD__(v331, 10 * v66);
                  v66 = v331 + 10 * v66;
                  --v329;
                  ++v330;
                  if (!v93)
                    continue;
                }
              }
              goto LABEL_68;
            }
          }
          else
          {
            if (!(_DWORD)v65)
              goto LABEL_68;
            v66 = *(unsigned __int16 *)v64 - 48;
            if (v66 > 9 || *(_WORD *)v64 == 48 && v65 > 1)
              goto LABEL_68;
            v90 = (unsigned __int16 *)(v64 + 2);
            v91 = v65 - 1;
            while (v91)
            {
              if (v66 <= 0x19999999)
              {
                v92 = *v90 - 48;
                if (v92 <= 9)
                {
                  v93 = __CFADD__(v92, 10 * v66);
                  v66 = v92 + 10 * v66;
                  ++v90;
                  --v91;
                  if (!v93)
                    continue;
                }
              }
              goto LABEL_68;
            }
          }
          if (v66 != -1)
          {
LABEL_71:
            if ((_DWORD)v60)
              v69 = 7;
            else
              v69 = 6;
            goto LABEL_74;
          }
        }
      }
    }
    else if (v61 != 4)
    {
      goto LABEL_71;
    }
LABEL_68:
    v67 = *(_DWORD *)v10 & 0xFFFFFFFE;
    if (!v67)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      goto LABEL_71;
    }
    v68 = *(_QWORD *)(v14 + 16);
    v382 = v16;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      goto LABEL_71;
    }
    v140 = *(unsigned __int8 *)(a3 + 125);
    if (v140 != 255)
      *(_BYTE *)(a3 + 125) = ++v140;
    if (xmmword_1ECF4C260 < v140)
    {
      *(_BYTE *)(a3 + 125) = 0;
      v218 = *(unsigned __int8 *)(a3 + 126);
      v219 = BYTE4(xmmword_1ECF4C260) << v218;
      v220 = v219;
      if (v219 == 255)
        LOBYTE(v219) = -2;
      if (v220 >> v218 == BYTE4(xmmword_1ECF4C260))
        v221 = v219;
      else
        v221 = -2;
      *(_BYTE *)(a3 + 124) = v221;
      if (v218 != 255)
        *(_BYTE *)(a3 + 126) = v218 + 1;
      *(_BYTE *)(a3 + 127) = 0;
    }
    else if (*(_BYTE *)(a3 + 127))
    {
      --*(_BYTE *)(a3 + 127);
      v381 = 0;
      v380 = v67;
      v106 = (unsigned __int8 *)(a3 + 128);
      if (__ldaxr((unsigned __int8 *)(a3 + 128)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v106))
      {
LABEL_176:
        v142 = *(_DWORD *)(a3 + 96);
        if (v142)
        {
          v386 = &v380;
          v387 = (WTF::StringImpl ***)&v382;
          v388 = (unsigned int *)&v381;
          v384 = (WTF::StringImpl *)&v380;
          v385 = (unsigned int *)&v381;
          if (v142 == -1)
            goto LABEL_206;
        }
        else
        {
          if (*(_QWORD *)(a3 + 16))
            v142 = 1;
          else
            v142 = 2;
          *(_QWORD *)(a3 + 80) = 0;
          *(_QWORD *)(a3 + 88) = 0;
          *(_DWORD *)(a3 + 96) = v142;
          v386 = &v380;
          v387 = (WTF::StringImpl ***)&v382;
          v388 = (unsigned int *)&v381;
          v384 = (WTF::StringImpl *)&v380;
          v385 = (unsigned int *)&v381;
        }
        v383 = &v384;
        ((void (*)(WTF::StringImpl ***))off_1E3596010[v142])(&v383);
        v143 = __ldxr(v106);
        if (v143 == 1)
        {
          if (!__stlxr(0, v106))
            goto LABEL_211;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v11, a4, a5, a6, a7, a8);
LABEL_211:
        if (!v381)
          goto LABEL_71;
        if (v68)
        {
          if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v68 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v13 + 192, v68);
            if (!v381)
              goto LABEL_71;
          }
        }
        goto LABEL_214;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
      goto LABEL_176;
    }
LABEL_214:
    JSC::repatchInBy((uint64_t *)v12, v68, v10, v16, v60, (uint64_t)&v368, a3, 1, v21);
    goto LABEL_71;
  }
  v69 = 0;
LABEL_74:
  if (v377)
  {
    v70 = *(_DWORD *)(v376 + 4);
    if (!v70)
    {
      __break(0xC471u);
      JUMPOUT(0x19877E150);
    }
    *(_DWORD *)(v376 + 4) = v70 - 1;
  }
LABEL_77:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, v11, a4, a5, a6, a7, a8);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v69;
}

uint64_t operationInByValGaveUp(unint64_t a1, unint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v10;
  uint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a3 + 56);
  *(_QWORD *)(*((_QWORD *)v10 + 7) + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  if (JSC::CommonSlowPaths::opInByVal(v10, a1, a2, a4, a5, a6, a7, a8))
    return 7;
  else
    return 6;
}

uint64_t operationInByValMegamorphic(unint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::PropertyTable *v8;
  JSC::Structure *v10;
  JSC::JSGlobalObject *v12;
  JSC::Structure *v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int OwnStaticPropertySlot;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  JSC::VM *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  char v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  double v112;
  const unsigned __int8 *v113;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v115;
  JSC::VM *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[18];
  JSC::Structure *vars0;

  v8 = (const JSC::PropertyTable *)a4;
  v10 = (JSC::Structure *)this;
  v129[16] = *MEMORY[0x1E0C80C00];
  v12 = *(JSC::JSGlobalObject **)(a3 + 56);
  v13 = vars0;
  v116 = (JSC::VM *)*((_QWORD *)v12 + 7);
  *((_QWORD *)v116 + 5) = vars0;
  *((_DWORD *)v13 + 9) = *(_DWORD *)(a3 + 112);
  if ((a1 & 0xFFFE000000000002) != 0
    || (this & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(a1 + 5) < 0x17u
    || *(_BYTE *)(this + 5) != 2
    || (v14 = *(_QWORD *)(this + 8)) == 0
    || (v14 & 1) != 0
    || (v15 = *(_DWORD *)(v14 + 16), (v15 & 0x10) == 0))
  {
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
    }
    else
    {
      v47 = *(unsigned __int8 *)(a3 + 125);
      if (v47 != 255)
        *(_BYTE *)(a3 + 125) = ++v47;
      if (xmmword_1ECF4C260 < v47)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v69 = *(unsigned __int8 *)(a3 + 126);
        v70 = BYTE4(xmmword_1ECF4C260) << v69;
        v71 = v70;
        if (v70 == 255)
          LOBYTE(v70) = -2;
        if (v71 >> v69 == BYTE4(xmmword_1ECF4C260))
          v72 = v70;
        else
          v72 = -2;
        *(_BYTE *)(a3 + 124) = v72;
        if (v69 != 255)
          *(_BYTE *)(a3 + 126) = v69 + 1;
        *(_BYTE *)(a3 + 127) = 0;
      }
      else if (*(_BYTE *)(a3 + 127))
      {
        --*(_BYTE *)(a3 + 127);
      }
      JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v13 + 2), a3, 1, a4, a5, a6, a7, a8);
    }
    if (JSC::CommonSlowPaths::opInByVal(v12, a1, (unint64_t)v10, v8, a5, a6, a7, a8))
      return 7;
    else
      return 6;
  }
  *(_DWORD *)v14 += 2;
  if (*((_DWORD *)v116 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v116, this, a3, a4, a5, a6, a7, a8))
    {
      v36 = 0;
      goto LABEL_63;
    }
    v15 = *(_DWORD *)(v14 + 16);
  }
  v16 = *(_BYTE **)(v14 + 8);
  v17 = *(unsigned int *)(v14 + 4);
  if ((v15 & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      v101 = *v16 - 48;
      if (v101 <= 9 && (v17 < 2 || *v16 != 48))
      {
        v102 = v17 - 1;
        v103 = v16 + 1;
        while (v102)
        {
          if (v101 <= 0x19999999)
          {
            v104 = *v103 - 48;
            if (v104 <= 9)
            {
              v46 = __CFADD__(v104, 10 * v101);
              v101 = v104 + 10 * v101;
              --v102;
              ++v103;
              if (!v46)
                continue;
            }
          }
          goto LABEL_12;
        }
        if (v101 != -1)
        {
LABEL_93:
          if (a3)
          {
            *(_WORD *)(a3 + 129) |= 4u;
            if (*(_BYTE *)(a3 + 124))
            {
              --*(_BYTE *)(a3 + 124);
            }
            else
            {
              v73 = *(unsigned __int8 *)(a3 + 125);
              if (v73 != 255)
                *(_BYTE *)(a3 + 125) = ++v73;
              if (xmmword_1ECF4C260 < v73)
              {
                *(_BYTE *)(a3 + 125) = 0;
                v76 = *(unsigned __int8 *)(a3 + 126);
                v77 = BYTE4(xmmword_1ECF4C260) << v76;
                v78 = v77;
                if (v77 == 255)
                  LOBYTE(v77) = -2;
                if (v78 >> v76 == BYTE4(xmmword_1ECF4C260))
                  v79 = v77;
                else
                  v79 = -2;
                *(_BYTE *)(a3 + 124) = v79;
                if (v76 != 255)
                  *(_BYTE *)(a3 + 126) = v76 + 1;
                *(_BYTE *)(a3 + 127) = 0;
              }
              else if (*(_BYTE *)(a3 + 127))
              {
                --*(_BYTE *)(a3 + 127);
              }
              JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v13 + 2), a3, 1, a4, a5, a6, a7, a8);
            }
          }
          if (v8)
            *(_DWORD *)v8 = *(_DWORD *)a1 & 0xFFFFFFFE;
          if (JSC::JSObject::hasProperty(a1, (uint64_t)v12, v14, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))v36 = 7;
          else
            v36 = 6;
          goto LABEL_63;
        }
      }
    }
  }
  else if ((_DWORD)v17)
  {
    v18 = *(unsigned __int16 *)v16 - 48;
    if (v18 <= 9 && (*(_WORD *)v16 != 48 || v17 <= 1))
    {
      v43 = (unsigned __int16 *)(v16 + 2);
      v44 = v17 - 1;
      while (v44)
      {
        if (v18 <= 0x19999999)
        {
          v45 = *v43 - 48;
          if (v45 <= 9)
          {
            v46 = __CFADD__(v45, 10 * v18);
            v18 = v45 + 10 * v18;
            ++v43;
            --v44;
            if (!v46)
              continue;
          }
        }
        goto LABEL_12;
      }
      if (v18 != -1)
        goto LABEL_93;
    }
  }
LABEL_12:
  v19 = (_QWORD *)*((_QWORD *)v116 + 5244);
  if (v19[221] == v14 || v19[246] == v14 || v19[270] == v14 || v19[2] == v14)
    goto LABEL_93;
  v115 = v12;
  v119 = 0xFFFFFFFF00000000;
  v20 = (uint64_t *)((char *)v116 + 93080);
  v121 = 0;
  v122 = 0;
  v120 = a1;
  v123 = 0x10000;
  v124 = 0;
  LOBYTE(v125) = 0;
  v21 = v14 >> 4;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v22 = 1;
  v23 = a1;
  do
  {
    if ((*(_BYTE *)(v23 + 6) & 8) != 0)
    {
      v56 = *(unsigned __int8 *)(v23 + 5);
      if (v56 != 26 && v56 != 36 && v23 != *((_QWORD *)v115 + 84))
      {
        v57 = v14 >> 4;
        if (a3)
        {
          *(_WORD *)(a3 + 129) |= 4u;
          if (*(_BYTE *)(a3 + 124))
          {
            --*(_BYTE *)(a3 + 124);
          }
          else
          {
            v87 = *(unsigned __int8 *)(a3 + 125);
            if (v87 != 255)
              *(_BYTE *)(a3 + 125) = ++v87;
            if (xmmword_1ECF4C260 < v87)
            {
              *(_BYTE *)(a3 + 125) = 0;
              v96 = *(unsigned __int8 *)(a3 + 126);
              v97 = BYTE4(xmmword_1ECF4C260) << v96;
              v98 = v97;
              if (v97 == 255)
                LOBYTE(v97) = -2;
              if (v98 >> v96 == BYTE4(xmmword_1ECF4C260))
                v99 = v97;
              else
                v99 = -2;
              *(_BYTE *)(a3 + 124) = v99;
              if (v96 != 255)
                *(_BYTE *)(a3 + 126) = v96 + 1;
              *(_BYTE *)(a3 + 127) = 0;
            }
            else if (*(_BYTE *)(a3 + 127))
            {
              --*(_BYTE *)(a3 + 127);
            }
            JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v13 + 2), a3, 1, a4, a5, a6, a7, a8);
          }
        }
        v58 = (JSC::VM *)*((_QWORD *)v115 + 7);
        v36 = 6;
        while (1)
        {
          v59 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v23 + 6) & 8) != 0)
          {
            v105 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) + 0x68))(v23, v115, v14, &v117);
            v106 = v105;
            if (*((_DWORD *)v58 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v58, this, a3, a4, a5, a6, a7, a8);
              if (((hasExceptionsAfterHandlingTraps | v106) & 1) != 0)
              {
                if (hasExceptionsAfterHandlingTraps)
                  v36 = 6;
                else
                  v36 = 7;
                goto LABEL_60;
              }
            }
            else if ((v105 & 1) != 0)
            {
              goto LABEL_74;
            }
            if (BYTE2(v123) == 3)
            {
              if (v124)
                goto LABEL_59;
              v107 = *(unsigned __int8 *)(v23 + 5);
              if (v107 != 61)
              {
LABEL_244:
                if ((v107 - 50) < 0xFFFFFFF5)
                  goto LABEL_113;
                v108 = *(_DWORD *)(v14 + 16);
                if ((v108 & 0x20) != 0)
                  goto LABEL_113;
                v109 = *(unsigned int *)(v14 + 4);
                if (!(_DWORD)v109)
                  goto LABEL_113;
                v110 = *(unsigned __int8 **)(v14 + 8);
                if ((v108 & 4) == 0)
                {
                  v111 = *(unsigned __int16 *)v110;
                  if ((_DWORD)v109 == 1)
                    goto LABEL_249;
                  if (v111 == 45)
                  {
                    v111 = *((unsigned __int16 *)v110 + 1);
                    goto LABEL_257;
                  }
                  if ((v111 - 48) >= 0xA && ((_DWORD)v109 != 8 || v111 != 73))
                  {
LABEL_268:
                    if ((_DWORD)v109 != 3 || v111 != 78)
                      goto LABEL_113;
                  }
LABEL_261:
                  v22 = v22 & 0xFFFFFF0000000000 | v109 | ((unint64_t)((v108 >> 2) & 1) << 32);
                  JSC::jsToNumber(v110, v22);
                  WTF::numberToString(v129, v112);
                  if (WTF::equal(v14, (unint64_t)v129, v113))
                    goto LABEL_59;
                  goto LABEL_113;
                }
                v111 = *v110;
                if ((_DWORD)v109 == 1)
                {
LABEL_249:
                  if ((v111 - 48) < 0xA)
                    goto LABEL_59;
                  goto LABEL_113;
                }
                if (v111 == 45)
                {
                  v111 = v110[1];
LABEL_257:
                  if ((v111 - 48) < 0xA)
                  {
                    if ((_DWORD)v109 == 2)
                      goto LABEL_59;
                    goto LABEL_261;
                  }
                  if ((_DWORD)v109 != 9)
                    goto LABEL_113;
                }
                else
                {
                  if ((v111 - 48) < 0xA)
                    goto LABEL_261;
                  if ((_DWORD)v109 != 8)
                    goto LABEL_268;
                }
                if (v111 != 73)
                  goto LABEL_113;
                goto LABEL_261;
              }
            }
            else
            {
              v107 = *(unsigned __int8 *)(v23 + 5);
              if (v107 != 61)
                goto LABEL_244;
              if (BYTE2(v123) == 1)
                goto LABEL_59;
            }
          }
          else
          {
            if ((_DWORD)v57)
            {
              if ((v57 & ~*(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)), v58, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                if (v60)
                {
                  v129[0] = v14;
                  v61 = JSC::PropertyTable::get(v60, v129);
                  a6 = v61;
                  if ((_DWORD)v61 != -1)
                  {
                    a5 = HIDWORD(v61);
                    if ((int)v61 <= 63)
                    {
                      v80 = v23 + 16;
                      v81 = v61 << 32;
                    }
                    else
                    {
                      v80 = *(_QWORD *)(v23 + 8) - 8;
                      v81 = 0x3F00000000 - (v61 << 32);
                    }
                    a4 = *(_QWORD *)(v80 + (v81 >> 29));
                    if ((a4 & 0xFFFE000000000002) != 0)
                      goto LABEL_183;
                    v82 = *(unsigned __int8 *)(a4 + 5);
                    if (v82 == 5)
                    {
                      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v23, (uint64_t)v58, (uint64_t)&v117, a4, SHIDWORD(v61), v61);
                    }
                    else
                    {
                      if (v82 != 6)
                      {
LABEL_183:
                        v117 = a4;
                        v121 = v23;
                        v119 = __PAIR64__(v61, HIDWORD(v61));
                        v36 = 7;
                        LOWORD(v123) = 257;
                        goto LABEL_60;
                      }
                      v92 = *(_DWORD *)(v59 + 16) & 3;
                      v93 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v95 = *(_QWORD *)(a4 + 24);
                        v94 = *(_QWORD *)(a4 + 32);
                        v117 = *(_QWORD *)(a4 + 8);
                        v118 = v93;
                        LODWORD(v119) = HIDWORD(v61);
                        v121 = v23;
                        BYTE1(v123) = 3;
                        if (v92 != 2)
                          LOBYTE(v123) = 1;
                        HIBYTE(v123) = 1;
                        v127 = v95;
                        v128 = v94;
                      }
                      else
                      {
                        v117 = *(_QWORD *)(a4 + 8);
                        v118 = v93;
                        LODWORD(v119) = HIDWORD(v61);
                        v121 = v23;
                        BYTE1(v123) = 3;
                        if (v92 != 2)
                          LOBYTE(v123) = 1;
                      }
                    }
                    goto LABEL_74;
                  }
                }
              }
            }
            if ((*(_BYTE *)(v23 + 6) & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, v58, v14, (uint64_t)&v117) & 1) != 0)
            {
              goto LABEL_74;
            }
          }
LABEL_113:
          if ((*(_WORD *)(v59 + 12) & 0x800) == 0)
          {
            v62 = *(_DWORD *)v23;
LABEL_115:
            v63 = *(_QWORD *)(16 * (v62 & 0xFFFFFFFE) + 0x30);
            if (!v63)
              v63 = *(_QWORD *)(v23 + 16);
            goto LABEL_117;
          }
          v62 = *(_DWORD *)v23;
          if (BYTE2(v123) == 3)
            goto LABEL_115;
          v100 = 16 * (v62 & 0xFFFFFFFE);
          if ((*(_WORD *)(v100 + 12) & 0x800) != 0)
          {
            v63 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(v100 + 76)
                                                                                     + 0xB0))(v23, v115);
          }
          else
          {
            v63 = *(_QWORD *)(v100 + 48);
            if (!v63)
              v63 = *(_QWORD *)(v23 + 16);
          }
          if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, this, a3, a4, a5, a6, a7, a8))
            goto LABEL_59;
LABEL_117:
          if ((v63 & 0xFFFE000000000002) == 0)
          {
            v23 = v63;
            if (*(unsigned __int8 *)(v63 + 5) > 0x16u)
              continue;
          }
          goto LABEL_60;
        }
      }
    }
    if (!(_DWORD)v21
      || (v24 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE), (v21 & ~*(_DWORD *)(v24 + 0x20)) != 0)
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)), v116, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v25)|| (v129[0] = v14, v26 = JSC::PropertyTable::get(v25, v129), a6 = v26, (_DWORD)v26 == -1))
    {
      if ((*(_BYTE *)(v23 + 6) & 0x20) != 0)
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, v116, v14, (uint64_t)&v117);
      else
        OwnStaticPropertySlot = 0;
    }
    else
    {
      if ((int)v26 <= 63)
      {
        v27 = v23 + 16;
        v28 = v26 << 32;
      }
      else
      {
        v27 = *(_QWORD *)(v23 + 8) - 8;
        v28 = 0x3F00000000 - (v26 << 32);
      }
      a5 = HIDWORD(v26);
      a4 = *(_QWORD *)(v27 + (v28 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_27;
      v29 = *(unsigned __int8 *)(a4 + 5);
      if (v29 == 5)
      {
        JSC::JSObject::fillGetterPropertySlot((unsigned int *)v23, (uint64_t)v116, (uint64_t)&v117, a4, SHIDWORD(v26), v26);
        OwnStaticPropertySlot = 1;
        goto LABEL_30;
      }
      if (v29 == 6)
      {
        v65 = *(_DWORD *)(v24 + 16) & 3;
        v66 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v68 = *(_QWORD *)(a4 + 24);
          v67 = *(_QWORD *)(a4 + 32);
          v117 = *(_QWORD *)(a4 + 8);
          v118 = v66;
          LODWORD(v119) = HIDWORD(v26);
          v121 = v23;
          BYTE1(v123) = 3;
          OwnStaticPropertySlot = 1;
          if (v65 != 2)
            LOBYTE(v123) = 1;
          HIBYTE(v123) = 1;
          v127 = v68;
          v128 = v67;
        }
        else
        {
          v117 = *(_QWORD *)(a4 + 8);
          v118 = v66;
          LODWORD(v119) = HIDWORD(v26);
          v121 = v23;
          OwnStaticPropertySlot = 1;
          BYTE1(v123) = 3;
          if (v65 != 2)
            LOBYTE(v123) = 1;
        }
      }
      else
      {
LABEL_27:
        v117 = a4;
        v121 = v23;
        v119 = __PAIR64__(v26, HIDWORD(v26));
        OwnStaticPropertySlot = 1;
        LOWORD(v123) = 257;
      }
    }
LABEL_30:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v31 = *(unsigned __int16 *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC), (v31 & 8) != 0))
    {
      v32 = 0;
    }
    else if ((v31 & 0x10) != 0)
    {
      v32 = (v31 >> 5) & 1;
    }
    else
    {
      v32 = 1;
    }
    v33 = v22 & v32;
    if (OwnStaticPropertySlot)
    {
      if (v33 && (!BYTE1(v123) || v123 == 1))
      {
        this = *(unsigned int *)a1;
        if (v121 == a1 || (v64 = *(_DWORD *)((16 * this) | 0x10), (v64 & 3) == 0))
        {
          if ((*v20 & 1) != 0)
            v41 = 0;
          else
            v41 = *v20;
          JSC::MegamorphicCache::initAsHasHit(v41, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v14, a4, a5, a6, a7, a8);
          goto LABEL_74;
        }
        if ((v64 & 0x800000) == 0)
          goto LABEL_74;
      }
      if (a3)
      {
        *(_WORD *)(a3 + 129) |= 4u;
        if (*(_BYTE *)(a3 + 124))
        {
          --*(_BYTE *)(a3 + 124);
        }
        else
        {
          v74 = *(unsigned __int8 *)(a3 + 125);
          if (v74 != 255)
            *(_BYTE *)(a3 + 125) = ++v74;
          if (xmmword_1ECF4C260 < v74)
          {
            *(_BYTE *)(a3 + 125) = 0;
            v83 = *(unsigned __int8 *)(a3 + 126);
            v84 = BYTE4(xmmword_1ECF4C260) << v83;
            v85 = v84;
            if (v84 == 255)
              LOBYTE(v84) = -2;
            if (v85 >> v83 == BYTE4(xmmword_1ECF4C260))
              v86 = v84;
            else
              v86 = -2;
            *(_BYTE *)(a3 + 124) = v86;
            if (v83 != 255)
              *(_BYTE *)(a3 + 126) = v83 + 1;
            *(_BYTE *)(a3 + 127) = 0;
          }
          else if (*(_BYTE *)(a3 + 127))
          {
            --*(_BYTE *)(a3 + 127);
          }
          JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v13 + 2), a3, 1, a4, a5, a6, a7, a8);
        }
      }
LABEL_74:
      v36 = 7;
      goto LABEL_60;
    }
    v34 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v34 == 0)
      v22 = 0;
    else
      v22 = v33;
    if (!v34)
      v34 = *(_QWORD *)(v23 + 16);
    if ((v34 & 0xFFFE000000000002) != 0)
      break;
    v23 = v34;
  }
  while (*(unsigned __int8 *)(v34 + 5) > 0x16u);
  if ((_DWORD)v22)
  {
    this = *(unsigned int *)a1;
    v37 = *(_DWORD *)((16 * this) | 0x10);
    if ((v37 & 3) == 0)
    {
      if ((*v20 & 1) != 0)
        v38 = 0;
      else
        v38 = *v20;
      JSC::MegamorphicCache::initAsHasMiss(v38, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v14, a4, a5, a6, a7, a8);
      goto LABEL_59;
    }
    if ((v37 & 0x800000) == 0)
      goto LABEL_59;
  }
  if (a3)
  {
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
    }
    else
    {
      v75 = *(unsigned __int8 *)(a3 + 125);
      if (v75 != 255)
        *(_BYTE *)(a3 + 125) = ++v75;
      if (xmmword_1ECF4C260 < v75)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v88 = *(unsigned __int8 *)(a3 + 126);
        v89 = BYTE4(xmmword_1ECF4C260) << v88;
        v90 = v89;
        if (v89 == 255)
          LOBYTE(v89) = -2;
        if (v90 >> v88 == BYTE4(xmmword_1ECF4C260))
          v91 = v89;
        else
          v91 = -2;
        *(_BYTE *)(a3 + 124) = v91;
        if (v88 != 255)
          *(_BYTE *)(a3 + 126) = v88 + 1;
        *(_BYTE *)(a3 + 127) = 0;
      }
      else if (*(_BYTE *)(a3 + 127))
      {
        --*(_BYTE *)(a3 + 127);
      }
      JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v13 + 2), a3, 1, a4, a5, a6, a7, a8);
    }
  }
LABEL_59:
  v36 = 6;
LABEL_60:
  if (v126)
  {
    v39 = *(_DWORD *)(v125 + 4);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x19877F52CLL);
    }
    *(_DWORD *)(v125 + 4) = v39 - 1;
  }
LABEL_63:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
  return v36;
}

uint64_t operationInByValMegamorphicGeneric(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int OwnStaticPropertySlot;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int *v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  JSC::VM *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  double v83;
  const unsigned __int8 *v84;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t varE0[29];

  v8 = (unsigned int *)a2;
  varE0[16] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = varE0[28];
  if ((a2 & 0xFFFE000000000002) != 0
    || (a3 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(a2 + 5) < 0x17u
    || *(_BYTE *)(a3 + 5) != 2
    || (v11 = *(_QWORD *)(a3 + 8)) == 0
    || (v11 & 1) != 0
    || (v12 = *(_DWORD *)(v11 + 16), (v12 & 0x10) == 0))
  {
    if (JSC::CommonSlowPaths::opInByVal(a1, a2, a3, 0, a5, a6, a7, a8))
      return 7;
    else
      return 6;
  }
  *(_DWORD *)v11 += 2;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
    {
      v34 = 0;
      goto LABEL_61;
    }
    v12 = *(_DWORD *)(v11 + 16);
  }
  v13 = *(_BYTE **)(v11 + 8);
  v14 = *(unsigned int *)(v11 + 4);
  if ((v12 & 4) != 0)
  {
    if ((_DWORD)v14)
    {
      v72 = *v13 - 48;
      if (v72 <= 9 && (v14 < 2 || *v13 != 48))
      {
        v73 = v14 - 1;
        v74 = v13 + 1;
        while (v73)
        {
          if (v72 <= 0x19999999)
          {
            v75 = *v74 - 48;
            if (v75 <= 9)
            {
              v43 = __CFADD__(v75, 10 * v72);
              v72 = v75 + 10 * v72;
              --v73;
              ++v74;
              if (!v43)
                continue;
            }
          }
          goto LABEL_12;
        }
        if (v72 != -1)
        {
LABEL_85:
          if (JSC::JSObject::hasProperty((unint64_t)v8, (uint64_t)a1, v11, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))v34 = 7;
          else
            v34 = 6;
          goto LABEL_61;
        }
      }
    }
  }
  else if ((_DWORD)v14)
  {
    v15 = *(unsigned __int16 *)v13 - 48;
    if (v15 <= 9 && (*(_WORD *)v13 != 48 || v14 <= 1))
    {
      v40 = (unsigned __int16 *)(v13 + 2);
      v41 = v14 - 1;
      while (v41)
      {
        if (v15 <= 0x19999999)
        {
          v42 = *v40 - 48;
          if (v42 <= 9)
          {
            v43 = __CFADD__(v42, 10 * v15);
            v15 = v42 + 10 * v15;
            ++v40;
            --v41;
            if (!v43)
              continue;
          }
        }
        goto LABEL_12;
      }
      if (v15 != -1)
        goto LABEL_85;
    }
  }
LABEL_12:
  v16 = *(_QWORD **)(v10 + 41952);
  if (v16[221] == v11 || v16[246] == v11 || v16[270] == v11 || v16[2] == v11)
    goto LABEL_85;
  v89 = 0xFFFFFFFF00000000;
  v17 = (uint64_t *)(v10 + 93080);
  v91 = 0;
  v92 = 0;
  v90 = v8;
  v93 = 0x10000;
  v94 = 0;
  LOBYTE(v95) = 0;
  v18 = v11 >> 4;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v19 = 1;
  v20 = v8;
  while (1)
  {
    v21 = *((_BYTE *)v20 + 6);
    if ((v21 & 8) != 0)
    {
      v52 = *((unsigned __int8 *)v20 + 5);
      if (v52 != 26 && v52 != 36 && v20 != *((unsigned int **)a1 + 84))
        break;
    }
    if (!(_DWORD)v18
      || (v22 = 16 * (*v20 & 0xFFFFFFFE), (v18 & ~*(_DWORD *)(v22 + 0x20)) != 0)
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v20 & 0xFFFFFFFE)), (JSC::VM *)v10, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v23)|| (varE0[0] = v11, v24 = JSC::PropertyTable::get(v23, varE0), a6 = v24, (_DWORD)v24 == -1))
    {
      if ((*((_BYTE *)v20 + 6) & 0x20) != 0)
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot(v20, (JSC::VM *)v10, v11, (uint64_t)&v87);
      else
        OwnStaticPropertySlot = 0;
      goto LABEL_30;
    }
    if ((int)v24 <= 63)
    {
      v25 = (uint64_t)(v20 + 4);
      v26 = v24 << 32;
    }
    else
    {
      v25 = *((_QWORD *)v20 + 1) - 8;
      v26 = 0x3F00000000 - (v24 << 32);
    }
    a5 = HIDWORD(v24);
    a4 = *(_QWORD *)(v25 + (v26 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_27;
    v27 = *(unsigned __int8 *)(a4 + 5);
    if (v27 != 5)
    {
      if (v27 == 6)
      {
        v60 = *(_DWORD *)(v22 + 16) & 3;
        v61 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v63 = *(_QWORD *)(a4 + 24);
          v62 = *(_QWORD *)(a4 + 32);
          v87 = *(_QWORD *)(a4 + 8);
          v88 = v61;
          LODWORD(v89) = HIDWORD(v24);
          v91 = v20;
          BYTE1(v93) = 3;
          OwnStaticPropertySlot = 1;
          if (v60 != 2)
            LOBYTE(v93) = 1;
          HIBYTE(v93) = 1;
          v97 = v63;
          v98 = v62;
        }
        else
        {
          v87 = *(_QWORD *)(a4 + 8);
          v88 = v61;
          LODWORD(v89) = HIDWORD(v24);
          v91 = v20;
          OwnStaticPropertySlot = 1;
          BYTE1(v93) = 3;
          if (v60 != 2)
            LOBYTE(v93) = 1;
        }
        goto LABEL_30;
      }
LABEL_27:
      v87 = a4;
      v91 = v20;
      v89 = __PAIR64__(v24, HIDWORD(v24));
      OwnStaticPropertySlot = 1;
      LOWORD(v93) = 257;
      goto LABEL_30;
    }
    JSC::JSObject::fillGetterPropertySlot(v20, v10, (uint64_t)&v87, a4, SHIDWORD(v24), v24);
    OwnStaticPropertySlot = 1;
LABEL_30:
    if ((*(_DWORD *)(16 * (*v20 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v29 = *(unsigned __int16 *)(16 * (*v20 & 0xFFFFFFFE) + 0xC), (v29 & 8) != 0))
    {
      v30 = 0;
    }
    else if ((v29 & 0x10) != 0)
    {
      v30 = (v29 >> 5) & 1;
    }
    else
    {
      v30 = 1;
    }
    v31 = v19 & v30;
    if (OwnStaticPropertySlot)
    {
      if (v31 && (!BYTE1(v93) || v93 == 1))
      {
        a2 = *v8;
        if (v91 == v8 || (*(_BYTE *)((16 * a2) | 0x10) & 3) == 0)
        {
          if ((*v17 & 1) != 0)
            v38 = 0;
          else
            v38 = *v17;
          JSC::MegamorphicCache::initAsHasHit(v38, (WTF::AtomStringImpl *)a2, (WTF::StringImpl *)v11, a4, a5, a6, a7, a8);
        }
      }
      goto LABEL_72;
    }
    v32 = *(unsigned int **)(16 * (*v20 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*v20 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v32 == 0)
      v19 = 0;
    else
      v19 = v31;
    if (!v32)
      v32 = (unsigned int *)*((_QWORD *)v20 + 2);
    if (((unint64_t)v32 & 0xFFFE000000000002) == 0)
    {
      v20 = v32;
      if (*((unsigned __int8 *)v32 + 5) > 0x16u)
        continue;
    }
    if (v19)
    {
      a2 = *v8;
      if ((*(_BYTE *)((16 * a2) | 0x10) & 3) == 0)
      {
        if ((*v17 & 1) != 0)
          v35 = 0;
        else
          v35 = *v17;
        JSC::MegamorphicCache::initAsHasMiss(v35, (WTF::AtomStringImpl *)a2, (WTF::StringImpl *)v11, a4, a5, a6, a7, a8);
      }
    }
LABEL_57:
    v34 = 6;
    goto LABEL_58;
  }
  v53 = (JSC::VM *)*((_QWORD *)a1 + 7);
  while (1)
  {
    v54 = *v20 & 0xFFFFFFFE;
    v55 = 16 * v54;
    if ((v21 & 8) == 0)
      break;
    v76 = (*(uint64_t (**)(unsigned int *, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * v54 + 0x4C) + 0x68))(v20, a1, v11, &v87);
    v77 = v76;
    if (*((_DWORD *)v53 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v53, a2, a3, a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v77) & 1) != 0)
      {
        if (hasExceptionsAfterHandlingTraps)
          v34 = 6;
        else
          v34 = 7;
        goto LABEL_58;
      }
    }
    else if ((v76 & 1) != 0)
    {
      goto LABEL_72;
    }
    if (BYTE2(v93) == 3)
    {
      if (v94)
        goto LABEL_57;
      v78 = *((unsigned __int8 *)v20 + 5);
      if (v78 != 61)
      {
LABEL_157:
        if ((v78 - 50) < 0xFFFFFFF5)
          goto LABEL_99;
        v79 = *(_DWORD *)(v11 + 16);
        if ((v79 & 0x20) != 0)
          goto LABEL_99;
        v80 = *(unsigned int *)(v11 + 4);
        if (!(_DWORD)v80)
          goto LABEL_99;
        v81 = *(unsigned __int8 **)(v11 + 8);
        if ((v79 & 4) == 0)
        {
          v82 = *(unsigned __int16 *)v81;
          if ((_DWORD)v80 == 1)
            goto LABEL_162;
          if (v82 == 45)
          {
            v82 = *((unsigned __int16 *)v81 + 1);
            goto LABEL_170;
          }
          if ((v82 - 48) >= 0xA && ((_DWORD)v80 != 8 || v82 != 73))
          {
LABEL_181:
            if ((_DWORD)v80 != 3 || v82 != 78)
              goto LABEL_99;
          }
LABEL_174:
          v86 = v86 & 0xFFFFFF0000000000 | v80 | ((unint64_t)((v79 >> 2) & 1) << 32);
          JSC::jsToNumber(v81, v86);
          WTF::numberToString(varE0, v83);
          if (WTF::equal(v11, (unint64_t)varE0, v84))
            goto LABEL_57;
          goto LABEL_99;
        }
        v82 = *v81;
        if ((_DWORD)v80 == 1)
        {
LABEL_162:
          if ((v82 - 48) < 0xA)
            goto LABEL_57;
          goto LABEL_99;
        }
        if (v82 == 45)
        {
          v82 = v81[1];
LABEL_170:
          if ((v82 - 48) < 0xA)
          {
            if ((_DWORD)v80 == 2)
              goto LABEL_57;
            goto LABEL_174;
          }
          if ((_DWORD)v80 != 9)
            goto LABEL_99;
        }
        else
        {
          if ((v82 - 48) < 0xA)
            goto LABEL_174;
          if ((_DWORD)v80 != 8)
            goto LABEL_181;
        }
        if (v82 != 73)
          goto LABEL_99;
        goto LABEL_174;
      }
    }
    else
    {
      v78 = *((unsigned __int8 *)v20 + 5);
      if (v78 != 61)
        goto LABEL_157;
      if (BYTE2(v93) == 1)
        goto LABEL_57;
    }
LABEL_99:
    if ((*(_WORD *)(v55 + 12) & 0x800) == 0)
    {
      v58 = *v20;
LABEL_101:
      v59 = *(_QWORD *)(16 * (v58 & 0xFFFFFFFE) + 0x30);
      if (!v59)
        v59 = *((_QWORD *)v20 + 2);
      goto LABEL_103;
    }
    v58 = *v20;
    if (BYTE2(v93) == 3)
      goto LABEL_101;
    v71 = 16 * (v58 & 0xFFFFFFFE);
    if ((*(_WORD *)(v71 + 12) & 0x800) != 0)
    {
      v59 = (*(uint64_t (**)(unsigned int *, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v71 + 76) + 0xB0))(v20, a1);
    }
    else
    {
      v59 = *(_QWORD *)(v71 + 48);
      if (!v59)
        v59 = *((_QWORD *)v20 + 2);
    }
    if (*((_DWORD *)v53 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v53, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_57;
LABEL_103:
    if ((v59 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v59 + 5) < 0x17u)
      goto LABEL_57;
    v21 = *(_BYTE *)(v59 + 6);
    v20 = (unsigned int *)v59;
  }
  if (!(_DWORD)v18
    || (v18 & ~*(_DWORD *)(16 * v54 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v54), v53, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v56)|| (varE0[0] = v11, v57 = JSC::PropertyTable::get(v56, varE0), a6 = v57, (_DWORD)v57 == -1))
  {
    if ((*((_BYTE *)v20 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot(v20, v53, v11, (uint64_t)&v87) & 1) != 0)
    {
      goto LABEL_72;
    }
    goto LABEL_99;
  }
  a5 = HIDWORD(v57);
  if ((int)v57 <= 63)
  {
    v64 = (uint64_t)(v20 + 4);
    v65 = v57 << 32;
  }
  else
  {
    v64 = *((_QWORD *)v20 + 1) - 8;
    v65 = 0x3F00000000 - (v57 << 32);
  }
  a4 = *(_QWORD *)(v64 + (v65 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_126;
  v66 = *(unsigned __int8 *)(a4 + 5);
  if (v66 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot(v20, (uint64_t)v53, (uint64_t)&v87, a4, SHIDWORD(v57), v57);
  }
  else
  {
    if (v66 != 6)
    {
LABEL_126:
      v87 = a4;
      v91 = v20;
      v89 = __PAIR64__(v57, HIDWORD(v57));
      v34 = 7;
      LOWORD(v93) = 257;
      goto LABEL_58;
    }
    v67 = *(_DWORD *)(v55 + 16) & 3;
    v68 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v70 = *(_QWORD *)(a4 + 24);
      v69 = *(_QWORD *)(a4 + 32);
      v87 = *(_QWORD *)(a4 + 8);
      v88 = v68;
      LODWORD(v89) = HIDWORD(v57);
      v91 = v20;
      BYTE1(v93) = 3;
      if (v67 != 2)
        LOBYTE(v93) = 1;
      HIBYTE(v93) = 1;
      v97 = v70;
      v98 = v69;
    }
    else
    {
      v87 = *(_QWORD *)(a4 + 8);
      v88 = v68;
      LODWORD(v89) = HIDWORD(v57);
      v91 = v20;
      BYTE1(v93) = 3;
      if (v67 != 2)
        LOBYTE(v93) = 1;
    }
  }
LABEL_72:
  v34 = 7;
LABEL_58:
  if (v96)
  {
    v36 = *(_DWORD *)(v95 + 4);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x1987800B4);
    }
    *(_DWORD *)(v95 + 4) = v36 - 1;
  }
LABEL_61:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  return v34;
}

uint64_t operationHasPrivateNameOptimize(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  JSC::VM **v10;
  JSC::VM *v11;
  unint64_t v12;
  unsigned __int8 *v15;
  int v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t Error;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v51;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::VM *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl **v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned int v106;
  char v107;
  int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152[2];
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  char v164;
  uint64_t v165;
  unsigned __int8 *v166;
  char *v167;
  unsigned int *v168;
  uint64_t *v169;
  char *v170;
  unsigned __int8 **v171;
  unint64_t vars0;

  v9 = (WTF::StringImpl *)0xFFFE000000000002;
  v10 = *(JSC::VM ***)(a3 + 56);
  v11 = v10[7];
  v12 = vars0;
  *((_QWORD *)v11 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    v23.i64[0] = 0x1100000002;
    *(_QWORD *)v22 = 0x1100000002;
    *(_QWORD *)(v22 + 8) = "is not an Object.";
    *(_DWORD *)(v22 + 16) = 4;
    v152[0] = (WTF::StringImpl *)v22;
    Error = JSC::createError((unint64_t)v10, a1, (uint64_t *)v152, (uint64_t)JSC::invalidParameterInSourceAppender, v24, v25, v26, v27, v23);
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
    JSC::VM::throwException(v11, (JSC::JSGlobalObject *)v10, Error, v30, v31, v32, v33, v34);
    return 0;
  }
  v15 = (unsigned __int8 *)v11 + 41952;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v37 = a2;
    goto LABEL_38;
  }
  if (*(_BYTE *)(a2 + 5) != 2)
  {
    v37 = JSC::JSCell::toPrimitive(a2, v10, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
LABEL_38:
    v166 = (unsigned __int8 *)v37;
    if (*((_DWORD *)v11 + 20))
    {
      v117 = *((_DWORD *)v11 + 20);
      if ((v117 & 0x27) != 0)
        goto LABEL_161;
      goto LABEL_137;
    }
    goto LABEL_39;
  }
  v9 = *(WTF::StringImpl **)(a2 + 8);
  if ((v9 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a2, (JSC::JSGlobalObject *)v10);
    if (*((_DWORD *)v11 + 20))
    {
      v135 = *((_DWORD *)v11 + 20);
      if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v11 + 2))
        goto LABEL_148;
    }
    goto LABEL_75;
  }
  if ((*((_BYTE *)v9 + 16) & 0x10) == 0)
  {
    v77 = (WTF::StringImpl *)*((_QWORD *)v11 + 8096);
    if (v77 != v9)
    {
      *(_DWORD *)v9 += 2;
      *((_QWORD *)v11 + 8096) = v9;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
        {
          WTF::StringImpl::~StringImpl(v77, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)v77 -= 2;
        }
      }
      v78 = *(WTF::StringImpl **)(a2 + 8);
      if (v78)
      {
        if ((*((_BYTE *)v78 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v78 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v78, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v152);
          v78 = v152[0];
        }
      }
      v79 = (WTF::StringImpl *)*((_QWORD *)v11 + 8097);
      *((_QWORD *)v11 + 8097) = v78;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 16) & 0x10) == 0)
    {
      v80 = (_DWORD *)*((_QWORD *)v11 + 8097);
      *v80 += 2;
      __dmb(0xAu);
      v81 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v80;
      v152[0] = v81;
      v82 = (_QWORD *)((char *)v11 + 808);
      v83 = *((unsigned int *)v11 + 205);
      if ((_DWORD)v83 == *((_DWORD *)v11 + 204))
      {
        v85 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)v152);
        v83 = *((unsigned int *)v11 + 205);
        v84 = (WTF::StringImpl **)(*((_QWORD *)v11 + 101) + 8 * v83);
        v81 = *v85;
      }
      else
      {
        v84 = (WTF::StringImpl **)(*v82 + 8 * v83);
        v85 = v152;
      }
      *v85 = 0;
      *v84 = v81;
      *((_DWORD *)v11 + 205) = v83 + 1;
      v86 = v152[0];
      v152[0] = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
        }
        else
        {
          *(_DWORD *)v86 -= 2;
        }
      }
    }
    v9 = (WTF::StringImpl *)*((_QWORD *)v11 + 8097);
  }
LABEL_7:
  v16 = *(_DWORD *)v9 + 2;
LABEL_8:
  *(_DWORD *)v9 = v16;
  while (1)
  {
    if (*((_DWORD *)v11 + 20))
    {
      v108 = *((_DWORD *)v11 + 20);
      if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v11 + 2))
      {
        v36 = 0;
        if (!v9)
          return v36;
        goto LABEL_70;
      }
    }
    v17 = NAN;
    v153 = 0xFFFFFFFF00000000;
    v157 = 0x10000;
    v155 = 0;
    v156 = 0;
    v154 = a1;
    v158 = 0;
    LOBYTE(v159) = 0;
    v160 = 0;
    v161 = 0;
    v162 = 0;
    if (!((unint64_t)v9 >> 4)
      || (((unint64_t)v9 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v10[7], a3, a4, a5, a6, a7, a8), !v18)|| (v166 = (unsigned __int8 *)v9, v19 = JSC::PropertyTable::get(v18, (uint64_t *)&v166), (_DWORD)v19 == -1))
    {
      v37 = 0;
    }
    else
    {
      if ((int)v19 <= 63)
      {
        v20 = a1 + 16;
        v21 = v19 << 32;
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 8) - 8;
        v21 = 0x3F00000000 - (v19 << 32);
      }
      v152[0] = *(WTF::StringImpl **)(v20 + (v21 >> 29));
      v155 = a1;
      v153 = __PAIR64__(v19, HIDWORD(v19));
      LOWORD(v157) = 257;
      v37 = 1;
    }
    v12 = *(_QWORD *)(v12 + 16);
    v46 = *(unsigned __int8 *)(a2 + 5);
    if (v46 == 2)
    {
      v47 = *(_QWORD *)(a2 + 8);
      if (!v47 || (v47 & 1) != 0 || (*(_BYTE *)(v47 + 16) & 0x10) == 0)
      {
LABEL_45:
        __break(0xC471u);
        JUMPOUT(0x19878079CLL);
      }
    }
    else if (v46 != 4)
    {
      goto LABEL_45;
    }
    v48 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v48)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      goto LABEL_63;
    }
    v165 = a2;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      goto LABEL_63;
    }
    v49 = *(unsigned __int8 *)(a3 + 125);
    if (v49 != 255)
      *(_BYTE *)(a3 + 125) = ++v49;
    if (xmmword_1ECF4C260 < v49)
    {
      *(_BYTE *)(a3 + 125) = 0;
      v104 = *(unsigned __int8 *)(a3 + 126);
      v105 = BYTE4(xmmword_1ECF4C260) << v104;
      v106 = v105;
      if (v105 == 255)
        LOBYTE(v105) = -2;
      if (v106 >> v104 == BYTE4(xmmword_1ECF4C260))
        v107 = v105;
      else
        v107 = -2;
      *(_BYTE *)(a3 + 124) = v107;
      if (v104 != 255)
        *(_BYTE *)(a3 + 126) = v104 + 1;
      *(_BYTE *)(a3 + 127) = 0;
      goto LABEL_62;
    }
    if (!*(_BYTE *)(a3 + 127))
      goto LABEL_62;
    --*(_BYTE *)(a3 + 127);
    v164 = 0;
    v163 = v48;
    v15 = (unsigned __int8 *)(a3 + 128);
    if (__ldaxr((unsigned __int8 *)(a3 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_48;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_48:
    v54 = *(_DWORD *)(a3 + 96);
    if (!v54)
      break;
    v168 = &v163;
    v169 = &v165;
    v170 = &v164;
    v166 = (unsigned __int8 *)&v163;
    v167 = &v164;
    if (v54 != -1)
      goto LABEL_54;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_161:
    if ((v117 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_137:
    if (*((_QWORD *)v11 + 2))
    {
      v9 = *(WTF::StringImpl **)(*(_QWORD *)v15 + 8);
      if (v9)
        goto LABEL_7;
    }
    else
    {
LABEL_39:
      if ((v37 & (unint64_t)v9) != 0)
        goto LABEL_79;
      v51 = *(unsigned __int8 *)(v37 + 5);
      if (v51 == 2)
        goto LABEL_80;
      if (v51 != 4)
      {
LABEL_79:
        v37 = (uint64_t)JSC::JSValue::toStringSlowCase(&v166, (uint64_t)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
        if (!*((_DWORD *)v11 + 20))
          goto LABEL_81;
LABEL_80:
        v118 = *((_DWORD *)v11 + 20);
        if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_QWORD *)v11 + 2))
        {
          v9 = 0;
        }
        else
        {
LABEL_81:
          v9 = *(WTF::StringImpl **)(v37 + 8);
          v66 = v10[7];
          if ((v9 & 1) == 0)
          {
            if ((*((_BYTE *)v9 + 16) & 0x10) == 0)
            {
              v67 = (WTF::StringImpl *)*((_QWORD *)v66 + 8096);
              if (v67 != v9)
              {
                *(_DWORD *)v9 += 2;
                *((_QWORD *)v66 + 8096) = v9;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v67, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
                  }
                  else
                  {
                    *(_DWORD *)v67 -= 2;
                  }
                }
                v68 = *(WTF::StringImpl **)(v37 + 8);
                if (v68)
                {
                  if ((*((_BYTE *)v68 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v68 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase((unint64_t)v68, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v152);
                    v68 = v152[0];
                  }
                }
                v69 = (WTF::StringImpl *)*((_QWORD *)v66 + 8097);
                *((_QWORD *)v66 + 8097) = v68;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
                  }
                  else
                  {
                    *(_DWORD *)v69 -= 2;
                  }
                }
              }
              if ((*(_BYTE *)(*(_QWORD *)(v37 + 8) + 16) & 0x10) == 0)
              {
                v70 = (WTF::StringImpl *)*((_QWORD *)v66 + 8097);
                *(_DWORD *)v70 += 2;
                v152[0] = v70;
                __dmb(0xAu);
                v71 = *(WTF::StringImpl **)(v37 + 8);
                *(WTF::StringImpl **)(v37 + 8) = v152[0];
                v152[0] = v71;
                v72 = (_QWORD *)((char *)v66 + 808);
                v73 = *((unsigned int *)v66 + 205);
                if ((_DWORD)v73 == *((_DWORD *)v66 + 204))
                {
                  v75 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)v152);
                  v73 = *((unsigned int *)v66 + 205);
                  v74 = (WTF::StringImpl **)(*((_QWORD *)v66 + 101) + 8 * v73);
                  v71 = *v75;
                }
                else
                {
                  v74 = (WTF::StringImpl **)(*v72 + 8 * v73);
                  v75 = v152;
                }
                *v75 = 0;
                *v74 = v71;
                *((_DWORD *)v66 + 205) = v73 + 1;
                v76 = v152[0];
                v152[0] = 0;
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v76, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
                  }
                  else
                  {
                    *(_DWORD *)v76 -= 2;
                  }
                }
              }
              v9 = (WTF::StringImpl *)*((_QWORD *)v66 + 8097);
            }
            goto LABEL_7;
          }
          JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v37, (JSC::JSGlobalObject *)v10);
          if (!*((_DWORD *)v66 + 20))
            goto LABEL_75;
          v95 = *((_DWORD *)v66 + 20);
          if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_QWORD *)v66 + 2))
          {
LABEL_148:
            v9 = 0;
            v53 = v152[0];
            v152[0] = 0;
            if (v53)
            {
LABEL_77:
              if (*(_DWORD *)v53 == 2)
                goto LABEL_109;
              *(_DWORD *)v53 -= 2;
            }
          }
          else
          {
LABEL_75:
            v9 = v152[0];
            if (v152[0])
            {
              *(_DWORD *)v152[0] += 2;
              v152[0] = 0;
              v53 = v9;
              goto LABEL_77;
            }
          }
        }
      }
      else
      {
        v9 = *(WTF::StringImpl **)(v37 + 8);
        v52 = *(_DWORD *)v9;
        *(_DWORD *)v9 += 4;
        v16 = v52 + 2;
        if (v16)
          goto LABEL_8;
        v53 = v9;
LABEL_109:
        WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
    }
  }
  if (*(_QWORD *)(a3 + 16))
    v54 = 1;
  else
    v54 = 2;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 96) = v54;
  v168 = &v163;
  v169 = &v165;
  v170 = &v164;
  v166 = (unsigned __int8 *)&v163;
  v167 = &v164;
LABEL_54:
  v171 = &v166;
  ((void (*)(unsigned __int8 ***))off_1E3596010[v54])(&v171);
  v55 = __ldxr(v15);
  if (v55 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_59;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_59:
  if (!v164)
    goto LABEL_63;
  if (v12)
  {
    if (*((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v12 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v12);
      if (!v164)
        goto LABEL_63;
    }
  }
LABEL_62:
  JSC::repatchInBy((uint64_t *)v10, v12, (const WTF::StringImpl *)a1, a2, v37, (uint64_t)v152, a3, 2, v17);
LABEL_63:
  if ((_DWORD)v37)
    v36 = 7;
  else
    v36 = 6;
  if (v160)
  {
    v56 = *(_DWORD *)(v159 + 4);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x198780C1CLL);
    }
    *(_DWORD *)(v159 + 4) = v56 - 1;
  }
  if (v9)
  {
LABEL_70:
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v36;
}

uint64_t operationHasPrivateNameGaveUp(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t Error;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  _QWORD *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  _DWORD *v90;
  WTF::StringImpl *v91;
  _QWORD *v92;
  uint64_t v93;
  WTF::StringImpl **v94;
  WTF::StringImpl **v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  WTF::StringImpl *v133;
  uint64_t vars0;

  v9 = *(JSC::VM ***)(a3 + 56);
  v10 = v9[7];
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v19.i64[0] = 0x1100000002;
    *(_QWORD *)v18 = 0x1100000002;
    *(_QWORD *)(v18 + 8) = "is not an Object.";
    *(_DWORD *)(v18 + 16) = 4;
    v133 = (WTF::StringImpl *)v18;
    Error = JSC::createError((unint64_t)v9, a1, (uint64_t *)&v133, (uint64_t)JSC::invalidParameterInSourceAppender, v20, v21, v22, v23, v19);
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
    JSC::VM::throwException(v10, (JSC::JSGlobalObject *)v9, Error, v26, v27, v28, v29, v30);
    return 0;
  }
  v12 = a2;
  v13 = v9[7];
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(a2 + 5) == 2)
    {
      v14 = *(WTF::StringImpl **)(a2 + 8);
      if ((v14 & 1) == 0)
      {
        if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
        {
          v49 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
          if (v49 != v14)
          {
            *(_DWORD *)v14 += 2;
            *((_QWORD *)v13 + 8096) = v14;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
            v50 = *(WTF::StringImpl **)(v12 + 8);
            if (v50)
            {
              if ((*((_BYTE *)v50 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v50 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v50, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v133);
                v50 = v133;
              }
            }
            v51 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
            *((_QWORD *)v13 + 8097) = v50;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
              {
                WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
              }
              else
              {
                *(_DWORD *)v51 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
          {
            v52 = (_DWORD *)*((_QWORD *)v13 + 8097);
            *v52 += 2;
            __dmb(0xAu);
            v53 = *(WTF::StringImpl **)(v12 + 8);
            *(_QWORD *)(v12 + 8) = v52;
            v133 = v53;
            v54 = (_QWORD *)((char *)v13 + 808);
            v55 = *((unsigned int *)v13 + 205);
            if ((_DWORD)v55 == *((_DWORD *)v13 + 204))
            {
              v57 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v133);
              v55 = *((unsigned int *)v13 + 205);
              v56 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v55);
              v53 = *v57;
            }
            else
            {
              v56 = (WTF::StringImpl **)(*v54 + 8 * v55);
              v57 = &v133;
            }
            *v57 = 0;
            *v56 = v53;
            *((_DWORD *)v13 + 205) = v55 + 1;
            v58 = v133;
            v133 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
              {
                WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
              }
              else
              {
                *(_DWORD *)v58 -= 2;
              }
            }
          }
          v14 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
        }
        goto LABEL_7;
      }
LABEL_77:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v9);
      if (!*((_DWORD *)v13 + 20))
        goto LABEL_78;
      v115 = *((_DWORD *)v13 + 20);
      if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v13 + 2))
      {
        v14 = 0;
        v86 = v133;
        v133 = 0;
        if (!v86)
          goto LABEL_9;
      }
      else
      {
LABEL_78:
        v14 = v133;
        if (!v133)
          goto LABEL_9;
        *(_DWORD *)v133 += 2;
        v133 = 0;
        v86 = v14;
      }
      if (*(_DWORD *)v86 != 2)
      {
        *(_DWORD *)v86 -= 2;
        goto LABEL_9;
      }
LABEL_82:
      WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
      goto LABEL_9;
    }
    v12 = JSC::JSCell::toPrimitive(a2, v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
  }
  v132 = (unsigned __int8 *)v12;
  if (!*((_DWORD *)v13 + 20))
    goto LABEL_55;
  v113 = *((_DWORD *)v13 + 20);
  if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v13 + 2))
  {
LABEL_55:
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v84 = *(unsigned __int8 *)(v12 + 5);
      if (v84 == 2)
        goto LABEL_61;
      if (v84 == 4)
      {
        v14 = *(WTF::StringImpl **)(v12 + 8);
        v85 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v15 = v85 + 2;
        if (v15)
          goto LABEL_8;
        v86 = v14;
        goto LABEL_82;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v132, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_61:
    if (*((_DWORD *)v13 + 20))
    {
      v114 = *((_DWORD *)v13 + 20);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v13 + 2))
      {
        v14 = 0;
        goto LABEL_9;
      }
    }
    v14 = *(WTF::StringImpl **)(v12 + 8);
    v13 = v9[7];
    if ((v14 & 1) == 0)
    {
      if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
      {
        v87 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
        if (v87 != v14)
        {
          *(_DWORD *)v14 += 2;
          *((_QWORD *)v13 + 8096) = v14;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
            }
            else
            {
              *(_DWORD *)v87 -= 2;
            }
          }
          v88 = *(WTF::StringImpl **)(v12 + 8);
          if (v88)
          {
            if ((*((_BYTE *)v88 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v88 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v88, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v133);
              v88 = v133;
            }
          }
          v89 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
          *((_QWORD *)v13 + 8097) = v88;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
            {
              WTF::StringImpl::~StringImpl(v89, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
            }
            else
            {
              *(_DWORD *)v89 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
        {
          v90 = (_DWORD *)*((_QWORD *)v13 + 8097);
          *v90 += 2;
          __dmb(0xAu);
          v91 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v90;
          v133 = v91;
          v92 = (_QWORD *)((char *)v13 + 808);
          v93 = *((unsigned int *)v13 + 205);
          if ((_DWORD)v93 == *((_DWORD *)v13 + 204))
          {
            v95 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v133);
            v93 = *((unsigned int *)v13 + 205);
            v94 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v93);
            v91 = *v95;
          }
          else
          {
            v94 = (WTF::StringImpl **)(*v92 + 8 * v93);
            v95 = &v133;
          }
          *v95 = 0;
          *v94 = v91;
          *((_DWORD *)v13 + 205) = v93 + 1;
          v96 = v133;
          v133 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
            {
              WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
            }
            else
            {
              *(_DWORD *)v96 -= 2;
            }
          }
        }
        v14 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
      }
      goto LABEL_7;
    }
    goto LABEL_77;
  }
  v14 = *(WTF::StringImpl **)(*((_QWORD *)v13 + 5244) + 8);
  if (v14)
  {
LABEL_7:
    v15 = *(_DWORD *)v14 + 2;
LABEL_8:
    *(_DWORD *)v14 = v15;
  }
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_111;
LABEL_9:
  v67 = *((_DWORD *)v10 + 20);
  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_QWORD *)v10 + 2))
  {
    v17 = 0;
  }
  else
  {
LABEL_111:
    if (((unint64_t)v14 >> 4)
      && (((unint64_t)v14 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) == 0
      && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v9[7], a3, a4, a5, a6, a7, a8), v16))
    {
      v133 = v14;
      if (JSC::PropertyTable::get(v16, (uint64_t *)&v133) == -1)
        v17 = 6;
      else
        v17 = 7;
    }
    else
    {
      v17 = 6;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v17;
}

uint64_t operationHasPrivateBrandOptimize(const WTF::StringImpl *a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t Error;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int *v67;
  char *v68;
  int *v69;
  uint64_t *v70;
  char *v71;
  int **v72;
  uint64_t vars0;

  v10 = *(uint64_t **)(a3 + 56);
  v11 = v10[7];
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)a1 + 5) > 0x16u)
  {
    v15 = *(_DWORD *)a1 & 0xFFFFFFFE;
    v16 = 16 * v15;
    if ((*(_BYTE *)(16 * v15 + 0x13) & 1) != 0 && (_DWORD)v15)
    {
      v37 = *(_QWORD *)(a2 + 8);
      do
      {
        v38 = *(unsigned int *)(v16 + 104);
        v17 = v37 == 16 * v38;
        if (v37 == 16 * v38)
          break;
        v39 = *(_DWORD *)(v16 + 108) & 0xFFFFFFFE;
        v16 = 16 * v39;
      }
      while ((_DWORD)v39);
    }
    else
    {
      v17 = 0;
    }
    v18 = *(unsigned __int8 **)(v12 + 16);
    v19 = *(unsigned __int8 *)(a2 + 5);
    if (v19 == 2)
    {
      v20 = *(_QWORD *)(a2 + 8);
      if (v20)
        v21 = (*(_QWORD *)(a2 + 8) & 1) == 0;
      else
        v21 = 0;
      if (v21 && (*(_BYTE *)(v20 + 16) & 0x10) != 0)
      {
LABEL_12:
        if (!(_DWORD)v15)
        {
          *(_WORD *)(a3 + 129) |= 0x10u;
          goto LABEL_50;
        }
        v66 = a2;
        *(_WORD *)(a3 + 129) |= 4u;
        if (*(_BYTE *)(a3 + 124))
        {
          --*(_BYTE *)(a3 + 124);
          goto LABEL_50;
        }
        v48 = *(unsigned __int8 *)(a3 + 125);
        if (v48 != 255)
          *(_BYTE *)(a3 + 125) = ++v48;
        if (xmmword_1ECF4C260 < v48)
        {
          *(_BYTE *)(a3 + 125) = 0;
          v57 = *(unsigned __int8 *)(a3 + 126);
          v58 = BYTE4(xmmword_1ECF4C260) << v57;
          v59 = v58;
          if (v58 == 255)
            LOBYTE(v58) = -2;
          if (v59 >> v57 == BYTE4(xmmword_1ECF4C260))
            v60 = v58;
          else
            v60 = -2;
          *(_BYTE *)(a3 + 124) = v60;
          if (v57 != 255)
            *(_BYTE *)(a3 + 126) = v57 + 1;
          *(_BYTE *)(a3 + 127) = 0;
        }
        else if (*(_BYTE *)(a3 + 127))
        {
          --*(_BYTE *)(a3 + 127);
          v65 = 0;
          v64 = v15;
          v49 = (unsigned __int8 *)(a3 + 128);
          if (__ldaxr((unsigned __int8 *)(a3 + 128)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v49))
          {
            goto LABEL_35;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_35:
          v51 = *(_DWORD *)(a3 + 96);
          if (v51)
          {
            v69 = &v64;
            v70 = &v66;
            v71 = &v65;
            v67 = &v64;
            v68 = &v65;
            if (v51 == -1)
            {
              v61 = std::__throw_bad_variant_access[abi:sn180100]();
              return operationHasPrivateBrandGaveUp(v61, v62, v63);
            }
          }
          else
          {
            if (*(_QWORD *)(a3 + 16))
              v51 = 1;
            else
              v51 = 2;
            *(_QWORD *)(a3 + 80) = 0;
            *(_QWORD *)(a3 + 88) = 0;
            *(_DWORD *)(a3 + 96) = v51;
            v69 = &v64;
            v70 = &v66;
            v71 = &v65;
            v67 = &v64;
            v68 = &v65;
          }
          v72 = &v67;
          ((void (*)(int ***))off_1E3596010[v51])(&v72);
          v56 = __ldxr(v49);
          if (v56 == 1)
          {
            if (!__stlxr(0, v49))
              goto LABEL_46;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v52, v53, v54, v55, a8, a9);
LABEL_46:
          if (!v65)
            goto LABEL_50;
          if (v18)
          {
            if (*(_DWORD *)(v11 + 760) >= v18[7])
            {
              JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v18);
              if (!v65)
                goto LABEL_50;
            }
          }
        }
        JSC::repatchHasPrivateBrand(v10, v18, a1, a2, v17, a3, a8, a9, a4);
LABEL_50:
        if (v17)
          return 7;
        else
          return 6;
      }
    }
    else if (v19 == 4)
    {
      goto LABEL_12;
    }
    __break(0xC471u);
    JUMPOUT(0x198781624);
  }
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  v23.i64[0] = 0x1100000002;
  *(_QWORD *)v22 = 0x1100000002;
  *(_QWORD *)(v22 + 8) = "is not an Object.";
  *(_DWORD *)(v22 + 16) = 4;
  v67 = (int *)v22;
  Error = JSC::createError((unint64_t)v10, (unint64_t)a1, (uint64_t *)&v67, (uint64_t)JSC::invalidParameterInSourceAppender, v24, v25, v26, v27, v23);
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v28, v29, v30, v31, v32, v33, v34);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
  JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)v10, Error, v30, v31, v32, v33, v34);
  return 0;
}

uint64_t operationHasPrivateBrandGaveUp(unint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::JSGlobalObject *v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t vars0;

  v4 = *(JSC::JSGlobalObject **)(a3 + 56);
  v5 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v6 = vars0;
  *((_QWORD *)v5 + 5) = vars0;
  *(_DWORD *)(v6 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    v11.i64[0] = 0x1100000002;
    *(_QWORD *)v10 = 0x1100000002;
    *(_QWORD *)(v10 + 8) = "is not an Object.";
    *(_DWORD *)(v10 + 16) = 4;
    v33 = v10;
    v23 = JSC::createError((unint64_t)v4, a1, &v33, (uint64_t)JSC::invalidParameterInSourceAppender, v12, v13, v14, v15, v11);
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
    JSC::VM::throwException(v5, v4, v23, v18, v19, v20, v21, v22);
    return 0;
  }
  else
  {
    v7 = *(_DWORD *)a1 & 0xFFFFFFFE;
    v8 = 16 * v7;
    if ((*(_BYTE *)(16 * v7 + 0x13) & 1) != 0 && (_DWORD)v7)
    {
      result = 6;
      while (*(_QWORD *)(a2 + 8) != 16 * *(unsigned int *)(v8 + 104))
      {
        v24 = *(_DWORD *)(v8 + 108) & 0xFFFFFFFE;
        v8 = 16 * v24;
        if (!(_DWORD)v24)
          return result;
      }
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t operationPutByIdStrictGaveUp(const JSC::PropertyTable *a1, unsigned __int8 *a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  const char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  JSC::VM *v64[2];
  WTF::StringImpl *v65;
  _DWORD *v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a3 + 56);
  v10 = *((_QWORD *)v9 + 7);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v71 = (unint64_t)a2;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 28) & 0x3000;
  v14 = v12 == 0;
  if (v13 != 4096 && v12 != 0)
  {
    v66 = 0;
    v67 = a2;
    v68 = -1;
    a4.n128_u64[0] = 16842753;
    v69 = 16842753;
    v70 = 0;
    if ((v12 & 1) != 0)
    {
LABEL_6:
      v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_7;
    }
    goto LABEL_44;
  }
  if (v13 == 4096)
    v35 = 2;
  else
    v35 = 1;
  v66 = 0;
  v67 = a2;
  v68 = -1;
  LOWORD(v69) = 1;
  BYTE2(v69) = v35;
  HIBYTE(v69) = 1;
  v14 = v12 == 0;
  v70 = 0;
  if (v12)
  {
    if ((v12 & 1) != 0)
      goto LABEL_6;
LABEL_44:
    v16 = *(_QWORD *)(v12 + 8);
    goto LABEL_7;
  }
  v16 = 0;
LABEL_7:
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v71, v9, v16, (unint64_t)a1, (uint64_t)&v66, a7, a8, a9);
    goto LABEL_25;
  }
  v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v17 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _DWORD **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, v9, v16, a1, &v66);
    goto LABEL_25;
  }
  v18 = *((_QWORD *)v9 + 7);
  if (!v16)
    goto LABEL_14;
  v19 = *(_DWORD *)(v16 + 16);
  if ((v19 & 0x20) != 0)
    goto LABEL_14;
  v20 = *(_BYTE **)(v16 + 8);
  v21 = *(unsigned int *)(v16 + 4);
  if ((v19 & 4) != 0)
  {
    if (!(_DWORD)v21)
      goto LABEL_14;
    v22 = *v20 - 48;
    if (v22 > 9 || v21 >= 2 && *v20 == 48)
      goto LABEL_14;
    v61 = v20 + 1;
    v62 = v21 - 1;
    while (v62)
    {
      if (v22 <= 0x19999999)
      {
        v63 = *v61 - 48;
        if (v63 <= 9)
        {
          v32 = __CFADD__(v63, 10 * v22);
          v22 = v63 + 10 * (_DWORD)v22;
          ++v61;
          --v62;
          if (!v32)
            continue;
        }
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (!(_DWORD)v21)
      goto LABEL_14;
    v22 = *(unsigned __int16 *)v20 - 48;
    if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
      goto LABEL_14;
    v29 = (unsigned __int16 *)(v20 + 2);
    v30 = v21 - 1;
    while (v30)
    {
      if (v22 <= 0x19999999)
      {
        v31 = *v29 - 48;
        if (v31 <= 9)
        {
          v32 = __CFADD__(v31, 10 * v22);
          v22 = v31 + 10 * (_DWORD)v22;
          ++v29;
          --v30;
          if (!v32)
            continue;
        }
      }
      goto LABEL_14;
    }
  }
  if ((_DWORD)v22 != -1)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, v9, v22, a1, 1);
    goto LABEL_25;
  }
LABEL_14:
  if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v16)
  {
    v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v23 & 0x10) == 0)
    {
      v24 = a2;
      while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
      {
        v25 = *(unsigned __int8 **)(v17 + 48);
        if (!v25)
          v25 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
        if (v25 == (unsigned __int8 *)2)
        {
          if ((a2[6] & 0x20) == 0 || (v23 & 0x400000) != 0)
          {
            v64[0] = *((JSC::VM **)v9 + 7);
            v33 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v18, v16, (uint64_t)a1, 0, (uint64_t)&v66, a8, a9, a4);
            if (v34 && (v69 & 1) != 0)
              JSC::throwTypeError((unint64_t)v9, v64, (uint64_t)v33, v34);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(a2, (unint64_t)v9, v16, (uint64_t)a1, (uint64_t)&v66, a4, a7, a8, a9);
          }
          goto LABEL_25;
        }
        v17 = 16 * (*(_DWORD *)v25 & 0xFFFFFFFE);
        v24 = v25;
        if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow(a2, (unint64_t)v9, v16, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))&v66, a7, a8, a9, a4);
LABEL_25:
  if (byte_1ECF4C6B7)
  {
    if ((v71 & 0xFFFE000000000002) != 0)
      v36 = 0;
    else
      v36 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C);
    if (v14)
    {
      v37 = 0;
    }
    else if ((v12 & 1) != 0)
    {
      v37 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v37 = *(WTF::StringImpl **)(v12 + 8);
    }
    JSC::ICEvent::ICEvent((uint64_t)v64, (uint64_t **)v10, (const WTF::StringImpl *)0x13, v36, v37, v71 == (_QWORD)v66, v26, v27);
    JSC::ICEvent::log((JSC::ICEvent *)v64, v38, v39, v40, v41, v42, v43, v44);
    v52 = v65;
    v65 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  return *(_QWORD *)(v10 + 16);
}

uint64_t operationPutByIdSloppyGaveUp(const JSC::PropertyTable *a1, unsigned __int8 *a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  const char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  JSC::VM *v64[2];
  WTF::StringImpl *v65;
  _DWORD *v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a3 + 56);
  v10 = *((_QWORD *)v9 + 7);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v71 = (unint64_t)a2;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 28) & 0x3000;
  v14 = v12 == 0;
  if (v13 != 4096 && v12 != 0)
  {
    v66 = 0;
    v67 = a2;
    v68 = -1;
    a4.n128_u64[0] = 16842752;
    v69 = 16842752;
    v70 = 0;
    if ((v12 & 1) != 0)
    {
LABEL_6:
      v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_7;
    }
    goto LABEL_44;
  }
  if (v13 == 4096)
    v35 = 2;
  else
    v35 = 1;
  v66 = 0;
  v67 = a2;
  v68 = -1;
  LOWORD(v69) = 0;
  BYTE2(v69) = v35;
  HIBYTE(v69) = 1;
  v14 = v12 == 0;
  v70 = 0;
  if (v12)
  {
    if ((v12 & 1) != 0)
      goto LABEL_6;
LABEL_44:
    v16 = *(_QWORD *)(v12 + 8);
    goto LABEL_7;
  }
  v16 = 0;
LABEL_7:
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v71, v9, v16, (unint64_t)a1, (uint64_t)&v66, a7, a8, a9);
    goto LABEL_25;
  }
  v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v17 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _DWORD **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, v9, v16, a1, &v66);
    goto LABEL_25;
  }
  v18 = *((_QWORD *)v9 + 7);
  if (!v16)
    goto LABEL_14;
  v19 = *(_DWORD *)(v16 + 16);
  if ((v19 & 0x20) != 0)
    goto LABEL_14;
  v20 = *(_BYTE **)(v16 + 8);
  v21 = *(unsigned int *)(v16 + 4);
  if ((v19 & 4) != 0)
  {
    if (!(_DWORD)v21)
      goto LABEL_14;
    v22 = *v20 - 48;
    if (v22 > 9 || v21 >= 2 && *v20 == 48)
      goto LABEL_14;
    v61 = v20 + 1;
    v62 = v21 - 1;
    while (v62)
    {
      if (v22 <= 0x19999999)
      {
        v63 = *v61 - 48;
        if (v63 <= 9)
        {
          v32 = __CFADD__(v63, 10 * v22);
          v22 = v63 + 10 * (_DWORD)v22;
          ++v61;
          --v62;
          if (!v32)
            continue;
        }
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (!(_DWORD)v21)
      goto LABEL_14;
    v22 = *(unsigned __int16 *)v20 - 48;
    if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
      goto LABEL_14;
    v29 = (unsigned __int16 *)(v20 + 2);
    v30 = v21 - 1;
    while (v30)
    {
      if (v22 <= 0x19999999)
      {
        v31 = *v29 - 48;
        if (v31 <= 9)
        {
          v32 = __CFADD__(v31, 10 * v22);
          v22 = v31 + 10 * (_DWORD)v22;
          ++v29;
          --v30;
          if (!v32)
            continue;
        }
      }
      goto LABEL_14;
    }
  }
  if ((_DWORD)v22 != -1)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, v9, v22, a1, 0);
    goto LABEL_25;
  }
LABEL_14:
  if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v16)
  {
    v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v23 & 0x10) == 0)
    {
      v24 = a2;
      while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
      {
        v25 = *(unsigned __int8 **)(v17 + 48);
        if (!v25)
          v25 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
        if (v25 == (unsigned __int8 *)2)
        {
          if ((a2[6] & 0x20) == 0 || (v23 & 0x400000) != 0)
          {
            v64[0] = *((JSC::VM **)v9 + 7);
            v33 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v18, v16, (uint64_t)a1, 0, (uint64_t)&v66, a8, a9, a4);
            if (v34 && (v69 & 1) != 0)
              JSC::throwTypeError((unint64_t)v9, v64, (uint64_t)v33, v34);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(a2, (unint64_t)v9, v16, (uint64_t)a1, (uint64_t)&v66, a4, a7, a8, a9);
          }
          goto LABEL_25;
        }
        v17 = 16 * (*(_DWORD *)v25 & 0xFFFFFFFE);
        v24 = v25;
        if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow(a2, (unint64_t)v9, v16, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))&v66, a7, a8, a9, a4);
LABEL_25:
  if (byte_1ECF4C6B7)
  {
    if ((v71 & 0xFFFE000000000002) != 0)
      v36 = 0;
    else
      v36 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C);
    if (v14)
    {
      v37 = 0;
    }
    else if ((v12 & 1) != 0)
    {
      v37 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v37 = *(WTF::StringImpl **)(v12 + 8);
    }
    JSC::ICEvent::ICEvent((uint64_t)v64, (uint64_t **)v10, (const WTF::StringImpl *)0x14, v36, v37, v71 == (_QWORD)v66, v26, v27);
    JSC::ICEvent::log((JSC::ICEvent *)v64, v38, v39, v40, v41, v42, v43, v44);
    v52 = v65;
    v65 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  return *(_QWORD *)(v10 + 16);
}

uint64_t operationPutByIdStrictMegamorphic(const JSC::PropertyTable *a1, unsigned __int8 *a2, JSC::StructureStubInfo *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  int v18;
  WTF::AtomStringImpl *v19;
  JSC::Structure *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  unsigned int v51;
  JSC::CodeBlock *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  char v69;
  int v70;
  int v71;
  unsigned int v72;
  char v73;
  int v74;
  int v75;
  unsigned int v76;
  char v77;
  _QWORD v78[2];
  int v79;
  __int16 v80;
  char v81;
  char v82;
  uint64_t v83;
  unsigned __int8 *v84;
  JSC::VM *v85;
  uint64_t vars0;

  v12 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *((_DWORD *)this + 28);
  v15 = *((_QWORD *)this + 2);
  v84 = a2;
  if (v15)
  {
    if ((v15 & 1) != 0)
      v16 = (WTF::StringImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    else
      v16 = *(WTF::StringImpl **)(v15 + 8);
  }
  else
  {
    v16 = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v17 = 2;
  else
    v17 = 1;
  v78[0] = 0;
  v78[1] = a2;
  v79 = -1;
  v80 = 1;
  v81 = v17;
  v82 = 1;
  v83 = 0;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || a2[5] <= 0x16u)
  {
    v49 = *(_WORD *)((char *)this + 129);
    *(_WORD *)((char *)this + 129) = v49 | 4;
    if (*((_BYTE *)this + 124))
    {
      --*((_BYTE *)this + 124);
    }
    else
    {
      v51 = *((unsigned __int8 *)this + 125);
      if (v51 != 255)
        *((_BYTE *)this + 125) = ++v51;
      if (xmmword_1ECF4C260 < v51)
      {
        *((_BYTE *)this + 125) = 0;
        v60 = *((unsigned __int8 *)this + 126);
        v61 = BYTE4(xmmword_1ECF4C260) << v60;
        v62 = v61;
        if (v61 == 255)
          LOBYTE(v61) = -2;
        if (v62 >> v60 == BYTE4(xmmword_1ECF4C260))
          v63 = v61;
        else
          v63 = -2;
        *((_BYTE *)this + 124) = v63;
        if (v60 != 255)
          *((_BYTE *)this + 126) = v60 + 1;
        *((_BYTE *)this + 127) = 0;
      }
      else if (*((_BYTE *)this + 127))
      {
        --*((_BYTE *)this + 127);
      }
      v52 = *(JSC::CodeBlock **)(v14 + 16);
      if ((v49 & 0x200) != 0)
        *((_QWORD *)this + 6) = operationPutByIdStrictOptimize;
      else
        JSC::ftlThunkAwareRepatchCall(*(_QWORD *)(v14 + 16), *((_QWORD *)this + 6), (int *)operationPutByIdStrictOptimize, a4, a5, a6, a7, a8);
      JSC::StructureStubInfo::resetStubAsJumpInAccess(this, v52, (uint64_t)this, a4, a5, a6, a7, a8);
      if ((*(_WORD *)((_BYTE *)this + 129) & 0x200) != 0)
        *((_QWORD *)this + 6) = operationPutByIdStrictGaveUp;
      else
        JSC::ftlThunkAwareRepatchCall((uint64_t)v52, *((_QWORD *)this + 6), (int *)operationPutByIdStrictGaveUp, v53, v54, a6, a7, a8);
    }
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v84, v12, (uint64_t)v16, (unint64_t)a1, (uint64_t)v78, a6, a7, a8);
    else
      (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, WTF::StringImpl *, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, v12, v16, a1, v78);
  }
  else
  {
    v18 = *(_DWORD *)a2;
    v19 = (WTF::AtomStringImpl *)(*(_DWORD *)a2 & 0xFFFFFFFE);
    v20 = (JSC::Structure *)(16 * (_QWORD)v19);
    if ((*(_WORD *)(16 * (_QWORD)v19 + 0xC) & 0x400) != 0)
    {
      *(_WORD *)((char *)this + 129) |= 4u;
      if (*((_BYTE *)this + 124))
      {
        --*((_BYTE *)this + 124);
      }
      else
      {
        v65 = *((unsigned __int8 *)this + 125);
        if (v65 != 255)
          *((_BYTE *)this + 125) = ++v65;
        if (xmmword_1ECF4C260 < v65)
        {
          *((_BYTE *)this + 125) = 0;
          v74 = *((unsigned __int8 *)this + 126);
          v75 = BYTE4(xmmword_1ECF4C260) << v74;
          v76 = v75;
          if (v75 == 255)
            LOBYTE(v75) = -2;
          if (v76 >> v74 == BYTE4(xmmword_1ECF4C260))
            v77 = v75;
          else
            v77 = -2;
          *((_BYTE *)this + 124) = v77;
          if (v74 != 255)
            *((_BYTE *)this + 126) = v74 + 1;
          *((_BYTE *)this + 127) = 0;
        }
        else if (*((_BYTE *)this + 127))
        {
          --*((_BYTE *)this + 127);
        }
        JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), (uint64_t)this, 0, a4, a5, a6, a7, a8);
      }
      JSC::JSValue::put((JSC::JSValue *)&v84, v12, (uint64_t)v16, (unint64_t)a1, (uint64_t)v78, a6, a7, a8);
    }
    else if ((*(_BYTE *)(16 * (v18 & 0xFFFFFFFE) + 0x10) & 0x10) != 0)
    {
LABEL_19:
      *(_WORD *)((char *)this + 129) |= 4u;
      if (*((_BYTE *)this + 124))
      {
        --*((_BYTE *)this + 124);
      }
      else
      {
        v59 = *((unsigned __int8 *)this + 125);
        if (v59 != 255)
          *((_BYTE *)this + 125) = ++v59;
        if (xmmword_1ECF4C260 < v59)
        {
          *((_BYTE *)this + 125) = 0;
          v66 = *((unsigned __int8 *)this + 126);
          v67 = BYTE4(xmmword_1ECF4C260) << v66;
          v68 = v67;
          if (v67 == 255)
            LOBYTE(v67) = -2;
          if (v68 >> v66 == BYTE4(xmmword_1ECF4C260))
            v69 = v67;
          else
            v69 = -2;
          *((_BYTE *)this + 124) = v69;
          if (v66 != 255)
            *((_BYTE *)this + 126) = v66 + 1;
          *((_BYTE *)this + 127) = 0;
        }
        else if (*((_BYTE *)this + 127))
        {
          --*((_BYTE *)this + 127);
        }
        JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), (uint64_t)this, 0, a4, a5, a6, a7, a8);
      }
LABEL_21:
      JSC::JSObject::putInlineSlow(a2, (unint64_t)v12, (unint64_t)v16, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v78, a6, a7, a8, a9);
    }
    else
    {
      v21 = 16 * (v18 & 0xFFFFFFFE);
      v22 = a2;
      while (1)
      {
        if ((*(_WORD *)(v21 + 12) & 0xC00) != 0 || !*(_QWORD *)(v21 + 48))
        {
LABEL_18:
          if (!this)
            goto LABEL_21;
          goto LABEL_19;
        }
        v23 = *(unsigned __int8 **)(16 * (v18 & 0xFFFFFFFE) + 0x30);
        if (!v23)
          v23 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
        if (v23 == (unsigned __int8 *)2)
          break;
        v18 = *(_DWORD *)v23;
        v21 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
        v22 = v23;
        if ((*(_BYTE *)(v21 + 0x10) & 0x10) != 0)
          goto LABEL_18;
      }
      v85 = (JSC::VM *)v13;
      v24 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v13, (unint64_t)v16, (uint64_t)a1, 0, (uint64_t)v78, a7, a8, a9);
      if (v25 && (v80 & 1) != 0)
        JSC::throwTypeError((unint64_t)v12, &v85, (uint64_t)v24, v25);
      if (!*(_DWORD *)(v13 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v25, v26, v27, v28, v29, v30, v31))
      {
        if (v82 == 1 && HIBYTE(v80) - 1 <= 1)
        {
          v32 = *(_DWORD *)(16 * (_QWORD)v19 + 0x10);
          if ((v32 & 3) != 2)
          {
            v33 = *(_WORD *)(16 * (_QWORD)v19 + 0xC);
            if ((v33 & 8) == 0 && ((v33 & 0x10) == 0 || (v33 & 0x20) != 0))
            {
              v34 = *(_DWORD *)a2 & 0xFFFFFFFE;
              if (HIBYTE(v80) == 1)
              {
                if (v20 == (JSC::Structure *)(16 * v34) && v79 < 0x10000)
                {
                  JSC::Structure::firePropertyReplacementWatchpointSet(v20, (JSC::VM *)v13, (JSC::Structure *)v79, "Did cache property replacement", v28, v29, v30, v31);
                  if ((*(_QWORD *)(v13 + 93080) & 1) != 0)
                    v48 = 0;
                  else
                    v48 = *(_QWORD *)(v13 + 93080);
                  JSC::MegamorphicCache::initAsReplace(v48, v19, v16, (unsigned __int16)v79, v44, v45, v46, v47);
                }
                return *(_QWORD *)(v13 + 16);
              }
              if ((v32 & 3) != 0 || (*(_BYTE *)(16 * v34 + 0x10) & 3) != 0)
                return *(_QWORD *)(v13 + 16);
              if ((v32 & 0x80000) == 0)
              {
                v35 = *(_QWORD *)(16 * v34 + 0x40);
                if (v35)
                {
                  v36 = *(_QWORD *)(16 * v34 + 0x40);
                  if (*(_BYTE *)(v35 + 5) != 1)
                  {
                    v50 = *(_DWORD *)(v35 + 80);
                    if (v50)
                      v36 = 16 * (v50 & 0xFFFFFFFE);
                    else
                      v36 = 0;
                  }
                }
                else
                {
                  v36 = 0;
                }
                if ((JSC::Structure *)v36 == v20)
                {
                  v37 = *(_WORD *)(16 * v34 + 0xC);
                  if ((v37 & 8) == 0 && ((v37 & 0x10) == 0 || (v37 & 0x20) != 0))
                  {
                    v38 = *(unsigned __int16 *)(16 * v34 + 0x18);
                    if (v38 == 65534)
                      goto LABEL_42;
                    if (v38 == 0xFFFF)
                      v38 = *(_DWORD *)(v35 + 84);
                    if (v38 < 64)
                    {
LABEL_42:
                      v39 = 0;
                    }
                    else if ((v38 - 63) >= 5)
                    {
                      v55 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
                      v56 = v55 | (v55 >> 4) | ((v55 | (v55 >> 4)) >> 8);
                      v39 = (v56 | HIWORD(v56)) + 1;
                    }
                    else
                    {
                      v39 = 4;
                    }
                    v40 = *(unsigned __int16 *)(16 * (_QWORD)v19 + 0x18);
                    if (v40 == 65534)
                      goto LABEL_47;
                    if (v40 == 0xFFFF)
                      v40 = *(_DWORD *)(*(_QWORD *)(16 * (_QWORD)v19 + 0x40) + 84);
                    if (v40 < 64)
                    {
LABEL_47:
                      v41 = 0;
                    }
                    else if ((v40 - 63) >= 5)
                    {
                      v57 = (v40 - 64) | ((v40 - 64) >> 1) | (((v40 - 64) | ((v40 - 64) >> 1)) >> 2);
                      v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
                      v41 = (v58 | HIWORD(v58)) + 1;
                    }
                    else
                    {
                      v41 = 4;
                    }
                    if (v79 < 0x10000)
                    {
                      if ((*(_QWORD *)(v13 + 93080) & 1) != 0)
                        v42 = 0;
                      else
                        v42 = *(_QWORD *)(v13 + 93080);
                      JSC::MegamorphicCache::initAsTransition(v42, v19, v34, v16, (unsigned __int16)v79, v39 != v41, v30, v31);
                    }
                    return *(_QWORD *)(v13 + 16);
                  }
                }
              }
            }
          }
        }
        if (this)
        {
          *(_WORD *)((char *)this + 129) |= 4u;
          if (*((_BYTE *)this + 124))
          {
            --*((_BYTE *)this + 124);
          }
          else
          {
            v64 = *((unsigned __int8 *)this + 125);
            if (v64 != 255)
              *((_BYTE *)this + 125) = ++v64;
            if (xmmword_1ECF4C260 < v64)
            {
              *((_BYTE *)this + 125) = 0;
              v70 = *((unsigned __int8 *)this + 126);
              v71 = BYTE4(xmmword_1ECF4C260) << v70;
              v72 = v71;
              if (v71 == 255)
                LOBYTE(v71) = -2;
              if (v72 >> v70 == BYTE4(xmmword_1ECF4C260))
                v73 = v71;
              else
                v73 = -2;
              *((_BYTE *)this + 124) = v73;
              if (v70 != 255)
                *((_BYTE *)this + 126) = v70 + 1;
              *((_BYTE *)this + 127) = 0;
            }
            else if (*((_BYTE *)this + 127))
            {
              --*((_BYTE *)this + 127);
            }
            JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), (uint64_t)this, 0, v27, v28, v29, v30, v31);
          }
        }
      }
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByIdStrictMegamorphicGeneric(JSC::JSGlobalObject *a1, const JSC::PropertyTable *a2, unsigned __int8 *a3, uint64_t a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  int v15;
  WTF::AtomStringImpl *v16;
  JSC::Structure *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD v51[2];
  int v52;
  __int16 v53;
  char v54;
  char v55;
  uint64_t v56;
  unsigned __int8 *v57;
  JSC::VM *v58;
  uint64_t vars0;

  v11 = *((_QWORD *)a1 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  v57 = a3;
  if (a4)
  {
    if ((a4 & 1) != 0)
      v13 = (WTF::StringImpl *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    else
      v13 = *(WTF::StringImpl **)(a4 + 8);
  }
  else
  {
    v13 = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v14 = 2;
  else
    v14 = 1;
  v51[0] = 0;
  v51[1] = a3;
  v52 = -1;
  v53 = 1;
  v54 = v14;
  v55 = 1;
  v56 = 0;
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v57, a1, (uint64_t)v13, (unint64_t)a2, (uint64_t)v51, a7, a8, a9);
  }
  else if (a3[5] <= 0x16u)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, WTF::StringImpl *, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) + 0x48))(a3, a1, v13, a2, v51);
  }
  else
  {
    v15 = *(_DWORD *)a3;
    v16 = (WTF::AtomStringImpl *)(*(_DWORD *)a3 & 0xFFFFFFFE);
    v17 = (JSC::Structure *)(16 * (_QWORD)v16);
    if ((*(_WORD *)(16 * (_QWORD)v16 + 0xC) & 0x400) != 0)
    {
      JSC::JSValue::put((JSC::JSValue *)&v57, a1, (uint64_t)v13, (unint64_t)a2, (uint64_t)v51, a7, a8, a9);
    }
    else
    {
      if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 0x10) & 0x10) == 0)
      {
        v18 = 16 * (v15 & 0xFFFFFFFE);
        v19 = a3;
        while ((*(_WORD *)(v18 + 12) & 0xC00) == 0 && *(_QWORD *)(v18 + 48))
        {
          v20 = *(unsigned __int8 **)(16 * (v15 & 0xFFFFFFFE) + 0x30);
          if (!v20)
            v20 = (unsigned __int8 *)*((_QWORD *)v19 + 2);
          if (v20 == (unsigned __int8 *)2)
          {
            v58 = (JSC::VM *)v11;
            v21 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a3, v11, (unint64_t)v13, (uint64_t)a2, 0, (uint64_t)v51, a8, a9, a5);
            if (v22 && (v53 & 1) != 0)
              JSC::throwTypeError((unint64_t)a1, &v58, (uint64_t)v21, v22);
            if ((!*(_DWORD *)(v11 + 80)
               || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v22, v23, v24, v25, v26, v27, v28))
              && v55 == 1
              && HIBYTE(v53) - 1 <= 1)
            {
              v29 = *(_DWORD *)(16 * (_QWORD)v16 + 0x10);
              if ((v29 & 3) != 2)
              {
                v30 = *(_WORD *)(16 * (_QWORD)v16 + 0xC);
                if ((v30 & 8) == 0 && ((v30 & 0x10) == 0 || (v30 & 0x20) != 0))
                {
                  v31 = *(_DWORD *)a3 & 0xFFFFFFFE;
                  if (HIBYTE(v53) == 1)
                  {
                    if (v17 == (JSC::Structure *)(16 * v31) && v52 < 0x10000)
                    {
                      JSC::Structure::firePropertyReplacementWatchpointSet(v17, (JSC::VM *)v11, (JSC::Structure *)v52, "Did cache property replacement", v25, v26, v27, v28);
                      if ((*(_QWORD *)(v11 + 93080) & 1) != 0)
                        v45 = 0;
                      else
                        v45 = *(_QWORD *)(v11 + 93080);
                      JSC::MegamorphicCache::initAsReplace(v45, v16, v13, (unsigned __int16)v52, v41, v42, v43, v44);
                    }
                  }
                  else if ((v29 & 3) == 0 && !(v29 & 0x80000 | *(_DWORD *)(16 * v31 + 0x10) & 3))
                  {
                    v32 = *(_QWORD *)(16 * v31 + 0x40);
                    if (v32)
                    {
                      v33 = *(_QWORD *)(16 * v31 + 0x40);
                      if (*(_BYTE *)(v32 + 5) != 1)
                      {
                        v46 = *(_DWORD *)(v32 + 80);
                        if (v46)
                          v33 = 16 * (v46 & 0xFFFFFFFE);
                        else
                          v33 = 0;
                      }
                    }
                    else
                    {
                      v33 = 0;
                    }
                    if ((JSC::Structure *)v33 == v17)
                    {
                      v34 = *(_WORD *)(16 * v31 + 0xC);
                      if ((v34 & 8) == 0 && ((v34 & 0x10) == 0 || (v34 & 0x20) != 0))
                      {
                        v35 = *(unsigned __int16 *)(16 * v31 + 0x18);
                        if (v35 == 65534)
                          goto LABEL_38;
                        if (v35 == 0xFFFF)
                          v35 = *(_DWORD *)(v32 + 84);
                        if (v35 < 64)
                        {
LABEL_38:
                          v36 = 0;
                        }
                        else if ((v35 - 63) >= 5)
                        {
                          v47 = (v35 - 64) | ((v35 - 64) >> 1) | (((v35 - 64) | ((v35 - 64) >> 1)) >> 2);
                          v48 = v47 | (v47 >> 4) | ((v47 | (v47 >> 4)) >> 8);
                          v36 = (v48 | HIWORD(v48)) + 1;
                        }
                        else
                        {
                          v36 = 4;
                        }
                        v37 = *(unsigned __int16 *)(16 * (_QWORD)v16 + 0x18);
                        if (v37 == 65534)
                          goto LABEL_43;
                        if (v37 == 0xFFFF)
                          v37 = *(_DWORD *)(*(_QWORD *)(16 * (_QWORD)v16 + 0x40) + 84);
                        if (v37 < 64)
                        {
LABEL_43:
                          v38 = 0;
                        }
                        else if ((v37 - 63) >= 5)
                        {
                          v49 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
                          v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
                          v38 = (v50 | HIWORD(v50)) + 1;
                        }
                        else
                        {
                          v38 = 4;
                        }
                        if (v52 < 0x10000)
                        {
                          if ((*(_QWORD *)(v11 + 93080) & 1) != 0)
                            v39 = 0;
                          else
                            v39 = *(_QWORD *)(v11 + 93080);
                          JSC::MegamorphicCache::initAsTransition(v39, v16, v31, v13, (unsigned __int16)v52, v36 != v38, v27, v28);
                        }
                      }
                    }
                  }
                }
              }
            }
            return *(_QWORD *)(v11 + 16);
          }
          v15 = *(_DWORD *)v20;
          v18 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
          v19 = v20;
          if ((*(_BYTE *)(v18 + 0x10) & 0x10) != 0)
            break;
        }
      }
      JSC::JSObject::putInlineSlow(a3, (unint64_t)a1, (unint64_t)v13, a2, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v51, a7, a8, a9, a5);
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutByIdSloppyMegamorphic(const JSC::PropertyTable *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  int v18;
  WTF::AtomStringImpl *v19;
  JSC::Structure *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  char v65;
  int v66;
  int v67;
  unsigned int v68;
  char v69;
  int v70;
  int v71;
  unsigned int v72;
  char v73;
  _QWORD v74[2];
  int v75;
  __int16 v76;
  char v77;
  char v78;
  uint64_t v79;
  unsigned __int8 *v80;
  JSC::VM *v81;
  uint64_t vars0;

  v12 = *(JSC::JSGlobalObject **)(a3 + 56);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  v15 = *(_QWORD *)(a3 + 16);
  v80 = a2;
  if (v15)
  {
    if ((v15 & 1) != 0)
      v16 = (WTF::StringImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    else
      v16 = *(WTF::StringImpl **)(v15 + 8);
  }
  else
  {
    v16 = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v17 = 2;
  else
    v17 = 1;
  v74[0] = 0;
  v74[1] = a2;
  v75 = -1;
  v76 = 0;
  v77 = v17;
  v78 = 1;
  v79 = 0;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || a2[5] <= 0x16u)
  {
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
    }
    else
    {
      v50 = *(unsigned __int8 *)(a3 + 125);
      if (v50 != 255)
        *(_BYTE *)(a3 + 125) = ++v50;
      if (xmmword_1ECF4C260 < v50)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v56 = *(unsigned __int8 *)(a3 + 126);
        v57 = BYTE4(xmmword_1ECF4C260) << v56;
        v58 = v57;
        if (v57 == 255)
          LOBYTE(v57) = -2;
        if (v58 >> v56 == BYTE4(xmmword_1ECF4C260))
          v59 = v57;
        else
          v59 = -2;
        *(_BYTE *)(a3 + 124) = v59;
        if (v56 != 255)
          *(_BYTE *)(a3 + 126) = v56 + 1;
        *(_BYTE *)(a3 + 127) = 0;
      }
      else if (*(_BYTE *)(a3 + 127))
      {
        --*(_BYTE *)(a3 + 127);
      }
      JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), a3, 1u, a4, a5, a6, a7, a8);
    }
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v80, v12, (uint64_t)v16, (unint64_t)a1, (uint64_t)v74, a6, a7, a8);
    else
      (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, WTF::StringImpl *, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, v12, v16, a1, v74);
  }
  else
  {
    v18 = *(_DWORD *)a2;
    v19 = (WTF::AtomStringImpl *)(*(_DWORD *)a2 & 0xFFFFFFFE);
    v20 = (JSC::Structure *)(16 * (_QWORD)v19);
    if ((*(_WORD *)(16 * (_QWORD)v19 + 0xC) & 0x400) != 0)
    {
      *(_WORD *)(a3 + 129) |= 4u;
      if (*(_BYTE *)(a3 + 124))
      {
        --*(_BYTE *)(a3 + 124);
      }
      else
      {
        v61 = *(unsigned __int8 *)(a3 + 125);
        if (v61 != 255)
          *(_BYTE *)(a3 + 125) = ++v61;
        if (xmmword_1ECF4C260 < v61)
        {
          *(_BYTE *)(a3 + 125) = 0;
          v70 = *(unsigned __int8 *)(a3 + 126);
          v71 = BYTE4(xmmword_1ECF4C260) << v70;
          v72 = v71;
          if (v71 == 255)
            LOBYTE(v71) = -2;
          if (v72 >> v70 == BYTE4(xmmword_1ECF4C260))
            v73 = v71;
          else
            v73 = -2;
          *(_BYTE *)(a3 + 124) = v73;
          if (v70 != 255)
            *(_BYTE *)(a3 + 126) = v70 + 1;
          *(_BYTE *)(a3 + 127) = 0;
        }
        else if (*(_BYTE *)(a3 + 127))
        {
          --*(_BYTE *)(a3 + 127);
        }
        JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), a3, 1u, a4, a5, a6, a7, a8);
      }
      JSC::JSValue::put((JSC::JSValue *)&v80, v12, (uint64_t)v16, (unint64_t)a1, (uint64_t)v74, a6, a7, a8);
    }
    else if ((*(_BYTE *)(16 * (v18 & 0xFFFFFFFE) + 0x10) & 0x10) != 0)
    {
LABEL_19:
      *(_WORD *)(a3 + 129) |= 4u;
      if (*(_BYTE *)(a3 + 124))
      {
        --*(_BYTE *)(a3 + 124);
      }
      else
      {
        v55 = *(unsigned __int8 *)(a3 + 125);
        if (v55 != 255)
          *(_BYTE *)(a3 + 125) = ++v55;
        if (xmmword_1ECF4C260 < v55)
        {
          *(_BYTE *)(a3 + 125) = 0;
          v62 = *(unsigned __int8 *)(a3 + 126);
          v63 = BYTE4(xmmword_1ECF4C260) << v62;
          v64 = v63;
          if (v63 == 255)
            LOBYTE(v63) = -2;
          if (v64 >> v62 == BYTE4(xmmword_1ECF4C260))
            v65 = v63;
          else
            v65 = -2;
          *(_BYTE *)(a3 + 124) = v65;
          if (v62 != 255)
            *(_BYTE *)(a3 + 126) = v62 + 1;
          *(_BYTE *)(a3 + 127) = 0;
        }
        else if (*(_BYTE *)(a3 + 127))
        {
          --*(_BYTE *)(a3 + 127);
        }
        JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), a3, 1u, a4, a5, a6, a7, a8);
      }
LABEL_21:
      JSC::JSObject::putInlineSlow(a2, (unint64_t)v12, (unint64_t)v16, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v74, a6, a7, a8, a9);
    }
    else
    {
      v21 = 16 * (v18 & 0xFFFFFFFE);
      v22 = a2;
      while (1)
      {
        if ((*(_WORD *)(v21 + 12) & 0xC00) != 0 || !*(_QWORD *)(v21 + 48))
        {
LABEL_18:
          if (!a3)
            goto LABEL_21;
          goto LABEL_19;
        }
        v23 = *(unsigned __int8 **)(16 * (v18 & 0xFFFFFFFE) + 0x30);
        if (!v23)
          v23 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
        if (v23 == (unsigned __int8 *)2)
          break;
        v18 = *(_DWORD *)v23;
        v21 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
        v22 = v23;
        if ((*(_BYTE *)(v21 + 0x10) & 0x10) != 0)
          goto LABEL_18;
      }
      v81 = (JSC::VM *)v13;
      v24 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v13, (unint64_t)v16, (uint64_t)a1, 0, (uint64_t)v74, a7, a8, a9);
      if (v25 && (v76 & 1) != 0)
        JSC::throwTypeError((unint64_t)v12, &v81, (uint64_t)v24, v25);
      if (!*(_DWORD *)(v13 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v25, v26, v27, v28, v29, v30, v31))
      {
        if (v78 == 1 && HIBYTE(v76) - 1 <= 1)
        {
          v32 = *(_DWORD *)(16 * (_QWORD)v19 + 0x10);
          if ((v32 & 3) != 2)
          {
            v33 = *(_WORD *)(16 * (_QWORD)v19 + 0xC);
            if ((v33 & 8) == 0 && ((v33 & 0x10) == 0 || (v33 & 0x20) != 0))
            {
              v34 = *(_DWORD *)a2 & 0xFFFFFFFE;
              if (HIBYTE(v76) == 1)
              {
                if (v20 == (JSC::Structure *)(16 * v34) && v75 < 0x10000)
                {
                  JSC::Structure::firePropertyReplacementWatchpointSet(v20, (JSC::VM *)v13, (JSC::Structure *)v75, "Did cache property replacement", v28, v29, v30, v31);
                  if ((*(_QWORD *)(v13 + 93080) & 1) != 0)
                    v48 = 0;
                  else
                    v48 = *(_QWORD *)(v13 + 93080);
                  JSC::MegamorphicCache::initAsReplace(v48, v19, v16, (unsigned __int16)v75, v44, v45, v46, v47);
                }
                return *(_QWORD *)(v13 + 16);
              }
              if ((v32 & 3) != 0 || (*(_BYTE *)(16 * v34 + 0x10) & 3) != 0)
                return *(_QWORD *)(v13 + 16);
              if ((v32 & 0x80000) == 0)
              {
                v35 = *(_QWORD *)(16 * v34 + 0x40);
                if (v35)
                {
                  v36 = *(_QWORD *)(16 * v34 + 0x40);
                  if (*(_BYTE *)(v35 + 5) != 1)
                  {
                    v49 = *(_DWORD *)(v35 + 80);
                    if (v49)
                      v36 = 16 * (v49 & 0xFFFFFFFE);
                    else
                      v36 = 0;
                  }
                }
                else
                {
                  v36 = 0;
                }
                if ((JSC::Structure *)v36 == v20)
                {
                  v37 = *(_WORD *)(16 * v34 + 0xC);
                  if ((v37 & 8) == 0 && ((v37 & 0x10) == 0 || (v37 & 0x20) != 0))
                  {
                    v38 = *(unsigned __int16 *)(16 * v34 + 0x18);
                    if (v38 == 65534)
                      goto LABEL_42;
                    if (v38 == 0xFFFF)
                      v38 = *(_DWORD *)(v35 + 84);
                    if (v38 < 64)
                    {
LABEL_42:
                      v39 = 0;
                    }
                    else if ((v38 - 63) >= 5)
                    {
                      v51 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
                      v52 = v51 | (v51 >> 4) | ((v51 | (v51 >> 4)) >> 8);
                      v39 = (v52 | HIWORD(v52)) + 1;
                    }
                    else
                    {
                      v39 = 4;
                    }
                    v40 = *(unsigned __int16 *)(16 * (_QWORD)v19 + 0x18);
                    if (v40 == 65534)
                      goto LABEL_47;
                    if (v40 == 0xFFFF)
                      v40 = *(_DWORD *)(*(_QWORD *)(16 * (_QWORD)v19 + 0x40) + 84);
                    if (v40 < 64)
                    {
LABEL_47:
                      v41 = 0;
                    }
                    else if ((v40 - 63) >= 5)
                    {
                      v53 = (v40 - 64) | ((v40 - 64) >> 1) | (((v40 - 64) | ((v40 - 64) >> 1)) >> 2);
                      v54 = v53 | (v53 >> 4) | ((v53 | (v53 >> 4)) >> 8);
                      v41 = (v54 | HIWORD(v54)) + 1;
                    }
                    else
                    {
                      v41 = 4;
                    }
                    if (v75 < 0x10000)
                    {
                      if ((*(_QWORD *)(v13 + 93080) & 1) != 0)
                        v42 = 0;
                      else
                        v42 = *(_QWORD *)(v13 + 93080);
                      JSC::MegamorphicCache::initAsTransition(v42, v19, v34, v16, (unsigned __int16)v75, v39 != v41, v30, v31);
                    }
                    return *(_QWORD *)(v13 + 16);
                  }
                }
              }
            }
          }
        }
        if (a3)
        {
          *(_WORD *)(a3 + 129) |= 4u;
          if (*(_BYTE *)(a3 + 124))
          {
            --*(_BYTE *)(a3 + 124);
          }
          else
          {
            v60 = *(unsigned __int8 *)(a3 + 125);
            if (v60 != 255)
              *(_BYTE *)(a3 + 125) = ++v60;
            if (xmmword_1ECF4C260 < v60)
            {
              *(_BYTE *)(a3 + 125) = 0;
              v66 = *(unsigned __int8 *)(a3 + 126);
              v67 = BYTE4(xmmword_1ECF4C260) << v66;
              v68 = v67;
              if (v67 == 255)
                LOBYTE(v67) = -2;
              if (v68 >> v66 == BYTE4(xmmword_1ECF4C260))
                v69 = v67;
              else
                v69 = -2;
              *(_BYTE *)(a3 + 124) = v69;
              if (v66 != 255)
                *(_BYTE *)(a3 + 126) = v66 + 1;
              *(_BYTE *)(a3 + 127) = 0;
            }
            else if (*(_BYTE *)(a3 + 127))
            {
              --*(_BYTE *)(a3 + 127);
            }
            JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), a3, 1u, v27, v28, v29, v30, v31);
          }
        }
      }
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByIdSloppyMegamorphicGeneric(JSC::JSGlobalObject *a1, const JSC::PropertyTable *a2, unsigned __int8 *a3, uint64_t a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  int v15;
  WTF::AtomStringImpl *v16;
  JSC::Structure *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD v51[2];
  int v52;
  __int16 v53;
  char v54;
  char v55;
  uint64_t v56;
  unsigned __int8 *v57;
  JSC::VM *v58;
  uint64_t vars0;

  v11 = *((_QWORD *)a1 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  v57 = a3;
  if (a4)
  {
    if ((a4 & 1) != 0)
      v13 = (WTF::StringImpl *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    else
      v13 = *(WTF::StringImpl **)(a4 + 8);
  }
  else
  {
    v13 = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v14 = 2;
  else
    v14 = 1;
  v51[0] = 0;
  v51[1] = a3;
  v52 = -1;
  v53 = 0;
  v54 = v14;
  v55 = 1;
  v56 = 0;
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v57, a1, (uint64_t)v13, (unint64_t)a2, (uint64_t)v51, a7, a8, a9);
  }
  else if (a3[5] <= 0x16u)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, WTF::StringImpl *, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) + 0x48))(a3, a1, v13, a2, v51);
  }
  else
  {
    v15 = *(_DWORD *)a3;
    v16 = (WTF::AtomStringImpl *)(*(_DWORD *)a3 & 0xFFFFFFFE);
    v17 = (JSC::Structure *)(16 * (_QWORD)v16);
    if ((*(_WORD *)(16 * (_QWORD)v16 + 0xC) & 0x400) != 0)
    {
      JSC::JSValue::put((JSC::JSValue *)&v57, a1, (uint64_t)v13, (unint64_t)a2, (uint64_t)v51, a7, a8, a9);
    }
    else
    {
      if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 0x10) & 0x10) == 0)
      {
        v18 = 16 * (v15 & 0xFFFFFFFE);
        v19 = a3;
        while ((*(_WORD *)(v18 + 12) & 0xC00) == 0 && *(_QWORD *)(v18 + 48))
        {
          v20 = *(unsigned __int8 **)(16 * (v15 & 0xFFFFFFFE) + 0x30);
          if (!v20)
            v20 = (unsigned __int8 *)*((_QWORD *)v19 + 2);
          if (v20 == (unsigned __int8 *)2)
          {
            v58 = (JSC::VM *)v11;
            v21 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a3, v11, (unint64_t)v13, (uint64_t)a2, 0, (uint64_t)v51, a8, a9, a5);
            if (v22 && (v53 & 1) != 0)
              JSC::throwTypeError((unint64_t)a1, &v58, (uint64_t)v21, v22);
            if ((!*(_DWORD *)(v11 + 80)
               || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v22, v23, v24, v25, v26, v27, v28))
              && v55 == 1
              && HIBYTE(v53) - 1 <= 1)
            {
              v29 = *(_DWORD *)(16 * (_QWORD)v16 + 0x10);
              if ((v29 & 3) != 2)
              {
                v30 = *(_WORD *)(16 * (_QWORD)v16 + 0xC);
                if ((v30 & 8) == 0 && ((v30 & 0x10) == 0 || (v30 & 0x20) != 0))
                {
                  v31 = *(_DWORD *)a3 & 0xFFFFFFFE;
                  if (HIBYTE(v53) == 1)
                  {
                    if (v17 == (JSC::Structure *)(16 * v31) && v52 < 0x10000)
                    {
                      JSC::Structure::firePropertyReplacementWatchpointSet(v17, (JSC::VM *)v11, (JSC::Structure *)v52, "Did cache property replacement", v25, v26, v27, v28);
                      if ((*(_QWORD *)(v11 + 93080) & 1) != 0)
                        v45 = 0;
                      else
                        v45 = *(_QWORD *)(v11 + 93080);
                      JSC::MegamorphicCache::initAsReplace(v45, v16, v13, (unsigned __int16)v52, v41, v42, v43, v44);
                    }
                  }
                  else if ((v29 & 3) == 0 && !(v29 & 0x80000 | *(_DWORD *)(16 * v31 + 0x10) & 3))
                  {
                    v32 = *(_QWORD *)(16 * v31 + 0x40);
                    if (v32)
                    {
                      v33 = *(_QWORD *)(16 * v31 + 0x40);
                      if (*(_BYTE *)(v32 + 5) != 1)
                      {
                        v46 = *(_DWORD *)(v32 + 80);
                        if (v46)
                          v33 = 16 * (v46 & 0xFFFFFFFE);
                        else
                          v33 = 0;
                      }
                    }
                    else
                    {
                      v33 = 0;
                    }
                    if ((JSC::Structure *)v33 == v17)
                    {
                      v34 = *(_WORD *)(16 * v31 + 0xC);
                      if ((v34 & 8) == 0 && ((v34 & 0x10) == 0 || (v34 & 0x20) != 0))
                      {
                        v35 = *(unsigned __int16 *)(16 * v31 + 0x18);
                        if (v35 == 65534)
                          goto LABEL_38;
                        if (v35 == 0xFFFF)
                          v35 = *(_DWORD *)(v32 + 84);
                        if (v35 < 64)
                        {
LABEL_38:
                          v36 = 0;
                        }
                        else if ((v35 - 63) >= 5)
                        {
                          v47 = (v35 - 64) | ((v35 - 64) >> 1) | (((v35 - 64) | ((v35 - 64) >> 1)) >> 2);
                          v48 = v47 | (v47 >> 4) | ((v47 | (v47 >> 4)) >> 8);
                          v36 = (v48 | HIWORD(v48)) + 1;
                        }
                        else
                        {
                          v36 = 4;
                        }
                        v37 = *(unsigned __int16 *)(16 * (_QWORD)v16 + 0x18);
                        if (v37 == 65534)
                          goto LABEL_43;
                        if (v37 == 0xFFFF)
                          v37 = *(_DWORD *)(*(_QWORD *)(16 * (_QWORD)v16 + 0x40) + 84);
                        if (v37 < 64)
                        {
LABEL_43:
                          v38 = 0;
                        }
                        else if ((v37 - 63) >= 5)
                        {
                          v49 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
                          v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
                          v38 = (v50 | HIWORD(v50)) + 1;
                        }
                        else
                        {
                          v38 = 4;
                        }
                        if (v52 < 0x10000)
                        {
                          if ((*(_QWORD *)(v11 + 93080) & 1) != 0)
                            v39 = 0;
                          else
                            v39 = *(_QWORD *)(v11 + 93080);
                          JSC::MegamorphicCache::initAsTransition(v39, v16, v31, v13, (unsigned __int16)v52, v36 != v38, v27, v28);
                        }
                      }
                    }
                  }
                }
              }
            }
            return *(_QWORD *)(v11 + 16);
          }
          v15 = *(_DWORD *)v20;
          v18 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
          v19 = v20;
          if ((*(_BYTE *)(v18 + 0x10) & 0x10) != 0)
            break;
        }
      }
      JSC::JSObject::putInlineSlow(a3, (unint64_t)a1, (unint64_t)v13, a2, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v51, a7, a8, a9, a5);
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutByMegamorphicReallocating(uint64_t a1, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t Slow;
  unint64_t SlowCase;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  __n128 *v38;
  uint64_t v39;
  char *v40;
  unsigned __int8 *v41;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t vars0;

  v9 = a3;
  *(_QWORD *)(a1 + 40) = vars0;
  v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v13 = 16 * (*(_DWORD *)(a4 + 12) & 0xFFFFFFFE);
  v14 = *(unsigned __int16 *)(v12 + 0x18);
  if (v14 == 65534)
    goto LABEL_5;
  if (v14 == 0xFFFF)
    v14 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40) + 84);
  if (v14 < 64)
  {
LABEL_5:
    v15 = 0;
  }
  else
  {
    if ((v14 - 63) < 5)
    {
      v15 = 4;
      v16 = *(unsigned __int16 *)(16 * (*(_DWORD *)(a4 + 12) & 0xFFFFFFFE) + 0x18);
      if (v16 == 65534)
        goto LABEL_10;
      goto LABEL_7;
    }
    v49 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
    v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
    v15 = (v50 | HIWORD(v50)) + 1;
  }
  v16 = *(unsigned __int16 *)(16 * (*(_DWORD *)(a4 + 12) & 0xFFFFFFFE) + 0x18);
  if (v16 == 65534)
    goto LABEL_10;
LABEL_7:
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)(a4 + 12) & 0xFFFFFFFE) + 0x40) + 84);
  if (v16 < 64
    || ((v16 - 63) >= 5
      ? (v51 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2),
         v52 = v51 | (v51 >> 4) | ((v51 | (v51 >> 4)) >> 8),
         v17 = (v52 | HIWORD(v52)) + 1)
      : (v17 = 4),
        v18 = v17 - v15,
        v17 <= v15))
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198783834);
  }
  v78 = *(unsigned __int16 *)(a4 + 18);
  v19 = *((_QWORD *)a2 + 1);
  if (!v19)
  {
    v45 = 8 * v17;
    if (v17 <= 0x3EC && (v46 = *(_QWORD *)(a1 + (((unint64_t)(v45 + 15) >> 1) & 0x7FFFFFFF8) + 6736)) != 0)
    {
      v47 = *(unsigned int *)(v46 + 60);
      SlowCase = *(_QWORD *)(v46 + 24);
      if (SlowCase >= *(_QWORD *)(v46 + 32))
      {
        SlowCase = *(_QWORD *)(v46 + 40);
        if ((SlowCase & 1) == 0)
        {
          v61 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v46 + 48);
          *(_QWORD *)(v46 + 32) = SlowCase + HIDWORD(v61);
          *(_QWORD *)(v46 + 40) = SlowCase + (int)v61;
          *(_QWORD *)(v46 + 24) = SlowCase + v47;
LABEL_59:
          v48 = (__n128 *)SlowCase;
          a9.n128_u64[0] = 0;
          while (v48 != (__n128 *)((v45 & 0x7FFFFFFC0) + SlowCase))
          {
            *v48 = a9;
            v48[1] = a9;
            v48[2] = a9;
            v48[3] = a9;
            v48 += 4;
          }
          while (v48 != (__n128 *)(v45 + SlowCase))
          {
            v48->n128_u64[0] = 0;
            v48 = (__n128 *)((char *)v48 + 8);
          }
          goto LABEL_39;
        }
        v65 = v17;
        v66 = *(_QWORD *)(a1 + (((unint64_t)(v45 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
        v67 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
        v68 = *(unsigned int *)(v46 + 60);
        JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
        v70 = v66;
        v17 = v65;
        v71 = v68;
        v12 = v67;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v70, a1 + 192, v71, 0, 1);
        v9 = a3;
      }
      else
      {
        *(_QWORD *)(v46 + 24) = SlowCase + v47;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(a1 + 6648, (JSC *)a1, 8 * v17, 0, a5, a6, a7, a8);
      v9 = a3;
    }
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198783E40);
    }
    goto LABEL_59;
  }
  v20 = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
  v21 = v20 & 0xE;
  if (v21 >= 0xA)
    v22 = *(unsigned int *)(v19 + 8);
  else
    v22 = 0;
  v23 = v20 & 0xF;
  if ((v23 - 3) >= 7)
  {
    if ((v23 - 10) >= 4)
    {
      v24 = 0;
      if (v21)
        goto LABEL_23;
      goto LABEL_70;
    }
    v24 = 8 * *(unsigned int *)(v19 - 4) + 16;
  }
  else
  {
    v24 = 8 * *(unsigned int *)(v19 - 4);
  }
  if (v21)
  {
LABEL_23:
    v25 = 8 * (v22 + v17);
    goto LABEL_24;
  }
LABEL_70:
  if (*(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 9) - 39 >= 0xB)
  {
    v26 = 0;
    v25 = 8 * (v22 + v17);
    goto LABEL_25;
  }
  v25 = 8 * (v22 + v17);
  if ((*((_BYTE *)a2 + 40) & 0x40) == 0)
  {
    v26 = 0;
    goto LABEL_25;
  }
LABEL_24:
  v26 = 8;
LABEL_25:
  v27 = v26 + v24 + v25;
  if (v27 > 0x1F60 || (v28 = *(_QWORD *)(a1 + (((v27 + 15) >> 1) & 0x3FFFFFFFF8) + 6736)) == 0)
  {
    v74 = v22;
    v76 = v9;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(a1 + 6648, (JSC *)a1, v27, 0, a5, a6, a7, a8);
    v22 = v74;
    v9 = v76;
    v18 = v17 - v15;
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198783C80);
    }
    goto LABEL_29;
  }
  v29 = *(unsigned int *)(v28 + 60);
  Slow = *(_QWORD *)(v28 + 24);
  if (Slow >= *(_QWORD *)(v28 + 32))
  {
    Slow = *(_QWORD *)(v28 + 40);
    if ((Slow & 1) != 0)
    {
      v72 = v17 - v15;
      v73 = v17;
      v75 = v22;
      v63 = *(unsigned int *)(v28 + 60);
      v77 = v9;
      JSC::sanitizeStackForVM((JSC *)a1, a2, v27, a4, a5, a6, a7, a8);
      v64 = v63;
      v17 = v73;
      Slow = JSC::LocalAllocator::allocateSlowCase(v28, a1 + 192, v64, 0, 0);
      v22 = v75;
      v9 = v77;
      v18 = v72;
      goto LABEL_29;
    }
    v60 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v28 + 32) = Slow + HIDWORD(v60);
    *(_QWORD *)(v28 + 40) = Slow + (int)v60;
  }
  *(_QWORD *)(v28 + 24) = Slow + v29;
LABEL_29:
  if ((v24 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198783D2CLL);
  }
  SlowCase = Slow + 8 * v22;
  v32 = SlowCase + 8 * v17 - 8 * v15;
  v33 = v19 - 8 - 8 * v15;
  v34 = v24 + 8 * v15 + v26;
  if (v34 > 0xF0)
  {
    v53 = v34 & 0x3FFFFFFFE0;
    v54 = v34 + v32;
    v55 = v53 + v32;
    while (v32 != v55)
    {
      a9 = *(__n128 *)v33;
      v56 = *(_OWORD *)(v33 + 16);
      v33 += 32;
      *(__n128 *)v32 = a9;
      *(_OWORD *)(v32 + 16) = v56;
      v32 += 32;
    }
    while (v32 != v54)
    {
      v57 = *(_QWORD *)v33;
      v33 += 8;
      *(_QWORD *)v32 = v57;
      v32 += 8;
    }
  }
  else if (v34 >= 8)
  {
    v35 = 0;
    v36 = v34 >> 3;
    v37 = 1;
    do
    {
      *(_QWORD *)(v32 + 8 * v35) = *(_QWORD *)(v33 + 8 * v35);
      v35 = v37++;
    }
    while (v36 > v35);
  }
  v38 = (__n128 *)SlowCase;
  a9.n128_u64[0] = 0;
  while (v38 != (__n128 *)(((8 * v18) & 0xFFFFFFFFFFFFFFC0) + SlowCase))
  {
    *v38 = a9;
    v38[1] = a9;
    v38[2] = a9;
    v38[3] = a9;
    v38 += 4;
  }
  while (v38 != (__n128 *)(SlowCase + 8 * v18))
  {
    v38->n128_u64[0] = 0;
    v38 = (__n128 *)((char *)v38 + 8);
  }
LABEL_39:
  v39 = SlowCase + 8 * v17 + 8;
  if (*(_BYTE *)(a1 + 755))
  {
    *(_DWORD *)a2 = (v12 >> 4) | 1;
    __dmb(0xAu);
    *((_QWORD *)a2 + 1) = v39;
    if (*(_DWORD *)(a1 + 760) >= *((unsigned __int8 *)a2 + 7))
    {
      v62 = v9;
      JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
      v9 = v62;
    }
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a2 + 1) = v39;
    if (*(_DWORD *)(a1 + 760) >= *((unsigned __int8 *)a2 + 7))
    {
      v59 = v9;
      JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
      v9 = v59;
    }
  }
  if (v78 <= 0x3F)
  {
    v40 = (char *)a2 + 16;
  }
  else
  {
    v40 = (char *)(*((_QWORD *)a2 + 1) - 8);
    v78 = 63 - v78;
  }
  *(_QWORD *)&v40[8 * v78] = v9;
  if (v9 && (v9 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a1 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
  *(_DWORD *)a2 = v13 >> 4;
  *((_BYTE *)a2 + 6) = *((_BYTE *)a2 + 6) & 0x80 | *(_BYTE *)(v13 + 10);
  *((_BYTE *)a2 + 5) = *(_BYTE *)(v13 + 9);
  v41 = (unsigned __int8 *)a2 + 4;
  if (*((unsigned __int8 *)a2 + 4) != *(unsigned __int8 *)(v13 + 8))
  {
    do
    {
      while (1)
      {
        v43 = *v41;
        v44 = __ldxr(v41);
        if (v44 == v43)
          break;
        __clrex();
      }
    }
    while (__stxr(v43 & 0xC0 | *(_BYTE *)(v13 + 8), v41));
  }
  if (*(_DWORD *)(a1 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
  return *(_QWORD *)(a1 + 16);
}

uint64_t operationPutByIdDirectStrictGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;
  __int16 v56;
  char v57;
  char v58;
  uint64_t v59;
  void (**v60)(JSC::StringFireDetail *__hidden);
  const char *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t vars0;

  v11 = *(JSC::ExecutableBase **)(a3 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v14 = *(_QWORD *)(a3 + 16);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v15 = 2;
  else
    v15 = 1;
  v54[0] = 0;
  v54[1] = a2;
  v55 = -1;
  v56 = 1;
  v57 = v15;
  v58 = 1;
  v59 = 0;
  if (v14)
  {
    if ((v14 & 1) != 0)
      v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    else
      v16 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(a2 + 5);
  v18 = v17;
  if (v17 != 26)
    goto LABEL_11;
  if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2160) == v16)
  {
    v58 = 0;
    v25 = *(_QWORD *)(a2 + 24);
    if ((v25 & 1) != 0)
    {
      v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
      if ((v25 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_DWORD *)(v26 + 40) = 0;
        if ((v25 & 8) != 0)
          v27 = (uint64_t *)(v26 - 16);
        else
          v27 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
        v28 = *v27;
        v60 = &off_1E3583C90;
        v61 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v26 + 32), v28);
      }
    }
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v12, v11, (const JSC::PropertyTable *)v16, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v19, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
LABEL_11:
    v20 = (_DWORD *)a2;
    if (v18 == 32)
      v20 = *(_DWORD **)(a2 + 16);
    v21 = 16 * (*v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v21 + 0x12) & 0x10) != 0
      || (v16 >> 4)
      && ((v16 >> 4) & ~*(_DWORD *)(16 * (*v20 & 0xFFFFFFFE) + 0x20)) == 0
      && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v21, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8),
          v22)
      && (v60 = (void (**)(JSC::StringFireDetail *__hidden))v16,
          v23 = JSC::PropertyTable::get(v22, (uint64_t *)&v60),
          (_DWORD)v23 != -1)
      && (v23 & 0x800000000) != 0
      || v17 != 26
      && ((*(_BYTE *)(v21 + 10) & 0x20) != 0 && (*(_BYTE *)(v21 + 18) & 0x40) == 0
       || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v21 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
    {
      v58 = 0;
      v60 = (void (**)(JSC::StringFireDetail *__hidden))a1;
      v61 = 0;
      v62 = 0;
      v63 = 0x700000000;
      (*(void (**)(uint64_t, JSC::ExecutableBase *, unint64_t, void (***)(JSC::StringFireDetail *__hidden), uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, v11, v16, &v60, 1);
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v12, v16, a1, 0, (uint64_t)v54, a7, a8, a9);
    }
  }
  if (byte_1ECF4C6B7)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
      v29 = 0;
    else
      v29 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    if (v14)
    {
      if ((v14 & 1) != 0)
        v30 = (WTF::StringImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      else
        v30 = *(WTF::StringImpl **)(v14 + 8);
    }
    else
    {
      v30 = 0;
    }
    JSC::ICEvent::ICEvent((uint64_t)&v60, (uint64_t **)v12, (const WTF::StringImpl *)0x15, v29, v30, v54[0] == a2, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v60, v31, v32, v33, v34, v35, v36, v37);
    v45 = v62;
    v62 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationPutByIdDirectSloppyGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD v57[2];
  int v58;
  __int16 v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  int *v67;
  uint64_t vars0;

  v11 = *(JSC::ExecutableBase **)(a3 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v14 = *(_QWORD *)(a3 + 16);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 56) + 28) & 0x3000) == 0x1000)
    v15 = 2;
  else
    v15 = 1;
  v57[0] = 0;
  v57[1] = a2;
  v58 = -1;
  v59 = 0;
  v60 = v15;
  v61 = 1;
  v62 = 0;
  if (v14)
  {
    if ((v14 & 1) != 0)
      v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    else
      v16 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(a2 + 5);
  v18 = v17;
  if (v17 != 26)
    goto LABEL_14;
  if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2160) == v16)
  {
    v61 = 0;
    v19 = *(_QWORD *)(a2 + 24);
    if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFFFFFFFFFELL) != 0)
      JSC::FunctionRareData::clear(v19 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v12, v11, (const JSC::PropertyTable *)v16, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_13;
  v56 = *(_DWORD *)(v12 + 80);
  if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_13:
    v18 = *(unsigned __int8 *)(a2 + 5);
LABEL_14:
    v21 = (_DWORD *)a2;
    if (v18 == 32)
      v21 = *(_DWORD **)(a2 + 16);
    v22 = 16 * (*v21 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v22 + 0x12) & 0x10) != 0
      || (v16 >> 4)
      && ((v16 >> 4) & ~*(_DWORD *)(16 * (*v21 & 0xFFFFFFFE) + 0x20)) == 0
      && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v22, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8),
          v23)
      && (v63 = v16, v24 = JSC::PropertyTable::get(v23, (uint64_t *)&v63), (_DWORD)v24 != -1)
      && (v24 & 0x800000000) != 0
      || v17 != 26
      && ((*(_BYTE *)(v22 + 10) & 0x20) != 0 && (*(_BYTE *)(v22 + 18) & 0x40) == 0
       || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v22 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
    {
      v61 = 0;
      v63 = a1;
      v64 = 0;
      v65 = 0;
      v66 = 0x700000000;
      (*(void (**)(uint64_t, JSC::ExecutableBase *, unint64_t, unint64_t *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, v11, v16, &v63, 0);
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v12, v16, a1, 0, (uint64_t)v57, a7, a8, a9);
    }
  }
  if (!byte_1ECF4C6B7)
    return *(_QWORD *)(v12 + 16);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v25 = 0;
    if ((v14 & 1) != 0)
    {
LABEL_29:
      v26 = (int *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_30;
    }
  }
  else
  {
    v25 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    if ((v14 & 1) != 0)
      goto LABEL_29;
  }
  v26 = *(int **)(v14 + 8);
LABEL_30:
  v27 = v57[0];
  LODWORD(v63) = 22;
  v64 = v25;
  v28 = v26[4];
  if ((v28 & 0x20) != 0)
  {
    v29 = *v26 + 2;
  }
  else
  {
    if ((v28 & 0x10) != 0)
    {
      *v26 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v12 + 41912), (unint64_t)v26, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, &v67);
      v26 = v67;
    }
    v29 = *v26;
    *v26 += 2;
    if (!v29)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      goto LABEL_38;
    }
  }
  *v26 = v29;
LABEL_38:
  v65 = (WTF::StringImpl *)v26;
  if (v27 == a2)
    v30 = 1;
  else
    v30 = 2;
  LODWORD(v66) = v30;
  JSC::ICEvent::log((JSC::ICEvent *)&v63, (uint64_t)v20, a3, (uint64_t)a4, a5, a6, a7, a8);
  v38 = v65;
  v65 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationPutByIdStrictOptimize(const JSC::PropertyTable *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  char v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned int v79;
  _QWORD v80[2];
  int v81;
  __int16 v82;
  char v83;
  char v84;
  uint64_t v85;
  const WTF::StringImpl *v86;
  int v87;
  char v88;
  uint64_t v89;
  JSC::VM *v90;
  char *v91;
  WTF::StringImpl *v92;
  uint64_t *v93;
  char *v94;
  JSC::VM **v95;
  uint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a3 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(unsigned __int8 *)(a3 + 122);
  v15 = *(_QWORD *)(v12 + 16);
  if ((*(_WORD *)(*(_QWORD *)(v15 + 56) + 28) & 0x3000) == 0x1000)
    v16 = 2;
  else
    v16 = 1;
  v80[0] = 0;
  v80[1] = a2;
  v81 = -1;
  v82 = 1;
  v83 = v16;
  v84 = 1;
  v85 = 0;
  v86 = (const WTF::StringImpl *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v18 = 0;
  }
  else
  {
    v17 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v17 = *(_DWORD **)(a2 + 16);
    v18 = 16 * (*v17 & 0xFFFFFFFE);
  }
  if (v13)
  {
    if ((v13 & 1) != 0)
      v19 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v19 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v19 = 0;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v86, v10, v19, (unint64_t)a1, (uint64_t)v80, a7, a8, a9);
    goto LABEL_29;
  }
  v20 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v20 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x48))(a2, v10, v19);
    goto LABEL_29;
  }
  if (v19)
  {
    v21 = *(_DWORD *)(v19 + 16);
    if ((v21 & 0x20) == 0)
    {
      v22 = *(_BYTE **)(v19 + 8);
      v23 = *(unsigned int *)(v19 + 4);
      if ((v21 & 4) != 0)
      {
        if ((_DWORD)v23)
        {
          v24 = *v22 - 48;
          if (v24 <= 9 && (v23 < 2 || *v22 != 48))
          {
            v77 = v22 + 1;
            v78 = v23 - 1;
            while (v78)
            {
              if (v24 <= 0x19999999)
              {
                v79 = *v77 - 48;
                if (v79 <= 9)
                {
                  v39 = __CFADD__(v79, 10 * v24);
                  v24 = v79 + 10 * (_DWORD)v24;
                  ++v77;
                  --v78;
                  if (!v39)
                    continue;
                }
              }
              goto LABEL_18;
            }
LABEL_122:
            if ((_DWORD)v24 != -1)
            {
              (*(void (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, v10, v24, a1, 1);
              goto LABEL_29;
            }
          }
        }
      }
      else if ((_DWORD)v23)
      {
        v24 = *(unsigned __int16 *)v22 - 48;
        if (v24 <= 9 && (*(_WORD *)v22 != 48 || v23 <= 1))
        {
          v36 = (unsigned __int16 *)(v22 + 2);
          v37 = v23 - 1;
          while (v37)
          {
            if (v24 <= 0x19999999)
            {
              v38 = *v36 - 48;
              if (v38 <= 9)
              {
                v39 = __CFADD__(v38, 10 * v24);
                v24 = v38 + 10 * (_DWORD)v24;
                ++v36;
                --v37;
                if (!v39)
                  continue;
              }
            }
            goto LABEL_18;
          }
          goto LABEL_122;
        }
      }
    }
  }
LABEL_18:
  if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 16) != v19)
  {
    v25 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v25 & 0x10) == 0)
    {
      v26 = (_DWORD *)a2;
      while ((*(_WORD *)(v20 + 12) & 0x800) == 0 && (v26 == (_DWORD *)a2 || (*(_WORD *)(v20 + 12) & 0x400) == 0))
      {
        v27 = *(_DWORD **)(v20 + 48);
        if (!v27)
          v27 = (_DWORD *)*((_QWORD *)v26 + 2);
        if (v27 == (_DWORD *)2)
        {
          if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v25 & 0x400000) != 0)
          {
            v90 = (JSC::VM *)v11;
            v51 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v11, v19, (uint64_t)a1, 0, (uint64_t)v80, a8, a9, a4);
            if (v52 && (v82 & 1) != 0)
              JSC::throwTypeError((unint64_t)v10, &v90, (uint64_t)v51, v52);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)v10, v19, (uint64_t)a1, (uint64_t)v80, a4, a7, a8, a9);
          }
          goto LABEL_29;
        }
        v20 = 16 * (*v27 & 0xFFFFFFFE);
        v26 = v27;
        if ((*(_BYTE *)(v20 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)v10, v19, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v80, a7, a8, a9, a4);
LABEL_29:
  if (byte_1ECF4C6B7)
  {
    v58 = ((unint64_t)v86 & 0xFFFE000000000002) != 0
        ? 0
        : 16 * *(unsigned int *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x4C);
    if (v13)
      v59 = (v13 & 1) != 0 ? (WTF::StringImpl *)(v13 & 0xFFFFFFFFFFFFFFFELL) : *(WTF::StringImpl **)(v13 + 8);
    else
      v59 = 0;
    JSC::ICEvent::ICEvent((uint64_t)&v90, (uint64_t **)v11, (const WTF::StringImpl *)0x17, v58, v59, v86 == (const WTF::StringImpl *)v80[0], v32, v33);
    JSC::ICEvent::log((JSC::ICEvent *)&v90, v60, v61, v62, v63, v64, v65, v66);
    v68 = v92;
    v92 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v67, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_31;
  v57 = *(_DWORD *)(v11 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v28, v29, v30, v31, v32, v33);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_31:
    if (v14 == *(unsigned __int8 *)(a3 + 122))
    {
      if (!v18)
      {
        *(_WORD *)(a3 + 129) |= 0x10u;
        return *(_QWORD *)(v11 + 16);
      }
      v89 = v13;
      *(_WORD *)(a3 + 129) |= 4u;
      if (*(_BYTE *)(a3 + 124))
      {
        --*(_BYTE *)(a3 + 124);
        return *(_QWORD *)(v11 + 16);
      }
      v40 = *(unsigned __int8 *)(a3 + 125);
      if (v40 != 255)
        *(_BYTE *)(a3 + 125) = ++v40;
      if (xmmword_1ECF4C260 < v40)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v53 = *(unsigned __int8 *)(a3 + 126);
        v54 = BYTE4(xmmword_1ECF4C260) << v53;
        v55 = v54;
        if (v54 == 255)
          LOBYTE(v54) = -2;
        if (v55 >> v53 == BYTE4(xmmword_1ECF4C260))
          v56 = v54;
        else
          v56 = -2;
        *(_BYTE *)(a3 + 124) = v56;
        if (v53 != 255)
          *(_BYTE *)(a3 + 126) = v53 + 1;
        *(_BYTE *)(a3 + 127) = 0;
        goto LABEL_69;
      }
      if (!*(_BYTE *)(a3 + 127))
      {
LABEL_69:
        JSC::repatchPutBy((uint64_t *)v10, v15, v86, (const JSC::PropertyTable *)v18, v13, (unint64_t)v80, a3, 0, v34);
        return *(_QWORD *)(v11 + 16);
      }
      --*(_BYTE *)(a3 + 127);
      v88 = 0;
      v87 = v18 >> 4;
      v41 = (unsigned __int8 *)(a3 + 128);
      if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
        goto LABEL_72;
      __clrex();
LABEL_51:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
      while (1)
      {
        v43 = *(_DWORD *)(a3 + 96);
        if (!v43)
          break;
        v92 = (WTF::StringImpl *)&v87;
        v93 = &v89;
        v94 = &v88;
        v90 = (JSC::VM *)&v87;
        v91 = &v88;
        if (v43 != -1)
          goto LABEL_57;
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_72:
        if (__stxr(1u, v41))
          goto LABEL_51;
      }
      if (*(_QWORD *)(a3 + 16))
        v43 = 1;
      else
        v43 = 2;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      *(_DWORD *)(a3 + 96) = v43;
      v92 = (WTF::StringImpl *)&v87;
      v93 = &v89;
      v94 = &v88;
      v90 = (JSC::VM *)&v87;
      v91 = &v88;
LABEL_57:
      v95 = &v90;
      ((void (*)(JSC::VM ***))off_1E3596010[v43])(&v95);
      v50 = __ldxr(v41);
      if (v50 == 1)
      {
        if (!__stlxr(0, v41))
          goto LABEL_66;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v44, v45, v46, v47, v48, v49);
LABEL_66:
      if (!v88)
        return *(_QWORD *)(v11 + 16);
      if (v15)
      {
        if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v15 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v11 + 192, v15);
          if (!v88)
            return *(_QWORD *)(v11 + 16);
        }
      }
      goto LABEL_69;
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutByIdSloppyOptimize(const JSC::PropertyTable *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 *v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  const char *v52;
  int v53;
  int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD v78[2];
  int v79;
  __int16 v80;
  char v81;
  char v82;
  uint64_t v83;
  const WTF::StringImpl *v84;
  int v85;
  char v86;
  uint64_t v87;
  JSC::VM *v88;
  char *v89;
  WTF::StringImpl *v90;
  uint64_t *v91;
  char *v92;
  JSC::VM **v93;
  uint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a3 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(unsigned __int8 *)(a3 + 122);
  v15 = *(_QWORD *)(v12 + 16);
  if ((*(_WORD *)(*(_QWORD *)(v15 + 56) + 28) & 0x3000) == 0x1000)
    v16 = 2;
  else
    v16 = 1;
  v78[0] = 0;
  v78[1] = a2;
  v79 = -1;
  v80 = 0;
  v81 = v16;
  v82 = 1;
  v83 = 0;
  v84 = (const WTF::StringImpl *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v18 = 0;
  }
  else
  {
    v17 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v17 = *(_DWORD **)(a2 + 16);
    v18 = 16 * (*v17 & 0xFFFFFFFE);
  }
  if (v13)
  {
    if ((v13 & 1) != 0)
      v19 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v19 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v19 = 0;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v84, v10, v19, (unint64_t)a1, (uint64_t)v78, a7, a8, a9);
    goto LABEL_29;
  }
  v20 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v20 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x48))(a2, v10, v19);
    goto LABEL_29;
  }
  if (v19)
  {
    v21 = *(_DWORD *)(v19 + 16);
    if ((v21 & 0x20) == 0)
    {
      v22 = *(_BYTE **)(v19 + 8);
      v23 = *(unsigned int *)(v19 + 4);
      if ((v21 & 4) != 0)
      {
        if ((_DWORD)v23)
        {
          v24 = *v22 - 48;
          if (v24 <= 9 && (v23 < 2 || *v22 != 48))
          {
            v75 = v22 + 1;
            v76 = v23 - 1;
            while (v76)
            {
              if (v24 <= 0x19999999)
              {
                v77 = *v75 - 48;
                if (v77 <= 9)
                {
                  v40 = __CFADD__(v77, 10 * v24);
                  v24 = v77 + 10 * (_DWORD)v24;
                  ++v75;
                  --v76;
                  if (!v40)
                    continue;
                }
              }
              goto LABEL_18;
            }
LABEL_118:
            if ((_DWORD)v24 != -1)
            {
              (*(void (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, v10, v24, a1, 0);
              goto LABEL_29;
            }
          }
        }
      }
      else if ((_DWORD)v23)
      {
        v24 = *(unsigned __int16 *)v22 - 48;
        if (v24 <= 9 && (*(_WORD *)v22 != 48 || v23 <= 1))
        {
          v37 = (unsigned __int16 *)(v22 + 2);
          v38 = v23 - 1;
          while (v38)
          {
            if (v24 <= 0x19999999)
            {
              v39 = *v37 - 48;
              if (v39 <= 9)
              {
                v40 = __CFADD__(v39, 10 * v24);
                v24 = v39 + 10 * (_DWORD)v24;
                ++v37;
                --v38;
                if (!v40)
                  continue;
              }
            }
            goto LABEL_18;
          }
          goto LABEL_118;
        }
      }
    }
  }
LABEL_18:
  if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 16) != v19)
  {
    v25 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v25 & 0x10) == 0)
    {
      v26 = (_DWORD *)a2;
      while ((*(_WORD *)(v20 + 12) & 0x800) == 0 && (v26 == (_DWORD *)a2 || (*(_WORD *)(v20 + 12) & 0x400) == 0))
      {
        v27 = *(_DWORD **)(v20 + 48);
        if (!v27)
          v27 = (_DWORD *)*((_QWORD *)v26 + 2);
        if (v27 == (_DWORD *)2)
        {
          if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v25 & 0x400000) != 0)
          {
            v88 = (JSC::VM *)v11;
            v52 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v11, v19, (uint64_t)a1, 0, (uint64_t)v78, a8, a9, a4);
            if (v28 && (v80 & 1) != 0)
              JSC::throwTypeError((unint64_t)v10, &v88, (uint64_t)v52, (uint64_t)v28);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)v10, v19, (uint64_t)a1, (uint64_t)v78, a4, a7, a8, a9);
          }
          goto LABEL_29;
        }
        v20 = 16 * (*v27 & 0xFFFFFFFE);
        v26 = v27;
        if ((*(_BYTE *)(v20 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)v10, v19, a1, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v78, a7, a8, a9, a4);
LABEL_29:
  if (byte_1ECF4C6B7)
  {
    v57 = ((unint64_t)v84 & 0xFFFE000000000002) != 0
        ? 0
        : 16 * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C);
    if (v13)
      v58 = (v13 & 1) != 0 ? (WTF::StringImpl *)(v13 & 0xFFFFFFFFFFFFFFFELL) : *(WTF::StringImpl **)(v13 + 8);
    else
      v58 = 0;
    JSC::ICEvent::ICEvent((uint64_t)&v88, (uint64_t **)v11, (const WTF::StringImpl *)0x18, v57, v58, v84 == (const WTF::StringImpl *)v78[0], v33, v34);
    JSC::ICEvent::log((JSC::ICEvent *)&v88, v59, v60, v61, v62, v63, v64, v65);
    v66 = v90;
    v90 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
  }
  if ((!*(_DWORD *)(v11 + 80)
     || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v28, v29, v30, v31, v32, v33, v34))
    && v14 == *(unsigned __int8 *)(a3 + 122))
  {
    if (!v18)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      return *(_QWORD *)(v11 + 16);
    }
    v87 = v13;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      return *(_QWORD *)(v11 + 16);
    }
    v41 = *(unsigned __int8 *)(a3 + 125);
    if (v41 != 255)
      *(_BYTE *)(a3 + 125) = ++v41;
    if (xmmword_1ECF4C260 < v41)
    {
      *(_BYTE *)(a3 + 125) = 0;
      v53 = *(unsigned __int8 *)(a3 + 126);
      v54 = BYTE4(xmmword_1ECF4C260) << v53;
      v55 = v54;
      if (v54 == 255)
        LOBYTE(v54) = -2;
      if (v55 >> v53 == BYTE4(xmmword_1ECF4C260))
        v56 = v54;
      else
        v56 = -2;
      *(_BYTE *)(a3 + 124) = v56;
      if (v53 != 255)
        *(_BYTE *)(a3 + 126) = v53 + 1;
      *(_BYTE *)(a3 + 127) = 0;
      goto LABEL_69;
    }
    if (!*(_BYTE *)(a3 + 127))
    {
LABEL_69:
      JSC::repatchPutBy((uint64_t *)v10, v15, v84, (const JSC::PropertyTable *)v18, v13, (unint64_t)v78, a3, 1, v35);
      return *(_QWORD *)(v11 + 16);
    }
    --*(_BYTE *)(a3 + 127);
    v86 = 0;
    v85 = v18 >> 4;
    v42 = (unsigned __int8 *)(a3 + 128);
    if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
      goto LABEL_72;
    __clrex();
LABEL_51:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
    while (1)
    {
      v44 = *(_DWORD *)(a3 + 96);
      if (!v44)
        break;
      v90 = (WTF::StringImpl *)&v85;
      v91 = &v87;
      v92 = &v86;
      v88 = (JSC::VM *)&v85;
      v89 = &v86;
      if (v44 != -1)
        goto LABEL_57;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_72:
      if (__stxr(1u, v42))
        goto LABEL_51;
    }
    if (*(_QWORD *)(a3 + 16))
      v44 = 1;
    else
      v44 = 2;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_DWORD *)(a3 + 96) = v44;
    v90 = (WTF::StringImpl *)&v85;
    v91 = &v87;
    v92 = &v86;
    v88 = (JSC::VM *)&v85;
    v89 = &v86;
LABEL_57:
    v93 = &v88;
    ((void (*)(JSC::VM ***))off_1E3596010[v44])(&v93);
    v51 = __ldxr(v42);
    if (v51 == 1)
    {
      if (!__stlxr(0, v42))
        goto LABEL_66;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v45, v46, v47, v48, v49, v50);
LABEL_66:
    if (!v86)
      return *(_QWORD *)(v11 + 16);
    if (v15)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v15 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v11 + 192, v15);
        if (!v86)
          return *(_QWORD *)(v11 + 16);
      }
    }
    goto LABEL_69;
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutByIdDirectStrictOptimize(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v27;
  unsigned __int8 *v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  char v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::JSCell *v62;
  _QWORD v63[2];
  int v64;
  __int16 v65;
  char v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  int *v72;
  char *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  char *v76;
  int **v77;
  uint64_t vars0;

  v12 = *(JSC::ExecutableBase **)(a3 + 56);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(unsigned __int8 *)(a3 + 122);
  v62 = *(JSC::JSCell **)(v14 + 16);
  v63[0] = 0;
  if ((*(_WORD *)(*((_QWORD *)v62 + 7) + 28) & 0x3000) == 0x1000)
    v17 = 2;
  else
    v17 = 1;
  v63[1] = a2;
  v64 = -1;
  v65 = 1;
  v66 = v17;
  v67 = 1;
  v68 = 0;
  if (v15)
  {
    if ((v15 & 1) != 0)
      v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
    else
      v18 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned __int8 *)(a2 + 5);
  v20 = v19;
  if (v19 == 26)
  {
    if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2160) == v18)
    {
      v67 = 0;
      v38 = *(_QWORD *)(a2 + 24);
      if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v38 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v13, v12, (const JSC::PropertyTable *)v18, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v23 = 0;
      goto LABEL_23;
    }
    v20 = *(unsigned __int8 *)(a2 + 5);
  }
  v22 = (_DWORD *)a2;
  if (v20 == 32)
    v22 = *(_DWORD **)(a2 + 16);
  v23 = 16 * (*v22 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v23 + 0x12) & 0x10) != 0
    || (v18 >> 4)
    && ((v18 >> 4) & ~*(_DWORD *)(16 * (*v22 & 0xFFFFFFFE) + 0x20)) == 0
    && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v23, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8), v24)
    && (v72 = (int *)v18, v25 = JSC::PropertyTable::get(v24, (uint64_t *)&v72), (_DWORD)v25 != -1)
    && (v25 & 0x800000000) != 0
    || v19 != 26
    && ((*(_BYTE *)(v23 + 10) & 0x20) != 0 && (*(_BYTE *)(v23 + 18) & 0x40) == 0
     || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v23 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
  {
    v67 = 0;
    v72 = (int *)a1;
    v73 = 0;
    v74 = 0;
    v75 = 0x700000000;
    (*(void (**)(uint64_t, JSC::ExecutableBase *, unint64_t, int **, _QWORD))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x90))(a2, v12, v18, &v72, v65 & 1);
  }
  else
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v13, v18, a1, 0, (uint64_t)v63, a7, a8, a9);
  }
LABEL_23:
  if (byte_1ECF4C6B7)
  {
    if (v15)
      v44 = (v15 & 1) != 0 ? (WTF::StringImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL) : *(WTF::StringImpl **)(v15 + 8);
    else
      v44 = 0;
    JSC::ICEvent::ICEvent((uint64_t)&v72, (uint64_t **)v13, (const WTF::StringImpl *)0x19, 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C), v44, v63[0] == a2, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v72, v45, v46, v47, v48, v49, v50, v51);
    v53 = v74;
    v74 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v52, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_25;
  v43 = *(_DWORD *)(v13 + 80);
  if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_25:
    if (v16 == *(unsigned __int8 *)(a3 + 122))
    {
      if (!v23)
      {
        *(_WORD *)(a3 + 129) |= 0x10u;
        return *(_QWORD *)(v13 + 16);
      }
      v71 = v15;
      *(_WORD *)(a3 + 129) |= 4u;
      if (*(_BYTE *)(a3 + 124))
      {
        --*(_BYTE *)(a3 + 124);
        return *(_QWORD *)(v13 + 16);
      }
      v27 = *(unsigned __int8 *)(a3 + 125);
      if (v27 != 255)
        *(_BYTE *)(a3 + 125) = ++v27;
      if (xmmword_1ECF4C260 < v27)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v39 = *(unsigned __int8 *)(a3 + 126);
        v40 = BYTE4(xmmword_1ECF4C260) << v39;
        v41 = v40;
        if (v40 == 255)
          LOBYTE(v40) = -2;
        if (v41 >> v39 == BYTE4(xmmword_1ECF4C260))
          v42 = v40;
        else
          v42 = -2;
        *(_BYTE *)(a3 + 124) = v42;
        if (v39 != 255)
          *(_BYTE *)(a3 + 126) = v39 + 1;
        *(_BYTE *)(a3 + 127) = 0;
        goto LABEL_53;
      }
      if (!*(_BYTE *)(a3 + 127))
      {
LABEL_53:
        JSC::repatchPutBy((uint64_t *)v12, (unint64_t)v62, (const WTF::StringImpl *)a2, (const JSC::PropertyTable *)v23, v15, (unint64_t)v63, a3, 4, a9.n128_f64[0]);
        return *(_QWORD *)(v13 + 16);
      }
      --*(_BYTE *)(a3 + 127);
      v70 = 0;
      v69 = v23 >> 4;
      v28 = (unsigned __int8 *)(a3 + 128);
      if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
        goto LABEL_56;
      __clrex();
LABEL_37:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
      while (1)
      {
        v30 = *(_DWORD *)(a3 + 96);
        if (!v30)
          break;
        v74 = (WTF::StringImpl *)&v69;
        v75 = (uint64_t)&v71;
        v76 = &v70;
        v72 = &v69;
        v73 = &v70;
        if (v30 != -1)
          goto LABEL_43;
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_56:
        if (__stxr(1u, v28))
          goto LABEL_37;
      }
      if (*(_QWORD *)(a3 + 16))
        v30 = 1;
      else
        v30 = 2;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      *(_DWORD *)(a3 + 96) = v30;
      v74 = (WTF::StringImpl *)&v69;
      v75 = (uint64_t)&v71;
      v76 = &v70;
      v72 = &v69;
      v73 = &v70;
LABEL_43:
      v77 = &v72;
      ((void (*)(int ***))off_1E3596010[v30])(&v77);
      v37 = __ldxr(v28);
      if (v37 == 1)
      {
        if (!__stlxr(0, v28))
          goto LABEL_51;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v31, v32, v33, v34, v35, v36);
LABEL_51:
      if (!v70)
        return *(_QWORD *)(v13 + 16);
      if (*(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)v62 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v62);
        if (!v70)
          return *(_QWORD *)(v13 + 16);
      }
      goto LABEL_53;
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByIdDirectSloppyOptimize(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ExecutableBase *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::AtomStringImpl *v26;
  unsigned int v28;
  unsigned __int8 *v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  char v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSCell *v61;
  _QWORD v62[2];
  int v63;
  __int16 v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  int *v71;
  char *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  char *v75;
  int **v76;
  uint64_t vars0;

  v12 = *(JSC::ExecutableBase **)(a3 + 56);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(unsigned __int8 *)(a3 + 122);
  v61 = *(JSC::JSCell **)(v14 + 16);
  v62[0] = 0;
  if ((*(_WORD *)(*((_QWORD *)v61 + 7) + 28) & 0x3000) == 0x1000)
    v17 = 2;
  else
    v17 = 1;
  v62[1] = a2;
  v63 = -1;
  v64 = 0;
  v65 = v17;
  v66 = 1;
  v67 = 0;
  if (v15)
  {
    if ((v15 & 1) != 0)
      v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
    else
      v18 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned __int8 *)(a2 + 5);
  v20 = v19;
  if (v19 == 26)
  {
    if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2160) == v18)
    {
      v66 = 0;
      v39 = *(_QWORD *)(a2 + 24);
      if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v39 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v13, v12, (const JSC::PropertyTable *)v18, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v23 = 0;
      goto LABEL_23;
    }
    v20 = *(unsigned __int8 *)(a2 + 5);
  }
  v22 = (_DWORD *)a2;
  if (v20 == 32)
    v22 = *(_DWORD **)(a2 + 16);
  v23 = 16 * (*v22 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v23 + 0x12) & 0x10) != 0
    || (v18 >> 4)
    && ((v18 >> 4) & ~*(_DWORD *)(16 * (*v22 & 0xFFFFFFFE) + 0x20)) == 0
    && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v23, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8), v24)
    && (v71 = (int *)v18, v25 = JSC::PropertyTable::get(v24, (uint64_t *)&v71), (_DWORD)v25 != -1)
    && (v25 & 0x800000000) != 0
    || v19 != 26
    && ((*(_BYTE *)(v23 + 10) & 0x20) != 0 && (*(_BYTE *)(v23 + 18) & 0x40) == 0
     || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v23 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
  {
    v66 = 0;
    v71 = (int *)a1;
    v72 = 0;
    v73 = 0;
    v74 = 0x700000000;
    (*(void (**)(uint64_t, JSC::ExecutableBase *, unint64_t, int **, _QWORD))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x90))(a2, v12, v18, &v71, v64 & 1);
  }
  else
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v13, v18, a1, 0, (uint64_t)v62, a7, a8, a9);
  }
LABEL_23:
  if (byte_1ECF4C6B7)
  {
    if (v15)
      v44 = (v15 & 1) != 0 ? (WTF::StringImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL) : *(WTF::StringImpl **)(v15 + 8);
    else
      v44 = 0;
    JSC::ICEvent::ICEvent((uint64_t)&v71, (uint64_t **)v13, (const WTF::StringImpl *)0x1A, 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C), v44, v62[0] == a2, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v71, v45, v46, v47, v48, v49, v50, v51);
    v52 = v73;
    v73 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v26, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)v26, a3, (uint64_t)a4, a5, a6, a7, a8)
    || v16 != *(unsigned __int8 *)(a3 + 122))
  {
    return *(_QWORD *)(v13 + 16);
  }
  if (!v23)
  {
    *(_WORD *)(a3 + 129) |= 0x10u;
    return *(_QWORD *)(v13 + 16);
  }
  v70 = v15;
  *(_WORD *)(a3 + 129) |= 4u;
  if (*(_BYTE *)(a3 + 124))
  {
    --*(_BYTE *)(a3 + 124);
    return *(_QWORD *)(v13 + 16);
  }
  v28 = *(unsigned __int8 *)(a3 + 125);
  if (v28 != 255)
    *(_BYTE *)(a3 + 125) = ++v28;
  if (xmmword_1ECF4C260 < v28)
  {
    *(_BYTE *)(a3 + 125) = 0;
    v40 = *(unsigned __int8 *)(a3 + 126);
    v41 = BYTE4(xmmword_1ECF4C260) << v40;
    v42 = v41;
    if (v41 == 255)
      LOBYTE(v41) = -2;
    if (v42 >> v40 == BYTE4(xmmword_1ECF4C260))
      v43 = v41;
    else
      v43 = -2;
    *(_BYTE *)(a3 + 124) = v43;
    if (v40 != 255)
      *(_BYTE *)(a3 + 126) = v40 + 1;
    *(_BYTE *)(a3 + 127) = 0;
    goto LABEL_53;
  }
  if (!*(_BYTE *)(a3 + 127))
  {
LABEL_53:
    JSC::repatchPutBy((uint64_t *)v12, (unint64_t)v61, (const WTF::StringImpl *)a2, (const JSC::PropertyTable *)v23, v15, (unint64_t)v62, a3, 5, a9.n128_f64[0]);
    return *(_QWORD *)(v13 + 16);
  }
  --*(_BYTE *)(a3 + 127);
  v69 = 0;
  v68 = v23 >> 4;
  v29 = (unsigned __int8 *)(a3 + 128);
  if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
    goto LABEL_56;
  __clrex();
LABEL_37:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
  while (1)
  {
    v31 = *(_DWORD *)(a3 + 96);
    if (!v31)
      break;
    v73 = (WTF::StringImpl *)&v68;
    v74 = (uint64_t)&v70;
    v75 = &v69;
    v71 = &v68;
    v72 = &v69;
    if (v31 != -1)
      goto LABEL_43;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_56:
    if (__stxr(1u, v29))
      goto LABEL_37;
  }
  if (*(_QWORD *)(a3 + 16))
    v31 = 1;
  else
    v31 = 2;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 96) = v31;
  v73 = (WTF::StringImpl *)&v68;
  v74 = (uint64_t)&v70;
  v75 = &v69;
  v71 = &v68;
  v72 = &v69;
LABEL_43:
  v76 = &v71;
  ((void (*)(int ***))off_1E3596010[v31])(&v76);
  v38 = __ldxr(v29);
  if (v38 == 1)
  {
    if (!__stlxr(0, v29))
      goto LABEL_51;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v32, v33, v34, v35, v36, v37);
LABEL_51:
  if (v69)
  {
    if (*(_DWORD *)(v13 + 760) < *((unsigned __int8 *)v61 + 7))
      goto LABEL_53;
    JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v61);
    if (v69)
      goto LABEL_53;
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByIdDefinePrivateFieldStrictGaveUp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  _QWORD v47[2];
  int v48;
  __int16 v49;
  char v50;
  char v51;
  uint64_t v52;
  unsigned __int8 *v53;
  WTF::StringImpl *v54;
  uint64_t vars0;

  v10 = *(JSC::VM ***)(a3 + 56);
  v11 = v10[7];
  v12 = vars0;
  *((_QWORD *)v11 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v13 = *(_QWORD *)(a3 + 16);
  v53 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v44 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v53, (JSC::JSGlobalObject *)v10, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_27;
  }
  v14 = (int *)a2;
  if (a2[5] <= 0x16u)
  {
    v44 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, v10, a3, a4, a5, a6, a7, a8);
LABEL_27:
    v14 = (int *)v44;
  }
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_4;
  v45 = *((_DWORD *)v11 + 20);
  if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = *((_QWORD *)v11 + 2);
  if (!result)
  {
LABEL_4:
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 56) + 28) & 0x3000) == 0x1000)
      v15 = 2;
    else
      v15 = 1;
    v47[0] = 0;
    v47[1] = v14;
    v48 = -1;
    v49 = 1;
    v50 = v15;
    v51 = 1;
    v52 = 0;
    if (v13)
    {
      if ((v13 & 1) != 0)
        v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
      else
        v16 = *(_QWORD *)(v13 + 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = v10[7];
    if (!(v16 >> 4)
      || ((v16 >> 4) & ~*(_DWORD *)(16 * (*v14 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v14 & 0xFFFFFFFE)), v10[7], a3, a4, a5, a6, a7, a8), !v18)|| (v54 = (WTF::StringImpl *)v16, JSC::PropertyTable::get(v18, (uint64_t *)&v54) == -1))
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v14, (uint64_t)v17, v16, a1, 0, (uint64_t)v47, a7, a8, a9);
    }
    else
    {
      v19 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v19 = 0x2600000002;
      *(_QWORD *)(v19 + 8) = "Cannot redefine existing private field";
      *(_DWORD *)(v19 + 16) = 4;
      v54 = (WTF::StringImpl *)v19;
      v27 = JSC::createTypeError((uint64_t)v10, &v54, (uint64_t)JSC::defaultSourceAppender, 0);
      v28 = v54;
      v54 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      JSC::VM::throwException(v17, (JSC::JSGlobalObject *)v10, v27, v22, v23, v24, v25, v26);
    }
    if (*((_DWORD *)v11 + 20))
    {
      v46 = *((_DWORD *)v11 + 20);
      if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, v29, v30, v31, v32, v33, v34);
    }
    return *((_QWORD *)v11 + 2);
  }
  return result;
}

uint64_t operationPutByIdDefinePrivateFieldStrictOptimize(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM **v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  JSC::JSCell *v17;
  int v18;
  char v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t result;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  unsigned int v95;
  char v96;
  int v97;
  int v98;
  uint64_t v99;
  JSC::JSCell *v100;
  _QWORD v101[2];
  int v102;
  char v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  char v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  char *v113;
  WTF::StringImpl *v114;
  uint64_t *v115;
  char *v116;
  WTF::StringImpl **v117;
  uint64_t vars0;

  v12 = *(JSC::VM ***)(a3 + 56);
  v13 = v12[7];
  v14 = vars0;
  *((_QWORD *)v13 + 5) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  v15 = *(_QWORD *)(a3 + 16);
  v108 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v92 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v108, (JSC::JSGlobalObject *)v12, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_72;
  }
  v16 = (int *)a2;
  if (a2[5] <= 0x16u)
  {
    v92 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, v12, a3, a4, a5, a6, a7, a8);
LABEL_72:
    v16 = (int *)v92;
  }
  if (!*((_DWORD *)v13 + 20))
    goto LABEL_4;
  v97 = *((_DWORD *)v13 + 20);
  if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = *((_QWORD *)v13 + 2);
  if (!result)
  {
LABEL_4:
    v17 = *(JSC::JSCell **)(v14 + 16);
    v18 = *v16;
    v100 = v17;
    v101[0] = 0;
    if ((*(_WORD *)(*((_QWORD *)v17 + 7) + 28) & 0x3000) == 0x1000)
      v19 = 2;
    else
      v19 = 1;
    v101[1] = v16;
    v102 = -1;
    v103 = v103 & 0xF8 | 1;
    v104 = 0;
    v105 = v19;
    v106 = 1;
    v107 = 0;
    if (v15)
    {
      if ((v15 & 1) != 0)
        v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
      else
        v20 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = v12[7];
    if (!(v20 >> 4)
      || ((v20 >> 4) & ~*(_DWORD *)(16 * (*v16 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v16 & 0xFFFFFFFE)), v12[7], a3, a4, a5, a6, a7, a8), !v22)|| (v112 = (WTF::StringImpl *)v20, JSC::PropertyTable::get(v22, (uint64_t *)&v112) == -1))
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v16, (uint64_t)v21, v20, a1, 0, (uint64_t)v101, a7, a8, a9);
    }
    else
    {
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x2600000002;
      *(_QWORD *)(v23 + 8) = "Cannot redefine existing private field";
      *(_DWORD *)(v23 + 16) = 4;
      v112 = (WTF::StringImpl *)v23;
      v31 = JSC::createTypeError((uint64_t)v12, &v112, (uint64_t)JSC::defaultSourceAppender, 0);
      v32 = v112;
      v112 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::~StringImpl(v32, v24, v25, v26, v27, v28, v29, v30);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
      }
      JSC::VM::throwException(v21, (JSC::JSGlobalObject *)v12, v31, v26, v27, v28, v29, v30);
    }
    if (*((_DWORD *)v13 + 20))
    {
      v98 = *((_DWORD *)v13 + 20);
      if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)v34, v35, v36, v37, v38, v39);
      if (*((_QWORD *)v13 + 2))
        return *((_QWORD *)v13 + 2);
    }
    v41 = v18 & 0xFFFFFFFE;
    if (!byte_1ECF4C6B7)
      goto LABEL_35;
    v42 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    if ((v15 & 1) != 0)
      v43 = (int *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    else
      v43 = *(int **)(v15 + 8);
    v44 = (unsigned __int8 *)v101[0];
    LODWORD(v112) = 29;
    v113 = (char *)v42;
    v45 = v43[4];
    if ((v45 & 0x20) != 0)
    {
      v46 = *v43 + 2;
    }
    else
    {
      if ((v45 & 0x10) != 0)
      {
        *v43 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v13 + 5239), (unint64_t)v43, v34, v35, v36, v37, v38, v39, &v117);
        v43 = (int *)v117;
      }
      v46 = *v43;
      *v43 += 2;
      if (!v46)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v43, v33, (uint64_t)v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
LABEL_29:
        v114 = (WTF::StringImpl *)v43;
        if (v44 == a2)
          v47 = 1;
        else
          v47 = 2;
        LODWORD(v115) = v47;
        JSC::ICEvent::log((JSC::ICEvent *)&v112, (uint64_t)v33, (uint64_t)v34, v35, v36, v37, v38, v39);
        v55 = v114;
        v114 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            if ((_DWORD)v41)
            {
LABEL_36:
              v111 = v15;
              *(_WORD *)(a3 + 129) |= 4u;
              if (*(_BYTE *)(a3 + 124))
              {
                --*(_BYTE *)(a3 + 124);
                return *((_QWORD *)v13 + 2);
              }
              v56 = *(unsigned __int8 *)(a3 + 125);
              if (v56 != 255)
                *(_BYTE *)(a3 + 125) = ++v56;
              if (xmmword_1ECF4C260 < v56)
              {
                *(_BYTE *)(a3 + 125) = 0;
                v93 = *(unsigned __int8 *)(a3 + 126);
                v94 = BYTE4(xmmword_1ECF4C260) << v93;
                v95 = v94;
                if (v94 == 255)
                  LOBYTE(v94) = -2;
                if (v95 >> v93 == BYTE4(xmmword_1ECF4C260))
                  v96 = v94;
                else
                  v96 = -2;
                *(_BYTE *)(a3 + 124) = v96;
                if (v93 != 255)
                  *(_BYTE *)(a3 + 126) = v93 + 1;
                *(_BYTE *)(a3 + 127) = 0;
              }
              else if (*(_BYTE *)(a3 + 127))
              {
                --*(_BYTE *)(a3 + 127);
                v110 = 0;
                v109 = v18 & 0xFFFFFFFE;
                v57 = (unsigned __int8 *)(a3 + 128);
                if (__ldaxr((unsigned __int8 *)(a3 + 128)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v57))
                {
                  goto LABEL_49;
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_49:
                v75 = *(_DWORD *)(a3 + 96);
                if (v75)
                {
                  v114 = (WTF::StringImpl *)&v109;
                  v115 = &v111;
                  v116 = &v110;
                  v112 = (WTF::StringImpl *)&v109;
                  v113 = &v110;
                  if (v75 == -1)
                  {
                    v99 = std::__throw_bad_variant_access[abi:sn180100]();
                    return operationPutByIdSetPrivateFieldStrictGaveUp(v99);
                  }
                }
                else
                {
                  if (*(_QWORD *)(a3 + 16))
                    v75 = 1;
                  else
                    v75 = 2;
                  *(_QWORD *)(a3 + 80) = 0;
                  *(_QWORD *)(a3 + 88) = 0;
                  *(_DWORD *)(a3 + 96) = v75;
                  v114 = (WTF::StringImpl *)&v109;
                  v115 = &v111;
                  v116 = &v110;
                  v112 = (WTF::StringImpl *)&v109;
                  v113 = &v110;
                }
                v117 = &v112;
                ((void (*)(WTF::StringImpl ***))off_1E3596010[v75])(&v117);
                v82 = __ldxr(v57);
                if (v82 == 1)
                {
                  if (!__stlxr(0, v57))
                    goto LABEL_60;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v76, v77, v78, v79, v80, v81);
LABEL_60:
                if (!v110)
                  return *((_QWORD *)v13 + 2);
                if (*((_DWORD *)v13 + 190) >= *((unsigned __int8 *)v100 + 7))
                {
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, (unint64_t)v100);
                  if (!v110)
                    return *((_QWORD *)v13 + 2);
                }
              }
              JSC::repatchPutBy((uint64_t *)v12, (unint64_t)v100, (const WTF::StringImpl *)a2, (const JSC::PropertyTable *)(16 * v41), v15, (unint64_t)v101, a3, 8, v40);
              return *((_QWORD *)v13 + 2);
            }
LABEL_45:
            *(_WORD *)(a3 + 129) |= 0x10u;
            return *((_QWORD *)v13 + 2);
          }
          *(_DWORD *)v55 -= 2;
        }
LABEL_35:
        if ((_DWORD)v41)
          goto LABEL_36;
        goto LABEL_45;
      }
    }
    *v43 = v46;
    goto LABEL_29;
  }
  return result;
}

uint64_t operationPutByIdSetPrivateFieldStrictGaveUp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  uint64_t result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  _QWORD v49[2];
  int v50;
  __int16 v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  WTF::StringImpl *v56;
  uint64_t vars0;

  v9 = *(JSC::VM ***)(a3 + 56);
  v10 = v9[7];
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v12 = *(_QWORD *)(a3 + 16);
  v55 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v46 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v55, (JSC::JSGlobalObject *)v9, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_27;
  }
  v13 = (int *)a2;
  if (a2[5] <= 0x16u)
  {
    v46 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, v9, a3, a4, a5, a6, a7, a8);
LABEL_27:
    v13 = (int *)v46;
  }
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_4;
  v47 = *((_DWORD *)v10 + 20);
  if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = *((_QWORD *)v10 + 2);
  if (!result)
  {
LABEL_4:
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56) + 28) & 0x3000) == 0x1000)
      v14 = 2;
    else
      v14 = 1;
    v49[0] = 0;
    v49[1] = v13;
    v50 = -1;
    v51 = 1;
    v52 = v14;
    v53 = 1;
    v54 = 0;
    if (v12)
    {
      if ((v12 & 1) != 0)
        v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
      else
        v15 = *(_QWORD *)(v12 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = v9[7];
    if (!(v15 >> 4)
      || ((v15 >> 4) & ~*(_DWORD *)(16 * (*v13 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v13 & 0xFFFFFFFE)), v9[7], a3, a4, a5, a6, a7, a8), !v17)|| (v56 = (WTF::StringImpl *)v15, JSC::PropertyTable::get(v17, (uint64_t *)&v56) == -1))
    {
      v27 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v27 = 0x2300000002;
      *(_QWORD *)(v27 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v27 + 16) = 4;
      v56 = (WTF::StringImpl *)v27;
      v35 = JSC::createTypeError((uint64_t)v9, &v56, (uint64_t)JSC::defaultSourceAppender, 0);
      v36 = v56;
      v56 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
      JSC::VM::throwException(v16, (JSC::JSGlobalObject *)v9, v35, v30, v31, v32, v33, v34);
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v13, (uint64_t)v16, v15, a1, 0, (uint64_t)v49, v18, v19, v20);
    }
    if (*((_DWORD *)v10 + 20))
    {
      v48 = *((_DWORD *)v10 + 20);
      if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    }
    return *((_QWORD *)v10 + 2);
  }
  return result;
}

uint64_t operationPutByIdSetPrivateFieldStrictOptimize(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  JSC::JSCell *v16;
  int v17;
  char v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t result;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  char v98;
  int v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  const WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  JSC::JSCell *v110;
  _QWORD v111[2];
  int v112;
  char v113;
  char v114;
  char v115;
  char v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int v119;
  char v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  char *v123;
  WTF::StringImpl *v124;
  uint64_t *v125;
  char *v126;
  WTF::StringImpl **v127;
  uint64_t vars0;

  v11 = *(JSC::VM ***)(a3 + 56);
  v12 = v11[7];
  v13 = vars0;
  *((_QWORD *)v12 + 5) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  v14 = *(_QWORD *)(a3 + 16);
  v118 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v94 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v118, (JSC::JSGlobalObject *)v11, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_72;
  }
  v15 = (int *)a2;
  if (a2[5] <= 0x16u)
  {
    v94 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, v11, a3, a4, a5, a6, a7, a8);
LABEL_72:
    v15 = (int *)v94;
  }
  if (!*((_DWORD *)v12 + 20))
    goto LABEL_4;
  v99 = *((_DWORD *)v12 + 20);
  if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = *((_QWORD *)v12 + 2);
  if (!result)
  {
LABEL_4:
    v16 = *(JSC::JSCell **)(v13 + 16);
    v17 = *v15;
    v110 = v16;
    v111[0] = 0;
    if ((*(_WORD *)(*((_QWORD *)v16 + 7) + 28) & 0x3000) == 0x1000)
      v18 = 2;
    else
      v18 = 1;
    v111[1] = v15;
    v112 = -1;
    v113 = v113 & 0xF8 | 1;
    v114 = 0;
    v115 = v18;
    v116 = 1;
    v117 = 0;
    if (v14)
    {
      if ((v14 & 1) != 0)
        v19 = v14 & 0xFFFFFFFFFFFFFFFELL;
      else
        v19 = *(_QWORD *)(v14 + 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = v11[7];
    if (!(v19 >> 4)
      || ((v19 >> 4) & ~*(_DWORD *)(16 * (*v15 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v15 & 0xFFFFFFFE)), v11[7], a3, a4, a5, a6, a7, a8), !v21)|| (v122 = (WTF::StringImpl *)v19, JSC::PropertyTable::get(v21, (uint64_t *)&v122) == -1))
    {
      v33 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v33 = 0x2300000002;
      *(_QWORD *)(v33 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v33 + 16) = 4;
      v122 = (WTF::StringImpl *)v33;
      v41 = JSC::createTypeError((uint64_t)v11, &v122, (uint64_t)JSC::defaultSourceAppender, 0);
      v42 = v122;
      v122 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      JSC::VM::throwException(v20, (JSC::JSGlobalObject *)v11, v41, v36, v37, v38, v39, v40);
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v15, (uint64_t)v20, v19, a1, 0, (uint64_t)v111, v22, v23, v24);
    }
    if (*((_DWORD *)v12 + 20))
    {
      v100 = *((_DWORD *)v12 + 20);
      if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v26, v27, v28, v29, v30, v31);
      if (*((_QWORD *)v12 + 2))
        return *((_QWORD *)v12 + 2);
    }
    v43 = v17 & 0xFFFFFFFE;
    if (!byte_1ECF4C6B7)
      goto LABEL_35;
    v44 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    if ((v14 & 1) != 0)
      v45 = (int *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    else
      v45 = *(int **)(v14 + 8);
    v46 = (unsigned __int8 *)v111[0];
    LODWORD(v122) = 45;
    v123 = (char *)v44;
    v47 = v45[4];
    if ((v47 & 0x20) != 0)
    {
      v48 = *v45 + 2;
    }
    else
    {
      if ((v47 & 0x10) != 0)
      {
        *v45 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v12 + 5239), (unint64_t)v45, v26, v27, v28, v29, v30, v31, &v127);
        v45 = (int *)v127;
      }
      v48 = *v45;
      *v45 += 2;
      if (!v48)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v25, (uint64_t)v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
LABEL_29:
        v124 = (WTF::StringImpl *)v45;
        if (v46 == a2)
          v49 = 1;
        else
          v49 = 2;
        LODWORD(v125) = v49;
        JSC::ICEvent::log((JSC::ICEvent *)&v122, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30, v31);
        v57 = v124;
        v124 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
            if ((_DWORD)v43)
            {
LABEL_36:
              v121 = v14;
              *(_WORD *)(a3 + 129) |= 4u;
              if (*(_BYTE *)(a3 + 124))
              {
                --*(_BYTE *)(a3 + 124);
                return *((_QWORD *)v12 + 2);
              }
              v58 = *(unsigned __int8 *)(a3 + 125);
              if (v58 != 255)
                *(_BYTE *)(a3 + 125) = ++v58;
              if (xmmword_1ECF4C260 < v58)
              {
                *(_BYTE *)(a3 + 125) = 0;
                v95 = *(unsigned __int8 *)(a3 + 126);
                v96 = BYTE4(xmmword_1ECF4C260) << v95;
                v97 = v96;
                if (v96 == 255)
                  LOBYTE(v96) = -2;
                if (v97 >> v95 == BYTE4(xmmword_1ECF4C260))
                  v98 = v96;
                else
                  v98 = -2;
                *(_BYTE *)(a3 + 124) = v98;
                if (v95 != 255)
                  *(_BYTE *)(a3 + 126) = v95 + 1;
                *(_BYTE *)(a3 + 127) = 0;
              }
              else if (*(_BYTE *)(a3 + 127))
              {
                --*(_BYTE *)(a3 + 127);
                v120 = 0;
                v119 = v17 & 0xFFFFFFFE;
                v59 = (unsigned __int8 *)(a3 + 128);
                if (__ldaxr((unsigned __int8 *)(a3 + 128)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v59))
                {
                  goto LABEL_49;
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_49:
                v77 = *(_DWORD *)(a3 + 96);
                if (v77)
                {
                  v124 = (WTF::StringImpl *)&v119;
                  v125 = &v121;
                  v126 = &v120;
                  v122 = (WTF::StringImpl *)&v119;
                  v123 = &v120;
                  if (v77 == -1)
                  {
                    v101 = std::__throw_bad_variant_access[abi:sn180100]();
                    return operationPutByValStrictOptimize(v101, v102, v103, v104, v105, v106, v107, v108, v109);
                  }
                }
                else
                {
                  if (*(_QWORD *)(a3 + 16))
                    v77 = 1;
                  else
                    v77 = 2;
                  *(_QWORD *)(a3 + 80) = 0;
                  *(_QWORD *)(a3 + 88) = 0;
                  *(_DWORD *)(a3 + 96) = v77;
                  v124 = (WTF::StringImpl *)&v119;
                  v125 = &v121;
                  v126 = &v120;
                  v122 = (WTF::StringImpl *)&v119;
                  v123 = &v120;
                }
                v127 = &v122;
                ((void (*)(WTF::StringImpl ***))off_1E3596010[v77])(&v127);
                v84 = __ldxr(v59);
                if (v84 == 1)
                {
                  if (!__stlxr(0, v59))
                    goto LABEL_60;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v78, v79, v80, v81, v82, v83);
LABEL_60:
                if (!v120)
                  return *((_QWORD *)v12 + 2);
                if (*((_DWORD *)v12 + 190) >= *((unsigned __int8 *)v110 + 7))
                {
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, (unint64_t)v110);
                  if (!v120)
                    return *((_QWORD *)v12 + 2);
                }
              }
              JSC::repatchPutBy((uint64_t *)v11, (unint64_t)v110, (const WTF::StringImpl *)a2, (const JSC::PropertyTable *)(16 * v43), v14, (unint64_t)v111, a3, 10, v32);
              return *((_QWORD *)v12 + 2);
            }
LABEL_45:
            *(_WORD *)(a3 + 129) |= 0x10u;
            return *((_QWORD *)v12 + 2);
          }
          *(_DWORD *)v57 -= 2;
        }
LABEL_35:
        if ((_DWORD)v43)
          goto LABEL_36;
        goto LABEL_45;
      }
    }
    *v45 = v48;
    goto LABEL_29;
  }
  return result;
}

uint64_t operationPutByValStrictOptimize(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  const JSC::PropertyTable *v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  double v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned int v43;
  BOOL v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  const char *v62;
  unsigned int v63;
  int v65;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  char v83;
  int v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  char v98;
  int v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143[2];
  int v144;
  char v145;
  char v146;
  char v147;
  char v148;
  uint64_t v149;
  unsigned int v150;
  char v151;
  unint64_t v152;
  WTF::StringImpl *v153;
  unsigned int *v154;
  unsigned int *v155;
  WTF::StringImpl ***v156;
  unsigned int *v157;
  WTF::StringImpl **v158;
  uint64_t vars0;

  v9 = a5;
  v10 = a3;
  v13 = *(_QWORD *)(a4 + 56);
  v14 = *(_QWORD *)(v13 + 56);
  v15 = vars0;
  *(_QWORD *)(v14 + 40) = vars0;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(a4 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    goto LABEL_228;
  v17 = *(_QWORD *)(v15 + 16);
  if (a2 < 0xFFFE000000000000 || (*(_BYTE *)(a1 + 4) & 0x10) != 0)
    goto LABEL_5;
  v75 = *(_DWORD *)a1 & 0xFFFFFFFE;
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_5;
  }
  v158 = 0;
  *(_WORD *)(a4 + 129) |= 4u;
  if (!*(_BYTE *)(a4 + 124))
  {
    v76 = *(unsigned __int8 *)(a4 + 125);
    if (v76 != 255)
      *(_BYTE *)(a4 + 125) = ++v76;
    if (xmmword_1ECF4C260 < v76)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v95 = *(unsigned __int8 *)(a4 + 126);
      v96 = BYTE4(xmmword_1ECF4C260) << v95;
      v97 = v96;
      if (v96 == 255)
        LOBYTE(v96) = -2;
      if (v97 >> v95 == BYTE4(xmmword_1ECF4C260))
        v98 = v96;
      else
        v98 = -2;
      *(_BYTE *)(a4 + 124) = v98;
      if (v95 != 255)
        *(_BYTE *)(a4 + 126) = v95 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_145;
    }
    if (!*(_BYTE *)(a4 + 127))
    {
LABEL_145:
      if (v9)
        JSC::ArrayProfile::computeUpdatedPrediction(v9, v17, 16 * v75, (int8x8_t)a9.n128_u64[0]);
      JSC::repatchArrayPutByVal((uint64_t *)v13, (unsigned __int8 *)v17, a1, a2, a4, 2, a7, a8, a9.n128_f64[0]);
      goto LABEL_5;
    }
    --*(_BYTE *)(a4 + 127);
    LOBYTE(v150) = 0;
    v142 = v75;
    LODWORD(v152) = v75;
    v19 = a4 + 128;
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
LABEL_132:
      v78 = *(_DWORD *)(a4 + 96);
      if (v78)
      {
        v155 = (unsigned int *)&v152;
        v156 = &v158;
        v157 = &v150;
        v153 = (WTF::StringImpl *)&v152;
        v154 = &v150;
        if (v78 == -1)
          goto LABEL_122;
      }
      else
      {
        if (*(_QWORD *)(a4 + 16))
          v78 = 1;
        else
          v78 = 2;
        *(_QWORD *)(a4 + 80) = 0;
        *(_QWORD *)(a4 + 88) = 0;
        *(_DWORD *)(a4 + 96) = v78;
        v155 = (unsigned int *)&v152;
        v156 = &v158;
        v157 = &v150;
        v153 = (WTF::StringImpl *)&v152;
        v154 = &v150;
      }
      v143[0] = (unsigned __int8 *)&v153;
      ((void (*)(unsigned __int8 **))off_1E3596010[v78])(v143);
      v79 = __ldxr((unsigned __int8 *)v19);
      if (v79 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
          goto LABEL_142;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_142:
      if (!(_BYTE)v150)
        goto LABEL_5;
      if (v17)
      {
        v75 = v142;
        if (*(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v17 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v14 + 192, v17);
          if (!(_BYTE)v150)
            goto LABEL_5;
        }
      }
      else
      {
        v75 = v142;
      }
      goto LABEL_145;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
    goto LABEL_132;
  }
  --*(_BYTE *)(a4 + 124);
LABEL_5:
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_228;
  v18 = *(unsigned __int8 *)(a2 + 5);
  if (v18 == 2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19 || (v19 & 1) != 0 || (*(_BYTE *)(v19 + 16) & 0x10) == 0)
      goto LABEL_228;
    goto LABEL_10;
  }
  if (v18 != 4)
  {
LABEL_228:
    JSC::putByVal((JSC::JSGlobalObject *)v13, a1, a2, (unint64_t)v10, v9, 0, a7, a8, a9);
    return *(_QWORD *)(v14 + 16);
  }
  v48 = *(_QWORD *)(v13 + 56);
  v49 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  v143[0] = (unsigned __int8 *)v49;
  if (*(_DWORD *)(v48 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v48 + 41952) + 8);
      if (!v19)
        goto LABEL_12;
      goto LABEL_10;
    }
    v49 = (uint64_t)v143[0];
  }
  if ((v49 & 0xFFFE000000000002) != 0)
  {
LABEL_164:
    v49 = (uint64_t)JSC::JSValue::toStringSlowCase(v143, v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_73;
  }
  v50 = *(unsigned __int8 *)(v49 + 5);
  if (v50 != 2)
  {
    if (v50 == 4)
    {
      v19 = *(_QWORD *)(v49 + 8);
      v84 = *(_DWORD *)v19;
      *(_DWORD *)v19 += 4;
      v20 = v84 + 2;
      if (v20)
        goto LABEL_11;
      v85 = (WTF::StringImpl *)v19;
LABEL_163:
      WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      goto LABEL_12;
    }
    goto LABEL_164;
  }
LABEL_73:
  if (*(_DWORD *)(v48 + 80))
  {
    v108 = v49;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v49 = v108;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 0;
      goto LABEL_12;
    }
  }
  v19 = *(_QWORD *)(v49 + 8);
  v51 = *(_QWORD *)(v13 + 56);
  if ((v19 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v49, (JSC::JSGlobalObject *)v13);
    if (*(_DWORD *)(v51 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v19 = 0;
      v85 = v153;
      v153 = 0;
      if (!v85)
        goto LABEL_12;
    }
    else
    {
      v19 = (unint64_t)v153;
      if (!v153)
        goto LABEL_12;
      *(_DWORD *)v153 += 2;
      v153 = 0;
      v85 = (WTF::StringImpl *)v19;
    }
    if (*(_DWORD *)v85 != 2)
    {
      *(_DWORD *)v85 -= 2;
      goto LABEL_12;
    }
    goto LABEL_163;
  }
  if ((*(_BYTE *)(v19 + 16) & 0x10) == 0)
  {
    v141 = v49;
    v52 = *(WTF::StringImpl **)(v51 + 64768);
    if (v52 != (WTF::StringImpl *)v19)
    {
      *(_DWORD *)v19 += 2;
      *(_QWORD *)(v51 + 64768) = v19;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      v53 = *(WTF::StringImpl **)(v141 + 8);
      if (v53)
      {
        if ((*((_BYTE *)v53 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v53 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v53, a3, a4, a5, a6, a7, a8, (WTF *)&v153);
          v53 = v153;
        }
      }
      v54 = *(WTF::StringImpl **)(v51 + 64776);
      *(_QWORD *)(v51 + 64776) = v53;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v141 + 8) + 16) & 0x10) == 0)
    {
      v55 = *(WTF::StringImpl **)(v51 + 64776);
      *(_DWORD *)v55 += 2;
      v153 = v55;
      __dmb(0xAu);
      v56 = *(WTF::StringImpl **)(v141 + 8);
      *(_QWORD *)(v141 + 8) = v153;
      v153 = v56;
      v57 = (_QWORD *)(v51 + 808);
      v58 = *(unsigned int *)(v51 + 820);
      if ((_DWORD)v58 == *(_DWORD *)(v51 + 816))
      {
        v60 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v153);
        v58 = *(unsigned int *)(v51 + 820);
        v59 = (WTF::StringImpl **)(*(_QWORD *)(v51 + 808) + 8 * v58);
        v56 = *v60;
      }
      else
      {
        v59 = (WTF::StringImpl **)(*v57 + 8 * v58);
        v60 = &v153;
      }
      *v60 = 0;
      *v59 = v56;
      *(_DWORD *)(v51 + 820) = v58 + 1;
      v61 = v153;
      v153 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::~StringImpl(v61, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
    }
    v19 = *(_QWORD *)(v51 + 64776);
  }
LABEL_10:
  v20 = *(_DWORD *)v19 + 2;
LABEL_11:
  *(_DWORD *)v19 = v20;
LABEL_12:
  if (*(_DWORD *)(v14 + 80))
  {
    v94 = *(_DWORD *)(v14 + 80);
    if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (v19)
  {
    if (*(_BYTE *)(a2 + 5) != 4)
    {
      v21 = *(_DWORD *)(v19 + 16);
      if ((v21 & 0x20) == 0)
      {
        v22 = *(_BYTE **)(v19 + 8);
        v23 = *(unsigned int *)(v19 + 4);
        if ((v21 & 4) != 0)
        {
          if (!(_DWORD)v23)
            goto LABEL_19;
          v24 = *v22 - 48;
          if (v24 > 9 || v23 >= 2 && *v22 == 48)
            goto LABEL_19;
          v126 = v23 - 1;
          v127 = v22 + 1;
          while (v126)
          {
            if (v24 <= 0x19999999)
            {
              v128 = *v127 - 48;
              if (v128 <= 9)
              {
                v44 = __CFADD__(v128, 10 * v24);
                v24 = v128 + 10 * v24;
                --v126;
                ++v127;
                if (!v44)
                  continue;
              }
            }
            goto LABEL_19;
          }
        }
        else
        {
          if (!(_DWORD)v23)
            goto LABEL_19;
          v24 = *(unsigned __int16 *)v22 - 48;
          if (v24 > 9 || *(_WORD *)v22 == 48 && v23 > 1)
            goto LABEL_19;
          v41 = v23 - 1;
          v42 = (unsigned __int16 *)(v22 + 2);
          while (v41)
          {
            if (v24 <= 0x19999999)
            {
              v43 = *v42 - 48;
              if (v43 <= 9)
              {
                v44 = __CFADD__(v43, 10 * v24);
                v24 = v43 + 10 * v24;
                --v41;
                ++v42;
                if (!v44)
                  continue;
              }
            }
            goto LABEL_19;
          }
        }
        if (v24 != -1)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
          goto LABEL_228;
        }
      }
    }
  }
LABEL_19:
  v25 = *(unsigned __int8 *)(a4 + 122);
  if ((*(_WORD *)(*(_QWORD *)(v17 + 56) + 28) & 0x3000) == 0x1000)
    v26 = 2;
  else
    v26 = 1;
  v143[0] = 0;
  v143[1] = (unsigned __int8 *)a1;
  v144 = -1;
  v145 = v145 & 0xF8 | 1;
  v146 = 0;
  v147 = v26;
  v148 = 1;
  v149 = 0;
  v27 = (int *)a1;
  if (*(_BYTE *)(a1 + 5) == 32)
    v27 = *(int **)(a1 + 16);
  v28 = *v27;
  v29 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if ((*(_WORD *)(v29 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t, const JSC::PropertyTable *, unsigned __int8 **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) + 0x48))(a1, v13, v19, v10, v143);
    goto LABEL_41;
  }
  v30 = *(_QWORD *)(v13 + 56);
  if (!v19)
    goto LABEL_30;
  v31 = *(_DWORD *)(v19 + 16);
  if ((v31 & 0x20) != 0)
    goto LABEL_30;
  v32 = *(_BYTE **)(v19 + 8);
  v33 = *(unsigned int *)(v19 + 4);
  if ((v31 & 4) != 0)
  {
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = *v32 - 48;
    if (v34 > 9 || v33 >= 2 && *v32 == 48)
      goto LABEL_30;
    v138 = v32 + 1;
    v139 = v33 - 1;
    while (v139)
    {
      if (v34 <= 0x19999999)
      {
        v140 = *v138 - 48;
        if (v140 <= 9)
        {
          v44 = __CFADD__(v140, 10 * v34);
          v34 = v140 + 10 * (_DWORD)v34;
          ++v138;
          --v139;
          if (!v44)
            continue;
        }
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = *(unsigned __int16 *)v32 - 48;
    if (v34 > 9 || *(_WORD *)v32 == 48 && v33 > 1)
      goto LABEL_30;
    v45 = (unsigned __int16 *)(v32 + 2);
    v46 = v33 - 1;
    while (v46)
    {
      if (v34 <= 0x19999999)
      {
        v47 = *v45 - 48;
        if (v47 <= 9)
        {
          v44 = __CFADD__(v47, 10 * v34);
          v34 = v47 + 10 * (_DWORD)v34;
          ++v45;
          --v46;
          if (!v44)
            continue;
        }
      }
      goto LABEL_30;
    }
  }
  if ((_DWORD)v34 != -1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x50))(a1, v13, v34, v10, 1);
    goto LABEL_41;
  }
LABEL_30:
  if (*(_QWORD *)(*(_QWORD *)(v30 + 41952) + 16) != v19)
  {
    v35 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10);
    if ((v35 & 0x10) == 0)
    {
      v36 = (_DWORD *)a1;
      while ((*(_WORD *)(v29 + 12) & 0x800) == 0 && (v36 == (_DWORD *)a1 || (*(_WORD *)(v29 + 12) & 0x400) == 0))
      {
        v37 = *(_DWORD **)(v29 + 48);
        if (!v37)
          v37 = (_DWORD *)*((_QWORD *)v36 + 2);
        if (v37 == (_DWORD *)2)
        {
          if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (v35 & 0x400000) != 0)
          {
            v153 = *(WTF::StringImpl **)(v13 + 56);
            v62 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, v30, v19, (uint64_t)v10, 0, (uint64_t)v143, a7, a8, a9);
            if (a2 && (v145 & 1) != 0)
              JSC::throwTypeError(v13, &v153, (uint64_t)v62, a2);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a1, v13, v19, (uint64_t)v10, (uint64_t)v143, a9, a6, a7, a8);
          }
          goto LABEL_41;
        }
        v29 = 16 * (*v37 & 0xFFFFFFFE);
        v36 = v37;
        if ((*(_BYTE *)(v29 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a1, v13, v19, v10, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v143, a6, a7, a8, a9);
LABEL_41:
  if (*(_DWORD *)(v14 + 80))
  {
    v99 = *(_DWORD *)(v14 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (v25 != *(unsigned __int8 *)(a4 + 122))
    goto LABEL_50;
  v39 = *(unsigned __int8 *)(a2 + 5);
  if (v39 != 2)
  {
    if (v39 == 4)
      goto LABEL_47;
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x198786FB4);
  }
  v40 = *(_QWORD *)(a2 + 8);
  if (!v40 || (v40 & 1) != 0 || (*(_BYTE *)(v40 + 16) & 0x10) == 0)
    goto LABEL_111;
LABEL_47:
  v9 = v28 & 0xFFFFFFFE;
  if ((v28 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_50;
  }
  v152 = a2;
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
    goto LABEL_50;
  }
  v63 = *(unsigned __int8 *)(a4 + 125);
  if (v63 != 255)
    *(_BYTE *)(a4 + 125) = ++v63;
  if (xmmword_1ECF4C260 < v63)
  {
    *(_BYTE *)(a4 + 125) = 0;
    v80 = *(unsigned __int8 *)(a4 + 126);
    v81 = BYTE4(xmmword_1ECF4C260) << v80;
    v82 = v81;
    if (v81 == 255)
      LOBYTE(v81) = -2;
    if (v82 >> v80 == BYTE4(xmmword_1ECF4C260))
      v83 = v81;
    else
      v83 = -2;
    *(_BYTE *)(a4 + 124) = v83;
    if (v80 != 255)
      *(_BYTE *)(a4 + 126) = v80 + 1;
    *(_BYTE *)(a4 + 127) = 0;
    goto LABEL_120;
  }
  if (!*(_BYTE *)(a4 + 127))
  {
LABEL_120:
    JSC::repatchPutBy((uint64_t *)v13, v17, (const WTF::StringImpl *)a1, (const JSC::PropertyTable *)(16 * v9), a2, (unint64_t)v143, a4, 2, v38);
    goto LABEL_50;
  }
  --*(_BYTE *)(a4 + 127);
  v151 = 0;
  v150 = v28 & 0xFFFFFFFE;
  v10 = (const JSC::PropertyTable *)(a4 + 128);
  if (!__ldaxr((unsigned __int8 *)(a4 + 128)))
    goto LABEL_123;
  __clrex();
LABEL_100:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
  while (1)
  {
    v65 = *(_DWORD *)(a4 + 96);
    if (!v65)
      break;
    v155 = &v150;
    v156 = (WTF::StringImpl ***)&v152;
    v157 = (unsigned int *)&v151;
    v153 = (WTF::StringImpl *)&v150;
    v154 = (unsigned int *)&v151;
    if (v65 != -1)
      goto LABEL_106;
LABEL_122:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_123:
    if (__stxr(1u, (unsigned __int8 *)v10))
      goto LABEL_100;
  }
  if (*(_QWORD *)(a4 + 16))
    v65 = 1;
  else
    v65 = 2;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 96) = v65;
  v155 = &v150;
  v156 = (WTF::StringImpl ***)&v152;
  v157 = (unsigned int *)&v151;
  v153 = (WTF::StringImpl *)&v150;
  v154 = (unsigned int *)&v151;
LABEL_106:
  v158 = &v153;
  ((void (*)(WTF::StringImpl ***))off_1E3596010[v65])(&v158);
  v66 = __ldxr((unsigned __int8 *)v10);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_117;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_117:
  if (v151)
  {
    if (!v17)
      goto LABEL_120;
    if (*(_DWORD *)(v14 + 760) < *(unsigned __int8 *)(v17 + 7))
      goto LABEL_120;
    JSC::Heap::writeBarrierSlowPath(v14 + 192, v17);
    if (v151)
      goto LABEL_120;
  }
LABEL_50:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return *(_QWORD *)(v14 + 16);
}

uint64_t operationPutByValSloppyOptimize(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  const JSC::PropertyTable *v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  double v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned int v43;
  BOOL v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  const char *v62;
  unsigned int v63;
  int v65;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  char v83;
  int v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  char v98;
  int v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143[2];
  int v144;
  char v145;
  char v146;
  char v147;
  char v148;
  uint64_t v149;
  unsigned int v150;
  char v151;
  unint64_t v152;
  WTF::StringImpl *v153;
  unsigned int *v154;
  unsigned int *v155;
  WTF::StringImpl ***v156;
  unsigned int *v157;
  WTF::StringImpl **v158;
  uint64_t vars0;

  v9 = a5;
  v10 = a3;
  v13 = *(_QWORD *)(a4 + 56);
  v14 = *(_QWORD *)(v13 + 56);
  v15 = vars0;
  *(_QWORD *)(v14 + 40) = vars0;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(a4 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    goto LABEL_228;
  v17 = *(_QWORD *)(v15 + 16);
  if (a2 < 0xFFFE000000000000 || (*(_BYTE *)(a1 + 4) & 0x10) != 0)
    goto LABEL_5;
  v75 = *(_DWORD *)a1 & 0xFFFFFFFE;
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_5;
  }
  v158 = 0;
  *(_WORD *)(a4 + 129) |= 4u;
  if (!*(_BYTE *)(a4 + 124))
  {
    v76 = *(unsigned __int8 *)(a4 + 125);
    if (v76 != 255)
      *(_BYTE *)(a4 + 125) = ++v76;
    if (xmmword_1ECF4C260 < v76)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v95 = *(unsigned __int8 *)(a4 + 126);
      v96 = BYTE4(xmmword_1ECF4C260) << v95;
      v97 = v96;
      if (v96 == 255)
        LOBYTE(v96) = -2;
      if (v97 >> v95 == BYTE4(xmmword_1ECF4C260))
        v98 = v96;
      else
        v98 = -2;
      *(_BYTE *)(a4 + 124) = v98;
      if (v95 != 255)
        *(_BYTE *)(a4 + 126) = v95 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_145;
    }
    if (!*(_BYTE *)(a4 + 127))
    {
LABEL_145:
      if (v9)
        JSC::ArrayProfile::computeUpdatedPrediction(v9, v17, 16 * v75, (int8x8_t)a9.n128_u64[0]);
      JSC::repatchArrayPutByVal((uint64_t *)v13, (unsigned __int8 *)v17, a1, a2, a4, 3, a7, a8, a9.n128_f64[0]);
      goto LABEL_5;
    }
    --*(_BYTE *)(a4 + 127);
    LOBYTE(v150) = 0;
    v142 = v75;
    LODWORD(v152) = v75;
    v19 = a4 + 128;
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
LABEL_132:
      v78 = *(_DWORD *)(a4 + 96);
      if (v78)
      {
        v155 = (unsigned int *)&v152;
        v156 = &v158;
        v157 = &v150;
        v153 = (WTF::StringImpl *)&v152;
        v154 = &v150;
        if (v78 == -1)
          goto LABEL_122;
      }
      else
      {
        if (*(_QWORD *)(a4 + 16))
          v78 = 1;
        else
          v78 = 2;
        *(_QWORD *)(a4 + 80) = 0;
        *(_QWORD *)(a4 + 88) = 0;
        *(_DWORD *)(a4 + 96) = v78;
        v155 = (unsigned int *)&v152;
        v156 = &v158;
        v157 = &v150;
        v153 = (WTF::StringImpl *)&v152;
        v154 = &v150;
      }
      v143[0] = (unsigned __int8 *)&v153;
      ((void (*)(unsigned __int8 **))off_1E3596010[v78])(v143);
      v79 = __ldxr((unsigned __int8 *)v19);
      if (v79 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
          goto LABEL_142;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_142:
      if (!(_BYTE)v150)
        goto LABEL_5;
      if (v17)
      {
        v75 = v142;
        if (*(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v17 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v14 + 192, v17);
          if (!(_BYTE)v150)
            goto LABEL_5;
        }
      }
      else
      {
        v75 = v142;
      }
      goto LABEL_145;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
    goto LABEL_132;
  }
  --*(_BYTE *)(a4 + 124);
LABEL_5:
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_228;
  v18 = *(unsigned __int8 *)(a2 + 5);
  if (v18 == 2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19 || (v19 & 1) != 0 || (*(_BYTE *)(v19 + 16) & 0x10) == 0)
      goto LABEL_228;
    goto LABEL_10;
  }
  if (v18 != 4)
  {
LABEL_228:
    JSC::putByVal((JSC::JSGlobalObject *)v13, a1, a2, (unint64_t)v10, v9, 1uLL, a7, a8, a9);
    return *(_QWORD *)(v14 + 16);
  }
  v48 = *(_QWORD *)(v13 + 56);
  v49 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  v143[0] = (unsigned __int8 *)v49;
  if (*(_DWORD *)(v48 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v48 + 41952) + 8);
      if (!v19)
        goto LABEL_12;
      goto LABEL_10;
    }
    v49 = (uint64_t)v143[0];
  }
  if ((v49 & 0xFFFE000000000002) != 0)
  {
LABEL_164:
    v49 = (uint64_t)JSC::JSValue::toStringSlowCase(v143, v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_73;
  }
  v50 = *(unsigned __int8 *)(v49 + 5);
  if (v50 != 2)
  {
    if (v50 == 4)
    {
      v19 = *(_QWORD *)(v49 + 8);
      v84 = *(_DWORD *)v19;
      *(_DWORD *)v19 += 4;
      v20 = v84 + 2;
      if (v20)
        goto LABEL_11;
      v85 = (WTF::StringImpl *)v19;
LABEL_163:
      WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      goto LABEL_12;
    }
    goto LABEL_164;
  }
LABEL_73:
  if (*(_DWORD *)(v48 + 80))
  {
    v108 = v49;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v49 = v108;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 0;
      goto LABEL_12;
    }
  }
  v19 = *(_QWORD *)(v49 + 8);
  v51 = *(_QWORD *)(v13 + 56);
  if ((v19 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v49, (JSC::JSGlobalObject *)v13);
    if (*(_DWORD *)(v51 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v19 = 0;
      v85 = v153;
      v153 = 0;
      if (!v85)
        goto LABEL_12;
    }
    else
    {
      v19 = (unint64_t)v153;
      if (!v153)
        goto LABEL_12;
      *(_DWORD *)v153 += 2;
      v153 = 0;
      v85 = (WTF::StringImpl *)v19;
    }
    if (*(_DWORD *)v85 != 2)
    {
      *(_DWORD *)v85 -= 2;
      goto LABEL_12;
    }
    goto LABEL_163;
  }
  if ((*(_BYTE *)(v19 + 16) & 0x10) == 0)
  {
    v141 = v49;
    v52 = *(WTF::StringImpl **)(v51 + 64768);
    if (v52 != (WTF::StringImpl *)v19)
    {
      *(_DWORD *)v19 += 2;
      *(_QWORD *)(v51 + 64768) = v19;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      v53 = *(WTF::StringImpl **)(v141 + 8);
      if (v53)
      {
        if ((*((_BYTE *)v53 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v53 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v53, a3, a4, a5, a6, a7, a8, (WTF *)&v153);
          v53 = v153;
        }
      }
      v54 = *(WTF::StringImpl **)(v51 + 64776);
      *(_QWORD *)(v51 + 64776) = v53;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v141 + 8) + 16) & 0x10) == 0)
    {
      v55 = *(WTF::StringImpl **)(v51 + 64776);
      *(_DWORD *)v55 += 2;
      v153 = v55;
      __dmb(0xAu);
      v56 = *(WTF::StringImpl **)(v141 + 8);
      *(_QWORD *)(v141 + 8) = v153;
      v153 = v56;
      v57 = (_QWORD *)(v51 + 808);
      v58 = *(unsigned int *)(v51 + 820);
      if ((_DWORD)v58 == *(_DWORD *)(v51 + 816))
      {
        v60 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v153);
        v58 = *(unsigned int *)(v51 + 820);
        v59 = (WTF::StringImpl **)(*(_QWORD *)(v51 + 808) + 8 * v58);
        v56 = *v60;
      }
      else
      {
        v59 = (WTF::StringImpl **)(*v57 + 8 * v58);
        v60 = &v153;
      }
      *v60 = 0;
      *v59 = v56;
      *(_DWORD *)(v51 + 820) = v58 + 1;
      v61 = v153;
      v153 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::~StringImpl(v61, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
    }
    v19 = *(_QWORD *)(v51 + 64776);
  }
LABEL_10:
  v20 = *(_DWORD *)v19 + 2;
LABEL_11:
  *(_DWORD *)v19 = v20;
LABEL_12:
  if (*(_DWORD *)(v14 + 80))
  {
    v94 = *(_DWORD *)(v14 + 80);
    if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (v19)
  {
    if (*(_BYTE *)(a2 + 5) != 4)
    {
      v21 = *(_DWORD *)(v19 + 16);
      if ((v21 & 0x20) == 0)
      {
        v22 = *(_BYTE **)(v19 + 8);
        v23 = *(unsigned int *)(v19 + 4);
        if ((v21 & 4) != 0)
        {
          if (!(_DWORD)v23)
            goto LABEL_19;
          v24 = *v22 - 48;
          if (v24 > 9 || v23 >= 2 && *v22 == 48)
            goto LABEL_19;
          v126 = v23 - 1;
          v127 = v22 + 1;
          while (v126)
          {
            if (v24 <= 0x19999999)
            {
              v128 = *v127 - 48;
              if (v128 <= 9)
              {
                v44 = __CFADD__(v128, 10 * v24);
                v24 = v128 + 10 * v24;
                --v126;
                ++v127;
                if (!v44)
                  continue;
              }
            }
            goto LABEL_19;
          }
        }
        else
        {
          if (!(_DWORD)v23)
            goto LABEL_19;
          v24 = *(unsigned __int16 *)v22 - 48;
          if (v24 > 9 || *(_WORD *)v22 == 48 && v23 > 1)
            goto LABEL_19;
          v41 = v23 - 1;
          v42 = (unsigned __int16 *)(v22 + 2);
          while (v41)
          {
            if (v24 <= 0x19999999)
            {
              v43 = *v42 - 48;
              if (v43 <= 9)
              {
                v44 = __CFADD__(v43, 10 * v24);
                v24 = v43 + 10 * v24;
                --v41;
                ++v42;
                if (!v44)
                  continue;
              }
            }
            goto LABEL_19;
          }
        }
        if (v24 != -1)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
          goto LABEL_228;
        }
      }
    }
  }
LABEL_19:
  v25 = *(unsigned __int8 *)(a4 + 122);
  if ((*(_WORD *)(*(_QWORD *)(v17 + 56) + 28) & 0x3000) == 0x1000)
    v26 = 2;
  else
    v26 = 1;
  v143[0] = 0;
  v143[1] = (unsigned __int8 *)a1;
  v144 = -1;
  v145 &= 0xF8u;
  v146 = 0;
  v147 = v26;
  v148 = 1;
  v149 = 0;
  v27 = (int *)a1;
  if (*(_BYTE *)(a1 + 5) == 32)
    v27 = *(int **)(a1 + 16);
  v28 = *v27;
  v29 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if ((*(_WORD *)(v29 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t, const JSC::PropertyTable *, unsigned __int8 **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) + 0x48))(a1, v13, v19, v10, v143);
    goto LABEL_41;
  }
  v30 = *(_QWORD *)(v13 + 56);
  if (!v19)
    goto LABEL_30;
  v31 = *(_DWORD *)(v19 + 16);
  if ((v31 & 0x20) != 0)
    goto LABEL_30;
  v32 = *(_BYTE **)(v19 + 8);
  v33 = *(unsigned int *)(v19 + 4);
  if ((v31 & 4) != 0)
  {
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = *v32 - 48;
    if (v34 > 9 || v33 >= 2 && *v32 == 48)
      goto LABEL_30;
    v138 = v32 + 1;
    v139 = v33 - 1;
    while (v139)
    {
      if (v34 <= 0x19999999)
      {
        v140 = *v138 - 48;
        if (v140 <= 9)
        {
          v44 = __CFADD__(v140, 10 * v34);
          v34 = v140 + 10 * (_DWORD)v34;
          ++v138;
          --v139;
          if (!v44)
            continue;
        }
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = *(unsigned __int16 *)v32 - 48;
    if (v34 > 9 || *(_WORD *)v32 == 48 && v33 > 1)
      goto LABEL_30;
    v45 = (unsigned __int16 *)(v32 + 2);
    v46 = v33 - 1;
    while (v46)
    {
      if (v34 <= 0x19999999)
      {
        v47 = *v45 - 48;
        if (v47 <= 9)
        {
          v44 = __CFADD__(v47, 10 * v34);
          v34 = v47 + 10 * (_DWORD)v34;
          ++v45;
          --v46;
          if (!v44)
            continue;
        }
      }
      goto LABEL_30;
    }
  }
  if ((_DWORD)v34 != -1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x50))(a1, v13, v34, v10, 0);
    goto LABEL_41;
  }
LABEL_30:
  if (*(_QWORD *)(*(_QWORD *)(v30 + 41952) + 16) != v19)
  {
    v35 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10);
    if ((v35 & 0x10) == 0)
    {
      v36 = (_DWORD *)a1;
      while ((*(_WORD *)(v29 + 12) & 0x800) == 0 && (v36 == (_DWORD *)a1 || (*(_WORD *)(v29 + 12) & 0x400) == 0))
      {
        v37 = *(_DWORD **)(v29 + 48);
        if (!v37)
          v37 = (_DWORD *)*((_QWORD *)v36 + 2);
        if (v37 == (_DWORD *)2)
        {
          if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (v35 & 0x400000) != 0)
          {
            v153 = *(WTF::StringImpl **)(v13 + 56);
            v62 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, v30, v19, (uint64_t)v10, 0, (uint64_t)v143, a7, a8, a9);
            if (a2 && (v145 & 1) != 0)
              JSC::throwTypeError(v13, &v153, (uint64_t)v62, a2);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a1, v13, v19, (uint64_t)v10, (uint64_t)v143, a9, a6, a7, a8);
          }
          goto LABEL_41;
        }
        v29 = 16 * (*v37 & 0xFFFFFFFE);
        v36 = v37;
        if ((*(_BYTE *)(v29 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a1, v13, v19, v10, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v143, a6, a7, a8, a9);
LABEL_41:
  if (*(_DWORD *)(v14 + 80))
  {
    v99 = *(_DWORD *)(v14 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (v25 != *(unsigned __int8 *)(a4 + 122))
    goto LABEL_50;
  v39 = *(unsigned __int8 *)(a2 + 5);
  if (v39 != 2)
  {
    if (v39 == 4)
      goto LABEL_47;
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x198787C10);
  }
  v40 = *(_QWORD *)(a2 + 8);
  if (!v40 || (v40 & 1) != 0 || (*(_BYTE *)(v40 + 16) & 0x10) == 0)
    goto LABEL_111;
LABEL_47:
  v9 = v28 & 0xFFFFFFFE;
  if ((v28 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_50;
  }
  v152 = a2;
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
    goto LABEL_50;
  }
  v63 = *(unsigned __int8 *)(a4 + 125);
  if (v63 != 255)
    *(_BYTE *)(a4 + 125) = ++v63;
  if (xmmword_1ECF4C260 < v63)
  {
    *(_BYTE *)(a4 + 125) = 0;
    v80 = *(unsigned __int8 *)(a4 + 126);
    v81 = BYTE4(xmmword_1ECF4C260) << v80;
    v82 = v81;
    if (v81 == 255)
      LOBYTE(v81) = -2;
    if (v82 >> v80 == BYTE4(xmmword_1ECF4C260))
      v83 = v81;
    else
      v83 = -2;
    *(_BYTE *)(a4 + 124) = v83;
    if (v80 != 255)
      *(_BYTE *)(a4 + 126) = v80 + 1;
    *(_BYTE *)(a4 + 127) = 0;
    goto LABEL_120;
  }
  if (!*(_BYTE *)(a4 + 127))
  {
LABEL_120:
    JSC::repatchPutBy((uint64_t *)v13, v17, (const WTF::StringImpl *)a1, (const JSC::PropertyTable *)(16 * v9), a2, (unint64_t)v143, a4, 3, v38);
    goto LABEL_50;
  }
  --*(_BYTE *)(a4 + 127);
  v151 = 0;
  v150 = v28 & 0xFFFFFFFE;
  v10 = (const JSC::PropertyTable *)(a4 + 128);
  if (!__ldaxr((unsigned __int8 *)(a4 + 128)))
    goto LABEL_123;
  __clrex();
LABEL_100:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
  while (1)
  {
    v65 = *(_DWORD *)(a4 + 96);
    if (!v65)
      break;
    v155 = &v150;
    v156 = (WTF::StringImpl ***)&v152;
    v157 = (unsigned int *)&v151;
    v153 = (WTF::StringImpl *)&v150;
    v154 = (unsigned int *)&v151;
    if (v65 != -1)
      goto LABEL_106;
LABEL_122:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_123:
    if (__stxr(1u, (unsigned __int8 *)v10))
      goto LABEL_100;
  }
  if (*(_QWORD *)(a4 + 16))
    v65 = 1;
  else
    v65 = 2;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 96) = v65;
  v155 = &v150;
  v156 = (WTF::StringImpl ***)&v152;
  v157 = (unsigned int *)&v151;
  v153 = (WTF::StringImpl *)&v150;
  v154 = (unsigned int *)&v151;
LABEL_106:
  v158 = &v153;
  ((void (*)(WTF::StringImpl ***))off_1E3596010[v65])(&v158);
  v66 = __ldxr((unsigned __int8 *)v10);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_117;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_117:
  if (v151)
  {
    if (!v17)
      goto LABEL_120;
    if (*(_DWORD *)(v14 + 760) < *(unsigned __int8 *)(v17 + 7))
      goto LABEL_120;
    JSC::Heap::writeBarrierSlowPath(v14 + 192, v17);
    if (v151)
      goto LABEL_120;
  }
LABEL_50:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return *(_QWORD *)(v14 + 16);
}

uint64_t operationDirectPutByValStrictOptimize(unint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  WTF::StringImpl *v16;
  unsigned __int8 *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v23;
  unsigned __int8 *v24;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  int v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  int v86;
  int v87;
  unsigned int v88;
  char v89;
  WTF *v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const JSC::PropertyTable *v132;
  uint64_t v133;
  WTF **v134;
  unsigned __int8 *v135[2];
  int v136;
  char v137;
  char v138;
  char v139;
  char v140;
  uint64_t v141;
  int v142;
  char v143;
  unint64_t v144;
  WTF *v145;
  int *v146;
  unint64_t *v147;
  uint64_t v148;
  int *v149;
  WTF **v150;
  uint64_t vars0;

  v9 = 0xFFFE000000000002;
  v10 = *(_QWORD *)(a4 + 56);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a4 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    __break(0xC471u);
    JUMPOUT(0x1987884CCLL);
  }
  v14 = (WTF *)a5;
  v16 = a3;
  v18 = *(unsigned __int8 **)(v12 + 16);
  if (a2 >= 0xFFFE000000000000 && (*(_BYTE *)(a1 + 4) & 0x10) == 0)
  {
    v19 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) != 0)
    {
      v150 = 0;
      *(_WORD *)(a4 + 129) |= 4u;
      if (!*(_BYTE *)(a4 + 124))
      {
        v23 = *(unsigned __int8 *)(a4 + 125);
        if (v23 != 255)
          *(_BYTE *)(a4 + 125) = ++v23;
        if (xmmword_1ECF4C260 < v23)
        {
          *(_BYTE *)(a4 + 125) = 0;
          v52 = *(unsigned __int8 *)(a4 + 126);
          v53 = BYTE4(xmmword_1ECF4C260) << v52;
          v54 = v53;
          if (v53 == 255)
            LOBYTE(v53) = -2;
          if (v54 >> v52 == BYTE4(xmmword_1ECF4C260))
            v55 = v53;
          else
            v55 = -2;
          *(_BYTE *)(a4 + 124) = v55;
          if (v52 != 255)
            *(_BYTE *)(a4 + 126) = v52 + 1;
          *(_BYTE *)(a4 + 127) = 0;
        }
        else if (*(_BYTE *)(a4 + 127))
        {
          v134 = (WTF **)a5;
          v14 = (WTF *)v10;
          v10 = (uint64_t)a3;
          v24 = v18;
          --*(_BYTE *)(a4 + 127);
          LOBYTE(v142) = 0;
          LODWORD(v144) = v19;
          v21 = a4 + 128;
          if (!__ldaxr((unsigned __int8 *)(a4 + 128)))
            goto LABEL_42;
          __clrex();
          goto LABEL_21;
        }
        goto LABEL_37;
      }
      --*(_BYTE *)(a4 + 124);
    }
    else
    {
      *(_WORD *)(a4 + 129) |= 0x10u;
    }
  }
  while (1)
  {
    if ((a2 & v9) != 0)
      goto LABEL_13;
    v19 = (unint64_t)v18;
    v20 = *(unsigned __int8 *)(a2 + 5);
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(a2 + 8);
      if (!v21 || (v21 & 1) != 0 || (*(_BYTE *)(v21 + 16) & 0x10) == 0)
        goto LABEL_13;
LABEL_51:
      v33 = *(_DWORD *)v21 + 2;
LABEL_52:
      *(_DWORD *)v21 = v33;
      goto LABEL_53;
    }
    if (v20 != 4)
      goto LABEL_13;
    v29 = *(_QWORD *)(v10 + 56);
    v30 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v10, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v135[0] = (unsigned __int8 *)v30;
    if (*(_DWORD *)(v29 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v29 + 41952) + 8);
        if (!v21)
          goto LABEL_53;
        goto LABEL_51;
      }
      v30 = (uint64_t)v135[0];
    }
    if ((v30 & v9) != 0)
      goto LABEL_140;
    v31 = *(unsigned __int8 *)(v30 + 5);
    if (v31 != 2)
    {
      if (v31 == 4)
      {
        v21 = *(_QWORD *)(v30 + 8);
        v69 = *(_DWORD *)v21;
        *(_DWORD *)v21 += 4;
        v33 = v69 + 2;
        if (!v33)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          goto LABEL_53;
        }
        goto LABEL_52;
      }
LABEL_140:
      v30 = (uint64_t)JSC::JSValue::toStringSlowCase(v135, v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    }
    if (*(_DWORD *)(v29 + 80))
    {
      v111 = v30;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v30 = v111;
      if (hasExceptionsAfterHandlingTraps)
      {
        v21 = 0;
        goto LABEL_53;
      }
    }
    v21 = *(_QWORD *)(v30 + 8);
    v32 = *(_QWORD *)(v10 + 56);
    if ((v21 & 1) != 0)
    {
      HIDWORD(v134) = HIDWORD(v14);
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v30, (JSC::JSGlobalObject *)v10);
      if (*(_DWORD *)(v32 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v21 = 0;
        v85 = v145;
        v145 = 0;
        if (!v85)
          goto LABEL_53;
      }
      else
      {
        v21 = (unint64_t)v145;
        if (!v145)
          goto LABEL_53;
        *(_DWORD *)v145 += 2;
        v145 = 0;
        v85 = (WTF *)v21;
      }
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
      else
      {
        *(_DWORD *)v85 -= 2;
      }
    }
    else
    {
      if ((*(_BYTE *)(v21 + 16) & 0x10) != 0)
        goto LABEL_51;
      v134 = (WTF **)v30;
      if (*(_QWORD *)(v32 + 64768) != v21)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v32 + 64768), (WTF::AtomStringImpl *)v21, (uint64_t)a3, a4, a5, a6, a7, a8);
        v90 = v134[1];
        if (v90)
        {
          if ((*((_BYTE *)v90 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v90 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v90, a3, a4, a5, a6, a7, a8, (WTF *)&v145);
            v90 = v145;
          }
        }
        v91 = *(WTF::StringImpl **)(v32 + 64776);
        *(_QWORD *)(v32 + 64776) = v90;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
          {
            WTF::StringImpl::~StringImpl(v91, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
          }
          else
          {
            *(_DWORD *)v91 -= 2;
          }
        }
      }
      if ((*((_BYTE *)v134[1] + 16) & 0x10) == 0)
      {
        v92 = *(WTF **)(v32 + 64776);
        *(_DWORD *)v92 += 2;
        v145 = v92;
        __dmb(0xAu);
        v93 = v134[1];
        v134[1] = v145;
        v145 = v93;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v32 + 192, (unint64_t)&v145);
        v94 = v145;
        v145 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
          {
            WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
          }
          else
          {
            *(_DWORD *)v94 -= 2;
          }
        }
      }
      v21 = *(_QWORD *)(v32 + 64776);
      *(_DWORD *)v21 += 2;
    }
LABEL_53:
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_91;
    }
    if (v21)
    {
      if (*(_BYTE *)(a2 + 5) != 4)
      {
        v34 = *(_DWORD *)(v21 + 16);
        if ((v34 & 0x20) == 0)
        {
          v35 = *(_BYTE **)(v21 + 8);
          v36 = *(unsigned int *)(v21 + 4);
          if ((v34 & 4) != 0)
          {
            if (!(_DWORD)v36)
              goto LABEL_60;
            v37 = *v35 - 48;
            if (v37 > 9 || v36 >= 2 && *v35 == 48)
              goto LABEL_60;
            v121 = v36 - 1;
            v122 = v35 + 1;
            while (v121)
            {
              if (v37 <= 0x19999999)
              {
                v123 = *v122 - 48;
                if (v123 <= 9)
                {
                  v51 = __CFADD__(v123, 10 * v37);
                  v37 = v123 + 10 * v37;
                  --v121;
                  ++v122;
                  if (!v51)
                    continue;
                }
              }
              goto LABEL_60;
            }
          }
          else
          {
            if (!(_DWORD)v36)
              goto LABEL_60;
            v37 = *(unsigned __int16 *)v35 - 48;
            if (v37 > 9 || *(_WORD *)v35 == 48 && v36 > 1)
              goto LABEL_60;
            v48 = v36 - 1;
            v49 = (unsigned __int16 *)(v35 + 2);
            while (v48)
            {
              if (v37 <= 0x19999999)
              {
                v50 = *v49 - 48;
                if (v50 <= 9)
                {
                  v51 = __CFADD__(v50, 10 * v37);
                  v37 = v50 + 10 * v37;
                  --v48;
                  ++v49;
                  if (!v51)
                    continue;
                }
              }
              goto LABEL_60;
            }
          }
          if (v37 != -1)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
LABEL_13:
            JSC::directPutByVal((JSC::JSGlobalObject *)v10, a1, a2, v16, (uint64_t)v14, 0, a7, a8, a9);
            return *(_QWORD *)(v11 + 16);
          }
        }
      }
    }
LABEL_60:
    LODWORD(v134) = *(unsigned __int8 *)(a4 + 122);
    if ((*(_WORD *)(*(_QWORD *)(v19 + 56) + 28) & 0x3000) == 0x1000)
      v38 = 2;
    else
      v38 = 1;
    v135[0] = 0;
    v135[1] = (unsigned __int8 *)a1;
    v136 = -1;
    v137 = v137 & 0xF8 | 1;
    v138 = 0;
    v139 = v38;
    v140 = 1;
    v141 = 0;
    v39 = *(unsigned __int8 *)(a1 + 5);
    if (v39 == 32)
    {
      v14 = v16;
      v41 = 0;
      v42 = *(_DWORD **)(a1 + 16);
      v132 = (const JSC::PropertyTable *)(16 * (*v42 & 0xFFFFFFFE));
      LODWORD(v133) = *v42 & 0xFFFFFFFE;
      goto LABEL_72;
    }
    v133 = *(_DWORD *)a1 & 0xFFFFFFFE;
    v132 = (const JSC::PropertyTable *)(16 * v133);
    if (v39 != 26)
    {
      v14 = v16;
      v41 = 0;
      goto LABEL_71;
    }
    if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160) == v21)
    {
      v140 = 0;
      v56 = *(_QWORD *)(a1 + 24);
      if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v56 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a1, (JSC::FunctionRareData *)v11, (JSC::ExecutableBase *)v10, (const JSC::PropertyTable *)v21, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v11 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v40, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v14 = v16;
      if (*(_BYTE *)(a1 + 5) != 32)
      {
        v41 = 1;
LABEL_71:
        v42 = (_DWORD *)a1;
        goto LABEL_72;
      }
      v42 = *(_DWORD **)(a1 + 16);
      v41 = 1;
LABEL_72:
      v43 = 16 * (*v42 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v43 + 0x12) & 0x10) != 0
        || (v21 >> 4)
        && ((v21 >> 4) & ~*(_DWORD *)(v43 + 32)) == 0
        && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v43, (JSC::VM *)v11, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v44)&& (v145 = (WTF *)v21, v45 = JSC::PropertyTable::get(v44, (uint64_t *)&v145), (_DWORD)v45 != -1)&& (v45 & 0x800000000) != 0|| (v41 & 1) == 0&& ((*(_BYTE *)(v43 + 10) & 0x20) != 0 && (*(_BYTE *)(v43 + 18) & 0x40) == 0|| *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v43 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
      {
        v140 = 0;
        v145 = v14;
        v146 = 0;
        v147 = 0;
        v148 = 0x700000000;
        (*(void (**)(unint64_t, uint64_t, unint64_t, WTF **, _QWORD))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x90))(a1, v10, v21, &v145, v137 & 1);
      }
      else
      {
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v11, v21, (uint64_t)v14, 0, (uint64_t)v135, a7, a8, a9);
      }
    }
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8)
      || (_DWORD)v134 != *(unsigned __int8 *)(a4 + 122))
    {
      goto LABEL_91;
    }
    v46 = *(unsigned __int8 *)(a2 + 5);
    if (v46 == 2)
    {
      v47 = *(_QWORD *)(a2 + 8);
      if (!v47 || (v47 & 1) != 0 || (*(_BYTE *)(v47 + 16) & 0x10) == 0)
      {
LABEL_129:
        __break(0xC471u);
        JUMPOUT(0x1987889C4);
      }
    }
    else if (v46 != 4)
    {
      goto LABEL_129;
    }
    if (!(_DWORD)v133)
    {
      *(_WORD *)(a4 + 129) |= 0x10u;
      goto LABEL_91;
    }
    v144 = a2;
    *(_WORD *)(a4 + 129) |= 4u;
    if (*(_BYTE *)(a4 + 124))
    {
      --*(_BYTE *)(a4 + 124);
      goto LABEL_91;
    }
    v57 = *(unsigned __int8 *)(a4 + 125);
    if (v57 != 255)
      *(_BYTE *)(a4 + 125) = ++v57;
    if (xmmword_1ECF4C260 < v57)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v86 = *(unsigned __int8 *)(a4 + 126);
      v87 = BYTE4(xmmword_1ECF4C260) << v86;
      v88 = v87;
      if (v87 == 255)
        LOBYTE(v87) = -2;
      if (v88 >> v86 == BYTE4(xmmword_1ECF4C260))
        v89 = v87;
      else
        v89 = -2;
      *(_BYTE *)(a4 + 124) = v89;
      if (v86 != 255)
        *(_BYTE *)(a4 + 126) = v86 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_134;
    }
    if (!*(_BYTE *)(a4 + 127))
      goto LABEL_134;
    --*(_BYTE *)(a4 + 127);
    v143 = 0;
    v142 = v133;
    v24 = (unsigned __int8 *)(a4 + 128);
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
LABEL_120:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
      goto LABEL_121;
    }
    if (__stxr(1u, v24))
      goto LABEL_120;
LABEL_121:
    v9 = a4 + 80;
    v59 = *(_DWORD *)(a4 + 96);
    if (v59)
      goto LABEL_144;
    if (*(_QWORD *)(a4 + 16))
      break;
    v145 = 0;
    v146 = 0;
    std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a4 + 80, &v145, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v145)
      WTF::fastFree((unint64_t)v145, v78, v79, v80, v81, v82, v83, v84);
    v59 = *(_DWORD *)(a4 + 96);
LABEL_144:
    v147 = (unint64_t *)&v142;
    v148 = (uint64_t)&v144;
    v149 = (int *)&v143;
    v145 = (WTF *)&v142;
    v146 = (int *)&v143;
    if (v59 != -1)
      goto LABEL_124;
    while (1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_42:
      if (__stxr(1u, (unsigned __int8 *)v21))
LABEL_21:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21);
      v26 = *(_DWORD *)(a4 + 96);
      if (!v26)
        break;
      v147 = &v144;
      v148 = (uint64_t)&v150;
      v149 = &v142;
      v145 = (WTF *)&v144;
      v146 = &v142;
      if (v26 != -1)
        goto LABEL_27;
    }
    if (*(_QWORD *)(a4 + 16))
      v26 = 1;
    else
      v26 = 2;
    *(_QWORD *)(a4 + 80) = 0;
    *(_QWORD *)(a4 + 88) = 0;
    *(_DWORD *)(a4 + 96) = v26;
    v147 = &v144;
    v148 = (uint64_t)&v150;
    v149 = &v142;
    v145 = (WTF *)&v144;
    v146 = &v142;
LABEL_27:
    v135[0] = (unsigned __int8 *)&v145;
    ((void (*)(unsigned __int8 **))off_1E3596010[v26])(v135);
    v27 = __ldxr((unsigned __int8 *)v21);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
        goto LABEL_33;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v21, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_33:
    if ((_BYTE)v142)
    {
      v18 = v24;
      if (!v24)
      {
        v16 = (WTF::StringImpl *)v10;
LABEL_36:
        v10 = (uint64_t)v14;
        v14 = (WTF *)v134;
        goto LABEL_37;
      }
      v28 = v24[7];
      v16 = (WTF::StringImpl *)v10;
      if (*(_DWORD *)(v11 + 760) < v28)
        goto LABEL_36;
      JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v18);
      v10 = (uint64_t)v14;
      v14 = (WTF *)v134;
      if ((_BYTE)v142)
      {
LABEL_37:
        if (v14)
          JSC::ArrayProfile::computeUpdatedPrediction((uint64_t)v14, (uint64_t)v18, 16 * v19, (int8x8_t)a9.n128_u64[0]);
        JSC::repatchArrayPutByVal((uint64_t *)v10, v18, a1, a2, a4, 6, a7, a8, a9.n128_f64[0]);
      }
    }
    else
    {
      v18 = v24;
      v16 = (WTF::StringImpl *)v10;
      v10 = (uint64_t)v14;
      v14 = (WTF *)v134;
    }
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(a4 + 88) = 0;
  v59 = 1;
  *(_DWORD *)(a4 + 96) = 1;
  v147 = (unint64_t *)&v142;
  v148 = (uint64_t)&v144;
  v149 = (int *)&v143;
  v145 = (WTF *)&v142;
  v146 = (int *)&v143;
LABEL_124:
  v150 = &v145;
  off_1E3596010[v59](&v150, a4 + 80);
  v60 = __ldxr(v24);
  if (v60 == 1)
  {
    if (!__stlxr(0, v24))
      goto LABEL_132;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_132:
  if (v143)
  {
    if (*(_DWORD *)(v11 + 760) < *(unsigned __int8 *)(v19 + 7)
      || (JSC::Heap::writeBarrierSlowPath(v11 + 192, v19), v143))
    {
LABEL_134:
      JSC::repatchPutBy((uint64_t *)v10, v19, (const WTF::StringImpl *)a1, v132, a2, (unint64_t)v135, a4, 6, a9.n128_f64[0]);
    }
  }
LABEL_91:
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationDirectPutByValSloppyOptimize(unint64_t a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v14;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  int v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  int v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  WTF::StringImpl *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const JSC::PropertyTable *v156;
  unint64_t v157;
  int v159;
  WTF::StringImpl *v160;
  unsigned __int8 *v161[2];
  int v162;
  char v163;
  char v164;
  char v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  __int128 v171;
  int *v172;
  uint64_t v173;
  char *v174;
  uint64_t vars0;

  v9 = *(uint64_t **)(a4 + 56);
  v10 = v9[7];
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a4 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    __break(0xC471u);
    JUMPOUT(0x19878907CLL);
  }
  v14 = a3;
  v16 = *(_QWORD *)(v11 + 16);
  if (a2 < 0xFFFE000000000000 || (*(_BYTE *)(a1 + 4) & 0x10) != 0)
    goto LABEL_8;
  v17 = *(_DWORD *)a1 & 0xFFFFFFFE;
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_8;
  }
  v170 = 0;
  *(_WORD *)(a4 + 129) |= 4u;
  if (!*(_BYTE *)(a4 + 124))
  {
    v21 = *(unsigned __int8 *)(a4 + 125);
    if (v21 != 255)
      *(_BYTE *)(a4 + 125) = ++v21;
    if (xmmword_1ECF4C260 < v21)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v65 = *(unsigned __int8 *)(a4 + 126);
      v66 = BYTE4(xmmword_1ECF4C260) << v65;
      v67 = v66;
      if (v66 == 255)
        LOBYTE(v66) = -2;
      if (v67 >> v65 == BYTE4(xmmword_1ECF4C260))
        v68 = v66;
      else
        v68 = -2;
      *(_BYTE *)(a4 + 124) = v68;
      if (v65 != 255)
        *(_BYTE *)(a4 + 126) = v65 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_34;
    }
    if (!*(_BYTE *)(a4 + 127))
    {
LABEL_34:
      v28 = a5;
      if (a5)
        JSC::ArrayProfile::computeUpdatedPrediction(a5, v16, 16 * v17, (int8x8_t)a9.n128_u64[0]);
      JSC::repatchArrayPutByVal(v9, (unsigned __int8 *)v16, a1, a2, a4, 7, a7, a8, a9.n128_f64[0]);
      a5 = v28;
      goto LABEL_8;
    }
    v14 = (WTF::StringImpl *)v9;
    v9 = (uint64_t *)v10;
    --*(_BYTE *)(a4 + 127);
    v169 = 0;
    v168 = v17;
    v19 = a4 + 128;
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      v10 = v16;
      __clrex();
    }
    else
    {
      v10 = v16;
      if (!__stxr(1u, (unsigned __int8 *)v19))
      {
LABEL_22:
        v16 = a4 + 80;
        v24 = *(_DWORD *)(a4 + 96);
        if (!v24)
        {
          if (*(_QWORD *)(a4 + 16))
          {
            v25 = a5;
            *(_QWORD *)v16 = 0;
            *(_QWORD *)(a4 + 88) = 0;
            v24 = 1;
            *(_DWORD *)(a4 + 96) = 1;
            v172 = &v168;
            v173 = (uint64_t)&v170;
            v174 = &v169;
            *(_QWORD *)&v171 = &v168;
            *((_QWORD *)&v171 + 1) = &v169;
            goto LABEL_25;
          }
          v35 = a5;
          v171 = 0uLL;
          std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a4 + 80, &v171, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((_QWORD)v171)
            WTF::fastFree(v171, v36, v37, v38, v39, v40, v41, v42);
          v24 = *(_DWORD *)(a4 + 96);
          a5 = v35;
        }
        v25 = a5;
        v172 = &v168;
        v173 = (uint64_t)&v170;
        v174 = &v169;
        *(_QWORD *)&v171 = &v168;
        *((_QWORD *)&v171 + 1) = &v169;
        if (v24 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_54:
          v43 = *(_DWORD *)v19 + 2;
LABEL_55:
          *(_DWORD *)v19 = v43;
          goto LABEL_56;
        }
LABEL_25:
        v161[0] = (unsigned __int8 *)&v171;
        off_1E3596010[v24]((WTF ***)v161, a4 + 80);
        v27 = __ldxr((unsigned __int8 *)v19);
        if (v27 == 1)
        {
          v16 = v10;
          if (!__stlxr(0, (unsigned __int8 *)v19))
            goto LABEL_31;
        }
        else
        {
          __clrex();
          v16 = v10;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, v26, a6, a7, a8);
LABEL_31:
        v10 = (uint64_t)v9;
        v9 = (uint64_t *)v14;
        if (!v169)
        {
          v14 = a3;
          a5 = v25;
          goto LABEL_8;
        }
        a5 = v25;
        if (v16)
        {
          v14 = a3;
          if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v16 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v10 + 192, v16);
            a5 = v25;
            if (!v169)
              goto LABEL_8;
          }
        }
        else
        {
          v14 = a3;
        }
        goto LABEL_34;
      }
    }
    v23 = a5;
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
    a5 = v23;
    goto LABEL_22;
  }
  --*(_BYTE *)(a4 + 124);
LABEL_8:
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v18 = *(unsigned __int8 *)(a2 + 5);
  if (v18 == 2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19 || (v19 & 1) != 0 || (*(_BYTE *)(v19 + 16) & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
  if (v18 != 4)
  {
LABEL_13:
    JSC::directPutByVal((JSC::JSGlobalObject *)v9, a1, a2, v14, a5, 1uLL, a7, a8, a9);
    return *(_QWORD *)(v10 + 16);
  }
  v29 = a5;
  v30 = v9[7];
  v31 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  v161[0] = (unsigned __int8 *)v31;
  if (*(_DWORD *)(v30 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v30 + 41952) + 8);
      if (v19)
        *(_DWORD *)v19 += 2;
      goto LABEL_150;
    }
    v31 = (uint64_t)v161[0];
  }
  if ((v31 & 0xFFFE000000000002) != 0)
  {
LABEL_139:
    v31 = (uint64_t)JSC::JSValue::toStringSlowCase(v161, (uint64_t)v9, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    a5 = v29;
    goto LABEL_43;
  }
  a5 = v29;
  v32 = *(unsigned __int8 *)(v31 + 5);
  if (v32 != 2)
  {
    if (v32 == 4)
    {
      v19 = *(_QWORD *)(v31 + 8);
      v92 = *(_DWORD *)v19;
      *(_DWORD *)v19 += 4;
      v43 = v92 + 2;
      if (v43)
        goto LABEL_55;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, v29, a6, a7, a8);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
LABEL_150:
      a5 = v29;
      goto LABEL_56;
    }
    goto LABEL_139;
  }
LABEL_43:
  v33 = v16;
  if (*(_DWORD *)(v30 + 80))
  {
    v133 = v31;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    a5 = v29;
    v135 = hasExceptionsAfterHandlingTraps;
    v31 = v133;
    if (v135)
    {
      v19 = 0;
      goto LABEL_47;
    }
  }
  v19 = *(_QWORD *)(v31 + 8);
  v34 = v9[7];
  if ((v19 & 1) != 0)
  {
    v160 = v14;
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)v9);
    if (*(_DWORD *)(v34 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, a2, (uint64_t)a3, a4, v101, a6, a7, a8))
    {
      v19 = 0;
      v102 = (WTF::StringImpl *)v171;
      *(_QWORD *)&v171 = 0;
      if (!v102)
        goto LABEL_148;
    }
    else
    {
      v19 = v171;
      if (!(_QWORD)v171)
      {
LABEL_148:
        v16 = v33;
LABEL_149:
        v14 = v160;
        goto LABEL_150;
      }
      *(_DWORD *)v171 += 2;
      *(_QWORD *)&v171 = 0;
      v102 = (WTF::StringImpl *)v19;
    }
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, v101, a6, a7, a8);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
    goto LABEL_148;
  }
  if ((*(_BYTE *)(v19 + 16) & 0x10) == 0)
  {
    v160 = v14;
    v107 = v31;
    if (*(_QWORD *)(v34 + 64768) != v19)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v34 + 64768), (WTF::AtomStringImpl *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
      v109 = *(_QWORD *)(v107 + 8);
      if (v109)
      {
        if ((*(_BYTE *)(v109 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v109 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v109, a3, a4, v108, a6, a7, a8, (WTF *)&v171);
          v109 = v171;
        }
      }
      v110 = *(WTF::StringImpl **)(v34 + 64776);
      *(_QWORD *)(v34 + 64776) = v109;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2)
        {
          WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, v108, a6, a7, a8);
          WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
        }
        else
        {
          *(_DWORD *)v110 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v107 + 8) + 16) & 0x10) == 0)
    {
      v111 = *(_DWORD **)(v34 + 64776);
      *v111 += 2;
      *(_QWORD *)&v171 = v111;
      __dmb(0xAu);
      v112 = *(_QWORD *)(v107 + 8);
      *(_QWORD *)(v107 + 8) = v171;
      *(_QWORD *)&v171 = v112;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v34 + 192, (unint64_t)&v171);
      v114 = (WTF::StringImpl *)v171;
      *(_QWORD *)&v171 = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 2)
        {
          WTF::StringImpl::~StringImpl(v114, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, v113, a6, a7, a8);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
        }
        else
        {
          *(_DWORD *)v114 -= 2;
        }
      }
    }
    v19 = *(_QWORD *)(v34 + 64776);
    *(_DWORD *)v19 += 2;
    v16 = v33;
    goto LABEL_149;
  }
  *(_DWORD *)v19 += 2;
LABEL_47:
  v16 = v33;
LABEL_56:
  if (!*(_DWORD *)(v10 + 80)
    || (v123 = a5,
        v124 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8),
        a5 = v123,
        !v124))
  {
    if (!v19)
      goto LABEL_63;
    if (*(_BYTE *)(a2 + 5) == 4)
      goto LABEL_63;
    v44 = *(_DWORD *)(v19 + 16);
    if ((v44 & 0x20) != 0)
      goto LABEL_63;
    v45 = *(_BYTE **)(v19 + 8);
    v46 = *(unsigned int *)(v19 + 4);
    if ((v44 & 4) != 0)
    {
      if (!(_DWORD)v46)
        goto LABEL_63;
      v47 = *v45 - 48;
      if (v47 > 9 || v46 >= 2 && *v45 == 48)
        goto LABEL_63;
      v144 = v46 - 1;
      v145 = v45 + 1;
      while (v144)
      {
        if (v47 <= 0x19999999)
        {
          v146 = *v145 - 48;
          if (v146 <= 9)
          {
            v64 = __CFADD__(v146, 10 * v47);
            v47 = v146 + 10 * v47;
            --v144;
            ++v145;
            if (!v64)
              continue;
          }
        }
        goto LABEL_63;
      }
    }
    else
    {
      if (!(_DWORD)v46)
        goto LABEL_63;
      v47 = *(unsigned __int16 *)v45 - 48;
      if (v47 > 9 || *(_WORD *)v45 == 48 && v46 > 1)
        goto LABEL_63;
      v61 = (unsigned __int16 *)(v45 + 2);
      v62 = v46 - 1;
      while (v62)
      {
        if (v47 <= 0x19999999)
        {
          v63 = *v61 - 48;
          if (v63 <= 9)
          {
            v64 = __CFADD__(v63, 10 * v47);
            v47 = v63 + 10 * v47;
            ++v61;
            --v62;
            if (!v64)
              continue;
          }
        }
        goto LABEL_63;
      }
    }
    if (v47 != -1)
    {
      if (*(_DWORD *)v19 == 2)
      {
        v147 = a5;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        a5 = v147;
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
      goto LABEL_13;
    }
LABEL_63:
    v159 = *(unsigned __int8 *)(a4 + 122);
    if ((*(_WORD *)(*(_QWORD *)(v16 + 56) + 28) & 0x3000) == 0x1000)
      v48 = 2;
    else
      v48 = 1;
    v161[0] = 0;
    v161[1] = (unsigned __int8 *)a1;
    v162 = -1;
    v163 &= 0xF8u;
    v164 = 0;
    v165 = v48;
    v166 = 1;
    v167 = 0;
    v49 = *(unsigned __int8 *)(a1 + 5);
    v157 = v16;
    if (v49 == 32)
    {
      v52 = 0;
      v53 = *(_DWORD **)(a1 + 16);
      v50 = *v53 & 0xFFFFFFFE;
      v156 = (const JSC::PropertyTable *)(16 * v50);
    }
    else
    {
      v50 = *(_DWORD *)a1 & 0xFFFFFFFE;
      v156 = (const JSC::PropertyTable *)(16 * v50);
      if (v49 != 26)
      {
        v52 = 0;
        goto LABEL_73;
      }
      if (*(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2160) == v19)
      {
        v166 = 0;
        v83 = *(_QWORD *)(a1 + 24);
        if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFFFFFFFFFELL) != 0)
          JSC::FunctionRareData::clear(v83 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
      }
      JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a1, (JSC::FunctionRareData *)v10, (JSC::ExecutableBase *)v9, (const JSC::PropertyTable *)v19, a5, a6, a7, a8, a9);
      if (*(_DWORD *)(v10 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v51, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
LABEL_84:
        v57 = v157;
        if (*(_DWORD *)(v10 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8)
          || v159 != *(unsigned __int8 *)(a4 + 122))
        {
          goto LABEL_89;
        }
        v58 = JSC::CacheableIdentifier::createFromCell(a2, (JSCell *)a2);
        if (!(_DWORD)v50)
        {
          *(_WORD *)(a4 + 129) |= 0x10u;
          goto LABEL_89;
        }
        v60 = v58;
        v170 = v58;
        *(_WORD *)(a4 + 129) |= 4u;
        if (*(_BYTE *)(a4 + 124))
        {
          --*(_BYTE *)(a4 + 124);
          goto LABEL_89;
        }
        v69 = *(unsigned __int8 *)(a4 + 125);
        if (v69 != 255)
          *(_BYTE *)(a4 + 125) = ++v69;
        if (xmmword_1ECF4C260 < v69)
        {
          *(_BYTE *)(a4 + 125) = 0;
          v103 = *(unsigned __int8 *)(a4 + 126);
          v104 = BYTE4(xmmword_1ECF4C260) << v103;
          v105 = v104;
          if (v104 == 255)
            LOBYTE(v104) = -2;
          if (v105 >> v103 == BYTE4(xmmword_1ECF4C260))
            v106 = v104;
          else
            v106 = -2;
          *(_BYTE *)(a4 + 124) = v106;
          if (v103 != 255)
            *(_BYTE *)(a4 + 126) = v103 + 1;
          *(_BYTE *)(a4 + 127) = 0;
          goto LABEL_133;
        }
        if (!*(_BYTE *)(a4 + 127))
        {
LABEL_133:
          JSC::repatchPutBy(v9, v57, (const WTF::StringImpl *)a1, v156, v60, (unint64_t)v161, a4, 7, v59);
          goto LABEL_89;
        }
        v70 = v9;
        v71 = v10;
        --*(_BYTE *)(a4 + 127);
        v169 = 0;
        v168 = v50;
        v72 = (unsigned __int8 *)(a4 + 128);
        if (__ldaxr((unsigned __int8 *)(a4 + 128)))
        {
          v74 = v157;
          __clrex();
        }
        else
        {
          v74 = v157;
          if (!__stxr(1u, v72))
            goto LABEL_116;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
LABEL_116:
        if (!*(_DWORD *)(a4 + 96))
        {
          if (*(_QWORD *)(a4 + 16))
          {
            v171 = 0uLL;
            std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(a4 + 80, &v171, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v171 = 0uLL;
            std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a4 + 80, &v171, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          if ((_QWORD)v171)
            WTF::fastFree(v171, v75, v76, v77, v78, v79, v80, v81);
        }
        *(_QWORD *)&v171 = &v168;
        *((_QWORD *)&v171 + 1) = &v170;
        v172 = (int *)&v169;
        WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(a4 + 80, (uint64_t)&v168, (uint64_t)&v169, &v171);
        v82 = __ldxr(v72);
        if (v82 == 1)
        {
          v57 = v74;
          if (!__stlxr(0, v72))
          {
LABEL_130:
            v10 = v71;
            if (!v169)
              goto LABEL_89;
            if (*(_DWORD *)(v71 + 760) >= *(unsigned __int8 *)(v57 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v71 + 192, v57);
              v9 = v70;
              if (!v169)
                goto LABEL_89;
            }
            else
            {
              v9 = v70;
            }
            goto LABEL_133;
          }
        }
        else
        {
          __clrex();
          v57 = v74;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_130;
      }
      if (*(_BYTE *)(a1 + 5) != 32)
      {
        v52 = 1;
LABEL_73:
        v53 = (_DWORD *)a1;
        goto LABEL_74;
      }
      v53 = *(_DWORD **)(a1 + 16);
      v52 = 1;
    }
LABEL_74:
    v54 = 16 * (*v53 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v54 + 0x12) & 0x10) != 0
      || (v19 >> 4)
      && ((v19 >> 4) & ~*(_DWORD *)(v54 + 32)) == 0
      && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v54, (JSC::VM *)v10, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v55)&& (*(_QWORD *)&v171 = v19, v56 = JSC::PropertyTable::get(v55, (uint64_t *)&v171), (_DWORD)v56 != -1)&& (v56 & 0x800000000) != 0|| (v52 & 1) == 0&& ((*(_BYTE *)(v54 + 10) & 0x20) != 0 && (*(_BYTE *)(v54 + 18) & 0x40) == 0|| *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v54 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
    {
      v166 = 0;
      v171 = (unint64_t)v14;
      v172 = 0;
      v173 = 0x700000000;
      (*(void (**)(unint64_t, uint64_t *, unint64_t, __int128 *, _QWORD))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x90))(a1, v9, v19, &v171, v163 & 1);
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v10, v19, (uint64_t)v14, 0, (uint64_t)v161, a7, a8, a9);
    }
    goto LABEL_84;
  }
LABEL_89:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return *(_QWORD *)(v10 + 16);
}

uint64_t operationPutByValStrictGaveUp(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t vars0;

  v12 = *(JSC::JSGlobalObject **)(a4 + 56);
  v13 = *((_QWORD *)v12 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  JSC::putByVal(v12, a1, a2, a3, a5, 0, a8, a9, a6);
  return *(_QWORD *)(v13 + 16);
}

void JSC::putByVal(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  void (*v39)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t, _BOOL8);
  _BOOL8 v40;
  uint64_t v41;
  JSC::JSGlobalObject *v42;
  _BOOL8 v43;
  JSC::JSGlobalObject *v44;
  WTF::StringImpl *v45;
  JSC::JSObject *v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int v72;
  _DWORD *v73;
  _DWORD *v74;
  const char *v75;
  uint64_t v76;
  int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  double v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  _DWORD *v103;
  WTF::StringImpl *v104;
  _QWORD *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl **v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  JSC::JSObject *v115;
  JSC::VM *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  double v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned int v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  _QWORD *v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  WTF::StringImpl **v168;
  WTF::StringImpl *v169;
  int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  uint64_t v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  _QWORD *v218;
  uint64_t v219;
  WTF::StringImpl **v220;
  WTF::StringImpl **v221;
  WTF::StringImpl *v222;
  int v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  int v260;
  char v261;
  __int16 v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;

  v11 = a3;
  v265 = a2;
  v14 = a6;
  v15 = *((_QWORD *)a1 + 7);
  v16 = v15 + 41952;
  v18 = a3 > 0xFFFDFFFFFFFFFFFFLL && (a3 & 0x80000000) == 0;
  v19 = (a4 & 0xFFFE000000000002) != 0 || a4 == 0;
  v20 = v19;
  if (v19 && (v20 & 1) != 0 && !a5)
  {
    if (v18)
    {
      v33 = a3;
    }
    else
    {
      if (!(a3 >> 49))
        goto LABEL_19;
      a9.n128_f64[0] = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        a9.n128_u64[0] = a3 - 0x2000000000000;
      v33 = a9.n128_f64[0];
      if ((_DWORD)v33 == -1 || a9.n128_f64[0] != (double)v33)
      {
LABEL_19:
        if ((a3 & 0xFFFE000000000002) == 0)
        {
          if (*(_BYTE *)(a3 + 5) == 2)
          {
            v21 = *(_QWORD *)(a3 + 8);
            if ((v21 & 1) == 0)
            {
              if ((*(_BYTE *)(v21 + 16) & 0x10) == 0)
              {
                v48 = *(WTF::StringImpl **)(v15 + 64768);
                if (v48 != (WTF::StringImpl *)v21)
                {
                  *(_DWORD *)v21 += 2;
                  *(_QWORD *)(v15 + 64768) = v21;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)a2, a3, a4, 0, a6, a7, a8);
                      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
                    }
                    else
                    {
                      *(_DWORD *)v48 -= 2;
                    }
                  }
                  v49 = *(WTF::StringImpl **)(v11 + 8);
                  if (v49)
                  {
                    if ((*((_BYTE *)v49 + 16) & 0x10) != 0)
                    {
                      *(_DWORD *)v49 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase((unint64_t)v49, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v258);
                      v49 = v258;
                    }
                  }
                  v50 = *(WTF::StringImpl **)(v15 + 64776);
                  *(_QWORD *)(v15 + 64776) = v49;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v50, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
                    }
                    else
                    {
                      *(_DWORD *)v50 -= 2;
                    }
                  }
                }
                if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
                {
                  v51 = *(_DWORD **)(v15 + 64776);
                  *v51 += 2;
                  __dmb(0xAu);
                  v52 = *(WTF::StringImpl **)(v11 + 8);
                  *(_QWORD *)(v11 + 8) = v51;
                  v258 = v52;
                  v53 = (_QWORD *)(v15 + 808);
                  v54 = *(unsigned int *)(v15 + 820);
                  if ((_DWORD)v54 == *(_DWORD *)(v15 + 816))
                  {
                    v56 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v258);
                    v54 = *(unsigned int *)(v15 + 820);
                    v55 = (WTF::StringImpl **)(*(_QWORD *)(v15 + 808) + 8 * v54);
                    v52 = *v56;
                  }
                  else
                  {
                    v55 = (WTF::StringImpl **)(*v53 + 8 * v54);
                    v56 = &v258;
                  }
                  *v56 = 0;
                  *v55 = v52;
                  *(_DWORD *)(v15 + 820) = v54 + 1;
                  v57 = v258;
                  v258 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
                    }
                    else
                    {
                      *(_DWORD *)v57 -= 2;
                    }
                  }
                }
                v21 = *(_QWORD *)(v15 + 64776);
              }
LABEL_23:
              v22 = *(_DWORD *)v21 + 2;
LABEL_24:
              *(_DWORD *)v21 = v22;
LABEL_25:
              if (!*(_DWORD *)(v15 + 80))
                goto LABEL_26;
              v77 = *(_DWORD *)(v15 + 80);
              if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v15 + 16))
              {
LABEL_26:
                v23 = (unsigned __int8 *)v265;
                v258 = 0;
                v259 = v265;
                v260 = -1;
                v261 = v261 & 0xF8 | (v14 == 0);
                v262 = 0;
                v263 = 1;
                v264 = 0;
                if ((v265 & 0xFFFE000000000002) == 0)
                {
                  v24 = 16 * (*(_DWORD *)v265 & 0xFFFFFFFE);
                  if ((*(_WORD *)(v24 + 0xC) & 0x400) == 0)
                  {
                    v25 = *((_QWORD *)a1 + 7);
                    if (v21)
                    {
                      v26 = *(_DWORD *)(v21 + 16);
                      if ((v26 & 0x20) == 0)
                      {
                        v27 = *(_BYTE **)(v21 + 8);
                        v28 = *(unsigned int *)(v21 + 4);
                        if ((v26 & 4) != 0)
                        {
                          if ((_DWORD)v28)
                          {
                            v29 = *v27 - 48;
                            if (v29 <= 9 && (v28 < 2 || *v27 != 48))
                            {
                              v147 = v27 + 1;
                              v148 = v28 - 1;
                              while (v148)
                              {
                                if (v29 <= 0x19999999)
                                {
                                  v149 = *v147 - 48;
                                  if (v149 <= 9)
                                  {
                                    v38 = __CFADD__(v149, 10 * v29);
                                    v29 = v149 + 10 * v29;
                                    ++v147;
                                    --v148;
                                    if (!v38)
                                      continue;
                                  }
                                }
                                goto LABEL_33;
                              }
LABEL_260:
                              if (v29 != -1)
                              {
LABEL_261:
                                (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(v24 + 76)
                                                                                                 + 0x50))(v23, a1);
                                goto LABEL_262;
                              }
                            }
                          }
                        }
                        else if ((_DWORD)v28)
                        {
                          v29 = *(unsigned __int16 *)v27 - 48;
                          if (v29 <= 9 && (*(_WORD *)v27 != 48 || v28 <= 1))
                          {
                            v35 = (unsigned __int16 *)(v27 + 2);
                            v36 = v28 - 1;
                            while (v36)
                            {
                              if (v29 <= 0x19999999)
                              {
                                v37 = *v35 - 48;
                                if (v37 <= 9)
                                {
                                  v38 = __CFADD__(v37, 10 * v29);
                                  v29 = v37 + 10 * v29;
                                  ++v35;
                                  --v36;
                                  if (!v38)
                                    continue;
                                }
                              }
                              goto LABEL_33;
                            }
                            goto LABEL_260;
                          }
                        }
                      }
                    }
LABEL_33:
                    if (*(_QWORD *)(*(_QWORD *)(v25 + 41952) + 16) != v21)
                    {
                      v30 = *(_DWORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x10);
                      if ((v30 & 0x10) == 0)
                      {
                        v31 = (_DWORD *)v265;
                        while ((*(_WORD *)(v24 + 12) & 0x800) == 0
                             && (v31 == (_DWORD *)v265 || (*(_WORD *)(v24 + 12) & 0x400) == 0))
                        {
                          v32 = *(_DWORD **)(v24 + 48);
                          if (!v32)
                            v32 = (_DWORD *)*((_QWORD *)v31 + 2);
                          if (v32 == (_DWORD *)2)
                            goto LABEL_129;
                          v24 = 16 * (*v32 & 0xFFFFFFFE);
                          v31 = v32;
                          if ((*(_BYTE *)(v24 + 0x10) & 0x10) != 0)
                            goto LABEL_43;
                        }
                      }
                    }
                    goto LABEL_43;
                  }
LABEL_144:
                  (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C) + 0x48))(v23, a1, v21, a4, &v258);
                  goto LABEL_262;
                }
LABEL_143:
                JSC::JSValue::putToPrimitive((JSC::JSValue *)&v265, a1, v21, a4, (uint64_t)&v258, a6, a7, a8);
              }
LABEL_262:
              if (!v21)
                return;
              goto LABEL_263;
            }
            JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, a1);
            if (*(_DWORD *)(v15 + 80))
            {
              v99 = *(_DWORD *)(v15 + 80);
              if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v15 + 16))
              {
LABEL_188:
                v21 = 0;
                v45 = v258;
                v258 = 0;
                if (!v45)
                  goto LABEL_25;
LABEL_70:
                if (*(_DWORD *)v45 != 2)
                {
                  *(_DWORD *)v45 -= 2;
                  goto LABEL_25;
                }
                goto LABEL_291;
              }
            }
LABEL_68:
            v21 = (unint64_t)v258;
            if (!v258)
              goto LABEL_25;
            *(_DWORD *)v258 += 2;
            v258 = 0;
            v45 = (WTF::StringImpl *)v21;
            goto LABEL_70;
          }
          v11 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)a1, (JSC::Structure *)2, a4, 0, a6, a7, a8);
        }
        v266 = (unsigned __int8 *)v11;
        if (*(_DWORD *)(v15 + 80))
        {
          v187 = *(_DWORD *)(v15 + 80);
          if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v15 + 16))
          {
            v21 = *(_QWORD *)(*(_QWORD *)v16 + 8);
            if (!v21)
              goto LABEL_25;
            goto LABEL_23;
          }
        }
        if ((v11 & 0xFFFE000000000002) == 0)
        {
          v158 = *(unsigned __int8 *)(v11 + 5);
          if (v158 == 2)
          {
LABEL_272:
            if (*(_DWORD *)(v15 + 80))
            {
              v188 = *(_DWORD *)(v15 + 80);
              if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v15 + 16))
              {
                v21 = 0;
                goto LABEL_25;
              }
            }
            v21 = *(_QWORD *)(v11 + 8);
            v159 = *((_QWORD *)a1 + 7);
            if ((v21 & 1) == 0)
            {
              if ((*(_BYTE *)(v21 + 16) & 0x10) == 0)
              {
                v160 = *(WTF::StringImpl **)(v159 + 64768);
                if (v160 != (WTF::StringImpl *)v21)
                {
                  *(_DWORD *)v21 += 2;
                  *(_QWORD *)(v159 + 64768) = v21;
                  if (v160)
                  {
                    if (*(_DWORD *)v160 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v160, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
                    }
                    else
                    {
                      *(_DWORD *)v160 -= 2;
                    }
                  }
                  v161 = *(WTF::StringImpl **)(v11 + 8);
                  if (v161)
                  {
                    if ((*((_BYTE *)v161 + 16) & 0x10) != 0)
                    {
                      *(_DWORD *)v161 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase((unint64_t)v161, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v258);
                      v161 = v258;
                    }
                  }
                  v162 = *(WTF::StringImpl **)(v159 + 64776);
                  *(_QWORD *)(v159 + 64776) = v161;
                  if (v162)
                  {
                    if (*(_DWORD *)v162 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v162, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
                    }
                    else
                    {
                      *(_DWORD *)v162 -= 2;
                    }
                  }
                }
                if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
                {
                  v163 = *(WTF::StringImpl **)(v159 + 64776);
                  *(_DWORD *)v163 += 2;
                  v258 = v163;
                  __dmb(0xAu);
                  v164 = *(WTF::StringImpl **)(v11 + 8);
                  *(_QWORD *)(v11 + 8) = v258;
                  v258 = v164;
                  v165 = (_QWORD *)(v159 + 808);
                  v166 = *(unsigned int *)(v159 + 820);
                  if ((_DWORD)v166 == *(_DWORD *)(v159 + 816))
                  {
                    v168 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v165, v166 + 1, (unint64_t)&v258);
                    v166 = *(unsigned int *)(v159 + 820);
                    v167 = (WTF::StringImpl **)(*(_QWORD *)(v159 + 808) + 8 * v166);
                    v164 = *v168;
                  }
                  else
                  {
                    v167 = (WTF::StringImpl **)(*v165 + 8 * v166);
                    v168 = &v258;
                  }
                  *v168 = 0;
                  *v167 = v164;
                  *(_DWORD *)(v159 + 820) = v166 + 1;
                  v169 = v258;
                  v258 = 0;
                  if (v169)
                  {
                    if (*(_DWORD *)v169 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v169, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
                    }
                    else
                    {
                      *(_DWORD *)v169 -= 2;
                    }
                  }
                }
                v21 = *(_QWORD *)(v159 + 64776);
              }
              goto LABEL_23;
            }
            JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
            if (*(_DWORD *)(v159 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v159, a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_188;
            }
            goto LABEL_68;
          }
          if (v158 == 4)
          {
            v21 = *(_QWORD *)(v11 + 8);
            v170 = *(_DWORD *)v21;
            *(_DWORD *)v21 += 4;
            v22 = v170 + 2;
            if (v22)
              goto LABEL_24;
            v45 = (WTF::StringImpl *)v21;
LABEL_291:
            WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
            goto LABEL_25;
          }
        }
        v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v266, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
        goto LABEL_272;
      }
    }
    if ((a2 & 0xFFFE000000000002) == 0)
    {
      if (*(unsigned __int8 *)(a2 + 5) >= 0x17u)
      {
        v34 = *(_QWORD *)(a2 + 8);
        switch(*(_BYTE *)(a2 + 4) & 0x1F)
        {
          case 0:
          case 1:
            if ((JSC::JSObject::trySetIndexQuicklyForTypedArray(a2, v33, a4, 0) & 1) == 0)
              goto LABEL_62;
            return;
          case 3:
            goto LABEL_62;
          case 4:
          case 5:
            if (*(_DWORD *)(v34 - 4) <= v33)
              goto LABEL_62;
            if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              v46 = (JSC::JSObject *)a2;
              v47 = (JSC::VM *)v15;
              a3 = v33;
              goto LABEL_75;
            }
LABEL_49:
            if (*(_DWORD *)(v34 - 4) > v33)
            {
              *(_QWORD *)(v34 + 8 * v33) = a4;
              goto LABEL_51;
            }
LABEL_62:
            v39 = *(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50);
            v40 = v14 == 0;
            goto LABEL_63;
          case 6:
          case 7:
            if (*(_DWORD *)(v34 - 4) <= v33)
              goto LABEL_62;
            if (!(a4 >> 49))
            {
              v115 = (JSC::JSObject *)a2;
              v116 = (JSC::VM *)v15;
              a3 = v33;
              goto LABEL_222;
            }
            v81 = (double)(int)a4;
            if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v81 = a4 - 0x2000000000000;
            *(double *)(v34 + 8 * v33) = v81;
LABEL_51:
            if (*(_DWORD *)(v34 - 8) <= v33)
              *(_DWORD *)(v34 - 8) = v33 + 1;
            break;
          case 8:
          case 9:
            goto LABEL_49;
          case 0xA:
          case 0xB:
            if (*(_DWORD *)(v34 - 4) <= v33)
              goto LABEL_62;
            v58 = v34 + 8 * v33;
            v59 = *(_QWORD *)(v58 + 16);
            *(_QWORD *)(v58 + 16) = a4;
            if (v59)
              return;
            ++*(_DWORD *)(v34 + 12);
            goto LABEL_51;
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v34 - 4) <= v33)
              goto LABEL_62;
            v127 = v34 + 8 * v33;
            v129 = *(_QWORD *)(v127 + 16);
            v128 = (unint64_t *)(v127 + 16);
            if (!v129)
              goto LABEL_62;
            *v128 = a4;
            return;
          default:
            if ((*(_BYTE *)(a2 + 4) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198789FACLL);
            }
            goto LABEL_62;
        }
        return;
      }
      v40 = a6 == 0;
      v39 = *(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50);
LABEL_63:
      v41 = a2;
      v42 = a1;
      a3 = v33;
LABEL_64:
      v39(v41, v42, a3, a4, v40);
      return;
    }
    v43 = a6 == 0;
    v44 = a1;
    a3 = v33;
LABEL_66:
    JSC::JSValue::putToPrimitiveByIndex((JSC::JSValue *)&v265, v44, (const WTF::StringImpl *)a3, a4, v43, a6, a7, a8);
    return;
  }
  if (!v18)
  {
    if (!(a3 >> 49))
      goto LABEL_104;
    a9.n128_f64[0] = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.n128_u64[0] = a3 - 0x2000000000000;
    a3 = a9.n128_f64[0];
    if ((_DWORD)a3 == -1 || a9.n128_f64[0] != (double)a3)
    {
      if (a5 && (a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) >= 0x17u)
        *(_DWORD *)(a5 + 4) |= 2u;
LABEL_104:
      if ((v11 & 0xFFFE000000000002) == 0)
      {
        if (*(_BYTE *)(v11 + 5) == 2)
        {
          v21 = *(_QWORD *)(v11 + 8);
          if ((v21 & 1) == 0)
          {
            if ((*(_BYTE *)(v21 + 16) & 0x10) == 0)
            {
              v100 = *(WTF::StringImpl **)(v15 + 64768);
              if (v100 != (WTF::StringImpl *)v21)
              {
                *(_DWORD *)v21 += 2;
                *(_QWORD *)(v15 + 64768) = v21;
                if (v100)
                {
                  if (*(_DWORD *)v100 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v100, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
                  }
                  else
                  {
                    *(_DWORD *)v100 -= 2;
                  }
                }
                v101 = *(WTF::StringImpl **)(v11 + 8);
                if (v101)
                {
                  if ((*((_BYTE *)v101 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v101 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase((unint64_t)v101, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v258);
                    v101 = v258;
                  }
                }
                v102 = *(WTF::StringImpl **)(v15 + 64776);
                *(_QWORD *)(v15 + 64776) = v101;
                if (v102)
                {
                  if (*(_DWORD *)v102 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v102, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
                  }
                  else
                  {
                    *(_DWORD *)v102 -= 2;
                  }
                }
              }
              if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
              {
                v103 = *(_DWORD **)(v15 + 64776);
                *v103 += 2;
                __dmb(0xAu);
                v104 = *(WTF::StringImpl **)(v11 + 8);
                *(_QWORD *)(v11 + 8) = v103;
                v258 = v104;
                v105 = (_QWORD *)(v15 + 808);
                v106 = *(unsigned int *)(v15 + 820);
                if ((_DWORD)v106 == *(_DWORD *)(v15 + 816))
                {
                  v108 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v258);
                  v106 = *(unsigned int *)(v15 + 820);
                  v107 = (WTF::StringImpl **)(*(_QWORD *)(v15 + 808) + 8 * v106);
                  v104 = *v108;
                }
                else
                {
                  v107 = (WTF::StringImpl **)(*v105 + 8 * v106);
                  v108 = &v258;
                }
                *v108 = 0;
                *v107 = v104;
                *(_DWORD *)(v15 + 820) = v106 + 1;
                v109 = v258;
                v258 = 0;
                if (v109)
                {
                  if (*(_DWORD *)v109 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
                  }
                  else
                  {
                    *(_DWORD *)v109 -= 2;
                  }
                }
              }
              v21 = *(_QWORD *)(v15 + 64776);
            }
LABEL_108:
            v68 = *(_DWORD *)v21 + 2;
LABEL_109:
            *(_DWORD *)v21 = v68;
LABEL_110:
            if (*(_DWORD *)(v15 + 80))
            {
              v125 = *(_DWORD *)(v15 + 80);
              if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v15 + 16))
                goto LABEL_262;
            }
            v23 = (unsigned __int8 *)v265;
            v258 = 0;
            v259 = v265;
            v260 = -1;
            v261 = v261 & 0xF8 | (v14 == 0);
            v262 = 0;
            v263 = 1;
            v264 = 0;
            if ((v265 & 0xFFFE000000000002) != 0)
              goto LABEL_143;
            v24 = 16 * (*(_DWORD *)v265 & 0xFFFFFFFE);
            if ((*(_WORD *)(v24 + 0xC) & 0x400) != 0)
              goto LABEL_144;
            v25 = *((_QWORD *)a1 + 7);
            if (v21)
            {
              v69 = *(_DWORD *)(v21 + 16);
              if ((v69 & 0x20) == 0)
              {
                v70 = *(_BYTE **)(v21 + 8);
                v71 = *(unsigned int *)(v21 + 4);
                if ((v69 & 4) != 0)
                {
                  if ((_DWORD)v71)
                  {
                    v72 = *v70 - 48;
                    if (v72 <= 9 && (v71 < 2 || *v70 != 48))
                    {
                      v208 = v70 + 1;
                      v209 = v71 - 1;
                      while (v209)
                      {
                        if (v72 <= 0x19999999)
                        {
                          v210 = *v208 - 48;
                          if (v210 <= 9)
                          {
                            v38 = __CFADD__(v210, 10 * v72);
                            v72 = v210 + 10 * v72;
                            ++v208;
                            --v209;
                            if (!v38)
                              continue;
                          }
                        }
                        goto LABEL_118;
                      }
LABEL_331:
                      if (v72 != -1)
                        goto LABEL_261;
                    }
                  }
                }
                else if ((_DWORD)v71)
                {
                  v72 = *(unsigned __int16 *)v70 - 48;
                  if (v72 <= 9 && (*(_WORD *)v70 != 48 || v71 <= 1))
                  {
                    v78 = (unsigned __int16 *)(v70 + 2);
                    v79 = v71 - 1;
                    while (v79)
                    {
                      if (v72 <= 0x19999999)
                      {
                        v80 = *v78 - 48;
                        if (v80 <= 9)
                        {
                          v38 = __CFADD__(v80, 10 * v72);
                          v72 = v80 + 10 * v72;
                          ++v78;
                          --v79;
                          if (!v38)
                            continue;
                        }
                      }
                      goto LABEL_118;
                    }
                    goto LABEL_331;
                  }
                }
              }
            }
LABEL_118:
            if (*(_QWORD *)(*(_QWORD *)(v25 + 41952) + 16) != v21)
            {
              v30 = *(_DWORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x10);
              if ((v30 & 0x10) == 0)
              {
                v73 = (_DWORD *)v265;
                while ((*(_WORD *)(v24 + 12) & 0x800) == 0
                     && (v73 == (_DWORD *)v265 || (*(_WORD *)(v24 + 12) & 0x400) == 0))
                {
                  v74 = *(_DWORD **)(v24 + 48);
                  if (!v74)
                    v74 = (_DWORD *)*((_QWORD *)v73 + 2);
                  if (v74 == (_DWORD *)2)
                  {
LABEL_129:
                    if ((v23[6] & 0x20) == 0 || (v30 & 0x400000) != 0)
                    {
                      v266 = (unsigned __int8 *)v25;
                      v75 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v23, v25, v21, a4, 0, (uint64_t)&v258, a7, a8, a9);
                      if (a2 && (v261 & 1) != 0)
                        JSC::throwTypeError((unint64_t)a1, (JSC::VM **)&v266, (uint64_t)v75, a2);
                    }
                    else
                    {
                      JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(v23, (unint64_t)a1, v21, a4, (uint64_t)&v258, a9, a6, a7, a8);
                    }
                    goto LABEL_262;
                  }
                  v24 = 16 * (*v74 & 0xFFFFFFFE);
                  v73 = v74;
                  if ((*(_BYTE *)(v24 + 0x10) & 0x10) != 0)
                    break;
                }
              }
            }
LABEL_43:
            JSC::JSObject::putInlineSlow(v23, (unint64_t)a1, v21, (const JSC::PropertyTable *)a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))&v258, a6, a7, a8, a9);
            if (!v21)
              return;
LABEL_263:
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
            return;
          }
          JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
          if (*(_DWORD *)(v15 + 80))
          {
            v146 = *(_DWORD *)(v15 + 80);
            if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v15 + 16))
            {
LABEL_247:
              v21 = 0;
              v82 = v258;
              v258 = 0;
              if (!v82)
                goto LABEL_110;
LABEL_176:
              if (*(_DWORD *)v82 != 2)
              {
                *(_DWORD *)v82 -= 2;
                goto LABEL_110;
              }
              goto LABEL_358;
            }
          }
LABEL_174:
          v21 = (unint64_t)v258;
          if (!v258)
            goto LABEL_110;
          *(_DWORD *)v258 += 2;
          v258 = 0;
          v82 = (WTF::StringImpl *)v21;
          goto LABEL_176;
        }
        v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
      }
      v266 = (unsigned __int8 *)v11;
      if (*(_DWORD *)(v15 + 80))
      {
        v240 = *(_DWORD *)(v15 + 80);
        if ((v240 & 0x27) != 0 && (v240 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v15 + 16))
        {
          v21 = *(_QWORD *)(*(_QWORD *)v16 + 8);
          if (!v21)
            goto LABEL_110;
          goto LABEL_108;
        }
      }
      if ((v11 & 0xFFFE000000000002) == 0)
      {
        v211 = *(unsigned __int8 *)(v11 + 5);
        if (v211 == 2)
        {
LABEL_339:
          if (*(_DWORD *)(v15 + 80))
          {
            v241 = *(_DWORD *)(v15 + 80);
            if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v15 + 16))
            {
              v21 = 0;
              goto LABEL_110;
            }
          }
          v21 = *(_QWORD *)(v11 + 8);
          v212 = *((_QWORD *)a1 + 7);
          if ((v21 & 1) == 0)
          {
            if ((*(_BYTE *)(v21 + 16) & 0x10) == 0)
            {
              v213 = *(WTF::StringImpl **)(v212 + 64768);
              if (v213 != (WTF::StringImpl *)v21)
              {
                *(_DWORD *)v21 += 2;
                *(_QWORD *)(v212 + 64768) = v21;
                if (v213)
                {
                  if (*(_DWORD *)v213 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v213, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                  }
                  else
                  {
                    *(_DWORD *)v213 -= 2;
                  }
                }
                v214 = *(WTF::StringImpl **)(v11 + 8);
                if (v214)
                {
                  if ((*((_BYTE *)v214 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v214 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase((unint64_t)v214, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v258);
                    v214 = v258;
                  }
                }
                v215 = *(WTF::StringImpl **)(v212 + 64776);
                *(_QWORD *)(v212 + 64776) = v214;
                if (v215)
                {
                  if (*(_DWORD *)v215 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v215, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v215 -= 2;
                  }
                }
              }
              if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
              {
                v216 = *(WTF::StringImpl **)(v212 + 64776);
                *(_DWORD *)v216 += 2;
                v258 = v216;
                __dmb(0xAu);
                v217 = *(WTF::StringImpl **)(v11 + 8);
                *(_QWORD *)(v11 + 8) = v258;
                v258 = v217;
                v218 = (_QWORD *)(v212 + 808);
                v219 = *(unsigned int *)(v212 + 820);
                if ((_DWORD)v219 == *(_DWORD *)(v212 + 816))
                {
                  v221 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v218, v219 + 1, (unint64_t)&v258);
                  v219 = *(unsigned int *)(v212 + 820);
                  v220 = (WTF::StringImpl **)(*(_QWORD *)(v212 + 808) + 8 * v219);
                  v217 = *v221;
                }
                else
                {
                  v220 = (WTF::StringImpl **)(*v218 + 8 * v219);
                  v221 = &v258;
                }
                *v221 = 0;
                *v220 = v217;
                *(_DWORD *)(v212 + 820) = v219 + 1;
                v222 = v258;
                v258 = 0;
                if (v222)
                {
                  if (*(_DWORD *)v222 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v222, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
                  }
                  else
                  {
                    *(_DWORD *)v222 -= 2;
                  }
                }
              }
              v21 = *(_QWORD *)(v212 + 64776);
            }
            goto LABEL_108;
          }
          JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
          if (*(_DWORD *)(v212 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v212, a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_247;
          }
          goto LABEL_174;
        }
        if (v211 == 4)
        {
          v21 = *(_QWORD *)(v11 + 8);
          v223 = *(_DWORD *)v21;
          *(_DWORD *)v21 += 4;
          v68 = v223 + 2;
          if (v68)
            goto LABEL_109;
          v82 = (WTF::StringImpl *)v21;
LABEL_358:
          WTF::StringImpl::~StringImpl(v82, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
          goto LABEL_110;
        }
      }
      v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v266, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      goto LABEL_339;
    }
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v43 = a6 == 0;
    v44 = a1;
    goto LABEL_66;
  }
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
  {
    v40 = a6 == 0;
    v39 = *(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50);
LABEL_164:
    v41 = a2;
    v42 = a1;
    goto LABEL_64;
  }
  v76 = *(_QWORD *)(a2 + 8);
  switch(*(_BYTE *)(a2 + 4) & 0x1F)
  {
    case 0:
    case 1:
      v110 = a3;
      v111 = JSC::JSObject::trySetIndexQuicklyForTypedArray(a2, a3, a4, a5);
      a3 = v110;
      if ((v111 & 1) == 0)
        goto LABEL_161;
      return;
    case 3:
      goto LABEL_161;
    case 4:
    case 5:
      if (*(_DWORD *)(v76 - 4) <= a3)
        goto LABEL_161;
      if (a4 < 0xFFFE000000000000)
      {
        v46 = (JSC::JSObject *)a2;
        v47 = (JSC::VM *)v15;
LABEL_75:
        JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex(v46, v47, a3, a4, a5, a6, a7, a8);
        return;
      }
LABEL_136:
      if (*(_DWORD *)(v76 - 4) <= a3)
      {
LABEL_161:
        if (a5)
          *(_DWORD *)(a5 + 4) |= 2u;
        v39 = *(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50);
        v40 = v14 == 0;
        goto LABEL_164;
      }
      *(_QWORD *)(v76 + 8 * a3) = a4;
      if (*(_DWORD *)(v76 - 8) <= a3)
        *(_DWORD *)(v76 - 8) = a3 + 1;
LABEL_139:
      if (a4
        && (a4 & 0xFFFE000000000002) == 0
        && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v15 + 192, a2);
      }
      break;
    case 6:
    case 7:
      if (*(_DWORD *)(v76 - 4) <= a3)
        goto LABEL_161;
      if (a4 >> 49)
      {
        v126 = (double)(int)a4;
        if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v126 = a4 - 0x2000000000000;
        *(double *)(v76 + 8 * a3) = v126;
        if (*(_DWORD *)(v76 - 8) <= a3)
          *(_DWORD *)(v76 - 8) = a3 + 1;
      }
      else
      {
        v115 = (JSC::JSObject *)a2;
        v116 = (JSC::VM *)v15;
LABEL_222:
        JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(v115, v116, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      }
      return;
    case 8:
    case 9:
      goto LABEL_136;
    case 0xA:
    case 0xB:
      if (*(_DWORD *)(v76 - 4) <= a3)
        goto LABEL_161;
      v112 = a3;
      v113 = v76 + 8 * a3;
      v114 = *(_QWORD *)(v113 + 16);
      *(_QWORD *)(v113 + 16) = a4;
      if (a4
        && (a4 & 0xFFFE000000000002) == 0
        && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v15 + 192, a2);
      }
      if (!v114)
      {
        ++*(_DWORD *)(v76 + 12);
        if (*(_DWORD *)(v76 - 8) <= v112)
          *(_DWORD *)(v76 - 8) = v112 + 1;
      }
      return;
    case 0xC:
    case 0xD:
      if (*(_DWORD *)(v76 - 4) <= a3)
        goto LABEL_161;
      v205 = v76 + 8 * a3;
      v207 = *(_QWORD *)(v205 + 16);
      v206 = (unint64_t *)(v205 + 16);
      if (!v207)
        goto LABEL_161;
      *v206 = a4;
      goto LABEL_139;
    default:
      if ((*(_BYTE *)(a2 + 4) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19878A614);
      }
      goto LABEL_161;
  }
}

uint64_t operationPutByValStrictGeneric(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, unint64_t a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  JSC::putByVal(a1, a2, a3, a4, 0, 0, a8, a9, a5);
  return *(_QWORD *)(v9 + 16);
}

uint64_t operationPutByValSloppyGaveUp(JSC::JSCell *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t vars0;

  v12 = *(JSC::JSGlobalObject **)(a4 + 56);
  v13 = *((_QWORD *)v12 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  JSC::putByVal(v12, (uint64_t)a1, a2, a3, a5, 1uLL, a8, a9, a6);
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValSloppyGeneric(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, unint64_t a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  JSC::putByVal(a1, a2, a3, a4, 0, 1uLL, a8, a9, a5);
  return *(_QWORD *)(v9 + 16);
}

uint64_t operationDirectPutByValStrictGaveUp(unint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t vars0;

  v12 = *(JSC::JSGlobalObject **)(a4 + 56);
  v13 = *((_QWORD *)v12 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    result = 1926;
    __break(0xC471u);
  }
  else
  {
    JSC::directPutByVal(v12, a1, a2, a3, a5, 0, a8, a9, a6);
    return *(_QWORD *)(v13 + 16);
  }
  return result;
}

void JSC::directPutByVal(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t this, WTF::StringImpl *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::AtomStringImpl *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::VM *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _QWORD *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl **v92;
  WTF::StringImpl *v93;
  int v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127[2];
  int v128;
  BOOL v129;
  __int16 v130;
  char v131;
  uint64_t v132;
  WTF::StringImpl *v133[4];

  v10 = this;
  v13 = a6;
  v14 = *((_QWORD *)a1 + 7);
  if ((unint64_t)this >= 0xFFFE000000000000 && (this & 0x80000000) == 0)
    goto LABEL_3;
  if ((unint64_t)this >> 49)
  {
    a9.n128_f64[0] = (double)(int)this;
    if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
      a9.n128_u64[0] = this - 0x2000000000000;
    this = a9.n128_f64[0];
    if ((_DWORD)this != -1 && a9.n128_f64[0] == (double)this)
    {
LABEL_3:
      if ((*(_BYTE *)(a2 + 4) & 0xEu) - 4 > 9)
      {
        if (!a5)
          goto LABEL_7;
      }
      else if (!a5 || this < *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4))
      {
LABEL_7:
        if ((_BYTE)a6)
          v15 = 1;
        else
          v15 = 2;
        JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, (JSC::VM *)this, (unint64_t)a4, 0, v15, a7, a8, a9.n128_f64[0]);
        return;
      }
      *(_DWORD *)(a5 + 4) |= 2u;
      goto LABEL_7;
    }
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_119:
    v127[0] = (unsigned __int8 *)v10;
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, this, (uint64_t)a4, a5, a6, a7, a8))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
      if (!v16)
        goto LABEL_18;
      goto LABEL_16;
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v82 = *(unsigned __int8 *)(v10 + 5);
      if (v82 == 2)
        goto LABEL_122;
      if (v82 == 4)
      {
        v16 = *(_QWORD *)(v10 + 8);
        v94 = *(_DWORD *)v16;
        *(_DWORD *)v16 += 4;
        v17 = v94 + 2;
        if (v17)
          goto LABEL_17;
        v42 = (WTF::StringImpl *)v16;
LABEL_141:
        WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        goto LABEL_18;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(v127, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_122:
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, this, (uint64_t)a4, a5, a6, a7, a8))
    {
      v16 = 0;
      goto LABEL_18;
    }
    v16 = *(_QWORD *)(v10 + 8);
    v83 = *((_QWORD *)a1 + 7);
    if ((v16 & 1) == 0)
    {
      if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
      {
        v84 = *(WTF::StringImpl **)(v83 + 64768);
        if (v84 != (WTF::StringImpl *)v16)
        {
          *(_DWORD *)v16 += 2;
          *(_QWORD *)(v83 + 64768) = v16;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
            {
              WTF::StringImpl::~StringImpl(v84, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
            }
            else
            {
              *(_DWORD *)v84 -= 2;
            }
          }
          v85 = *(WTF::StringImpl **)(v10 + 8);
          if (v85)
          {
            if ((*((_BYTE *)v85 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v85 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v85, (const WTF::StringImpl *)this, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v133);
              v85 = v133[0];
            }
          }
          v86 = *(WTF::StringImpl **)(v83 + 64776);
          *(_QWORD *)(v83 + 64776) = v85;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
            {
              WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
            }
            else
            {
              *(_DWORD *)v86 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v87 = *(WTF::StringImpl **)(v83 + 64776);
          *(_DWORD *)v87 += 2;
          v133[0] = v87;
          __dmb(0xAu);
          v88 = *(WTF::StringImpl **)(v10 + 8);
          *(WTF::StringImpl **)(v10 + 8) = v133[0];
          v133[0] = v88;
          v89 = (_QWORD *)(v83 + 808);
          v90 = *(unsigned int *)(v83 + 820);
          if ((_DWORD)v90 == *(_DWORD *)(v83 + 816))
          {
            v92 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)v133);
            v90 = *(unsigned int *)(v83 + 820);
            v91 = (WTF::StringImpl **)(*(_QWORD *)(v83 + 808) + 8 * v90);
            v88 = *v92;
          }
          else
          {
            v91 = (WTF::StringImpl **)(*v89 + 8 * v90);
            v92 = v133;
          }
          *v92 = 0;
          *v91 = v88;
          *(_DWORD *)(v83 + 820) = v90 + 1;
          v93 = v133[0];
          v133[0] = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
            {
              WTF::StringImpl::~StringImpl(v93, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
            }
            else
            {
              *(_DWORD *)v93 -= 2;
            }
          }
        }
        v16 = *(_QWORD *)(v83 + 64776);
      }
      goto LABEL_16;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, a1);
    if (!*(_DWORD *)(v83 + 80))
      goto LABEL_57;
    v77 = (JSC::VM *)v83;
    goto LABEL_99;
  }
  if (*(_BYTE *)(v10 + 5) != 2)
  {
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)a1, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_119;
  }
  v16 = *(_QWORD *)(v10 + 8);
  if ((v16 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, a1);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_57;
    v77 = (JSC::VM *)v14;
LABEL_99:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v77, a2, this, (uint64_t)a4, a5, a6, a7, a8))
    {
      v16 = 0;
      v42 = v133[0];
      v133[0] = 0;
      if (!v42)
        goto LABEL_18;
LABEL_59:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
        goto LABEL_18;
      }
      goto LABEL_141;
    }
LABEL_57:
    v16 = (unint64_t)v133[0];
    if (!v133[0])
      goto LABEL_18;
    *(_DWORD *)v133[0] += 2;
    v133[0] = 0;
    v42 = (WTF::StringImpl *)v16;
    goto LABEL_59;
  }
  if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
  {
    v43 = *(WTF::StringImpl **)(v14 + 64768);
    if (v43 != (WTF::StringImpl *)v16)
    {
      *(_DWORD *)v16 += 2;
      *(_QWORD *)(v14 + 64768) = v16;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
      }
      v44 = *(WTF::StringImpl **)(v10 + 8);
      if (v44)
      {
        if ((*((_BYTE *)v44 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v44 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v44, (const WTF::StringImpl *)this, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v133);
          v44 = v133[0];
        }
      }
      v45 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v44;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v46 = *(_DWORD **)(v14 + 64776);
      *v46 += 2;
      __dmb(0xAu);
      v47 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v46;
      v133[0] = v47;
      v48 = (_QWORD *)(v14 + 808);
      v49 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v49 == *(_DWORD *)(v14 + 816))
      {
        v51 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)v133);
        v49 = *(unsigned int *)(v14 + 820);
        v50 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v49);
        v47 = *v51;
      }
      else
      {
        v50 = (WTF::StringImpl **)(*v48 + 8 * v49);
        v51 = v133;
      }
      *v51 = 0;
      *v50 = v47;
      *(_DWORD *)(v14 + 820) = v49 + 1;
      v52 = v133[0];
      v133[0] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, this, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
    }
    v16 = *(_QWORD *)(v14 + 64776);
  }
LABEL_16:
  v17 = *(_DWORD *)v16 + 2;
LABEL_17:
  *(_DWORD *)v16 = v17;
LABEL_18:
  if (*(_DWORD *)(v14 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, this, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }
  if (!v16)
    goto LABEL_24;
  v18 = *(_DWORD *)(v16 + 16);
  if ((v18 & 0x20) != 0)
    goto LABEL_24;
  v19 = *(_BYTE **)(v16 + 8);
  v20 = *(unsigned int *)(v16 + 4);
  if ((v18 & 4) != 0)
  {
    if (!(_DWORD)v20)
      goto LABEL_24;
    this = *v19 - 48;
    if (this > 9 || v20 >= 2 && *v19 == 48)
      goto LABEL_24;
    v78 = v20 - 1;
    v79 = v19 + 1;
    while (v78)
    {
      if (this <= 0x19999999)
      {
        v80 = *v79 - 48;
        if (v80 <= 9)
        {
          v32 = __CFADD__(v80, 10 * this);
          this = v80 + 10 * (_DWORD)this;
          --v78;
          ++v79;
          if (!v32)
            continue;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    if (!(_DWORD)v20)
      goto LABEL_24;
    this = *(unsigned __int16 *)v19 - 48;
    if (this > 9 || *(_WORD *)v19 == 48 && v20 > 1)
      goto LABEL_24;
    v29 = (unsigned __int16 *)(v19 + 2);
    v30 = v20 - 1;
    while (v30)
    {
      if (this <= 0x19999999)
      {
        v31 = *v29 - 48;
        if (v31 <= 9)
        {
          v32 = __CFADD__(v31, 10 * this);
          this = v31 + 10 * (_DWORD)this;
          ++v29;
          --v30;
          if (!v32)
            continue;
        }
      }
      goto LABEL_24;
    }
  }
  if ((_DWORD)this != -1)
  {
    if (v13)
      v81 = 1;
    else
      v81 = 2;
    JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, (JSC::VM *)this, (unint64_t)a4, 0, v81, a7, a8, a9.n128_f64[0]);
    goto LABEL_40;
  }
LABEL_24:
  v127[0] = 0;
  v127[1] = (unsigned __int8 *)a2;
  v128 = -1;
  v129 = v13 == 0;
  v130 = 0;
  v131 = 1;
  v132 = 0;
  v21 = *(unsigned __int8 *)(a2 + 5);
  v22 = v21;
  if (v21 == 26)
  {
    if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2160) == v16)
    {
      v131 = 0;
      v41 = *(_QWORD *)(a2 + 24);
      if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v41 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v14, a1, (const JSC::PropertyTable *)v16, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v23, this, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_40;
    }
    v22 = *(unsigned __int8 *)(a2 + 5);
  }
  v24 = (_DWORD *)a2;
  if (v22 == 32)
    v24 = *(_DWORD **)(a2 + 16);
  v25 = 16 * (*v24 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v25 + 0x12) & 0x10) != 0
    || (v16 >> 4)
    && ((v16 >> 4) & ~*(_DWORD *)(16 * (*v24 & 0xFFFFFFFE) + 0x20)) == 0
    && (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v25, (JSC::VM *)v14, this, a4, a5, a6, a7, a8),
        v26)
    && (v133[0] = (WTF::StringImpl *)v16, v27 = JSC::PropertyTable::get(v26, (uint64_t *)v133), (_DWORD)v27 != -1)
    && (v27 & 0x800000000) != 0
    || v21 != 26
    && ((*(_BYTE *)(v25 + 10) & 0x20) != 0 && (*(_BYTE *)(v25 + 18) & 0x40) == 0
     || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v25 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
  {
    v133[0] = a4;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = (WTF::StringImpl *)0x700000000;
    (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, BOOL))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v16, v133, v13 == 0);
  }
  else
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v14, v16, (uint64_t)a4, 0, (uint64_t)v127, a7, a8, a9);
  }
LABEL_40:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v28, this, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
}

uint64_t operationDirectPutByValStrictGeneric(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, WTF::StringImpl *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    result = 1942;
    __break(0xC471u);
  }
  else
  {
    JSC::directPutByVal(a1, a2, a3, a4, 0, 0, a8, a9, a5);
    return *(_QWORD *)(v9 + 16);
  }
  return result;
}

uint64_t operationPutByValStrictMegamorphic(JSC::JSCell *a1, unint64_t a2, const JSC::PropertyTable *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  JSC::JSCell *v24;
  JSC::JSCell *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  JSC::Structure *v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  char v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  char v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  char v87;
  _QWORD v88[2];
  int v89;
  char v90;
  __int16 v91;
  char v92;
  uint64_t v93;
  JSC::VM *v94;
  uint64_t vars0;

  v14 = *(JSC::JSGlobalObject **)(a4 + 56);
  v15 = *((_QWORD *)v14 + 7);
  v16 = vars0;
  *(_QWORD *)(v15 + 40) = vars0;
  *(_DWORD *)(v16 + 36) = *(_DWORD *)(a4 + 112);
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0
    && (a2 & 0xFFFE000000000002) == 0
    && *((unsigned __int8 *)a1 + 5) >= 0x17u
    && *(_BYTE *)(a2 + 5) == 2)
  {
    v17 = *(_QWORD *)(a2 + 8);
    if (v17)
    {
      if ((v17 & 1) == 0 && (*(_BYTE *)(v17 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v17 += 2;
        if (*(_DWORD *)(v15 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_55;
        }
        v18 = *(_DWORD *)a1;
        v88[0] = 0;
        v88[1] = a1;
        v89 = -1;
        v90 = v90 & 0xF8 | 1;
        v91 = 0;
        v92 = 1;
        v93 = 0;
        v19 = *(_BYTE **)(v17 + 8);
        v20 = *(unsigned int *)(v17 + 4);
        if ((*(_BYTE *)(v17 + 16) & 4) != 0)
        {
          if ((_DWORD)v20)
          {
            v21 = *v19 - 48;
            if (v21 <= 9 && (v20 < 2 || *v19 != 48))
            {
              v80 = v20 - 1;
              v81 = v19 + 1;
              while (v80)
              {
                if (v21 <= 0x19999999)
                {
                  v82 = *v81 - 48;
                  if (v82 <= 9)
                  {
                    v46 = __CFADD__(v82, 10 * v21);
                    v21 = v82 + 10 * v21;
                    --v80;
                    ++v81;
                    if (!v46)
                      continue;
                  }
                }
                goto LABEL_12;
              }
LABEL_156:
              if (v21 != -1)
                goto LABEL_157;
            }
          }
        }
        else if ((_DWORD)v20)
        {
          v21 = *(unsigned __int16 *)v19 - 48;
          if (v21 <= 9 && (*(_WORD *)v19 != 48 || v20 <= 1))
          {
            v43 = (unsigned __int16 *)(v19 + 2);
            v44 = v20 - 1;
            while (v44)
            {
              if (v21 <= 0x19999999)
              {
                v45 = *v43 - 48;
                if (v45 <= 9)
                {
                  v46 = __CFADD__(v45, 10 * v21);
                  v21 = v45 + 10 * v21;
                  ++v43;
                  --v44;
                  if (!v46)
                    continue;
                }
              }
              goto LABEL_12;
            }
            goto LABEL_156;
          }
        }
LABEL_12:
        if (*(_QWORD *)(*(_QWORD *)(v15 + 41952) + 16) != v17)
        {
          v22 = 16 * (v18 & 0xFFFFFFFE);
          if ((*(_WORD *)(v22 + 12) & 0x400) == 0)
          {
            if ((*(_BYTE *)(v22 + 16) & 0x10) != 0)
            {
LABEL_22:
              if (a4)
              {
                *(_WORD *)(a4 + 129) |= 4u;
                if (*(_BYTE *)(a4 + 124))
                {
                  --*(_BYTE *)(a4 + 124);
                }
                else
                {
                  v75 = *(unsigned __int8 *)(a4 + 125);
                  if (v75 != 255)
                    *(_BYTE *)(a4 + 125) = ++v75;
                  if (xmmword_1ECF4C260 < v75)
                  {
                    *(_BYTE *)(a4 + 125) = 0;
                    v76 = *(unsigned __int8 *)(a4 + 126);
                    v77 = BYTE4(xmmword_1ECF4C260) << v76;
                    v78 = v77;
                    if (v77 == 255)
                      LOBYTE(v77) = -2;
                    if (v78 >> v76 == BYTE4(xmmword_1ECF4C260))
                      v79 = v77;
                    else
                      v79 = -2;
                    *(_BYTE *)(a4 + 124) = v79;
                    if (v76 != 255)
                      *(_BYTE *)(a4 + 126) = v76 + 1;
                    *(_BYTE *)(a4 + 127) = 0;
                  }
                  else if (*(_BYTE *)(a4 + 127))
                  {
                    --*(_BYTE *)(a4 + 127);
                  }
                  JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 2u, a4, a5, a6, a7, a8);
                }
              }
              JSC::JSObject::putInlineSlow((unsigned __int8 *)a1, (unint64_t)v14, v17, a3, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v88, a6, a7, a8, a9);
            }
            else
            {
              v23 = (uint64_t *)(v15 + 93080);
              v24 = a1;
              while (1)
              {
                if ((*(_WORD *)(v22 + 12) & 0xC00) != 0 || !*(_QWORD *)(v22 + 48))
                  goto LABEL_22;
                v25 = *(JSC::JSCell **)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x30);
                if (!v25)
                  v25 = (JSC::JSCell *)*((_QWORD *)v24 + 2);
                if (v25 == (JSC::JSCell *)2)
                  break;
                v22 = 16 * (*(_DWORD *)v25 & 0xFFFFFFFE);
                v24 = v25;
                if ((*(_BYTE *)(v22 + 0x10) & 0x10) != 0)
                  goto LABEL_22;
              }
              v28 = *(_DWORD *)a1;
              v94 = (JSC::VM *)*((_QWORD *)v14 + 7);
              v29 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, (uint64_t)v94, v17, (uint64_t)a3, 0, (uint64_t)v88, a7, a8, a9);
              if (v26 && (v90 & 1) != 0)
                JSC::throwTypeError((unint64_t)v14, &v94, (uint64_t)v29, (uint64_t)v26);
              if (*(_DWORD *)(v15 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)v26, v27, a4, a5, a6, a7, a8))
              {
                goto LABEL_55;
              }
              if (v92 != 1)
                goto LABEL_106;
              if (v91 - 1 > 1)
                goto LABEL_106;
              v30 = (JSC::Structure *)(16 * (v28 & 0xFFFFFFFE));
              v31 = *((_DWORD *)v30 + 4);
              if ((v31 & 3) == 2)
                goto LABEL_106;
              v32 = *(_WORD *)(16 * (v28 & 0xFFFFFFFE) + 0xC);
              if ((v32 & 8) != 0 || (v32 & 0x10) != 0 && (v32 & 0x20) == 0)
                goto LABEL_106;
              v27 = *(_DWORD *)a1 & 0xFFFFFFFE;
              if (v91 == 1)
              {
                if (v30 == (JSC::Structure *)(16 * v27))
                {
                  v27 = v89;
                  if (v89 < 0x10000)
                  {
                    JSC::Structure::firePropertyReplacementWatchpointSet(v30, (JSC::VM *)v15, (JSC::Structure *)v89, "Did cache property replacement", a5, a6, a7, a8);
                    if ((*v23 & 1) != 0)
                      v65 = 0;
                    else
                      v65 = *v23;
                    JSC::MegamorphicCache::initAsReplace(v65, (WTF::AtomStringImpl *)(v28 & 0xFFFFFFFE), (WTF::StringImpl *)v17, (unsigned __int16)v89, v61, v62, v63, v64);
                  }
                }
                goto LABEL_55;
              }
              if ((v31 & 3) != 0 || (*(_BYTE *)(16 * v27 + 0x10) & 3) != 0)
                goto LABEL_55;
              if ((v31 & 0x80000) != 0)
                goto LABEL_106;
              v33 = *(_QWORD *)(16 * v27 + 0x40);
              if (v33)
              {
                v34 = *(_QWORD *)(16 * v27 + 0x40);
                if (*(_BYTE *)(v33 + 5) != 1)
                {
                  v48 = *(_DWORD *)(v33 + 80);
                  if (v48)
                    v34 = 16 * (v48 & 0xFFFFFFFE);
                  else
                    v34 = 0;
                }
              }
              else
              {
                v34 = 0;
              }
              if ((JSC::Structure *)v34 != v30
                || (v35 = *(_WORD *)(16 * v27 + 0xC), (v35 & 8) != 0)
                || (v35 & 0x10) != 0 && (v35 & 0x20) == 0)
              {
LABEL_106:
                if (a4)
                {
                  *(_WORD *)(a4 + 129) |= 4u;
                  if (*(_BYTE *)(a4 + 124))
                  {
                    --*(_BYTE *)(a4 + 124);
                  }
                  else
                  {
                    v70 = *(unsigned __int8 *)(a4 + 125);
                    if (v70 != 255)
                      *(_BYTE *)(a4 + 125) = ++v70;
                    if (xmmword_1ECF4C260 < v70)
                    {
                      *(_BYTE *)(a4 + 125) = 0;
                      v71 = *(unsigned __int8 *)(a4 + 126);
                      v72 = BYTE4(xmmword_1ECF4C260) << v71;
                      v73 = v72;
                      if (v72 == 255)
                        LOBYTE(v72) = -2;
                      if (v73 >> v71 == BYTE4(xmmword_1ECF4C260))
                        v74 = v72;
                      else
                        v74 = -2;
                      *(_BYTE *)(a4 + 124) = v74;
                      if (v71 != 255)
                        *(_BYTE *)(a4 + 126) = v71 + 1;
                      *(_BYTE *)(a4 + 127) = 0;
                    }
                    else if (*(_BYTE *)(a4 + 127))
                    {
                      --*(_BYTE *)(a4 + 127);
                    }
                    JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 2u, a4, a5, a6, a7, a8);
                  }
                }
                goto LABEL_55;
              }
              v36 = *(unsigned __int16 *)(16 * v27 + 0x18);
              if (v36 == 65534)
                goto LABEL_44;
              if (v36 == 0xFFFF)
                v36 = *(_DWORD *)(v33 + 84);
              if (v36 < 64)
              {
LABEL_44:
                v37 = 0;
              }
              else if ((v36 - 63) >= 5)
              {
                v57 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
                v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
                v37 = (v58 | HIWORD(v58)) + 1;
              }
              else
              {
                v37 = 4;
              }
              v38 = *(unsigned __int16 *)(16 * (v28 & 0xFFFFFFFE) + 0x18);
              if (v38 == 65534)
                goto LABEL_49;
              if (v38 == 0xFFFF)
                v38 = *(_DWORD *)(*(_QWORD *)(16 * (v28 & 0xFFFFFFFE) + 0x40) + 84);
              if (v38 < 64)
              {
LABEL_49:
                v39 = 0;
              }
              else if ((v38 - 63) >= 5)
              {
                v59 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
                v60 = v59 | (v59 >> 4) | ((v59 | (v59 >> 4)) >> 8);
                v39 = (v60 | HIWORD(v60)) + 1;
              }
              else
              {
                v39 = 4;
              }
              if (v89 < 0x10000)
              {
                if ((*v23 & 1) != 0)
                  v40 = 0;
                else
                  v40 = *v23;
                JSC::MegamorphicCache::initAsTransition(v40, (WTF::AtomStringImpl *)(v28 & 0xFFFFFFFE), v27, (WTF::StringImpl *)v17, (unsigned __int16)v89, v37 != v39, a7, a8);
              }
            }
LABEL_55:
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v26, v27, a4, a5, a6, a7, a8);
              WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
            return *(_QWORD *)(v15 + 16);
          }
        }
LABEL_157:
        if (a4)
        {
          *(_WORD *)(a4 + 129) |= 4u;
          if (*(_BYTE *)(a4 + 124))
          {
            --*(_BYTE *)(a4 + 124);
          }
          else
          {
            v83 = *(unsigned __int8 *)(a4 + 125);
            if (v83 != 255)
              *(_BYTE *)(a4 + 125) = ++v83;
            if (xmmword_1ECF4C260 < v83)
            {
              *(_BYTE *)(a4 + 125) = 0;
              v84 = *(unsigned __int8 *)(a4 + 126);
              v85 = BYTE4(xmmword_1ECF4C260) << v84;
              v86 = v85;
              if (v85 == 255)
                LOBYTE(v85) = -2;
              if (v86 >> v84 == BYTE4(xmmword_1ECF4C260))
                v87 = v85;
              else
                v87 = -2;
              *(_BYTE *)(a4 + 124) = v87;
              if (v84 != 255)
                *(_BYTE *)(a4 + 126) = v84 + 1;
              *(_BYTE *)(a4 + 127) = 0;
            }
            else if (*(_BYTE *)(a4 + 127))
            {
              --*(_BYTE *)(a4 + 127);
            }
            JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 2u, a4, a5, a6, a7, a8);
          }
        }
        (*(void (**)(JSC::JSCell *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x48))(a1, v14, v17, a3, v88);
        goto LABEL_55;
      }
    }
  }
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
  }
  else
  {
    v47 = *(unsigned __int8 *)(a4 + 125);
    if (v47 != 255)
      *(_BYTE *)(a4 + 125) = ++v47;
    if (xmmword_1ECF4C260 < v47)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v66 = *(unsigned __int8 *)(a4 + 126);
      v67 = BYTE4(xmmword_1ECF4C260) << v66;
      v68 = v67;
      if (v67 == 255)
        LOBYTE(v67) = -2;
      if (v68 >> v66 == BYTE4(xmmword_1ECF4C260))
        v69 = v67;
      else
        v69 = -2;
      *(_BYTE *)(a4 + 124) = v69;
      if (v66 != 255)
        *(_BYTE *)(a4 + 126) = v66 + 1;
      *(_BYTE *)(a4 + 127) = 0;
    }
    else if (*(_BYTE *)(a4 + 127))
    {
      --*(_BYTE *)(a4 + 127);
    }
    JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 2u, a4, a5, a6, a7, a8);
  }
  JSC::putByVal(v14, (uint64_t)a1, a2, (unint64_t)a3, a5, 0, a7, a8, a9);
  return *(_QWORD *)(v15 + 16);
}

uint64_t operationPutByValStrictMegamorphicGeneric(JSC::JSGlobalObject *a1, JSC::JSCell *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  JSC::JSCell *v20;
  JSC::JSCell *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  JSC::Structure *v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  _QWORD v66[2];
  int v67;
  char v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  JSC::VM *var48[10];

  v12 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v12 + 40) = var48[9];
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || (a3 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)a2 + 5) < 0x17u
    || *(_BYTE *)(a3 + 5) != 2
    || (v13 = *(_QWORD *)(a3 + 8)) == 0
    || (v13 & 1) != 0
    || (*(_BYTE *)(v13 + 16) & 0x10) == 0)
  {
    JSC::putByVal(a1, (uint64_t)a2, a3, (unint64_t)a4, 0, 0, a7, a8, a9);
    return *(_QWORD *)(v12 + 16);
  }
  *(_DWORD *)v13 += 2;
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v14 = *(_DWORD *)a2;
    v66[0] = 0;
    v66[1] = a2;
    v67 = -1;
    v68 = v68 & 0xF8 | 1;
    v69 = 0;
    v70 = 1;
    v71 = 0;
    v15 = *(_BYTE **)(v13 + 8);
    v16 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if (!(_DWORD)v16)
        goto LABEL_12;
      v17 = *v15 - 48;
      if (v17 > 9 || v16 >= 2 && *v15 == 48)
        goto LABEL_12;
      v63 = v16 - 1;
      v64 = v15 + 1;
      while (v63)
      {
        if (v17 <= 0x19999999)
        {
          v65 = *v64 - 48;
          if (v65 <= 9)
          {
            v44 = __CFADD__(v65, 10 * v17);
            v17 = v65 + 10 * v17;
            --v63;
            ++v64;
            if (!v44)
              continue;
          }
        }
        goto LABEL_12;
      }
    }
    else
    {
      if (!(_DWORD)v16)
        goto LABEL_12;
      v17 = *(unsigned __int16 *)v15 - 48;
      if (v17 > 9)
        goto LABEL_12;
      if (*(_WORD *)v15 == 48 && v16 > 1)
        goto LABEL_12;
      v41 = (unsigned __int16 *)(v15 + 2);
      v42 = v16 - 1;
      while (v42)
      {
        if (v17 <= 0x19999999)
        {
          v43 = *v41 - 48;
          if (v43 <= 9)
          {
            v44 = __CFADD__(v43, 10 * v17);
            v17 = v43 + 10 * v17;
            ++v41;
            --v42;
            if (!v44)
              continue;
          }
        }
        goto LABEL_12;
      }
    }
    if (v17 != -1)
    {
LABEL_107:
      (*(void (**)(JSC::JSCell *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v13, a4, v66);
      goto LABEL_53;
    }
LABEL_12:
    if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 16) != v13)
    {
      v18 = 16 * (v14 & 0xFFFFFFFE);
      if ((*(_WORD *)(v18 + 12) & 0x400) == 0)
      {
        if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
        {
          v19 = (uint64_t *)(v12 + 93080);
          v20 = a2;
          while ((*(_WORD *)(v18 + 12) & 0xC00) == 0 && *(_QWORD *)(v18 + 48))
          {
            v21 = *(JSC::JSCell **)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
            if (!v21)
              v21 = (JSC::JSCell *)*((_QWORD *)v20 + 2);
            if (v21 == (JSC::JSCell *)2)
            {
              v26 = *(_DWORD *)a2;
              var48[0] = *((JSC::VM **)a1 + 7);
              v27 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, (uint64_t)var48[0], v13, (uint64_t)a4, 0, (uint64_t)v66, a7, a8, a9);
              if (v22 && (v68 & 1) != 0)
                JSC::throwTypeError((unint64_t)a1, var48, (uint64_t)v27, (uint64_t)v22);
              if ((!*(_DWORD *)(v12 + 80)
                 || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v22, v23, v24, v25, a6, a7, a8))
                && v70 == 1
                && v69 - 1 <= 1)
              {
                v28 = (JSC::Structure *)(16 * (v26 & 0xFFFFFFFE));
                v29 = *((_DWORD *)v28 + 4);
                if ((v29 & 3) != 2)
                {
                  v30 = *(_WORD *)(16 * (v26 & 0xFFFFFFFE) + 0xC);
                  if ((v30 & 8) == 0 && ((v30 & 0x10) == 0 || (v30 & 0x20) != 0))
                  {
                    v23 = *(_DWORD *)a2 & 0xFFFFFFFE;
                    if (v69 == 1)
                    {
                      if (v28 == (JSC::Structure *)(16 * v23))
                      {
                        v23 = v67;
                        if (v67 < 0x10000)
                        {
                          JSC::Structure::firePropertyReplacementWatchpointSet(v28, (JSC::VM *)v12, (JSC::Structure *)v67, "Did cache property replacement", v25, a6, a7, a8);
                          if ((*v19 & 1) != 0)
                            v62 = 0;
                          else
                            v62 = *v19;
                          JSC::MegamorphicCache::initAsReplace(v62, (WTF::AtomStringImpl *)(v26 & 0xFFFFFFFE), (WTF::StringImpl *)v13, (unsigned __int16)v67, v58, v59, v60, v61);
                        }
                      }
                    }
                    else if ((v29 & 3) == 0 && !(v29 & 0x80000 | *(_DWORD *)(16 * v23 + 0x10) & 3))
                    {
                      v31 = *(_QWORD *)(16 * v23 + 0x40);
                      if (v31)
                      {
                        v32 = *(_QWORD *)(16 * v23 + 0x40);
                        if (*(_BYTE *)(v31 + 5) != 1)
                        {
                          v45 = *(_DWORD *)(v31 + 80);
                          if (v45)
                            v32 = 16 * (v45 & 0xFFFFFFFE);
                          else
                            v32 = 0;
                        }
                      }
                      else
                      {
                        v32 = 0;
                      }
                      if ((JSC::Structure *)v32 == v28)
                      {
                        v33 = *(_WORD *)(16 * v23 + 0xC);
                        if ((v33 & 8) == 0 && ((v33 & 0x10) == 0 || (v33 & 0x20) != 0))
                        {
                          v34 = *(unsigned __int16 *)(16 * v23 + 0x18);
                          if (v34 == 65534)
                            goto LABEL_42;
                          if (v34 == 0xFFFF)
                            v34 = *(_DWORD *)(v31 + 84);
                          if (v34 < 64)
                          {
LABEL_42:
                            v35 = 0;
                          }
                          else if ((v34 - 63) >= 5)
                          {
                            v54 = (v34 - 64) | ((v34 - 64) >> 1) | (((v34 - 64) | ((v34 - 64) >> 1)) >> 2);
                            v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
                            v35 = (v55 | HIWORD(v55)) + 1;
                          }
                          else
                          {
                            v35 = 4;
                          }
                          v36 = *(unsigned __int16 *)(16 * (v26 & 0xFFFFFFFE) + 0x18);
                          if (v36 == 65534)
                            goto LABEL_47;
                          if (v36 == 0xFFFF)
                            v36 = *(_DWORD *)(*(_QWORD *)(16 * (v26 & 0xFFFFFFFE) + 0x40) + 84);
                          if (v36 < 64)
                          {
LABEL_47:
                            v37 = 0;
                          }
                          else if ((v36 - 63) >= 5)
                          {
                            v56 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
                            v57 = v56 | (v56 >> 4) | ((v56 | (v56 >> 4)) >> 8);
                            v37 = (v57 | HIWORD(v57)) + 1;
                          }
                          else
                          {
                            v37 = 4;
                          }
                          if (v67 < 0x10000)
                          {
                            if ((*v19 & 1) != 0)
                              v38 = 0;
                            else
                              v38 = *v19;
                            JSC::MegamorphicCache::initAsTransition(v38, (WTF::AtomStringImpl *)(v26 & 0xFFFFFFFE), v23, (WTF::StringImpl *)v13, (unsigned __int16)v67, v35 != v37, a7, a8);
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_53;
            }
            v18 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
            v20 = v21;
            if ((*(_BYTE *)(v18 + 0x10) & 0x10) != 0)
              break;
          }
        }
        JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v13, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v66, a6, a7, a8, a9);
        goto LABEL_53;
      }
    }
    goto LABEL_107;
  }
LABEL_53:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v22, v23, v24, v25, a6, a7, a8);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationPutByValSloppyMegamorphic(uint64_t a1, unint64_t a2, const JSC::PropertyTable *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  JSC::JSCell *v24;
  JSC::JSCell *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  JSC::Structure *v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  char v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  char v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  char v86;
  _QWORD v87[2];
  int v88;
  char v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  JSC::JSCell *v93;
  JSC::VM *v94;
  uint64_t vars0;

  v14 = *(JSC::JSGlobalObject **)(a4 + 56);
  v15 = *((_QWORD *)v14 + 7);
  v16 = vars0;
  *(_QWORD *)(v15 + 40) = vars0;
  *(_DWORD *)(v16 + 36) = *(_DWORD *)(a4 + 112);
  v93 = (JSC::JSCell *)a1;
  if ((a1 & 0xFFFE000000000002) == 0
    && (a2 & 0xFFFE000000000002) == 0
    && *(unsigned __int8 *)(a1 + 5) >= 0x17u
    && *(_BYTE *)(a2 + 5) == 2)
  {
    v17 = *(_QWORD *)(a2 + 8);
    if (v17)
    {
      if ((v17 & 1) == 0 && (*(_BYTE *)(v17 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v17 += 2;
        if (*(_DWORD *)(v15 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_55;
        }
        v18 = *(_DWORD *)a1;
        v87[0] = 0;
        v87[1] = a1;
        v88 = -1;
        v89 &= 0xF8u;
        v90 = 0;
        v91 = 1;
        v92 = 0;
        v19 = *(_BYTE **)(v17 + 8);
        v20 = *(unsigned int *)(v17 + 4);
        if ((*(_BYTE *)(v17 + 16) & 4) != 0)
        {
          if ((_DWORD)v20)
          {
            v21 = *v19 - 48;
            if (v21 <= 9 && (v20 < 2 || *v19 != 48))
            {
              v79 = v20 - 1;
              v80 = v19 + 1;
              while (v79)
              {
                if (v21 <= 0x19999999)
                {
                  v81 = *v80 - 48;
                  if (v81 <= 9)
                  {
                    v45 = __CFADD__(v81, 10 * v21);
                    v21 = v81 + 10 * v21;
                    --v79;
                    ++v80;
                    if (!v45)
                      continue;
                  }
                }
                goto LABEL_12;
              }
LABEL_155:
              if (v21 != -1)
                goto LABEL_156;
            }
          }
        }
        else if ((_DWORD)v20)
        {
          v21 = *(unsigned __int16 *)v19 - 48;
          if (v21 <= 9 && (*(_WORD *)v19 != 48 || v20 <= 1))
          {
            v42 = (unsigned __int16 *)(v19 + 2);
            v43 = v20 - 1;
            while (v43)
            {
              if (v21 <= 0x19999999)
              {
                v44 = *v42 - 48;
                if (v44 <= 9)
                {
                  v45 = __CFADD__(v44, 10 * v21);
                  v21 = v44 + 10 * v21;
                  ++v42;
                  --v43;
                  if (!v45)
                    continue;
                }
              }
              goto LABEL_12;
            }
            goto LABEL_155;
          }
        }
LABEL_12:
        if (*(_QWORD *)(*(_QWORD *)(v15 + 41952) + 16) != v17)
        {
          v22 = 16 * (v18 & 0xFFFFFFFE);
          if ((*(_WORD *)(v22 + 12) & 0x400) == 0)
          {
            if ((*(_BYTE *)(v22 + 16) & 0x10) != 0)
            {
LABEL_22:
              if (a4)
              {
                *(_WORD *)(a4 + 129) |= 4u;
                if (*(_BYTE *)(a4 + 124))
                {
                  --*(_BYTE *)(a4 + 124);
                }
                else
                {
                  v74 = *(unsigned __int8 *)(a4 + 125);
                  if (v74 != 255)
                    *(_BYTE *)(a4 + 125) = ++v74;
                  if (xmmword_1ECF4C260 < v74)
                  {
                    *(_BYTE *)(a4 + 125) = 0;
                    v75 = *(unsigned __int8 *)(a4 + 126);
                    v76 = BYTE4(xmmword_1ECF4C260) << v75;
                    v77 = v76;
                    if (v76 == 255)
                      LOBYTE(v76) = -2;
                    if (v77 >> v75 == BYTE4(xmmword_1ECF4C260))
                      v78 = v76;
                    else
                      v78 = -2;
                    *(_BYTE *)(a4 + 124) = v78;
                    if (v75 != 255)
                      *(_BYTE *)(a4 + 126) = v75 + 1;
                    *(_BYTE *)(a4 + 127) = 0;
                  }
                  else if (*(_BYTE *)(a4 + 127))
                  {
                    --*(_BYTE *)(a4 + 127);
                  }
                  JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 3u, a4, a5, a6, a7, a8);
                }
              }
              JSC::JSObject::putInlineSlow((unsigned __int8 *)a1, (unint64_t)v14, v17, a3, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v87, a6, a7, a8, a9);
            }
            else
            {
              v23 = (uint64_t *)(v15 + 93080);
              v24 = (JSC::JSCell *)a1;
              while (1)
              {
                if ((*(_WORD *)(v22 + 12) & 0xC00) != 0 || !*(_QWORD *)(v22 + 48))
                  goto LABEL_22;
                v25 = *(JSC::JSCell **)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x30);
                if (!v25)
                  v25 = (JSC::JSCell *)*((_QWORD *)v24 + 2);
                if (v25 == (JSC::JSCell *)2)
                  break;
                v22 = 16 * (*(_DWORD *)v25 & 0xFFFFFFFE);
                v24 = v25;
                if ((*(_BYTE *)(v22 + 0x10) & 0x10) != 0)
                  goto LABEL_22;
              }
              v28 = *(_DWORD *)a1;
              v94 = (JSC::VM *)*((_QWORD *)v14 + 7);
              v29 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, (uint64_t)v94, v17, (uint64_t)a3, 0, (uint64_t)v87, a7, a8, a9);
              if (v26 && (v89 & 1) != 0)
                JSC::throwTypeError((unint64_t)v14, &v94, (uint64_t)v29, (uint64_t)v26);
              if (*(_DWORD *)(v15 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)v26, v27, a4, a5, a6, a7, a8))
              {
                goto LABEL_55;
              }
              if (v91 != 1)
                goto LABEL_103;
              if (v90 - 1 > 1)
                goto LABEL_103;
              v30 = (JSC::Structure *)(16 * (v28 & 0xFFFFFFFE));
              v31 = *((_DWORD *)v30 + 4);
              if ((v31 & 3) == 2)
                goto LABEL_103;
              v32 = *(_WORD *)(16 * (v28 & 0xFFFFFFFE) + 0xC);
              if ((v32 & 8) != 0 || (v32 & 0x10) != 0 && (v32 & 0x20) == 0)
                goto LABEL_103;
              v27 = *(_DWORD *)a1 & 0xFFFFFFFE;
              if (v90 == 1)
              {
                if (v30 == (JSC::Structure *)(16 * v27))
                {
                  v27 = v88;
                  if (v88 < 0x10000)
                  {
                    JSC::Structure::firePropertyReplacementWatchpointSet(v30, (JSC::VM *)v15, (JSC::Structure *)v88, "Did cache property replacement", a5, a6, a7, a8);
                    if ((*v23 & 1) != 0)
                      v64 = 0;
                    else
                      v64 = *v23;
                    JSC::MegamorphicCache::initAsReplace(v64, (WTF::AtomStringImpl *)(v28 & 0xFFFFFFFE), (WTF::StringImpl *)v17, (unsigned __int16)v88, v60, v61, v62, v63);
                  }
                }
                goto LABEL_55;
              }
              if ((v31 & 3) != 0 || (*(_BYTE *)(16 * v27 + 0x10) & 3) != 0)
                goto LABEL_55;
              if ((v31 & 0x80000) != 0)
                goto LABEL_103;
              v33 = *(_QWORD *)(16 * v27 + 0x40);
              if (v33)
              {
                v34 = *(_QWORD *)(16 * v27 + 0x40);
                if (*(_BYTE *)(v33 + 5) != 1)
                {
                  v47 = *(_DWORD *)(v33 + 80);
                  if (v47)
                    v34 = 16 * (v47 & 0xFFFFFFFE);
                  else
                    v34 = 0;
                }
              }
              else
              {
                v34 = 0;
              }
              if ((JSC::Structure *)v34 != v30
                || (v35 = *(_WORD *)(16 * v27 + 0xC), (v35 & 8) != 0)
                || (v35 & 0x10) != 0 && (v35 & 0x20) == 0)
              {
LABEL_103:
                if (a4)
                {
                  *(_WORD *)(a4 + 129) |= 4u;
                  if (*(_BYTE *)(a4 + 124))
                  {
                    --*(_BYTE *)(a4 + 124);
                  }
                  else
                  {
                    v69 = *(unsigned __int8 *)(a4 + 125);
                    if (v69 != 255)
                      *(_BYTE *)(a4 + 125) = ++v69;
                    if (xmmword_1ECF4C260 < v69)
                    {
                      *(_BYTE *)(a4 + 125) = 0;
                      v70 = *(unsigned __int8 *)(a4 + 126);
                      v71 = BYTE4(xmmword_1ECF4C260) << v70;
                      v72 = v71;
                      if (v71 == 255)
                        LOBYTE(v71) = -2;
                      if (v72 >> v70 == BYTE4(xmmword_1ECF4C260))
                        v73 = v71;
                      else
                        v73 = -2;
                      *(_BYTE *)(a4 + 124) = v73;
                      if (v70 != 255)
                        *(_BYTE *)(a4 + 126) = v70 + 1;
                      *(_BYTE *)(a4 + 127) = 0;
                    }
                    else if (*(_BYTE *)(a4 + 127))
                    {
                      --*(_BYTE *)(a4 + 127);
                    }
                    JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 3u, a4, a5, a6, a7, a8);
                  }
                }
                goto LABEL_55;
              }
              v36 = *(unsigned __int16 *)(16 * v27 + 0x18);
              if (v36 == 65534)
                goto LABEL_44;
              if (v36 == 0xFFFF)
                v36 = *(_DWORD *)(v33 + 84);
              if (v36 < 64)
              {
LABEL_44:
                v37 = 0;
              }
              else if ((v36 - 63) >= 5)
              {
                v56 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
                v57 = v56 | (v56 >> 4) | ((v56 | (v56 >> 4)) >> 8);
                v37 = (v57 | HIWORD(v57)) + 1;
              }
              else
              {
                v37 = 4;
              }
              v38 = *(unsigned __int16 *)(16 * (v28 & 0xFFFFFFFE) + 0x18);
              if (v38 == 65534)
                goto LABEL_49;
              if (v38 == 0xFFFF)
                v38 = *(_DWORD *)(*(_QWORD *)(16 * (v28 & 0xFFFFFFFE) + 0x40) + 84);
              if (v38 < 64)
              {
LABEL_49:
                v39 = 0;
              }
              else if ((v38 - 63) >= 5)
              {
                v58 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
                v59 = v58 | (v58 >> 4) | ((v58 | (v58 >> 4)) >> 8);
                v39 = (v59 | HIWORD(v59)) + 1;
              }
              else
              {
                v39 = 4;
              }
              if (v88 < 0x10000)
              {
                if ((*v23 & 1) != 0)
                  v40 = 0;
                else
                  v40 = *v23;
                JSC::MegamorphicCache::initAsTransition(v40, (WTF::AtomStringImpl *)(v28 & 0xFFFFFFFE), v27, (WTF::StringImpl *)v17, (unsigned __int16)v88, v37 != v39, a7, a8);
              }
            }
LABEL_55:
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v26, v27, a4, a5, a6, a7, a8);
              WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
            return *(_QWORD *)(v15 + 16);
          }
        }
LABEL_156:
        if (a4)
        {
          *(_WORD *)(a4 + 129) |= 4u;
          if (*(_BYTE *)(a4 + 124))
          {
            --*(_BYTE *)(a4 + 124);
          }
          else
          {
            v82 = *(unsigned __int8 *)(a4 + 125);
            if (v82 != 255)
              *(_BYTE *)(a4 + 125) = ++v82;
            if (xmmword_1ECF4C260 < v82)
            {
              *(_BYTE *)(a4 + 125) = 0;
              v83 = *(unsigned __int8 *)(a4 + 126);
              v84 = BYTE4(xmmword_1ECF4C260) << v83;
              v85 = v84;
              if (v84 == 255)
                LOBYTE(v84) = -2;
              if (v85 >> v83 == BYTE4(xmmword_1ECF4C260))
                v86 = v84;
              else
                v86 = -2;
              *(_BYTE *)(a4 + 124) = v86;
              if (v83 != 255)
                *(_BYTE *)(a4 + 126) = v83 + 1;
              *(_BYTE *)(a4 + 127) = 0;
            }
            else if (*(_BYTE *)(a4 + 127))
            {
              --*(_BYTE *)(a4 + 127);
            }
            JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 3u, a4, a5, a6, a7, a8);
          }
        }
        JSC::JSValue::put((JSC::JSValue *)&v93, v14, v17, (unint64_t)a3, (uint64_t)v87, a6, a7, a8);
        goto LABEL_55;
      }
    }
  }
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
  }
  else
  {
    v46 = *(unsigned __int8 *)(a4 + 125);
    if (v46 != 255)
      *(_BYTE *)(a4 + 125) = ++v46;
    if (xmmword_1ECF4C260 < v46)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v65 = *(unsigned __int8 *)(a4 + 126);
      v66 = BYTE4(xmmword_1ECF4C260) << v65;
      v67 = v66;
      if (v66 == 255)
        LOBYTE(v66) = -2;
      if (v67 >> v65 == BYTE4(xmmword_1ECF4C260))
        v68 = v66;
      else
        v68 = -2;
      *(_BYTE *)(a4 + 124) = v68;
      if (v65 != 255)
        *(_BYTE *)(a4 + 126) = v65 + 1;
      *(_BYTE *)(a4 + 127) = 0;
    }
    else if (*(_BYTE *)(a4 + 127))
    {
      --*(_BYTE *)(a4 + 127);
    }
    JSC::repatchPutBySlowPathCall(*(JSC::CodeBlock **)(v16 + 16), a4, 3u, a4, a5, a6, a7, a8);
  }
  JSC::putByVal(v14, a1, a2, (unint64_t)a3, a5, 1uLL, a7, a8, a9);
  return *(_QWORD *)(v15 + 16);
}

uint64_t operationPutByValSloppyMegamorphicGeneric(JSC::JSGlobalObject *a1, JSC::JSCell *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  JSC::JSCell *v20;
  JSC::JSCell *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  JSC::Structure *v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  _QWORD v66[2];
  int v67;
  char v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  JSC::VM *var48[10];

  v12 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v12 + 40) = var48[9];
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || (a3 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)a2 + 5) < 0x17u
    || *(_BYTE *)(a3 + 5) != 2
    || (v13 = *(_QWORD *)(a3 + 8)) == 0
    || (v13 & 1) != 0
    || (*(_BYTE *)(v13 + 16) & 0x10) == 0)
  {
    JSC::putByVal(a1, (uint64_t)a2, a3, (unint64_t)a4, 0, 1uLL, a7, a8, a9);
    return *(_QWORD *)(v12 + 16);
  }
  *(_DWORD *)v13 += 2;
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v14 = *(_DWORD *)a2;
    v66[0] = 0;
    v66[1] = a2;
    v67 = -1;
    v68 &= 0xF8u;
    v69 = 0;
    v70 = 1;
    v71 = 0;
    v15 = *(_BYTE **)(v13 + 8);
    v16 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if (!(_DWORD)v16)
        goto LABEL_12;
      v17 = *v15 - 48;
      if (v17 > 9 || v16 >= 2 && *v15 == 48)
        goto LABEL_12;
      v63 = v16 - 1;
      v64 = v15 + 1;
      while (v63)
      {
        if (v17 <= 0x19999999)
        {
          v65 = *v64 - 48;
          if (v65 <= 9)
          {
            v44 = __CFADD__(v65, 10 * v17);
            v17 = v65 + 10 * v17;
            --v63;
            ++v64;
            if (!v44)
              continue;
          }
        }
        goto LABEL_12;
      }
    }
    else
    {
      if (!(_DWORD)v16)
        goto LABEL_12;
      v17 = *(unsigned __int16 *)v15 - 48;
      if (v17 > 9)
        goto LABEL_12;
      if (*(_WORD *)v15 == 48 && v16 > 1)
        goto LABEL_12;
      v41 = (unsigned __int16 *)(v15 + 2);
      v42 = v16 - 1;
      while (v42)
      {
        if (v17 <= 0x19999999)
        {
          v43 = *v41 - 48;
          if (v43 <= 9)
          {
            v44 = __CFADD__(v43, 10 * v17);
            v17 = v43 + 10 * v17;
            ++v41;
            --v42;
            if (!v44)
              continue;
          }
        }
        goto LABEL_12;
      }
    }
    if (v17 != -1)
    {
LABEL_107:
      (*(void (**)(JSC::JSCell *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v13, a4, v66);
      goto LABEL_53;
    }
LABEL_12:
    if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 16) != v13)
    {
      v18 = 16 * (v14 & 0xFFFFFFFE);
      if ((*(_WORD *)(v18 + 12) & 0x400) == 0)
      {
        if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
        {
          v19 = (uint64_t *)(v12 + 93080);
          v20 = a2;
          while ((*(_WORD *)(v18 + 12) & 0xC00) == 0 && *(_QWORD *)(v18 + 48))
          {
            v21 = *(JSC::JSCell **)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
            if (!v21)
              v21 = (JSC::JSCell *)*((_QWORD *)v20 + 2);
            if (v21 == (JSC::JSCell *)2)
            {
              v26 = *(_DWORD *)a2;
              var48[0] = *((JSC::VM **)a1 + 7);
              v27 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, (uint64_t)var48[0], v13, (uint64_t)a4, 0, (uint64_t)v66, a7, a8, a9);
              if (v22 && (v68 & 1) != 0)
                JSC::throwTypeError((unint64_t)a1, var48, (uint64_t)v27, (uint64_t)v22);
              if ((!*(_DWORD *)(v12 + 80)
                 || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v22, v23, v24, v25, a6, a7, a8))
                && v70 == 1
                && v69 - 1 <= 1)
              {
                v28 = (JSC::Structure *)(16 * (v26 & 0xFFFFFFFE));
                v29 = *((_DWORD *)v28 + 4);
                if ((v29 & 3) != 2)
                {
                  v30 = *(_WORD *)(16 * (v26 & 0xFFFFFFFE) + 0xC);
                  if ((v30 & 8) == 0 && ((v30 & 0x10) == 0 || (v30 & 0x20) != 0))
                  {
                    v23 = *(_DWORD *)a2 & 0xFFFFFFFE;
                    if (v69 == 1)
                    {
                      if (v28 == (JSC::Structure *)(16 * v23))
                      {
                        v23 = v67;
                        if (v67 < 0x10000)
                        {
                          JSC::Structure::firePropertyReplacementWatchpointSet(v28, (JSC::VM *)v12, (JSC::Structure *)v67, "Did cache property replacement", v25, a6, a7, a8);
                          if ((*v19 & 1) != 0)
                            v62 = 0;
                          else
                            v62 = *v19;
                          JSC::MegamorphicCache::initAsReplace(v62, (WTF::AtomStringImpl *)(v26 & 0xFFFFFFFE), (WTF::StringImpl *)v13, (unsigned __int16)v67, v58, v59, v60, v61);
                        }
                      }
                    }
                    else if ((v29 & 3) == 0 && !(v29 & 0x80000 | *(_DWORD *)(16 * v23 + 0x10) & 3))
                    {
                      v31 = *(_QWORD *)(16 * v23 + 0x40);
                      if (v31)
                      {
                        v32 = *(_QWORD *)(16 * v23 + 0x40);
                        if (*(_BYTE *)(v31 + 5) != 1)
                        {
                          v45 = *(_DWORD *)(v31 + 80);
                          if (v45)
                            v32 = 16 * (v45 & 0xFFFFFFFE);
                          else
                            v32 = 0;
                        }
                      }
                      else
                      {
                        v32 = 0;
                      }
                      if ((JSC::Structure *)v32 == v28)
                      {
                        v33 = *(_WORD *)(16 * v23 + 0xC);
                        if ((v33 & 8) == 0 && ((v33 & 0x10) == 0 || (v33 & 0x20) != 0))
                        {
                          v34 = *(unsigned __int16 *)(16 * v23 + 0x18);
                          if (v34 == 65534)
                            goto LABEL_42;
                          if (v34 == 0xFFFF)
                            v34 = *(_DWORD *)(v31 + 84);
                          if (v34 < 64)
                          {
LABEL_42:
                            v35 = 0;
                          }
                          else if ((v34 - 63) >= 5)
                          {
                            v54 = (v34 - 64) | ((v34 - 64) >> 1) | (((v34 - 64) | ((v34 - 64) >> 1)) >> 2);
                            v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
                            v35 = (v55 | HIWORD(v55)) + 1;
                          }
                          else
                          {
                            v35 = 4;
                          }
                          v36 = *(unsigned __int16 *)(16 * (v26 & 0xFFFFFFFE) + 0x18);
                          if (v36 == 65534)
                            goto LABEL_47;
                          if (v36 == 0xFFFF)
                            v36 = *(_DWORD *)(*(_QWORD *)(16 * (v26 & 0xFFFFFFFE) + 0x40) + 84);
                          if (v36 < 64)
                          {
LABEL_47:
                            v37 = 0;
                          }
                          else if ((v36 - 63) >= 5)
                          {
                            v56 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
                            v57 = v56 | (v56 >> 4) | ((v56 | (v56 >> 4)) >> 8);
                            v37 = (v57 | HIWORD(v57)) + 1;
                          }
                          else
                          {
                            v37 = 4;
                          }
                          if (v67 < 0x10000)
                          {
                            if ((*v19 & 1) != 0)
                              v38 = 0;
                            else
                              v38 = *v19;
                            JSC::MegamorphicCache::initAsTransition(v38, (WTF::AtomStringImpl *)(v26 & 0xFFFFFFFE), v23, (WTF::StringImpl *)v13, (unsigned __int16)v67, v35 != v37, a7, a8);
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_53;
            }
            v18 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
            v20 = v21;
            if ((*(_BYTE *)(v18 + 0x10) & 0x10) != 0)
              break;
          }
        }
        JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v13, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v66, a6, a7, a8, a9);
        goto LABEL_53;
      }
    }
    goto LABEL_107;
  }
LABEL_53:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v22, v23, v24, v25, a6, a7, a8);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationDirectPutByValSloppyGaveUp(unint64_t a1, JSC::Structure *this, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t vars0;

  v12 = *(JSC::JSGlobalObject **)(a4 + 56);
  v13 = *((_QWORD *)v12 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    result = 2107;
    __break(0xC471u);
  }
  else
  {
    JSC::directPutByVal(v12, a1, (uint64_t)this, a3, a5, 1uLL, a8, a9, a6);
    return *(_QWORD *)(v13 + 16);
  }
  return result;
}

uint64_t operationDirectPutByValSloppyGeneric(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, WTF::StringImpl *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    result = 2123;
    __break(0xC471u);
  }
  else
  {
    JSC::directPutByVal(a1, a2, a3, a4, 0, 1uLL, a8, a9, a5);
    return *(_QWORD *)(v9 + 16);
  }
  return result;
}

uint64_t operationSetPrivateBrandOptimize(const WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v23;
  unsigned __int8 *v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  char v41;
  WTF *v42[3];
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t vars0;

  v6 = *(JSC::JSGlobalObject **)(a3 + 56);
  v7 = *((_QWORD *)v6 + 7);
  v8 = vars0;
  *(_QWORD *)(v7 + 40) = vars0;
  *(_DWORD *)(v8 + 36) = *(_DWORD *)(a3 + 112);
  v9 = *(_DWORD *)a1;
  JSC::JSObject::setPrivateBrand((unint64_t)a1, v6, a2);
  if ((!*(_DWORD *)(v7 + 80)
     || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7, v10, v11, v12, v13, v14, v15, v16))
    && (a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 **)(v8 + 16);
    v19 = *(unsigned __int8 *)(a2 + 5);
    if (v19 != 2)
    {
      if (v19 != 4)
        return *(_QWORD *)(v7 + 16);
LABEL_7:
      v21 = *(_DWORD *)a1 & 0xFFFFFFFE;
      if (!v21)
      {
        *(_WORD *)(a3 + 129) |= 0x10u;
        return *(_QWORD *)(v7 + 16);
      }
      v45 = a2;
      *(_WORD *)(a3 + 129) |= 4u;
      if (*(_BYTE *)(a3 + 124))
      {
        --*(_BYTE *)(a3 + 124);
        return *(_QWORD *)(v7 + 16);
      }
      v23 = *(unsigned __int8 *)(a3 + 125);
      if (v23 != 255)
        *(_BYTE *)(a3 + 125) = ++v23;
      if (xmmword_1ECF4C260 < v23)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v38 = *(unsigned __int8 *)(a3 + 126);
        v39 = BYTE4(xmmword_1ECF4C260) << v38;
        v40 = v39;
        if (v39 == 255)
          LOBYTE(v39) = -2;
        if (v40 >> v38 == BYTE4(xmmword_1ECF4C260))
          v41 = v39;
        else
          v41 = -2;
        *(_BYTE *)(a3 + 124) = v41;
        if (v38 != 255)
          *(_BYTE *)(a3 + 126) = v38 + 1;
        *(_BYTE *)(a3 + 127) = 0;
        goto LABEL_34;
      }
      if (!*(_BYTE *)(a3 + 127))
      {
LABEL_34:
        JSC::repatchSetPrivateBrand((uint64_t *)v6, (WTF::AtomStringImpl *)v18, a1, 16 * (v9 & 0xFFFFFFFE), a2, a3, v15, v16, v17);
        return *(_QWORD *)(v7 + 16);
      }
      --*(_BYTE *)(a3 + 127);
      v44 = 0;
      v43 = v21;
      v24 = (unsigned __int8 *)(a3 + 128);
      if (__ldaxr((unsigned __int8 *)(a3 + 128)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v24))
      {
LABEL_19:
        if (!*(_DWORD *)(a3 + 96))
        {
          if (*(_QWORD *)(a3 + 16))
          {
            v42[0] = 0;
            v42[1] = 0;
            std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(a3 + 80, v42, v11, v12, v13, v14, v15, v16);
          }
          else
          {
            v42[0] = 0;
            v42[1] = 0;
            std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a3 + 80, v42, v11, v12, v13, v14, v15, v16);
          }
          if (v42[0])
            WTF::fastFree((unint64_t)v42[0], v26, v27, v28, v29, v30, v31, v32);
        }
        v42[0] = (WTF *)&v43;
        v42[1] = (WTF *)&v45;
        v42[2] = (WTF *)&v44;
        WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(a3 + 80, (uint64_t)&v43, (uint64_t)&v44, (__int128 *)v42);
        v37 = __ldxr(v24);
        if (v37 == 1)
        {
          if (!__stlxr(0, v24))
            goto LABEL_31;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v33, v34, v35, v36, v15, v16);
LABEL_31:
        if (!v44)
          return *(_QWORD *)(v7 + 16);
        if (v18)
        {
          if (*(_DWORD *)(v7 + 760) >= v18[7])
          {
            JSC::Heap::writeBarrierSlowPath(v7 + 192, (unint64_t)v18);
            if (!v44)
              return *(_QWORD *)(v7 + 16);
          }
        }
        goto LABEL_34;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
      goto LABEL_19;
    }
    v20 = *(_QWORD *)(a2 + 8);
    if (v20 && (v20 & 1) == 0 && (*(_BYTE *)(v20 + 16) & 0x10) != 0)
      goto LABEL_7;
  }
  return *(_QWORD *)(v7 + 16);
}

unint64_t JSC::JSObject::setPrivateBrand(unint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  unint64_t ReinstallPrivateMethodError;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v6 = *(_DWORD *)a1 & 0xFFFFFFFE;
  v7 = (JSC::JSGlobalObject *)(16 * v6);
  if ((*(_BYTE *)(16 * v6 + 0x13) & 1) != 0 && (_DWORD)v6)
  {
    v23 = 16 * v6;
    while (*(_QWORD *)(a3 + 8) != 16 * *(unsigned int *)(v23 + 104))
    {
      v31 = *(_DWORD *)(v23 + 108) & 0xFFFFFFFE;
      v23 = 16 * v31;
      if (!(_DWORD)v31)
        goto LABEL_2;
    }
    v24 = a2;
    ReinstallPrivateMethodError = JSC::createReinstallPrivateMethodError(a2, v7);
    return JSC::VM::throwException(v5, v24, ReinstallPrivateMethodError, v26, v27, v28, v29, v30);
  }
  else
  {
LABEL_2:
    LODWORD(v32) = 1;
    WORD2(v32) = 0;
    v33[0] = v33;
    v33[1] = v33;
    v33[2] = v5;
    v33[3] = 16 * v6;
    result = JSC::Structure::setBrandTransition(v5, (unint64_t)v7, a3, (JSC::DeferredStructureTransitionWatchpointFire *)&v32);
    *(_DWORD *)a1 = result >> 4;
    *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(result + 10);
    *(_BYTE *)(a1 + 5) = *(_BYTE *)(result + 9);
    v17 = (unsigned __int8 *)(a1 + 4);
    if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(result + 8))
    {
      do
      {
        while (1)
        {
          v19 = *v17;
          v20 = __ldxr(v17);
          if (v20 == v19)
            break;
          __clrex();
        }
      }
      while (__stxr(v19 & 0xC0 | *(_BYTE *)(result + 8), v17));
    }
    if (*((_DWORD *)v5 + 190) >= *(unsigned __int8 *)(a1 + 7))
      result = JSC::Heap::writeBarrierSlowPath((uint64_t)v5 + 192, a1);
    if (BYTE4(v32) == 1)
      result = (unint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v32, v16, v9, v10, v11, v12, v13, v14, v15);
    while (1)
    {
      v18 = (_QWORD *)v33[0];
      if ((_QWORD *)v33[0] == v33)
        break;
      v22 = *(_QWORD *)v33[0];
      v21 = *(_QWORD **)(v33[0] + 8);
      *v21 = *(_QWORD *)v33[0];
      *(_QWORD *)(v22 + 8) = v21;
      *v18 = 0;
      v18[1] = 0;
    }
  }
  return result;
}

uint64_t operationSetPrivateBrandGaveUp(unint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::JSGlobalObject *v4;
  uint64_t v5;
  uint64_t vars0;

  v4 = *(JSC::JSGlobalObject **)(a3 + 56);
  v5 = *((_QWORD *)v4 + 7);
  *(_QWORD *)(v5 + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  JSC::JSObject::setPrivateBrand(a1, v4, a2);
  return *(_QWORD *)(v5 + 16);
}

uint64_t operationCheckPrivateBrandOptimize(JSC::JSCell *a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSCell *v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  unint64_t PrivateMethodAccessError;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::JSCell *v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  WTF *v54;
  char *v55;
  unsigned int *v56;
  uint64_t *v57;
  char *v58;
  WTF **v59;
  uint64_t vars0;

  v11 = 0xFFFE000000000002;
  v12 = *(JSC::JSGlobalObject **)(a3 + 56);
  v13 = *((_QWORD *)v12 + 7);
  v14 = vars0;
  *(_QWORD *)(v13 + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a3 + 112);
  v50 = a1;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v38 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v50, v12, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_48;
  }
  v15 = a1;
  if (*((unsigned __int8 *)a1 + 5) <= 0x16u)
    goto LABEL_46;
  while (1)
  {
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return *(_QWORD *)(v13 + 16);
    }
    v16 = (JSC::VM *)*((_QWORD *)v12 + 7);
    v17 = *(_DWORD *)v15 & 0xFFFFFFFE;
    v18 = 16 * v17;
    if ((*(_BYTE *)(16 * v17 + 0x13) & 1) != 0 && (_DWORD)v17)
    {
      while (*(_QWORD *)(a2 + 8) != 16 * *(unsigned int *)(v18 + 104))
      {
        v43 = *(_DWORD *)(v18 + 108) & 0xFFFFFFFE;
        v18 = 16 * v43;
        if (!(_DWORD)v43)
          goto LABEL_64;
      }
    }
    else
    {
LABEL_64:
      PrivateMethodAccessError = JSC::createPrivateMethodAccessError(v12, (JSC::JSGlobalObject *)a2);
      JSC::VM::throwException(v16, v12, PrivateMethodAccessError, v45, v46, v47, v48, v49);
    }
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8)
      || (a2 & v11) != 0)
    {
      return *(_QWORD *)(v13 + 16);
    }
    v19 = *(unsigned __int8 **)(v14 + 16);
    v20 = *(unsigned __int8 *)(a2 + 5);
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(a2 + 8);
      if (!v21 || (v21 & 1) != 0 || (*(_BYTE *)(v21 + 16) & 0x10) == 0)
        return *(_QWORD *)(v13 + 16);
    }
    else if (v20 != 4)
    {
      return *(_QWORD *)(v13 + 16);
    }
    v22 = *(_DWORD *)v15 & 0xFFFFFFFE;
    if (!v22)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      return *(_QWORD *)(v13 + 16);
    }
    v53 = a2;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      return *(_QWORD *)(v13 + 16);
    }
    v24 = *(unsigned __int8 *)(a3 + 125);
    if (v24 != 255)
      *(_BYTE *)(a3 + 125) = ++v24;
    if (xmmword_1ECF4C260 < v24)
    {
      *(_BYTE *)(a3 + 125) = 0;
      v39 = *(unsigned __int8 *)(a3 + 126);
      v40 = BYTE4(xmmword_1ECF4C260) << v39;
      v41 = v40;
      if (v40 == 255)
        LOBYTE(v40) = -2;
      if (v41 >> v39 == BYTE4(xmmword_1ECF4C260))
        v42 = v40;
      else
        v42 = -2;
      *(_BYTE *)(a3 + 124) = v42;
      if (v39 != 255)
        *(_BYTE *)(a3 + 126) = v39 + 1;
      *(_BYTE *)(a3 + 127) = 0;
      goto LABEL_38;
    }
    if (!*(_BYTE *)(a3 + 127))
      goto LABEL_38;
    --*(_BYTE *)(a3 + 127);
    v52 = 0;
    v51 = v22;
    v11 = a3 + 128;
    if (__ldaxr((unsigned __int8 *)(a3 + 128)))
    {
      __clrex();
LABEL_24:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
      goto LABEL_25;
    }
    if (__stxr(1u, (unsigned __int8 *)v11))
      goto LABEL_24;
LABEL_25:
    v14 = a3 + 80;
    v26 = *(_DWORD *)(a3 + 96);
    if (v26)
      goto LABEL_44;
    if (*(_QWORD *)(a3 + 16))
      break;
    v54 = 0;
    v55 = 0;
    std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a3 + 80, &v54, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v54)
      WTF::fastFree((unint64_t)v54, v31, v32, v33, v34, v35, v36, v37);
    v26 = *(_DWORD *)(a3 + 96);
LABEL_44:
    v56 = &v51;
    v57 = &v53;
    v58 = &v52;
    v54 = (WTF *)&v51;
    v55 = &v52;
    if (v26 != -1)
      goto LABEL_28;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_46:
    v38 = JSC::JSCell::toObjectSlow(v15, (JSC::SymbolObject **)v12, a3, a4, a5, a6, a7, a8);
LABEL_48:
    v15 = (JSC::JSCell *)v38;
  }
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v26 = 1;
  *(_DWORD *)(a3 + 96) = 1;
  v56 = &v51;
  v57 = &v53;
  v58 = &v52;
  v54 = (WTF *)&v51;
  v55 = &v52;
LABEL_28:
  v59 = &v54;
  off_1E3596010[v26](&v59, a3 + 80);
  v30 = __ldxr((unsigned __int8 *)v11);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_35;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v27, v28, v29, a6, a7, a8);
LABEL_35:
  if (v52)
  {
    if (!v19
      || *(_DWORD *)(v13 + 760) < v19[7]
      || (JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v19), v52))
    {
LABEL_38:
      JSC::repatchCheckPrivateBrand((uint64_t *)v12, (WTF::AtomStringImpl *)v19, v15, a2, a3, a6, a7, a8, a9);
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t JSC::JSValue::toObject(JSC::JSValue *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if ((result & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toObjectSlowCase(this, a2);
  if (*(unsigned __int8 *)(result + 5) <= 0x16u)
    return JSC::JSCell::toObjectSlow((JSC::JSCell *)result, (JSC::SymbolObject **)a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t operationCheckPrivateBrandGaveUp(unint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  unint64_t PrivateMethodAccessError;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a3 + 56);
  v10 = *((_QWORD *)v9 + 7);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v25 = a1;
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    v16 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v25, v9, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  v12 = (_DWORD *)a1;
  if (*(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v16 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a1, (JSC::SymbolObject **)v9, a3, a4, a5, a6, a7, a8);
LABEL_10:
    v12 = (_DWORD *)v16;
  }
  if (!*(_DWORD *)(v10 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v13 = *v12 & 0xFFFFFFFE;
    v14 = 16 * v13;
    if ((*(_BYTE *)(16 * v13 + 0x13) & 1) != 0 && (_DWORD)v13)
    {
      while (*((_QWORD *)a2 + 1) != 16 * *(unsigned int *)(v14 + 104))
      {
        v17 = *(_DWORD *)(v14 + 108) & 0xFFFFFFFE;
        v14 = 16 * v17;
        if (!(_DWORD)v17)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v18 = (JSC::VM *)*((_QWORD *)v9 + 7);
      PrivateMethodAccessError = JSC::createPrivateMethodAccessError(v9, a2);
      JSC::VM::throwException(v18, v9, PrivateMethodAccessError, v20, v21, v22, v23, v24);
    }
  }
  return *(_QWORD *)(v10 + 16);
}

uint64_t operationPutByValDefinePrivateFieldOptimize(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM **v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  unint64_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  JSC::VM *v24;
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  unint64_t RedefinedPrivateNameError;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  double v34;
  int v35;
  uint64_t v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  JSC::JSRopeString *v66;
  WTF::StringImpl *v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  char v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::JSCell *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126[2];
  int v127;
  char v128;
  __int16 v129;
  char v130;
  uint64_t v131;
  const WTF::StringImpl *v132;
  WTF *v133[3];
  int v134;
  char v135;
  uint64_t v136;
  uint64_t vars0;

  v13 = *(JSC::VM ***)(a4 + 56);
  v14 = v13[7];
  v15 = vars0;
  *((_QWORD *)v14 + 5) = vars0;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(a4 + 112);
  v122 = *(JSC::JSCell **)(v15 + 16);
  v132 = (const WTF::StringImpl *)a1;
  v16 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    v82 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v132, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
    goto LABEL_106;
  }
  v17 = (WTF::StringImpl *)a1;
  if (*(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v82 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a1, v13, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_106:
    v17 = (WTF::StringImpl *)v82;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return *((_QWORD *)v14 + 2);
  v123 = (uint64_t)a3;
  v18 = v13[7];
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v46 = a2;
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 2)
    {
      v19 = *(_QWORD *)(a2 + 8);
      if ((v19 & 1) == 0)
      {
        if ((*(_BYTE *)(v19 + 16) & 0x10) == 0)
        {
          if (*((_QWORD *)v18 + 8096) != v19)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v18 + 8096, *(WTF::AtomStringImpl **)(a2 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
            v77 = *(WTF::StringImpl **)(a2 + 8);
            if (v77)
            {
              if ((*((_BYTE *)v77 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v77 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v77, a3, a4, a5, a6, a7, a8, (WTF *)v126);
                v77 = v126[0];
              }
            }
            v78 = (WTF::StringImpl *)*((_QWORD *)v18 + 8097);
            *((_QWORD *)v18 + 8097) = v77;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 16) & 0x10) == 0)
          {
            v79 = (_DWORD *)*((_QWORD *)v18 + 8097);
            *v79 += 2;
            __dmb(0xAu);
            v80 = *(WTF::StringImpl **)(a2 + 8);
            *(_QWORD *)(a2 + 8) = v79;
            v126[0] = v80;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v18 + 192, (unint64_t)v126);
            v81 = v126[0];
            v126[0] = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
              {
                WTF::StringImpl::~StringImpl(v81, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
              }
              else
              {
                *(_DWORD *)v81 -= 2;
              }
            }
          }
          v19 = *((_QWORD *)v18 + 8097);
        }
        goto LABEL_8;
      }
      v66 = (JSC::JSRopeString *)a2;
LABEL_75:
      JSC::JSRopeString::resolveRopeToAtomString(v66, (JSC::JSGlobalObject *)v13);
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v19 = 0;
        v67 = v126[0];
        v126[0] = 0;
        if (!v67)
          goto LABEL_10;
      }
      else
      {
        v19 = (unint64_t)v126[0];
        if (!v126[0])
          goto LABEL_10;
        *(_DWORD *)v126[0] += 2;
        v126[0] = 0;
        v67 = (WTF::StringImpl *)v19;
      }
      if (*(_DWORD *)v67 != 2)
      {
        *(_DWORD *)v67 -= 2;
        goto LABEL_10;
      }
LABEL_91:
      WTF::StringImpl::~StringImpl(v67, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      goto LABEL_10;
    }
    v46 = JSC::JSCell::toPrimitive(a2, v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v133[0] = (WTF *)v46;
  if (!*((_DWORD *)v18 + 20)
    || (v125 = v46,
        v103 = JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8),
        v46 = v125,
        !v103))
  {
    if ((v46 & 0xFFFE000000000002) == 0)
    {
      v47 = *(unsigned __int8 *)(v46 + 5);
      if (v47 == 2)
        goto LABEL_43;
      if (v47 == 4)
      {
        v19 = *(_QWORD *)(v46 + 8);
        v68 = *(_DWORD *)v19;
        *(_DWORD *)v19 += 4;
        v20 = v68 + 2;
        if (v20)
          goto LABEL_9;
        v67 = (WTF::StringImpl *)v19;
        goto LABEL_91;
      }
    }
    v46 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)v133, (uint64_t)v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_43:
    if (*((_DWORD *)v18 + 20))
    {
      v104 = v46;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v46 = v104;
      if (hasExceptionsAfterHandlingTraps)
      {
        v19 = 0;
        goto LABEL_10;
      }
    }
    v19 = *(_QWORD *)(v46 + 8);
    v18 = v13[7];
    if ((v19 & 1) == 0)
    {
      if ((*(_BYTE *)(v19 + 16) & 0x10) == 0)
      {
        v48 = (char *)v18 + 64768;
        if (*((_QWORD *)v18 + 8096) != v19)
        {
          v49 = v46;
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v18 + 8096, (WTF::AtomStringImpl *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
          v50 = *(WTF::StringImpl **)(v49 + 8);
          if (v50)
          {
            if ((*((_BYTE *)v50 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v50 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v50, a3, a4, a5, a6, a7, a8, (WTF *)v126);
              v50 = v126[0];
            }
          }
          v48 = (char *)v18 + 64768;
          v51 = (WTF::StringImpl *)*((_QWORD *)v18 + 8097);
          *((_QWORD *)v18 + 8097) = v50;
          v46 = v49;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
            }
            else
            {
              *(_DWORD *)v51 -= 2;
            }
            v46 = v49;
            v48 = (char *)v18 + 64768;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v46 + 8) + 16) & 0x10) == 0)
        {
          v52 = (WTF::StringImpl *)*((_QWORD *)v48 + 1);
          *(_DWORD *)v52 += 2;
          v126[0] = v52;
          __dmb(0xAu);
          v53 = *(WTF::StringImpl **)(v46 + 8);
          *(WTF::StringImpl **)(v46 + 8) = v126[0];
          v126[0] = v53;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v18 + 192, (unint64_t)v126);
          v54 = v126[0];
          v126[0] = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
            {
              WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
            }
            else
            {
              *(_DWORD *)v54 -= 2;
            }
          }
          v48 = (char *)v18 + 64768;
        }
        v19 = *((_QWORD *)v48 + 1);
      }
      goto LABEL_8;
    }
    v66 = (JSC::JSRopeString *)v46;
    goto LABEL_75;
  }
  v19 = *(_QWORD *)(*((_QWORD *)v18 + 5244) + 8);
  if (v19)
  {
LABEL_8:
    v20 = *(_DWORD *)v19 + 2;
LABEL_9:
    *(_DWORD *)v19 = v20;
  }
LABEL_10:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    goto LABEL_33;
  if (v16)
  {
    v22 = v16;
    v124 = 0;
  }
  else
  {
    v21 = (_DWORD *)a1;
    if (*(_BYTE *)(a1 + 5) == 32)
      v21 = *(_DWORD **)(a1 + 16);
    v22 = 0;
    v124 = 16 * (*v21 & 0xFFFFFFFE);
  }
  v23 = *(unsigned __int8 *)(a4 + 122);
  v126[0] = 0;
  v126[1] = v17;
  v127 = -1;
  v128 = v128 & 0xF8 | 1;
  v129 = 0;
  v130 = 1;
  v131 = 0;
  v24 = v13[7];
  if (!(v19 >> 4)
    || ((v19 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE)), v13[7], (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v25)|| (v133[0] = (WTF *)v19, JSC::PropertyTable::get(v25, (uint64_t *)v133) == -1))
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v17, (uint64_t)v24, v19, v123, 0, (uint64_t)v126, a7, a8, a9);
  }
  else
  {
    RedefinedPrivateNameError = JSC::createRedefinedPrivateNameError((JSC *)v13, v26);
    JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v13, RedefinedPrivateNameError, v28, v29, v30, v31, v32);
  }
  if (*((_DWORD *)v14 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v33, (uint64_t)a3, a4, a5, a6, a7, a8)
    || v22
    || v23 != *(unsigned __int8 *)(a4 + 122)
    || (a2 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(a1 + 5) < 0x17u)
  {
    goto LABEL_33;
  }
  v35 = *(unsigned __int8 *)(a2 + 5);
  if (v35 != 2)
  {
    if (v35 != 4)
      goto LABEL_33;
LABEL_30:
    if (!v124)
    {
      *(_WORD *)(a4 + 129) |= 0x10u;
      goto LABEL_33;
    }
    v136 = a2;
    *(_WORD *)(a4 + 129) |= 4u;
    if (*(_BYTE *)(a4 + 124))
    {
      --*(_BYTE *)(a4 + 124);
      goto LABEL_33;
    }
    v55 = *(unsigned __int8 *)(a4 + 125);
    if (v55 != 255)
      *(_BYTE *)(a4 + 125) = ++v55;
    if (xmmword_1ECF4C260 < v55)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v91 = *(unsigned __int8 *)(a4 + 126);
      v92 = BYTE4(xmmword_1ECF4C260) << v91;
      v93 = v92;
      if (v92 == 255)
        LOBYTE(v92) = -2;
      if (v93 >> v91 == BYTE4(xmmword_1ECF4C260))
        v94 = v92;
      else
        v94 = -2;
      *(_BYTE *)(a4 + 124) = v94;
      if (v91 != 255)
        *(_BYTE *)(a4 + 126) = v91 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_85;
    }
    if (!*(_BYTE *)(a4 + 127))
    {
LABEL_85:
      JSC::repatchPutBy((uint64_t *)v13, (unint64_t)v122, v132, (const JSC::PropertyTable *)v124, a2, (unint64_t)v126, a4, 9, v34);
      goto LABEL_33;
    }
    --*(_BYTE *)(a4 + 127);
    v135 = 0;
    v134 = v124 >> 4;
    v56 = (unsigned __int8 *)(a4 + 128);
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v56))
    {
      goto LABEL_64;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
LABEL_64:
    if (!*(_DWORD *)(a4 + 96))
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v133[0] = 0;
        v133[1] = 0;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(a4 + 80, v133, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v133[0] = 0;
        v133[1] = 0;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a4 + 80, v133, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      if (v133[0])
        WTF::fastFree((unint64_t)v133[0], v58, v59, v60, v61, v62, v63, v64);
    }
    v133[0] = (WTF *)&v134;
    v133[1] = (WTF *)&v136;
    v133[2] = (WTF *)&v135;
    WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(a4 + 80, (uint64_t)&v134, (uint64_t)&v135, (__int128 *)v133);
    v65 = __ldxr(v56);
    if (v65 == 1)
    {
      if (!__stlxr(0, v56))
        goto LABEL_82;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_82:
    if (!v135)
      goto LABEL_33;
    if (v122)
    {
      if (*((_DWORD *)v14 + 190) >= *((unsigned __int8 *)v122 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, (unint64_t)v122);
        if (!v135)
          goto LABEL_33;
      }
    }
    goto LABEL_85;
  }
  v36 = *(_QWORD *)(a2 + 8);
  if (v36 && (v36 & 1) == 0 && (*(_BYTE *)(v36 + 16) & 0x10) != 0)
    goto LABEL_30;
LABEL_33:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v33, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return *((_QWORD *)v14 + 2);
}

uint64_t operationPutByValSetPrivateFieldOptimize(const WTF::StringImpl *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  unint64_t v12;
  JSC::VM **v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  JSC::VM *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  WTF::AtomStringImpl *v26;
  double v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  JSC::VM *v51;
  int v52;
  unsigned int v53;
  unsigned __int8 *v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  WTF::StringImpl *v84;
  _DWORD *v85;
  WTF *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  WTF::StringImpl *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  int v110;
  int v111;
  unsigned int v112;
  char v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::JSCell *v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 *v141[2];
  int v142;
  char v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  const WTF::StringImpl *v147;
  int v148;
  char v149;
  uint64_t v150;
  WTF *v151;
  char *v152;
  int *v153;
  uint64_t *v154;
  char *v155;
  WTF **v156;
  uint64_t vars0;

  v11 = (unsigned __int8 *)a1;
  v12 = 0xFFFE000000000002;
  v13 = *(JSC::VM ***)(a4 + 56);
  v14 = v13[7];
  v15 = vars0;
  *((_QWORD *)v14 + 5) = vars0;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(a4 + 112);
  v138 = *(JSC::JSCell **)(v15 + 16);
  v147 = a1;
  v16 = (unint64_t)a1 & 0xFFFE000000000002;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v96 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v147, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = (unsigned __int8 *)a1;
    if (*((unsigned __int8 *)a1 + 5) > 0x16u)
      goto LABEL_3;
    v96 = JSC::JSCell::toObjectSlow(a1, v13, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
  }
  v17 = (unsigned __int8 *)v96;
LABEL_3:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return *((_QWORD *)v14 + 2);
  v139 = (uint64_t)a3;
  v18 = v13[7];
  v19 = (unint64_t)v18 + 41952;
  v140 = v16;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v49 = a2;
    goto LABEL_42;
  }
  if (*(_BYTE *)(a2 + 5) != 2)
    goto LABEL_154;
  v12 = *(_QWORD *)(a2 + 8);
  if ((v12 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a2, (JSC::JSGlobalObject *)v13);
    if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v12 = 0;
      v73 = v151;
      v151 = 0;
      if (v73)
        goto LABEL_73;
    }
    else
    {
      v12 = (unint64_t)v151;
      if (v151)
        goto LABEL_72;
    }
  }
  else
  {
    if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
    {
      if (*((_QWORD *)v18 + 8096) != v12)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v18 + 8096, *(WTF::AtomStringImpl **)(a2 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
        v83 = *(WTF **)(a2 + 8);
        if (v83)
        {
          if ((*((_BYTE *)v83 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v83 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v83, a3, a4, a5, a6, a7, a8, (WTF *)&v151);
            v83 = v151;
          }
        }
        v84 = (WTF::StringImpl *)*((_QWORD *)v18 + 8097);
        *((_QWORD *)v18 + 8097) = v83;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
          {
            WTF::StringImpl::~StringImpl(v84, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
          }
          else
          {
            *(_DWORD *)v84 -= 2;
          }
        }
      }
      v16 = v140;
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 16) & 0x10) == 0)
      {
        v85 = (_DWORD *)*((_QWORD *)v18 + 8097);
        *v85 += 2;
        __dmb(0xAu);
        v86 = *(WTF **)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v85;
        v151 = v86;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v18 + 192, (unint64_t)&v151);
        v87 = v151;
        v151 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
          {
            WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
          }
          else
          {
            *(_DWORD *)v87 -= 2;
          }
        }
      }
      v12 = *((_QWORD *)v18 + 8097);
    }
    *(_DWORD *)v12 += 2;
  }
  while (1)
  {
    if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      goto LABEL_35;
    if (v16)
    {
      v19 = 0;
    }
    else
    {
      v20 = v11;
      if (v11[5] == 32)
        v20 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
      v19 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    }
    v18 = (JSC::VM *)*(unsigned __int8 *)(a4 + 122);
    v141[0] = 0;
    v141[1] = v17;
    v142 = -1;
    v143 = v143 & 0xF8 | 1;
    v144 = 0;
    v145 = 1;
    v146 = 0;
    v21 = v13[7];
    if (!(v12 >> 4)
      || ((v12 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE)), v13[7], (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v22)|| (v151 = (WTF *)v12, JSC::PropertyTable::get(v22, (uint64_t *)&v151) == -1))
    {
      v17 = (unsigned __int8 *)v19;
      v28 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v28 = 0x2300000002;
      *(_QWORD *)(v28 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v28 + 16) = 4;
      v151 = (WTF *)v28;
      v36 = JSC::createTypeError((uint64_t)v13, &v151, (uint64_t)JSC::defaultSourceAppender, 0);
      v37 = v151;
      v151 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      JSC::VM::throwException(v21, (JSC::JSGlobalObject *)v13, v36, v31, v32, v33, v34, v35);
      v19 = (unint64_t)v17;
    }
    else
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v17, (uint64_t)v21, v12, v139, 0, (uint64_t)v141, v23, v24, v25);
    }
    if (*((_DWORD *)v14 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v26, (uint64_t)a3, a4, a5, a6, a7, a8)
      || v140
      || (_DWORD)v18 != *(unsigned __int8 *)(a4 + 122)
      || (a2 & 0xFFFE000000000002) != 0
      || v11[5] < 0x17u)
    {
      goto LABEL_35;
    }
    v38 = *(unsigned __int8 *)(a2 + 5);
    if (v38 == 2)
    {
      v39 = *(_QWORD *)(a2 + 8);
      if (!v39 || (v39 & 1) != 0 || (*(_BYTE *)(v39 + 16) & 0x10) == 0)
        goto LABEL_35;
    }
    else if (v38 != 4)
    {
      goto LABEL_35;
    }
    if (!v19)
    {
      *(_WORD *)(a4 + 129) |= 0x10u;
      goto LABEL_35;
    }
    v150 = a2;
    *(_WORD *)(a4 + 129) |= 4u;
    if (*(_BYTE *)(a4 + 124))
    {
      --*(_BYTE *)(a4 + 124);
      goto LABEL_35;
    }
    v53 = *(unsigned __int8 *)(a4 + 125);
    if (v53 != 255)
      *(_BYTE *)(a4 + 125) = ++v53;
    if (xmmword_1ECF4C260 < v53)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v110 = *(unsigned __int8 *)(a4 + 126);
      v111 = BYTE4(xmmword_1ECF4C260) << v110;
      v112 = v111;
      if (v111 == 255)
        LOBYTE(v111) = -2;
      if (v112 >> v110 == BYTE4(xmmword_1ECF4C260))
        v113 = v111;
      else
        v113 = -2;
      *(_BYTE *)(a4 + 124) = v113;
      if (v110 != 255)
        *(_BYTE *)(a4 + 126) = v110 + 1;
      *(_BYTE *)(a4 + 127) = 0;
      goto LABEL_80;
    }
    if (!*(_BYTE *)(a4 + 127))
      goto LABEL_80;
    --*(_BYTE *)(a4 + 127);
    v149 = 0;
    v148 = v19 >> 4;
    v54 = (unsigned __int8 *)(a4 + 128);
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v54))
    {
      goto LABEL_58;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
LABEL_58:
    v11 = (unsigned __int8 *)(a4 + 80);
    if (!*(_DWORD *)(a4 + 96))
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v151 = 0;
        v152 = 0;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(a4 + 80, &v151, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v151 = 0;
        v152 = 0;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a4 + 80, &v151, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      if (v151)
        WTF::fastFree((unint64_t)v151, v56, v57, v58, v59, v60, v61, v62);
    }
    v153 = &v148;
    v154 = &v150;
    v155 = &v149;
    v151 = (WTF *)&v148;
    v152 = &v149;
    v63 = *(unsigned int *)(a4 + 96);
    if ((_DWORD)v63 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
    v49 = JSC::JSCell::toPrimitive(a2, v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_42:
    v141[0] = (unsigned __int8 *)v49;
    if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v12 = *(_QWORD *)(*(_QWORD *)v19 + 8);
      if (v12)
        goto LABEL_48;
LABEL_50:
      v16 = v140;
    }
    else
    {
      if ((v49 & v12) == 0)
      {
        v50 = *(unsigned __int8 *)(v49 + 5);
        if (v50 == 2)
          goto LABEL_45;
        if (v50 == 4)
        {
          v12 = *(_QWORD *)(v49 + 8);
          v74 = *(_DWORD *)v12;
          *(_DWORD *)v12 += 4;
          v52 = v74 + 2;
          if (v52)
            goto LABEL_49;
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
          goto LABEL_50;
        }
      }
      v49 = (uint64_t)JSC::JSValue::toStringSlowCase(v141, (uint64_t)v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_45:
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v12 = 0;
        goto LABEL_50;
      }
      v12 = *(_QWORD *)(v49 + 8);
      v51 = v13[7];
      if ((v12 & 1) == 0)
      {
        if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
        {
          if (*((_QWORD *)v51 + 8096) != v12)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v51 + 8096, *(WTF::AtomStringImpl **)(v49 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
            v105 = *(WTF **)(v49 + 8);
            if (v105)
            {
              if ((*((_BYTE *)v105 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v105 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v105, a3, a4, a5, a6, a7, a8, (WTF *)&v151);
                v105 = v151;
              }
            }
            v106 = (WTF::StringImpl *)*((_QWORD *)v51 + 8097);
            *((_QWORD *)v51 + 8097) = v105;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
              {
                WTF::StringImpl::~StringImpl(v106, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
              }
              else
              {
                *(_DWORD *)v106 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v49 + 8) + 16) & 0x10) == 0)
          {
            v107 = (WTF *)*((_QWORD *)v51 + 8097);
            *(_DWORD *)v107 += 2;
            v151 = v107;
            __dmb(0xAu);
            v108 = *(WTF **)(v49 + 8);
            *(_QWORD *)(v49 + 8) = v151;
            v151 = v108;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v51 + 192, (unint64_t)&v151);
            v109 = v151;
            v151 = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
              {
                WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
              }
              else
              {
                *(_DWORD *)v109 -= 2;
              }
            }
          }
          v12 = *((_QWORD *)v51 + 8097);
        }
LABEL_48:
        v52 = *(_DWORD *)v12 + 2;
LABEL_49:
        *(_DWORD *)v12 = v52;
        goto LABEL_50;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v49, (JSC::JSGlobalObject *)v13);
      if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v12 = 0;
        v73 = v151;
        v151 = 0;
        v16 = v140;
        if (v73)
          goto LABEL_73;
      }
      else
      {
        v12 = (unint64_t)v151;
        v16 = v140;
        if (v151)
        {
LABEL_72:
          *(_DWORD *)v12 += 2;
          v151 = 0;
          v73 = (WTF *)v12;
LABEL_73:
          if (*(_DWORD *)v73 == 2)
          {
            WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          }
          else
          {
            *(_DWORD *)v73 -= 2;
          }
        }
      }
    }
  }
  v156 = &v151;
  off_1E3596010[v63](&v156, a4 + 80);
  v64 = __ldxr(v54);
  if (v64 == 1)
  {
    if (!__stlxr(0, v54))
      goto LABEL_77;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a4 + 128), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_77:
  if (v149)
  {
    if (!v138
      || *((_DWORD *)v14 + 190) < *((unsigned __int8 *)v138 + 7)
      || (JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, (unint64_t)v138), v149))
    {
LABEL_80:
      JSC::repatchPutBy((uint64_t *)v13, (unint64_t)v138, v147, (const JSC::PropertyTable *)v19, a2, (unint64_t)v141, a4, 11, v27);
    }
  }
LABEL_35:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v26, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return *((_QWORD *)v14 + 2);
}

uint64_t operationPutByValDefinePrivateFieldGaveUp(WTF::StringImpl *a1, WTF::AtomStringImpl *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  JSC::VM **v11;
  JSC::VM *v12;
  uint64_t v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  unint64_t v17;
  int v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _DWORD *v91;
  WTF::StringImpl *v92;
  _QWORD *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133[2];
  int v134;
  int v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  uint64_t vars0;

  v10 = (uint64_t)a2;
  v11 = *(JSC::VM ***)(a4 + 56);
  v12 = v11[7];
  v13 = vars0;
  *((_QWORD *)v12 + 5) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  v137 = a1;
  v14 = v11[7];
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v58 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v137, (JSC::JSGlobalObject *)v11, a3, a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v15 = a1;
  if (*((unsigned __int8 *)a1 + 5) <= 0x16u)
  {
    v58 = JSC::JSCell::toObjectSlow(a1, v11, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_41:
    v15 = (WTF::StringImpl *)v58;
  }
  if (!*((_DWORD *)v14 + 20))
    goto LABEL_4;
  v67 = *((_DWORD *)v14 + 20);
  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v14 + 2))
  {
LABEL_4:
    v16 = v11[7];
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v10 + 5) == 2)
      {
        v17 = *(_QWORD *)(v10 + 8);
        if ((v17 & 1) == 0)
        {
          if ((*(_BYTE *)(v17 + 16) & 0x10) == 0)
          {
            v48 = (WTF::StringImpl *)*((_QWORD *)v16 + 8096);
            if (v48 != (WTF::StringImpl *)v17)
            {
              *(_DWORD *)v17 += 2;
              *((_QWORD *)v16 + 8096) = v17;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
              v49 = *(WTF::StringImpl **)(v10 + 8);
              if (v49)
              {
                if ((*((_BYTE *)v49 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v49 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v49, a3, a4, a5, a6, a7, a8, (WTF *)v133);
                  v49 = v133[0];
                }
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)v16 + 8097);
              *((_QWORD *)v16 + 8097) = v49;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                {
                  WTF::StringImpl::~StringImpl(v50, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
                }
                else
                {
                  *(_DWORD *)v50 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v51 = (_DWORD *)*((_QWORD *)v16 + 8097);
              *v51 += 2;
              __dmb(0xAu);
              v52 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v51;
              v133[0] = v52;
              v53 = (_QWORD *)((char *)v16 + 808);
              v54 = *((unsigned int *)v16 + 205);
              if ((_DWORD)v54 == *((_DWORD *)v16 + 204))
              {
                v56 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)v133);
                v54 = *((unsigned int *)v16 + 205);
                v55 = (WTF::StringImpl **)(*((_QWORD *)v16 + 101) + 8 * v54);
                v52 = *v56;
              }
              else
              {
                v55 = (WTF::StringImpl **)(*v53 + 8 * v54);
                v56 = v133;
              }
              *v56 = 0;
              *v55 = v52;
              *((_DWORD *)v16 + 205) = v54 + 1;
              v57 = v133[0];
              v133[0] = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                {
                  WTF::StringImpl::~StringImpl(v57, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
                }
                else
                {
                  *(_DWORD *)v57 -= 2;
                }
              }
            }
            v17 = *((_QWORD *)v16 + 8097);
          }
          goto LABEL_8;
        }
LABEL_85:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)v11);
        if (!*((_DWORD *)v16 + 20))
          goto LABEL_86;
        v116 = *((_DWORD *)v16 + 20);
        if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v16 + 2))
        {
          v17 = 0;
          v87 = v133[0];
          v133[0] = 0;
          if (!v87)
            goto LABEL_10;
        }
        else
        {
LABEL_86:
          v17 = (unint64_t)v133[0];
          if (!v133[0])
            goto LABEL_10;
          *(_DWORD *)v133[0] += 2;
          v133[0] = 0;
          v87 = (WTF::StringImpl *)v17;
        }
        if (*(_DWORD *)v87 != 2)
        {
          *(_DWORD *)v87 -= 2;
          goto LABEL_10;
        }
LABEL_90:
        WTF::StringImpl::~StringImpl(v87, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        goto LABEL_10;
      }
      v10 = JSC::JSCell::toPrimitive(v10, v11, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
    v138 = (WTF::StringImpl *)v10;
    if (*((_DWORD *)v16 + 20))
    {
      v114 = *((_DWORD *)v16 + 20);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v16 + 2))
      {
        v17 = *(_QWORD *)(*((_QWORD *)v16 + 5244) + 8);
        if (v17)
        {
LABEL_8:
          v18 = *(_DWORD *)v17 + 2;
LABEL_9:
          *(_DWORD *)v17 = v18;
        }
LABEL_10:
        if (!*((_DWORD *)v14 + 20))
          goto LABEL_11;
        v68 = *((_DWORD *)v14 + 20);
        if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!*((_QWORD *)v14 + 2))
        {
LABEL_11:
          v133[0] = 0;
          v133[1] = v15;
          v134 = -1;
          a9.n128_u64[0] = 16777217;
          v135 = 16777217;
          v136 = 0;
          v19 = v11[7];
          if (!(v17 >> 4)
            || ((v17 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x20)) != 0
            || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)), v11[7], (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v20)|| (v138 = (WTF::StringImpl *)v17, JSC::PropertyTable::get(v20, (uint64_t *)&v138) == -1))
          {
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v15, (uint64_t)v19, v17, (uint64_t)a3, 0, (uint64_t)v133, a7, a8, a9);
          }
          else
          {
            v21 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v21 = 0x2600000002;
            *(_QWORD *)(v21 + 8) = "Cannot redefine existing private field";
            *(_DWORD *)(v21 + 16) = 4;
            v138 = (WTF::StringImpl *)v21;
            v29 = JSC::createTypeError((uint64_t)v11, &v138, (uint64_t)JSC::defaultSourceAppender, 0);
            v30 = v138;
            v138 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
                WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                *(_DWORD *)v30 -= 2;
              }
            }
            JSC::VM::throwException(v19, (JSC::JSGlobalObject *)v11, v29, v24, v25, v26, v27, v28);
          }
        }
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        return *((_QWORD *)v12 + 2);
      }
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v85 = *(unsigned __int8 *)(v10 + 5);
      if (v85 == 2)
        goto LABEL_69;
      if (v85 == 4)
      {
        v17 = *(_QWORD *)(v10 + 8);
        v86 = *(_DWORD *)v17;
        *(_DWORD *)v17 += 4;
        v18 = v86 + 2;
        if (v18)
          goto LABEL_9;
        v87 = (WTF::StringImpl *)v17;
        goto LABEL_90;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v138, (uint64_t)v11, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_69:
    if (*((_DWORD *)v16 + 20))
    {
      v115 = *((_DWORD *)v16 + 20);
      if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v16 + 2))
      {
        v17 = 0;
        goto LABEL_10;
      }
    }
    v17 = *(_QWORD *)(v10 + 8);
    v16 = v11[7];
    if ((v17 & 1) == 0)
    {
      if ((*(_BYTE *)(v17 + 16) & 0x10) == 0)
      {
        v88 = (WTF::StringImpl *)*((_QWORD *)v16 + 8096);
        if (v88 != (WTF::StringImpl *)v17)
        {
          *(_DWORD *)v17 += 2;
          *((_QWORD *)v16 + 8096) = v17;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v88 -= 2;
            }
          }
          v89 = *(WTF::StringImpl **)(v10 + 8);
          if (v89)
          {
            if ((*((_BYTE *)v89 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v89 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v89, a3, a4, a5, a6, a7, a8, (WTF *)v133);
              v89 = v133[0];
            }
          }
          v90 = (WTF::StringImpl *)*((_QWORD *)v16 + 8097);
          *((_QWORD *)v16 + 8097) = v89;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v91 = (_DWORD *)*((_QWORD *)v16 + 8097);
          *v91 += 2;
          __dmb(0xAu);
          v92 = *(WTF::StringImpl **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v91;
          v133[0] = v92;
          v93 = (_QWORD *)((char *)v16 + 808);
          v94 = *((unsigned int *)v16 + 205);
          if ((_DWORD)v94 == *((_DWORD *)v16 + 204))
          {
            v96 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)v133);
            v94 = *((unsigned int *)v16 + 205);
            v95 = (WTF::StringImpl **)(*((_QWORD *)v16 + 101) + 8 * v94);
            v92 = *v96;
          }
          else
          {
            v95 = (WTF::StringImpl **)(*v93 + 8 * v94);
            v96 = v133;
          }
          *v96 = 0;
          *v95 = v92;
          *((_DWORD *)v16 + 205) = v94 + 1;
          v97 = v133[0];
          v133[0] = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
            {
              WTF::StringImpl::~StringImpl(v97, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
            }
            else
            {
              *(_DWORD *)v97 -= 2;
            }
          }
        }
        v17 = *((_QWORD *)v16 + 8097);
      }
      goto LABEL_8;
    }
    goto LABEL_85;
  }
  return *((_QWORD *)v12 + 2);
}

uint64_t operationPutByValDefinePrivateFieldGeneric(JSC::VM **a1, WTF::StringImpl *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  unint64_t v15;
  int v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t TypeError;
  WTF::StringImpl *v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  _QWORD *v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  WTF::StringImpl **v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131[2];
  int v132;
  int v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *var48[10];

  v10 = (uint64_t)a3;
  v12 = a1[7];
  *((WTF::StringImpl **)v12 + 5) = var48[9];
  v135 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v56 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v135, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v13 = a2;
  if (*((unsigned __int8 *)a2 + 5) <= 0x16u)
  {
    v56 = JSC::JSCell::toObjectSlow(a2, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_41:
    v13 = (WTF::StringImpl *)v56;
  }
  if (!*((_DWORD *)v12 + 20))
    goto LABEL_4;
  v65 = *((_DWORD *)v12 + 20);
  if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v12 + 2))
  {
LABEL_4:
    v14 = a1[7];
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v10 + 5) == 2)
      {
        v15 = *(_QWORD *)(v10 + 8);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
          {
            v46 = (WTF::StringImpl *)*((_QWORD *)v14 + 8096);
            if (v46 != (WTF::StringImpl *)v15)
            {
              *(_DWORD *)v15 += 2;
              *((_QWORD *)v14 + 8096) = v15;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                {
                  WTF::StringImpl::~StringImpl(v46, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
                }
                else
                {
                  *(_DWORD *)v46 -= 2;
                }
              }
              v47 = *(WTF::StringImpl **)(v10 + 8);
              if (v47)
              {
                if ((*((_BYTE *)v47 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v47 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v47, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v131);
                  v47 = v131[0];
                }
              }
              v48 = (WTF::StringImpl *)*((_QWORD *)v14 + 8097);
              *((_QWORD *)v14 + 8097) = v47;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v49 = (_DWORD *)*((_QWORD *)v14 + 8097);
              *v49 += 2;
              __dmb(0xAu);
              v50 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v49;
              v131[0] = v50;
              v51 = (_QWORD *)((char *)v14 + 808);
              v52 = *((unsigned int *)v14 + 205);
              if ((_DWORD)v52 == *((_DWORD *)v14 + 204))
              {
                v54 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)v131);
                v52 = *((unsigned int *)v14 + 205);
                v53 = (WTF::StringImpl **)(*((_QWORD *)v14 + 101) + 8 * v52);
                v50 = *v54;
              }
              else
              {
                v53 = (WTF::StringImpl **)(*v51 + 8 * v52);
                v54 = v131;
              }
              *v54 = 0;
              *v53 = v50;
              *((_DWORD *)v14 + 205) = v52 + 1;
              v55 = v131[0];
              v131[0] = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                {
                  WTF::StringImpl::~StringImpl(v55, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
                }
                else
                {
                  *(_DWORD *)v55 -= 2;
                }
              }
            }
            v15 = *((_QWORD *)v14 + 8097);
          }
          goto LABEL_8;
        }
LABEL_85:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)a1);
        if (!*((_DWORD *)v14 + 20))
          goto LABEL_86;
        v114 = *((_DWORD *)v14 + 20);
        if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_QWORD *)v14 + 2))
        {
          v15 = 0;
          v85 = v131[0];
          v131[0] = 0;
          if (!v85)
            goto LABEL_10;
        }
        else
        {
LABEL_86:
          v15 = (unint64_t)v131[0];
          if (!v131[0])
            goto LABEL_10;
          *(_DWORD *)v131[0] += 2;
          v131[0] = 0;
          v85 = (WTF::StringImpl *)v15;
        }
        if (*(_DWORD *)v85 != 2)
        {
          *(_DWORD *)v85 -= 2;
          goto LABEL_10;
        }
LABEL_90:
        WTF::StringImpl::~StringImpl(v85, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
        goto LABEL_10;
      }
      v10 = JSC::JSCell::toPrimitive(v10, a1, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
    var48[0] = (WTF::StringImpl *)v10;
    if (*((_DWORD *)v14 + 20))
    {
      v112 = *((_DWORD *)v14 + 20);
      if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v14 + 2))
      {
        v15 = *(_QWORD *)(*((_QWORD *)v14 + 5244) + 8);
        if (v15)
        {
LABEL_8:
          v16 = *(_DWORD *)v15 + 2;
LABEL_9:
          *(_DWORD *)v15 = v16;
        }
LABEL_10:
        if (!*((_DWORD *)v12 + 20))
          goto LABEL_11;
        v66 = *((_DWORD *)v12 + 20);
        if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!*((_QWORD *)v12 + 2))
        {
LABEL_11:
          v131[0] = 0;
          v131[1] = v13;
          v132 = -1;
          a9.n128_u64[0] = 16777217;
          v133 = 16777217;
          v134 = 0;
          v17 = a1[7];
          if (!(v15 >> 4)
            || ((v15 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x20)) != 0
            || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE)), a1[7], (uint64_t)a3, a4, a5, a6, a7, a8), !v18)|| (var48[0] = (WTF::StringImpl *)v15, JSC::PropertyTable::get(v18, (uint64_t *)var48) == -1))
          {
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v13, (uint64_t)v17, v15, (uint64_t)a4, 0, (uint64_t)v131, a7, a8, a9);
          }
          else
          {
            v19 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v19 = 0x2600000002;
            *(_QWORD *)(v19 + 8) = "Cannot redefine existing private field";
            *(_DWORD *)(v19 + 16) = 4;
            var48[0] = (WTF::StringImpl *)v19;
            TypeError = JSC::createTypeError((uint64_t)a1, var48, (uint64_t)JSC::defaultSourceAppender, 0);
            v28 = var48[0];
            var48[0] = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
              {
                WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
              }
              else
              {
                *(_DWORD *)v28 -= 2;
              }
            }
            JSC::VM::throwException(v17, (JSC::JSGlobalObject *)a1, TypeError, v22, v23, v24, v25, v26);
          }
        }
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        return *((_QWORD *)v12 + 2);
      }
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v83 = *(unsigned __int8 *)(v10 + 5);
      if (v83 == 2)
        goto LABEL_69;
      if (v83 == 4)
      {
        v15 = *(_QWORD *)(v10 + 8);
        v84 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v84 + 2;
        if (v16)
          goto LABEL_9;
        v85 = (WTF::StringImpl *)v15;
        goto LABEL_90;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)var48, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_69:
    if (*((_DWORD *)v14 + 20))
    {
      v113 = *((_DWORD *)v14 + 20);
      if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v14 + 2))
      {
        v15 = 0;
        goto LABEL_10;
      }
    }
    v15 = *(_QWORD *)(v10 + 8);
    v14 = a1[7];
    if ((v15 & 1) == 0)
    {
      if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
      {
        v86 = (WTF::StringImpl *)*((_QWORD *)v14 + 8096);
        if (v86 != (WTF::StringImpl *)v15)
        {
          *(_DWORD *)v15 += 2;
          *((_QWORD *)v14 + 8096) = v15;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
            {
              WTF::StringImpl::~StringImpl(v86, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
            }
            else
            {
              *(_DWORD *)v86 -= 2;
            }
          }
          v87 = *(WTF::StringImpl **)(v10 + 8);
          if (v87)
          {
            if ((*((_BYTE *)v87 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v87 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v87, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v131);
              v87 = v131[0];
            }
          }
          v88 = (WTF::StringImpl *)*((_QWORD *)v14 + 8097);
          *((_QWORD *)v14 + 8097) = v87;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
            }
            else
            {
              *(_DWORD *)v88 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v89 = (_DWORD *)*((_QWORD *)v14 + 8097);
          *v89 += 2;
          __dmb(0xAu);
          v90 = *(WTF::StringImpl **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v89;
          v131[0] = v90;
          v91 = (_QWORD *)((char *)v14 + 808);
          v92 = *((unsigned int *)v14 + 205);
          if ((_DWORD)v92 == *((_DWORD *)v14 + 204))
          {
            v94 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)v131);
            v92 = *((unsigned int *)v14 + 205);
            v93 = (WTF::StringImpl **)(*((_QWORD *)v14 + 101) + 8 * v92);
            v90 = *v94;
          }
          else
          {
            v93 = (WTF::StringImpl **)(*v91 + 8 * v92);
            v94 = v131;
          }
          *v94 = 0;
          *v93 = v90;
          *((_DWORD *)v14 + 205) = v92 + 1;
          v95 = v131[0];
          v131[0] = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
            {
              WTF::StringImpl::~StringImpl(v95, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
            }
            else
            {
              *(_DWORD *)v95 -= 2;
            }
          }
        }
        v15 = *((_QWORD *)v14 + 8097);
      }
      goto LABEL_8;
    }
    goto LABEL_85;
  }
  return *((_QWORD *)v12 + 2);
}

uint64_t operationPutByValSetPrivateFieldGaveUp(WTF::StringImpl *a1, WTF::AtomStringImpl *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  unint64_t v16;
  int v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _DWORD *v93;
  WTF::StringImpl *v94;
  _QWORD *v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135[2];
  int v136;
  int v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t vars0;

  v9 = (uint64_t)a2;
  v10 = *(JSC::VM ***)(a4 + 56);
  v11 = v10[7];
  v12 = vars0;
  *((_QWORD *)v11 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  v139 = a1;
  v13 = v10[7];
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v60 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v139, (JSC::JSGlobalObject *)v10, a3, a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v14 = a1;
  if (*((unsigned __int8 *)a1 + 5) <= 0x16u)
  {
    v60 = JSC::JSCell::toObjectSlow(a1, v10, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_41:
    v14 = (WTF::StringImpl *)v60;
  }
  if (!*((_DWORD *)v13 + 20))
    goto LABEL_4;
  v69 = *((_DWORD *)v13 + 20);
  if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v13 + 2))
  {
LABEL_4:
    v15 = v10[7];
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v9 + 5) == 2)
      {
        v16 = *(_QWORD *)(v9 + 8);
        if ((v16 & 1) == 0)
        {
          if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
          {
            v50 = (WTF::StringImpl *)*((_QWORD *)v15 + 8096);
            if (v50 != (WTF::StringImpl *)v16)
            {
              *(_DWORD *)v16 += 2;
              *((_QWORD *)v15 + 8096) = v16;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                {
                  WTF::StringImpl::~StringImpl(v50, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
                }
                else
                {
                  *(_DWORD *)v50 -= 2;
                }
              }
              v51 = *(WTF::StringImpl **)(v9 + 8);
              if (v51)
              {
                if ((*((_BYTE *)v51 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v51 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v51, a3, a4, a5, a6, a7, a8, (WTF *)v135);
                  v51 = v135[0];
                }
              }
              v52 = (WTF::StringImpl *)*((_QWORD *)v15 + 8097);
              *((_QWORD *)v15 + 8097) = v51;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                {
                  WTF::StringImpl::~StringImpl(v52, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
                }
                else
                {
                  *(_DWORD *)v52 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
            {
              v53 = (_DWORD *)*((_QWORD *)v15 + 8097);
              *v53 += 2;
              __dmb(0xAu);
              v54 = *(WTF::StringImpl **)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v53;
              v135[0] = v54;
              v55 = (_QWORD *)((char *)v15 + 808);
              v56 = *((unsigned int *)v15 + 205);
              if ((_DWORD)v56 == *((_DWORD *)v15 + 204))
              {
                v58 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)v135);
                v56 = *((unsigned int *)v15 + 205);
                v57 = (WTF::StringImpl **)(*((_QWORD *)v15 + 101) + 8 * v56);
                v54 = *v58;
              }
              else
              {
                v57 = (WTF::StringImpl **)(*v55 + 8 * v56);
                v58 = v135;
              }
              *v58 = 0;
              *v57 = v54;
              *((_DWORD *)v15 + 205) = v56 + 1;
              v59 = v135[0];
              v135[0] = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                {
                  WTF::StringImpl::~StringImpl(v59, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
                }
                else
                {
                  *(_DWORD *)v59 -= 2;
                }
              }
            }
            v16 = *((_QWORD *)v15 + 8097);
          }
          goto LABEL_8;
        }
LABEL_85:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v9, (JSC::JSGlobalObject *)v10);
        if (!*((_DWORD *)v15 + 20))
          goto LABEL_86;
        v118 = *((_DWORD *)v15 + 20);
        if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v15 + 2))
        {
          v16 = 0;
          v89 = v135[0];
          v135[0] = 0;
          if (!v89)
            goto LABEL_10;
        }
        else
        {
LABEL_86:
          v16 = (unint64_t)v135[0];
          if (!v135[0])
            goto LABEL_10;
          *(_DWORD *)v135[0] += 2;
          v135[0] = 0;
          v89 = (WTF::StringImpl *)v16;
        }
        if (*(_DWORD *)v89 != 2)
        {
          *(_DWORD *)v89 -= 2;
          goto LABEL_10;
        }
LABEL_90:
        WTF::StringImpl::~StringImpl(v89, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        goto LABEL_10;
      }
      v9 = JSC::JSCell::toPrimitive(v9, v10, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
    v140 = (WTF::StringImpl *)v9;
    if (*((_DWORD *)v15 + 20))
    {
      v116 = *((_DWORD *)v15 + 20);
      if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v15 + 2))
      {
        v16 = *(_QWORD *)(*((_QWORD *)v15 + 5244) + 8);
        if (v16)
        {
LABEL_8:
          v17 = *(_DWORD *)v16 + 2;
LABEL_9:
          *(_DWORD *)v16 = v17;
        }
LABEL_10:
        if (!*((_DWORD *)v13 + 20))
          goto LABEL_11;
        v70 = *((_DWORD *)v13 + 20);
        if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!*((_QWORD *)v13 + 2))
        {
LABEL_11:
          v135[0] = 0;
          v135[1] = v14;
          v136 = -1;
          v137 = 16777217;
          v138 = 0;
          v18 = v10[7];
          if (!(v16 >> 4)
            || ((v16 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x20)) != 0
            || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)), v10[7], (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v19)|| (v140 = (WTF::StringImpl *)v16, JSC::PropertyTable::get(v19, (uint64_t *)&v140) == -1))
          {
            v23 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v23 = 0x2300000002;
            *(_QWORD *)(v23 + 8) = "Cannot access invalid private field";
            *(_DWORD *)(v23 + 16) = 4;
            v140 = (WTF::StringImpl *)v23;
            v31 = JSC::createTypeError((uint64_t)v10, &v140, (uint64_t)JSC::defaultSourceAppender, 0);
            v32 = v140;
            v140 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
              {
                WTF::StringImpl::~StringImpl(v32, v24, v25, v26, v27, v28, v29, v30);
                WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
              }
              else
              {
                *(_DWORD *)v32 -= 2;
              }
            }
            JSC::VM::throwException(v18, (JSC::JSGlobalObject *)v10, v31, v26, v27, v28, v29, v30);
          }
          else
          {
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v14, (uint64_t)v18, v16, (uint64_t)a3, 0, (uint64_t)v135, v20, v21, v22);
          }
        }
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        return *((_QWORD *)v11 + 2);
      }
    }
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v87 = *(unsigned __int8 *)(v9 + 5);
      if (v87 == 2)
        goto LABEL_69;
      if (v87 == 4)
      {
        v16 = *(_QWORD *)(v9 + 8);
        v88 = *(_DWORD *)v16;
        *(_DWORD *)v16 += 4;
        v17 = v88 + 2;
        if (v17)
          goto LABEL_9;
        v89 = (WTF::StringImpl *)v16;
        goto LABEL_90;
      }
    }
    v9 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v140, (uint64_t)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_69:
    if (*((_DWORD *)v15 + 20))
    {
      v117 = *((_DWORD *)v15 + 20);
      if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v15 + 2))
      {
        v16 = 0;
        goto LABEL_10;
      }
    }
    v16 = *(_QWORD *)(v9 + 8);
    v15 = v10[7];
    if ((v16 & 1) == 0)
    {
      if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
      {
        v90 = (WTF::StringImpl *)*((_QWORD *)v15 + 8096);
        if (v90 != (WTF::StringImpl *)v16)
        {
          *(_DWORD *)v16 += 2;
          *((_QWORD *)v15 + 8096) = v16;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
          v91 = *(WTF::StringImpl **)(v9 + 8);
          if (v91)
          {
            if ((*((_BYTE *)v91 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v91 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v91, a3, a4, a5, a6, a7, a8, (WTF *)v135);
              v91 = v135[0];
            }
          }
          v92 = (WTF::StringImpl *)*((_QWORD *)v15 + 8097);
          *((_QWORD *)v15 + 8097) = v91;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
            {
              WTF::StringImpl::~StringImpl(v92, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
            }
            else
            {
              *(_DWORD *)v92 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
        {
          v93 = (_DWORD *)*((_QWORD *)v15 + 8097);
          *v93 += 2;
          __dmb(0xAu);
          v94 = *(WTF::StringImpl **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v93;
          v135[0] = v94;
          v95 = (_QWORD *)((char *)v15 + 808);
          v96 = *((unsigned int *)v15 + 205);
          if ((_DWORD)v96 == *((_DWORD *)v15 + 204))
          {
            v98 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)v135);
            v96 = *((unsigned int *)v15 + 205);
            v97 = (WTF::StringImpl **)(*((_QWORD *)v15 + 101) + 8 * v96);
            v94 = *v98;
          }
          else
          {
            v97 = (WTF::StringImpl **)(*v95 + 8 * v96);
            v98 = v135;
          }
          *v98 = 0;
          *v97 = v94;
          *((_DWORD *)v15 + 205) = v96 + 1;
          v99 = v135[0];
          v135[0] = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
            {
              WTF::StringImpl::~StringImpl(v99, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
            }
            else
            {
              *(_DWORD *)v99 -= 2;
            }
          }
        }
        v16 = *((_QWORD *)v15 + 8097);
      }
      goto LABEL_8;
    }
    goto LABEL_85;
  }
  return *((_QWORD *)v11 + 2);
}

uint64_t operationPutByValSetPrivateFieldGeneric(JSC::VM **a1, WTF::StringImpl *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  JSC::VM *v13;
  unint64_t v14;
  int v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t TypeError;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _DWORD *v91;
  WTF::StringImpl *v92;
  _QWORD *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133[2];
  int v134;
  int v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *var48[10];

  v9 = (uint64_t)a3;
  v11 = a1[7];
  *((WTF::StringImpl **)v11 + 5) = var48[9];
  v137 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v58 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v137, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v12 = a2;
  if (*((unsigned __int8 *)a2 + 5) <= 0x16u)
  {
    v58 = JSC::JSCell::toObjectSlow(a2, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_41:
    v12 = (WTF::StringImpl *)v58;
  }
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_4;
  v67 = *((_DWORD *)v11 + 20);
  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v11 + 2))
  {
LABEL_4:
    v13 = a1[7];
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v9 + 5) == 2)
      {
        v14 = *(_QWORD *)(v9 + 8);
        if ((v14 & 1) == 0)
        {
          if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
          {
            v48 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
            if (v48 != (WTF::StringImpl *)v14)
            {
              *(_DWORD *)v14 += 2;
              *((_QWORD *)v13 + 8096) = v14;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
              v49 = *(WTF::StringImpl **)(v9 + 8);
              if (v49)
              {
                if ((*((_BYTE *)v49 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v49 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v49, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v133);
                  v49 = v133[0];
                }
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
              *((_QWORD *)v13 + 8097) = v49;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                {
                  WTF::StringImpl::~StringImpl(v50, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
                }
                else
                {
                  *(_DWORD *)v50 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
            {
              v51 = (_DWORD *)*((_QWORD *)v13 + 8097);
              *v51 += 2;
              __dmb(0xAu);
              v52 = *(WTF::StringImpl **)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v51;
              v133[0] = v52;
              v53 = (_QWORD *)((char *)v13 + 808);
              v54 = *((unsigned int *)v13 + 205);
              if ((_DWORD)v54 == *((_DWORD *)v13 + 204))
              {
                v56 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)v133);
                v54 = *((unsigned int *)v13 + 205);
                v55 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v54);
                v52 = *v56;
              }
              else
              {
                v55 = (WTF::StringImpl **)(*v53 + 8 * v54);
                v56 = v133;
              }
              *v56 = 0;
              *v55 = v52;
              *((_DWORD *)v13 + 205) = v54 + 1;
              v57 = v133[0];
              v133[0] = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                {
                  WTF::StringImpl::~StringImpl(v57, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
                }
                else
                {
                  *(_DWORD *)v57 -= 2;
                }
              }
            }
            v14 = *((_QWORD *)v13 + 8097);
          }
          goto LABEL_8;
        }
LABEL_85:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v9, (JSC::JSGlobalObject *)a1);
        if (!*((_DWORD *)v13 + 20))
          goto LABEL_86;
        v116 = *((_DWORD *)v13 + 20);
        if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_QWORD *)v13 + 2))
        {
          v14 = 0;
          v87 = v133[0];
          v133[0] = 0;
          if (!v87)
            goto LABEL_10;
        }
        else
        {
LABEL_86:
          v14 = (unint64_t)v133[0];
          if (!v133[0])
            goto LABEL_10;
          *(_DWORD *)v133[0] += 2;
          v133[0] = 0;
          v87 = (WTF::StringImpl *)v14;
        }
        if (*(_DWORD *)v87 != 2)
        {
          *(_DWORD *)v87 -= 2;
          goto LABEL_10;
        }
LABEL_90:
        WTF::StringImpl::~StringImpl(v87, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        goto LABEL_10;
      }
      v9 = JSC::JSCell::toPrimitive(v9, a1, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
    var48[0] = (WTF::StringImpl *)v9;
    if (*((_DWORD *)v13 + 20))
    {
      v114 = *((_DWORD *)v13 + 20);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v13 + 2))
      {
        v14 = *(_QWORD *)(*((_QWORD *)v13 + 5244) + 8);
        if (v14)
        {
LABEL_8:
          v15 = *(_DWORD *)v14 + 2;
LABEL_9:
          *(_DWORD *)v14 = v15;
        }
LABEL_10:
        if (!*((_DWORD *)v11 + 20))
          goto LABEL_11;
        v68 = *((_DWORD *)v11 + 20);
        if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!*((_QWORD *)v11 + 2))
        {
LABEL_11:
          v133[0] = 0;
          v133[1] = v12;
          v134 = -1;
          v135 = 16777217;
          v136 = 0;
          v16 = a1[7];
          if (!(v14 >> 4)
            || ((v14 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x20)) != 0
            || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)), a1[7], (uint64_t)a3, a4, a5, a6, a7, a8), !v17)|| (var48[0] = (WTF::StringImpl *)v14, JSC::PropertyTable::get(v17, (uint64_t *)var48) == -1))
          {
            v21 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v21 = 0x2300000002;
            *(_QWORD *)(v21 + 8) = "Cannot access invalid private field";
            *(_DWORD *)(v21 + 16) = 4;
            var48[0] = (WTF::StringImpl *)v21;
            TypeError = JSC::createTypeError((uint64_t)a1, var48, (uint64_t)JSC::defaultSourceAppender, 0);
            v30 = var48[0];
            var48[0] = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
                WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                *(_DWORD *)v30 -= 2;
              }
            }
            JSC::VM::throwException(v16, (JSC::JSGlobalObject *)a1, TypeError, v24, v25, v26, v27, v28);
          }
          else
          {
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, (uint64_t)v16, v14, (uint64_t)a4, 0, (uint64_t)v133, v18, v19, v20);
          }
        }
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        return *((_QWORD *)v11 + 2);
      }
    }
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v85 = *(unsigned __int8 *)(v9 + 5);
      if (v85 == 2)
        goto LABEL_69;
      if (v85 == 4)
      {
        v14 = *(_QWORD *)(v9 + 8);
        v86 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v15 = v86 + 2;
        if (v15)
          goto LABEL_9;
        v87 = (WTF::StringImpl *)v14;
        goto LABEL_90;
      }
    }
    v9 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)var48, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_69:
    if (*((_DWORD *)v13 + 20))
    {
      v115 = *((_DWORD *)v13 + 20);
      if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v13 + 2))
      {
        v14 = 0;
        goto LABEL_10;
      }
    }
    v14 = *(_QWORD *)(v9 + 8);
    v13 = a1[7];
    if ((v14 & 1) == 0)
    {
      if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
      {
        v88 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
        if (v88 != (WTF::StringImpl *)v14)
        {
          *(_DWORD *)v14 += 2;
          *((_QWORD *)v13 + 8096) = v14;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v88 -= 2;
            }
          }
          v89 = *(WTF::StringImpl **)(v9 + 8);
          if (v89)
          {
            if ((*((_BYTE *)v89 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v89 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v89, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v133);
              v89 = v133[0];
            }
          }
          v90 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
          *((_QWORD *)v13 + 8097) = v89;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
        {
          v91 = (_DWORD *)*((_QWORD *)v13 + 8097);
          *v91 += 2;
          __dmb(0xAu);
          v92 = *(WTF::StringImpl **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v91;
          v133[0] = v92;
          v93 = (_QWORD *)((char *)v13 + 808);
          v94 = *((unsigned int *)v13 + 205);
          if ((_DWORD)v94 == *((_DWORD *)v13 + 204))
          {
            v96 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)v133);
            v94 = *((unsigned int *)v13 + 205);
            v95 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v94);
            v92 = *v96;
          }
          else
          {
            v95 = (WTF::StringImpl **)(*v93 + 8 * v94);
            v96 = v133;
          }
          *v96 = 0;
          *v95 = v92;
          *((_DWORD *)v13 + 205) = v94 + 1;
          v97 = v133[0];
          v133[0] = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
            {
              WTF::StringImpl::~StringImpl(v97, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
            }
            else
            {
              *(_DWORD *)v97 -= 2;
            }
          }
        }
        v14 = *((_QWORD *)v13 + 8097);
      }
      goto LABEL_8;
    }
    goto LABEL_85;
  }
  return *((_QWORD *)v11 + 2);
}

uint64_t operationCallDirectEvalSloppy(JSC::CallFrame *a1, const WTF::StringImpl *a2, void *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  *((_QWORD *)a1 + 2) = 0;
  return JSC::eval(a1, a3, a2, 1uLL, a6, a7, a8, a9, a4);
}

uint64_t operationCallDirectEvalStrict(JSC::CallFrame *a1, const WTF::StringImpl *a2, void *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  *((_QWORD *)a1 + 2) = 0;
  return JSC::eval(a1, a3, a2, 0, a6, a7, a8, a9, a4);
}

uint64_t operationPolymorphicCall(JSC::CodeBlock **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  JSC::CodeBlock **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  JSC::CodeBlock **v20;
  unsigned int v21;
  _BOOL8 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  JSC::CallFrame *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::CodeBlock **v80;
  unsigned __int8 *v81;
  _QWORD v82[2];
  uint64_t v83[2];

  v8 = a2;
  v9 = a1;
  v10 = *((_QWORD *)a2 + 8);
  if (!v10)
  {
    v50 = *a1;
    if ((*((_QWORD *)*v9 + 3) & 0xFFFE000000000007) == 3)
      v10 = JSC::CallFrame::codeOwnerCellSlow(v50);
    else
      v10 = *((_QWORD *)v50 + 2);
  }
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v10 & 8) != 0)
    v11 = (uint64_t *)(v10 - 16);
  v12 = *v11;
  *(_QWORD *)(v12 + 40) = v9;
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v9[2] = 0;
  v20 = v9 + 2;
  v21 = v8[17] >> 4;
  v23 = v21 == 8 || v21 - 3 < 2;
  v24 = (uint64_t)v9[3];
  if ((v24 & 0xFFFE000000000002) != 0)
    goto LABEL_78;
  v25 = *(unsigned __int8 *)(v24 + 5);
  if (v25 != 26)
  {
    if ((v25 - 27) <= 1)
    {
      if (BYTE1(dword_1ECF4C240))
      {
        v43 = *(_QWORD **)(v12 + 90440);
        if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
        {
          v33 = v43[17];
          v44 = (unsigned int *)v43[18];
          if (v44)
          {
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 + 1, v44));
            do
            {
              v46 = __ldaxr(v44);
              v47 = --v46 == 0;
            }
            while (__stlxr(v46, v44));
            goto LABEL_59;
          }
        }
        else
        {
          v33 = v43[15];
          v44 = (unsigned int *)v43[16];
          if (v44)
          {
            do
              v48 = __ldaxr(v44);
            while (__stlxr(v48 + 1, v44));
            do
            {
              v49 = __ldaxr(v44);
              v47 = --v49 == 0;
            }
            while (__stlxr(v49, v44));
LABEL_59:
            if (v47)
            {
              atomic_store(1u, v44);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v44, v13, v14, (uint64_t)v15, v16, (uint64_t)v20, v17, v18);
              WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
            }
          }
        }
      }
      else if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
      {
        v33 = qword_1ECF53240;
      }
      else
      {
        v33 = qword_1ECF53238;
      }
LABEL_61:
      v24 = 0;
      goto LABEL_45;
    }
LABEL_78:
    v33 = JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, (uint64_t)v9, (unint64_t)v9[3], v8, (uint64_t)v20, v17, v18);
    goto LABEL_61;
  }
  v26 = *(_QWORD *)(v24 + 24);
  if ((v26 & 1) != 0)
    v26 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v15 = *(const WTF::StringImpl **)(v24 + 16);
  v27 = (unsigned int *)(v12 + 80);
  v28 = *(_DWORD *)(v12 + 80);
  if ((v28 & 0x20) == 0)
  {
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 | 0x20, v27));
  }
  if (*(_BYTE *)(v26 + 5) == 8)
    goto LABEL_29;
  if (v21 > 8 || ((1 << v21) & 0x118) == 0)
  {
    v30 = *(_QWORD *)(v26 + 8);
LABEL_21:
    if (v30)
      v31 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
    else
      v31 = 0;
    if (v31)
    {
      v32 = 96;
      if (v23)
        v32 = 104;
      *v20 = *(JSC::CodeBlock **)(v26 + v32);
    }
    else
    {
      JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v26, v12, v24, v15, (JSC::VM *)v23, v20, v17, v18);
    }
    if (*v27
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v20, v17, v18))
    {
      v33 = 0;
      goto LABEL_43;
    }
LABEL_29:
    if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
    {
      v33 = *(_QWORD *)(v26 + 32);
      if (v33)
        goto LABEL_43;
    }
    else
    {
      v33 = *(_QWORD *)(v26 + 24);
      if (v33)
        goto LABEL_43;
    }
    v80 = v9;
    v81 = v8;
    v34 = 8;
    if (v23)
      v34 = 16;
    v35 = *(unsigned int **)(v26 + v34);
    v36 = v35 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v33 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v35 + 40))(v35, 1);
    do
    {
      v38 = __ldaxr(v36);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v36));
    if (!v39)
    {
      atomic_store(1u, v35 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 32))(v35);
    }
    v40 = 24;
    if (v23)
      v40 = 32;
    *(_QWORD *)(v26 + v40) = v33;
    v9 = v80;
    v8 = v81;
    goto LABEL_43;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v26 + 88) + 24) & 0x80000000) == 0)
  {
    v30 = *(_QWORD *)(v26 + 16);
    goto LABEL_21;
  }
  v71 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)v8, (JSC::JSCell *)v10, v14, (uint64_t)v15, v16, (uint64_t)v20, v17, v18);
  v9[3] = *(JSC::CodeBlock **)(v71 + 96);
  v33 = JSC::throwNotAConstructorErrorFromCallIC(v71, (JSC::JSCell *)v10, (WTF::StringImpl *)v24, (JSC::CallLinkInfo *)v8);
LABEL_43:
  if ((v28 & 0x20) == 0)
  {
    do
      v41 = __ldaxr(v27);
    while (__stlxr(v41 & 0xFFFFFFDF, v27));
  }
LABEL_45:
  if (*(_QWORD *)(v12 + 16))
  {
    v51 = *(_QWORD *)(v12 + 90440);
    v52 = *(_QWORD *)(v51 + 152);
    v53 = *(unsigned int **)(v51 + 160);
    v82[0] = v52;
    if (v53)
    {
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      goto LABEL_73;
    }
LABEL_74:
    v82[1] = v53;
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>(v83, v52, v53, (uint64_t)v15, v16, (uint64_t)v20, v17, v18);
    v33 = v83[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v83, v57, v58, v59, v60, v61, v62, v63);
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v82, v64, v65, v66, v67, v68, v69, v70);
    return v33;
  }
  JSC::linkPolymorphicCall((JSC::VM *)v12, (unsigned __int8 *)v10, (uint64_t)v9, (uint64_t)v8, v24, (uint64_t)v20, v17, v18, v19);
  if (*(_QWORD *)(v12 + 16))
  {
    v55 = *(_QWORD *)(v12 + 90440);
    v52 = *(_QWORD *)(v55 + 152);
    v53 = *(unsigned int **)(v55 + 160);
    v82[0] = v52;
    if (v53)
    {
      do
        v56 = __ldaxr(v53);
      while (__stlxr(v56 + 1, v53));
LABEL_73:
      v52 = v82[0];
      goto LABEL_74;
    }
    goto LABEL_74;
  }
  return v33;
}

uint64_t operationVirtualCall(JSC::CodeBlock **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::CodeBlock **v19;
  unsigned int v20;
  _BOOL8 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  JSC::CallFrame *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD v77[2];
  uint64_t v78[2];

  v10 = *(_QWORD *)(a2 + 64);
  if (!v10)
  {
    v57 = *a1;
    if ((*((_QWORD *)*a1 + 3) & 0xFFFE000000000007) == 3)
      v10 = JSC::CallFrame::codeOwnerCellSlow(v57);
    else
      v10 = *((_QWORD *)v57 + 2);
  }
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v10 & 8) != 0)
    v11 = (uint64_t *)(v10 - 16);
  v12 = *v11;
  *(_QWORD *)(v12 + 40) = a1;
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  a1[2] = 0;
  v19 = a1 + 2;
  v20 = *(unsigned __int8 *)(a2 + 17) >> 4;
  v22 = v20 == 8 || v20 - 3 < 2;
  v23 = (uint64_t)a1[3];
  if ((v23 & 0xFFFE000000000002) != 0)
    goto LABEL_74;
  v24 = *(unsigned __int8 *)(v23 + 5);
  if (v24 == 26)
  {
    v25 = *(_QWORD *)(v23 + 24);
    if ((v25 & 1) != 0)
      v25 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v15 = *(const WTF::StringImpl **)(v23 + 16);
    v26 = (unsigned int *)(v12 + 80);
    v27 = *(_DWORD *)(v12 + 80);
    if ((v27 & 0x20) == 0)
    {
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 | 0x20, v26));
    }
    if (*(_BYTE *)(v25 + 5) != 8)
    {
      if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v25 + 88) + 24) & 0x80000000) != 0)
        {
          v76 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)a2, (JSC::JSCell *)v10, v14, (uint64_t)v15, v16, (uint64_t)v19, v17, v18);
          a1[3] = *(JSC::CodeBlock **)(v76 + 96);
          v32 = JSC::throwNotAConstructorErrorFromCallIC(v76, (JSC::JSCell *)v10, (WTF::StringImpl *)v23, (JSC::CallLinkInfo *)a2);
LABEL_43:
          if ((v27 & 0x20) == 0)
          {
            do
              v40 = __ldaxr(v26);
            while (__stlxr(v40 & 0xFFFFFFDF, v26));
          }
          goto LABEL_45;
        }
        v29 = *(_QWORD *)(v25 + 16);
      }
      else
      {
        v29 = *(_QWORD *)(v25 + 8);
      }
      if (v29)
        v30 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
      else
        v30 = 0;
      if (v30)
      {
        v31 = 96;
        if (v22)
          v31 = 104;
        *v19 = *(JSC::CodeBlock **)(v25 + v31);
      }
      else
      {
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v25, v12, v23, v15, (JSC::VM *)v22, v19, v17, v18);
      }
      if (*v26
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v19, v17, v18))
      {
        v32 = 0;
        goto LABEL_43;
      }
    }
    if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
    {
      v32 = *(_QWORD *)(v25 + 32);
      if (v32)
        goto LABEL_43;
    }
    else
    {
      v32 = *(_QWORD *)(v25 + 24);
      if (v32)
        goto LABEL_43;
    }
    v33 = 8;
    if (v22)
      v33 = 16;
    v34 = *(unsigned int **)(v25 + v33);
    v35 = v34 + 2;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
    v32 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v34 + 40))(v34, 1);
    do
    {
      v37 = __ldaxr(v35);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v35));
    if (!v38)
    {
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 32))(v34);
    }
    v39 = 24;
    if (v22)
      v39 = 32;
    *(_QWORD *)(v25 + v39) = v32;
    goto LABEL_43;
  }
  if ((v24 - 27) > 1)
  {
LABEL_74:
    v32 = JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, (uint64_t)a1, (unint64_t)a1[3], (unsigned __int8 *)a2, (uint64_t)v19, v17, v18);
    goto LABEL_45;
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v42 = *(_QWORD **)(v12 + 90440);
    if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
    {
      v32 = v42[17];
      v43 = (unsigned int *)v42[18];
      if (!v43)
        goto LABEL_45;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
      do
      {
        v45 = __ldaxr(v43);
        v46 = --v45 == 0;
      }
      while (__stlxr(v45, v43));
    }
    else
    {
      v32 = v42[15];
      v43 = (unsigned int *)v42[16];
      if (!v43)
        goto LABEL_45;
      do
        v55 = __ldaxr(v43);
      while (__stlxr(v55 + 1, v43));
      do
      {
        v56 = __ldaxr(v43);
        v46 = --v56 == 0;
      }
      while (__stlxr(v56, v43));
    }
    if (v46)
    {
      atomic_store(1u, v43);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v43, v13, v14, (uint64_t)v15, v16, (uint64_t)v19, v17, v18);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  else if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
  {
    v32 = qword_1ECF53240;
  }
  else
  {
    v32 = qword_1ECF53238;
  }
LABEL_45:
  if (*(_QWORD *)(v12 + 16))
  {
    v58 = *(_QWORD *)(v12 + 90440);
    v59 = *(_QWORD *)(v58 + 152);
    v60 = *(unsigned int **)(v58 + 160);
    v77[0] = v59;
    if (v60)
    {
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 + 1, v60));
      v59 = v77[0];
    }
    v77[1] = v60;
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::retagged<(WTF::PtrTag)49594>(v78, v59, v60, (uint64_t)v15, v16, (uint64_t)v19, v17, v18);
    v32 = v78[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v78, v62, v63, v64, v65, v66, v67, v68);
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v77, v69, v70, v71, v72, v73, v74, v75);
  }
  return v32;
}

rlimit *operationDefaultCall(JSC::CodeBlock **a1, JSC::CallLinkInfoBase *a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::CallLinkInfoBase *v9;
  JSC::CodeBlock **v10;
  unint64_t v11;
  unint64_t v12;
  rlim_t v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t casual;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  JSC::CodeBlock **v25;
  unsigned int v26;
  _BOOL8 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  unint64_t v37;
  JSC::CodeBlock **v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  rlimit *v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  _opaque_pthread_t *v60;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  _opaque_pthread_t *v70;
  unint64_t v72;
  rlim_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  rlim_t v78;
  rlimit *v79;
  char v80;
  rlim_t v81;
  rlimit *v82;
  int v83;
  BOOL v85;
  JSC::CallLinkInfo *v86;
  rlimit *v87;
  char *stackaddr_np;
  _opaque_pthread_t *v89;
  unint64_t v90;
  char *v91;
  _opaque_pthread_t *v92;
  unint64_t v93;
  int v94;
  _opaque_pthread_t *v95;
  rlim_t rlim_cur;
  int v97;
  _opaque_pthread_t *v98;
  rlim_t stacksize_np;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t (*v110)(unsigned int *, uint64_t, uint64_t, const WTF::StringImpl *);
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  rlimit *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  rlimit *v122;
  _QWORD *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  unsigned int v128;
  int v129;
  rlimit *v130;
  rlimit *v131;
  JSC::CallLinkInfoBase *v132;
  rlimit *v133;
  unsigned int v134;
  unsigned int v135;
  JSC::CallFrame *v136;
  uint64_t v137;
  unsigned int *v138;
  const void *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  rlimit *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  rlimit *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  rlimit *v178;
  rlimit *v179;
  rlimit *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  JSC::Compilation *v190;
  rlimit *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  JSC::CallLinkInfoBase *v204;
  JSC::CodeBlock **v205;
  int v206;
  _QWORD *v207;
  unint64_t v208;
  const void *v209;
  const void *v210;
  unsigned int *v211;
  rlimit v212;
  rlimit *v213;

  v9 = a2;
  v10 = a1;
  v11 = *((_QWORD *)a2 + 8);
  if (!v11)
  {
    v136 = *a1;
    if ((*((_QWORD *)*v10 + 3) & 0xFFFE000000000007) == 3)
      v11 = JSC::CallFrame::codeOwnerCellSlow(v136);
    else
      v11 = *((_QWORD *)v136 + 2);
  }
  v12 = v11 & 0xFFFFFFFFFFFFC000 | 8;
  if ((v11 & 8) != 0)
    v12 = v11 - 16;
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)v12 + 90440;
  *(_QWORD *)(*(_QWORD *)v12 + 40) = v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  casual = *(_QWORD *)(StatusReg + 736);
  v205 = v10;
  if (!casual)
  {
    v53 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v53 != -1)
    {
      v212.rlim_cur = (rlim_t)&v211;
      v213 = &v212;
      std::__call_once(&WTF::initialize(void)::onceKey, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v54 = *(_QWORD *)(StatusReg + 752);
    if (v54)
    {
      v55 = (_BYTE *)(v54 + 9408);
      *(_BYTE *)(v54 + 9408) = 1;
      v56 = *(unsigned int *)(v54 + 9424);
      if ((_DWORD)v56)
      {
        *(_DWORD *)(v54 + 9424) = v56 - *(_DWORD *)(v54 + 9428);
        casual = *(_QWORD *)(v54 + 9416) - v56;
LABEL_64:
        *v55 = 0;
LABEL_65:
        *(_OWORD *)casual = 0u;
        *(_OWORD *)(casual + 16) = 0u;
        *(_QWORD *)(casual + 96) = 0;
        *(_OWORD *)(casual + 64) = 0u;
        *(_OWORD *)(casual + 80) = 0u;
        *(_OWORD *)(casual + 32) = 0u;
        *(_OWORD *)(casual + 48) = 0u;
        *(_DWORD *)casual = 1;
        *(_OWORD *)(casual + 8) = 0u;
        v57 = (unint64_t *)(casual + 8);
        *(_OWORD *)(casual + 24) = 0u;
        do
        {
          v58 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v59 = v58 + 1;
        }
        while (__stlxr(v59, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(casual + 48) = v59;
        *(_QWORD *)(casual + 52) = 0;
        *(_QWORD *)(casual + 68) = 0;
        *(_QWORD *)(casual + 60) = 0;
        *(_DWORD *)(casual + 76) = 0;
        *(_QWORD *)(casual + 88) = 0;
        *(_QWORD *)(casual + 96) = 0;
        v60 = pthread_self();
        if (__ldaxr(v57))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v57))
        {
LABEL_70:
          *(_QWORD *)(casual + 40) = v60;
          *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v60);
          v62 = __ldxr(v57);
          if (v62 == 1)
          {
            v10 = v205;
            if (!__stlxr(0, v57))
              goto LABEL_126;
          }
          else
          {
            __clrex();
            v10 = v205;
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_126:
          stackaddr_np = *(char **)(casual + 16);
          if (!stackaddr_np)
          {
            v94 = pthread_main_np();
            v95 = pthread_self();
            stackaddr_np = (char *)pthread_get_stackaddr_np(v95);
            if (v94)
            {
              getrlimit(3, &v212);
              if (v212.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                rlim_cur = 0x800000;
              else
                rlim_cur = v212.rlim_cur;
            }
            else
            {
              rlim_cur = pthread_get_stacksize_np(v95);
            }
            *(_QWORD *)(casual + 16) = stackaddr_np;
            *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
            v10 = v205;
          }
          *(_QWORD *)(casual + 80) = stackaddr_np;
          *(_QWORD *)(casual + 56) = casual + 64;
          v89 = pthread_self();
          if (pthread_equal(v89, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v90 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v90 != -1)
            {
              v212.rlim_cur = (rlim_t)&v211;
              v213 = &v212;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(StatusReg + 736) = casual;
          pthread_key_init_np();
          goto LABEL_5;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
        goto LABEL_70;
      }
      v100 = *(_QWORD *)(v54 + 9448);
      v101 = *(_QWORD *)(v54 + 9432);
      if (v100)
      {
LABEL_159:
        v102 = __clz(v100);
        *(_QWORD *)(v54 + 9448) = v100 & ~(0x8000000000000000 >> v102);
        casual = v101 + 16 * v102;
        goto LABEL_64;
      }
      if (*(_BYTE *)(v54 + 9413) == 6)
      {
        v166 = *(_DWORD *)(v54 + 9444);
        v167 = *(unsigned int *)(v54 + 9440);
        if (v167 < v166)
        {
          *(_QWORD *)&v55[8 * v167 + 56] = 0;
          v168 = (unint64_t *)(v54 + 8 * v167 + 9472);
          v169 = v166 - 1 - v167;
          while (v169)
          {
            v101 += 1024;
            v171 = *v168++;
            v170 = v171;
            LODWORD(v167) = v167 + 1;
            --v169;
            if (v171)
            {
              v100 = __rbit64(v170);
              *(_DWORD *)(v54 + 9440) = v167;
              *(_QWORD *)(v54 + 9432) = v101;
              goto LABEL_159;
            }
          }
          *(_DWORD *)(v54 + 9440) = v166;
        }
      }
      *v55 = 0;
    }
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_65;
  }
LABEL_5:
  v17 = *(_QWORD *)(v13 + 112);
  v18 = *(unsigned __int8 *)(v17 + 6);
  v207 = (_QWORD *)v14;
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(StatusReg + 736);
    if (v20)
    {
LABEL_7:
      if (v19 == v20)
      {
        if (byte_1ECF4C348)
        {
          v137 = *(_QWORD *)(StatusReg + 736);
          if (!v137)
            v137 = WTF::Thread::initializeCurrentTLS(0);
          v212.rlim_cur = v13;
          v213 = (rlimit *)&v202;
          v138 = *(unsigned int **)(v14 + 2672);
          v139 = *(const void **)(v137 + 16);
          v210 = *(const void **)(v137 + 24);
          v211 = v138;
          v209 = v139;
          WTF::dataLog<char [27],WTF::RawPointer,char [28],WTF::RawPointer,char [20],WTF::RawPointer,char [19],WTF::RawPointer,char [3],WTF::RawPointer,char [2],char [2]>("Sanitizing stack for VM = ", (const void **)&v212, ", current stack pointer at ", (const void **)&v213, ", last stack top = ", (const void **)&v211, ", in stack range (", &v210, ", ", &v209, "]", "\n");
        }
        v21 = *(_QWORD *)(casual + 16);
        if (!v21 || (v22 = *(_QWORD *)(v14 + 2672), v21 < v22) || *(_QWORD *)(casual + 24) >= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x19879233CLL);
        }
        sanitizeStackForVMImpl(v13, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, v202);
        v23 = *(_QWORD *)(casual + 16);
        if (!v23 || (v24 = *(_QWORD *)(v14 + 2672), v23 < v24) || *(_QWORD *)(casual + 24) >= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x198792350);
        }
      }
      goto LABEL_15;
    }
    v63 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v63 != -1)
    {
      v212.rlim_cur = (rlim_t)&v211;
      v213 = &v212;
      std::__call_once(&WTF::initialize(void)::onceKey, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v64 = *(_QWORD *)(StatusReg + 752);
    v204 = v9;
    if (v64)
    {
      v65 = (_BYTE *)(v64 + 9408);
      *(_BYTE *)(v64 + 9408) = 1;
      v66 = *(unsigned int *)(v64 + 9424);
      if ((_DWORD)v66)
      {
        *(_DWORD *)(v64 + 9424) = v66 - *(_DWORD *)(v64 + 9428);
        v20 = *(_QWORD *)(v64 + 9416) - v66;
LABEL_78:
        *v65 = 0;
LABEL_79:
        *(_OWORD *)v20 = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_QWORD *)(v20 + 96) = 0;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_OWORD *)(v20 + 48) = 0u;
        *(_DWORD *)v20 = 1;
        *(_OWORD *)(v20 + 8) = 0u;
        v67 = (unint64_t *)(v20 + 8);
        *(_OWORD *)(v20 + 24) = 0u;
        do
        {
          v68 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v69 = v68 + 1;
        }
        while (__stlxr(v69, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(v20 + 48) = v69;
        *(_QWORD *)(v20 + 52) = 0;
        *(_QWORD *)(v20 + 68) = 0;
        *(_QWORD *)(v20 + 60) = 0;
        *(_DWORD *)(v20 + 76) = 0;
        *(_QWORD *)(v20 + 88) = 0;
        *(_QWORD *)(v20 + 96) = 0;
        v70 = pthread_self();
        if (__ldaxr(v67))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v67))
        {
LABEL_84:
          *(_QWORD *)(v20 + 40) = v70;
          *(_DWORD *)(v20 + 52) = pthread_mach_thread_np(v70);
          v72 = __ldxr(v67);
          if (v72 == 1)
          {
            if (!__stlxr(0, v67))
              goto LABEL_134;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(v20 + 8));
LABEL_134:
          v91 = *(char **)(v20 + 16);
          if (!v91)
          {
            v97 = pthread_main_np();
            v98 = pthread_self();
            v91 = (char *)pthread_get_stackaddr_np(v98);
            if (v97)
            {
              getrlimit(3, &v212);
              if (v212.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                stacksize_np = 0x800000;
              else
                stacksize_np = v212.rlim_cur;
            }
            else
            {
              stacksize_np = pthread_get_stacksize_np(v98);
            }
            *(_QWORD *)(v20 + 16) = v91;
            *(_QWORD *)(v20 + 24) = &v91[-stacksize_np];
            v14 = (uint64_t)v207;
          }
          *(_QWORD *)(v20 + 80) = v91;
          *(_QWORD *)(v20 + 56) = v20 + 64;
          v92 = pthread_self();
          v9 = v204;
          v10 = v205;
          if (pthread_equal(v92, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v93 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v93 != -1)
            {
              v212.rlim_cur = (rlim_t)&v211;
              v213 = &v212;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(v20 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(StatusReg + 736) = v20;
          pthread_key_init_np();
          goto LABEL_7;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(v20 + 8));
        goto LABEL_84;
      }
      v103 = *(_QWORD *)(v64 + 9448);
      v104 = *(_QWORD *)(v64 + 9432);
      if (v103)
      {
LABEL_161:
        v105 = __clz(v103);
        *(_QWORD *)(v64 + 9448) = v103 & ~(0x8000000000000000 >> v105);
        v20 = v104 + 16 * v105;
        goto LABEL_78;
      }
      if (*(_BYTE *)(v64 + 9413) == 6)
      {
        v172 = *(_DWORD *)(v64 + 9444);
        v173 = *(unsigned int *)(v64 + 9440);
        if (v173 < v172)
        {
          *(_QWORD *)&v65[8 * v173 + 56] = 0;
          v174 = (unint64_t *)(v64 + 8 * v173 + 9472);
          v175 = v172 - 1 - v173;
          while (v175)
          {
            v104 += 1024;
            v177 = *v174++;
            v176 = v177;
            LODWORD(v173) = v173 + 1;
            --v175;
            if (v177)
            {
              v103 = __rbit64(v176);
              *(_DWORD *)(v64 + 9440) = v173;
              *(_QWORD *)(v64 + 9432) = v104;
              goto LABEL_161;
            }
          }
          *(_DWORD *)(v64 + 9440) = v172;
        }
      }
      *v65 = 0;
    }
    v20 = bmalloc_allocate_casual(104, 1);
    goto LABEL_79;
  }
LABEL_15:
  v10[2] = 0;
  v25 = v10 + 2;
  v26 = *((unsigned __int8 *)v9 + 17) >> 4;
  v28 = v26 == 8 || v26 - 3 < 2;
  v29 = (uint64_t)v10[3];
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_269;
  v30 = *(unsigned __int8 *)(v29 + 5);
  if (v30 == 26)
  {
    v31 = *(_QWORD *)(v29 + 24);
    if ((v31 & 1) != 0)
      v31 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 48);
    a4 = *(const WTF::StringImpl **)(v29 + 16);
    v32 = (unsigned int *)(v13 + 80);
    v206 = *(_DWORD *)(v13 + 80);
    if ((v206 & 0x20) == 0)
    {
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 0x20, v32));
    }
    if (*(_BYTE *)(v31 + 5) != 8)
    {
      if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v31 + 88) + 24) & 0x80000000) != 0)
        {
          v189 = JSC::CallLinkInfo::globalObjectForSlowPath(v9, (JSC::JSCell *)v11, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
          v10[3] = *(JSC::CodeBlock **)(v189 + 96);
          v45 = (rlimit *)JSC::throwNotAConstructorErrorFromCallIC(v189, (JSC::JSCell *)v11, (WTF::StringImpl *)v29, v9);
          goto LABEL_289;
        }
        v34 = *(_QWORD *)(v31 + 16);
      }
      else
      {
        v34 = *(_QWORD *)(v31 + 8);
      }
      if (v34)
        v35 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
      else
        v35 = 0;
      if (v35)
      {
        v36 = 96;
        if (v28)
          v36 = 104;
        *v25 = *(JSC::CodeBlock **)(v31 + v36);
      }
      else
      {
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v31, v13, v29, a4, (JSC::VM *)v28, v25, a7, a8);
      }
      v37 = v11;
      if (*v32)
      {
        v156 = *(_DWORD *)(v13 + 80);
        if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
        if (*(_QWORD *)(v13 + 16))
        {
          v45 = 0;
LABEL_289:
          v46 = v207;
LABEL_55:
          if ((v206 & 0x20) == 0)
          {
            do
              v51 = __ldaxr(v32);
            while (__stlxr(v51 & 0xFFFFFFDF, v32));
          }
          goto LABEL_57;
        }
      }
      v38 = v10;
      v39 = (unsigned int *)v10[2];
      if (*((int *)v38 + 8) >= (unint64_t)v39[7])
      {
        v40 = *((unsigned __int8 *)v9 + 17) >> 4;
        if (v40 > 6 || ((1 << v40) & 0x54) == 0)
        {
          v41 = 8;
          if (v28)
            v41 = 16;
          v42 = *(unsigned int **)(v31 + v41);
          v43 = v42 + 2;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
          v45 = (rlimit *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, const WTF::StringImpl *))(*(_QWORD *)v42 + 40))(v42, 0, a3, a4);
          v46 = v207;
          do
          {
            v47 = __ldaxr(v43);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v43));
          if (!v48)
          {
            atomic_store(1u, v42 + 2);
            v157 = v45;
            (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 32))(v42);
            v45 = v157;
          }
          v11 = v37;
LABEL_52:
          v49 = *(unsigned __int16 *)((char *)v9 + 17);
          v50 = (v49 >> 9) & 7;
          if (v50)
          {
            if ((v50 - 1) < 2)
            {
              v122 = v45;
              if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
                JSC::CallLinkInfo::setVirtualCall(v9, (JSC::VM *)v13, (uint64_t)v205, (uint64_t)a4, a5, (uint64_t)v25, a7, a8, a9);
              else
                JSC::linkPolymorphicCall((JSC::VM *)v13, (unsigned __int8 *)v11, (uint64_t)v205, (uint64_t)v9, v29, (uint64_t)v25, a7, a8, a9);
              v45 = v122;
            }
            goto LABEL_55;
          }
          if ((v49 & 1) == 0)
          {
            *(_WORD *)((char *)v9 + 17) = v49 | 1;
            goto LABEL_55;
          }
          v213 = v45;
          if (*(_BYTE *)(v11 + 5) == 18)
            v73 = v11;
          else
            v73 = 0;
          if ((v29 & 1) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198791F9CLL);
          }
          *((_QWORD *)v9 + 5) = v29;
          if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v11 + 7))
          {
            v130 = v45;
            JSC::Heap::writeBarrierSlowPath(v13 + 192, v11);
            v45 = v130;
            LOWORD(v49) = *(_WORD *)((char *)v9 + 17);
          }
          *((_QWORD *)v9 + 3) = v39;
          *((_QWORD *)v9 + 4) = v45;
          *(_WORD *)((char *)v9 + 17) = v49 & 0xF1FF | 0x200;
          *((_QWORD *)v9 + 6) = v29;
          if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v11 + 7))
          {
            v131 = v45;
            JSC::Heap::writeBarrierSlowPath(v13 + 192, v11);
            v45 = v131;
          }
          if (v73 && (v74 = *(_QWORD *)(v73 + 120)) != 0)
          {
            v75 = *(_BYTE *)(v74 + 12) & 0xFE;
            if (BYTE1(dword_1ECF4C28A))
              v76 = v75 == 4;
            else
              v76 = 0;
            if (v76 || HIBYTE(word_1ECF4C286) != 0)
              goto LABEL_104;
          }
          else if (HIBYTE(word_1ECF4C286))
          {
LABEL_104:
            v78 = *((_QWORD *)v9 + 9);
            if ((v78 & 1) != 0)
            {
              v79 = v45;
              v158 = v11;
              v159 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
              if ((v78 & 2) != 0
                || (v160 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v160 == 0x3FFFFFFF)
                || (_DWORD)v160 == -1)
              {
                v161 = 2;
              }
              else if (v160 >> 28)
              {
                v200 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v200 = v159;
                *(_DWORD *)(v200 + 8) = v160;
                v161 = 1;
                v159 = v200;
              }
              else
              {
                v161 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
                v159 = v160 << 36;
              }
              v78 = v159 | v161;
              v212.rlim_cur = v73;
              if (((v159 | v161) & 1) != 0)
              {
                v162 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
                if ((v78 & 2) != 0
                  || ((v163 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v163 != 0x3FFFFFFF)
                    ? (v164 = (_DWORD)v163 == -1)
                    : (v164 = 1),
                      v164))
                {
                  v165 = 2;
                }
                else if (v163 >> 28)
                {
                  v201 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v201 = v162;
                  *(_DWORD *)(v201 + 8) = v163;
                  v165 = 1;
                  v162 = v201;
                }
                else
                {
                  v165 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
                  v162 = v163 << 36;
                }
                v80 = 0;
                v81 = v162 | v165;
              }
              else
              {
                v80 = 1;
                v81 = v78;
              }
              v11 = v158;
              v46 = v207;
            }
            else
            {
              v79 = v45;
              v212.rlim_cur = v73;
              v80 = 1;
              v81 = v78;
            }
            v212.rlim_max = v81;
            v211 = v39;
            WTF::dataLog<char [17],JSC::FullCodeOrigin,char [5],WTF::PointerDump<JSC::CodeBlock>,char [17],WTF::CodePtr<(WTF::PtrTag)357,(WTF::FunctionAttributes)0>,char [2]>("Linking call in ", (JSC::FullCodeOrigin *)&v212, " to ", (uint64_t *)&v211, ", entrypoint at ", (const void **)&v213, "\n");
            if ((v212.rlim_max & 1) != 0 && (v212.rlim_max & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v212.rlim_max & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
            v45 = v79;
            if ((v80 & 1) == 0 && (v78 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v78 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
              v45 = v79;
            }
          }
          if (v39)
          {
            v82 = v45;
            JSC::CodeBlock::linkIncomingCall((uint64_t)v39, (JSC::JSCell *)v11, v9);
            v45 = v82;
          }
          v83 = *(_WORD *)((char *)v9 + 17) >> 4;
          v85 = v83 != 8 && (v83 - 5) < 0xFFFFFFFE;
          if ((*(_WORD *)((_BYTE *)v9 + 17) & 0x100) != 0 && !v85)
          {
            v86 = v9;
            v87 = v45;
            JSC::CallLinkInfo::setVirtualCall(v86, (JSC::VM *)v13, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8, a9);
            v45 = v87;
          }
          goto LABEL_55;
        }
      }
      if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
      {
        v45 = *(rlimit **)(v31 + 32);
        if (!v45)
        {
LABEL_165:
          v106 = 8;
          if (v28)
            v106 = 16;
          v107 = *(unsigned int **)(v31 + v106);
          v108 = v107 + 2;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 + 1, v108));
          v110 = *(uint64_t (**)(unsigned int *, uint64_t, uint64_t, const WTF::StringImpl *))(*(_QWORD *)v107 + 40);
          v203 = v107;
          v45 = (rlimit *)v110(v107, 1, a3, a4);
          do
          {
            v111 = __ldaxr(v108);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v108));
          if (!v112)
          {
            v113 = v203;
            atomic_store(1u, v203 + 2);
            v114 = v45;
            (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 32))(v113);
            v45 = v114;
          }
LABEL_188:
          v121 = 24;
          if (v28)
            v121 = 32;
          *(_QWORD *)(v31 + v121) = v45;
        }
      }
      else
      {
        v45 = *(rlimit **)(v31 + 24);
        if (!v45)
          goto LABEL_165;
      }
      v11 = v37;
      v46 = v207;
      goto LABEL_52;
    }
    if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
      goto LABEL_121;
    if (&JSC::WebAssemblyFunction::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
    {
      v190 = JSC::WebAssemblyFunction::jsCallEntrypoint((JSC::WebAssemblyFunction *)v29);
      if (v190)
      {
        v45 = (rlimit *)v190;
        goto LABEL_122;
      }
    }
    if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
    {
LABEL_121:
      v45 = *(rlimit **)(v31 + 32);
      if (!v45)
      {
LABEL_179:
        v37 = v11;
        v115 = 8;
        if (v28)
          v115 = 16;
        v116 = *(unsigned int **)(v31 + v115);
        v117 = v116 + 2;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 + 1, v117));
        v45 = (rlimit *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, const WTF::StringImpl *, uint64_t, JSC::CodeBlock **))(*(_QWORD *)v116 + 40))(v116, 1, a3, a4, a5, v25);
        do
        {
          v119 = __ldaxr(v117);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v117));
        if (!v120)
        {
          atomic_store(1u, v116 + 2);
          v178 = v45;
          (*(void (**)(unsigned int *))(*(_QWORD *)v116 + 32))(v116);
          v45 = v178;
        }
        v39 = 0;
        goto LABEL_188;
      }
    }
    else
    {
      v45 = *(rlimit **)(v31 + 24);
      if (!v45)
        goto LABEL_179;
    }
LABEL_122:
    v39 = 0;
    v46 = v207;
    goto LABEL_52;
  }
  if ((v30 - 27) > 1)
  {
LABEL_269:
    v45 = (rlimit *)JSC::handleHostCall((_QWORD *)v13, (JSC::JSCell *)v11, (uint64_t)v10, (unint64_t)v10[3], (unsigned __int8 *)v9, (uint64_t)v25, a7, a8);
    v46 = v207;
    goto LABEL_57;
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v46 = v207;
    v123 = (_QWORD *)*v207;
    if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
    {
      v45 = (rlimit *)v123[17];
      v124 = (unsigned int *)v123[18];
      if (v124)
      {
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 + 1, v124));
        do
        {
          v126 = __ldaxr(v124);
          v127 = --v126 == 0;
        }
        while (__stlxr(v126, v124));
        goto LABEL_207;
      }
    }
    else
    {
      v45 = (rlimit *)v123[15];
      v124 = (unsigned int *)v123[16];
      if (v124)
      {
        do
          v134 = __ldaxr(v124);
        while (__stlxr(v134 + 1, v124));
        do
        {
          v135 = __ldaxr(v124);
          v127 = --v135 == 0;
        }
        while (__stlxr(v135, v124));
LABEL_207:
        if (v127)
        {
          atomic_store(1u, v124);
          v180 = v45;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v124, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
          WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
          v45 = v180;
        }
      }
    }
  }
  else
  {
    if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
      v45 = (rlimit *)qword_1ECF53240;
    else
      v45 = (rlimit *)qword_1ECF53238;
    v46 = v207;
  }
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x1987921F8);
  }
  v128 = *(unsigned __int16 *)((char *)v9 + 17);
  v129 = (v128 >> 9) & 7;
  if (v129)
  {
    v179 = v45;
    if ((v129 - 1) < 2)
    {
      if (v26 <= 8 && ((1 << v26) & 0x118) != 0)
        JSC::CallLinkInfo::setVirtualCall(v9, (JSC::VM *)v13, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8, a9);
      else
        JSC::linkPolymorphicCall((JSC::VM *)v13, (unsigned __int8 *)v11, (uint64_t)v205, (uint64_t)v9, v29, (uint64_t)v25, a7, a8, a9);
    }
    v46 = v207;
    v45 = v179;
  }
  else if ((v128 & 1) != 0)
  {
    v132 = v9;
    v133 = v45;
    JSC::linkMonomorphicCall((JSC::VM *)v13, (JSC::JSCell *)v11, v132, 0, v29, v45, a7, a8, a9);
    v45 = v133;
  }
  else
  {
    *(_WORD *)((char *)v9 + 17) = v128 | 1;
  }
LABEL_57:
  v208 = v11;
  if (*(_QWORD *)(v13 + 16))
  {
    v45 = *(rlimit **)(*v46 + 152);
    v140 = *(unsigned int **)(*v46 + 160);
    if (v140)
    {
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 + 1, v140));
      do
        v142 = __ldaxr(v140);
      while (__stlxr(v142 + 1, v140));
      do
      {
        v143 = __ldaxr(v140);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v140));
      if (!v144)
      {
        atomic_store(1u, v140);
        v191 = v45;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v140, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
        WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
        v45 = v191;
      }
      do
      {
        v145 = __ldaxr(v140);
        v146 = v145 - 1;
      }
      while (__stlxr(v146, v140));
      if (!v146)
      {
        atomic_store(1u, v140);
        v147 = v45;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v140, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)v25, a7, a8);
        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        return v147;
      }
    }
  }
  return v45;
}

uint64_t operationCompareLess(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int **v13;
  int **v14;
  int *v15;
  int *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  double v27;
  double v28;
  BOOL v29;
  uint64_t result;
  double v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  int v37;
  WTF *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int **v53;
  int **v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  JSC::VM *v63;
  int v64;
  unint64_t v65;
  int **v66;
  int *v67;
  uint64_t v68;
  unint64_t v69;
  JSC::JSBigInt *v70;
  JSC::JSBigInt *v71;
  int v72;
  double v73;
  int **v74;
  int *v75;
  uint64_t v76;
  unint64_t v77;
  JSC::JSBigInt *v78;
  JSC::JSBigInt *v79;
  BOOL v80;
  double v81;
  double v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  JSC::JSBigInt *v86;
  WTF *v87;
  JSC::JSObject *var58[12];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var58[11];
  if (a2 >= 0xFFFE000000000000)
  {
    if (a3 >= 0xFFFE000000000000)
    {
      LODWORD(result) = (int)a2 < (int)a3;
      return result;
    }
  }
  else if (!(a2 >> 49))
  {
    goto LABEL_4;
  }
  if (a3 >> 49)
  {
    v27 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v27 = a2 - 0x2000000000000;
    v28 = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v28 = a3 - 0x2000000000000;
    v29 = v27 < v28;
    goto LABEL_35;
  }
LABEL_4:
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v86 = 0;
  }
  else
  {
    if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 2 && *(_BYTE *)(a3 + 5) == 2)
    {
      v13 = (int **)(a2 + 8);
      if ((*(_BYTE *)(a2 + 8) & 1) != 0)
        v13 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v55 = *(_DWORD *)(v12 + 80);
        if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
        {
          LODWORD(result) = 0;
          return result;
        }
      }
      v14 = (int **)(v9 + 8);
      if ((*(_BYTE *)(v9 + 8) & 1) != 0)
        v14 = JSC::JSRopeString::resolveRope(v9, a1, a3, a4, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v56 = *(_DWORD *)(v12 + 80);
        if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
        {
          LODWORD(result) = 0;
          return result;
        }
      }
      v15 = *v13;
      v16 = *v14;
      if (!*v13)
      {
        if (v16)
        {
          if (v16[1])
            v26 = -1;
          else
            v26 = 0;
        }
        else
        {
          v26 = 0;
        }
        goto LABEL_94;
      }
      if (!v16)
      {
        v26 = v15[1] != 0;
LABEL_94:
        LODWORD(result) = v26 >> 31;
        return result;
      }
      v17 = v16[4];
      v18 = v15[1];
      v19 = v16[1];
      if (v19 >= v18)
        v20 = v18;
      else
        v20 = v19;
      if ((v15[4] & 4) != 0)
      {
        if ((v17 & 4) != 0)
        {
          if ((_DWORD)v20)
          {
            v48 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
            v49 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
            do
            {
              v50 = *v49;
              v51 = *v48;
              v25 = v50 > v51;
              if (v50 != v51)
                goto LABEL_96;
              ++v49;
              ++v48;
            }
            while (--v20);
          }
        }
        else if ((_DWORD)v20)
        {
          v40 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
          v41 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
          while (1)
          {
            v42 = *v41;
            v43 = *v40;
            if (v43 != v42)
              break;
            ++v41;
            ++v40;
            if (!--v20)
              goto LABEL_88;
          }
          if (v43 < v42)
            v26 = 1;
          else
            v26 = -1;
          goto LABEL_94;
        }
      }
      else if ((v17 & 4) != 0)
      {
        if ((_DWORD)v20)
        {
          v44 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
          v45 = (unsigned __int16 *)*((_QWORD *)v15 + 1);
          do
          {
            v46 = *v45;
            v47 = *v44;
            v25 = v46 > v47;
            if (v46 != v47)
              goto LABEL_96;
            ++v45;
            ++v44;
          }
          while (--v20);
        }
      }
      else if ((_DWORD)v20)
      {
        v21 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
        v22 = (unsigned __int16 *)*((_QWORD *)v15 + 1);
        while (1)
        {
          v23 = *v22;
          v24 = *v21;
          v25 = v23 > v24;
          if (v23 != v24)
            break;
          ++v22;
          ++v21;
          if (!--v20)
            goto LABEL_88;
        }
LABEL_96:
        if (v25)
          v26 = 1;
        else
          v26 = -1;
        goto LABEL_94;
      }
LABEL_88:
      if (v19 < v18)
        v52 = 1;
      else
        v52 = -1;
      if (v18 == v19)
        v26 = 0;
      else
        v26 = v52;
      goto LABEL_94;
    }
    v86 = 0;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v87 = (WTF *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v57 = *(_DWORD *)(v12 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v33 = 0;
LABEL_124:
      v31 = 0.0;
      goto LABEL_50;
    }
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >= 0xFFFE000000000000)
    {
      v31 = (double)(int)v10;
      goto LABEL_46;
    }
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v31 = v10 - 0x2000000000000;
      goto LABEL_46;
    }
  }
  else if (*(_BYTE *)(v10 + 5) == 3)
  {
    v33 = 1;
    goto LABEL_124;
  }
  JSC::JSValue::toNumberSlowCase(&v87, a1, a3, a4, a5, a6, a7, a8, a9);
  v31 = *(double *)a9.i64;
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_47;
LABEL_46:
  v61 = *(_DWORD *)(v12 + 80);
  if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v33 = 0;
  }
  else
  {
LABEL_47:
    v32 = ((unint64_t)v87 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v87 + 5) == 2;
    v33 = !v32;
  }
LABEL_50:
  if (*(_DWORD *)(v12 + 80))
  {
    v58 = *(_DWORD *)(v12 + 80);
    if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_134;
  }
  v34 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v86 = (JSC::JSBigInt *)v9;
  if (*(_DWORD *)(v34 + 80))
  {
    v59 = *(_DWORD *)(v34 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v34 + 16))
    {
      v36 = 0;
      goto LABEL_131;
    }
    v9 = (unint64_t)v86;
  }
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_56;
    v36 = 1;
LABEL_131:
    a9.i64[0] = 0;
    goto LABEL_61;
  }
  if (v9 >= 0xFFFE000000000000)
  {
    *(double *)a9.i64 = (double)(int)v9;
    goto LABEL_57;
  }
  if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v9 - 0x2000000000000;
    goto LABEL_57;
  }
LABEL_56:
  JSC::JSValue::toNumberSlowCase(&v86, a1, a3, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v34 + 80))
    goto LABEL_58;
LABEL_57:
  v62 = *(_DWORD *)(v34 + 80);
  if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
  {
    v85 = a9.i64[0];
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v85;
  }
  if (*(_QWORD *)(v34 + 16))
  {
    v36 = 0;
  }
  else
  {
LABEL_58:
    v35 = ((unint64_t)v86 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v86 + 5) == 2;
    v36 = !v35;
  }
LABEL_61:
  if (*(_DWORD *)(v12 + 80))
  {
    v60 = *(_DWORD *)(v12 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
    {
      v84 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a9.i64[0] = v84;
    }
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_134:
      LODWORD(result) = 0;
      return result;
    }
  }
  v37 = v33 | v36;
  v38 = v87;
  if (v37 == 1)
  {
    if (((unint64_t)v87 & 0xFFFE000000000002) != 0)
    {
      v39 = (unint64_t)v86;
    }
    else
    {
      v39 = (unint64_t)v86;
      if (*((_BYTE *)v87 + 5) == 3)
      {
        v63 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v64 = 3;
        goto LABEL_143;
      }
    }
    if ((v39 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v39 + 5) != 3)
    {
      v29 = v31 < *(double *)a9.i64;
LABEL_35:
      LODWORD(result) = v29;
      return result;
    }
    v63 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v87 & 0xFFFE000000000002) != 0)
    {
      var58[0] = v87;
      if ((unint64_t)v87 >= 0xFFFE000000000000)
      {
        v73 = (double)(int)v87;
        goto LABEL_162;
      }
      if ((unint64_t)v87 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v73 = (char *)v87 - 0x2000000000000;
LABEL_162:
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
          v72 = 1;
        else
          v72 = JSC::JSBigInt::compareToDouble((JSC::JSBigInt *)v39, (JSC::JSBigInt *)a2, v73);
        goto LABEL_164;
      }
LABEL_195:
      JSC::JSValue::toNumberSlowCase(var58, a1, a3, a4, a5, a6, a7, a8, a9);
      v73 = v83;
      goto LABEL_162;
    }
    v64 = *((unsigned __int8 *)v87 + 5);
LABEL_143:
    v65 = v39 & 0xFFFE000000000002;
    if (v64 == 3 && !v65)
    {
      if (*(_BYTE *)(v39 + 5) == 3)
      {
        v80 = JSC::JSBigInt::compare(v87, (JSC::JSBigInt *)v39, (JSC::JSBigInt *)a3) == 3;
        goto LABEL_192;
      }
      var58[0] = (JSC::JSObject *)v39;
      goto LABEL_147;
    }
    if (v64 == 3)
    {
      var58[0] = (JSC::JSObject *)v39;
      if (v65)
      {
        if (v39 >= 0xFFFE000000000000)
        {
          v82 = (double)(int)v39;
          goto LABEL_188;
        }
        if (v39 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v82 = v39 - 0x2000000000000;
          goto LABEL_188;
        }
LABEL_187:
        JSC::JSValue::toNumberSlowCase(var58, a1, a3, a4, a5, a6, a7, a8, a9);
        v82 = v81;
LABEL_188:
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
          v72 = 1;
        else
          v72 = JSC::JSBigInt::compareToDouble(v38, (JSC::JSBigInt *)a2, v82);
LABEL_190:
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_201;
LABEL_191:
        v80 = v72 == 3;
LABEL_192:
        LODWORD(result) = v80;
        return result;
      }
LABEL_147:
      if (*(_BYTE *)(v39 + 5) == 2)
      {
        v66 = (int **)(v39 + 8);
        if ((*(_BYTE *)(v39 + 8) & 1) != 0)
          v66 = JSC::JSRopeString::resolveRope(v39, a1, a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_209;
        v67 = *v66;
        if (*v66)
        {
          v68 = *((_QWORD *)v67 + 1);
          v69 = v67[1] | ((unint64_t)((v67[4] >> 2) & 1) << 32);
        }
        else
        {
          v68 = 0;
          v69 = 0x100000000;
        }
        v70 = JSC::JSBigInt::stringToBigInt(a1, v68, v69, a4, a5);
        v71 = v70;
        if (*((_DWORD *)v63 + 20))
        {
          v72 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8) || !v71)
            goto LABEL_190;
        }
        else if (!v70)
        {
LABEL_209:
          v72 = 1;
          goto LABEL_190;
        }
        if (((unint64_t)v71 & 0xFFFE000000000002) == 0 && *((_BYTE *)v71 + 5) == 3)
        {
          v72 = JSC::JSBigInt::compare(v38, v71, (JSC::JSBigInt *)a3);
          goto LABEL_190;
        }
      }
      goto LABEL_187;
    }
    var58[0] = v87;
    if (v64 != 2)
      goto LABEL_195;
    v74 = (int **)((char *)v87 + 8);
    if ((*((_BYTE *)v87 + 8) & 1) != 0)
      v74 = JSC::JSRopeString::resolveRope((unint64_t)v87, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_215;
    v75 = *v74;
    if (*v74)
    {
      v76 = *((_QWORD *)v75 + 1);
      v77 = v75[1] | ((unint64_t)((v75[4] >> 2) & 1) << 32);
    }
    else
    {
      v76 = 0;
      v77 = 0x100000000;
    }
    v78 = JSC::JSBigInt::stringToBigInt(a1, v76, v77, a4, a5);
    v79 = v78;
    if (*((_DWORD *)v63 + 20))
    {
      v72 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8) || !v79)
        goto LABEL_164;
    }
    else if (!v78)
    {
LABEL_215:
      v72 = 1;
      goto LABEL_164;
    }
    if (((unint64_t)v79 & 0xFFFE000000000002) != 0 || *((_BYTE *)v79 + 5) != 3)
      goto LABEL_195;
    v72 = JSC::JSBigInt::compare((JSC::JSBigInt *)v39, v79, (JSC::JSBigInt *)a3);
LABEL_164:
    if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, a3, a4, a5, a6, a7, a8))
    {
LABEL_201:
      LODWORD(result) = 0;
      return result;
    }
    if (v72 == 2)
    {
      v72 = 3;
    }
    else if (v72 == 3)
    {
      v72 = 2;
    }
    goto LABEL_191;
  }
  v53 = (int **)((char *)v87 + 8);
  if ((*((_BYTE *)v87 + 8) & 1) != 0)
    v53 = JSC::JSRopeString::resolveRope((unint64_t)v87, a1, a3, a4, a9, a5, a6, a7, a8);
  v54 = (int **)((char *)v86 + 8);
  if ((*((_BYTE *)v86 + 8) & 1) != 0)
    v54 = JSC::JSRopeString::resolveRope((unint64_t)v86, a1, a3, a4, a9, a5, a6, a7, a8);
  LODWORD(result) = WTF::codePointCompareLessThan((WTF *)v53, (const WTF::String *)v54, (const WTF::String *)a3);
  return result;
}

uint64_t operationCompareLessEq(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int **v13;
  int **v14;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  _BOOL4 v21;
  int v22;
  JSC::VM *v23;
  _BOOL4 v24;
  int v25;
  JSC::JSBigInt *v26;
  unint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v32;
  int v33;
  unint64_t v34;
  int **v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  JSC::JSBigInt *v39;
  JSC::JSBigInt *v40;
  int v41;
  double v42;
  int **v43;
  int **v44;
  int **v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  JSC::JSBigInt *v49;
  JSC::JSBigInt *v50;
  int v51;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  WTF *v58;
  JSC::JSBigInt *v59;
  JSC::JSObject *var58[12];

  v9 = this;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var58[11];
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    if ((unint64_t)this >= 0xFFFE000000000000)
      return (int)a2 <= (int)this;
  }
  else if (!((unint64_t)a2 >> 49))
  {
    goto LABEL_4;
  }
  if ((unint64_t)this >> 49)
  {
    v17 = (double)(int)a2;
    if ((unint64_t)a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v17 = a2 - 0x2000000000000;
    v18 = (double)(int)this;
    if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v18 = this - 0x2000000000000;
    v19 = v17 > v18;
    return !v19;
  }
LABEL_4:
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v58 = 0;
  }
  else
  {
    if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 2 && *(_BYTE *)(this + 5) == 2)
    {
      v13 = (int **)(a2 + 8);
      if ((*(_BYTE *)(a2 + 8) & 1) != 0)
        v13 = JSC::JSRopeString::resolveRope(a2, a1, this, a4, a9, a5, a6, a7, a8);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_11;
      v28 = *(_DWORD *)(v12 + 80);
      if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
        return 0;
      }
      else
      {
LABEL_11:
        v14 = (int **)(v9 + 8);
        if ((*(_BYTE *)(v9 + 8) & 1) != 0)
          v14 = JSC::JSRopeString::resolveRope(v9, a1, this, a4, a9, a5, a6, a7, a8);
        if (!*(_DWORD *)(v12 + 80))
          return (WTF::codePointCompareLessThan((WTF *)v14, (const WTF::String *)v13, (const WTF::String *)this) ^ 1);
        v29 = *(_DWORD *)(v12 + 80);
        if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          return 0;
        else
          return (WTF::codePointCompareLessThan((WTF *)v14, (const WTF::String *)v13, (const WTF::String *)this) ^ 1);
      }
    }
    v58 = 0;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v59 = (JSC::JSBigInt *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8))
  {
    v22 = 0;
LABEL_73:
    v20 = 0.0;
    goto LABEL_35;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >= 0xFFFE000000000000)
    {
      v20 = (double)(int)v10;
      goto LABEL_31;
    }
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v20 = v10 - 0x2000000000000;
      goto LABEL_31;
    }
  }
  else if (*(_BYTE *)(v10 + 5) == 3)
  {
    v22 = 1;
    goto LABEL_73;
  }
  JSC::JSValue::toNumberSlowCase(&v59, a1, this, a4, a5, a6, a7, a8, a9);
  v20 = *(double *)a9.i64;
LABEL_31:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8))
  {
    v22 = 0;
  }
  else
  {
    v21 = ((unint64_t)v59 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v59 + 5) == 2;
    v22 = !v21;
  }
LABEL_35:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8))
    return 0;
  v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v58 = (WTF *)v9;
  if (*((_DWORD *)v23 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v23, a2, this, a4, a5, a6, a7, a8))
    {
      v25 = 0;
      goto LABEL_78;
    }
    v9 = (unint64_t)v58;
  }
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_41;
    v25 = 1;
LABEL_78:
    a9.i64[0] = 0;
    goto LABEL_46;
  }
  if (v9 >= 0xFFFE000000000000)
  {
    *(double *)a9.i64 = (double)(int)v9;
    goto LABEL_42;
  }
  if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v9 - 0x2000000000000;
    goto LABEL_42;
  }
LABEL_41:
  JSC::JSValue::toNumberSlowCase(&v58, a1, this, a4, a5, a6, a7, a8, a9);
LABEL_42:
  if (*((_DWORD *)v23 + 20)
    && (v57 = a9.i64[0],
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v23, a2, this, a4, a5, a6, a7, a8),
        a9.i64[0] = v57,
        hasExceptionsAfterHandlingTraps))
  {
    v25 = 0;
  }
  else
  {
    v24 = ((unint64_t)v58 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v58 + 5) == 2;
    v25 = !v24;
  }
LABEL_46:
  if (*(_DWORD *)(v12 + 80))
  {
    v56 = a9.i64[0];
    v30 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8);
    a9.i64[0] = v56;
    if (v30)
      return 0;
  }
  if ((v22 | v25) == 1)
  {
    v26 = v59;
    if (((unint64_t)v59 & 0xFFFE000000000002) != 0)
    {
      v27 = (unint64_t)v58;
    }
    else
    {
      v27 = (unint64_t)v58;
      if (*((_BYTE *)v59 + 5) == 3)
      {
        v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v33 = 3;
        goto LABEL_87;
      }
    }
    if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 3)
    {
      v19 = v20 > *(double *)a9.i64;
      return !v19;
    }
    v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v59 & 0xFFFE000000000002) != 0)
    {
      var58[0] = v59;
      if ((unint64_t)v59 >= 0xFFFE000000000000)
      {
        v42 = (double)(int)v59;
        goto LABEL_106;
      }
      if ((unint64_t)v59 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v42 = (char *)v59 - 0x2000000000000;
LABEL_106:
        if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
          v41 = 1;
        else
          v41 = JSC::JSBigInt::compareToDouble((JSC::JSBigInt *)v27, (JSC::JSBigInt *)a2, v42);
LABEL_108:
        if (!*((_DWORD *)v32 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
        {
          if (v41 == 2)
          {
            v41 = 3;
          }
          else if (v41 == 3)
          {
            v41 = 2;
          }
          return v41 == 3 || v41 == 0;
        }
        return 0;
      }
LABEL_146:
      JSC::JSValue::toNumberSlowCase(var58, a1, this, a4, a5, a6, a7, a8, a9);
      v42 = v55;
      goto LABEL_106;
    }
    v33 = *((unsigned __int8 *)v59 + 5);
LABEL_87:
    v34 = v27 & 0xFFFE000000000002;
    if (v33 == 3 && !v34)
    {
      if (*(_BYTE *)(v27 + 5) == 3)
      {
        v51 = JSC::JSBigInt::compare(v59, (JSC::JSBigInt *)v27, (JSC::JSBigInt *)this);
        return v51 == 3 || v51 == 0;
      }
      var58[0] = (JSC::JSObject *)v27;
      goto LABEL_91;
    }
    if (v33 == 3)
    {
      var58[0] = (JSC::JSObject *)v27;
      if (v34)
      {
        if (v27 >= 0xFFFE000000000000)
        {
          v54 = (double)(int)v27;
          goto LABEL_137;
        }
        if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v54 = v27 - 0x2000000000000;
          goto LABEL_137;
        }
LABEL_136:
        JSC::JSValue::toNumberSlowCase(var58, a1, this, a4, a5, a6, a7, a8, a9);
        v54 = v53;
LABEL_137:
        if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
          v41 = 1;
        else
          v41 = JSC::JSBigInt::compareToDouble(v26, (JSC::JSBigInt *)a2, v54);
LABEL_139:
        if (!*((_DWORD *)v32 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
          return v41 == 3 || v41 == 0;
        return 0;
      }
LABEL_91:
      if (*(_BYTE *)(v27 + 5) == 2)
      {
        v35 = (int **)(v27 + 8);
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          v35 = JSC::JSRopeString::resolveRope(v27, a1, this, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_166;
        v36 = *v35;
        if (*v35)
        {
          v37 = *((_QWORD *)v36 + 1);
          v38 = v36[1] | ((unint64_t)((v36[4] >> 2) & 1) << 32);
        }
        else
        {
          v37 = 0;
          v38 = 0x100000000;
        }
        v39 = JSC::JSBigInt::stringToBigInt(a1, v37, v38, a4, a5);
        v40 = v39;
        if (*((_DWORD *)v32 + 20))
        {
          v41 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8) || !v40)
            goto LABEL_139;
        }
        else if (!v39)
        {
LABEL_166:
          v41 = 1;
          goto LABEL_139;
        }
        if (((unint64_t)v40 & 0xFFFE000000000002) == 0 && *((_BYTE *)v40 + 5) == 3)
        {
          v41 = JSC::JSBigInt::compare(v26, v40, (JSC::JSBigInt *)this);
          goto LABEL_139;
        }
      }
      goto LABEL_136;
    }
    var58[0] = v59;
    if (v33 != 2)
      goto LABEL_146;
    v45 = (int **)((char *)v59 + 8);
    if ((*((_BYTE *)v59 + 8) & 1) != 0)
      v45 = JSC::JSRopeString::resolveRope((unint64_t)v59, a1, this, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8))
    {
LABEL_172:
      v41 = 1;
      goto LABEL_108;
    }
    v46 = *v45;
    if (*v45)
    {
      v47 = *((_QWORD *)v46 + 1);
      v48 = v46[1] | ((unint64_t)((v46[4] >> 2) & 1) << 32);
    }
    else
    {
      v47 = 0;
      v48 = 0x100000000;
    }
    v49 = JSC::JSBigInt::stringToBigInt(a1, v47, v48, a4, a5);
    v50 = v49;
    if (*((_DWORD *)v32 + 20))
    {
      v41 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, this, a4, a5, a6, a7, a8) || !v50)
        goto LABEL_108;
    }
    else if (!v49)
    {
      goto LABEL_172;
    }
    if (((unint64_t)v50 & 0xFFFE000000000002) == 0 && *((_BYTE *)v50 + 5) == 3)
    {
      v41 = JSC::JSBigInt::compare((JSC::JSBigInt *)v27, v50, (JSC::JSBigInt *)this);
      goto LABEL_108;
    }
    goto LABEL_146;
  }
  v43 = (int **)((char *)v58 + 8);
  if ((*((_BYTE *)v58 + 8) & 1) != 0)
    v43 = JSC::JSRopeString::resolveRope((unint64_t)v58, a1, this, a4, a9, a5, a6, a7, a8);
  v44 = (int **)((char *)v59 + 8);
  if ((*((_BYTE *)v59 + 8) & 1) != 0)
    v44 = JSC::JSRopeString::resolveRope((unint64_t)v59, a1, this, a4, a9, a5, a6, a7, a8);
  return (WTF::codePointCompareLessThan((WTF *)v43, (const WTF::String *)v44, (const WTF::String *)this) ^ 1);
}

uint64_t operationCompareGreater(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v15;
  uint64_t result;
  unint64_t v17;
  double v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  WTF *v25;
  unint64_t v26;
  int **v27;
  int **v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  JSC::VM *v35;
  int v36;
  unint64_t v37;
  int **v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  JSC::JSBigInt *v42;
  JSC::JSBigInt *v43;
  int v44;
  double v45;
  int **v46;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  JSC::JSBigInt *v50;
  JSC::JSBigInt *v51;
  BOOL v52;
  double v53;
  double v54;
  double v55;
  int **v56;
  int **v57;
  unint64_t v58;
  unint64_t v59;
  JSC::JSBigInt *v60;
  WTF *v61;
  JSC::JSObject *var58[12];

  v9 = this;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var58[11];
  if ((unint64_t)this < 0xFFFE000000000000)
  {
    if ((unint64_t)a2 >> 49 && (unint64_t)this >> 49)
    {
LABEL_4:
      v13 = (double)(int)this;
      if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v13 = this - 0x2000000000000;
      v14 = (double)(int)a2;
      if ((unint64_t)a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v14 = a2 - 0x2000000000000;
      v15 = v13 < v14;
      goto LABEL_9;
    }
  }
  else
  {
    if ((unint64_t)a2 >= 0xFFFE000000000000)
    {
      LODWORD(result) = (int)this < (int)a2;
      return result;
    }
    if ((unint64_t)a2 >> 49)
      goto LABEL_4;
  }
  if ((this & 0xFFFE000000000002) != 0)
  {
    v17 = a2 & 0xFFFE000000000002;
  }
  else
  {
    v17 = a2 & 0xFFFE000000000002;
    if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
    {
      if (*(_BYTE *)(a2 + 5) == 2)
      {
        v27 = (int **)(this + 8);
        if ((*(_BYTE *)(this + 8) & 1) != 0)
          v27 = JSC::JSRopeString::resolveRope(this, a1, this, a4, a9, a5, a6, a7, a8);
        if (*(_DWORD *)(v12 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8))
        {
          LODWORD(result) = 0;
        }
        else
        {
          v28 = (int **)(v10 + 8);
          if ((*(_BYTE *)(v10 + 8) & 1) != 0)
            v28 = JSC::JSRopeString::resolveRope(v10, a1, this, a4, a9, a5, a6, a7, a8);
          if (*(_DWORD *)(v12 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, this, a4, a5, a6, a7, a8))
          {
            LODWORD(result) = 0;
          }
          else
          {
            LODWORD(result) = WTF::codePointCompareLessThan((WTF *)v27, (const WTF::String *)v28, (const WTF::String *)this);
          }
        }
        return result;
      }
      v61 = 0;
      goto LABEL_175;
    }
  }
  v61 = 0;
  if (!v17)
LABEL_175:
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v60 = (JSC::JSBigInt *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v29 = *(_DWORD *)(v12 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v20 = 0;
LABEL_68:
      v18 = 0.0;
      goto LABEL_27;
    }
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >= 0xFFFE000000000000)
    {
      v18 = (double)(int)v10;
      goto LABEL_23;
    }
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v18 = v10 - 0x2000000000000;
      goto LABEL_23;
    }
  }
  else if (*(_BYTE *)(v10 + 5) == 3)
  {
    v20 = 1;
    goto LABEL_68;
  }
  JSC::JSValue::toNumberSlowCase(&v60, a1, this, a4, a5, a6, a7, a8, a9);
  v18 = *(double *)a9.i64;
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_24;
LABEL_23:
  v33 = *(_DWORD *)(v12 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v20 = 0;
  }
  else
  {
LABEL_24:
    v19 = ((unint64_t)v60 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v60 + 5) == 2;
    v20 = !v19;
  }
LABEL_27:
  if (*(_DWORD *)(v12 + 80))
  {
    v30 = *(_DWORD *)(v12 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_78;
  }
  v21 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v61 = (WTF *)v9;
  if (*(_DWORD *)(v21 + 80))
  {
    v31 = *(_DWORD *)(v21 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, this, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v21 + 16))
    {
      v23 = 0;
      goto LABEL_75;
    }
    v9 = (unint64_t)v61;
  }
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v9;
      goto LABEL_34;
    }
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      goto LABEL_34;
    }
LABEL_33:
    JSC::JSValue::toNumberSlowCase(&v61, a1, this, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v21 + 80))
      goto LABEL_35;
LABEL_34:
    v34 = *(_DWORD *)(v21 + 80);
    if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
    {
      v59 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, this, a4, a5, a6, a7, a8);
      a9.i64[0] = v59;
    }
    if (*(_QWORD *)(v21 + 16))
    {
      v23 = 0;
    }
    else
    {
LABEL_35:
      v22 = ((unint64_t)v61 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v61 + 5) == 2;
      v23 = !v22;
    }
    goto LABEL_38;
  }
  if (*(_BYTE *)(v9 + 5) != 3)
    goto LABEL_33;
  v23 = 1;
LABEL_75:
  a9.i64[0] = 0;
LABEL_38:
  if (*(_DWORD *)(v12 + 80))
  {
    v32 = *(_DWORD *)(v12 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    {
      v58 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, this, a4, a5, a6, a7, a8);
      a9.i64[0] = v58;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_78;
  }
  v24 = v23 | v20;
  v25 = v61;
  if (v24 == 1)
  {
    if (((unint64_t)v61 & 0xFFFE000000000002) != 0)
    {
      v26 = (unint64_t)v60;
    }
    else
    {
      v26 = (unint64_t)v60;
      if (*((_BYTE *)v61 + 5) == 3)
      {
        v35 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v36 = 3;
        goto LABEL_92;
      }
    }
    if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 3)
    {
      v15 = *(double *)a9.i64 < v18;
LABEL_9:
      LODWORD(result) = v15;
      return result;
    }
    v35 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v61 & 0xFFFE000000000002) != 0)
    {
      var58[0] = v61;
      if ((unint64_t)v61 >= 0xFFFE000000000000)
      {
        v45 = (double)(int)v61;
        goto LABEL_111;
      }
      if ((unint64_t)v61 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v45 = (char *)v61 - 0x2000000000000;
LABEL_111:
        if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
          v44 = 1;
        else
          v44 = JSC::JSBigInt::compareToDouble((JSC::JSBigInt *)v26, (JSC::JSBigInt *)a2, v45);
LABEL_113:
        if (!*((_DWORD *)v35 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
        {
          if (v44 == 2)
          {
            v44 = 3;
          }
          else if (v44 == 3)
          {
            v44 = 2;
          }
          goto LABEL_140;
        }
        goto LABEL_78;
      }
LABEL_144:
      JSC::JSValue::toNumberSlowCase(var58, a1, this, a4, a5, a6, a7, a8, a9);
      v45 = v55;
      goto LABEL_111;
    }
    v36 = *((unsigned __int8 *)v61 + 5);
LABEL_92:
    v37 = v26 & 0xFFFE000000000002;
    if (v36 == 3 && !v37)
    {
      if (*(_BYTE *)(v26 + 5) == 3)
      {
        v52 = JSC::JSBigInt::compare(v61, (JSC::JSBigInt *)v26, (JSC::JSBigInt *)this) == 3;
        goto LABEL_141;
      }
      var58[0] = (JSC::JSObject *)v26;
      goto LABEL_96;
    }
    if (v36 == 3)
    {
      var58[0] = (JSC::JSObject *)v26;
      if (v37)
      {
        if (v26 >= 0xFFFE000000000000)
        {
          v54 = (double)(int)v26;
          goto LABEL_137;
        }
        if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v54 = v26 - 0x2000000000000;
          goto LABEL_137;
        }
LABEL_136:
        JSC::JSValue::toNumberSlowCase(var58, a1, this, a4, a5, a6, a7, a8, a9);
        v54 = v53;
LABEL_137:
        if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
          v44 = 1;
        else
          v44 = JSC::JSBigInt::compareToDouble(v25, (JSC::JSBigInt *)a2, v54);
LABEL_139:
        if (!*((_DWORD *)v35 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
        {
LABEL_140:
          v52 = v44 == 3;
LABEL_141:
          LODWORD(result) = v52;
          return result;
        }
LABEL_78:
        LODWORD(result) = 0;
        return result;
      }
LABEL_96:
      if (*(_BYTE *)(v26 + 5) == 2)
      {
        v38 = (int **)(v26 + 8);
        if ((*(_BYTE *)(v26 + 8) & 1) != 0)
          v38 = JSC::JSRopeString::resolveRope(v26, a1, this, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_163;
        v39 = *v38;
        if (*v38)
        {
          v40 = *((_QWORD *)v39 + 1);
          v41 = v39[1] | ((unint64_t)((v39[4] >> 2) & 1) << 32);
        }
        else
        {
          v40 = 0;
          v41 = 0x100000000;
        }
        v42 = JSC::JSBigInt::stringToBigInt(a1, v40, v41, a4, a5);
        v43 = v42;
        if (*((_DWORD *)v35 + 20))
        {
          v44 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8) || !v43)
            goto LABEL_139;
        }
        else if (!v42)
        {
LABEL_163:
          v44 = 1;
          goto LABEL_139;
        }
        if (((unint64_t)v43 & 0xFFFE000000000002) == 0 && *((_BYTE *)v43 + 5) == 3)
        {
          v44 = JSC::JSBigInt::compare(v25, v43, (JSC::JSBigInt *)this);
          goto LABEL_139;
        }
      }
      goto LABEL_136;
    }
    var58[0] = v61;
    if (v36 != 2)
      goto LABEL_144;
    v46 = (int **)((char *)v61 + 8);
    if ((*((_BYTE *)v61 + 8) & 1) != 0)
      v46 = JSC::JSRopeString::resolveRope((unint64_t)v61, a1, this, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8))
    {
LABEL_169:
      v44 = 1;
      goto LABEL_113;
    }
    v47 = *v46;
    if (*v46)
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v47[1] | ((unint64_t)((v47[4] >> 2) & 1) << 32);
    }
    else
    {
      v48 = 0;
      v49 = 0x100000000;
    }
    v50 = JSC::JSBigInt::stringToBigInt(a1, v48, v49, a4, a5);
    v51 = v50;
    if (*((_DWORD *)v35 + 20))
    {
      v44 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v35, a2, this, a4, a5, a6, a7, a8) || !v51)
        goto LABEL_113;
    }
    else if (!v50)
    {
      goto LABEL_169;
    }
    if (((unint64_t)v51 & 0xFFFE000000000002) == 0 && *((_BYTE *)v51 + 5) == 3)
    {
      v44 = JSC::JSBigInt::compare((JSC::JSBigInt *)v26, v51, (JSC::JSBigInt *)this);
      goto LABEL_113;
    }
    goto LABEL_144;
  }
  v56 = (int **)((char *)v61 + 8);
  if ((*((_BYTE *)v61 + 8) & 1) != 0)
    v56 = JSC::JSRopeString::resolveRope((unint64_t)v61, a1, this, a4, a9, a5, a6, a7, a8);
  v57 = (int **)((char *)v60 + 8);
  if ((*((_BYTE *)v60 + 8) & 1) != 0)
    v57 = JSC::JSRopeString::resolveRope((unint64_t)v60, a1, this, a4, a9, a5, a6, a7, a8);
  LODWORD(result) = WTF::codePointCompareLessThan((WTF *)v56, (const WTF::String *)v57, (const WTF::String *)this);
  return result;
}

uint64_t operationCompareGreaterEq(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v15;
  unint64_t v18;
  int **v19;
  int **v20;
  int *v21;
  int *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned __int16 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  double v46;
  _BOOL4 v47;
  int v48;
  JSC::VM *v49;
  _BOOL4 v50;
  int v51;
  int **v52;
  int **v53;
  JSC::JSBigInt *v54;
  unint64_t v55;
  int v56;
  int v57;
  BOOL v58;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v60;
  int v61;
  unint64_t v62;
  int **v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  JSC::JSBigInt *v67;
  JSC::JSBigInt *v68;
  int v69;
  double v70;
  int **v71;
  int *v72;
  uint64_t v73;
  unint64_t v74;
  JSC::JSBigInt *v75;
  JSC::JSBigInt *v76;
  int v77;
  double v79;
  double v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  WTF *v84;
  JSC::JSBigInt *v85;
  JSC::JSObject *var58[12];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var58[11];
  if (a3 >= 0xFFFE000000000000)
  {
    if (a2 >= 0xFFFE000000000000)
      return (int)a3 <= (int)a2;
    if (a2 >> 49)
      goto LABEL_4;
  }
  else if (a2 >> 49 && a3 >> 49)
  {
LABEL_4:
    v13 = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = a3 - 0x2000000000000;
    v14 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = a2 - 0x2000000000000;
    v15 = v13 > v14;
    return !v15;
  }
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v18 = a2 & 0xFFFE000000000002;
  }
  else
  {
    v18 = a2 & 0xFFFE000000000002;
    if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
    {
      if (*(_BYTE *)(a2 + 5) == 2)
      {
        v19 = (int **)(a3 + 8);
        if ((*(_BYTE *)(a3 + 8) & 1) != 0)
          v19 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
        if (*(_DWORD *)(v12 + 80))
        {
          v56 = *(_DWORD *)(v12 + 80);
          if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            return 0;
        }
        v20 = (int **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 8) & 1) != 0)
          v20 = JSC::JSRopeString::resolveRope(v10, a1, a3, a4, a9, a5, a6, a7, a8);
        if (*(_DWORD *)(v12 + 80))
        {
          v57 = *(_DWORD *)(v12 + 80);
          if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            return 0;
        }
        v21 = *v20;
        v22 = *v19;
        if (!*v20)
        {
          if (v22)
          {
            if (v22[1])
              v32 = -1;
            else
              v32 = 0;
          }
          else
          {
            v32 = 0;
          }
          return v32 >= 0;
        }
        if (!v22)
        {
          v32 = v21[1] != 0;
          return v32 >= 0;
        }
        v23 = v22[4];
        v24 = v21[1];
        v25 = v22[1];
        if (v25 >= v24)
          v26 = v24;
        else
          v26 = v25;
        if ((v21[4] & 4) != 0)
        {
          if ((v23 & 4) != 0)
          {
            if ((_DWORD)v26)
            {
              v41 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
              v42 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
              do
              {
                v43 = *v42;
                v44 = *v41;
                v31 = v43 > v44;
                if (v43 != v44)
                  goto LABEL_65;
                ++v42;
                ++v41;
              }
              while (--v26);
            }
          }
          else if ((_DWORD)v26)
          {
            v33 = (unsigned __int16 *)*((_QWORD *)v22 + 1);
            v34 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
            while (1)
            {
              v35 = *v34;
              v36 = *v33;
              if (v36 != v35)
                break;
              ++v34;
              ++v33;
              if (!--v26)
                goto LABEL_58;
            }
            if (v36 < v35)
              v32 = 1;
            else
              v32 = -1;
            return v32 >= 0;
          }
        }
        else if ((v23 & 4) != 0)
        {
          if ((_DWORD)v26)
          {
            v37 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
            v38 = (unsigned __int16 *)*((_QWORD *)v21 + 1);
            do
            {
              v39 = *v38;
              v40 = *v37;
              v31 = v39 > v40;
              if (v39 != v40)
                goto LABEL_65;
              ++v38;
              ++v37;
            }
            while (--v26);
          }
        }
        else if ((_DWORD)v26)
        {
          v27 = (unsigned __int16 *)*((_QWORD *)v22 + 1);
          v28 = (unsigned __int16 *)*((_QWORD *)v21 + 1);
          while (1)
          {
            v29 = *v28;
            v30 = *v27;
            v31 = v29 > v30;
            if (v29 != v30)
              break;
            ++v28;
            ++v27;
            if (!--v26)
              goto LABEL_58;
          }
LABEL_65:
          if (v31)
            v32 = 1;
          else
            v32 = -1;
          return v32 >= 0;
        }
LABEL_58:
        if (v25 < v24)
          v45 = 1;
        else
          v45 = -1;
        if (v24 == v25)
          v32 = 0;
        else
          v32 = v45;
        return v32 >= 0;
      }
      v85 = 0;
      goto LABEL_208;
    }
  }
  v85 = 0;
  if (!v18)
LABEL_208:
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v84 = (WTF *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
    v48 = 0;
LABEL_123:
    v46 = 0.0;
    goto LABEL_78;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >= 0xFFFE000000000000)
    {
      v46 = (double)(int)v10;
      goto LABEL_74;
    }
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v46 = v10 - 0x2000000000000;
      goto LABEL_74;
    }
  }
  else if (*(_BYTE *)(v10 + 5) == 3)
  {
    v48 = 1;
    goto LABEL_123;
  }
  JSC::JSValue::toNumberSlowCase(&v84, a1, a3, a4, a5, a6, a7, a8, a9);
  v46 = *(double *)a9.i64;
LABEL_74:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
    v48 = 0;
  }
  else
  {
    v47 = ((unint64_t)v84 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v84 + 5) == 2;
    v48 = !v47;
  }
LABEL_78:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v49 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v85 = (JSC::JSBigInt *)v9;
  if (*((_DWORD *)v49 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v49, a2, a3, a4, a5, a6, a7, a8))
    {
      v51 = 0;
      goto LABEL_128;
    }
    v9 = (unint64_t)v85;
  }
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_84;
    v51 = 1;
LABEL_128:
    a9.i64[0] = 0;
    goto LABEL_89;
  }
  if (v9 >= 0xFFFE000000000000)
  {
    *(double *)a9.i64 = (double)(int)v9;
    goto LABEL_85;
  }
  if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v9 - 0x2000000000000;
    goto LABEL_85;
  }
LABEL_84:
  JSC::JSValue::toNumberSlowCase(&v85, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_85:
  if (*((_DWORD *)v49 + 20)
    && (v83 = a9.i64[0],
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v49, a2, a3, a4, a5, a6, a7, a8),
        a9.i64[0] = v83,
        hasExceptionsAfterHandlingTraps))
  {
    v51 = 0;
  }
  else
  {
    v50 = ((unint64_t)v85 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v85 + 5) == 2;
    v51 = !v50;
  }
LABEL_89:
  if (*(_DWORD *)(v12 + 80))
  {
    v82 = a9.i64[0];
    v58 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v82;
    if (v58)
      return 0;
  }
  if ((v51 | v48) == 1)
  {
    v54 = v85;
    if (((unint64_t)v85 & 0xFFFE000000000002) != 0)
    {
      v55 = (unint64_t)v84;
    }
    else
    {
      v55 = (unint64_t)v84;
      if (*((_BYTE *)v85 + 5) == 3)
      {
        v60 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v61 = 3;
        goto LABEL_137;
      }
    }
    if ((v55 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v55 + 5) != 3)
    {
      v15 = *(double *)a9.i64 > v46;
      return !v15;
    }
    v60 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v85 & 0xFFFE000000000002) != 0)
    {
      var58[0] = v85;
      if ((unint64_t)v85 >= 0xFFFE000000000000)
      {
        v70 = (double)(int)v85;
        goto LABEL_156;
      }
      if ((unint64_t)v85 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v70 = (char *)v85 - 0x2000000000000;
LABEL_156:
        if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
          v69 = 1;
        else
          v69 = JSC::JSBigInt::compareToDouble((JSC::JSBigInt *)v55, (JSC::JSBigInt *)a2, v70);
LABEL_158:
        if (!*((_DWORD *)v60 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
        {
          if (v69 == 2)
          {
            v69 = 3;
          }
          else if (v69 == 3)
          {
            v69 = 2;
          }
          return v69 == 3 || v69 == 0;
        }
        return 0;
      }
LABEL_192:
      JSC::JSValue::toNumberSlowCase(var58, a1, a3, a4, a5, a6, a7, a8, a9);
      v70 = v81;
      goto LABEL_156;
    }
    v61 = *((unsigned __int8 *)v85 + 5);
LABEL_137:
    v62 = v55 & 0xFFFE000000000002;
    if (v61 == 3 && !v62)
    {
      if (*(_BYTE *)(v55 + 5) == 3)
      {
        v77 = JSC::JSBigInt::compare(v85, (JSC::JSBigInt *)v55, (JSC::JSBigInt *)a3);
        return v77 == 3 || v77 == 0;
      }
      var58[0] = (JSC::JSObject *)v55;
      goto LABEL_141;
    }
    if (v61 == 3)
    {
      var58[0] = (JSC::JSObject *)v55;
      if (v62)
      {
        if (v55 >= 0xFFFE000000000000)
        {
          v80 = (double)(int)v55;
          goto LABEL_183;
        }
        if (v55 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v80 = v55 - 0x2000000000000;
          goto LABEL_183;
        }
LABEL_182:
        JSC::JSValue::toNumberSlowCase(var58, a1, a3, a4, a5, a6, a7, a8, a9);
        v80 = v79;
LABEL_183:
        if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
          v69 = 1;
        else
          v69 = JSC::JSBigInt::compareToDouble(v54, (JSC::JSBigInt *)a2, v80);
LABEL_185:
        if (!*((_DWORD *)v60 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
          return v69 == 3 || v69 == 0;
        return 0;
      }
LABEL_141:
      if (*(_BYTE *)(v55 + 5) == 2)
      {
        v63 = (int **)(v55 + 8);
        if ((*(_BYTE *)(v55 + 8) & 1) != 0)
          v63 = JSC::JSRopeString::resolveRope(v55, a1, a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_210;
        v64 = *v63;
        if (*v63)
        {
          v65 = *((_QWORD *)v64 + 1);
          v66 = v64[1] | ((unint64_t)((v64[4] >> 2) & 1) << 32);
        }
        else
        {
          v65 = 0;
          v66 = 0x100000000;
        }
        v67 = JSC::JSBigInt::stringToBigInt(a1, v65, v66, a4, a5);
        v68 = v67;
        if (*((_DWORD *)v60 + 20))
        {
          v69 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8) || !v68)
            goto LABEL_185;
        }
        else if (!v67)
        {
LABEL_210:
          v69 = 1;
          goto LABEL_185;
        }
        if (((unint64_t)v68 & 0xFFFE000000000002) == 0 && *((_BYTE *)v68 + 5) == 3)
        {
          v69 = JSC::JSBigInt::compare(v54, v68, (JSC::JSBigInt *)a3);
          goto LABEL_185;
        }
      }
      goto LABEL_182;
    }
    var58[0] = v85;
    if (v61 != 2)
      goto LABEL_192;
    v71 = (int **)((char *)v85 + 8);
    if ((*((_BYTE *)v85 + 8) & 1) != 0)
      v71 = JSC::JSRopeString::resolveRope((unint64_t)v85, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8))
    {
LABEL_216:
      v69 = 1;
      goto LABEL_158;
    }
    v72 = *v71;
    if (*v71)
    {
      v73 = *((_QWORD *)v72 + 1);
      v74 = v72[1] | ((unint64_t)((v72[4] >> 2) & 1) << 32);
    }
    else
    {
      v73 = 0;
      v74 = 0x100000000;
    }
    v75 = JSC::JSBigInt::stringToBigInt(a1, v73, v74, a4, a5);
    v76 = v75;
    if (*((_DWORD *)v60 + 20))
    {
      v69 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8) || !v76)
        goto LABEL_158;
    }
    else if (!v75)
    {
      goto LABEL_216;
    }
    if (((unint64_t)v76 & 0xFFFE000000000002) == 0 && *((_BYTE *)v76 + 5) == 3)
    {
      v69 = JSC::JSBigInt::compare((JSC::JSBigInt *)v55, v76, (JSC::JSBigInt *)a3);
      goto LABEL_158;
    }
    goto LABEL_192;
  }
  v52 = (int **)((char *)v84 + 8);
  if ((*((_BYTE *)v84 + 8) & 1) != 0)
    v52 = JSC::JSRopeString::resolveRope((unint64_t)v84, a1, a3, a4, a9, a5, a6, a7, a8);
  v53 = (int **)((char *)v85 + 8);
  if ((*((_BYTE *)v85 + 8) & 1) != 0)
    v53 = JSC::JSRopeString::resolveRope((unint64_t)v85, a1, a3, a4, a9, a5, a6, a7, a8);
  return (WTF::codePointCompareLessThan((WTF *)v52, (const WTF::String *)v53, (const WTF::String *)a3) ^ 1);
}

BOOL operationCompareEq(uint64_t a1, JSC::JSBigInt *a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSBigInt *v9;
  int *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int8x16_t *v32;
  int8x16_t *v33;
  __int32 v34;
  __int32 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  JSC::JSBigInt *v44;
  JSC::JSBigInt *v45;
  double v47;
  double v48;
  uint8x8_t *v49;
  unsigned int v50;
  int16x8_t *v51;
  uint16x8_t v52;
  unsigned int v53;
  uint16x8_t v54;
  BOOL v55;
  double v57;
  double v58;
  int16x8_t *v59;
  unsigned int v60;
  uint8x8_t *v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  BOOL v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  JSC::JSBigInt *v86;
  int v87;
  int v88;
  int v89;
  __int32 v90;
  int v91;
  int v92;
  int v94;
  uint64_t v96;
  unsigned __int8 *v97;
  uint16x8_t v98;
  unsigned __int8 *v99;
  uint16x8_t v100;
  uint8x16_t v101;
  unsigned int v102;
  uint8x16_t v103;
  BOOL v104;
  unsigned int v105;
  uint16x8_t v106;
  BOOL v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  double v113;
  double v114;
  int **v115;
  int *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  double v120;
  JSC::JSBigInt *v121;
  JSC::JSBigInt *var68[14];

  v9 = a3;
  v10 = (int *)a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSBigInt **)(v12 + 40) = var68[13];
  v121 = a3;
  var68[0] = a2;
  v13 = (unint64_t)a3;
  for (i = (unint64_t)a2; ; i = v15)
  {
    while (1)
    {
      if (i >> 49)
      {
        if (v13 >> 49)
        {
          v57 = (double)(int)i;
          if (i <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v57 = i - 0x2000000000000;
          v58 = (double)(int)v13;
          if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v58 = v13 - 0x2000000000000;
          return v57 == v58;
        }
        v121 = (JSC::JSBigInt *)i;
        var68[0] = (JSC::JSBigInt *)v13;
        v9 = (JSC::JSBigInt *)i;
        v10 = (int *)v13;
        v15 = v13;
        v13 = i;
      }
      else
      {
        v15 = i;
      }
      v16 = v15 == v13;
      if (v15 == v13)
        return v16;
      v17 = v13 & 0xFFFFFFFFFFFFFFF7;
      if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        if (v17 != 2)
        {
          if ((v13 & 0xFFFE000000000002) == 0)
          {
            v67 = *(_DWORD *)v9;
LABEL_111:
            v68 = 16 * (v67 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v68 + 10) & 1) != 0)
              return *(_QWORD *)(v68 + 40) == a1;
          }
          return 0;
        }
        return 1;
      }
      v18 = v15 & 0xFFFE000000000002;
      if (v17 == 2)
      {
        if (!v18)
        {
          v67 = *v10;
          goto LABEL_111;
        }
        return 0;
      }
      if (v18 || *(unsigned __int8 *)(v15 + 5) < 0x17u)
        break;
      if ((v13 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v13 + 5) > 0x16u)
        return v16;
      i = JSC::JSCell::toPrimitive(v15, (JSC::VM **)a1, 0, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v111 = i;
        v112 = *(_DWORD *)(v12 + 80);
        if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        i = v111;
        if (*(_QWORD *)(v12 + 16))
          return v16;
      }
      var68[0] = (JSC::JSBigInt *)i;
      v10 = (int *)i;
      if (i >= 0xFFFE000000000000)
      {
        v10 = (int *)i;
        if (v13 >= 0xFFFE000000000000)
          return i == v13;
      }
    }
    v19 = v13 & 0xFFFE000000000002;
    if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) < 0x17u)
      break;
    v9 = (JSC::JSBigInt *)JSC::JSCell::toPrimitive(v13, (JSC::VM **)a1, 0, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return v16;
    }
    v121 = v9;
    v13 = (unint64_t)v9;
  }
  if (v18)
  {
    v20 = 0;
    if (v19)
      goto LABEL_34;
LABEL_13:
    v21 = *(unsigned __int8 *)(v13 + 5) == 4;
  }
  else
  {
    v20 = *(unsigned __int8 *)(v15 + 5) == 4;
    if (!v19)
      goto LABEL_13;
LABEL_34:
    v21 = 0;
  }
  if (v20 || v21)
    return 0;
  if (v18)
  {
    if (v19)
      goto LABEL_44;
    v23 = *(unsigned __int8 *)(v13 + 5);
    goto LABEL_43;
  }
  v22 = *(unsigned __int8 *)(v15 + 5);
  if (v19)
  {
    if (v22 != 2)
      goto LABEL_44;
    goto LABEL_58;
  }
  v23 = *(unsigned __int8 *)(v13 + 5);
  if (v22 != 2)
  {
LABEL_43:
    v36 = v13;
    if (v23 != 2)
      goto LABEL_44;
    goto LABEL_59;
  }
  if (v23 != 2)
  {
LABEL_58:
    v121 = (JSC::JSBigInt *)v15;
    var68[0] = (JSC::JSBigInt *)v13;
    v36 = v15;
    v15 = v13;
LABEL_59:
    if ((v15 & 0xFFFE000000000002) != 0)
    {
      if (v15 < 0xFFFE000000000000)
      {
        if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          goto LABEL_61;
        *(_QWORD *)&v47 = v15 - 0x2000000000000;
      }
      else
      {
        v47 = (double)(int)v15;
      }
LABEL_62:
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_246;
      v109 = *(_DWORD *)(v12 + 80);
      if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v12 + 16))
      {
LABEL_246:
        if ((unint64_t)v121 >= 0xFFFE000000000000)
        {
          v48 = (double)(int)v121;
        }
        else if ((unint64_t)v121 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase(&v121, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
        else
        {
          *(_QWORD *)&v48 = (char *)v121 - 0x2000000000000;
        }
        if (!*(_DWORD *)(v12 + 80))
          return v47 == v48;
        v120 = v48;
        v110 = *(_DWORD *)(v12 + 80);
        if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v48 = v120;
        if (!*(_QWORD *)(v12 + 16))
          return v47 == v48;
      }
      return 0;
    }
    if (*(_BYTE *)(v15 + 5) != 3)
    {
LABEL_61:
      JSC::JSValue::toNumberSlowCase(var68, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v47 = *(double *)a9.i64;
      goto LABEL_62;
    }
    v115 = (int **)(v36 + 8);
    if ((*(_BYTE *)(v36 + 8) & 1) != 0)
      v115 = JSC::JSRopeString::resolveRope(v36, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return 0;
    }
    if ((v116 = *v115) != 0)
    {
      v117 = *((_QWORD *)v116 + 1);
      v118 = v116[1] | ((unint64_t)((v116[4] >> 2) & 1) << 32);
    }
    else
    {
      v117 = 0;
      v118 = 0x100000000;
    }
    v13 = (unint64_t)JSC::JSBigInt::stringToBigInt((JSC::JSBigInt *)a1, v117, v118, a4, a5);
    v121 = (JSC::JSBigInt *)v13;
    if (*(_DWORD *)(v12 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v119, (uint64_t)a3, a4, a5, a6, a7, a8))
        return 0;
    }
    if (!v13)
      return 0;
    if (v15 == v13)
      return 1;
LABEL_44:
    if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      if (v13 >> 49)
      {
        v113 = 0.0;
        if (v15 == 7)
          v113 = 1.0;
        v114 = (double)(int)v13;
        if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v114 = v13 - 0x2000000000000;
        return v114 == v113;
      }
      JSC::JSValue::toNumberSlowCase(var68, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v43 = (int)v42, v42 == (double)(int)v43)
        && ((_DWORD)v43 || (*(_QWORD *)&v42 & 0x8000000000000000) == 0))
      {
        v44 = (JSC::JSBigInt *)(v43 | 0xFFFE000000000000);
      }
      else
      {
        v44 = (JSC::JSBigInt *)(*(_QWORD *)&v42 + 0x2000000000000);
      }
      var68[0] = v44;
      if (*(_DWORD *)(v12 + 80))
      {
        v108 = *(_DWORD *)(v12 + 80);
        if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, v37, v38, v39, v40, v41);
        if (*(_QWORD *)(v12 + 16))
          return 0;
        v44 = var68[0];
      }
      v45 = v121;
      v121 = v44;
      var68[0] = v45;
    }
    else if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      JSC::JSValue::toNumberSlowCase(&v121, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v84 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v85 = (int)v84, v84 == (double)(int)v85)
        && ((_DWORD)v85 || (*(_QWORD *)&v84 & 0x8000000000000000) == 0))
      {
        v86 = (JSC::JSBigInt *)(v85 | 0xFFFE000000000000);
      }
      else
      {
        v86 = (JSC::JSBigInt *)(*(_QWORD *)&v84 + 0x2000000000000);
      }
      v121 = v86;
      if (*(_DWORD *)(v12 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v78, (uint64_t)a3, v79, v80, v81, v82, v83))
          return 0;
      }
    }
    if (((unint64_t)var68[0] & 0xFFFE000000000002) != 0 || *((_BYTE *)var68[0] + 5) != 3)
      return 0;
    if (((unint64_t)v121 & 0xFFFE000000000002) != 0)
    {
      if (!((unint64_t)v121 >> 49))
        return 0;
      return JSC::JSBigInt::equalsToNumber((uint64_t)var68[0], (unint64_t)v121);
    }
    else
    {
      if (*((_BYTE *)v121 + 5) != 3)
        return 0;
      return JSC::JSBigInt::equals(var68[0], v121, a3);
    }
  }
  v24 = *(_QWORD *)(v15 + 8);
  if ((v24 & 1) != 0)
    return JSC::JSString::equalSlowCase((JSC::JSString *)v15, (JSC::JSGlobalObject *)a1, (JSC::JSString *)v13, a4, a5, a6, a7, a8, a9);
  v25 = *(_QWORD *)(v13 + 8);
  if ((v25 & 1) != 0)
    return JSC::JSString::equalSlowCase((JSC::JSString *)v15, (JSC::JSGlobalObject *)a1, (JSC::JSString *)v13, a4, a5, a6, a7, a8, a9);
  v26 = *(_DWORD *)(v24 + 16);
  v27 = *(_DWORD *)(v25 + 16);
  if (v27 >= 0x100 && v26 >= 0x100 && (v27 ^ v26) > 0xFF)
    return 0;
  v28 = *(unsigned int *)(v24 + 4);
  if ((_DWORD)v28 != *(_DWORD *)(v25 + 4))
    return 0;
  if (!(_DWORD)v28)
    return 1;
  v29 = *(unsigned __int8 **)(v24 + 8);
  v30 = *(unsigned __int8 **)(v25 + 8);
  if ((v26 & 4) != 0)
  {
    if ((v27 & 4) != 0)
    {
      if (*v29 != *v30)
        return 0;
      v66 = v28 - 1;
      if ((_DWORD)v28 == 1)
        return 1;
      v32 = (int8x16_t *)(v29 + 1);
      v33 = (int8x16_t *)(v30 + 1);
      if ((_DWORD)v28 == 2)
      {
        v34 = v32->u8[0];
        v35 = v33->u8[0];
        return v34 == v35;
      }
      switch(31 - __clz(v28 - 2))
      {
        case 0u:
          goto LABEL_31;
        case 1u:
          if (v32->u16[0] != v33->u16[0])
            return 0;
          v87 = *(unsigned __int16 *)&v29[v28 - 2];
          v88 = *(unsigned __int16 *)&v30[v28 - 2];
          return v87 == v88;
        case 2u:
          if (v32->i32[0] != v33->i32[0])
            return 0;
          v87 = *(_DWORD *)&v29[v28 - 4];
          v99 = &v30[v28];
LABEL_171:
          v88 = *((_DWORD *)v99 - 1);
          return v87 == v88;
        case 3u:
          if (v32->i64[0] != v33->i64[0])
            return 0;
          v96 = *(_QWORD *)&v29[v28 - 8];
          v97 = &v30[v28];
          return v96 == *((_QWORD *)v97 - 1);
        case 4u:
          v98 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v29[v28 - 16], *(int8x16_t *)&v30[v28 - 16]), vceqq_s8(*(int8x16_t *)(v29 + 1), *(int8x16_t *)(v30 + 1)));
          v98.i8[0] = vminvq_u8((uint8x16_t)v98);
          return v98.i32[0] != 0;
        default:
          v101 = (uint8x16_t)vceqq_s8(*v32, *v33);
          v101.i8[0] = vminvq_u8(v101);
          if (!v101.i32[0])
            return 0;
          if (v66 < 0x10)
            return 1;
          v102 = v66 & 0xF;
          do
          {
            v103 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v32 + v102), *(int8x16_t *)((char *)v33 + v102));
            v103.i8[0] = vminvq_u8(v103);
            v16 = v103.i32[0] != 0;
            v102 += 16;
            if (v103.i32[0])
              v104 = v102 >= v66;
            else
              v104 = 1;
          }
          while (!v104);
          break;
      }
    }
    else
    {
      if (*(_WORD *)v30 != *v29)
        return 0;
      v49 = (uint8x8_t *)(v29 + 1);
      v50 = v28 - 1;
      v51 = (int16x8_t *)(v30 + 2);
      if (v50 < 8)
      {
        if (v50 < 4)
        {
          if (v50 < 2)
          {
            if (v50 != 1)
              return 1;
            v35 = v49->u8[0];
            v34 = v51->u16[0];
            return v34 == v35;
          }
          v89 = (v49->u16[0] | (v49->u16[0] << 8)) & 0xFF00FF;
          v90 = v51->i32[0];
          v91 = (*(unsigned __int16 *)((char *)v49->u16 + (v50 & 1)) | (*(unsigned __int16 *)((char *)v49->u16
                                                                                            + (v50 & 1)) << 8)) & 0xFF00FF;
          v92 = *(__int32 *)((char *)v51->i32 + 2 * (v50 & 1));
          return v89 == v90 && v91 == v92;
        }
        else
        {
          v69 = (v49->u32[0] | ((unint64_t)v49->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v73 = ((v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL) == v51->i64[0];
          v70 = (*(unsigned int *)((char *)v49->u32 + (v50 & 3)) | ((unint64_t)*(unsigned int *)((char *)v49->u32 + (v50 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v71 = (v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL;
          v72 = *(uint64_t *)((char *)v51->i64 + 2 * (v50 & 3));
          return v73 && v71 == v72;
        }
      }
      else
      {
        v52 = (uint16x8_t)vceqq_s16(*v51, (int16x8_t)vmovl_u8(*v49));
        v52.i16[0] = vminvq_u16(v52);
        if (!v52.i32[0])
          return 0;
        v53 = v50 & 7;
        do
        {
          v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v51 + 2 * v53), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v49 + v53)));
          v54.i16[0] = vminvq_u16(v54);
          v16 = v54.i32[0] != 0;
          v53 += 8;
          if (v54.i32[0])
            v55 = v53 >= v50;
          else
            v55 = 1;
        }
        while (!v55);
      }
    }
  }
  else if ((v27 & 4) != 0)
  {
    if (*(_WORD *)v29 != *v30)
      return 0;
    v59 = (int16x8_t *)(v29 + 2);
    v60 = v28 - 1;
    v61 = (uint8x8_t *)(v30 + 1);
    if (v60 < 8)
    {
      if (v60 < 4)
      {
        if (v60 < 2)
        {
          if (v60 == 1)
            return v59->u16[0] == v61->u8[0];
          return 1;
        }
        v73 = ((v61->u16[0] | (v61->u16[0] << 8)) & 0xFF00FF) == v59->i32[0];
        v94 = (*(unsigned __int16 *)((char *)v61->u16 + (v60 & 1)) | (*(unsigned __int16 *)((char *)v61->u16 + (v60 & 1)) << 8)) & 0xFF00FF;
        return v73 && v94 == *(__int32 *)((char *)v59->i32 + 2 * (v60 & 1));
      }
      else
      {
        v74 = (v61->u32[0] | ((unint64_t)v61->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v75 = (*(unsigned int *)((char *)v61->u32 + (v60 & 3)) | ((unint64_t)*(unsigned int *)((char *)v61->u32 + (v60 & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v76 = (v75 | (v75 << 8)) & 0xFF00FF00FF00FFLL;
        return ((v74 | (v74 << 8)) & 0xFF00FF00FF00FFLL) == v59->i64[0]
            && v76 == *(uint64_t *)((char *)v59->i64 + 2 * (v60 & 3));
      }
    }
    else
    {
      v62 = (uint16x8_t)vceqq_s16(*v59, (int16x8_t)vmovl_u8(*v61));
      v62.i16[0] = vminvq_u16(v62);
      if (!v62.i32[0])
        return 0;
      v63 = v60 & 7;
      do
      {
        v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v59 + 2 * v63), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v61 + v63)));
        v64.i16[0] = vminvq_u16(v64);
        v16 = v64.i32[0] != 0;
        v63 += 8;
        if (v64.i32[0])
          v65 = v63 >= v60;
        else
          v65 = 1;
      }
      while (!v65);
    }
  }
  else
  {
    if (*(unsigned __int16 *)v29 != *(unsigned __int16 *)v30)
      return 0;
    v31 = v28 - 1;
    if ((_DWORD)v28 == 1)
      return 1;
    v32 = (int8x16_t *)(v29 + 2);
    v33 = (int8x16_t *)(v30 + 2);
    if ((_DWORD)v28 == 2)
    {
LABEL_31:
      v34 = v32->u16[0];
      v35 = v33->u16[0];
      return v34 == v35;
    }
    switch(31 - __clz(v28 - 2))
    {
      case 0u:
        v34 = v32->i32[0];
        v35 = v33->i32[0];
        return v34 == v35;
      case 1u:
        if (v32->i32[0] != v33->i32[0])
          return 0;
        v87 = *(_DWORD *)&v29[2 * v28 - 4];
        v99 = &v30[2 * v28];
        goto LABEL_171;
      case 2u:
        if (v32->i64[0] != v33->i64[0])
          return 0;
        v96 = *(_QWORD *)&v29[2 * v28 - 8];
        v97 = &v30[2 * v28];
        return v96 == *((_QWORD *)v97 - 1);
      case 3u:
        v98 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v29[2 * v28 - 16], *(int16x8_t *)&v30[2 * v28 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v29 + 2), *(int16x8_t *)(v30 + 2)));
        v98.i16[0] = vminvq_u16(v98);
        return v98.i32[0] != 0;
      default:
        v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v32, *(int16x8_t *)v33);
        v100.i16[0] = vminvq_u16(v100);
        if (!v100.i32[0])
          return 0;
        if (v31 < 8)
          return 1;
        v105 = v31 & 7;
        do
        {
          v106 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v32 + 2 * v105), *(int16x8_t *)((char *)v33 + 2 * v105));
          v106.i16[0] = vminvq_u16(v106);
          v16 = v106.i32[0] != 0;
          v105 += 8;
          if (v106.i32[0])
            v107 = v105 >= v31;
          else
            v107 = 1;
        }
        while (!v107);
        break;
    }
  }
  return v16;
}

uint64_t operationCompareStringEq(JSC::JSGlobalObject *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  JSC::JSGlobalObject *v19;
  const char *v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int8x16_t *v45;
  unsigned int v46;
  int8x16_t *v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  int16x8_t *v52;
  unsigned int v53;
  uint8x8_t *v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  BOOL v58;
  uint8x8_t *v59;
  unsigned int v60;
  int16x8_t *v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  BOOL v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unsigned int v73;
  int16x8_t *v74;
  const char *v75;
  int16x8_t *v76;
  int v77;
  int v78;
  __int32 v79;
  int v80;
  int v81;
  uint16x8_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint8x16_t v88;
  unsigned int v89;
  uint8x16_t v90;
  BOOL v91;
  __int32 v92;
  __int32 v93;
  int v94;
  uint16x8_t v96;
  unsigned int v97;
  uint16x8_t v98;
  BOOL v99;
  const char *v100;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = a2[1];
  v11 = (unsigned int *)(a2 + 2);
  v12 = (int *)(v10 + 4);
  if ((v10 & 1) != 0)
    v12 = (int *)(a2 + 2);
  v13 = *v12;
  v14 = a3[1];
  v15 = (unint64_t)(a3 + 2);
  if ((v14 & 1) != 0)
    v16 = a3 + 2;
  else
    v16 = (_DWORD *)(v14 + 4);
  if (v13 != *v16)
    return 6;
  v19 = a1;
  if ((v10 & 1) == 0)
  {
    if (v10)
    {
      v20 = *(const char **)(v10 + 8);
      LODWORD(v21) = *(_DWORD *)(v10 + 4);
      v22 = ((unint64_t)*(unsigned int *)(v10 + 16) >> 2) & 1;
    }
    else
    {
      v20 = 0;
      LODWORD(v21) = 0;
      v22 = 1;
    }
LABEL_11:
    v23 = v21 | (v22 << 32);
    goto LABEL_12;
  }
  if ((v10 & 2) == 0)
  {
    v21 = *JSC::JSRopeString::resolveRope((unint64_t)a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v21)
    {
      v51 = v21[4];
      v20 = (const char *)*((_QWORD *)v21 + 1);
      LODWORD(v21) = v21[1];
      v22 = (v51 >> 2) & 1;
    }
    else
    {
      v20 = 0;
      v22 = 1;
    }
    goto LABEL_11;
  }
  v30 = *(_QWORD *)((*(_QWORD *)((char *)a2 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v30
    && (v31 = *(unsigned int *)(v30 + 4), v32 = a2[3], v33 = v32 >> 16, v31 > (v32 >> 16)))
  {
    v34 = *(unsigned int *)(v30 + 16);
    v20 = *(const char **)(v30 + 8);
    v35 = *v11;
    if ((int)v31 - (int)v33 > *v11 || (v35 = v31 - v33, (_DWORD)v33))
    {
      v26 = (const char *)(v32 >> 16);
      v23 = v35;
      v36 = v31 - v33;
      if (((v34 >> 2) & 1) != 0)
      {
        if (v36 < v35)
          goto LABEL_172;
        v20 = &v26[(_QWORD)v20];
        v23 = v35 | 0x100000000;
      }
      else
      {
        if (v36 < v35)
          goto LABEL_172;
        v20 += 2 * (_QWORD)v26;
      }
    }
    else
    {
      v23 = v31 & 0xFFFFFFFEFFFFFFFFLL | (((v34 >> 2) & 1) << 32);
    }
  }
  else
  {
    v20 = "";
    v23 = 0x100000000;
  }
LABEL_12:
  if (*(_DWORD *)(v9 + 80))
  {
    LODWORD(v26) = *(_DWORD *)(v9 + 80);
    if ((v26 & 0x27) != 0)
      goto LABEL_173;
    goto LABEL_112;
  }
  while (1)
  {
    v24 = (int *)a3[1];
    if ((v24 & 1) == 0)
    {
      if (v24)
      {
LABEL_15:
        v25 = v24[4];
        v26 = (const char *)*((_QWORD *)v24 + 1);
        LODWORD(v24) = v24[1];
        v27 = (v25 >> 2) & 1;
LABEL_16:
        v15 = v24 | (unint64_t)(v27 << 32);
        v19 = (JSC::JSGlobalObject *)a3;
        goto LABEL_17;
      }
LABEL_56:
      v26 = 0;
      v27 = 1;
      goto LABEL_16;
    }
    if ((v24 & 2) == 0)
    {
      v24 = *JSC::JSRopeString::resolveRope((unint64_t)a3, v19, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v24)
        goto LABEL_15;
      goto LABEL_56;
    }
    v19 = (JSC::JSGlobalObject *)(*(_QWORD *)((char *)a3 + 20) & 0xFFFFFFFFFLL);
    v37 = *((_QWORD *)v19 + 1);
    if (v37
      && (v38 = *(unsigned int *)(v37 + 4), v39 = a3[3], v40 = v39 >> 16, v38 > (v39 >> 16)))
    {
      v41 = *(unsigned int *)(v37 + 16);
      v26 = *(const char **)(v37 + 8);
      v42 = *(_DWORD *)v15;
      if ((v38 - v40) > *(_DWORD *)v15 || (v42 = v38 - v40, (_DWORD)v40))
      {
        v43 = (v39 >> 16);
        v15 = v42;
        v44 = v38 - v40;
        if (((v41 >> 2) & 1) != 0)
        {
          if (v44 < v42)
            goto LABEL_172;
          v26 += v43;
          v15 = v42 | 0x100000000;
        }
        else
        {
          if (v44 < v42)
            goto LABEL_172;
          v26 += 2 * v43;
        }
      }
      else
      {
        v15 = v38 & 0xFFFFFFFEFFFFFFFFLL | (((v41 >> 2) & 1) << 32);
      }
    }
    else
    {
      v26 = "";
      v15 = 0x100000000;
    }
LABEL_17:
    if (*(_DWORD *)(v9 + 80))
    {
      v77 = *(_DWORD *)(v9 + 80);
      if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      {
        v100 = v26;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v26 = v100;
      }
      if (*(_QWORD *)(v9 + 16))
        goto LABEL_25;
    }
    v28 = 1;
    if (!v13 || v20 == v26)
      goto LABEL_26;
    v29 = v15 & 0x100000000;
    if ((v23 & 0x100000000) == 0)
    {
      if (v29)
      {
        if (!(_DWORD)v23 || !(_DWORD)v15)
          goto LABEL_172;
        if (*(_WORD *)v20 != *(unsigned __int8 *)v26)
          goto LABEL_25;
        v52 = (int16x8_t *)(v20 + 2);
        v53 = v15 - 1;
        v54 = (uint8x8_t *)(v26 + 1);
        if ((v15 - 1) >= 8)
        {
          v55 = (uint16x8_t)vceqq_s16(*v52, (int16x8_t)vmovl_u8(*v54));
          v55.i16[0] = vminvq_u16(v55);
          v28 = v55.i32[0];
          if (v55.i32[0])
          {
            v56 = v53 & 7;
            do
            {
              v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v52 + 2 * v56), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v54 + v56)));
              v57.i16[0] = vminvq_u16(v57);
              v28 = v57.i32[0] != 0;
              v56 += 8;
              if (v57.i32[0])
                v58 = v56 >= v53;
              else
                v58 = 1;
            }
            while (!v58);
          }
          goto LABEL_26;
        }
        if (v53 >= 4)
        {
          v84 = (v54->u32[0] | ((unint64_t)v54->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v85 = (*(unsigned int *)((char *)v54->u32 + (v53 & 3)) | ((unint64_t)*(unsigned int *)((char *)v54->u32 + (v53 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v86 = (v85 | (v85 << 8)) & 0xFF00FF00FF00FFLL;
          v28 = ((v84 | (v84 << 8)) & 0xFF00FF00FF00FFLL) == v52->i64[0]
             && v86 == *(uint64_t *)((char *)v52->i64 + 2 * (v53 & 3));
          goto LABEL_26;
        }
        if (v53 >= 2)
        {
          v72 = ((v54->u16[0] | (v54->u16[0] << 8)) & 0xFF00FF) == v52->i32[0];
          v94 = (*(unsigned __int16 *)((char *)v54->u16 + (v53 & 1)) | (*(unsigned __int16 *)((char *)v54->u16
                                                                                            + (v53 & 1)) << 8)) & 0xFF00FF;
          v28 = v72 && v94 == *(__int32 *)((char *)v52->i32 + 2 * (v53 & 1));
          goto LABEL_26;
        }
        if ((_DWORD)v15 == 2)
        {
          v93 = v54->u8[0];
          v92 = v52->u16[0];
          goto LABEL_147;
        }
      }
      else
      {
        if (!(_DWORD)v23 || !(_DWORD)v15)
          goto LABEL_172;
        if (*(unsigned __int16 *)v20 != *(unsigned __int16 *)v26)
          goto LABEL_25;
        v73 = v15 - 1;
        if ((_DWORD)v15 != 1)
        {
          v74 = (int16x8_t *)(v20 + 2);
          v75 = v26;
          v76 = (int16x8_t *)(v26 + 2);
          if ((_DWORD)v15 != 2)
          {
            switch(31 - __clz(v15 - 2))
            {
              case 0u:
                v92 = v74->i32[0];
                v93 = v76->i32[0];
                goto LABEL_147;
              case 1u:
                if (v74->i32[0] != v76->i32[0])
                  goto LABEL_25;
                v66 = *(_DWORD *)&v20[2 * v15 - 4];
                v67 = *(_DWORD *)&v75[2 * v15 - 4];
                goto LABEL_95;
              case 2u:
                if (v74->i64[0] != v76->i64[0])
                  goto LABEL_25;
                v28 = *(_QWORD *)&v20[2 * v15 - 8] == *(_QWORD *)&v75[2 * v15 - 8];
                goto LABEL_26;
              case 3u:
                v83 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v20[2 * v15 - 16], *(int16x8_t *)&v75[2 * v15 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v20 + 2), *(int16x8_t *)(v75 + 2)));
                v83.i16[0] = vminvq_u16(v83);
LABEL_126:
                v28 = v83.i32[0] != 0;
                goto LABEL_26;
              default:
                v96 = (uint16x8_t)vceqq_s16(*v74, *v76);
                v96.i16[0] = vminvq_u16(v96);
                v28 = v96.i32[0];
                if (!v96.i32[0])
                  goto LABEL_26;
                if (v73 < 8)
                  goto LABEL_170;
                v97 = v73 & 7;
                do
                {
                  v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v74 + 2 * v97), *(int16x8_t *)((char *)v76 + 2 * v97));
                  v98.i16[0] = vminvq_u16(v98);
                  v28 = v98.i32[0] != 0;
                  v97 += 8;
                  if (v98.i32[0])
                    v99 = v97 >= v73;
                  else
                    v99 = 1;
                }
                while (!v99);
                break;
            }
            goto LABEL_26;
          }
          v92 = v74->u16[0];
          v93 = v76->u16[0];
LABEL_147:
          v28 = v92 == v93;
          goto LABEL_26;
        }
      }
LABEL_170:
      v28 = 1;
      goto LABEL_26;
    }
    if (v29)
      break;
    if ((_DWORD)v23 && (_DWORD)v15)
    {
      if (*(_WORD *)v26 != *(unsigned __int8 *)v20)
        goto LABEL_25;
      v59 = (uint8x8_t *)(v20 + 1);
      v60 = v15 - 1;
      v61 = (int16x8_t *)(v26 + 2);
      if ((v15 - 1) >= 8)
      {
        v62 = (uint16x8_t)vceqq_s16(*v61, (int16x8_t)vmovl_u8(*v59));
        v62.i16[0] = vminvq_u16(v62);
        v28 = v62.i32[0];
        if (v62.i32[0])
        {
          v63 = v60 & 7;
          do
          {
            v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v61 + 2 * v63), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v59 + v63)));
            v64.i16[0] = vminvq_u16(v64);
            v28 = v64.i32[0] != 0;
            v63 += 8;
            if (v64.i32[0])
              v65 = v63 >= v60;
            else
              v65 = 1;
          }
          while (!v65);
        }
        goto LABEL_26;
      }
      if (v60 >= 4)
      {
        v68 = (v59->u32[0] | ((unint64_t)v59->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v72 = ((v68 | (v68 << 8)) & 0xFF00FF00FF00FFLL) == v61->i64[0];
        v69 = (*(unsigned int *)((char *)v59->u32 + (v60 & 3)) | ((unint64_t)*(unsigned int *)((char *)v59->u32 + (v60 & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v70 = (v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL;
        v71 = *(uint64_t *)((char *)v61->i64 + 2 * (v60 & 3));
        v72 = v72 && v70 == v71;
        v28 = v72;
        goto LABEL_26;
      }
      if (v60 >= 2)
      {
        v78 = (v59->u16[0] | (v59->u16[0] << 8)) & 0xFF00FF;
        v79 = v61->i32[0];
        v80 = (*(unsigned __int16 *)((char *)v59->u16 + (v60 & 1)) | (*(unsigned __int16 *)((char *)v59->u16 + (v60 & 1)) << 8)) & 0xFF00FF;
        v81 = *(__int32 *)((char *)v61->i32 + 2 * (v60 & 1));
        v28 = v78 == v79 && v80 == v81;
        goto LABEL_26;
      }
      if ((_DWORD)v15 == 2)
      {
        v67 = v59->u8[0];
        v66 = v61->u16[0];
        goto LABEL_95;
      }
      goto LABEL_170;
    }
LABEL_172:
    __break(1u);
LABEL_173:
    if ((v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_112:
    if (*(_QWORD *)(v9 + 16))
      return 6;
  }
  if (!(_DWORD)v23 || !(_DWORD)v15)
    goto LABEL_172;
  if (*(unsigned __int8 *)v20 != *(unsigned __int8 *)v26)
    goto LABEL_25;
  v45 = (int8x16_t *)(v20 + 1);
  v46 = v15 - 1;
  v47 = (int8x16_t *)(v26 + 1);
  if ((_DWORD)v15 == 2)
  {
    if (v15 != 1)
    {
      v66 = v45->u8[0];
      v67 = v47->u8[0];
LABEL_95:
      v28 = v66 == v67;
      goto LABEL_26;
    }
    goto LABEL_172;
  }
  if ((_DWORD)v15 == 1)
    goto LABEL_170;
  v48 = 32 - __clz(v15 - 2);
  if (v48 == 3)
  {
    if (v45->i32[0] == v47->i32[0])
    {
      v49 = *(_DWORD *)&v20[v15 - 4];
      v50 = *(_DWORD *)&v26[v15 - 4];
LABEL_50:
      v28 = v49 == v50;
      goto LABEL_26;
    }
LABEL_25:
    v28 = 0;
    goto LABEL_26;
  }
  switch(v48)
  {
    case 1u:
      v66 = v45->u16[0];
      v67 = v47->u16[0];
      goto LABEL_95;
    case 2u:
      if (v45->u16[0] != v47->u16[0])
        goto LABEL_25;
      v49 = *(unsigned __int16 *)&v20[v15 - 2];
      v50 = *(unsigned __int16 *)&v26[v15 - 2];
      goto LABEL_50;
    case 4u:
      if (v45->i64[0] != v47->i64[0])
        goto LABEL_25;
      v28 = *(_QWORD *)&v20[v15 - 8] == *(_QWORD *)&v26[v15 - 8];
      break;
    case 5u:
      v83 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v20[v15 - 16], *(int8x16_t *)&v26[v15 - 16]), vceqq_s8(*(int8x16_t *)(v20 + 1), *(int8x16_t *)(v26 + 1)));
      v83.i8[0] = vminvq_u8((uint8x16_t)v83);
      goto LABEL_126;
    default:
      v88 = (uint8x16_t)vceqq_s8(*v45, *v47);
      v88.i8[0] = vminvq_u8(v88);
      if (!v88.i32[0])
        goto LABEL_25;
      if (v46 < 0x10)
        goto LABEL_170;
      v89 = v46 & 0xF;
      do
      {
        v90 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v45 + v89), *(int8x16_t *)((char *)v47 + v89));
        v90.i8[0] = vminvq_u8(v90);
        v28 = v90.i32[0] != 0;
        v89 += 16;
        if (v90.i32[0])
          v91 = v89 >= v46;
        else
          v91 = 1;
      }
      while (!v91);
      break;
  }
LABEL_26:
  if (v28)
    return 7;
  else
    return 6;
}

uint64_t operationCompareStrictEq(JSC::JSGlobalObject *a1, JSC::JSBigInt *this, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int16x8_t *v20;
  int16x8_t *v21;
  __int32 v22;
  __int32 v23;
  double v24;
  double v25;
  uint8x8_t *v26;
  unsigned int v27;
  int16x8_t *v28;
  uint16x8_t v29;
  unsigned int v30;
  uint16x8_t v31;
  BOOL v32;
  int16x8_t *v33;
  unsigned int v34;
  uint8x8_t *v35;
  uint16x8_t v36;
  unsigned int v37;
  uint16x8_t v38;
  BOOL v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  __int32 v51;
  int v52;
  int v53;
  int v54;
  uint16x8_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint16x8_t v59;
  uint8x16_t v60;
  unsigned int v61;
  uint8x16_t v62;
  BOOL v63;
  unsigned int v64;
  uint16x8_t v65;
  BOOL v66;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if ((unint64_t)this >= 0xFFFE000000000000)
  {
    if ((unint64_t)a3 >= 0xFFFE000000000000)
      goto LABEL_7;
  }
  else if (!((unint64_t)this >> 49))
  {
LABEL_4:
    if ((((unint64_t)a3 | (unint64_t)this) & 0xFFFE000000000002) == 0)
    {
      v9 = *((unsigned __int8 *)this + 5);
      if (v9 != 2)
      {
        if (v9 == 3 && *((_BYTE *)a3 + 5) == 3)
        {
          LODWORD(result) = JSC::JSBigInt::equals(this, a3, a3);
          return result;
        }
        goto LABEL_7;
      }
      if (*((_BYTE *)a3 + 5) == 2)
      {
        v12 = *((_QWORD *)this + 1);
        if ((v12 & 1) != 0 || (v13 = *((_QWORD *)a3 + 1), (v13 & 1) != 0))
        {
          LODWORD(result) = JSC::JSString::equalSlowCase(this, a1, a3, a4, a5, a6, a7, a8, a9);
          return result;
        }
        v14 = *(_DWORD *)(v12 + 16);
        v15 = *(_DWORD *)(v13 + 16);
        if (v15 >= 0x100 && v14 >= 0x100 && (v15 ^ v14) > 0xFF)
          return 0;
        v16 = *(unsigned int *)(v12 + 4);
        if ((_DWORD)v16 != *(_DWORD *)(v13 + 4))
          return 0;
        if (!(_DWORD)v16)
          goto LABEL_87;
        v17 = *(unsigned __int16 **)(v12 + 8);
        v18 = *(unsigned __int16 **)(v13 + 8);
        if ((v14 & 4) == 0)
        {
          if ((v15 & 4) == 0)
          {
            if (*v17 == *v18)
            {
              v19 = v16 - 1;
              if ((_DWORD)v16 != 1)
              {
                v20 = (int16x8_t *)(v17 + 1);
                v21 = (int16x8_t *)(v18 + 1);
                if ((_DWORD)v16 != 2)
                {
                  switch(31 - __clz(v16 - 2))
                  {
                    case 0u:
                      v22 = v20->i32[0];
                      v23 = v21->i32[0];
                      goto LABEL_26;
                    case 1u:
                      if (v20->i32[0] != v21->i32[0])
                        return 0;
                      v48 = *(_DWORD *)&v17[v16 - 2];
                      v56 = &v18[v16];
                      goto LABEL_90;
                    case 2u:
                      if (v20->i64[0] != v21->i64[0])
                        return 0;
                      v57 = *(_QWORD *)&v17[v16 - 4];
                      v58 = &v18[v16];
                      goto LABEL_94;
                    case 3u:
                      v59 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v17[v16 - 8], *(int16x8_t *)&v18[v16 - 8]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v17 + 1), *(int16x8_t *)(v18 + 1)));
                      v59.i16[0] = vminvq_u16(v59);
                      goto LABEL_96;
                    default:
                      v55 = (uint16x8_t)vceqq_s16(*v20, *v21);
                      v55.i16[0] = vminvq_u16(v55);
                      if (!v55.i32[0])
                        return 0;
                      if (v19 < 8)
                        goto LABEL_87;
                      v64 = v19 & 7;
                      do
                      {
                        v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v20 + 2 * v64), *(int16x8_t *)((char *)v21 + 2 * v64));
                        v65.i16[0] = vminvq_u16(v65);
                        LODWORD(result) = v65.i32[0] != 0;
                        v64 += 8;
                        if (v65.i32[0])
                          v66 = v64 >= v19;
                        else
                          v66 = 1;
                      }
                      while (!v66);
                      break;
                  }
                  return result;
                }
LABEL_25:
                v22 = v20->u16[0];
                v23 = v21->u16[0];
                goto LABEL_26;
              }
              goto LABEL_87;
            }
            return 0;
          }
          if (*v17 == *(unsigned __int8 *)v18)
          {
            v33 = (int16x8_t *)(v17 + 1);
            v34 = v16 - 1;
            v35 = (uint8x8_t *)((char *)v18 + 1);
            if (v34 >= 8)
            {
              v36 = (uint16x8_t)vceqq_s16(*v33, (int16x8_t)vmovl_u8(*v35));
              v36.i16[0] = vminvq_u16(v36);
              if (v36.i32[0])
              {
                v37 = v34 & 7;
                do
                {
                  v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v33 + 2 * v37), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v35 + v37)));
                  v38.i16[0] = vminvq_u16(v38);
                  LODWORD(result) = v38.i32[0] != 0;
                  v37 += 8;
                  if (v38.i32[0])
                    v39 = v37 >= v34;
                  else
                    v39 = 1;
                }
                while (!v39);
                return result;
              }
              return 0;
            }
            if (v34 >= 4)
            {
              v45 = (v35->u32[0] | ((unint64_t)v35->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v46 = (*(unsigned int *)((char *)v35->u32 + (v34 & 3)) | ((unint64_t)*(unsigned int *)((char *)v35->u32 + (v34 & 3)) << 16)) & 0xFFFF0000FFFFLL;
              v47 = (v46 | (v46 << 8)) & 0xFF00FF00FF00FFLL;
              v10 = ((v45 | (v45 << 8)) & 0xFF00FF00FF00FFLL) == v33->i64[0]
                 && v47 == *(uint64_t *)((char *)v33->i64 + 2 * (v34 & 3));
              goto LABEL_8;
            }
            if (v34 >= 2)
            {
              v10 = ((v35->u16[0] | (v35->u16[0] << 8)) & 0xFF00FF) == v33->i32[0];
              v54 = (*(unsigned __int16 *)((char *)v35->u16 + (v34 & 1)) | (*(unsigned __int16 *)((char *)v35->u16
                                                                                                + (v34 & 1)) << 8)) & 0xFF00FF;
              v10 = v10 && v54 == *(__int32 *)((char *)v33->i32 + 2 * (v34 & 1));
              goto LABEL_8;
            }
            if (v34 == 1)
            {
              v10 = v33->u16[0] == v35->u8[0];
LABEL_8:
              LODWORD(result) = v10;
              return result;
            }
LABEL_87:
            LODWORD(result) = 1;
            return result;
          }
          return 0;
        }
        if ((v15 & 4) != 0)
        {
          if (*(unsigned __int8 *)v17 != *(unsigned __int8 *)v18)
            return 0;
          v40 = v16 - 1;
          if ((_DWORD)v16 == 1)
            goto LABEL_87;
          v20 = (int16x8_t *)((char *)v17 + 1);
          v21 = (int16x8_t *)((char *)v18 + 1);
          if ((_DWORD)v16 != 2)
          {
            switch(31 - __clz(v16 - 2))
            {
              case 0u:
                goto LABEL_25;
              case 1u:
                if (v20->u16[0] != v21->u16[0])
                  return 0;
                v48 = *(unsigned __int16 *)((char *)v17 + v16 - 2);
                v49 = *(unsigned __int16 *)((char *)v18 + v16 - 2);
                goto LABEL_91;
              case 2u:
                if (v20->i32[0] != v21->i32[0])
                  return 0;
                v48 = *(_DWORD *)((char *)v17 + v16 - 4);
                v56 = (unsigned __int16 *)((char *)v18 + v16);
LABEL_90:
                v49 = *((_DWORD *)v56 - 1);
LABEL_91:
                v10 = v48 == v49;
                goto LABEL_8;
              case 3u:
                if (v20->i64[0] != v21->i64[0])
                  return 0;
                v57 = *(_QWORD *)((char *)v17 + v16 - 8);
                v58 = (unsigned __int16 *)((char *)v18 + v16);
LABEL_94:
                v10 = v57 == *((_QWORD *)v58 - 1);
                goto LABEL_8;
              case 4u:
                v59 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v17 + v16 - 16), *(int8x16_t *)((char *)v18 + v16 - 16)), vceqq_s8(*(int8x16_t *)((char *)v17 + 1), *(int8x16_t *)((char *)v18 + 1)));
                v59.i8[0] = vminvq_u8((uint8x16_t)v59);
LABEL_96:
                LODWORD(result) = v59.i32[0] != 0;
                return result;
              default:
                v60 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v20, *(int8x16_t *)v21);
                v60.i8[0] = vminvq_u8(v60);
                if (!v60.i32[0])
                  return 0;
                if (v40 < 0x10)
                  goto LABEL_87;
                v61 = v40 & 0xF;
                do
                {
                  v62 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v20 + v61), *(int8x16_t *)((char *)v21 + v61));
                  v62.i8[0] = vminvq_u8(v62);
                  LODWORD(result) = v62.i32[0] != 0;
                  v61 += 16;
                  if (v62.i32[0])
                    v63 = v61 >= v40;
                  else
                    v63 = 1;
                }
                while (!v63);
                break;
            }
            return result;
          }
          v22 = v20->u8[0];
          v23 = v21->u8[0];
        }
        else
        {
          if (*v18 != *(unsigned __int8 *)v17)
            return 0;
          v26 = (uint8x8_t *)((char *)v17 + 1);
          v27 = v16 - 1;
          v28 = (int16x8_t *)(v18 + 1);
          if (v27 >= 8)
          {
            v29 = (uint16x8_t)vceqq_s16(*v28, (int16x8_t)vmovl_u8(*v26));
            v29.i16[0] = vminvq_u16(v29);
            if (v29.i32[0])
            {
              v30 = v27 & 7;
              do
              {
                v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v28 + 2 * v30), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v26 + v30)));
                v31.i16[0] = vminvq_u16(v31);
                LODWORD(result) = v31.i32[0] != 0;
                v30 += 8;
                if (v31.i32[0])
                  v32 = v30 >= v27;
                else
                  v32 = 1;
              }
              while (!v32);
              return result;
            }
            return 0;
          }
          if (v27 >= 4)
          {
            v41 = (v26->u32[0] | ((unint64_t)v26->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v10 = ((v41 | (v41 << 8)) & 0xFF00FF00FF00FFLL) == v28->i64[0];
            v42 = (*(unsigned int *)((char *)v26->u32 + (v27 & 3)) | ((unint64_t)*(unsigned int *)((char *)v26->u32 + (v27 & 3)) << 16)) & 0xFFFF0000FFFFLL;
            v43 = (v42 | (v42 << 8)) & 0xFF00FF00FF00FFLL;
            v44 = *(uint64_t *)((char *)v28->i64 + 2 * (v27 & 3));
            v10 = v10 && v43 == v44;
            goto LABEL_8;
          }
          if (v27 >= 2)
          {
            v50 = (v26->u16[0] | (v26->u16[0] << 8)) & 0xFF00FF;
            v51 = v28->i32[0];
            v52 = (*(unsigned __int16 *)((char *)v26->u16 + (v27 & 1)) | (*(unsigned __int16 *)((char *)v26->u16
                                                                                              + (v27 & 1)) << 8)) & 0xFF00FF;
            v53 = *(__int32 *)((char *)v28->i32 + 2 * (v27 & 1));
            v10 = v50 == v51 && v52 == v53;
            goto LABEL_8;
          }
          if (v27 != 1)
            goto LABEL_87;
          v23 = v26->u8[0];
          v22 = v28->u16[0];
        }
LABEL_26:
        v10 = v22 == v23;
        goto LABEL_8;
      }
    }
LABEL_7:
    v10 = this == a3;
    goto LABEL_8;
  }
  if (!((unint64_t)a3 >> 49))
    goto LABEL_4;
  v24 = (double)(int)this;
  if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v24 = (char *)this - 0x2000000000000;
  v25 = (double)(int)a3;
  if ((unint64_t)a3 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v25 = (char *)a3 - 0x2000000000000;
  return v24 == v25;
}

unint64_t operationNewArrayWithProfile(JSC **a1, JSC::ArrayAllocationProfile *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unint64_t *v10;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t SlowCase;
  unint64_t v30;
  unsigned int *v31;
  _DWORD *v32;
  void *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t *v49;
  double v50;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t OutOfMemoryError;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::Exception *v82;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  JSC *v104;
  uint64_t vars0;

  v9 = a4;
  v10 = (unint64_t *)a3;
  v104 = a1[7];
  *((_QWORD *)v104 + 5) = vars0;
  if (this)
  {
    v13 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) + 4) & 0xF) != HIBYTE(v13))
    {
      v56 = (unint64_t *)a3;
      JSC::ArrayAllocationProfile::updateProfile((unint64_t *)this);
      v10 = v56;
      v13 = *(_QWORD *)this;
    }
    v14 = HIBYTE(v13);
    if ((v14 & 0x10) != 0)
    {
      v15 = ((v14 & 0xE) + 10) >> 1;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v14) = 3;
  }
  v15 = (v14 >> 1) & 7;
LABEL_7:
  v16 = *((_DWORD *)a1 + v15 + 223);
  if (v16)
    v17 = 16 * (v16 & 0xFFFFFFFE);
  else
    v17 = 0;
  if (*((_DWORD *)v104 + 20))
  {
    v63 = *((_DWORD *)v104 + 20);
    if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
    {
      v99 = v10;
      JSC::VMTraps::handleTraps((JSC *)((char *)v104 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v99;
    }
    if (*((_QWORD *)v104 + 2))
      return 0;
  }
  v18 = (uint64_t)a1[7];
  if (v9 > 0x10000000)
    goto LABEL_112;
  v19 = *(unsigned __int16 *)(v17 + 24);
  if (v19 == 65534
    || (v19 == 0xFFFF ? (v20 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84)) : (v20 = *(unsigned __int16 *)(v17 + 24)),
        v20 < 64))
  {
    v21 = 0;
  }
  else if ((v20 - 63) >= 5)
  {
    v52 = (v20 - 64) | ((v20 - 64) >> 1) | (((v20 - 64) | ((v20 - 64) >> 1)) >> 2);
    v53 = v52 | (v52 >> 4) | ((v52 | (v52 >> 4)) >> 8);
    v21 = (v53 | HIWORD(v53)) + 1;
  }
  else
  {
    v21 = 4;
  }
  v22 = *(_BYTE *)(v17 + 8) & 0xE;
  if (v22 > 9)
  {
    if (v19 == 65534)
      goto LABEL_98;
    if (v19 == 0xFFFF)
      v19 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
    if (v19 < 64)
    {
LABEL_98:
      v64 = 0;
    }
    else if ((v19 - 63) >= 5)
    {
      v92 = (v19 - 64) | ((v19 - 64) >> 1) | (((v19 - 64) | ((v19 - 64) >> 1)) >> 2);
      v93 = v92 | (v92 >> 4) | ((v92 | (v92 >> 4)) >> 8);
      v64 = (v93 | HIWORD(v93)) + 1;
    }
    else
    {
      v64 = 4;
    }
    if (v9 <= 4)
      v65 = 4;
    else
      v65 = v9;
    v66 = v64 + v65;
    v67 = 8 * (v64 + v65);
    if (v66 > 7)
    {
      if (v66 > 0x3E9)
        v68 = v67 + 24;
      else
        v68 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v67 + 39) >> 2) & 0x7FFFFFFFCLL));
    }
    else
    {
      v68 = (v67 + 39) & 0x1FFFFFFFF0;
    }
    v69 = v68 - 8 * v64 + 0x7FFFFFFE8;
    v70 = (v69 >> 3);
    v71 = v70 + v21;
    v72 = 8 * v71;
    if (v71 <= 0x3E9 && (v73 = *(_QWORD *)(v18 + (((unint64_t)(v72 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
    {
      v74 = *(unsigned int *)(v73 + 60);
      SlowCase = *(_QWORD *)(v73 + 24);
      if (SlowCase >= *(_QWORD *)(v73 + 32))
      {
        v102 = v10;
        SlowCase = *(_QWORD *)(v73 + 40);
        if ((SlowCase & 1) == 0)
        {
          v96 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v73 + 48);
          *(_QWORD *)(v73 + 32) = SlowCase + HIDWORD(v96);
          *(_QWORD *)(v73 + 40) = SlowCase + (int)v96;
          *(_QWORD *)(v73 + 24) = SlowCase + v74;
          goto LABEL_109;
        }
        JSC::sanitizeStackForVM((JSC *)v18, this, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v73, v18 + 192, v74, 0, 1);
        v10 = v102;
      }
      else
      {
        *(_QWORD *)(v73 + 24) = SlowCase + v74;
      }
    }
    else
    {
      v94 = v10;
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v18 + 6648, a1[7], v72 + 24, 0, a5, a6, a7, a8);
      v10 = v94;
    }
    if (!SlowCase)
      goto LABEL_112;
LABEL_109:
    v30 = v69 >> 3;
    if ((v69 >> 3) >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198796A60);
    }
    v75 = SlowCase + 8 * v21;
    *(_QWORD *)v75 = v9 | (unint64_t)(v70 << 32);
    *(_QWORD *)(v75 + 8) = 0;
    v32 = (_DWORD *)(v75 + 8);
    *(_DWORD *)(v75 + 16) = 0;
    *(_DWORD *)(v75 + 20) = v9;
    if (v30 > v9)
    {
      v33 = (void *)(SlowCase + 8 * (v21 + (unint64_t)v9) + 24);
LABEL_39:
      v34 = v10;
      bzero(v33, 8 * (v30 + ~v9) + 8);
LABEL_40:
      v10 = v34;
    }
LABEL_41:
    v35 = v18 + 192;
    v36 = *(_QWORD *)(v18 + 37584);
    if (v36 >= *(_QWORD *)(v18 + 37592))
    {
      v36 = *(_QWORD *)(v18 + 37600);
      if ((v36 & 1) != 0)
      {
        v95 = v10;
        JSC::sanitizeStackForVM((JSC *)v18, this, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v18 + 37560, v18 + 192, 16, 0, 0);
        v10 = v95;
        v36 = SlowCase;
        v35 = v18 + 192;
LABEL_43:
        *(_DWORD *)v36 = 0;
        v37 = *(_DWORD *)(v17 + 8);
        *(_DWORD *)v36 = v17 >> 4;
        *(_DWORD *)(v36 + 4) = v37;
        *(_QWORD *)(v36 + 8) = v32;
        if (*(_BYTE *)(v18 + 755))
          __dmb(0xAu);
        v38 = *(unsigned __int8 *)(v17 + 8);
        if ((v38 & 0x10) != 0)
          v39 = ((v38 & 0xE) + 10) >> 1;
        else
          v39 = (v38 >> 1) & 7;
        v40 = *(_DWORD *)(*(_QWORD *)(v17 + 40) + 4 * v39 + 852);
        if (v40)
          v41 = 16 * (v40 & 0xFFFFFFFE);
        else
          v41 = 0;
        if (v41 != v17)
        {
          v97 = v10;
          v98 = v35;
          JSC::JSArray::eagerlyInitializeButterfly(SlowCase, v36, v9);
          v35 = v98;
          v10 = v97;
        }
        if (v9)
        {
          v42 = 0;
          v43 = 0;
          v44 = 8 * v9;
          while (1)
          {
            v46 = *v10--;
            v45 = v46;
            v47 = *(_QWORD *)(v36 + 8);
            switch(*(_BYTE *)(v36 + 4) & 0xF)
            {
              case 3:
                v101 = v35;
                v57 = v10;
                JSC::JSObject::convertUndecidedForValue(v36, (JSC::VM *)v18, v45, a4, a5, a6, a7, a8, a9);
                JSC::JSObject::setIndexQuickly(v36, (JSC::VM *)v18, v43, v45, v58, v59, v60, v61);
                goto LABEL_89;
              case 4:
              case 5:
                if (v45 > 0xFFFDFFFFFFFFFFFFLL)
                  goto LABEL_56;
                v100 = v35;
                v49 = v10;
                *(_QWORD *)&v50 = v45 - 0x2000000000000;
                if (v45 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || BYTE1(dword_1ECF4C5C0) == 0)
                  JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v36, (JSC::VM *)v18, a3, a4, a5, a6, a7, a8, v50);
                else
                  JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v36, (JSC::VM *)v18, a3, a4, a5, a6, a7, a8, v50);
                JSC::JSObject::setIndexQuickly(v36, (JSC::VM *)v18, v43, v45, v88, v89, v90, v91);
                v10 = v49;
                v35 = v100;
                goto LABEL_61;
              case 6:
              case 7:
                if (v45 >> 49)
                {
                  a9 = (double)(int)v45;
                  if (v45 <= 0xFFFDFFFFFFFFFFFFLL)
                    *(_QWORD *)&a9 = v45 - 0x2000000000000;
                  *(double *)(v47 + v42) = a9;
                  v43 = (v43 + 1);
                  v42 += 8;
                  if (v44 == v42)
                    goto LABEL_115;
                }
                else
                {
                  v101 = v35;
                  v57 = v10;
                  JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v36, (JSC::VM *)v18, v43, v45, a5, a6, a7, a8, a9);
LABEL_89:
                  v35 = v101;
                  v10 = v57;
LABEL_61:
                  v43 = (v43 + 1);
                  v42 += 8;
                  if (v44 == v42)
                    goto LABEL_115;
                }
                break;
              case 8:
              case 9:
LABEL_56:
                *(_QWORD *)(v47 + v42) = v45;
                goto LABEL_57;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                *(_QWORD *)(v47 + v42 + 16) = v45;
LABEL_57:
                if (v45)
                  v48 = (v45 & 0xFFFE000000000002) == 0;
                else
                  v48 = 0;
                if (v48 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v36 + 7))
                {
                  v86 = v35;
                  v87 = v10;
                  JSC::Heap::writeBarrierSlowPath(v35, v36);
                  v35 = v86;
                  v10 = v87;
                }
                goto LABEL_61;
              default:
                __break(0xC471u);
                JUMPOUT(0x198796B44);
            }
          }
        }
        goto LABEL_115;
      }
      v84 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v18 + 37608);
      *(_QWORD *)(v18 + 37592) = v36 + HIDWORD(v84);
      *(_QWORD *)(v18 + 37600) = v36 + (int)v84;
    }
    *(_QWORD *)(v18 + 37584) = v36 + 16;
    goto LABEL_43;
  }
  if (v19 == 65534)
    goto LABEL_22;
  if (v19 == 0xFFFF)
    v19 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
  if (v19 < 64)
  {
LABEL_22:
    v23 = 8;
  }
  else if ((v19 - 63) >= 5)
  {
    v54 = (v19 - 64) | ((v19 - 64) >> 1) | (((v19 - 64) | ((v19 - 64) >> 1)) >> 2);
    v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
    v23 = 8 * ((v55 | HIWORD(v55)) + 1) + 8;
  }
  else
  {
    v23 = 40;
  }
  if (v9 <= 3)
    v24 = 3;
  else
    v24 = v9;
  if (!v9)
    v24 = 5;
  v25 = v23 + 8 * v24;
  if (v25 > 0x50)
  {
    if (v25 <= 0x1F60)
      v25 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v25 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v25 = (v25 + 15) & 0x3FFFFFFFF0;
  }
  v26 = v25 - v23;
  a3 = ((v25 - v23) & 0x7FFFFFFF8) + 8 * v21 + 8;
  if (a3 <= 0x1F60
    && (v27 = *(_QWORD *)(v18 + (((((v25 - v23) & 0x7FFFFFFF8) + 8 * v21 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v28 = *(unsigned int *)(v27 + 60);
    SlowCase = *(_QWORD *)(v27 + 24);
    if (SlowCase >= *(_QWORD *)(v27 + 32))
    {
      SlowCase = *(_QWORD *)(v27 + 40);
      if ((SlowCase & 1) == 0)
      {
        v85 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v27 + 48);
        *(_QWORD *)(v27 + 32) = SlowCase + HIDWORD(v85);
        *(_QWORD *)(v27 + 40) = SlowCase + (int)v85;
        *(_QWORD *)(v27 + 24) = SlowCase + v28;
        goto LABEL_35;
      }
      v103 = v10;
      JSC::sanitizeStackForVM((JSC *)v18, this, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, v18 + 192, v28, 0, 1);
      v10 = v103;
    }
    else
    {
      *(_QWORD *)(v27 + 24) = SlowCase + v28;
    }
  }
  else
  {
    v62 = v10;
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v18 + 6648, a1[7], a3, 0, a5, a6, a7, a8);
    v10 = v62;
  }
  if (SlowCase)
  {
LABEL_35:
    v30 = v26 >> 3;
    if ((v26 >> 3) >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x1987968CCLL);
    }
    v31 = (unsigned int *)(SlowCase + 8 * v21);
    v32 = v31 + 2;
    *v31 = v9;
    v31[1] = v30;
    if (v22 != 6)
    {
      if (v30 <= v9)
        goto LABEL_41;
      v33 = (void *)(SlowCase + 8 * (v21 + (unint64_t)v9) + 8);
      goto LABEL_39;
    }
    if (v30 > v9)
    {
      v34 = v10;
      memset_pattern16((void *)(SlowCase + 8 * (v21 + (unint64_t)v9) + 8), &memset_pattern_263, 8 * (v30 + ~v9) + 8);
      goto LABEL_40;
    }
    goto LABEL_41;
  }
LABEL_112:
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, this);
  v82 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v82 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)OutOfMemoryError, 0, v77, v78, v79, v80, v81);
  }
  JSC::VM::throwException((JSC::VM *)v18, (JSC::JSGlobalObject *)a1, v82);
  v36 = 0;
LABEL_115:
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  if (this && v36)
    *(_QWORD *)this = v36 | ((unint64_t)*((unsigned __int16 *)this + 3) << 48);
  return v36;
}

unint64_t operationNewArrayWithSizeAndProfile(JSC::JSGlobalObject *a1, JSC::ArrayAllocationProfile *this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::ArrayAllocationProfile *v9;
  uint64_t v11;
  unsigned int v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t Slow;
  unsigned int *v32;
  _DWORD *v33;
  unint64_t result;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  __n128 *v44;
  int v45;
  uint64_t v46;
  unint64_t SlowCase;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t OutOfMemoryError;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::Exception *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const WTF::String *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  WTF::StringImpl *v89;
  _QWORD var58[12];

  v9 = this;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var58[11];
  var58[0] = a3;
  if (!(a3 >> 49))
    return JSC::constructArrayNegativeIndexed((unint64_t)a1, (uint64_t)this, (JSC::ExecutableBase *)var58, 1, 0, a6, a7, a8, a9.n128_f64[0]);
  v12 = a3;
  if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v40 = a3 - 0x2000000000000;
    v41 = ((a3 - 0x2000000000000) >> 52) & 0x7FF;
    if ((v41 - 1023) <= 0x53)
    {
      v42 = (unint64_t)v40 >> (51 - ((a3 - 0x2000000000000) >> 52));
      if (v41 > 0x433)
        LODWORD(v42) = a3 << (((a3 - 0x2000000000000) >> 52) - 51);
      if (v41 >= 0x41F)
        v43 = v42;
      else
        v43 = (((1 << (((a3 - 0x2000000000000) >> 52) + 1)) - 1) & v42)
            + (1 << (((a3 - 0x2000000000000) >> 52) + 1));
      if (v40 >= 0)
        v12 = v43;
      else
        v12 = -v43;
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)&v13 = a3 - 0x2000000000000;
  }
  else
  {
    v13 = (double)(int)a3;
  }
  if (v13 != (double)v12)
  {
    v64 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v64 = 0x3A00000002;
    *(_QWORD *)(v64 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v64 + 16) = 4;
    v89 = (WTF::StringImpl *)v64;
    v66 = JSC::createRangeError((unint64_t)a1, &v89, v65);
    JSC::VM::throwException((JSC::VM *)v11, a1, v66, v67, v68, v69, v70, v71);
    v79 = v89;
    v89 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
    }
    return 0;
  }
  if (v12 >> 27)
  {
    v15 = 5;
    goto LABEL_13;
  }
  if (this)
  {
    v14 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) + 4) & 0xF) != HIBYTE(v14))
    {
      JSC::ArrayAllocationProfile::updateProfile((unint64_t *)this);
      v14 = *(_QWORD *)v9;
    }
    v15 = HIBYTE(v14);
    if ((v15 & 0x10) != 0)
    {
      LODWORD(v15) = ((v15 & 0xE) + 10) >> 1;
      goto LABEL_12;
    }
  }
  else
  {
    LODWORD(v15) = 3;
  }
  LODWORD(v15) = (v15 >> 1) & 7;
LABEL_12:
  v15 = v15;
LABEL_13:
  v16 = *((_DWORD *)a1 + v15 + 223);
  if (v16)
    v17 = 16 * (v16 & 0xFFFFFFFE);
  else
    v17 = 0;
  if (*(_DWORD *)(v11 + 80))
  {
    v45 = *(_DWORD *)(v11 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v18 = *(unsigned __int16 *)(v17 + 24);
  if (v18 == 65534
    || (v18 == 0xFFFF ? (v19 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84)) : (v19 = *(unsigned __int16 *)(v17 + 24)),
        v19 < 64))
  {
    v20 = 0;
  }
  else if ((v19 - 63) >= 5)
  {
    v36 = (v19 - 64) | ((v19 - 64) >> 1) | (((v19 - 64) | ((v19 - 64) >> 1)) >> 2);
    v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
    v20 = (v37 | HIWORD(v37)) + 1;
  }
  else
  {
    v20 = 4;
  }
  v21 = *(_BYTE *)(v17 + 8) & 0xE;
  if (v21 > 9)
  {
    v46 = *(_QWORD *)(v11 + 6768);
    if (v46)
    {
      SlowCase = *(_QWORD *)(v46 + 24);
      if (SlowCase >= *(_QWORD *)(v46 + 32))
      {
        v60 = *(unsigned int *)(v46 + 60);
        v48 = *(__n128 **)(v46 + 40);
        if ((v48 & 1) == 0)
        {
          v61 = v48->n128_u64[1] ^ *(_QWORD *)(v46 + 48);
          *(_QWORD *)(v46 + 32) = (char *)v48 + HIDWORD(v61);
          *(_QWORD *)(v46 + 40) = (char *)v48 + (int)v61;
          *(_QWORD *)(v46 + 24) = (char *)v48 + v60;
          SlowCase = (unint64_t)v48;
          goto LABEL_94;
        }
        JSC::sanitizeStackForVM((JSC *)v11, this, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v46, v11 + 192, v60, 0, 1);
      }
      else
      {
        *(_QWORD *)(v46 + 24) = SlowCase + *(unsigned int *)(v46 + 60);
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, 0x38uLL, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
      goto LABEL_100;
    v48 = (__n128 *)SlowCase;
LABEL_94:
    *(_QWORD *)SlowCase = v12 | 0x400000000;
    v49 = v48;
    v50 = v48;
    a9.n128_u64[0] = 0;
    while (v48 != v50)
    {
      *v48 = a9;
      v48[1] = a9;
      v48[2] = a9;
      v48[3] = a9;
      v48 += 4;
    }
    while (v48 != v49)
    {
      v48->n128_u64[0] = 0;
      v48 = (__n128 *)((char *)v48 + 8);
    }
    *(_OWORD *)(SlowCase + 8) = 0u;
    v33 = (_DWORD *)(SlowCase + 8);
    *((_OWORD *)v33 + 1) = 0u;
    *((_OWORD *)v33 + 2) = 0u;
    goto LABEL_47;
  }
  if (v12 > 0x10000000)
    goto LABEL_100;
  if (v18 == 65534)
    goto LABEL_28;
  if (v18 == 0xFFFF)
    v18 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
  if (v18 < 64)
  {
LABEL_28:
    v22 = 0;
  }
  else if ((v18 - 63) >= 5)
  {
    v38 = (v18 - 64) | ((v18 - 64) >> 1) | (((v18 - 64) | ((v18 - 64) >> 1)) >> 2);
    v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    v22 = (v39 | HIWORD(v39)) + 1;
  }
  else
  {
    v22 = 4;
  }
  v23 = v22;
  LODWORD(v24) = v12 <= 3 ? 3 : v12;
  v24 = v12 ? v24 : 5;
  v25 = v24 + v22;
  v26 = 8 * v25;
  if (v25 > 9)
    v27 = v25 > 0x3EB
        ? v26 + 8
        : *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                          + (((unint64_t)(v26 + 23) >> 2) & 0x7FFFFFFFCLL));
  else
    v27 = (v26 + 23) & 0x1FFFFFFFF0;
  v28 = v27 - 8 * v23 - 8;
  a3 = (v28 & 0x7FFFFFFF8) + 8 * v20 + 8;
  if (a3 <= 0x1F60
    && (v29 = *(_QWORD *)(v11 + ((((v28 & 0x7FFFFFFF8) + 8 * v20 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v30 = *(unsigned int *)(v29 + 60);
    Slow = *(_QWORD *)(v29 + 24);
    if (Slow >= *(_QWORD *)(v29 + 32))
    {
      Slow = *(_QWORD *)(v29 + 40);
      if ((Slow & 1) == 0)
      {
        v59 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v29 + 48);
        *(_QWORD *)(v29 + 32) = Slow + HIDWORD(v59);
        *(_QWORD *)(v29 + 40) = Slow + (int)v59;
        *(_QWORD *)(v29 + 24) = Slow + v30;
        goto LABEL_42;
      }
      v88 = v20;
      v62 = *(unsigned int *)(v29 + 60);
      JSC::sanitizeStackForVM((JSC *)v11, this, a3, a4, a5, a6, a7, a8);
      v63 = v62;
      v20 = v88;
      Slow = JSC::LocalAllocator::allocateSlowCase(v29, v11 + 192, v63, 0, 1);
    }
    else
    {
      *(_QWORD *)(v29 + 24) = Slow + v30;
    }
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, a3, 0, a5, a6, a7, a8);
  }
  if (!Slow)
  {
LABEL_100:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, this);
    v57 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v57 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v52, v53, v54, v55, v56);
    }
    JSC::VM::throwException((JSC::VM *)v11, a1, v57);
    return 0;
  }
LABEL_42:
  this = (JSC::ArrayAllocationProfile *)(v28 >> 3);
  if ((v28 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198797130);
  }
  v32 = (unsigned int *)(Slow + 8 * v20);
  v33 = v32 + 2;
  *v32 = v12;
  v32[1] = this;
  if (v21 == 6)
  {
    if (this > 0x63)
    {
      JSC::clearArrayMemset((JSC *)(v32 + 2), (double *)this);
    }
    else if ((_DWORD)this)
    {
      memset_pattern16(v32 + 2, &memset_pattern_1, v28 & 0x7FFFFFFF8);
    }
  }
  else if (this > 0x63)
  {
    v44 = (__n128 *)(v32 + 2);
    a9.n128_u64[0] = 0;
    while (v44 != (__n128 *)((char *)v33 + (v28 & 0x7FFFFFFC0)))
    {
      *v44 = a9;
      v44[1] = a9;
      v44[2] = a9;
      v44[3] = a9;
      v44 += 4;
    }
    while (v44 != (__n128 *)((char *)v33 + (v28 & 0x7FFFFFFF8)))
    {
      v44->n128_u64[0] = 0;
      v44 = (__n128 *)((char *)v44 + 8);
    }
  }
  else if ((_DWORD)this)
  {
    bzero(v32 + 2, v28 & 0x7FFFFFFF8);
  }
LABEL_47:
  result = *(_QWORD *)(v11 + 37584);
  if (result >= *(_QWORD *)(v11 + 37592))
  {
    result = *(_QWORD *)(v11 + 37600);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v11, this, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v11 + 37560, v11 + 192, 16, 0, 0);
      goto LABEL_49;
    }
    v58 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v11 + 37608);
    *(_QWORD *)(v11 + 37592) = result + HIDWORD(v58);
    *(_QWORD *)(v11 + 37600) = result + (int)v58;
  }
  *(_QWORD *)(v11 + 37584) = result + 16;
LABEL_49:
  *(_DWORD *)result = 0;
  v35 = *(_DWORD *)(v17 + 8);
  *(_DWORD *)result = v17 >> 4;
  *(_DWORD *)(result + 4) = v35;
  *(_QWORD *)(result + 8) = v33;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (v9)
    *(_QWORD *)v9 = result | ((unint64_t)*((unsigned __int16 *)v9 + 3) << 48);
  return result;
}

unint64_t operationCreateLexicalEnvironmentTDZ(uint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD var50[11];

  v9 = a3;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var50[10];
  v12 = *(_DWORD *)(a1 + 832);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = 8 * (*(_DWORD *)(a3 + 16) + 1) + 47;
  v15 = v14 & 0xFFFFFFFF0;
  if ((v14 & 0xFFFFFFFF0) <= 0x1F60 && (v16 = *(_QWORD *)(v11 + ((v14 >> 1) & 0x7FFFFFFF8) + 19168)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase < *(_QWORD *)(v16 + 32))
    {
LABEL_7:
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
      goto LABEL_8;
    }
    SlowCase = *(_QWORD *)(v16 + 40);
    if ((SlowCase & 1) == 0)
    {
      v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v26);
      *(_QWORD *)(v16 + 40) = SlowCase + (int)v26;
      goto LABEL_7;
    }
    v27 = v13;
    v28 = v16;
    JSC::sanitizeStackForVM((JSC *)v11, a2, v15, a4, a5, a6, a7, a8);
    v29 = v28;
    v13 = v27;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v29, v11 + 192, v17, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 19080, (JSC *)v11, v15, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x1987974B4);
    }
  }
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  v19 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = a2;
  *(_QWORD *)(SlowCase + 24) = v9;
  v20 = *(_QWORD *)(v9 + 40);
  if ((v20 & 1) != 0)
    v21 = (v20 >> 1) & 3;
  else
    v21 = *(unsigned __int8 *)(v20 + 4);
  if (v21 != 2)
  {
    var50[0] = &off_1E3583C90;
    var50[1] = "Allocated a scope";
    JSC::InferredValue<JSC::JSScope>::notifyWriteSlow((uint64_t *)(v9 + 40), (JSC::VM *)v11, v9, SlowCase, var50, a6, a7, a8, a9);
    v9 = *(_QWORD *)(SlowCase + 24);
  }
  v22 = *(_DWORD *)(v9 + 16);
  if (v22 != -1)
  {
    v23 = (v22 + 1) - 1;
    do
      *(_QWORD *)(SlowCase + 32 + 8 * v23) = 0;
    while ((unint64_t)v23--);
  }
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t operationCreateLexicalEnvironmentUndefined(uint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD var50[11];

  v9 = a3;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var50[10];
  v12 = *(_DWORD *)(a1 + 832);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = 8 * (*(_DWORD *)(a3 + 16) + 1) + 47;
  v15 = v14 & 0xFFFFFFFF0;
  if ((v14 & 0xFFFFFFFF0) <= 0x1F60 && (v16 = *(_QWORD *)(v11 + ((v14 >> 1) & 0x7FFFFFFF8) + 19168)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase < *(_QWORD *)(v16 + 32))
    {
LABEL_7:
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
      goto LABEL_8;
    }
    SlowCase = *(_QWORD *)(v16 + 40);
    if ((SlowCase & 1) == 0)
    {
      v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v26);
      *(_QWORD *)(v16 + 40) = SlowCase + (int)v26;
      goto LABEL_7;
    }
    v27 = v13;
    v28 = v16;
    JSC::sanitizeStackForVM((JSC *)v11, a2, v15, a4, a5, a6, a7, a8);
    v29 = v28;
    v13 = v27;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v29, v11 + 192, v17, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 19080, (JSC *)v11, v15, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x1987976C4);
    }
  }
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  v19 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = a2;
  *(_QWORD *)(SlowCase + 24) = v9;
  v20 = *(_QWORD *)(v9 + 40);
  if ((v20 & 1) != 0)
    v21 = (v20 >> 1) & 3;
  else
    v21 = *(unsigned __int8 *)(v20 + 4);
  if (v21 != 2)
  {
    var50[0] = &off_1E3583C90;
    var50[1] = "Allocated a scope";
    JSC::InferredValue<JSC::JSScope>::notifyWriteSlow((uint64_t *)(v9 + 40), (JSC::VM *)v11, v9, SlowCase, var50, a6, a7, a8, a9);
    v9 = *(_QWORD *)(SlowCase + 24);
  }
  v22 = *(_DWORD *)(v9 + 16);
  if (v22 != -1)
  {
    v23 = (v22 + 1) - 1;
    do
      *(_QWORD *)(SlowCase + 32 + 8 * v23) = 10;
    while ((unint64_t)v23--);
  }
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t operationCreateDirectArgumentsBaseline(JSC::DirectArguments *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::DirectArguments::createByCopying(a1, vars0, a3, a4, a5, a6, a7, a8);
}

unint64_t operationCreateScopedArgumentsBaseline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t vars0;

  v9 = *(JSC **)(a1 + 56);
  *((_QWORD *)v9 + 5) = vars0;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v10)
    *(_BYTE *)(v10 + 12) = 1;
  v11 = *(_DWORD *)(a1 + 840);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  return JSC::ScopedArguments::createByCopyingFrom(v9, v12, vars0 + 48, (*(_DWORD *)(vars0 + 32) - 1), *(_QWORD *)(vars0 + 24), v10, a2, a8);
}

unint64_t operationCreateClonedArgumentsBaseline(unint64_t a1, JSC::VM *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _UNKNOWN *__ptr32 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *ArrayStorageButterflyImpl;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  unint64_t *v32;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  unint64_t SlowCase;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  unsigned int v41;
  unint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  JSC::VM *v46;
  int v47;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  JSC::VM *v52;
  _UNKNOWN *__ptr32 *v53;
  uint64_t v54;
  uint64_t Slow;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t vars0;

  v10 = *(_QWORD *)(a1 + 56);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  v12 = *(_DWORD *)(v11 + 32);
  v13 = (v12 - 1);
  v14 = *(_DWORD *)(a1 + 844);
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  if (v13 > 0x10000000)
    return 0;
  v17 = *(_QWORD *)(v11 + 24);
  if ((*(_BYTE *)(v15 + 8) & 0x20) != 0)
    goto LABEL_16;
  v18 = *(_QWORD *)(v15 + 40);
  if (v18)
  {
    if (*(_BYTE *)(*(_QWORD *)(v18 + 2048) + 4) == 2)
      goto LABEL_16;
  }
  v19 = *(_DWORD **)(v15 + 48);
  v20 = 16 * (*v19 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v20 + 8) & 0x20) != 0)
    goto LABEL_16;
  v21 = 16 * (*v19 & 0xFFFFFFFE);
  while (1)
  {
    v22 = *(_QWORD *)(v21 + 40);
    if (v22 && *(_BYTE *)(*(_QWORD *)(v22 + 2048) + 4) == 2)
      goto LABEL_16;
    v23 = *(_DWORD **)(v21 + 48);
    if (!v23)
      v23 = (_DWORD *)*((_QWORD *)v19 + 2);
    if (v23 == (_DWORD *)2)
      break;
    v21 = 16 * (*v23 & 0xFFFFFFFE);
    v19 = v23;
    if ((*(_BYTE *)(v21 + 8) & 0x20) != 0)
      goto LABEL_16;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 2048) + 4) == 2)
  {
LABEL_16:
    ArrayStorageButterflyImpl = JSC::createArrayStorageButterflyImpl((JSC::VM *)v10, 0, (JSC::Structure *)v15, v12 - 1, v12 - 1, 0, 1, a3);
    if (ArrayStorageButterflyImpl)
    {
      *((_DWORD *)ArrayStorageButterflyImpl + 3) = v13;
      goto LABEL_34;
    }
LABEL_78:
    v65 = v10;
    JSC::throwOutOfMemoryError(a1, &v65);
    return 0;
  }
  v26 = *(unsigned __int16 *)(v15 + 24);
  if (v26 == 65534)
    goto LABEL_23;
  if (v26 == 0xFFFF)
    v26 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
  if (v26 < 64)
  {
LABEL_23:
    v27 = 0;
  }
  else if ((v26 - 63) >= 5)
  {
    v49 = (v26 - 64) | ((v26 - 64) >> 1) | (((v26 - 64) | ((v26 - 64) >> 1)) >> 2);
    v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
    v27 = (v50 | HIWORD(v50)) + 1;
  }
  else
  {
    v27 = 4;
  }
  v28 = 8 * v27;
  v25 = 8 * v27 + 8 * v13 + 8;
  if (v25 > 0x1F60
    || (v29 = *(_QWORD *)(v10 + (((8 * v27 + 8 * (unint64_t)v13 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, v25, 0, a6, a7, a8, a9);
LABEL_69:
    v31 = (__n128 *)Slow;
LABEL_28:
    if (v31)
      goto LABEL_29;
    goto LABEL_78;
  }
  v30 = *(unsigned int *)(v29 + 60);
  v31 = *(__n128 **)(v29 + 24);
  if ((unint64_t)v31 < *(_QWORD *)(v29 + 32))
  {
    *(_QWORD *)(v29 + 24) = (char *)v31 + v30;
    goto LABEL_28;
  }
  v31 = *(__n128 **)(v29 + 40);
  if ((v31 & 1) != 0)
  {
    v63 = *(_DWORD *)(v11 + 32);
    v60 = *(unsigned int *)(v29 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, a2, v25, a5, a6, a7, a8, a9);
    v61 = v60;
    v12 = v63;
    Slow = JSC::LocalAllocator::allocateSlowCase(v29, v10 + 192, v61, 0, 1);
    goto LABEL_69;
  }
  v57 = v31->n128_u64[1] ^ *(_QWORD *)(v29 + 48);
  *(_QWORD *)(v29 + 32) = (char *)v31 + HIDWORD(v57);
  *(_QWORD *)(v29 + 40) = (char *)v31 + (int)v57;
  *(_QWORD *)(v29 + 24) = (char *)v31 + v30;
LABEL_29:
  v32 = &v31->n128_u64[v27];
  *v32 = v13 | (v13 << 32);
  ArrayStorageButterflyImpl = v32 + 1;
  v33 = (__n128 *)((char *)v31 + v28);
  v34 = (__n128 *)((char *)v31 + (v28 & 0x7FFFFFFC0));
  a3.n128_u64[0] = 0;
  while (v31 != v34)
  {
    *v31 = a3;
    v31[1] = a3;
    v31[2] = a3;
    v31[3] = a3;
    v31 += 4;
  }
  while (v31 != v33)
  {
    v31->n128_u64[0] = 0;
    v31 = (__n128 *)((char *)v31 + 8);
  }
LABEL_34:
  v35 = v10 + 192;
  SlowCase = *(_QWORD *)(v10 + 37848);
  if (SlowCase < *(_QWORD *)(v10 + 37856))
  {
LABEL_35:
    *(_QWORD *)(v10 + 37848) = SlowCase + 32;
    goto LABEL_36;
  }
  SlowCase = *(_QWORD *)(v10 + 37864);
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 37872);
    *(_QWORD *)(v10 + 37856) = SlowCase + HIDWORD(v56);
    *(_QWORD *)(v10 + 37864) = SlowCase + (int)v56;
    goto LABEL_35;
  }
  v59 = ArrayStorageButterflyImpl;
  JSC::sanitizeStackForVM((JSC *)v10, a2, v25, a5, a6, a7, a8, a9);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 37824, v10 + 192, 32, 0, 0);
  v35 = v10 + 192;
  ArrayStorageButterflyImpl = v59;
LABEL_36:
  *(_DWORD *)SlowCase = 0;
  v37 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v37;
  *(_QWORD *)(SlowCase + 8) = ArrayStorageButterflyImpl;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = v17;
  if (v17 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v35, SlowCase);
  *(_QWORD *)(*(_QWORD *)(SlowCase + 8) - 16) = v13 | 0xFFFE000000000000;
  if ((_DWORD)v13)
  {
    v38 = (v12 - 2);
    v39 = (v38 << 32) + 0x600000000;
    for (i = 8 * v38; ; i -= 8)
    {
      v41 = v13 - 1;
      v42 = *(_QWORD *)(v11 + (v39 >> 29));
      v43 = *(_BYTE *)(SlowCase + 4);
      v44 = v43 & 0x1F;
      if (v44 - 4 >= 0xA)
        break;
      v45 = *(_QWORD *)(SlowCase + 8);
      if (*(_DWORD *)(v45 - 4) <= v41)
        goto LABEL_64;
      v46 = *(JSC::VM **)(a1 + 56);
      v47 = v43 & 0xF;
      if ((v47 - 8) >= 2)
      {
        switch(v47)
        {
          case 0:
          case 1:
            v62 = v13 - 1;
            v53 = v9;
            JSC::JSObject::setIndexQuicklyForTypedArray(SlowCase, v62, *(_QWORD *)(v11 + (v39 >> 29)));
            goto LABEL_65;
          case 4:
          case 5:
            if (v42 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_44;
            v54 = (v13 - 1);
            v53 = v9;
            JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v46, v54, v42, a6, a7, a8, a9);
            goto LABEL_65;
          case 6:
          case 7:
            if (!(v42 >> 49))
            {
              v58 = (v13 - 1);
              v53 = v9;
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v46, v58, v42, a6, a7, a8, a9, a3.n128_f64[0]);
              goto LABEL_65;
            }
            a3.n128_f64[0] = (double)(int)v42;
            if (v42 <= 0xFFFDFFFFFFFFFFFFLL)
              a3.n128_u64[0] = v42 - 0x2000000000000;
            *(_QWORD *)(v45 + i) = a3.n128_u64[0];
LABEL_58:
            if (*(_DWORD *)(v45 - 8) <= v41)
              *(_DWORD *)(v45 - 8) = v13;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v64 = *(_QWORD *)(v45 + i + 16);
            *(_QWORD *)(v45 + i + 16) = v42;
            if (v42
              && (v42 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, SlowCase);
            }
            v9 = &jpt_198797B4C;
            if (v64)
              goto LABEL_48;
            ++*(_DWORD *)(v45 + 12);
            goto LABEL_58;
          default:
            __break(0xC471u);
            JUMPOUT(0x198797DE8);
        }
        goto LABEL_48;
      }
LABEL_44:
      *(_QWORD *)(v45 + i) = v42;
      if (*(_DWORD *)(v45 - 8) <= v41)
        *(_DWORD *)(v45 - 8) = v13;
      if (v42
        && (v42 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        v53 = v9;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, SlowCase);
        goto LABEL_65;
      }
LABEL_48:
      v39 -= 0x100000000;
      LODWORD(v13) = v41;
      if (!v41)
        return SlowCase;
    }
    v51 = v44 > 3 || v44 == 2;
    if (v51 && (*(_BYTE *)(SlowCase + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198797E0CLL);
    }
LABEL_64:
    v52 = (JSC::VM *)(v13 - 1);
    v53 = v9;
    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)SlowCase, a1, v52, v42, 0, 0, a8, a9, (int32x4_t)a3);
LABEL_65:
    v9 = v53;
    goto LABEL_48;
  }
  return SlowCase;
}

uint64_t operationNewFunction(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  int *v29;
  int *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t SlowCase;
  uint64_t vars0;

  v9 = (uint64_t)a2;
  v11 = (uint64_t *)(a1 + 38288);
  *(_QWORD *)(a1 + 40) = vars0;
  v12 = *(int **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v13 = *(_QWORD *)(a3 + 88);
  v14 = *(_QWORD *)(v13 + 16);
  if (*(_BYTE *)(v13 + 50) == 6)
  {
    v29 = v12 + 239;
    v30 = v12 + 236;
    if ((int)v14 < 0)
      v18 = v30;
    else
      v18 = v29;
  }
  else
  {
    v15 = v12 + 240;
    if ((int)v14 < 0)
      v15 = v12 + 237;
    v16 = v12 + 241;
    v17 = v12 + 238;
    if ((int)v14 < 0)
      v18 = v17;
    else
      v18 = v16;
    if ((*(_BYTE *)(a3 + 68) & 1) == 0)
      v18 = v15;
  }
  v19 = *v18;
  if (v19)
    v20 = 16 * (v19 & 0xFFFFFFFE);
  else
    v20 = 0;
  v21 = *v11;
  if ((unint64_t)*v11 < *(_QWORD *)(a1 + 38296))
    goto LABEL_13;
  v21 = *(_QWORD *)(a1 + 38304);
  if ((v21 & 1) == 0)
  {
    v31 = *(_QWORD *)(v21 + 8) ^ *(_QWORD *)(a1 + 38312);
    *(_QWORD *)(a1 + 38296) = v21 + HIDWORD(v31);
    *(_QWORD *)(a1 + 38304) = v21 + (int)v31;
LABEL_13:
    *v11 = v21 + 32;
    goto LABEL_14;
  }
  v33 = v20;
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a2, v20, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0);
  v20 = v33;
  v9 = (uint64_t)a2;
  v21 = SlowCase;
LABEL_14:
  *(_DWORD *)v21 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v21, a1, v9, v20);
  *(_QWORD *)(v21 + 24) = a3;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a3 + 112);
  if ((v26 & 1) != 0)
    v27 = (v26 >> 1) & 3;
  else
    v27 = *(unsigned __int8 *)(v26 + 4);
  if (v27 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow((uint64_t *)(a3 + 112), (JSC::VM *)a1, (JSC::JSCell *)a3, v21, (uint64_t)"Allocating a function", v22, v23, v24, v25);
  return v21;
}

JSC::JSCell *operationNewFunctionWithInvalidatedReallocationWatchpoint(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  unint64_t SlowCase;
  JSC::JSCell *result;
  int *v23;
  int *v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t vars0;

  v9 = (uint64_t)a2;
  v11 = (unint64_t *)(a1 + 38288);
  *(_QWORD *)(a1 + 40) = vars0;
  v12 = *(int **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v13 = *(_QWORD *)(a3 + 88);
  v14 = *(_QWORD *)(v13 + 16);
  if (*(_BYTE *)(v13 + 50) == 6)
  {
    v23 = v12 + 239;
    v24 = v12 + 236;
    if ((int)v14 < 0)
      v18 = v24;
    else
      v18 = v23;
  }
  else
  {
    v15 = v12 + 240;
    if ((int)v14 < 0)
      v15 = v12 + 237;
    v16 = v12 + 241;
    v17 = v12 + 238;
    if ((int)v14 < 0)
      v18 = v17;
    else
      v18 = v16;
    if ((*(_BYTE *)(a3 + 68) & 1) == 0)
      v18 = v15;
  }
  v19 = *v18;
  if (v19)
    v20 = 16 * (v19 & 0xFFFFFFFE);
  else
    v20 = 0;
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_13;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v25);
    v11[2] = SlowCase + (int)v25;
LABEL_13:
    *v11 = SlowCase + 32;
    goto LABEL_14;
  }
  v27 = v20;
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a2, v20, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0, v28, v29, v30);
  v20 = v27;
  v9 = (uint64_t)a2;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::JSCallee::JSCallee((JSC::JSCell *)SlowCase, a1, v9, v20);
  *((_QWORD *)result + 3) = a3;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t operationNewGeneratorFunction(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28) + 988);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSGeneratorFunction::create(a1, a3, (uint64_t)a2, v9, a5, a6, a7, a8);
}

JSC::JSCell *operationNewGeneratorFunctionWithInvalidatedReallocationWatchpoint(uint64_t a1, _DWORD *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  return JSC::JSGeneratorFunction::createWithInvalidatedReallocationWatchpoint(a1, a3, a2, a4, a5, a6, a7, a8);
}

uint64_t operationNewAsyncFunction(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  return JSC::JSAsyncFunction::create(a1, a3, a2, a4, a5, a6, a7, a8);
}

JSC::JSCell *operationNewAsyncFunctionWithInvalidatedReallocationWatchpoint(uint64_t a1, _DWORD *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  return JSC::JSAsyncFunction::createWithInvalidatedReallocationWatchpoint(a1, a3, a2, a4, a5, a6, a7, a8);
}

JSC::JSFunction *operationNewAsyncGeneratorFunction(JSC::VM *a1, _DWORD *a2, JSC::FunctionExecutable *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSAsyncGeneratorFunction::create(a1, a3, a2, a4, a5, a6, a7, a8);
}

JSC::JSCell *operationNewAsyncGeneratorFunctionWithInvalidatedReallocationWatchpoint(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28) + 984);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSAsyncGeneratorFunction::createImpl(a1, a3, (uint64_t)a2, v9, a5, a6, a7, a8);
}

uint64_t operationNewObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t SlowCase;
  JSC::VM *v19;
  unint64_t v20;
  uint64_t Slow;
  JSC::VM *v22;
  uint64_t vars0;

  v8 = a2;
  *(_QWORD *)(a1 + 40) = vars0;
  v10 = (JSC::VM *)(8 * *(unsigned __int8 *)(a2 + 14));
  v11 = *(_QWORD *)(a1 + ((((unint64_t)v10 + 31) >> 1) & 0x7F8) + 15024);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    v13 = *(_QWORD *)(v11 + 24);
    if (v13 >= *(_QWORD *)(v11 + 32))
    {
      v13 = *(_QWORD *)(v11 + 40);
      if ((v13 & 1) != 0)
      {
        v22 = v10;
        v17 = v8;
        JSC::sanitizeStackForVM((JSC *)a1, v10, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, a1 + 192, v12, 0, 0);
        v8 = v17;
        v10 = v22;
        v13 = SlowCase;
        goto LABEL_4;
      }
      v16 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = v13 + HIDWORD(v16);
      *(_QWORD *)(v11 + 40) = v13 + (int)v16;
    }
    *(_QWORD *)(v11 + 24) = v13 + v12;
  }
  else
  {
    v19 = v10;
    v20 = v8;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(a1 + 14936, (JSC *)a1, ((_WORD)v10 + 31) & 0xFF0, 0, a5, a6, a7, a8);
    v8 = v20;
    v10 = v19;
    v13 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v13 = 0;
  v14 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v13 = v8 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  bzero((void *)(v13 + 16), (size_t)v10);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return v13;
}

unint64_t operationNewPromise(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  uint64_t v19;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a1 + 38992);
  if (v8 < *(_QWORD *)(a1 + 39000))
    goto LABEL_2;
  v8 = *(_QWORD *)(a1 + 39008);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *(_QWORD *)(a1 + 39016);
    *(_QWORD *)(a1 + 39000) = v8 + HIDWORD(v11);
    *(_QWORD *)(a1 + 39008) = v8 + (int)v11;
LABEL_2:
    *(_QWORD *)(a1 + 38992) = v8 + 32;
    goto LABEL_3;
  }
  v12 = a1 + 38968;
  v13 = a1 + 192;
  v19 = a1;
  v14 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, v13, 32, 0, 0, v15, v16, v17);
  a2 = (unint64_t)v14;
  v8 = SlowCase;
  a1 = v19;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v8 = a2 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_OWORD *)(v8 + 16) = xmmword_19914EFB0;
  return v8;
}

unint64_t operationNewInternalPromise(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  uint64_t v19;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a1 + 38992);
  if (v8 < *(_QWORD *)(a1 + 39000))
    goto LABEL_2;
  v8 = *(_QWORD *)(a1 + 39008);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *(_QWORD *)(a1 + 39016);
    *(_QWORD *)(a1 + 39000) = v8 + HIDWORD(v11);
    *(_QWORD *)(a1 + 39008) = v8 + (int)v11;
LABEL_2:
    *(_QWORD *)(a1 + 38992) = v8 + 32;
    goto LABEL_3;
  }
  v12 = a1 + 38968;
  v13 = a1 + 192;
  v19 = a1;
  v14 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, v13, 32, 0, 0, v15, v16, v17);
  a2 = (unint64_t)v14;
  v8 = SlowCase;
  a1 = v19;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v8 = a2 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_OWORD *)(v8 + 16) = xmmword_19914EFB0;
  return v8;
}

double operationNewGenerator(JSC::JSGenerator *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSGenerator::create(a1, a2, a3, a4, a5, a6, a7, a8);
}

double operationNewAsyncGenerator(JSC::JSAsyncGenerator *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSAsyncGenerator::create(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationNewRegexp(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v17;
  uint64_t vars0;

  v8 = (uint64_t)a2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (uint64_t *)(v9 + 39344);
  *(_QWORD *)(v9 + 40) = vars0;
  v11 = *(_DWORD *)(a1 + 976);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  SlowCase = *v10;
  if ((unint64_t)*v10 < *(_QWORD *)(v9 + 39352))
    goto LABEL_5;
  SlowCase = *(_QWORD *)(v9 + 39360);
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 39368);
    *(_QWORD *)(v9 + 39352) = SlowCase + HIDWORD(v15);
    *(_QWORD *)(v9 + 39360) = SlowCase + (int)v15;
LABEL_5:
    *v10 = SlowCase + 32;
    goto LABEL_6;
  }
  v17 = v12;
  JSC::sanitizeStackForVM((JSC *)v9, a2, v12, (uint64_t)a2, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39320, v9 + 192, 32, 0, 0);
  v12 = v17;
  v8 = (uint64_t)a2;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = JSC::RegExpObject::RegExpObject(SlowCase, v9, v12, v8, 1);
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::dataLog<char [49],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unexpected code block in Baseline->DFG tier-up: ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [41],JSC::BytecodeIndex,char [20],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [30],unsigned int,char [17]>(uint64_t a1, JSC::BytecodeIndex *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v10, "%s", ": Entered optimize with bytecodeIndex = ");
  JSC::BytecodeIndex::dump(a2, v10);
  WTF::PrintStream::printf(v10, "%s", ", executeCounter = ");
  WTF::PrintStream::printf(v10, "%lf/%lf, %d", *(float *)(a3 + 4) + (double)*(int *)a3, (double)*(int *)(a3 + 8), *(_DWORD *)a3);
  WTF::PrintStream::printf(v10, "%s", ", optimizationDelayCounter = ");
  WTF::PrintStream::printf(v10, "%u", *a4);
  WTF::PrintStream::printf(v10, "%s", ", exitCounter = ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

void JSC::VM::logEvent<operationOptimize::$_2>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "debugger is stepping or has requests");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198798BACLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayOptimizeToDFG", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

void JSC::VM::logEvent<operationOptimize::$_3>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "should always be inlined");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198798D1CLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayOptimizeToDFG", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

void JSC::VM::logEvent<operationOptimize::$_9>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "should reoptimize now");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198798E8CLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayOptimizeToDFG", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

void JSC::VM::logEvent<operationOptimize::$_10>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "OSR failed");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198798FFCLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayOptimizeToDFG", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t operationPutGetterById(JSC::JSGlobalObject *a1, unsigned __int8 *a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, int32x2_t a10)
{
  uint64_t v11;
  unsigned int v12;
  int8x8_t v13;
  int32x2_t v14;
  JSC::JSObject *v15;
  _QWORD var30[7];

  a9.n128_u32[0] = 0;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var30[6];
  v12 = a2[5];
  var30[1] = a5;
  var30[2] = 0;
  var30[0] = 0;
  a10.i32[0] = a4 & 2;
  v13 = (int8x8_t)vdup_lane_s32(vceq_s32(a10, (int32x2_t)a9.n128_u64[0]), 0);
  v14.i32[1] = 2;
  v14.i32[0] = a4 & 4;
  a9.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v14, (int32x2_t)a9.n128_u64[0]), 0), vbsl_s8(v13, (int8x8_t)0x600000010, (int8x8_t)0x200000018), vbsl_s8(v13, (int8x8_t)0x400000014, (int8x8_t)28));
  var30[3] = a9.n128_u64[0];
  if (v12 <= 0x16)
    v15 = 0;
  else
    v15 = (JSC::JSObject *)a2;
  JSC::JSObject::defineOwnProperty(v15, a1, a3, (uint64_t)var30, 1, a6, a7, a8, a9);
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutSetterById(JSC::JSGlobalObject *a1, unsigned __int8 *a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  JSC::JSObject *v7;
  uint64_t vars0;

  v6 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v6 + 40) = vars0;
  if (a2[5] <= 0x16u)
    v7 = 0;
  else
    v7 = (JSC::JSObject *)a2;
  JSC::JSObject::putSetter(v7, a1, a3, a5, a4);
  return *(_QWORD *)(v6 + 16);
}

uint64_t operationPutGetterByVal(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, __n128 a6, int32x2_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t vars0;

  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v10 + 40) = vars0;
  JSC::putAccessorByVal(a1, a2, a3, a4, a5, 0, a9, a10, a6, a7);
  return *(_QWORD *)(v10 + 16);
}

void JSC::putAccessorByVal(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, int32x2_t a10)
{
  int v10;
  char v12;
  uint64_t v13;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int8x8_t v19;
  int32x2_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  _QWORD *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115[4];

  v10 = a6;
  v12 = a4;
  v13 = a3;
  v16 = *(_QWORD *)(a1 + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_55;
  if (*(_BYTE *)(a3 + 5) != 2)
  {
    v13 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)a1, (JSC::Structure *)2, a4, (uint64_t)a5, a6, a7, a8);
LABEL_55:
    v114 = v13;
    if (*(_DWORD *)(v16 + 80))
    {
      v96 = *(_DWORD *)(v16 + 80);
      if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v16 + 16))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 8);
        if (!v17)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      v66 = *(unsigned __int8 *)(v13 + 5);
      if (v66 == 2)
      {
LABEL_63:
        if (*(_DWORD *)(v16 + 80))
        {
          v97 = *(_DWORD *)(v16 + 80);
          if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v16 + 16))
          {
            v17 = 0;
            goto LABEL_7;
          }
        }
        v17 = *(_QWORD *)(v13 + 8);
        v76 = *(_QWORD *)(a1 + 56);
        if ((v17 & 1) == 0)
        {
          if ((*(_BYTE *)(v17 + 16) & 0x10) == 0)
          {
            v77 = *(WTF::StringImpl **)(v76 + 64768);
            if (v77 != (WTF::StringImpl *)v17)
            {
              *(_DWORD *)v17 += 2;
              *(_QWORD *)(v76 + 64768) = v17;
              if (v77)
              {
                if (*(_DWORD *)v77 == 2)
                {
                  WTF::StringImpl::~StringImpl(v77, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
                }
                else
                {
                  *(_DWORD *)v77 -= 2;
                }
              }
              v78 = *(WTF::StringImpl **)(v13 + 8);
              if (v78)
              {
                if ((*((_BYTE *)v78 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v78 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v78, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v115);
                  v78 = v115[0];
                }
              }
              v79 = *(WTF::StringImpl **)(v76 + 64776);
              *(_QWORD *)(v76 + 64776) = v78;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                {
                  WTF::StringImpl::~StringImpl(v79, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
                }
                else
                {
                  *(_DWORD *)v79 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
            {
              v80 = *(_DWORD **)(v76 + 64776);
              *v80 += 2;
              __dmb(0xAu);
              v81 = *(WTF::StringImpl **)(v13 + 8);
              *(_QWORD *)(v13 + 8) = v80;
              v115[0] = v81;
              v82 = (_QWORD *)(v76 + 808);
              v83 = *(unsigned int *)(v76 + 820);
              if ((_DWORD)v83 == *(_DWORD *)(v76 + 816))
              {
                v85 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)v115);
                v83 = *(unsigned int *)(v76 + 820);
                v84 = (WTF::StringImpl **)(*(_QWORD *)(v76 + 808) + 8 * v83);
                v81 = *v85;
              }
              else
              {
                v84 = (WTF::StringImpl **)(*v82 + 8 * v83);
                v85 = v115;
              }
              *v85 = 0;
              *v84 = v81;
              *(_DWORD *)(v76 + 820) = v83 + 1;
              v86 = v115[0];
              v115[0] = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                {
                  WTF::StringImpl::~StringImpl(v86, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                }
                else
                {
                  *(_DWORD *)v86 -= 2;
                }
              }
            }
            v17 = *(_QWORD *)(v76 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v13, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v76 + 80))
        {
          v87 = *(_DWORD *)(v76 + 80);
          if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v76 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v76 + 16))
            goto LABEL_48;
        }
        goto LABEL_17;
      }
      if (v66 == 4)
      {
        v17 = *(_QWORD *)(v13 + 8);
        v67 = *(_DWORD *)v17;
        *(_DWORD *)v17 += 4;
        v18 = v67 + 2;
        if (v18)
          goto LABEL_6;
        v29 = (WTF::StringImpl *)v17;
LABEL_61:
        WTF::StringImpl::~StringImpl(v29, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        goto LABEL_7;
      }
    }
    v13 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v114, (JSC::JSGlobalObject *)a1, 1);
    goto LABEL_63;
  }
  v17 = *(_QWORD *)(a3 + 8);
  if ((v17 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v16 + 80))
    {
      v65 = *(_DWORD *)(v16 + 80);
      if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v16 + 16))
      {
LABEL_48:
        v17 = 0;
        v29 = v115[0];
        v115[0] = 0;
        if (!v29)
          goto LABEL_7;
LABEL_19:
        if (*(_DWORD *)v29 != 2)
        {
          *(_DWORD *)v29 -= 2;
          goto LABEL_7;
        }
        goto LABEL_61;
      }
    }
LABEL_17:
    v17 = (unint64_t)v115[0];
    if (!v115[0])
      goto LABEL_7;
    *(_DWORD *)v115[0] += 2;
    v115[0] = 0;
    v29 = (WTF::StringImpl *)v17;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v17 + 16) & 0x10) == 0)
  {
    v30 = *(WTF::StringImpl **)(v16 + 64768);
    if (v30 != (WTF::StringImpl *)v17)
    {
      *(_DWORD *)v17 += 2;
      *(_QWORD *)(v16 + 64768) = v17;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      v31 = *(WTF::StringImpl **)(v13 + 8);
      if (v31)
      {
        if ((*((_BYTE *)v31 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v31 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v31, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v115);
          v31 = v115[0];
        }
      }
      v32 = *(WTF::StringImpl **)(v16 + 64776);
      *(_QWORD *)(v16 + 64776) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::~StringImpl(v32, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
    {
      v33 = *(_DWORD **)(v16 + 64776);
      *v33 += 2;
      __dmb(0xAu);
      v34 = *(WTF::StringImpl **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v33;
      v115[0] = v34;
      v35 = (_QWORD *)(v16 + 808);
      v36 = *(unsigned int *)(v16 + 820);
      if ((_DWORD)v36 == *(_DWORD *)(v16 + 816))
      {
        v38 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v115);
        v36 = *(unsigned int *)(v16 + 820);
        v37 = (WTF::StringImpl **)(*(_QWORD *)(v16 + 808) + 8 * v36);
        v34 = *v38;
      }
      else
      {
        v37 = (WTF::StringImpl **)(*v35 + 8 * v36);
        v38 = v115;
      }
      *v38 = 0;
      *v37 = v34;
      *(_DWORD *)(v16 + 820) = v36 + 1;
      v39 = v115[0];
      v115[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    v17 = *(_QWORD *)(v16 + 64776);
  }
LABEL_5:
  v18 = *(_DWORD *)v17 + 2;
LABEL_6:
  *(_DWORD *)v17 = v18;
LABEL_7:
  if (!*(_DWORD *)(v16 + 80))
    goto LABEL_8;
  v48 = *(_DWORD *)(v16 + 80);
  if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_8:
    if (v10)
    {
      JSC::JSObject::putSetter(a2, (JSC::JSGlobalObject *)a1, v17, (uint64_t)a5, v12);
    }
    else
    {
      a9.n128_u32[0] = 0;
      a10.i32[0] = v12 & 2;
      v115[1] = a5;
      v115[2] = 0;
      v19 = (int8x8_t)vdup_lane_s32(vceq_s32(a10, (int32x2_t)a9.n128_u64[0]), 0);
      v115[0] = 0;
      v20.i32[1] = 2;
      v20.i32[0] = v12 & 4;
      a9.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v20, (int32x2_t)a9.n128_u64[0]), 0), vbsl_s8(v19, (int8x8_t)0x600000010, (int8x8_t)0x200000018), vbsl_s8(v19, (int8x8_t)0x400000014, (int8x8_t)28));
      v115[3] = (WTF::StringImpl *)a9.n128_u64[0];
      JSC::JSObject::defineOwnProperty(a2, (JSC::JSGlobalObject *)a1, v17, (uint64_t)v115, 1, a6, a7, a8, a9);
    }
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

uint64_t operationPutSetterByVal(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, __n128 a6, int32x2_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t vars0;

  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v10 + 40) = vars0;
  JSC::putAccessorByVal(a1, a2, a3, a4, a5, 1uLL, a9, a10, a6, a7);
  return *(_QWORD *)(v10 + 16);
}

uint64_t operationPutGetterSetter(JSC::VM *a1, uint64_t a2, const JSC::PropertyTable *a3, uint64_t a4, JSC::JSGlobalObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSObject *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v26;
  uint64_t vars0;

  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = vars0;
  if (((unint64_t)a5 & 0xFFFE000000000002) != 0)
  {
    v13 = 0;
  }
  else if (*((unsigned __int8 *)a5 + 5) <= 0x16u)
  {
    v13 = 0;
  }
  else
  {
    v13 = a5;
  }
  if ((a6 & 0xFFFE000000000002) != 0)
  {
    v14 = 0;
  }
  else if (*(unsigned __int8 *)(a6 + 5) <= 0x16u)
  {
    v14 = 0;
  }
  else
  {
    v14 = (JSC::JSObject *)a6;
  }
  v15 = JSC::GetterSetter::create((JSC::GetterSetter *)v12, a1, v13, v14, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 5) != 26
    || (v26 = v15,
        JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v12, a1, a3, v16, v17, v18, v19, v20), v15 = v26, !*(_DWORD *)(v12 + 80))|| (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v22, v23, v26, v24, v17, v18,
                                            v19),
        v15 = v26,
        !hasExceptionsAfterHandlingTraps))
  {
    JSC::JSObject::putDirectAccessor((int *)a2, (uint64_t)a1, (unint64_t)a3, v15, a4, v20, v17, v18, v19);
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationInstanceOfCustom(JSC::JSGlobalObject *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSObject::hasInstance(a3, a1, a2, a4, a5, a6, a7, a8);
}

uint64_t operationIteratorNextTryFast(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  WTF::AtomStringImpl *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v79;
  char v80;
  WTF::StringImpl *v81[7];
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int *var58[12];

  v8 = *((_QWORD *)a1 + 7);
  *(int **)(v8 + 40) = var58[11];
  *(_DWORD *)(a4 + 112) = *(_DWORD *)a3;
  *(_BYTE *)(a4 + 124) |= 2u;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9 >= 0xFFFE000000000000)
    v10 = (int)v9;
  else
    v10 = (uint64_t)COERCE_DOUBLE(v9 - 0x2000000000000);
  if (v10 == -1
    || ((v11 = a3, v13 = *(_BYTE *)(a3 + 4), (v13 & 0xE) == 0)
      ? (v14 = 0)
      : (v14 = *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8)),
        v10 >= v14))
  {
    *(_QWORD *)(a2 + 16) = 0xFFFE0000FFFFFFFFLL;
    return 7;
  }
  v15 = COERCE__INT64((double)(v10 + 1)) + 0x2000000000000;
  if (!((unint64_t)(v10 + 2147483649) >> 32))
    v15 = (v10 + 1) | 0xFFFE000000000000;
  *(_QWORD *)(a2 + 16) = v15;
  if (v10 == 0xFFFFFFFFLL)
  {
    JSC::Identifier::from((uint64_t **)v8, 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)v81);
    JSC::JSObject::get((unsigned int *)v11, (uint64_t)a1, (unint64_t)v81[0], v28, v29, v30, v31, v32);
    v34 = v81[0];
    v81[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v33, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(a3 + 8);
  v17 = v13 & 0xF;
  if ((v17 - 8) >= 2)
  {
    switch(v17)
    {
      case 0:
      case 1:
        switch(*(_BYTE *)(a3 + 5))
        {
          case '\'':
          case '(':
            if ((*(_BYTE *)(a3 + 40) & 7u) <= 2)
              goto LABEL_46;
            v57 = *(_QWORD *)(v16 - 8);
            if (*(_BYTE *)(v57 + 64) && (v77 = *(_QWORD *)(v57 + 32)) != 0)
              v58 = *(_QWORD *)(v77 + 32);
            else
              v58 = *(_QWORD *)(v57 + 48);
            v45 = *(_QWORD *)(a3 + 24);
            v59 = *(_QWORD *)(a3 + 32);
            if (v45 + v59 > v58)
              goto LABEL_18;
            if ((*(_BYTE *)(a3 + 40) & 1) == 0)
              goto LABEL_100;
            v27 = v58 - v59;
            goto LABEL_47;
          case ')':
            if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a3, v10))
              goto LABEL_18;
            goto LABEL_48;
          case '*':
          case '+':
            if ((*(_BYTE *)(a3 + 40) & 7u) <= 2)
              goto LABEL_46;
            v42 = *(_QWORD *)(v16 - 8);
            if (*(_BYTE *)(v42 + 64) && (v75 = *(_QWORD *)(v42 + 32)) != 0)
              v43 = *(_QWORD *)(v75 + 32);
            else
              v43 = *(_QWORD *)(v42 + 48);
            v45 = *(_QWORD *)(a3 + 24);
            v44 = *(_QWORD *)(a3 + 32);
            if (v44 + 2 * v45 > v43)
              goto LABEL_18;
            if ((*(_BYTE *)(a3 + 40) & 1) == 0)
              goto LABEL_100;
            if (v10 >= (v43 - v44) >> 1)
              goto LABEL_18;
            goto LABEL_48;
          case ',':
          case '-':
          case '.':
            if ((*(_BYTE *)(a3 + 40) & 7u) <= 2)
              goto LABEL_46;
            v60 = *(_QWORD *)(v16 - 8);
            if (*(_BYTE *)(v60 + 64) && (v74 = *(_QWORD *)(v60 + 32)) != 0)
              v61 = *(_QWORD *)(v74 + 32);
            else
              v61 = *(_QWORD *)(v60 + 48);
            v45 = *(_QWORD *)(a3 + 24);
            v62 = *(_QWORD *)(a3 + 32);
            if (v62 + 4 * v45 > v61)
              goto LABEL_18;
            if ((*(_BYTE *)(a3 + 40) & 1) == 0)
              goto LABEL_100;
            if (v10 >= (v61 - v62) >> 2)
              goto LABEL_18;
            goto LABEL_48;
          case '/':
            if ((*(_BYTE *)(a3 + 40) & 7u) <= 2)
            {
LABEL_46:
              v27 = *(_QWORD *)(a3 + 24);
LABEL_47:
              if (v27 <= v10)
                goto LABEL_18;
            }
            else
            {
              v54 = *(_QWORD *)(v16 - 8);
              if (*(_BYTE *)(v54 + 64) && (v76 = *(_QWORD *)(v54 + 32)) != 0)
                v55 = *(_QWORD *)(v76 + 32);
              else
                v55 = *(_QWORD *)(v54 + 48);
              v45 = *(_QWORD *)(a3 + 24);
              v56 = *(_QWORD *)(a3 + 32);
              if (v56 + 8 * v45 > v55)
                goto LABEL_18;
              if ((*(_BYTE *)(a3 + 40) & 1) != 0)
              {
                if (v10 >= (v55 - v56) >> 3)
                  goto LABEL_18;
              }
              else
              {
LABEL_100:
                if (v45 <= v10)
                  goto LABEL_18;
              }
            }
LABEL_48:
            if (JSC::JSObject::getIndexQuicklyForTypedArray(v11, v10, 0))
              goto LABEL_14;
            break;
          default:
            goto LABEL_18;
        }
        goto LABEL_18;
      case 3:
        goto LABEL_18;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        if (*(_DWORD *)(v16 - 8) <= v10
          || *(_QWORD *)(v16 + 8 * v10) == 0xFFFE000000000000)
        {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 10:
      case 11:
      case 12:
      case 13:
        if (*(_DWORD *)(v16 - 4) <= v10 || !*(_QWORD *)(v16 + 8 * v10 + 16))
          goto LABEL_18;
        goto LABEL_14;
      default:
        __break(0xC471u);
        JUMPOUT(0x198799E64);
    }
  }
  if (*(_DWORD *)(v16 - 8) > v10 && *(_QWORD *)(v16 + 8 * v10))
    goto LABEL_14;
LABEL_18:
  v19 = *((_QWORD *)a1 + 7);
  v81[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
  LOBYTE(v82) = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  memset(&v81[4], 0, 21);
  v81[3] = (WTF::StringImpl *)v11;
  while (1)
  {
    v20 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
    v21 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(v20 + 0x4C)
                                                                                                 + 0x70))(v11, a1, v10, v81);
    if (*(_DWORD *)(v19 + 80))
      break;
    if ((v21 & 1) != 0)
    {
      if (*(_DWORD *)(v19 + 80))
      {
        LOBYTE(v25) = 1;
        goto LABEL_66;
      }
      goto LABEL_34;
    }
LABEL_21:
    if (BYTE2(v81[6]) == 3)
    {
      if (BYTE4(v81[6]))
        goto LABEL_29;
      v23 = *(unsigned __int8 *)(v11 + 5);
      if (v23 != 61)
      {
LABEL_23:
        if ((v23 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v22, a3, a4, a5, a6, a7, a8) <= v10)
        {
          goto LABEL_29;
        }
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(v11 + 5);
      if (v23 != 61)
        goto LABEL_23;
      if (BYTE2(v81[6]) == 1)
        goto LABEL_29;
    }
    if ((*(_WORD *)(v20 + 12) & 0x800) == 0 || BYTE2(v81[6]) == 3)
    {
      v24 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
      if (!v24)
        v24 = *(_QWORD *)(v11 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v79 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0xB0))(v11, a1);
      }
      else
      {
        v79 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v79)
          v79 = *(_QWORD *)(v11 + 16);
      }
      if (*(_DWORD *)(v19 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19, v22, a3, a4, a5, a6, a7, a8);
        v24 = v79;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_29;
      }
      else
      {
        v24 = v79;
      }
    }
    if ((v24 & 0xFFFE000000000002) == 0)
    {
      v11 = v24;
      if (*(unsigned __int8 *)(v24 + 5) > 0x16u)
        continue;
    }
LABEL_29:
    v25 = 0;
    goto LABEL_30;
  }
  v36 = *(_DWORD *)(v19 + 80);
  if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
  {
    v80 = v21;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v21 = v80;
  }
  v37 = *(_QWORD *)(v19 + 16);
  v38 = v37 == 0;
  if (v37)
    v39 = 1;
  else
    v39 = v21;
  if ((v39 & 1) == 0)
    goto LABEL_21;
  v25 = v38;
LABEL_30:
  if (!*(_DWORD *)(v19 + 80))
  {
    if (!v25)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_66:
  v40 = *(_DWORD *)(v19 + 80);
  if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v19 + 16))
    v41 = 0;
  else
    v41 = v25;
  if ((v41 & 1) != 0)
  {
LABEL_34:
    if (BYTE1(v81[6]) != 1)
    {
      if (BYTE1(v81[6]) == 2)
      {
        JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v81, a1, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v63 = (uint64_t **)*((_QWORD *)a1 + 7);
        JSC::Identifier::from(v63, v10, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, var58);
        JSC::PropertySlot::customGetter((uint64_t)v81, (JSC::VM *)v63, (WTF::StringImpl *)var58[0]);
        v65 = (WTF::StringImpl *)var58[0];
        var58[0] = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
          {
            WTF::StringImpl::~StringImpl(v65, v64, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
          }
          else
          {
            *(_DWORD *)v65 -= 2;
          }
        }
      }
    }
  }
LABEL_35:
  if (v83)
  {
    v26 = *(_DWORD *)(v82 + 4);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198799CD4);
    }
    *(_DWORD *)(v82 + 4) = v26 - 1;
  }
  if (!*(_DWORD *)(v8 + 80))
    return 6;
LABEL_14:
  v35 = *(_DWORD *)(v8 + 80);
  if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v8 + 16))
    return 0;
  else
    return 6;
}

uint64_t operationGetByValGaveUp(unint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t IndexQuicklyForTypedArray;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  BOOL v135;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  _QWORD *v142;
  uint64_t v143;
  WTF::StringImpl **v144;
  WTF::StringImpl **v145;
  WTF::StringImpl *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int8x16_t **v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _WORD *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  JSC::VM *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned __int16 *v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  JSC::VM *v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  char v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  unsigned __int8 *v227;
  int v228;
  BOOL isMappedArgument;
  JSC::VM *v230;
  unint64_t NotAnObjectError;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v238;
  const unsigned __int8 *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  unsigned int v243;
  JSC::VM *v244;
  uint64_t v245;
  char v246;
  int v247;
  uint64_t v248;
  int v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  _QWORD *v255;
  uint64_t v256;
  WTF::StringImpl **v257;
  WTF::StringImpl **v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  int v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  int v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  _DWORD *v303;
  WTF::StringImpl *Index;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t **v308;
  WTF::AtomStringImpl *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  WTF::StringImpl *v316;
  unint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  _WORD *v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  unsigned __int16 *v332;
  uint64_t v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t v336;
  unsigned __int8 *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  unsigned int v345;
  uint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  unint64_t v350;
  WTF::StringImpl *v351;
  uint64_t v352;
  unint64_t v353;
  _DWORD *v354;
  _DWORD *v355;
  _QWORD v356[2];
  uint64_t v357;
  char v358;
  int8x16_t **v359;
  uint64_t v360;
  WTF::StringImpl *v361[2];
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  _QWORD v365[2];
  uint64_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t vars0;

  v9 = a4;
  v10 = a2;
  v11 = this;
  v370 = *MEMORY[0x1E0C80C00];
  v12 = *(JSC::JSGlobalObject **)(a3 + 56);
  v13 = vars0;
  *(_QWORD *)(*((_QWORD *)v12 + 7) + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v350 = this;
  v14 = *((_QWORD *)v12 + 7);
  if (((a2 | this) & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(a2 + 5) != 2)
      goto LABEL_21;
    v15 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if (((*(_DWORD *)(v15 + 0x10) | *(unsigned __int8 *)(v15 + 0xA)) & 8) != 0)
      goto LABEL_21;
    v16 = *(WTF::StringImpl **)(a2 + 8);
    if ((v16 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a2, v12);
    }
    else
    {
      if ((*((_BYTE *)v16 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v16 += 2;
LABEL_7:
        if (*(_DWORD *)(v14 + 80))
        {
          v175 = *(_DWORD *)(v14 + 80);
          if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
          {
            IndexQuicklyForTypedArray = 0;
            goto LABEL_34;
          }
        }
        if (v16)
        {
          if (((unint64_t)v16 >> 4)
            && (((unint64_t)v16 >> 4) & ~*(_DWORD *)(v15 + 32)) == 0)
          {
            v17 = *(_QWORD *)(v15 + 88);
            if (v17
              || (v28 = *(_QWORD *)(v15 + 64)) != 0
              && (*(_BYTE *)(v28 + 5) == 1 || *(_DWORD *)(v28 + 80) >= 2u)
              && (JSC::Structure::materializePropertyTable((JSC::Structure *)v15, (JSC::VM *)v14, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v17))
            {
              if (*(_DWORD *)(v17 + 24))
              {
                v18 = *(_QWORD *)(v17 + 16);
                v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
                v20 = *(unsigned int *)(v17 + 8);
                v21 = *((_DWORD *)v16 + 4);
                if ((v18 & 1) != 0)
                {
                  if ((v21 & 0x20) != 0)
                    v21 = *((_DWORD *)v16 + 8);
                  v22 = *(_DWORD *)(v17 + 12);
                  v23 = (v21 >> 8) & *(_QWORD *)&v22;
                  v24 = *(unsigned __int8 *)(v19 + v23);
                  if (*(_BYTE *)(v19 + v23))
                  {
                    v25 = v19 + v20;
                    v26 = 1;
                    while (1)
                    {
                      v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
                      if (v16 == (WTF::StringImpl *)(v27 & 0xFFFFFFFFFFFFLL))
                        break;
                      v23 = ((_DWORD)v23 + v26) & v22;
                      v24 = *(unsigned __int8 *)(v19 + v23);
                      ++v26;
                      if (!*(_BYTE *)(v19 + v23))
                        goto LABEL_48;
                    }
                    v29 = HIBYTE(v27);
                    goto LABEL_30;
                  }
                }
                else
                {
                  if ((v21 & 0x20) != 0)
                    v21 = *((_DWORD *)v16 + 8);
                  v33 = *(_DWORD *)(v17 + 12);
                  v34 = v33 & (v21 >> 8);
                  v35 = *(_DWORD *)(v19 + 4 * v34);
                  if (v35)
                  {
                    v36 = v19 + 4 * v20;
                    v37 = 1;
                    while (1)
                    {
                      v38 = (v35 - 1);
                      if (v16 == *(WTF::StringImpl **)(v36 + 16 * v38))
                        break;
                      v34 = (v34 + v37) & v33;
                      v35 = *(_DWORD *)(v19 + 4 * v34);
                      ++v37;
                      if (!v35)
                        goto LABEL_48;
                    }
                    v29 = *(unsigned int *)(v36 + 16 * v38 + 8);
LABEL_30:
                    if ((_DWORD)v29 != -1)
                    {
                      if ((int)v29 <= 63)
                      {
                        v30 = v11 + 16;
                        v31 = v29 << 32;
                      }
                      else
                      {
                        v30 = *(_QWORD *)(v11 + 8) - 8;
                        v31 = 0x3F00000000 - (v29 << 32);
                      }
                      IndexQuicklyForTypedArray = *(_QWORD *)(v30 + (v31 >> 29));
                      if (IndexQuicklyForTypedArray)
                      {
LABEL_34:
                        if (v16)
                        {
                          if (*(_DWORD *)v16 == 2)
                          {
                            v109 = v16;
                            goto LABEL_178;
                          }
                          *(_DWORD *)v16 -= 2;
                        }
                        return IndexQuicklyForTypedArray;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_48:
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
          goto LABEL_50;
        }
LABEL_21:
        if (!(v10 >> 49))
          goto LABEL_80;
        goto LABEL_193;
      }
      WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a2 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v361);
    }
    v16 = v361[0];
    goto LABEL_7;
  }
LABEL_50:
  if (v10 >= 0xFFFE000000000000 && (v10 & 0x80000000) == 0)
  {
    v39 = v10;
    goto LABEL_53;
  }
  if (v10 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v10 - 0x2000000000000;
    v39 = *(double *)a9.i64;
    if ((_DWORD)v39 != -1 && *(double *)a9.i64 == (double)v39)
    {
LABEL_53:
      if ((v11 & 0xFFFE000000000002) != 0)
        goto LABEL_65;
      v40 = *(unsigned __int8 *)(v11 + 5);
      if (v40 == 2)
      {
        v151 = *(_QWORD *)(v11 + 8);
        if ((v151 & 1) != 0)
          v152 = (_DWORD *)(v11 + 16);
        else
          v152 = (_DWORD *)(v151 + 4);
        if (*v152 > v39)
          return JSC::JSString::getIndex((JSC::JSString *)v11, v12, v39, a4, a5, a6, a7, a8, a9);
LABEL_63:
        if (v9)
LABEL_64:
          *(_DWORD *)(v9 + 4) |= 2u;
LABEL_65:
        a9.i64[0] = 0xFFFFFFFF00000000;
        v362 = 0xFFFFFFFF00000000;
        LOBYTE(v366) = 0;
        v367 = 0;
        v368 = 0;
        v369 = 0;
        v364 = 0;
        memset(v365, 0, 13);
        v363 = v11;
        if ((v11 & 0xFFFE000000000002) == 0)
        {
          v43 = *((_QWORD *)v12 + 7);
          v44 = *(unsigned __int8 *)(v11 + 5);
          if (v44 > 0x16)
          {
LABEL_67:
            IndexQuicklyForTypedArray = 10;
            while (1)
            {
              v45 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
              v47 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v45 + 0x4C) + 0x70))(v11, v12, v39, v361);
              if (*(_DWORD *)(v43 + 80))
              {
                v181 = *(_DWORD *)(v43 + 80);
                if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v43 + 16))
                {
LABEL_305:
                  IndexQuicklyForTypedArray = 10;
                  goto LABEL_571;
                }
              }
              if ((v47 & 1) != 0)
                goto LABEL_569;
              if (BYTE2(v365[1]) == 3)
              {
                if (BYTE4(v365[1]))
                  goto LABEL_305;
                v48 = *(unsigned __int8 *)(v11 + 5);
                if (v48 == 61)
                  goto LABEL_73;
              }
              else
              {
                v48 = *(unsigned __int8 *)(v11 + 5);
                if (v48 == 61)
                {
                  if (BYTE2(v365[1]) == 1)
                    goto LABEL_305;
                  goto LABEL_73;
                }
              }
              if ((v48 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v46, a3, a4, a5, a6, a7, a8) <= v39)
              {
                goto LABEL_305;
              }
LABEL_73:
              if ((*(_WORD *)(v45 + 12) & 0x800) == 0 || BYTE2(v365[1]) == 3)
              {
                v49 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                if (!v49)
                  v49 = *(_QWORD *)(v11 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v49 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0xB0))(v11, v12);
                }
                else
                {
                  v49 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v49)
                    v49 = *(_QWORD *)(v11 + 16);
                }
                if (*(_DWORD *)(v43 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43, v46, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_305;
                }
              }
              if ((v49 & 0xFFFE000000000002) == 0)
              {
                v11 = v49;
                if (*(unsigned __int8 *)(v49 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_571;
            }
          }
          if (v44 == 2)
          {
            v302 = *(_QWORD *)(v11 + 8);
            if ((v302 & 1) != 0)
              v303 = (_DWORD *)(v11 + 16);
            else
              v303 = (_DWORD *)(v302 + 4);
            if (*v303 <= v39
              || (Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v11, v12, v39, a4, a5, a6, a7, a8, a9), *(_DWORD *)(v43 + 80))&& JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43, a2, a3, a4, a5, a6, a7, a8))
            {
              v305 = 0;
            }
            else
            {
              v361[0] = Index;
              LODWORD(v362) = 10;
              v364 = 0;
              v305 = 1;
              BYTE1(v365[1]) = 1;
            }
            if (*(_DWORD *)(v43 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43, a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_656;
            }
            if (v305)
            {
LABEL_569:
              if (BYTE1(v365[1]) == 1)
              {
                IndexQuicklyForTypedArray = (uint64_t)v361[0];
              }
              else if (BYTE1(v365[1]) == 2)
              {
                IndexQuicklyForTypedArray = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v361, v12, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                v308 = (uint64_t **)*((_QWORD *)v12 + 7);
                JSC::Identifier::from(v308, v39, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v351);
                IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)v361, (JSC::VM *)v308, v351);
                v316 = v351;
                v351 = 0;
                if (v316)
                {
                  if (*(_DWORD *)v316 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v316, v309, v310, v311, v312, v313, v314, v315);
                    WTF::fastFree(v317, v318, v319, v320, v321, v322, v323, v324);
                  }
                  else
                  {
                    *(_DWORD *)v316 -= 2;
                  }
                }
              }
LABEL_571:
              if (v367)
              {
                v307 = *(_DWORD *)(v366 + 4);
                if (!v307)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19879BA90);
                }
                *(_DWORD *)(v366 + 4) = v307 - 1;
              }
              return IndexQuicklyForTypedArray;
            }
          }
        }
        v306 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v350, (unint64_t)v12);
        if (v306)
        {
          v11 = v306;
          v43 = *((_QWORD *)v12 + 7);
          goto LABEL_67;
        }
LABEL_656:
        IndexQuicklyForTypedArray = 0;
        goto LABEL_571;
      }
      if (v40 < 0x17)
        goto LABEL_65;
      v41 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 < 2)
      {
LABEL_57:
        if (*(_DWORD *)(v41 - 8) > v39)
        {
          IndexQuicklyForTypedArray = *(_QWORD *)(v41 + 8 * v39);
LABEL_59:
          if (IndexQuicklyForTypedArray)
            return IndexQuicklyForTypedArray;
        }
LABEL_60:
        if ((*(_BYTE *)(v11 + 4) & 0xF) == 9 && v39 < *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8))
        {
          v102 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
          v103 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
          v104 = (v103 & 0x10) != 0 ? ((v103 & 0xE) + 10) >> 1 : (v103 >> 1) & 7;
          v105 = *(_DWORD *)(v102 + 4 * v104 + 852);
          v106 = v105 ? 16 * (v105 & 0xFFFFFFFE) : 0;
          if (v106 == 16 * (*(_DWORD *)v11 & 0xFFFFFFFE))
          {
            v107 = *(_QWORD *)(v102 + 2304);
            v108 = (v107 & 1) != 0 ? (v107 >> 1) & 3 : *(unsigned __int8 *)(v107 + 4);
            if (v108 != 2)
              goto LABEL_65;
          }
        }
        v42 = *(unsigned __int8 *)(v11 + 5);
        if (v42 == 33)
        {
          if (*(_DWORD *)(v11 + 32) > v39)
          {
            v153 = *(_QWORD *)(v11 + 40);
            if (!v153)
              goto LABEL_65;
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            {
              if (!v9 || (v153 & 0x3FFFFFFFFLL) == -qword_1ECF4C038)
                goto LABEL_65;
              goto LABEL_64;
            }
          }
        }
        else if (v42 == 34)
        {
          isMappedArgument = JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v11, v39);
          if (!v9 || isMappedArgument)
            goto LABEL_65;
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      switch(*(_BYTE *)(v11 + 4) & 0xF)
      {
        case 0:
        case 1:
          switch(*(_BYTE *)(v11 + 5))
          {
            case '\'':
            case '(':
              v88 = v39;
              if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                goto LABEL_152;
              v199 = *(_QWORD *)(v41 - 8);
              if (*(_BYTE *)(v199 + 64) && (v342 = *(_QWORD *)(v199 + 32)) != 0)
                v200 = *(_QWORD *)(v342 + 32);
              else
                v200 = *(_QWORD *)(v199 + 48);
              v188 = *(_QWORD *)(v11 + 24);
              v201 = *(_QWORD *)(v11 + 32);
              if (v188 + v201 > v200)
                goto LABEL_60;
              if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                goto LABEL_383;
              v89 = v200 - v201;
              goto LABEL_153;
            case ')':
              if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v11, v39))
                goto LABEL_60;
              goto LABEL_154;
            case '*':
            case '+':
              v88 = v39;
              if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                goto LABEL_152;
              v185 = *(_QWORD *)(v41 - 8);
              if (*(_BYTE *)(v185 + 64) && (v340 = *(_QWORD *)(v185 + 32)) != 0)
                v186 = *(_QWORD *)(v340 + 32);
              else
                v186 = *(_QWORD *)(v185 + 48);
              v188 = *(_QWORD *)(v11 + 24);
              v187 = *(_QWORD *)(v11 + 32);
              if (v187 + 2 * v188 > v186)
                goto LABEL_60;
              if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                goto LABEL_383;
              if (v39 >= (v186 - v187) >> 1)
                goto LABEL_60;
              goto LABEL_154;
            case ',':
            case '-':
            case '.':
              v88 = v39;
              if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                goto LABEL_152;
              v220 = *(_QWORD *)(v41 - 8);
              if (*(_BYTE *)(v220 + 64) && (v339 = *(_QWORD *)(v220 + 32)) != 0)
                v221 = *(_QWORD *)(v339 + 32);
              else
                v221 = *(_QWORD *)(v220 + 48);
              v188 = *(_QWORD *)(v11 + 24);
              v222 = *(_QWORD *)(v11 + 32);
              if (v222 + 4 * v188 > v221)
                goto LABEL_60;
              if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                goto LABEL_383;
              if (v39 >= (v221 - v222) >> 2)
                goto LABEL_60;
              goto LABEL_154;
            case '/':
              v88 = v39;
              if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              {
LABEL_152:
                v89 = *(_QWORD *)(v11 + 24);
LABEL_153:
                if (v89 <= v88)
                  goto LABEL_60;
              }
              else
              {
                v196 = *(_QWORD *)(v41 - 8);
                if (*(_BYTE *)(v196 + 64) && (v341 = *(_QWORD *)(v196 + 32)) != 0)
                  v197 = *(_QWORD *)(v341 + 32);
                else
                  v197 = *(_QWORD *)(v196 + 48);
                v188 = *(_QWORD *)(v11 + 24);
                v198 = *(_QWORD *)(v11 + 32);
                if (v198 + 8 * v188 > v197)
                  goto LABEL_60;
                if ((*(_BYTE *)(v11 + 40) & 1) != 0)
                {
                  if (v39 >= (v197 - v198) >> 3)
                    goto LABEL_60;
                }
                else
                {
LABEL_383:
                  if (v188 <= v88)
                    goto LABEL_60;
                }
              }
LABEL_154:
              IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v11, v39, v9);
              goto LABEL_59;
            default:
              goto LABEL_60;
          }
        case 3:
          goto LABEL_60;
        case 4:
        case 5:
          goto LABEL_57;
        case 6:
        case 7:
          if (*(_DWORD *)(v41 - 8) <= v39)
            goto LABEL_60;
          IndexQuicklyForTypedArray = *(_QWORD *)(v41 + 8 * v39) + 0x2000000000000;
          goto LABEL_59;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (*(_DWORD *)(v41 - 4) <= v39)
            goto LABEL_60;
          IndexQuicklyForTypedArray = *(_QWORD *)(v41 + 8 * v39 + 16);
          goto LABEL_59;
        default:
          __break(0xC471u);
          JUMPOUT(0x19879B374);
      }
    }
LABEL_193:
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      if (v9)
      {
        *(_DWORD *)(v9 + 4) |= 2u;
        if (v10 == 0xFFFE0000FFFFFFFFLL && v11 && (*(_BYTE *)(v11 + 5) & 0xFE) == 0x24)
        {
          v121 = *(_QWORD **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
          v122 = v121[288];
          v123 = (v122 & 1) != 0 ? (v122 >> 1) & 3 : *(unsigned __int8 *)(v122 + 4);
          if (v123 != 2)
          {
            v124 = v121[287];
            v125 = (v124 & 1) != 0 ? (v124 >> 1) & 3 : *(unsigned __int8 *)(v124 + 4);
            if (v125 != 2)
            {
              v126 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
              v127 = (v126 & 0x10) != 0 ? ((v126 & 0xE) + 10) >> 1 : (v126 >> 1) & 7;
              v128 = *((_DWORD *)v121 + v127 + 213);
              v129 = v128 ? 16 * (v128 & 0xFFFFFFFE) : 0;
              if (v129 == 16 * (*(_DWORD *)v11 & 0xFFFFFFFE))
                return 10;
              v240 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v240)
                v240 = *(_QWORD *)(v11 + 16);
              if (v240 == v121[84] && !*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x20))
                return 10;
            }
          }
        }
      }
    }
  }
LABEL_80:
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v230 = (JSC::VM *)*((_QWORD *)v12 + 7);
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v12, v11);
    JSC::VM::throwException(v230, v12, NotAnObjectError, v232, v233, v234, v235, v236);
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v179 = *(_DWORD *)(v14 + 80);
    if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v50 = *((_QWORD *)v12 + 7);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 2)
    {
      v51 = *(_QWORD *)(v10 + 8);
      if ((v51 & 1) == 0)
      {
        if ((*(_BYTE *)(v51 + 16) & 0x10) == 0)
        {
          v137 = *(WTF::StringImpl **)(v50 + 64768);
          if (v137 != (WTF::StringImpl *)v51)
          {
            *(_DWORD *)v51 += 2;
            *(_QWORD *)(v50 + 64768) = v51;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
              {
                WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
              }
              else
              {
                *(_DWORD *)v137 -= 2;
              }
            }
            v138 = *(WTF::StringImpl **)(v10 + 8);
            if (v138)
            {
              if ((*((_BYTE *)v138 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v138 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v138, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v361);
                v138 = v361[0];
              }
            }
            v139 = *(WTF::StringImpl **)(v50 + 64776);
            *(_QWORD *)(v50 + 64776) = v138;
            if (v139)
            {
              if (*(_DWORD *)v139 == 2)
              {
                WTF::StringImpl::~StringImpl(v139, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
              }
              else
              {
                *(_DWORD *)v139 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
          {
            v140 = *(WTF::StringImpl **)(v50 + 64776);
            *(_DWORD *)v140 += 2;
            v361[0] = v140;
            __dmb(0xAu);
            v141 = *(WTF::StringImpl **)(v10 + 8);
            *(WTF::StringImpl **)(v10 + 8) = v361[0];
            v361[0] = v141;
            v142 = (_QWORD *)(v50 + 808);
            v143 = *(unsigned int *)(v50 + 820);
            if ((_DWORD)v143 == *(_DWORD *)(v50 + 816))
            {
              v145 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, v143 + 1, (unint64_t)v361);
              v143 = *(unsigned int *)(v50 + 820);
              v144 = (WTF::StringImpl **)(*(_QWORD *)(v50 + 808) + 8 * v143);
              v141 = *v145;
            }
            else
            {
              v144 = (WTF::StringImpl **)(*v142 + 8 * v143);
              v145 = v361;
            }
            *v145 = 0;
            *v144 = v141;
            *(_DWORD *)(v50 + 820) = v143 + 1;
            v146 = v361[0];
            v361[0] = 0;
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
              {
                WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
              }
              else
              {
                *(_DWORD *)v146 -= 2;
              }
            }
          }
          v51 = *(_QWORD *)(v50 + 64776);
        }
        goto LABEL_87;
      }
LABEL_514:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, v12);
      if (*(_DWORD *)(v50 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v50, a2, a3, a4, a5, a6, a7, a8))
      {
        v51 = 0;
        v260 = v361[0];
        v361[0] = 0;
        if (!v260)
          goto LABEL_89;
      }
      else
      {
        v51 = (unint64_t)v361[0];
        if (!v361[0])
          goto LABEL_89;
        *(_DWORD *)v361[0] += 2;
        v361[0] = 0;
        v260 = (WTF::StringImpl *)v51;
      }
      if (*(_DWORD *)v260 != 2)
      {
        *(_DWORD *)v260 -= 2;
        goto LABEL_89;
      }
LABEL_522:
      WTF::StringImpl::~StringImpl(v260, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
      goto LABEL_89;
    }
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v351 = (WTF::StringImpl *)v10;
  if (!*(_DWORD *)(v50 + 80))
  {
LABEL_496:
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v249 = *(unsigned __int8 *)(v10 + 5);
      if (v249 == 2)
        goto LABEL_498;
      if (v249 == 4)
      {
        v51 = *(_QWORD *)(v10 + 8);
        v261 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 4;
        v52 = v261 + 2;
        if (v52)
          goto LABEL_88;
        v260 = (WTF::StringImpl *)v51;
        goto LABEL_522;
      }
    }
    v10 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v351, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_498:
    if (*(_DWORD *)(v50 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v50, a2, a3, a4, a5, a6, a7, a8))
    {
      v51 = 0;
      goto LABEL_89;
    }
    v51 = *(_QWORD *)(v10 + 8);
    v50 = *((_QWORD *)v12 + 7);
    if ((v51 & 1) == 0)
    {
      if ((*(_BYTE *)(v51 + 16) & 0x10) == 0)
      {
        v250 = *(WTF::StringImpl **)(v50 + 64768);
        if (v250 != (WTF::StringImpl *)v51)
        {
          *(_DWORD *)v51 += 2;
          *(_QWORD *)(v50 + 64768) = v51;
          if (v250)
          {
            if (*(_DWORD *)v250 == 2)
            {
              WTF::StringImpl::~StringImpl(v250, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
            }
            else
            {
              *(_DWORD *)v250 -= 2;
            }
          }
          v251 = *(WTF::StringImpl **)(v10 + 8);
          if (v251)
          {
            if ((*((_BYTE *)v251 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v251 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v251, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v361);
              v251 = v361[0];
            }
          }
          v252 = *(WTF::StringImpl **)(v50 + 64776);
          *(_QWORD *)(v50 + 64776) = v251;
          if (v252)
          {
            if (*(_DWORD *)v252 == 2)
            {
              WTF::StringImpl::~StringImpl(v252, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
            }
            else
            {
              *(_DWORD *)v252 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v253 = *(WTF::StringImpl **)(v50 + 64776);
          *(_DWORD *)v253 += 2;
          v361[0] = v253;
          __dmb(0xAu);
          v254 = *(WTF::StringImpl **)(v10 + 8);
          *(WTF::StringImpl **)(v10 + 8) = v361[0];
          v361[0] = v254;
          v255 = (_QWORD *)(v50 + 808);
          v256 = *(unsigned int *)(v50 + 820);
          if ((_DWORD)v256 == *(_DWORD *)(v50 + 816))
          {
            v258 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v255, v256 + 1, (unint64_t)v361);
            v256 = *(unsigned int *)(v50 + 820);
            v257 = (WTF::StringImpl **)(*(_QWORD *)(v50 + 808) + 8 * v256);
            v254 = *v258;
          }
          else
          {
            v257 = (WTF::StringImpl **)(*v255 + 8 * v256);
            v258 = v361;
          }
          *v258 = 0;
          *v257 = v254;
          *(_DWORD *)(v50 + 820) = v256 + 1;
          v259 = v361[0];
          v361[0] = 0;
          if (v259)
          {
            if (*(_DWORD *)v259 == 2)
            {
              WTF::StringImpl::~StringImpl(v259, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
            }
            else
            {
              *(_DWORD *)v259 -= 2;
            }
          }
        }
        v51 = *(_QWORD *)(v50 + 64776);
      }
      goto LABEL_87;
    }
    goto LABEL_514;
  }
  v278 = *(_DWORD *)(v50 + 80);
  if ((v278 & 0x27) != 0 && (v278 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v50 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v50 + 16))
  {
    v10 = (unint64_t)v351;
    goto LABEL_496;
  }
  v51 = *(_QWORD *)(*(_QWORD *)(v50 + 41952) + 8);
  if (v51)
  {
LABEL_87:
    v52 = *(_DWORD *)v51 + 2;
LABEL_88:
    *(_DWORD *)v51 = v52;
  }
LABEL_89:
  if (*(_DWORD *)(v14 + 80))
  {
    v180 = *(_DWORD *)(v14 + 80);
    if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
      IndexQuicklyForTypedArray = 0;
      goto LABEL_145;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v353 = 0xFFFFFFFF00000000;
  LOBYTE(v357) = 0;
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v355 = 0;
  memset(v356, 0, 13);
  v354 = (_DWORD *)v11;
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    v53 = *((_QWORD *)v12 + 7);
    v54 = *(unsigned __int8 *)(v11 + 5);
    if (v54 > 0x16)
      goto LABEL_92;
    if (v54 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v53 + 41952) + 1768) == v51)
      {
        v295 = *(_QWORD *)(v11 + 8);
        if ((v295 & 1) != 0)
          v296 = (unsigned int *)(v11 + 16);
        else
          v296 = (unsigned int *)(v295 + 4);
        v297 = *v296;
        if ((v297 & 0x80000000) != 0)
          v298 = (WTF::StringImpl *)(COERCE__INT64((double)v297) + 0x2000000000000);
        else
          v298 = (WTF::StringImpl *)(v297 | 0xFFFE000000000000);
        v299 = 14;
        goto LABEL_551;
      }
      if (!v51 || (v325 = *(_DWORD *)(v51 + 16), (v325 & 0x20) != 0))
      {
LABEL_590:
        v300 = 0;
LABEL_552:
        if (*(_DWORD *)(v53 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v53, a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_132;
        }
        if ((v300 & 1) != 0)
          goto LABEL_140;
        goto LABEL_554;
      }
      v326 = *(_WORD **)(v51 + 8);
      v327 = *(unsigned int *)(v51 + 4);
      if ((v325 & 4) == 0)
      {
        if ((_DWORD)v327)
        {
          v328 = (unsigned __int16)*v326 - 48;
          if (v328 <= 9 && (*v326 != 48 || v327 <= 1))
          {
            v332 = v326 + 1;
            v333 = v327 - 1;
            while (v333)
            {
              if (v328 > 0x19999999)
                goto LABEL_586;
              v334 = *v332 - 48;
              if (v334 > 9)
                goto LABEL_586;
              v329 = 0;
              LOBYTE(v327) = 0;
              v330 = 0;
              v101 = __CFADD__(v334, 10 * v328);
              v328 = v334 + 10 * v328;
              ++v332;
              --v333;
              if (v101)
                goto LABEL_588;
            }
            v330 = v328 & 0xFFFFFF00;
            v329 = 0x100000000;
            if (v328 == -1)
            {
              v329 = 0;
              LOBYTE(v327) = 0;
            }
            else
            {
              LOBYTE(v327) = v328;
            }
            if (v328 == -1)
              v330 = 0;
            goto LABEL_588;
          }
LABEL_586:
          v329 = 0;
          LOBYTE(v327) = 0;
        }
        else
        {
          v329 = 0;
        }
        v330 = 0;
LABEL_588:
        v331 = v327;
LABEL_589:
        if ((v329 & 0x100000000) != 0)
        {
          a3 = v330 | v331;
          v343 = *(_QWORD *)(v11 + 8);
          v344 = (_DWORD *)((v343 & 1) != 0 ? v11 + 16 : v343 + 4);
          if (*v344 > a3)
          {
            v298 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v11, v12, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v53 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v53, a2, a3, a4, a5, a6, a7, a8))
            {
              v299 = 10;
LABEL_551:
              v351 = v298;
              LODWORD(v353) = v299;
              v355 = 0;
              v300 = 1;
              BYTE1(v356[1]) = 1;
              goto LABEL_552;
            }
          }
        }
        goto LABEL_590;
      }
      if ((_DWORD)v327)
      {
        v345 = *(unsigned __int8 *)v326 - 48;
        if (v345 <= 9 && (v327 < 2 || *(_BYTE *)v326 != 48))
        {
          v346 = v327 - 1;
          v347 = (unsigned __int8 *)v326 + 1;
          while (v346)
          {
            if (v345 > 0x19999999)
              goto LABEL_691;
            v348 = *v347 - 48;
            if (v348 > 9)
              goto LABEL_691;
            v331 = 0;
            LOBYTE(v327) = 0;
            v329 = 0;
            v101 = __CFADD__(v348, 10 * v345);
            v345 = v348 + 10 * v345;
            --v346;
            ++v347;
            if (v101)
              goto LABEL_693;
          }
          if (v345 == -1)
            v331 = 0;
          else
            v331 = v345 & 0xFFFFFF00;
          if (v345 == -1)
            LOBYTE(v327) = 0;
          else
            LOBYTE(v327) = v345;
          if (v345 == -1)
            v329 = 0;
          else
            v329 = 0x100000000;
          goto LABEL_693;
        }
LABEL_691:
        v331 = 0;
        LOBYTE(v327) = 0;
      }
      else
      {
        v331 = 0;
      }
      v329 = 0;
LABEL_693:
      v330 = v327;
      goto LABEL_589;
    }
  }
LABEL_554:
  v301 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v350, (unint64_t)v12);
  if (!v301)
    goto LABEL_132;
  v11 = v301;
  v53 = *((_QWORD *)v12 + 7);
LABEL_92:
  v55 = (_BYTE *)(v11 + 6);
  v56 = v51 >> 4;
  v57 = v11;
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v58 = v11;
    do
    {
      v59 = *(_DWORD *)v58 & 0xFFFFFFFE;
      v60 = 16 * v59;
      if (!(_DWORD)v56 || (v56 & ~*(_DWORD *)(16 * v59 + 0x20)) != 0)
        goto LABEL_105;
      v61 = *(_QWORD *)(16 * v59 + 0x58);
      if (!v61)
      {
        v72 = *(_QWORD *)(16 * v59 + 0x40);
        if (!v72 || *(_BYTE *)(v72 + 5) != 1 && *(_DWORD *)(v72 + 80) < 2u)
          goto LABEL_105;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v60, (JSC::VM *)v53, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v61)
          goto LABEL_105;
      }
      if (!*(_DWORD *)(v61 + 24))
        goto LABEL_105;
      v62 = *(_QWORD *)(v61 + 16);
      v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(unsigned int *)(v61 + 8);
      v65 = *(_DWORD *)(v51 + 16);
      if ((v62 & 1) != 0)
      {
        if ((v65 & 0x20) != 0)
          v65 = *(_DWORD *)(v51 + 32);
        v66 = *(_DWORD *)(v61 + 12);
        v67 = (v65 >> 8) & *(_QWORD *)&v66;
        v68 = *(unsigned __int8 *)(v63 + v67);
        if (!*(_BYTE *)(v63 + v67))
          goto LABEL_105;
        v69 = v63 + v64;
        v70 = 1;
        while (1)
        {
          v71 = *(_QWORD *)(v69 + 8 * (v68 - 1));
          if (v51 == (v71 & 0xFFFFFFFFFFFFLL))
            break;
          v67 = ((_DWORD)v67 + v70) & v66;
          v68 = *(unsigned __int8 *)(v63 + v67);
          ++v70;
          if (!*(_BYTE *)(v63 + v67))
            goto LABEL_105;
        }
        a6 = (v71 >> 16) & 0xFF00000000 | HIBYTE(v71);
      }
      else
      {
        if ((v65 & 0x20) != 0)
          v65 = *(_DWORD *)(v51 + 32);
        v73 = *(_DWORD *)(v61 + 12);
        v74 = v73 & (v65 >> 8);
        v75 = *(_DWORD *)(v63 + 4 * v74);
        if (!v75)
          goto LABEL_105;
        v76 = v63 + 4 * v64;
        v77 = 1;
        while (1)
        {
          v78 = (v75 - 1);
          if (v51 == *(_QWORD *)(v76 + 16 * v78))
            break;
          v74 = (v74 + v77) & v73;
          v75 = *(_DWORD *)(v63 + 4 * v74);
          ++v77;
          if (!v75)
            goto LABEL_105;
        }
        a6 = *(unsigned int *)(v76 + 16 * v78 + 8) | ((unint64_t)*(unsigned __int8 *)(v76 + 16 * v78 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v83 = v58 + 16;
          v84 = a6 << 32;
        }
        else
        {
          v83 = *(_QWORD *)(v58 + 8) - 8;
          v84 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v83 + (v84 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v85 = *(unsigned __int8 *)(a4 + 5);
          if (v85 != 5)
          {
            if (v85 != 6)
              goto LABEL_138;
            v147 = *(_DWORD *)(v60 + 16) & 3;
            v148 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v150 = *(int8x16_t ***)(a4 + 24);
              v149 = *(_QWORD *)(a4 + 32);
              v351 = *(WTF::StringImpl **)(a4 + 8);
              v352 = v148;
              LODWORD(v353) = HIDWORD(a6);
              v355 = (_DWORD *)v58;
              goto LABEL_242;
            }
            v351 = *(WTF::StringImpl **)(a4 + 8);
            v352 = v148;
            LODWORD(v353) = HIDWORD(a6);
            v355 = (_DWORD *)v58;
LABEL_325:
            BYTE1(v356[1]) = 3;
            if (v147 != 2)
              LOBYTE(v356[1]) = 1;
            goto LABEL_140;
          }
          v119 = (unsigned int *)v58;
          v120 = v53;
LABEL_185:
          JSC::JSObject::fillGetterPropertySlot(v119, v120, (uint64_t)&v351, a4, a5, a6);
          goto LABEL_140;
        }
LABEL_138:
        v351 = (WTF::StringImpl *)a4;
        v355 = (_DWORD *)v58;
LABEL_139:
        v353 = __PAIR64__(a6, a5);
        LOWORD(v356[1]) = 257;
        goto LABEL_140;
      }
LABEL_105:
      if ((*v55 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v58, (JSC::VM *)v53, v51, (uint64_t)&v351) & 1) != 0)
      {
        goto LABEL_140;
      }
      v57 = *(_QWORD *)(v60 + 48);
      if (!v57)
        v57 = *(_QWORD *)(v58 + 16);
      if ((v57 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v57 + 5) < 0x17u)
      {
        if (v51)
        {
          v79 = *(_DWORD *)(v51 + 16);
          if ((v79 & 0x20) == 0)
          {
            v80 = *(_BYTE **)(v51 + 8);
            v81 = *(unsigned int *)(v51 + 4);
            if ((v79 & 4) != 0)
            {
              if ((_DWORD)v81)
              {
                v82 = *v80 - 48;
                if (v82 <= 9 && (v81 < 2 || *v80 != 48))
                {
                  v241 = v81 - 1;
                  v242 = v80 + 1;
                  IndexQuicklyForTypedArray = 10;
                  while (v241)
                  {
                    if (v82 <= 0x19999999)
                    {
                      v243 = *v242 - 48;
                      if (v243 <= 9)
                      {
                        v101 = __CFADD__(v243, 10 * v82);
                        v82 = v243 + 10 * (_DWORD)v82;
                        --v241;
                        ++v242;
                        if (!v101)
                          continue;
                      }
                    }
                    goto LABEL_142;
                  }
                  goto LABEL_460;
                }
              }
            }
            else if ((_DWORD)v81)
            {
              v82 = *(unsigned __int16 *)v80 - 48;
              if (v82 <= 9 && (*(_WORD *)v80 != 48 || v81 <= 1))
              {
                v98 = (unsigned __int16 *)(v80 + 2);
                v99 = v81 - 1;
                IndexQuicklyForTypedArray = 10;
                while (v99)
                {
                  if (v82 <= 0x19999999)
                  {
                    v100 = *v98 - 48;
                    if (v100 <= 9)
                    {
                      v101 = __CFADD__(v100, 10 * v82);
                      v82 = v100 + 10 * (_DWORD)v82;
                      ++v98;
                      --v99;
                      if (!v101)
                        continue;
                    }
                  }
                  goto LABEL_142;
                }
LABEL_460:
                if ((_DWORD)v82 != -1)
                {
                  v244 = (JSC::VM *)*((_QWORD *)v12 + 7);
                  IndexQuicklyForTypedArray = 10;
                  while (1)
                  {
                    v245 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                    v246 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v245 + 0x4C) + 0x70))(v11, v12, v82, &v351);
                    if (*((_DWORD *)v244 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v244, a2, a3, a4, a5, a6, a7, a8))
                    {
                      break;
                    }
                    if ((v246 & 1) != 0)
                      goto LABEL_140;
                    if (BYTE2(v356[1]) == 3)
                    {
                      if (BYTE4(v356[1]))
                        break;
                      v247 = *(unsigned __int8 *)(v11 + 5);
                      if (v247 == 61)
                        goto LABEL_467;
                    }
                    else
                    {
                      v247 = *(unsigned __int8 *)(v11 + 5);
                      if (v247 == 61)
                      {
                        if (BYTE2(v356[1]) == 1)
                          break;
                        goto LABEL_467;
                      }
                    }
                    if ((v247 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, a3, a4, a5, a6, a7, a8) <= v82)
                    {
                      break;
                    }
LABEL_467:
                    if ((*(_WORD *)(v245 + 12) & 0x800) == 0 || BYTE2(v356[1]) == 3)
                    {
                      v248 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                      if (!v248)
                        v248 = *(_QWORD *)(v11 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v248 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0xB0))(v11, v12);
                      }
                      else
                      {
                        v248 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                        if (!v248)
                          v248 = *(_QWORD *)(v11 + 16);
                      }
                      if (*((_DWORD *)v244 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v244, a2, a3, a4, a5, a6, a7, a8))
                      {
                        break;
                      }
                    }
                    if ((v248 & 0xFFFE000000000002) == 0)
                    {
                      v11 = v248;
                      if (*(unsigned __int8 *)(v248 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_142;
                  }
                }
              }
            }
          }
        }
LABEL_132:
        IndexQuicklyForTypedArray = 10;
        goto LABEL_142;
      }
      v55 = (_BYTE *)(v57 + 6);
      v58 = v57;
    }
    while ((*(_BYTE *)(v57 + 6) & 8) == 0);
  }
  if (!v51)
    goto LABEL_274;
  v162 = *(_DWORD *)(v51 + 16);
  if ((v162 & 0x20) != 0)
    goto LABEL_274;
  v163 = *(_WORD **)(v51 + 8);
  v164 = *(unsigned int *)(v51 + 4);
  if ((v162 & 4) == 0)
  {
    if ((_DWORD)v164)
    {
      v165 = (unsigned __int16)*v163 - 48;
      if (v165 <= 9 && (*v163 != 48 || v164 <= 1))
      {
        v182 = v163 + 1;
        v183 = v164 - 1;
        while (v183)
        {
          if (v165 > 0x19999999)
            goto LABEL_270;
          v184 = *v182 - 48;
          if (v184 > 9)
            goto LABEL_270;
          v166 = 0;
          LOBYTE(v164) = 0;
          v167 = 0;
          v101 = __CFADD__(v184, 10 * v165);
          v165 = v184 + 10 * v165;
          ++v182;
          --v183;
          if (v101)
            goto LABEL_272;
        }
        v167 = v165 & 0xFFFFFF00;
        v166 = 0x100000000;
        if (v165 == -1)
        {
          v166 = 0;
          LOBYTE(v164) = 0;
        }
        else
        {
          LOBYTE(v164) = v165;
        }
        if (v165 == -1)
          v167 = 0;
        goto LABEL_272;
      }
LABEL_270:
      v166 = 0;
      LOBYTE(v164) = 0;
    }
    else
    {
      v166 = 0;
    }
    v167 = 0;
LABEL_272:
    v168 = v164;
    goto LABEL_273;
  }
  if ((_DWORD)v164)
  {
    v335 = *(unsigned __int8 *)v163 - 48;
    if (v335 <= 9 && (v164 < 2 || *(_BYTE *)v163 != 48))
    {
      v336 = v164 - 1;
      v337 = (unsigned __int8 *)v163 + 1;
      while (v336)
      {
        if (v335 > 0x19999999)
          goto LABEL_607;
        v338 = *v337 - 48;
        if (v338 > 9)
          goto LABEL_607;
        v168 = 0;
        LOBYTE(v164) = 0;
        v166 = 0;
        v101 = __CFADD__(v338, 10 * v335);
        v335 = v338 + 10 * v335;
        --v336;
        ++v337;
        if (v101)
          goto LABEL_609;
      }
      if (v335 == -1)
        v168 = 0;
      else
        v168 = v335 & 0xFFFFFF00;
      if (v335 == -1)
        LOBYTE(v164) = 0;
      else
        LOBYTE(v164) = v335;
      if (v335 == -1)
        v166 = 0;
      else
        v166 = 0x100000000;
      goto LABEL_609;
    }
LABEL_607:
    v168 = 0;
    LOBYTE(v164) = 0;
  }
  else
  {
    v168 = 0;
  }
  v166 = 0;
LABEL_609:
  v167 = v164;
LABEL_273:
  if ((v166 & 0x100000000) != 0)
  {
    v189 = v167 | v168;
    v190 = (JSC::VM *)*((_QWORD *)v12 + 7);
    IndexQuicklyForTypedArray = 10;
    while (1)
    {
      v191 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v192 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v191 + 0x4C) + 0x70))(v11, v12, v189, &v351);
      v193 = v192;
      if (*((_DWORD *)v190 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v190, a2, a3, a4, a5, a6, a7, a8);
        if (((hasExceptionsAfterHandlingTraps | v193) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_140;
          goto LABEL_132;
        }
      }
      else if ((v192 & 1) != 0)
      {
        goto LABEL_140;
      }
      if (BYTE2(v356[1]) == 3)
      {
        if (BYTE4(v356[1]))
          goto LABEL_132;
        v194 = *(unsigned __int8 *)(v11 + 5);
        if (v194 == 61)
          goto LABEL_343;
      }
      else
      {
        v194 = *(unsigned __int8 *)(v11 + 5);
        if (v194 == 61)
        {
          if (BYTE2(v356[1]) == 1)
            goto LABEL_132;
          goto LABEL_343;
        }
      }
      if ((v194 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, a3, a4, a5, a6, a7, a8) <= v189)
      {
        goto LABEL_132;
      }
LABEL_343:
      if ((*(_WORD *)(v191 + 12) & 0x800) == 0 || BYTE2(v356[1]) == 3)
      {
        v195 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v195)
          v195 = *(_QWORD *)(v11 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v195 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v11, v12);
        }
        else
        {
          v195 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v195)
            v195 = *(_QWORD *)(v11 + 16);
        }
        if (*((_DWORD *)v190 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v190, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_132;
      }
      if ((v195 & 0xFFFE000000000002) == 0)
      {
        v11 = v195;
        if (*(unsigned __int8 *)(v195 + 5) > 0x16u)
          continue;
      }
      goto LABEL_142;
    }
  }
LABEL_274:
  v169 = (JSC::VM *)*((_QWORD *)v12 + 7);
  IndexQuicklyForTypedArray = 10;
  while (1)
  {
    v170 = 16 * (*(_DWORD *)v57 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v57 + 6) & 8) == 0)
      break;
    v223 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C) + 0x68))(v57, v12, v51, &v351);
    if (*((_DWORD *)v169 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v169, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_132;
    if ((v223 & 1) != 0)
      goto LABEL_140;
    if (BYTE2(v356[1]) == 3)
    {
      if (BYTE4(v356[1]))
        goto LABEL_132;
      v224 = *(unsigned __int8 *)(v57 + 5);
      if (v224 != 61)
      {
LABEL_389:
        if (!v51)
          goto LABEL_281;
        if ((v224 - 50) < 0xFFFFFFF5)
          goto LABEL_281;
        v225 = *(_DWORD *)(v51 + 16);
        if ((v225 & 0x20) != 0)
          goto LABEL_281;
        v226 = *(unsigned int *)(v51 + 4);
        if (!(_DWORD)v226)
          goto LABEL_281;
        v227 = *(unsigned __int8 **)(v51 + 8);
        if ((v225 & 4) == 0)
        {
          v228 = *(unsigned __int16 *)v227;
          if ((_DWORD)v226 == 1)
            goto LABEL_395;
          if (v228 == 45)
          {
            v228 = *((unsigned __int16 *)v227 + 1);
            goto LABEL_407;
          }
          if ((v228 - 48) >= 0xA && ((_DWORD)v226 != 8 || v228 != 73))
          {
LABEL_444:
            if ((_DWORD)v226 != 3 || v228 != 78)
              goto LABEL_281;
          }
LABEL_415:
          v349 = v349 & 0xFFFFFF0000000000 | v226 | ((unint64_t)((v225 >> 2) & 1) << 32);
          JSC::jsToNumber(v227, v349);
          WTF::numberToString(v361, v238);
          if (WTF::equal(v51, (unint64_t)v361, v239))
            goto LABEL_132;
          goto LABEL_281;
        }
        v228 = *v227;
        if ((_DWORD)v226 == 1)
        {
LABEL_395:
          if ((v228 - 48) < 0xA)
            goto LABEL_132;
          goto LABEL_281;
        }
        if (v228 == 45)
        {
          v228 = v227[1];
LABEL_407:
          if ((v228 - 48) < 0xA)
          {
            if ((_DWORD)v226 == 2)
              goto LABEL_132;
            goto LABEL_415;
          }
          if ((_DWORD)v226 != 9)
            goto LABEL_281;
        }
        else
        {
          if ((v228 - 48) < 0xA)
            goto LABEL_415;
          if ((_DWORD)v226 != 8)
            goto LABEL_444;
        }
        if (v228 != 73)
          goto LABEL_281;
        goto LABEL_415;
      }
    }
    else
    {
      v224 = *(unsigned __int8 *)(v57 + 5);
      if (v224 != 61)
        goto LABEL_389;
      if (BYTE2(v356[1]) == 1)
        goto LABEL_132;
    }
LABEL_281:
    if ((*(_WORD *)(v170 + 12) & 0x800) == 0)
    {
      v173 = *(_DWORD *)v57;
LABEL_283:
      v174 = *(_QWORD *)(16 * (v173 & 0xFFFFFFFE) + 0x30);
      if (!v174)
        v174 = *(_QWORD *)(v57 + 16);
      goto LABEL_285;
    }
    v173 = *(_DWORD *)v57;
    if (BYTE2(v356[1]) == 3)
      goto LABEL_283;
    v219 = 16 * (v173 & 0xFFFFFFFE);
    if ((*(_WORD *)(v219 + 12) & 0x800) != 0)
    {
      v174 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v219 + 76)
                                                                                + 0xB0))(v57, v12);
    }
    else
    {
      v174 = *(_QWORD *)(v219 + 48);
      if (!v174)
        v174 = *(_QWORD *)(v57 + 16);
    }
    if (*((_DWORD *)v169 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v169, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_132;
LABEL_285:
    if ((v174 & 0xFFFE000000000002) == 0)
    {
      v57 = v174;
      if (*(unsigned __int8 *)(v174 + 5) > 0x16u)
        continue;
    }
    goto LABEL_142;
  }
  if (!(_DWORD)v56
    || (v56 & ~*(_DWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE)), v169, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v171)|| (v361[0] = (WTF::StringImpl *)v51, v172 = JSC::PropertyTable::get(v171, (uint64_t *)v361), a6 = v172, (_DWORD)v172 == -1))
  {
    if ((*(_BYTE *)(v57 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v57, v169, v51, (uint64_t)&v351) & 1) != 0)
    {
      goto LABEL_140;
    }
    goto LABEL_281;
  }
  a5 = HIDWORD(v172);
  if ((int)v172 <= 63)
  {
    v176 = v57 + 16;
    v177 = v172 << 32;
  }
  else
  {
    v176 = *(_QWORD *)(v57 + 8) - 8;
    v177 = 0x3F00000000 - (v172 << 32);
  }
  a4 = *(_QWORD *)(v176 + (v177 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_296:
    v351 = (WTF::StringImpl *)a4;
    v355 = (_DWORD *)v57;
    goto LABEL_139;
  }
  v178 = *(unsigned __int8 *)(a4 + 5);
  if (v178 == 5)
  {
    v119 = (unsigned int *)v57;
    v120 = (uint64_t)v169;
    goto LABEL_185;
  }
  if (v178 != 6)
    goto LABEL_296;
  v147 = *(_DWORD *)(v170 + 16) & 3;
  v218 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v351 = *(WTF::StringImpl **)(a4 + 8);
    v352 = v218;
    LODWORD(v353) = HIDWORD(v172);
    v355 = (_DWORD *)v57;
    goto LABEL_325;
  }
  v150 = *(int8x16_t ***)(a4 + 24);
  v149 = *(_QWORD *)(a4 + 32);
  v351 = *(WTF::StringImpl **)(a4 + 8);
  v352 = v218;
  LODWORD(v353) = HIDWORD(v172);
  v355 = (_DWORD *)v57;
LABEL_242:
  BYTE1(v356[1]) = 3;
  if (v147 != 2)
    LOBYTE(v356[1]) = 1;
  BYTE3(v356[1]) = 1;
  v359 = v150;
  v360 = v149;
LABEL_140:
  if (BYTE1(v356[1]) == 1)
  {
    IndexQuicklyForTypedArray = (uint64_t)v351;
  }
  else
  {
    if (BYTE1(v356[1]) == 2)
    {
      v118 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v351, v12, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v130 = (unint64_t)v355;
      v131 = *(_QWORD *)(16 * (*v355 & 0xFFFFFFFE) + 0x28);
      if ((v353 & 0x20) != 0)
        v130 = (unint64_t)v354;
      if (BYTE3(v356[1]) != 1)
        goto LABEL_226;
      if ((v130 & 0xFFFE000000000002) != 0)
        goto LABEL_447;
      v132 = *(unsigned int *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C);
      v133 = *(_DWORD *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C) != 0;
      v134 = 16 * v132;
      if ((_DWORD)v132)
        v135 = v359 == (int8x16_t **)v134;
      else
        v135 = 1;
      if (!v135)
      {
        do
        {
          v134 = *(_QWORD *)(v134 + 16);
          v133 = v134 != 0;
        }
        while ((int8x16_t **)v134 != v359 && v134 != 0);
      }
      if (!v133)
      {
LABEL_447:
        v361[0] = *((WTF::StringImpl **)v12 + 7);
        v118 = JSC::throwDOMAttributeGetterTypeError(v131, v361, v359, (WTF::StringImpl *)v51);
      }
      else
      {
LABEL_226:
        v118 = ((uint64_t (*)(unint64_t))v351)(v131);
      }
    }
    IndexQuicklyForTypedArray = v118;
  }
LABEL_142:
  if (v358)
  {
    v86 = *(_DWORD *)(v357 + 4);
    if (!v86)
    {
      __break(0xC471u);
      JUMPOUT(0x19879AEBCLL);
    }
    *(_DWORD *)(v357 + 4) = v86 - 1;
  }
LABEL_145:
  if (v51)
  {
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      return IndexQuicklyForTypedArray;
    }
    v109 = (WTF::StringImpl *)v51;
LABEL_178:
    WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
  }
  return IndexQuicklyForTypedArray;
}

uint64_t operationGetByValOptimize(JSC::JSString *a1, unint64_t a2, uint64_t this, uint64_t a4, JSC::Structure *a5, unint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  unint64_t v9;
  unint64_t IndexQuicklyForTypedArray;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSString *v55;
  unsigned __int8 *v56;
  JSC::JSString *v57;
  int v58;
  JSC::ScopedArguments *v59;
  int v60;
  int v61;
  unint64_t casual;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int16 *v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  JSC::ScopedArguments *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  _QWORD *v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl **v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  int v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t StatusReg;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  _QWORD *v133;
  JSC::ScopedArguments *v134;
  unint64_t v135;
  unsigned int v136;
  unsigned int v137;
  JSC::ScopedArguments *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned __int8 *v143;
  unsigned __int8 *v145;
  unsigned __int8 v146;
  int v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v151;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t *v158;
  int v159;
  unint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count **v189;
  unsigned __int16 *v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  int v197;
  int v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  int v211;
  _QWORD *v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v221;
  unsigned int v222;
  char v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  JSC::InlineCacheHandler *v229;
  JSC::InlineCacheHandler *v230;
  JSC::InlineCacheHandler *v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  int v236;
  unsigned __int8 *v237;
  int v238;
  void **v239;
  int v240;
  BOOL v241;
  unsigned __int8 *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  unsigned int *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unsigned int v271;
  uint64_t v272;
  int v273;
  WTF::StringImpl **v274;
  WTF::StringImpl *v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  int v280;
  uint64_t v281;
  int v282;
  unint64_t v283;
  char v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  WTF::StringImpl *v300;
  int v301;
  int v302;
  WTF *v304;
  JSC::InlineCacheHandler *v305;
  _QWORD *v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  uint64_t v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  JSC::InlineCacheHandler *v340;
  uint64_t v341;
  int8x16_t **v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v349;
  _DWORD *v350;
  BOOL v351;
  char v352;
  char v353;
  WTF::StringImpl *v354;
  unint64_t v355;
  int v356;
  uint64_t v357;
  unsigned int v358;
  _BYTE *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  unint64_t v375;
  uint64_t v376;
  int v377;
  unsigned int v378;
  int v379;
  unint64_t v380;
  int v381;
  uint64_t v382;
  int v383;
  _WORD *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  int v390;
  uint64_t v392;
  unsigned __int16 *v393;
  unsigned int v394;
  unint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  BOOL v404;
  WTF::StringImpl *v405;
  uint64_t v406;
  char v407;
  int v408;
  uint64_t v409;
  unsigned int *v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  BOOL v414;
  uint64_t v415;
  BOOL v416;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  _QWORD *v423;
  uint64_t v424;
  WTF::StringImpl **v425;
  WTF::StringImpl **v426;
  WTF::StringImpl *v427;
  int v428;
  JSC::InlineCacheHandler *v429;
  uint64_t v430;
  int8x16_t **v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  int v435;
  unsigned int v436;
  char v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int *v446;
  unsigned int *v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  std::__shared_weak_count **v456;
  unsigned int *v457;
  unsigned int *v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  std::__shared_weak_count **v467;
  int v468;
  int v469;
  unsigned int v470;
  char v471;
  unsigned int *v472;
  unsigned int *v473;
  int v474;
  _WORD *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  int v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned __int8 *v492;
  int v493;
  _BYTE *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unsigned int v499;
  uint64_t v500;
  int v501;
  unsigned int v502;
  uint64_t v503;
  unint64_t *v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unsigned int v508;
  uint64_t v509;
  unint64_t *v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unsigned int *v515;
  void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int *v522;
  unsigned int v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  unsigned __int16 *v538;
  unsigned int v539;
  int v540;
  unsigned __int16 *v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  WTF::StringImpl *v545;
  unint64_t v546;
  BOOL v547;
  JSC::VM *v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  BOOL v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  int v560;
  int v561;
  uint64_t v562;
  BOOL v563;
  char v564;
  int v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  void *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int v577;
  uint64_t v578;
  unint64_t *v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  void *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  void *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  JSC::InlineCacheHandler *v599;
  JSC::InlineCacheHandler *v600;
  uint64_t v601;
  int8x16_t **v602;
  unint64_t v603;
  void *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  WTF::StringImpl *v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  char v635;
  int v636;
  unsigned int v637;
  uint64_t v638;
  unsigned __int8 *v639;
  int v640;
  int v641;
  int v642;
  int v643;
  BOOL isMappedArgument;
  unint64_t v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t v661;
  void *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  JSC::VM *v669;
  unint64_t NotAnObjectError;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t **v676;
  WTF::AtomStringImpl *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  WTF::StringImpl *v684;
  _BOOL4 v685;
  uint64_t v686;
  double v687;
  const unsigned __int8 *v688;
  uint64_t v689;
  unint64_t v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  unsigned __int8 *v700;
  unsigned int v701;
  unsigned int v702;
  unsigned int v703;
  uint64_t v704;
  unsigned __int8 *v705;
  unsigned int v706;
  unsigned __int8 *v707;
  uint64_t v708;
  unsigned int v709;
  int v710;
  WTF::StringImpl *v711;
  WTF::StringImpl *v712;
  WTF::StringImpl *v713;
  WTF::StringImpl *v714;
  WTF::StringImpl *v715;
  _QWORD *v716;
  uint64_t v717;
  WTF::StringImpl **v718;
  WTF::StringImpl **v719;
  WTF::StringImpl *v720;
  WTF::StringImpl *v721;
  int v722;
  unint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  void *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  int v740;
  unint64_t v741;
  void *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  void *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  int v757;
  unsigned int v758;
  uint64_t v759;
  unsigned __int8 *v760;
  int v761;
  double v762;
  const unsigned __int8 *v763;
  uint64_t v764;
  unsigned int *v765;
  uint64_t v766;
  WTF::StringImpl *v767;
  int v768;
  char v769;
  uint64_t v770;
  uint64_t v771;
  _DWORD *v772;
  WTF::StringImpl *v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  unsigned int *v777;
  uint64_t v778;
  WTF::StringImpl *Index;
  int v780;
  char v781;
  _BOOL4 v782;
  int v783;
  _BYTE *v784;
  uint64_t v785;
  int v786;
  _BYTE *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unsigned __int16 *v791;
  unsigned int v792;
  unsigned __int16 *v793;
  uint64_t v794;
  unsigned int v795;
  uint64_t v796;
  unsigned __int8 *v797;
  unsigned int v798;
  JSC::VM *v799;
  uint64_t v800;
  int v801;
  int v802;
  int v803;
  uint64_t v804;
  _BOOL4 v805;
  unsigned __int8 *v806;
  uint64_t v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unsigned __int8 *v815;
  unsigned int v816;
  uint64_t v817;
  _DWORD *v818;
  unsigned __int8 *v819;
  uint64_t v820;
  unsigned int v821;
  uint64_t v822;
  _DWORD *v823;
  uint64_t **v824;
  int v825;
  int v826;
  __int32 v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  unsigned __int16 *v832;
  unsigned __int8 *v833;
  int16x8_t *v834;
  uint8x8_t *v835;
  unsigned int v836;
  int16x8_t *v837;
  unsigned int v838;
  int16x8_t *v839;
  unsigned int v840;
  uint8x8_t *v841;
  unsigned int v842;
  unsigned int v843;
  unsigned int v844;
  uint64_t v845;
  uint64_t v846;
  unsigned int *v847;
  unint64_t v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  uint64_t v852;
  int v854;
  uint64_t v855;
  int v856;
  int v857;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  int v865;
  uint64_t v866;
  int v867;
  int v868;
  uint64_t v870;
  unsigned __int8 *v871;
  int v872;
  unsigned __int8 *v873;
  int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  JSC::JSCell *v878;
  int v879;
  unint64_t v880;
  WTF::StringImpl *v881;
  WTF::StringImpl **v883;
  unint64_t v884;
  JSC::JSString *v885;
  WTF::StringImpl *v886;
  JSC::InlineCacheHandler *v887;
  WTF *v888;
  unint64_t v889;
  JSC::JSString *v890;
  _QWORD v891[2];
  uint64_t v892;
  char v893;
  int8x16_t **v894;
  uint64_t v895;
  void *v896;
  JSC::ScopedArguments *v897;
  JSC::InlineCacheHandler *v898;
  WTF::StringImpl *v899;
  unint64_t v900;
  WTF *v901;
  uint64_t v902;
  WTF::StringImpl *v903;
  unsigned __int8 *v904;
  WTF::StringImpl *v905;
  JSC::ScopedArguments **v906;
  void **v907;
  _QWORD v908[2];
  uint64_t v909;
  char v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t vars0;

  v13 = (WTF::StringImpl *)this;
  v14 = a2;
  v913 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(this + 56);
  v16 = *(_QWORD *)(v15 + 56);
  v17 = vars0;
  *(_QWORD *)(v16 + 40) = vars0;
  *(_DWORD *)(v17 + 36) = *(_DWORD *)(this + 112);
  v884 = a2;
  v885 = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v883 = (WTF::StringImpl **)v15;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0 || a2 < 0xFFFE000000000000)
    goto LABEL_3;
  v49 = *(_DWORD *)a1 & 0xFFFFFFFE;
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(this + 129) |= 0x10u;
    goto LABEL_3;
  }
  v897 = 0;
  *(_WORD *)(this + 129) |= 4u;
  if (*(_BYTE *)(this + 124))
  {
    --*(_BYTE *)(this + 124);
    goto LABEL_3;
  }
  v100 = *(unsigned __int8 *)(this + 125);
  if (v100 != 255)
    *(_BYTE *)(this + 125) = ++v100;
  if (xmmword_1ECF4C260 < v100)
  {
    *(_BYTE *)(this + 125) = 0;
    v434 = *(unsigned __int8 *)(this + 126);
    v435 = BYTE4(xmmword_1ECF4C260) << v434;
    v436 = v435;
    if (v435 == 255)
      LOBYTE(v435) = -2;
    if (v436 >> v434 == BYTE4(xmmword_1ECF4C260))
      v437 = v435;
    else
      v437 = -2;
    *(_BYTE *)(this + 124) = v437;
    if (v434 != 255)
      *(_BYTE *)(this + 126) = v434 + 1;
    *(_BYTE *)(this + 127) = 0;
    goto LABEL_357;
  }
  if (!*(_BYTE *)(this + 127))
    goto LABEL_357;
  v9 = v18;
  --*(_BYTE *)(this + 127);
  LOBYTE(v901) = 0;
  LODWORD(v902) = v49;
  IndexQuicklyForTypedArray = this + 128;
  if (__ldaxr((unsigned __int8 *)(this + 128)))
  {
    __clrex();
LABEL_165:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 128);
    goto LABEL_166;
  }
  if (__stxr(1u, (unsigned __int8 *)IndexQuicklyForTypedArray))
    goto LABEL_165;
LABEL_166:
  v102 = *((_DWORD *)v13 + 24);
  if (v102)
  {
    v905 = (WTF::StringImpl *)&v902;
    v906 = &v897;
    v907 = (void **)&v901;
    v903 = (WTF::StringImpl *)&v902;
    v904 = (unsigned __int8 *)&v901;
    if (v102 == -1)
      goto LABEL_450;
  }
  else
  {
    if (*((_QWORD *)v13 + 2))
      v102 = 1;
    else
      v102 = 2;
    *((_QWORD *)v13 + 10) = 0;
    *((_QWORD *)v13 + 11) = 0;
    *((_DWORD *)v13 + 24) = v102;
    v905 = (WTF::StringImpl *)&v902;
    v906 = &v897;
    v907 = (void **)&v901;
    v903 = (WTF::StringImpl *)&v902;
    v904 = (unsigned __int8 *)&v901;
  }
  v886 = (WTF::StringImpl *)&v903;
  ((void (*)(WTF::StringImpl **))off_1E3596010[v102])(&v886);
  v104 = __ldxr((unsigned __int8 *)IndexQuicklyForTypedArray);
  if (v104 != 1)
  {
    __clrex();
    goto LABEL_353;
  }
  if (__stlxr(0, (unsigned __int8 *)IndexQuicklyForTypedArray))
LABEL_353:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13 + 128, 0, this, v103, (uint64_t)a5, a6, a7, a8);
  if (!(_BYTE)v901)
  {
    v18 = v9;
    goto LABEL_3;
  }
  v18 = v9;
  if (!v9
    || *(_DWORD *)(v16 + 760) < *(unsigned __int8 *)(v9 + 7)
    || (JSC::Heap::writeBarrierSlowPath(v16 + 192, v9), v18 = v9, (_BYTE)v901))
  {
LABEL_357:
    if (a4)
    {
      v207 = 16 * v49;
      v208 = *(unsigned __int8 *)(16 * v49 + 9);
      if ((v208 - 39) <= 0xA)
        v209 = JSC::typedArrayModes[v208 - 39];
      else
        v209 = 1 << *(_BYTE *)(16 * v49 + 8);
      v210 = *(_DWORD *)(a4 + 4);
      v211 = *(_DWORD *)(a4 + 8) | v209;
      *(_DWORD *)(a4 + 8) = v211;
      if ((v210 & 0x40) == 0)
      {
        a9.i32[0] = v211;
        *(int8x8_t *)a9.i8 = vcnt_s8(*(int8x8_t *)a9.i8);
        a9.i16[0] = vaddlv_u8(*(uint8x8_t *)a9.i8);
        if (a9.i32[0] >= 2u)
        {
          v528 = *(unsigned __int8 *)(16 * v49 + 9);
          if ((v528 - 39) <= 0xA)
            v529 = JSC::typedArrayModes[v528 - 39];
          else
            v529 = 1 << *(_BYTE *)(16 * v49 + 8);
          v210 |= 0x40u;
          *(_DWORD *)(a4 + 4) = v210;
          *(_DWORD *)(a4 + 8) = v529;
        }
      }
      if ((*(_WORD *)(16 * v49 + 0xC) & 0x100) != 0)
      {
        v210 |= 8u;
        *(_DWORD *)(a4 + 4) = v210;
      }
      v212 = *(_QWORD **)(v18 + 8);
      v213 = *(unsigned __int8 *)(16 * v49 + 8);
      if ((v213 & 0x10) != 0)
        v214 = ((v213 & 0xE) + 10) >> 1;
      else
        v214 = (v213 >> 1) & 7;
      v215 = *((_DWORD *)v212 + v214 + 213);
      v216 = 16 * (v215 & 0xFFFFFFFE);
      if (!v215)
        v216 = 0;
      v217 = *(unsigned __int8 *)(16 * v49 + 9);
      if (v216 != v207)
      {
        switch(*(_BYTE *)(16 * v49 + 9))
        {
          case '\'':
            v218 = v212 + 208;
            goto LABEL_372;
          case '(':
            v218 = v212 + 211;
            goto LABEL_372;
          case ')':
            v218 = v212 + 214;
            goto LABEL_372;
          case '*':
            v218 = v212 + 217;
            goto LABEL_372;
          case '+':
            v218 = v212 + 220;
            goto LABEL_372;
          case ',':
            v218 = v212 + 223;
            goto LABEL_372;
          case '-':
            v218 = v212 + 226;
            goto LABEL_372;
          case '.':
            v218 = v212 + 229;
            goto LABEL_372;
          case '/':
            v218 = v212 + 232;
            goto LABEL_372;
          case '0':
            v218 = v212 + 235;
            goto LABEL_372;
          case '1':
            v218 = v212 + 238;
            goto LABEL_372;
          case '2':
            v218 = v212 + 241;
LABEL_372:
            v219 = *v218;
            if ((v219 & 1) != 0)
              v219 = 0;
            if (v219 != v207)
              goto LABEL_375;
            break;
          default:
LABEL_375:
            v210 |= 0x10u;
            *(_DWORD *)(a4 + 4) = v210;
            v217 = *(unsigned __int8 *)(16 * v49 + 9);
            break;
        }
      }
      if ((v217 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(16 * v49 + 0x4C) + 0xF4))
        *(_DWORD *)(a4 + 4) = v210 | 0x20;
    }
    v12 = (uint64_t)v13;
    v11 = (unint64_t)v885;
    if (((unint64_t)v885 & 0xFFFE000000000002) != 0)
    {
      v14 = v884;
      goto LABEL_1123;
    }
    v54 = *(_QWORD *)(v15 + 56);
    LODWORD(v886) = 0;
    v888 = 0;
    v889 = 0;
    v887 = 0;
    v13 = (WTF::StringImpl *)(v18 + 16);
    LOBYTE(v906) = 0;
    v904 = (unsigned __int8 *)(v18 + 16);
    LOBYTE(v905) = 1;
    if (__ldaxr((unsigned __int8 *)(v18 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_381:
      LOBYTE(v906) = 1;
      v907 = (void **)v54;
      ++*(_DWORD *)(v54 + 916);
      v222 = *(unsigned __int8 *)(v11 + 5);
      if (v222 > 0x20)
      {
        switch(v222)
        {
          case '!':
            v223 = 40;
            goto LABEL_390;
          case '=':
            v223 = 33;
            goto LABEL_390;
          case '"':
            v223 = 39;
            goto LABEL_390;
        }
      }
      else if (v222 == 2)
      {
        v223 = 59;
        goto LABEL_390;
      }
      if (v222 - 39 <= 0xA)
      {
        v9 = v18;
        v236 = 0;
        switch(*(_BYTE *)(v11 + 5))
        {
          case '\'':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 50;
            v353 = 41;
            goto LABEL_621;
          case '(':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 51;
            v353 = 42;
            goto LABEL_621;
          case ')':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 52;
            v353 = 43;
            goto LABEL_621;
          case '*':
            goto LABEL_1019;
          case '+':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 54;
            v353 = 45;
            goto LABEL_621;
          case ',':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 55;
            v353 = 46;
            goto LABEL_621;
          case '-':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 56;
            v353 = 47;
            goto LABEL_621;
          case '.':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 57;
            v353 = 48;
            goto LABEL_621;
          case '/':
            v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
            v352 = 58;
            v353 = 49;
            goto LABEL_621;
          case '0':
          case '1':
            goto LABEL_413;
          default:
            __break(0xC471u);
            JUMPOUT(0x19879F734);
        }
      }
      v224 = *(_BYTE *)(v11 + 4) & 0xE;
      if (v224 == 8)
      {
        v223 = 37;
        goto LABEL_390;
      }
      v236 = 0;
      if ((*(_BYTE *)(v11 + 4) & 0xEu) > 5)
      {
        if (v224 == 6)
        {
          v223 = 36;
          goto LABEL_390;
        }
        v9 = v18;
        if (v224 == 10)
        {
          v223 = 38;
          goto LABEL_390;
        }
        goto LABEL_413;
      }
      if (v224 == 4)
        goto LABEL_535;
      v9 = v18;
      if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
        goto LABEL_413;
      if (v222 < 0x17
        || (*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8) & 0x20) != 0
        || (v433 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28)) != 0
        && *(_BYTE *)(*(_QWORD *)(v433 + 2048) + 4) == 2
        || (*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x100) != 0)
      {
        v236 = 0;
        goto LABEL_413;
      }
      v514 = JSC::prepareChainForCaching((_QWORD *)v15, (JSC::JSObject *)v11, 0, 0, (uint64_t)a5, a6, a7, a8);
      v236 = 0;
      if ((v514 & 0xFFFFFF) < 0x10000)
        goto LABEL_1132;
      if (!(_BYTE)v514)
      {
        IndexQuicklyForTypedArray = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
        JSC::generateConditionsForIndexedMiss((JSC *)v54, (JSC::VM *)v9, (JSC::JSCell *)v15, (JSC::JSGlobalObject *)IndexQuicklyForTypedArray, a5, a6, a7, a8, (uint64_t *)&v897);
        v515 = (unsigned int *)v897;
        if (v897 && !*((_DWORD *)v897 + 1))
        {
          v897 = 0;
          do
          {
            v702 = __ldaxr(v515);
            v703 = v702 - 1;
          }
          while (__stlxr(v703, v515));
          if (!v703)
          {
            atomic_store(1u, v515);
            WTF::fastFree((unint64_t)v515, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          }
          v236 = 0;
LABEL_1132:
          v15 = (unint64_t)v883;
          goto LABEL_413;
        }
        v901 = 0;
        JSC::AccessCase::create(v54, v9, 60, 0, -1, IndexQuicklyForTypedArray, (unsigned int **)&v897, (uint64_t *)&v901, &v902);
        IndexQuicklyForTypedArray = v902;
        if (v901)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v901, v516, v517, v518, v519, v520, v521, a8);
        v522 = (unsigned int *)v897;
        v897 = 0;
        if (v522)
        {
          do
          {
            v523 = __ldaxr(v522);
            v524 = v523 - 1;
          }
          while (__stlxr(v524, v522));
          if (!v524)
          {
            atomic_store(1u, v522);
            WTF::fastFree((unint64_t)v522, v516, v517, v518, v519, v520, v521, a8);
          }
        }
        v18 = v9;
        if (IndexQuicklyForTypedArray)
          goto LABEL_395;
LABEL_535:
        v223 = 35;
        goto LABEL_390;
      }
LABEL_413:
      if ((_BYTE)v906)
      {
        LOBYTE(v905) = 0;
        v237 = v904;
        v238 = __ldxr(v904);
        if (v238 == 1)
        {
          if (!__stlxr(0, v904))
            goto LABEL_419;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v237, 0, this, v18, (uint64_t)a5, a6, a7, a8);
      }
LABEL_419:
      v239 = v907;
      v240 = *((_DWORD *)v907 + 229) - 1;
      *((_DWORD *)v907 + 229) = v240;
      if (*((unsigned __int8 *)v239 + 1198) | HIBYTE(dword_1ECF4C5CE))
        v241 = v240 == 0;
      else
        v241 = 0;
      if (v241)
      {
        *((_BYTE *)v239 + 1198) = 0;
        JSC::Heap::collectIfNecessaryOrDefer((uint64_t)(v239 + 24), 0);
      }
      v18 = v9;
      if ((_BYTE)v906 && (_BYTE)v905)
      {
        v242 = v904;
        v243 = __ldxr(v904);
        if (v243 == 1)
        {
          if (!__stlxr(0, v904))
            goto LABEL_541;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v242, 0, this, v9, (uint64_t)a5, a6, a7, a8);
        v18 = v9;
      }
LABEL_541:
      if (!v236)
      {
        v14 = v884;
        v13 = (WTF::StringImpl *)v12;
        goto LABEL_551;
      }
      v302 = (int)v886;
      if ((_DWORD)v886 != 6)
      {
LABEL_543:
        v14 = v884;
        v13 = (WTF::StringImpl *)v12;
        if (v302 == 5)
          v236 = 3;
        else
          v236 = v302 != 1 && v302 != 4;
LABEL_551:
        v304 = v888;
        if (v888)
        {
          v888 = 0;
          LODWORD(v889) = 0;
          v9 = v18;
          WTF::fastFree((unint64_t)v304, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          v18 = v9;
        }
        v305 = v887;
        v887 = 0;
        if (v305)
        {
          if (*(_DWORD *)v305 == 1)
          {
            v9 = v18;
            JSC::InlineCacheHandler::~InlineCacheHandler(v305, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8, *(uint8x8_t *)a9.i8);
            WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
            v18 = v9;
          }
          else
          {
            --*(_DWORD *)v305;
          }
        }
        if (v236)
        {
          if (v236 == 3)
          {
            if ((*(_WORD *)((_BYTE *)v13 + 129) & 0x200) != 0)
            {
              v13 = (WTF::StringImpl *)v12;
              *(_QWORD *)(v12 + 48) = operationGetByValMegamorphic;
            }
            else
            {
              v13 = (WTF::StringImpl *)v12;
              v686 = v18;
              JSC::ftlThunkAwareRepatchCall(v18, *(_QWORD *)(v12 + 48), (int *)operationGetByValMegamorphic, v18, (uint64_t)a5, a6, a7, a8);
              v18 = v686;
            }
            v15 = (unint64_t)v883;
            v14 = v884;
          }
          goto LABEL_3;
        }
LABEL_1123:
        if ((*(_WORD *)((_BYTE *)v13 + 129) & 0x200) != 0)
        {
          *((_QWORD *)v13 + 6) = operationGetByValGaveUp;
        }
        else
        {
          v622 = v18;
          JSC::ftlThunkAwareRepatchCall(v18, *((_QWORD *)v13 + 6), (int *)operationGetByValGaveUp, v18, (uint64_t)a5, a6, a7, a8);
          v18 = v622;
        }
        goto LABEL_3;
      }
      v611 = v18;
      JSC::AccessGenerationResult::fireWatchpoints((uint64_t *)&v886, (JSC::VM *)v54, *(double *)a9.i64, this, v18, (uint64_t)a5, a6, a7, a8);
      LOBYTE(v906) = 0;
      v904 = (unsigned __int8 *)v13;
      LOBYTE(v905) = 1;
      if (__ldaxr((unsigned __int8 *)v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v13))
      {
        goto LABEL_1099;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_1099:
      LOBYTE(v906) = 1;
      v907 = (void **)v54;
      ++*(_DWORD *)(v54 + 916);
      JSC::StructureStubInfo::reset(v12);
      JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v903, v613, v614, v615, v616, v617, v618, v619);
      v18 = v611;
      v302 = (int)v886;
      v15 = (unint64_t)v883;
      goto LABEL_543;
    }
    v221 = v18;
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v18 + 16);
    v18 = v221;
    goto LABEL_381;
  }
LABEL_3:
  v11 = (unint64_t)v885;
  v19 = (unint64_t)v885 | v14;
  if ((((unint64_t)v885 | v14) & 0xFFFE000000000002) != 0)
    goto LABEL_126;
  v20 = *(unsigned __int8 *)(v14 + 5);
  v881 = v13;
  if (v20 == 2)
  {
    v13 = *(WTF::StringImpl **)(v14 + 8);
    if (!v13 || (v13 & 1) != 0 || (*((_BYTE *)v13 + 16) & 0x10) == 0)
      goto LABEL_126;
    goto LABEL_8;
  }
  if (v20 != 4)
    goto LABEL_126;
  v9 = v18;
  IndexQuicklyForTypedArray = *(_QWORD *)(v15 + 56);
  v105 = JSC::JSCell::toPrimitive(v14, (JSC::VM **)v15, (JSC::Structure *)2, v18, (uint64_t)a5, a6, a7, a8);
  v886 = (WTF::StringImpl *)v105;
  if (*(_DWORD *)(IndexQuicklyForTypedArray + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)IndexQuicklyForTypedArray, a2, this, v18, (uint64_t)a5, a6, a7, a8))
    {
      v13 = *(WTF::StringImpl **)(*(_QWORD *)(IndexQuicklyForTypedArray + 41952) + 8);
      if (!v13)
        goto LABEL_983;
      goto LABEL_194;
    }
    v105 = (uint64_t)v886;
    v15 = (unint64_t)v883;
  }
  if ((v105 & 0xFFFE000000000002) != 0)
    goto LABEL_876;
  v18 = v9;
  v106 = *(unsigned __int8 *)(v105 + 5);
  if (v106 != 2)
  {
    if (v106 == 4)
    {
      v13 = *(WTF::StringImpl **)(v105 + 8);
      v483 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 4;
      v21 = v483 + 2;
      if (v21)
        goto LABEL_9;
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, this, v9, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v484, v485, v486, v487, v488, v489, v490, v491);
      goto LABEL_984;
    }
LABEL_876:
    v492 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v886, v15, (JSC::Structure *)1, v18, (uint64_t)a5, a6, a7, a8);
    v18 = v9;
    v105 = (uint64_t)v492;
  }
  if (!*(_DWORD *)(IndexQuicklyForTypedArray + 80)
    || (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)IndexQuicklyForTypedArray, a2, this, v18, (uint64_t)a5, a6, a7, a8), v18 = v9, !hasExceptionsAfterHandlingTraps))
  {
    v13 = *(WTF::StringImpl **)(v105 + 8);
    IndexQuicklyForTypedArray = *(_QWORD *)(v15 + 56);
    if ((v13 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v105, (JSC::JSGlobalObject *)v15);
      if (*(_DWORD *)(IndexQuicklyForTypedArray + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)IndexQuicklyForTypedArray, a2, this, v544, (uint64_t)a5, a6, a7, a8))
      {
        v13 = 0;
        v545 = v903;
        v903 = 0;
        if (!v545)
          goto LABEL_983;
      }
      else
      {
        v13 = v903;
        if (!v903)
          goto LABEL_983;
        *(_DWORD *)v903 += 2;
        v903 = 0;
        v545 = v13;
      }
      if (*(_DWORD *)v545 == 2)
      {
        WTF::StringImpl::~StringImpl(v545, (WTF::AtomStringImpl *)a2, this, v544, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v569, v570, v571, v572, v573, v574, v575, v576);
      }
      else
      {
        *(_DWORD *)v545 -= 2;
      }
      goto LABEL_983;
    }
    if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
    {
LABEL_8:
      v21 = *(_DWORD *)v13 + 2;
LABEL_9:
      *(_DWORD *)v13 = v21;
      goto LABEL_10;
    }
    v107 = *(WTF::StringImpl **)(IndexQuicklyForTypedArray + 64768);
    if (v107 != v13)
    {
      *(_DWORD *)v13 += 2;
      *(_QWORD *)(IndexQuicklyForTypedArray + 64768) = v13;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v661, v662, v663, v664, v665, v666, v667, v668);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
      v108 = *(WTF::StringImpl **)(v105 + 8);
      if (v108)
      {
        if ((*((_BYTE *)v108 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v108 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v108, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, (WTF *)&v903);
          v108 = v903;
        }
      }
      v109 = *(WTF::StringImpl **)(IndexQuicklyForTypedArray + 64776);
      *(_QWORD *)(IndexQuicklyForTypedArray + 64776) = v108;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
        {
          WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v653, v654, v655, v656, v657, v658, v659, v660);
        }
        else
        {
          *(_DWORD *)v109 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v105 + 8) + 16) & 0x10) == 0)
    {
      v110 = *(WTF::StringImpl **)(IndexQuicklyForTypedArray + 64776);
      *(_DWORD *)v110 += 2;
      v903 = v110;
      __dmb(0xAu);
      v111 = *(WTF::StringImpl **)(v105 + 8);
      *(_QWORD *)(v105 + 8) = v903;
      v903 = v111;
      v112 = (_QWORD *)(IndexQuicklyForTypedArray + 808);
      v113 = *(unsigned int *)(IndexQuicklyForTypedArray + 820);
      if ((_DWORD)v113 == *(_DWORD *)(IndexQuicklyForTypedArray + 816))
      {
        v115 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v903);
        v113 = *(unsigned int *)(IndexQuicklyForTypedArray + 820);
        v114 = (WTF::StringImpl **)(*(_QWORD *)(IndexQuicklyForTypedArray + 808) + 8 * v113);
        v111 = *v115;
      }
      else
      {
        v114 = (WTF::StringImpl **)(*v112 + 8 * v113);
        v115 = &v903;
      }
      *v115 = 0;
      *v114 = v111;
      *(_DWORD *)(IndexQuicklyForTypedArray + 820) = v113 + 1;
      v116 = v903;
      v903 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
        {
          WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v603, v604, v605, v606, v607, v608, v609, v610);
        }
        else
        {
          *(_DWORD *)v116 -= 2;
        }
      }
    }
    v13 = *(WTF::StringImpl **)(IndexQuicklyForTypedArray + 64776);
LABEL_194:
    *(_DWORD *)v13 += 2;
LABEL_983:
    v15 = (unint64_t)v883;
LABEL_984:
    v18 = v9;
    goto LABEL_10;
  }
  v13 = 0;
LABEL_10:
  if (*(_DWORD *)(v16 + 80))
  {
    v532 = *(_DWORD *)(v16 + 80);
    if ((v532 & 0x27) != 0 && (v532 & 0x20) == 0)
    {
      v810 = v18;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
      v18 = v810;
    }
    if (*(_QWORD *)(v16 + 16))
    {
      IndexQuicklyForTypedArray = 0;
      goto LABEL_120;
    }
  }
  v878 = (JSC::JSCell *)v18;
  if (v13)
  {
    if (*(_BYTE *)(v884 + 5) != 4)
    {
      v22 = *((_DWORD *)v13 + 4);
      if ((v22 & 0x20) == 0)
      {
        v23 = (_BYTE *)*((_QWORD *)v13 + 1);
        v24 = *((unsigned int *)v13 + 1);
        if ((v22 & 4) != 0)
        {
          if ((_DWORD)v24)
          {
            v698 = *v23 - 48;
            if (v698 <= 9 && (v24 < 2 || *v23 != 48))
            {
              v699 = v24 - 1;
              v700 = v23 + 1;
              v15 = (unint64_t)v883;
              while (v699)
              {
                if (v698 <= 0x19999999)
                {
                  v701 = *v700 - 48;
                  if (v701 <= 9)
                  {
                    v556 = __CFADD__(v701, 10 * v698);
                    v698 = v701 + 10 * v698;
                    --v699;
                    ++v700;
                    if (!v556)
                      continue;
                  }
                }
                goto LABEL_17;
              }
              v15 = (unint64_t)v883;
              if (v698 != -1)
              {
LABEL_196:
                v76 = 1;
                goto LABEL_121;
              }
            }
          }
        }
        else if ((_DWORD)v24)
        {
          v25 = *(unsigned __int16 *)v23 - 48;
          if (v25 <= 9 && (*(_WORD *)v23 != 48 || v24 <= 1))
          {
            v68 = v24 - 1;
            v69 = (unsigned __int16 *)(v23 + 2);
            while (v68)
            {
              if (v25 <= 0x19999999)
              {
                v70 = *v69 - 48;
                if (v70 <= 9)
                {
                  v556 = __CFADD__(v70, 10 * v25);
                  v25 = v70 + 10 * v25;
                  --v68;
                  ++v69;
                  if (!v556)
                    continue;
                }
              }
              goto LABEL_17;
            }
            if (v25 != -1)
              goto LABEL_196;
          }
        }
      }
    }
  }
LABEL_17:
  v880 = v16;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v888 = (WTF *)0xFFFFFFFF00000000;
  LOBYTE(v892) = 0;
  v893 = 0;
  v894 = 0;
  v895 = 0;
  v890 = 0;
  memset(v891, 0, 13);
  v889 = v11;
  IndexQuicklyForTypedArray = *(_QWORD *)(v15 + 56);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_1450;
  v26 = *(unsigned __int8 *)(v11 + 5);
  v12 = *(_QWORD *)(v15 + 56);
  if (v26 > 0x16)
    goto LABEL_19;
  if (v26 != 2)
    goto LABEL_1450;
  if (*(WTF::StringImpl **)(*(_QWORD *)(IndexQuicklyForTypedArray + 41952) + 1768) == v13)
  {
    v776 = *(_QWORD *)(v11 + 8);
    if ((v776 & 1) != 0)
      v777 = (unsigned int *)(v11 + 16);
    else
      v777 = (unsigned int *)(v776 + 4);
    v778 = *v777;
    if ((v778 & 0x80000000) != 0)
    {
      *(double *)a9.i64 = (double)v778;
      Index = (WTF::StringImpl *)(COERCE__INT64((double)v778) + 0x2000000000000);
    }
    else
    {
      Index = (WTF::StringImpl *)(v778 | 0xFFFE000000000000);
    }
    v780 = 14;
LABEL_1434:
    v886 = Index;
    LODWORD(v888) = v780;
    v890 = 0;
    v879 = 1;
    BYTE1(v891[1]) = 1;
    v15 = (unint64_t)v883;
    if (!*(_DWORD *)(IndexQuicklyForTypedArray + 80))
      goto LABEL_63;
    goto LABEL_1435;
  }
  if (v13)
  {
    v786 = *((_DWORD *)v13 + 4);
    if ((v786 & 0x20) == 0)
    {
      v787 = (_BYTE *)*((_QWORD *)v13 + 1);
      v788 = *((unsigned int *)v13 + 1);
      if ((v786 & 4) != 0)
      {
        if ((_DWORD)v788)
        {
          this = *v787 - 48;
          if (this <= 9 && (v788 < 2 || *v787 != 48))
          {
            v819 = v787 + 1;
            v820 = v788 - 1;
            while (v820)
            {
              if (this <= 0x19999999)
              {
                v821 = *v819 - 48;
                if (v821 <= 9)
                {
                  v556 = __CFADD__(v821, 10 * this);
                  this = v821 + 10 * (_DWORD)this;
                  ++v819;
                  --v820;
                  if (!v556)
                    continue;
                }
              }
              goto LABEL_1449;
            }
LABEL_1638:
            if ((_DWORD)this != -1)
            {
              v822 = *(_QWORD *)(v11 + 8);
              v823 = (_DWORD *)((v822 & 1) != 0 ? v11 + 16 : v822 + 4);
              if (*v823 > this)
              {
                Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v11, (JSC::JSGlobalObject *)v883, this, v18, (uint64_t)a5, a6, a7, a8, (int8x16_t)a9);
                if (!*(_DWORD *)(IndexQuicklyForTypedArray + 80)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)IndexQuicklyForTypedArray, a2, this, v18, (uint64_t)a5, a6, a7, a8))
                {
                  v780 = 10;
                  goto LABEL_1434;
                }
              }
            }
          }
        }
      }
      else if ((_DWORD)v788)
      {
        this = *(unsigned __int16 *)v787 - 48;
        if (this <= 9 && (*(_WORD *)v787 != 48 || v788 <= 1))
        {
          v793 = (unsigned __int16 *)(v787 + 2);
          v794 = v788 - 1;
          while (v794)
          {
            if (this <= 0x19999999)
            {
              v795 = *v793 - 48;
              if (v795 <= 9)
              {
                v556 = __CFADD__(v795, 10 * this);
                this = v795 + 10 * (_DWORD)this;
                ++v793;
                --v794;
                if (!v556)
                  continue;
              }
            }
            goto LABEL_1449;
          }
          goto LABEL_1638;
        }
      }
    }
  }
LABEL_1449:
  v15 = (unint64_t)v883;
  if (*(_DWORD *)(IndexQuicklyForTypedArray + 80))
  {
    v879 = 0;
LABEL_1435:
    v781 = v879;
    v782 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)IndexQuicklyForTypedArray, a2, this, v18, (uint64_t)a5, a6, a7, a8);
    v879 &= !v782;
    if ((v781 & 1) != 0)
    {
      v15 = (unint64_t)v883;
      goto LABEL_63;
    }
    v15 = (unint64_t)v883;
    if (v782)
      goto LABEL_63;
  }
LABEL_1450:
  v789 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v885, v15);
  if (!v789)
    goto LABEL_62;
  v11 = v789;
  v12 = *(_QWORD *)(v15 + 56);
LABEL_19:
  v9 = v11 + 6;
  v27 = (unint64_t)v13 >> 4;
  v28 = v11;
  if ((*(_BYTE *)(v11 + 6) & 8) != 0)
  {
LABEL_878:
    if (v13)
    {
      v493 = *((_DWORD *)v13 + 4);
      if ((v493 & 0x20) == 0)
      {
        v494 = (_BYTE *)*((_QWORD *)v13 + 1);
        v495 = *((unsigned int *)v13 + 1);
        if ((v493 & 4) != 0)
        {
          if ((_DWORD)v495)
          {
            v496 = *v494 - 48;
            if (v496 <= 9 && (v495 < 2 || *v494 != 48))
            {
              v806 = v494 + 1;
              v807 = v495 - 1;
              v15 = (unint64_t)v883;
              while (v807)
              {
                if (v496 <= 0x19999999)
                {
                  v808 = *v806 - 48;
                  if (v808 <= 9)
                  {
                    v556 = __CFADD__(v808, 10 * v496);
                    v496 = v808 + 10 * (_DWORD)v496;
                    ++v806;
                    --v807;
                    if (!v556)
                      continue;
                  }
                }
                goto LABEL_883;
              }
              v15 = (unint64_t)v883;
              if ((_DWORD)v496 != -1)
                goto LABEL_1003;
            }
          }
        }
        else if ((_DWORD)v495)
        {
          v496 = *(unsigned __int16 *)v494 - 48;
          if (v496 <= 9 && (*(_WORD *)v494 != 48 || v495 <= 1))
          {
            v541 = (unsigned __int16 *)(v494 + 2);
            v542 = v495 - 1;
            while (v542)
            {
              if (v496 <= 0x19999999)
              {
                v543 = *v541 - 48;
                if (v543 <= 9)
                {
                  v556 = __CFADD__(v543, 10 * v496);
                  v496 = v543 + 10 * (_DWORD)v496;
                  ++v541;
                  --v542;
                  if (!v556)
                    continue;
                }
              }
              goto LABEL_883;
            }
            if ((_DWORD)v496 != -1)
            {
LABEL_1003:
              v548 = *(JSC::VM **)(v15 + 56);
              v9 = 0xFFFE000000000002;
              while (1)
              {
                v549 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v550 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v549 + 0x4C) + 0x70))(v11, v15, v496, &v886);
                v12 = v550;
                if (*((_DWORD *)v548 + 20))
                {
                  v685 = JSC::VM::hasExceptionsAfterHandlingTraps(v548, a2, this, v18, (uint64_t)a5, a6, a7, a8);
                  if (((v685 | v12) & 1) != 0)
                  {
LABEL_1191:
                    v643 = !v685;
LABEL_1165:
                    v879 = v643;
LABEL_1166:
                    v15 = (unint64_t)v883;
                    goto LABEL_63;
                  }
                }
                else if ((v550 & 1) != 0)
                {
LABEL_1164:
                  v643 = 1;
                  goto LABEL_1165;
                }
                if (BYTE2(v891[1]) == 3)
                {
                  if (BYTE4(v891[1]))
                    goto LABEL_1270;
                  v551 = *(unsigned __int8 *)(v11 + 5);
                  if (v551 == 61)
                    goto LABEL_1009;
                }
                else
                {
                  v551 = *(unsigned __int8 *)(v11 + 5);
                  if (v551 == 61)
                  {
                    if (BYTE2(v891[1]) == 1)
                      goto LABEL_1270;
                    goto LABEL_1009;
                  }
                }
                if ((v551 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8) <= v496)
                {
                  goto LABEL_1270;
                }
LABEL_1009:
                if ((*(_WORD *)(v549 + 12) & 0x800) == 0 || BYTE2(v891[1]) == 3)
                {
                  v12 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v12)
                    v12 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v12 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v11, v883);
                  }
                  else
                  {
                    v12 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v12)
                      v12 = *(_QWORD *)(v11 + 16);
                  }
                  if (*((_DWORD *)v548 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v548, a2, this, v18, (uint64_t)a5, a6, a7, a8))
                  {
                    goto LABEL_1270;
                  }
                }
                if ((v12 & 0xFFFE000000000002) != 0)
                  goto LABEL_1270;
                v879 = 0;
                v11 = v12;
                v15 = (unint64_t)v883;
                if (*(unsigned __int8 *)(v12 + 5) <= 0x16u)
                  goto LABEL_63;
              }
            }
          }
        }
      }
    }
LABEL_883:
    v11 = *(_QWORD *)(v15 + 56);
    while (1)
    {
      v12 = 16 * (*(_DWORD *)v28 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v28 + 6) & 8) != 0)
      {
        v641 = (*(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) + 0x68))(v28, v15, v13, &v886);
        v642 = v641;
        if (*(_DWORD *)(v11 + 80))
        {
          v685 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8);
          if (((v685 | v642) & 1) != 0)
            goto LABEL_1191;
        }
        else if ((v641 & 1) != 0)
        {
          goto LABEL_1164;
        }
        if (BYTE2(v891[1]) == 3)
        {
          if (BYTE4(v891[1]))
            goto LABEL_1270;
          v757 = *(unsigned __int8 *)(v28 + 5);
          if (v757 == 61)
          {
LABEL_1390:
            v15 = (unint64_t)v883;
            goto LABEL_890;
          }
LABEL_1372:
          if (!v13)
            goto LABEL_1390;
          if ((v757 - 50) < 0xFFFFFFF5)
            goto LABEL_1390;
          v758 = *((_DWORD *)v13 + 4);
          if ((v758 & 0x20) != 0)
            goto LABEL_1390;
          v759 = *((unsigned int *)v13 + 1);
          if (!(_DWORD)v759)
            goto LABEL_1390;
          v760 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
          if ((v758 & 4) == 0)
          {
            v761 = *(unsigned __int16 *)v760;
            if ((_DWORD)v759 == 1)
              goto LABEL_1378;
            if (v761 == 45)
            {
              v761 = *((unsigned __int16 *)v760 + 1);
              goto LABEL_1382;
            }
            if ((v761 - 48) >= 0xA && ((_DWORD)v759 != 8 || v761 != 73))
            {
LABEL_1393:
              if ((_DWORD)v759 != 3 || v761 != 78)
                goto LABEL_1390;
            }
LABEL_1386:
            v9 = v9 & 0xFFFFFF0000000000 | v759 | ((unint64_t)((v758 >> 2) & 1) << 32);
            JSC::jsToNumber(v760, v9);
            WTF::numberToString(&v903, v762);
            v15 = (unint64_t)v883;
            if (WTF::equal((unint64_t)v13, (unint64_t)&v903, v763))
              goto LABEL_62;
            goto LABEL_890;
          }
          v761 = *v760;
          if ((_DWORD)v759 == 1)
          {
LABEL_1378:
            v15 = (unint64_t)v883;
            if ((v761 - 48) < 0xA)
              goto LABEL_62;
            goto LABEL_890;
          }
          if (v761 == 45)
          {
            v761 = v760[1];
LABEL_1382:
            if ((v761 - 48) < 0xA)
            {
              if ((_DWORD)v759 == 2)
                goto LABEL_1270;
              goto LABEL_1386;
            }
            if ((_DWORD)v759 != 9)
              goto LABEL_1390;
          }
          else
          {
            if ((v761 - 48) < 0xA)
              goto LABEL_1386;
            if ((_DWORD)v759 != 8)
              goto LABEL_1393;
          }
          if (v761 != 73)
            goto LABEL_1390;
          goto LABEL_1386;
        }
        v757 = *(unsigned __int8 *)(v28 + 5);
        if (v757 != 61)
          goto LABEL_1372;
        v15 = (unint64_t)v883;
        if (BYTE2(v891[1]) == 1)
          goto LABEL_62;
      }
      else
      {
        if ((_DWORD)v27)
        {
          if ((v27 & ~*(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)), (JSC::VM *)v11, this, (const JSC::PropertyTable *)v18, (uint64_t)a5, a6, a7, a8);
            if (v497)
            {
              v903 = v13;
              v498 = JSC::PropertyTable::get(v497, (uint64_t *)&v903);
              a6 = v498;
              if ((_DWORD)v498 != -1)
              {
                a5 = (JSC::Structure *)HIDWORD(v498);
                if ((int)v498 <= 63)
                {
                  v534 = v28 + 16;
                  v535 = v498 << 32;
                }
                else
                {
                  v534 = *(_QWORD *)(v28 + 8) - 8;
                  v535 = 0x3F00000000 - (v498 << 32);
                }
                v18 = *(_QWORD *)(v534 + (v535 >> 29));
                if ((v18 & 0xFFFE000000000002) != 0)
                  goto LABEL_954;
                v536 = *(unsigned __int8 *)(v18 + 5);
                if (v536 == 5)
                {
                  v248 = (unsigned int *)v28;
                  v249 = v11;
                  goto LABEL_452;
                }
                if (v536 != 6)
                {
LABEL_954:
                  v886 = (WTF::StringImpl *)v18;
                  v890 = (JSC::JSString *)v28;
                  goto LABEL_91;
                }
                v339 = *(_DWORD *)(v12 + 16) & 3;
                v600 = *(JSC::InlineCacheHandler **)(v18 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v602 = *(int8x16_t ***)(v18 + 24);
                  v601 = *(_QWORD *)(v18 + 32);
                  v886 = *(WTF::StringImpl **)(v18 + 8);
                  v887 = v600;
                  LODWORD(v888) = HIDWORD(v498);
                  v890 = (JSC::JSString *)v28;
                  BYTE1(v891[1]) = 3;
                  if (v339 != 2)
                    LOBYTE(v891[1]) = 1;
                  v879 = 1;
                  BYTE3(v891[1]) = 1;
                  v894 = v602;
                  v895 = v601;
                  goto LABEL_1166;
                }
                v886 = *(WTF::StringImpl **)(v18 + 8);
                v887 = v600;
                LODWORD(v888) = HIDWORD(v498);
                v890 = (JSC::JSString *)v28;
LABEL_1016:
                v879 = 1;
                BYTE1(v891[1]) = 3;
                if (v339 != 2)
                  LOBYTE(v891[1]) = 1;
                goto LABEL_1166;
              }
            }
          }
        }
        if ((*(_BYTE *)(v28 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, (JSC::VM *)v11, (unint64_t)v13, (uint64_t)&v886) & 1) != 0)
        {
          goto LABEL_453;
        }
      }
LABEL_890:
      if ((*(_WORD *)(v12 + 12) & 0x800) == 0)
      {
        v499 = *(_DWORD *)v28;
LABEL_892:
        v500 = *(_QWORD *)(16 * (v499 & 0xFFFFFFFE) + 0x30);
        if (!v500)
          v500 = *(_QWORD *)(v28 + 16);
        goto LABEL_894;
      }
      v499 = *(_DWORD *)v28;
      if (BYTE2(v891[1]) == 3)
        goto LABEL_892;
      v631 = 16 * (v499 & 0xFFFFFFFE);
      if ((*(_WORD *)(v631 + 12) & 0x800) != 0)
      {
        v500 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v631 + 76)
                                                                               + 0xB0))(v28, v883);
      }
      else
      {
        v500 = *(_QWORD *)(v631 + 48);
        if (!v500)
          v500 = *(_QWORD *)(v28 + 16);
      }
      if (*(_DWORD *)(v11 + 80))
      {
        v15 = (unint64_t)v883;
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8))
          goto LABEL_62;
      }
      else
      {
        v15 = (unint64_t)v883;
      }
LABEL_894:
      if ((v500 & 0xFFFE000000000002) != 0)
        goto LABEL_62;
      v879 = 0;
      v28 = v500;
      if (*(unsigned __int8 *)(v500 + 5) <= 0x16u)
        goto LABEL_63;
    }
  }
  v16 = v11;
  while (1)
  {
    v29 = *(_DWORD *)v16 & 0xFFFFFFFE;
    v30 = 16 * v29;
    if (!(_DWORD)v27 || (v27 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
      goto LABEL_32;
    v31 = *(_QWORD *)(16 * v29 + 0x58);
    if (!v31)
    {
      v42 = *(_QWORD *)(16 * v29 + 0x40);
      if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
        goto LABEL_32;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v30, (JSC::VM *)v12, 1, (const JSC::PropertyTable *)v18, (uint64_t)a5, a6, a7, a8);
      if (!v31)
        goto LABEL_32;
    }
    if (!*(_DWORD *)(v31 + 24))
      goto LABEL_32;
    v32 = *(_QWORD *)(v31 + 16);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(unsigned int *)(v31 + 8);
    v35 = *((_DWORD *)v13 + 4);
    if ((v32 & 1) != 0)
    {
      if ((v35 & 0x20) != 0)
        v35 = *((_DWORD *)v13 + 8);
      v36 = *(_DWORD *)(v31 + 12);
      v37 = (v35 >> 8) & *(_QWORD *)&v36;
      v38 = *(unsigned __int8 *)(v33 + v37);
      if (!*(_BYTE *)(v33 + v37))
        goto LABEL_32;
      v39 = v33 + v34;
      v40 = 1;
      while (1)
      {
        v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
        if (v13 == (WTF::StringImpl *)(v41 & 0xFFFFFFFFFFFFLL))
          break;
        v37 = ((_DWORD)v37 + v40) & v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        ++v40;
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_32;
      }
      a6 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
    }
    else
    {
      if ((v35 & 0x20) != 0)
        v35 = *((_DWORD *)v13 + 8);
      v43 = *(_DWORD *)(v31 + 12);
      v44 = v43 & (v35 >> 8);
      v45 = *(_DWORD *)(v33 + 4 * v44);
      if (!v45)
        goto LABEL_32;
      v46 = v33 + 4 * v34;
      v47 = 1;
      while (1)
      {
        v48 = (v45 - 1);
        if (v13 == *(WTF::StringImpl **)(v46 + 16 * v48))
          break;
        v44 = (v44 + v47) & v43;
        v45 = *(_DWORD *)(v33 + 4 * v44);
        ++v47;
        if (!v45)
          goto LABEL_32;
      }
      a6 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = (JSC::Structure *)HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v65 = v16 + 16;
        v66 = a6 << 32;
      }
      else
      {
        v65 = *(_QWORD *)(v16 + 8) - 8;
        v66 = 0x3F00000000 - (a6 << 32);
      }
      v18 = *(_QWORD *)(v65 + (v66 >> 29));
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_90;
      v67 = *(unsigned __int8 *)(v18 + 5);
      if (v67 == 5)
        goto LABEL_451;
      if (v67 != 6)
      {
LABEL_90:
        v886 = (WTF::StringImpl *)v18;
        v890 = (JSC::JSString *)v16;
LABEL_91:
        v888 = (WTF *)__PAIR64__(a6, a5);
        v879 = 1;
        LOWORD(v891[1]) = 257;
        goto LABEL_63;
      }
      v339 = *(_DWORD *)(v30 + 16) & 3;
      v340 = *(JSC::InlineCacheHandler **)(v18 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v342 = *(int8x16_t ***)(v18 + 24);
        v341 = *(_QWORD *)(v18 + 32);
        v886 = *(WTF::StringImpl **)(v18 + 8);
        v887 = v340;
        LODWORD(v888) = HIDWORD(a6);
        v890 = (JSC::JSString *)v16;
        BYTE1(v891[1]) = 3;
        if (v339 != 2)
          LOBYTE(v891[1]) = 1;
        v879 = 1;
        BYTE3(v891[1]) = 1;
        v894 = v342;
        v895 = v341;
        goto LABEL_63;
      }
      v886 = *(WTF::StringImpl **)(v18 + 8);
      v887 = v340;
      LODWORD(v888) = HIDWORD(a6);
      v890 = (JSC::JSString *)v16;
      goto LABEL_1016;
    }
LABEL_32:
    if ((*(_BYTE *)v9 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, (JSC::VM *)v12, (unint64_t)v13, (uint64_t)&v886) & 1) != 0)
    {
      goto LABEL_453;
    }
    v28 = *(_QWORD *)(v30 + 48);
    if (!v28)
      v28 = *(_QWORD *)(v16 + 16);
    if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) < 0x17u)
      break;
    v9 = v28 + 6;
    v16 = v28;
    if ((*(_BYTE *)(v28 + 6) & 8) != 0)
      goto LABEL_878;
  }
  if (!v13)
    goto LABEL_62;
  v50 = *((_DWORD *)v13 + 4);
  if ((v50 & 0x20) != 0)
    goto LABEL_62;
  v51 = (_WORD *)*((_QWORD *)v13 + 1);
  v52 = *((unsigned int *)v13 + 1);
  if ((v50 & 4) == 0)
  {
    if ((_DWORD)v52)
    {
      v53 = (unsigned __int16)*v51 - 48;
      if (v53 <= 9 && (*v51 != 48 || v52 <= 1))
      {
        v190 = v51 + 1;
        v191 = v52 - 1;
        while (v191)
        {
          if (v53 > 0x19999999)
            goto LABEL_62;
          v192 = *v190 - 48;
          if (v192 > 9)
            goto LABEL_62;
          v879 = 0;
          v556 = __CFADD__(v192, 10 * v53);
          v53 = v192 + 10 * (_DWORD)v53;
          ++v190;
          --v191;
          if (v556)
            goto LABEL_63;
        }
        if ((_DWORD)v53 != -1)
          goto LABEL_432;
      }
    }
    goto LABEL_62;
  }
  if (!(_DWORD)v52)
    goto LABEL_1270;
  v53 = *(unsigned __int8 *)v51 - 48;
  if (v53 > 9 || v52 >= 2 && *(_BYTE *)v51 == 48)
    goto LABEL_1270;
  v707 = (unsigned __int8 *)v51 + 1;
  v708 = v52 - 1;
  v15 = (unint64_t)v883;
  while (v708)
  {
    if (v53 > 0x19999999)
      goto LABEL_1270;
    v709 = *v707 - 48;
    if (v709 > 9)
      goto LABEL_1270;
    v879 = 0;
    v556 = __CFADD__(v709, 10 * v53);
    v53 = v709 + 10 * (_DWORD)v53;
    ++v707;
    --v708;
    if (v556)
      goto LABEL_63;
  }
  v15 = (unint64_t)v883;
  if ((_DWORD)v53 == -1)
    goto LABEL_62;
LABEL_432:
  v244 = *(_QWORD *)(v15 + 56);
  while (1)
  {
    v245 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
    v246 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v245 + 0x4C) + 0x70))(v11, v15, v53, &v886);
    v12 = v246;
    if (!*(_DWORD *)(v244 + 80))
      break;
    v561 = *(_DWORD *)(v244 + 80);
    if ((v561 & 0x27) != 0 && (v561 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v244 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
    v562 = *(_QWORD *)(v244 + 16);
    v563 = v562 == 0;
    if (v562)
      v564 = 1;
    else
      v564 = v12;
    v15 = (unint64_t)v883;
    if ((v564 & 1) != 0)
    {
      v565 = v563;
      v879 = v565;
      goto LABEL_63;
    }
LABEL_435:
    if (BYTE2(v891[1]) == 3)
    {
      if (!BYTE4(v891[1]))
      {
        v247 = *(unsigned __int8 *)(v11 + 5);
        v15 = (unint64_t)v883;
        if (v247 == 61)
          goto LABEL_438;
        goto LABEL_437;
      }
LABEL_1270:
      v879 = 0;
      goto LABEL_1166;
    }
    v247 = *(unsigned __int8 *)(v11 + 5);
    if (v247 != 61)
    {
LABEL_437:
      if ((v247 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8) <= v53)
      {
        goto LABEL_62;
      }
      goto LABEL_438;
    }
    if (BYTE2(v891[1]) == 1)
      goto LABEL_62;
LABEL_438:
    if ((*(_WORD *)(v245 + 12) & 0x800) == 0 || BYTE2(v891[1]) == 3)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
      if (!v12)
        v12 = *(_QWORD *)(v11 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v12 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v11, v883);
      }
      else
      {
        v12 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v12)
          v12 = *(_QWORD *)(v11 + 16);
      }
      if (*(_DWORD *)(v244 + 80))
      {
        v15 = (unint64_t)v883;
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v244, a2, this, v18, (uint64_t)a5, a6, a7, a8))
          goto LABEL_62;
      }
      else
      {
        v15 = (unint64_t)v883;
      }
    }
    if ((v12 & 0xFFFE000000000002) != 0)
    {
LABEL_62:
      v879 = 0;
      goto LABEL_63;
    }
    v879 = 0;
    v11 = v12;
    if (*(unsigned __int8 *)(v12 + 5) <= 0x16u)
      goto LABEL_63;
  }
  if ((v246 & 1) == 0)
    goto LABEL_435;
LABEL_453:
  while (2)
  {
    v879 = 1;
LABEL_63:
    v54 = v884;
    if (*(_DWORD *)(IndexQuicklyForTypedArray + 80))
    {
      v540 = *(_DWORD *)(IndexQuicklyForTypedArray + 80);
      if ((v540 & 0x27) != 0 && (v540 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(IndexQuicklyForTypedArray + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(IndexQuicklyForTypedArray + 16))
      {
        IndexQuicklyForTypedArray = 0;
        v16 = v880;
        goto LABEL_117;
      }
    }
    if (!byte_1ECF4C6B7)
      goto LABEL_105;
    v55 = v885;
    if (((unint64_t)v885 & 0xFFFE000000000002) != 0)
      v56 = 0;
    else
      v56 = (unsigned __int8 *)(16 * *(unsigned int *)(16 * (*(_DWORD *)v885 & 0xFFFFFFFE) + 0x4C));
    v57 = v890;
    LODWORD(v903) = 13;
    v904 = v56;
    v58 = *((_DWORD *)v13 + 4);
    if ((v58 & 0x20) != 0)
    {
      *(_DWORD *)v13 += 2;
      v59 = v13;
    }
    else
    {
      if ((v58 & 0x10) != 0)
      {
        *(_DWORD *)v13 += 2;
        v59 = v13;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v880 + 41912), (unint64_t)v13, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, &v897);
        v59 = v897;
      }
      v60 = *(_DWORD *)v59;
      *(_DWORD *)v59 += 2;
      if (v60)
      {
        *(_DWORD *)v59 = v60;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
      }
    }
    v905 = v59;
    v11 = 1;
    if (v55 == v57)
      v61 = 1;
    else
      v61 = 2;
    LODWORD(v906) = v61;
    v9 = (unint64_t)&JSC::ICStats::s_instance;
    casual = atomic_load(&JSC::ICStats::s_instance);
    if (casual)
      goto LABEL_76;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (2)
    {
      v127 = *(_QWORD *)(StatusReg + 752);
      if (!v127)
        goto LABEL_1029;
      v128 = (_BYTE *)(v127 + 8488);
      *(_BYTE *)(v127 + 8488) = 1;
      v129 = *(unsigned int *)(v127 + 8504);
      if ((_DWORD)v129)
      {
        *(_DWORD *)(v127 + 8504) = v129 - *(_DWORD *)(v127 + 8508);
        casual = *(_QWORD *)(v127 + 8496) - v129;
        goto LABEL_218;
      }
      v168 = *(_QWORD *)(v127 + 8528);
      v169 = *(_QWORD *)(v127 + 8512);
      if (!v168)
      {
        if (*(_BYTE *)(v127 + 8493) == 6)
        {
          v502 = *(_DWORD *)(v127 + 8524);
          v503 = *(unsigned int *)(v127 + 8520);
          if (v503 < v502)
          {
            *(_QWORD *)&v128[8 * v503 + 56] = 0;
            v504 = (unint64_t *)(v127 + 8 * v503 + 8552);
            v505 = v502 - 1 - v503;
            while (v505)
            {
              v169 += 1024;
              v507 = *v504++;
              v506 = v507;
              LODWORD(v503) = v503 + 1;
              --v505;
              if (v507)
              {
                v168 = __rbit64(v506);
                *(_DWORD *)(v127 + 8520) = v503;
                *(_QWORD *)(v127 + 8512) = v169;
                v9 = (unint64_t)&JSC::ICStats::s_instance;
                goto LABEL_293;
              }
            }
            *(_DWORD *)(v127 + 8520) = v502;
            v9 = (unint64_t)&JSC::ICStats::s_instance;
          }
        }
        *v128 = 0;
LABEL_1029:
        casual = bmalloc_allocate_casual(32, 1);
        goto LABEL_219;
      }
LABEL_293:
      v170 = __clz(v168);
      *(_QWORD *)(v127 + 8528) = v168 & ~(0x8000000000000000 >> v170);
      casual = v169 + 16 * v170;
LABEL_218:
      *v128 = 0;
LABEL_219:
      *(_BYTE *)casual = 0;
      *(_QWORD *)(casual + 8) = 0;
      *(_QWORD *)(casual + 16) = 0;
      *(_DWORD *)(casual + 23) = 0;
      v130 = *(_QWORD *)(StatusReg + 752);
      if (!v130)
        goto LABEL_1032;
      v131 = (_BYTE *)(v130 + 8304);
      *(_BYTE *)(v130 + 8304) = 1;
      v132 = *(unsigned int *)(v130 + 8320);
      if ((_DWORD)v132)
      {
        *(_DWORD *)(v130 + 8320) = v132 - *(_DWORD *)(v130 + 8324);
        v133 = (_QWORD *)(*(_QWORD *)(v130 + 8312) - v132);
        goto LABEL_222;
      }
      v171 = *(_QWORD *)(v130 + 8344);
      v172 = *(_QWORD *)(v130 + 8328);
      if (!v171)
      {
        if (*(_BYTE *)(v130 + 8309) == 6)
        {
          v508 = *(_DWORD *)(v130 + 8340);
          v509 = *(unsigned int *)(v130 + 8336);
          if (v509 < v508)
          {
            *(_QWORD *)&v131[8 * v509 + 56] = 0;
            v510 = (unint64_t *)(v130 + 8 * v509 + 8368);
            v511 = v508 - 1 - v509;
            while (v511)
            {
              v172 += 1024;
              v513 = *v510++;
              v512 = v513;
              LODWORD(v509) = v509 + 1;
              --v511;
              if (v513)
              {
                v171 = __rbit64(v512);
                *(_DWORD *)(v130 + 8336) = v509;
                *(_QWORD *)(v130 + 8328) = v172;
                v9 = (unint64_t)&JSC::ICStats::s_instance;
                goto LABEL_295;
              }
            }
            *(_DWORD *)(v130 + 8336) = v508;
            v9 = (unint64_t)&JSC::ICStats::s_instance;
          }
        }
        *v131 = 0;
LABEL_1032:
        v133 = (_QWORD *)bmalloc_allocate_casual(16, 1);
        goto LABEL_223;
      }
LABEL_295:
      v173 = __clz(v171);
      *(_QWORD *)(v130 + 8344) = v171 & ~(0x8000000000000000 >> v173);
      v133 = (_QWORD *)(v172 + 16 * v173);
LABEL_222:
      *v131 = 0;
LABEL_223:
      *v133 = off_1E3595840;
      v133[1] = casual;
      v902 = (uint64_t)v133;
      WTF::Thread::create((uint64_t)"JSC ICStats", 12, &v902, 1, 0, (uint64_t *)&v897);
      v134 = v897;
      v897 = 0;
      v135 = *(_QWORD *)(casual + 16);
      *(_QWORD *)(casual + 16) = v134;
      if (v135)
      {
        do
        {
          v136 = __ldaxr((unsigned int *)v135);
          v137 = v136 - 1;
        }
        while (__stlxr(v137, (unsigned int *)v135));
        if (!v137)
        {
          atomic_store(1u, (unsigned int *)v135);
          v446 = *(unsigned int **)(v135 + 96);
          *(_QWORD *)(v135 + 96) = 0;
          if (v446)
          {
            v447 = v446 + 2;
            do
            {
              v175 = __ldaxr(v447);
              v176 = v175 - 1;
            }
            while (__stlxr(v176, v447));
            if (!v176)
            {
              atomic_store(1u, v446 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v446 + 8))(v446);
            }
          }
          WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v135 + 64), (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          v455 = *(_QWORD *)(v135 + 32);
          if (v455)
          {
            v876 = *(_QWORD *)(v135 + 32);
            v12 = *(unsigned int *)(v455 - 4);
            if ((_DWORD)v12)
            {
              v456 = (std::__shared_weak_count **)(v876 + 16);
              do
              {
                if (*(v456 - 2) != (std::__shared_weak_count *)-1 && *v456)
                  std::__shared_weak_count::__release_weak(*v456);
                v456 += 3;
                --v12;
              }
              while (v12);
            }
            WTF::fastFree(v876 - 16, v448, v449, v450, v451, v452, v453, v454);
            v9 = (unint64_t)&JSC::ICStats::s_instance;
          }
          WTF::fastFree(v135, v448, v449, v450, v451, v452, v453, v454);
        }
        v138 = v897;
        v897 = 0;
        if (v138)
        {
          do
          {
            v139 = __ldaxr((unsigned int *)v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, (unsigned int *)v138));
          if (!v140)
          {
            atomic_store(1u, (unsigned int *)v138);
            v472 = (unsigned int *)*((_QWORD *)v138 + 12);
            *((_QWORD *)v138 + 12) = 0;
            if (v472)
            {
              v473 = v472 + 2;
              do
              {
                v179 = __ldaxr(v473);
                v180 = v179 - 1;
              }
              while (__stlxr(v180, v473));
              if (!v180)
              {
                atomic_store(1u, v472 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v472 + 8))(v472);
              }
            }
            WTF::AtomStringTable::~AtomStringTable((JSC::ScopedArguments *)((char *)v138 + 64), (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            v188 = *((_QWORD *)v138 + 4);
            if (v188)
            {
              v875 = *((_QWORD *)v138 + 4);
              v12 = *(unsigned int *)(v188 - 4);
              if ((_DWORD)v12)
              {
                v189 = (std::__shared_weak_count **)(v875 + 16);
                do
                {
                  if (*(v189 - 2) != (std::__shared_weak_count *)-1 && *v189)
                    std::__shared_weak_count::__release_weak(*v189);
                  v189 += 3;
                  --v12;
                }
                while (v12);
              }
              WTF::fastFree(v875 - 16, v181, v182, v183, v184, v185, v186, v187);
              v9 = (unint64_t)&JSC::ICStats::s_instance;
            }
            WTF::fastFree((unint64_t)v138, v181, v182, v183, v184, v185, v186, v187);
          }
        }
      }
      v141 = v902;
      v902 = 0;
      if (v141)
        (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
      if (__ldaxr(&JSC::ICStats::s_instance))
      {
        __clrex();
        goto LABEL_233;
      }
      if (__stlxr(casual, &JSC::ICStats::s_instance))
      {
LABEL_233:
        v143 = (unsigned __int8 *)(casual + 24);
        if (__ldaxr((unsigned __int8 *)(casual + 24)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v143))
        {
LABEL_236:
          *(_BYTE *)(casual + 26) = 1;
          v145 = (unsigned __int8 *)(casual + 25);
          v146 = atomic_load((unsigned __int8 *)(casual + 25));
          if ((v146 & 1) != 0)
          {
            atomic_store(0, v145);
            WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v145, (const void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            v174 = __ldxr(v143);
            if (v174 == 1)
            {
LABEL_238:
              if (!__stlxr(0, v143))
                goto LABEL_239;
              goto LABEL_304;
            }
          }
          else
          {
            v147 = __ldxr(v143);
            if (v147 == 1)
              goto LABEL_238;
          }
          __clrex();
LABEL_304:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(casual + 24), 0, this, v18, (uint64_t)a5, a6, a7, a8);
LABEL_239:
          v148 = *(_QWORD *)(casual + 16);
          v149 = (unint64_t *)(v148 + 8);
          if (__ldaxr((unint64_t *)(v148 + 8)))
          {
            __clrex();
          }
          else if (!__stxr(1uLL, v149))
          {
LABEL_242:
            v12 = *(_QWORD *)(v148 + 40);
            v151 = __ldxr(v149);
            if (v151 == 1)
            {
              if (!__stlxr(0, v149))
                goto LABEL_244;
            }
            else
            {
              __clrex();
            }
            WTF::WordLock::unlockSlow((WTF::WordLock *)(v148 + 8));
LABEL_244:
            pthread_join((pthread_t)v12, 0);
            if (__ldaxr(v149))
            {
              __clrex();
            }
            else if (!__stxr(1uLL, v149))
            {
LABEL_247:
              if ((*(_BYTE *)(v148 + 5) & 2) == 0)
                *(_BYTE *)(v148 + 4) = 1;
              v153 = __ldxr(v149);
              if (v153 == 1)
              {
                v9 = (unint64_t)&JSC::ICStats::s_instance;
                if (!__stlxr(0, v149))
                  goto LABEL_256;
              }
              else
              {
                __clrex();
                v9 = (unint64_t)&JSC::ICStats::s_instance;
              }
              WTF::WordLock::unlockSlow((WTF::WordLock *)v149);
LABEL_256:
              v154 = *(_QWORD *)(casual + 16);
              *(_QWORD *)(casual + 16) = 0;
              if (v154)
              {
                do
                {
                  v155 = __ldaxr((unsigned int *)v154);
                  v156 = v155 - 1;
                }
                while (__stlxr(v156, (unsigned int *)v154));
                if (!v156)
                {
                  atomic_store(1u, (unsigned int *)v154);
                  v457 = *(unsigned int **)(v154 + 96);
                  *(_QWORD *)(v154 + 96) = 0;
                  if (v457)
                  {
                    v458 = v457 + 2;
                    do
                    {
                      v177 = __ldaxr(v458);
                      v178 = v177 - 1;
                    }
                    while (__stlxr(v178, v458));
                    if (!v178)
                    {
                      atomic_store(1u, v457 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v457 + 8))(v457);
                    }
                  }
                  WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v154 + 64), (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
                  v466 = *(_QWORD *)(v154 + 32);
                  if (v466)
                  {
                    v877 = *(_QWORD *)(v154 + 32);
                    v12 = *(unsigned int *)(v466 - 4);
                    if ((_DWORD)v12)
                    {
                      v467 = (std::__shared_weak_count **)(v877 + 16);
                      do
                      {
                        if (*(v467 - 2) != (std::__shared_weak_count *)-1 && *v467)
                          std::__shared_weak_count::__release_weak(*v467);
                        v467 += 3;
                        --v12;
                      }
                      while (v12);
                    }
                    WTF::fastFree(v877 - 16, v459, v460, v461, v462, v463, v464, v465);
                    v9 = (unint64_t)&JSC::ICStats::s_instance;
                  }
                  WTF::fastFree(v154, v459, v460, v461, v462, v463, v464, v465);
                }
              }
              v157 = *(_QWORD *)(casual + 8);
              if (!v157)
              {
LABEL_283:
                v166 = *(_QWORD *)(StatusReg + 752);
                if (!v166)
                {
                  pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
                  goto LABEL_288;
                }
                if (!(casual >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) != 0)
                {
LABEL_286:
                  v167 = *(unsigned int *)(v166 + 8000);
                  if (v167 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v166, casual, (os_unfair_lock_s *)5, v18, (uint64_t)a5, a6, a7, a8);
                  }
                  else
                  {
                    *(_QWORD *)(v166 + 8 * v167) = casual | 0x5000000000000;
                    *(_DWORD *)(v166 + 8000) = v167 + 1;
                  }
LABEL_288:
                  casual = atomic_load(&JSC::ICStats::s_instance);
                  if (casual)
                  {
                    v15 = (unint64_t)v883;
                    goto LABEL_349;
                  }
                  continue;
                }
                if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
                {
                  v18 = 0;
                }
                else
                {
                  v18 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v18 == 1)
                    goto LABEL_286;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v166, casual, 1, v18, (uint64_t)a5, a6, a7, a8);
                goto LABEL_288;
              }
              v12 = *(unsigned int *)(v157 - 4);
              if ((_DWORD)v12)
              {
                v158 = (unint64_t *)(v157 + 16);
                do
                {
                  while (1)
                  {
                    v160 = *v158;
                    if (*((_DWORD *)v158 - 4) != 9 || *(v158 - 1) != 0)
                      break;
                    if (!v160)
                      goto LABEL_265;
                    *v158 = 0;
                    v159 = *(_DWORD *)v160 - 2;
                    if (*(_DWORD *)v160 != 2)
                    {
LABEL_264:
                      *(_DWORD *)v160 = v159;
                      goto LABEL_265;
                    }
LABEL_273:
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v160, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
                    v162 = *(_QWORD *)(StatusReg + 752);
                    if (!v162)
                    {
                      pas_try_deallocate_slow_no_cache(v160, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_265;
                    }
                    if (v160 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v160 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v160)) & 1) == 0)
                    {
                      if (v160 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v160 >> 24)
                      {
                        v18 = 0;
LABEL_769:
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v162, v160, 1, v18, (uint64_t)a5, a6, a7, a8);
                        goto LABEL_265;
                      }
                      v18 = (*(_DWORD *)((char *)off_1ECF425F8
                                       + ((((v160 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                       + 24) >> (2 * ((BYTE3(v160) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v18 != 1)
                        goto LABEL_769;
                    }
                    v163 = *(unsigned int *)(v162 + 8000);
                    if (v163 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v162, v160, (os_unfair_lock_s *)5, v18, (uint64_t)a5, a6, a7, a8);
                      goto LABEL_265;
                    }
                    *(_QWORD *)(v162 + 8 * v163) = v160 | 0x5000000000000;
                    *(_DWORD *)(v162 + 8000) = v163 + 1;
                    v158 += 5;
                    if (!--v12)
                      goto LABEL_278;
                  }
                  *v158 = 0;
                  if (v160)
                  {
                    v159 = *(_DWORD *)v160 - 2;
                    if (*(_DWORD *)v160 != 2)
                      goto LABEL_264;
                    goto LABEL_273;
                  }
LABEL_265:
                  v158 += 5;
                  --v12;
                }
                while (v12);
              }
LABEL_278:
              a2 = v157 - 16;
              v164 = *(_QWORD *)(StatusReg + 752);
              if (!v164)
              {
                pas_try_deallocate_slow_no_cache(v157 - 16, (uint64_t)&bmalloc_heap_config, 1);
                v9 = (unint64_t)&JSC::ICStats::s_instance;
                goto LABEL_283;
              }
              v9 = (unint64_t)&JSC::ICStats::s_instance;
              if (!(a2 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v157 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v157 - 16) >> 24)) & 1) != 0)
              {
LABEL_281:
                v165 = *(unsigned int *)(v164 + 8000);
                if (v165 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v164, a2, (os_unfair_lock_s *)5, v18, (uint64_t)a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v164 + 8 * v165) = a2 | 0x5000000000000;
                  *(_DWORD *)(v164 + 8000) = v165 + 1;
                }
                goto LABEL_283;
              }
              if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
              {
                v18 = 0;
              }
              else
              {
                v18 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + (((((unint64_t)(v157 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((((v157 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v18 == 1)
                  goto LABEL_281;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v164, a2, 1, v18, (uint64_t)a5, a6, a7, a8);
              goto LABEL_283;
            }
            WTF::WordLock::lockSlow((WTF::WordLock *)(v148 + 8));
            goto LABEL_247;
          }
          WTF::WordLock::lockSlow((WTF::WordLock *)(v148 + 8));
          goto LABEL_242;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(casual + 24);
        goto LABEL_236;
      }
      break;
    }
    v15 = (unint64_t)v883;
LABEL_349:
    v54 = v884;
LABEL_76:
    v902 = 1;
    if (__ldaxr((unsigned __int8 *)casual))
    {
      __clrex();
      goto LABEL_78;
    }
    if (__stxr(1u, (unsigned __int8 *)casual))
LABEL_78:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(casual);
    if (v902)
    {
      WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>((uint64_t *)(casual + 8), (int *)&v903, &v902, v18, (uint64_t)a5, a6, a7, a8, (uint64_t)&v897);
      if (!(_BYTE)v899)
        *((_QWORD *)v897 + 4) += v902;
    }
    v64 = __ldxr((unsigned __int8 *)casual);
    if (v64 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)casual))
        goto LABEL_102;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)casual, 0, this, v18, (uint64_t)a5, a6, a7, a8);
LABEL_102:
    v71 = v905;
    v905 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v253, v254, v255, v256, v257, v258, v259, v260);
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
    }
LABEL_105:
    v72 = *(unsigned __int8 *)(v54 + 5);
    if (v72 != 2)
    {
      v16 = v880;
      if (v72 == 4)
        goto LABEL_109;
LABEL_459:
      __break(0xC471u);
      JUMPOUT(0x19879D5E4);
    }
    v73 = *(_QWORD *)(v54 + 8);
    v16 = v880;
    if (!v73 || (v73 & 1) != 0 || (*(_BYTE *)(v73 + 16) & 0x10) == 0)
      goto LABEL_459;
LABEL_109:
    if (((unint64_t)v885 & 0xFFFE000000000002) != 0 || (v74 = *(_DWORD *)v885 & 0xFFFFFFFE) == 0)
    {
      *(_WORD *)((char *)v881 + 129) |= 0x10u;
      goto LABEL_113;
    }
    v902 = v54;
    *(_WORD *)((char *)v881 + 129) |= 4u;
    if (!*((_BYTE *)v881 + 124))
    {
      v193 = *((unsigned __int8 *)v881 + 125);
      if (v193 == 255)
      {
        v194 = v881;
      }
      else
      {
        ++v193;
        v194 = v881;
        *((_BYTE *)v881 + 125) = v193;
      }
      if (xmmword_1ECF4C260 < v193)
      {
        *((_BYTE *)v194 + 125) = 0;
        v468 = *((unsigned __int8 *)v194 + 126);
        v469 = BYTE4(xmmword_1ECF4C260) << v468;
        v470 = v469;
        if (v469 == 255)
          LOBYTE(v469) = -2;
        if (v470 >> v468 == BYTE4(xmmword_1ECF4C260))
          v471 = v469;
        else
          v471 = -2;
        *((_BYTE *)v194 + 124) = v471;
        if (v468 != 255)
          *((_BYTE *)v194 + 126) = v468 + 1;
        *((_BYTE *)v194 + 127) = 0;
LABEL_843:
        v195 = (uint64_t)v194;
        a2 = (unint64_t)v878;
LABEL_472:
        JSC::repatchGetBy((uint64_t *)v15, (unsigned __int8 *)a2, v885, v54, (uint64_t)&v886, v195, 1, a8, *(uint8x8_t *)a9.i8);
        goto LABEL_113;
      }
      if (!*((_BYTE *)v194 + 127))
        goto LABEL_843;
      --*((_BYTE *)v194 + 127);
      LOBYTE(v896) = 0;
      LODWORD(v901) = v74;
      v195 = (uint64_t)v194;
      IndexQuicklyForTypedArray = (unint64_t)v194 + 128;
      if (__ldaxr((unsigned __int8 *)v194 + 128))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)IndexQuicklyForTypedArray))
      {
LABEL_341:
        v197 = *(_DWORD *)(v195 + 96);
        if (v197)
        {
          v905 = (WTF::StringImpl *)&v901;
          v906 = (JSC::ScopedArguments **)&v902;
          v907 = &v896;
          v903 = (WTF::StringImpl *)&v901;
          v904 = (unsigned __int8 *)&v896;
          if (v197 != -1)
            goto LABEL_346;
LABEL_450:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_451:
          v248 = (unsigned int *)v16;
          v249 = v12;
LABEL_452:
          JSC::JSObject::fillGetterPropertySlot(v248, v249, (uint64_t)&v886, v18, (int)a5, a6);
          continue;
        }
        if (*(_QWORD *)(v195 + 16))
          v197 = 1;
        else
          v197 = 2;
        *(_QWORD *)(v195 + 80) = 0;
        *(_QWORD *)(v195 + 88) = 0;
        *(_DWORD *)(v195 + 96) = v197;
        v905 = (WTF::StringImpl *)&v901;
        v906 = (JSC::ScopedArguments **)&v902;
        v907 = &v896;
        v903 = (WTF::StringImpl *)&v901;
        v904 = (unsigned __int8 *)&v896;
LABEL_346:
        v897 = (JSC::ScopedArguments *)&v903;
        ((void (*)(JSC::ScopedArguments **))off_1E3596010[v197])(&v897);
        v198 = __ldxr((unsigned __int8 *)IndexQuicklyForTypedArray);
        if (v198 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)IndexQuicklyForTypedArray))
            goto LABEL_469;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)IndexQuicklyForTypedArray, 0, this, v18, (uint64_t)a5, a6, a7, a8);
LABEL_469:
        if (!(_BYTE)v896)
          goto LABEL_113;
        a2 = (unint64_t)v878;
        if (v878)
        {
          if (*(_DWORD *)(v16 + 760) >= *((unsigned __int8 *)v878 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v16 + 192, (unint64_t)v878);
            a2 = (unint64_t)v878;
            if (!(_BYTE)v896)
              goto LABEL_113;
          }
        }
        goto LABEL_472;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v194 + 128);
      goto LABEL_341;
    }
    break;
  }
  --*((_BYTE *)v881 + 124);
LABEL_113:
  if (v879)
  {
    if (BYTE1(v891[1]) == 1)
    {
      IndexQuicklyForTypedArray = (unint64_t)v886;
    }
    else
    {
      if (BYTE1(v891[1]) == 2)
      {
        v269 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v886, (JSC::JSGlobalObject *)v15, this, v18, (uint64_t)a5, a6, a7, a8);
      }
      else
      {
        v343 = (unint64_t)v890;
        v344 = *(_QWORD *)(16 * (*(_DWORD *)v890 & 0xFFFFFFFE) + 0x28);
        if ((v888 & 0x20) != 0)
          v343 = v889;
        if (BYTE3(v891[1]) != 1)
          goto LABEL_610;
        if ((v343 & 0xFFFE000000000002) != 0)
          goto LABEL_1238;
        v345 = *(unsigned int *)(16 * (*(_DWORD *)v343 & 0xFFFFFFFE) + 0x4C);
        v346 = *(_DWORD *)(16 * (*(_DWORD *)v343 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v345)
        {
          v347 = 16 * v345;
          if (v894 != (int8x16_t **)v347)
          {
            do
            {
              v347 = *(_QWORD *)(v347 + 16);
              v346 = v347 != 0;
            }
            while ((int8x16_t **)v347 != v894 && v347 != 0);
          }
        }
        if (!v346)
        {
LABEL_1238:
          v903 = *(WTF::StringImpl **)(v15 + 56);
          v269 = JSC::throwDOMAttributeGetterTypeError(v344, &v903, v894, v13);
        }
        else
        {
LABEL_610:
          v269 = ((uint64_t (*)(unint64_t))v886)(v344);
        }
      }
      IndexQuicklyForTypedArray = v269;
    }
  }
  else
  {
    IndexQuicklyForTypedArray = 10;
  }
LABEL_117:
  if (v893)
  {
    v75 = *(_DWORD *)(v892 + 4);
    if (v75)
    {
      *(_DWORD *)(v892 + 4) = v75 - 1;
      goto LABEL_120;
    }
    __break(0xC471u);
    __break(1u);
LABEL_1019:
    v351 = (*(_BYTE *)(v11 + 40) & 6) == 0;
    v352 = 53;
    v353 = 44;
LABEL_621:
    if (v351)
      v223 = v353;
    else
      v223 = v352;
    v18 = v9;
LABEL_390:
    v225 = v18;
    v226 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v226)
    {
      v227 = (_BYTE *)(v226 + 8672);
      *(_BYTE *)(v226 + 8672) = 1;
      v228 = *(unsigned int *)(v226 + 8688);
      if ((_DWORD)v228)
      {
        *(_DWORD *)(v226 + 8688) = v228 - *(_DWORD *)(v226 + 8692);
        IndexQuicklyForTypedArray = *(_QWORD *)(v226 + 8680) - v228;
        goto LABEL_393;
      }
      v250 = *(_QWORD *)(v226 + 8712);
      v251 = *(_QWORD *)(v226 + 8696);
      if (v250)
      {
LABEL_457:
        v252 = __clz(v250);
        *(_QWORD *)(v226 + 8712) = v250 & ~(0x8000000000000000 >> v252);
        IndexQuicklyForTypedArray = v251 + 16 * v252;
LABEL_393:
        *v227 = 0;
LABEL_394:
        v18 = v225;
        *(_DWORD *)IndexQuicklyForTypedArray = 1;
        *(_BYTE *)(IndexQuicklyForTypedArray + 4) = v223;
        *(_BYTE *)(IndexQuicklyForTypedArray + 5) = 0;
        *(_DWORD *)(IndexQuicklyForTypedArray + 8) = -1;
        *(_QWORD *)(IndexQuicklyForTypedArray + 12) = 0;
        *(_QWORD *)(IndexQuicklyForTypedArray + 28) = 0;
        *(_QWORD *)(IndexQuicklyForTypedArray + 20) = 0;
        *(_DWORD *)(IndexQuicklyForTypedArray + 36) = 0;
LABEL_395:
        v896 = (void *)IndexQuicklyForTypedArray;
        v9 = v18;
        JSC::StructureStubInfo::addAccessCase(v12, &v903, (uint64_t *)v15, v18, 0, 0, &v896, a8, (uint64_t)&v897);
        LODWORD(v886) = (_DWORD)v897;
        v229 = v898;
        v898 = 0;
        v230 = v887;
        v887 = v229;
        if (v230)
        {
          if (*(_DWORD *)v230 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v230, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8, *(uint8x8_t *)a9.i8);
            WTF::fastFree(v323, v324, v325, v326, v327, v328, v329, v330);
          }
          else
          {
            --*(_DWORD *)v230;
          }
        }
        if (v888)
          WTF::fastFree((unint64_t)v888, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
        v231 = v898;
        v888 = v899;
        a9.i64[0] = v900;
        v899 = 0;
        v900 = 0;
        v889 = a9.i64[0];
        v898 = 0;
        if (v231)
        {
          if (*(_DWORD *)v231 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v231, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8, *(uint8x8_t *)a9.i8);
            WTF::fastFree(v331, v332, v333, v334, v335, v336, v337, v338);
          }
          else
          {
            --*(_DWORD *)v231;
          }
        }
        v232 = (unsigned int *)v896;
        v896 = 0;
        if (v232)
        {
          do
          {
            v233 = __ldaxr(v232);
            v234 = v233 - 1;
          }
          while (__stlxr(v234, v232));
          if (!v234)
          {
            atomic_store(1u, v232);
            JSC::AccessCase::operator delete((unint64_t)v232, (void *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
          }
        }
        if (((_DWORD)v886 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
        {
          JSC::ICEvent::ICEvent((uint64_t)&v897, (uint64_t **)v54, (const WTF::StringImpl *)2, 16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C), 0, a6, a7, a8);
          JSC::ICEvent::log((JSC::ICEvent *)&v897, v623, v624, v625, v626, v627, v628, v629);
          v630 = v899;
          v899 = 0;
          if (v630)
          {
            if (*(_DWORD *)v630 == 2)
            {
              WTF::StringImpl::~StringImpl(v630, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v645, v646, v647, v648, v649, v650, v651, v652);
            }
            else
            {
              *(_DWORD *)v630 -= 2;
            }
          }
          v236 = 1;
          goto LABEL_1132;
        }
        v236 = 1;
        goto LABEL_413;
      }
      if (*(_BYTE *)(v226 + 8677) == 6)
      {
        v577 = *(_DWORD *)(v226 + 8708);
        v578 = *(unsigned int *)(v226 + 8704);
        if (v578 < v577)
        {
          *(_QWORD *)&v227[8 * v578 + 56] = 0;
          v579 = (unint64_t *)(v226 + 8 * v578 + 8736);
          v580 = v577 - 1 - v578;
          while (v580)
          {
            v251 += 1024;
            v582 = *v579++;
            v581 = v582;
            LODWORD(v578) = v578 + 1;
            --v580;
            if (v582)
            {
              v250 = __rbit64(v581);
              *(_DWORD *)(v226 + 8704) = v578;
              *(_QWORD *)(v226 + 8696) = v251;
              v15 = (unint64_t)v883;
              goto LABEL_457;
            }
          }
          *(_DWORD *)(v226 + 8704) = v577;
        }
      }
      *v227 = 0;
      v15 = (unint64_t)v883;
    }
    IndexQuicklyForTypedArray = bmalloc_allocate_casual(40, 1);
    goto LABEL_394;
  }
LABEL_120:
  v76 = 0;
LABEL_121:
  if (v13)
  {
    if (*(_DWORD *)v13 != 2)
    {
      *(_DWORD *)v13 -= 2;
      goto LABEL_124;
    }
    WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
    WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    if (!v76)
      return IndexQuicklyForTypedArray;
  }
  else
  {
LABEL_124:
    if (!v76)
      return IndexQuicklyForTypedArray;
  }
  v14 = v884;
  v11 = (unint64_t)v885;
  v19 = (unint64_t)v885 | v884;
LABEL_126:
  v897 = (JSC::ScopedArguments *)v11;
  v77 = *(_QWORD *)(v15 + 56);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_479;
  if (*(_BYTE *)(v14 + 5) != 2
    || (v78 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE),
        ((*(_DWORD *)(v78 + 0x10) | *(unsigned __int8 *)(v78 + 0xA)) & 8) != 0))
  {
LABEL_627:
    if (v14 >> 49)
      goto LABEL_569;
    goto LABEL_628;
  }
  v79 = *(WTF::StringImpl **)(v14 + 8);
  if ((v79 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v884, (JSC::JSGlobalObject *)v883);
    v79 = v903;
    goto LABEL_132;
  }
  if ((*((_BYTE *)v79 + 16) & 0x10) != 0)
    goto LABEL_131;
  if (!*((_DWORD *)v79 + 1))
  {
    v79 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_131:
    *(_DWORD *)v79 += 2;
    goto LABEL_132;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
    goto LABEL_153;
  }
  if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_153:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
  v94 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v94)
    v94 = WTF::Thread::initializeCurrentTLS(0);
  v95 = *(uint64_t **)(v94 + 56);
  v96 = *v95;
  if (!*v95)
  {
LABEL_1657:
    v79 = 0;
    goto LABEL_1658;
  }
  v97 = *(_DWORD *)(v96 - 8);
  v98 = *((_DWORD *)v79 + 4);
  if (v98 < 0x100)
    v99 = WTF::StringImpl::hashSlowCase(v79);
  else
    v99 = v98 >> 8;
  v301 = 0;
  while (2)
  {
    v828 = v99 & v97;
    v829 = *(unsigned int *)(v96 + 4 * v828);
    if ((_DWORD)v829 == 1)
      goto LABEL_1665;
    if (!(_DWORD)v829)
    {
      v845 = *v95;
      if (!*v95)
        goto LABEL_1657;
      v846 = *(unsigned int *)(v845 - 4);
      v847 = (unsigned int *)(v845 + 4 * v846);
      goto LABEL_1712;
    }
    a2 = *(unsigned int *)(16 * v829 + 0x10);
    v830 = *((_DWORD *)v79 + 4);
    if (v830 >= 0x100 && a2 >= 0x100 && (v830 ^ a2) > 0xFF)
      goto LABEL_1665;
    v831 = *(unsigned int *)(16 * v829 + 4);
    if ((_DWORD)v831 != *((_DWORD *)v79 + 1))
      goto LABEL_1665;
    if (!(_DWORD)v831)
      break;
    v832 = *(unsigned __int16 **)(16 * v829 + 8);
    v833 = (unsigned __int8 *)*((_QWORD *)v79 + 1);
    if ((a2 & 4) == 0)
    {
      if ((v830 & 4) != 0)
      {
        a2 = *v833;
        if (*v832 == (_DWORD)a2)
        {
          v839 = (int16x8_t *)(v832 + 1);
          v840 = v831 - 1;
          v841 = (uint8x8_t *)(v833 + 1);
          if (v840 < 8)
          {
            if (v840 < 4)
            {
              if (v840 < 2)
              {
                if (v840 != 1 || v839->i16[0] == v841->u8[0])
                  break;
              }
              else
              {
                v865 = (v841->u16[0] | (v841->u16[0] << 8)) & 0xFF00FF;
                a2 = v839->u32[0];
                v866 = v840 & 1;
                v867 = (*(unsigned __int16 *)((char *)v841->u16 + v866) | (*(unsigned __int16 *)((char *)v841->u16 + v866) << 8)) & 0xFF00FF;
                v868 = *(__int32 *)((char *)v839->i32 + 2 * v866);
                if (v865 == (_DWORD)a2 && v867 == v868)
                  break;
              }
            }
            else
            {
              v859 = (v841->u32[0] | ((unint64_t)v841->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              a2 = v839->i64[0];
              v860 = v840 & 3;
              v861 = (*(unsigned int *)((char *)v841->u32 + v860) | ((unint64_t)*(unsigned int *)((char *)v841->u32 + v860) << 16)) & 0xFFFF0000FFFFLL;
              v862 = (v861 | (v861 << 8)) & 0xFF00FF00FF00FFLL;
              v863 = *(uint64_t *)((char *)v839->i64 + 2 * v860);
              if (((v859 | (v859 << 8)) & 0xFF00FF00FF00FFLL) == a2 && v862 == v863)
                break;
            }
          }
          else
          {
            a9 = vceqq_s16(*v839, (int16x8_t)vmovl_u8(*v841));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (a9.i32[0])
            {
              v842 = v840 & 7;
              while (1)
              {
                a9 = vceqq_s16(*(int16x8_t *)((char *)v839 + 2 * v842), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v841 + v842)));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                a2 = a9.u32[0];
                if (!a9.i32[0])
                  break;
                v842 += 8;
                if (v842 >= v840)
                  goto LABEL_1735;
              }
            }
          }
        }
        goto LABEL_1665;
      }
      a2 = *(unsigned __int16 *)v833;
      if (*v832 == (_DWORD)a2)
      {
        a2 = (unint64_t)(v832 + 1);
        this = v831 - 1;
        v834 = (int16x8_t *)(v833 + 2);
        v18 = (v831 - 2);
        if ((_DWORD)v831 != 2)
        {
          if ((_DWORD)v831 == 1)
            break;
          v18 = 31 - __clz(v18);
          switch((int)v18)
          {
            case 0:
              v826 = *(_DWORD *)a2;
              v827 = v834->i32[0];
              goto LABEL_1664;
            case 1:
              a2 = *(unsigned int *)a2;
              if ((_DWORD)a2 != v834->i32[0])
                goto LABEL_1665;
              v872 = *(_DWORD *)&v832[v831 - 2];
              v873 = &v833[2 * v831];
              goto LABEL_1759;
            case 2:
              a2 = *(_QWORD *)a2;
              if (a2 != v834->i64[0])
                goto LABEL_1665;
              v870 = *(_QWORD *)&v832[v831 - 4];
              v871 = &v833[2 * v831];
              goto LABEL_1752;
            case 3:
              a9 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v832[v831 - 8], *(int16x8_t *)&v833[2 * v831 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v832 + 1), *(int16x8_t *)(v833 + 2)));
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              goto LABEL_1755;
            default:
              a9 = vceqq_s16(*(int16x8_t *)a2, *v834);
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              if (!a9.i32[0])
                goto LABEL_1665;
              if (this < 8)
                goto LABEL_1735;
              v843 = this & 7;
              break;
          }
          while (1)
          {
            a9 = vceqq_s16(*(int16x8_t *)(a2 + 2 * v843), *(int16x8_t *)((char *)v834 + 2 * v843));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (!a9.i32[0])
              goto LABEL_1665;
            v843 += 8;
            if (v843 >= this)
              goto LABEL_1735;
          }
        }
LABEL_1708:
        v826 = *(unsigned __int16 *)a2;
        v827 = v834->u16[0];
LABEL_1664:
        if (v826 == v827)
          break;
      }
      goto LABEL_1665;
    }
    if ((v830 & 4) != 0)
    {
      a2 = *v833;
      if (*(unsigned __int8 *)v832 == (_DWORD)a2)
      {
        a2 = (unint64_t)v832 + 1;
        this = v831 - 1;
        v834 = (int16x8_t *)(v833 + 1);
        v18 = (v831 - 2);
        if ((_DWORD)v831 != 2)
        {
          if ((_DWORD)v831 == 1)
            break;
          v18 = 31 - __clz(v18);
          switch((int)v18)
          {
            case 0:
              goto LABEL_1708;
            case 1:
              a2 = *(unsigned __int16 *)a2;
              if ((_DWORD)a2 != v834->u16[0])
                goto LABEL_1665;
              v872 = *(unsigned __int16 *)((char *)v832 + v831 - 2);
              v874 = *(unsigned __int16 *)&v833[v831 - 2];
              goto LABEL_1760;
            case 2:
              a2 = *(unsigned int *)a2;
              if ((_DWORD)a2 != v834->i32[0])
                goto LABEL_1665;
              v872 = *(_DWORD *)((char *)v832 + v831 - 4);
              v873 = &v833[v831];
LABEL_1759:
              v874 = *((_DWORD *)v873 - 1);
LABEL_1760:
              if (v872 == v874)
                goto LABEL_1735;
              goto LABEL_1665;
            case 3:
              a2 = *(_QWORD *)a2;
              if (a2 == v834->i64[0])
              {
                v870 = *(_QWORD *)((char *)v832 + v831 - 8);
                v871 = &v833[v831];
LABEL_1752:
                if (v870 == *((_QWORD *)v871 - 1))
                  goto LABEL_1735;
              }
              goto LABEL_1665;
            case 4:
              a9 = (int16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v832 + v831 - 16), *(int8x16_t *)&v833[v831 - 16]), vceqq_s8(*(int8x16_t *)((char *)v832 + 1), *(int8x16_t *)(v833 + 1)));
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
LABEL_1755:
              if (a9.i32[0])
                goto LABEL_1735;
              goto LABEL_1665;
            default:
              a9 = (int16x8_t)vceqq_s8(*(int8x16_t *)a2, *(int8x16_t *)v834);
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
              if (!a9.i32[0])
                goto LABEL_1665;
              if (this < 0x10)
                goto LABEL_1735;
              v844 = this & 0xF;
              break;
          }
          while (1)
          {
            a9 = (int16x8_t)vceqq_s8(*(int8x16_t *)(a2 + v844), *(int8x16_t *)((char *)v834 + v844));
            a9.i8[0] = vminvq_u8((uint8x16_t)a9);
            if (!a9.i32[0])
              goto LABEL_1665;
            v844 += 16;
            if (v844 >= this)
              goto LABEL_1735;
          }
        }
        v826 = *(unsigned __int8 *)a2;
        v827 = v834->u8[0];
        goto LABEL_1664;
      }
      goto LABEL_1665;
    }
    a2 = *(unsigned __int16 *)v833;
    if ((_DWORD)a2 != *(unsigned __int8 *)v832)
      goto LABEL_1665;
    v835 = (uint8x8_t *)((char *)v832 + 1);
    v836 = v831 - 1;
    v837 = (int16x8_t *)(v833 + 2);
    if (v836 >= 8)
    {
      a9 = vceqq_s16(*v837, (int16x8_t)vmovl_u8(*v835));
      a9.i16[0] = vminvq_u16((uint16x8_t)a9);
      if (a9.i32[0])
      {
        v838 = v836 & 7;
        while (1)
        {
          a9 = vceqq_s16(*(int16x8_t *)((char *)v837 + 2 * v838), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v835 + v838)));
          a9.i16[0] = vminvq_u16((uint16x8_t)a9);
          a2 = a9.u32[0];
          if (!a9.i32[0])
            break;
          v838 += 8;
          if (v838 >= v836)
            goto LABEL_1735;
        }
      }
      goto LABEL_1665;
    }
    if (v836 >= 4)
    {
      v848 = (v835->u32[0] | ((unint64_t)v835->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      a2 = v837->i64[0];
      v849 = v836 & 3;
      v850 = (*(unsigned int *)((char *)v835->u32 + v849) | ((unint64_t)*(unsigned int *)((char *)v835->u32 + v849) << 16)) & 0xFFFF0000FFFFLL;
      v851 = (v850 | (v850 << 8)) & 0xFF00FF00FF00FFLL;
      v852 = *(uint64_t *)((char *)v837->i64 + 2 * v849);
      if (((v848 | (v848 << 8)) & 0xFF00FF00FF00FFLL) == a2 && v851 == v852)
        break;
      goto LABEL_1665;
    }
    if (v836 < 2)
    {
      if (v836 != 1)
        break;
      v827 = v835->u8[0];
      v826 = v837->u16[0];
      goto LABEL_1664;
    }
    v854 = (v835->u16[0] | (v835->u16[0] << 8)) & 0xFF00FF;
    a2 = v837->u32[0];
    v855 = v836 & 1;
    v856 = (*(unsigned __int16 *)((char *)v835->u16 + v855) | (*(unsigned __int16 *)((char *)v835->u16 + v855) << 8)) & 0xFF00FF;
    v857 = *(__int32 *)((char *)v837->i32 + 2 * v855);
    if (v854 != (_DWORD)a2 || v856 != v857)
    {
LABEL_1665:
      v99 = ++v301 + v828;
      continue;
    }
    break;
  }
LABEL_1735:
  v845 = *v95;
  if (!*v95)
  {
    v79 = (WTF::StringImpl *)(16 * v829);
    goto LABEL_1714;
  }
  v847 = (unsigned int *)(v96 + 4 * v828);
  v846 = *(unsigned int *)(v845 - 4);
LABEL_1712:
  if (v847 == (unsigned int *)(v845 + 4 * v846))
  {
    v79 = 0;
    goto LABEL_1658;
  }
  v829 = *v847;
  v79 = (WTF::StringImpl *)(16 * v829);
LABEL_1714:
  if ((_DWORD)v829)
    *(_DWORD *)v79 += 2;
LABEL_1658:
  v825 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v825 == 1)
  {
    if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_132;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, this, v18, (uint64_t)a5, a6, a7, a8);
LABEL_132:
  if (*(_DWORD *)(v77 + 80))
  {
    v501 = *(_DWORD *)(v77 + 80);
    if ((v501 & 0x27) != 0 && (v501 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v77 + 16))
    {
      IndexQuicklyForTypedArray = 0;
      goto LABEL_202;
    }
  }
  if (!v79)
  {
    v11 = (unint64_t)v897;
    v14 = v884;
    goto LABEL_627;
  }
  if (((unint64_t)v79 >> 4)
    && (((unint64_t)v79 >> 4) & ~*(_DWORD *)(v78 + 32)) == 0)
  {
    v80 = v897;
    v81 = *(_QWORD *)(v78 + 88);
    if (v81
      || (v92 = *(_QWORD *)(v78 + 64)) != 0
      && (*(_BYTE *)(v92 + 5) == 1 || *(_DWORD *)(v92 + 80) >= 2u)
      && (JSC::Structure::materializePropertyTable((JSC::Structure *)v78, (JSC::VM *)v77, 1, (const JSC::PropertyTable *)v18, (uint64_t)a5, a6, a7, a8), v81))
    {
      if (*(_DWORD *)(v81 + 24))
      {
        v82 = *(_QWORD *)(v81 + 16);
        v83 = v82 & 0xFFFFFFFFFFFFFFFELL;
        v84 = *(unsigned int *)(v81 + 8);
        v85 = *((_DWORD *)v79 + 4);
        if ((v82 & 1) != 0)
        {
          if ((v85 & 0x20) != 0)
            v85 = *((_DWORD *)v79 + 8);
          v86 = *(_DWORD *)(v81 + 12);
          v87 = (v85 >> 8) & *(_QWORD *)&v86;
          v88 = *(unsigned __int8 *)(v83 + v87);
          if (*(_BYTE *)(v83 + v87))
          {
            v89 = v83 + v84;
            v90 = 1;
            while (1)
            {
              v91 = *(_QWORD *)(v89 + 8 * (v88 - 1));
              if (v79 == (WTF::StringImpl *)(v91 & 0xFFFFFFFFFFFFLL))
                break;
              v87 = ((_DWORD)v87 + v90) & v86;
              v88 = *(unsigned __int8 *)(v83 + v87);
              ++v90;
              if (!*(_BYTE *)(v83 + v87))
                goto LABEL_476;
            }
            v117 = HIBYTE(v91);
LABEL_198:
            if ((_DWORD)v117 != -1)
            {
              if ((int)v117 <= 63)
              {
                v118 = (uint64_t)v80 + 16;
                v119 = v117 << 32;
              }
              else
              {
                v118 = *((_QWORD *)v80 + 1) - 8;
                v119 = 0x3F00000000 - (v117 << 32);
              }
              IndexQuicklyForTypedArray = *(_QWORD *)(v118 + (v119 >> 29));
              if (IndexQuicklyForTypedArray)
              {
LABEL_202:
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                  {
                    v300 = v79;
                    goto LABEL_707;
                  }
                  *(_DWORD *)v79 -= 2;
                }
                return IndexQuicklyForTypedArray;
              }
            }
          }
        }
        else
        {
          if ((v85 & 0x20) != 0)
            v85 = *((_DWORD *)v79 + 8);
          v120 = *(_DWORD *)(v81 + 12);
          v121 = v120 & (v85 >> 8);
          v122 = *(_DWORD *)(v83 + 4 * v121);
          if (v122)
          {
            v123 = v83 + 4 * v84;
            v124 = 1;
            while (1)
            {
              v125 = (v122 - 1);
              if (v79 == *(WTF::StringImpl **)(v123 + 16 * v125))
                break;
              v121 = (v121 + v124) & v120;
              v122 = *(_DWORD *)(v83 + 4 * v121);
              ++v124;
              if (!v122)
                goto LABEL_476;
            }
            v117 = *(unsigned int *)(v123 + 16 * v125 + 8);
            goto LABEL_198;
          }
        }
      }
    }
  }
LABEL_476:
  if (*(_DWORD *)v79 == 2)
  {
    WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
    WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
  }
  else
  {
    *(_DWORD *)v79 -= 2;
  }
  v14 = v884;
LABEL_479:
  if (v14 >= 0xFFFE000000000000 && (v14 & 0x80000000) == 0)
  {
    v11 = (unint64_t)v897;
    v270 = v14;
    goto LABEL_482;
  }
  if (!(v14 >> 49))
  {
    v11 = (unint64_t)v897;
    goto LABEL_628;
  }
  *(double *)a9.i64 = (double)(int)v14;
  if (v14 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v14 - 0x2000000000000;
  v270 = *(double *)a9.i64;
  v11 = (unint64_t)v897;
  if ((_DWORD)v270 != -1 && *(double *)a9.i64 == (double)v270)
  {
LABEL_482:
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_494;
    v271 = *(unsigned __int8 *)(v11 + 5);
    if (v271 == 2)
    {
      v349 = *(_QWORD *)(v11 + 8);
      if ((v349 & 1) != 0)
        v350 = (_DWORD *)(v11 + 16);
      else
        v350 = (_DWORD *)(v349 + 4);
      if (*v350 > v270)
        return JSC::JSString::getIndex((JSC::JSString *)v11, (JSC::JSGlobalObject *)v883, v270, v18, (uint64_t)a5, a6, a7, a8, (int8x16_t)a9);
LABEL_492:
      if (!a4)
        goto LABEL_494;
      goto LABEL_493;
    }
    if (v271 < 0x17)
      goto LABEL_494;
    v272 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 < 2)
    {
LABEL_486:
      if (*(_DWORD *)(v272 - 8) > v270)
      {
        IndexQuicklyForTypedArray = *(_QWORD *)(v272 + 8 * v270);
LABEL_488:
        if (IndexQuicklyForTypedArray)
          return IndexQuicklyForTypedArray;
      }
LABEL_489:
      if ((*(_BYTE *)(v11 + 4) & 0xF) == 9 && v270 < *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8))
      {
        v293 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
        v294 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
        v295 = (v294 & 0x10) != 0 ? ((v294 & 0xE) + 10) >> 1 : (v294 >> 1) & 7;
        v296 = *(_DWORD *)(v293 + 4 * v295 + 852);
        v297 = v296 ? 16 * (v296 & 0xFFFFFFFE) : 0;
        if (v297 == 16 * (*(_DWORD *)v11 & 0xFFFFFFFE))
        {
          v298 = *(_QWORD *)(v293 + 2304);
          v299 = (v298 & 1) != 0 ? (v298 >> 1) & 3 : *(unsigned __int8 *)(v298 + 4);
          if (v299 != 2)
          {
LABEL_494:
            a9.i64[0] = 0xFFFFFFFF00000000;
            v905 = (WTF::StringImpl *)0xFFFFFFFF00000000;
            LOBYTE(v909) = 0;
            v910 = 0;
            v911 = 0;
            v912 = 0;
            v907 = 0;
            memset(v908, 0, 13);
            v906 = (JSC::ScopedArguments **)v11;
            if ((v11 & 0xFFFE000000000002) == 0)
            {
              v274 = v883;
              v275 = v883[7];
              v276 = *(unsigned __int8 *)(v11 + 5);
              if (v276 > 0x16)
              {
LABEL_496:
                IndexQuicklyForTypedArray = 10;
                while (1)
                {
                  v277 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                  v279 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v277 + 0x4C) + 0x70))(v11, v274, v270, &v903);
                  if (*((_DWORD *)v275 + 20))
                  {
                    v533 = *((_DWORD *)v275 + 20);
                    if ((v533 & 0x27) != 0 && (v533 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v275 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
                    if (*((_QWORD *)v275 + 2))
                    {
LABEL_947:
                      IndexQuicklyForTypedArray = 10;
                      goto LABEL_510;
                    }
                  }
                  if ((v279 & 1) != 0)
                  {
                    if (BYTE1(v908[1]) == 1)
                    {
                      IndexQuicklyForTypedArray = (unint64_t)v903;
                      goto LABEL_510;
                    }
                    if (BYTE1(v908[1]) == 2)
                    {
LABEL_1105:
                      IndexQuicklyForTypedArray = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v903, (JSC::JSGlobalObject *)v883, this, v18, (uint64_t)a5, a6, a7, a8);
                      goto LABEL_510;
                    }
                    v676 = (uint64_t **)v883[7];
                    JSC::Identifier::from(v676, v270, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, (int **)&v886);
                    IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)&v903, (JSC::VM *)v676, v886);
                    v684 = v886;
                    v886 = 0;
                    if (!v684)
                      goto LABEL_510;
                    if (*(_DWORD *)v684 != 2)
                    {
                      *(_DWORD *)v684 -= 2;
                      goto LABEL_510;
                    }
LABEL_1226:
                    WTF::StringImpl::~StringImpl(v684, v677, v678, v679, v680, v681, v682, v683);
                    WTF::fastFree(v690, v691, v692, v693, v694, v695, v696, v697);
                    goto LABEL_510;
                  }
                  if (BYTE2(v908[1]) == 3)
                  {
                    if (BYTE4(v908[1]))
                      goto LABEL_947;
                    v280 = *(unsigned __int8 *)(v11 + 5);
                    v274 = v883;
                    if (v280 == 61)
                      goto LABEL_502;
                  }
                  else
                  {
                    v280 = *(unsigned __int8 *)(v11 + 5);
                    if (v280 == 61)
                    {
                      if (BYTE2(v908[1]) == 1)
                        goto LABEL_947;
                      goto LABEL_502;
                    }
                  }
                  if ((v280 - 39) <= 0xA
                    && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v278, this, v18, (uint64_t)a5, a6, a7, a8) <= v270)
                  {
                    goto LABEL_947;
                  }
LABEL_502:
                  if ((*(_WORD *)(v277 + 12) & 0x800) == 0 || BYTE2(v908[1]) == 3)
                  {
                    v281 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v281)
                      v281 = *(_QWORD *)(v11 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v281 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v11, v883);
                    }
                    else
                    {
                      v281 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                      if (!v281)
                        v281 = *(_QWORD *)(v11 + 16);
                    }
                    if (*((_DWORD *)v275 + 20))
                    {
                      v274 = v883;
                      if (JSC::VM::hasExceptionsAfterHandlingTraps(v275, v278, this, v18, (uint64_t)a5, a6, a7, a8))
                        goto LABEL_947;
                    }
                    else
                    {
                      v274 = v883;
                    }
                  }
                  if ((v281 & 0xFFFE000000000002) == 0)
                  {
                    v11 = v281;
                    if (*(unsigned __int8 *)(v281 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_510;
                }
              }
              if (v276 == 2)
              {
                v771 = *(_QWORD *)(v11 + 8);
                if ((v771 & 1) != 0)
                  v772 = (_DWORD *)(v11 + 16);
                else
                  v772 = (_DWORD *)(v771 + 4);
                if (*v772 <= v270
                  || (v773 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v11, (JSC::JSGlobalObject *)v883, v270, v18, (uint64_t)a5, a6, a7, a8, (int8x16_t)a9), *((_DWORD *)v275 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v275, a2, this, v18, (uint64_t)a5, a6, a7, a8))
                {
                  v774 = 0;
                }
                else
                {
                  v903 = v773;
                  LODWORD(v905) = 10;
                  v907 = 0;
                  v774 = 1;
                  BYTE1(v908[1]) = 1;
                }
                if (*((_DWORD *)v275 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v275, a2, this, v18, (uint64_t)a5, a6, a7, a8))
                {
                  IndexQuicklyForTypedArray = 0;
                  goto LABEL_510;
                }
                if (v774)
                {
                  if (BYTE1(v908[1]) == 1)
                  {
                    IndexQuicklyForTypedArray = (unint64_t)v903;
                    goto LABEL_510;
                  }
                  if (BYTE1(v908[1]) == 2)
                    goto LABEL_1105;
                  v824 = (uint64_t **)v883[7];
                  JSC::Identifier::from(v824, v270, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, (int **)&v886);
                  IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)&v903, (JSC::VM *)v824, v886);
                  v684 = v886;
                  v886 = 0;
                  if (v684)
                  {
                    if (*(_DWORD *)v684 != 2)
                    {
                      *(_DWORD *)v684 -= 2;
                      goto LABEL_510;
                    }
                    goto LABEL_1226;
                  }
LABEL_510:
                  if (v910)
                  {
                    v282 = *(_DWORD *)(v909 + 4);
                    if (!v282)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19879EF88);
                    }
                    *(_DWORD *)(v909 + 4) = v282 - 1;
                  }
                  return IndexQuicklyForTypedArray;
                }
              }
            }
            v274 = v883;
            v775 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v897, (unint64_t)v883);
            if (!v775)
            {
              IndexQuicklyForTypedArray = 0;
              goto LABEL_510;
            }
            v11 = v775;
            v275 = v883[7];
            goto LABEL_496;
          }
        }
      }
      v273 = *(unsigned __int8 *)(v11 + 5);
      if (v273 == 33)
      {
        if (*(_DWORD *)(v11 + 32) <= v270)
          goto LABEL_492;
        v432 = *(_QWORD *)(v11 + 40);
        if (!v432)
          goto LABEL_494;
        if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
          goto LABEL_492;
        if (!a4 || (v432 & 0x3FFFFFFFFLL) == -qword_1ECF4C038)
          goto LABEL_494;
      }
      else
      {
        if (v273 != 34)
          goto LABEL_492;
        isMappedArgument = JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v11, v270);
        if (!a4 || isMappedArgument)
          goto LABEL_494;
      }
LABEL_493:
      *(_DWORD *)(a4 + 4) |= 2u;
      goto LABEL_494;
    }
    switch(*(_BYTE *)(v11 + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*(_BYTE *)(v11 + 5))
        {
          case '\'':
          case '(':
            v283 = v270;
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              goto LABEL_997;
            v566 = *(_QWORD *)(v272 - 8);
            if (*(_BYTE *)(v566 + 64) && (v813 = *(_QWORD *)(v566 + 32)) != 0)
              v567 = *(_QWORD *)(v813 + 32);
            else
              v567 = *(_QWORD *)(v566 + 48);
            v555 = *(_QWORD *)(v11 + 24);
            v568 = *(_QWORD *)(v11 + 32);
            if (v555 + v568 > v567)
              goto LABEL_489;
            if ((*(_BYTE *)(v11 + 40) & 1) == 0)
              goto LABEL_1143;
            v546 = v567 - v568;
            goto LABEL_998;
          case ')':
            if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v11, v270))
              goto LABEL_489;
            goto LABEL_519;
          case '*':
          case '+':
            v283 = v270;
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              goto LABEL_997;
            v552 = *(_QWORD *)(v272 - 8);
            if (*(_BYTE *)(v552 + 64) && (v811 = *(_QWORD *)(v552 + 32)) != 0)
              v553 = *(_QWORD *)(v811 + 32);
            else
              v553 = *(_QWORD *)(v552 + 48);
            v555 = *(_QWORD *)(v11 + 24);
            v554 = *(_QWORD *)(v11 + 32);
            if (v554 + 2 * v555 > v553)
              goto LABEL_489;
            if ((*(_BYTE *)(v11 + 40) & 1) == 0)
              goto LABEL_1143;
            v556 = v270 >= (v553 - v554) >> 1;
            goto LABEL_1171;
          case ',':
          case '-':
            v283 = v270;
            v284 = *(_BYTE *)(v11 + 40);
            if ((v284 & 7u) <= 2)
              goto LABEL_997;
            goto LABEL_1139;
          case '.':
            v283 = v270;
            v284 = *(_BYTE *)(v11 + 40);
            if ((v284 & 7u) <= 2)
            {
              if (*(_QWORD *)(v11 + 24) <= (unint64_t)v270)
                goto LABEL_489;
              goto LABEL_519;
            }
LABEL_1139:
            v632 = *(_QWORD *)(v272 - 8);
            if (*(_BYTE *)(v632 + 64) && (v809 = *(_QWORD *)(v632 + 32)) != 0)
              v633 = *(_QWORD *)(v809 + 32);
            else
              v633 = *(_QWORD *)(v632 + 48);
            v555 = *(_QWORD *)(v11 + 24);
            v634 = *(_QWORD *)(v11 + 32);
            if (v634 + 4 * v555 > v633)
              goto LABEL_489;
            if ((v284 & 1) == 0)
              goto LABEL_1143;
            v556 = v283 >= (v633 - v634) >> 2;
            goto LABEL_1171;
          case '/':
            v283 = v270;
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
            {
LABEL_997:
              v546 = *(_QWORD *)(v11 + 24);
LABEL_998:
              v547 = v546 > v283;
            }
            else
            {
              v557 = *(_QWORD *)(v272 - 8);
              if (*(_BYTE *)(v557 + 64) && (v812 = *(_QWORD *)(v557 + 32)) != 0)
                v558 = *(_QWORD *)(v812 + 32);
              else
                v558 = *(_QWORD *)(v557 + 48);
              v555 = *(_QWORD *)(v11 + 24);
              v559 = *(_QWORD *)(v11 + 32);
              if (v559 + 8 * v555 > v558)
                goto LABEL_489;
              if ((*(_BYTE *)(v11 + 40) & 1) != 0)
              {
                v556 = v270 >= (v558 - v559) >> 3;
LABEL_1171:
                if (v556)
                  goto LABEL_489;
LABEL_519:
                IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v11, v270, a4);
                goto LABEL_488;
              }
LABEL_1143:
              v547 = v555 > v283;
            }
            if (!v547)
              goto LABEL_489;
            goto LABEL_519;
          default:
            goto LABEL_489;
        }
      case 3:
        goto LABEL_489;
      case 4:
      case 5:
        goto LABEL_486;
      case 6:
      case 7:
        if (*(_DWORD *)(v272 - 8) <= v270)
          goto LABEL_489;
        IndexQuicklyForTypedArray = *(_QWORD *)(v272 + 8 * v270) + 0x2000000000000;
        goto LABEL_488;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (*(_DWORD *)(v272 - 4) <= v270)
          goto LABEL_489;
        IndexQuicklyForTypedArray = *(_QWORD *)(v272 + 8 * v270 + 16);
        goto LABEL_488;
      default:
        __break(0xC471u);
        JUMPOUT(0x19879FBA4);
    }
  }
LABEL_569:
  if (a4)
  {
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      *(_DWORD *)(a4 + 4) |= 2u;
      if (v14 == 0xFFFE0000FFFFFFFFLL && v11 && (*(_BYTE *)(v11 + 5) & 0xFE) == 0x24)
      {
        v306 = *(_QWORD **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
        v307 = v306[288];
        v308 = (v307 & 1) != 0 ? (v307 >> 1) & 3 : *(unsigned __int8 *)(v307 + 4);
        if (v308 != 2)
        {
          v309 = v306[287];
          v310 = (v309 & 1) != 0 ? (v309 >> 1) & 3 : *(unsigned __int8 *)(v309 + 4);
          if (v310 != 2)
          {
            v311 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
            if ((v311 & 0x10) != 0)
              v312 = ((v311 & 0xE) + 10) >> 1;
            else
              v312 = (v311 >> 1) & 7;
            v313 = *((_DWORD *)v306 + v312 + 213);
            if (v313)
              v314 = 16 * (v313 & 0xFFFFFFFE);
            else
              v314 = 0;
            if (v314 == 16 * (*(_DWORD *)v11 & 0xFFFFFFFE))
              return 10;
            v689 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v689)
              v689 = *(_QWORD *)(v11 + 16);
            if (v689 == v306[84])
            {
              v14 = v884;
              if (!*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x20))
                return 10;
            }
            else
            {
              v14 = v884;
            }
          }
        }
      }
    }
  }
LABEL_628:
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v669 = v883[7];
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v883, v11);
    JSC::VM::throwException(v669, (JSC::JSGlobalObject *)v883, NotAnObjectError, v671, v672, v673, v674, v675);
  }
  if (*(_DWORD *)(v77 + 80))
  {
    v530 = *(_DWORD *)(v77 + 80);
    if ((v530 & 0x27) != 0 && (v530 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v77 + 16))
      return 0;
  }
  v354 = v883[7];
  if ((v14 & 0xFFFE000000000002) != 0)
  {
LABEL_1319:
    v886 = (WTF::StringImpl *)v14;
    if (*((_DWORD *)v354 + 20))
    {
      v739 = *((_DWORD *)v354 + 20);
      if ((v739 & 0x27) != 0 && (v739 & 0x20) == 0)
        JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v354 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
      if (*((_QWORD *)v354 + 2))
      {
        v355 = *(_QWORD *)(*((_QWORD *)v354 + 5244) + 8);
        if (v355)
          *(_DWORD *)v355 += 2;
        goto LABEL_637;
      }
      v14 = (unint64_t)v886;
    }
    if ((v14 & 0xFFFE000000000002) == 0)
    {
      v710 = *(unsigned __int8 *)(v14 + 5);
      if (v710 == 2)
        goto LABEL_1322;
      if (v710 == 4)
      {
        v355 = *(_QWORD *)(v14 + 8);
        v722 = *(_DWORD *)v355;
        *(_DWORD *)v355 += 4;
        v356 = v722 + 2;
        if (!v356)
        {
          v721 = (WTF::StringImpl *)v355;
          goto LABEL_1346;
        }
        goto LABEL_636;
      }
    }
    v14 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v886, (uint64_t)v883, (JSC::Structure *)1, v18, (uint64_t)a5, a6, a7, a8);
LABEL_1322:
    if (*((_DWORD *)v354 + 20))
    {
      v740 = *((_DWORD *)v354 + 20);
      if ((v740 & 0x27) != 0 && (v740 & 0x20) == 0)
        JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v354 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
      if (*((_QWORD *)v354 + 2))
      {
        v355 = 0;
        goto LABEL_637;
      }
    }
    v355 = *(_QWORD *)(v14 + 8);
    v354 = v883[7];
    if ((v355 & 1) != 0)
      goto LABEL_1338;
    if ((*(_BYTE *)(v355 + 16) & 0x10) == 0)
    {
      v711 = (WTF::StringImpl *)*((_QWORD *)v354 + 8096);
      if (v711 != (WTF::StringImpl *)v355)
      {
        *(_DWORD *)v355 += 2;
        *((_QWORD *)v354 + 8096) = v355;
        if (v711)
        {
          if (*(_DWORD *)v711 == 2)
          {
            WTF::StringImpl::~StringImpl(v711, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v749, v750, v751, v752, v753, v754, v755, v756);
          }
          else
          {
            *(_DWORD *)v711 -= 2;
          }
        }
        v712 = *(WTF::StringImpl **)(v14 + 8);
        if (v712)
        {
          if ((*((_BYTE *)v712 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v712 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v712, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, (WTF *)&v903);
            v712 = v903;
          }
        }
        v713 = (WTF::StringImpl *)*((_QWORD *)v354 + 8097);
        *((_QWORD *)v354 + 8097) = v712;
        if (v713)
        {
          if (*(_DWORD *)v713 == 2)
          {
            WTF::StringImpl::~StringImpl(v713, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v741, v742, v743, v744, v745, v746, v747, v748);
          }
          else
          {
            *(_DWORD *)v713 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 8) + 16) & 0x10) == 0)
      {
        v714 = (WTF::StringImpl *)*((_QWORD *)v354 + 8097);
        *(_DWORD *)v714 += 2;
        v903 = v714;
        __dmb(0xAu);
        v715 = *(WTF::StringImpl **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v903;
        v903 = v715;
        v716 = (_QWORD *)((char *)v354 + 808);
        v717 = *((unsigned int *)v354 + 205);
        if ((_DWORD)v717 == *((_DWORD *)v354 + 204))
        {
          v719 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v716, v717 + 1, (unint64_t)&v903);
          v717 = *((unsigned int *)v354 + 205);
          v718 = (WTF::StringImpl **)(*((_QWORD *)v354 + 101) + 8 * v717);
          v715 = *v719;
        }
        else
        {
          v718 = (WTF::StringImpl **)(*v716 + 8 * v717);
          v719 = &v903;
        }
        *v719 = 0;
        *v718 = v715;
        *((_DWORD *)v354 + 205) = v717 + 1;
        v720 = v903;
        v903 = 0;
        if (v720)
        {
          if (*(_DWORD *)v720 == 2)
          {
            WTF::StringImpl::~StringImpl(v720, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v731, v732, v733, v734, v735, v736, v737, v738);
          }
          else
          {
            *(_DWORD *)v720 -= 2;
          }
        }
      }
      v355 = *((_QWORD *)v354 + 8097);
    }
LABEL_635:
    v356 = *(_DWORD *)v355 + 2;
LABEL_636:
    *(_DWORD *)v355 = v356;
    goto LABEL_637;
  }
  if (*(_BYTE *)(v14 + 5) != 2)
  {
    v14 = JSC::JSCell::toPrimitive(v14, v883, (JSC::Structure *)2, v18, (uint64_t)a5, a6, a7, a8);
    goto LABEL_1319;
  }
  v355 = *(_QWORD *)(v14 + 8);
  if ((v355 & 1) == 0)
  {
    if ((*(_BYTE *)(v355 + 16) & 0x10) == 0)
    {
      v418 = (WTF::StringImpl *)*((_QWORD *)v354 + 8096);
      if (v418 != (WTF::StringImpl *)v355)
      {
        *(_DWORD *)v355 += 2;
        *((_QWORD *)v354 + 8096) = v355;
        if (v418)
        {
          if (*(_DWORD *)v418 == 2)
          {
            WTF::StringImpl::~StringImpl(v418, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v591, v592, v593, v594, v595, v596, v597, v598);
          }
          else
          {
            *(_DWORD *)v418 -= 2;
          }
        }
        v419 = *(WTF::StringImpl **)(v14 + 8);
        if (v419)
        {
          if ((*((_BYTE *)v419 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v419 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v419, (const WTF::StringImpl *)this, v18, (uint64_t)a5, a6, a7, a8, (WTF *)&v903);
            v419 = v903;
          }
        }
        v420 = (WTF::StringImpl *)*((_QWORD *)v354 + 8097);
        *((_QWORD *)v354 + 8097) = v419;
        if (v420)
        {
          if (*(_DWORD *)v420 == 2)
          {
            WTF::StringImpl::~StringImpl(v420, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v583, v584, v585, v586, v587, v588, v589, v590);
          }
          else
          {
            *(_DWORD *)v420 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 8) + 16) & 0x10) == 0)
      {
        v421 = (WTF::StringImpl *)*((_QWORD *)v354 + 8097);
        *(_DWORD *)v421 += 2;
        v903 = v421;
        __dmb(0xAu);
        v422 = *(WTF::StringImpl **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v903;
        v903 = v422;
        v423 = (_QWORD *)((char *)v354 + 808);
        v424 = *((unsigned int *)v354 + 205);
        if ((_DWORD)v424 == *((_DWORD *)v354 + 204))
        {
          v426 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v423, v424 + 1, (unint64_t)&v903);
          v424 = *((unsigned int *)v354 + 205);
          v425 = (WTF::StringImpl **)(*((_QWORD *)v354 + 101) + 8 * v424);
          v422 = *v426;
        }
        else
        {
          v425 = (WTF::StringImpl **)(*v423 + 8 * v424);
          v426 = &v903;
        }
        *v426 = 0;
        *v425 = v422;
        *((_DWORD *)v354 + 205) = v424 + 1;
        v427 = v903;
        v903 = 0;
        if (v427)
        {
          if (*(_DWORD *)v427 == 2)
          {
            WTF::StringImpl::~StringImpl(v427, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
          }
          else
          {
            *(_DWORD *)v427 -= 2;
          }
        }
      }
      v355 = *((_QWORD *)v354 + 8097);
    }
    goto LABEL_635;
  }
LABEL_1338:
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v14, (JSC::JSGlobalObject *)v883);
  if (*((_DWORD *)v354 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v354, a2, this, v18, (uint64_t)a5, a6, a7, a8))
  {
    v355 = 0;
    v721 = v903;
    v903 = 0;
    if (!v721)
      goto LABEL_637;
LABEL_1341:
    if (*(_DWORD *)v721 != 2)
    {
      *(_DWORD *)v721 -= 2;
      goto LABEL_637;
    }
LABEL_1346:
    WTF::StringImpl::~StringImpl(v721, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
    WTF::fastFree(v723, v724, v725, v726, v727, v728, v729, v730);
    goto LABEL_637;
  }
  v355 = (unint64_t)v903;
  if (v903)
  {
    *(_DWORD *)v903 += 2;
    v903 = 0;
    v721 = (WTF::StringImpl *)v355;
    goto LABEL_1341;
  }
LABEL_637:
  if (*(_DWORD *)(v77 + 80))
  {
    v531 = *(_DWORD *)(v77 + 80);
    if ((v531 & 0x27) != 0 && (v531 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v77 + 16))
    {
      IndexQuicklyForTypedArray = 0;
      goto LABEL_693;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v888 = (WTF *)0xFFFFFFFF00000000;
  LOBYTE(v892) = 0;
  v893 = 0;
  v894 = 0;
  v895 = 0;
  v890 = 0;
  memset(v891, 0, 13);
  v889 = v11;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_1410;
  v357 = (uint64_t)v883[7];
  v358 = *(unsigned __int8 *)(v11 + 5);
  if (v358 > 0x16)
    goto LABEL_640;
  if (v358 != 2)
    goto LABEL_1410;
  if (*(_QWORD *)(*(_QWORD *)(v357 + 41952) + 1768) != v355)
  {
    if (v355)
    {
      v783 = *(_DWORD *)(v355 + 16);
      if ((v783 & 0x20) == 0)
      {
        v784 = *(_BYTE **)(v355 + 8);
        v785 = *(unsigned int *)(v355 + 4);
        if ((v783 & 4) != 0)
        {
          if ((_DWORD)v785)
          {
            this = *v784 - 48;
            if (this <= 9 && (v785 < 2 || *v784 != 48))
            {
              v814 = v785 - 1;
              v815 = v784 + 1;
              while (v814)
              {
                if (this > 0x19999999)
                  goto LABEL_1443;
                v816 = *v815 - 48;
                if (v816 > 9)
                  goto LABEL_1443;
                v769 = 0;
                v556 = __CFADD__(v816, 10 * this);
                this = v816 + 10 * (_DWORD)this;
                --v814;
                ++v815;
                if (v556)
                  goto LABEL_1408;
              }
LABEL_1618:
              if ((_DWORD)this != -1)
              {
                v817 = *(_QWORD *)(v11 + 8);
                v818 = (_DWORD *)((v817 & 1) != 0 ? v11 + 16 : v817 + 4);
                if (*v818 > this)
                {
                  v767 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v11, (JSC::JSGlobalObject *)v883, this, v18, (uint64_t)a5, a6, a7, a8, (int8x16_t)a9);
                  if (!*(_DWORD *)(v357 + 80)
                    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v357, a2, this, v18, (uint64_t)a5, a6, a7, a8))
                  {
                    v768 = 10;
                    goto LABEL_1407;
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v785)
        {
          this = *(unsigned __int16 *)v784 - 48;
          if (this <= 9 && (*(_WORD *)v784 != 48 || v785 <= 1))
          {
            v790 = v785 - 1;
            v791 = (unsigned __int16 *)(v784 + 2);
            while (v790)
            {
              if (this > 0x19999999)
                goto LABEL_1443;
              v792 = *v791 - 48;
              if (v792 > 9)
                goto LABEL_1443;
              v769 = 0;
              v556 = __CFADD__(v792, 10 * this);
              this = v792 + 10 * (_DWORD)this;
              --v790;
              ++v791;
              if (v556)
                goto LABEL_1408;
            }
            goto LABEL_1618;
          }
        }
      }
    }
LABEL_1443:
    v769 = 0;
    goto LABEL_1408;
  }
  v764 = *(_QWORD *)(v11 + 8);
  if ((v764 & 1) != 0)
    v765 = (unsigned int *)(v11 + 16);
  else
    v765 = (unsigned int *)(v764 + 4);
  v766 = *v765;
  if ((v766 & 0x80000000) != 0)
    v767 = (WTF::StringImpl *)(COERCE__INT64((double)v766) + 0x2000000000000);
  else
    v767 = (WTF::StringImpl *)(v766 | 0xFFFE000000000000);
  v768 = 14;
LABEL_1407:
  v886 = v767;
  LODWORD(v888) = v768;
  v890 = 0;
  v769 = 1;
  BYTE1(v891[1]) = 1;
LABEL_1408:
  if (*(_DWORD *)(v357 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v357, a2, this, v18, (uint64_t)a5, a6, a7, a8))
  {
    goto LABEL_680;
  }
  if ((v769 & 1) != 0)
    goto LABEL_688;
LABEL_1410:
  v770 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v897, (unint64_t)v883);
  if (!v770)
    goto LABEL_680;
  v11 = v770;
  v357 = (uint64_t)v883[7];
LABEL_640:
  v359 = (_BYTE *)(v11 + 6);
  v360 = v355 >> 4;
  v361 = v11;
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v362 = v11;
    do
    {
      v363 = *(_DWORD *)v362 & 0xFFFFFFFE;
      v364 = 16 * v363;
      if (!(_DWORD)v360 || (v360 & ~*(_DWORD *)(16 * v363 + 0x20)) != 0)
        goto LABEL_653;
      v365 = *(_QWORD *)(16 * v363 + 0x58);
      if (!v365)
      {
        v376 = *(_QWORD *)(16 * v363 + 0x40);
        if (!v376 || *(_BYTE *)(v376 + 5) != 1 && *(_DWORD *)(v376 + 80) < 2u)
          goto LABEL_653;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v364, (JSC::VM *)v357, 1, (const JSC::PropertyTable *)v18, (uint64_t)a5, a6, a7, a8);
        if (!v365)
          goto LABEL_653;
      }
      if (!*(_DWORD *)(v365 + 24))
        goto LABEL_653;
      v366 = *(_QWORD *)(v365 + 16);
      v367 = v366 & 0xFFFFFFFFFFFFFFFELL;
      v368 = *(unsigned int *)(v365 + 8);
      v369 = *(_DWORD *)(v355 + 16);
      if ((v366 & 1) != 0)
      {
        if ((v369 & 0x20) != 0)
          v369 = *(_DWORD *)(v355 + 32);
        v370 = *(_DWORD *)(v365 + 12);
        v371 = (v369 >> 8) & *(_QWORD *)&v370;
        v372 = *(unsigned __int8 *)(v367 + v371);
        if (!*(_BYTE *)(v367 + v371))
          goto LABEL_653;
        v373 = v367 + v368;
        v374 = 1;
        while (1)
        {
          v375 = *(_QWORD *)(v373 + 8 * (v372 - 1));
          if (v355 == (v375 & 0xFFFFFFFFFFFFLL))
            break;
          v371 = ((_DWORD)v371 + v374) & v370;
          v372 = *(unsigned __int8 *)(v367 + v371);
          ++v374;
          if (!*(_BYTE *)(v367 + v371))
            goto LABEL_653;
        }
        a6 = (v375 >> 16) & 0xFF00000000 | HIBYTE(v375);
      }
      else
      {
        if ((v369 & 0x20) != 0)
          v369 = *(_DWORD *)(v355 + 32);
        v377 = *(_DWORD *)(v365 + 12);
        v378 = v377 & (v369 >> 8);
        v379 = *(_DWORD *)(v367 + 4 * v378);
        if (!v379)
          goto LABEL_653;
        v380 = v367 + 4 * v368;
        v381 = 1;
        while (1)
        {
          v382 = (v379 - 1);
          if (v355 == *(_QWORD *)(v380 + 16 * v382))
            break;
          v378 = (v378 + v381) & v377;
          v379 = *(_DWORD *)(v367 + 4 * v378);
          ++v381;
          if (!v379)
            goto LABEL_653;
        }
        a6 = *(unsigned int *)(v380 + 16 * v382 + 8) | ((unint64_t)*(unsigned __int8 *)(v380 + 16 * v382 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = (JSC::Structure *)HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v387 = v362 + 16;
          v388 = a6 << 32;
        }
        else
        {
          v387 = *(_QWORD *)(v362 + 8) - 8;
          v388 = 0x3F00000000 - (a6 << 32);
        }
        v18 = *(_QWORD *)(v387 + (v388 >> 29));
        if ((v18 & 0xFFFE000000000002) != 0)
        {
LABEL_686:
          v886 = (WTF::StringImpl *)v18;
          v890 = (JSC::JSString *)v362;
LABEL_687:
          v888 = (WTF *)__PAIR64__(a6, a5);
          LOWORD(v891[1]) = 257;
          goto LABEL_688;
        }
        v389 = *(unsigned __int8 *)(v18 + 5);
        if (v389 != 5)
        {
          if (v389 != 6)
            goto LABEL_686;
          v428 = *(_DWORD *)(v364 + 16) & 3;
          v429 = *(JSC::InlineCacheHandler **)(v18 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v431 = *(int8x16_t ***)(v18 + 24);
            v430 = *(_QWORD *)(v18 + 32);
            v886 = *(WTF::StringImpl **)(v18 + 8);
            v887 = v429;
            LODWORD(v888) = HIDWORD(a6);
            v890 = (JSC::JSString *)v362;
            goto LABEL_761;
          }
          v886 = *(WTF::StringImpl **)(v18 + 8);
          v887 = v429;
          LODWORD(v888) = HIDWORD(a6);
          v890 = (JSC::JSString *)v362;
LABEL_991:
          BYTE1(v891[1]) = 3;
          if (v428 != 2)
            LOBYTE(v891[1]) = 1;
          goto LABEL_688;
        }
        v410 = (unsigned int *)v362;
LABEL_728:
        JSC::JSObject::fillGetterPropertySlot(v410, v357, (uint64_t)&v886, v18, (int)a5, a6);
        goto LABEL_688;
      }
LABEL_653:
      if ((*v359 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v362, (JSC::VM *)v357, v355, (uint64_t)&v886) & 1) != 0)
      {
        goto LABEL_688;
      }
      v361 = *(_QWORD *)(v364 + 48);
      if (!v361)
        v361 = *(_QWORD *)(v362 + 16);
      if ((v361 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v361 + 5) < 0x17u)
      {
        if (!v355)
          goto LABEL_680;
        v383 = *(_DWORD *)(v355 + 16);
        if ((v383 & 0x20) != 0)
          goto LABEL_680;
        v384 = *(_WORD **)(v355 + 8);
        v385 = *(unsigned int *)(v355 + 4);
        if ((v383 & 4) == 0)
        {
          if ((_DWORD)v385)
          {
            v386 = (unsigned __int16)*v384 - 48;
            if (v386 <= 9 && (*v384 != 48 || v385 <= 1))
            {
              v392 = v385 - 1;
              v393 = v384 + 1;
              IndexQuicklyForTypedArray = 10;
              while (v392)
              {
                if (v386 <= 0x19999999)
                {
                  v394 = *v393 - 48;
                  if (v394 <= 9)
                  {
                    v556 = __CFADD__(v394, 10 * v386);
                    v386 = v394 + 10 * (_DWORD)v386;
                    --v392;
                    ++v393;
                    if (!v556)
                      continue;
                  }
                }
                goto LABEL_690;
              }
              v404 = (_DWORD)v386 == -1;
              goto LABEL_712;
            }
          }
          goto LABEL_680;
        }
        if (!(_DWORD)v385
          || (v386 = *(unsigned __int8 *)v384 - 48, v386 > 9)
          || v385 >= 2 && *(_BYTE *)v384 == 48)
        {
          IndexQuicklyForTypedArray = 10;
          goto LABEL_690;
        }
        v704 = v385 - 1;
        v705 = (unsigned __int8 *)v384 + 1;
        IndexQuicklyForTypedArray = 10;
        while (v704)
        {
          if (v386 <= 0x19999999)
          {
            v706 = *v705 - 48;
            if (v706 <= 9)
            {
              v556 = __CFADD__(v706, 10 * v386);
              v386 = v706 + 10 * (_DWORD)v386;
              --v704;
              ++v705;
              if (!v556)
                continue;
            }
          }
          goto LABEL_690;
        }
        v404 = (_DWORD)v386 == -1;
LABEL_712:
        if (v404)
        {
LABEL_680:
          IndexQuicklyForTypedArray = 10;
          goto LABEL_690;
        }
        v405 = v883[7];
        IndexQuicklyForTypedArray = 10;
        while (2)
        {
          v406 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
          v407 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v406 + 0x4C) + 0x70))(v11, v883, v386, &v886);
          if (*((_DWORD *)v405 + 20))
          {
            v560 = *((_DWORD *)v405 + 20);
            if ((v560 & 0x27) != 0 && (v560 & 0x20) == 0)
              JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v405 + 64), 7u, this, v18, (uint64_t)a5, a6, a7, a8);
            if (*((_QWORD *)v405 + 2))
              goto LABEL_680;
          }
          if ((v407 & 1) != 0)
            goto LABEL_688;
          if (BYTE2(v891[1]) == 3)
          {
            if (BYTE4(v891[1]))
              goto LABEL_680;
            v408 = *(unsigned __int8 *)(v11 + 5);
            if (v408 != 61)
              goto LABEL_718;
          }
          else
          {
            v408 = *(unsigned __int8 *)(v11 + 5);
            if (v408 == 61)
            {
              if (BYTE2(v891[1]) == 1)
                goto LABEL_680;
            }
            else
            {
LABEL_718:
              if ((v408 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8) <= v386)
              {
                goto LABEL_680;
              }
            }
          }
          if ((*(_WORD *)(v406 + 12) & 0x800) == 0 || BYTE2(v891[1]) == 3)
          {
            v409 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v409)
              v409 = *(_QWORD *)(v11 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v409 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v11, v883);
            }
            else
            {
              v409 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v409)
                v409 = *(_QWORD *)(v11 + 16);
            }
            if (*((_DWORD *)v405 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v405, a2, this, v18, (uint64_t)a5, a6, a7, a8))
            {
              goto LABEL_680;
            }
          }
          if ((v409 & 0xFFFE000000000002) != 0)
            goto LABEL_690;
          v11 = v409;
          if (*(unsigned __int8 *)(v409 + 5) <= 0x16u)
            goto LABEL_690;
          continue;
        }
      }
      v359 = (_BYTE *)(v361 + 6);
      v362 = v361;
    }
    while ((*(_BYTE *)(v361 + 6) & 8) == 0);
  }
  if (!v355)
    goto LABEL_857;
  v474 = *(_DWORD *)(v355 + 16);
  if ((v474 & 0x20) != 0)
    goto LABEL_857;
  v475 = *(_WORD **)(v355 + 8);
  v476 = *(unsigned int *)(v355 + 4);
  if ((v474 & 4) == 0)
  {
    if ((_DWORD)v476)
    {
      v477 = (unsigned __int16)*v475 - 48;
      if (v477 <= 9 && (*v475 != 48 || v476 <= 1))
      {
        v537 = v476 - 1;
        v538 = v475 + 1;
        while (v537)
        {
          if (v477 <= 0x19999999)
          {
            v539 = *v538 - 48;
            if (v539 <= 9)
            {
              v556 = __CFADD__(v539, 10 * v477);
              v477 = v539 + 10 * (_DWORD)v477;
              --v537;
              ++v538;
              if (!v556)
                continue;
            }
          }
          goto LABEL_857;
        }
        goto LABEL_1480;
      }
    }
    goto LABEL_857;
  }
  if ((_DWORD)v476)
  {
    v477 = *(unsigned __int8 *)v475 - 48;
    if (v477 <= 9 && (v476 < 2 || *(_BYTE *)v475 != 48))
    {
      v796 = v476 - 1;
      v797 = (unsigned __int8 *)v475 + 1;
      while (v796)
      {
        if (v477 <= 0x19999999)
        {
          v798 = *v797 - 48;
          if (v798 <= 9)
          {
            v556 = __CFADD__(v798, 10 * v477);
            v477 = v798 + 10 * (_DWORD)v477;
            --v796;
            ++v797;
            if (!v556)
              continue;
          }
        }
        goto LABEL_857;
      }
LABEL_1480:
      if ((_DWORD)v477 != -1)
      {
        v799 = v883[7];
        IndexQuicklyForTypedArray = 10;
        while (1)
        {
          v800 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
          v801 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v800 + 0x4C) + 0x70))(v11, v883, v477, &v886);
          v802 = v801;
          if (*((_DWORD *)v799 + 20))
          {
            v805 = JSC::VM::hasExceptionsAfterHandlingTraps(v799, a2, this, v18, (uint64_t)a5, a6, a7, a8);
            if (((v805 | v802) & 1) != 0)
            {
              if (!v805)
                goto LABEL_688;
              goto LABEL_680;
            }
          }
          else if ((v801 & 1) != 0)
          {
            goto LABEL_688;
          }
          if (BYTE2(v891[1]) == 3)
          {
            if (BYTE4(v891[1]))
              goto LABEL_680;
            v803 = *(unsigned __int8 *)(v11 + 5);
            if (v803 == 61)
              goto LABEL_1487;
          }
          else
          {
            v803 = *(unsigned __int8 *)(v11 + 5);
            if (v803 == 61)
            {
              if (BYTE2(v891[1]) == 1)
                goto LABEL_680;
              goto LABEL_1487;
            }
          }
          if ((v803 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, a2, this, v18, (uint64_t)a5, a6, a7, a8) <= v477)
          {
            goto LABEL_680;
          }
LABEL_1487:
          if ((*(_WORD *)(v800 + 12) & 0x800) == 0 || BYTE2(v891[1]) == 3)
          {
            v804 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v804)
              v804 = *(_QWORD *)(v11 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v804 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v11, v883);
            }
            else
            {
              v804 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v804)
                v804 = *(_QWORD *)(v11 + 16);
            }
            if (*((_DWORD *)v799 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v799, a2, this, v18, (uint64_t)a5, a6, a7, a8))
            {
              goto LABEL_680;
            }
          }
          if ((v804 & 0xFFFE000000000002) == 0)
          {
            v11 = v804;
            if (*(unsigned __int8 *)(v804 + 5) > 0x16u)
              continue;
          }
          goto LABEL_690;
        }
      }
    }
  }
LABEL_857:
  v357 = (uint64_t)v883[7];
  IndexQuicklyForTypedArray = 10;
  while (2)
  {
    v478 = 16 * (*(_DWORD *)v361 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v361 + 6) & 8) != 0)
    {
      v635 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v361 & 0xFFFFFFFE) + 0x4C) + 0x68))(v361, v883, v355, &v886);
      if (*(_DWORD *)(v357 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v357, a2, this, v18, (uint64_t)a5, a6, a7, a8))
      {
LABEL_1306:
        IndexQuicklyForTypedArray = 10;
        goto LABEL_690;
      }
      if ((v635 & 1) != 0)
        goto LABEL_688;
      if (BYTE2(v891[1]) != 3)
      {
        v636 = *(unsigned __int8 *)(v361 + 5);
        if (v636 == 61)
        {
          if (BYTE2(v891[1]) == 1)
            goto LABEL_680;
          goto LABEL_864;
        }
LABEL_1151:
        if (!v355)
          goto LABEL_864;
        if ((v636 - 50) < 0xFFFFFFF5)
          goto LABEL_864;
        v637 = *(_DWORD *)(v355 + 16);
        if ((v637 & 0x20) != 0)
          goto LABEL_864;
        v638 = *(unsigned int *)(v355 + 4);
        if (!(_DWORD)v638)
          goto LABEL_864;
        v639 = *(unsigned __int8 **)(v355 + 8);
        if ((v637 & 4) != 0)
        {
          v640 = *v639;
          if ((_DWORD)v638 == 1)
          {
LABEL_1157:
            if ((v640 - 48) < 0xA)
              goto LABEL_680;
            goto LABEL_864;
          }
          if (v640 == 45)
          {
            v640 = v639[1];
            goto LABEL_1195;
          }
          if ((v640 - 48) >= 0xA)
          {
            if ((_DWORD)v638 == 8)
              goto LABEL_1228;
            goto LABEL_1232;
          }
        }
        else
        {
          v640 = *(unsigned __int16 *)v639;
          if ((_DWORD)v638 == 1)
            goto LABEL_1157;
          if (v640 == 45)
          {
            v640 = *((unsigned __int16 *)v639 + 1);
LABEL_1195:
            if ((v640 - 48) < 0xA)
            {
              if ((_DWORD)v638 == 2)
                goto LABEL_1306;
              goto LABEL_1203;
            }
            if ((_DWORD)v638 != 9)
              goto LABEL_864;
LABEL_1228:
            if (v640 != 73)
              goto LABEL_864;
            goto LABEL_1203;
          }
          if ((v640 - 48) >= 0xA && ((_DWORD)v638 != 8 || v640 != 73))
          {
LABEL_1232:
            if ((_DWORD)v638 != 3 || v640 != 78)
              goto LABEL_864;
          }
        }
LABEL_1203:
        v884 = v884 & 0xFFFFFF0000000000 | v638 | ((unint64_t)((v637 >> 2) & 1) << 32);
        JSC::jsToNumber(v639, v884);
        WTF::numberToString(&v903, v687);
        if (WTF::equal(v355, (unint64_t)&v903, v688))
          goto LABEL_680;
        goto LABEL_864;
      }
      if (BYTE4(v891[1]))
        goto LABEL_1306;
      v636 = *(unsigned __int8 *)(v361 + 5);
      if (v636 != 61)
        goto LABEL_1151;
LABEL_864:
      if ((*(_WORD *)(v478 + 12) & 0x800) != 0)
      {
        v481 = *(_DWORD *)v361;
        if (BYTE2(v891[1]) != 3)
        {
          v620 = 16 * (v481 & 0xFFFFFFFE);
          if ((*(_WORD *)(v620 + 12) & 0x800) != 0)
          {
            v482 = (*(uint64_t (**)(unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v620 + 76)
                                                                                   + 0xB0))(v361, v883);
          }
          else
          {
            v482 = *(_QWORD *)(v620 + 48);
            if (!v482)
              v482 = *(_QWORD *)(v361 + 16);
          }
          if (*(_DWORD *)(v357 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v357, a2, this, v18, (uint64_t)a5, a6, a7, a8))
          {
            goto LABEL_680;
          }
          goto LABEL_868;
        }
      }
      else
      {
        v481 = *(_DWORD *)v361;
      }
      v482 = *(_QWORD *)(16 * (v481 & 0xFFFFFFFE) + 0x30);
      if (!v482)
        v482 = *(_QWORD *)(v361 + 16);
LABEL_868:
      if ((v482 & 0xFFFE000000000002) != 0)
        goto LABEL_690;
      v361 = v482;
      if (*(unsigned __int8 *)(v482 + 5) <= 0x16u)
        goto LABEL_690;
      continue;
    }
    break;
  }
  if (!(_DWORD)v360
    || (v360 & ~*(_DWORD *)(16 * (*(_DWORD *)v361 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v361 & 0xFFFFFFFE)), (JSC::VM *)v357, this, (const JSC::PropertyTable *)v18, (uint64_t)a5, a6, a7, a8), !v479)|| (v903 = (WTF::StringImpl *)v355, v480 = JSC::PropertyTable::get(v479, (uint64_t *)&v903), a6 = v480, (_DWORD)v480 == -1))
  {
    if ((*(_BYTE *)(v361 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v361, (JSC::VM *)v357, v355, (uint64_t)&v886) & 1) != 0)
    {
      goto LABEL_688;
    }
    goto LABEL_864;
  }
  a5 = (JSC::Structure *)HIDWORD(v480);
  if ((int)v480 <= 63)
  {
    v525 = v361 + 16;
    v526 = v480 << 32;
  }
  else
  {
    v525 = *(_QWORD *)(v361 + 8) - 8;
    v526 = 0x3F00000000 - (v480 << 32);
  }
  v18 = *(_QWORD *)(v525 + (v526 >> 29));
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_931;
  v527 = *(unsigned __int8 *)(v18 + 5);
  if (v527 == 5)
  {
    v410 = (unsigned int *)v361;
    goto LABEL_728;
  }
  if (v527 != 6)
  {
LABEL_931:
    v886 = (WTF::StringImpl *)v18;
    v890 = (JSC::JSString *)v361;
    goto LABEL_687;
  }
  v428 = *(_DWORD *)(v478 + 16) & 3;
  v599 = *(JSC::InlineCacheHandler **)(v18 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v886 = *(WTF::StringImpl **)(v18 + 8);
    v887 = v599;
    LODWORD(v888) = HIDWORD(v480);
    v890 = (JSC::JSString *)v361;
    goto LABEL_991;
  }
  v431 = *(int8x16_t ***)(v18 + 24);
  v430 = *(_QWORD *)(v18 + 32);
  v886 = *(WTF::StringImpl **)(v18 + 8);
  v887 = v599;
  LODWORD(v888) = HIDWORD(v480);
  v890 = (JSC::JSString *)v361;
LABEL_761:
  BYTE1(v891[1]) = 3;
  if (v428 != 2)
    LOBYTE(v891[1]) = 1;
  BYTE3(v891[1]) = 1;
  v894 = v431;
  v895 = v430;
LABEL_688:
  if (BYTE1(v891[1]) == 1)
  {
    IndexQuicklyForTypedArray = (unint64_t)v886;
  }
  else
  {
    if (BYTE1(v891[1]) == 2)
    {
      v403 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v886, (JSC::JSGlobalObject *)v883, this, v18, (uint64_t)a5, a6, a7, a8);
    }
    else
    {
      v411 = (unint64_t)v890;
      v412 = *(_QWORD *)(16 * (*(_DWORD *)v890 & 0xFFFFFFFE) + 0x28);
      if ((v888 & 0x20) != 0)
        v411 = v889;
      if (BYTE3(v891[1]) != 1)
        goto LABEL_745;
      if ((v411 & 0xFFFE000000000002) != 0)
        goto LABEL_1225;
      v413 = *(unsigned int *)(16 * (*(_DWORD *)v411 & 0xFFFFFFFE) + 0x4C);
      v414 = *(_DWORD *)(16 * (*(_DWORD *)v411 & 0xFFFFFFFE) + 0x4C) != 0;
      v415 = 16 * v413;
      if ((_DWORD)v413)
        v416 = v894 == (int8x16_t **)v415;
      else
        v416 = 1;
      if (!v416)
      {
        do
        {
          v415 = *(_QWORD *)(v415 + 16);
          v414 = v415 != 0;
        }
        while ((int8x16_t **)v415 != v894 && v415 != 0);
      }
      if (!v414)
      {
LABEL_1225:
        v903 = v883[7];
        v403 = JSC::throwDOMAttributeGetterTypeError(v412, &v903, v894, (WTF::StringImpl *)v355);
      }
      else
      {
LABEL_745:
        v403 = ((uint64_t (*)(unint64_t))v886)(v412);
      }
    }
    IndexQuicklyForTypedArray = v403;
  }
LABEL_690:
  if (v893)
  {
    v390 = *(_DWORD *)(v892 + 4);
    if (!v390)
    {
      __break(0xC471u);
      JUMPOUT(0x19879EEA0);
    }
    *(_DWORD *)(v892 + 4) = v390 - 1;
  }
LABEL_693:
  if (v355)
  {
    if (*(_DWORD *)v355 != 2)
    {
      *(_DWORD *)v355 -= 2;
      return IndexQuicklyForTypedArray;
    }
    v300 = (WTF::StringImpl *)v355;
LABEL_707:
    WTF::StringImpl::~StringImpl(v300, (WTF::AtomStringImpl *)a2, this, v18, (uint64_t)a5, a6, a7, a8);
    WTF::fastFree(v395, v396, v397, v398, v399, v400, v401, v402);
  }
  return IndexQuicklyForTypedArray;
}

uint64_t operationGetByValMegamorphic(uint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  JSC::VM *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  JSC::VM *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _WORD *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  JSC::VM *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  __int16 v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned __int16 v98;
  _QWORD *v99;
  int v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int16 v120;
  _QWORD *v121;
  int v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  _DWORD *v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  int v137;
  _WORD *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char **v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char **v162;
  unint64_t v163;
  __int16 v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  JSC::VM *v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  const WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  __int16 v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int16 *v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  _DWORD *v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  char **v239;
  unint64_t v240;
  JSC::VM *v241;
  JSC::VM *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int8x16_t **v251;
  unint64_t v252;
  JSC::VM *v253;
  uint64_t v254;
  char v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  BOOL v268;
  uint64_t v269;
  BOOL v270;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int8x16_t **v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  _QWORD *v289;
  uint64_t v290;
  WTF::StringImpl **v291;
  WTF::StringImpl **v292;
  WTF::StringImpl *v293;
  int v294;
  int v295;
  unsigned int v296;
  char v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  unsigned __int16 *v313;
  uint64_t v314;
  unsigned int v315;
  unint64_t v316;
  unint64_t v317;
  JSC::VM *v318;
  uint64_t v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  unint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  unsigned int v346;
  char v347;
  char v348;
  int v349;
  unsigned int v350;
  uint64_t v351;
  unsigned __int8 *v352;
  int v353;
  int v354;
  int v355;
  unsigned int v356;
  char v357;
  JSC::VM *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  _BOOL4 v369;
  BOOL isMappedArgument;
  unsigned int v371;
  double v372;
  const unsigned __int8 *v373;
  uint64_t **v374;
  WTF::AtomStringImpl *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  JSC::VM *v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unint64_t v398;
  unsigned int v399;
  uint64_t IndexQuickly;
  BOOL canAccessArgumentIndexQuickly;
  JSC::VM *v402;
  unsigned int v403;
  uint64_t v404;
  char v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  int v421;
  _WORD *v422;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  JSC::VM *v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  int v437;
  int v438;
  _WORD *v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  unint64_t v445;
  unsigned __int16 *v446;
  uint64_t v447;
  unsigned int v448;
  WTF::StringImpl *v449;
  unint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  unsigned int *v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char OwnStaticPropertySlot;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  unint64_t v479;
  WTF::StringImpl *v480;
  unint64_t v481;
  JSC::VM *v482;
  uint64_t v483;
  char v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  int8x16_t **v490;
  unint64_t v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  WTF::StringImpl *v494;
  WTF::StringImpl *v495;
  WTF::StringImpl *v496;
  int v497;
  _QWORD *v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  int v505;
  uint64_t v506;
  int v507;
  int v508;
  unsigned int v509;
  char v510;
  unint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _DWORD *v520;
  unint64_t v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v531;
  uint64_t v532;
  int v533;
  unint64_t v534;
  BOOL v535;
  unint64_t v536;
  BOOL v537;
  unsigned __int16 *v538;
  uint64_t v539;
  unsigned int v540;
  unint64_t v541;
  JSC::VM *v542;
  uint64_t v543;
  int v544;
  int v545;
  int v546;
  uint64_t v547;
  char v548;
  unint64_t v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unsigned int v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  int8x16_t **v571;
  uint64_t v572;
  char v573;
  int v574;
  unsigned int v575;
  uint64_t v576;
  unsigned __int8 *v577;
  int v578;
  int v579;
  int v580;
  unsigned int v581;
  char v582;
  uint64_t v583;
  unsigned __int8 *v584;
  unsigned int v585;
  int v586;
  WTF::StringImpl *v587;
  WTF::StringImpl *v588;
  WTF::StringImpl *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  _QWORD *v592;
  uint64_t v593;
  WTF::StringImpl **v594;
  WTF::StringImpl **v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  int v598;
  unint64_t v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  void *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  void *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  void *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int *v632;
  uint64_t v633;
  WTF::StringImpl *v634;
  int v635;
  char v636;
  uint64_t v637;
  JSC::VM *v638;
  unint64_t v639;
  unint64_t NotAnObjectError;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _QWORD *v646;
  uint64_t v647;
  unsigned int v648;
  uint64_t v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  int v657;
  int v658;
  unsigned int v659;
  uint64_t v660;
  unsigned __int8 *v661;
  int v662;
  _BOOL4 v663;
  uint64_t **v664;
  WTF::StringImpl *v665;
  int v666;
  _WORD *v667;
  uint64_t v668;
  unsigned int v669;
  uint64_t v670;
  unsigned int v671;
  unsigned int v672;
  double v673;
  const unsigned __int8 *v674;
  _BOOL4 v675;
  uint64_t v676;
  _DWORD *v677;
  char v678;
  unsigned __int16 *v679;
  uint64_t v680;
  unsigned int v681;
  unint64_t v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int v691;
  uint64_t v692;
  double v693;
  const unsigned __int8 *v694;
  uint64_t v695;
  unsigned __int8 *v696;
  unsigned int v697;
  uint64_t v698;
  unsigned __int8 *v699;
  unsigned int v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  WTF::StringImpl *v704;
  WTF::StringImpl *v705;
  WTF::StringImpl *v706;
  WTF::StringImpl *v707;
  WTF::StringImpl *v708;
  uint64_t v709;
  unsigned int *v710;
  uint64_t v711;
  WTF::StringImpl *v712;
  int v713;
  char v714;
  uint64_t v715;
  _DWORD *v716;
  WTF::StringImpl *Index;
  int v718;
  int v719;
  _BYTE *v720;
  uint64_t v721;
  unsigned int v722;
  uint64_t v723;
  unsigned int v724;
  unsigned int v725;
  int v726;
  WTF::StringImpl *v727;
  unint64_t v728;
  void *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unsigned __int16 *v736;
  uint64_t v737;
  unsigned int v738;
  _BOOL4 v739;
  _BOOL4 v740;
  unsigned int v741;
  uint64_t v742;
  _DWORD *v743;
  unint64_t v744;
  void *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unsigned __int8 *v753;
  unsigned int v754;
  unint64_t v755;
  void *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  _DWORD *v764;
  unsigned int v765;
  uint64_t v766;
  unsigned __int8 *v767;
  unsigned int v768;
  unsigned int v769;
  uint64_t v770;
  unsigned __int8 *v771;
  unsigned int v772;
  uint64_t **v773;
  WTF::StringImpl *v774;
  unint64_t v775;
  void *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unsigned int v783;
  __int16 v784;
  unint64_t v785;
  unint64_t v786;
  JSC::JSGlobalObject *v787;
  uint64_t v788;
  unsigned int v789;
  uint64_t v790;
  WTF::StringImpl *v791;
  uint64_t v792;
  unint64_t v793;
  _DWORD *v794;
  _DWORD *v795;
  _QWORD v796[2];
  uint64_t v797;
  char v798;
  int8x16_t **v799;
  uint64_t v800;
  WTF::StringImpl *v801[2];
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  _QWORD v805[2];
  uint64_t v806;
  char v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t vars0;

  v9 = a4;
  v10 = a3;
  v11 = this;
  v810 = *MEMORY[0x1E0C80C00];
  v787 = *(JSC::JSGlobalObject **)(a3 + 56);
  v12 = *((_QWORD *)v787 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  v788 = a1;
  v14 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) == 0
    && (this & 0xFFFE000000000002) == 0
    && *(unsigned __int8 *)(a1 + 5) >= 0x17u
    && *(_BYTE *)(this + 5) == 2)
  {
    v15 = *(_QWORD *)(this + 8);
    if (v15)
    {
      if ((v15 & 1) == 0)
      {
        v16 = *(_DWORD *)(v15 + 16);
        if ((v16 & 0x10) != 0)
        {
          *(_DWORD *)v15 += 2;
          if (*(_DWORD *)(v12 + 80))
          {
            v308 = v15;
            if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, this, a3, a4, a5, a6, a7, a8))
            {
              v10 = 0;
              goto LABEL_744;
            }
            v15 = v308;
            v16 = *(_DWORD *)(v308 + 16);
          }
          v17 = *(_BYTE **)(v15 + 8);
          v18 = *(unsigned int *)(v15 + 4);
          if ((v16 & 4) != 0)
          {
            if ((_DWORD)v18)
            {
              v19 = *v17 - 48;
              if (v19 <= 9 && (v18 < 2 || *v17 != 48))
              {
                v383 = v18 - 1;
                v384 = v17 + 1;
                while (v383)
                {
                  if (v19 <= 0x19999999)
                  {
                    v385 = *v384 - 48;
                    if (v385 <= 9)
                    {
                      v111 = __CFADD__(v385, 10 * v19);
                      v19 = v385 + 10 * v19;
                      --v383;
                      ++v384;
                      if (!v111)
                        continue;
                    }
                  }
                  goto LABEL_12;
                }
LABEL_604:
                if (v19 != -1)
                  goto LABEL_605;
              }
            }
          }
          else if ((_DWORD)v18)
          {
            v19 = *(unsigned __int16 *)v17 - 48;
            if (v19 <= 9 && (*(_WORD *)v17 != 48 || v18 <= 1))
            {
              v108 = (unsigned __int16 *)(v17 + 2);
              v109 = v18 - 1;
              while (v109)
              {
                if (v19 <= 0x19999999)
                {
                  v110 = *v108 - 48;
                  if (v110 <= 9)
                  {
                    v111 = __CFADD__(v110, 10 * v19);
                    v19 = v110 + 10 * v19;
                    ++v108;
                    --v109;
                    if (!v111)
                      continue;
                  }
                }
                goto LABEL_12;
              }
              goto LABEL_604;
            }
          }
LABEL_12:
          v20 = *(_QWORD **)(v12 + 41952);
          if (v20[221] == v15 || v20[246] == v15 || v20[270] == v15 || v20[2] == v15)
          {
LABEL_605:
            if (v10)
            {
              *(_WORD *)(v10 + 129) |= 4u;
              if (*(_BYTE *)(v10 + 124))
              {
                --*(_BYTE *)(v10 + 124);
              }
              else
              {
                v394 = *(unsigned __int8 *)(v10 + 125);
                if (v394 != 255)
                  *(_BYTE *)(v10 + 125) = ++v394;
                v395 = v15;
                if (xmmword_1ECF4C260 < v394)
                {
                  *(_BYTE *)(v10 + 125) = 0;
                  v507 = *(unsigned __int8 *)(v10 + 126);
                  v508 = BYTE4(xmmword_1ECF4C260) << v507;
                  v509 = v508;
                  if (v508 == 255)
                    LOBYTE(v508) = -2;
                  if (v509 >> v507 == BYTE4(xmmword_1ECF4C260))
                    v510 = v508;
                  else
                    v510 = -2;
                  *(_BYTE *)(v10 + 124) = v510;
                  if (v507 != 255)
                    *(_BYTE *)(v10 + 126) = v507 + 1;
                  *(_BYTE *)(v10 + 127) = 0;
                }
                else if (*(_BYTE *)(v10 + 127))
                {
                  --*(_BYTE *)(v10 + 127);
                }
                JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v13 + 16), v10, 1, a4, a5, a6, a7, a8);
                v15 = v395;
              }
            }
            v790 = v788;
            v386 = (JSC::VM *)*((_QWORD *)v787 + 7);
            if (((v11 | v788) & 0xFFFE000000000002) != 0)
              goto LABEL_633;
            if (*(_BYTE *)(v11 + 5) != 2)
              goto LABEL_633;
            v387 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
            if (((*(_DWORD *)(v387 + 0x10) | *(unsigned __int8 *)(v387 + 0xA)) & 8) != 0)
              goto LABEL_633;
            v388 = *(_QWORD *)(v11 + 8);
            if ((v388 & 1) != 0)
            {
              v445 = v15;
              JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v11, v787);
            }
            else
            {
              if ((*(_BYTE *)(v388 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v388 += 2;
                goto LABEL_614;
              }
              v445 = v15;
              WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v11 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v801);
            }
            v15 = v445;
            v388 = (unint64_t)v801[0];
LABEL_614:
            if (*((_DWORD *)v386 + 20))
            {
              v529 = v15;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v386, this, a3, a4, a5, a6, a7, a8);
              v15 = v529;
              if (hasExceptionsAfterHandlingTraps)
              {
                v10 = 0;
                if (!v388)
                  goto LABEL_161;
                goto LABEL_623;
              }
            }
            if (v388)
            {
              if ((v388 >> 4))
              {
                if (((v388 >> 4) & ~*(_DWORD *)(v387 + 32)) == 0)
                {
                  v389 = v15;
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v387, v386, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  v15 = v389;
                  if (v390)
                  {
                    v801[0] = (WTF::StringImpl *)v388;
                    v391 = JSC::PropertyTable::get(v390, (uint64_t *)v801);
                    v15 = v389;
                    if ((_DWORD)v391 != -1)
                    {
                      if ((int)v391 <= 63)
                      {
                        v392 = v788 + 16;
                        v393 = v391 << 32;
                      }
                      else
                      {
                        v392 = *(_QWORD *)(v788 + 8) - 8;
                        v393 = 0x3F00000000 - (v391 << 32);
                      }
                      v10 = *(_QWORD *)(v392 + (v393 >> 29));
                      if (v10)
                      {
LABEL_623:
                        if (*(_DWORD *)v388 != 2)
                        {
                          *(_DWORD *)v388 -= 2;
                          goto LABEL_161;
                        }
                        v449 = (WTF::StringImpl *)v388;
                        goto LABEL_743;
                      }
                    }
                  }
                }
              }
              if (*(_DWORD *)v388 == 2)
              {
                v462 = v15;
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v388, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v463, v464, v465, v466, v467, v468, v469, v470);
                v15 = v462;
              }
              else
              {
                *(_DWORD *)v388 -= 2;
              }
            }
LABEL_633:
            if (v11 >= 0xFFFE000000000000 && (v11 & 0x80000000) == 0)
            {
              v396 = v11;
              goto LABEL_636;
            }
            if (v11 >> 49)
            {
              *(double *)a9.i64 = (double)(int)v11;
              if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
                a9.i64[0] = v11 - 0x2000000000000;
              v396 = *(double *)a9.i64;
              if (*(double *)a9.i64 != -1 && *(double *)a9.i64 == (double)v396)
              {
LABEL_636:
                v397 = v15;
                v398 = v396;
                v399 = *(unsigned __int8 *)(v788 + 5);
                if (v399 == 2)
                {
                  v519 = *(_QWORD *)(v788 + 8);
                  if ((v519 & 1) != 0)
                    v520 = (_DWORD *)(v788 + 16);
                  else
                    v520 = (_DWORD *)(v519 + 4);
                  if (*v520 <= v398)
                  {
                    if (v9)
LABEL_642:
                      *(_DWORD *)(v9 + 4) |= 2u;
LABEL_643:
                    a9.i64[0] = 0xFFFFFFFF00000000;
                    v802 = 0xFFFFFFFF00000000;
                    LOBYTE(v806) = 0;
                    v807 = 0;
                    v808 = 0;
                    v809 = 0;
                    v804 = 0;
                    memset(v805, 0, 13);
                    v803 = v788;
                    v402 = (JSC::VM *)*((_QWORD *)v787 + 7);
                    v403 = *(unsigned __int8 *)(v788 + 5);
                    if (v403 > 0x16)
                    {
LABEL_644:
                      v10 = 10;
                      while (1)
                      {
                        v404 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
                        v405 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v404 + 0x4C) + 0x70))();
                        if (*((_DWORD *)v402 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v402, this, a3, a4, a5, a6, a7, a8))
                        {
LABEL_886:
                          v10 = 10;
                          goto LABEL_655;
                        }
                        if ((v405 & 1) != 0)
                        {
                          if (BYTE1(v805[1]) == 1)
                          {
                            v15 = v397;
                            v10 = (uint64_t)v801[0];
                            goto LABEL_727;
                          }
                          if (BYTE1(v805[1]) == 2)
                          {
                            v10 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v801, v787, a3, a4, a5, a6, a7, a8);
                          }
                          else
                          {
                            v664 = (uint64_t **)*((_QWORD *)v787 + 7);
                            JSC::Identifier::from(v664, v398, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v791);
                            v10 = JSC::PropertySlot::customGetter((uint64_t)v801, (JSC::VM *)v664, v791);
                            v665 = v791;
                            v791 = 0;
                            if (v665)
                            {
                              if (*(_DWORD *)v665 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v665, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v682, v683, v684, v685, v686, v687, v688, v689);
                              }
                              else
                              {
                                *(_DWORD *)v665 -= 2;
                              }
                            }
                          }
LABEL_655:
                          v15 = v397;
LABEL_727:
                          if (v807)
                          {
                            v104 = v806;
                            v105 = *(_DWORD *)(v806 + 4);
                            if (!v105)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1987A3B34);
                            }
LABEL_160:
                            *(_DWORD *)(v104 + 4) = v105 - 1;
                          }
LABEL_161:
                          if (*(_DWORD *)v15 != 2)
                          {
                            *(_DWORD *)v15 -= 2;
                            return v10;
                          }
                          v148 = v15;
                          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                          v156 = v148;
LABEL_232:
                          WTF::fastFree(v156, v149, v150, v151, v152, v153, v154, v155);
                          return v10;
                        }
                        if (BYTE2(v805[1]) == 3)
                        {
                          if (BYTE4(v805[1]))
                            goto LABEL_886;
                          v406 = *(unsigned __int8 *)(v788 + 5);
                          if (v406 == 61)
                            goto LABEL_650;
                        }
                        else
                        {
                          v406 = *(unsigned __int8 *)(v788 + 5);
                          if (v406 == 61)
                          {
                            if (BYTE2(v805[1]) == 1)
                              goto LABEL_886;
                            goto LABEL_650;
                          }
                        }
                        if ((v406 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, this, a3, a4, a5, a6, a7, a8) <= v398)
                        {
                          goto LABEL_886;
                        }
LABEL_650:
                        if ((*(_WORD *)(v404 + 12) & 0x800) == 0 || BYTE2(v805[1]) == 3)
                        {
                          v407 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                          if (!v407)
                            v407 = *(_QWORD *)(v788 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v407 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v788, v787);
                          }
                          else
                          {
                            v407 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                            if (!v407)
                              v407 = *(_QWORD *)(v788 + 16);
                          }
                          if (*((_DWORD *)v402 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v402, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_886;
                          }
                        }
                        if ((v407 & 0xFFFE000000000002) == 0)
                        {
                          v788 = v407;
                          if (*(unsigned __int8 *)(v407 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_655;
                      }
                    }
                    if (v403 == 2)
                    {
                      v715 = *(_QWORD *)(v788 + 8);
                      if ((v715 & 1) != 0)
                        v716 = (_DWORD *)(v788 + 16);
                      else
                        v716 = (_DWORD *)(v715 + 4);
                      if (*v716 <= v398
                        || (Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v788, v787, v398, a4, a5, a6, a7, a8, a9), *((_DWORD *)v402 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v402, this, a3, a4, a5, a6, a7, a8))
                      {
                        v718 = 0;
                      }
                      else
                      {
                        v801[0] = Index;
                        LODWORD(v802) = 10;
                        v804 = 0;
                        v718 = 1;
                        BYTE1(v805[1]) = 1;
                      }
                      if (*((_DWORD *)v402 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v402, this, a3, a4, a5, a6, a7, a8))
                      {
                        goto LABEL_1488;
                      }
                      if (v718)
                      {
                        if (BYTE1(v805[1]) == 1)
                        {
                          v10 = (uint64_t)v801[0];
                        }
                        else if (BYTE1(v805[1]) == 2)
                        {
                          v10 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v801, v787, a3, a4, a5, a6, a7, a8);
                        }
                        else
                        {
                          v773 = (uint64_t **)*((_QWORD *)v787 + 7);
                          JSC::Identifier::from(v773, v398, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v791);
                          v10 = JSC::PropertySlot::customGetter((uint64_t)v801, (JSC::VM *)v773, v791);
                          v774 = v791;
                          v791 = 0;
                          if (v774)
                          {
                            if (*(_DWORD *)v774 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v774, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                              WTF::fastFree(v775, v776, v777, v778, v779, v780, v781, v782);
                            }
                            else
                            {
                              *(_DWORD *)v774 -= 2;
                            }
                          }
                        }
                        goto LABEL_655;
                      }
                    }
                    v788 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v790, (unint64_t)v787);
                    if (v788)
                    {
                      v402 = (JSC::VM *)*((_QWORD *)v787 + 7);
                      goto LABEL_644;
                    }
LABEL_1488:
                    v10 = 0;
                    goto LABEL_655;
                  }
                  IndexQuickly = JSC::JSString::getIndex((JSC::JSString *)v788, v787, v398, a4, a5, a6, a7, a8, a9);
                }
                else
                {
                  if (v399 < 0x17)
                    goto LABEL_643;
                  IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v788, v398, v9);
                  if (!IndexQuickly)
                  {
                    if ((*(_BYTE *)(v788 + 4) & 0xF) != 9
                      || *(_DWORD *)(*(_QWORD *)(v788 + 8) - 8) <= v398
                      || ((v472 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x28),
                           v473 = *(unsigned __int8 *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 8),
                           (v473 & 0x10) != 0)
                        ? (v474 = ((v473 & 0xE) + 10) >> 1)
                        : (v474 = (v473 >> 1) & 7),
                          (v475 = *(_DWORD *)(v472 + 4 * v474 + 852)) != 0
                        ? (v476 = 16 * (v475 & 0xFFFFFFFE))
                        : (v476 = 0),
                          v476 != 16 * (*(_DWORD *)v788 & 0xFFFFFFFE)
                       || ((v477 = *(_QWORD *)(v472 + 2304), (v477 & 1) != 0)
                         ? (v478 = (v477 >> 1) & 3)
                         : (v478 = *(unsigned __int8 *)(v477 + 4)),
                           v478 == 2)))
                    {
                      canAccessArgumentIndexQuickly = JSC::CommonSlowPaths::canAccessArgumentIndexQuickly((JSC::CommonSlowPaths *)v788, (JSC::JSObject *)v398);
                      if (v9)
                      {
                        if (!canAccessArgumentIndexQuickly)
                          goto LABEL_642;
                      }
                    }
                    goto LABEL_643;
                  }
                }
                v10 = IndexQuickly;
                v15 = v397;
                goto LABEL_161;
              }
              if (v9)
              {
                *(_DWORD *)(v9 + 4) |= 2u;
                if (v11 == 0xFFFE0000FFFFFFFFLL && v788 && (*(_BYTE *)(v788 + 5) & 0xFE) == 0x24)
                {
                  v498 = *(_QWORD **)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x28);
                  v499 = v498[288];
                  v500 = (v499 & 1) != 0 ? (v499 >> 1) & 3 : *(unsigned __int8 *)(v499 + 4);
                  if (v500 != 2)
                  {
                    v501 = v498[287];
                    v502 = (v501 & 1) != 0 ? (v501 >> 1) & 3 : *(unsigned __int8 *)(v501 + 4);
                    if (v502 != 2)
                    {
                      v503 = *(unsigned __int8 *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 8);
                      if ((v503 & 0x10) != 0)
                        v504 = ((v503 & 0xE) + 10) >> 1;
                      else
                        v504 = (v503 >> 1) & 7;
                      v505 = *((_DWORD *)v498 + v504 + 213);
                      if (v505)
                        v506 = 16 * (v505 & 0xFFFFFFFE);
                      else
                        v506 = 0;
                      if (v506 == 16 * (*(_DWORD *)v788 & 0xFFFFFFFE))
                      {
                        v10 = 10;
                        goto LABEL_161;
                      }
                      v692 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                      if (!v692)
                        v692 = *(_QWORD *)(v788 + 16);
                      if (v692 == v498[84] && !*(_DWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x20))
                      {
                        v10 = 10;
                        goto LABEL_161;
                      }
                    }
                  }
                }
              }
            }
            if ((v788 & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v638 = (JSC::VM *)*((_QWORD *)v787 + 7);
              v639 = v15;
              NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v787, v788);
              JSC::VM::throwException(v638, v787, NotAnObjectError, v641, v642, v643, v644, v645);
              v15 = v639;
            }
            if (*((_DWORD *)v386 + 20))
            {
              v534 = v15;
              v535 = JSC::VM::hasExceptionsAfterHandlingTraps(v386, this, a3, a4, a5, a6, a7, a8);
              v15 = v534;
              if (v535)
              {
                v10 = 0;
                goto LABEL_161;
              }
            }
            v408 = *((_QWORD *)v787 + 7);
            if (*(_BYTE *)(v11 + 5) == 2)
            {
              v409 = *(_QWORD *)(v11 + 8);
              if ((v409 & 1) == 0)
              {
                if ((*(_BYTE *)(v409 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v409 += 2;
LABEL_664:
                  if (*((_DWORD *)v386 + 20))
                  {
                    v536 = v15;
                    v537 = JSC::VM::hasExceptionsAfterHandlingTraps(v386, this, a3, a4, a5, a6, a7, a8);
                    v15 = v536;
                    if (v537)
                    {
                      v10 = 0;
                      goto LABEL_712;
                    }
                  }
                  a9.i64[0] = 0xFFFFFFFF00000000;
                  v793 = 0xFFFFFFFF00000000;
                  LOBYTE(v797) = 0;
                  v798 = 0;
                  v799 = 0;
                  v800 = 0;
                  v795 = 0;
                  memset(v796, 0, 13);
                  v794 = (_DWORD *)v788;
                  v410 = *((_QWORD *)v787 + 7);
                  v411 = *(unsigned __int8 *)(v788 + 5);
                  if (v411 > 0x16)
                    goto LABEL_666;
                  if (v411 != 2)
                  {
LABEL_1350:
                    v458 = v15;
                    v788 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v790, (unint64_t)v787);
                    if (!v788)
                    {
                      v10 = 10;
                      goto LABEL_748;
                    }
                    v410 = *((_QWORD *)v787 + 7);
                    v15 = v458;
LABEL_666:
                    v412 = v15;
                    v413 = v788;
                    v414 = v788 + 6;
                    v415 = v409 >> 4;
                    if ((*(_BYTE *)(v788 + 6) & 8) == 0)
                    {
                      v416 = v788;
                      while (1)
                      {
                        v417 = *(_DWORD *)v416 & 0xFFFFFFFE;
                        v418 = 16 * v417;
                        if ((_DWORD)v415)
                        {
                          if ((v415 & ~*(_DWORD *)(16 * v417 + 0x20)) == 0)
                          {
                            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v418, (JSC::VM *)v410, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                            if (v419)
                            {
                              v801[0] = (WTF::StringImpl *)v409;
                              v420 = JSC::PropertyTable::get(v419, (uint64_t *)v801);
                              a6 = v420;
                              if ((_DWORD)v420 != -1)
                              {
                                a5 = HIDWORD(v420);
                                if ((int)v420 <= 63)
                                {
                                  v434 = v416 + 16;
                                  v435 = v420 << 32;
                                }
                                else
                                {
                                  v434 = *(_QWORD *)(v416 + 8) - 8;
                                  v435 = 0x3F00000000 - (v420 << 32);
                                }
                                a4 = *(_QWORD *)(v434 + (v435 >> 29));
                                v15 = v412;
                                if ((a4 & 0xFFFE000000000002) == 0)
                                {
                                  v436 = *(unsigned __int8 *)(a4 + 5);
                                  if (v436 == 5)
                                  {
                                    v460 = (unsigned int *)v416;
                                    v461 = v410;
                                    goto LABEL_750;
                                  }
                                  if (v436 == 6)
                                  {
                                    v487 = *(_DWORD *)(v418 + 16) & 3;
                                    v488 = *(_QWORD *)(a4 + 16);
                                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                    {
                                      v490 = *(int8x16_t ***)(a4 + 24);
                                      v489 = *(_QWORD *)(a4 + 32);
                                      v791 = *(WTF::StringImpl **)(a4 + 8);
                                      v792 = v488;
                                      LODWORD(v793) = HIDWORD(v420);
                                      v795 = (_DWORD *)v416;
                                      goto LABEL_796;
                                    }
                                    v791 = *(WTF::StringImpl **)(a4 + 8);
                                    v792 = v488;
                                    LODWORD(v793) = HIDWORD(v420);
                                    v795 = (_DWORD *)v416;
                                    goto LABEL_874;
                                  }
                                }
                                v791 = (WTF::StringImpl *)a4;
                                v795 = (_DWORD *)v416;
                                v793 = __PAIR64__(v420, HIDWORD(v420));
                                LOWORD(v796[1]) = 257;
                                goto LABEL_707;
                              }
                            }
                          }
                        }
                        v15 = v412;
                        if ((*(_BYTE *)v414 & 0x20) != 0)
                        {
                          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v416, (JSC::VM *)v410, v409, (uint64_t)&v791);
                          v15 = v412;
                          if ((OwnStaticPropertySlot & 1) != 0)
                            goto LABEL_707;
                        }
                        v413 = *(_QWORD *)(v418 + 48);
                        if (!v413)
                          v413 = *(_QWORD *)(v416 + 16);
                        if ((v413 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v413 + 5) < 0x17u)
                          break;
                        v414 = v413 + 6;
                        v416 = v413;
                        if ((*(_BYTE *)(v413 + 6) & 8) != 0)
                          goto LABEL_678;
                      }
                      if (!v409)
                        goto LABEL_724;
                      v438 = *(_DWORD *)(v409 + 16);
                      if ((v438 & 0x20) != 0)
                        goto LABEL_724;
                      v439 = *(_WORD **)(v409 + 8);
                      v440 = *(unsigned int *)(v409 + 4);
                      if ((v438 & 4) == 0)
                      {
                        if ((_DWORD)v440)
                        {
                          v441 = (unsigned __int16)*v439 - 48;
                          if (v441 <= 9 && (*v439 != 48 || v440 <= 1))
                          {
                            v446 = v439 + 1;
                            v447 = v440 - 1;
                            while (v447)
                            {
                              if (v441 > 0x19999999)
                                goto LABEL_720;
                              v448 = *v446 - 48;
                              if (v448 > 9)
                                goto LABEL_720;
                              v442 = 0;
                              LOBYTE(v440) = 0;
                              v443 = 0;
                              v111 = __CFADD__(v448, 10 * v441);
                              v441 = v448 + 10 * v441;
                              ++v446;
                              --v447;
                              if (v111)
                                goto LABEL_722;
                            }
                            v443 = v441 & 0xFFFFFF00;
                            v442 = 0x100000000;
                            if (v441 == -1)
                            {
                              v442 = 0;
                              LOBYTE(v440) = 0;
                            }
                            else
                            {
                              LOBYTE(v440) = v441;
                            }
                            if (v441 == -1)
                              v443 = 0;
                            goto LABEL_722;
                          }
LABEL_720:
                          v442 = 0;
                          LOBYTE(v440) = 0;
                        }
                        else
                        {
                          v442 = 0;
                        }
                        v443 = 0;
LABEL_722:
                        v444 = v440;
LABEL_723:
                        if ((v442 & 0x100000000) == 0)
                        {
LABEL_724:
                          v10 = 10;
                          goto LABEL_709;
                        }
                        v481 = v443 | v444;
                        v482 = (JSC::VM *)*((_QWORD *)v787 + 7);
                        v10 = 10;
                        while (1)
                        {
                          v483 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
                          v484 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v483 + 0x4C) + 0x70))();
                          if (*((_DWORD *)v482 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v482, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_914;
                          }
                          v15 = v412;
                          if ((v484 & 1) != 0)
                            goto LABEL_707;
                          if (BYTE2(v796[1]) == 3)
                          {
                            if (BYTE4(v796[1]))
                              goto LABEL_914;
                            v485 = *(unsigned __int8 *)(v788 + 5);
                            if (v485 == 61)
                              goto LABEL_787;
                          }
                          else
                          {
                            v485 = *(unsigned __int8 *)(v788 + 5);
                            if (v485 == 61)
                            {
                              if (BYTE2(v796[1]) == 1)
                                goto LABEL_914;
                              goto LABEL_787;
                            }
                          }
                          if ((v485 - 39) <= 0xA
                            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, this, a3, a4, a5, a6, a7, a8) <= v481)
                          {
                            goto LABEL_914;
                          }
LABEL_787:
                          if ((*(_WORD *)(v483 + 12) & 0x800) == 0 || BYTE2(v796[1]) == 3)
                          {
                            v486 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                            if (!v486)
                              v486 = *(_QWORD *)(v788 + 16);
                          }
                          else
                          {
                            if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                            {
                              v486 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0xB0))(v788, v787);
                            }
                            else
                            {
                              v486 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                              if (!v486)
                                v486 = *(_QWORD *)(v788 + 16);
                            }
                            if (*((_DWORD *)v482 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v482, this, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_914;
                            }
                          }
                          if ((v486 & 0xFFFE000000000002) != 0)
                            goto LABEL_915;
                          v788 = v486;
                          v15 = v412;
                          if (*(unsigned __int8 *)(v486 + 5) <= 0x16u)
                            goto LABEL_709;
                        }
                      }
                      if ((_DWORD)v440)
                      {
                        v691 = *(unsigned __int8 *)v439 - 48;
                        if (v691 <= 9 && (v440 < 2 || *(_BYTE *)v439 != 48))
                        {
                          v698 = v440 - 1;
                          v699 = (unsigned __int8 *)v439 + 1;
                          while (v698)
                          {
                            if (v691 > 0x19999999)
                              goto LABEL_1235;
                            v700 = *v699 - 48;
                            if (v700 > 9)
                              goto LABEL_1235;
                            v444 = 0;
                            LOBYTE(v440) = 0;
                            v442 = 0;
                            v111 = __CFADD__(v700, 10 * v691);
                            v691 = v700 + 10 * v691;
                            --v698;
                            ++v699;
                            if (v111)
                              goto LABEL_1237;
                          }
                          if (v691 == -1)
                            v444 = 0;
                          else
                            v444 = v691 & 0xFFFFFF00;
                          if (v691 == -1)
                            LOBYTE(v440) = 0;
                          else
                            LOBYTE(v440) = v691;
                          if (v691 == -1)
                            v442 = 0;
                          else
                            v442 = 0x100000000;
                          goto LABEL_1237;
                        }
LABEL_1235:
                        v444 = 0;
                        LOBYTE(v440) = 0;
                      }
                      else
                      {
                        v444 = 0;
                      }
                      v442 = 0;
LABEL_1237:
                      v443 = v440;
                      v15 = v412;
                      goto LABEL_723;
                    }
LABEL_678:
                    if (!v409)
                      goto LABEL_687;
                    v421 = *(_DWORD *)(v409 + 16);
                    if ((v421 & 0x20) != 0)
                      goto LABEL_687;
                    v422 = *(_WORD **)(v409 + 8);
                    v423 = *(unsigned int *)(v409 + 4);
                    if ((v421 & 4) == 0)
                    {
                      if ((_DWORD)v423)
                      {
                        v424 = (unsigned __int16)*v422 - 48;
                        if (v424 <= 9 && (*v422 != 48 || v423 <= 1))
                        {
                          v538 = v422 + 1;
                          v539 = v423 - 1;
                          while (v539)
                          {
                            if (v424 > 0x19999999)
                              goto LABEL_683;
                            v540 = *v538 - 48;
                            if (v540 > 9)
                              goto LABEL_683;
                            v425 = 0;
                            LOBYTE(v423) = 0;
                            v426 = 0;
                            v111 = __CFADD__(v540, 10 * v424);
                            v424 = v540 + 10 * v424;
                            ++v538;
                            --v539;
                            if (v111)
                              goto LABEL_685;
                          }
                          v426 = v424 & 0xFFFFFF00;
                          v425 = 0x100000000;
                          if (v424 == -1)
                          {
                            v425 = 0;
                            LOBYTE(v423) = 0;
                          }
                          else
                          {
                            LOBYTE(v423) = v424;
                          }
                          if (v424 == -1)
                            v426 = 0;
                          goto LABEL_685;
                        }
LABEL_683:
                        v425 = 0;
                        LOBYTE(v423) = 0;
                      }
                      else
                      {
                        v425 = 0;
                      }
                      v426 = 0;
LABEL_685:
                      v427 = v423;
LABEL_686:
                      if ((v425 & 0x100000000) == 0)
                      {
LABEL_687:
                        v428 = (JSC::VM *)*((_QWORD *)v787 + 7);
                        v10 = 10;
                        while (1)
                        {
                          v429 = 16 * (*(_DWORD *)v413 & 0xFFFFFFFE);
                          if ((*(_BYTE *)(v413 + 6) & 8) != 0)
                          {
                            v573 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v413 & 0xFFFFFFFE) + 0x4C) + 0x68))(v413, v787, v409, &v791);
                            if (*((_DWORD *)v428 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v428, this, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_914;
                            }
                            v15 = v412;
                            if ((v573 & 1) != 0)
                              goto LABEL_707;
                            if (BYTE2(v796[1]) == 3)
                            {
                              if (BYTE4(v796[1]))
                                goto LABEL_914;
                              v574 = *(unsigned __int8 *)(v413 + 5);
                              if (v574 != 61)
                              {
LABEL_972:
                                if (!v409)
                                  goto LABEL_694;
                                if ((v574 - 50) < 0xFFFFFFF5)
                                  goto LABEL_694;
                                v575 = *(_DWORD *)(v409 + 16);
                                if ((v575 & 0x20) != 0)
                                  goto LABEL_694;
                                v576 = *(unsigned int *)(v409 + 4);
                                if (!(_DWORD)v576)
                                  goto LABEL_694;
                                v577 = *(unsigned __int8 **)(v409 + 8);
                                if ((v575 & 4) == 0)
                                {
                                  v578 = *(unsigned __int16 *)v577;
                                  if ((_DWORD)v576 == 1)
                                    goto LABEL_978;
                                  if (v578 == 45)
                                  {
                                    v578 = *((unsigned __int16 *)v577 + 1);
                                    goto LABEL_1127;
                                  }
                                  if ((v578 - 48) >= 0xA && ((_DWORD)v576 != 8 || v578 != 73))
                                  {
LABEL_1197:
                                    if ((_DWORD)v576 != 3 || v578 != 78)
                                      goto LABEL_694;
                                  }
LABEL_1158:
                                  v414 = v414 & 0xFFFFFF0000000000 | v576 | ((unint64_t)((v575 >> 2) & 1) << 32);
                                  JSC::jsToNumber(v577, v414);
                                  WTF::numberToString(v801, v673);
                                  if (WTF::equal(v409, (unint64_t)v801, v674))
                                    goto LABEL_1159;
                                  goto LABEL_694;
                                }
                                v578 = *v577;
                                if ((_DWORD)v576 == 1)
                                {
LABEL_978:
                                  if ((v578 - 48) < 0xA)
                                    goto LABEL_1159;
                                  goto LABEL_694;
                                }
                                if (v578 == 45)
                                {
                                  v578 = v577[1];
LABEL_1127:
                                  if ((v578 - 48) < 0xA)
                                  {
                                    if ((_DWORD)v576 == 2)
                                      goto LABEL_914;
                                    goto LABEL_1158;
                                  }
                                  if ((_DWORD)v576 != 9)
                                    goto LABEL_694;
                                }
                                else
                                {
                                  if ((v578 - 48) < 0xA)
                                    goto LABEL_1158;
                                  if ((_DWORD)v576 != 8)
                                    goto LABEL_1197;
                                }
                                if (v578 != 73)
                                  goto LABEL_694;
                                goto LABEL_1158;
                              }
                            }
                            else
                            {
                              v574 = *(unsigned __int8 *)(v413 + 5);
                              if (v574 != 61)
                                goto LABEL_972;
                              if (BYTE2(v796[1]) == 1)
                              {
LABEL_1159:
                                v15 = v412;
                                goto LABEL_724;
                              }
                            }
                          }
                          else
                          {
                            if ((_DWORD)v415)
                            {
                              if ((v415 & ~*(_DWORD *)(16 * (*(_DWORD *)v413 & 0xFFFFFFFE) + 0x20)) == 0)
                              {
                                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v413 & 0xFFFFFFFE)), v428, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                                if (v430)
                                {
                                  v801[0] = (WTF::StringImpl *)v409;
                                  v431 = JSC::PropertyTable::get(v430, (uint64_t *)v801);
                                  a6 = v431;
                                  if ((_DWORD)v431 != -1)
                                  {
                                    a5 = HIDWORD(v431);
                                    if ((int)v431 <= 63)
                                    {
                                      v531 = v413 + 16;
                                      v532 = v431 << 32;
                                    }
                                    else
                                    {
                                      v531 = *(_QWORD *)(v413 + 8) - 8;
                                      v532 = 0x3F00000000 - (v431 << 32);
                                    }
                                    a4 = *(_QWORD *)(v531 + (v532 >> 29));
                                    if ((a4 & 0xFFFE000000000002) != 0)
                                    {
LABEL_859:
                                      v791 = (WTF::StringImpl *)a4;
                                      v795 = (_DWORD *)v413;
                                      v793 = __PAIR64__(v431, HIDWORD(v431));
                                      LOWORD(v796[1]) = 257;
                                      goto LABEL_751;
                                    }
                                    v533 = *(unsigned __int8 *)(a4 + 5);
                                    if (v533 != 5)
                                    {
                                      if (v533 != 6)
                                        goto LABEL_859;
                                      v487 = *(_DWORD *)(v429 + 16) & 3;
                                      v557 = *(_QWORD *)(a4 + 16);
                                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                      {
                                        v490 = *(int8x16_t ***)(a4 + 24);
                                        v489 = *(_QWORD *)(a4 + 32);
                                        v791 = *(WTF::StringImpl **)(a4 + 8);
                                        v792 = v557;
                                        LODWORD(v793) = HIDWORD(v431);
                                        v795 = (_DWORD *)v413;
LABEL_796:
                                        BYTE1(v796[1]) = 3;
                                        if (v487 != 2)
                                          LOBYTE(v796[1]) = 1;
                                        BYTE3(v796[1]) = 1;
                                        v799 = v490;
                                        v800 = v489;
LABEL_751:
                                        v15 = v412;
LABEL_707:
                                        if (BYTE1(v796[1]) == 1)
                                        {
                                          v10 = (uint64_t)v791;
LABEL_709:
                                          if (v798)
                                          {
                                            v437 = *(_DWORD *)(v797 + 4);
                                            if (!v437)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x1987A4234);
                                            }
                                            *(_DWORD *)(v797 + 4) = v437 - 1;
                                          }
LABEL_712:
                                          if (!v409)
                                            goto LABEL_161;
                                          if (*(_DWORD *)v409 != 2)
                                          {
                                            *(_DWORD *)v409 -= 2;
                                            goto LABEL_161;
                                          }
                                          v449 = (WTF::StringImpl *)v409;
LABEL_743:
                                          v308 = v15;
                                          WTF::StringImpl::~StringImpl(v449, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                                          WTF::fastFree(v450, v451, v452, v453, v454, v455, v456, v457);
LABEL_744:
                                          v15 = v308;
                                          goto LABEL_161;
                                        }
                                        v458 = v15;
                                        if (BYTE1(v796[1]) == 2)
                                          v459 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v791, v787, a3, a4, a5, a6, a7, a8);
                                        else
                                          v459 = JSC::PropertySlot::customGetter((uint64_t)&v791, *((JSC::VM **)v787 + 7), (WTF::StringImpl *)v409);
                                        v10 = v459;
LABEL_748:
                                        v15 = v458;
                                        goto LABEL_709;
                                      }
                                      v791 = *(WTF::StringImpl **)(a4 + 8);
                                      v792 = v557;
                                      LODWORD(v793) = HIDWORD(v431);
                                      v795 = (_DWORD *)v413;
LABEL_874:
                                      BYTE1(v796[1]) = 3;
                                      v15 = v412;
                                      if (v487 != 2)
                                        LOBYTE(v796[1]) = 1;
                                      goto LABEL_707;
                                    }
                                    v460 = (unsigned int *)v413;
                                    v461 = (uint64_t)v428;
LABEL_750:
                                    JSC::JSObject::fillGetterPropertySlot(v460, v461, (uint64_t)&v791, a4, a5, a6);
                                    goto LABEL_751;
                                  }
                                }
                              }
                            }
                            if ((*(_BYTE *)(v413 + 6) & 0x20) != 0)
                            {
                              v548 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v413, v428, v409, (uint64_t)&v791);
                              v15 = v412;
                              if ((v548 & 1) != 0)
                                goto LABEL_707;
                            }
                          }
LABEL_694:
                          if ((*(_WORD *)(v429 + 12) & 0x800) != 0)
                          {
                            v432 = *(_DWORD *)v413;
                            if (BYTE2(v796[1]) != 3)
                            {
                              v558 = 16 * (v432 & 0xFFFFFFFE);
                              if ((*(_WORD *)(v558 + 12) & 0x800) != 0)
                              {
                                v433 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(v558 + 76)
                                                                                                 + 0xB0))(v413, v787);
                              }
                              else
                              {
                                v433 = *(_QWORD *)(v558 + 48);
                                if (!v433)
                                  v433 = *(_QWORD *)(v413 + 16);
                              }
                              if (*((_DWORD *)v428 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v428, this, a3, a4, a5, a6, a7, a8))
                              {
                                goto LABEL_914;
                              }
                              goto LABEL_698;
                            }
                          }
                          else
                          {
                            v432 = *(_DWORD *)v413;
                          }
                          v433 = *(_QWORD *)(16 * (v432 & 0xFFFFFFFE) + 0x30);
                          if (!v433)
                            v433 = *(_QWORD *)(v413 + 16);
LABEL_698:
                          if ((v433 & 0xFFFE000000000002) != 0)
                            goto LABEL_915;
                          v413 = v433;
                          v15 = v412;
                          if (*(unsigned __int8 *)(v433 + 5) <= 0x16u)
                            goto LABEL_709;
                        }
                      }
                      v541 = v426 | v427;
                      v542 = (JSC::VM *)*((_QWORD *)v787 + 7);
                      v10 = 10;
                      while (1)
                      {
                        v543 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
                        v544 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v543 + 0x4C) + 0x70))();
                        v545 = v544;
                        if (*((_DWORD *)v542 + 20))
                        {
                          v663 = JSC::VM::hasExceptionsAfterHandlingTraps(v542, this, a3, a4, a5, a6, a7, a8);
                          if (((v663 | v545) & 1) != 0)
                          {
                            v15 = v412;
                            if (!v663)
                              goto LABEL_707;
                            goto LABEL_724;
                          }
                        }
                        else
                        {
                          v15 = v412;
                          if ((v544 & 1) != 0)
                            goto LABEL_707;
                        }
                        if (BYTE2(v796[1]) == 3)
                        {
                          if (BYTE4(v796[1]))
                            goto LABEL_914;
                          v546 = *(unsigned __int8 *)(v788 + 5);
                          if (v546 == 61)
                            goto LABEL_896;
                        }
                        else
                        {
                          v546 = *(unsigned __int8 *)(v788 + 5);
                          if (v546 == 61)
                          {
                            if (BYTE2(v796[1]) == 1)
                              goto LABEL_914;
                            goto LABEL_896;
                          }
                        }
                        if ((v546 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, this, a3, a4, a5, a6, a7, a8) <= v541)
                        {
                          goto LABEL_914;
                        }
LABEL_896:
                        if ((*(_WORD *)(v543 + 12) & 0x800) == 0 || BYTE2(v796[1]) == 3)
                        {
                          v547 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                          if (!v547)
                            v547 = *(_QWORD *)(v788 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v547 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v788, v787);
                          }
                          else
                          {
                            v547 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                            if (!v547)
                              v547 = *(_QWORD *)(v788 + 16);
                          }
                          if (*((_DWORD *)v542 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v542, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_914;
                          }
                        }
                        if ((v547 & 0xFFFE000000000002) != 0)
                          goto LABEL_915;
                        v788 = v547;
                        v15 = v412;
                        if (*(unsigned __int8 *)(v547 + 5) <= 0x16u)
                          goto LABEL_709;
                      }
                    }
                    if ((_DWORD)v423)
                    {
                      v741 = *(unsigned __int8 *)v422 - 48;
                      if (v741 <= 9 && (v423 < 2 || *(_BYTE *)v422 != 48))
                      {
                        v752 = v423 - 1;
                        v753 = (unsigned __int8 *)v422 + 1;
                        while (v752)
                        {
                          if (v741 > 0x19999999)
                            goto LABEL_1417;
                          v754 = *v753 - 48;
                          if (v754 > 9)
                            goto LABEL_1417;
                          v427 = 0;
                          LOBYTE(v423) = 0;
                          v425 = 0;
                          v111 = __CFADD__(v754, 10 * v741);
                          v741 = v754 + 10 * v741;
                          --v752;
                          ++v753;
                          if (v111)
                            goto LABEL_1419;
                        }
                        if (v741 == -1)
                          v427 = 0;
                        else
                          v427 = v741 & 0xFFFFFF00;
                        if (v741 == -1)
                          LOBYTE(v423) = 0;
                        else
                          LOBYTE(v423) = v741;
                        if (v741 == -1)
                          v425 = 0;
                        else
                          v425 = 0x100000000;
                        goto LABEL_1419;
                      }
LABEL_1417:
                      v427 = 0;
                      LOBYTE(v423) = 0;
                    }
                    else
                    {
                      v427 = 0;
                    }
                    v425 = 0;
LABEL_1419:
                    v426 = v423;
                    goto LABEL_686;
                  }
                  v412 = v15;
                  if (*(_QWORD *)(*(_QWORD *)(v410 + 41952) + 1768) == v409)
                  {
                    v709 = *(_QWORD *)(v788 + 8);
                    if ((v709 & 1) != 0)
                      v710 = (unsigned int *)(v788 + 16);
                    else
                      v710 = (unsigned int *)(v709 + 4);
                    v711 = *v710;
                    if ((v711 & 0x80000000) != 0)
                      v712 = (WTF::StringImpl *)(COERCE__INT64((double)v711) + 0x2000000000000);
                    else
                      v712 = (WTF::StringImpl *)(v711 | 0xFFFE000000000000);
                    v713 = 14;
                    goto LABEL_1347;
                  }
                  if (!v409 || (v719 = *(_DWORD *)(v409 + 16), (v719 & 0x20) != 0))
                  {
LABEL_1373:
                    v714 = 0;
LABEL_1348:
                    if (*(_DWORD *)(v410 + 80)
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v410, this, a3, a4, a5, a6, a7, a8))
                    {
LABEL_914:
                      v10 = 10;
LABEL_915:
                      v15 = v412;
                      goto LABEL_709;
                    }
                    v15 = v412;
                    if ((v714 & 1) != 0)
                      goto LABEL_707;
                    goto LABEL_1350;
                  }
                  v720 = *(_BYTE **)(v409 + 8);
                  v721 = *(unsigned int *)(v409 + 4);
                  if ((v719 & 4) != 0)
                  {
                    if (!(_DWORD)v721
                      || (v769 = *v720 - 48, v769 > 9)
                      || v721 >= 2 && *v720 == 48)
                    {
LABEL_1550:
                      v725 = 0;
                      LOBYTE(v724) = 0;
                      v723 = 0;
                    }
                    else
                    {
                      v770 = v721 - 1;
                      v771 = v720 + 1;
                      while (v770)
                      {
                        if (v769 <= 0x19999999)
                        {
                          v772 = *v771 - 48;
                          if (v772 <= 9)
                          {
                            v111 = __CFADD__(v772, 10 * v769);
                            v769 = v772 + 10 * v769;
                            --v770;
                            ++v771;
                            if (!v111)
                              continue;
                          }
                        }
                        goto LABEL_1550;
                      }
                      v725 = v769 & 0xFFFFFF00;
                      if (v769 == -1)
                      {
                        v725 = 0;
                        LOBYTE(v724) = 0;
                      }
                      else
                      {
                        LOBYTE(v724) = v769;
                      }
                      if (v769 == -1)
                        v723 = 0;
                      else
                        v723 = 0x100000000;
                    }
                    v724 = v724;
LABEL_1372:
                    if ((v723 & 0x100000000) != 0)
                    {
                      a3 = v724 | v725;
                      v763 = *(_QWORD *)(v788 + 8);
                      v764 = (_DWORD *)((v763 & 1) != 0 ? v788 + 16 : v763 + 4);
                      if (*v764 > a3)
                      {
                        v712 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v788, v787, a3, a4, a5, a6, a7, a8, a9);
                        if (!*(_DWORD *)(v410 + 80)
                          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v410, this, a3, a4, a5, a6, a7, a8))
                        {
                          v713 = 10;
LABEL_1347:
                          v791 = v712;
                          LODWORD(v793) = v713;
                          v795 = 0;
                          v714 = 1;
                          BYTE1(v796[1]) = 1;
                          goto LABEL_1348;
                        }
                      }
                    }
                    goto LABEL_1373;
                  }
                  if ((_DWORD)v721)
                  {
                    v722 = *(unsigned __int16 *)v720 - 48;
                    if (v722 <= 9 && (*(_WORD *)v720 != 48 || v721 <= 1))
                    {
                      v736 = (unsigned __int16 *)(v720 + 2);
                      v737 = v721 - 1;
                      while (v737)
                      {
                        if (v722 > 0x19999999)
                          goto LABEL_1369;
                        v738 = *v736 - 48;
                        if (v738 > 9)
                          goto LABEL_1369;
                        v723 = 0;
                        LOBYTE(v721) = 0;
                        v724 = 0;
                        v111 = __CFADD__(v738, 10 * v722);
                        v722 = v738 + 10 * v722;
                        ++v736;
                        --v737;
                        if (v111)
                          goto LABEL_1371;
                      }
                      v724 = v722 & 0xFFFFFF00;
                      v723 = 0x100000000;
                      if (v722 == -1)
                      {
                        v723 = 0;
                        LOBYTE(v721) = 0;
                      }
                      else
                      {
                        LOBYTE(v721) = v722;
                      }
                      if (v722 == -1)
                        v724 = 0;
                      goto LABEL_1371;
                    }
LABEL_1369:
                    v723 = 0;
                    LOBYTE(v721) = 0;
                  }
                  else
                  {
                    v723 = 0;
                  }
                  v724 = 0;
LABEL_1371:
                  v725 = v721;
                  goto LABEL_1372;
                }
                v491 = v15;
                if (*(_QWORD *)(v408 + 64768) != v409)
                {
                  WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v408 + 64768), *(WTF::AtomStringImpl **)(v11 + 8), a3, a4, a5, a6, a7, a8);
                  v492 = *(WTF::StringImpl **)(v11 + 8);
                  if (v492)
                  {
                    if ((*((_BYTE *)v492 + 16) & 0x10) != 0)
                    {
                      *(_DWORD *)v492 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase((unint64_t)v492, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v801);
                      v492 = v801[0];
                    }
                  }
                  v493 = *(WTF::StringImpl **)(v408 + 64776);
                  *(_QWORD *)(v408 + 64776) = v492;
                  if (v493)
                  {
                    if (*(_DWORD *)v493 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v493, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v549, v550, v551, v552, v553, v554, v555, v556);
                    }
                    else
                    {
                      *(_DWORD *)v493 -= 2;
                    }
                  }
                }
                if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
                {
                  v494 = *(WTF::StringImpl **)(v408 + 64776);
                  *(_DWORD *)v494 += 2;
                  v801[0] = v494;
                  __dmb(0xAu);
                  v495 = *(WTF::StringImpl **)(v11 + 8);
                  *(WTF::StringImpl **)(v11 + 8) = v801[0];
                  v801[0] = v495;
                  JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v408 + 192, (unint64_t)v801);
                  v496 = v801[0];
                  v801[0] = 0;
                  if (v496)
                  {
                    if (*(_DWORD *)v496 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v496, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v521, v522, v523, v524, v525, v526, v527, v528);
                    }
                    else
                    {
                      *(_DWORD *)v496 -= 2;
                    }
                  }
                }
                v409 = *(_QWORD *)(v408 + 64776);
                goto LABEL_809;
              }
              v479 = v15;
              JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, v787);
              if (*(_DWORD *)(v408 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v408, this, a3, a4, a5, a6, a7, a8))
              {
                v409 = 0;
                v480 = v801[0];
                v801[0] = 0;
                if (!v480)
                  goto LABEL_780;
              }
              else
              {
                v409 = (unint64_t)v801[0];
                if (!v801[0])
                {
LABEL_780:
                  v15 = v479;
                  goto LABEL_664;
                }
                *(_DWORD *)v801[0] += 2;
                v801[0] = 0;
                v480 = (WTF::StringImpl *)v409;
              }
              if (*(_DWORD *)v480 == 2)
              {
                WTF::StringImpl::~StringImpl(v480, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v511, v512, v513, v514, v515, v516, v517, v518);
              }
              else
              {
                *(_DWORD *)v480 -= 2;
              }
              goto LABEL_780;
            }
            v491 = v15;
            v701 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v787, (JSC::Structure *)2, a4, a5, a6, a7, a8);
            v791 = (WTF::StringImpl *)v701;
            if (*(_DWORD *)(v408 + 80))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v408, this, a3, a4, a5, a6, a7, a8))
              {
                v409 = *(_QWORD *)(*(_QWORD *)(v408 + 41952) + 8);
                if (!v409)
                  goto LABEL_811;
                goto LABEL_809;
              }
              v701 = (uint64_t)v791;
            }
            if ((v701 & 0xFFFE000000000002) == 0)
            {
              v702 = *(unsigned __int8 *)(v701 + 5);
              if (v702 == 2)
                goto LABEL_1326;
              if (v702 == 4)
              {
                v409 = *(_QWORD *)(v701 + 8);
                v726 = *(_DWORD *)v409;
                *(_DWORD *)v409 += 4;
                v497 = v726 + 2;
                if (v497)
                  goto LABEL_810;
                v727 = (WTF::StringImpl *)v409;
                goto LABEL_1381;
              }
            }
            v701 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v791, (uint64_t)v787, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_1326:
            if (*(_DWORD *)(v408 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v408, this, a3, a4, a5, a6, a7, a8))
            {
              v409 = 0;
              goto LABEL_811;
            }
            v409 = *(_QWORD *)(v701 + 8);
            v703 = *((_QWORD *)v787 + 7);
            if ((v409 & 1) == 0)
            {
              if ((*(_BYTE *)(v409 + 16) & 0x10) == 0)
              {
                if (*(_QWORD *)(v703 + 64768) != v409)
                {
                  WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v703 + 64768), *(WTF::AtomStringImpl **)(v701 + 8), a3, a4, a5, a6, a7, a8);
                  v704 = *(WTF::StringImpl **)(v701 + 8);
                  if (v704)
                  {
                    if ((*((_BYTE *)v704 + 16) & 0x10) != 0)
                    {
                      *(_DWORD *)v704 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase((unint64_t)v704, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v801);
                      v704 = v801[0];
                    }
                  }
                  v705 = *(WTF::StringImpl **)(v703 + 64776);
                  *(_QWORD *)(v703 + 64776) = v704;
                  if (v705)
                  {
                    if (*(_DWORD *)v705 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v705, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v755, v756, v757, v758, v759, v760, v761, v762);
                    }
                    else
                    {
                      *(_DWORD *)v705 -= 2;
                    }
                  }
                }
                if ((*(_BYTE *)(*(_QWORD *)(v701 + 8) + 16) & 0x10) == 0)
                {
                  v706 = *(WTF::StringImpl **)(v703 + 64776);
                  *(_DWORD *)v706 += 2;
                  v801[0] = v706;
                  __dmb(0xAu);
                  v707 = *(WTF::StringImpl **)(v701 + 8);
                  *(WTF::StringImpl **)(v701 + 8) = v801[0];
                  v801[0] = v707;
                  JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v703 + 192, (unint64_t)v801);
                  v708 = v801[0];
                  v801[0] = 0;
                  if (v708)
                  {
                    if (*(_DWORD *)v708 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v708, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v744, v745, v746, v747, v748, v749, v750, v751);
                    }
                    else
                    {
                      *(_DWORD *)v708 -= 2;
                    }
                  }
                }
                v409 = *(_QWORD *)(v703 + 64776);
              }
LABEL_809:
              v497 = *(_DWORD *)v409 + 2;
LABEL_810:
              *(_DWORD *)v409 = v497;
LABEL_811:
              v15 = v491;
              goto LABEL_664;
            }
            JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v701, v787);
            if (*(_DWORD *)(v703 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v703, this, a3, a4, a5, a6, a7, a8))
            {
              v409 = 0;
              v727 = v801[0];
              v801[0] = 0;
              if (!v727)
                goto LABEL_811;
            }
            else
            {
              v409 = (unint64_t)v801[0];
              if (!v801[0])
                goto LABEL_811;
              *(_DWORD *)v801[0] += 2;
              v801[0] = 0;
              v727 = (WTF::StringImpl *)v409;
            }
            if (*(_DWORD *)v727 != 2)
            {
              *(_DWORD *)v727 -= 2;
              goto LABEL_811;
            }
LABEL_1381:
            WTF::StringImpl::~StringImpl(v727, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v728, v729, v730, v731, v732, v733, v734, v735);
            goto LABEL_811;
          }
          v21 = (uint64_t *)(v12 + 93080);
          v793 = 0xFFFFFFFF00000000;
          LOBYTE(v797) = 0;
          v798 = 0;
          v799 = 0;
          v800 = 0;
          v22 = v15 >> 4;
          v795 = 0;
          memset(v796, 0, 13);
          v23 = v788;
          v794 = (_DWORD *)v788;
          this = 257;
          a3 = 0x3F00000000;
          v24 = 1;
          v25 = &JSC::DOMAttributeGetterSetter::s_info;
          while (1)
          {
            if ((*(_BYTE *)(v23 + 6) & 8) != 0)
            {
              v238 = *(unsigned __int8 *)(v23 + 5);
              if (v238 != 26 && v238 != 36 && v23 != *((_QWORD *)v787 + 84))
              {
                v239 = v25;
                v240 = v15;
                v241 = (JSC::VM *)v12;
                if (v10)
                {
                  *(_WORD *)(v10 + 129) |= 4u;
                  if (*(_BYTE *)(v10 + 124))
                  {
                    --*(_BYTE *)(v10 + 124);
                  }
                  else
                  {
                    v371 = *(unsigned __int8 *)(v10 + 125);
                    if (v371 != 255)
                      *(_BYTE *)(v10 + 125) = ++v371;
                    if (xmmword_1ECF4C260 < v371)
                    {
                      *(_BYTE *)(v10 + 125) = 0;
                      v579 = *(unsigned __int8 *)(v10 + 126);
                      v580 = BYTE4(xmmword_1ECF4C260) << v579;
                      v581 = v580;
                      if (v580 == 255)
                        LOBYTE(v580) = -2;
                      if (v581 >> v579 == BYTE4(xmmword_1ECF4C260))
                        v582 = v580;
                      else
                        v582 = -2;
                      *(_BYTE *)(v10 + 124) = v582;
                      if (v579 != 255)
                        *(_BYTE *)(v10 + 126) = v579 + 1;
                      *(_BYTE *)(v10 + 127) = 0;
                    }
                    else if (*(_BYTE *)(v10 + 127))
                    {
                      --*(_BYTE *)(v10 + 127);
                    }
                    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v13 + 16), v10, 1, a4, a5, a6, a7, a8);
                  }
                }
                v242 = (JSC::VM *)*((_QWORD *)v787 + 7);
                while (1)
                {
                  v243 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
                  if ((*(_BYTE *)(v23 + 6) & 8) != 0)
                  {
                    v656 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) + 0x68))(v23, v787, v240, &v791);
                    v657 = v656;
                    if (*((_DWORD *)v242 + 20))
                    {
                      v739 = JSC::VM::hasExceptionsAfterHandlingTraps(v242, this, a3, a4, a5, a6, a7, a8);
                      if (((v739 | v657) & 1) != 0)
                      {
                        v368 = !v739;
                        goto LABEL_563;
                      }
                    }
                    else if ((v656 & 1) != 0)
                    {
                      goto LABEL_929;
                    }
                    if (BYTE2(v796[1]) == 3)
                    {
                      if (BYTE4(v796[1]))
                        goto LABEL_1515;
                      v658 = *(unsigned __int8 *)(v23 + 5);
                      if (v658 != 61)
                      {
LABEL_1134:
                        if ((v658 - 50) < 0xFFFFFFF5)
                          goto LABEL_331;
                        v659 = *(_DWORD *)(v240 + 16);
                        if ((v659 & 0x20) != 0)
                          goto LABEL_331;
                        v660 = *(unsigned int *)(v240 + 4);
                        if (!(_DWORD)v660)
                          goto LABEL_331;
                        v661 = *(unsigned __int8 **)(v240 + 8);
                        if ((v659 & 4) == 0)
                        {
                          v662 = *(unsigned __int16 *)v661;
                          if ((_DWORD)v660 == 1)
                            goto LABEL_1139;
                          if (v662 == 45)
                          {
                            v662 = *((unsigned __int16 *)v661 + 1);
                            goto LABEL_1225;
                          }
                          if ((v662 - 48) >= 0xA && ((_DWORD)v660 != 8 || v662 != 73))
                          {
LABEL_1282:
                            if ((_DWORD)v660 != 3 || v662 != 78)
                              goto LABEL_331;
                          }
LABEL_1244:
                          v10 = v10 & 0xFFFFFF0000000000 | v660 | ((unint64_t)((v659 >> 2) & 1) << 32);
                          JSC::jsToNumber(v661, v10);
                          WTF::numberToString(v801, v693);
                          if (WTF::equal(v240, (unint64_t)v801, v694))
                            goto LABEL_1515;
                          goto LABEL_331;
                        }
                        v662 = *v661;
                        if ((_DWORD)v660 == 1)
                        {
LABEL_1139:
                          if ((v662 - 48) < 0xA)
                            goto LABEL_1515;
                          goto LABEL_331;
                        }
                        if (v662 == 45)
                        {
                          v662 = v661[1];
LABEL_1225:
                          if ((v662 - 48) < 0xA)
                          {
                            if ((_DWORD)v660 == 2)
                              goto LABEL_1515;
                            goto LABEL_1244;
                          }
                          if ((_DWORD)v660 != 9)
                            goto LABEL_331;
                        }
                        else
                        {
                          if ((v662 - 48) < 0xA)
                            goto LABEL_1244;
                          if ((_DWORD)v660 != 8)
                            goto LABEL_1282;
                        }
                        if (v662 != 73)
                          goto LABEL_331;
                        goto LABEL_1244;
                      }
                    }
                    else
                    {
                      v658 = *(unsigned __int8 *)(v23 + 5);
                      if (v658 != 61)
                        goto LABEL_1134;
                      if (BYTE2(v796[1]) == 1)
                        goto LABEL_1515;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v22)
                    {
                      if ((v22 & ~*(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x20)) == 0)
                      {
                        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)), v242, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                        if (v244)
                        {
                          v801[0] = (WTF::StringImpl *)v240;
                          v245 = JSC::PropertyTable::get(v244, (uint64_t *)v801);
                          a6 = v245;
                          if ((_DWORD)v245 != -1)
                          {
                            a5 = HIDWORD(v245);
                            if ((int)v245 <= 63)
                            {
                              v365 = v23 + 16;
                              v366 = v245 << 32;
                            }
                            else
                            {
                              v365 = *(_QWORD *)(v23 + 8) - 8;
                              v366 = 0x3F00000000 - (v245 << 32);
                            }
                            a4 = *(_QWORD *)(v365 + (v366 >> 29));
                            if ((a4 & 0xFFFE000000000002) != 0)
                              goto LABEL_562;
                            v367 = *(unsigned __int8 *)(a4 + 5);
                            if (v367 == 5)
                            {
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v23, (uint64_t)v242, (uint64_t)&v791, a4, SHIDWORD(v245), v245);
LABEL_929:
                              v368 = 1;
                            }
                            else
                            {
                              if (v367 != 6)
                              {
LABEL_562:
                                v791 = (WTF::StringImpl *)a4;
                                v795 = (_DWORD *)v23;
                                v793 = __PAIR64__(v245, HIDWORD(v245));
                                v368 = 1;
                                LOWORD(v796[1]) = 257;
                                goto LABEL_563;
                              }
                              v568 = *(_DWORD *)(v243 + 16) & 3;
                              v569 = *(_QWORD *)(a4 + 16);
                              if (v239 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v571 = *(int8x16_t ***)(a4 + 24);
                                v570 = *(_QWORD *)(a4 + 32);
                                v791 = *(WTF::StringImpl **)(a4 + 8);
                                v792 = v569;
                                LODWORD(v793) = HIDWORD(v245);
                                v795 = (_DWORD *)v23;
                                BYTE1(v796[1]) = 3;
                                v368 = 1;
                                if (v568 != 2)
                                  LOBYTE(v796[1]) = 1;
                                BYTE3(v796[1]) = 1;
                                v799 = v571;
                                v800 = v570;
                              }
                              else
                              {
                                v791 = *(WTF::StringImpl **)(a4 + 8);
                                v792 = v569;
                                LODWORD(v793) = HIDWORD(v245);
                                v795 = (_DWORD *)v23;
                                v368 = 1;
                                BYTE1(v796[1]) = 3;
                                if (v568 != 2)
                                  LOBYTE(v796[1]) = 1;
                              }
                            }
LABEL_563:
                            if (*((_DWORD *)v241 + 20))
                            {
                              v675 = JSC::VM::hasExceptionsAfterHandlingTraps(v241, this, a3, a4, a5, a6, a7, a8);
                              if (v675)
                                v10 = 0;
                              else
                                v10 = 10;
                              if (!v675)
                              {
                                v15 = v240;
                                if (((v368 ^ 1) & 1) != 0)
                                  goto LABEL_158;
LABEL_565:
                                if (BYTE1(v796[1]) == 1)
                                {
                                  v10 = (uint64_t)v791;
                                }
                                else
                                {
                                  if (BYTE1(v796[1]) != 2)
                                  {
                                    v572 = JSC::PropertySlot::customGetter((uint64_t)&v791, *((JSC::VM **)v787 + 7), (WTF::StringImpl *)v240);
                                    v15 = v240;
                                    v10 = v572;
                                    goto LABEL_158;
                                  }
                                  v10 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v791, v787, a3, a4, a5, a6, a7, a8);
                                }
                              }
                              v15 = v240;
                              goto LABEL_158;
                            }
                            if (v368)
                              goto LABEL_565;
                            v15 = v240;
LABEL_451:
                            v10 = 10;
                            goto LABEL_158;
                          }
                        }
                      }
                    }
                    if ((*(_BYTE *)(v23 + 6) & 0x20) != 0
                      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, v242, v240, (uint64_t)&v791) & 1) != 0)
                    {
                      goto LABEL_929;
                    }
                  }
LABEL_331:
                  if ((*(_WORD *)(v243 + 12) & 0x800) == 0)
                  {
                    v246 = *(_DWORD *)v23;
LABEL_333:
                    v247 = *(_QWORD *)(16 * (v246 & 0xFFFFFFFE) + 0x30);
                    if (!v247)
                      v247 = *(_QWORD *)(v23 + 16);
                    goto LABEL_335;
                  }
                  v246 = *(_DWORD *)v23;
                  if (BYTE2(v796[1]) == 3)
                    goto LABEL_333;
                  v637 = 16 * (v246 & 0xFFFFFFFE);
                  if ((*(_WORD *)(v637 + 12) & 0x800) != 0)
                  {
                    v247 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t))(16
                                                                                              * *(unsigned int *)(v637 + 76)
                                                                                              + 0xB0))(v23, v787, a3);
                  }
                  else
                  {
                    v247 = *(_QWORD *)(v637 + 48);
                    if (!v247)
                      v247 = *(_QWORD *)(v23 + 16);
                  }
                  if (*((_DWORD *)v242 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v242, this, a3, a4, a5, a6, a7, a8))
                  {
LABEL_1515:
                    v368 = 0;
                    goto LABEL_563;
                  }
LABEL_335:
                  if ((v247 & 0xFFFE000000000002) == 0)
                  {
                    v23 = v247;
                    if (*(unsigned __int8 *)(v247 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_1515;
                }
              }
            }
            if (!(_DWORD)v22)
              break;
            v26 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
            if ((v22 & ~*(_DWORD *)(v26 + 0x20)) != 0)
              break;
            v27 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x58);
            if (!v27)
            {
              v44 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x40);
              if (!v44 || *(_BYTE *)(v44 + 5) != 1 && *(_DWORD *)(v44 + 80) < 2u)
                break;
              v45 = (JSC::VM *)v12;
              v46 = v15;
              v47 = v12;
              v48 = v25;
              JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)), v45, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              a3 = 0x3F00000000;
              this = 257;
              v25 = v48;
              v12 = v47;
              v15 = v46;
              if (!v27)
                break;
            }
            if (!*(_DWORD *)(v27 + 24))
              break;
            v28 = *(_QWORD *)(v27 + 16);
            v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
            v30 = *(unsigned int *)(v27 + 8);
            v31 = *(_DWORD *)(v15 + 16);
            if ((v28 & 1) != 0)
            {
              if ((v31 & 0x20) != 0)
                v31 = *(_DWORD *)(v15 + 32);
              v32 = *(_DWORD *)(v27 + 12);
              v33 = (v31 >> 8) & *(_QWORD *)&v32;
              v34 = *(unsigned __int8 *)(v29 + v33);
              if (!*(_BYTE *)(v29 + v33))
                break;
              v35 = v29 + v30;
              v36 = 1;
              while (1)
              {
                v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
                if (v15 == (v37 & 0xFFFFFFFFFFFFLL))
                  break;
                v33 = ((_DWORD)v33 + v36) & v32;
                v34 = *(unsigned __int8 *)(v29 + v33);
                ++v36;
                if (!*(_BYTE *)(v29 + v33))
                  goto LABEL_29;
              }
              a6 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
            }
            else
            {
              if ((v31 & 0x20) != 0)
                v31 = *(_DWORD *)(v15 + 32);
              v52 = *(_DWORD *)(v27 + 12);
              v53 = v52 & (v31 >> 8);
              v54 = *(_DWORD *)(v29 + 4 * v53);
              if (!v54)
                break;
              v55 = v29 + 4 * v30;
              v56 = 1;
              while (1)
              {
                v57 = (v54 - 1);
                if (*(_QWORD *)(v55 + 16 * v57) == v15)
                  break;
                v53 = (v53 + v56) & v52;
                v54 = *(_DWORD *)(v29 + 4 * v53);
                ++v56;
                if (!v54)
                  goto LABEL_29;
              }
              a6 = *(unsigned int *)(v55 + 16 * v57 + 8) | ((unint64_t)*(unsigned __int8 *)(v55 + 16 * v57 + 12) << 32);
            }
            if ((_DWORD)a6 == -1)
              break;
            if ((int)a6 <= 63)
            {
              v49 = v23 + 16;
              v50 = a6 << 32;
            }
            else
            {
              v49 = *(_QWORD *)(v23 + 8) - 8;
              v50 = 0x3F00000000 - (a6 << 32);
            }
            a5 = HIDWORD(a6);
            a4 = *(_QWORD *)(v49 + (v50 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_59;
            v51 = *(unsigned __int8 *)(a4 + 5);
            if (v51 == 5)
            {
              v159 = v12;
              v160 = v15;
              v161 = v12;
              v162 = v25;
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v23, v159, (uint64_t)&v791, a4, SHIDWORD(a6), a6);
              a3 = 0x3F00000000;
              this = 257;
              v25 = v162;
              v12 = v161;
              v15 = v160;
              v38 = 1;
              goto LABEL_31;
            }
            if (v51 == 6)
            {
              v248 = *(_DWORD *)(v26 + 16) & 3;
              v249 = *(_QWORD *)(a4 + 16);
              if (v25 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
              {
                v251 = *(int8x16_t ***)(a4 + 24);
                v250 = *(_QWORD *)(a4 + 32);
                v791 = *(WTF::StringImpl **)(a4 + 8);
                v792 = v249;
                LODWORD(v793) = HIDWORD(a6);
                v795 = (_DWORD *)v23;
                BYTE1(v796[1]) = 3;
                v38 = 1;
                if (v248 != 2)
                  LOBYTE(v796[1]) = 1;
                BYTE3(v796[1]) = 1;
                v799 = v251;
                v800 = v250;
              }
              else
              {
                v791 = *(WTF::StringImpl **)(a4 + 8);
                v792 = v249;
                LODWORD(v793) = HIDWORD(a6);
                v795 = (_DWORD *)v23;
                v38 = 1;
                BYTE1(v796[1]) = 3;
                if (v248 != 2)
                  LOBYTE(v796[1]) = 1;
              }
            }
            else
            {
LABEL_59:
              v791 = (WTF::StringImpl *)a4;
              v795 = (_DWORD *)v23;
              v793 = __PAIR64__(a6, HIDWORD(a6));
              v38 = 1;
              LOWORD(v796[1]) = 257;
            }
LABEL_31:
            if ((*(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x10) & 3) == 2
              || (v39 = *(unsigned __int16 *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC), (v39 & 8) != 0))
            {
              v40 = 0;
            }
            else if ((v39 & 0x10) != 0)
            {
              v40 = (v39 >> 5) & 1;
            }
            else
            {
              v40 = 1;
            }
            v41 = v24 & v40;
            if (v38)
            {
              if (!v41)
                goto LABEL_224;
              if (BYTE1(v796[1]) != 1)
                goto LABEL_224;
              if (LOBYTE(v796[1]) != 1)
                goto LABEL_224;
              v89 = WORD2(v793);
              if (SHIDWORD(v793) >= 0x10000)
                goto LABEL_224;
              v90 = v795;
              v91 = *(unsigned int *)v788;
              if (v795 == (_DWORD *)v788 || (v144 = *(_DWORD *)((16 * v91) | 0x10), (v144 & 3) == 0))
              {
                if ((*v21 & 1) != 0)
                  v92 = 0;
                else
                  v92 = *v21;
                v93 = v91 ^ (v91 >> 11);
                v94 = *(_DWORD *)(v15 + 16);
                if (v94 < 0x100)
                {
                  v163 = v15;
                  v164 = WORD2(v793);
                  LOWORD(v95) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v15);
                  v89 = v164;
                  v15 = v163;
                }
                else
                {
                  v95 = v94 >> 8;
                }
                v96 = ((_WORD)v95 + (_WORD)v93) & 0x7FF;
                v97 = v92 + 24 * (((_WORD)v95 + (_WORD)v93) & 0x7FF);
                v99 = (_QWORD *)(v97 + 12);
                v98 = *(_WORD *)(v97 + 12);
                v100 = *(unsigned __int16 *)(v92 + 133120);
                v101 = *(WTF::StringImpl **)v97;
                if (v98 == v100)
                {
                  v130 = v92 + 24 * v96;
                  v132 = *(_DWORD *)(v130 + 8);
                  v131 = (_DWORD *)(v130 + 8);
                  v133 = ((_WORD)v132 + (_WORD)v101 + (unsigned __int16)((v132 + (_DWORD)v101) >> 9)) & 0x1FF;
                  v134 = 24
                       * (((_WORD)v132 + (_WORD)v101 + (unsigned __int16)((v132 + (_DWORD)v101) >> 9)) & 0x1FF);
                  *(_QWORD *)v97 = 0;
                  v135 = *(WTF::StringImpl **)(v92 + 49152 + v134);
                  *(_QWORD *)(v92 + 49152 + v134) = v101;
                  if (v135)
                  {
                    if (*(_DWORD *)v135 == 2)
                    {
                      v785 = v15;
                      v784 = v89;
                      v783 = v133;
                      WTF::StringImpl::~StringImpl(v135, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
                      v133 = v783;
                      v89 = v784;
                      v15 = v785;
                      v98 = *(_WORD *)(v92 + 133120);
                      v101 = *(WTF::StringImpl **)v97;
                    }
                    else
                    {
                      v101 = 0;
                      *(_DWORD *)v135 -= 2;
                    }
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v136 = v92 + 49152 + 24 * v133;
                  *(_DWORD *)(v136 + 8) = *v131;
                  *(_QWORD *)(v136 + 12) = *v99;
                  *(_DWORD *)(v136 + 20) = *(_DWORD *)(v97 + 20);
                  LOWORD(v100) = v98;
                }
                *(_DWORD *)v15 += 2;
                *(_QWORD *)v97 = v15;
                if (v101)
                {
                  if (*(_DWORD *)v101 == 2)
                  {
                    v182 = v15;
                    v183 = v89;
                    WTF::StringImpl::~StringImpl(v101, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
                    v89 = v183;
                    v15 = v182;
                  }
                  else
                  {
                    *(_DWORD *)v101 -= 2;
                  }
                }
                v102 = v92 + 24 * v96;
                *(_DWORD *)(v102 + 8) = v91;
                *(_WORD *)v99 = v100;
                *(_WORD *)(v102 + 14) = v89;
                if (v90 == (_DWORD *)v788)
                  v103 = 1;
                else
                  v103 = (uint64_t)v90;
                *(_QWORD *)(v102 + 16) = v103;
              }
              else if ((v144 & 0x800000) != 0)
              {
LABEL_224:
                if (v10)
                {
                  v145 = v15;
                  *(_WORD *)(v10 + 129) |= 4u;
                  if (*(_BYTE *)(v10 + 124))
                  {
                    --*(_BYTE *)(v10 + 124);
                  }
                  else
                  {
                    v325 = *(unsigned __int8 *)(v10 + 125);
                    if (v325 != 255)
                      *(_BYTE *)(v10 + 125) = ++v325;
                    if (xmmword_1ECF4C260 < v325)
                    {
                      *(_BYTE *)(v10 + 125) = 0;
                      v354 = *(unsigned __int8 *)(v10 + 126);
                      v355 = BYTE4(xmmword_1ECF4C260) << v354;
                      v356 = v355;
                      if (v355 == 255)
                        LOBYTE(v355) = -2;
                      if (v356 >> v354 == BYTE4(xmmword_1ECF4C260))
                        v357 = v355;
                      else
                        v357 = -2;
                      *(_BYTE *)(v10 + 124) = v357;
                      if (v354 != 255)
                        *(_BYTE *)(v10 + 126) = v354 + 1;
                      *(_BYTE *)(v10 + 127) = 0;
                    }
                    else if (*(_BYTE *)(v10 + 127))
                    {
                      --*(_BYTE *)(v10 + 127);
                    }
                    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v13 + 16), v10, 1, a4, a5, a6, a7, a8);
                  }
                  v15 = v145;
                }
              }
              if (BYTE1(v796[1]) == 1)
              {
                v10 = (uint64_t)v791;
              }
              else
              {
                if (BYTE1(v796[1]) == 2)
                {
                  v146 = v15;
                  v147 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v791, v787, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v224 = (unint64_t)v795;
                  v225 = *(_QWORD *)(16 * (*v795 & 0xFFFFFFFE) + 0x28);
                  if ((v793 & 0x20) != 0)
                    v224 = (unint64_t)v794;
                  if (BYTE3(v796[1]) != 1)
                    goto LABEL_315;
                  if ((v224 & 0xFFFE000000000002) != 0)
                    goto LABEL_575;
                  v226 = *(unsigned int *)(16 * (*(_DWORD *)v224 & 0xFFFFFFFE) + 0x4C);
                  v227 = *(_DWORD *)(16 * (*(_DWORD *)v224 & 0xFFFFFFFE) + 0x4C) != 0;
                  if ((_DWORD)v226)
                  {
                    v228 = 16 * v226;
                    if (v799 != (int8x16_t **)v228)
                    {
                      do
                      {
                        v228 = *(_QWORD *)(v228 + 16);
                        v227 = v228 != 0;
                      }
                      while ((int8x16_t **)v228 != v799 && v228 != 0);
                    }
                  }
                  if (!v227)
                  {
LABEL_575:
                    v801[0] = *((WTF::StringImpl **)v787 + 7);
                    v146 = v15;
                    v147 = JSC::throwDOMAttributeGetterTypeError(v225, v801, v799, (WTF::StringImpl *)v15);
                  }
                  else
                  {
LABEL_315:
                    v146 = v15;
                    v147 = ((uint64_t (*)(unint64_t))v791)(v225);
                  }
                }
                v15 = v146;
                v10 = v147;
              }
              goto LABEL_158;
            }
            v42 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
            if ((*(_WORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v42 == 0)
              v24 = 0;
            else
              v24 = v41;
            if (!v42)
              v42 = *(_QWORD *)(v23 + 16);
            if ((v42 & 0xFFFE000000000002) == 0)
            {
              v23 = v42;
              if (*(unsigned __int8 *)(v42 + 5) > 0x16u)
                continue;
            }
            if (v24)
            {
              v112 = *(unsigned int *)v788;
              v113 = *(_DWORD *)((16 * v112) | 0x10);
              if ((v113 & 3) == 0)
              {
                if ((*v21 & 1) != 0)
                  v114 = 0;
                else
                  v114 = *v21;
                v115 = v112 ^ (v112 >> 11);
                v116 = *(_DWORD *)(v15 + 16);
                if (v116 < 0x100)
                {
                  v206 = v15;
                  LOWORD(v117) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v15);
                  v15 = v206;
                }
                else
                {
                  v117 = v116 >> 8;
                }
                v118 = ((_WORD)v117 + (_WORD)v115) & 0x7FF;
                v119 = v114 + 24 * (((_WORD)v117 + (_WORD)v115) & 0x7FF);
                v121 = (_QWORD *)(v119 + 12);
                v120 = *(_WORD *)(v119 + 12);
                v122 = *(unsigned __int16 *)(v114 + 133120);
                v123 = *(WTF::StringImpl **)v119;
                if (v120 == v122)
                {
                  v195 = v114 + 24 * v118;
                  v197 = *(_DWORD *)(v195 + 8);
                  v196 = (_DWORD *)(v195 + 8);
                  v198 = ((_WORD)v197 + (_WORD)v123 + (unsigned __int16)((v197 + (_DWORD)v123) >> 9)) & 0x1FF;
                  v199 = 24
                       * (((_WORD)v197 + (_WORD)v123 + (unsigned __int16)((v197 + (_DWORD)v123) >> 9)) & 0x1FF);
                  *(_QWORD *)v119 = 0;
                  v200 = *(WTF::StringImpl **)(v114 + 49152 + v199);
                  *(_QWORD *)(v114 + 49152 + v199) = v123;
                  if (v200)
                  {
                    if (*(_DWORD *)v200 == 2)
                    {
                      v786 = v15;
                      v789 = v198;
                      WTF::StringImpl::~StringImpl(v200, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
                      v198 = v789;
                      v15 = v786;
                      v120 = *(_WORD *)(v114 + 133120);
                      v123 = *(WTF::StringImpl **)v119;
                    }
                    else
                    {
                      v123 = 0;
                      *(_DWORD *)v200 -= 2;
                    }
                  }
                  else
                  {
                    v123 = 0;
                  }
                  v201 = v114 + 49152 + 24 * v198;
                  *(_DWORD *)(v201 + 8) = *v196;
                  *(_QWORD *)(v201 + 12) = *v121;
                  *(_DWORD *)(v201 + 20) = *(_DWORD *)(v119 + 20);
                  LOWORD(v122) = v120;
                }
                *(_DWORD *)v15 += 2;
                *(_QWORD *)v119 = v15;
                if (v123)
                {
                  if (*(_DWORD *)v123 == 2)
                  {
                    v207 = v15;
                    WTF::StringImpl::~StringImpl(v123, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
                    v15 = v207;
                  }
                  else
                  {
                    *(_DWORD *)v123 -= 2;
                  }
                }
                v124 = v114 + 24 * v118;
                *(_DWORD *)(v124 + 8) = v112;
                *(_WORD *)v121 = v122;
                *(_WORD *)(v124 + 14) = 0;
                *(_QWORD *)(v124 + 16) = 0;
                v10 = 10;
                goto LABEL_158;
              }
              if ((v113 & 0x800000) == 0)
                goto LABEL_451;
            }
            v316 = v15;
            if (v10)
            {
              *(_WORD *)(v10 + 129) |= 4u;
              if (*(_BYTE *)(v10 + 124))
              {
                --*(_BYTE *)(v10 + 124);
              }
              else
              {
                v324 = *(unsigned __int8 *)(v10 + 125);
                if (v324 != 255)
                  *(_BYTE *)(v10 + 125) = ++v324;
                if (xmmword_1ECF4C260 < v324)
                {
                  *(_BYTE *)(v10 + 125) = 0;
                  v344 = *(unsigned __int8 *)(v10 + 126);
                  v345 = BYTE4(xmmword_1ECF4C260) << v344;
                  v346 = v345;
                  if (v345 == 255)
                    LOBYTE(v345) = -2;
                  if (v346 >> v344 == BYTE4(xmmword_1ECF4C260))
                    v347 = v345;
                  else
                    v347 = -2;
                  *(_BYTE *)(v10 + 124) = v347;
                  if (v344 != 255)
                    *(_BYTE *)(v10 + 126) = v344 + 1;
                  *(_BYTE *)(v10 + 127) = 0;
                }
                else if (*(_BYTE *)(v10 + 127))
                {
                  --*(_BYTE *)(v10 + 127);
                }
                JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v13 + 16), v10, 1, a4, a5, a6, a7, a8);
              }
            }
            v10 = 10;
            v15 = v316;
LABEL_158:
            if (v798)
            {
              v104 = v797;
              v105 = *(_DWORD *)(v797 + 4);
              if (!v105)
              {
                __break(0xC471u);
                JUMPOUT(0x1987A2C60);
              }
              goto LABEL_160;
            }
            goto LABEL_161;
          }
LABEL_29:
          if ((*(_BYTE *)(v23 + 6) & 0x20) != 0)
          {
            v157 = v15;
            v158 = v25;
            v38 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, (JSC::VM *)v12, v15, (uint64_t)&v791);
            a3 = 0x3F00000000;
            this = 257;
            v25 = v158;
            v15 = v157;
          }
          else
          {
            v38 = 0;
          }
          goto LABEL_31;
        }
      }
    }
  }
  *(_WORD *)(a3 + 129) |= 4u;
  if (*(_BYTE *)(a3 + 124))
  {
    --*(_BYTE *)(a3 + 124);
  }
  else
  {
    v125 = *(unsigned __int8 *)(a3 + 125);
    if (v125 != 255)
      *(_BYTE *)(a3 + 125) = ++v125;
    if (xmmword_1ECF4C260 < v125)
    {
      *(_BYTE *)(a3 + 125) = 0;
      v294 = *(unsigned __int8 *)(a3 + 126);
      v295 = BYTE4(xmmword_1ECF4C260) << v294;
      v296 = v295;
      if (v295 == 255)
        LOBYTE(v295) = -2;
      if (v296 >> v294 == BYTE4(xmmword_1ECF4C260))
        v297 = v295;
      else
        v297 = -2;
      *(_BYTE *)(a3 + 124) = v297;
      if (v294 != 255)
        *(_BYTE *)(a3 + 126) = v294 + 1;
      *(_BYTE *)(a3 + 127) = 0;
    }
    else if (*(_BYTE *)(a3 + 127))
    {
      --*(_BYTE *)(a3 + 127);
    }
    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v13 + 16), a3, 1, a4, a5, a6, a7, a8);
  }
  v790 = v788;
  v58 = (JSC::VM *)*((_QWORD *)v787 + 7);
  if (((v11 | v788) & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v11 + 5) != 2)
      goto LABEL_88;
    v59 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
    if (((*(_DWORD *)(v59 + 0x10) | *(unsigned __int8 *)(v59 + 0xA)) & 8) != 0)
      goto LABEL_88;
    v60 = *(_QWORD *)(v11 + 8);
    if ((v60 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v11, v787);
    }
    else
    {
      if ((*(_BYTE *)(v60 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v60 += 2;
        goto LABEL_77;
      }
      WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v11 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v801);
    }
    v60 = (unint64_t)v801[0];
LABEL_77:
    if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_435;
    if (v60)
    {
      if ((v60 >> 4))
      {
        if (((v60 >> 4) & ~*(_DWORD *)(v59 + 32)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v59, v58, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v61)
          {
            v801[0] = (WTF::StringImpl *)v60;
            v62 = JSC::PropertyTable::get(v61, (uint64_t *)v801);
            if ((_DWORD)v62 != -1)
            {
              if ((int)v62 <= 63)
              {
                v63 = v788 + 16;
                v64 = v62 << 32;
              }
              else
              {
                v63 = *(_QWORD *)(v788 + 8) - 8;
                v64 = 0x3F00000000 - (v62 << 32);
              }
              v10 = *(_QWORD *)(v63 + (v64 >> 29));
              if (v10)
                goto LABEL_206;
            }
          }
        }
      }
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
LABEL_88:
    if (!v9 || !(v11 >> 49) || v14)
      goto LABEL_91;
LABEL_1101:
    *(_DWORD *)(v9 + 4) |= 2u;
    if (v11 == 0xFFFE0000FFFFFFFFLL && v788 && (*(_BYTE *)(v788 + 5) & 0xFE) == 0x24)
    {
      v646 = *(_QWORD **)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x28);
      v647 = v646[288];
      v648 = (v647 & 1) != 0 ? (v647 >> 1) & 3 : *(unsigned __int8 *)(v647 + 4);
      if (v648 != 2)
      {
        v649 = v646[287];
        v650 = (v649 & 1) != 0 ? (v649 >> 1) & 3 : *(unsigned __int8 *)(v649 + 4);
        if (v650 != 2)
        {
          v651 = *(unsigned __int8 *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 8);
          v652 = (v651 & 0x10) != 0 ? ((v651 & 0xE) + 10) >> 1 : (v651 >> 1) & 7;
          v653 = *((_DWORD *)v646 + v652 + 213);
          v654 = v653 ? 16 * (v653 & 0xFFFFFFFE) : 0;
          if (v654 == 16 * (*(_DWORD *)v788 & 0xFFFFFFFE))
            return 10;
          v655 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
          if (!v655)
            v655 = *(_QWORD *)(v788 + 16);
          if (v655 == v646[84] && !*(_DWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x20))
            return 10;
        }
      }
    }
LABEL_91:
    if ((v788 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v358 = (JSC::VM *)*((_QWORD *)v787 + 7);
      v359 = JSC::createNotAnObjectError((unint64_t)v787, v788);
      JSC::VM::throwException(v358, v787, v359, v360, v361, v362, v363, v364);
    }
    if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, this, a3, a4, a5, a6, a7, a8))
      return 0;
    v65 = *((_QWORD *)v787 + 7);
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v11 + 5) == 2)
      {
        v60 = *(_QWORD *)(v11 + 8);
        if ((v60 & 1) == 0)
        {
          if ((*(_BYTE *)(v60 + 16) & 0x10) == 0)
          {
            v284 = *(WTF::StringImpl **)(v65 + 64768);
            if (v284 != (WTF::StringImpl *)v60)
            {
              *(_DWORD *)v60 += 2;
              *(_QWORD *)(v65 + 64768) = v60;
              if (v284)
              {
                if (*(_DWORD *)v284 == 2)
                {
                  WTF::StringImpl::~StringImpl(v284, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v334, v335, v336, v337, v338, v339, v340, v341);
                }
                else
                {
                  *(_DWORD *)v284 -= 2;
                }
              }
              v285 = *(WTF::StringImpl **)(v11 + 8);
              if (v285)
              {
                if ((*((_BYTE *)v285 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v285 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v285, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v801);
                  v285 = v801[0];
                }
              }
              v286 = *(WTF::StringImpl **)(v65 + 64776);
              *(_QWORD *)(v65 + 64776) = v285;
              if (v286)
              {
                if (*(_DWORD *)v286 == 2)
                {
                  WTF::StringImpl::~StringImpl(v286, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v326, v327, v328, v329, v330, v331, v332, v333);
                }
                else
                {
                  *(_DWORD *)v286 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v287 = *(WTF::StringImpl **)(v65 + 64776);
              *(_DWORD *)v287 += 2;
              v801[0] = v287;
              __dmb(0xAu);
              v288 = *(WTF::StringImpl **)(v11 + 8);
              *(WTF::StringImpl **)(v11 + 8) = v801[0];
              v801[0] = v288;
              v289 = (_QWORD *)(v65 + 808);
              v290 = *(unsigned int *)(v65 + 820);
              if ((_DWORD)v290 == *(_DWORD *)(v65 + 816))
              {
                v292 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v289, v290 + 1, (unint64_t)v801);
                v290 = *(unsigned int *)(v65 + 820);
                v291 = (WTF::StringImpl **)(*(_QWORD *)(v65 + 808) + 8 * v290);
                v288 = *v292;
              }
              else
              {
                v291 = (WTF::StringImpl **)(*v289 + 8 * v290);
                v292 = v801;
              }
              *v292 = 0;
              *v291 = v288;
              *(_DWORD *)(v65 + 820) = v290 + 1;
              v293 = v801[0];
              v801[0] = 0;
              if (v293)
              {
                if (*(_DWORD *)v293 == 2)
                {
                  WTF::StringImpl::~StringImpl(v293, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
                }
                else
                {
                  *(_DWORD *)v293 -= 2;
                }
              }
            }
            v60 = *(_QWORD *)(v65 + 64776);
          }
          goto LABEL_98;
        }
LABEL_1046:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, v787);
        if (*(_DWORD *)(v65 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v65, this, a3, a4, a5, a6, a7, a8))
        {
          v60 = 0;
          v597 = v801[0];
          v801[0] = 0;
          if (!v597)
            goto LABEL_100;
        }
        else
        {
          v60 = (unint64_t)v801[0];
          if (!v801[0])
            goto LABEL_100;
          *(_DWORD *)v801[0] += 2;
          v801[0] = 0;
          v597 = (WTF::StringImpl *)v60;
        }
        if (*(_DWORD *)v597 != 2)
        {
          *(_DWORD *)v597 -= 2;
          goto LABEL_100;
        }
LABEL_1054:
        WTF::StringImpl::~StringImpl(v597, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v599, v600, v601, v602, v603, v604, v605, v606);
        goto LABEL_100;
      }
      v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v787, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
    v791 = (WTF::StringImpl *)v11;
    if (*(_DWORD *)(v65 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v65, this, a3, a4, a5, a6, a7, a8))
      {
        v60 = *(_QWORD *)(*(_QWORD *)(v65 + 41952) + 8);
        if (v60)
        {
LABEL_98:
          v66 = *(_DWORD *)v60 + 2;
LABEL_99:
          *(_DWORD *)v60 = v66;
        }
LABEL_100:
        if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, this, a3, a4, a5, a6, a7, a8))
        {
LABEL_435:
          v10 = 0;
          goto LABEL_205;
        }
        a9.i64[0] = 0xFFFFFFFF00000000;
        v793 = 0xFFFFFFFF00000000;
        LOBYTE(v797) = 0;
        v798 = 0;
        v799 = 0;
        v800 = 0;
        v795 = 0;
        memset(v796, 0, 13);
        v794 = (_DWORD *)v788;
        if (v14)
          goto LABEL_1085;
        v67 = *((_QWORD *)v787 + 7);
        v68 = *(unsigned __int8 *)(v788 + 5);
        if (v68 > 0x16)
          goto LABEL_103;
        if (v68 != 2)
        {
LABEL_1085:
          v788 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v790, (unint64_t)v787);
          if (!v788)
            goto LABEL_221;
          v67 = *((_QWORD *)v787 + 7);
LABEL_103:
          v69 = v788;
          v70 = (_BYTE *)(v788 + 6);
          v71 = v60 >> 4;
          if ((*(_BYTE *)(v788 + 6) & 8) == 0)
          {
            v11 = v788;
            while (1)
            {
              v72 = *(_DWORD *)v11 & 0xFFFFFFFE;
              v73 = 16 * v72;
              if ((_DWORD)v71)
              {
                if ((v71 & ~*(_DWORD *)(16 * v72 + 0x20)) == 0)
                {
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v73, (JSC::VM *)v67, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  if (v74)
                  {
                    v801[0] = (WTF::StringImpl *)v60;
                    v75 = JSC::PropertyTable::get(v74, (uint64_t *)v801);
                    a6 = v75;
                    if ((_DWORD)v75 != -1)
                    {
                      a5 = HIDWORD(v75);
                      if ((int)v75 <= 63)
                      {
                        v126 = v11 + 16;
                        v127 = v75 << 32;
                      }
                      else
                      {
                        v126 = *(_QWORD *)(v11 + 8) - 8;
                        v127 = 0x3F00000000 - (v75 << 32);
                      }
                      a4 = *(_QWORD *)(v126 + (v127 >> 29));
                      if ((a4 & 0xFFFE000000000002) == 0)
                      {
                        v128 = *(unsigned __int8 *)(a4 + 5);
                        if (v128 == 5)
                        {
                          v203 = (unsigned int *)v11;
                          v204 = v67;
                          goto LABEL_286;
                        }
                        if (v128 == 6)
                        {
                          v280 = *(_DWORD *)(v73 + 16) & 3;
                          v281 = *(_QWORD *)(a4 + 16);
                          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                          {
                            v283 = *(int8x16_t ***)(a4 + 24);
                            v282 = *(_QWORD *)(a4 + 32);
                            v791 = *(WTF::StringImpl **)(a4 + 8);
                            v792 = v281;
                            LODWORD(v793) = HIDWORD(v75);
                            v795 = (_DWORD *)v11;
                            goto LABEL_384;
                          }
                          v791 = *(WTF::StringImpl **)(a4 + 8);
                          v792 = v281;
                          LODWORD(v793) = HIDWORD(v75);
                          v795 = (_DWORD *)v11;
                          goto LABEL_458;
                        }
                      }
                      v791 = (WTF::StringImpl *)a4;
                      v795 = (_DWORD *)v11;
LABEL_199:
                      v793 = __PAIR64__(a6, a5);
                      LOWORD(v796[1]) = 257;
                      goto LABEL_200;
                    }
                  }
                }
              }
              if ((*v70 & 0x20) != 0
                && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v11, (JSC::VM *)v67, v60, (uint64_t)&v791) & 1) != 0)
              {
                goto LABEL_200;
              }
              v69 = *(_QWORD *)(v73 + 48);
              if (!v69)
                v69 = *(_QWORD *)(v11 + 16);
              if ((v69 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v69 + 5) < 0x17u)
                break;
              v70 = (_BYTE *)(v69 + 6);
              v11 = v69;
              if ((*(_BYTE *)(v69 + 6) & 8) != 0)
                goto LABEL_115;
            }
            if (!v60 || (v137 = *(_DWORD *)(v60 + 16), (v137 & 0x20) != 0))
            {
LABEL_221:
              v10 = 10;
              goto LABEL_202;
            }
            v138 = *(_WORD **)(v60 + 8);
            v139 = *(unsigned int *)(v60 + 4);
            if ((v137 & 4) == 0)
            {
              if ((_DWORD)v139)
              {
                v140 = (unsigned __int16)*v138 - 48;
                if (v140 <= 9 && (*v138 != 48 || v139 <= 1))
                {
                  v192 = v138 + 1;
                  v193 = v139 - 1;
                  while (v193)
                  {
                    if (v140 > 0x19999999)
                      goto LABEL_217;
                    v194 = *v192 - 48;
                    if (v194 > 9)
                      goto LABEL_217;
                    v141 = 0;
                    LOBYTE(v139) = 0;
                    v142 = 0;
                    v111 = __CFADD__(v194, 10 * v140);
                    v140 = v194 + 10 * v140;
                    ++v192;
                    --v193;
                    if (v111)
                      goto LABEL_219;
                  }
                  v142 = v140 & 0xFFFFFF00;
                  v141 = 0x100000000;
                  if (v140 == -1)
                  {
                    v141 = 0;
                    LOBYTE(v139) = 0;
                  }
                  else
                  {
                    LOBYTE(v139) = v140;
                  }
                  if (v140 == -1)
                    v142 = 0;
                  goto LABEL_219;
                }
LABEL_217:
                v141 = 0;
                LOBYTE(v139) = 0;
              }
              else
              {
                v141 = 0;
              }
              v142 = 0;
LABEL_219:
              v143 = v139;
LABEL_220:
              if ((v141 & 0x100000000) == 0)
                goto LABEL_221;
              v252 = v142 | v143;
              v253 = (JSC::VM *)*((_QWORD *)v787 + 7);
              v10 = 10;
              while (1)
              {
                v254 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
                v255 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v254 + 0x4C) + 0x70))();
                if (*((_DWORD *)v253 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v253, this, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_221;
                }
                if ((v255 & 1) != 0)
                  goto LABEL_200;
                if (BYTE2(v796[1]) == 3)
                {
                  if (BYTE4(v796[1]))
                    goto LABEL_221;
                  v256 = *(unsigned __int8 *)(v788 + 5);
                  if (v256 == 61)
                    goto LABEL_348;
                }
                else
                {
                  v256 = *(unsigned __int8 *)(v788 + 5);
                  if (v256 == 61)
                  {
                    if (BYTE2(v796[1]) == 1)
                      goto LABEL_221;
                    goto LABEL_348;
                  }
                }
                if ((v256 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, this, a3, a4, a5, a6, a7, a8) <= v252)
                {
                  goto LABEL_221;
                }
LABEL_348:
                if ((*(_WORD *)(v254 + 12) & 0x800) == 0 || BYTE2(v796[1]) == 3)
                {
                  v257 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                  if (!v257)
                    v257 = *(_QWORD *)(v788 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v257 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v788, v787);
                  }
                  else
                  {
                    v257 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                    if (!v257)
                      v257 = *(_QWORD *)(v788 + 16);
                  }
                  if (*((_DWORD *)v253 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v253, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_221;
                  }
                }
                if ((v257 & 0xFFFE000000000002) == 0)
                {
                  v788 = v257;
                  this = (uint64_t)v787;
                  if (*(unsigned __int8 *)(v257 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_202;
              }
            }
            if ((_DWORD)v139)
            {
              v559 = *(unsigned __int8 *)v138 - 48;
              if (v559 <= 9 && (v139 < 2 || *(_BYTE *)v138 != 48))
              {
                v583 = v139 - 1;
                v584 = (unsigned __int8 *)v138 + 1;
                while (v583)
                {
                  if (v559 > 0x19999999)
                    goto LABEL_945;
                  v585 = *v584 - 48;
                  if (v585 > 9)
                    goto LABEL_945;
                  v143 = 0;
                  LOBYTE(v139) = 0;
                  v141 = 0;
                  v111 = __CFADD__(v585, 10 * v559);
                  v559 = v585 + 10 * v559;
                  --v583;
                  ++v584;
                  if (v111)
                    goto LABEL_947;
                }
                if (v559 == -1)
                  v143 = 0;
                else
                  v143 = v559 & 0xFFFFFF00;
                if (v559 == -1)
                  LOBYTE(v139) = 0;
                else
                  LOBYTE(v139) = v559;
                if (v559 == -1)
                  v141 = 0;
                else
                  v141 = 0x100000000;
                goto LABEL_947;
              }
LABEL_945:
              v143 = 0;
              LOBYTE(v139) = 0;
            }
            else
            {
              v143 = 0;
            }
            v141 = 0;
LABEL_947:
            v142 = v139;
            goto LABEL_220;
          }
LABEL_115:
          if (!v60)
            goto LABEL_124;
          v76 = *(_DWORD *)(v60 + 16);
          if ((v76 & 0x20) != 0)
            goto LABEL_124;
          v77 = *(_WORD **)(v60 + 8);
          v78 = *(unsigned int *)(v60 + 4);
          if ((v76 & 4) == 0)
          {
            if ((_DWORD)v78)
            {
              v79 = (unsigned __int16)*v77 - 48;
              if (v79 <= 9 && (*v77 != 48 || v78 <= 1))
              {
                v313 = v77 + 1;
                v314 = v78 - 1;
                while (v314)
                {
                  if (v79 > 0x19999999)
                    goto LABEL_120;
                  v315 = *v313 - 48;
                  if (v315 > 9)
                    goto LABEL_120;
                  v80 = 0;
                  LOBYTE(v78) = 0;
                  v81 = 0;
                  v111 = __CFADD__(v315, 10 * v79);
                  v79 = v315 + 10 * v79;
                  ++v313;
                  --v314;
                  if (v111)
                    goto LABEL_122;
                }
                v81 = v79 & 0xFFFFFF00;
                v80 = 0x100000000;
                if (v79 == -1)
                {
                  v80 = 0;
                  LOBYTE(v78) = 0;
                }
                else
                {
                  LOBYTE(v78) = v79;
                }
                if (v79 == -1)
                  v81 = 0;
                goto LABEL_122;
              }
LABEL_120:
              v80 = 0;
              LOBYTE(v78) = 0;
            }
            else
            {
              v80 = 0;
            }
            v81 = 0;
LABEL_122:
            v82 = v78;
LABEL_123:
            if ((v80 & 0x100000000) == 0)
            {
LABEL_124:
              v83 = (JSC::VM *)*((_QWORD *)v787 + 7);
              v10 = 10;
              while (1)
              {
                v84 = 16 * (*(_DWORD *)v69 & 0xFFFFFFFE);
                if ((*(_BYTE *)(v69 + 6) & 8) != 0)
                {
                  v348 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C) + 0x68))(v69, v787, v60, &v791);
                  if (*((_DWORD *)v83 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v83, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_221;
                  }
                  if ((v348 & 1) != 0)
                    goto LABEL_200;
                  if (BYTE2(v796[1]) == 3)
                  {
                    if (BYTE4(v796[1]))
                      goto LABEL_221;
                    v349 = *(unsigned __int8 *)(v69 + 5);
                    if (v349 != 61)
                    {
LABEL_533:
                      if (!v60)
                        goto LABEL_131;
                      if ((v349 - 50) < 0xFFFFFFF5)
                        goto LABEL_131;
                      v350 = *(_DWORD *)(v60 + 16);
                      if ((v350 & 0x20) != 0)
                        goto LABEL_131;
                      v351 = *(unsigned int *)(v60 + 4);
                      if (!(_DWORD)v351)
                        goto LABEL_131;
                      v352 = *(unsigned __int8 **)(v60 + 8);
                      if ((v350 & 4) == 0)
                      {
                        v353 = *(unsigned __int16 *)v352;
                        if ((_DWORD)v351 == 1)
                          goto LABEL_539;
                        if (v353 == 45)
                        {
                          v353 = *((unsigned __int16 *)v352 + 1);
                          goto LABEL_554;
                        }
                        if ((v353 - 48) >= 0xA && ((_DWORD)v351 != 8 || v353 != 73))
                        {
LABEL_925:
                          if ((_DWORD)v351 != 3 || v353 != 78)
                            goto LABEL_131;
                        }
LABEL_583:
                        v11 = v11 & 0xFFFFFF0000000000 | v351 | ((unint64_t)((v350 >> 2) & 1) << 32);
                        JSC::jsToNumber(v352, v11);
                        WTF::numberToString(v801, v372);
                        if (WTF::equal(v60, (unint64_t)v801, v373))
                          goto LABEL_221;
                        goto LABEL_131;
                      }
                      v353 = *v352;
                      if ((_DWORD)v351 == 1)
                      {
LABEL_539:
                        if ((v353 - 48) < 0xA)
                          goto LABEL_221;
                        goto LABEL_131;
                      }
                      if (v353 == 45)
                      {
                        v353 = v352[1];
LABEL_554:
                        if ((v353 - 48) < 0xA)
                        {
                          if ((_DWORD)v351 == 2)
                            goto LABEL_221;
                          goto LABEL_583;
                        }
                        if ((_DWORD)v351 != 9)
                          goto LABEL_131;
                      }
                      else
                      {
                        if ((v353 - 48) < 0xA)
                          goto LABEL_583;
                        if ((_DWORD)v351 != 8)
                          goto LABEL_925;
                      }
                      if (v353 != 73)
                        goto LABEL_131;
                      goto LABEL_583;
                    }
                  }
                  else
                  {
                    v349 = *(unsigned __int8 *)(v69 + 5);
                    if (v349 != 61)
                      goto LABEL_533;
                    if (BYTE2(v796[1]) == 1)
                      goto LABEL_221;
                  }
                }
                else
                {
                  if ((_DWORD)v71)
                  {
                    if ((v71 & ~*(_DWORD *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x20)) == 0)
                    {
                      JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE)), v83, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                      if (v85)
                      {
                        v801[0] = (WTF::StringImpl *)v60;
                        v86 = JSC::PropertyTable::get(v85, (uint64_t *)v801);
                        a6 = v86;
                        if ((_DWORD)v86 != -1)
                        {
                          a5 = HIDWORD(v86);
                          if ((int)v86 <= 63)
                          {
                            v310 = v69 + 16;
                            v311 = v86 << 32;
                          }
                          else
                          {
                            v310 = *(_QWORD *)(v69 + 8) - 8;
                            v311 = 0x3F00000000 - (v86 << 32);
                          }
                          a4 = *(_QWORD *)(v310 + (v311 >> 29));
                          if ((a4 & 0xFFFE000000000002) == 0)
                          {
                            v312 = *(unsigned __int8 *)(a4 + 5);
                            if (v312 != 5)
                            {
                              if (v312 != 6)
                                goto LABEL_432;
                              v280 = *(_DWORD *)(v84 + 16) & 3;
                              v342 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v283 = *(int8x16_t ***)(a4 + 24);
                                v282 = *(_QWORD *)(a4 + 32);
                                v791 = *(WTF::StringImpl **)(a4 + 8);
                                v792 = v342;
                                LODWORD(v793) = HIDWORD(v86);
                                v795 = (_DWORD *)v69;
LABEL_384:
                                BYTE1(v796[1]) = 3;
                                if (v280 != 2)
                                  LOBYTE(v796[1]) = 1;
                                BYTE3(v796[1]) = 1;
                                v799 = v283;
                                v800 = v282;
LABEL_200:
                                if (BYTE1(v796[1]) == 1)
                                {
                                  v10 = (uint64_t)v791;
                                }
                                else
                                {
                                  if (BYTE1(v796[1]) == 2)
                                  {
                                    v202 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v791, v787, a3, a4, a5, a6, a7, a8);
                                  }
                                  else
                                  {
                                    v265 = (unint64_t)v795;
                                    v266 = *(_QWORD *)(16 * (*v795 & 0xFFFFFFFE) + 0x28);
                                    if ((v793 & 0x20) != 0)
                                      v265 = (unint64_t)v794;
                                    if (BYTE3(v796[1]) != 1)
                                      goto LABEL_380;
                                    if ((v265 & 0xFFFE000000000002) != 0)
                                      goto LABEL_919;
                                    v267 = *(unsigned int *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x4C);
                                    v268 = *(_DWORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x4C) != 0;
                                    v269 = 16 * v267;
                                    if ((_DWORD)v267)
                                      v270 = v799 == (int8x16_t **)v269;
                                    else
                                      v270 = 1;
                                    if (!v270)
                                    {
                                      do
                                      {
                                        v269 = *(_QWORD *)(v269 + 16);
                                        v268 = v269 != 0;
                                      }
                                      while ((int8x16_t **)v269 != v799 && v269 != 0);
                                    }
                                    if (!v268)
                                    {
LABEL_919:
                                      v801[0] = *((WTF::StringImpl **)v787 + 7);
                                      v202 = JSC::throwDOMAttributeGetterTypeError(v266, v801, v799, (WTF::StringImpl *)v60);
                                    }
                                    else
                                    {
LABEL_380:
                                      v202 = ((uint64_t (*)(unint64_t))v791)(v266);
                                    }
                                  }
                                  v10 = v202;
                                }
LABEL_202:
                                if (v798)
                                {
                                  v129 = *(_DWORD *)(v797 + 4);
                                  if (!v129)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1987A2DD0);
                                  }
                                  *(_DWORD *)(v797 + 4) = v129 - 1;
                                }
LABEL_205:
                                if (!v60)
                                  return v10;
LABEL_206:
                                if (*(_DWORD *)v60 != 2)
                                {
                                  *(_DWORD *)v60 -= 2;
                                  return v10;
                                }
                                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                                goto LABEL_232;
                              }
                              v791 = *(WTF::StringImpl **)(a4 + 8);
                              v792 = v342;
                              LODWORD(v793) = HIDWORD(v86);
                              v795 = (_DWORD *)v69;
LABEL_458:
                              BYTE1(v796[1]) = 3;
                              if (v280 != 2)
                                LOBYTE(v796[1]) = 1;
                              goto LABEL_200;
                            }
                            v203 = (unsigned int *)v69;
                            v204 = (uint64_t)v83;
LABEL_286:
                            JSC::JSObject::fillGetterPropertySlot(v203, v204, (uint64_t)&v791, a4, a5, a6);
                            goto LABEL_200;
                          }
LABEL_432:
                          v791 = (WTF::StringImpl *)a4;
                          v795 = (_DWORD *)v69;
                          goto LABEL_199;
                        }
                      }
                    }
                  }
                  if ((*(_BYTE *)(v69 + 6) & 0x20) != 0
                    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v69, v83, v60, (uint64_t)&v791) & 1) != 0)
                  {
                    goto LABEL_200;
                  }
                }
LABEL_131:
                if ((*(_WORD *)(v84 + 12) & 0x800) == 0)
                {
                  v87 = *(_DWORD *)v69;
LABEL_133:
                  v88 = *(_QWORD *)(16 * (v87 & 0xFFFFFFFE) + 0x30);
                  if (!v88)
                    v88 = *(_QWORD *)(v69 + 16);
                  goto LABEL_135;
                }
                v87 = *(_DWORD *)v69;
                if (BYTE2(v796[1]) == 3)
                  goto LABEL_133;
                v343 = 16 * (v87 & 0xFFFFFFFE);
                if ((*(_WORD *)(v343 + 12) & 0x800) != 0)
                {
                  v88 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                           * *(unsigned int *)(v343 + 76)
                                                                                           + 0xB0))(v69, v787);
                }
                else
                {
                  v88 = *(_QWORD *)(v343 + 48);
                  if (!v88)
                    v88 = *(_QWORD *)(v69 + 16);
                }
                if (*((_DWORD *)v83 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v83, this, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_221;
                }
LABEL_135:
                if ((v88 & 0xFFFE000000000002) == 0)
                {
                  v69 = v88;
                  if (*(unsigned __int8 *)(v88 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_202;
              }
            }
            v317 = v81 | v82;
            v318 = (JSC::VM *)*((_QWORD *)v787 + 7);
            v10 = 10;
            while (1)
            {
              v319 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
              v320 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v319 + 0x4C) + 0x70))();
              v321 = v320;
              if (*((_DWORD *)v318 + 20))
              {
                v369 = JSC::VM::hasExceptionsAfterHandlingTraps(v318, this, a3, a4, a5, a6, a7, a8);
                if (((v369 | v321) & 1) != 0)
                {
                  if (!v369)
                    goto LABEL_200;
                  goto LABEL_221;
                }
              }
              else if ((v320 & 1) != 0)
              {
                goto LABEL_200;
              }
              if (BYTE2(v796[1]) == 3)
              {
                if (BYTE4(v796[1]))
                  goto LABEL_221;
                v322 = *(unsigned __int8 *)(v788 + 5);
                if (v322 == 61)
                  goto LABEL_479;
              }
              else
              {
                v322 = *(unsigned __int8 *)(v788 + 5);
                if (v322 == 61)
                {
                  if (BYTE2(v796[1]) == 1)
                    goto LABEL_221;
                  goto LABEL_479;
                }
              }
              if ((v322 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, this, a3, a4, a5, a6, a7, a8) <= v317)
              {
                goto LABEL_221;
              }
LABEL_479:
              if ((*(_WORD *)(v319 + 12) & 0x800) == 0 || BYTE2(v796[1]) == 3)
              {
                v323 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                if (!v323)
                  v323 = *(_QWORD *)(v788 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v323 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v788, v787);
                }
                else
                {
                  v323 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
                  if (!v323)
                    v323 = *(_QWORD *)(v788 + 16);
                }
                if (*((_DWORD *)v318 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v318, this, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_221;
                }
              }
              if ((v323 & 0xFFFE000000000002) == 0)
              {
                v788 = v323;
                this = (uint64_t)v787;
                if (*(unsigned __int8 *)(v323 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_202;
            }
          }
          if ((_DWORD)v78)
          {
            v690 = *(unsigned __int8 *)v77 - 48;
            if (v690 <= 9 && (v78 < 2 || *(_BYTE *)v77 != 48))
            {
              v695 = v78 - 1;
              v696 = (unsigned __int8 *)v77 + 1;
              while (v695)
              {
                if (v690 > 0x19999999)
                  goto LABEL_1230;
                v697 = *v696 - 48;
                if (v697 > 9)
                  goto LABEL_1230;
                v82 = 0;
                LOBYTE(v78) = 0;
                v80 = 0;
                v111 = __CFADD__(v697, 10 * v690);
                v690 = v697 + 10 * v690;
                --v695;
                ++v696;
                if (v111)
                  goto LABEL_1232;
              }
              if (v690 == -1)
                v82 = 0;
              else
                v82 = v690 & 0xFFFFFF00;
              if (v690 == -1)
                LOBYTE(v78) = 0;
              else
                LOBYTE(v78) = v690;
              if (v690 == -1)
                v80 = 0;
              else
                v80 = 0x100000000;
              goto LABEL_1232;
            }
LABEL_1230:
            v82 = 0;
            LOBYTE(v78) = 0;
          }
          else
          {
            v82 = 0;
          }
          v80 = 0;
LABEL_1232:
          v81 = v78;
          goto LABEL_123;
        }
        if (*(_QWORD *)(*(_QWORD *)(v67 + 41952) + 1768) == v60)
        {
          v631 = *(_QWORD *)(v788 + 8);
          if ((v631 & 1) != 0)
            v632 = (unsigned int *)(v788 + 16);
          else
            v632 = (unsigned int *)(v631 + 4);
          v633 = *v632;
          if ((v633 & 0x80000000) != 0)
            v634 = (WTF::StringImpl *)(COERCE__INT64((double)v633) + 0x2000000000000);
          else
            v634 = (WTF::StringImpl *)(v633 | 0xFFFE000000000000);
          v635 = 14;
          goto LABEL_1082;
        }
        if (!v60 || (v666 = *(_DWORD *)(v60 + 16), (v666 & 0x20) != 0))
        {
LABEL_1156:
          v636 = 0;
LABEL_1083:
          if (*(_DWORD *)(v67 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v67, this, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_221;
          }
          if ((v636 & 1) != 0)
            goto LABEL_200;
          goto LABEL_1085;
        }
        v667 = *(_WORD **)(v60 + 8);
        v668 = *(unsigned int *)(v60 + 4);
        if ((v666 & 4) == 0)
        {
          if ((_DWORD)v668)
          {
            v669 = (unsigned __int16)*v667 - 48;
            if (v669 <= 9 && (*v667 != 48 || v668 <= 1))
            {
              v679 = v667 + 1;
              v680 = v668 - 1;
              while (v680)
              {
                if (v669 > 0x19999999)
                  goto LABEL_1152;
                v681 = *v679 - 48;
                if (v681 > 9)
                  goto LABEL_1152;
                v670 = 0;
                LOBYTE(v668) = 0;
                v671 = 0;
                v111 = __CFADD__(v681, 10 * v669);
                v669 = v681 + 10 * v669;
                ++v679;
                --v680;
                if (v111)
                  goto LABEL_1154;
              }
              v671 = v669 & 0xFFFFFF00;
              v670 = 0x100000000;
              if (v669 == -1)
              {
                v670 = 0;
                LOBYTE(v668) = 0;
              }
              else
              {
                LOBYTE(v668) = v669;
              }
              if (v669 == -1)
                v671 = 0;
              goto LABEL_1154;
            }
LABEL_1152:
            v670 = 0;
            LOBYTE(v668) = 0;
          }
          else
          {
            v670 = 0;
          }
          v671 = 0;
LABEL_1154:
          v672 = v668;
LABEL_1155:
          if ((v670 & 0x100000000) != 0)
          {
            a3 = v671 | v672;
            v742 = *(_QWORD *)(v788 + 8);
            v743 = (_DWORD *)((v742 & 1) != 0 ? v788 + 16 : v742 + 4);
            if (*v743 > a3)
            {
              v634 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v788, v787, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v67 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v67, this, a3, a4, a5, a6, a7, a8))
              {
                v635 = 10;
LABEL_1082:
                v791 = v634;
                LODWORD(v793) = v635;
                v795 = 0;
                v636 = 1;
                BYTE1(v796[1]) = 1;
                goto LABEL_1083;
              }
            }
          }
          goto LABEL_1156;
        }
        if ((_DWORD)v668)
        {
          v765 = *(unsigned __int8 *)v667 - 48;
          if (v765 <= 9 && (v668 < 2 || *(_BYTE *)v667 != 48))
          {
            v766 = v668 - 1;
            v767 = (unsigned __int8 *)v667 + 1;
            while (v766)
            {
              if (v765 > 0x19999999)
                goto LABEL_1536;
              v768 = *v767 - 48;
              if (v768 > 9)
                goto LABEL_1536;
              v672 = 0;
              LOBYTE(v668) = 0;
              v670 = 0;
              v111 = __CFADD__(v768, 10 * v765);
              v765 = v768 + 10 * v765;
              --v766;
              ++v767;
              if (v111)
                goto LABEL_1538;
            }
            if (v765 == -1)
              v672 = 0;
            else
              v672 = v765 & 0xFFFFFF00;
            if (v765 == -1)
              LOBYTE(v668) = 0;
            else
              LOBYTE(v668) = v765;
            if (v765 == -1)
              v670 = 0;
            else
              v670 = 0x100000000;
            goto LABEL_1538;
          }
LABEL_1536:
          v672 = 0;
          LOBYTE(v668) = 0;
        }
        else
        {
          v672 = 0;
        }
        v670 = 0;
LABEL_1538:
        v671 = v668;
        goto LABEL_1155;
      }
      v11 = (unint64_t)v791;
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v586 = *(unsigned __int8 *)(v11 + 5);
      if (v586 == 2)
        goto LABEL_1030;
      if (v586 == 4)
      {
        v60 = *(_QWORD *)(v11 + 8);
        v598 = *(_DWORD *)v60;
        *(_DWORD *)v60 += 4;
        v66 = v598 + 2;
        if (v66)
          goto LABEL_99;
        v597 = (WTF::StringImpl *)v60;
        goto LABEL_1054;
      }
    }
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v791, (uint64_t)v787, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_1030:
    if (*(_DWORD *)(v65 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v65, this, a3, a4, a5, a6, a7, a8))
    {
      v60 = 0;
      goto LABEL_100;
    }
    v60 = *(_QWORD *)(v11 + 8);
    v65 = *((_QWORD *)v787 + 7);
    if ((v60 & 1) == 0)
    {
      if ((*(_BYTE *)(v60 + 16) & 0x10) == 0)
      {
        v587 = *(WTF::StringImpl **)(v65 + 64768);
        if (v587 != (WTF::StringImpl *)v60)
        {
          *(_DWORD *)v60 += 2;
          *(_QWORD *)(v65 + 64768) = v60;
          if (v587)
          {
            if (*(_DWORD *)v587 == 2)
            {
              WTF::StringImpl::~StringImpl(v587, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v623, v624, v625, v626, v627, v628, v629, v630);
            }
            else
            {
              *(_DWORD *)v587 -= 2;
            }
          }
          v588 = *(WTF::StringImpl **)(v11 + 8);
          if (v588)
          {
            if ((*((_BYTE *)v588 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v588 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v588, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v801);
              v588 = v801[0];
            }
          }
          v589 = *(WTF::StringImpl **)(v65 + 64776);
          *(_QWORD *)(v65 + 64776) = v588;
          if (v589)
          {
            if (*(_DWORD *)v589 == 2)
            {
              WTF::StringImpl::~StringImpl(v589, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v615, v616, v617, v618, v619, v620, v621, v622);
            }
            else
            {
              *(_DWORD *)v589 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v590 = *(WTF::StringImpl **)(v65 + 64776);
          *(_DWORD *)v590 += 2;
          v801[0] = v590;
          __dmb(0xAu);
          v591 = *(WTF::StringImpl **)(v11 + 8);
          *(WTF::StringImpl **)(v11 + 8) = v801[0];
          v801[0] = v591;
          v592 = (_QWORD *)(v65 + 808);
          v593 = *(unsigned int *)(v65 + 820);
          if ((_DWORD)v593 == *(_DWORD *)(v65 + 816))
          {
            v595 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v592, v593 + 1, (unint64_t)v801);
            v593 = *(unsigned int *)(v65 + 820);
            v594 = (WTF::StringImpl **)(*(_QWORD *)(v65 + 808) + 8 * v593);
            v591 = *v595;
          }
          else
          {
            v594 = (WTF::StringImpl **)(*v592 + 8 * v593);
            v595 = v801;
          }
          *v595 = 0;
          *v594 = v591;
          *(_DWORD *)(v65 + 820) = v593 + 1;
          v596 = v801[0];
          v801[0] = 0;
          if (v596)
          {
            if (*(_DWORD *)v596 == 2)
            {
              WTF::StringImpl::~StringImpl(v596, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v607, v608, v609, v610, v611, v612, v613, v614);
            }
            else
            {
              *(_DWORD *)v596 -= 2;
            }
          }
        }
        v60 = *(_QWORD *)(v65 + 64776);
      }
      goto LABEL_98;
    }
    goto LABEL_1046;
  }
  if (v11 < 0xFFFE000000000000 || (v11 & 0x80000000) != 0)
  {
    if (!(v11 >> 49))
      goto LABEL_91;
    *(double *)a9.i64 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v11 - 0x2000000000000;
    v165 = *(double *)a9.i64;
    if ((_DWORD)v165 == -1 || *(double *)a9.i64 != (double)v165)
    {
      if (v14 || !v9)
        goto LABEL_91;
      goto LABEL_1101;
    }
  }
  else
  {
    v165 = v11;
  }
  if (v14)
    goto LABEL_250;
  v166 = *(unsigned __int8 *)(v788 + 5);
  if (v166 != 2)
  {
    if (v166 < 0x17)
      goto LABEL_250;
    v167 = JSC::JSObject::tryGetIndexQuickly(v788, v165, v9);
    if (!v167)
    {
      if ((*(_BYTE *)(v788 + 4) & 0xF) == 9 && v165 < *(_DWORD *)(*(_QWORD *)(v788 + 8) - 8))
      {
        v258 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x28);
        v259 = *(unsigned __int8 *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 8);
        v260 = (v259 & 0x10) != 0 ? ((v259 & 0xE) + 10) >> 1 : (v259 >> 1) & 7;
        v261 = *(_DWORD *)(v258 + 4 * v260 + 852);
        v262 = v261 ? 16 * (v261 & 0xFFFFFFFE) : 0;
        if (v262 == 16 * (*(_DWORD *)v788 & 0xFFFFFFFE))
        {
          v263 = *(_QWORD *)(v258 + 2304);
          v264 = (v263 & 1) != 0 ? (v263 >> 1) & 3 : *(unsigned __int8 *)(v263 + 4);
          if (v264 != 2)
            goto LABEL_250;
        }
      }
      v168 = *(unsigned __int8 *)(v788 + 5);
      if (v168 == 33)
      {
        if (*(_DWORD *)(v788 + 32) > v165)
        {
          v309 = *(_QWORD *)(v788 + 40);
          if (!v309)
            goto LABEL_250;
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          {
            if (!v9 || (v309 & 0x3FFFFFFFFLL) == -qword_1ECF4C038)
              goto LABEL_250;
            goto LABEL_249;
          }
        }
      }
      else if (v168 == 34)
      {
        isMappedArgument = JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v788, v165);
        if (!v9 || isMappedArgument)
          goto LABEL_250;
        goto LABEL_249;
      }
      goto LABEL_248;
    }
    return v167;
  }
  v306 = *(_QWORD *)(v788 + 8);
  if ((v306 & 1) != 0)
    v307 = (_DWORD *)(v788 + 16);
  else
    v307 = (_DWORD *)(v306 + 4);
  if (*v307 > v165)
    return JSC::JSString::getIndex((JSC::JSString *)v788, v787, v165, a4, a5, a6, a7, a8, a9);
LABEL_248:
  if (v9)
LABEL_249:
    *(_DWORD *)(v9 + 4) |= 2u;
LABEL_250:
  a9.i64[0] = 0xFFFFFFFF00000000;
  v802 = 0xFFFFFFFF00000000;
  LOBYTE(v806) = 0;
  v807 = 0;
  v808 = 0;
  v809 = 0;
  v804 = 0;
  memset(v805, 0, 13);
  v803 = v788;
  if (!v14)
  {
    v169 = (JSC::VM *)*((_QWORD *)v787 + 7);
    v170 = *(unsigned __int8 *)(v788 + 5);
    if (v170 > 0x16)
    {
LABEL_252:
      v10 = 10;
      while (1)
      {
        v171 = 16 * (*(_DWORD *)v788 & 0xFFFFFFFE);
        v179 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v171 + 0x4C) + 0x70))();
        if (*((_DWORD *)v169 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v169, v172, (uint64_t)v173, v174, v175, v176, v177, v178))
        {
LABEL_496:
          v10 = 10;
          goto LABEL_289;
        }
        if ((v179 & 1) != 0)
        {
          if (BYTE1(v805[1]) == 1)
          {
            v10 = (uint64_t)v801[0];
          }
          else if (BYTE1(v805[1]) == 2)
          {
            v10 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v801, v787, (uint64_t)v173, v174, v175, v176, v177, v178);
          }
          else
          {
            v374 = (uint64_t **)*((_QWORD *)v787 + 7);
            JSC::Identifier::from(v374, v165, v173, v174, v175, v176, v177, v178, (int **)&v791);
            v10 = JSC::PropertySlot::customGetter((uint64_t)v801, (JSC::VM *)v374, v791);
            v382 = v791;
            v791 = 0;
            if (v382)
            {
              if (*(_DWORD *)v382 == 2)
              {
                WTF::StringImpl::~StringImpl(v382, v375, v376, v377, v378, v379, v380, v381);
                WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
              }
              else
              {
                *(_DWORD *)v382 -= 2;
              }
            }
          }
          goto LABEL_289;
        }
        if (BYTE2(v805[1]) == 3)
        {
          if (BYTE4(v805[1]))
            goto LABEL_496;
          v180 = *(unsigned __int8 *)(v788 + 5);
          if (v180 == 61)
            goto LABEL_258;
        }
        else
        {
          v180 = *(unsigned __int8 *)(v788 + 5);
          if (v180 == 61)
          {
            if (BYTE2(v805[1]) == 1)
              goto LABEL_496;
            goto LABEL_258;
          }
        }
        if ((v180 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v788, v172, (uint64_t)v173, v174, v175, v176, v177, v178) <= v165)
        {
          goto LABEL_496;
        }
LABEL_258:
        if ((*(_WORD *)(v171 + 12) & 0x800) == 0 || BYTE2(v805[1]) == 3)
        {
          v181 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
          if (!v181)
            v181 = *(_QWORD *)(v788 + 16);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v181 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v788 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0xB0))(v788, v787);
          }
          else
          {
            v181 = *(_QWORD *)(16 * (*(_DWORD *)v788 & 0xFFFFFFFE) + 0x30);
            if (!v181)
              v181 = *(_QWORD *)(v788 + 16);
          }
          if (*((_DWORD *)v169 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v169, v172, (uint64_t)v173, v174, v175, v176, v177, v178))
          {
            goto LABEL_496;
          }
        }
        if ((v181 & 0xFFFE000000000002) == 0)
        {
          v788 = v181;
          if (*(unsigned __int8 *)(v181 + 5) > 0x16u)
            continue;
        }
        goto LABEL_289;
      }
    }
    if (v170 == 2)
    {
      v676 = *(_QWORD *)(v788 + 8);
      if ((v676 & 1) != 0)
        v677 = (_DWORD *)(v788 + 16);
      else
        v677 = (_DWORD *)(v676 + 4);
      if (*v677 <= v165
        || (v10 = JSC::JSString::getIndex((JSC::JSString *)v788, v787, v165, a4, a5, a6, a7, a8, a9),
            *((_DWORD *)v169 + 20))
        && JSC::VM::hasExceptionsAfterHandlingTraps(v169, this, a3, a4, a5, a6, a7, a8))
      {
        v678 = 0;
      }
      else
      {
        v801[0] = (WTF::StringImpl *)v10;
        LODWORD(v802) = 10;
        v804 = 0;
        v678 = 1;
        BYTE1(v805[1]) = 1;
      }
      if (*((_DWORD *)v169 + 20))
      {
        v740 = JSC::VM::hasExceptionsAfterHandlingTraps(v169, this, a3, a4, a5, a6, a7, a8);
        if (v740)
          v10 = 0;
        if (((v740 | v678) & 1) != 0)
          goto LABEL_289;
      }
      else if ((v678 & 1) != 0)
      {
        goto LABEL_289;
      }
    }
  }
  v788 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v790, (unint64_t)v787);
  if (v788)
  {
    v169 = (JSC::VM *)*((_QWORD *)v787 + 7);
    goto LABEL_252;
  }
  v10 = 0;
LABEL_289:
  if (v807)
  {
    v205 = *(_DWORD *)(v806 + 4);
    if (!v205)
    {
      __break(0xC471u);
      JUMPOUT(0x1987A3030);
    }
    *(_DWORD *)(v806 + 4) = v205 - 1;
  }
  return v10;
}

uint64_t operationGetByValMegamorphicGeneric(JSC::VM **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t Index;
  unint64_t v10;
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int OwnStaticPropertySlot;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int16 v63;
  _QWORD *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int16 v84;
  _QWORD *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  _BYTE *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  _WORD *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  JSC::VM *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  JSC::ScopedArguments *v120;
  unsigned int v121;
  uint64_t IndexQuickly;
  JSC::VM *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  const WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  _WORD *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  __int16 v163;
  __int16 v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int16 *v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  BOOL v206;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  JSC::VM *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  int8x16_t **v236;
  unint64_t v237;
  JSC::VM *v238;
  uint64_t v239;
  char v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v255;
  BOOL v256;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int8x16_t **v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  _QWORD *v267;
  uint64_t v268;
  WTF::StringImpl **v269;
  WTF::StringImpl **v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  _DWORD *v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  JSC::JSGlobalObject *v286;
  unsigned __int16 *v287;
  uint64_t v288;
  unsigned int v289;
  unint64_t v290;
  JSC::VM *v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  unsigned __int8 *v319;
  int v320;
  JSC::VM *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  WTF::AtomStringImpl *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  _BOOL4 v341;
  double v342;
  const unsigned __int8 *v343;
  uint64_t v344;
  unsigned __int8 *v345;
  unsigned int v346;
  JSC::VM *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  JSC::JSGlobalObject *v366;
  int v367;
  _WORD *v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  JSC::VM *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  int v384;
  _WORD *v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned int v400;
  unsigned __int8 *v401;
  uint64_t v402;
  JSC::JSGlobalObject *v403;
  JSC::VM *v404;
  unsigned int v405;
  uint64_t v406;
  char v407;
  int v408;
  uint64_t v409;
  unsigned __int16 *v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  WTF::StringImpl *v422;
  unint64_t v423;
  JSC::JSGlobalObject *v424;
  JSC::VM *v425;
  uint64_t v426;
  char v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  unsigned int v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  int8x16_t **v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _DWORD *v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  unsigned __int16 *v467;
  uint64_t v468;
  unsigned int v469;
  unint64_t v470;
  JSC::VM *v471;
  uint64_t v472;
  int v473;
  int v474;
  int v475;
  uint64_t v476;
  unint64_t v477;
  void *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  int8x16_t **v488;
  unint64_t v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  unsigned int v499;
  uint64_t v500;
  unsigned __int8 *v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  int8x16_t **v506;
  unsigned int v507;
  JSC::VM *v508;
  unint64_t NotAnObjectError;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned __int8 *v516;
  unsigned int v517;
  uint64_t v518;
  int v519;
  WTF::StringImpl *v520;
  WTF::StringImpl *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  WTF::StringImpl *v524;
  _QWORD *v525;
  uint64_t v526;
  WTF::StringImpl **v527;
  WTF::StringImpl **v528;
  WTF::StringImpl *v529;
  WTF::StringImpl *v530;
  int v531;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unsigned int *v565;
  uint64_t v566;
  WTF::StringImpl *v567;
  int v568;
  char v569;
  uint64_t v570;
  _DWORD *v571;
  char v572;
  _BOOL4 v573;
  int v574;
  int v575;
  int v576;
  unsigned int v577;
  uint64_t v578;
  unsigned __int8 *v579;
  int v580;
  double v581;
  const unsigned __int8 *v582;
  int v583;
  _WORD *v584;
  uint64_t v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int v588;
  unsigned int v589;
  _BOOL4 v590;
  JSC::VM *v591;
  WTF::StringImpl *v592;
  unsigned __int16 *v593;
  uint64_t v594;
  unsigned int v595;
  unsigned int v596;
  unint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  double v606;
  const unsigned __int8 *v607;
  uint64_t v608;
  unsigned __int8 *v609;
  unsigned int v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  unsigned int *v616;
  uint64_t v617;
  WTF::StringImpl *v618;
  int v619;
  char v620;
  uint64_t v621;
  unsigned __int8 *v622;
  unsigned int v623;
  int v624;
  _BYTE *v625;
  uint64_t v626;
  unsigned int v627;
  uint64_t v628;
  unsigned int v629;
  unsigned int v630;
  int v631;
  WTF::StringImpl *v632;
  unint64_t v633;
  void *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  _DWORD *v642;
  char v643;
  unsigned __int16 *v644;
  uint64_t v645;
  unsigned int v646;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  _BOOL4 v648;
  unsigned int v649;
  WTF::StringImpl *v650;
  WTF::StringImpl *v651;
  WTF::StringImpl *v652;
  WTF::StringImpl *v653;
  WTF::StringImpl *v654;
  unint64_t v655;
  void *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unsigned __int8 *v664;
  unsigned int v665;
  uint64_t v666;
  _DWORD *v667;
  _BOOL4 v668;
  unint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  _DWORD *v678;
  unsigned int v679;
  uint64_t v680;
  unsigned __int8 *v681;
  unsigned int v682;
  unsigned int v683;
  uint64_t v684;
  unsigned __int8 *v685;
  unsigned int v686;
  unsigned int v687;
  __int16 v688;
  unint64_t v689;
  JSC::VM **v690;
  JSC::VM *v691;
  uint64_t v692;
  char v693;
  uint64_t v694;
  WTF::StringImpl *v695;
  uint64_t v696;
  unint64_t v697;
  _DWORD *v698;
  _DWORD *v699;
  _QWORD v700[2];
  uint64_t v701;
  char v702;
  int8x16_t **v703;
  uint64_t v704;
  WTF::StringImpl *v705[2];
  unint64_t v706;
  unsigned __int8 *v707;
  uint64_t v708;
  _QWORD v709[2];
  uint64_t v710;
  char v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t vars0;

  v11 = a3;
  v12 = (JSC::JSGlobalObject *)a1;
  v714 = *MEMORY[0x1E0C80C00];
  v691 = a1[7];
  v692 = a2;
  *((_QWORD *)v691 + 5) = vars0;
  v13 = a2 & 0xFFFE000000000002;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v694 = a2;
    goto LABEL_184;
  }
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
  {
    v694 = a2;
    if ((a3 & 0xFFFE000000000002) == 0)
      goto LABEL_120;
LABEL_184:
    if (a3 < 0xFFFE000000000000 || (a3 & 0x80000000) != 0)
    {
      if (!(a3 >> 49))
        goto LABEL_136;
      *(double *)a9.i64 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        a9.i64[0] = a3 - 0x2000000000000;
      v119 = *(double *)a9.i64;
      if ((_DWORD)v119 == -1 || *(double *)a9.i64 != (double)v119)
        goto LABEL_136;
    }
    else
    {
      v119 = a3;
    }
    v120 = (JSC::ScopedArguments *)a2;
    if (v13)
      goto LABEL_194;
    v121 = *(unsigned __int8 *)(a2 + 5);
    if (v121 == 2)
    {
      v120 = (JSC::ScopedArguments *)a2;
      v272 = *(_QWORD *)(a2 + 8);
      if ((v272 & 1) != 0)
        v273 = (_DWORD *)(a2 + 16);
      else
        v273 = (_DWORD *)(v272 + 4);
      if (*v273 > v119)
        return JSC::JSString::getIndex((JSC::JSString *)a2, (JSC::JSGlobalObject *)a1, v119, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      v120 = (JSC::ScopedArguments *)a2;
      if (v121 >= 0x17)
      {
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(a2, v119, 0);
        if (!IndexQuickly)
        {
          if ((*(_BYTE *)(v692 + 4) & 0xF) != 9 || v119 >= *(_DWORD *)(*(_QWORD *)(v692 + 8) - 8))
            goto LABEL_192;
          v180 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x28);
          v181 = *(unsigned __int8 *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 8);
          v182 = (v181 & 0x10) != 0 ? ((v181 & 0xE) + 10) >> 1 : (v181 >> 1) & 7;
          v183 = *(_DWORD *)(v180 + 4 * v182 + 852);
          v184 = v183 ? 16 * (v183 & 0xFFFFFFFE) : 0;
          if (v184 != 16 * (*(_DWORD *)v692 & 0xFFFFFFFE)
            || ((v185 = *(_QWORD *)(v180 + 2304), (v185 & 1) != 0)
              ? (v186 = (v185 >> 1) & 3)
              : (v186 = *(unsigned __int8 *)(v185 + 4)),
                v120 = (JSC::ScopedArguments *)v692,
                v186 == 2))
          {
LABEL_192:
            if (*((_BYTE *)v120 + 5) == 34)
              JSC::ScopedArguments::isMappedArgument(v120, v119);
          }
          goto LABEL_194;
        }
        return IndexQuickly;
      }
    }
LABEL_194:
    a9.i64[0] = 0xFFFFFFFF00000000;
    v706 = 0xFFFFFFFF00000000;
    LOBYTE(v710) = 0;
    v711 = 0;
    v712 = 0;
    v713 = 0;
    v708 = 0;
    memset(v709, 0, 13);
    v707 = (unsigned __int8 *)v120;
    if (!v13)
    {
      v123 = (JSC::VM *)*((_QWORD *)v12 + 7);
      v124 = *((unsigned __int8 *)v120 + 5);
      if (v124 > 0x16)
      {
LABEL_196:
        Index = 10;
        while (1)
        {
          v125 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
          v133 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v125 + 0x4C) + 0x70))();
          if (*((_DWORD *)v123 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v123, v126, (uint64_t)v127, v128, v129, v130, v131, v132))
          {
LABEL_412:
            Index = 10;
            goto LABEL_215;
          }
          if ((v133 & 1) != 0)
          {
            if (BYTE1(v709[1]) == 1)
            {
              Index = (uint64_t)v705[0];
            }
            else if (BYTE1(v709[1]) == 2)
            {
              Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v705, v12, (uint64_t)v127, v128, v129, v130, v131, v132);
            }
            else
            {
              v328 = (uint64_t **)*((_QWORD *)v12 + 7);
              JSC::Identifier::from(v328, v119, v127, v128, v129, v130, v131, v132, (int **)&v695);
              Index = JSC::PropertySlot::customGetter((uint64_t)v705, (JSC::VM *)v328, v695);
              v336 = v695;
              v695 = 0;
              if (v336)
              {
                if (*(_DWORD *)v336 == 2)
                {
                  WTF::StringImpl::~StringImpl(v336, v329, v330, v331, v332, v333, v334, v335);
                  WTF::fastFree(v489, v490, v491, v492, v493, v494, v495, v496);
                }
                else
                {
                  *(_DWORD *)v336 -= 2;
                }
              }
            }
            goto LABEL_215;
          }
          if (BYTE2(v709[1]) == 3)
          {
            if (BYTE4(v709[1]))
              goto LABEL_412;
            v134 = *(unsigned __int8 *)(v692 + 5);
            if (v134 == 61)
              goto LABEL_202;
          }
          else
          {
            v134 = *(unsigned __int8 *)(v692 + 5);
            if (v134 == 61)
            {
              if (BYTE2(v709[1]) == 1)
                goto LABEL_412;
              goto LABEL_202;
            }
          }
          if ((v134 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, v126, (uint64_t)v127, v128, v129, v130, v131, v132) <= v119)
          {
            goto LABEL_412;
          }
LABEL_202:
          if ((*(_WORD *)(v125 + 12) & 0x800) == 0 || BYTE2(v709[1]) == 3)
          {
            v135 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
            if (!v135)
              v135 = *(_QWORD *)(v692 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v135 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v692 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v692, v12);
            }
            else
            {
              v135 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
              if (!v135)
                v135 = *(_QWORD *)(v692 + 16);
            }
            if (*((_DWORD *)v123 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v123, v126, (uint64_t)v127, v128, v129, v130, v131, v132))
            {
              goto LABEL_412;
            }
          }
          if ((v135 & 0xFFFE000000000002) == 0)
          {
            v692 = v135;
            if (*(unsigned __int8 *)(v135 + 5) > 0x16u)
              continue;
          }
          goto LABEL_215;
        }
      }
      if (v124 == 2)
      {
        v570 = *(_QWORD *)(v692 + 8);
        if ((v570 & 1) != 0)
          v571 = (_DWORD *)(v692 + 16);
        else
          v571 = (_DWORD *)(v570 + 4);
        if (*v571 <= v119
          || (Index = JSC::JSString::getIndex((JSC::JSString *)v692, v12, v119, a4, a5, a6, a7, a8, a9),
              *((_DWORD *)v123 + 20))
          && JSC::VM::hasExceptionsAfterHandlingTraps(v123, a2, a3, a4, a5, a6, a7, a8))
        {
          v572 = 0;
        }
        else
        {
          v705[0] = (WTF::StringImpl *)Index;
          LODWORD(v706) = 10;
          v708 = 0;
          v572 = 1;
          BYTE1(v709[1]) = 1;
        }
        if (*((_DWORD *)v123 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v123, a2, a3, a4, a5, a6, a7, a8);
          if (hasExceptionsAfterHandlingTraps)
            Index = 0;
          if (((hasExceptionsAfterHandlingTraps | v572) & 1) != 0)
            goto LABEL_215;
        }
        else if ((v572 & 1) != 0)
        {
          goto LABEL_215;
        }
      }
    }
    v692 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v694, (unint64_t)v12);
    if (v692)
    {
      v123 = (JSC::VM *)*((_QWORD *)v12 + 7);
      goto LABEL_196;
    }
    Index = 0;
LABEL_215:
    if (v711)
    {
      v150 = *(_DWORD *)(v710 + 4);
      if (!v150)
      {
        __break(0xC471u);
        JUMPOUT(0x1987A74C4);
      }
      *(_DWORD *)(v710 + 4) = v150 - 1;
    }
    return Index;
  }
  if (*(_BYTE *)(a3 + 5) == 2)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v14)
    {
      if ((v14 & 1) == 0)
      {
        v15 = *(_DWORD *)(v14 + 16);
        if ((v15 & 0x10) != 0)
        {
          *(_DWORD *)v14 += 2;
          if (*((_DWORD *)v691 + 20))
          {
            v282 = *((_DWORD *)v691 + 20);
            if ((v282 & 0x27) != 0 && (v282 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v691 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*((_QWORD *)v691 + 2))
              goto LABEL_394;
            v15 = *(_DWORD *)(v14 + 16);
          }
          v16 = *(_BYTE **)(v14 + 8);
          v17 = *(unsigned int *)(v14 + 4);
          if ((v15 & 4) != 0)
          {
            if ((_DWORD)v17)
            {
              v18 = *v16 - 48;
              if (v18 <= 9 && (v17 < 2 || *v16 != 48))
              {
                v344 = v17 - 1;
                v345 = v16 + 1;
                while (v344)
                {
                  if (v18 <= 0x19999999)
                  {
                    v346 = *v345 - 48;
                    if (v346 <= 9)
                    {
                      v76 = __CFADD__(v346, 10 * v18);
                      v18 = v346 + 10 * v18;
                      --v344;
                      ++v345;
                      if (!v76)
                        continue;
                    }
                  }
                  goto LABEL_12;
                }
LABEL_531:
                if (v18 != -1)
                  goto LABEL_532;
              }
            }
          }
          else if ((_DWORD)v17)
          {
            v18 = *(unsigned __int16 *)v16 - 48;
            if (v18 <= 9 && (*(_WORD *)v16 != 48 || v17 <= 1))
            {
              v73 = (unsigned __int16 *)(v16 + 2);
              v74 = v17 - 1;
              while (v74)
              {
                if (v18 <= 0x19999999)
                {
                  v75 = *v73 - 48;
                  if (v75 <= 9)
                  {
                    v76 = __CFADD__(v75, 10 * v18);
                    v18 = v75 + 10 * v18;
                    ++v73;
                    --v74;
                    if (!v76)
                      continue;
                  }
                }
                goto LABEL_12;
              }
              goto LABEL_531;
            }
          }
LABEL_12:
          v19 = (_QWORD *)*((_QWORD *)v691 + 5244);
          if (v19[221] == v14 || v19[246] == v14 || v19[270] == v14 || v19[2] == v14)
          {
LABEL_532:
            v694 = v692;
            v347 = (JSC::VM *)*((_QWORD *)v12 + 7);
            if (((v11 | v692) & 0xFFFE000000000002) == 0)
            {
              if (*(_BYTE *)(v11 + 5) != 2)
                goto LABEL_549;
              v348 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
              if (((*(_DWORD *)(v348 + 0x10) | *(unsigned __int8 *)(v348 + 0xA)) & 8) != 0)
                goto LABEL_549;
              v349 = *(_QWORD *)(v11 + 8);
              if ((v349 & 1) != 0)
              {
                JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v11, v12);
              }
              else
              {
                if ((*(_BYTE *)(v349 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v349 += 2;
                  goto LABEL_538;
                }
                WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v11 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v705);
              }
              v349 = (unint64_t)v705[0];
LABEL_538:
              if (*((_DWORD *)v347 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v347, a2, a3, a4, a5, a6, a7, a8))
                goto LABEL_732;
              if (v349)
              {
                if ((v349 >> 4))
                {
                  if (((v349 >> 4) & ~*(_DWORD *)(v348 + 32)) == 0)
                  {
                    JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v348, v347, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                    if (v350)
                    {
                      v705[0] = (WTF::StringImpl *)v349;
                      v351 = JSC::PropertyTable::get(v350, (uint64_t *)v705);
                      if ((_DWORD)v351 != -1)
                      {
                        if ((int)v351 <= 63)
                        {
                          v352 = v692 + 16;
                          v353 = v351 << 32;
                        }
                        else
                        {
                          v352 = *(_QWORD *)(v692 + 8) - 8;
                          v353 = 0x3F00000000 - (v351 << 32);
                        }
                        Index = *(_QWORD *)(v352 + (v353 >> 29));
                        if (Index)
                          goto LABEL_605;
                      }
                    }
                  }
                }
                if (*(_DWORD *)v349 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v349, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v414, v415, v416, v417, v418, v419, v420, v421);
                }
                else
                {
                  *(_DWORD *)v349 -= 2;
                }
              }
LABEL_549:
              if ((v692 & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v508 = (JSC::VM *)*((_QWORD *)v12 + 7);
                NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v12, v692);
                JSC::VM::throwException(v508, v12, NotAnObjectError, v510, v511, v512, v513, v514);
              }
              if (!*((_DWORD *)v347 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v347, a2, a3, a4, a5, a6, a7, a8))
              {
                v354 = *((_QWORD *)v12 + 7);
                if (*(_BYTE *)(v11 + 5) == 2)
                {
                  v349 = *(_QWORD *)(v11 + 8);
                  if ((v349 & 1) != 0)
                  {
                    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, v12);
                    if (*(_DWORD *)(v354 + 80)
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v354, a2, a3, a4, a5, a6, a7, a8))
                    {
                      v349 = 0;
                      v422 = v705[0];
                      v705[0] = 0;
                      if (!v422)
                        goto LABEL_556;
                    }
                    else
                    {
                      v349 = (unint64_t)v705[0];
                      if (!v705[0])
                        goto LABEL_556;
                      *(_DWORD *)v705[0] += 2;
                      v705[0] = 0;
                      v422 = (WTF::StringImpl *)v349;
                    }
                    if (*(_DWORD *)v422 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v422, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
                    }
                    else
                    {
                      *(_DWORD *)v422 -= 2;
                    }
                  }
                  else
                  {
                    if ((*(_BYTE *)(v349 + 16) & 0x10) == 0)
                    {
                      if (*(_QWORD *)(v354 + 64768) != v349)
                      {
                        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v354 + 64768), *(WTF::AtomStringImpl **)(v11 + 8), a3, a4, a5, a6, a7, a8);
                        v441 = *(WTF::StringImpl **)(v11 + 8);
                        if (v441)
                        {
                          if ((*((_BYTE *)v441 + 16) & 0x10) != 0)
                          {
                            *(_DWORD *)v441 += 2;
                          }
                          else
                          {
                            WTF::AtomStringImpl::addSlowCase((unint64_t)v441, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v705);
                            v441 = v705[0];
                          }
                        }
                        v442 = *(WTF::StringImpl **)(v354 + 64776);
                        *(_QWORD *)(v354 + 64776) = v441;
                        if (v442)
                        {
                          if (*(_DWORD *)v442 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v442, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v477, v478, v479, v480, v481, v482, v483, v484);
                          }
                          else
                          {
                            *(_DWORD *)v442 -= 2;
                          }
                        }
                      }
                      if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
                      {
                        v443 = *(WTF::StringImpl **)(v354 + 64776);
                        *(_DWORD *)v443 += 2;
                        v705[0] = v443;
                        __dmb(0xAu);
                        v444 = *(WTF::StringImpl **)(v11 + 8);
                        *(WTF::StringImpl **)(v11 + 8) = v705[0];
                        v705[0] = v444;
                        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v354 + 192, (unint64_t)v705);
                        v445 = v705[0];
                        v705[0] = 0;
                        if (v445)
                        {
                          if (*(_DWORD *)v445 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v445, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v454, v455, v456, v457, v458, v459, v460, v461);
                          }
                          else
                          {
                            *(_DWORD *)v445 -= 2;
                          }
                        }
                      }
                      v349 = *(_QWORD *)(v354 + 64776);
                    }
                    *(_DWORD *)v349 += 2;
                  }
LABEL_556:
                  if (*((_DWORD *)v347 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v347, a2, a3, a4, a5, a6, a7, a8))
                  {
LABEL_732:
                    Index = 0;
                    goto LABEL_604;
                  }
                  a9.i64[0] = 0xFFFFFFFF00000000;
                  v697 = 0xFFFFFFFF00000000;
                  LOBYTE(v701) = 0;
                  v702 = 0;
                  v703 = 0;
                  v704 = 0;
                  v699 = 0;
                  memset(v700, 0, 13);
                  v698 = (_DWORD *)v692;
                  v355 = *((_QWORD *)v12 + 7);
                  v356 = *(unsigned __int8 *)(v692 + 5);
                  if (v356 > 0x16)
                    goto LABEL_558;
                  v365 = v14;
                  if (v356 != 2)
                  {
LABEL_1156:
                    v692 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v694, (unint64_t)v12);
                    if (!v692)
                      goto LABEL_616;
                    v355 = *((_QWORD *)v12 + 7);
LABEL_558:
                    v357 = v692;
                    v358 = v692 + 6;
                    v359 = v349 >> 4;
                    if ((*(_BYTE *)(v692 + 6) & 8) == 0)
                    {
                      v360 = v692;
                      while (1)
                      {
                        v361 = *(_DWORD *)v360 & 0xFFFFFFFE;
                        v362 = 16 * v361;
                        if ((_DWORD)v359)
                        {
                          if ((v359 & ~*(_DWORD *)(16 * v361 + 0x20)) == 0)
                          {
                            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v362, (JSC::VM *)v355, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                            if (v363)
                            {
                              v705[0] = (WTF::StringImpl *)v349;
                              v364 = JSC::PropertyTable::get(v363, (uint64_t *)v705);
                              a6 = v364;
                              if ((_DWORD)v364 != -1)
                              {
                                a5 = HIDWORD(v364);
                                v365 = v14;
                                if ((int)v364 <= 63)
                                {
                                  v380 = v360 + 16;
                                  v381 = v364 << 32;
                                }
                                else
                                {
                                  v380 = *(_QWORD *)(v360 + 8) - 8;
                                  v381 = 0x3F00000000 - (v364 << 32);
                                }
                                a4 = *(_QWORD *)(v380 + (v381 >> 29));
                                if ((a4 & 0xFFFE000000000002) != 0)
                                  goto LABEL_598;
                                v382 = *(unsigned __int8 *)(a4 + 5);
                                if (v382 == 5)
                                {
                                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v360, v355, (uint64_t)&v695, a4, SHIDWORD(v364), v364);
                                  goto LABEL_599;
                                }
                                if (v382 != 6)
                                {
LABEL_598:
                                  v695 = (WTF::StringImpl *)a4;
                                  v699 = (_DWORD *)v360;
                                  v697 = __PAIR64__(v364, HIDWORD(v364));
                                  LOWORD(v700[1]) = 257;
                                  goto LABEL_599;
                                }
                                v437 = *(_DWORD *)(v362 + 16) & 3;
                                v438 = *(_QWORD *)(a4 + 16);
                                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                {
                                  v440 = *(int8x16_t ***)(a4 + 24);
                                  v439 = *(_QWORD *)(a4 + 32);
                                  v695 = *(WTF::StringImpl **)(a4 + 8);
                                  v696 = v438;
                                  LODWORD(v697) = HIDWORD(v364);
                                  v699 = (_DWORD *)v360;
                                  BYTE1(v700[1]) = 3;
                                  if (v437 != 2)
                                    LOBYTE(v700[1]) = 1;
                                  BYTE3(v700[1]) = 1;
                                  v703 = v440;
                                  v704 = v439;
                                  goto LABEL_599;
                                }
                                v695 = *(WTF::StringImpl **)(a4 + 8);
                                v696 = v438;
                                LODWORD(v697) = HIDWORD(v364);
                                v699 = (_DWORD *)v360;
                                BYTE1(v700[1]) = 3;
                                if (v437 == 2)
                                  goto LABEL_599;
                                goto LABEL_747;
                              }
                            }
                          }
                        }
                        v365 = v14;
                        if ((*(_BYTE *)v358 & 0x20) != 0
                          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v360, (JSC::VM *)v355, v349, (uint64_t)&v695) & 1) != 0)
                        {
                          goto LABEL_599;
                        }
                        v357 = *(_QWORD *)(v362 + 48);
                        if (!v357)
                          v357 = *(_QWORD *)(v360 + 16);
                        if ((v357 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v357 + 5) < 0x17u)
                          break;
                        v358 = v357 + 6;
                        v360 = v357;
                        if ((*(_BYTE *)(v357 + 6) & 8) != 0)
                          goto LABEL_570;
                      }
                      if (!v349 || (v384 = *(_DWORD *)(v349 + 16), (v384 & 0x20) != 0))
                      {
LABEL_616:
                        Index = 10;
                        goto LABEL_601;
                      }
                      v385 = *(_WORD **)(v349 + 8);
                      v386 = *(unsigned int *)(v349 + 4);
                      if ((v384 & 4) == 0)
                      {
                        if ((_DWORD)v386)
                        {
                          v387 = (unsigned __int16)*v385 - 48;
                          if (v387 <= 9 && (*v385 != 48 || v386 <= 1))
                          {
                            v410 = v385 + 1;
                            v411 = v386 - 1;
                            while (v411)
                            {
                              if (v387 > 0x19999999)
                                goto LABEL_612;
                              v412 = *v410 - 48;
                              if (v412 > 9)
                                goto LABEL_612;
                              v388 = 0;
                              LOBYTE(v386) = 0;
                              v389 = 0;
                              v76 = __CFADD__(v412, 10 * v387);
                              v387 = v412 + 10 * v387;
                              ++v410;
                              --v411;
                              if (v76)
                                goto LABEL_614;
                            }
                            v389 = v387 & 0xFFFFFF00;
                            v388 = 0x100000000;
                            if (v387 == -1)
                            {
                              v388 = 0;
                              LOBYTE(v386) = 0;
                            }
                            else
                            {
                              LOBYTE(v386) = v387;
                            }
                            if (v387 == -1)
                              v389 = 0;
                            goto LABEL_614;
                          }
LABEL_612:
                          v388 = 0;
                          LOBYTE(v386) = 0;
                        }
                        else
                        {
                          v388 = 0;
                        }
                        v389 = 0;
LABEL_614:
                        v390 = v386;
LABEL_615:
                        if ((v388 & 0x100000000) == 0)
                          goto LABEL_616;
                        v423 = v389 | v390;
                        v424 = v12;
                        v425 = (JSC::VM *)*((_QWORD *)v12 + 7);
                        Index = 10;
                        while (1)
                        {
                          v426 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
                          v427 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v426 + 0x4C) + 0x70))();
                          if (*((_DWORD *)v425 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v425, a2, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_616;
                          }
                          v12 = v424;
                          if ((v427 & 1) != 0)
                            goto LABEL_599;
                          if (BYTE2(v700[1]) == 3)
                          {
                            if (BYTE4(v700[1]))
                              goto LABEL_616;
                            v428 = *(unsigned __int8 *)(v692 + 5);
                            if (v428 == 61)
                              goto LABEL_682;
                          }
                          else
                          {
                            v428 = *(unsigned __int8 *)(v692 + 5);
                            if (v428 == 61)
                            {
                              if (BYTE2(v700[1]) == 1)
                                goto LABEL_616;
                              goto LABEL_682;
                            }
                          }
                          if ((v428 - 39) <= 0xA
                            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, a2, a3, a4, a5, a6, a7, a8) <= v423)
                          {
                            goto LABEL_616;
                          }
LABEL_682:
                          if ((*(_WORD *)(v426 + 12) & 0x800) == 0 || BYTE2(v700[1]) == 3)
                          {
                            v429 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                            if (!v429)
                              v429 = *(_QWORD *)(v692 + 16);
                          }
                          else
                          {
                            if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                            {
                              v429 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0xB0))(v692, v424);
                            }
                            else
                            {
                              v429 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                              if (!v429)
                                v429 = *(_QWORD *)(v692 + 16);
                            }
                            if (*((_DWORD *)v425 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v425, a2, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_616;
                            }
                          }
                          if ((v429 & 0xFFFE000000000002) == 0)
                          {
                            v692 = v429;
                            if (*(unsigned __int8 *)(v429 + 5) > 0x16u)
                              continue;
                          }
                          goto LABEL_601;
                        }
                      }
                      if ((_DWORD)v386)
                      {
                        v596 = *(unsigned __int8 *)v385 - 48;
                        if (v596 <= 9 && (v386 < 2 || *(_BYTE *)v385 != 48))
                        {
                          v608 = v386 - 1;
                          v609 = (unsigned __int8 *)v385 + 1;
                          while (v608)
                          {
                            if (v596 > 0x19999999)
                              goto LABEL_1046;
                            v610 = *v609 - 48;
                            if (v610 > 9)
                              goto LABEL_1046;
                            v390 = 0;
                            LOBYTE(v386) = 0;
                            v388 = 0;
                            v76 = __CFADD__(v610, 10 * v596);
                            v596 = v610 + 10 * v596;
                            --v608;
                            ++v609;
                            if (v76)
                              goto LABEL_1048;
                          }
                          if (v596 == -1)
                            v390 = 0;
                          else
                            v390 = v596 & 0xFFFFFF00;
                          if (v596 == -1)
                            LOBYTE(v386) = 0;
                          else
                            LOBYTE(v386) = v596;
                          if (v596 == -1)
                            v388 = 0;
                          else
                            v388 = 0x100000000;
                          goto LABEL_1048;
                        }
LABEL_1046:
                        v390 = 0;
                        LOBYTE(v386) = 0;
                      }
                      else
                      {
                        v390 = 0;
                      }
                      v388 = 0;
LABEL_1048:
                      v389 = v386;
                      goto LABEL_615;
                    }
LABEL_570:
                    v365 = v14;
                    v366 = v12;
                    if (!v349)
                      goto LABEL_579;
                    v367 = *(_DWORD *)(v349 + 16);
                    if ((v367 & 0x20) != 0)
                      goto LABEL_579;
                    v368 = *(_WORD **)(v349 + 8);
                    v369 = *(unsigned int *)(v349 + 4);
                    if ((v367 & 4) == 0)
                    {
                      if ((_DWORD)v369)
                      {
                        v370 = (unsigned __int16)*v368 - 48;
                        if (v370 <= 9 && (*v368 != 48 || v369 <= 1))
                        {
                          v467 = v368 + 1;
                          v468 = v369 - 1;
                          while (v468)
                          {
                            if (v370 > 0x19999999)
                              goto LABEL_575;
                            v469 = *v467 - 48;
                            if (v469 > 9)
                              goto LABEL_575;
                            v371 = 0;
                            LOBYTE(v369) = 0;
                            v372 = 0;
                            v76 = __CFADD__(v469, 10 * v370);
                            v370 = v469 + 10 * v370;
                            ++v467;
                            --v468;
                            if (v76)
                              goto LABEL_577;
                          }
                          v372 = v370 & 0xFFFFFF00;
                          v371 = 0x100000000;
                          if (v370 == -1)
                          {
                            v371 = 0;
                            LOBYTE(v369) = 0;
                          }
                          else
                          {
                            LOBYTE(v369) = v370;
                          }
                          if (v370 == -1)
                            v372 = 0;
                          goto LABEL_577;
                        }
LABEL_575:
                        v371 = 0;
                        LOBYTE(v369) = 0;
                      }
                      else
                      {
                        v371 = 0;
                      }
                      v372 = 0;
LABEL_577:
                      v373 = v369;
LABEL_578:
                      if ((v371 & 0x100000000) == 0)
                      {
LABEL_579:
                        v374 = (JSC::VM *)*((_QWORD *)v12 + 7);
                        Index = 10;
                        while (1)
                        {
                          v375 = 16 * (*(_DWORD *)v357 & 0xFFFFFFFE);
                          if ((*(_BYTE *)(v357 + 6) & 8) != 0)
                          {
                            v693 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v357 & 0xFFFFFFFE) + 0x4C) + 0x68))(v357, v366, v349, &v695);
                            if (*((_DWORD *)v374 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v374, a2, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_616;
                            }
                            v12 = v366;
                            if ((v693 & 1) != 0)
                              goto LABEL_599;
                            if (BYTE2(v700[1]) == 3)
                            {
                              if (BYTE4(v700[1]))
                                goto LABEL_616;
                              v498 = *(unsigned __int8 *)(v357 + 5);
                              if (v498 != 61)
                              {
LABEL_830:
                                if (!v349)
                                  goto LABEL_586;
                                if ((v498 - 50) < 0xFFFFFFF5)
                                  goto LABEL_586;
                                v499 = *(_DWORD *)(v349 + 16);
                                if ((v499 & 0x20) != 0)
                                  goto LABEL_586;
                                v500 = *(unsigned int *)(v349 + 4);
                                if (!(_DWORD)v500)
                                  goto LABEL_586;
                                v501 = *(unsigned __int8 **)(v349 + 8);
                                if ((v499 & 4) == 0)
                                {
                                  v502 = *(unsigned __int16 *)v501;
                                  if ((_DWORD)v500 == 1)
                                    goto LABEL_836;
                                  if (v502 == 45)
                                  {
                                    v502 = *((unsigned __int16 *)v501 + 1);
                                    goto LABEL_965;
                                  }
                                  if ((v502 - 48) >= 0xA && ((_DWORD)v500 != 8 || v502 != 73))
                                  {
LABEL_1025:
                                    if ((_DWORD)v500 != 3 || v502 != 78)
                                      goto LABEL_586;
                                  }
LABEL_995:
                                  v358 = v358 & 0xFFFFFF0000000000 | v500 | ((unint64_t)((v499 >> 2) & 1) << 32);
                                  JSC::jsToNumber(v501, v358);
                                  WTF::numberToString(v705, v581);
                                  if (WTF::equal(v349, (unint64_t)v705, v582))
                                    goto LABEL_616;
                                  goto LABEL_586;
                                }
                                v502 = *v501;
                                if ((_DWORD)v500 == 1)
                                {
LABEL_836:
                                  if ((v502 - 48) < 0xA)
                                    goto LABEL_616;
                                  goto LABEL_586;
                                }
                                if (v502 == 45)
                                {
                                  v502 = v501[1];
LABEL_965:
                                  if ((v502 - 48) < 0xA)
                                  {
                                    if ((_DWORD)v500 == 2)
                                      goto LABEL_616;
                                    goto LABEL_995;
                                  }
                                  if ((_DWORD)v500 != 9)
                                    goto LABEL_586;
                                }
                                else
                                {
                                  if ((v502 - 48) < 0xA)
                                    goto LABEL_995;
                                  if ((_DWORD)v500 != 8)
                                    goto LABEL_1025;
                                }
                                if (v502 != 73)
                                  goto LABEL_586;
                                goto LABEL_995;
                              }
                            }
                            else
                            {
                              v498 = *(unsigned __int8 *)(v357 + 5);
                              if (v498 != 61)
                                goto LABEL_830;
                              if (BYTE2(v700[1]) == 1)
                                goto LABEL_616;
                            }
                          }
                          else
                          {
                            if ((_DWORD)v359)
                            {
                              if ((v359 & ~*(_DWORD *)(16 * (*(_DWORD *)v357 & 0xFFFFFFFE) + 0x20)) == 0)
                              {
                                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v357 & 0xFFFFFFFE)), v374, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                                if (v376)
                                {
                                  v705[0] = (WTF::StringImpl *)v349;
                                  v377 = JSC::PropertyTable::get(v376, (uint64_t *)v705);
                                  a6 = v377;
                                  if ((_DWORD)v377 != -1)
                                  {
                                    a5 = HIDWORD(v377);
                                    if ((int)v377 <= 63)
                                    {
                                      v464 = v357 + 16;
                                      v465 = v377 << 32;
                                    }
                                    else
                                    {
                                      v464 = *(_QWORD *)(v357 + 8) - 8;
                                      v465 = 0x3F00000000 - (v377 << 32);
                                    }
                                    a4 = *(_QWORD *)(v464 + (v465 >> 29));
                                    if ((a4 & 0xFFFE000000000002) != 0)
                                    {
LABEL_729:
                                      v695 = (WTF::StringImpl *)a4;
                                      v699 = (_DWORD *)v357;
                                      v697 = __PAIR64__(v377, HIDWORD(v377));
                                      LOWORD(v700[1]) = 257;
                                      goto LABEL_730;
                                    }
                                    v466 = *(unsigned __int8 *)(a4 + 5);
                                    if (v466 == 5)
                                    {
                                      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v357, (uint64_t)v374, (uint64_t)&v695, a4, SHIDWORD(v377), v377);
                                      goto LABEL_730;
                                    }
                                    if (v466 != 6)
                                      goto LABEL_729;
                                    v485 = *(_DWORD *)(v375 + 16) & 3;
                                    v486 = *(_QWORD *)(a4 + 16);
                                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                    {
                                      v488 = *(int8x16_t ***)(a4 + 24);
                                      v487 = *(_QWORD *)(a4 + 32);
                                      v695 = *(WTF::StringImpl **)(a4 + 8);
                                      v696 = v486;
                                      LODWORD(v697) = HIDWORD(v377);
                                      v699 = (_DWORD *)v357;
                                      BYTE1(v700[1]) = 3;
                                      if (v485 != 2)
                                        LOBYTE(v700[1]) = 1;
                                      BYTE3(v700[1]) = 1;
                                      v703 = v488;
                                      v704 = v487;
LABEL_730:
                                      v12 = v366;
LABEL_599:
                                      if (BYTE1(v700[1]) == 1)
                                      {
                                        Index = (uint64_t)v695;
                                      }
                                      else
                                      {
                                        if (BYTE1(v700[1]) == 2)
                                          v413 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v695, v12, a3, a4, a5, a6, a7, a8);
                                        else
                                          v413 = JSC::PropertySlot::customGetter((uint64_t)&v695, *((JSC::VM **)v12 + 7), (WTF::StringImpl *)v349);
                                        Index = v413;
                                      }
LABEL_601:
                                      v14 = v365;
                                      if (v702)
                                      {
                                        v383 = *(_DWORD *)(v701 + 4);
                                        if (!v383)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x1987A84C0);
                                        }
                                        *(_DWORD *)(v701 + 4) = v383 - 1;
                                      }
LABEL_604:
                                      if (!v349)
                                        goto LABEL_92;
LABEL_605:
                                      if (*(_DWORD *)v349 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v349, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                                        WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v349 -= 2;
                                      }
                                      goto LABEL_92;
                                    }
                                    v695 = *(WTF::StringImpl **)(a4 + 8);
                                    v696 = v486;
                                    LODWORD(v697) = HIDWORD(v377);
                                    v699 = (_DWORD *)v357;
                                    BYTE1(v700[1]) = 3;
                                    v12 = v366;
                                    if (v485 == 2)
                                      goto LABEL_599;
LABEL_747:
                                    LOBYTE(v700[1]) = 1;
                                    goto LABEL_599;
                                  }
                                }
                              }
                            }
                            if ((*(_BYTE *)(v357 + 6) & 0x20) != 0)
                            {
                              v12 = v366;
                              if ((JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v357, v374, v349, (uint64_t)&v695) & 1) != 0)goto LABEL_599;
                            }
                          }
LABEL_586:
                          if ((*(_WORD *)(v375 + 12) & 0x800) == 0)
                          {
                            v378 = *(_DWORD *)v357;
LABEL_588:
                            v379 = *(_QWORD *)(16 * (v378 & 0xFFFFFFFE) + 0x30);
                            if (!v379)
                              v379 = *(_QWORD *)(v357 + 16);
                            goto LABEL_590;
                          }
                          v378 = *(_DWORD *)v357;
                          if (BYTE2(v700[1]) == 3)
                            goto LABEL_588;
                          v497 = 16 * (v378 & 0xFFFFFFFE);
                          if ((*(_WORD *)(v497 + 12) & 0x800) != 0)
                          {
                            v379 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(v497 + 76)
                                                                                             + 0xB0))(v357, v366);
                          }
                          else
                          {
                            v379 = *(_QWORD *)(v497 + 48);
                            if (!v379)
                              v379 = *(_QWORD *)(v357 + 16);
                          }
                          if (*((_DWORD *)v374 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v374, a2, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_616;
                          }
LABEL_590:
                          if ((v379 & 0xFFFE000000000002) == 0)
                          {
                            v357 = v379;
                            if (*(unsigned __int8 *)(v379 + 5) > 0x16u)
                              continue;
                          }
                          goto LABEL_601;
                        }
                      }
                      v470 = v372 | v373;
                      v471 = (JSC::VM *)*((_QWORD *)v12 + 7);
                      Index = 10;
                      while (1)
                      {
                        v472 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
                        v473 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v472 + 0x4C) + 0x70))();
                        v474 = v473;
                        if (*((_DWORD *)v471 + 20))
                        {
                          v573 = JSC::VM::hasExceptionsAfterHandlingTraps(v471, a2, a3, a4, a5, a6, a7, a8);
                          if (((v573 | v474) & 1) != 0)
                          {
                            v12 = v366;
                            if (!v573)
                              goto LABEL_599;
                            goto LABEL_616;
                          }
                        }
                        else
                        {
                          v12 = v366;
                          if ((v473 & 1) != 0)
                            goto LABEL_599;
                        }
                        if (BYTE2(v700[1]) == 3)
                        {
                          if (BYTE4(v700[1]))
                            goto LABEL_616;
                          v475 = *(unsigned __int8 *)(v692 + 5);
                          if (v475 == 61)
                            goto LABEL_764;
                        }
                        else
                        {
                          v475 = *(unsigned __int8 *)(v692 + 5);
                          if (v475 == 61)
                          {
                            if (BYTE2(v700[1]) == 1)
                              goto LABEL_616;
                            goto LABEL_764;
                          }
                        }
                        if ((v475 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, a2, a3, a4, a5, a6, a7, a8) <= v470)
                        {
                          goto LABEL_616;
                        }
LABEL_764:
                        if ((*(_WORD *)(v472 + 12) & 0x800) == 0 || BYTE2(v700[1]) == 3)
                        {
                          v476 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                          if (!v476)
                            v476 = *(_QWORD *)(v692 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v476 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v692, v366);
                          }
                          else
                          {
                            v476 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                            if (!v476)
                              v476 = *(_QWORD *)(v692 + 16);
                          }
                          if (*((_DWORD *)v471 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v471, a2, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_616;
                          }
                        }
                        if ((v476 & 0xFFFE000000000002) == 0)
                        {
                          v692 = v476;
                          if (*(unsigned __int8 *)(v476 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_601;
                      }
                    }
                    if ((_DWORD)v369)
                    {
                      v649 = *(unsigned __int8 *)v368 - 48;
                      if (v649 <= 9 && (v369 < 2 || *(_BYTE *)v368 != 48))
                      {
                        v663 = v369 - 1;
                        v664 = (unsigned __int8 *)v368 + 1;
                        while (v663)
                        {
                          if (v649 > 0x19999999)
                            goto LABEL_1246;
                          v665 = *v664 - 48;
                          if (v665 > 9)
                            goto LABEL_1246;
                          v373 = 0;
                          LOBYTE(v369) = 0;
                          v371 = 0;
                          v76 = __CFADD__(v665, 10 * v649);
                          v649 = v665 + 10 * v649;
                          --v663;
                          ++v664;
                          if (v76)
                            goto LABEL_1248;
                        }
                        if (v649 == -1)
                          v373 = 0;
                        else
                          v373 = v649 & 0xFFFFFF00;
                        if (v649 == -1)
                          LOBYTE(v369) = 0;
                        else
                          LOBYTE(v369) = v649;
                        if (v649 == -1)
                          v371 = 0;
                        else
                          v371 = 0x100000000;
                        goto LABEL_1248;
                      }
LABEL_1246:
                      v373 = 0;
                      LOBYTE(v369) = 0;
                    }
                    else
                    {
                      v373 = 0;
                    }
                    v371 = 0;
LABEL_1248:
                    v372 = v369;
                    goto LABEL_578;
                  }
                  if (*(_QWORD *)(*(_QWORD *)(v355 + 41952) + 1768) == v349)
                  {
                    v615 = *(_QWORD *)(v692 + 8);
                    if ((v615 & 1) != 0)
                      v616 = (unsigned int *)(v692 + 16);
                    else
                      v616 = (unsigned int *)(v615 + 4);
                    v617 = *v616;
                    if ((v617 & 0x80000000) != 0)
                      v618 = (WTF::StringImpl *)(COERCE__INT64((double)v617) + 0x2000000000000);
                    else
                      v618 = (WTF::StringImpl *)(v617 | 0xFFFE000000000000);
                    v619 = 14;
                    goto LABEL_1153;
                  }
                  if (!v349 || (v624 = *(_DWORD *)(v349 + 16), (v624 & 0x20) != 0))
                  {
LABEL_1191:
                    v620 = 0;
LABEL_1154:
                    if (*(_DWORD *)(v355 + 80)
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v355, a2, a3, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_616;
                    }
                    if ((v620 & 1) != 0)
                      goto LABEL_599;
                    goto LABEL_1156;
                  }
                  v625 = *(_BYTE **)(v349 + 8);
                  v626 = *(unsigned int *)(v349 + 4);
                  if ((v624 & 4) != 0)
                  {
                    if (!(_DWORD)v626
                      || (v683 = *v625 - 48, v683 > 9)
                      || v626 >= 2 && *v625 == 48)
                    {
LABEL_1388:
                      v630 = 0;
                      LOBYTE(v629) = 0;
                      v628 = 0;
                    }
                    else
                    {
                      v684 = v626 - 1;
                      v685 = v625 + 1;
                      while (v684)
                      {
                        if (v683 <= 0x19999999)
                        {
                          v686 = *v685 - 48;
                          if (v686 <= 9)
                          {
                            v76 = __CFADD__(v686, 10 * v683);
                            v683 = v686 + 10 * v683;
                            --v684;
                            ++v685;
                            if (!v76)
                              continue;
                          }
                        }
                        goto LABEL_1388;
                      }
                      v630 = v683 & 0xFFFFFF00;
                      if (v683 == -1)
                      {
                        v630 = 0;
                        LOBYTE(v629) = 0;
                      }
                      else
                      {
                        LOBYTE(v629) = v683;
                      }
                      if (v683 == -1)
                        v628 = 0;
                      else
                        v628 = 0x100000000;
                    }
                    v629 = v629;
LABEL_1190:
                    if ((v628 & 0x100000000) != 0)
                    {
                      a3 = v629 | v630;
                      v677 = *(_QWORD *)(v692 + 8);
                      v678 = (_DWORD *)((v677 & 1) != 0 ? v692 + 16 : v677 + 4);
                      if (*v678 > a3)
                      {
                        v618 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v692, v12, a3, a4, a5, a6, a7, a8, a9);
                        if (!*(_DWORD *)(v355 + 80)
                          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v355, a2, a3, a4, a5, a6, a7, a8))
                        {
                          v619 = 10;
LABEL_1153:
                          v695 = v618;
                          LODWORD(v697) = v619;
                          v699 = 0;
                          v620 = 1;
                          BYTE1(v700[1]) = 1;
                          goto LABEL_1154;
                        }
                      }
                    }
                    goto LABEL_1191;
                  }
                  if ((_DWORD)v626)
                  {
                    v627 = *(unsigned __int16 *)v625 - 48;
                    if (v627 <= 9 && (*(_WORD *)v625 != 48 || v626 <= 1))
                    {
                      v644 = (unsigned __int16 *)(v625 + 2);
                      v645 = v626 - 1;
                      while (v645)
                      {
                        if (v627 > 0x19999999)
                          goto LABEL_1187;
                        v646 = *v644 - 48;
                        if (v646 > 9)
                          goto LABEL_1187;
                        v628 = 0;
                        LOBYTE(v626) = 0;
                        v629 = 0;
                        v76 = __CFADD__(v646, 10 * v627);
                        v627 = v646 + 10 * v627;
                        ++v644;
                        --v645;
                        if (v76)
                          goto LABEL_1189;
                      }
                      v629 = v627 & 0xFFFFFF00;
                      v628 = 0x100000000;
                      if (v627 == -1)
                      {
                        v628 = 0;
                        LOBYTE(v626) = 0;
                      }
                      else
                      {
                        LOBYTE(v626) = v627;
                      }
                      if (v627 == -1)
                        v629 = 0;
                      goto LABEL_1189;
                    }
LABEL_1187:
                    v628 = 0;
                    LOBYTE(v626) = 0;
                  }
                  else
                  {
                    v628 = 0;
                  }
                  v629 = 0;
LABEL_1189:
                  v630 = v626;
                  goto LABEL_1190;
                }
                v611 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
                v695 = (WTF::StringImpl *)v611;
                if (*(_DWORD *)(v354 + 80))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v354, a2, a3, a4, a5, a6, a7, a8))
                  {
                    v349 = *(_QWORD *)(*(_QWORD *)(v354 + 41952) + 8);
                    if (!v349)
                      goto LABEL_556;
                    goto LABEL_1142;
                  }
                  v611 = (uint64_t)v695;
                }
                if ((v611 & 0xFFFE000000000002) == 0)
                {
                  v612 = *(unsigned __int8 *)(v611 + 5);
                  if (v612 == 2)
                    goto LABEL_1139;
                  if (v612 == 4)
                  {
                    v349 = *(_QWORD *)(v611 + 8);
                    v631 = *(_DWORD *)v349;
                    *(_DWORD *)v349 += 4;
                    v614 = v631 + 2;
                    if (v614)
                      goto LABEL_1143;
                    v632 = (WTF::StringImpl *)v349;
                    goto LABEL_1196;
                  }
                }
                v611 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v695, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_1139:
                if (*(_DWORD *)(v354 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v354, a2, a3, a4, a5, a6, a7, a8))
                {
                  v349 = 0;
                  goto LABEL_556;
                }
                v349 = *(_QWORD *)(v611 + 8);
                v613 = *((_QWORD *)v12 + 7);
                if ((v349 & 1) == 0)
                {
                  if ((*(_BYTE *)(v349 + 16) & 0x10) == 0)
                  {
                    if (*(_QWORD *)(v613 + 64768) != v349)
                    {
                      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v613 + 64768), *(WTF::AtomStringImpl **)(v611 + 8), a3, a4, a5, a6, a7, a8);
                      v650 = *(WTF::StringImpl **)(v611 + 8);
                      if (v650)
                      {
                        if ((*((_BYTE *)v650 + 16) & 0x10) != 0)
                        {
                          *(_DWORD *)v650 += 2;
                        }
                        else
                        {
                          WTF::AtomStringImpl::addSlowCase((unint64_t)v650, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v705);
                          v650 = v705[0];
                        }
                      }
                      v651 = *(WTF::StringImpl **)(v613 + 64776);
                      *(_QWORD *)(v613 + 64776) = v650;
                      if (v651)
                      {
                        if (*(_DWORD *)v651 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v651, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v669, v670, v671, v672, v673, v674, v675, v676);
                        }
                        else
                        {
                          *(_DWORD *)v651 -= 2;
                        }
                      }
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v611 + 8) + 16) & 0x10) == 0)
                    {
                      v652 = *(WTF::StringImpl **)(v613 + 64776);
                      *(_DWORD *)v652 += 2;
                      v705[0] = v652;
                      __dmb(0xAu);
                      v653 = *(WTF::StringImpl **)(v611 + 8);
                      *(WTF::StringImpl **)(v611 + 8) = v705[0];
                      v705[0] = v653;
                      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v613 + 192, (unint64_t)v705);
                      v654 = v705[0];
                      v705[0] = 0;
                      if (v654)
                      {
                        if (*(_DWORD *)v654 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v654, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v655, v656, v657, v658, v659, v660, v661, v662);
                        }
                        else
                        {
                          *(_DWORD *)v654 -= 2;
                        }
                      }
                    }
                    v349 = *(_QWORD *)(v613 + 64776);
                  }
LABEL_1142:
                  v614 = *(_DWORD *)v349 + 2;
LABEL_1143:
                  *(_DWORD *)v349 = v614;
                  goto LABEL_556;
                }
                JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v611, v12);
                if (*(_DWORD *)(v613 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v613, a2, a3, a4, a5, a6, a7, a8))
                {
                  v349 = 0;
                  v632 = v705[0];
                  v705[0] = 0;
                  if (!v632)
                    goto LABEL_556;
                }
                else
                {
                  v349 = (unint64_t)v705[0];
                  if (!v705[0])
                    goto LABEL_556;
                  *(_DWORD *)v705[0] += 2;
                  v705[0] = 0;
                  v632 = (WTF::StringImpl *)v349;
                }
                if (*(_DWORD *)v632 != 2)
                {
                  *(_DWORD *)v632 -= 2;
                  goto LABEL_556;
                }
LABEL_1196:
                WTF::StringImpl::~StringImpl(v632, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v633, v634, v635, v636, v637, v638, v639, v640);
                goto LABEL_556;
              }
LABEL_394:
              Index = 0;
              goto LABEL_92;
            }
            if (v11 < 0xFFFE000000000000 || (v11 & 0x80000000) != 0)
            {
              if (!(v11 >> 49))
                goto LABEL_549;
              *(double *)a9.i64 = (double)(int)v11;
              if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
                a9.i64[0] = v11 - 0x2000000000000;
              v399 = *(double *)a9.i64;
              if ((_DWORD)v399 == -1 || *(double *)a9.i64 != (double)v399)
                goto LABEL_549;
            }
            else
            {
              v399 = v11;
            }
            v400 = *(unsigned __int8 *)(v692 + 5);
            if (v400 == 2)
            {
              v401 = (unsigned __int8 *)v692;
              v462 = *(_QWORD *)(v692 + 8);
              if ((v462 & 1) != 0)
                v463 = (_DWORD *)(v692 + 16);
              else
                v463 = (_DWORD *)(v462 + 4);
              if (*v463 > v399)
              {
                v402 = JSC::JSString::getIndex((JSC::JSString *)v692, v12, v399, a4, a5, a6, a7, a8, a9);
                goto LABEL_722;
              }
            }
            else
            {
              v401 = (unsigned __int8 *)v692;
              if (v400 >= 0x17)
              {
                v402 = JSC::JSObject::tryGetIndexQuickly(v692, v399, 0);
                if (!v402)
                {
                  if ((*(_BYTE *)(v692 + 4) & 0xF) != 9
                    || v399 >= *(_DWORD *)(*(_QWORD *)(v692 + 8) - 8))
                  {
                    goto LABEL_626;
                  }
                  v430 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x28);
                  v431 = *(unsigned __int8 *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 8);
                  v432 = (v431 & 0x10) != 0 ? ((v431 & 0xE) + 10) >> 1 : (v431 >> 1) & 7;
                  v433 = *(_DWORD *)(v430 + 4 * v432 + 852);
                  v434 = v433 ? 16 * (v433 & 0xFFFFFFFE) : 0;
                  if (v434 != 16 * (*(_DWORD *)v692 & 0xFFFFFFFE)
                    || ((v435 = *(_QWORD *)(v430 + 2304), (v435 & 1) != 0)
                      ? (v436 = (v435 >> 1) & 3)
                      : (v436 = *(unsigned __int8 *)(v435 + 4)),
                        v401 = (unsigned __int8 *)v692,
                        v436 == 2))
                  {
LABEL_626:
                    JSC::CommonSlowPaths::canAccessArgumentIndexQuickly((JSC::CommonSlowPaths *)v401, (JSC::JSObject *)v399);
                  }
                  goto LABEL_627;
                }
LABEL_722:
                Index = v402;
                goto LABEL_92;
              }
            }
LABEL_627:
            a9.i64[0] = 0xFFFFFFFF00000000;
            v706 = 0xFFFFFFFF00000000;
            LOBYTE(v710) = 0;
            v711 = 0;
            v712 = 0;
            v713 = 0;
            v708 = 0;
            memset(v709, 0, 13);
            v707 = v401;
            v403 = v12;
            v404 = (JSC::VM *)*((_QWORD *)v12 + 7);
            v405 = v401[5];
            if (v405 <= 0x16)
            {
              if (v405 == 2)
              {
                v641 = *(_QWORD *)(v692 + 8);
                if ((v641 & 1) != 0)
                  v642 = (_DWORD *)(v692 + 16);
                else
                  v642 = (_DWORD *)(v641 + 4);
                if (*v642 <= v399
                  || (Index = JSC::JSString::getIndex((JSC::JSString *)v692, v12, v399, a4, a5, a6, a7, a8, a9),
                      *((_DWORD *)v404 + 20))
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v404, a2, a3, a4, a5, a6, a7, a8))
                {
                  v643 = 0;
                }
                else
                {
                  v705[0] = (WTF::StringImpl *)Index;
                  LODWORD(v706) = 10;
                  v708 = 0;
                  v643 = 1;
                  BYTE1(v709[1]) = 1;
                }
                if (*((_DWORD *)v404 + 20))
                {
                  v668 = JSC::VM::hasExceptionsAfterHandlingTraps(v404, a2, a3, a4, a5, a6, a7, a8);
                  if (v668)
                    Index = 0;
                  if (((v668 | v643) & 1) != 0)
                  {
LABEL_657:
                    if (v711)
                    {
                      v69 = v710;
                      v70 = *(_DWORD *)(v710 + 4);
                      if (!v70)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987A8054);
                      }
LABEL_91:
                      *(_DWORD *)(v69 + 4) = v70 - 1;
                    }
LABEL_92:
                    if (*(_DWORD *)v14 == 2)
                    {
                      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
                    }
                    else
                    {
                      *(_DWORD *)v14 -= 2;
                    }
                    return Index;
                  }
                }
                else if ((v643 & 1) != 0)
                {
                  goto LABEL_657;
                }
              }
              v692 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v694, (unint64_t)v12);
              if (!v692)
              {
                Index = 0;
                goto LABEL_657;
              }
              v404 = (JSC::VM *)*((_QWORD *)v12 + 7);
            }
            Index = 10;
            while (1)
            {
              v406 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
              v407 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v406 + 0x4C) + 0x70))();
              if (*((_DWORD *)v404 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v404, a2, a3, a4, a5, a6, a7, a8))
              {
LABEL_773:
                Index = 10;
                goto LABEL_657;
              }
              if ((v407 & 1) != 0)
              {
                if (BYTE1(v709[1]) == 1)
                {
                  Index = (uint64_t)v705[0];
                }
                else if (BYTE1(v709[1]) == 2)
                {
                  Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v705, v12, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v591 = (JSC::VM *)*((_QWORD *)v12 + 7);
                  JSC::Identifier::from(*((uint64_t ***)v403 + 7), v399, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v695);
                  Index = JSC::PropertySlot::customGetter((uint64_t)v705, v591, v695);
                  v592 = v695;
                  v695 = 0;
                  if (v592)
                  {
                    if (*(_DWORD *)v592 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v592, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v597, v598, v599, v600, v601, v602, v603, v604);
                    }
                    else
                    {
                      *(_DWORD *)v592 -= 2;
                    }
                  }
                }
                goto LABEL_657;
              }
              if (BYTE2(v709[1]) == 3)
              {
                if (BYTE4(v709[1]))
                  goto LABEL_773;
                v408 = *(unsigned __int8 *)(v692 + 5);
                if (v408 == 61)
                  goto LABEL_634;
              }
              else
              {
                v408 = *(unsigned __int8 *)(v692 + 5);
                if (v408 == 61)
                {
                  if (BYTE2(v709[1]) == 1)
                    goto LABEL_773;
                  goto LABEL_634;
                }
              }
              if ((v408 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, a2, a3, a4, a5, a6, a7, a8) <= v399)
              {
                goto LABEL_773;
              }
LABEL_634:
              if ((*(_WORD *)(v406 + 12) & 0x800) == 0 || BYTE2(v709[1]) == 3)
              {
                v409 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                if (!v409)
                  v409 = *(_QWORD *)(v692 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v409 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v692, v12);
                }
                else
                {
                  v409 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                  if (!v409)
                    v409 = *(_QWORD *)(v692 + 16);
                }
                if (*((_DWORD *)v404 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v404, a2, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_773;
                }
              }
              if ((v409 & 0xFFFE000000000002) == 0)
              {
                v692 = v409;
                if (*(unsigned __int8 *)(v409 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_657;
            }
          }
          v690 = (JSC::VM **)v12;
          v20 = v692;
          v21 = (uint64_t *)((char *)v691 + 93080);
          v697 = 0xFFFFFFFF00000000;
          LOBYTE(v701) = 0;
          v702 = 0;
          v703 = 0;
          v704 = 0;
          v22 = v14 >> 4;
          v699 = 0;
          memset(v700, 0, 13);
          v698 = (_DWORD *)v692;
          v23 = 1;
          while (1)
          {
            v24 = *(_BYTE *)(v20 + 6);
            if ((v24 & 8) != 0)
            {
              v216 = *(unsigned __int8 *)(v20 + 5);
              if (v216 != 26 && v216 != 36 && v20 != *((_QWORD *)v12 + 84))
              {
                v217 = v14;
                v218 = v690[7];
                while (1)
                {
                  v219 = *(_DWORD *)v20 & 0xFFFFFFFE;
                  v220 = 16 * v219;
                  if ((v24 & 8) != 0)
                  {
                    v574 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v219 + 0x4C) + 0x68))(v20, v690, v217, &v695);
                    v575 = v574;
                    if (*((_DWORD *)v218 + 20))
                    {
                      v648 = JSC::VM::hasExceptionsAfterHandlingTraps(v218, a2, a3, a4, a5, a6, a7, a8);
                      if (((v648 | v575) & 1) != 0)
                      {
                        v340 = !v648;
                        goto LABEL_498;
                      }
                    }
                    else if ((v574 & 1) != 0)
                    {
                      goto LABEL_789;
                    }
                    if (BYTE2(v700[1]) == 3)
                    {
                      if (BYTE4(v700[1]))
                        goto LABEL_1354;
                      v576 = *(unsigned __int8 *)(v20 + 5);
                      if (v576 != 61)
                      {
LABEL_987:
                        if ((v576 - 50) < 0xFFFFFFF5)
                          goto LABEL_324;
                        v577 = *(_DWORD *)(v217 + 16);
                        if ((v577 & 0x20) != 0)
                          goto LABEL_324;
                        v578 = *(unsigned int *)(v217 + 4);
                        if (!(_DWORD)v578)
                          goto LABEL_324;
                        v579 = *(unsigned __int8 **)(v217 + 8);
                        if ((v577 & 4) == 0)
                        {
                          v580 = *(unsigned __int16 *)v579;
                          if ((_DWORD)v578 == 1)
                            goto LABEL_992;
                          if (v580 == 45)
                          {
                            v580 = *((unsigned __int16 *)v579 + 1);
                            goto LABEL_1065;
                          }
                          if ((v580 - 48) >= 0xA && ((_DWORD)v578 != 8 || v580 != 73))
                          {
LABEL_1099:
                            if ((_DWORD)v578 != 3 || v580 != 78)
                              goto LABEL_324;
                          }
LABEL_1078:
                          v14 = v14 & 0xFFFFFF0000000000 | v578 | ((unint64_t)((v577 >> 2) & 1) << 32);
                          JSC::jsToNumber(v579, v14);
                          WTF::numberToString(v705, v606);
                          if (WTF::equal(v217, (unint64_t)v705, v607))
                            goto LABEL_1354;
                          goto LABEL_324;
                        }
                        v580 = *v579;
                        if ((_DWORD)v578 == 1)
                        {
LABEL_992:
                          if ((v580 - 48) < 0xA)
                            goto LABEL_1354;
                          goto LABEL_324;
                        }
                        if (v580 == 45)
                        {
                          v580 = v579[1];
LABEL_1065:
                          if ((v580 - 48) < 0xA)
                          {
                            if ((_DWORD)v578 == 2)
                              goto LABEL_1354;
                            goto LABEL_1078;
                          }
                          if ((_DWORD)v578 != 9)
                            goto LABEL_324;
                        }
                        else
                        {
                          if ((v580 - 48) < 0xA)
                            goto LABEL_1078;
                          if ((_DWORD)v578 != 8)
                            goto LABEL_1099;
                        }
                        if (v580 != 73)
                          goto LABEL_324;
                        goto LABEL_1078;
                      }
                    }
                    else
                    {
                      v576 = *(unsigned __int8 *)(v20 + 5);
                      if (v576 != 61)
                        goto LABEL_987;
                      if (BYTE2(v700[1]) == 1)
                        goto LABEL_1354;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v22)
                    {
                      if ((v22 & ~*(_DWORD *)(16 * v219 + 0x20)) == 0)
                      {
                        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v219), v218, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                        if (v221)
                        {
                          v705[0] = (WTF::StringImpl *)v217;
                          v222 = JSC::PropertyTable::get(v221, (uint64_t *)v705);
                          a6 = v222;
                          if ((_DWORD)v222 != -1)
                          {
                            a5 = HIDWORD(v222);
                            if ((int)v222 <= 63)
                            {
                              v337 = v20 + 16;
                              v338 = v222 << 32;
                            }
                            else
                            {
                              v337 = *(_QWORD *)(v20 + 8) - 8;
                              v338 = 0x3F00000000 - (v222 << 32);
                            }
                            a4 = *(_QWORD *)(v337 + (v338 >> 29));
                            if ((a4 & 0xFFFE000000000002) != 0)
                              goto LABEL_497;
                            v339 = *(unsigned __int8 *)(a4 + 5);
                            if (v339 == 5)
                            {
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v218, (uint64_t)&v695, a4, SHIDWORD(v222), v222);
LABEL_789:
                              v340 = 1;
                            }
                            else
                            {
                              if (v339 != 6)
                              {
LABEL_497:
                                v695 = (WTF::StringImpl *)a4;
                                v699 = (_DWORD *)v20;
                                v697 = __PAIR64__(v222, HIDWORD(v222));
                                v340 = 1;
                                LOWORD(v700[1]) = 257;
                                goto LABEL_498;
                              }
                              v503 = *(_DWORD *)(v220 + 16) & 3;
                              v504 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v506 = *(int8x16_t ***)(a4 + 24);
                                v505 = *(_QWORD *)(a4 + 32);
                                v695 = *(WTF::StringImpl **)(a4 + 8);
                                v696 = v504;
                                LODWORD(v697) = HIDWORD(v222);
                                v699 = (_DWORD *)v20;
                                BYTE1(v700[1]) = 3;
                                v340 = 1;
                                if (v503 != 2)
                                  LOBYTE(v700[1]) = 1;
                                BYTE3(v700[1]) = 1;
                                v703 = v506;
                                v704 = v505;
                              }
                              else
                              {
                                v695 = *(WTF::StringImpl **)(a4 + 8);
                                v696 = v504;
                                LODWORD(v697) = HIDWORD(v222);
                                v699 = (_DWORD *)v20;
                                v340 = 1;
                                BYTE1(v700[1]) = 3;
                                if (v503 != 2)
                                  LOBYTE(v700[1]) = 1;
                              }
                            }
LABEL_498:
                            if (!*((_DWORD *)v691 + 20))
                            {
                              if (v340)
                                goto LABEL_500;
                              v14 = v217;
LABEL_118:
                              Index = 10;
LABEL_89:
                              if (v702)
                              {
                                v69 = v701;
                                v70 = *(_DWORD *)(v701 + 4);
                                if (!v70)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1987A7310);
                                }
                                goto LABEL_91;
                              }
                              goto LABEL_92;
                            }
                            v590 = JSC::VM::hasExceptionsAfterHandlingTraps(v691, a2, a3, a4, a5, a6, a7, a8);
                            if (v590)
                              Index = 0;
                            else
                              Index = 10;
                            if (v590)
                            {
LABEL_502:
                              v14 = v217;
                              goto LABEL_89;
                            }
                            v14 = v217;
                            if (((v340 ^ 1) & 1) != 0)
                              goto LABEL_89;
LABEL_500:
                            if (BYTE1(v700[1]) == 1)
                            {
                              Index = (uint64_t)v695;
                              goto LABEL_502;
                            }
                            if (BYTE1(v700[1]) == 2)
                            {
                              Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v695, (JSC::JSGlobalObject *)v690, a3, a4, a5, a6, a7, a8);
                              goto LABEL_502;
                            }
                            v14 = v217;
                            v151 = JSC::PropertySlot::customGetter((uint64_t)&v695, v690[7], (WTF::StringImpl *)v217);
LABEL_224:
                            Index = v151;
                            goto LABEL_89;
                          }
                        }
                      }
                    }
                    if ((*(_BYTE *)(v20 + 6) & 0x20) != 0
                      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v218, v217, (uint64_t)&v695) & 1) != 0)
                    {
                      goto LABEL_789;
                    }
                  }
LABEL_324:
                  if ((*(_WORD *)(v220 + 12) & 0x800) == 0)
                  {
                    v223 = *(_DWORD *)v20;
LABEL_326:
                    v224 = *(_QWORD *)(16 * (v223 & 0xFFFFFFFE) + 0x30);
                    if (!v224)
                      v224 = *(_QWORD *)(v20 + 16);
                    goto LABEL_328;
                  }
                  v223 = *(_DWORD *)v20;
                  if (BYTE2(v700[1]) == 3)
                    goto LABEL_326;
                  v518 = 16 * (v223 & 0xFFFFFFFE);
                  if ((*(_WORD *)(v518 + 12) & 0x800) != 0)
                  {
                    v224 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v518 + 76) + 0xB0))(v20, v690);
                  }
                  else
                  {
                    v224 = *(_QWORD *)(v518 + 48);
                    if (!v224)
                      v224 = *(_QWORD *)(v20 + 16);
                  }
                  if (*((_DWORD *)v218 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v218, a2, a3, a4, a5, a6, a7, a8))
                  {
LABEL_1354:
                    v340 = 0;
                    goto LABEL_498;
                  }
LABEL_328:
                  if ((v224 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v224 + 5) < 0x17u)
                    goto LABEL_1354;
                  v24 = *(_BYTE *)(v224 + 6);
                  v20 = v224;
                }
              }
            }
            if (!(_DWORD)v22)
              break;
            v25 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
            if ((v22 & ~*(_DWORD *)(v25 + 0x20)) != 0)
              break;
            v26 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x58);
            if (!v26)
            {
              v43 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x40);
              if (!v43 || *(_BYTE *)(v43 + 5) != 1 && *(_DWORD *)(v43 + 80) < 2u)
                break;
              JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)), v691, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (!v26)
                break;
            }
            if (!*(_DWORD *)(v26 + 24))
              break;
            v27 = *(_QWORD *)(v26 + 16);
            v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
            v29 = *(unsigned int *)(v26 + 8);
            v30 = *(_DWORD *)(v14 + 16);
            if ((v27 & 1) != 0)
            {
              if ((v30 & 0x20) != 0)
                v30 = *(_DWORD *)(v14 + 32);
              v31 = *(_DWORD *)(v26 + 12);
              v32 = (v30 >> 8) & *(_QWORD *)&v31;
              v33 = *(unsigned __int8 *)(v28 + v32);
              if (!*(_BYTE *)(v28 + v32))
                break;
              v34 = v28 + v29;
              v35 = 1;
              while (1)
              {
                v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
                if (v14 == (v36 & 0xFFFFFFFFFFFFLL))
                  break;
                v32 = ((_DWORD)v32 + v35) & v31;
                v33 = *(unsigned __int8 *)(v28 + v32);
                ++v35;
                if (!*(_BYTE *)(v28 + v32))
                  goto LABEL_29;
              }
              a6 = (v36 >> 16) & 0xFF00000000 | HIBYTE(v36);
            }
            else
            {
              if ((v30 & 0x20) != 0)
                v30 = *(_DWORD *)(v14 + 32);
              v47 = *(_DWORD *)(v26 + 12);
              v48 = v47 & (v30 >> 8);
              v49 = *(_DWORD *)(v28 + 4 * v48);
              if (!v49)
                break;
              v50 = v28 + 4 * v29;
              v51 = 1;
              while (1)
              {
                v52 = (v49 - 1);
                if (*(_QWORD *)(v50 + 16 * v52) == v14)
                  break;
                v48 = (v48 + v51) & v47;
                v49 = *(_DWORD *)(v28 + 4 * v48);
                ++v51;
                if (!v49)
                  goto LABEL_29;
              }
              a6 = *(unsigned int *)(v50 + 16 * v52 + 8) | ((unint64_t)*(unsigned __int8 *)(v50 + 16 * v52 + 12) << 32);
            }
            if ((_DWORD)a6 == -1)
              break;
            if ((int)a6 <= 63)
            {
              v44 = v20 + 16;
              v45 = a6 << 32;
            }
            else
            {
              v44 = *(_QWORD *)(v20 + 8) - 8;
              v45 = 0x3F00000000 - (a6 << 32);
            }
            a5 = HIDWORD(a6);
            a4 = *(_QWORD *)(v44 + (v45 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_59;
            v46 = *(unsigned __int8 *)(a4 + 5);
            if (v46 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v691, (uint64_t)&v695, a4, SHIDWORD(a6), a6);
              OwnStaticPropertySlot = 1;
              goto LABEL_31;
            }
            if (v46 == 6)
            {
              v233 = *(_DWORD *)(v25 + 16) & 3;
              v234 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v236 = *(int8x16_t ***)(a4 + 24);
                v235 = *(_QWORD *)(a4 + 32);
                v695 = *(WTF::StringImpl **)(a4 + 8);
                v696 = v234;
                LODWORD(v697) = HIDWORD(a6);
                v699 = (_DWORD *)v20;
                BYTE1(v700[1]) = 3;
                OwnStaticPropertySlot = 1;
                if (v233 != 2)
                  LOBYTE(v700[1]) = 1;
                BYTE3(v700[1]) = 1;
                v703 = v236;
                v704 = v235;
              }
              else
              {
                v695 = *(WTF::StringImpl **)(a4 + 8);
                v696 = v234;
                LODWORD(v697) = HIDWORD(a6);
                v699 = (_DWORD *)v20;
                OwnStaticPropertySlot = 1;
                BYTE1(v700[1]) = 3;
                if (v233 != 2)
                  LOBYTE(v700[1]) = 1;
              }
            }
            else
            {
LABEL_59:
              v695 = (WTF::StringImpl *)a4;
              v699 = (_DWORD *)v20;
              v697 = __PAIR64__(a6, HIDWORD(a6));
              OwnStaticPropertySlot = 1;
              LOWORD(v700[1]) = 257;
            }
LABEL_31:
            if ((*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x10) & 3) == 2
              || (v38 = *(unsigned __int16 *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xC), (v38 & 8) != 0))
            {
              v39 = 0;
            }
            else if ((v38 & 0x10) != 0)
            {
              v39 = (v38 >> 5) & 1;
            }
            else
            {
              v39 = 1;
            }
            v40 = v23 & v39;
            if (OwnStaticPropertySlot)
            {
              v53 = BYTE1(v700[1]);
              if (v40 && BYTE1(v700[1]) == 1 && LOBYTE(v700[1]) == 1)
              {
                v54 = WORD2(v697);
                if (SHIDWORD(v697) >= 0x10000)
                  goto LABEL_88;
                v55 = v699;
                v56 = *(unsigned int *)v692;
                if (v699 != (_DWORD *)v692 && (*(_BYTE *)((16 * v56) | 0x10) & 3) != 0)
                  goto LABEL_88;
                if ((*v21 & 1) != 0)
                  v57 = 0;
                else
                  v57 = *v21;
                v58 = v56 ^ (v56 >> 11);
                v59 = *(_DWORD *)(v14 + 16);
                if (v59 < 0x100)
                {
                  v163 = WORD2(v697);
                  LOWORD(v60) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
                  v54 = v163;
                }
                else
                {
                  v60 = v59 >> 8;
                }
                v61 = ((_WORD)v60 + (_WORD)v58) & 0x7FF;
                v62 = v57 + 24 * (((_WORD)v60 + (_WORD)v58) & 0x7FF);
                v64 = (_QWORD *)(v62 + 12);
                v63 = *(_WORD *)(v62 + 12);
                LODWORD(v65) = *(unsigned __int16 *)(v57 + 133120);
                v66 = *(WTF::StringImpl **)v62;
                if (v63 == (_DWORD)v65)
                {
                  v144 = v57 + 24 * v61;
                  v145 = *(_DWORD *)(v144 + 8);
                  v65 = (_DWORD *)(v144 + 8);
                  v146 = ((_WORD)v145 + (_WORD)v66 + (unsigned __int16)((v145 + (_DWORD)v66) >> 9)) & 0x1FF;
                  v147 = 24
                       * (((_WORD)v145 + (_WORD)v66 + (unsigned __int16)((v145 + (_DWORD)v66) >> 9)) & 0x1FF);
                  *(_QWORD *)v62 = 0;
                  v148 = *(WTF::StringImpl **)(v57 + 49152 + v147);
                  *(_QWORD *)(v57 + 49152 + v147) = v66;
                  if (v148)
                  {
                    if (*(_DWORD *)v148 == 2)
                    {
                      v688 = v54;
                      v687 = v146;
                      WTF::StringImpl::~StringImpl(v148, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
                      v146 = v687;
                      v54 = v688;
                      v63 = *(_WORD *)(v57 + 133120);
                      v66 = *(WTF::StringImpl **)v62;
                    }
                    else
                    {
                      v66 = 0;
                      *(_DWORD *)v148 -= 2;
                    }
                  }
                  else
                  {
                    v66 = 0;
                  }
                  v149 = v57 + 49152 + 24 * v146;
                  *(_DWORD *)(v149 + 8) = *v65;
                  *(_QWORD *)(v149 + 12) = *v64;
                  *(_DWORD *)(v149 + 20) = *(_DWORD *)(v62 + 20);
                  LOWORD(v65) = v63;
                }
                *(_DWORD *)v14 += 2;
                *(_QWORD *)v62 = v14;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                  {
                    v164 = v54;
                    WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
                    v54 = v164;
                  }
                  else
                  {
                    *(_DWORD *)v66 -= 2;
                  }
                }
                v67 = v57 + 24 * v61;
                *(_DWORD *)(v67 + 8) = v56;
                *(_WORD *)v64 = (_WORD)v65;
                *(_WORD *)(v67 + 14) = v54;
                if (v55 == (_DWORD *)v692)
                  v68 = 1;
                else
                  v68 = (uint64_t)v55;
                *(_QWORD *)(v67 + 16) = v68;
                v53 = BYTE1(v700[1]);
              }
              if (v53 != 1)
              {
                if (v53 == 2)
                {
                  v151 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v695, (JSC::JSGlobalObject *)v690, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v201 = (unint64_t)v699;
                  v202 = *(_QWORD *)(16 * (*v699 & 0xFFFFFFFE) + 0x28);
                  if ((v697 & 0x20) != 0)
                    v201 = (unint64_t)v698;
                  if (BYTE3(v700[1]) != 1)
                    goto LABEL_304;
                  if ((v201 & 0xFFFE000000000002) != 0)
                    goto LABEL_504;
                  v203 = *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C);
                  v204 = *(_DWORD *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C) != 0;
                  v205 = 16 * v203;
                  if ((_DWORD)v203)
                    v206 = v703 == (int8x16_t **)v205;
                  else
                    v206 = 1;
                  if (!v206)
                  {
                    do
                    {
                      v205 = *(_QWORD *)(v205 + 16);
                      v204 = v205 != 0;
                    }
                    while ((int8x16_t **)v205 != v703 && v205 != 0);
                  }
                  if (!v204)
                  {
LABEL_504:
                    v705[0] = v690[7];
                    v151 = JSC::throwDOMAttributeGetterTypeError(v202, v705, v703, (WTF::StringImpl *)v14);
                  }
                  else
                  {
LABEL_304:
                    v151 = ((uint64_t (*)(unint64_t))v695)(v202);
                  }
                }
                goto LABEL_224;
              }
LABEL_88:
              Index = (uint64_t)v695;
              goto LABEL_89;
            }
            v41 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
            if ((*(_WORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v41 == 0)
              v23 = 0;
            else
              v23 = v40;
            if (!v41)
              v41 = *(_QWORD *)(v20 + 16);
            if ((v41 & 0xFFFE000000000002) == 0)
            {
              v20 = v41;
              if (*(unsigned __int8 *)(v41 + 5) > 0x16u)
                continue;
            }
            if (v23)
            {
              v77 = *(unsigned int *)v692;
              if ((*(_BYTE *)((16 * v77) | 0x10) & 3) == 0)
              {
                if ((*v21 & 1) != 0)
                  v78 = 0;
                else
                  v78 = *v21;
                v79 = v77 ^ (v77 >> 11);
                v80 = *(_DWORD *)(v14 + 16);
                if (v80 < 0x100)
                  LOWORD(v81) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
                else
                  v81 = v80 >> 8;
                v82 = ((_WORD)v81 + (_WORD)v79) & 0x7FF;
                v83 = v78 + 24 * (((_WORD)v81 + (_WORD)v79) & 0x7FF);
                v85 = (_QWORD *)(v83 + 12);
                v84 = *(_WORD *)(v83 + 12);
                v86 = *(unsigned __int16 *)(v78 + 133120);
                v87 = *(WTF::StringImpl **)v83;
                if (v84 == v86)
                {
                  v689 = v14;
                  v173 = v78 + 24 * v82;
                  v175 = *(_DWORD *)(v173 + 8);
                  v174 = (_DWORD *)(v173 + 8);
                  v176 = (v175 + (_DWORD)v87 + ((v175 + (_DWORD)v87) >> 9)) & 0x1FF;
                  v177 = 24 * v176;
                  *(_QWORD *)v83 = 0;
                  v178 = *(WTF::StringImpl **)(v78 + 49152 + v177);
                  *(_QWORD *)(v78 + 49152 + v177) = v87;
                  if (v178)
                  {
                    if (*(_DWORD *)v178 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v178, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
                      v84 = *(_WORD *)(v78 + 133120);
                      v87 = *(WTF::StringImpl **)v83;
                    }
                    else
                    {
                      v87 = 0;
                      *(_DWORD *)v178 -= 2;
                    }
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v179 = v78 + 49152 + 24 * v176;
                  *(_DWORD *)(v179 + 8) = *v174;
                  *(_QWORD *)(v179 + 12) = *v85;
                  *(_DWORD *)(v179 + 20) = *(_DWORD *)(v83 + 20);
                  LOWORD(v86) = v84;
                  v14 = v689;
                }
                *(_DWORD *)v14 += 2;
                *(_QWORD *)v83 = v14;
                if (v87)
                {
                  if (*(_DWORD *)v87 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
                  }
                  else
                  {
                    *(_DWORD *)v87 -= 2;
                  }
                }
                v88 = v78 + 24 * v82;
                *(_DWORD *)(v88 + 8) = v77;
                *(_WORD *)v85 = v86;
                *(_WORD *)(v88 + 14) = 0;
                *(_QWORD *)(v88 + 16) = 0;
              }
            }
            goto LABEL_118;
          }
LABEL_29:
          if ((*(_BYTE *)(v20 + 6) & 0x20) != 0)
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v691, v14, (uint64_t)&v695);
          else
            OwnStaticPropertySlot = 0;
          goto LABEL_31;
        }
      }
    }
  }
  v694 = a2;
LABEL_120:
  if (*(_BYTE *)(a3 + 5) != 2)
    goto LABEL_136;
  v89 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if (((*(_DWORD *)(v89 + 0x10) | *(unsigned __int8 *)(v89 + 0xA)) & 8) != 0)
    goto LABEL_136;
  v14 = *(_QWORD *)(a3 + 8);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
  }
  else
  {
    if ((*(_BYTE *)(v14 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v14 += 2;
      goto LABEL_125;
    }
    WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a3 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v705);
  }
  v14 = (unint64_t)v705[0];
LABEL_125:
  if (*((_DWORD *)v691 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v691, a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_406;
  if (v14)
  {
    if ((v14 >> 4))
    {
      if (((v14 >> 4) & ~*(_DWORD *)(v89 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v89, v691, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v90)
        {
          v705[0] = (WTF::StringImpl *)v14;
          v91 = JSC::PropertyTable::get(v90, (uint64_t *)v705);
          if ((_DWORD)v91 != -1)
          {
            if ((int)v91 <= 63)
            {
              v92 = v692 + 16;
              v93 = v91 << 32;
            }
            else
            {
              v92 = *(_QWORD *)(v692 + 8) - 8;
              v93 = 0x3F00000000 - (v91 << 32);
            }
            Index = *(_QWORD *)(v92 + (v93 >> 29));
            if (Index)
              goto LABEL_92;
          }
        }
      }
    }
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_136:
  if ((v692 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v321 = (JSC::VM *)*((_QWORD *)v12 + 7);
    v322 = JSC::createNotAnObjectError((unint64_t)v12, v692);
    JSC::VM::throwException(v321, v12, v322, v323, v324, v325, v326, v327);
  }
  if (*((_DWORD *)v691 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v691, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v94 = *((_QWORD *)v12 + 7);
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v11 + 5) == 2)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if ((v14 & 1) == 0)
      {
        if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
        {
          v262 = *(WTF::StringImpl **)(v94 + 64768);
          if (v262 != (WTF::StringImpl *)v14)
          {
            *(_DWORD *)v14 += 2;
            *(_QWORD *)(v94 + 64768) = v14;
            if (v262)
            {
              if (*(_DWORD *)v262 == 2)
              {
                WTF::StringImpl::~StringImpl(v262, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v305, v306, v307, v308, v309, v310, v311, v312);
              }
              else
              {
                *(_DWORD *)v262 -= 2;
              }
            }
            v263 = *(WTF::StringImpl **)(v11 + 8);
            if (v263)
            {
              if ((*((_BYTE *)v263 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v263 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v263, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v705);
                v263 = v705[0];
              }
            }
            v264 = *(WTF::StringImpl **)(v94 + 64776);
            *(_QWORD *)(v94 + 64776) = v263;
            if (v264)
            {
              if (*(_DWORD *)v264 == 2)
              {
                WTF::StringImpl::~StringImpl(v264, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v297, v298, v299, v300, v301, v302, v303, v304);
              }
              else
              {
                *(_DWORD *)v264 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
          {
            v265 = *(WTF::StringImpl **)(v94 + 64776);
            *(_DWORD *)v265 += 2;
            v705[0] = v265;
            __dmb(0xAu);
            v266 = *(WTF::StringImpl **)(v11 + 8);
            *(WTF::StringImpl **)(v11 + 8) = v705[0];
            v705[0] = v266;
            v267 = (_QWORD *)(v94 + 808);
            v268 = *(unsigned int *)(v94 + 820);
            if ((_DWORD)v268 == *(_DWORD *)(v94 + 816))
            {
              v270 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v267, v268 + 1, (unint64_t)v705);
              v268 = *(unsigned int *)(v94 + 820);
              v269 = (WTF::StringImpl **)(*(_QWORD *)(v94 + 808) + 8 * v268);
              v266 = *v270;
            }
            else
            {
              v269 = (WTF::StringImpl **)(*v267 + 8 * v268);
              v270 = v705;
            }
            *v270 = 0;
            *v269 = v266;
            *(_DWORD *)(v94 + 820) = v268 + 1;
            v271 = v705[0];
            v705[0] = 0;
            if (v271)
            {
              if (*(_DWORD *)v271 == 2)
              {
                WTF::StringImpl::~StringImpl(v271, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
              }
              else
              {
                *(_DWORD *)v271 -= 2;
              }
            }
          }
          v14 = *(_QWORD *)(v94 + 64776);
        }
        goto LABEL_143;
      }
LABEL_922:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, v12);
      if (*(_DWORD *)(v94 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v94, a2, a3, a4, a5, a6, a7, a8))
      {
        v14 = 0;
        v530 = v705[0];
        v705[0] = 0;
        if (!v530)
          goto LABEL_145;
      }
      else
      {
        v14 = (unint64_t)v705[0];
        if (!v705[0])
          goto LABEL_145;
        *(_DWORD *)v705[0] += 2;
        v705[0] = 0;
        v530 = (WTF::StringImpl *)v14;
      }
      if (*(_DWORD *)v530 != 2)
      {
        *(_DWORD *)v530 -= 2;
        goto LABEL_145;
      }
LABEL_930:
      WTF::StringImpl::~StringImpl(v530, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v532, v533, v534, v535, v536, v537, v538, v539);
      goto LABEL_145;
    }
    v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v695 = (WTF::StringImpl *)v11;
  if (!*(_DWORD *)(v94 + 80))
  {
LABEL_904:
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v519 = *(unsigned __int8 *)(v11 + 5);
      if (v519 == 2)
        goto LABEL_906;
      if (v519 == 4)
      {
        v14 = *(_QWORD *)(v11 + 8);
        v531 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v95 = v531 + 2;
        if (v95)
          goto LABEL_144;
        v530 = (WTF::StringImpl *)v14;
        goto LABEL_930;
      }
    }
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v695, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_906:
    if (*(_DWORD *)(v94 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v94, a2, a3, a4, a5, a6, a7, a8))
    {
      v14 = 0;
      goto LABEL_145;
    }
    v14 = *(_QWORD *)(v11 + 8);
    v94 = *((_QWORD *)v12 + 7);
    if ((v14 & 1) == 0)
    {
      if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
      {
        v520 = *(WTF::StringImpl **)(v94 + 64768);
        if (v520 != (WTF::StringImpl *)v14)
        {
          *(_DWORD *)v14 += 2;
          *(_QWORD *)(v94 + 64768) = v14;
          if (v520)
          {
            if (*(_DWORD *)v520 == 2)
            {
              WTF::StringImpl::~StringImpl(v520, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v556, v557, v558, v559, v560, v561, v562, v563);
            }
            else
            {
              *(_DWORD *)v520 -= 2;
            }
          }
          v521 = *(WTF::StringImpl **)(v11 + 8);
          if (v521)
          {
            if ((*((_BYTE *)v521 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v521 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v521, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v705);
              v521 = v705[0];
            }
          }
          v522 = *(WTF::StringImpl **)(v94 + 64776);
          *(_QWORD *)(v94 + 64776) = v521;
          if (v522)
          {
            if (*(_DWORD *)v522 == 2)
            {
              WTF::StringImpl::~StringImpl(v522, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v548, v549, v550, v551, v552, v553, v554, v555);
            }
            else
            {
              *(_DWORD *)v522 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v523 = *(WTF::StringImpl **)(v94 + 64776);
          *(_DWORD *)v523 += 2;
          v705[0] = v523;
          __dmb(0xAu);
          v524 = *(WTF::StringImpl **)(v11 + 8);
          *(WTF::StringImpl **)(v11 + 8) = v705[0];
          v705[0] = v524;
          v525 = (_QWORD *)(v94 + 808);
          v526 = *(unsigned int *)(v94 + 820);
          if ((_DWORD)v526 == *(_DWORD *)(v94 + 816))
          {
            v528 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, v526 + 1, (unint64_t)v705);
            v526 = *(unsigned int *)(v94 + 820);
            v527 = (WTF::StringImpl **)(*(_QWORD *)(v94 + 808) + 8 * v526);
            v524 = *v528;
          }
          else
          {
            v527 = (WTF::StringImpl **)(*v525 + 8 * v526);
            v528 = v705;
          }
          *v528 = 0;
          *v527 = v524;
          *(_DWORD *)(v94 + 820) = v526 + 1;
          v529 = v705[0];
          v705[0] = 0;
          if (v529)
          {
            if (*(_DWORD *)v529 == 2)
            {
              WTF::StringImpl::~StringImpl(v529, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v540, v541, v542, v543, v544, v545, v546, v547);
            }
            else
            {
              *(_DWORD *)v529 -= 2;
            }
          }
        }
        v14 = *(_QWORD *)(v94 + 64776);
      }
      goto LABEL_143;
    }
    goto LABEL_922;
  }
  if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v94, a2, a3, a4, a5, a6, a7, a8))
  {
    v11 = (unint64_t)v695;
    goto LABEL_904;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v94 + 41952) + 8);
  if (v14)
  {
LABEL_143:
    v95 = *(_DWORD *)v14 + 2;
LABEL_144:
    *(_DWORD *)v14 = v95;
  }
LABEL_145:
  if (*((_DWORD *)v691 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v691, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_406:
    Index = 0;
    goto LABEL_237;
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v697 = 0xFFFFFFFF00000000;
  LOBYTE(v701) = 0;
  v702 = 0;
  v703 = 0;
  v704 = 0;
  v699 = 0;
  memset(v700, 0, 13);
  v698 = (_DWORD *)v692;
  if (!v13)
  {
    v96 = *((_QWORD *)v12 + 7);
    v97 = *(unsigned __int8 *)(v692 + 5);
    if (v97 > 0x16)
      goto LABEL_148;
    if (v97 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v96 + 41952) + 1768) == v14)
      {
        v564 = *(_QWORD *)(v692 + 8);
        if ((v564 & 1) != 0)
          v565 = (unsigned int *)(v692 + 16);
        else
          v565 = (unsigned int *)(v564 + 4);
        v566 = *v565;
        if ((v566 & 0x80000000) != 0)
          v567 = (WTF::StringImpl *)(COERCE__INT64((double)v566) + 0x2000000000000);
        else
          v567 = (WTF::StringImpl *)(v566 | 0xFFFE000000000000);
        v568 = 14;
        goto LABEL_958;
      }
      if (!v14 || (v583 = *(_DWORD *)(v14 + 16), (v583 & 0x20) != 0))
      {
LABEL_1009:
        v569 = 0;
LABEL_959:
        if (*(_DWORD *)(v96 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v96, a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_248;
        }
        if ((v569 & 1) != 0)
          goto LABEL_232;
        goto LABEL_961;
      }
      v584 = *(_WORD **)(v14 + 8);
      v585 = *(unsigned int *)(v14 + 4);
      if ((v583 & 4) == 0)
      {
        if ((_DWORD)v585)
        {
          v586 = (unsigned __int16)*v584 - 48;
          if (v586 <= 9 && (*v584 != 48 || v585 <= 1))
          {
            v593 = v584 + 1;
            v594 = v585 - 1;
            while (v594)
            {
              if (v586 > 0x19999999)
                goto LABEL_1005;
              v595 = *v593 - 48;
              if (v595 > 9)
                goto LABEL_1005;
              v587 = 0;
              LOBYTE(v585) = 0;
              v588 = 0;
              v76 = __CFADD__(v595, 10 * v586);
              v586 = v595 + 10 * v586;
              ++v593;
              --v594;
              if (v76)
                goto LABEL_1007;
            }
            v588 = v586 & 0xFFFFFF00;
            v587 = 0x100000000;
            if (v586 == -1)
            {
              v587 = 0;
              LOBYTE(v585) = 0;
            }
            else
            {
              LOBYTE(v585) = v586;
            }
            if (v586 == -1)
              v588 = 0;
            goto LABEL_1007;
          }
LABEL_1005:
          v587 = 0;
          LOBYTE(v585) = 0;
        }
        else
        {
          v587 = 0;
        }
        v588 = 0;
LABEL_1007:
        v589 = v585;
LABEL_1008:
        if ((v587 & 0x100000000) != 0)
        {
          a3 = v588 | v589;
          v666 = *(_QWORD *)(v692 + 8);
          v667 = (_DWORD *)((v666 & 1) != 0 ? v692 + 16 : v666 + 4);
          if (*v667 > a3)
          {
            v567 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v692, v12, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v96 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v96, a2, a3, a4, a5, a6, a7, a8))
            {
              v568 = 10;
LABEL_958:
              v695 = v567;
              LODWORD(v697) = v568;
              v699 = 0;
              v569 = 1;
              BYTE1(v700[1]) = 1;
              goto LABEL_959;
            }
          }
        }
        goto LABEL_1009;
      }
      if ((_DWORD)v585)
      {
        v679 = *(unsigned __int8 *)v584 - 48;
        if (v679 <= 9 && (v585 < 2 || *(_BYTE *)v584 != 48))
        {
          v680 = v585 - 1;
          v681 = (unsigned __int8 *)v584 + 1;
          while (v680)
          {
            if (v679 > 0x19999999)
              goto LABEL_1377;
            v682 = *v681 - 48;
            if (v682 > 9)
              goto LABEL_1377;
            v589 = 0;
            LOBYTE(v585) = 0;
            v587 = 0;
            v76 = __CFADD__(v682, 10 * v679);
            v679 = v682 + 10 * v679;
            --v680;
            ++v681;
            if (v76)
              goto LABEL_1397;
          }
          if (v679 == -1)
            v589 = 0;
          else
            v589 = v679 & 0xFFFFFF00;
          if (v679 == -1)
            LOBYTE(v585) = 0;
          else
            LOBYTE(v585) = v679;
          if (v679 == -1)
            v587 = 0;
          else
            v587 = 0x100000000;
          goto LABEL_1397;
        }
LABEL_1377:
        v589 = 0;
        LOBYTE(v585) = 0;
      }
      else
      {
        v589 = 0;
      }
      v587 = 0;
LABEL_1397:
      v588 = v585;
      goto LABEL_1008;
    }
  }
LABEL_961:
  v692 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v694, (unint64_t)v12);
  if (!v692)
    goto LABEL_248;
  v96 = *((_QWORD *)v12 + 7);
LABEL_148:
  v98 = v692;
  v99 = (_BYTE *)(v692 + 6);
  v100 = v14 >> 4;
  if ((*(_BYTE *)(v692 + 6) & 8) == 0)
  {
    v101 = v692;
    while (1)
    {
      v102 = *(_DWORD *)v101 & 0xFFFFFFFE;
      v103 = 16 * v102;
      if ((_DWORD)v100)
      {
        if ((v100 & ~*(_DWORD *)(16 * v102 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v103, (JSC::VM *)v96, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v104)
          {
            v705[0] = (WTF::StringImpl *)v14;
            v105 = JSC::PropertyTable::get(v104, (uint64_t *)v705);
            a6 = v105;
            if ((_DWORD)v105 != -1)
              break;
          }
        }
      }
      if ((*v99 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v101, (JSC::VM *)v96, v14, (uint64_t)&v695) & 1) != 0)
      {
        goto LABEL_232;
      }
      v98 = *(_QWORD *)(v103 + 48);
      if (!v98)
        v98 = *(_QWORD *)(v101 + 16);
      if ((v98 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v98 + 5) < 0x17u)
      {
        if (!v14)
          goto LABEL_248;
        v156 = *(_DWORD *)(v14 + 16);
        if ((v156 & 0x20) != 0)
          goto LABEL_248;
        v157 = *(_WORD **)(v14 + 8);
        v158 = *(unsigned int *)(v14 + 4);
        if ((v156 & 4) == 0)
        {
          if ((_DWORD)v158)
          {
            v159 = (unsigned __int16)*v157 - 48;
            if (v159 <= 9 && (*v157 != 48 || v158 <= 1))
            {
              v195 = v157 + 1;
              v196 = v158 - 1;
              while (v196)
              {
                if (v159 > 0x19999999)
                  goto LABEL_244;
                v197 = *v195 - 48;
                if (v197 > 9)
                  goto LABEL_244;
                v160 = 0;
                LOBYTE(v158) = 0;
                v161 = 0;
                v76 = __CFADD__(v197, 10 * v159);
                v159 = v197 + 10 * v159;
                ++v195;
                --v196;
                if (v76)
                  goto LABEL_246;
              }
              v161 = v159 & 0xFFFFFF00;
              v160 = 0x100000000;
              if (v159 == -1)
              {
                v160 = 0;
                LOBYTE(v158) = 0;
              }
              else
              {
                LOBYTE(v158) = v159;
              }
              if (v159 == -1)
                v161 = 0;
LABEL_246:
              v162 = v158;
LABEL_247:
              if ((v160 & 0x100000000) == 0)
              {
LABEL_248:
                Index = 10;
                goto LABEL_234;
              }
              v237 = v161 | v162;
              v238 = (JSC::VM *)*((_QWORD *)v12 + 7);
              Index = 10;
              while (2)
              {
                v239 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
                v240 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v239 + 0x4C) + 0x70))();
                if (*((_DWORD *)v238 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v238, a2, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_248;
                }
                if ((v240 & 1) != 0)
                  goto LABEL_232;
                if (BYTE2(v700[1]) == 3)
                {
                  if (BYTE4(v700[1]))
                    goto LABEL_248;
                  v241 = *(unsigned __int8 *)(v692 + 5);
                  if (v241 != 61)
                    goto LABEL_342;
                }
                else
                {
                  v241 = *(unsigned __int8 *)(v692 + 5);
                  if (v241 == 61)
                  {
                    if (BYTE2(v700[1]) == 1)
                      goto LABEL_248;
                  }
                  else
                  {
LABEL_342:
                    if ((v241 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, a2, a3, a4, a5, a6, a7, a8) <= v237)
                    {
                      goto LABEL_248;
                    }
                  }
                }
                if ((*(_WORD *)(v239 + 12) & 0x800) == 0 || BYTE2(v700[1]) == 3)
                {
                  v242 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                  if (!v242)
                    v242 = *(_QWORD *)(v692 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v242 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v692, v12);
                  }
                  else
                  {
                    v242 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
                    if (!v242)
                      v242 = *(_QWORD *)(v692 + 16);
                  }
                  if (*((_DWORD *)v238 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v238, a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_248;
                  }
                }
                if ((v242 & 0xFFFE000000000002) != 0)
                  goto LABEL_234;
                v692 = v242;
                if (*(unsigned __int8 *)(v242 + 5) <= 0x16u)
                  goto LABEL_234;
                continue;
              }
            }
LABEL_244:
            v160 = 0;
            LOBYTE(v158) = 0;
          }
          else
          {
            v160 = 0;
          }
          v161 = 0;
          goto LABEL_246;
        }
        if ((_DWORD)v158)
        {
          v507 = *(unsigned __int8 *)v157 - 48;
          if (v507 <= 9 && (v158 < 2 || *(_BYTE *)v157 != 48))
          {
            v515 = v158 - 1;
            v516 = (unsigned __int8 *)v157 + 1;
            while (v515)
            {
              if (v507 > 0x19999999)
                goto LABEL_845;
              v517 = *v516 - 48;
              if (v517 > 9)
                goto LABEL_845;
              v162 = 0;
              LOBYTE(v158) = 0;
              v160 = 0;
              v76 = __CFADD__(v517, 10 * v507);
              v507 = v517 + 10 * v507;
              --v515;
              ++v516;
              if (v76)
                goto LABEL_847;
            }
            if (v507 == -1)
              v162 = 0;
            else
              v162 = v507 & 0xFFFFFF00;
            if (v507 == -1)
              LOBYTE(v158) = 0;
            else
              LOBYTE(v158) = v507;
            if (v507 == -1)
              v160 = 0;
            else
              v160 = 0x100000000;
            goto LABEL_847;
          }
LABEL_845:
          v162 = 0;
          LOBYTE(v158) = 0;
        }
        else
        {
          v162 = 0;
        }
        v160 = 0;
LABEL_847:
        v161 = v158;
        goto LABEL_247;
      }
      v99 = (_BYTE *)(v98 + 6);
      v101 = v98;
      if ((*(_BYTE *)(v98 + 6) & 8) != 0)
        goto LABEL_160;
    }
    a5 = HIDWORD(v105);
    if ((int)v105 <= 63)
    {
      v152 = v101 + 16;
      v153 = v105 << 32;
    }
    else
    {
      v152 = *(_QWORD *)(v101 + 8) - 8;
      v153 = 0x3F00000000 - (v105 << 32);
    }
    a4 = *(_QWORD *)(v152 + (v153 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_230;
    v154 = *(unsigned __int8 *)(a4 + 5);
    if (v154 != 5)
    {
      if (v154 != 6)
      {
LABEL_230:
        v695 = (WTF::StringImpl *)a4;
        v699 = (_DWORD *)v101;
LABEL_231:
        v697 = __PAIR64__(a6, a5);
        LOWORD(v700[1]) = 257;
        goto LABEL_232;
      }
      v258 = *(_DWORD *)(v103 + 16) & 3;
      v259 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v261 = *(int8x16_t ***)(a4 + 24);
        v260 = *(_QWORD *)(a4 + 32);
        v695 = *(WTF::StringImpl **)(a4 + 8);
        v696 = v259;
        LODWORD(v697) = HIDWORD(v105);
        v699 = (_DWORD *)v101;
        goto LABEL_367;
      }
      v695 = *(WTF::StringImpl **)(a4 + 8);
      v696 = v259;
      LODWORD(v697) = HIDWORD(v105);
      v699 = (_DWORD *)v101;
LABEL_424:
      BYTE1(v700[1]) = 3;
      if (v258 != 2)
        LOBYTE(v700[1]) = 1;
      goto LABEL_232;
    }
    v199 = (unsigned int *)v101;
    v200 = v96;
LABEL_289:
    JSC::JSObject::fillGetterPropertySlot(v199, v200, (uint64_t)&v695, a4, a5, a6);
    goto LABEL_232;
  }
LABEL_160:
  if (!v14)
    goto LABEL_169;
  v106 = *(_DWORD *)(v14 + 16);
  if ((v106 & 0x20) != 0)
    goto LABEL_169;
  v107 = *(_WORD **)(v14 + 8);
  v108 = *(unsigned int *)(v14 + 4);
  if ((v106 & 4) == 0)
  {
    if ((_DWORD)v108)
    {
      v109 = (unsigned __int16)*v107 - 48;
      if (v109 <= 9)
      {
        v286 = v12;
        if (*v107 == 48 && v108 > 1)
        {
LABEL_519:
          v110 = 0;
          LOBYTE(v108) = 0;
          v111 = 0;
          v12 = v286;
        }
        else
        {
          v287 = v107 + 1;
          v288 = v108 - 1;
          while (v288)
          {
            if (v109 > 0x19999999)
              goto LABEL_519;
            v289 = *v287 - 48;
            if (v289 > 9)
              goto LABEL_519;
            v110 = 0;
            LOBYTE(v108) = 0;
            v111 = 0;
            v76 = __CFADD__(v289, 10 * v109);
            v109 = v289 + 10 * v109;
            ++v287;
            --v288;
            v12 = v286;
            if (v76)
              goto LABEL_167;
          }
          v111 = v109 & 0xFFFFFF00;
          v110 = 0x100000000;
          if (v109 == -1)
          {
            v110 = 0;
            LOBYTE(v108) = 0;
          }
          else
          {
            LOBYTE(v108) = v109;
          }
          if (v109 == -1)
            v111 = 0;
        }
        goto LABEL_167;
      }
      v110 = 0;
      LOBYTE(v108) = 0;
    }
    else
    {
      v110 = 0;
    }
    v111 = 0;
LABEL_167:
    v112 = v108;
    goto LABEL_168;
  }
  if ((_DWORD)v108)
  {
    v605 = *(unsigned __int8 *)v107 - 48;
    if (v605 <= 9 && (v108 < 2 || *(_BYTE *)v107 != 48))
    {
      v621 = v108 - 1;
      v622 = (unsigned __int8 *)v107 + 1;
      while (v621)
      {
        if (v605 > 0x19999999)
          goto LABEL_1074;
        v623 = *v622 - 48;
        if (v623 > 9)
          goto LABEL_1074;
        v112 = 0;
        LOBYTE(v108) = 0;
        v110 = 0;
        v76 = __CFADD__(v623, 10 * v605);
        v605 = v623 + 10 * v605;
        --v621;
        ++v622;
        if (v76)
          goto LABEL_1076;
      }
      if (v605 == -1)
        v112 = 0;
      else
        v112 = v605 & 0xFFFFFF00;
      if (v605 == -1)
        LOBYTE(v108) = 0;
      else
        LOBYTE(v108) = v605;
      if (v605 == -1)
        v110 = 0;
      else
        v110 = 0x100000000;
      goto LABEL_1076;
    }
LABEL_1074:
    v112 = 0;
    LOBYTE(v108) = 0;
  }
  else
  {
    v112 = 0;
  }
  v110 = 0;
LABEL_1076:
  v111 = v108;
LABEL_168:
  if ((v110 & 0x100000000) != 0)
  {
    v290 = v111 | v112;
    v291 = (JSC::VM *)*((_QWORD *)v12 + 7);
    Index = 10;
    while (1)
    {
      v292 = 16 * (*(_DWORD *)v692 & 0xFFFFFFFE);
      v293 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v292 + 0x4C) + 0x70))();
      v294 = v293;
      if (*((_DWORD *)v291 + 20))
      {
        v341 = JSC::VM::hasExceptionsAfterHandlingTraps(v291, a2, a3, a4, a5, a6, a7, a8);
        if (((v341 | v294) & 1) != 0)
        {
          if (!v341)
            goto LABEL_232;
          goto LABEL_248;
        }
      }
      else if ((v293 & 1) != 0)
      {
        goto LABEL_232;
      }
      if (BYTE2(v700[1]) == 3)
      {
        if (BYTE4(v700[1]))
          goto LABEL_248;
        v295 = *(unsigned __int8 *)(v692 + 5);
        if (v295 == 61)
          goto LABEL_446;
      }
      else
      {
        v295 = *(unsigned __int8 *)(v692 + 5);
        if (v295 == 61)
        {
          if (BYTE2(v700[1]) == 1)
            goto LABEL_248;
          goto LABEL_446;
        }
      }
      if ((v295 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v692, a2, a3, a4, a5, a6, a7, a8) <= v290)
      {
        goto LABEL_248;
      }
LABEL_446:
      if ((*(_WORD *)(v292 + 12) & 0x800) == 0 || BYTE2(v700[1]) == 3)
      {
        v296 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
        if (!v296)
          v296 = *(_QWORD *)(v692 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v296 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v692 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v692, v12);
        }
        else
        {
          v296 = *(_QWORD *)(16 * (*(_DWORD *)v692 & 0xFFFFFFFE) + 0x30);
          if (!v296)
            v296 = *(_QWORD *)(v692 + 16);
        }
        if (*((_DWORD *)v291 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v291, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_248;
      }
      if ((v296 & 0xFFFE000000000002) == 0)
      {
        v692 = v296;
        if (*(unsigned __int8 *)(v296 + 5) > 0x16u)
          continue;
      }
      goto LABEL_234;
    }
  }
LABEL_169:
  v113 = (JSC::VM *)*((_QWORD *)v12 + 7);
  Index = 10;
  while (1)
  {
    v114 = 16 * (*(_DWORD *)v98 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v98 + 6) & 8) == 0)
      break;
    v315 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x4C) + 0x68))(v98, v12, v14, &v695);
    if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_248;
    if ((v315 & 1) != 0)
      goto LABEL_232;
    if (BYTE2(v700[1]) == 3)
    {
      if (BYTE4(v700[1]))
        goto LABEL_248;
      v316 = *(unsigned __int8 *)(v98 + 5);
      if (v316 != 61)
      {
LABEL_478:
        if (!v14)
          goto LABEL_176;
        if ((v316 - 50) < 0xFFFFFFF5)
          goto LABEL_176;
        v317 = *(_DWORD *)(v14 + 16);
        if ((v317 & 0x20) != 0)
          goto LABEL_176;
        v318 = *(unsigned int *)(v14 + 4);
        if (!(_DWORD)v318)
          goto LABEL_176;
        v319 = *(unsigned __int8 **)(v14 + 8);
        if ((v317 & 4) == 0)
        {
          v320 = *(unsigned __int16 *)v319;
          if ((_DWORD)v318 == 1)
            goto LABEL_484;
          if (v320 == 45)
          {
            v320 = *((unsigned __int16 *)v319 + 1);
            goto LABEL_507;
          }
          if ((v320 - 48) >= 0xA && ((_DWORD)v318 != 8 || v320 != 73))
          {
LABEL_816:
            if ((_DWORD)v318 != 3 || v320 != 78)
              goto LABEL_176;
          }
LABEL_515:
          v10 = v10 & 0xFFFFFF0000000000 | v318 | ((unint64_t)((v317 >> 2) & 1) << 32);
          JSC::jsToNumber(v319, v10);
          WTF::numberToString(v705, v342);
          if (WTF::equal(v14, (unint64_t)v705, v343))
            goto LABEL_248;
          goto LABEL_176;
        }
        v320 = *v319;
        if ((_DWORD)v318 == 1)
        {
LABEL_484:
          if ((v320 - 48) < 0xA)
            goto LABEL_248;
          goto LABEL_176;
        }
        if (v320 == 45)
        {
          v320 = v319[1];
LABEL_507:
          if ((v320 - 48) < 0xA)
          {
            if ((_DWORD)v318 == 2)
              goto LABEL_248;
            goto LABEL_515;
          }
          if ((_DWORD)v318 != 9)
            goto LABEL_176;
        }
        else
        {
          if ((v320 - 48) < 0xA)
            goto LABEL_515;
          if ((_DWORD)v318 != 8)
            goto LABEL_816;
        }
        if (v320 != 73)
          goto LABEL_176;
        goto LABEL_515;
      }
    }
    else
    {
      v316 = *(unsigned __int8 *)(v98 + 5);
      if (v316 != 61)
        goto LABEL_478;
      if (BYTE2(v700[1]) == 1)
        goto LABEL_248;
    }
LABEL_176:
    if ((*(_WORD *)(v114 + 12) & 0x800) == 0)
    {
      v117 = *(_DWORD *)v98;
LABEL_178:
      v118 = *(_QWORD *)(16 * (v117 & 0xFFFFFFFE) + 0x30);
      if (!v118)
        v118 = *(_QWORD *)(v98 + 16);
      goto LABEL_180;
    }
    v117 = *(_DWORD *)v98;
    if (BYTE2(v700[1]) == 3)
      goto LABEL_178;
    v314 = 16 * (v117 & 0xFFFFFFFE);
    if ((*(_WORD *)(v314 + 12) & 0x800) != 0)
    {
      v118 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v314 + 76) + 0xB0))(v98, v12);
    }
    else
    {
      v118 = *(_QWORD *)(v314 + 48);
      if (!v118)
        v118 = *(_QWORD *)(v98 + 16);
    }
    if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_248;
LABEL_180:
    if ((v118 & 0xFFFE000000000002) == 0)
    {
      v98 = v118;
      if (*(unsigned __int8 *)(v118 + 5) > 0x16u)
        continue;
    }
    goto LABEL_234;
  }
  if (!(_DWORD)v100
    || (v100 & ~*(_DWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE)), v113, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v115)|| (v705[0] = (WTF::StringImpl *)v14, v116 = JSC::PropertyTable::get(v115, (uint64_t *)v705), a6 = v116, (_DWORD)v116 == -1))
  {
    if ((*(_BYTE *)(v98 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v98, v113, v14, (uint64_t)&v695) & 1) != 0)
    {
      goto LABEL_232;
    }
    goto LABEL_176;
  }
  a5 = HIDWORD(v116);
  if ((int)v116 <= 63)
  {
    v283 = v98 + 16;
    v284 = v116 << 32;
  }
  else
  {
    v283 = *(_QWORD *)(v98 + 8) - 8;
    v284 = 0x3F00000000 - (v116 << 32);
  }
  a4 = *(_QWORD *)(v283 + (v284 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_404:
    v695 = (WTF::StringImpl *)a4;
    v699 = (_DWORD *)v98;
    goto LABEL_231;
  }
  v285 = *(unsigned __int8 *)(a4 + 5);
  if (v285 == 5)
  {
    v199 = (unsigned int *)v98;
    v200 = (uint64_t)v113;
    goto LABEL_289;
  }
  if (v285 != 6)
    goto LABEL_404;
  v258 = *(_DWORD *)(v114 + 16) & 3;
  v313 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v695 = *(WTF::StringImpl **)(a4 + 8);
    v696 = v313;
    LODWORD(v697) = HIDWORD(v116);
    v699 = (_DWORD *)v98;
    goto LABEL_424;
  }
  v261 = *(int8x16_t ***)(a4 + 24);
  v260 = *(_QWORD *)(a4 + 32);
  v695 = *(WTF::StringImpl **)(a4 + 8);
  v696 = v313;
  LODWORD(v697) = HIDWORD(v116);
  v699 = (_DWORD *)v98;
LABEL_367:
  BYTE1(v700[1]) = 3;
  if (v258 != 2)
    LOBYTE(v700[1]) = 1;
  BYTE3(v700[1]) = 1;
  v703 = v261;
  v704 = v260;
LABEL_232:
  if (BYTE1(v700[1]) == 1)
  {
    Index = (uint64_t)v695;
  }
  else
  {
    if (BYTE1(v700[1]) == 2)
    {
      v198 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v695, v12, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v251 = (unint64_t)v699;
      v252 = *(_QWORD *)(16 * (*v699 & 0xFFFFFFFE) + 0x28);
      if ((v697 & 0x20) != 0)
        v251 = (unint64_t)v698;
      if (BYTE3(v700[1]) != 1)
        goto LABEL_364;
      if ((v251 & 0xFFFE000000000002) != 0)
        goto LABEL_809;
      v253 = *(unsigned int *)(16 * (*(_DWORD *)v251 & 0xFFFFFFFE) + 0x4C);
      v254 = *(_DWORD *)(16 * (*(_DWORD *)v251 & 0xFFFFFFFE) + 0x4C) != 0;
      v255 = 16 * v253;
      if ((_DWORD)v253)
        v256 = v703 == (int8x16_t **)v255;
      else
        v256 = 1;
      if (!v256)
      {
        do
        {
          v255 = *(_QWORD *)(v255 + 16);
          v254 = v255 != 0;
        }
        while ((int8x16_t **)v255 != v703 && v255 != 0);
      }
      if (!v254)
      {
LABEL_809:
        v705[0] = *((WTF::StringImpl **)v12 + 7);
        v198 = JSC::throwDOMAttributeGetterTypeError(v252, v705, v703, (WTF::StringImpl *)v14);
      }
      else
      {
LABEL_364:
        v198 = ((uint64_t (*)(unint64_t))v695)(v252);
      }
    }
    Index = v198;
  }
LABEL_234:
  if (v702)
  {
    v155 = *(_DWORD *)(v701 + 4);
    if (!v155)
    {
      __break(0xC471u);
      JUMPOUT(0x1987A7470);
    }
    *(_DWORD *)(v701 + 4) = v155 - 1;
  }
LABEL_237:
  if (v14)
    goto LABEL_92;
  return Index;
}

uint64_t operationGetByValGeneric(uint64_t a1, uint64_t this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t Index;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  BOOL v131;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  _QWORD *v138;
  uint64_t v139;
  WTF::StringImpl **v140;
  WTF::StringImpl **v141;
  WTF::StringImpl *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int8x16_t **v146;
  char *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  int v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  JSC::VM *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  unsigned __int16 *v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t (*v182)(WTF::StringImpl **);
  WTF::StringImpl **v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int v217;
  JSC::VM *v218;
  unint64_t NotAnObjectError;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t **v227;
  WTF::AtomStringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  double v236;
  const unsigned __int8 *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unsigned int v254;
  JSC::VM *v255;
  uint64_t v256;
  char v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  _QWORD *v267;
  uint64_t v268;
  WTF::StringImpl **v269;
  WTF::StringImpl **v270;
  WTF::StringImpl *v271;
  int v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  unint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  int v311;
  char v312;
  unint64_t *v313;
  unint64_t *v314;
  uint64_t v315;
  _DWORD *v316;
  int v317;
  _BYTE *v318;
  uint64_t v319;
  unsigned __int16 *v320;
  uint64_t v321;
  unsigned int v322;
  unsigned __int8 *v323;
  uint64_t v324;
  unsigned int v325;
  JSC::VM *v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  uint64_t v331;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 *v339;
  unsigned int v340;
  uint64_t v341;
  _DWORD *v342;
  unint64_t v343;
  WTF::StringImpl *v344;
  uint64_t v345;
  unint64_t v346;
  _DWORD *v347;
  _DWORD *v348;
  _QWORD v349[2];
  uint64_t v350;
  char v351;
  int8x16_t **v352;
  uint64_t v353;
  unint64_t v354;
  WTF::StringImpl *v355[2];
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  _QWORD v359[2];
  uint64_t v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t vars0;

  v9 = a3;
  v10 = this;
  v364 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = vars0;
  v13 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0)
  {
    if (a3 >= 0xFFFE000000000000 && (a3 & 0x80000000) == 0)
    {
      v14 = a3;
      goto LABEL_5;
    }
    if (a3 >> 49)
    {
      *(double *)a9.i64 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        a9.i64[0] = a3 - 0x2000000000000;
      v14 = *(double *)a9.i64;
      if ((_DWORD)v14 != -1 && *(double *)a9.i64 == (double)v14)
      {
LABEL_5:
        v15 = *(unsigned __int8 *)(this + 5);
        if (v15 < 0x17)
          goto LABEL_35;
        v16 = *(_QWORD *)(this + 8);
        if ((*(_BYTE *)(this + 4) & 0xFu) - 8 < 2)
        {
LABEL_7:
          if (*(_DWORD *)(v16 - 8) > v14)
          {
            Index = *(_QWORD *)(v16 + 8 * v14);
LABEL_9:
            if (Index)
              return Index;
          }
          goto LABEL_34;
        }
        switch(*(_BYTE *)(this + 4) & 0xF)
        {
          case 0:
          case 1:
            switch(*(_BYTE *)(this + 5))
            {
              case '\'':
              case '(':
                v156 = v14;
                if ((*(_BYTE *)(this + 40) & 7u) <= 2)
                  goto LABEL_230;
                v203 = *(_QWORD *)(v16 - 8);
                if (*(_BYTE *)(v203 + 64) && (v337 = *(_QWORD *)(v203 + 32)) != 0)
                  v204 = *(_QWORD *)(v337 + 32);
                else
                  v204 = *(_QWORD *)(v203 + 48);
                v181 = *(_QWORD *)(this + 24);
                v205 = *(_QWORD *)(this + 32);
                if (v181 + v205 > v204)
                  goto LABEL_34;
                if ((*(_BYTE *)(this + 40) & 1) == 0)
                  goto LABEL_340;
                v157 = v204 - v205;
                goto LABEL_231;
              case ')':
                if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(this, v14))
                  goto LABEL_34;
                goto LABEL_232;
              case '*':
              case '+':
                v156 = v14;
                if ((*(_BYTE *)(this + 40) & 7u) <= 2)
                  goto LABEL_230;
                v178 = *(_QWORD *)(v16 - 8);
                if (*(_BYTE *)(v178 + 64) && (v335 = *(_QWORD *)(v178 + 32)) != 0)
                  v179 = *(_QWORD *)(v335 + 32);
                else
                  v179 = *(_QWORD *)(v178 + 48);
                v181 = *(_QWORD *)(this + 24);
                v180 = *(_QWORD *)(this + 32);
                if (v180 + 2 * v181 > v179)
                  goto LABEL_34;
                if ((*(_BYTE *)(this + 40) & 1) == 0)
                  goto LABEL_340;
                if (v14 >= (v179 - v180) >> 1)
                  goto LABEL_34;
                goto LABEL_232;
              case ',':
              case '-':
              case '.':
                v156 = v14;
                if ((*(_BYTE *)(this + 40) & 7u) <= 2)
                  goto LABEL_230;
                v209 = *(_QWORD *)(v16 - 8);
                if (*(_BYTE *)(v209 + 64) && (v333 = *(_QWORD *)(v209 + 32)) != 0)
                  v210 = *(_QWORD *)(v333 + 32);
                else
                  v210 = *(_QWORD *)(v209 + 48);
                v181 = *(_QWORD *)(this + 24);
                v211 = *(_QWORD *)(this + 32);
                if (v211 + 4 * v181 > v210)
                  goto LABEL_34;
                if ((*(_BYTE *)(this + 40) & 1) == 0)
                  goto LABEL_340;
                if (v14 >= (v210 - v211) >> 2)
                  goto LABEL_34;
                goto LABEL_232;
              case '/':
                v156 = v14;
                if ((*(_BYTE *)(this + 40) & 7u) <= 2)
                {
LABEL_230:
                  v157 = *(_QWORD *)(this + 24);
LABEL_231:
                  if (v157 <= v156)
                    goto LABEL_34;
                }
                else
                {
                  v184 = *(_QWORD *)(v16 - 8);
                  if (*(_BYTE *)(v184 + 64) && (v336 = *(_QWORD *)(v184 + 32)) != 0)
                    v185 = *(_QWORD *)(v336 + 32);
                  else
                    v185 = *(_QWORD *)(v184 + 48);
                  v181 = *(_QWORD *)(this + 24);
                  v186 = *(_QWORD *)(this + 32);
                  if (v186 + 8 * v181 > v185)
                    goto LABEL_34;
                  if ((*(_BYTE *)(this + 40) & 1) != 0)
                  {
                    if (v14 >= (v185 - v186) >> 3)
                    {
LABEL_34:
                      v15 = *(unsigned __int8 *)(v10 + 5);
LABEL_35:
                      if (v15 == 2)
                      {
                        v225 = *(_QWORD *)(v10 + 8);
                        v226 = (_DWORD *)((v225 & 1) != 0 ? v10 + 16 : v225 + 4);
                        if (*v226 > v14)
                          return JSC::JSString::getIndex((JSC::JSString *)v10, (JSC::JSGlobalObject *)a1, v14, a4, a5, a6, a7, a8, a9);
                      }
                      a9.i64[0] = 0xFFFFFFFF00000000;
                      v356 = 0xFFFFFFFF00000000;
                      LOBYTE(v360) = 0;
                      v361 = 0;
                      v362 = 0;
                      v363 = 0;
                      v358 = 0;
                      memset(v359, 0, 13);
                      v357 = v10;
                      v354 = v10;
                      v32 = *(_QWORD *)(a1 + 56);
                      if (v15 <= 0x16)
                      {
                        if (v15 == 2)
                        {
                          v315 = *(_QWORD *)(v10 + 8);
                          if ((v315 & 1) != 0)
                            v316 = (_DWORD *)(v10 + 16);
                          else
                            v316 = (_DWORD *)(v315 + 4);
                          if (*v316 > v14)
                          {
                            Index = JSC::JSString::getIndex((JSC::JSString *)v10, (JSC::JSGlobalObject *)a1, v14, a4, a5, a6, a7, a8, a9);
                            if (!*(_DWORD *)(v32 + 80)
                              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, this, a3, a4, a5, a6, a7, a8))
                            {
                              v355[0] = (WTF::StringImpl *)Index;
                              LODWORD(v356) = 10;
                              v358 = 0;
                              BYTE1(v359[1]) = 1;
                              if (*(_DWORD *)(v32 + 80)
                                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, this, a3, a4, a5, a6, a7, a8))
                              {
                                Index = 0;
                              }
LABEL_51:
                              if (v361)
                              {
                                v44 = *(_DWORD *)(v360 + 4);
                                if (!v44)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1987AAE34);
                                }
                                *(_DWORD *)(v360 + 4) = v44 - 1;
                              }
                              return Index;
                            }
                          }
                          if (*(_DWORD *)(v32 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_618;
                          }
                        }
                        v334 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v354, a1);
                        if (!v334)
                        {
LABEL_618:
                          Index = 0;
                          goto LABEL_51;
                        }
                        v10 = v334;
                        v32 = *(_QWORD *)(a1 + 56);
                      }
                      Index = 10;
                      while (1)
                      {
                        v33 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                        v41 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v33 + 0x4C) + 0x70))(v10, a1, v14, v355);
                        if (*(_DWORD *)(v32 + 80))
                        {
                          v177 = *(_DWORD *)(v32 + 80);
                          if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, (uint64_t)v35, v36, v37, v38, v39, v40);
                          if (*(_QWORD *)(v32 + 16))
                          {
LABEL_284:
                            Index = 10;
                            goto LABEL_51;
                          }
                        }
                        if ((v41 & 1) != 0)
                        {
                          if (BYTE1(v359[1]) == 1)
                          {
                            Index = (unint64_t)v355[0];
                          }
                          else if (BYTE1(v359[1]) == 2)
                          {
                            Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v355, (JSC::JSGlobalObject *)a1, (uint64_t)v35, v36, v37, v38, v39, v40);
                          }
                          else
                          {
                            v227 = *(uint64_t ***)(a1 + 56);
                            JSC::Identifier::from(v227, v14, v35, v36, v37, v38, v39, v40, (int **)&v344);
                            Index = JSC::PropertySlot::customGetter((uint64_t)v355, (JSC::VM *)v227, v344);
                            v235 = v344;
                            v344 = 0;
                            if (v235)
                            {
                              if (*(_DWORD *)v235 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v235, v228, v229, v230, v231, v232, v233, v234);
                                WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
                              }
                              else
                              {
                                *(_DWORD *)v235 -= 2;
                              }
                            }
                          }
                          goto LABEL_51;
                        }
                        if (BYTE2(v359[1]) == 3)
                        {
                          if (BYTE4(v359[1]))
                            goto LABEL_284;
                          v42 = *(unsigned __int8 *)(v10 + 5);
                          if (v42 == 61)
                            goto LABEL_43;
                        }
                        else
                        {
                          v42 = *(unsigned __int8 *)(v10 + 5);
                          if (v42 == 61)
                          {
                            if (BYTE2(v359[1]) == 1)
                              goto LABEL_284;
                            goto LABEL_43;
                          }
                        }
                        if ((v42 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, v34, (uint64_t)v35, v36, v37, v38, v39, v40) <= v14)
                        {
                          goto LABEL_284;
                        }
LABEL_43:
                        if ((*(_WORD *)(v33 + 12) & 0x800) == 0 || BYTE2(v359[1]) == 3)
                        {
                          v43 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                          if (!v43)
                            v43 = *(_QWORD *)(v10 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v43 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v10, a1);
                          }
                          else
                          {
                            v43 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                            if (!v43)
                              v43 = *(_QWORD *)(v10 + 16);
                          }
                          if (*(_DWORD *)(v32 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, v34, (uint64_t)v35, v36, v37, v38, v39, v40))
                          {
                            goto LABEL_284;
                          }
                        }
                        if ((v43 & 0xFFFE000000000002) == 0)
                        {
                          v10 = v43;
                          if (*(unsigned __int8 *)(v43 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_51;
                      }
                    }
                  }
                  else
                  {
LABEL_340:
                    if (v181 <= v156)
                      goto LABEL_34;
                  }
                }
LABEL_232:
                Index = JSC::JSObject::getIndexQuicklyForTypedArray(v10, v14, 0);
                goto LABEL_9;
              default:
                goto LABEL_34;
            }
          case 3:
            goto LABEL_34;
          case 4:
          case 5:
            goto LABEL_7;
          case 6:
          case 7:
            if (*(_DWORD *)(v16 - 8) <= v14)
              goto LABEL_34;
            a9.i64[0] = *(_QWORD *)(v16 + 8 * v14);
            Index = a9.i64[0] + 0x2000000000000;
            goto LABEL_9;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v16 - 4) <= v14)
              goto LABEL_34;
            Index = *(_QWORD *)(v16 + 8 * v14 + 16);
            goto LABEL_9;
          default:
            __break(0xC471u);
            JUMPOUT(0x1987AB2E8);
        }
      }
    }
    if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
    {
      Index = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
      if (((*(_DWORD *)(Index + 0x10) | *(unsigned __int8 *)(Index + 0xA)) & 8) == 0)
      {
        v18 = *(_QWORD *)(a3 + 8);
        if ((v18 & 1) != 0)
        {
          JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
        }
        else
        {
          if ((*(_BYTE *)(v18 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v18 += 2;
LABEL_18:
            if (*(_DWORD *)(v12 + 80))
            {
              v168 = *(_DWORD *)(v12 + 80);
              if ((v168 & 0x27) != 0 && (v168 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v12 + 16))
              {
                Index = 0;
LABEL_65:
                if (!v18)
                  return Index;
                v49 = *(_DWORD *)v18 - 2;
                if (*(_DWORD *)v18 != 2)
                  goto LABEL_150;
                v31 = 0;
                goto LABEL_68;
              }
            }
            if (!v18)
              goto LABEL_83;
            if ((v18 >> 4) && ((v18 >> 4) & ~*(_DWORD *)(Index + 32)) == 0)
            {
              v19 = *(_QWORD *)(Index + 88);
              if (v19
                || (v45 = *(_QWORD *)(Index + 64)) != 0
                && (*(_BYTE *)(v45 + 5) == 1 || *(_DWORD *)(v45 + 80) >= 2u)
                && (JSC::Structure::materializePropertyTable((JSC::Structure *)Index, (JSC::VM *)v12, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v19))
              {
                if (*(_DWORD *)(v19 + 24))
                {
                  v20 = *(_QWORD *)(v19 + 16);
                  v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
                  v22 = *(unsigned int *)(v19 + 8);
                  v23 = *(_DWORD *)(v18 + 16);
                  if ((v20 & 1) != 0)
                  {
                    if ((v23 & 0x20) != 0)
                      v23 = *(_DWORD *)(v18 + 32);
                    v24 = *(_DWORD *)(v19 + 12);
                    v25 = (v23 >> 8) & *(_QWORD *)&v24;
                    v26 = *(unsigned __int8 *)(v21 + v25);
                    if (*(_BYTE *)(v21 + v25))
                    {
                      v27 = v21 + v22;
                      v28 = 1;
                      while (1)
                      {
                        v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
                        if (v18 == (v29 & 0xFFFFFFFFFFFFLL))
                          break;
                        v25 = ((_DWORD)v25 + v28) & v24;
                        v26 = *(unsigned __int8 *)(v21 + v25);
                        ++v28;
                        if (!*(_BYTE *)(v21 + v25))
                          goto LABEL_31;
                      }
                      v46 = HIBYTE(v29);
LABEL_61:
                      if ((_DWORD)v46 != -1)
                      {
                        if ((int)v46 <= 63)
                        {
                          v47 = v10 + 16;
                          v48 = v46 << 32;
                        }
                        else
                        {
                          v47 = *(_QWORD *)(v10 + 8) - 8;
                          v48 = 0x3F00000000 - (v46 << 32);
                        }
                        Index = *(_QWORD *)(v47 + (v48 >> 29));
                        if (Index)
                          goto LABEL_65;
                      }
LABEL_31:
                      v30 = *(_DWORD *)v18 - 2;
                      if (*(_DWORD *)v18 == 2)
                      {
                        v31 = 1;
LABEL_68:
                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
                        if ((v31 & 1) == 0)
                          return Index;
                        goto LABEL_83;
                      }
LABEL_82:
                      *(_DWORD *)v18 = v30;
                      goto LABEL_83;
                    }
                  }
                  else
                  {
                    if ((v23 & 0x20) != 0)
                      v23 = *(_DWORD *)(v18 + 32);
                    v58 = *(_DWORD *)(v19 + 12);
                    v59 = v58 & (v23 >> 8);
                    v60 = *(_DWORD *)(v21 + 4 * v59);
                    if (v60)
                    {
                      v61 = v21 + 4 * v22;
                      v62 = 1;
                      while (1)
                      {
                        v63 = (v60 - 1);
                        if (v18 == *(_QWORD *)(v61 + 16 * v63))
                          break;
                        v59 = (v59 + v62) & v58;
                        v60 = *(_DWORD *)(v21 + 4 * v59);
                        ++v62;
                        if (!v60)
                          goto LABEL_31;
                      }
                      v46 = *(unsigned int *)(v61 + 16 * v63 + 8);
                      goto LABEL_61;
                    }
                  }
                }
              }
            }
            v30 = *(_DWORD *)v18 - 2;
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
              goto LABEL_83;
            }
            goto LABEL_82;
          }
          WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a3 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v355);
        }
        v18 = (unint64_t)v355[0];
        goto LABEL_18;
      }
    }
  }
LABEL_83:
  if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v218 = *(JSC::VM **)(a1 + 56);
    NotAnObjectError = JSC::createNotAnObjectError(a1, v10);
    JSC::VM::throwException(v218, (JSC::JSGlobalObject *)a1, NotAnObjectError, v220, v221, v222, v223, v224);
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v172 = *(_DWORD *)(v12 + 80);
    if ((v172 & 0x27) != 0 && (v172 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
LABEL_451:
    v344 = (WTF::StringImpl *)v9;
    if (*(_DWORD *)(v64 + 80))
    {
      v289 = *(_DWORD *)(v64 + 80);
      if ((v289 & 0x27) != 0 && (v289 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v64 + 16))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v64 + 41952) + 8);
        if (!v18)
          goto LABEL_92;
        goto LABEL_90;
      }
      v9 = (uint64_t)v344;
    }
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v260 = *(unsigned __int8 *)(v9 + 5);
      if (v260 == 2)
      {
LABEL_454:
        if (*(_DWORD *)(v64 + 80))
        {
          v290 = *(_DWORD *)(v64 + 80);
          if ((v290 & 0x27) != 0 && (v290 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v64 + 16))
          {
            v18 = 0;
            goto LABEL_92;
          }
        }
        v18 = *(_QWORD *)(v9 + 8);
        v261 = *(_QWORD *)(a1 + 56);
        if ((v18 & 1) == 0)
        {
          if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
          {
            v262 = *(WTF::StringImpl **)(v261 + 64768);
            if (v262 != (WTF::StringImpl *)v18)
            {
              *(_DWORD *)v18 += 2;
              *(_QWORD *)(v261 + 64768) = v18;
              if (v262)
              {
                if (*(_DWORD *)v262 == 2)
                {
                  WTF::StringImpl::~StringImpl(v262, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v299, v300, v301, v302, v303, v304, v305, v306);
                }
                else
                {
                  *(_DWORD *)v262 -= 2;
                }
              }
              v263 = *(WTF::StringImpl **)(v9 + 8);
              if (v263)
              {
                if ((*((_BYTE *)v263 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v263 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v263, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v355);
                  v263 = v355[0];
                }
              }
              v264 = *(WTF::StringImpl **)(v261 + 64776);
              *(_QWORD *)(v261 + 64776) = v263;
              if (v264)
              {
                if (*(_DWORD *)v264 == 2)
                {
                  WTF::StringImpl::~StringImpl(v264, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v291, v292, v293, v294, v295, v296, v297, v298);
                }
                else
                {
                  *(_DWORD *)v264 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
            {
              v265 = *(WTF::StringImpl **)(v261 + 64776);
              *(_DWORD *)v265 += 2;
              v355[0] = v265;
              __dmb(0xAu);
              v266 = *(WTF::StringImpl **)(v9 + 8);
              *(WTF::StringImpl **)(v9 + 8) = v355[0];
              v355[0] = v266;
              v267 = (_QWORD *)(v261 + 808);
              v268 = *(unsigned int *)(v261 + 820);
              if ((_DWORD)v268 == *(_DWORD *)(v261 + 816))
              {
                v270 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v267, v268 + 1, (unint64_t)v355);
                v268 = *(unsigned int *)(v261 + 820);
                v269 = (WTF::StringImpl **)(*(_QWORD *)(v261 + 808) + 8 * v268);
                v266 = *v270;
              }
              else
              {
                v269 = (WTF::StringImpl **)(*v267 + 8 * v268);
                v270 = v355;
              }
              *v270 = 0;
              *v269 = v266;
              *(_DWORD *)(v261 + 820) = v268 + 1;
              v271 = v355[0];
              v355[0] = 0;
              if (v271)
              {
                if (*(_DWORD *)v271 == 2)
                {
                  WTF::StringImpl::~StringImpl(v271, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v281, v282, v283, v284, v285, v286, v287, v288);
                }
                else
                {
                  *(_DWORD *)v271 -= 2;
                }
              }
            }
            v18 = *(_QWORD *)(v261 + 64776);
          }
          goto LABEL_90;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v9, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v261 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v261, this, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_321;
        }
        goto LABEL_178;
      }
      if (v260 == 4)
      {
        v18 = *(_QWORD *)(v9 + 8);
        v272 = *(_DWORD *)v18;
        *(_DWORD *)v18 += 4;
        v65 = v272 + 2;
        if (v65)
          goto LABEL_91;
        v125 = (WTF::StringImpl *)v18;
LABEL_473:
        WTF::StringImpl::~StringImpl(v125, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v273, v274, v275, v276, v277, v278, v279, v280);
        goto LABEL_92;
      }
    }
    v9 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v344, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_454;
  }
  if (*(_BYTE *)(v9 + 5) != 2)
  {
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_451;
  }
  v18 = *(_QWORD *)(v9 + 8);
  if ((v18 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v9, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v64 + 80))
    {
      v206 = *(_DWORD *)(v64 + 80);
      if ((v206 & 0x27) != 0 && (v206 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v64 + 16))
      {
LABEL_321:
        v18 = 0;
        v125 = v355[0];
        v355[0] = 0;
        if (!v125)
          goto LABEL_92;
LABEL_180:
        if (*(_DWORD *)v125 != 2)
        {
          *(_DWORD *)v125 -= 2;
          goto LABEL_92;
        }
        goto LABEL_473;
      }
    }
LABEL_178:
    v18 = (unint64_t)v355[0];
    if (!v355[0])
      goto LABEL_92;
    *(_DWORD *)v355[0] += 2;
    v355[0] = 0;
    v125 = (WTF::StringImpl *)v18;
    goto LABEL_180;
  }
  if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
  {
    v133 = *(WTF::StringImpl **)(v64 + 64768);
    if (v133 != (WTF::StringImpl *)v18)
    {
      *(_DWORD *)v18 += 2;
      *(_QWORD *)(v64 + 64768) = v18;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
        {
          WTF::StringImpl::~StringImpl(v133, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
        }
        else
        {
          *(_DWORD *)v133 -= 2;
        }
      }
      v134 = *(WTF::StringImpl **)(v9 + 8);
      if (v134)
      {
        if ((*((_BYTE *)v134 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v134 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v134, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v355);
          v134 = v355[0];
        }
      }
      v135 = *(WTF::StringImpl **)(v64 + 64776);
      *(_QWORD *)(v64 + 64776) = v134;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2)
        {
          WTF::StringImpl::~StringImpl(v135, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        }
        else
        {
          *(_DWORD *)v135 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
    {
      v136 = *(WTF::StringImpl **)(v64 + 64776);
      *(_DWORD *)v136 += 2;
      v355[0] = v136;
      __dmb(0xAu);
      v137 = *(WTF::StringImpl **)(v9 + 8);
      *(WTF::StringImpl **)(v9 + 8) = v355[0];
      v355[0] = v137;
      v138 = (_QWORD *)(v64 + 808);
      v139 = *(unsigned int *)(v64 + 820);
      if ((_DWORD)v139 == *(_DWORD *)(v64 + 816))
      {
        v141 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v138, v139 + 1, (unint64_t)v355);
        v139 = *(unsigned int *)(v64 + 820);
        v140 = (WTF::StringImpl **)(*(_QWORD *)(v64 + 808) + 8 * v139);
        v137 = *v141;
      }
      else
      {
        v140 = (WTF::StringImpl **)(*v138 + 8 * v139);
        v141 = v355;
      }
      *v141 = 0;
      *v140 = v137;
      *(_DWORD *)(v64 + 820) = v139 + 1;
      v142 = v355[0];
      v355[0] = 0;
      if (v142)
      {
        if (*(_DWORD *)v142 == 2)
        {
          WTF::StringImpl::~StringImpl(v142, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        }
        else
        {
          *(_DWORD *)v142 -= 2;
        }
      }
    }
    v18 = *(_QWORD *)(v64 + 64776);
  }
LABEL_90:
  v65 = *(_DWORD *)v18 + 2;
LABEL_91:
  *(_DWORD *)v18 = v65;
LABEL_92:
  if (*(_DWORD *)(v12 + 80))
  {
    v173 = *(_DWORD *)(v12 + 80);
    if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      Index = 0;
      goto LABEL_148;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v346 = 0xFFFFFFFF00000000;
  LOBYTE(v350) = 0;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  v348 = 0;
  memset(v349, 0, 13);
  v347 = (_DWORD *)v10;
  v66 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    if (v10 >> 49)
    {
      v105 = *(_QWORD *)(a1 + 1536);
      if ((v105 & 1) == 0)
        goto LABEL_163;
      v147 = (char *)(a1 + 1536);
    }
    else
    {
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        v238 = JSC::createNotAnObjectError(a1, v10);
        JSC::VM::throwException((JSC::VM *)v66, (JSC::JSGlobalObject *)a1, v238, v239, v240, v241, v242, v243);
        goto LABEL_135;
      }
      v105 = *(_QWORD *)(a1 + 1472);
      if ((v105 & 1) == 0)
      {
LABEL_163:
        v10 = *(_QWORD *)(v105 + 48);
        if (v10 == 2)
          goto LABEL_135;
        goto LABEL_164;
      }
      v147 = (char *)(a1 + 1472);
    }
    v182 = *(uint64_t (**)(WTF::StringImpl **))(v105 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v183 = (WTF::StringImpl **)(a1 - 16);
    else
      v183 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v355[0] = *v183;
    v355[1] = (WTF::StringImpl *)a1;
    v356 = (unint64_t)v147;
    v105 = v182(v355);
    goto LABEL_163;
  }
  v67 = *(unsigned __int8 *)(v10 + 5);
  if (v67 > 0x16)
    goto LABEL_95;
  if (v67 != 2)
    goto LABEL_507;
  if (*(_QWORD *)(*(_QWORD *)(v66 + 41952) + 1768) == v18)
  {
    v307 = *(_QWORD *)(v10 + 8);
    if ((v307 & 1) != 0)
      v308 = (unsigned int *)(v10 + 16);
    else
      v308 = (unsigned int *)(v307 + 4);
    v309 = *v308;
    if ((v309 & 0x80000000) != 0)
      v310 = (WTF::StringImpl *)(COERCE__INT64((double)v309) + 0x2000000000000);
    else
      v310 = (WTF::StringImpl *)(v309 | 0xFFFE000000000000);
    v311 = 14;
    goto LABEL_503;
  }
  if (v18)
  {
    v317 = *(_DWORD *)(v18 + 16);
    if ((v317 & 0x20) == 0)
    {
      v318 = *(_BYTE **)(v18 + 8);
      v319 = *(unsigned int *)(v18 + 4);
      if ((v317 & 4) != 0)
      {
        if (!(_DWORD)v319)
          goto LABEL_528;
        a3 = *v318 - 48;
        if (a3 > 9 || v319 >= 2 && *v318 == 48)
          goto LABEL_528;
        v338 = v319 - 1;
        v339 = v318 + 1;
        while (v338)
        {
          if (a3 > 0x19999999)
            goto LABEL_528;
          v340 = *v339 - 48;
          if (v340 > 9)
            goto LABEL_528;
          v312 = 0;
          v104 = __CFADD__(v340, 10 * a3);
          a3 = v340 + 10 * (_DWORD)a3;
          --v338;
          ++v339;
          if (v104)
            goto LABEL_504;
        }
      }
      else
      {
        if (!(_DWORD)v319)
          goto LABEL_528;
        a3 = *(unsigned __int16 *)v318 - 48;
        if (a3 > 9 || *(_WORD *)v318 == 48 && v319 > 1)
          goto LABEL_528;
        v320 = (unsigned __int16 *)(v318 + 2);
        v321 = v319 - 1;
        while (v321)
        {
          if (a3 > 0x19999999)
            goto LABEL_528;
          v322 = *v320 - 48;
          if (v322 > 9)
            goto LABEL_528;
          v312 = 0;
          v104 = __CFADD__(v322, 10 * a3);
          a3 = v322 + 10 * (_DWORD)a3;
          ++v320;
          --v321;
          if (v104)
            goto LABEL_504;
        }
      }
      if ((_DWORD)a3 != -1)
      {
        v341 = *(_QWORD *)(v10 + 8);
        v342 = (_DWORD *)((v341 & 1) != 0 ? v10 + 16 : v341 + 4);
        if (*v342 > a3)
        {
          v310 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v10, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v66 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66, this, a3, a4, a5, a6, a7, a8))
          {
            v311 = 10;
LABEL_503:
            v344 = v310;
            LODWORD(v346) = v311;
            v348 = 0;
            v312 = 1;
            BYTE1(v349[1]) = 1;
            goto LABEL_504;
          }
        }
      }
    }
  }
LABEL_528:
  v312 = 0;
LABEL_504:
  if (*(_DWORD *)(v66 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66, this, a3, a4, a5, a6, a7, a8))
    goto LABEL_135;
  if ((v312 & 1) != 0)
    goto LABEL_143;
  v67 = *(unsigned __int8 *)(v10 + 5);
LABEL_507:
  v313 = (unint64_t *)(a1 + 1208);
  if (v67 != 3)
    v313 = (unint64_t *)(a1 + 1216);
  if (v67 == 2)
    v314 = (unint64_t *)(a1 + 1192);
  else
    v314 = v313;
  v10 = *v314;
LABEL_164:
  if (!v10)
    goto LABEL_135;
  v66 = *(_QWORD *)(a1 + 56);
LABEL_95:
  v68 = (_BYTE *)(v10 + 6);
  v69 = v18 >> 4;
  v70 = v10;
  if ((*(_BYTE *)(v10 + 6) & 8) == 0)
  {
    v71 = v10;
    do
    {
      v72 = *(_DWORD *)v71 & 0xFFFFFFFE;
      v73 = 16 * v72;
      if (!(_DWORD)v69 || (v69 & ~*(_DWORD *)(16 * v72 + 0x20)) != 0)
        goto LABEL_108;
      v74 = *(_QWORD *)(16 * v72 + 0x58);
      if (!v74)
      {
        v85 = *(_QWORD *)(16 * v72 + 0x40);
        if (!v85 || *(_BYTE *)(v85 + 5) != 1 && *(_DWORD *)(v85 + 80) < 2u)
          goto LABEL_108;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v73, (JSC::VM *)v66, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v74)
          goto LABEL_108;
      }
      if (!*(_DWORD *)(v74 + 24))
        goto LABEL_108;
      v75 = *(_QWORD *)(v74 + 16);
      v76 = v75 & 0xFFFFFFFFFFFFFFFELL;
      v77 = *(unsigned int *)(v74 + 8);
      v78 = *(_DWORD *)(v18 + 16);
      if ((v75 & 1) != 0)
      {
        if ((v78 & 0x20) != 0)
          v78 = *(_DWORD *)(v18 + 32);
        v79 = *(_DWORD *)(v74 + 12);
        v80 = (v78 >> 8) & *(_QWORD *)&v79;
        v81 = *(unsigned __int8 *)(v76 + v80);
        if (!*(_BYTE *)(v76 + v80))
          goto LABEL_108;
        v82 = v76 + v77;
        v83 = 1;
        while (1)
        {
          v84 = *(_QWORD *)(v82 + 8 * (v81 - 1));
          if (v18 == (v84 & 0xFFFFFFFFFFFFLL))
            break;
          v80 = ((_DWORD)v80 + v83) & v79;
          v81 = *(unsigned __int8 *)(v76 + v80);
          ++v83;
          if (!*(_BYTE *)(v76 + v80))
            goto LABEL_108;
        }
        a6 = (v84 >> 16) & 0xFF00000000 | HIBYTE(v84);
      }
      else
      {
        if ((v78 & 0x20) != 0)
          v78 = *(_DWORD *)(v18 + 32);
        v86 = *(_DWORD *)(v74 + 12);
        v87 = v86 & (v78 >> 8);
        v88 = *(_DWORD *)(v76 + 4 * v87);
        if (!v88)
          goto LABEL_108;
        v89 = v76 + 4 * v77;
        v90 = 1;
        while (1)
        {
          v91 = (v88 - 1);
          if (v18 == *(_QWORD *)(v89 + 16 * v91))
            break;
          v87 = (v87 + v90) & v86;
          v88 = *(_DWORD *)(v76 + 4 * v87);
          ++v90;
          if (!v88)
            goto LABEL_108;
        }
        a6 = *(unsigned int *)(v89 + 16 * v91 + 8) | ((unint64_t)*(unsigned __int8 *)(v89 + 16 * v91 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v96 = v71 + 16;
          v97 = a6 << 32;
        }
        else
        {
          v96 = *(_QWORD *)(v71 + 8) - 8;
          v97 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v96 + (v97 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v98 = *(unsigned __int8 *)(a4 + 5);
          if (v98 != 5)
          {
            if (v98 != 6)
              goto LABEL_141;
            v143 = *(_DWORD *)(v73 + 16) & 3;
            v144 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v146 = *(int8x16_t ***)(a4 + 24);
              v145 = *(_QWORD *)(a4 + 32);
              v344 = *(WTF::StringImpl **)(a4 + 8);
              v345 = v144;
              LODWORD(v346) = HIDWORD(a6);
              v348 = (_DWORD *)v71;
              goto LABEL_217;
            }
            v344 = *(WTF::StringImpl **)(a4 + 8);
            v345 = v144;
            LODWORD(v346) = HIDWORD(a6);
            v348 = (_DWORD *)v71;
LABEL_280:
            BYTE1(v349[1]) = 3;
            if (v143 != 2)
              LOBYTE(v349[1]) = 1;
            goto LABEL_143;
          }
          v123 = (unsigned int *)v71;
          v124 = v66;
LABEL_174:
          JSC::JSObject::fillGetterPropertySlot(v123, v124, (uint64_t)&v344, a4, a5, a6);
          goto LABEL_143;
        }
LABEL_141:
        v344 = (WTF::StringImpl *)a4;
        v348 = (_DWORD *)v71;
LABEL_142:
        v346 = __PAIR64__(a6, a5);
        LOWORD(v349[1]) = 257;
        goto LABEL_143;
      }
LABEL_108:
      if ((*v68 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v71, (JSC::VM *)v66, v18, (uint64_t)&v344) & 1) != 0)
      {
        goto LABEL_143;
      }
      v70 = *(_QWORD *)(v73 + 48);
      if (!v70)
        v70 = *(_QWORD *)(v71 + 16);
      if ((v70 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v70 + 5) < 0x17u)
      {
        if (v18)
        {
          v92 = *(_DWORD *)(v18 + 16);
          if ((v92 & 0x20) == 0)
          {
            v93 = *(_BYTE **)(v18 + 8);
            v94 = *(unsigned int *)(v18 + 4);
            if ((v92 & 4) != 0)
            {
              if ((_DWORD)v94)
              {
                v95 = *v93 - 48;
                if (v95 <= 9 && (v94 < 2 || *v93 != 48))
                {
                  v252 = v93 + 1;
                  v253 = v94 - 1;
                  Index = 10;
                  while (v253)
                  {
                    if (v95 <= 0x19999999)
                    {
                      v254 = *v252 - 48;
                      if (v254 <= 9)
                      {
                        v104 = __CFADD__(v254, 10 * v95);
                        v95 = v254 + 10 * (_DWORD)v95;
                        ++v252;
                        --v253;
                        if (!v104)
                          continue;
                      }
                    }
                    goto LABEL_145;
                  }
                  goto LABEL_416;
                }
              }
            }
            else if ((_DWORD)v94)
            {
              v95 = *(unsigned __int16 *)v93 - 48;
              if (v95 <= 9 && (*(_WORD *)v93 != 48 || v94 <= 1))
              {
                v101 = (unsigned __int16 *)(v93 + 2);
                v102 = v94 - 1;
                Index = 10;
                while (v102)
                {
                  if (v95 <= 0x19999999)
                  {
                    v103 = *v101 - 48;
                    if (v103 <= 9)
                    {
                      v104 = __CFADD__(v103, 10 * v95);
                      v95 = v103 + 10 * (_DWORD)v95;
                      ++v101;
                      --v102;
                      if (!v104)
                        continue;
                    }
                  }
                  goto LABEL_145;
                }
LABEL_416:
                if ((_DWORD)v95 != -1)
                {
                  v255 = *(JSC::VM **)(a1 + 56);
                  Index = 10;
                  while (1)
                  {
                    v256 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                    v257 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v256 + 0x4C) + 0x70))(v10, a1, v95, &v344);
                    if (*((_DWORD *)v255 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v255, this, a3, a4, a5, a6, a7, a8))
                    {
                      break;
                    }
                    if ((v257 & 1) != 0)
                      goto LABEL_143;
                    if (BYTE2(v349[1]) == 3)
                    {
                      if (BYTE4(v349[1]))
                        break;
                      v258 = *(unsigned __int8 *)(v10 + 5);
                      if (v258 == 61)
                        goto LABEL_423;
                    }
                    else
                    {
                      v258 = *(unsigned __int8 *)(v10 + 5);
                      if (v258 == 61)
                      {
                        if (BYTE2(v349[1]) == 1)
                          break;
                        goto LABEL_423;
                      }
                    }
                    if ((v258 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, this, a3, a4, a5, a6, a7, a8) <= v95)
                    {
                      break;
                    }
LABEL_423:
                    if ((*(_WORD *)(v256 + 12) & 0x800) == 0 || BYTE2(v349[1]) == 3)
                    {
                      v259 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                      if (!v259)
                        v259 = *(_QWORD *)(v10 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v259 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v10, a1);
                      }
                      else
                      {
                        v259 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                        if (!v259)
                          v259 = *(_QWORD *)(v10 + 16);
                      }
                      if (*((_DWORD *)v255 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v255, this, a3, a4, a5, a6, a7, a8))
                      {
                        break;
                      }
                    }
                    if ((v259 & 0xFFFE000000000002) == 0)
                    {
                      v10 = v259;
                      if (*(unsigned __int8 *)(v259 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_145;
                  }
                }
              }
            }
          }
        }
LABEL_135:
        Index = 10;
        goto LABEL_145;
      }
      v68 = (_BYTE *)(v70 + 6);
      v71 = v70;
    }
    while ((*(_BYTE *)(v70 + 6) & 8) == 0);
  }
  if (v18)
  {
    v158 = *(_DWORD *)(v18 + 16);
    if ((v158 & 0x20) == 0)
    {
      v159 = *(_BYTE **)(v18 + 8);
      v160 = *(unsigned int *)(v18 + 4);
      if ((v158 & 4) != 0)
      {
        if ((_DWORD)v160)
        {
          v161 = *v159 - 48;
          if (v161 <= 9 && (v160 < 2 || *v159 != 48))
          {
            v323 = v159 + 1;
            v324 = v160 - 1;
            while (v324)
            {
              if (v161 <= 0x19999999)
              {
                v325 = *v323 - 48;
                if (v325 <= 9)
                {
                  v104 = __CFADD__(v325, 10 * v161);
                  v161 = v325 + 10 * (_DWORD)v161;
                  ++v323;
                  --v324;
                  if (!v104)
                    continue;
                }
              }
              goto LABEL_238;
            }
LABEL_548:
            if ((_DWORD)v161 != -1)
            {
              v326 = *(JSC::VM **)(a1 + 56);
              Index = 10;
              while (1)
              {
                v327 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v328 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v327 + 0x4C) + 0x70))(v10, a1, v161, &v344);
                v329 = v328;
                if (*((_DWORD *)v326 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v326, this, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v329) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_143;
                    goto LABEL_135;
                  }
                }
                else if ((v328 & 1) != 0)
                {
                  goto LABEL_143;
                }
                if (BYTE2(v349[1]) == 3)
                {
                  if (BYTE4(v349[1]))
                    goto LABEL_135;
                  v330 = *(unsigned __int8 *)(v10 + 5);
                  if (v330 == 61)
                    goto LABEL_555;
                }
                else
                {
                  v330 = *(unsigned __int8 *)(v10 + 5);
                  if (v330 == 61)
                  {
                    if (BYTE2(v349[1]) == 1)
                      goto LABEL_135;
                    goto LABEL_555;
                  }
                }
                if ((v330 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, this, a3, a4, a5, a6, a7, a8) <= v161)
                {
                  goto LABEL_135;
                }
LABEL_555:
                if ((*(_WORD *)(v327 + 12) & 0x800) == 0 || BYTE2(v349[1]) == 3)
                {
                  v331 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v331)
                    v331 = *(_QWORD *)(v10 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v331 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v10, a1);
                  }
                  else
                  {
                    v331 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v331)
                      v331 = *(_QWORD *)(v10 + 16);
                  }
                  if (*((_DWORD *)v326 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v326, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_135;
                  }
                }
                if ((v331 & 0xFFFE000000000002) == 0)
                {
                  v10 = v331;
                  if (*(unsigned __int8 *)(v331 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_145;
              }
            }
          }
        }
      }
      else if ((_DWORD)v160)
      {
        v161 = *(unsigned __int16 *)v159 - 48;
        if (v161 <= 9 && (*(_WORD *)v159 != 48 || v160 <= 1))
        {
          v174 = (unsigned __int16 *)(v159 + 2);
          v175 = v160 - 1;
          while (v175)
          {
            if (v161 <= 0x19999999)
            {
              v176 = *v174 - 48;
              if (v176 <= 9)
              {
                v104 = __CFADD__(v176, 10 * v161);
                v161 = v176 + 10 * (_DWORD)v161;
                ++v174;
                --v175;
                if (!v104)
                  continue;
              }
            }
            goto LABEL_238;
          }
          goto LABEL_548;
        }
      }
    }
  }
LABEL_238:
  v162 = *(JSC::VM **)(a1 + 56);
  Index = 10;
  while (1)
  {
    v163 = 16 * (*(_DWORD *)v70 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v70 + 6) & 8) == 0)
      break;
    v212 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x4C) + 0x68))(v70, a1, v18, &v344);
    if (*((_DWORD *)v162 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v162, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_135;
    if ((v212 & 1) != 0)
      goto LABEL_143;
    if (BYTE2(v349[1]) == 3)
    {
      if (BYTE4(v349[1]))
        goto LABEL_135;
      v213 = *(unsigned __int8 *)(v70 + 5);
      if (v213 != 61)
      {
LABEL_346:
        if (!v18)
          goto LABEL_245;
        if ((v213 - 50) < 0xFFFFFFF5)
          goto LABEL_245;
        v214 = *(_DWORD *)(v18 + 16);
        if ((v214 & 0x20) != 0)
          goto LABEL_245;
        v215 = *(unsigned int *)(v18 + 4);
        if (!(_DWORD)v215)
          goto LABEL_245;
        v216 = *(unsigned __int8 **)(v18 + 8);
        if ((v214 & 4) == 0)
        {
          v217 = *(unsigned __int16 *)v216;
          if ((_DWORD)v215 == 1)
            goto LABEL_352;
          if (v217 == 45)
          {
            v217 = *((unsigned __int16 *)v216 + 1);
            goto LABEL_367;
          }
          if ((v217 - 48) >= 0xA && ((_DWORD)v215 != 8 || v217 != 73))
          {
LABEL_386:
            if ((_DWORD)v215 != 3 || v217 != 78)
              goto LABEL_245;
          }
LABEL_376:
          v343 = v343 & 0xFFFFFF0000000000 | v215 | ((unint64_t)((v214 >> 2) & 1) << 32);
          JSC::jsToNumber(v216, v343);
          WTF::numberToString(v355, v236);
          if (WTF::equal(v18, (unint64_t)v355, v237))
            goto LABEL_135;
          goto LABEL_245;
        }
        v217 = *v216;
        if ((_DWORD)v215 == 1)
        {
LABEL_352:
          if ((v217 - 48) < 0xA)
            goto LABEL_135;
          goto LABEL_245;
        }
        if (v217 == 45)
        {
          v217 = v216[1];
LABEL_367:
          if ((v217 - 48) < 0xA)
          {
            if ((_DWORD)v215 == 2)
              goto LABEL_135;
            goto LABEL_376;
          }
          if ((_DWORD)v215 != 9)
            goto LABEL_245;
        }
        else
        {
          if ((v217 - 48) < 0xA)
            goto LABEL_376;
          if ((_DWORD)v215 != 8)
            goto LABEL_386;
        }
        if (v217 != 73)
          goto LABEL_245;
        goto LABEL_376;
      }
    }
    else
    {
      v213 = *(unsigned __int8 *)(v70 + 5);
      if (v213 != 61)
        goto LABEL_346;
      if (BYTE2(v349[1]) == 1)
        goto LABEL_135;
    }
LABEL_245:
    if ((*(_WORD *)(v163 + 12) & 0x800) == 0)
    {
      v166 = *(_DWORD *)v70;
LABEL_247:
      v167 = *(_QWORD *)(16 * (v166 & 0xFFFFFFFE) + 0x30);
      if (!v167)
        v167 = *(_QWORD *)(v70 + 16);
      goto LABEL_249;
    }
    v166 = *(_DWORD *)v70;
    if (BYTE2(v349[1]) == 3)
      goto LABEL_247;
    v208 = 16 * (v166 & 0xFFFFFFFE);
    if ((*(_WORD *)(v208 + 12) & 0x800) != 0)
    {
      v167 = (*(uint64_t (**)(unint64_t, uint64_t))(16 * *(unsigned int *)(v208 + 76) + 0xB0))(v70, a1);
    }
    else
    {
      v167 = *(_QWORD *)(v208 + 48);
      if (!v167)
        v167 = *(_QWORD *)(v70 + 16);
    }
    if (*((_DWORD *)v162 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v162, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_135;
LABEL_249:
    if ((v167 & 0xFFFE000000000002) == 0)
    {
      v70 = v167;
      if (*(unsigned __int8 *)(v167 + 5) > 0x16u)
        continue;
    }
    goto LABEL_145;
  }
  if (!(_DWORD)v69
    || (v69 & ~*(_DWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE)), v162, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v164)|| (v355[0] = (WTF::StringImpl *)v18, v165 = JSC::PropertyTable::get(v164, (uint64_t *)v355), a6 = v165, (_DWORD)v165 == -1))
  {
    if ((*(_BYTE *)(v70 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v70, v162, v18, (uint64_t)&v344) & 1) != 0)
    {
      goto LABEL_143;
    }
    goto LABEL_245;
  }
  a5 = HIDWORD(v165);
  if ((int)v165 <= 63)
  {
    v169 = v70 + 16;
    v170 = v165 << 32;
  }
  else
  {
    v169 = *(_QWORD *)(v70 + 8) - 8;
    v170 = 0x3F00000000 - (v165 << 32);
  }
  a4 = *(_QWORD *)(v169 + (v170 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_260:
    v344 = (WTF::StringImpl *)a4;
    v348 = (_DWORD *)v70;
    goto LABEL_142;
  }
  v171 = *(unsigned __int8 *)(a4 + 5);
  if (v171 == 5)
  {
    v123 = (unsigned int *)v70;
    v124 = (uint64_t)v162;
    goto LABEL_174;
  }
  if (v171 != 6)
    goto LABEL_260;
  v143 = *(_DWORD *)(v163 + 16) & 3;
  v207 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v344 = *(WTF::StringImpl **)(a4 + 8);
    v345 = v207;
    LODWORD(v346) = HIDWORD(v165);
    v348 = (_DWORD *)v70;
    goto LABEL_280;
  }
  v146 = *(int8x16_t ***)(a4 + 24);
  v145 = *(_QWORD *)(a4 + 32);
  v344 = *(WTF::StringImpl **)(a4 + 8);
  v345 = v207;
  LODWORD(v346) = HIDWORD(v165);
  v348 = (_DWORD *)v70;
LABEL_217:
  BYTE1(v349[1]) = 3;
  if (v143 != 2)
    LOBYTE(v349[1]) = 1;
  BYTE3(v349[1]) = 1;
  v352 = v146;
  v353 = v145;
LABEL_143:
  if (BYTE1(v349[1]) == 1)
  {
    Index = (unint64_t)v344;
  }
  else
  {
    if (BYTE1(v349[1]) == 2)
    {
      v114 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v344, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v126 = (unint64_t)v348;
      v127 = *(_QWORD *)(16 * (*v348 & 0xFFFFFFFE) + 0x28);
      if ((v346 & 0x20) != 0)
        v126 = (unint64_t)v347;
      if (BYTE3(v349[1]) != 1)
        goto LABEL_196;
      if ((v126 & 0xFFFE000000000002) != 0)
        goto LABEL_380;
      v128 = *(unsigned int *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x4C);
      v129 = *(_DWORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x4C) != 0;
      v130 = 16 * v128;
      if ((_DWORD)v128)
        v131 = v352 == (int8x16_t **)v130;
      else
        v131 = 1;
      if (!v131)
      {
        do
        {
          v130 = *(_QWORD *)(v130 + 16);
          v129 = v130 != 0;
        }
        while ((int8x16_t **)v130 != v352 && v130 != 0);
      }
      if (!v129)
      {
LABEL_380:
        v355[0] = *(WTF::StringImpl **)(a1 + 56);
        v114 = JSC::throwDOMAttributeGetterTypeError(v127, v355, v352, (WTF::StringImpl *)v18);
      }
      else
      {
LABEL_196:
        v114 = ((uint64_t (*)(unint64_t))v344)(v127);
      }
    }
    Index = v114;
  }
LABEL_145:
  if (v351)
  {
    v99 = *(_DWORD *)(v350 + 4);
    if (!v99)
    {
      __break(0xC471u);
      JUMPOUT(0x1987AAD90);
    }
    *(_DWORD *)(v350 + 4) = v99 - 1;
  }
LABEL_148:
  if (v18)
  {
    v49 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
LABEL_150:
      *(_DWORD *)v18 = v49;
    }
  }
  return Index;
}

unint64_t JSC::JSValue::tryGetAsUint32Index(unint64_t this)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  double v6;
  unsigned int v7;

  if (this >= 0xFFFE000000000000 && (this & 0x80000000) == 0)
    return this | 0x100000000;
  v2 = this >> 49;
  if (this >> 49)
  {
    v2 = 0;
    v6 = (double)(int)this;
    if (this <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v6 = this - 0x2000000000000;
    v7 = v6;
    LOBYTE(v3) = 0;
    if (v6 == -1)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      if (v6 == (double)v7)
      {
        v4 = v7 & 0xFFFFFF00;
        v2 = 0x100000000;
        v3 = v6;
      }
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    v4 = 0;
  }
  return v2 | v4 | v3;
}

uint64_t operationGetByValWithThisGaveUp(unint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IndexQuickly;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t Index;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  JSC::VM *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  int v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  _QWORD *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  _QWORD *v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  WTF::StringImpl **v139;
  WTF::StringImpl *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int8x16_t **v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  _WORD *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  JSC::VM *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  unsigned __int16 *v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  JSC::VM *v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  unsigned __int8 *v207;
  int v208;
  JSC::VM *v209;
  unint64_t NotAnObjectError;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t **v217;
  double v218;
  const unsigned __int8 *v219;
  BOOL isMappedArgument;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 *v223;
  unsigned int v224;
  JSC::VM *v225;
  uint64_t v226;
  char v227;
  int v228;
  uint64_t v229;
  int v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  _QWORD *v236;
  uint64_t v237;
  WTF::StringImpl **v238;
  WTF::StringImpl **v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  int v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  char v280;
  uint64_t v281;
  int v282;
  _WORD *v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned __int16 *v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  uint64_t v296;
  _DWORD *v297;
  unsigned int v298;
  uint64_t v299;
  unsigned __int8 *v300;
  unsigned int v301;
  unint64_t v302;
  uint64_t (*v303)(unint64_t);
  uint64_t v304;
  unint64_t v305;
  _DWORD *v306;
  _DWORD *v307;
  _QWORD v308[2];
  uint64_t v309;
  char v310;
  int8x16_t **v311;
  uint64_t v312;
  unint64_t v313;
  unsigned __int8 *v314;
  WTF::StringImpl *v315[18];
  uint64_t vars0;

  v9 = a5;
  v10 = a3;
  v11 = a2;
  v12 = this;
  v315[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v13 = *(JSC::JSGlobalObject **)(a4 + 56);
  v14 = vars0;
  *(_QWORD *)(*((_QWORD *)v13 + 7) + 40) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a4 + 112);
  *(_WORD *)(a4 + 129) |= 2u;
  v313 = this;
  v15 = *((_QWORD *)v13 + 7);
  if (((a2 | this) & 0xFFFE000000000002) != 0)
    goto LABEL_20;
  if (*(_BYTE *)(a2 + 5) != 2)
    goto LABEL_20;
  v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (((*(_DWORD *)(v16 + 0x10) | *(unsigned __int8 *)(v16 + 0xA)) & 8) != 0)
    goto LABEL_20;
  v17 = *(_QWORD *)(a2 + 8);
  if ((v17 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a2, v13);
  }
  else
  {
    if ((*(_BYTE *)(v17 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v17 += 2;
      goto LABEL_7;
    }
    WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a2 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v315);
  }
  v17 = (unint64_t)v315[0];
LABEL_7:
  if (*(_DWORD *)(v15 + 80))
  {
    v168 = *(_DWORD *)(v15 + 80);
    if ((v168 & 0x27) != 0 && (v168 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
    {
      IndexQuickly = 0;
      if (!v17)
        return IndexQuickly;
      goto LABEL_16;
    }
  }
  if (v17)
  {
    if ((v17 >> 4))
    {
      if (((v17 >> 4) & ~*(_DWORD *)(v16 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v16, (JSC::VM *)v15, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v18)
        {
          v315[0] = (WTF::StringImpl *)v17;
          v19 = JSC::PropertyTable::get(v18, (uint64_t *)v315);
          if ((_DWORD)v19 != -1)
          {
            if ((int)v19 <= 63)
            {
              v20 = v12 + 16;
              v21 = v19 << 32;
            }
            else
            {
              v20 = *(_QWORD *)(v12 + 8) - 8;
              v21 = 0x3F00000000 - (v19 << 32);
            }
            IndexQuickly = *(_QWORD *)(v20 + (v21 >> 29));
            if (IndexQuickly)
            {
LABEL_16:
              if (*(_DWORD *)v17 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
              }
              else
              {
                *(_DWORD *)v17 -= 2;
              }
              return IndexQuickly;
            }
          }
        }
      }
    }
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
LABEL_20:
  a9.i64[0] = 0xFFFFFFFF00000000;
  v305 = 0xFFFFFFFF00000000;
  LOBYTE(v309) = 0;
  v310 = 0;
  v311 = 0;
  v312 = 0;
  v307 = 0;
  memset(v308, 0, 13);
  v306 = (_DWORD *)v10;
  if (v11 >= 0xFFFE000000000000 && (v11 & 0x80000000) == 0)
  {
    v23 = v11;
    goto LABEL_23;
  }
  if (v11 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v11 - 0x2000000000000;
    v23 = *(double *)a9.i64;
    if ((_DWORD)v23 != -1 && *(double *)a9.i64 == (double)v23)
    {
LABEL_23:
      if ((v12 & 0xFFFE000000000002) != 0)
        goto LABEL_153;
      v24 = *(unsigned __int8 *)(v12 + 5);
      if (v24 == 2)
      {
        v25 = *(_QWORD *)(v12 + 8);
        if ((v25 & 1) != 0)
          v26 = (_DWORD *)(v12 + 16);
        else
          v26 = (_DWORD *)(v25 + 4);
        if (*v26 > v23)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)v12, v13, v23, a4, a5, a6, a7, a8, a9);
LABEL_30:
          IndexQuickly = Index;
          goto LABEL_97;
        }
LABEL_114:
        if (!v9)
          goto LABEL_116;
        goto LABEL_115;
      }
      if (v24 <= 0x16)
      {
        v72 = (JSC::VM *)*((_QWORD *)v13 + 7);
        goto LABEL_144;
      }
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v12, v23, v9);
      if (IndexQuickly)
        goto LABEL_97;
      if ((*(_BYTE *)(v12 + 4) & 0xF) == 9 && v23 < *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8))
      {
        v66 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28);
        v67 = *(unsigned __int8 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 8);
        v68 = (v67 & 0x10) != 0 ? ((v67 & 0xE) + 10) >> 1 : (v67 >> 1) & 7;
        v69 = *(_DWORD *)(v66 + 4 * v68 + 852);
        v70 = v69 ? 16 * (v69 & 0xFFFFFFFE) : 0;
        if (v70 == 16 * (*(_DWORD *)v12 & 0xFFFFFFFE))
        {
          v145 = *(_QWORD *)(v66 + 2304);
          v146 = (v145 & 1) != 0 ? (v145 >> 1) & 3 : *(unsigned __int8 *)(v145 + 4);
          if (v146 != 2)
          {
LABEL_116:
            v24 = *(unsigned __int8 *)(v12 + 5);
            v72 = (JSC::VM *)*((_QWORD *)v13 + 7);
            if (v24 > 0x16)
            {
LABEL_117:
              IndexQuickly = 10;
              while (1)
              {
                v73 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
                v75 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v73 + 0x4C) + 0x70))(v12, v13, v23, &v303);
                if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72, v74, a3, a4, a5, a6, a7, a8))
                  goto LABEL_206;
                if ((v75 & 1) != 0)
                  goto LABEL_155;
                if (BYTE2(v308[1]) == 3)
                {
                  if (BYTE4(v308[1]))
                    goto LABEL_206;
                  v76 = *(unsigned __int8 *)(v12 + 5);
                  if (v76 == 61)
                    goto LABEL_123;
                }
                else
                {
                  v76 = *(unsigned __int8 *)(v12 + 5);
                  if (v76 == 61)
                  {
                    if (BYTE2(v308[1]) == 1)
                      goto LABEL_206;
                    goto LABEL_123;
                  }
                }
                if ((v76 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v12, v74, a3, a4, a5, a6, a7, a8) <= v23)
                {
                  goto LABEL_206;
                }
LABEL_123:
                if ((*(_WORD *)(v73 + 12) & 0x800) == 0 || BYTE2(v308[1]) == 3)
                {
                  v77 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                  if (!v77)
                    v77 = *(_QWORD *)(v12 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v77 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v12, v13);
                  }
                  else
                  {
                    v77 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                    if (!v77)
                      v77 = *(_QWORD *)(v12 + 16);
                  }
                  if (*((_DWORD *)v72 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v72, v74, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_206;
                  }
                }
                if ((v77 & 0xFFFE000000000002) == 0)
                {
                  v12 = v77;
                  if (*(unsigned __int8 *)(v77 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_97;
              }
            }
LABEL_144:
            if (v24 == 2)
            {
              v91 = *(_QWORD *)(v12 + 8);
              if ((v91 & 1) != 0)
                v92 = (_DWORD *)(v12 + 16);
              else
                v92 = (_DWORD *)(v91 + 4);
              if (*v92 <= v23
                || (v93 = JSC::JSString::getIndex((JSC::JSString *)v12, v13, v23, a4, a5, a6, a7, a8, a9),
                    *((_DWORD *)v72 + 20))
                && JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, a3, a4, a5, a6, a7, a8))
              {
                v94 = 0;
              }
              else
              {
                v303 = (uint64_t (*)(unint64_t))v93;
                LODWORD(v305) = 10;
                v307 = 0;
                v94 = 1;
                BYTE1(v308[1]) = 1;
              }
              if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, a3, a4, a5, a6, a7, a8))
                goto LABEL_267;
              if (v94)
              {
LABEL_155:
                if (BYTE1(v308[1]) == 1)
                {
                  IndexQuickly = (uint64_t)v303;
                  goto LABEL_97;
                }
                if (BYTE1(v308[1]) != 2)
                {
                  v217 = (uint64_t **)*((_QWORD *)v13 + 7);
                  JSC::Identifier::from(v217, v23, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)v315);
                  IndexQuickly = JSC::PropertySlot::customGetter((uint64_t)&v303, (JSC::VM *)v217, v315[0]);
                  v82 = v315[0];
                  v315[0] = 0;
                  if (!v82)
                    goto LABEL_97;
                  if (*(_DWORD *)v82 != 2)
                  {
                    *(_DWORD *)v82 -= 2;
                    goto LABEL_97;
                  }
                  goto LABEL_142;
                }
                Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v303, v13, a3, a4, a5, a6, a7, a8);
                goto LABEL_30;
              }
            }
LABEL_153:
            v95 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v313, (unint64_t)v13);
            if (v95)
            {
              v12 = v95;
              v72 = (JSC::VM *)*((_QWORD *)v13 + 7);
              goto LABEL_117;
            }
LABEL_267:
            IndexQuickly = 0;
            goto LABEL_97;
          }
        }
      }
      v71 = *(unsigned __int8 *)(v12 + 5);
      if (v71 == 33)
      {
        if (*(_DWORD *)(v12 + 32) <= v23)
          goto LABEL_114;
        v174 = *(_QWORD *)(v12 + 40);
        if (!v174)
          goto LABEL_116;
        if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
          goto LABEL_114;
        if (!v9 || (v174 & 0x3FFFFFFFFLL) == -qword_1ECF4C038)
          goto LABEL_116;
      }
      else
      {
        if (v71 != 34)
          goto LABEL_114;
        isMappedArgument = JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v12, v23);
        if (!v9 || isMappedArgument)
          goto LABEL_116;
      }
LABEL_115:
      *(_DWORD *)(v9 + 4) |= 2u;
      goto LABEL_116;
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      if (v9)
      {
        *(_DWORD *)(v9 + 4) |= 2u;
        if (v11 == 0xFFFE0000FFFFFFFFLL && v12 && (*(_BYTE *)(v12 + 5) & 0xFE) == 0x24)
        {
          v122 = *(_QWORD **)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28);
          v123 = v122[288];
          v124 = (v123 & 1) != 0 ? (v123 >> 1) & 3 : *(unsigned __int8 *)(v123 + 4);
          if (v124 != 2)
          {
            v125 = v122[287];
            v126 = (v125 & 1) != 0 ? (v125 >> 1) & 3 : *(unsigned __int8 *)(v125 + 4);
            if (v126 != 2)
            {
              v127 = *(unsigned __int8 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 8);
              v128 = (v127 & 0x10) != 0 ? ((v127 & 0xE) + 10) >> 1 : (v127 >> 1) & 7;
              v129 = *((_DWORD *)v122 + v128 + 213);
              v130 = v129 ? 16 * (v129 & 0xFFFFFFFE) : 0;
              if (v130 == 16 * (*(_DWORD *)v12 & 0xFFFFFFFE))
                goto LABEL_206;
              v221 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
              if (!v221)
                v221 = *(_QWORD *)(v12 + 16);
              if (v221 == v122[84] && !*(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x20))
              {
LABEL_206:
                IndexQuickly = 10;
                goto LABEL_97;
              }
            }
          }
        }
      }
    }
  }
  if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v209 = (JSC::VM *)*((_QWORD *)v13 + 7);
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v13, v12);
    JSC::VM::throwException(v209, v13, NotAnObjectError, v211, v212, v213, v214, v215);
  }
  if (*(_DWORD *)(v15 + 80))
  {
    v172 = *(_DWORD *)(v15 + 80);
    if ((v172 & 0x27) != 0 && (v172 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_267;
  }
  v28 = *((_QWORD *)v13 + 7);
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v11 + 5) == 2)
    {
      v29 = *(_QWORD *)(v11 + 8);
      if ((v29 & 1) == 0)
      {
        if ((*(_BYTE *)(v29 + 16) & 0x10) == 0)
        {
          v131 = *(WTF::StringImpl **)(v28 + 64768);
          if (v131 != (WTF::StringImpl *)v29)
          {
            *(_DWORD *)v29 += 2;
            *(_QWORD *)(v28 + 64768) = v29;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
              {
                WTF::StringImpl::~StringImpl(v131, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
              }
              else
              {
                *(_DWORD *)v131 -= 2;
              }
            }
            v132 = *(WTF::StringImpl **)(v11 + 8);
            if (v132)
            {
              if ((*((_BYTE *)v132 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v132 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v132, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v315);
                v132 = v315[0];
              }
            }
            v133 = *(WTF::StringImpl **)(v28 + 64776);
            *(_QWORD *)(v28 + 64776) = v132;
            if (v133)
            {
              if (*(_DWORD *)v133 == 2)
              {
                WTF::StringImpl::~StringImpl(v133, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v133 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
          {
            v134 = *(WTF::StringImpl **)(v28 + 64776);
            *(_DWORD *)v134 += 2;
            v315[0] = v134;
            __dmb(0xAu);
            v135 = *(WTF::StringImpl **)(v11 + 8);
            *(WTF::StringImpl **)(v11 + 8) = v315[0];
            v315[0] = v135;
            v136 = (_QWORD *)(v28 + 808);
            v137 = *(unsigned int *)(v28 + 820);
            if ((_DWORD)v137 == *(_DWORD *)(v28 + 816))
            {
              v139 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)v315);
              v137 = *(unsigned int *)(v28 + 820);
              v138 = (WTF::StringImpl **)(*(_QWORD *)(v28 + 808) + 8 * v137);
              v135 = *v139;
            }
            else
            {
              v138 = (WTF::StringImpl **)(*v136 + 8 * v137);
              v139 = v315;
            }
            *v139 = 0;
            *v138 = v135;
            *(_DWORD *)(v28 + 820) = v137 + 1;
            v140 = v315[0];
            v315[0] = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2)
              {
                WTF::StringImpl::~StringImpl(v140, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
              }
              else
              {
                *(_DWORD *)v140 -= 2;
              }
            }
          }
          v29 = *(_QWORD *)(v28 + 64776);
        }
        goto LABEL_39;
      }
LABEL_467:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, v13);
      if (*(_DWORD *)(v28 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, a2, a3, a4, a5, a6, a7, a8))
      {
        v29 = 0;
        v241 = v315[0];
        v315[0] = 0;
        if (!v241)
          goto LABEL_41;
      }
      else
      {
        v29 = (unint64_t)v315[0];
        if (!v315[0])
          goto LABEL_41;
        *(_DWORD *)v315[0] += 2;
        v315[0] = 0;
        v241 = (WTF::StringImpl *)v29;
      }
      if (*(_DWORD *)v241 != 2)
      {
        *(_DWORD *)v241 -= 2;
        goto LABEL_41;
      }
LABEL_475:
      WTF::StringImpl::~StringImpl(v241, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
      goto LABEL_41;
    }
    v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v314 = (unsigned __int8 *)v11;
  if (!*(_DWORD *)(v28 + 80))
  {
LABEL_449:
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v230 = *(unsigned __int8 *)(v11 + 5);
      if (v230 == 2)
        goto LABEL_451;
      if (v230 == 4)
      {
        v29 = *(_QWORD *)(v11 + 8);
        v242 = *(_DWORD *)v29;
        *(_DWORD *)v29 += 4;
        v30 = v242 + 2;
        if (v30)
          goto LABEL_40;
        v241 = (WTF::StringImpl *)v29;
        goto LABEL_475;
      }
    }
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase(&v314, (uint64_t)v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_451:
    if (*(_DWORD *)(v28 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, a2, a3, a4, a5, a6, a7, a8))
    {
      v29 = 0;
      goto LABEL_41;
    }
    v29 = *(_QWORD *)(v11 + 8);
    v28 = *((_QWORD *)v13 + 7);
    if ((v29 & 1) == 0)
    {
      if ((*(_BYTE *)(v29 + 16) & 0x10) == 0)
      {
        v231 = *(WTF::StringImpl **)(v28 + 64768);
        if (v231 != (WTF::StringImpl *)v29)
        {
          *(_DWORD *)v29 += 2;
          *(_QWORD *)(v28 + 64768) = v29;
          if (v231)
          {
            if (*(_DWORD *)v231 == 2)
            {
              WTF::StringImpl::~StringImpl(v231, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v267, v268, v269, v270, v271, v272, v273, v274);
            }
            else
            {
              *(_DWORD *)v231 -= 2;
            }
          }
          v232 = *(WTF::StringImpl **)(v11 + 8);
          if (v232)
          {
            if ((*((_BYTE *)v232 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v232 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v232, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v315);
              v232 = v315[0];
            }
          }
          v233 = *(WTF::StringImpl **)(v28 + 64776);
          *(_QWORD *)(v28 + 64776) = v232;
          if (v233)
          {
            if (*(_DWORD *)v233 == 2)
            {
              WTF::StringImpl::~StringImpl(v233, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
            }
            else
            {
              *(_DWORD *)v233 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v234 = *(WTF::StringImpl **)(v28 + 64776);
          *(_DWORD *)v234 += 2;
          v315[0] = v234;
          __dmb(0xAu);
          v235 = *(WTF::StringImpl **)(v11 + 8);
          *(WTF::StringImpl **)(v11 + 8) = v315[0];
          v315[0] = v235;
          v236 = (_QWORD *)(v28 + 808);
          v237 = *(unsigned int *)(v28 + 820);
          if ((_DWORD)v237 == *(_DWORD *)(v28 + 816))
          {
            v239 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v236, v237 + 1, (unint64_t)v315);
            v237 = *(unsigned int *)(v28 + 820);
            v238 = (WTF::StringImpl **)(*(_QWORD *)(v28 + 808) + 8 * v237);
            v235 = *v239;
          }
          else
          {
            v238 = (WTF::StringImpl **)(*v236 + 8 * v237);
            v239 = v315;
          }
          *v239 = 0;
          *v238 = v235;
          *(_DWORD *)(v28 + 820) = v237 + 1;
          v240 = v315[0];
          v315[0] = 0;
          if (v240)
          {
            if (*(_DWORD *)v240 == 2)
            {
              WTF::StringImpl::~StringImpl(v240, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
            }
            else
            {
              *(_DWORD *)v240 -= 2;
            }
          }
        }
        v29 = *(_QWORD *)(v28 + 64776);
      }
      goto LABEL_39;
    }
    goto LABEL_467;
  }
  if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, a2, a3, a4, a5, a6, a7, a8))
  {
    v11 = (unint64_t)v314;
    goto LABEL_449;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v28 + 41952) + 8);
  if (v29)
  {
LABEL_39:
    v30 = *(_DWORD *)v29 + 2;
LABEL_40:
    *(_DWORD *)v29 = v30;
  }
LABEL_41:
  if (*(_DWORD *)(v15 + 80))
  {
    v173 = *(_DWORD *)(v15 + 80);
    if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
    {
      IndexQuickly = 0;
      goto LABEL_94;
    }
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v31 = *((_QWORD *)v13 + 7);
    v32 = *(unsigned __int8 *)(v12 + 5);
    if (v32 > 0x16)
      goto LABEL_44;
    if (v32 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v31 + 41952) + 1768) == v29)
      {
        v275 = *(_QWORD *)(v12 + 8);
        if ((v275 & 1) != 0)
          v276 = (unsigned int *)(v12 + 16);
        else
          v276 = (unsigned int *)(v275 + 4);
        v277 = *v276;
        if ((v277 & 0x80000000) != 0)
          v278 = COERCE__INT64((double)v277) + 0x2000000000000;
        else
          v278 = v277 | 0xFFFE000000000000;
        v279 = 14;
        goto LABEL_503;
      }
      if (!v29 || (v282 = *(_DWORD *)(v29 + 16), (v282 & 0x20) != 0))
      {
LABEL_517:
        v280 = 0;
LABEL_504:
        if (*(_DWORD *)(v31 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_552;
        }
        if ((v280 & 1) != 0)
          goto LABEL_92;
        goto LABEL_506;
      }
      v283 = *(_WORD **)(v29 + 8);
      v284 = *(unsigned int *)(v29 + 4);
      if ((v282 & 4) == 0)
      {
        if ((_DWORD)v284)
        {
          v285 = (unsigned __int16)*v283 - 48;
          if (v285 <= 9 && (*v283 != 48 || v284 <= 1))
          {
            v289 = v283 + 1;
            v290 = v284 - 1;
            while (v290)
            {
              if (v285 > 0x19999999)
                goto LABEL_513;
              v291 = *v289 - 48;
              if (v291 > 9)
                goto LABEL_513;
              v286 = 0;
              LOBYTE(v284) = 0;
              v287 = 0;
              v81 = __CFADD__(v291, 10 * v285);
              v285 = v291 + 10 * v285;
              ++v289;
              --v290;
              if (v81)
                goto LABEL_515;
            }
            v287 = v285 & 0xFFFFFF00;
            v286 = 0x100000000;
            if (v285 == -1)
            {
              v286 = 0;
              LOBYTE(v284) = 0;
            }
            else
            {
              LOBYTE(v284) = v285;
            }
            if (v285 == -1)
              v287 = 0;
            goto LABEL_515;
          }
LABEL_513:
          v286 = 0;
          LOBYTE(v284) = 0;
        }
        else
        {
          v286 = 0;
        }
        v287 = 0;
LABEL_515:
        v288 = v284;
LABEL_516:
        if ((v286 & 0x100000000) != 0)
        {
          a3 = v287 | v288;
          v296 = *(_QWORD *)(v12 + 8);
          v297 = (_DWORD *)((v296 & 1) != 0 ? v12 + 16 : v296 + 4);
          if (*v297 > a3)
          {
            v278 = JSC::JSString::getIndex((JSC::JSString *)v12, v13, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v31 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, a2, a3, a4, a5, a6, a7, a8))
            {
              v279 = 10;
LABEL_503:
              v303 = (uint64_t (*)(unint64_t))v278;
              LODWORD(v305) = v279;
              v307 = 0;
              v280 = 1;
              BYTE1(v308[1]) = 1;
              goto LABEL_504;
            }
          }
        }
        goto LABEL_517;
      }
      if ((_DWORD)v284)
      {
        v298 = *(unsigned __int8 *)v283 - 48;
        if (v298 <= 9 && (v284 < 2 || *(_BYTE *)v283 != 48))
        {
          v299 = v284 - 1;
          v300 = (unsigned __int8 *)v283 + 1;
          while (v299)
          {
            if (v298 > 0x19999999)
              goto LABEL_604;
            v301 = *v300 - 48;
            if (v301 > 9)
              goto LABEL_604;
            v288 = 0;
            LOBYTE(v284) = 0;
            v286 = 0;
            v81 = __CFADD__(v301, 10 * v298);
            v298 = v301 + 10 * v298;
            --v299;
            ++v300;
            if (v81)
              goto LABEL_606;
          }
          if (v298 == -1)
            v288 = 0;
          else
            v288 = v298 & 0xFFFFFF00;
          if (v298 == -1)
            LOBYTE(v284) = 0;
          else
            LOBYTE(v284) = v298;
          if (v298 == -1)
            v286 = 0;
          else
            v286 = 0x100000000;
          goto LABEL_606;
        }
LABEL_604:
        v288 = 0;
        LOBYTE(v284) = 0;
      }
      else
      {
        v288 = 0;
      }
      v286 = 0;
LABEL_606:
      v287 = v284;
      goto LABEL_516;
    }
  }
LABEL_506:
  v281 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v313, (unint64_t)v13);
  if (!v281)
    goto LABEL_552;
  v12 = v281;
  v31 = *((_QWORD *)v13 + 7);
LABEL_44:
  v33 = (_BYTE *)(v12 + 6);
  v34 = v29 >> 4;
  v35 = v12;
  if ((*(_BYTE *)(v12 + 6) & 8) == 0)
  {
    v36 = v12;
    do
    {
      v37 = *(_DWORD *)v36 & 0xFFFFFFFE;
      v38 = 16 * v37;
      if (!(_DWORD)v34 || (v34 & ~*(_DWORD *)(16 * v37 + 0x20)) != 0)
        goto LABEL_57;
      v39 = *(_QWORD *)(16 * v37 + 0x58);
      if (!v39)
      {
        v50 = *(_QWORD *)(16 * v37 + 0x40);
        if (!v50 || *(_BYTE *)(v50 + 5) != 1 && *(_DWORD *)(v50 + 80) < 2u)
          goto LABEL_57;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v38, (JSC::VM *)v31, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v39)
          goto LABEL_57;
      }
      if (!*(_DWORD *)(v39 + 24))
        goto LABEL_57;
      v40 = *(_QWORD *)(v39 + 16);
      v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
      v42 = *(unsigned int *)(v39 + 8);
      v43 = *(_DWORD *)(v29 + 16);
      if ((v40 & 1) != 0)
      {
        if ((v43 & 0x20) != 0)
          v43 = *(_DWORD *)(v29 + 32);
        v44 = *(_DWORD *)(v39 + 12);
        v45 = (v43 >> 8) & *(_QWORD *)&v44;
        v46 = *(unsigned __int8 *)(v41 + v45);
        if (!*(_BYTE *)(v41 + v45))
          goto LABEL_57;
        v47 = v41 + v42;
        v48 = 1;
        while (1)
        {
          v49 = *(_QWORD *)(v47 + 8 * (v46 - 1));
          if (v29 == (v49 & 0xFFFFFFFFFFFFLL))
            break;
          v45 = ((_DWORD)v45 + v48) & v44;
          v46 = *(unsigned __int8 *)(v41 + v45);
          ++v48;
          if (!*(_BYTE *)(v41 + v45))
            goto LABEL_57;
        }
        a6 = (v49 >> 16) & 0xFF00000000 | HIBYTE(v49);
      }
      else
      {
        if ((v43 & 0x20) != 0)
          v43 = *(_DWORD *)(v29 + 32);
        v51 = *(_DWORD *)(v39 + 12);
        v52 = v51 & (v43 >> 8);
        v53 = *(_DWORD *)(v41 + 4 * v52);
        if (!v53)
          goto LABEL_57;
        v54 = v41 + 4 * v42;
        v55 = 1;
        while (1)
        {
          v56 = (v53 - 1);
          if (v29 == *(_QWORD *)(v54 + 16 * v56))
            break;
          v52 = (v52 + v55) & v51;
          v53 = *(_DWORD *)(v41 + 4 * v52);
          ++v55;
          if (!v53)
            goto LABEL_57;
        }
        a6 = *(unsigned int *)(v54 + 16 * v56 + 8) | ((unint64_t)*(unsigned __int8 *)(v54 + 16 * v56 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v61 = v36 + 16;
          v62 = a6 << 32;
        }
        else
        {
          v61 = *(_QWORD *)(v36 + 8) - 8;
          v62 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v61 + (v62 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v63 = *(unsigned __int8 *)(a4 + 5);
          if (v63 != 5)
          {
            if (v63 != 6)
              goto LABEL_90;
            v141 = *(_DWORD *)(v38 + 16) & 3;
            v142 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v144 = *(int8x16_t ***)(a4 + 24);
              v143 = *(_QWORD *)(a4 + 32);
              v303 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v304 = v142;
              LODWORD(v305) = HIDWORD(a6);
              v307 = (_DWORD *)v36;
              goto LABEL_222;
            }
            v303 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v304 = v142;
            LODWORD(v305) = HIDWORD(a6);
            v307 = (_DWORD *)v36;
LABEL_298:
            BYTE1(v308[1]) = 3;
            if (v141 != 2)
              LOBYTE(v308[1]) = 1;
            goto LABEL_92;
          }
          v105 = (unsigned int *)v36;
          v106 = v31;
LABEL_164:
          JSC::JSObject::fillGetterPropertySlot(v105, v106, (uint64_t)&v303, a4, a5, a6);
          goto LABEL_92;
        }
LABEL_90:
        v303 = (uint64_t (*)(unint64_t))a4;
        v307 = (_DWORD *)v36;
LABEL_91:
        v305 = __PAIR64__(a6, a5);
        LOWORD(v308[1]) = 257;
        goto LABEL_92;
      }
LABEL_57:
      if ((*v33 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v36, (JSC::VM *)v31, v29, (uint64_t)&v303) & 1) != 0)
      {
        goto LABEL_92;
      }
      v35 = *(_QWORD *)(v38 + 48);
      if (!v35)
        v35 = *(_QWORD *)(v36 + 16);
      if ((v35 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v35 + 5) < 0x17u)
      {
        if (!v29)
          goto LABEL_206;
        v57 = *(_DWORD *)(v29 + 16);
        if ((v57 & 0x20) != 0)
          goto LABEL_84;
        v58 = *(_WORD **)(v29 + 8);
        v59 = *(unsigned int *)(v29 + 4);
        if ((v57 & 4) == 0)
        {
          if ((_DWORD)v59)
          {
            v60 = (unsigned __int16)*v58 - 48;
            if (v60 <= 9 && (*v58 != 48 || v59 <= 1))
            {
              v78 = v58 + 1;
              v79 = v59 - 1;
              IndexQuickly = 10;
              while (v79)
              {
                if (v60 <= 0x19999999)
                {
                  v80 = *v78 - 48;
                  if (v80 <= 9)
                  {
                    v81 = __CFADD__(v80, 10 * v60);
                    v60 = v80 + 10 * (_DWORD)v60;
                    ++v78;
                    --v79;
                    if (!v81)
                      continue;
                  }
                }
                goto LABEL_94;
              }
              goto LABEL_413;
            }
          }
LABEL_84:
          IndexQuickly = 10;
          goto LABEL_95;
        }
        if (!(_DWORD)v59)
          goto LABEL_84;
        v60 = *(unsigned __int8 *)v58 - 48;
        if (v60 > 9 || v59 >= 2 && *(_BYTE *)v58 == 48)
          goto LABEL_84;
        v222 = v59 - 1;
        v223 = (unsigned __int8 *)v58 + 1;
        IndexQuickly = 10;
        while (v222)
        {
          if (v60 <= 0x19999999)
          {
            v224 = *v223 - 48;
            if (v224 <= 9)
            {
              v81 = __CFADD__(v224, 10 * v60);
              v60 = v224 + 10 * (_DWORD)v60;
              --v222;
              ++v223;
              if (!v81)
                continue;
            }
          }
          goto LABEL_94;
        }
LABEL_413:
        if ((_DWORD)v60 != -1)
        {
          v225 = (JSC::VM *)*((_QWORD *)v13 + 7);
          IndexQuickly = 10;
          while (1)
          {
            v226 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
            v227 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v226 + 0x4C) + 0x70))(v12, v13, v60, &v303);
            if (*((_DWORD *)v225 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v225, a2, a3, a4, a5, a6, a7, a8))
              break;
            if ((v227 & 1) != 0)
              goto LABEL_92;
            if (BYTE2(v308[1]) == 3)
            {
              if (BYTE4(v308[1]))
                break;
              v228 = *(unsigned __int8 *)(v12 + 5);
              if (v228 == 61)
                goto LABEL_420;
            }
            else
            {
              v228 = *(unsigned __int8 *)(v12 + 5);
              if (v228 == 61)
              {
                if (BYTE2(v308[1]) == 1)
                  break;
                goto LABEL_420;
              }
            }
            if ((v228 - 39) <= 0xA
              && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v12, a2, a3, a4, a5, a6, a7, a8) <= v60)
            {
              break;
            }
LABEL_420:
            if ((*(_WORD *)(v226 + 12) & 0x800) == 0 || BYTE2(v308[1]) == 3)
            {
              v229 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
              if (!v229)
                v229 = *(_QWORD *)(v12 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v229 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v12, v13);
              }
              else
              {
                v229 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                if (!v229)
                  v229 = *(_QWORD *)(v12 + 16);
              }
              if (*((_DWORD *)v225 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v225, a2, a3, a4, a5, a6, a7, a8))
                break;
            }
            if ((v229 & 0xFFFE000000000002) == 0)
            {
              v12 = v229;
              if (*(unsigned __int8 *)(v229 + 5) > 0x16u)
                continue;
            }
            goto LABEL_94;
          }
        }
LABEL_552:
        IndexQuickly = 10;
        goto LABEL_94;
      }
      v33 = (_BYTE *)(v35 + 6);
      v36 = v35;
    }
    while ((*(_BYTE *)(v35 + 6) & 8) == 0);
  }
  if (!v29)
    goto LABEL_239;
  v155 = *(_DWORD *)(v29 + 16);
  if ((v155 & 0x20) != 0)
    goto LABEL_239;
  v156 = *(_WORD **)(v29 + 8);
  v157 = *(unsigned int *)(v29 + 4);
  if ((v155 & 4) == 0)
  {
    if ((_DWORD)v157)
    {
      v158 = (unsigned __int16)*v156 - 48;
      if (v158 <= 9 && (*v156 != 48 || v157 <= 1))
      {
        v175 = v156 + 1;
        v176 = v157 - 1;
        while (v176)
        {
          if (v158 > 0x19999999)
            goto LABEL_235;
          v177 = *v175 - 48;
          if (v177 > 9)
            goto LABEL_235;
          v159 = 0;
          LOBYTE(v157) = 0;
          v160 = 0;
          v81 = __CFADD__(v177, 10 * v158);
          v158 = v177 + 10 * v158;
          ++v175;
          --v176;
          if (v81)
            goto LABEL_237;
        }
        v160 = v158 & 0xFFFFFF00;
        v159 = 0x100000000;
        if (v158 == -1)
        {
          v159 = 0;
          LOBYTE(v157) = 0;
        }
        else
        {
          LOBYTE(v157) = v158;
        }
        if (v158 == -1)
          v160 = 0;
        goto LABEL_237;
      }
LABEL_235:
      v159 = 0;
      LOBYTE(v157) = 0;
    }
    else
    {
      v159 = 0;
    }
    v160 = 0;
LABEL_237:
    v161 = v157;
    goto LABEL_238;
  }
  if ((_DWORD)v157)
  {
    v292 = *(unsigned __int8 *)v156 - 48;
    if (v292 <= 9 && (v157 < 2 || *(_BYTE *)v156 != 48))
    {
      v293 = v157 - 1;
      v294 = (unsigned __int8 *)v156 + 1;
      while (v293)
      {
        if (v292 > 0x19999999)
          goto LABEL_536;
        v295 = *v294 - 48;
        if (v295 > 9)
          goto LABEL_536;
        v161 = 0;
        LOBYTE(v157) = 0;
        v159 = 0;
        v81 = __CFADD__(v295, 10 * v292);
        v292 = v295 + 10 * v292;
        --v293;
        ++v294;
        if (v81)
          goto LABEL_538;
      }
      if (v292 == -1)
        v161 = 0;
      else
        v161 = v292 & 0xFFFFFF00;
      if (v292 == -1)
        LOBYTE(v157) = 0;
      else
        LOBYTE(v157) = v292;
      if (v292 == -1)
        v159 = 0;
      else
        v159 = 0x100000000;
      goto LABEL_538;
    }
LABEL_536:
    v161 = 0;
    LOBYTE(v157) = 0;
  }
  else
  {
    v161 = 0;
  }
  v159 = 0;
LABEL_538:
  v160 = v157;
LABEL_238:
  if ((v159 & 0x100000000) != 0)
  {
    v178 = v160 | v161;
    v179 = (JSC::VM *)*((_QWORD *)v13 + 7);
    IndexQuickly = 10;
    while (1)
    {
      v180 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
      v181 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v180 + 0x4C) + 0x70))(v12, v13, v178, &v303);
      v182 = v181;
      if (*((_DWORD *)v179 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v179, a2, a3, a4, a5, a6, a7, a8);
        if (((hasExceptionsAfterHandlingTraps | v182) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_92;
          goto LABEL_552;
        }
      }
      else if ((v181 & 1) != 0)
      {
        goto LABEL_92;
      }
      if (BYTE2(v308[1]) == 3)
      {
        if (BYTE4(v308[1]))
          goto LABEL_552;
        v183 = *(unsigned __int8 *)(v12 + 5);
        if (v183 == 61)
          goto LABEL_311;
      }
      else
      {
        v183 = *(unsigned __int8 *)(v12 + 5);
        if (v183 == 61)
        {
          if (BYTE2(v308[1]) == 1)
            goto LABEL_552;
          goto LABEL_311;
        }
      }
      if ((v183 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v12, a2, a3, a4, a5, a6, a7, a8) <= v178)
      {
        goto LABEL_552;
      }
LABEL_311:
      if ((*(_WORD *)(v180 + 12) & 0x800) == 0 || BYTE2(v308[1]) == 3)
      {
        v184 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
        if (!v184)
          v184 = *(_QWORD *)(v12 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v184 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v12, v13);
        }
        else
        {
          v184 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
          if (!v184)
            v184 = *(_QWORD *)(v12 + 16);
        }
        if (*((_DWORD *)v179 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v179, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_552;
      }
      if ((v184 & 0xFFFE000000000002) == 0)
      {
        v12 = v184;
        if (*(unsigned __int8 *)(v184 + 5) > 0x16u)
          continue;
      }
      goto LABEL_94;
    }
  }
LABEL_239:
  v162 = (JSC::VM *)*((_QWORD *)v13 + 7);
  IndexQuickly = 10;
  while (1)
  {
    v163 = 16 * (*(_DWORD *)v35 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v35 + 6) & 8) == 0)
      break;
    v203 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C) + 0x68))(v35, v13, v29, &v303);
    if (*((_DWORD *)v162 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v162, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_552;
    if ((v203 & 1) != 0)
      goto LABEL_92;
    if (BYTE2(v308[1]) == 3)
    {
      if (BYTE4(v308[1]))
        goto LABEL_552;
      v204 = *(unsigned __int8 *)(v35 + 5);
      if (v204 != 61)
      {
LABEL_344:
        if (!v29)
          goto LABEL_246;
        if ((v204 - 50) < 0xFFFFFFF5)
          goto LABEL_246;
        v205 = *(_DWORD *)(v29 + 16);
        if ((v205 & 0x20) != 0)
          goto LABEL_246;
        v206 = *(unsigned int *)(v29 + 4);
        if (!(_DWORD)v206)
          goto LABEL_246;
        v207 = *(unsigned __int8 **)(v29 + 8);
        if ((v205 & 4) == 0)
        {
          v208 = *(unsigned __int16 *)v207;
          if ((_DWORD)v206 == 1)
            goto LABEL_350;
          if (v208 == 45)
          {
            v208 = *((unsigned __int16 *)v207 + 1);
            goto LABEL_355;
          }
          if ((v208 - 48) >= 0xA && ((_DWORD)v206 != 8 || v208 != 73))
          {
LABEL_378:
            if ((_DWORD)v206 != 3 || v208 != 78)
              goto LABEL_246;
          }
LABEL_365:
          v302 = v302 & 0xFFFFFF0000000000 | v206 | ((unint64_t)((v205 >> 2) & 1) << 32);
          JSC::jsToNumber(v207, v302);
          WTF::numberToString(v315, v218);
          if (WTF::equal(v29, (unint64_t)v315, v219))
            goto LABEL_84;
          goto LABEL_246;
        }
        v208 = *v207;
        if ((_DWORD)v206 == 1)
        {
LABEL_350:
          if ((v208 - 48) < 0xA)
            goto LABEL_84;
          goto LABEL_246;
        }
        if (v208 == 45)
        {
          v208 = v207[1];
LABEL_355:
          if ((v208 - 48) < 0xA)
          {
            if ((_DWORD)v206 == 2)
              goto LABEL_84;
            goto LABEL_365;
          }
          if ((_DWORD)v206 != 9)
            goto LABEL_246;
        }
        else
        {
          if ((v208 - 48) < 0xA)
            goto LABEL_365;
          if ((_DWORD)v206 != 8)
            goto LABEL_378;
        }
        if (v208 != 73)
          goto LABEL_246;
        goto LABEL_365;
      }
    }
    else
    {
      v204 = *(unsigned __int8 *)(v35 + 5);
      if (v204 != 61)
        goto LABEL_344;
      if (BYTE2(v308[1]) == 1)
        goto LABEL_552;
    }
LABEL_246:
    if ((*(_WORD *)(v163 + 12) & 0x800) == 0)
    {
      v166 = *(_DWORD *)v35;
LABEL_248:
      v167 = *(_QWORD *)(16 * (v166 & 0xFFFFFFFE) + 0x30);
      if (!v167)
        v167 = *(_QWORD *)(v35 + 16);
      goto LABEL_250;
    }
    v166 = *(_DWORD *)v35;
    if (BYTE2(v308[1]) == 3)
      goto LABEL_248;
    v202 = 16 * (v166 & 0xFFFFFFFE);
    if ((*(_WORD *)(v202 + 12) & 0x800) != 0)
    {
      v167 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v202 + 76)
                                                                                + 0xB0))(v35, v13);
    }
    else
    {
      v167 = *(_QWORD *)(v202 + 48);
      if (!v167)
        v167 = *(_QWORD *)(v35 + 16);
    }
    if (*((_DWORD *)v162 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v162, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_552;
LABEL_250:
    if ((v167 & 0xFFFE000000000002) == 0)
    {
      v35 = v167;
      if (*(unsigned __int8 *)(v167 + 5) > 0x16u)
        continue;
    }
    goto LABEL_94;
  }
  if (!(_DWORD)v34
    || (v34 & ~*(_DWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE)), v162, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v164)|| (v315[0] = (WTF::StringImpl *)v29, v165 = JSC::PropertyTable::get(v164, (uint64_t *)v315), a6 = v165, (_DWORD)v165 == -1))
  {
    if ((*(_BYTE *)(v35 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v35, v162, v29, (uint64_t)&v303) & 1) != 0)
    {
      goto LABEL_92;
    }
    goto LABEL_246;
  }
  a5 = HIDWORD(v165);
  if ((int)v165 <= 63)
  {
    v169 = v35 + 16;
    v170 = v165 << 32;
  }
  else
  {
    v169 = *(_QWORD *)(v35 + 8) - 8;
    v170 = 0x3F00000000 - (v165 << 32);
  }
  a4 = *(_QWORD *)(v169 + (v170 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_263:
    v303 = (uint64_t (*)(unint64_t))a4;
    v307 = (_DWORD *)v35;
    goto LABEL_91;
  }
  v171 = *(unsigned __int8 *)(a4 + 5);
  if (v171 == 5)
  {
    v105 = (unsigned int *)v35;
    v106 = (uint64_t)v162;
    goto LABEL_164;
  }
  if (v171 != 6)
    goto LABEL_263;
  v141 = *(_DWORD *)(v163 + 16) & 3;
  v201 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v303 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v304 = v201;
    LODWORD(v305) = HIDWORD(v165);
    v307 = (_DWORD *)v35;
    goto LABEL_298;
  }
  v144 = *(int8x16_t ***)(a4 + 24);
  v143 = *(_QWORD *)(a4 + 32);
  v303 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v304 = v201;
  LODWORD(v305) = HIDWORD(v165);
  v307 = (_DWORD *)v35;
LABEL_222:
  BYTE1(v308[1]) = 3;
  if (v141 != 2)
    LOBYTE(v308[1]) = 1;
  BYTE3(v308[1]) = 1;
  v311 = v144;
  v312 = v143;
LABEL_92:
  if (BYTE1(v308[1]) == 1)
  {
    IndexQuickly = (uint64_t)v303;
  }
  else
  {
    if (BYTE1(v308[1]) == 2)
    {
      v96 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v303, v13, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v115 = (unint64_t)v307;
      v116 = *(_QWORD *)(16 * (*v307 & 0xFFFFFFFE) + 0x28);
      if ((v305 & 0x20) != 0)
        v115 = (unint64_t)v306;
      if (BYTE3(v308[1]) != 1)
        goto LABEL_183;
      if ((v115 & 0xFFFE000000000002) != 0)
        goto LABEL_381;
      v117 = *(unsigned int *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x4C);
      v118 = *(_DWORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x4C) != 0;
      v119 = 16 * v117;
      if ((_DWORD)v117)
        v120 = v311 == (int8x16_t **)v119;
      else
        v120 = 1;
      if (!v120)
      {
        do
        {
          v119 = *(_QWORD *)(v119 + 16);
          v118 = v119 != 0;
        }
        while ((int8x16_t **)v119 != v311 && v119 != 0);
      }
      if (!v118)
      {
LABEL_381:
        v315[0] = *((WTF::StringImpl **)v13 + 7);
        v96 = JSC::throwDOMAttributeGetterTypeError(v116, v315, v311, (WTF::StringImpl *)v29);
      }
      else
      {
LABEL_183:
        v96 = v303(v116);
      }
    }
    IndexQuickly = v96;
  }
LABEL_94:
  if (v29)
  {
LABEL_95:
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      goto LABEL_97;
    }
    v82 = (WTF::StringImpl *)v29;
LABEL_142:
    WTF::StringImpl::~StringImpl(v82, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
LABEL_97:
  if (v310)
  {
    v64 = *(_DWORD *)(v309 + 4);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x1987ACB74);
    }
    *(_DWORD *)(v309 + 4) = v64 - 1;
  }
  return IndexQuickly;
}

uint64_t operationGetByValWithThisOptimize(JSC::JSString *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t IndexQuickly;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int v23;
  JSC::VM *v24;
  unsigned int v25;
  JSC::VM *v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  JSC::VM *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  JSC::VM *v49;
  uint64_t v50;
  uint64_t v51;
  JSC::VM *v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  JSC::JSString *v67;
  uint64_t v68;
  JSC::JSString *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned __int16 *v81;
  uint64_t v82;
  unsigned int v83;
  BOOL v84;
  int v85;
  JSC::VM *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  _BYTE *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  _WORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  int v142;
  JSC::VM *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  WTF::StringImpl *v154;
  _DWORD *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  unsigned __int16 *v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned __int8 *v162;
  int v164;
  int v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int16 *v174;
  uint64_t v175;
  unsigned int v176;
  JSC::VM *v177;
  char OwnStaticPropertySlot;
  WTF::StringImpl *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  unsigned __int8 *v190;
  int v191;
  uint64_t v192;
  JSC::VM *v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  JSC::VM *v231;
  JSC::VM *v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int8x16_t **v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  _QWORD *v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  unint64_t v266;
  WTF::StringImpl *v267;
  _DWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  __int128 *v273;
  WTF::StringImpl *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int8x16_t **v278;
  uint64_t v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  char v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  _WORD *v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  JSC::VM *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  WTF::StringImpl *v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  _WORD *v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  JSC::VM *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  unsigned __int16 *v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  unsigned __int16 *v339;
  uint64_t v340;
  unsigned int v341;
  unint64_t v342;
  JSC::VM *v343;
  JSC::VM *v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  JSC::VM *v353;
  char v354;
  unint64_t v355;
  JSC::VM *v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  int v360;
  int v361;
  unsigned int v362;
  unsigned __int8 *v363;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  unint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  int8x16_t **v384;
  _BOOL4 v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  JSC::VM *v394;
  uint64_t v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  JSC::VM *v404;
  uint64_t v405;
  uint64_t v406;
  JSC::VM *v407;
  int v408;
  int v409;
  char v410;
  int v411;
  unsigned int v412;
  uint64_t v413;
  unsigned __int8 *v414;
  int v415;
  int v416;
  int v417;
  unsigned int v418;
  char v419;
  unint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  JSC::VM *v428;
  unint64_t NotAnObjectError;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _BOOL4 v435;
  _BOOL4 v436;
  uint64_t **v437;
  double v438;
  const unsigned __int8 *v439;
  BOOL isMappedArgument;
  uint64_t v441;
  unsigned __int8 *v442;
  unsigned int v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  unsigned __int8 *v447;
  unsigned int v448;
  JSC::VM *v449;
  uint64_t v450;
  char v451;
  int v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unsigned __int8 *v456;
  unsigned int v457;
  _BOOL4 v458;
  int v459;
  unsigned int v460;
  uint64_t v461;
  unsigned __int8 *v462;
  int v463;
  double v464;
  const unsigned __int8 *v465;
  BOOL v466;
  JSC::VM *v467;
  uint64_t v468;
  unsigned int *v469;
  uint64_t v470;
  uint64_t Index;
  int v472;
  char v473;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v475;
  uint64_t v476;
  unint64_t v477;
  WTF::StringImpl *v478;
  _DWORD *v479;
  uint64_t v480;
  WTF::StringImpl *v481;
  int v482;
  unint64_t v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  void *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int *v508;
  uint64_t v509;
  unsigned __int8 *v510;
  int v511;
  char v512;
  uint64_t v513;
  int v514;
  _WORD *v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int v520;
  JSC::VM *v521;
  uint64_t v522;
  int v523;
  _WORD *v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int v528;
  unsigned int v529;
  unsigned __int16 *v530;
  uint64_t v531;
  unsigned int v532;
  unsigned __int16 *v533;
  uint64_t v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  uint64_t v538;
  unsigned __int8 *v539;
  unsigned int v540;
  uint64_t v541;
  unsigned __int8 *v542;
  unsigned int v543;
  BOOL v544;
  uint64_t v545;
  _DWORD *v546;
  uint64_t v547;
  _DWORD *v548;
  BOOL v549;
  unsigned int v550;
  unsigned int v551;
  uint64_t v552;
  unsigned __int8 *v553;
  unsigned int v554;
  uint64_t v555;
  unsigned __int8 *v556;
  unsigned int v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unsigned __int8 *v565;
  JSC::VM *v566;
  uint64_t *v567;
  uint64_t (*v568)(unint64_t);
  uint64_t v569;
  unint64_t v570;
  _DWORD *v571;
  JSC::JSString *v572;
  _QWORD v573[2];
  uint64_t v574;
  char v575;
  int8x16_t **v576;
  uint64_t v577;
  JSC::JSString *v578;
  WTF::StringImpl *v579;
  uint64_t v580;
  unint64_t v581;
  _DWORD *v582;
  _DWORD *v583;
  _QWORD v584[2];
  uint64_t v585;
  char v586;
  int8x16_t **v587;
  uint64_t v588;
  uint64_t v589;
  char v590;
  unsigned __int8 *v591;
  __int128 v592;
  unsigned __int8 **v593;
  unsigned __int8 **v594;
  char *v595;
  uint64_t v596;
  uint64_t vars0;

  v9 = a5;
  IndexQuickly = a4;
  v11 = a3;
  v12 = (unint64_t)a2;
  v596 = *MEMORY[0x1E0C80C00];
  v567 = *(uint64_t **)(a4 + 56);
  v13 = vars0;
  v566 = (JSC::VM *)v567[7];
  *((_QWORD *)v566 + 5) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a4 + 112);
  v578 = a1;
  v14 = *(unsigned __int8 **)(v13 + 16);
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0 || (unint64_t)a2 < 0xFFFE000000000000)
    goto LABEL_3;
  v562 = a3;
  v350 = a4;
  v351 = a5;
  v352 = *(_DWORD *)a1 & 0xFFFFFFFE;
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a4 + 129) |= 0x10u;
    goto LABEL_611;
  }
  v579 = 0;
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
LABEL_611:
    v11 = a3;
LABEL_612:
    v12 = (unint64_t)a2;
    goto LABEL_3;
  }
  v362 = *(unsigned __int8 *)(a4 + 125);
  if (v362 != 255)
    *(_BYTE *)(a4 + 125) = ++v362;
  if (xmmword_1ECF4C260 < v362)
  {
    *(_BYTE *)(a4 + 125) = 0;
    v416 = *(unsigned __int8 *)(a4 + 126);
    v417 = BYTE4(xmmword_1ECF4C260) << v416;
    v418 = v417;
    if (v417 == 255)
      LOBYTE(v417) = -2;
    if (v418 >> v416 == BYTE4(xmmword_1ECF4C260))
      v419 = v417;
    else
      v419 = -2;
    *(_BYTE *)(a4 + 124) = v419;
    if (v416 != 255)
      *(_BYTE *)(a4 + 126) = v416 + 1;
    *(_BYTE *)(a4 + 127) = 0;
    goto LABEL_674;
  }
  if (*(_BYTE *)(a4 + 127))
  {
    --*(_BYTE *)(a4 + 127);
    LOBYTE(v591) = 0;
    LODWORD(v568) = v352;
    v363 = (unsigned __int8 *)(a4 + 128);
    if (__ldaxr((unsigned __int8 *)(a4 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v363))
    {
      goto LABEL_648;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a4 + 128);
LABEL_648:
    if (!*(_DWORD *)(IndexQuickly + 96))
    {
      if (*(_QWORD *)(IndexQuickly + 16))
      {
        v592 = 0uLL;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(v350 + 80, &v592, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v592 = 0uLL;
        std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(v350 + 80, &v592, a3, a4, a5, a6, a7, a8);
      }
      if ((_QWORD)v592)
        WTF::fastFree(v592, v365, v366, v367, v368, v369, v370, v371);
    }
    *(_QWORD *)&v592 = &v568;
    *((_QWORD *)&v592 + 1) = &v579;
    v593 = &v591;
    WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(v350 + 80, (uint64_t)&v568, (uint64_t)&v591, &v592);
    v372 = __ldxr(v363);
    if (v372 == 1)
    {
      if (!__stlxr(0, v363))
      {
LABEL_671:
        if (!(_BYTE)v591)
        {
          v9 = v351;
          v11 = v562;
          goto LABEL_612;
        }
        if (v14 && *((_DWORD *)v566 + 190) >= v14[7])
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v566 + 192, (unint64_t)v14);
          v9 = v351;
          v12 = (unint64_t)a2;
          v11 = v562;
          if (!(_BYTE)v591)
            goto LABEL_3;
          goto LABEL_675;
        }
        goto LABEL_674;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v350 + 128), 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_671;
  }
LABEL_674:
  v9 = v351;
LABEL_675:
  if (v9)
    JSC::ArrayProfile::computeUpdatedPrediction(v351, (uint64_t)v14, 16 * v352, *(int8x8_t *)a9.i8);
  v12 = (unint64_t)a2;
  IndexQuickly = v350;
  JSC::repatchArrayGetByVal(v567, v14, (uint64_t)v578, (unint64_t)a2, v350, 5, a7, a8, *(double *)a9.i64);
  v9 = v351;
  v11 = v562;
LABEL_3:
  a9.i64[0] = 0xFFFFFFFF00000000;
  v570 = 0xFFFFFFFF00000000;
  LOBYTE(v574) = 0;
  v575 = 0;
  v576 = 0;
  v577 = 0;
  v572 = 0;
  memset(v573, 0, 13);
  v571 = (_DWORD *)v11;
  v15 = (uint64_t)v578;
  v16 = (unint64_t)v578 | v12;
  if ((((unint64_t)v578 | v12) & 0xFFFE000000000002) != 0)
    goto LABEL_112;
  v17 = *(unsigned __int8 *)(v12 + 5);
  v565 = v14;
  if (v17 == 2)
  {
    v18 = *(_QWORD *)(v12 + 8);
    if (!v18 || (v18 & 1) != 0 || (*(_BYTE *)(v18 + 16) & 0x10) == 0)
      goto LABEL_112;
    goto LABEL_8;
  }
  if (v17 != 4)
    goto LABEL_112;
  v149 = v567[7];
  v150 = JSC::JSCell::toPrimitive(v12, (JSC::VM **)v567, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  v579 = (WTF::StringImpl *)v150;
  if (*(_DWORD *)(v149 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v149, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v149 + 41952) + 8);
      if (!v18)
        goto LABEL_10;
      goto LABEL_8;
    }
    v150 = (uint64_t)v579;
  }
  if ((v150 & 0xFFFE000000000002) != 0)
  {
LABEL_490:
    v150 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v579, (uint64_t)v567, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_250;
  }
  v151 = *(unsigned __int8 *)(v150 + 5);
  if (v151 != 2)
  {
    if (v151 == 4)
    {
      v18 = *(_QWORD *)(v150 + 8);
      v306 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 4;
      v19 = v306 + 2;
      if (v19)
        goto LABEL_9;
      v307 = (WTF::StringImpl *)v18;
LABEL_489:
      WTF::StringImpl::~StringImpl(v307, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
      goto LABEL_10;
    }
    goto LABEL_490;
  }
LABEL_250:
  if (*(_DWORD *)(v149 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v149, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v18 = 0;
    goto LABEL_10;
  }
  v18 = *(_QWORD *)(v150 + 8);
  v152 = v567[7];
  if ((v18 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v150, (JSC::JSGlobalObject *)v567);
    if (*(_DWORD *)(v152 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v152, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v18 = 0;
      v307 = (WTF::StringImpl *)v592;
      *(_QWORD *)&v592 = 0;
      if (!v307)
        goto LABEL_10;
    }
    else
    {
      v18 = v592;
      if (!(_QWORD)v592)
        goto LABEL_10;
      *(_DWORD *)v592 += 2;
      *(_QWORD *)&v592 = 0;
      v307 = (WTF::StringImpl *)v18;
    }
    if (*(_DWORD *)v307 != 2)
    {
      *(_DWORD *)v307 -= 2;
      goto LABEL_10;
    }
    goto LABEL_489;
  }
  if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
  {
    if (*(_QWORD *)(v152 + 64768) != v18)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v152 + 64768), *(WTF::AtomStringImpl **)(v150 + 8), a3, a4, a5, a6, a7, a8);
      v153 = *(_QWORD *)(v150 + 8);
      if (v153)
      {
        if ((*(_BYTE *)(v153 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v153 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v153, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v592);
          v153 = v592;
        }
      }
      v154 = *(WTF::StringImpl **)(v152 + 64776);
      *(_QWORD *)(v152 + 64776) = v153;
      if (v154)
      {
        if (*(_DWORD *)v154 == 2)
        {
          WTF::StringImpl::~StringImpl(v154, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v420, v421, v422, v423, v424, v425, v426, v427);
        }
        else
        {
          *(_DWORD *)v154 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v150 + 8) + 16) & 0x10) == 0)
    {
      v155 = *(_DWORD **)(v152 + 64776);
      *v155 += 2;
      *(_QWORD *)&v592 = v155;
      __dmb(0xAu);
      v156 = *(_QWORD *)(v150 + 8);
      *(_QWORD *)(v150 + 8) = v592;
      *(_QWORD *)&v592 = v156;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v152 + 192, (unint64_t)&v592);
      v157 = (WTF::StringImpl *)v592;
      *(_QWORD *)&v592 = 0;
      if (v157)
      {
        if (*(_DWORD *)v157 == 2)
        {
          WTF::StringImpl::~StringImpl(v157, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v396, v397, v398, v399, v400, v401, v402, v403);
        }
        else
        {
          *(_DWORD *)v157 -= 2;
        }
      }
    }
    v18 = *(_QWORD *)(v152 + 64776);
  }
LABEL_8:
  v19 = *(_DWORD *)v18 + 2;
LABEL_9:
  *(_DWORD *)v18 = v19;
LABEL_10:
  v564 = v9;
  if (*((_DWORD *)v566 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v566, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_517;
  if (v18)
  {
    if (*(_BYTE *)(v12 + 5) != 4)
    {
      v20 = *(_DWORD *)(v18 + 16);
      if ((v20 & 0x20) == 0)
      {
        v21 = *(_BYTE **)(v18 + 8);
        v22 = *(unsigned int *)(v18 + 4);
        if ((v20 & 4) != 0)
        {
          if ((_DWORD)v22)
          {
            v23 = *v21 - 48;
            if (v23 <= 9 && (v22 < 2 || *v21 != 48))
            {
              v441 = v22 - 1;
              v442 = v21 + 1;
              while (v441)
              {
                if (v23 <= 0x19999999)
                {
                  v443 = *v442 - 48;
                  if (v443 <= 9)
                  {
                    v84 = __CFADD__(v443, 10 * v23);
                    v23 = v443 + 10 * v23;
                    --v441;
                    ++v442;
                    if (!v84)
                      continue;
                  }
                }
                goto LABEL_17;
              }
              goto LABEL_794;
            }
          }
        }
        else if ((_DWORD)v22)
        {
          v23 = *(unsigned __int16 *)v21 - 48;
          if (v23 <= 9 && (*(_WORD *)v21 != 48 || v22 <= 1))
          {
            v81 = (unsigned __int16 *)(v21 + 2);
            v82 = v22 - 1;
            while (v82)
            {
              if (v23 <= 0x19999999)
              {
                v83 = *v81 - 48;
                if (v83 <= 9)
                {
                  v84 = __CFADD__(v83, 10 * v23);
                  v23 = v83 + 10 * v23;
                  ++v81;
                  --v82;
                  if (!v84)
                    continue;
                }
              }
              goto LABEL_17;
            }
LABEL_794:
            if (v23 != -1)
            {
              v85 = 1;
              goto LABEL_107;
            }
          }
        }
      }
    }
  }
LABEL_17:
  v24 = (JSC::VM *)v567[7];
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_997;
  v25 = *(unsigned __int8 *)(v15 + 5);
  v26 = (JSC::VM *)v567[7];
  if (v25 > 0x16)
    goto LABEL_19;
  if (v25 != 2)
    goto LABEL_997;
  v467 = (JSC::VM *)v567[7];
  if (*(_QWORD *)(*((_QWORD *)v24 + 5244) + 1768) == v18)
  {
    v468 = *(_QWORD *)(v15 + 8);
    if ((v468 & 1) != 0)
      v469 = (unsigned int *)(v15 + 16);
    else
      v469 = (unsigned int *)(v468 + 4);
    v470 = *v469;
    if ((v470 & 0x80000000) != 0)
    {
      *(double *)a9.i64 = (double)v470;
      Index = COERCE__INT64((double)v470) + 0x2000000000000;
    }
    else
    {
      Index = v470 | 0xFFFE000000000000;
    }
    v472 = 14;
LABEL_935:
    v568 = (uint64_t (*)(unint64_t))Index;
    LODWORD(v570) = v472;
    v572 = 0;
    v66 = 1;
    BYTE1(v573[1]) = 1;
    v24 = v467;
    if (!*((_DWORD *)v467 + 20))
      goto LABEL_64;
LABEL_936:
    v473 = v66;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v66 &= !hasExceptionsAfterHandlingTraps;
    v24 = v467;
    if ((v473 & 1) != 0 || hasExceptionsAfterHandlingTraps)
      goto LABEL_64;
    goto LABEL_997;
  }
  if (v18)
  {
    v514 = *(_DWORD *)(v18 + 16);
    if ((v514 & 0x20) == 0)
    {
      v515 = *(_WORD **)(v18 + 8);
      v516 = *(unsigned int *)(v18 + 4);
      if ((v514 & 4) == 0)
      {
        if ((_DWORD)v516)
        {
          v517 = (unsigned __int16)*v515 - 48;
          if (v517 <= 9 && (*v515 != 48 || v516 <= 1))
          {
            v530 = v515 + 1;
            v531 = v516 - 1;
            while (v531)
            {
              if (v517 > 0x19999999)
                goto LABEL_992;
              v532 = *v530 - 48;
              if (v532 > 9)
                goto LABEL_992;
              v518 = 0;
              LOBYTE(v516) = 0;
              v519 = 0;
              v84 = __CFADD__(v532, 10 * v517);
              v517 = v532 + 10 * v517;
              ++v530;
              --v531;
              if (v84)
                goto LABEL_994;
            }
            v519 = v517 & 0xFFFFFF00;
            v518 = 0x100000000;
            if (v517 == -1)
            {
              v518 = 0;
              LOBYTE(v516) = 0;
            }
            else
            {
              LOBYTE(v516) = v517;
            }
            if (v517 == -1)
              v519 = 0;
            goto LABEL_994;
          }
LABEL_992:
          v518 = 0;
          LOBYTE(v516) = 0;
        }
        else
        {
          v518 = 0;
        }
        v519 = 0;
LABEL_994:
        v520 = v516;
LABEL_995:
        if ((v518 & 0x100000000) != 0)
        {
          a3 = v519 | v520;
          v545 = *(_QWORD *)(v15 + 8);
          v546 = (_DWORD *)((v545 & 1) != 0 ? v15 + 16 : v545 + 4);
          if (*v546 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)v15, (JSC::JSGlobalObject *)v567, a3, a4, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v467 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v467, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              v472 = 10;
              goto LABEL_935;
            }
          }
        }
        goto LABEL_996;
      }
      if ((_DWORD)v516)
      {
        v550 = *(unsigned __int8 *)v515 - 48;
        if (v550 <= 9 && (v516 < 2 || *(_BYTE *)v515 != 48))
        {
          v552 = v516 - 1;
          v553 = (unsigned __int8 *)v515 + 1;
          while (v552)
          {
            if (v550 > 0x19999999)
              goto LABEL_1173;
            v554 = *v553 - 48;
            if (v554 > 9)
              goto LABEL_1173;
            v520 = 0;
            LOBYTE(v516) = 0;
            v518 = 0;
            v84 = __CFADD__(v554, 10 * v550);
            v550 = v554 + 10 * v550;
            --v552;
            ++v553;
            if (v84)
              goto LABEL_1175;
          }
          if (v550 == -1)
            v520 = 0;
          else
            v520 = v550 & 0xFFFFFF00;
          if (v550 == -1)
            LOBYTE(v516) = 0;
          else
            LOBYTE(v516) = v550;
          if (v550 == -1)
            v518 = 0;
          else
            v518 = 0x100000000;
          goto LABEL_1175;
        }
LABEL_1173:
        v520 = 0;
        LOBYTE(v516) = 0;
      }
      else
      {
        v520 = 0;
      }
      v518 = 0;
LABEL_1175:
      v519 = v516;
      goto LABEL_995;
    }
  }
LABEL_996:
  v24 = v467;
  if (*((_DWORD *)v467 + 20))
  {
    v66 = 0;
    goto LABEL_936;
  }
LABEL_997:
  v521 = v24;
  v522 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v578, (unint64_t)v567);
  if (!v522)
  {
    v66 = 0;
    v24 = v521;
    goto LABEL_64;
  }
  v15 = v522;
  v26 = (JSC::VM *)v567[7];
  v24 = v521;
LABEL_19:
  v27 = (_BYTE *)(v15 + 6);
  v28 = v18 >> 4;
  v29 = v15;
  if ((*(_BYTE *)(v15 + 6) & 8) == 0)
  {
    v30 = v15;
    do
    {
      v31 = *(_DWORD *)v30 & 0xFFFFFFFE;
      v32 = 16 * v31;
      if (!(_DWORD)v28 || (v28 & ~*(_DWORD *)(16 * v31 + 0x20)) != 0)
        goto LABEL_32;
      v33 = *(_QWORD *)(16 * v31 + 0x58);
      if (!v33)
      {
        v44 = *(_QWORD *)(16 * v31 + 0x40);
        if (!v44 || *(_BYTE *)(v44 + 5) != 1 && *(_DWORD *)(v44 + 80) < 2u)
          goto LABEL_32;
        v45 = v26;
        v561 = v18;
        v46 = v15;
        v47 = v12;
        v48 = v28;
        v49 = v26;
        v50 = IndexQuickly;
        v51 = v11;
        v52 = v24;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v32, v45, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v24 = v52;
        v11 = v51;
        IndexQuickly = v50;
        v26 = v49;
        v28 = v48;
        v12 = v47;
        v15 = v46;
        v18 = v561;
        if (!v33)
          goto LABEL_32;
      }
      if (!*(_DWORD *)(v33 + 24))
        goto LABEL_32;
      v34 = *(_QWORD *)(v33 + 16);
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      v36 = *(unsigned int *)(v33 + 8);
      v37 = *(_DWORD *)(v18 + 16);
      if ((v34 & 1) != 0)
      {
        if ((v37 & 0x20) != 0)
          v37 = *(_DWORD *)(v18 + 32);
        v38 = *(_DWORD *)(v33 + 12);
        v39 = (v37 >> 8) & *(_QWORD *)&v38;
        v40 = *(unsigned __int8 *)(v35 + v39);
        if (!*(_BYTE *)(v35 + v39))
          goto LABEL_32;
        v41 = v35 + v36;
        v42 = 1;
        while (1)
        {
          v43 = *(_QWORD *)(v41 + 8 * (v40 - 1));
          if (v18 == (v43 & 0xFFFFFFFFFFFFLL))
            break;
          v39 = ((_DWORD)v39 + v42) & v38;
          v40 = *(unsigned __int8 *)(v35 + v39);
          ++v42;
          if (!*(_BYTE *)(v35 + v39))
            goto LABEL_32;
        }
        a6 = (v43 >> 16) & 0xFF00000000 | HIBYTE(v43);
      }
      else
      {
        if ((v37 & 0x20) != 0)
          v37 = *(_DWORD *)(v18 + 32);
        v53 = *(_DWORD *)(v33 + 12);
        v54 = v53 & (v37 >> 8);
        v55 = *(_DWORD *)(v35 + 4 * v54);
        if (!v55)
          goto LABEL_32;
        v56 = v35 + 4 * v36;
        v57 = 1;
        while (1)
        {
          v58 = (v55 - 1);
          if (v18 == *(_QWORD *)(v56 + 16 * v58))
            break;
          v54 = (v54 + v57) & v53;
          v55 = *(_DWORD *)(v35 + 4 * v54);
          ++v57;
          if (!v55)
            goto LABEL_32;
        }
        a6 = *(unsigned int *)(v56 + 16 * v58 + 8) | ((unint64_t)*(unsigned __int8 *)(v56 + 16 * v58 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v78 = v30 + 16;
          v79 = a6 << 32;
        }
        else
        {
          v78 = *(_QWORD *)(v30 + 8) - 8;
          v79 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v78 + (v79 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v80 = *(unsigned __int8 *)(a4 + 5);
          if (v80 == 5)
          {
            v193 = v24;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v30, (uint64_t)v26, (uint64_t)&v568, a4, SHIDWORD(a6), a6);
            v24 = v193;
LABEL_325:
            v66 = 1;
            goto LABEL_64;
          }
          if (v80 == 6)
          {
            v246 = *(_DWORD *)(v32 + 16) & 3;
            v247 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v249 = *(int8x16_t ***)(a4 + 24);
              v248 = *(_QWORD *)(a4 + 32);
              v568 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v569 = v247;
              LODWORD(v570) = HIDWORD(a6);
              v572 = (JSC::JSString *)v30;
              BYTE1(v573[1]) = 3;
              v66 = 1;
              if (v246 != 2)
                LOBYTE(v573[1]) = 1;
              BYTE3(v573[1]) = 1;
              v576 = v249;
              v577 = v248;
            }
            else
            {
              v568 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v569 = v247;
              LODWORD(v570) = HIDWORD(a6);
              v572 = (JSC::JSString *)v30;
              v66 = 1;
              BYTE1(v573[1]) = 3;
              if (v246 != 2)
                LOBYTE(v573[1]) = 1;
            }
            goto LABEL_64;
          }
        }
        v568 = (uint64_t (*)(unint64_t))a4;
        v572 = (JSC::JSString *)v30;
LABEL_96:
        v570 = __PAIR64__(a6, a5);
        v66 = 1;
        LOWORD(v573[1]) = 257;
        goto LABEL_64;
      }
LABEL_32:
      if ((*v27 & 0x20) != 0)
      {
        v177 = v24;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v30, v26, v18, (uint64_t)&v568);
        v24 = v177;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_325;
      }
      v29 = *(_QWORD *)(v32 + 48);
      if (!v29)
        v29 = *(_QWORD *)(v30 + 16);
      if ((v29 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v29 + 5) < 0x17u)
      {
        if (!v18)
          goto LABEL_63;
        v59 = *(_DWORD *)(v18 + 16);
        if ((v59 & 0x20) != 0)
          goto LABEL_63;
        v60 = *(_WORD **)(v18 + 8);
        v61 = *(unsigned int *)(v18 + 4);
        if ((v59 & 4) == 0)
        {
          if ((_DWORD)v61)
          {
            v62 = (unsigned __int16)*v60 - 48;
            if (v62 <= 9 && (*v60 != 48 || v61 <= 1))
            {
              v158 = v60 + 1;
              v159 = v61 - 1;
              while (v159)
              {
                if (v62 > 0x19999999)
                  goto LABEL_59;
                v160 = *v158 - 48;
                if (v160 > 9)
                  goto LABEL_59;
                v63 = 0;
                LOBYTE(v61) = 0;
                v64 = 0;
                v84 = __CFADD__(v160, 10 * v62);
                v62 = v160 + 10 * v62;
                ++v158;
                --v159;
                if (v84)
                  goto LABEL_61;
              }
              v64 = v62 & 0xFFFFFF00;
              v63 = 0x100000000;
              if (v62 == -1)
              {
                v63 = 0;
                LOBYTE(v61) = 0;
              }
              else
              {
                LOBYTE(v61) = v62;
              }
              if (v62 == -1)
                v64 = 0;
LABEL_61:
              v65 = v61;
LABEL_62:
              if ((v63 & 0x100000000) == 0)
              {
LABEL_63:
                v66 = 0;
                goto LABEL_64;
              }
              v230 = v64 | v65;
              v231 = (JSC::VM *)v567[7];
              while (2)
              {
                v232 = v24;
                v233 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
                v234 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v233 + 0x4C) + 0x70))(v15, v567, v230, &v568);
                v235 = v234;
                if (*((_DWORD *)v231 + 20))
                {
                  v385 = JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  if (((v385 | v235) & 1) != 0)
                  {
                    v66 = !v385;
                    goto LABEL_370;
                  }
                }
                else if ((v234 & 1) != 0)
                {
                  v66 = 1;
                  goto LABEL_370;
                }
                if (BYTE2(v573[1]) == 3)
                {
                  if (BYTE4(v573[1]))
                  {
                    v66 = 0;
                    goto LABEL_370;
                  }
                  v236 = *(unsigned __int8 *)(v15 + 5);
                  v24 = v232;
                  if (v236 != 61)
                    goto LABEL_362;
                }
                else
                {
                  v24 = v232;
                  v236 = *(unsigned __int8 *)(v15 + 5);
                  if (v236 == 61)
                  {
                    if (BYTE2(v573[1]) == 1)
                      goto LABEL_63;
                  }
                  else
                  {
LABEL_362:
                    if ((v236 - 39) <= 0xA)
                    {
                      v454 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                      v24 = v232;
                      if (v454 <= v230)
                        goto LABEL_63;
                    }
                  }
                }
                if ((*(_WORD *)(v233 + 12) & 0x800) == 0 || BYTE2(v573[1]) == 3)
                {
                  v237 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
                  if (!v237)
                    v237 = *(_QWORD *)(v15 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v237 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v15, v567);
                  }
                  else
                  {
                    v237 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
                    if (!v237)
                      v237 = *(_QWORD *)(v15 + 16);
                  }
                  if (*((_DWORD *)v231 + 20))
                  {
                    v549 = JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v24 = v232;
                    if (v549)
                      goto LABEL_63;
                  }
                  else
                  {
                    v24 = v232;
                  }
                }
                if ((v237 & 0xFFFE000000000002) != 0)
                  goto LABEL_63;
                v66 = 0;
                v15 = v237;
                if (*(unsigned __int8 *)(v237 + 5) <= 0x16u)
                  goto LABEL_64;
                continue;
              }
            }
LABEL_59:
            v63 = 0;
            LOBYTE(v61) = 0;
          }
          else
          {
            v63 = 0;
          }
          v64 = 0;
          goto LABEL_61;
        }
        if ((_DWORD)v61)
        {
          v445 = *(unsigned __int8 *)v60 - 48;
          if (v445 <= 9 && (v61 < 2 || *(_BYTE *)v60 != 48))
          {
            v455 = v61 - 1;
            v456 = (unsigned __int8 *)v60 + 1;
            while (v455)
            {
              if (v445 > 0x19999999)
                goto LABEL_817;
              v457 = *v456 - 48;
              if (v457 > 9)
                goto LABEL_817;
              v65 = 0;
              LOBYTE(v61) = 0;
              v63 = 0;
              v84 = __CFADD__(v457, 10 * v445);
              v445 = v457 + 10 * v445;
              --v455;
              ++v456;
              if (v84)
                goto LABEL_819;
            }
            if (v445 == -1)
              v65 = 0;
            else
              v65 = v445 & 0xFFFFFF00;
            if (v445 == -1)
              LOBYTE(v61) = 0;
            else
              LOBYTE(v61) = v445;
            if (v445 == -1)
              v63 = 0;
            else
              v63 = 0x100000000;
            goto LABEL_819;
          }
LABEL_817:
          v65 = 0;
          LOBYTE(v61) = 0;
        }
        else
        {
          v65 = 0;
        }
        v63 = 0;
LABEL_819:
        v64 = v61;
        goto LABEL_62;
      }
      v27 = (_BYTE *)(v29 + 6);
      v30 = v29;
    }
    while ((*(_BYTE *)(v29 + 6) & 8) == 0);
  }
  if (!v18)
    goto LABEL_472;
  v293 = *(_DWORD *)(v18 + 16);
  if ((v293 & 0x20) != 0)
    goto LABEL_472;
  v294 = *(_WORD **)(v18 + 8);
  v295 = *(unsigned int *)(v18 + 4);
  if ((v293 & 4) == 0)
  {
    if ((_DWORD)v295)
    {
      v296 = (unsigned __int16)*v294 - 48;
      if (v296 <= 9 && (*v294 != 48 || v295 <= 1))
      {
        v335 = v294 + 1;
        v336 = v295 - 1;
        while (v336)
        {
          if (v296 > 0x19999999)
            goto LABEL_468;
          v337 = *v335 - 48;
          if (v337 > 9)
            goto LABEL_468;
          v297 = 0;
          LOBYTE(v295) = 0;
          v298 = 0;
          v84 = __CFADD__(v337, 10 * v296);
          v296 = v337 + 10 * v296;
          ++v335;
          --v336;
          if (v84)
            goto LABEL_470;
        }
        v298 = v296 & 0xFFFFFF00;
        v297 = 0x100000000;
        if (v296 == -1)
        {
          v297 = 0;
          LOBYTE(v295) = 0;
        }
        else
        {
          LOBYTE(v295) = v296;
        }
        if (v296 == -1)
          v298 = 0;
        goto LABEL_470;
      }
LABEL_468:
      v297 = 0;
      LOBYTE(v295) = 0;
    }
    else
    {
      v297 = 0;
    }
    v298 = 0;
LABEL_470:
    v299 = v295;
    goto LABEL_471;
  }
  if ((_DWORD)v295)
  {
    v536 = *(unsigned __int8 *)v294 - 48;
    if (v536 <= 9 && (v295 < 2 || *(_BYTE *)v294 != 48))
    {
      v538 = v295 - 1;
      v539 = (unsigned __int8 *)v294 + 1;
      while (v538)
      {
        if (v536 > 0x19999999)
          goto LABEL_1044;
        v540 = *v539 - 48;
        if (v540 > 9)
          goto LABEL_1044;
        v299 = 0;
        LOBYTE(v295) = 0;
        v297 = 0;
        v84 = __CFADD__(v540, 10 * v536);
        v536 = v540 + 10 * v536;
        --v538;
        ++v539;
        if (v84)
          goto LABEL_1046;
      }
      if (v536 == -1)
        v299 = 0;
      else
        v299 = v536 & 0xFFFFFF00;
      if (v536 == -1)
        LOBYTE(v295) = 0;
      else
        LOBYTE(v295) = v536;
      if (v536 == -1)
        v297 = 0;
      else
        v297 = 0x100000000;
      goto LABEL_1046;
    }
LABEL_1044:
    v299 = 0;
    LOBYTE(v295) = 0;
  }
  else
  {
    v299 = 0;
  }
  v297 = 0;
LABEL_1046:
  v298 = v295;
LABEL_471:
  if ((v297 & 0x100000000) != 0)
  {
    v342 = v298 | v299;
    v343 = (JSC::VM *)v567[7];
    v559 = v12;
    while (1)
    {
      v344 = v24;
      v345 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
      v346 = v15;
      v347 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v345 + 0x4C) + 0x70))(v15, v567, v342, &v568);
      v348 = v347;
      if (*((_DWORD *)v343 + 20))
      {
        v435 = JSC::VM::hasExceptionsAfterHandlingTraps(v343, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (((v435 | v348) & 1) != 0)
        {
          v66 = !v435;
          goto LABEL_614;
        }
      }
      else if ((v347 & 1) != 0)
      {
        v66 = 1;
LABEL_614:
        v24 = v344;
        v12 = v559;
        goto LABEL_64;
      }
      if (BYTE2(v573[1]) == 3)
      {
        if (BYTE4(v573[1]))
          goto LABEL_1065;
        v349 = *(unsigned __int8 *)(v15 + 5);
        if (v349 == 61)
          goto LABEL_602;
      }
      else
      {
        v349 = *(unsigned __int8 *)(v15 + 5);
        if (v349 == 61)
        {
          if (BYTE2(v573[1]) == 1)
            goto LABEL_1065;
          goto LABEL_602;
        }
      }
      if ((v349 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v342)
      {
        goto LABEL_1065;
      }
LABEL_602:
      if ((*(_WORD *)(v345 + 12) & 0x800) == 0 || BYTE2(v573[1]) == 3)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
        if (!v15)
          v15 = *(_QWORD *)(v346 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xB0))(v15, v567);
        }
        else
        {
          v15 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
          if (!v15)
            v15 = *(_QWORD *)(v346 + 16);
        }
        if (*((_DWORD *)v343 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v343, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
LABEL_1065:
          v66 = 0;
          goto LABEL_614;
        }
      }
      if ((v15 & 0xFFFE000000000002) != 0)
        goto LABEL_1065;
      v66 = 0;
      v24 = v344;
      v12 = v559;
      if (*(unsigned __int8 *)(v15 + 5) <= 0x16u)
        goto LABEL_64;
    }
  }
LABEL_472:
  v300 = (JSC::VM *)v567[7];
  while (1)
  {
    v301 = 16 * (*(_DWORD *)v29 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v29 + 6) & 8) == 0)
      break;
    v563 = v28;
    v407 = v24;
    v408 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) + 0x68))(v29, v567, v18, &v568);
    v409 = v408;
    if (*((_DWORD *)v300 + 20))
    {
      v458 = JSC::VM::hasExceptionsAfterHandlingTraps(v300, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (((v458 | v409) & 1) != 0)
      {
        v66 = !v458;
        goto LABEL_713;
      }
    }
    else if ((v408 & 1) != 0)
    {
      v66 = 1;
      goto LABEL_713;
    }
    if (BYTE2(v573[1]) == 3)
    {
      if (!BYTE4(v573[1]))
      {
        v459 = *(unsigned __int8 *)(v29 + 5);
        if (v459 == 61)
          goto LABEL_916;
LABEL_898:
        if (!v18
          || (v459 - 50) < 0xFFFFFFF5
          || (v460 = *(_DWORD *)(v18 + 16), (v460 & 0x20) != 0)
          || (v461 = *(unsigned int *)(v18 + 4), !(_DWORD)v461))
        {
LABEL_916:
          v24 = v407;
          v28 = v563;
          goto LABEL_479;
        }
        v462 = *(unsigned __int8 **)(v18 + 8);
        if ((v460 & 4) == 0)
        {
          v463 = *(unsigned __int16 *)v462;
          if ((_DWORD)v461 == 1)
            goto LABEL_904;
          if (v463 == 45)
          {
            v463 = *((unsigned __int16 *)v462 + 1);
            goto LABEL_908;
          }
          if ((v463 - 48) >= 0xA && ((_DWORD)v461 != 8 || v463 != 73))
          {
LABEL_919:
            if ((_DWORD)v461 != 3 || v463 != 78)
              goto LABEL_916;
          }
LABEL_912:
          v558 = v558 & 0xFFFFFF0000000000 | v461 | ((unint64_t)((v460 >> 2) & 1) << 32);
          JSC::jsToNumber(v462, v558);
          WTF::numberToString(&v592, v464);
          v466 = WTF::equal(v18, (unint64_t)&v592, v465);
          v24 = v407;
          v28 = v563;
          if (v466)
            goto LABEL_63;
          goto LABEL_479;
        }
        v463 = *v462;
        if ((_DWORD)v461 == 1)
        {
LABEL_904:
          v24 = v407;
          v28 = v563;
          if ((v463 - 48) < 0xA)
            goto LABEL_63;
          goto LABEL_479;
        }
        if (v463 == 45)
        {
          v463 = v462[1];
LABEL_908:
          if ((v463 - 48) < 0xA)
          {
            if ((_DWORD)v461 == 2)
              goto LABEL_1107;
            goto LABEL_912;
          }
          if ((_DWORD)v461 != 9)
            goto LABEL_916;
        }
        else
        {
          if ((v463 - 48) < 0xA)
            goto LABEL_912;
          if ((_DWORD)v461 != 8)
            goto LABEL_919;
        }
        if (v463 != 73)
          goto LABEL_916;
        goto LABEL_912;
      }
LABEL_1107:
      v66 = 0;
LABEL_713:
      v24 = v407;
      goto LABEL_64;
    }
    v459 = *(unsigned __int8 *)(v29 + 5);
    if (v459 != 61)
      goto LABEL_898;
    v24 = v407;
    v28 = v563;
    if (BYTE2(v573[1]) == 1)
      goto LABEL_63;
LABEL_479:
    if ((*(_WORD *)(v301 + 12) & 0x800) != 0)
    {
      v304 = *(_DWORD *)v29;
      if (BYTE2(v573[1]) != 3)
      {
        v404 = v24;
        v405 = 16 * (v304 & 0xFFFFFFFE);
        if ((*(_WORD *)(v405 + 12) & 0x800) != 0)
        {
          v305 = (*(uint64_t (**)(uint64_t, uint64_t *))(16 * *(unsigned int *)(v405 + 76) + 0xB0))(v29, v567);
        }
        else
        {
          v305 = *(_QWORD *)(v405 + 48);
          if (!v305)
            v305 = *(_QWORD *)(v29 + 16);
        }
        if (*((_DWORD *)v300 + 20))
        {
          v544 = JSC::VM::hasExceptionsAfterHandlingTraps(v300, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v24 = v404;
          if (v544)
            goto LABEL_63;
        }
        else
        {
          v24 = v404;
        }
        goto LABEL_483;
      }
    }
    else
    {
      v304 = *(_DWORD *)v29;
    }
    v305 = *(_QWORD *)(16 * (v304 & 0xFFFFFFFE) + 0x30);
    if (!v305)
      v305 = *(_QWORD *)(v29 + 16);
LABEL_483:
    if ((v305 & 0xFFFE000000000002) != 0)
      goto LABEL_63;
    v66 = 0;
    v29 = v305;
    if (*(unsigned __int8 *)(v305 + 5) <= 0x16u)
      goto LABEL_64;
  }
  if (!(_DWORD)v28
    || (v28 & ~*(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x20)) != 0
    || (v232 = v24,
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE)), v300, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v24 = v232, !v302)|| (*(_QWORD *)&v592 = v18, v303 = JSC::PropertyTable::get(v302, (uint64_t *)&v592), v24 = v232, a6 = v303, (_DWORD)v303 == -1))
  {
    if ((*(_BYTE *)(v29 + 6) & 0x20) != 0)
    {
      v353 = v24;
      v354 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v29, v300, v18, (uint64_t)&v568);
      v24 = v353;
      if ((v354 & 1) != 0)
        goto LABEL_325;
    }
    goto LABEL_479;
  }
  a5 = HIDWORD(v303);
  if ((int)v303 <= 63)
  {
    v329 = v29 + 16;
    v330 = v303 << 32;
  }
  else
  {
    v329 = *(_QWORD *)(v29 + 8) - 8;
    v330 = 0x3F00000000 - (v303 << 32);
  }
  a4 = *(_QWORD *)(v329 + (v330 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_523;
  v331 = *(unsigned __int8 *)(a4 + 5);
  if (v331 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v29, (uint64_t)v300, (uint64_t)&v568, a4, SHIDWORD(v303), v303);
    v24 = v232;
    goto LABEL_325;
  }
  if (v331 != 6)
  {
LABEL_523:
    v568 = (uint64_t (*)(unint64_t))a4;
    v572 = (JSC::JSString *)v29;
    goto LABEL_96;
  }
  v381 = *(_DWORD *)(v301 + 16) & 3;
  v382 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v384 = *(int8x16_t ***)(a4 + 24);
    v383 = *(_QWORD *)(a4 + 32);
    v568 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v569 = v382;
    LODWORD(v570) = HIDWORD(v303);
    v572 = (JSC::JSString *)v29;
    BYTE1(v573[1]) = 3;
    v66 = 1;
    if (v381 != 2)
      LOBYTE(v573[1]) = 1;
    BYTE3(v573[1]) = 1;
    v576 = v384;
    v577 = v383;
  }
  else
  {
    v568 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v569 = v382;
    LODWORD(v570) = HIDWORD(v303);
    v572 = (JSC::JSString *)v29;
    v66 = 1;
    BYTE1(v573[1]) = 3;
    if (v381 != 2)
      LOBYTE(v573[1]) = 1;
  }
LABEL_370:
  v24 = v232;
LABEL_64:
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_517:
    IndexQuickly = 0;
    goto LABEL_106;
  }
  if (byte_1ECF4C6B7)
  {
    v67 = v578;
    v68 = ((unint64_t)v578 & 0xFFFE000000000002) != 0
        ? 0
        : 16 * *(unsigned int *)(16 * (*(_DWORD *)v578 & 0xFFFFFFFE) + 0x4C);
    v69 = v572;
    LODWORD(v592) = 15;
    *((_QWORD *)&v592 + 1) = v68;
    v70 = *(_DWORD *)(v18 + 16);
    if ((v70 & 0x20) != 0)
    {
      *(_DWORD *)v18 += 2;
      v71 = (WTF::StringImpl *)v18;
    }
    else
    {
      if ((v70 & 0x10) != 0)
      {
        *(_DWORD *)v18 += 2;
        v71 = (WTF::StringImpl *)v18;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v566 + 5239), v18, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v579);
        v71 = v579;
      }
      v72 = *(_DWORD *)v71;
      *(_DWORD *)v71 += 2;
      if (v72)
      {
        *(_DWORD *)v71 = v72;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v71, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
    }
    v593 = (unsigned __int8 **)v71;
    v73 = v67 == v69 ? 1 : 2;
    LODWORD(v594) = v73;
    JSC::ICEvent::log((JSC::ICEvent *)&v592, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v74 = (WTF::StringImpl *)v593;
    v593 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  v75 = *(unsigned __int8 *)(v12 + 5);
  if (v75 != 2)
  {
    if (v75 == 4)
      goto LABEL_83;
LABEL_327:
    __break(0xC471u);
    JUMPOUT(0x1987AEA78);
  }
  v76 = *(_QWORD *)(v12 + 8);
  if (!v76 || (v76 & 1) != 0 || (*(_BYTE *)(v76 + 16) & 0x10) == 0)
    goto LABEL_327;
LABEL_83:
  if (((unint64_t)v578 & 0xFFFE000000000002) != 0 || (v77 = *(_DWORD *)v578 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(IndexQuickly + 129) |= 0x10u;
    goto LABEL_87;
  }
  v591 = (unsigned __int8 *)v12;
  *(_WORD *)(IndexQuickly + 129) |= 4u;
  if (*(_BYTE *)(IndexQuickly + 124))
  {
    --*(_BYTE *)(IndexQuickly + 124);
    goto LABEL_87;
  }
  v161 = *(unsigned __int8 *)(IndexQuickly + 125);
  if (v161 != 255)
    *(_BYTE *)(IndexQuickly + 125) = ++v161;
  if (xmmword_1ECF4C260 < v161)
  {
    *(_BYTE *)(IndexQuickly + 125) = 0;
    v281 = *(unsigned __int8 *)(IndexQuickly + 126);
    v282 = BYTE4(xmmword_1ECF4C260) << v281;
    v283 = v282;
    if (v282 == 255)
      LOBYTE(v282) = -2;
    if (v283 >> v281 == BYTE4(xmmword_1ECF4C260))
      v284 = v282;
    else
      v284 = -2;
    *(_BYTE *)(IndexQuickly + 124) = v284;
    if (v281 != 255)
      *(_BYTE *)(IndexQuickly + 126) = v281 + 1;
    *(_BYTE *)(IndexQuickly + 127) = 0;
LABEL_346:
    JSC::repatchGetBy(v567, v565, v578, v12, (uint64_t)&v568, IndexQuickly, 5, a8, *(uint8x8_t *)a9.i8);
    goto LABEL_87;
  }
  if (!*(_BYTE *)(IndexQuickly + 127))
    goto LABEL_346;
  --*(_BYTE *)(IndexQuickly + 127);
  v590 = 0;
  LODWORD(v589) = v77;
  v162 = (unsigned __int8 *)(IndexQuickly + 128);
  if (!__ldaxr((unsigned __int8 *)(IndexQuickly + 128)))
    goto LABEL_353;
  __clrex();
LABEL_278:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(IndexQuickly + 128);
  while (1)
  {
    v164 = *(_DWORD *)(IndexQuickly + 96);
    if (!v164)
      break;
    v593 = (unsigned __int8 **)&v589;
    v594 = &v591;
    v595 = &v590;
    *(_QWORD *)&v592 = &v589;
    *((_QWORD *)&v592 + 1) = &v590;
    if (v164 != -1)
      goto LABEL_284;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_353:
    if (__stxr(1u, v162))
      goto LABEL_278;
  }
  v164 = *(_QWORD *)(IndexQuickly + 16) ? 1 : 2;
  *(_QWORD *)(IndexQuickly + 80) = 0;
  *(_QWORD *)(IndexQuickly + 88) = 0;
  *(_DWORD *)(IndexQuickly + 96) = v164;
  v593 = (unsigned __int8 **)&v589;
  v594 = &v591;
  v595 = &v590;
  *(_QWORD *)&v592 = &v589;
  *((_QWORD *)&v592 + 1) = &v590;
LABEL_284:
  v579 = (WTF::StringImpl *)&v592;
  ((void (*)(WTF::StringImpl **))off_1E3596010[v164])(&v579);
  v165 = __ldxr(v162);
  if (v165 == 1)
  {
    if (!__stlxr(0, v162))
      goto LABEL_343;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(IndexQuickly + 128), 0, a3, a4, a5, a6, a7, a8);
LABEL_343:
  if (v590)
  {
    if (!v565)
      goto LABEL_346;
    if (*((_DWORD *)v566 + 190) < v565[7])
      goto LABEL_346;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v566 + 192, (unint64_t)v565);
    if (v590)
      goto LABEL_346;
  }
LABEL_87:
  if (v66)
  {
    if (BYTE1(v573[1]) == 1)
    {
      IndexQuickly = (uint64_t)v568;
    }
    else
    {
      if (BYTE1(v573[1]) == 2)
      {
        v219 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v568, (JSC::JSGlobalObject *)v567, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v250 = (unint64_t)v572;
        v251 = *(_QWORD *)(16 * (*(_DWORD *)v572 & 0xFFFFFFFE) + 0x28);
        if ((v570 & 0x20) != 0)
          v250 = (unint64_t)v571;
        if (BYTE3(v573[1]) != 1)
          goto LABEL_407;
        if ((v250 & 0xFFFE000000000002) != 0)
          goto LABEL_782;
        v252 = *(unsigned int *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x4C);
        v253 = *(_DWORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v252)
        {
          v254 = 16 * v252;
          if (v576 != (int8x16_t **)v254)
          {
            do
            {
              v254 = *(_QWORD *)(v254 + 16);
              v253 = v254 != 0;
            }
            while ((int8x16_t **)v254 != v576 && v254 != 0);
          }
        }
        if (!v253)
        {
LABEL_782:
          *(_QWORD *)&v592 = v567[7];
          v219 = JSC::throwDOMAttributeGetterTypeError(v251, (JSC::VM **)&v592, v576, (WTF::StringImpl *)v18);
        }
        else
        {
LABEL_407:
          v219 = v568(v251);
        }
      }
      IndexQuickly = v219;
    }
  }
  else
  {
    IndexQuickly = 10;
  }
LABEL_106:
  v85 = 0;
LABEL_107:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (!v85)
    goto LABEL_211;
  v15 = (uint64_t)v578;
  v16 = (unint64_t)v578 | v12;
  v9 = v564;
LABEL_112:
  v589 = v15;
  v86 = (JSC::VM *)v567[7];
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_131;
  if (*(_BYTE *)(v12 + 5) != 2)
    goto LABEL_131;
  v87 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
  if (((*(_DWORD *)(v87 + 0x10) | *(unsigned __int8 *)(v87 + 0xA)) & 8) != 0)
    goto LABEL_131;
  v88 = *(_QWORD *)(v12 + 8);
  if ((v88 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v567);
    goto LABEL_289;
  }
  if ((*(_BYTE *)(v88 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v12 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v592);
LABEL_289:
    v88 = v592;
    goto LABEL_118;
  }
  *(_DWORD *)v88 += 2;
LABEL_118:
  if (*((_DWORD *)v86 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v86, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    IndexQuickly = 0;
    if (!v88)
      goto LABEL_211;
    goto LABEL_127;
  }
  if (v88)
  {
    if ((v88 >> 4))
    {
      if (((v88 >> 4) & ~*(_DWORD *)(v87 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v87, v86, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v89)
        {
          *(_QWORD *)&v592 = v88;
          v90 = JSC::PropertyTable::get(v89, (uint64_t *)&v592);
          if ((_DWORD)v90 != -1)
          {
            if ((int)v90 <= 63)
            {
              v91 = v15 + 16;
              v92 = v90 << 32;
            }
            else
            {
              v91 = *(_QWORD *)(v15 + 8) - 8;
              v92 = 0x3F00000000 - (v90 << 32);
            }
            IndexQuickly = *(_QWORD *)(v91 + (v92 >> 29));
            if (IndexQuickly)
            {
LABEL_127:
              if (*(_DWORD *)v88 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v88, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
              }
              else
              {
                *(_DWORD *)v88 -= 2;
              }
              goto LABEL_211;
            }
          }
        }
      }
    }
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v88, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
LABEL_131:
  a9.i64[0] = 0xFFFFFFFF00000000;
  v581 = 0xFFFFFFFF00000000;
  LOBYTE(v585) = 0;
  v586 = 0;
  v587 = 0;
  v588 = 0;
  v583 = 0;
  memset(v584, 0, 13);
  v582 = (_DWORD *)v11;
  if (v12 >= 0xFFFE000000000000 && (v12 & 0x80000000) == 0)
  {
    v93 = v12;
    goto LABEL_134;
  }
  if (v12 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v12;
    if (v12 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v12 - 0x2000000000000;
    v93 = *(double *)a9.i64;
    if ((_DWORD)v93 == -1 || *(double *)a9.i64 != (double)v93)
    {
      if (!v9)
        goto LABEL_143;
      if ((v15 & 0xFFFE000000000002) != 0)
        goto LABEL_143;
      *(_DWORD *)(v9 + 4) |= 2u;
      if (v12 != 0xFFFE0000FFFFFFFFLL || !v15 || (*(_BYTE *)(v15 + 5) & 0xFE) != 0x24)
        goto LABEL_143;
      v256 = *(_QWORD **)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28);
      v257 = v256[288];
      v258 = (v257 & 1) != 0 ? (v257 >> 1) & 3 : *(unsigned __int8 *)(v257 + 4);
      if (v258 == 2)
        goto LABEL_143;
      v259 = v256[287];
      v260 = (v259 & 1) != 0 ? (v259 >> 1) & 3 : *(unsigned __int8 *)(v259 + 4);
      if (v260 == 2)
        goto LABEL_143;
      v261 = *(unsigned __int8 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8);
      v262 = (v261 & 0x10) != 0 ? ((v261 & 0xE) + 10) >> 1 : (v261 >> 1) & 7;
      v263 = *((_DWORD *)v256 + v262 + 213);
      v264 = v263 ? 16 * (v263 & 0xFFFFFFFE) : 0;
      if (v264 != 16 * (*(_DWORD *)v15 & 0xFFFFFFFE))
      {
        v444 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
        if (!v444)
          v444 = *(_QWORD *)(v15 + 16);
        if (v444 != v256[84] || *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x20))
          goto LABEL_143;
      }
      goto LABEL_430;
    }
LABEL_134:
    if ((v15 & 0xFFFE000000000002) != 0)
      goto LABEL_320;
    v94 = *(unsigned __int8 *)(v15 + 5);
    if (v94 == 2)
    {
      v95 = *(_QWORD *)(v15 + 8);
      if ((v95 & 1) != 0)
        v96 = (_DWORD *)(v15 + 16);
      else
        v96 = (_DWORD *)(v95 + 4);
      if (*v96 > v93)
      {
        v97 = JSC::JSString::getIndex((JSC::JSString *)v15, (JSC::JSGlobalObject *)v567, v93, a4, a5, a6, a7, a8, a9);
LABEL_141:
        IndexQuickly = v97;
        goto LABEL_208;
      }
LABEL_231:
      if (!v9)
        goto LABEL_233;
      goto LABEL_232;
    }
    if (v94 <= 0x16)
    {
      v143 = (JSC::VM *)v567[7];
      goto LABEL_311;
    }
    IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v15, v93, v9);
    if (IndexQuickly)
      goto LABEL_208;
    if ((*(_BYTE *)(v15 + 4) & 0xF) == 9 && v93 < *(_DWORD *)(*(_QWORD *)(v15 + 8) - 8))
    {
      v137 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28);
      v138 = *(unsigned __int8 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8);
      v139 = (v138 & 0x10) != 0 ? ((v138 & 0xE) + 10) >> 1 : (v138 >> 1) & 7;
      v140 = *(_DWORD *)(v137 + 4 * v139 + 852);
      v141 = v140 ? 16 * (v140 & 0xFFFFFFFE) : 0;
      if (v141 == 16 * (*(_DWORD *)v15 & 0xFFFFFFFE))
      {
        v279 = *(_QWORD *)(v137 + 2304);
        v280 = (v279 & 1) != 0 ? (v279 >> 1) & 3 : *(unsigned __int8 *)(v279 + 4);
        if (v280 != 2)
        {
LABEL_233:
          v94 = *(unsigned __int8 *)(v15 + 5);
          v143 = (JSC::VM *)v567[7];
          if (v94 > 0x16)
          {
LABEL_234:
            IndexQuickly = 10;
            while (1)
            {
              v144 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
              v146 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v144 + 0x4C) + 0x70))(v15, v567, v93, &v579);
              if (*((_DWORD *)v143 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v143, v145, a3, a4, a5, a6, a7, a8))
              {
                goto LABEL_430;
              }
              if ((v146 & 1) != 0)
                goto LABEL_322;
              if (BYTE2(v584[1]) == 3)
              {
                if (BYTE4(v584[1]))
                  goto LABEL_430;
                v147 = *(unsigned __int8 *)(v15 + 5);
                if (v147 == 61)
                  goto LABEL_240;
              }
              else
              {
                v147 = *(unsigned __int8 *)(v15 + 5);
                if (v147 == 61)
                {
                  if (BYTE2(v584[1]) == 1)
                    goto LABEL_430;
                  goto LABEL_240;
                }
              }
              if ((v147 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v15, v145, a3, a4, a5, a6, a7, a8) <= v93)
              {
                goto LABEL_430;
              }
LABEL_240:
              if ((*(_WORD *)(v144 + 12) & 0x800) == 0 || BYTE2(v584[1]) == 3)
              {
                v148 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
                if (!v148)
                  v148 = *(_QWORD *)(v15 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v148 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v15, v567);
                }
                else
                {
                  v148 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
                  if (!v148)
                    v148 = *(_QWORD *)(v15 + 16);
                }
                if (*((_DWORD *)v143 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v143, v145, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_430;
                }
              }
              if ((v148 & 0xFFFE000000000002) == 0)
              {
                v15 = v148;
                if (*(unsigned __int8 *)(v148 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_208;
            }
          }
LABEL_311:
          if (v94 == 2)
          {
            v188 = *(_QWORD *)(v15 + 8);
            if ((v188 & 1) != 0)
              v189 = (_DWORD *)(v15 + 16);
            else
              v189 = (_DWORD *)(v188 + 4);
            if (*v189 <= v93
              || (v190 = (unsigned __int8 *)JSC::JSString::getIndex((JSC::JSString *)v15, (JSC::JSGlobalObject *)v567, v93, a4, a5, a6, a7, a8, a9), *((_DWORD *)v143 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v143, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              v191 = 0;
            }
            else
            {
              v579 = (WTF::StringImpl *)v190;
              LODWORD(v581) = 10;
              v583 = 0;
              v191 = 1;
              BYTE1(v584[1]) = 1;
            }
            if (*((_DWORD *)v143 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v143, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_545;
            }
            if (v191)
            {
LABEL_322:
              if (BYTE1(v584[1]) == 1)
              {
                IndexQuickly = (uint64_t)v579;
                goto LABEL_208;
              }
              if (BYTE1(v584[1]) != 2)
              {
                v437 = (uint64_t **)v567[7];
                JSC::Identifier::from(v437, v93, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v592);
                IndexQuickly = JSC::PropertySlot::customGetter((uint64_t)&v579, (JSC::VM *)v437, (WTF::StringImpl *)v592);
                v179 = (WTF::StringImpl *)v592;
                *(_QWORD *)&v592 = 0;
                if (!v179)
                  goto LABEL_208;
                if (*(_DWORD *)v179 != 2)
                {
                  *(_DWORD *)v179 -= 2;
                  goto LABEL_208;
                }
                goto LABEL_309;
              }
              v97 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v579, (JSC::JSGlobalObject *)v567, a3, a4, a5, a6, a7, a8);
              goto LABEL_141;
            }
          }
LABEL_320:
          v192 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v589, (unint64_t)v567);
          if (v192)
          {
            v15 = v192;
            v143 = (JSC::VM *)v567[7];
            goto LABEL_234;
          }
LABEL_545:
          IndexQuickly = 0;
          goto LABEL_208;
        }
      }
    }
    v142 = *(unsigned __int8 *)(v15 + 5);
    if (v142 == 33)
    {
      if (*(_DWORD *)(v15 + 32) <= v93)
        goto LABEL_231;
      v338 = *(_QWORD *)(v15 + 40);
      if (!v338)
        goto LABEL_233;
      if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
        goto LABEL_231;
      if (!v9 || (v338 & 0x3FFFFFFFFLL) == -qword_1ECF4C038)
        goto LABEL_233;
    }
    else
    {
      if (v142 != 34)
        goto LABEL_231;
      isMappedArgument = JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v15, v93);
      if (!v9 || isMappedArgument)
        goto LABEL_233;
    }
LABEL_232:
    *(_DWORD *)(v9 + 4) |= 2u;
    goto LABEL_233;
  }
LABEL_143:
  if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v428 = (JSC::VM *)v567[7];
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v567, v15);
    JSC::VM::throwException(v428, (JSC::JSGlobalObject *)v567, NotAnObjectError, v430, v431, v432, v433, v434);
  }
  if (*((_DWORD *)v86 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v86, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_545;
  v98 = v567[7];
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_940:
    v591 = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v98 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v98, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        v99 = *(_QWORD *)(*(_QWORD *)(v98 + 41952) + 8);
        if (v99)
          goto LABEL_150;
        goto LABEL_152;
      }
      v12 = (unint64_t)v591;
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v475 = *(unsigned __int8 *)(v12 + 5);
      if (v475 == 2)
        goto LABEL_943;
      if (v475 == 4)
      {
        v99 = *(_QWORD *)(v12 + 8);
        v482 = *(_DWORD *)v99;
        *(_DWORD *)v99 += 4;
        v100 = v482 + 2;
        if (!v100)
        {
          v238 = (WTF::StringImpl *)v99;
          goto LABEL_959;
        }
        goto LABEL_151;
      }
    }
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v591, (uint64_t)v567, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_943:
    if (*(_DWORD *)(v98 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v98, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v99 = 0;
      goto LABEL_152;
    }
    v99 = *(_QWORD *)(v12 + 8);
    v476 = v567[7];
    if ((v99 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v567);
      if (!*(_DWORD *)(v476 + 80))
        goto LABEL_372;
      v394 = (JSC::VM *)v476;
      goto LABEL_666;
    }
    if ((*(_BYTE *)(v99 + 16) & 0x10) == 0)
    {
      if (*(_QWORD *)(v476 + 64768) != v99)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v476 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), a3, a4, a5, a6, a7, a8);
        v477 = *(_QWORD *)(v12 + 8);
        if (v477)
        {
          if ((*(_BYTE *)(v477 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v477 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v477, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v592);
            v477 = v592;
          }
        }
        v478 = *(WTF::StringImpl **)(v476 + 64776);
        *(_QWORD *)(v476 + 64776) = v477;
        if (v478)
        {
          if (*(_DWORD *)v478 == 2)
          {
            WTF::StringImpl::~StringImpl(v478, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
          }
          else
          {
            *(_DWORD *)v478 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v479 = *(_DWORD **)(v476 + 64776);
        *v479 += 2;
        *(_QWORD *)&v592 = v479;
        __dmb(0xAu);
        v480 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v592;
        *(_QWORD *)&v592 = v480;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v476 + 192, (unint64_t)&v592);
        v481 = (WTF::StringImpl *)v592;
        *(_QWORD *)&v592 = 0;
        if (v481)
        {
          if (*(_DWORD *)v481 == 2)
          {
            WTF::StringImpl::~StringImpl(v481, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v491, v492, v493, v494, v495, v496, v497, v498);
          }
          else
          {
            *(_DWORD *)v481 -= 2;
          }
        }
      }
      v99 = *(_QWORD *)(v476 + 64776);
    }
LABEL_150:
    v100 = *(_DWORD *)v99 + 2;
LABEL_151:
    *(_DWORD *)v99 = v100;
    goto LABEL_152;
  }
  if (*(_BYTE *)(v12 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(v12, (JSC::VM **)v567, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_940;
  }
  v99 = *(_QWORD *)(v12 + 8);
  if ((v99 & 1) == 0)
  {
    if ((*(_BYTE *)(v99 + 16) & 0x10) == 0)
    {
      v265 = *(WTF::StringImpl **)(v98 + 64768);
      if (v265 != (WTF::StringImpl *)v99)
      {
        *(_DWORD *)v99 += 2;
        *(_QWORD *)(v98 + 64768) = v99;
        if (v265)
        {
          if (*(_DWORD *)v265 == 2)
          {
            WTF::StringImpl::~StringImpl(v265, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v386, v387, v388, v389, v390, v391, v392, v393);
          }
          else
          {
            *(_DWORD *)v265 -= 2;
          }
        }
        v266 = *(_QWORD *)(v12 + 8);
        if (v266)
        {
          if ((*(_BYTE *)(v266 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v266 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v266, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v592);
            v266 = v592;
          }
        }
        v267 = *(WTF::StringImpl **)(v98 + 64776);
        *(_QWORD *)(v98 + 64776) = v266;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
          {
            WTF::StringImpl::~StringImpl(v267, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v373, v374, v375, v376, v377, v378, v379, v380);
          }
          else
          {
            *(_DWORD *)v267 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v268 = *(_DWORD **)(v98 + 64776);
        *v268 += 2;
        *(_QWORD *)&v592 = v268;
        __dmb(0xAu);
        v269 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v592;
        *(_QWORD *)&v592 = v269;
        v270 = (_QWORD *)(v98 + 808);
        v271 = *(unsigned int *)(v98 + 820);
        if ((_DWORD)v271 == *(_DWORD *)(v98 + 816))
        {
          v273 = (__int128 *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v270, v271 + 1, (unint64_t)&v592);
          v271 = *(unsigned int *)(v98 + 820);
          v272 = (_QWORD *)(*(_QWORD *)(v98 + 808) + 8 * v271);
          v269 = *(_QWORD *)v273;
        }
        else
        {
          v272 = (_QWORD *)(*v270 + 8 * v271);
          v273 = &v592;
        }
        *(_QWORD *)v273 = 0;
        *v272 = v269;
        *(_DWORD *)(v98 + 820) = v271 + 1;
        v274 = (WTF::StringImpl *)v592;
        *(_QWORD *)&v592 = 0;
        if (v274)
        {
          if (*(_DWORD *)v274 == 2)
          {
            WTF::StringImpl::~StringImpl(v274, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
          }
          else
          {
            *(_DWORD *)v274 -= 2;
          }
        }
      }
      v99 = *(_QWORD *)(v98 + 64776);
    }
    goto LABEL_150;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v567);
  if (*(_DWORD *)(v98 + 80))
  {
    v394 = (JSC::VM *)v98;
LABEL_666:
    if (!JSC::VM::hasExceptionsAfterHandlingTraps(v394, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_372;
    v99 = 0;
    v238 = (WTF::StringImpl *)v592;
    *(_QWORD *)&v592 = 0;
    if (!v238)
      goto LABEL_152;
LABEL_374:
    if (*(_DWORD *)v238 != 2)
    {
      *(_DWORD *)v238 -= 2;
      goto LABEL_152;
    }
LABEL_959:
    WTF::StringImpl::~StringImpl(v238, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v483, v484, v485, v486, v487, v488, v489, v490);
    goto LABEL_152;
  }
LABEL_372:
  v99 = v592;
  if ((_QWORD)v592)
  {
    *(_DWORD *)v592 += 2;
    *(_QWORD *)&v592 = 0;
    v238 = (WTF::StringImpl *)v99;
    goto LABEL_374;
  }
LABEL_152:
  if (*((_DWORD *)v86 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v86, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    IndexQuickly = 0;
    goto LABEL_205;
  }
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_985;
  v101 = v567[7];
  v102 = *(unsigned __int8 *)(v15 + 5);
  if (v102 > 0x16)
    goto LABEL_155;
  if (v102 != 2)
    goto LABEL_985;
  if (*(_QWORD *)(*(_QWORD *)(v101 + 41952) + 1768) != v99)
  {
    if (!v99 || (v523 = *(_DWORD *)(v99 + 16), (v523 & 0x20) != 0))
    {
LABEL_1009:
      v512 = 0;
      goto LABEL_983;
    }
    v524 = *(_WORD **)(v99 + 8);
    v525 = *(unsigned int *)(v99 + 4);
    if ((v523 & 4) == 0)
    {
      if ((_DWORD)v525)
      {
        v526 = (unsigned __int16)*v524 - 48;
        if (v526 <= 9 && (*v524 != 48 || v525 <= 1))
        {
          v533 = v524 + 1;
          v534 = v525 - 1;
          while (v534)
          {
            if (v526 > 0x19999999)
              goto LABEL_1005;
            v535 = *v533 - 48;
            if (v535 > 9)
              goto LABEL_1005;
            v527 = 0;
            LOBYTE(v525) = 0;
            v528 = 0;
            v84 = __CFADD__(v535, 10 * v526);
            v526 = v535 + 10 * v526;
            ++v533;
            --v534;
            if (v84)
              goto LABEL_1007;
          }
          v528 = v526 & 0xFFFFFF00;
          v527 = 0x100000000;
          if (v526 == -1)
          {
            v527 = 0;
            LOBYTE(v525) = 0;
          }
          else
          {
            LOBYTE(v525) = v526;
          }
          if (v526 == -1)
            v528 = 0;
          goto LABEL_1007;
        }
LABEL_1005:
        v527 = 0;
        LOBYTE(v525) = 0;
      }
      else
      {
        v527 = 0;
      }
      v528 = 0;
LABEL_1007:
      v529 = v525;
LABEL_1008:
      if ((v527 & 0x100000000) != 0)
      {
        a3 = v528 | v529;
        v547 = *(_QWORD *)(v15 + 8);
        v548 = (_DWORD *)((v547 & 1) != 0 ? v15 + 16 : v547 + 4);
        if (*v548 > a3)
        {
          v510 = (unsigned __int8 *)JSC::JSString::getIndex((JSC::JSString *)v15, (JSC::JSGlobalObject *)v567, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v101 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v101, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            v511 = 10;
            goto LABEL_982;
          }
        }
      }
      goto LABEL_1009;
    }
    if ((_DWORD)v525)
    {
      v551 = *(unsigned __int8 *)v524 - 48;
      if (v551 <= 9 && (v525 < 2 || *(_BYTE *)v524 != 48))
      {
        v555 = v525 - 1;
        v556 = (unsigned __int8 *)v524 + 1;
        while (v555)
        {
          if (v551 > 0x19999999)
            goto LABEL_1179;
          v557 = *v556 - 48;
          if (v557 > 9)
            goto LABEL_1179;
          v529 = 0;
          LOBYTE(v525) = 0;
          v527 = 0;
          v84 = __CFADD__(v557, 10 * v551);
          v551 = v557 + 10 * v551;
          --v555;
          ++v556;
          if (v84)
            goto LABEL_1181;
        }
        if (v551 != -1)
        {
          v529 = v551 & 0xFFFFFF00;
          v527 = 0x100000000;
          LOBYTE(v525) = v551;
          goto LABEL_1181;
        }
      }
LABEL_1179:
      v529 = 0;
      LOBYTE(v525) = 0;
    }
    else
    {
      v529 = 0;
    }
    v527 = 0;
LABEL_1181:
    v528 = v525;
    goto LABEL_1008;
  }
  v507 = *(_QWORD *)(v15 + 8);
  if ((v507 & 1) != 0)
    v508 = (unsigned int *)(v15 + 16);
  else
    v508 = (unsigned int *)(v507 + 4);
  v509 = *v508;
  if ((v509 & 0x80000000) != 0)
    v510 = (unsigned __int8 *)(COERCE__INT64((double)v509) + 0x2000000000000);
  else
    v510 = (unsigned __int8 *)(v509 | 0xFFFE000000000000);
  v511 = 14;
LABEL_982:
  v579 = (WTF::StringImpl *)v510;
  LODWORD(v581) = v511;
  v583 = 0;
  v512 = 1;
  BYTE1(v584[1]) = 1;
LABEL_983:
  if (*(_DWORD *)(v101 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v101, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_1079:
    IndexQuickly = 10;
    goto LABEL_205;
  }
  if ((v512 & 1) != 0)
    goto LABEL_203;
LABEL_985:
  v513 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v589, (unint64_t)v567);
  if (!v513)
    goto LABEL_1079;
  v15 = v513;
  v101 = v567[7];
LABEL_155:
  v103 = (_BYTE *)(v15 + 6);
  v104 = v99 >> 4;
  v105 = v15;
  if ((*(_BYTE *)(v15 + 6) & 8) == 0)
  {
    v106 = v15;
    do
    {
      v107 = *(_DWORD *)v106 & 0xFFFFFFFE;
      v108 = 16 * v107;
      if (!(_DWORD)v104 || (v104 & ~*(_DWORD *)(16 * v107 + 0x20)) != 0)
        goto LABEL_168;
      v109 = *(_QWORD *)(16 * v107 + 0x58);
      if (!v109)
      {
        v120 = *(_QWORD *)(16 * v107 + 0x40);
        if (!v120 || *(_BYTE *)(v120 + 5) != 1 && *(_DWORD *)(v120 + 80) < 2u)
          goto LABEL_168;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v108, (JSC::VM *)v101, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v109)
          goto LABEL_168;
      }
      if (!*(_DWORD *)(v109 + 24))
        goto LABEL_168;
      v110 = *(_QWORD *)(v109 + 16);
      v111 = v110 & 0xFFFFFFFFFFFFFFFELL;
      v112 = *(unsigned int *)(v109 + 8);
      v113 = *(_DWORD *)(v99 + 16);
      if ((v110 & 1) != 0)
      {
        if ((v113 & 0x20) != 0)
          v113 = *(_DWORD *)(v99 + 32);
        v114 = *(_DWORD *)(v109 + 12);
        v115 = (v113 >> 8) & *(_QWORD *)&v114;
        v116 = *(unsigned __int8 *)(v111 + v115);
        if (!*(_BYTE *)(v111 + v115))
          goto LABEL_168;
        v117 = v111 + v112;
        v118 = 1;
        while (1)
        {
          v119 = *(_QWORD *)(v117 + 8 * (v116 - 1));
          if (v99 == (v119 & 0xFFFFFFFFFFFFLL))
            break;
          v115 = ((_DWORD)v115 + v118) & v114;
          v116 = *(unsigned __int8 *)(v111 + v115);
          ++v118;
          if (!*(_BYTE *)(v111 + v115))
            goto LABEL_168;
        }
        a6 = (v119 >> 16) & 0xFF00000000 | HIBYTE(v119);
      }
      else
      {
        if ((v113 & 0x20) != 0)
          v113 = *(_DWORD *)(v99 + 32);
        v121 = *(_DWORD *)(v109 + 12);
        v122 = v121 & (v113 >> 8);
        v123 = *(_DWORD *)(v111 + 4 * v122);
        if (!v123)
          goto LABEL_168;
        v124 = v111 + 4 * v112;
        v125 = 1;
        while (1)
        {
          v126 = (v123 - 1);
          if (v99 == *(_QWORD *)(v124 + 16 * v126))
            break;
          v122 = (v122 + v125) & v121;
          v123 = *(_DWORD *)(v111 + 4 * v122);
          ++v125;
          if (!v123)
            goto LABEL_168;
        }
        a6 = *(unsigned int *)(v124 + 16 * v126 + 8) | ((unint64_t)*(unsigned __int8 *)(v124 + 16 * v126 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v131 = v106 + 16;
          v132 = a6 << 32;
        }
        else
        {
          v131 = *(_QWORD *)(v106 + 8) - 8;
          v132 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v131 + (v132 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v133 = *(unsigned __int8 *)(a4 + 5);
          if (v133 != 5)
          {
            if (v133 != 6)
              goto LABEL_201;
            v275 = *(_DWORD *)(v108 + 16) & 3;
            v276 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v278 = *(int8x16_t ***)(a4 + 24);
              v277 = *(_QWORD *)(a4 + 32);
              v579 = *(WTF::StringImpl **)(a4 + 8);
              v580 = v276;
              LODWORD(v581) = HIDWORD(a6);
              v583 = (_DWORD *)v106;
              goto LABEL_446;
            }
            v579 = *(WTF::StringImpl **)(a4 + 8);
            v580 = v276;
            LODWORD(v581) = HIDWORD(a6);
            v583 = (_DWORD *)v106;
LABEL_589:
            BYTE1(v584[1]) = 3;
            if (v275 != 2)
              LOBYTE(v584[1]) = 1;
            goto LABEL_203;
          }
          v220 = (unsigned int *)v106;
          v221 = v101;
LABEL_348:
          JSC::JSObject::fillGetterPropertySlot(v220, v221, (uint64_t)&v579, a4, a5, a6);
          goto LABEL_203;
        }
LABEL_201:
        v579 = (WTF::StringImpl *)a4;
        v583 = (_DWORD *)v106;
LABEL_202:
        v581 = __PAIR64__(a6, a5);
        LOWORD(v584[1]) = 257;
        goto LABEL_203;
      }
LABEL_168:
      if ((*v103 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v106, (JSC::VM *)v101, v99, (uint64_t)&v579) & 1) != 0)
      {
        goto LABEL_203;
      }
      v105 = *(_QWORD *)(v108 + 48);
      if (!v105)
        v105 = *(_QWORD *)(v106 + 16);
      if ((v105 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v105 + 5) < 0x17u)
      {
        if (v99)
        {
          v127 = *(_DWORD *)(v99 + 16);
          if ((v127 & 0x20) != 0)
            goto LABEL_195;
          v128 = *(_WORD **)(v99 + 8);
          v129 = *(unsigned int *)(v99 + 4);
          if ((v127 & 4) == 0)
          {
            if ((_DWORD)v129)
            {
              v130 = (unsigned __int16)*v128 - 48;
              if (v130 <= 9 && (*v128 != 48 || v129 <= 1))
              {
                v174 = v128 + 1;
                v175 = v129 - 1;
                IndexQuickly = 10;
                while (v175)
                {
                  if (v130 <= 0x19999999)
                  {
                    v176 = *v174 - 48;
                    if (v176 <= 9)
                    {
                      v84 = __CFADD__(v176, 10 * v130);
                      v130 = v176 + 10 * (_DWORD)v130;
                      ++v174;
                      --v175;
                      if (!v84)
                        continue;
                    }
                  }
                  goto LABEL_205;
                }
                goto LABEL_831;
              }
            }
LABEL_195:
            IndexQuickly = 10;
            goto LABEL_206;
          }
          if (!(_DWORD)v129)
            goto LABEL_195;
          v130 = *(unsigned __int8 *)v128 - 48;
          if (v130 > 9 || v129 >= 2 && *(_BYTE *)v128 == 48)
            goto LABEL_195;
          v446 = v129 - 1;
          v447 = (unsigned __int8 *)v128 + 1;
          IndexQuickly = 10;
          while (v446)
          {
            if (v130 <= 0x19999999)
            {
              v448 = *v447 - 48;
              if (v448 <= 9)
              {
                v84 = __CFADD__(v448, 10 * v130);
                v130 = v448 + 10 * (_DWORD)v130;
                --v446;
                ++v447;
                if (!v84)
                  continue;
              }
            }
            goto LABEL_205;
          }
LABEL_831:
          if ((_DWORD)v130 == -1)
            goto LABEL_1079;
          v449 = (JSC::VM *)v567[7];
          IndexQuickly = 10;
          while (2)
          {
            v450 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
            v451 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, WTF::StringImpl **))(16
                                                                                              * *(unsigned int *)(v450 + 0x4C)
                                                                                              + 0x70))(v15, v567, v130, &v579);
            if (*((_DWORD *)v449 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v449, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_1079;
            }
            if ((v451 & 1) != 0)
              goto LABEL_203;
            if (BYTE2(v584[1]) == 3)
            {
              if (BYTE4(v584[1]))
                goto LABEL_1079;
              v452 = *(unsigned __int8 *)(v15 + 5);
              if (v452 != 61)
                goto LABEL_837;
            }
            else
            {
              v452 = *(unsigned __int8 *)(v15 + 5);
              if (v452 == 61)
              {
                if (BYTE2(v584[1]) == 1)
                  goto LABEL_1079;
              }
              else
              {
LABEL_837:
                if ((v452 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v130)
                {
                  goto LABEL_1079;
                }
              }
            }
            if ((*(_WORD *)(v450 + 12) & 0x800) == 0 || BYTE2(v584[1]) == 3)
            {
              v453 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
              if (!v453)
                v453 = *(_QWORD *)(v15 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v453 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v15, v567);
              }
              else
              {
                v453 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
                if (!v453)
                  v453 = *(_QWORD *)(v15 + 16);
              }
              if (*((_DWORD *)v449 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v449, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
              {
                goto LABEL_1079;
              }
            }
            if ((v453 & 0xFFFE000000000002) != 0)
              goto LABEL_205;
            v15 = v453;
            if (*(unsigned __int8 *)(v453 + 5) <= 0x16u)
              goto LABEL_205;
            continue;
          }
        }
LABEL_430:
        IndexQuickly = 10;
        goto LABEL_208;
      }
      v103 = (_BYTE *)(v105 + 6);
      v106 = v105;
    }
    while ((*(_BYTE *)(v105 + 6) & 8) == 0);
  }
  if (!v99)
    goto LABEL_500;
  v316 = *(_DWORD *)(v99 + 16);
  if ((v316 & 0x20) != 0)
    goto LABEL_500;
  v317 = *(_WORD **)(v99 + 8);
  v318 = *(unsigned int *)(v99 + 4);
  if ((v316 & 4) == 0)
  {
    if ((_DWORD)v318)
    {
      v319 = (unsigned __int16)*v317 - 48;
      if (v319 <= 9 && (*v317 != 48 || v318 <= 1))
      {
        v339 = v317 + 1;
        v340 = v318 - 1;
        while (v340)
        {
          if (v319 > 0x19999999)
            goto LABEL_496;
          v341 = *v339 - 48;
          if (v341 > 9)
            goto LABEL_496;
          v320 = 0;
          LOBYTE(v318) = 0;
          v321 = 0;
          v84 = __CFADD__(v341, 10 * v319);
          v319 = v341 + 10 * v319;
          ++v339;
          --v340;
          if (v84)
            goto LABEL_498;
        }
        v321 = v319 & 0xFFFFFF00;
        v320 = 0x100000000;
        if (v319 == -1)
        {
          v320 = 0;
          LOBYTE(v318) = 0;
        }
        else
        {
          LOBYTE(v318) = v319;
        }
        if (v319 == -1)
          v321 = 0;
        goto LABEL_498;
      }
LABEL_496:
      v320 = 0;
      LOBYTE(v318) = 0;
    }
    else
    {
      v320 = 0;
    }
    v321 = 0;
LABEL_498:
    v322 = v318;
    goto LABEL_499;
  }
  if ((_DWORD)v318)
  {
    v537 = *(unsigned __int8 *)v317 - 48;
    if (v537 <= 9 && (v318 < 2 || *(_BYTE *)v317 != 48))
    {
      v541 = v318 - 1;
      v542 = (unsigned __int8 *)v317 + 1;
      while (v541)
      {
        if (v537 > 0x19999999)
          goto LABEL_1049;
        v543 = *v542 - 48;
        if (v543 > 9)
          goto LABEL_1049;
        v322 = 0;
        LOBYTE(v318) = 0;
        v320 = 0;
        v84 = __CFADD__(v543, 10 * v537);
        v537 = v543 + 10 * v537;
        --v541;
        ++v542;
        if (v84)
          goto LABEL_1051;
      }
      if (v537 == -1)
        v322 = 0;
      else
        v322 = v537 & 0xFFFFFF00;
      if (v537 == -1)
        LOBYTE(v318) = 0;
      else
        LOBYTE(v318) = v537;
      if (v537 == -1)
        v320 = 0;
      else
        v320 = 0x100000000;
      goto LABEL_1051;
    }
LABEL_1049:
    v322 = 0;
    LOBYTE(v318) = 0;
  }
  else
  {
    v322 = 0;
  }
  v320 = 0;
LABEL_1051:
  v321 = v318;
LABEL_499:
  if ((v320 & 0x100000000) != 0)
  {
    v355 = v321 | v322;
    v356 = (JSC::VM *)v567[7];
    IndexQuickly = 10;
    while (1)
    {
      v357 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
      v358 = v15;
      v359 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(v357 + 0x4C)
                                                                                                 + 0x70))(v15, v567, v355, &v579);
      v360 = v359;
      if (*((_DWORD *)v356 + 20))
      {
        v436 = JSC::VM::hasExceptionsAfterHandlingTraps(v356, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (((v436 | v360) & 1) != 0)
        {
          if (!v436)
            goto LABEL_203;
          goto LABEL_1079;
        }
      }
      else if ((v359 & 1) != 0)
      {
        goto LABEL_203;
      }
      if (BYTE2(v584[1]) == 3)
      {
        if (BYTE4(v584[1]))
          goto LABEL_1079;
        v361 = *(unsigned __int8 *)(v15 + 5);
        if (v361 == 61)
          goto LABEL_624;
      }
      else
      {
        v361 = *(unsigned __int8 *)(v15 + 5);
        if (v361 == 61)
        {
          if (BYTE2(v584[1]) == 1)
            goto LABEL_1079;
          goto LABEL_624;
        }
      }
      if ((v361 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v355)
      {
        goto LABEL_1079;
      }
LABEL_624:
      if ((*(_WORD *)(v357 + 12) & 0x800) == 0 || BYTE2(v584[1]) == 3)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
        if (!v15)
          v15 = *(_QWORD *)(v358 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xB0))(v15, v567);
        }
        else
        {
          v15 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
          if (!v15)
            v15 = *(_QWORD *)(v358 + 16);
        }
        if (*((_DWORD *)v356 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v356, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_1079;
        }
      }
      if ((v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v15 + 5) <= 0x16u)
        goto LABEL_205;
    }
  }
LABEL_500:
  v323 = (JSC::VM *)v567[7];
  IndexQuickly = 10;
  while (1)
  {
    v324 = 16 * (*(_DWORD *)v105 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v105 + 6) & 8) == 0)
      break;
    v410 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, WTF::StringImpl **))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(v105, v567, v99, &v579);
    if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_1079;
    if ((v410 & 1) != 0)
      goto LABEL_203;
    if (BYTE2(v584[1]) == 3)
    {
      if (BYTE4(v584[1]))
        goto LABEL_1079;
      v411 = *(unsigned __int8 *)(v105 + 5);
      if (v411 != 61)
      {
LABEL_721:
        if (!v99)
          goto LABEL_507;
        if ((v411 - 50) < 0xFFFFFFF5)
          goto LABEL_507;
        v412 = *(_DWORD *)(v99 + 16);
        if ((v412 & 0x20) != 0)
          goto LABEL_507;
        v413 = *(unsigned int *)(v99 + 4);
        if (!(_DWORD)v413)
          goto LABEL_507;
        v414 = *(unsigned __int8 **)(v99 + 8);
        if ((v412 & 4) == 0)
        {
          v415 = *(unsigned __int16 *)v414;
          if ((_DWORD)v413 == 1)
            goto LABEL_727;
          if (v415 == 45)
          {
            v415 = *((unsigned __int16 *)v414 + 1);
            goto LABEL_749;
          }
          if ((v415 - 48) >= 0xA && ((_DWORD)v413 != 8 || v415 != 73))
          {
LABEL_777:
            if ((_DWORD)v413 != 3 || v415 != 78)
              goto LABEL_507;
          }
LABEL_762:
          v101 = v101 & 0xFFFFFF0000000000 | v413 | ((unint64_t)((v412 >> 2) & 1) << 32);
          JSC::jsToNumber(v414, v101);
          WTF::numberToString(&v592, v438);
          if (WTF::equal(v99, (unint64_t)&v592, v439))
            goto LABEL_195;
          goto LABEL_507;
        }
        v415 = *v414;
        if ((_DWORD)v413 == 1)
        {
LABEL_727:
          if ((v415 - 48) < 0xA)
            goto LABEL_195;
          goto LABEL_507;
        }
        if (v415 == 45)
        {
          v415 = v414[1];
LABEL_749:
          if ((v415 - 48) < 0xA)
          {
            if ((_DWORD)v413 == 2)
              goto LABEL_195;
            goto LABEL_762;
          }
          if ((_DWORD)v413 != 9)
            goto LABEL_507;
        }
        else
        {
          if ((v415 - 48) < 0xA)
            goto LABEL_762;
          if ((_DWORD)v413 != 8)
            goto LABEL_777;
        }
        if (v415 != 73)
          goto LABEL_507;
        goto LABEL_762;
      }
    }
    else
    {
      v411 = *(unsigned __int8 *)(v105 + 5);
      if (v411 != 61)
        goto LABEL_721;
      if (BYTE2(v584[1]) == 1)
        goto LABEL_1079;
    }
LABEL_507:
    if ((*(_WORD *)(v324 + 12) & 0x800) == 0)
    {
      v327 = *(_DWORD *)v105;
LABEL_509:
      v328 = *(_QWORD *)(16 * (v327 & 0xFFFFFFFE) + 0x30);
      if (!v328)
        v328 = *(_QWORD *)(v105 + 16);
      goto LABEL_511;
    }
    v327 = *(_DWORD *)v105;
    if (BYTE2(v584[1]) == 3)
      goto LABEL_509;
    v406 = 16 * (v327 & 0xFFFFFFFE);
    if ((*(_WORD *)(v406 + 12) & 0x800) != 0)
    {
      v328 = (*(uint64_t (**)(uint64_t, uint64_t *))(16 * *(unsigned int *)(v406 + 76) + 0xB0))(v105, v567);
    }
    else
    {
      v328 = *(_QWORD *)(v406 + 48);
      if (!v328)
        v328 = *(_QWORD *)(v105 + 16);
    }
    if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_1079;
LABEL_511:
    if ((v328 & 0xFFFE000000000002) == 0)
    {
      v105 = v328;
      if (*(unsigned __int8 *)(v328 + 5) > 0x16u)
        continue;
    }
    goto LABEL_205;
  }
  if (!(_DWORD)v104
    || (v104 & ~*(_DWORD *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE)), v323, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v325)|| (*(_QWORD *)&v592 = v99, v326 = JSC::PropertyTable::get(v325, (uint64_t *)&v592), a6 = v326, (_DWORD)v326 == -1))
  {
    if ((*(_BYTE *)(v105 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v105, v323, v99, (uint64_t)&v579) & 1) != 0)
    {
      goto LABEL_203;
    }
    goto LABEL_507;
  }
  a5 = HIDWORD(v326);
  if ((int)v326 <= 63)
  {
    v332 = v105 + 16;
    v333 = v326 << 32;
  }
  else
  {
    v332 = *(_QWORD *)(v105 + 8) - 8;
    v333 = 0x3F00000000 - (v326 << 32);
  }
  a4 = *(_QWORD *)(v332 + (v333 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_534:
    v579 = (WTF::StringImpl *)a4;
    v583 = (_DWORD *)v105;
    goto LABEL_202;
  }
  v334 = *(unsigned __int8 *)(a4 + 5);
  if (v334 == 5)
  {
    v220 = (unsigned int *)v105;
    v221 = (uint64_t)v323;
    goto LABEL_348;
  }
  if (v334 != 6)
    goto LABEL_534;
  v275 = *(_DWORD *)(v324 + 16) & 3;
  v395 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v579 = *(WTF::StringImpl **)(a4 + 8);
    v580 = v395;
    LODWORD(v581) = HIDWORD(v326);
    v583 = (_DWORD *)v105;
    goto LABEL_589;
  }
  v278 = *(int8x16_t ***)(a4 + 24);
  v277 = *(_QWORD *)(a4 + 32);
  v579 = *(WTF::StringImpl **)(a4 + 8);
  v580 = v395;
  LODWORD(v581) = HIDWORD(v326);
  v583 = (_DWORD *)v105;
LABEL_446:
  BYTE1(v584[1]) = 3;
  if (v275 != 2)
    LOBYTE(v584[1]) = 1;
  BYTE3(v584[1]) = 1;
  v587 = v278;
  v588 = v277;
LABEL_203:
  if (BYTE1(v584[1]) == 1)
  {
    IndexQuickly = (uint64_t)v579;
  }
  else
  {
    if (BYTE1(v584[1]) == 2)
    {
      v202 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v579, (JSC::JSGlobalObject *)v567, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v239 = (unint64_t)v583;
      v240 = *(_QWORD *)(16 * (*v583 & 0xFFFFFFFE) + 0x28);
      if ((v581 & 0x20) != 0)
        v239 = (unint64_t)v582;
      if (BYTE3(v584[1]) != 1)
        goto LABEL_390;
      if ((v239 & 0xFFFE000000000002) != 0)
        goto LABEL_780;
      v241 = *(unsigned int *)(16 * (*(_DWORD *)v239 & 0xFFFFFFFE) + 0x4C);
      v242 = *(_DWORD *)(16 * (*(_DWORD *)v239 & 0xFFFFFFFE) + 0x4C) != 0;
      v243 = 16 * v241;
      if ((_DWORD)v241)
        v244 = v587 == (int8x16_t **)v243;
      else
        v244 = 1;
      if (!v244)
      {
        do
        {
          v243 = *(_QWORD *)(v243 + 16);
          v242 = v243 != 0;
        }
        while ((int8x16_t **)v243 != v587 && v243 != 0);
      }
      if (!v242)
      {
LABEL_780:
        *(_QWORD *)&v592 = v567[7];
        v202 = JSC::throwDOMAttributeGetterTypeError(v240, (JSC::VM **)&v592, v587, (WTF::StringImpl *)v99);
      }
      else
      {
LABEL_390:
        v202 = ((uint64_t (*)(unint64_t))v579)(v240);
      }
    }
    IndexQuickly = v202;
  }
LABEL_205:
  if (v99)
  {
LABEL_206:
    if (*(_DWORD *)v99 != 2)
    {
      *(_DWORD *)v99 -= 2;
      goto LABEL_208;
    }
    v179 = (WTF::StringImpl *)v99;
LABEL_309:
    WTF::StringImpl::~StringImpl(v179, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
  }
LABEL_208:
  if (v586)
  {
    v134 = *(_DWORD *)(v585 + 4);
    if (!v134)
    {
      __break(0xC471u);
      JUMPOUT(0x1987AF4DCLL);
    }
    *(_DWORD *)(v585 + 4) = v134 - 1;
  }
LABEL_211:
  if (v575)
  {
    v135 = *(_DWORD *)(v574 + 4);
    if (!v135)
    {
      __break(0xC471u);
      JUMPOUT(0x1987AF384);
    }
    *(_DWORD *)(v574 + 4) = v135 - 1;
  }
  return IndexQuickly;
}

uint64_t operationGetByValWithThisGeneric(JSC::JSGlobalObject *a1, uint64_t this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t IndexQuickly;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  int v74;
  int v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t **v88;
  WTF::StringImpl *v89;
  JSC::VM *v90;
  WTF::StringImpl *v91;
  JSC::VM *v92;
  JSC::VM *v93;
  _QWORD *v94;
  uint64_t v95;
  JSC::VM **v96;
  JSC::VM **p_dst;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  size_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unsigned __int8 *v142;
  JSC::VM **v143;
  uint64_t v144;
  int v145;
  int v146;
  JSC::VM **v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 *v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  int v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  JSC::VM *v186;
  uint64_t v187;
  int8x16_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WTF::AtomStringImpl *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t Error;
  uint64_t v201;
  _DWORD *v202;
  uint64_t **v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v211;
  WTF::AtomStringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 *v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  int v243;
  uint64_t v244;
  int v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  int v250;
  JSC::VM *v251;
  WTF::StringImpl *v252;
  JSC::VM *v253;
  WTF::StringImpl *v254;
  JSC::VM *v255;
  JSC::VM *v256;
  _QWORD *v257;
  uint64_t v258;
  JSC::VM **v259;
  JSC::VM **v260;
  WTF::StringImpl *v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  unint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  uint64_t v299;
  unsigned __int8 *Index;
  int v301;
  char v302;
  int v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _DWORD *v308;
  char v309;
  int v310;
  uint64_t v311;
  BOOL v312;
  char v313;
  unsigned __int16 *v314;
  uint64_t v315;
  unsigned int v316;
  unsigned __int8 *v317;
  uint64_t v318;
  unsigned int v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  char v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  char v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int8 *v337;
  unsigned int v338;
  uint64_t v339;
  _DWORD *v340;
  int v341;
  unint64_t v342;
  char v343;
  uint64_t v344;
  int v345;
  JSC::VMTraps *v346;
  JSC::VMTraps *v347;
  JSC::VMTraps *v348;
  JSC::VMTraps *v349;
  uint64_t (*v350)(unint64_t);
  uint64_t v351;
  unint64_t v352;
  _DWORD *v353;
  _DWORD *v354;
  _QWORD v355[2];
  uint64_t v356;
  char v357;
  int8x16_t **v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  JSC::VM *__dst;
  char v363;
  unint64_t v364;
  _DWORD *v365;
  _DWORD *v366;
  _QWORD v367[2];
  uint64_t v368;
  char v369;
  int8x16_t **v370;
  uint64_t v371;
  char __s[8];
  uint64_t v373;
  uint64_t vars0;

  v10 = a4;
  v11 = a3;
  v12 = this;
  v373 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v14 + 40) = vars0;
  v360 = this;
  v15 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_83;
  if (a3 >= 0xFFFE000000000000 && (a3 & 0x80000000) == 0)
  {
    v16 = a3;
    goto LABEL_5;
  }
  if (a3 >> 49)
  {
    *(double *)a9.i64 = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = a3 - 0x2000000000000;
    v16 = *(double *)a9.i64;
    if ((_DWORD)v16 != -1 && *(double *)a9.i64 == (double)v16)
    {
LABEL_5:
      v17 = *(unsigned __int8 *)(this + 5);
      if (v17 >= 0x17)
      {
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(this, v16, 0);
        if (IndexQuickly)
          return IndexQuickly;
        v17 = *(unsigned __int8 *)(v12 + 5);
      }
      if (v17 == 2)
      {
        v201 = *(_QWORD *)(v12 + 8);
        v202 = (_DWORD *)((v201 & 1) != 0 ? v12 + 16 : v201 + 4);
        if (*v202 > v16)
          return JSC::JSString::getIndex((JSC::JSString *)v12, a1, v16, a4, a5, a6, a7, a8, a9);
      }
      a9.i64[0] = 0xFFFFFFFF00000000;
      v364 = 0xFFFFFFFF00000000;
      LOBYTE(v368) = 0;
      v369 = 0;
      v370 = 0;
      v371 = 0;
      v366 = 0;
      memset(v367, 0, 13);
      v365 = (_DWORD *)v10;
      v361 = v12;
      v18 = *((_QWORD *)a1 + 7);
      if (v17 > 0x16)
        goto LABEL_10;
      if (v17 == 2)
      {
        v307 = *(_QWORD *)(v12 + 8);
        if ((v307 & 1) != 0)
          v308 = (_DWORD *)(v12 + 16);
        else
          v308 = (_DWORD *)(v307 + 4);
        if (*v308 <= v16)
          goto LABEL_624;
        IndexQuickly = JSC::JSString::getIndex((JSC::JSString *)v12, a1, v16, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v18 + 80))
          goto LABEL_503;
        v334 = *(_DWORD *)(v18 + 80);
        if ((v334 & 0x27) != 0 && (v334 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v18 + 16))
        {
LABEL_624:
          if (!*(_DWORD *)(v18 + 80))
            goto LABEL_584;
          v309 = 0;
        }
        else
        {
LABEL_503:
          __dst = (JSC::VM *)IndexQuickly;
          LODWORD(v364) = 10;
          v366 = 0;
          v309 = 1;
          BYTE1(v367[1]) = 1;
          if (!*(_DWORD *)(v18 + 80))
            goto LABEL_59;
        }
        v310 = *(_DWORD *)(v18 + 80);
        if ((v310 & 0x27) != 0 && (v310 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v311 = *(_QWORD *)(v18 + 16);
        v312 = v311 == 0;
        if (v311)
          v313 = 1;
        else
          v313 = v309;
        if (!v312)
          IndexQuickly = 0;
        if ((v313 & 1) != 0)
          goto LABEL_59;
      }
LABEL_584:
      v335 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v361, (unint64_t)a1);
      if (v335)
      {
        v12 = v335;
        v18 = *((_QWORD *)a1 + 7);
LABEL_10:
        v347 = (JSC::VMTraps *)(v18 + 64);
        IndexQuickly = 10;
        while (1)
        {
          v19 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
          v26 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v19 + 0x4C) + 0x70))(v12, a1, v16, &__dst);
          if (*(_DWORD *)(v18 + 80))
          {
            v29 = *(_DWORD *)(v18 + 80);
            if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v347, 7u, (uint64_t)v20, v21, v22, v23, v24, v25);
            if (*(_QWORD *)(v18 + 16))
              goto LABEL_59;
          }
          if ((v26 & 1) != 0)
          {
            if (BYTE1(v367[1]) == 1)
            {
              IndexQuickly = (uint64_t)__dst;
            }
            else if (BYTE1(v367[1]) == 2)
            {
              IndexQuickly = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&__dst, a1, (uint64_t)v20, v21, v22, v23, v24, v25);
            }
            else
            {
              v203 = (uint64_t **)*((_QWORD *)a1 + 7);
              JSC::Identifier::from(v203, v16, v20, v21, v22, v23, v24, v25, (int **)__s);
              v204 = (unint64_t)v366;
              v205 = *(_QWORD *)(16 * (*v366 & 0xFFFFFFFE) + 0x28);
              if ((v364 & 0x20) != 0)
                v204 = (unint64_t)v365;
              if (BYTE3(v367[1]) != 1)
                goto LABEL_359;
              if ((v204 & 0xFFFE000000000002) != 0)
                goto LABEL_586;
              v206 = *(unsigned int *)(16 * (*(_DWORD *)v204 & 0xFFFFFFFE) + 0x4C);
              v207 = *(_DWORD *)(16 * (*(_DWORD *)v204 & 0xFFFFFFFE) + 0x4C) != 0;
              v208 = 16 * v206;
              if ((_DWORD)v206)
                v209 = v370 == (int8x16_t **)v208;
              else
                v209 = 1;
              if (!v209)
              {
                do
                {
                  v208 = *(_QWORD *)(v208 + 16);
                  v207 = v208 != 0;
                }
                while ((int8x16_t **)v208 != v370 && v208 != 0);
              }
              if (!v207)
              {
LABEL_586:
                v350 = (uint64_t (*)(unint64_t))v203;
                v211 = JSC::throwDOMAttributeGetterTypeError(v205, (JSC::VM **)&v350, v370, *(WTF::StringImpl **)__s);
              }
              else
              {
LABEL_359:
                v211 = ((uint64_t (*)(unint64_t))__dst)(v205);
              }
              IndexQuickly = v211;
              v219 = *(WTF::StringImpl **)__s;
              *(_QWORD *)__s = 0;
              if (v219)
              {
                if (*(_DWORD *)v219 == 2)
                {
                  WTF::StringImpl::~StringImpl(v219, v212, v213, v214, v215, v216, v217, v218);
                  WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
                }
                else
                {
                  *(_DWORD *)v219 -= 2;
                }
              }
            }
            goto LABEL_59;
          }
          if (BYTE2(v367[1]) == 3)
          {
            if (BYTE4(v367[1]))
              goto LABEL_59;
            v27 = *(unsigned __int8 *)(v12 + 5);
            if (v27 == 61)
              goto LABEL_16;
          }
          else
          {
            v27 = *(unsigned __int8 *)(v12 + 5);
            if (v27 == 61)
            {
              if (BYTE2(v367[1]) == 1)
                goto LABEL_59;
              goto LABEL_16;
            }
          }
          if ((v27 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v12 + 40) & 7u) > 2)
            {
              LOBYTE(v350) = 0;
              LOBYTE(v351) = 0;
              v32 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v12, (uint64_t)&v350, (uint64_t)v20, v21, v22, v23, v24, v25);
              v31 = v33 ? v32 : 0;
            }
            else
            {
              v31 = *(_QWORD *)(v12 + 24);
            }
            if (v31 <= v16)
              goto LABEL_59;
          }
LABEL_16:
          if ((*(_WORD *)(v19 + 12) & 0x800) == 0 || BYTE2(v367[1]) == 3)
          {
            v28 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
            if (!v28)
              v28 = *(_QWORD *)(v12 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v28 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v12, a1);
            }
            else
            {
              v28 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
              if (!v28)
                v28 = *(_QWORD *)(v12 + 16);
            }
            if (*(_DWORD *)(v18 + 80))
            {
              v30 = *(_DWORD *)(v18 + 80);
              if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v347, 7u, (uint64_t)v20, v21, v22, v23, v24, v25);
              if (*(_QWORD *)(v18 + 16))
                goto LABEL_59;
            }
          }
          if ((v28 & 0xFFFE000000000002) == 0)
          {
            v12 = v28;
            if (*(unsigned __int8 *)(v28 + 5) > 0x16u)
              continue;
          }
          goto LABEL_59;
        }
      }
      IndexQuickly = 0;
LABEL_59:
      if (v369)
      {
        v36 = *(_DWORD *)(v368 + 4);
        if (!v36)
        {
          __break(0xC471u);
          JUMPOUT(0x1987B20D4);
        }
        *(_DWORD *)(v368 + 4) = v36 - 1;
      }
      return IndexQuickly;
    }
  }
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_83;
  if (*(_BYTE *)(a3 + 5) != 2)
    goto LABEL_83;
  v34 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (((*(_DWORD *)(v34 + 0x10) | *(unsigned __int8 *)(v34 + 0xA)) & 8) != 0)
    goto LABEL_83;
  v35 = *(_QWORD *)(a3 + 8);
  if ((v35 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a3, a1);
  }
  else
  {
    if ((*(_BYTE *)(v35 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v35 += 2;
      goto LABEL_71;
    }
    WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a3 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &__dst);
  }
  v35 = (unint64_t)__dst;
LABEL_71:
  if (*(_DWORD *)(v14 + 80))
  {
    v160 = *(_DWORD *)(v14 + 80);
    if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
      if (v35)
      {
        v75 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 != 2)
        {
          IndexQuickly = 0;
LABEL_158:
          *(_DWORD *)v35 = v75;
          return IndexQuickly;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
      }
      return 0;
    }
  }
  if (v35)
  {
    if ((v35 >> 4))
    {
      if (((v35 >> 4) & ~*(_DWORD *)(v34 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v34, (JSC::VM *)v14, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v37)
        {
          __dst = (JSC::VM *)v35;
          v38 = JSC::PropertyTable::get(v37, (uint64_t *)&__dst);
          if ((_DWORD)v38 != -1)
          {
            if ((int)v38 <= 63)
            {
              v39 = v12 + 16;
              v40 = v38 << 32;
            }
            else
            {
              v39 = *(_QWORD *)(v12 + 8) - 8;
              v40 = 0x3F00000000 - (v38 << 32);
            }
            IndexQuickly = *(_QWORD *)(v39 + (v40 >> 29));
            if (IndexQuickly)
              goto LABEL_157;
          }
        }
      }
    }
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
LABEL_83:
  if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v186 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v187 = WTF::fastCompactMalloc((WTF *)0x20);
    v188.i64[0] = 0x1000000002;
    *(_QWORD *)v187 = 0x1000000002;
    *(_QWORD *)(v187 + 8) = "is not an object";
    *(_DWORD *)(v187 + 16) = 4;
    __dst = (JSC::VM *)v187;
    Error = JSC::createError((unint64_t)a1, v12, (uint64_t *)&__dst, (uint64_t)JSC::defaultSourceAppender, v189, v190, v191, v192, v188);
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v187, v193, v194, v195, v196, v197, v198, v199);
      WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
    JSC::VM::throwException(v186, a1, Error, v195, v196, v197, v198, v199);
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v152 = *(_DWORD *)(v14 + 80);
    if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v41 = *((_QWORD *)a1 + 7);
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v11 + 5) == 2)
    {
      v35 = *(_QWORD *)(v11 + 8);
      if ((v35 & 1) == 0)
      {
        if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
        {
          v89 = *(WTF::StringImpl **)(v41 + 64768);
          if (v89 != (WTF::StringImpl *)v35)
          {
            *(_DWORD *)v35 += 2;
            *(_QWORD *)(v41 + 64768) = v35;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
              {
                WTF::StringImpl::~StringImpl(v89, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
              }
              else
              {
                *(_DWORD *)v89 -= 2;
              }
            }
            v90 = *(JSC::VM **)(v11 + 8);
            if (v90)
            {
              if ((*((_BYTE *)v90 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v90 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v90, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
                v90 = __dst;
              }
            }
            v91 = *(WTF::StringImpl **)(v41 + 64776);
            *(_QWORD *)(v41 + 64776) = v90;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
              {
                WTF::StringImpl::~StringImpl(v91, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
              }
              else
              {
                *(_DWORD *)v91 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
          {
            v92 = *(JSC::VM **)(v41 + 64776);
            *(_DWORD *)v92 += 2;
            __dst = v92;
            __dmb(0xAu);
            v93 = *(JSC::VM **)(v11 + 8);
            *(_QWORD *)(v11 + 8) = __dst;
            __dst = v93;
            v94 = (_QWORD *)(v41 + 808);
            v95 = *(unsigned int *)(v41 + 820);
            if ((_DWORD)v95 == *(_DWORD *)(v41 + 816))
            {
              p_dst = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&__dst);
              v95 = *(unsigned int *)(v41 + 820);
              v96 = (JSC::VM **)(*(_QWORD *)(v41 + 808) + 8 * v95);
              v93 = *p_dst;
            }
            else
            {
              v96 = (JSC::VM **)(*v94 + 8 * v95);
              p_dst = &__dst;
            }
            *p_dst = 0;
            *v96 = v93;
            *(_DWORD *)(v41 + 820) = v95 + 1;
            v98 = __dst;
            __dst = 0;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
              {
                WTF::StringImpl::~StringImpl(v98, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
              }
              else
              {
                *(_DWORD *)v98 -= 2;
              }
            }
          }
          v35 = *(_QWORD *)(v41 + 64776);
        }
        goto LABEL_89;
      }
LABEL_445:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
      if (!*(_DWORD *)(v41 + 80))
        goto LABEL_446;
      v280 = *(_DWORD *)(v41 + 80);
      if ((v280 & 0x27) != 0 && (v280 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v41 + 16))
      {
        v35 = 0;
        v251 = __dst;
        __dst = 0;
        if (!v251)
          goto LABEL_91;
      }
      else
      {
LABEL_446:
        v35 = (unint64_t)__dst;
        if (!__dst)
          goto LABEL_91;
        *(_DWORD *)__dst += 2;
        __dst = 0;
        v251 = (JSC::VM *)v35;
      }
      if (*(_DWORD *)v251 != 2)
      {
        *(_DWORD *)v251 -= 2;
        goto LABEL_91;
      }
LABEL_450:
      WTF::StringImpl::~StringImpl(v251, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
      goto LABEL_91;
    }
    v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v350 = (uint64_t (*)(unint64_t))v11;
  if (!*(_DWORD *)(v41 + 80))
  {
LABEL_423:
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v249 = *(unsigned __int8 *)(v11 + 5);
      if (v249 == 2)
        goto LABEL_429;
      if (v249 == 4)
      {
        v35 = *(_QWORD *)(v11 + 8);
        v250 = *(_DWORD *)v35;
        *(_DWORD *)v35 += 4;
        v42 = v250 + 2;
        if (v42)
          goto LABEL_90;
        v251 = (JSC::VM *)v35;
        goto LABEL_450;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v350, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_429:
    if (*(_DWORD *)(v41 + 80))
    {
      v279 = *(_DWORD *)(v41 + 80);
      if ((v279 & 0x27) != 0 && (v279 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v41 + 16))
      {
        v35 = 0;
        goto LABEL_91;
      }
    }
    v35 = *(_QWORD *)(v11 + 8);
    v41 = *((_QWORD *)a1 + 7);
    if ((v35 & 1) == 0)
    {
      if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
      {
        v252 = *(WTF::StringImpl **)(v41 + 64768);
        if (v252 != (WTF::StringImpl *)v35)
        {
          *(_DWORD *)v35 += 2;
          *(_QWORD *)(v41 + 64768) = v35;
          if (v252)
          {
            if (*(_DWORD *)v252 == 2)
            {
              WTF::StringImpl::~StringImpl(v252, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
            }
            else
            {
              *(_DWORD *)v252 -= 2;
            }
          }
          v253 = *(JSC::VM **)(v11 + 8);
          if (v253)
          {
            if ((*((_BYTE *)v253 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v253 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v253, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
              v253 = __dst;
            }
          }
          v254 = *(WTF::StringImpl **)(v41 + 64776);
          *(_QWORD *)(v41 + 64776) = v253;
          if (v254)
          {
            if (*(_DWORD *)v254 == 2)
            {
              WTF::StringImpl::~StringImpl(v254, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v281, v282, v283, v284, v285, v286, v287, v288);
            }
            else
            {
              *(_DWORD *)v254 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v255 = *(JSC::VM **)(v41 + 64776);
          *(_DWORD *)v255 += 2;
          __dst = v255;
          __dmb(0xAu);
          v256 = *(JSC::VM **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = __dst;
          __dst = v256;
          v257 = (_QWORD *)(v41 + 808);
          v258 = *(unsigned int *)(v41 + 820);
          if ((_DWORD)v258 == *(_DWORD *)(v41 + 816))
          {
            v260 = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v257, v258 + 1, (unint64_t)&__dst);
            v258 = *(unsigned int *)(v41 + 820);
            v259 = (JSC::VM **)(*(_QWORD *)(v41 + 808) + 8 * v258);
            v256 = *v260;
          }
          else
          {
            v259 = (JSC::VM **)(*v257 + 8 * v258);
            v260 = &__dst;
          }
          *v260 = 0;
          *v259 = v256;
          *(_DWORD *)(v41 + 820) = v258 + 1;
          v261 = __dst;
          __dst = 0;
          if (v261)
          {
            if (*(_DWORD *)v261 == 2)
            {
              WTF::StringImpl::~StringImpl(v261, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
            }
            else
            {
              *(_DWORD *)v261 -= 2;
            }
          }
        }
        v35 = *(_QWORD *)(v41 + 64776);
      }
      goto LABEL_89;
    }
    goto LABEL_445;
  }
  v278 = *(_DWORD *)(v41 + 80);
  if ((v278 & 0x27) != 0 && (v278 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v41 + 16))
  {
    v11 = (uint64_t)v350;
    goto LABEL_423;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v41 + 41952) + 8);
  if (v35)
  {
LABEL_89:
    v42 = *(_DWORD *)v35 + 2;
LABEL_90:
    *(_DWORD *)v35 = v42;
  }
LABEL_91:
  if (*(_DWORD *)(v14 + 80))
  {
    v153 = *(_DWORD *)(v14 + 80);
    if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
      IndexQuickly = 0;
      if (v35)
        goto LABEL_157;
      return IndexQuickly;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v352 = 0xFFFFFFFF00000000;
  LOBYTE(v356) = 0;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  v354 = 0;
  memset(v355, 0, 13);
  v353 = (_DWORD *)v10;
  if (!v15)
  {
    v43 = *((_QWORD *)a1 + 7);
    v44 = *(unsigned __int8 *)(v12 + 5);
    if (v44 > 0x16)
      goto LABEL_94;
    if (v44 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v43 + 41952) + 1768) == v35)
      {
        v297 = *(_QWORD *)(v12 + 8);
        if ((v297 & 1) != 0)
          v298 = (unsigned int *)(v12 + 16);
        else
          v298 = (unsigned int *)(v297 + 4);
        v299 = *v298;
        if ((v299 & 0x80000000) != 0)
          Index = (unsigned __int8 *)(COERCE__INT64((double)v299) + 0x2000000000000);
        else
          Index = (unsigned __int8 *)(v299 | 0xFFFE000000000000);
        v301 = 14;
        goto LABEL_486;
      }
      if (v35)
      {
        v303 = *(_DWORD *)(v35 + 16);
        if ((v303 & 0x20) == 0)
        {
          v304 = *(_BYTE **)(v35 + 8);
          v305 = *(unsigned int *)(v35 + 4);
          if ((v303 & 4) != 0)
          {
            if (!(_DWORD)v305)
              goto LABEL_492;
            a3 = *v304 - 48;
            if (a3 > 9 || v305 >= 2 && *v304 == 48)
              goto LABEL_492;
            v336 = v305 - 1;
            v337 = v304 + 1;
            while (v336)
            {
              if (a3 > 0x19999999)
                goto LABEL_492;
              v338 = *v337 - 48;
              if (v338 > 9)
                goto LABEL_492;
              v302 = 0;
              v63 = __CFADD__(v338, 10 * a3);
              a3 = v338 + 10 * (_DWORD)a3;
              --v336;
              ++v337;
              if (v63)
                goto LABEL_493;
            }
          }
          else
          {
            if (!(_DWORD)v305)
              goto LABEL_492;
            a3 = *(unsigned __int16 *)v304 - 48;
            if (a3 > 9 || *(_WORD *)v304 == 48 && v305 > 1)
              goto LABEL_492;
            v314 = (unsigned __int16 *)(v304 + 2);
            v315 = v305 - 1;
            while (v315)
            {
              if (a3 > 0x19999999)
                goto LABEL_492;
              v316 = *v314 - 48;
              if (v316 > 9)
                goto LABEL_492;
              v302 = 0;
              v63 = __CFADD__(v316, 10 * a3);
              a3 = v316 + 10 * (_DWORD)a3;
              ++v314;
              --v315;
              if (v63)
                goto LABEL_493;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v339 = *(_QWORD *)(v12 + 8);
            v340 = (_DWORD *)((v339 & 1) != 0 ? v12 + 16 : v339 + 4);
            if (*v340 > a3)
            {
              Index = (unsigned __int8 *)JSC::JSString::getIndex((JSC::JSString *)v12, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v43 + 80))
                goto LABEL_614;
              v341 = *(_DWORD *)(v43 + 80);
              if ((v341 & 0x27) != 0 && (v341 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v43 + 16))
              {
LABEL_614:
                v301 = 10;
LABEL_486:
                v350 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v352) = v301;
                v354 = 0;
                v302 = 1;
                BYTE1(v355[1]) = 1;
                goto LABEL_493;
              }
            }
          }
        }
      }
LABEL_492:
      v302 = 0;
LABEL_493:
      if (*(_DWORD *)(v43 + 80))
      {
        v333 = *(_DWORD *)(v43 + 80);
        if ((v333 & 0x27) != 0 && (v333 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v43 + 16))
          goto LABEL_116;
      }
      if ((v302 & 1) != 0)
        goto LABEL_133;
    }
  }
  v306 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v360, (unint64_t)a1);
  if (!v306)
    goto LABEL_116;
  v12 = v306;
  v43 = *((_QWORD *)a1 + 7);
LABEL_94:
  v45 = (_BYTE *)(v12 + 6);
  v46 = v35 >> 4;
  v47 = v12;
  if ((*(_BYTE *)(v12 + 6) & 8) == 0)
  {
    v48 = v12;
    while (1)
    {
      v49 = *(_DWORD *)v48 & 0xFFFFFFFE;
      v50 = 16 * v49;
      if ((_DWORD)v46)
      {
        if ((v46 & ~*(_DWORD *)(16 * v49 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v50, (JSC::VM *)v43, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v51)
          {
            __dst = (JSC::VM *)v35;
            v52 = JSC::PropertyTable::get(v51, (uint64_t *)&__dst);
            a6 = v52;
            if ((_DWORD)v52 != -1)
              break;
          }
        }
      }
      if ((*v45 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v48, (JSC::VM *)v43, v35, (uint64_t)&v350) & 1) != 0)
      {
        goto LABEL_133;
      }
      v47 = *(_QWORD *)(v50 + 48);
      if (!v47)
        v47 = *(_QWORD *)(v48 + 16);
      if ((v47 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v47 + 5) < 0x17u)
      {
        if (!v35)
          goto LABEL_116;
        v55 = *(_DWORD *)(v35 + 16);
        if ((v55 & 0x20) != 0)
          goto LABEL_116;
        v56 = *(_WORD **)(v35 + 8);
        v57 = *(unsigned int *)(v35 + 4);
        if ((v55 & 4) == 0)
        {
          if ((_DWORD)v57)
          {
            v58 = (unsigned __int16)*v56 - 48;
            if (v58 <= 9 && (*v56 != 48 || v57 <= 1))
            {
              v60 = v56 + 1;
              v61 = v57 - 1;
              IndexQuickly = 10;
              while (v61)
              {
                if (v58 <= 0x19999999)
                {
                  v62 = *v60 - 48;
                  if (v62 <= 9)
                  {
                    v63 = __CFADD__(v62, 10 * v58);
                    v58 = v62 + 10 * v58;
                    ++v60;
                    --v61;
                    if (!v63)
                      continue;
                  }
                }
                goto LABEL_153;
              }
              goto LABEL_380;
            }
          }
          goto LABEL_116;
        }
        if (!(_DWORD)v57)
          goto LABEL_116;
        v58 = *(unsigned __int8 *)v56 - 48;
        if (v58 > 9 || v57 >= 2 && *(_BYTE *)v56 == 48)
          goto LABEL_116;
        v236 = (unsigned __int8 *)v56 + 1;
        v237 = v57 - 1;
        IndexQuickly = 10;
        while (v237)
        {
          if (v58 <= 0x19999999)
          {
            v238 = *v236 - 48;
            if (v238 <= 9)
            {
              v63 = __CFADD__(v238, 10 * v58);
              v58 = v238 + 10 * v58;
              ++v236;
              --v237;
              if (!v63)
                continue;
            }
          }
          goto LABEL_153;
        }
LABEL_380:
        if (v58 == -1)
        {
LABEL_116:
          IndexQuickly = 10;
          goto LABEL_153;
        }
        v239 = v58;
        v240 = *((_QWORD *)a1 + 7);
        v348 = (JSC::VMTraps *)(v240 + 64);
        IndexQuickly = 10;
        while (2)
        {
          v241 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
          v242 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v241 + 0x4C) + 0x70))(v12, a1, v239, &v350);
          if (*(_DWORD *)(v240 + 80))
          {
            v245 = *(_DWORD *)(v240 + 80);
            if ((v245 & 0x27) != 0 && (v245 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v348, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v240 + 16))
              goto LABEL_153;
          }
          if ((v242 & 1) != 0)
            goto LABEL_133;
          if (BYTE2(v355[1]) == 3)
          {
            if (BYTE4(v355[1]))
              goto LABEL_153;
            v243 = *(unsigned __int8 *)(v12 + 5);
            if (v243 != 61)
              goto LABEL_386;
          }
          else
          {
            v243 = *(unsigned __int8 *)(v12 + 5);
            if (v243 == 61)
            {
              if (BYTE2(v355[1]) == 1)
                goto LABEL_153;
            }
            else
            {
LABEL_386:
              if ((v243 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v12 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v363 = 0;
                  v248 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v12, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v247 = (_BYTE)this ? v248 : 0;
                }
                else
                {
                  v247 = *(_QWORD *)(v12 + 24);
                }
                if (v247 <= v239)
                  goto LABEL_153;
              }
            }
          }
          if ((*(_WORD *)(v241 + 12) & 0x800) == 0 || BYTE2(v355[1]) == 3)
          {
            v244 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
            if (!v244)
              v244 = *(_QWORD *)(v12 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v244 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v12, a1);
            }
            else
            {
              v244 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
              if (!v244)
                v244 = *(_QWORD *)(v12 + 16);
            }
            if (*(_DWORD *)(v240 + 80))
            {
              v246 = *(_DWORD *)(v240 + 80);
              if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v348, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v240 + 16))
                goto LABEL_153;
            }
          }
          if ((v244 & 0xFFFE000000000002) != 0)
            goto LABEL_153;
          v12 = v244;
          if (*(unsigned __int8 *)(v244 + 5) <= 0x16u)
            goto LABEL_153;
          continue;
        }
      }
      v45 = (_BYTE *)(v47 + 6);
      v48 = v47;
      if ((*(_BYTE *)(v47 + 6) & 8) != 0)
        goto LABEL_181;
    }
    a5 = HIDWORD(v52);
    if ((int)v52 <= 63)
    {
      v53 = v48 + 16;
      v54 = v52 << 32;
    }
    else
    {
      v53 = *(_QWORD *)(v48 + 8) - 8;
      v54 = 0x3F00000000 - (v52 << 32);
    }
    a4 = *(_QWORD *)(v53 + (v54 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_121;
    v59 = *(unsigned __int8 *)(a4 + 5);
    if (v59 != 5)
    {
      if (v59 != 6)
      {
LABEL_121:
        v350 = (uint64_t (*)(unint64_t))a4;
        v354 = (_DWORD *)v48;
LABEL_122:
        v352 = __PAIR64__(a6, a5);
        LOWORD(v355[1]) = 257;
        goto LABEL_133;
      }
      v85 = *(_DWORD *)(v50 + 16) & 3;
      v86 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v88 = *(int8x16_t ***)(a4 + 24);
        v87 = *(_QWORD *)(a4 + 32);
        v350 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v351 = v86;
        LODWORD(v352) = HIDWORD(v52);
        v354 = (_DWORD *)v48;
        goto LABEL_163;
      }
      v350 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v351 = v86;
      LODWORD(v352) = HIDWORD(v52);
      v354 = (_DWORD *)v48;
LABEL_301:
      BYTE1(v355[1]) = 3;
      if (v85 != 2)
        LOBYTE(v355[1]) = 1;
      goto LABEL_133;
    }
    v64 = (unsigned int *)v48;
    v65 = v43;
LABEL_132:
    JSC::JSObject::fillGetterPropertySlot(v64, v65, (uint64_t)&v350, a4, a5, a6);
    goto LABEL_133;
  }
LABEL_181:
  if (v35)
  {
    v115 = *(_DWORD *)(v35 + 16);
    if ((v115 & 0x20) == 0)
    {
      v116 = *(_BYTE **)(v35 + 8);
      v117 = *(unsigned int *)(v35 + 4);
      if ((v115 & 4) != 0)
      {
        if ((_DWORD)v117)
        {
          v118 = *v116 - 48;
          if (v118 <= 9 && (v117 < 2 || *v116 != 48))
          {
            v317 = v116 + 1;
            v318 = v117 - 1;
            while (v318)
            {
              if (v118 <= 0x19999999)
              {
                v319 = *v317 - 48;
                if (v319 <= 9)
                {
                  v63 = __CFADD__(v319, 10 * v118);
                  v118 = v319 + 10 * v118;
                  ++v317;
                  --v318;
                  if (!v63)
                    continue;
                }
              }
              goto LABEL_186;
            }
LABEL_531:
            if (v118 != -1)
            {
              v320 = v118;
              v321 = *((_QWORD *)a1 + 7);
              v349 = (JSC::VMTraps *)(v321 + 64);
              IndexQuickly = 10;
              while (1)
              {
                v322 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
                v323 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v322 + 0x4C) + 0x70))(v12, a1, v320, &v350);
                v324 = v323;
                if (*(_DWORD *)(v321 + 80))
                {
                  v327 = *(_DWORD *)(v321 + 80);
                  if ((v327 & 0x27) != 0 && (v327 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v349, 7u, a3, a4, a5, a6, a7, a8);
                  v328 = *(_QWORD *)(v321 + 16);
                  if (v328)
                    v329 = 1;
                  else
                    v329 = v324;
                  if ((v329 & 1) != 0)
                  {
                    if (!v328)
                      goto LABEL_133;
                    goto LABEL_116;
                  }
                }
                else if ((v323 & 1) != 0)
                {
                  goto LABEL_133;
                }
                if (BYTE2(v355[1]) == 3)
                {
                  if (BYTE4(v355[1]))
                    goto LABEL_153;
                  v325 = *(unsigned __int8 *)(v12 + 5);
                  if (v325 == 61)
                    goto LABEL_538;
                }
                else
                {
                  v325 = *(unsigned __int8 *)(v12 + 5);
                  if (v325 == 61)
                  {
                    if (BYTE2(v355[1]) == 1)
                      goto LABEL_153;
                    goto LABEL_538;
                  }
                }
                if ((v325 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v12 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v363 = 0;
                    v332 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v12, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v331 = (_BYTE)this ? v332 : 0;
                  }
                  else
                  {
                    v331 = *(_QWORD *)(v12 + 24);
                  }
                  if (v331 <= v320)
                    goto LABEL_153;
                }
LABEL_538:
                if ((*(_WORD *)(v322 + 12) & 0x800) == 0 || BYTE2(v355[1]) == 3)
                {
                  v326 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                  if (!v326)
                    v326 = *(_QWORD *)(v12 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v326 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v12, a1);
                  }
                  else
                  {
                    v326 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                    if (!v326)
                      v326 = *(_QWORD *)(v12 + 16);
                  }
                  if (*(_DWORD *)(v321 + 80))
                  {
                    v330 = *(_DWORD *)(v321 + 80);
                    if ((v330 & 0x27) != 0 && (v330 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v349, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v321 + 16))
                      goto LABEL_153;
                  }
                }
                if ((v326 & 0xFFFE000000000002) == 0)
                {
                  v12 = v326;
                  if (*(unsigned __int8 *)(v326 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_153;
              }
            }
          }
        }
      }
      else if ((_DWORD)v117)
      {
        v118 = *(unsigned __int16 *)v116 - 48;
        if (v118 <= 9 && (*(_WORD *)v116 != 48 || v117 <= 1))
        {
          v156 = (unsigned __int16 *)(v116 + 2);
          v157 = v117 - 1;
          while (v157)
          {
            if (v118 <= 0x19999999)
            {
              v158 = *v156 - 48;
              if (v158 <= 9)
              {
                v63 = __CFADD__(v158, 10 * v118);
                v118 = v158 + 10 * v118;
                ++v156;
                --v157;
                if (!v63)
                  continue;
              }
            }
            goto LABEL_186;
          }
          goto LABEL_531;
        }
      }
    }
  }
LABEL_186:
  v119 = *((_QWORD *)a1 + 7);
  v346 = (JSC::VMTraps *)(v119 + 64);
  IndexQuickly = 10;
  while (1)
  {
    v120 = 16 * (*(_DWORD *)v47 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v47 + 6) & 8) == 0)
      break;
    v343 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C) + 0x68))(v47, a1, v35, &v350);
    if (*(_DWORD *)(v119 + 80))
    {
      v151 = *(_DWORD *)(v119 + 80);
      if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v346, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v119 + 16))
        goto LABEL_153;
    }
    if ((v343 & 1) != 0)
      goto LABEL_133;
    if (BYTE2(v355[1]) == 3)
    {
      if (BYTE4(v355[1]))
        goto LABEL_153;
      v127 = *(unsigned __int8 *)(v47 + 5);
      if (v127 == 61)
        goto LABEL_193;
    }
    else
    {
      v127 = *(unsigned __int8 *)(v47 + 5);
      if (v127 == 61)
      {
        if (BYTE2(v355[1]) == 1)
          goto LABEL_153;
        goto LABEL_193;
      }
    }
    if (!v35)
      goto LABEL_193;
    if ((v127 - 50) < 0xFFFFFFF5)
      goto LABEL_193;
    v128 = *(_DWORD *)(v35 + 16);
    if ((v128 & 0x20) != 0)
      goto LABEL_193;
    v129 = *(unsigned int *)(v35 + 4);
    if (!(_DWORD)v129)
      goto LABEL_193;
    v130 = *(unsigned __int8 **)(v35 + 8);
    if ((v128 & 4) != 0)
    {
      v131 = *v130;
      if ((_DWORD)v129 == 1)
      {
LABEL_220:
        if ((v131 - 48) < 0xA)
          goto LABEL_153;
        goto LABEL_193;
      }
      if (v131 == 45)
      {
        v131 = v130[1];
        goto LABEL_224;
      }
      if ((v131 - 48) < 0xA)
        goto LABEL_235;
      if ((_DWORD)v129 == 8)
        goto LABEL_234;
    }
    else
    {
      v131 = *(unsigned __int16 *)v130;
      if ((_DWORD)v129 == 1)
        goto LABEL_220;
      if (v131 == 45)
      {
        v131 = *((unsigned __int16 *)v130 + 1);
LABEL_224:
        if ((v131 - 48) < 0xA)
        {
          if ((_DWORD)v129 == 2)
            goto LABEL_153;
          goto LABEL_235;
        }
        if ((_DWORD)v129 != 9)
          goto LABEL_193;
LABEL_234:
        if (v131 != 73)
          goto LABEL_193;
        goto LABEL_235;
      }
      if ((v131 - 48) < 0xA || (_DWORD)v129 == 8 && v131 == 73)
        goto LABEL_235;
    }
    if ((_DWORD)v129 != 3 || v131 != 78)
      goto LABEL_193;
LABEL_235:
    v342 = v342 & 0xFFFFFF0000000000 | v129 | ((unint64_t)((v128 >> 2) & 1) << 32);
    JSC::jsToNumber(v130, v342);
    v133 = (v132 >> 52) & 0x7FF;
    if ((_DWORD)v133 == 2047)
    {
      if ((v132 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v134 = &__s[3];
      }
      else
      {
        if ((v132 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v140 = &__s[1];
        }
        else
        {
          v140 = __s;
        }
        *(_QWORD *)v140 = 0x7974696E69666E49;
        v134 = v140 + 8;
      }
      goto LABEL_249;
    }
    v135 = v132 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v132 & 0x8000000000000000) != 0 && v135)
    {
      __s[0] = 45;
      v136 = &__s[1];
    }
    else
    {
      if (!v135)
      {
        __s[0] = 48;
        v134 = &__s[1];
        goto LABEL_249;
      }
      v136 = __s;
    }
    v344 = (uint64_t)v136;
    v137 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v132 & 0x800FFFFFFFFFFFFFLL, v133);
    v134 = WTF::dragonbox::detail::to_shortest(v137, v138, v344, v139);
LABEL_249:
    *v134 = 0;
    v345 = strlen(__s);
    memcpy(&__dst, __s, v345);
    *((_BYTE *)&__dst + v345) = 0;
    v141 = *(unsigned int *)(v35 + 4);
    v142 = *(unsigned __int8 **)(v35 + 8);
    if ((*(_BYTE *)(v35 + 16) & 4) != 0)
    {
      if ((_DWORD)v141)
      {
        v147 = &__dst;
        v148 = *(unsigned int *)(v35 + 4);
        do
        {
          v150 = *(unsigned __int8 *)v147;
          v147 = (JSC::VM **)((char *)v147 + 1);
          v149 = v150;
          if (!v150 || *v142 != v149)
            goto LABEL_193;
          ++v142;
        }
        while (--v148);
      }
    }
    else if ((_DWORD)v141)
    {
      v143 = &__dst;
      v144 = *(unsigned int *)(v35 + 4);
      do
      {
        v146 = *(unsigned __int8 *)v143;
        v143 = (JSC::VM **)((char *)v143 + 1);
        v145 = v146;
        if (!v146 || *(unsigned __int16 *)v142 != v145)
          goto LABEL_193;
        v142 += 2;
      }
      while (--v144);
    }
    if (!*((_BYTE *)&__dst + v141))
      goto LABEL_153;
LABEL_193:
    if ((*(_WORD *)(v120 + 12) & 0x800) == 0)
    {
      v123 = *(_DWORD *)v47;
LABEL_195:
      v124 = *(_QWORD *)(16 * (v123 & 0xFFFFFFFE) + 0x30);
      if (!v124)
        v124 = *(_QWORD *)(v47 + 16);
      goto LABEL_197;
    }
    v123 = *(_DWORD *)v47;
    if (BYTE2(v355[1]) == 3)
      goto LABEL_195;
    v125 = 16 * (v123 & 0xFFFFFFFE);
    if ((*(_WORD *)(v125 + 12) & 0x800) != 0)
    {
      v124 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v125 + 76)
                                                                                + 0xB0))(v47, a1);
    }
    else
    {
      v124 = *(_QWORD *)(v125 + 48);
      if (!v124)
        v124 = *(_QWORD *)(v47 + 16);
    }
    if (*(_DWORD *)(v119 + 80))
    {
      v126 = *(_DWORD *)(v119 + 80);
      if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v346, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v119 + 16))
        goto LABEL_153;
    }
LABEL_197:
    if ((v124 & 0xFFFE000000000002) == 0)
    {
      v47 = v124;
      if (*(unsigned __int8 *)(v124 + 5) > 0x16u)
        continue;
    }
    goto LABEL_153;
  }
  if (!(_DWORD)v46
    || (v46 & ~*(_DWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)), (JSC::VM *)v119, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v121)|| (__dst = (JSC::VM *)v35, v122 = JSC::PropertyTable::get(v121, (uint64_t *)&__dst), a6 = v122, (_DWORD)v122 == -1))
  {
    if ((*(_BYTE *)(v47 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v47, (JSC::VM *)v119, v35, (uint64_t)&v350) & 1) != 0)
    {
      goto LABEL_133;
    }
    goto LABEL_193;
  }
  a5 = HIDWORD(v122);
  if ((int)v122 <= 63)
  {
    v154 = v47 + 16;
    v155 = v122 << 32;
  }
  else
  {
    v154 = *(_QWORD *)(v47 + 8) - 8;
    v155 = 0x3F00000000 - (v122 << 32);
  }
  a4 = *(_QWORD *)(v154 + (v155 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_309:
    v350 = (uint64_t (*)(unint64_t))a4;
    v354 = (_DWORD *)v47;
    goto LABEL_122;
  }
  v159 = *(unsigned __int8 *)(a4 + 5);
  if (v159 == 5)
  {
    v64 = (unsigned int *)v47;
    v65 = v119;
    goto LABEL_132;
  }
  if (v159 != 6)
    goto LABEL_309;
  v85 = *(_DWORD *)(v120 + 16) & 3;
  v177 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v350 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v351 = v177;
    LODWORD(v352) = HIDWORD(v122);
    v354 = (_DWORD *)v47;
    goto LABEL_301;
  }
  v88 = *(int8x16_t ***)(a4 + 24);
  v87 = *(_QWORD *)(a4 + 32);
  v350 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v351 = v177;
  LODWORD(v352) = HIDWORD(v122);
  v354 = (_DWORD *)v47;
LABEL_163:
  BYTE1(v355[1]) = 3;
  if (v85 != 2)
    LOBYTE(v355[1]) = 1;
  BYTE3(v355[1]) = 1;
  v358 = v88;
  v359 = v87;
LABEL_133:
  if (BYTE1(v355[1]) == 1)
  {
    IndexQuickly = (uint64_t)v350;
  }
  else
  {
    if (BYTE1(v355[1]) == 2)
    {
      v66 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v350, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v67 = (unint64_t)v354;
      v68 = *(_QWORD *)(16 * (*v354 & 0xFFFFFFFE) + 0x28);
      if ((v352 & 0x20) != 0)
        v67 = (unint64_t)v353;
      if (BYTE3(v355[1]) != 1)
        goto LABEL_151;
      if ((v67 & 0xFFFE000000000002) != 0)
        goto LABEL_365;
      v69 = *(unsigned int *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x4C);
      v70 = *(_DWORD *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x4C) != 0;
      v71 = 16 * v69;
      if ((_DWORD)v69)
        v72 = v358 == (int8x16_t **)v71;
      else
        v72 = 1;
      if (!v72)
      {
        do
        {
          v71 = *(_QWORD *)(v71 + 16);
          v70 = v71 != 0;
        }
        while ((int8x16_t **)v71 != v358 && v71 != 0);
      }
      if (!v70)
      {
LABEL_365:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v66 = JSC::throwDOMAttributeGetterTypeError(v68, &__dst, v358, (WTF::StringImpl *)v35);
      }
      else
      {
LABEL_151:
        v66 = v350(v68);
      }
    }
    IndexQuickly = v66;
  }
LABEL_153:
  if (v357)
  {
    v74 = *(_DWORD *)(v356 + 4);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x1987B1FCCLL);
    }
    *(_DWORD *)(v356 + 4) = v74 - 1;
  }
  if (v35)
  {
LABEL_157:
    v75 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 != 2)
      goto LABEL_158;
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  return IndexQuickly;
}

uint64_t operationGetByValWithThisMegamorphic(unint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  JSC::VM **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  JSC::Structure *v22;
  uint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int OwnStaticPropertySlot;
  unsigned int v33;
  int v34;
  int v35;
  JSC::Structure *v36;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t IndexQuickly;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  JSC::VM *v60;
  unint64_t v61;
  int v62;
  JSC::VM *v63;
  unsigned int v64;
  int64_t v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  _WORD *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  JSC::VM *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  JSC::JSGlobalObject *v101;
  uint64_t v102;
  int v103;
  _WORD *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  BOOL v115;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  JSC::VM *v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  JSC::Structure *v149;
  unint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  int v155;
  JSC::VM *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int8x16_t **v165;
  WTF::StringImpl *v166;
  unint64_t v167;
  JSC::VM *v168;
  uint64_t v169;
  char v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int8x16_t **v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  int v191;
  int v192;
  unsigned int v193;
  char v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unsigned __int16 *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  JSC::VM *v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::VM *v228;
  uint64_t v229;
  int v230;
  int v231;
  unsigned int v232;
  char v233;
  uint64_t v234;
  char v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  unsigned __int8 *v239;
  int v240;
  int v241;
  int v242;
  unsigned int v243;
  char v244;
  JSC::VM *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  _BOOL4 v256;
  unsigned int v257;
  uint64_t **v258;
  double v259;
  const unsigned __int8 *v260;
  uint64_t v261;
  unsigned __int8 *v262;
  unsigned int v263;
  JSC::VM *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  unint64_t AsUint32Index;
  int8x16_t v273;
  JSC::VM *v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  int64_t v278;
  _BYTE *v279;
  unint64_t v280;
  JSC::Structure *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  JSC::VM **v286;
  int v287;
  _WORD *v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  JSC::VM *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  _WORD *v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  unsigned int v308;
  unsigned int v309;
  unsigned __int16 *v310;
  uint64_t v311;
  unsigned int v312;
  WTF::StringImpl *v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  unint64_t v340;
  JSC::VM **v341;
  JSC::VM *v342;
  uint64_t v343;
  char v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  int8x16_t **v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int v365;
  unsigned int v366;
  char v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  unsigned __int16 *v379;
  uint64_t v380;
  unsigned int v381;
  unint64_t v382;
  JSC::VM *v383;
  uint64_t v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  unint64_t v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  int8x16_t **v400;
  JSC::JSObject *v401;
  unsigned int v402;
  uint64_t v403;
  _DWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  unsigned int v419;
  int v420;
  uint64_t v421;
  BOOL canAccessArgumentIndexQuickly;
  char v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned __int8 *v427;
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  int8x16_t **v432;
  unsigned int v433;
  JSC::VM *v434;
  uint64_t v435;
  char v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  _DWORD *v440;
  uint64_t v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  char v446;
  JSC::VM *v447;
  unint64_t NotAnObjectError;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  int v457;
  JSC::VM *v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  int v464;
  unint64_t v465;
  void *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int *v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  char v495;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v497;
  int v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  unsigned __int8 *v502;
  int v503;
  double v504;
  const unsigned __int8 *v505;
  uint64_t v506;
  unsigned int v507;
  int v508;
  _WORD *v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  unsigned int v513;
  unsigned int v514;
  _BOOL4 v515;
  unsigned __int16 *v516;
  uint64_t v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  double v521;
  const unsigned __int8 *v522;
  uint64_t v523;
  unsigned __int8 *v524;
  unsigned int v525;
  uint64_t v526;
  int v527;
  JSC::VM *v528;
  int v529;
  uint64_t v530;
  unsigned int *v531;
  uint64_t v532;
  uint64_t Index;
  int v534;
  char v535;
  uint64_t v536;
  unsigned __int8 *v537;
  unsigned int v538;
  int v539;
  _BYTE *v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  unsigned int v544;
  unsigned int v545;
  int v546;
  WTF::StringImpl *v547;
  unint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned __int16 *v556;
  uint64_t v557;
  unsigned int v558;
  _BOOL4 v559;
  unsigned int v560;
  WTF::StringImpl *v561;
  WTF::StringImpl *v562;
  WTF::StringImpl *v563;
  WTF::StringImpl *v564;
  WTF::StringImpl *v565;
  uint64_t v566;
  unint64_t v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned __int8 *v576;
  unsigned int v577;
  uint64_t v578;
  _DWORD *v579;
  uint64_t **v580;
  unint64_t v581;
  void *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _DWORD *v590;
  unsigned int v591;
  uint64_t v592;
  unsigned __int8 *v593;
  unsigned int v594;
  unsigned int v595;
  uint64_t v596;
  unsigned __int8 *v597;
  unsigned int v598;
  JSC::JSGlobalObject *v599;
  JSC::VM *v600;
  unint64_t v601;
  uint64_t (*v602)(unint64_t);
  uint64_t v603;
  unint64_t v604;
  JSC::Structure *v605;
  JSC::Structure *v606;
  _QWORD v607[2];
  uint64_t v608;
  char v609;
  int8x16_t **v610;
  uint64_t v611;
  unint64_t v612;
  unsigned __int8 *v613;
  WTF::StringImpl *v614[18];
  uint64_t vars0;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = this;
  v614[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v13 = *(JSC::VM ***)(a4 + 56);
  v14 = vars0;
  v600 = v13[7];
  v601 = a1;
  *((_QWORD *)v600 + 5) = vars0;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(a4 + 112);
  v15 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) == 0
    && (this & 0xFFFE000000000002) == 0
    && *(unsigned __int8 *)(a1 + 5) >= 0x17u
    && *(_BYTE *)(this + 5) == 2)
  {
    v16 = *(_QWORD *)(this + 8);
    if (v16)
    {
      if ((v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(v16 + 16);
        if ((v17 & 0x10) != 0)
        {
          *(_DWORD *)v16 += 2;
          if (*((_DWORD *)v600 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v600, this, a3, a4, a5, a6, a7, a8))
            {
              IndexQuickly = 0;
              goto LABEL_92;
            }
            v17 = *(_DWORD *)(v16 + 16);
          }
          v18 = *(_BYTE **)(v16 + 8);
          v19 = *(unsigned int *)(v16 + 4);
          if ((v17 & 4) != 0)
          {
            if ((_DWORD)v19)
            {
              v20 = *v18 - 48;
              if (v20 <= 9 && (v19 < 2 || *v18 != 48))
              {
                v261 = v19 - 1;
                v262 = v18 + 1;
                while (v261)
                {
                  if (v20 <= 0x19999999)
                  {
                    v263 = *v262 - 48;
                    if (v263 <= 9)
                    {
                      v59 = __CFADD__(v263, 10 * v20);
                      v20 = v263 + 10 * v20;
                      --v261;
                      ++v262;
                      if (!v59)
                        continue;
                    }
                  }
                  goto LABEL_12;
                }
LABEL_561:
                if (v20 != -1)
                  goto LABEL_562;
              }
            }
          }
          else if ((_DWORD)v19)
          {
            v20 = *(unsigned __int16 *)v18 - 48;
            if (v20 <= 9 && (*(_WORD *)v18 != 48 || v19 <= 1))
            {
              v56 = (unsigned __int16 *)(v18 + 2);
              v57 = v19 - 1;
              while (v57)
              {
                if (v20 <= 0x19999999)
                {
                  v58 = *v56 - 48;
                  if (v58 <= 9)
                  {
                    v59 = __CFADD__(v58, 10 * v20);
                    v20 = v58 + 10 * v20;
                    ++v56;
                    --v57;
                    if (!v59)
                      continue;
                  }
                }
                goto LABEL_12;
              }
              goto LABEL_561;
            }
          }
LABEL_12:
          v21 = (_QWORD *)*((_QWORD *)v600 + 5244);
          if (v21[221] == v16 || v21[246] == v16 || v21[270] == v16 || v21[2] == v16)
          {
LABEL_562:
            if (v10)
            {
              *(_WORD *)(v10 + 129) |= 4u;
              if (*(_BYTE *)(v10 + 124))
              {
                --*(_BYTE *)(v10 + 124);
              }
              else
              {
                v271 = *(unsigned __int8 *)(v10 + 125);
                if (v271 != 255)
                  *(_BYTE *)(v10 + 125) = ++v271;
                if (xmmword_1ECF4C260 < v271)
                {
                  *(_BYTE *)(v10 + 125) = 0;
                  v364 = *(unsigned __int8 *)(v10 + 126);
                  v365 = BYTE4(xmmword_1ECF4C260) << v364;
                  v366 = v365;
                  if (v365 == 255)
                    LOBYTE(v365) = -2;
                  if (v366 >> v364 == BYTE4(xmmword_1ECF4C260))
                    v367 = v365;
                  else
                    v367 = -2;
                  *(_BYTE *)(v10 + 124) = v367;
                  if (v364 != 255)
                    *(_BYTE *)(v10 + 126) = v364 + 1;
                  *(_BYTE *)(v10 + 127) = 0;
                }
                else if (*(_BYTE *)(v10 + 127))
                {
                  --*(_BYTE *)(v10 + 127);
                }
                JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), v10, 5, a4, a5, a6, a7, a8);
              }
            }
            v612 = v601;
            v264 = v13[7];
            if (((v12 | v601) & 0xFFFE000000000002) != 0)
              goto LABEL_590;
            if (*(_BYTE *)(v12 + 5) != 2)
              goto LABEL_590;
            v265 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
            if (((*(_DWORD *)(v265 + 0x10) | *(unsigned __int8 *)(v265 + 0xA)) & 8) != 0)
              goto LABEL_590;
            v266 = *(_QWORD *)(v12 + 8);
            if ((v266 & 1) != 0)
            {
              JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v13);
            }
            else
            {
              if ((*(_BYTE *)(v266 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v266 += 2;
                goto LABEL_571;
              }
              WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v12 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v614);
            }
            v266 = (unint64_t)v614[0];
LABEL_571:
            if (*((_DWORD *)v264 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v264, this, a3, a4, a5, a6, a7, a8))
            {
              IndexQuickly = 0;
              if (!v266)
                goto LABEL_92;
              goto LABEL_580;
            }
            if (v266)
            {
              if ((v266 >> 4))
              {
                if (((v266 >> 4) & ~*(_DWORD *)(v265 + 32)) == 0)
                {
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v265, v264, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  if (v267)
                  {
                    v614[0] = (WTF::StringImpl *)v266;
                    v268 = JSC::PropertyTable::get(v267, (uint64_t *)v614);
                    if ((_DWORD)v268 != -1)
                    {
                      if ((int)v268 <= 63)
                      {
                        v269 = v601 + 16;
                        v270 = v268 << 32;
                      }
                      else
                      {
                        v269 = *(_QWORD *)(v601 + 8) - 8;
                        v270 = 0x3F00000000 - (v268 << 32);
                      }
                      IndexQuickly = *(_QWORD *)(v269 + (v270 >> 29));
                      if (IndexQuickly)
                      {
LABEL_580:
                        if (*(_DWORD *)v266 == 2)
                        {
                          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v266, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v331, v332, v333, v334, v335, v336, v337, v338);
                        }
                        else
                        {
                          *(_DWORD *)v266 -= 2;
                        }
                        goto LABEL_92;
                      }
                    }
                  }
                }
              }
              if (*(_DWORD *)v266 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v266, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v323, v324, v325, v326, v327, v328, v329, v330);
              }
              else
              {
                *(_DWORD *)v266 -= 2;
              }
            }
LABEL_590:
            v604 = 0xFFFFFFFF00000000;
            LOBYTE(v608) = 0;
            v609 = 0;
            v610 = 0;
            v611 = 0;
            v606 = 0;
            memset(v607, 0, 13);
            v605 = (JSC::Structure *)v11;
            AsUint32Index = JSC::JSValue::tryGetAsUint32Index(v12);
            if (!HIDWORD(AsUint32Index))
            {
              if (v12 >> 49)
              {
                if (v9)
                {
                  *(_DWORD *)(v9 + 4) |= 2u;
                  if (v12 == 0xFFFE0000FFFFFFFFLL && v601 && (*(_BYTE *)(v601 + 5) & 0xFE) == 0x24)
                  {
                    v406 = *(_QWORD **)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x28);
                    v407 = v406[288];
                    v408 = (v407 & 1) != 0 ? (v407 >> 1) & 3 : *(unsigned __int8 *)(v407 + 4);
                    if (v408 != 2)
                    {
                      v409 = v406[287];
                      v410 = (v409 & 1) != 0 ? (v409 >> 1) & 3 : *(unsigned __int8 *)(v409 + 4);
                      if (v410 != 2)
                      {
                        v411 = *(unsigned __int8 *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 8);
                        v412 = (v411 & 0x10) != 0 ? ((v411 & 0xE) + 10) >> 1 : (v411 >> 1) & 7;
                        v413 = *((_DWORD *)v406 + v412 + 213);
                        v414 = v413 ? 16 * (v413 & 0xFFFFFFFE) : 0;
                        if (v414 == 16 * (*(_DWORD *)v601 & 0xFFFFFFFE))
                          goto LABEL_831;
                        v566 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                        if (!v566)
                          v566 = *(_QWORD *)(v601 + 16);
                        if (v566 == v406[84] && !*(_DWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x20))
                          goto LABEL_831;
                      }
                    }
                  }
                }
              }
              if ((v601 & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v447 = v13[7];
                NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v13, v601);
                JSC::VM::throwException(v447, (JSC::JSGlobalObject *)v13, NotAnObjectError, v449, v450, v451, v452, v453);
              }
              if (*((_DWORD *)v264 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v264, this, a3, a4, a5, a6, a7, a8))
              {
LABEL_740:
                IndexQuickly = 0;
                goto LABEL_647;
              }
              v274 = v13[7];
              if (*(_BYTE *)(v12 + 5) == 2)
              {
                v275 = *(_QWORD *)(v12 + 8);
                if ((v275 & 1) != 0)
                {
                  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v13);
                  if (*((_DWORD *)v274 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v274, this, a3, a4, a5, a6, a7, a8))
                  {
                    v275 = 0;
                    v339 = v614[0];
                    v614[0] = 0;
                    if (!v339)
                      goto LABEL_599;
                  }
                  else
                  {
                    v275 = (unint64_t)v614[0];
                    if (!v614[0])
                      goto LABEL_599;
                    *(_DWORD *)v614[0] += 2;
                    v614[0] = 0;
                    v339 = (WTF::StringImpl *)v275;
                  }
                  if (*(_DWORD *)v339 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v339, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
                  }
                  else
                  {
                    *(_DWORD *)v339 -= 2;
                  }
                }
                else
                {
                  if ((*(_BYTE *)(v275 + 16) & 0x10) == 0)
                  {
                    if (*((_QWORD *)v274 + 8096) != v275)
                    {
                      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v274 + 8096, *(WTF::AtomStringImpl **)(v12 + 8), a3, a4, a5, a6, a7, a8);
                      v351 = *(WTF::StringImpl **)(v12 + 8);
                      if (v351)
                      {
                        if ((*((_BYTE *)v351 + 16) & 0x10) != 0)
                        {
                          *(_DWORD *)v351 += 2;
                        }
                        else
                        {
                          WTF::AtomStringImpl::addSlowCase((unint64_t)v351, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v614);
                          v351 = v614[0];
                        }
                      }
                      v352 = (WTF::StringImpl *)*((_QWORD *)v274 + 8097);
                      *((_QWORD *)v274 + 8097) = v351;
                      if (v352)
                      {
                        if (*(_DWORD *)v352 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v352, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v389, v390, v391, v392, v393, v394, v395, v396);
                        }
                        else
                        {
                          *(_DWORD *)v352 -= 2;
                        }
                      }
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
                    {
                      v353 = (WTF::StringImpl *)*((_QWORD *)v274 + 8097);
                      *(_DWORD *)v353 += 2;
                      v614[0] = v353;
                      __dmb(0xAu);
                      v354 = *(WTF::StringImpl **)(v12 + 8);
                      *(WTF::StringImpl **)(v12 + 8) = v614[0];
                      v614[0] = v354;
                      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v274 + 192, (unint64_t)v614);
                      v355 = v614[0];
                      v614[0] = 0;
                      if (v355)
                      {
                        if (*(_DWORD *)v355 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v355, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
                        }
                        else
                        {
                          *(_DWORD *)v355 -= 2;
                        }
                      }
                    }
                    v275 = *((_QWORD *)v274 + 8097);
                  }
                  *(_DWORD *)v275 += 2;
                }
LABEL_599:
                if (*((_DWORD *)v264 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v264, this, a3, a4, a5, a6, a7, a8))
                {
                  IndexQuickly = 0;
                  goto LABEL_644;
                }
                v276 = (uint64_t)v13[7];
                v277 = *(unsigned __int8 *)(v601 + 5);
                if (v277 > 0x16)
                  goto LABEL_601;
                if (v277 != 2)
                {
LABEL_1197:
                  v601 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v612, (unint64_t)v13);
                  if (!v601)
                    goto LABEL_659;
                  v276 = (uint64_t)v13[7];
LABEL_601:
                  v278 = v601;
                  v279 = (_BYTE *)(v601 + 6);
                  v280 = v275 >> 4;
                  if ((*(_BYTE *)(v601 + 6) & 8) == 0)
                  {
                    v281 = (JSC::Structure *)v601;
                    while (1)
                    {
                      v282 = *(_DWORD *)v281 & 0xFFFFFFFE;
                      v283 = 16 * v282;
                      if ((_DWORD)v280)
                      {
                        if ((v280 & ~*(_DWORD *)(16 * v282 + 0x20)) == 0)
                        {
                          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v283, (JSC::VM *)v276, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                          if (v284)
                          {
                            v614[0] = (WTF::StringImpl *)v275;
                            v285 = JSC::PropertyTable::get(v284, (uint64_t *)v614);
                            a6 = v285;
                            if ((_DWORD)v285 != -1)
                            {
                              a5 = HIDWORD(v285);
                              if ((int)v285 <= 63)
                              {
                                v300 = (uint64_t)v281 + 16;
                                v301 = v285 << 32;
                              }
                              else
                              {
                                v300 = *((_QWORD *)v281 + 1) - 8;
                                v301 = 0x3F00000000 - (v285 << 32);
                              }
                              a4 = *(_QWORD *)(v300 + (v301 >> 29));
                              if ((a4 & 0xFFFE000000000002) != 0)
                                goto LABEL_641;
                              v302 = *(unsigned __int8 *)(a4 + 5);
                              if (v302 == 5)
                              {
                                JSC::JSObject::fillGetterPropertySlot((unsigned int *)v281, v276, (uint64_t)&v602, a4, SHIDWORD(v285), v285);
                                goto LABEL_642;
                              }
                              if (v302 != 6)
                              {
LABEL_641:
                                v602 = (uint64_t (*)(unint64_t))a4;
                                v606 = v281;
                                v604 = __PAIR64__(v285, HIDWORD(v285));
                                LOWORD(v607[1]) = 257;
                                goto LABEL_642;
                              }
                              v347 = *(_DWORD *)(v283 + 16) & 3;
                              v348 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v350 = *(int8x16_t ***)(a4 + 24);
                                v349 = *(_QWORD *)(a4 + 32);
                                v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v603 = v348;
                                LODWORD(v604) = HIDWORD(v285);
                                v606 = v281;
                                BYTE1(v607[1]) = 3;
                                if (v347 != 2)
                                  LOBYTE(v607[1]) = 1;
                                BYTE3(v607[1]) = 1;
                                v610 = v350;
                                v611 = v349;
                                goto LABEL_642;
                              }
                              v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                              v603 = v348;
                              LODWORD(v604) = HIDWORD(v285);
                              v606 = v281;
                              BYTE1(v607[1]) = 3;
                              if (v347 == 2)
                                goto LABEL_642;
                              goto LABEL_755;
                            }
                          }
                        }
                      }
                      if ((*v279 & 0x20) != 0
                        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v281, (JSC::VM *)v276, v275, (uint64_t)&v602) & 1) != 0)
                      {
                        goto LABEL_642;
                      }
                      v278 = *(_QWORD *)(v283 + 48);
                      if (!v278)
                        v278 = *((_QWORD *)v281 + 2);
                      if ((v278 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v278 + 5) < 0x17u)
                        break;
                      v279 = (_BYTE *)(v278 + 6);
                      v281 = (JSC::Structure *)v278;
                      if ((*(_BYTE *)(v278 + 6) & 8) != 0)
                        goto LABEL_613;
                    }
                    if (!v275)
                    {
LABEL_831:
                      IndexQuickly = 10;
                      goto LABEL_647;
                    }
                    v303 = *(_DWORD *)(v275 + 16);
                    if ((v303 & 0x20) != 0)
                    {
LABEL_1048:
                      IndexQuickly = 10;
                      goto LABEL_645;
                    }
                    v304 = *(_WORD **)(v275 + 8);
                    v305 = *(unsigned int *)(v275 + 4);
                    if ((v303 & 4) == 0)
                    {
                      if ((_DWORD)v305)
                      {
                        v306 = (unsigned __int16)*v304 - 48;
                        if (v306 <= 9 && (*v304 != 48 || v305 <= 1))
                        {
                          v310 = v304 + 1;
                          v311 = v305 - 1;
                          while (v311)
                          {
                            if (v306 > 0x19999999)
                              goto LABEL_655;
                            v312 = *v310 - 48;
                            if (v312 > 9)
                              goto LABEL_655;
                            v307 = 0;
                            LOBYTE(v305) = 0;
                            v308 = 0;
                            v59 = __CFADD__(v312, 10 * v306);
                            v306 = v312 + 10 * v306;
                            ++v310;
                            --v311;
                            if (v59)
                              goto LABEL_657;
                          }
                          v308 = v306 & 0xFFFFFF00;
                          v307 = 0x100000000;
                          if (v306 == -1)
                          {
                            v307 = 0;
                            LOBYTE(v305) = 0;
                          }
                          else
                          {
                            LOBYTE(v305) = v306;
                          }
                          if (v306 == -1)
                            v308 = 0;
                          goto LABEL_657;
                        }
LABEL_655:
                        v307 = 0;
                        LOBYTE(v305) = 0;
                      }
                      else
                      {
                        v307 = 0;
                      }
                      v308 = 0;
LABEL_657:
                      v309 = v305;
LABEL_658:
                      if ((v307 & 0x100000000) == 0)
                      {
LABEL_659:
                        IndexQuickly = 10;
                        goto LABEL_644;
                      }
                      v340 = v308 | v309;
                      v341 = v13;
                      v342 = v13[7];
                      IndexQuickly = 10;
                      while (1)
                      {
                        v343 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
                        v344 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v343 + 0x4C) + 0x70))();
                        if (*((_DWORD *)v342 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v342, this, a3, a4, a5, a6, a7, a8))
                        {
                          goto LABEL_659;
                        }
                        v13 = v341;
                        if ((v344 & 1) != 0)
                          goto LABEL_642;
                        if (BYTE2(v607[1]) == 3)
                        {
                          if (BYTE4(v607[1]))
                            goto LABEL_659;
                          v345 = *(unsigned __int8 *)(v601 + 5);
                          if (v345 == 61)
                            goto LABEL_701;
                        }
                        else
                        {
                          v345 = *(unsigned __int8 *)(v601 + 5);
                          if (v345 == 61)
                          {
                            if (BYTE2(v607[1]) == 1)
                              goto LABEL_659;
                            goto LABEL_701;
                          }
                        }
                        if ((v345 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, this, a3, a4, a5, a6, a7, a8) <= v340)
                        {
                          goto LABEL_659;
                        }
LABEL_701:
                        if ((*(_WORD *)(v343 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
                        {
                          v346 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                          if (!v346)
                            v346 = *(_QWORD *)(v601 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v346 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0xB0))(v601, v341);
                          }
                          else
                          {
                            v346 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                            if (!v346)
                              v346 = *(_QWORD *)(v601 + 16);
                          }
                          if (*((_DWORD *)v342 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v342, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_659;
                          }
                        }
                        if ((v346 & 0xFFFE000000000002) == 0)
                        {
                          v601 = v346;
                          if (*(unsigned __int8 *)(v346 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_644;
                      }
                    }
                    if ((_DWORD)v305)
                    {
                      v519 = *(unsigned __int8 *)v304 - 48;
                      if (v519 <= 9 && (v305 < 2 || *(_BYTE *)v304 != 48))
                      {
                        v523 = v305 - 1;
                        v524 = (unsigned __int8 *)v304 + 1;
                        while (v523)
                        {
                          if (v519 > 0x19999999)
                            goto LABEL_1100;
                          v525 = *v524 - 48;
                          if (v525 > 9)
                            goto LABEL_1100;
                          v309 = 0;
                          LOBYTE(v305) = 0;
                          v307 = 0;
                          v59 = __CFADD__(v525, 10 * v519);
                          v519 = v525 + 10 * v519;
                          --v523;
                          ++v524;
                          if (v59)
                            goto LABEL_1102;
                        }
                        if (v519 == -1)
                          v309 = 0;
                        else
                          v309 = v519 & 0xFFFFFF00;
                        if (v519 == -1)
                          LOBYTE(v305) = 0;
                        else
                          LOBYTE(v305) = v519;
                        if (v519 == -1)
                          v307 = 0;
                        else
                          v307 = 0x100000000;
                        goto LABEL_1102;
                      }
LABEL_1100:
                      v309 = 0;
                      LOBYTE(v305) = 0;
                    }
                    else
                    {
                      v309 = 0;
                    }
                    v307 = 0;
LABEL_1102:
                    v308 = v305;
                    goto LABEL_658;
                  }
LABEL_613:
                  v286 = v13;
                  if (!v275)
                    goto LABEL_622;
                  v287 = *(_DWORD *)(v275 + 16);
                  if ((v287 & 0x20) != 0)
                    goto LABEL_622;
                  v288 = *(_WORD **)(v275 + 8);
                  v289 = *(unsigned int *)(v275 + 4);
                  if ((v287 & 4) == 0)
                  {
                    if ((_DWORD)v289)
                    {
                      v290 = (unsigned __int16)*v288 - 48;
                      if (v290 <= 9 && (*v288 != 48 || v289 <= 1))
                      {
                        v379 = v288 + 1;
                        v380 = v289 - 1;
                        while (v380)
                        {
                          if (v290 > 0x19999999)
                            goto LABEL_618;
                          v381 = *v379 - 48;
                          if (v381 > 9)
                            goto LABEL_618;
                          v291 = 0;
                          LOBYTE(v289) = 0;
                          v292 = 0;
                          v59 = __CFADD__(v381, 10 * v290);
                          v290 = v381 + 10 * v290;
                          ++v379;
                          --v380;
                          if (v59)
                            goto LABEL_620;
                        }
                        v292 = v290 & 0xFFFFFF00;
                        v291 = 0x100000000;
                        if (v290 == -1)
                        {
                          v291 = 0;
                          LOBYTE(v289) = 0;
                        }
                        else
                        {
                          LOBYTE(v289) = v290;
                        }
                        if (v290 == -1)
                          v292 = 0;
                        goto LABEL_620;
                      }
LABEL_618:
                      v291 = 0;
                      LOBYTE(v289) = 0;
                    }
                    else
                    {
                      v291 = 0;
                    }
                    v292 = 0;
LABEL_620:
                    v293 = v289;
LABEL_621:
                    if ((v291 & 0x100000000) == 0)
                    {
LABEL_622:
                      v294 = v13[7];
                      IndexQuickly = 10;
                      while (1)
                      {
                        v295 = 16 * (*(_DWORD *)v278 & 0xFFFFFFFE);
                        if ((*(_BYTE *)(v278 + 6) & 8) != 0)
                        {
                          v423 = (*(uint64_t (**)(int64_t, JSC::VM **, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v278 & 0xFFFFFFFE) + 0x4C) + 0x68))(v278, v286, v275, &v602);
                          if (*((_DWORD *)v294 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v294, this, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_659;
                          }
                          v13 = v286;
                          if ((v423 & 1) != 0)
                            goto LABEL_642;
                          if (BYTE2(v607[1]) == 3)
                          {
                            if (BYTE4(v607[1]))
                              goto LABEL_659;
                            v424 = *(unsigned __int8 *)(v278 + 5);
                            if (v424 != 61)
                            {
LABEL_876:
                              if (!v275)
                                goto LABEL_629;
                              if ((v424 - 50) < 0xFFFFFFF5)
                                goto LABEL_629;
                              v425 = *(_DWORD *)(v275 + 16);
                              if ((v425 & 0x20) != 0)
                                goto LABEL_629;
                              v426 = *(unsigned int *)(v275 + 4);
                              if (!(_DWORD)v426)
                                goto LABEL_629;
                              v427 = *(unsigned __int8 **)(v275 + 8);
                              if ((v425 & 4) == 0)
                              {
                                v428 = *(unsigned __int16 *)v427;
                                if ((_DWORD)v426 == 1)
                                  goto LABEL_882;
                                if (v428 == 45)
                                {
                                  v428 = *((unsigned __int16 *)v427 + 1);
                                  goto LABEL_1029;
                                }
                                if ((v428 - 48) >= 0xA && ((_DWORD)v426 != 8 || v428 != 73))
                                {
LABEL_1072:
                                  if ((_DWORD)v426 != 3 || v428 != 78)
                                    goto LABEL_629;
                                }
LABEL_1047:
                                v601 = v601 & 0xFFFFFF0000000000 | v426 | ((unint64_t)((v425 >> 2) & 1) << 32);
                                JSC::jsToNumber(v427, v601);
                                WTF::numberToString(v614, v504);
                                if (WTF::equal(v275, (unint64_t)v614, v505))
                                  goto LABEL_1048;
                                goto LABEL_629;
                              }
                              v428 = *v427;
                              if ((_DWORD)v426 == 1)
                              {
LABEL_882:
                                if ((v428 - 48) < 0xA)
                                  goto LABEL_1048;
                                goto LABEL_629;
                              }
                              if (v428 == 45)
                              {
                                v428 = v427[1];
LABEL_1029:
                                if ((v428 - 48) < 0xA)
                                {
                                  if ((_DWORD)v426 == 2)
                                    goto LABEL_1048;
                                  goto LABEL_1047;
                                }
                                if ((_DWORD)v426 != 9)
                                  goto LABEL_629;
                              }
                              else
                              {
                                if ((v428 - 48) < 0xA)
                                  goto LABEL_1047;
                                if ((_DWORD)v426 != 8)
                                  goto LABEL_1072;
                              }
                              if (v428 != 73)
                                goto LABEL_629;
                              goto LABEL_1047;
                            }
                          }
                          else
                          {
                            v424 = *(unsigned __int8 *)(v278 + 5);
                            if (v424 != 61)
                              goto LABEL_876;
                            if (BYTE2(v607[1]) == 1)
                              goto LABEL_659;
                          }
                        }
                        else
                        {
                          if ((_DWORD)v280)
                          {
                            if ((v280 & ~*(_DWORD *)(16 * (*(_DWORD *)v278 & 0xFFFFFFFE) + 0x20)) == 0)
                            {
                              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v278 & 0xFFFFFFFE)), v294, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                              if (v296)
                              {
                                v614[0] = (WTF::StringImpl *)v275;
                                v297 = JSC::PropertyTable::get(v296, (uint64_t *)v614);
                                a6 = v297;
                                if ((_DWORD)v297 != -1)
                                {
                                  a5 = HIDWORD(v297);
                                  if ((int)v297 <= 63)
                                  {
                                    v376 = v278 + 16;
                                    v377 = v297 << 32;
                                  }
                                  else
                                  {
                                    v376 = *(_QWORD *)(v278 + 8) - 8;
                                    v377 = 0x3F00000000 - (v297 << 32);
                                  }
                                  a4 = *(_QWORD *)(v376 + (v377 >> 29));
                                  if ((a4 & 0xFFFE000000000002) != 0)
                                  {
LABEL_737:
                                    v602 = (uint64_t (*)(unint64_t))a4;
                                    v606 = (JSC::Structure *)v278;
                                    v604 = __PAIR64__(v297, HIDWORD(v297));
                                    LOWORD(v607[1]) = 257;
                                    goto LABEL_738;
                                  }
                                  v378 = *(unsigned __int8 *)(a4 + 5);
                                  if (v378 == 5)
                                  {
                                    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v278, (uint64_t)v294, (uint64_t)&v602, a4, SHIDWORD(v297), v297);
                                    goto LABEL_738;
                                  }
                                  if (v378 != 6)
                                    goto LABEL_737;
                                  v397 = *(_DWORD *)(v295 + 16) & 3;
                                  v398 = *(_QWORD *)(a4 + 16);
                                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                  {
                                    v400 = *(int8x16_t ***)(a4 + 24);
                                    v399 = *(_QWORD *)(a4 + 32);
                                    v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                    v603 = v398;
                                    LODWORD(v604) = HIDWORD(v297);
                                    v606 = (JSC::Structure *)v278;
                                    BYTE1(v607[1]) = 3;
                                    if (v397 != 2)
                                      LOBYTE(v607[1]) = 1;
                                    BYTE3(v607[1]) = 1;
                                    v610 = v400;
                                    v611 = v399;
LABEL_738:
                                    v13 = v286;
LABEL_642:
                                    if (BYTE1(v607[1]) == 1)
                                    {
                                      IndexQuickly = (uint64_t)v602;
                                    }
                                    else
                                    {
                                      if (BYTE1(v607[1]) == 2)
                                        v322 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v602, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
                                      else
                                        v322 = JSC::PropertySlot::customGetter((uint64_t)&v602, v13[7], (WTF::StringImpl *)v275);
                                      IndexQuickly = v322;
                                    }
LABEL_644:
                                    if (v275)
                                    {
LABEL_645:
                                      if (*(_DWORD *)v275 != 2)
                                      {
                                        *(_DWORD *)v275 -= 2;
                                        goto LABEL_647;
                                      }
                                      v313 = (WTF::StringImpl *)v275;
LABEL_670:
                                      WTF::StringImpl::~StringImpl(v313, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                                      WTF::fastFree(v314, v315, v316, v317, v318, v319, v320, v321);
                                    }
                                    goto LABEL_647;
                                  }
                                  v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                  v603 = v398;
                                  LODWORD(v604) = HIDWORD(v297);
                                  v606 = (JSC::Structure *)v278;
                                  BYTE1(v607[1]) = 3;
                                  v13 = v286;
                                  if (v397 == 2)
                                    goto LABEL_642;
LABEL_755:
                                  LOBYTE(v607[1]) = 1;
                                  goto LABEL_642;
                                }
                              }
                            }
                          }
                          if ((*(_BYTE *)(v278 + 6) & 0x20) != 0)
                          {
                            v13 = v286;
                            if ((JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v278, v294, v275, (uint64_t)&v602) & 1) != 0)goto LABEL_642;
                          }
                        }
LABEL_629:
                        if ((*(_WORD *)(v295 + 12) & 0x800) == 0)
                        {
                          v298 = *(_DWORD *)v278;
LABEL_631:
                          v299 = *(_QWORD *)(16 * (v298 & 0xFFFFFFFE) + 0x30);
                          if (!v299)
                            v299 = *(_QWORD *)(v278 + 16);
                          goto LABEL_633;
                        }
                        v298 = *(_DWORD *)v278;
                        if (BYTE2(v607[1]) == 3)
                          goto LABEL_631;
                        v416 = 16 * (v298 & 0xFFFFFFFE);
                        if ((*(_WORD *)(v416 + 12) & 0x800) != 0)
                        {
                          v299 = (*(uint64_t (**)(int64_t, JSC::VM **))(16
                                                                                       * *(unsigned int *)(v416 + 76)
                                                                                       + 0xB0))(v278, v286);
                        }
                        else
                        {
                          v299 = *(_QWORD *)(v416 + 48);
                          if (!v299)
                            v299 = *(_QWORD *)(v278 + 16);
                        }
                        if (*((_DWORD *)v294 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v294, this, a3, a4, a5, a6, a7, a8))
                        {
                          goto LABEL_659;
                        }
LABEL_633:
                        if ((v299 & 0xFFFE000000000002) == 0)
                        {
                          v278 = v299;
                          if (*(unsigned __int8 *)(v299 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_644;
                      }
                    }
                    v382 = v292 | v293;
                    v383 = v13[7];
                    IndexQuickly = 10;
                    while (1)
                    {
                      v384 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
                      v385 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v384 + 0x4C) + 0x70))();
                      v386 = v385;
                      if (*((_DWORD *)v383 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v383, this, a3, a4, a5, a6, a7, a8);
                        if (((hasExceptionsAfterHandlingTraps | v386) & 1) != 0)
                        {
                          v13 = v286;
                          if (!hasExceptionsAfterHandlingTraps)
                            goto LABEL_642;
                          goto LABEL_659;
                        }
                      }
                      else
                      {
                        v13 = v286;
                        if ((v385 & 1) != 0)
                          goto LABEL_642;
                      }
                      if (BYTE2(v607[1]) == 3)
                      {
                        if (BYTE4(v607[1]))
                          goto LABEL_659;
                        v387 = *(unsigned __int8 *)(v601 + 5);
                        if (v387 == 61)
                          goto LABEL_772;
                      }
                      else
                      {
                        v387 = *(unsigned __int8 *)(v601 + 5);
                        if (v387 == 61)
                        {
                          if (BYTE2(v607[1]) == 1)
                            goto LABEL_659;
                          goto LABEL_772;
                        }
                      }
                      if ((v387 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, this, a3, a4, a5, a6, a7, a8) <= v382)
                      {
                        goto LABEL_659;
                      }
LABEL_772:
                      if ((*(_WORD *)(v384 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
                      {
                        v388 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                        if (!v388)
                          v388 = *(_QWORD *)(v601 + 16);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v388 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0xB0))(v601, v286);
                        }
                        else
                        {
                          v388 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                          if (!v388)
                            v388 = *(_QWORD *)(v601 + 16);
                        }
                        if (*((_DWORD *)v383 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v383, this, a3, a4, a5, a6, a7, a8))
                        {
                          goto LABEL_659;
                        }
                      }
                      if ((v388 & 0xFFFE000000000002) == 0)
                      {
                        v601 = v388;
                        if (*(unsigned __int8 *)(v388 + 5) > 0x16u)
                          continue;
                      }
                      goto LABEL_644;
                    }
                  }
                  if ((_DWORD)v289)
                  {
                    v560 = *(unsigned __int8 *)v288 - 48;
                    if (v560 <= 9 && (v289 < 2 || *(_BYTE *)v288 != 48))
                    {
                      v575 = v289 - 1;
                      v576 = (unsigned __int8 *)v288 + 1;
                      while (v575)
                      {
                        if (v560 > 0x19999999)
                          goto LABEL_1270;
                        v577 = *v576 - 48;
                        if (v577 > 9)
                          goto LABEL_1270;
                        v293 = 0;
                        LOBYTE(v289) = 0;
                        v291 = 0;
                        v59 = __CFADD__(v577, 10 * v560);
                        v560 = v577 + 10 * v560;
                        --v575;
                        ++v576;
                        if (v59)
                          goto LABEL_1272;
                      }
                      if (v560 == -1)
                        v293 = 0;
                      else
                        v293 = v560 & 0xFFFFFF00;
                      if (v560 == -1)
                        LOBYTE(v289) = 0;
                      else
                        LOBYTE(v289) = v560;
                      if (v560 == -1)
                        v291 = 0;
                      else
                        v291 = 0x100000000;
                      goto LABEL_1272;
                    }
LABEL_1270:
                    v293 = 0;
                    LOBYTE(v289) = 0;
                  }
                  else
                  {
                    v293 = 0;
                  }
                  v291 = 0;
LABEL_1272:
                  v292 = v289;
                  goto LABEL_621;
                }
                if (*(_QWORD *)(*(_QWORD *)(v276 + 41952) + 1768) == v275)
                {
                  v530 = *(_QWORD *)(v601 + 8);
                  if ((v530 & 1) != 0)
                    v531 = (unsigned int *)(v601 + 16);
                  else
                    v531 = (unsigned int *)(v530 + 4);
                  v532 = *v531;
                  if ((v532 & 0x80000000) != 0)
                    Index = COERCE__INT64((double)v532) + 0x2000000000000;
                  else
                    Index = v532 | 0xFFFE000000000000;
                  v534 = 14;
                  goto LABEL_1194;
                }
                if (!v275 || (v539 = *(_DWORD *)(v275 + 16), (v539 & 0x20) != 0))
                {
LABEL_1230:
                  v535 = 0;
LABEL_1195:
                  if (*(_DWORD *)(v276 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v276, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_659;
                  }
                  if ((v535 & 1) != 0)
                    goto LABEL_642;
                  goto LABEL_1197;
                }
                v540 = *(_BYTE **)(v275 + 8);
                v541 = *(unsigned int *)(v275 + 4);
                if ((v539 & 4) != 0)
                {
                  if (!(_DWORD)v541
                    || (v595 = *v540 - 48, v595 > 9)
                    || v541 >= 2 && *v540 == 48)
                  {
LABEL_1423:
                    v545 = 0;
                    LOBYTE(v544) = 0;
                    v543 = 0;
                  }
                  else
                  {
                    v596 = v541 - 1;
                    v597 = v540 + 1;
                    while (v596)
                    {
                      if (v595 <= 0x19999999)
                      {
                        v598 = *v597 - 48;
                        if (v598 <= 9)
                        {
                          v59 = __CFADD__(v598, 10 * v595);
                          v595 = v598 + 10 * v595;
                          --v596;
                          ++v597;
                          if (!v59)
                            continue;
                        }
                      }
                      goto LABEL_1423;
                    }
                    v545 = v595 & 0xFFFFFF00;
                    if (v595 == -1)
                    {
                      v545 = 0;
                      LOBYTE(v544) = 0;
                    }
                    else
                    {
                      LOBYTE(v544) = v595;
                    }
                    if (v595 == -1)
                      v543 = 0;
                    else
                      v543 = 0x100000000;
                  }
                  v544 = v544;
LABEL_1229:
                  if ((v543 & 0x100000000) != 0)
                  {
                    a3 = v544 | v545;
                    v589 = *(_QWORD *)(v601 + 8);
                    v590 = (_DWORD *)((v589 & 1) != 0 ? v601 + 16 : v589 + 4);
                    if (*v590 > a3)
                    {
                      Index = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8, v273);
                      if (!*(_DWORD *)(v276 + 80)
                        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v276, this, a3, a4, a5, a6, a7, a8))
                      {
                        v534 = 10;
LABEL_1194:
                        v602 = (uint64_t (*)(unint64_t))Index;
                        LODWORD(v604) = v534;
                        v606 = 0;
                        v535 = 1;
                        BYTE1(v607[1]) = 1;
                        goto LABEL_1195;
                      }
                    }
                  }
                  goto LABEL_1230;
                }
                if ((_DWORD)v541)
                {
                  v542 = *(unsigned __int16 *)v540 - 48;
                  if (v542 <= 9 && (*(_WORD *)v540 != 48 || v541 <= 1))
                  {
                    v556 = (unsigned __int16 *)(v540 + 2);
                    v557 = v541 - 1;
                    while (v557)
                    {
                      if (v542 > 0x19999999)
                        goto LABEL_1226;
                      v558 = *v556 - 48;
                      if (v558 > 9)
                        goto LABEL_1226;
                      v543 = 0;
                      LOBYTE(v541) = 0;
                      v544 = 0;
                      v59 = __CFADD__(v558, 10 * v542);
                      v542 = v558 + 10 * v542;
                      ++v556;
                      --v557;
                      if (v59)
                        goto LABEL_1228;
                    }
                    v544 = v542 & 0xFFFFFF00;
                    v543 = 0x100000000;
                    if (v542 == -1)
                    {
                      v543 = 0;
                      LOBYTE(v541) = 0;
                    }
                    else
                    {
                      LOBYTE(v541) = v542;
                    }
                    if (v542 == -1)
                      v544 = 0;
                    goto LABEL_1228;
                  }
LABEL_1226:
                  v543 = 0;
                  LOBYTE(v541) = 0;
                }
                else
                {
                  v543 = 0;
                }
                v544 = 0;
LABEL_1228:
                v545 = v541;
                goto LABEL_1229;
              }
              v526 = JSC::JSCell::toPrimitive(v12, v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
              v613 = (unsigned __int8 *)v526;
              if (*((_DWORD *)v274 + 20))
              {
                if (JSC::VM::hasExceptionsAfterHandlingTraps(v274, this, a3, a4, a5, a6, a7, a8))
                {
                  v275 = *(_QWORD *)(*((_QWORD *)v274 + 5244) + 8);
                  if (!v275)
                    goto LABEL_599;
                  goto LABEL_1183;
                }
                v526 = (uint64_t)v613;
              }
              if ((v526 & 0xFFFE000000000002) == 0)
              {
                v527 = *(unsigned __int8 *)(v526 + 5);
                if (v527 == 2)
                  goto LABEL_1180;
                if (v527 == 4)
                {
                  v275 = *(_QWORD *)(v526 + 8);
                  v546 = *(_DWORD *)v275;
                  *(_DWORD *)v275 += 4;
                  v529 = v546 + 2;
                  if (v529)
                    goto LABEL_1184;
                  v547 = (WTF::StringImpl *)v275;
                  goto LABEL_1235;
                }
              }
              v526 = (uint64_t)JSC::JSValue::toStringSlowCase(&v613, (uint64_t)v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_1180:
              if (*((_DWORD *)v274 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v274, this, a3, a4, a5, a6, a7, a8))
              {
                v275 = 0;
                goto LABEL_599;
              }
              v275 = *(_QWORD *)(v526 + 8);
              v528 = v13[7];
              if ((v275 & 1) == 0)
              {
                if ((*(_BYTE *)(v275 + 16) & 0x10) == 0)
                {
                  if (*((_QWORD *)v528 + 8096) != v275)
                  {
                    WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v528 + 8096, *(WTF::AtomStringImpl **)(v526 + 8), a3, a4, a5, a6, a7, a8);
                    v561 = *(WTF::StringImpl **)(v526 + 8);
                    if (v561)
                    {
                      if ((*((_BYTE *)v561 + 16) & 0x10) != 0)
                      {
                        *(_DWORD *)v561 += 2;
                      }
                      else
                      {
                        WTF::AtomStringImpl::addSlowCase((unint64_t)v561, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v614);
                        v561 = v614[0];
                      }
                    }
                    v562 = (WTF::StringImpl *)*((_QWORD *)v528 + 8097);
                    *((_QWORD *)v528 + 8097) = v561;
                    if (v562)
                    {
                      if (*(_DWORD *)v562 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v562, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v581, v582, v583, v584, v585, v586, v587, v588);
                      }
                      else
                      {
                        *(_DWORD *)v562 -= 2;
                      }
                    }
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v526 + 8) + 16) & 0x10) == 0)
                  {
                    v563 = (WTF::StringImpl *)*((_QWORD *)v528 + 8097);
                    *(_DWORD *)v563 += 2;
                    v614[0] = v563;
                    __dmb(0xAu);
                    v564 = *(WTF::StringImpl **)(v526 + 8);
                    *(WTF::StringImpl **)(v526 + 8) = v614[0];
                    v614[0] = v564;
                    JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v528 + 192, (unint64_t)v614);
                    v565 = v614[0];
                    v614[0] = 0;
                    if (v565)
                    {
                      if (*(_DWORD *)v565 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v565, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v567, v568, v569, v570, v571, v572, v573, v574);
                      }
                      else
                      {
                        *(_DWORD *)v565 -= 2;
                      }
                    }
                  }
                  v275 = *((_QWORD *)v528 + 8097);
                }
LABEL_1183:
                v529 = *(_DWORD *)v275 + 2;
LABEL_1184:
                *(_DWORD *)v275 = v529;
                goto LABEL_599;
              }
              JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v526, (JSC::JSGlobalObject *)v13);
              if (*((_DWORD *)v528 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v528, this, a3, a4, a5, a6, a7, a8))
              {
                v275 = 0;
                v547 = v614[0];
                v614[0] = 0;
                if (!v547)
                  goto LABEL_599;
              }
              else
              {
                v275 = (unint64_t)v614[0];
                if (!v614[0])
                  goto LABEL_599;
                *(_DWORD *)v614[0] += 2;
                v614[0] = 0;
                v547 = (WTF::StringImpl *)v275;
              }
              if (*(_DWORD *)v547 != 2)
              {
                *(_DWORD *)v547 -= 2;
                goto LABEL_599;
              }
LABEL_1235:
              WTF::StringImpl::~StringImpl(v547, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v548, v549, v550, v551, v552, v553, v554, v555);
              goto LABEL_599;
            }
            v401 = (JSC::JSObject *)AsUint32Index;
            v402 = *(unsigned __int8 *)(v601 + 5);
            if (v402 == 2)
            {
              v403 = *(_QWORD *)(v601 + 8);
              if ((v403 & 1) != 0)
                v404 = (_DWORD *)(v601 + 16);
              else
                v404 = (_DWORD *)(v403 + 4);
              if (*v404 > AsUint32Index)
              {
                v405 = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, AsUint32Index, a4, a5, a6, a7, a8, v273);
                goto LABEL_813;
              }
              if (v9)
LABEL_895:
                *(_DWORD *)(v9 + 4) |= 2u;
            }
            else
            {
              if (v402 <= 0x16)
              {
                v434 = v13[7];
                goto LABEL_910;
              }
              IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v601, AsUint32Index, v9);
              if (IndexQuickly)
                goto LABEL_647;
              if ((*(_BYTE *)(v601 + 4) & 0xF) != 9
                || *(_DWORD *)(*(_QWORD *)(v601 + 8) - 8) <= v401
                || ((v417 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x28),
                     v418 = *(unsigned __int8 *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 8),
                     (v418 & 0x10) != 0)
                  ? (v419 = ((v418 & 0xE) + 10) >> 1)
                  : (v419 = (v418 >> 1) & 7),
                    (v420 = *(_DWORD *)(v417 + 4 * v419 + 852)) != 0
                  ? (v421 = 16 * (v420 & 0xFFFFFFFE))
                  : (v421 = 0),
                    v421 != 16 * (*(_DWORD *)v601 & 0xFFFFFFFE)
                 || ((v506 = *(_QWORD *)(v417 + 2304), (v506 & 1) != 0)
                   ? (v507 = (v506 >> 1) & 3)
                   : (v507 = *(unsigned __int8 *)(v506 + 4)),
                     v507 == 2)))
              {
                canAccessArgumentIndexQuickly = JSC::CommonSlowPaths::canAccessArgumentIndexQuickly((JSC::CommonSlowPaths *)v601, v401);
                if (v9)
                {
                  if (!canAccessArgumentIndexQuickly)
                    goto LABEL_895;
                }
              }
            }
            v402 = *(unsigned __int8 *)(v601 + 5);
            v434 = v13[7];
            if (v402 > 0x16)
            {
LABEL_897:
              IndexQuickly = 10;
              while (1)
              {
                v435 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
                v436 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v435 + 0x4C) + 0x70))();
                if (*((_DWORD *)v434 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v434, this, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_831;
                }
                if ((v436 & 1) != 0)
                  goto LABEL_921;
                if (BYTE2(v607[1]) == 3)
                {
                  if (BYTE4(v607[1]))
                    goto LABEL_831;
                  v437 = *(unsigned __int8 *)(v601 + 5);
                  if (v437 == 61)
                    goto LABEL_903;
                }
                else
                {
                  v437 = *(unsigned __int8 *)(v601 + 5);
                  if (v437 == 61)
                  {
                    if (BYTE2(v607[1]) == 1)
                      goto LABEL_831;
                    goto LABEL_903;
                  }
                }
                if ((v437 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, this, a3, a4, a5, a6, a7, a8) <= v401)
                {
                  goto LABEL_831;
                }
LABEL_903:
                if ((*(_WORD *)(v435 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
                {
                  v438 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                  if (!v438)
                    v438 = *(_QWORD *)(v601 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v438 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v601, v13);
                  }
                  else
                  {
                    v438 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                    if (!v438)
                      v438 = *(_QWORD *)(v601 + 16);
                  }
                  if (*((_DWORD *)v434 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v434, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_831;
                  }
                }
                if ((v438 & 0xFFFE000000000002) == 0)
                {
                  v601 = v438;
                  if (*(unsigned __int8 *)(v438 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_647;
              }
            }
LABEL_910:
            if (v402 == 2)
            {
              v439 = *(_QWORD *)(v601 + 8);
              if ((v439 & 1) != 0)
                v440 = (_DWORD *)(v601 + 16);
              else
                v440 = (_DWORD *)(v439 + 4);
              if (*v440 <= v401
                || (v441 = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, (uint64_t)v401, a4, a5, a6, a7, a8, v273), *((_DWORD *)v434 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v434, this, a3, a4, a5, a6, a7, a8))
              {
                v442 = 0;
              }
              else
              {
                v602 = (uint64_t (*)(unint64_t))v441;
                LODWORD(v604) = 10;
                v606 = 0;
                v442 = 1;
                BYTE1(v607[1]) = 1;
              }
              if (*((_DWORD *)v434 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v434, this, a3, a4, a5, a6, a7, a8))
              {
                goto LABEL_740;
              }
              if (v442)
              {
LABEL_921:
                if (BYTE1(v607[1]) == 1)
                {
                  IndexQuickly = (uint64_t)v602;
                  goto LABEL_647;
                }
                if (BYTE1(v607[1]) != 2)
                {
                  v580 = (uint64_t **)v13[7];
                  JSC::Identifier::from(v580, (unint64_t)v401, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)v614);
                  IndexQuickly = JSC::PropertySlot::customGetter((uint64_t)&v602, (JSC::VM *)v580, v614[0]);
                  v313 = v614[0];
                  v614[0] = 0;
                  if (v313)
                  {
                    if (*(_DWORD *)v313 == 2)
                      goto LABEL_670;
                    *(_DWORD *)v313 -= 2;
                  }
LABEL_647:
                  if (v609)
                  {
                    v52 = v608;
                    v53 = *(_DWORD *)(v608 + 4);
                    if (!v53)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1987B4CF4);
                    }
LABEL_91:
                    *(_DWORD *)(v52 + 4) = v53 - 1;
                  }
LABEL_92:
                  if (*(_DWORD *)v16 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                  }
                  else
                  {
                    *(_DWORD *)v16 -= 2;
                  }
                  return IndexQuickly;
                }
                v405 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v602, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
LABEL_813:
                IndexQuickly = v405;
                goto LABEL_647;
              }
            }
            v601 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v612, (unint64_t)v13);
            if (!v601)
              goto LABEL_740;
            v434 = v13[7];
            goto LABEL_897;
          }
          v599 = (JSC::JSGlobalObject *)v13;
          v22 = (JSC::Structure *)v601;
          v23 = (uint64_t *)((char *)v600 + 93080);
          v604 = 0xFFFFFFFF00000000;
          LOBYTE(v608) = 0;
          v609 = 0;
          v610 = 0;
          v611 = 0;
          v24 = v16 >> 4;
          v606 = 0;
          memset(v607, 0, 13);
          v605 = (JSC::Structure *)v11;
          v25 = 1;
          while (1)
          {
            if ((*((_BYTE *)v22 + 6) & 8) != 0)
            {
              v155 = *((unsigned __int8 *)v22 + 5);
              if (v155 != 26 && v155 != 36 && v22 != *((JSC::Structure **)v599 + 84))
              {
                if (v10)
                {
                  *(_WORD *)(v10 + 129) |= 4u;
                  if (*(_BYTE *)(v10 + 124))
                  {
                    --*(_BYTE *)(v10 + 124);
                  }
                  else
                  {
                    v257 = *(unsigned __int8 *)(v10 + 125);
                    if (v257 != 255)
                      *(_BYTE *)(v10 + 125) = ++v257;
                    if (xmmword_1ECF4C260 < v257)
                    {
                      *(_BYTE *)(v10 + 125) = 0;
                      v443 = *(unsigned __int8 *)(v10 + 126);
                      v444 = BYTE4(xmmword_1ECF4C260) << v443;
                      v445 = v444;
                      if (v444 == 255)
                        LOBYTE(v444) = -2;
                      if (v445 >> v443 == BYTE4(xmmword_1ECF4C260))
                        v446 = v444;
                      else
                        v446 = -2;
                      *(_BYTE *)(v10 + 124) = v446;
                      if (v443 != 255)
                        *(_BYTE *)(v10 + 126) = v443 + 1;
                      *(_BYTE *)(v10 + 127) = 0;
                    }
                    else if (*(_BYTE *)(v10 + 127))
                    {
                      --*(_BYTE *)(v10 + 127);
                    }
                    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), v10, 5, a4, a5, a6, a7, a8);
                  }
                }
                v156 = (JSC::VM *)*((_QWORD *)v599 + 7);
                while (1)
                {
                  v157 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
                  if ((*((_BYTE *)v22 + 6) & 8) != 0)
                  {
                    v497 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) + 0x68))(v22, v599, v16, &v602);
                    v498 = v497;
                    if (*((_DWORD *)v156 + 20))
                    {
                      v559 = JSC::VM::hasExceptionsAfterHandlingTraps(v156, this, a3, a4, a5, a6, a7, a8);
                      if (((v559 | v498) & 1) != 0)
                      {
                        v255 = !v559;
                        goto LABEL_520;
                      }
                    }
                    else if ((v497 & 1) != 0)
                    {
                      goto LABEL_795;
                    }
                    if (BYTE2(v607[1]) == 3)
                    {
                      if (BYTE4(v607[1]))
                        goto LABEL_1390;
                      v499 = *((unsigned __int8 *)v22 + 5);
                      if (v499 != 61)
                      {
LABEL_1039:
                        if ((v499 - 50) < 0xFFFFFFF5)
                          goto LABEL_302;
                        v500 = *(_DWORD *)(v16 + 16);
                        if ((v500 & 0x20) != 0)
                          goto LABEL_302;
                        v501 = *(unsigned int *)(v16 + 4);
                        if (!(_DWORD)v501)
                          goto LABEL_302;
                        v502 = *(unsigned __int8 **)(v16 + 8);
                        if ((v500 & 4) == 0)
                        {
                          v503 = *(unsigned __int16 *)v502;
                          if ((_DWORD)v501 == 1)
                            goto LABEL_1044;
                          if (v503 == 45)
                          {
                            v503 = *((unsigned __int16 *)v502 + 1);
                            goto LABEL_1105;
                          }
                          if ((v503 - 48) >= 0xA && ((_DWORD)v501 != 8 || v503 != 73))
                          {
LABEL_1154:
                            if ((_DWORD)v501 != 3 || v503 != 78)
                              goto LABEL_302;
                          }
LABEL_1117:
                          v10 = v10 & 0xFFFFFF0000000000 | v501 | ((unint64_t)((v500 >> 2) & 1) << 32);
                          JSC::jsToNumber(v502, v10);
                          WTF::numberToString(v614, v521);
                          if (WTF::equal(v16, (unint64_t)v614, v522))
                            goto LABEL_1390;
                          goto LABEL_302;
                        }
                        v503 = *v502;
                        if ((_DWORD)v501 == 1)
                        {
LABEL_1044:
                          if ((v503 - 48) < 0xA)
                            goto LABEL_1390;
                          goto LABEL_302;
                        }
                        if (v503 == 45)
                        {
                          v503 = v502[1];
LABEL_1105:
                          if ((v503 - 48) < 0xA)
                          {
                            if ((_DWORD)v501 == 2)
                              goto LABEL_1390;
                            goto LABEL_1117;
                          }
                          if ((_DWORD)v501 != 9)
                            goto LABEL_302;
                        }
                        else
                        {
                          if ((v503 - 48) < 0xA)
                            goto LABEL_1117;
                          if ((_DWORD)v501 != 8)
                            goto LABEL_1154;
                        }
                        if (v503 != 73)
                          goto LABEL_302;
                        goto LABEL_1117;
                      }
                    }
                    else
                    {
                      v499 = *((unsigned __int8 *)v22 + 5);
                      if (v499 != 61)
                        goto LABEL_1039;
                      if (BYTE2(v607[1]) == 1)
                        goto LABEL_1390;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v24)
                    {
                      if ((v24 & ~*(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x20)) == 0)
                      {
                        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)), v156, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                        if (v158)
                        {
                          v614[0] = (WTF::StringImpl *)v16;
                          v159 = JSC::PropertyTable::get(v158, (uint64_t *)v614);
                          a6 = v159;
                          if ((_DWORD)v159 != -1)
                          {
                            a5 = HIDWORD(v159);
                            if ((int)v159 <= 63)
                            {
                              v252 = (uint64_t)v22 + 16;
                              v253 = v159 << 32;
                            }
                            else
                            {
                              v252 = *((_QWORD *)v22 + 1) - 8;
                              v253 = 0x3F00000000 - (v159 << 32);
                            }
                            a4 = *(_QWORD *)(v252 + (v253 >> 29));
                            if ((a4 & 0xFFFE000000000002) != 0)
                              goto LABEL_519;
                            v254 = *(unsigned __int8 *)(a4 + 5);
                            if (v254 == 5)
                            {
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v22, (uint64_t)v156, (uint64_t)&v602, a4, SHIDWORD(v159), v159);
LABEL_795:
                              v255 = 1;
                            }
                            else
                            {
                              if (v254 != 6)
                              {
LABEL_519:
                                v602 = (uint64_t (*)(unint64_t))a4;
                                v606 = v22;
                                v604 = __PAIR64__(v159, HIDWORD(v159));
                                v255 = 1;
                                LOWORD(v607[1]) = 257;
                                goto LABEL_520;
                              }
                              v429 = *(_DWORD *)(v157 + 16) & 3;
                              v430 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v432 = *(int8x16_t ***)(a4 + 24);
                                v431 = *(_QWORD *)(a4 + 32);
                                v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v603 = v430;
                                LODWORD(v604) = HIDWORD(v159);
                                v606 = v22;
                                BYTE1(v607[1]) = 3;
                                v255 = 1;
                                if (v429 != 2)
                                  LOBYTE(v607[1]) = 1;
                                BYTE3(v607[1]) = 1;
                                v610 = v432;
                                v611 = v431;
                              }
                              else
                              {
                                v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v603 = v430;
                                LODWORD(v604) = HIDWORD(v159);
                                v606 = v22;
                                v255 = 1;
                                BYTE1(v607[1]) = 3;
                                if (v429 != 2)
                                  LOBYTE(v607[1]) = 1;
                              }
                            }
LABEL_520:
                            if (!*((_DWORD *)v600 + 20))
                            {
                              if (v255)
                                goto LABEL_522;
                              goto LABEL_160;
                            }
                            v515 = JSC::VM::hasExceptionsAfterHandlingTraps(v600, this, a3, a4, a5, a6, a7, a8);
                            if (v515)
                              IndexQuickly = 0;
                            else
                              IndexQuickly = 10;
                            if (!v515 && ((v255 ^ 1) & 1) == 0)
                            {
LABEL_522:
                              if (BYTE1(v607[1]) != 1)
                              {
                                if (BYTE1(v607[1]) == 2)
                                {
                                  v101 = v599;
LABEL_190:
                                  v102 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v602, v101, a3, a4, a5, a6, a7, a8);
                                }
                                else
                                {
                                  v102 = JSC::PropertySlot::customGetter((uint64_t)&v602, *((JSC::VM **)v599 + 7), (WTF::StringImpl *)v16);
                                }
                                goto LABEL_191;
                              }
LABEL_88:
                              IndexQuickly = (uint64_t)v602;
                            }
LABEL_89:
                            if (v609)
                            {
                              v52 = v608;
                              v53 = *(_DWORD *)(v608 + 4);
                              if (!v53)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1987B4064);
                              }
                              goto LABEL_91;
                            }
                            goto LABEL_92;
                          }
                        }
                      }
                    }
                    if ((*((_BYTE *)v22 + 6) & 0x20) != 0
                      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, v156, v16, (uint64_t)&v602) & 1) != 0)
                    {
                      goto LABEL_795;
                    }
                  }
LABEL_302:
                  if ((*(_WORD *)(v157 + 12) & 0x800) == 0)
                  {
                    v160 = *(_DWORD *)v22;
LABEL_304:
                    v161 = *(_QWORD *)(16 * (v160 & 0xFFFFFFFE) + 0x30);
                    if (!v161)
                      v161 = *((_QWORD *)v22 + 2);
                    goto LABEL_306;
                  }
                  v160 = *(_DWORD *)v22;
                  if (BYTE2(v607[1]) == 3)
                    goto LABEL_304;
                  v489 = 16 * (v160 & 0xFFFFFFFE);
                  if ((*(_WORD *)(v489 + 12) & 0x800) != 0)
                  {
                    v161 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(v489 + 76)
                                                                                              + 0xB0))(v22, v599);
                  }
                  else
                  {
                    v161 = *(_QWORD *)(v489 + 48);
                    if (!v161)
                      v161 = *((_QWORD *)v22 + 2);
                  }
                  if (*((_DWORD *)v156 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v156, this, a3, a4, a5, a6, a7, a8))
                  {
LABEL_1390:
                    v255 = 0;
                    goto LABEL_520;
                  }
LABEL_306:
                  if ((v161 & 0xFFFE000000000002) == 0)
                  {
                    v22 = (JSC::Structure *)v161;
                    if (*(unsigned __int8 *)(v161 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_1390;
                }
              }
            }
            if (!(_DWORD)v24
              || (v26 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE), (v24 & ~*(_DWORD *)(v26 + 0x20)) != 0)
              || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)), v600, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v27)|| (v614[0] = (WTF::StringImpl *)v16, v28 = JSC::PropertyTable::get(v27, (uint64_t *)v614), a6 = v28, (_DWORD)v28 == -1))
            {
              if ((*((_BYTE *)v22 + 6) & 0x20) != 0)
                OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, v600, v16, (uint64_t)&v602);
              else
                OwnStaticPropertySlot = 0;
            }
            else
            {
              if ((int)v28 <= 63)
              {
                v29 = (uint64_t)v22 + 16;
                v30 = v28 << 32;
              }
              else
              {
                v29 = *((_QWORD *)v22 + 1) - 8;
                v30 = 0x3F00000000 - (v28 << 32);
              }
              a5 = HIDWORD(v28);
              a4 = *(_QWORD *)(v29 + (v30 >> 29));
              if ((a4 & 0xFFFE000000000002) != 0)
                goto LABEL_27;
              v31 = *(unsigned __int8 *)(a4 + 5);
              if (v31 == 5)
              {
                JSC::JSObject::fillGetterPropertySlot((unsigned int *)v22, (uint64_t)v600, (uint64_t)&v602, a4, SHIDWORD(v28), v28);
                OwnStaticPropertySlot = 1;
                goto LABEL_30;
              }
              if (v31 == 6)
              {
                v162 = *(_DWORD *)(v26 + 16) & 3;
                v163 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v165 = *(int8x16_t ***)(a4 + 24);
                  v164 = *(_QWORD *)(a4 + 32);
                  v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                  v603 = v163;
                  LODWORD(v604) = HIDWORD(v28);
                  v606 = v22;
                  BYTE1(v607[1]) = 3;
                  OwnStaticPropertySlot = 1;
                  if (v162 != 2)
                    LOBYTE(v607[1]) = 1;
                  BYTE3(v607[1]) = 1;
                  v610 = v165;
                  v611 = v164;
                }
                else
                {
                  v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
                  v603 = v163;
                  LODWORD(v604) = HIDWORD(v28);
                  v606 = v22;
                  OwnStaticPropertySlot = 1;
                  BYTE1(v607[1]) = 3;
                  if (v162 != 2)
                    LOBYTE(v607[1]) = 1;
                }
              }
              else
              {
LABEL_27:
                v602 = (uint64_t (*)(unint64_t))a4;
                v606 = v22;
                v604 = __PAIR64__(v28, HIDWORD(v28));
                OwnStaticPropertySlot = 1;
                LOWORD(v607[1]) = 257;
              }
            }
LABEL_30:
            if ((*(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x10) & 3) == 2
              || (v33 = *(unsigned __int16 *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC), (v33 & 8) != 0))
            {
              v34 = 0;
            }
            else if ((v33 & 0x10) != 0)
            {
              v34 = (v33 >> 5) & 1;
            }
            else
            {
              v34 = 1;
            }
            v35 = v25 & v34;
            if (OwnStaticPropertySlot)
            {
              if (!v35 || BYTE1(v607[1]) != 1 || LOBYTE(v607[1]) != 1 || SHIDWORD(v604) >= 0x10000)
                goto LABEL_185;
              a4 = (uint64_t)v606;
              this = *(unsigned int *)v601;
              if (v606 == (JSC::Structure *)v601 || (v100 = *(_DWORD *)((16 * this) | 0x10), (v100 & 3) == 0))
              {
                if ((*v23 & 1) != 0)
                  v51 = 0;
                else
                  v51 = *v23;
                JSC::MegamorphicCache::initAsHit(v51, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v16, (uint64_t)v606, WORD2(v604), v606 == (JSC::Structure *)v601, a7, a8);
              }
              else if ((v100 & 0x800000) != 0)
              {
LABEL_185:
                if (v10)
                {
                  *(_WORD *)(v10 + 129) |= 4u;
                  if (*(_BYTE *)(v10 + 124))
                  {
                    --*(_BYTE *)(v10 + 124);
                  }
                  else
                  {
                    v219 = *(unsigned __int8 *)(v10 + 125);
                    if (v219 != 255)
                      *(_BYTE *)(v10 + 125) = ++v219;
                    if (xmmword_1ECF4C260 < v219)
                    {
                      *(_BYTE *)(v10 + 125) = 0;
                      v241 = *(unsigned __int8 *)(v10 + 126);
                      v242 = BYTE4(xmmword_1ECF4C260) << v241;
                      v243 = v242;
                      if (v242 == 255)
                        LOBYTE(v242) = -2;
                      if (v243 >> v241 == BYTE4(xmmword_1ECF4C260))
                        v244 = v242;
                      else
                        v244 = -2;
                      *(_BYTE *)(v10 + 124) = v244;
                      if (v241 != 255)
                        *(_BYTE *)(v10 + 126) = v241 + 1;
                      *(_BYTE *)(v10 + 127) = 0;
                    }
                    else if (*(_BYTE *)(v10 + 127))
                    {
                      --*(_BYTE *)(v10 + 127);
                    }
                    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), v10, 5, a4, a5, a6, a7, a8);
                  }
                }
              }
              if (BYTE1(v607[1]) == 1)
                goto LABEL_88;
              if (BYTE1(v607[1]) == 2)
              {
                v101 = v599;
                goto LABEL_190;
              }
              v149 = v606;
              v150 = *(_QWORD *)(16 * (*(_DWORD *)v606 & 0xFFFFFFFE) + 0x28);
              if ((v604 & 0x20) != 0)
                v149 = v605;
              if (BYTE3(v607[1]) != 1)
                goto LABEL_285;
              if (((unint64_t)v149 & 0xFFFE000000000002) != 0)
                goto LABEL_530;
              v151 = *(unsigned int *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x4C);
              v152 = *(_DWORD *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x4C) != 0;
              if ((_DWORD)v151)
              {
                v153 = 16 * v151;
                if (v610 != (int8x16_t **)v153)
                {
                  do
                  {
                    v153 = *(_QWORD *)(v153 + 16);
                    v152 = v153 != 0;
                  }
                  while ((int8x16_t **)v153 != v610 && v153 != 0);
                }
              }
              if (!v152)
              {
LABEL_530:
                v614[0] = *((WTF::StringImpl **)v599 + 7);
                v102 = JSC::throwDOMAttributeGetterTypeError(v150, v614, v610, (WTF::StringImpl *)v16);
              }
              else
              {
LABEL_285:
                v102 = v602(v150);
              }
LABEL_191:
              IndexQuickly = v102;
              goto LABEL_89;
            }
            v36 = *(JSC::Structure **)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
            if ((*(_WORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v36 == 0)
              v25 = 0;
            else
              v25 = v35;
            if (!v36)
              v36 = (JSC::Structure *)*((_QWORD *)v22 + 2);
            if (((unint64_t)v36 & 0xFFFE000000000002) == 0)
            {
              v22 = v36;
              if (*((unsigned __int8 *)v36 + 5) > 0x16u)
                continue;
            }
            if (v25)
            {
              this = *(unsigned int *)v601;
              v85 = *(_DWORD *)((16 * this) | 0x10);
              if ((v85 & 3) == 0)
              {
                if ((*v23 & 1) != 0)
                  v86 = 0;
                else
                  v86 = *v23;
                JSC::MegamorphicCache::initAsMiss(v86, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v16, a4, a5, a6, a7, a8);
                goto LABEL_160;
              }
              if ((v85 & 0x800000) == 0)
                goto LABEL_160;
            }
            if (v10)
            {
              *(_WORD *)(v10 + 129) |= 4u;
              if (*(_BYTE *)(v10 + 124))
              {
                --*(_BYTE *)(v10 + 124);
              }
              else
              {
                v211 = *(unsigned __int8 *)(v10 + 125);
                if (v211 != 255)
                  *(_BYTE *)(v10 + 125) = ++v211;
                if (xmmword_1ECF4C260 < v211)
                {
                  *(_BYTE *)(v10 + 125) = 0;
                  v230 = *(unsigned __int8 *)(v10 + 126);
                  v231 = BYTE4(xmmword_1ECF4C260) << v230;
                  v232 = v231;
                  if (v231 == 255)
                    LOBYTE(v231) = -2;
                  if (v232 >> v230 == BYTE4(xmmword_1ECF4C260))
                    v233 = v231;
                  else
                    v233 = -2;
                  *(_BYTE *)(v10 + 124) = v233;
                  if (v230 != 255)
                    *(_BYTE *)(v10 + 126) = v230 + 1;
                  *(_BYTE *)(v10 + 127) = 0;
                }
                else if (*(_BYTE *)(v10 + 127))
                {
                  --*(_BYTE *)(v10 + 127);
                }
                JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), v10, 5, a4, a5, a6, a7, a8);
              }
            }
LABEL_160:
            IndexQuickly = 10;
            goto LABEL_89;
          }
        }
      }
    }
  }
  *(_WORD *)(a4 + 129) |= 4u;
  if (*(_BYTE *)(a4 + 124))
  {
    --*(_BYTE *)(a4 + 124);
  }
  else
  {
    v87 = *(unsigned __int8 *)(a4 + 125);
    if (v87 != 255)
      *(_BYTE *)(a4 + 125) = ++v87;
    if (xmmword_1ECF4C260 < v87)
    {
      *(_BYTE *)(a4 + 125) = 0;
      v191 = *(unsigned __int8 *)(a4 + 126);
      v192 = BYTE4(xmmword_1ECF4C260) << v191;
      v193 = v192;
      if (v192 == 255)
        LOBYTE(v192) = -2;
      if (v193 >> v191 == BYTE4(xmmword_1ECF4C260))
        v194 = v192;
      else
        v194 = -2;
      *(_BYTE *)(a4 + 124) = v194;
      if (v191 != 255)
        *(_BYTE *)(a4 + 126) = v191 + 1;
      *(_BYTE *)(a4 + 127) = 0;
    }
    else if (*(_BYTE *)(a4 + 127))
    {
      --*(_BYTE *)(a4 + 127);
    }
    JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v14 + 16), a4, 5, a4, a5, a6, a7, a8);
  }
  v612 = v601;
  v38 = v13[7];
  if (((v12 | v601) & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v39 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
    if (((*(_DWORD *)(v39 + 0x10) | *(unsigned __int8 *)(v39 + 0xA)) & 8) == 0)
    {
      v16 = *(_QWORD *)(v12 + 8);
      if ((v16 & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v13);
      }
      else
      {
        if ((*(_BYTE *)(v16 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v16 += 2;
          goto LABEL_56;
        }
        WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v12 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v614);
      }
      v16 = (unint64_t)v614[0];
LABEL_56:
      if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, this, a3, a4, a5, a6, a7, a8))
      {
        IndexQuickly = 0;
        if (v16)
          goto LABEL_92;
        return IndexQuickly;
      }
      if (v16)
      {
        if ((v16 >> 4))
        {
          if (((v16 >> 4) & ~*(_DWORD *)(v39 + 32)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v39, v38, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v40)
            {
              v614[0] = (WTF::StringImpl *)v16;
              v41 = JSC::PropertyTable::get(v40, (uint64_t *)v614);
              if ((_DWORD)v41 != -1)
              {
                if ((int)v41 <= 63)
                {
                  v42 = v601 + 16;
                  v43 = v41 << 32;
                }
                else
                {
                  v42 = *(_QWORD *)(v601 + 8) - 8;
                  v43 = 0x3F00000000 - (v41 << 32);
                }
                IndexQuickly = *(_QWORD *)(v42 + (v43 >> 29));
                if (IndexQuickly)
                  goto LABEL_92;
              }
            }
          }
        }
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v604 = 0xFFFFFFFF00000000;
  LOBYTE(v608) = 0;
  v609 = 0;
  v610 = 0;
  v611 = 0;
  v606 = 0;
  memset(v607, 0, 13);
  v605 = (JSC::Structure *)v11;
  if (v12 >= 0xFFFE000000000000 && (v12 & 0x80000000) == 0)
  {
    v45 = v12;
    goto LABEL_70;
  }
  if (v12 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v12;
    if (v12 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v12 - 0x2000000000000;
    v45 = *(double *)a9.i64;
    if (*(double *)a9.i64 != -1 && *(double *)a9.i64 == (double)v45)
    {
LABEL_70:
      v46 = v45;
      if (v15)
        goto LABEL_257;
      v47 = *(unsigned __int8 *)(v601 + 5);
      if (v47 == 2)
      {
        v48 = *(_QWORD *)(v601 + 8);
        if ((v48 & 1) != 0)
          v49 = (_DWORD *)(v601 + 16);
        else
          v49 = (_DWORD *)(v48 + 4);
        if (*v49 > v46)
        {
          v50 = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, v46, a4, a5, a6, a7, a8, a9);
LABEL_77:
          IndexQuickly = v50;
          goto LABEL_180;
        }
        if (v9)
LABEL_233:
          *(_DWORD *)(v9 + 4) |= 2u;
      }
      else
      {
        if (v47 <= 0x16)
        {
          v128 = v13[7];
          goto LABEL_248;
        }
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v601, v46, v9);
        if (IndexQuickly)
          goto LABEL_180;
        if ((*(_BYTE *)(v601 + 4) & 0xF) != 9
          || *(_DWORD *)(*(_QWORD *)(v601 + 8) - 8) <= v46
          || ((v110 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x28),
               v111 = *(unsigned __int8 *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 8),
               (v111 & 0x10) != 0)
            ? (v112 = ((v111 & 0xE) + 10) >> 1)
            : (v112 = (v111 >> 1) & 7),
              (v113 = *(_DWORD *)(v110 + 4 * v112 + 852)) != 0 ? (v114 = 16 * (v113 & 0xFFFFFFFE)) : (v114 = 0),
              v114 != 16 * (*(_DWORD *)v601 & 0xFFFFFFFE)
           || ((v195 = *(_QWORD *)(v110 + 2304), (v195 & 1) != 0)
             ? (v196 = (v195 >> 1) & 3)
             : (v196 = *(unsigned __int8 *)(v195 + 4)),
               v196 == 2)))
        {
          v115 = JSC::CommonSlowPaths::canAccessArgumentIndexQuickly((JSC::CommonSlowPaths *)v601, (JSC::JSObject *)v46);
          if (v9)
          {
            if (!v115)
              goto LABEL_233;
          }
        }
      }
      v47 = *(unsigned __int8 *)(v601 + 5);
      v128 = v13[7];
      if (v47 > 0x16)
      {
LABEL_235:
        IndexQuickly = 10;
        while (1)
        {
          v129 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
          v131 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v129 + 0x4C) + 0x70))();
          if (*((_DWORD *)v128 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v128, v130, a3, a4, a5, a6, a7, a8))
            goto LABEL_358;
          if ((v131 & 1) != 0)
            goto LABEL_259;
          if (BYTE2(v607[1]) == 3)
          {
            if (BYTE4(v607[1]))
              goto LABEL_358;
            v132 = *(unsigned __int8 *)(v601 + 5);
            if (v132 == 61)
              goto LABEL_241;
          }
          else
          {
            v132 = *(unsigned __int8 *)(v601 + 5);
            if (v132 == 61)
            {
              if (BYTE2(v607[1]) == 1)
                goto LABEL_358;
              goto LABEL_241;
            }
          }
          if ((v132 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, v130, a3, a4, a5, a6, a7, a8) <= v46)
          {
            goto LABEL_358;
          }
LABEL_241:
          if ((*(_WORD *)(v129 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
          {
            v133 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
            if (!v133)
              v133 = *(_QWORD *)(v601 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v133 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v601 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0xB0))(v601, v13);
            }
            else
            {
              v133 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
              if (!v133)
                v133 = *(_QWORD *)(v601 + 16);
            }
            if (*((_DWORD *)v128 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v128, v130, a3, a4, a5, a6, a7, a8))
              goto LABEL_358;
          }
          if ((v133 & 0xFFFE000000000002) == 0)
          {
            v601 = v133;
            if (*(unsigned __int8 *)(v133 + 5) > 0x16u)
              continue;
          }
          goto LABEL_180;
        }
      }
LABEL_248:
      if (v47 == 2)
      {
        v134 = *(_QWORD *)(v601 + 8);
        if ((v134 & 1) != 0)
          v135 = (_DWORD *)(v601 + 16);
        else
          v135 = (_DWORD *)(v134 + 4);
        if (*v135 <= v46
          || (v136 = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, v46, a4, a5, a6, a7, a8, a9), *((_DWORD *)v128 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v128, this, a3, a4, a5, a6, a7, a8))
        {
          v137 = 0;
        }
        else
        {
          v602 = (uint64_t (*)(unint64_t))v136;
          LODWORD(v604) = 10;
          v606 = 0;
          v137 = 1;
          BYTE1(v607[1]) = 1;
        }
        if (*((_DWORD *)v128 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v128, this, a3, a4, a5, a6, a7, a8))
          goto LABEL_401;
        if (v137)
        {
LABEL_259:
          if (BYTE1(v607[1]) == 1)
          {
            IndexQuickly = (uint64_t)v602;
            goto LABEL_180;
          }
          if (BYTE1(v607[1]) != 2)
          {
            v258 = (uint64_t **)v13[7];
            JSC::Identifier::from(v258, v46, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)v614);
            IndexQuickly = JSC::PropertySlot::customGetter((uint64_t)&v602, (JSC::VM *)v258, v614[0]);
            v119 = v614[0];
            v614[0] = 0;
            if (!v119)
              goto LABEL_180;
            if (*(_DWORD *)v119 != 2)
            {
              *(_DWORD *)v119 -= 2;
              goto LABEL_180;
            }
            goto LABEL_231;
          }
          v50 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v602, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
          goto LABEL_77;
        }
      }
LABEL_257:
      v601 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v612, (unint64_t)v13);
      if (v601)
      {
        v128 = v13[7];
        goto LABEL_235;
      }
LABEL_401:
      IndexQuickly = 0;
      goto LABEL_180;
    }
    if (!v15)
    {
      if (v9)
      {
        *(_DWORD *)(v9 + 4) |= 2u;
        if (v12 == 0xFFFE0000FFFFFFFFLL && v601 && (*(_BYTE *)(v601 + 5) & 0xFE) == 0x24)
        {
          v177 = *(_QWORD **)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x28);
          v178 = v177[288];
          v179 = (v178 & 1) != 0 ? (v178 >> 1) & 3 : *(unsigned __int8 *)(v178 + 4);
          if (v179 != 2)
          {
            v180 = v177[287];
            v181 = (v180 & 1) != 0 ? (v180 >> 1) & 3 : *(unsigned __int8 *)(v180 + 4);
            if (v181 != 2)
            {
              v182 = *(unsigned __int8 *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 8);
              v183 = (v182 & 0x10) != 0 ? ((v182 & 0xE) + 10) >> 1 : (v182 >> 1) & 7;
              v184 = *((_DWORD *)v177 + v183 + 213);
              v185 = v184 ? 16 * (v184 & 0xFFFFFFFE) : 0;
              if (v185 == 16 * (*(_DWORD *)v601 & 0xFFFFFFFE))
                goto LABEL_358;
              v415 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
              if (!v415)
                v415 = *(_QWORD *)(v601 + 16);
              if (v415 == v177[84] && !*(_DWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x20))
                goto LABEL_358;
            }
          }
        }
      }
    }
  }
  if ((v601 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v245 = v13[7];
    v246 = JSC::createNotAnObjectError((unint64_t)v13, v601);
    JSC::VM::throwException(v245, (JSC::JSGlobalObject *)v13, v246, v247, v248, v249, v250, v251);
  }
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, this, a3, a4, a5, a6, a7, a8))
    goto LABEL_401;
  v60 = v13[7];
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v12 + 5) == 2)
    {
      v61 = *(_QWORD *)(v12 + 8);
      if ((v61 & 1) == 0)
      {
        if ((*(_BYTE *)(v61 + 16) & 0x10) == 0)
        {
          if (*((_QWORD *)v60 + 8096) != v61)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v60 + 8096, *(WTF::AtomStringImpl **)(v12 + 8), a3, a4, a5, a6, a7, a8);
            v186 = *(WTF::StringImpl **)(v12 + 8);
            if (v186)
            {
              if ((*((_BYTE *)v186 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v186 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v186, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v614);
                v186 = v614[0];
              }
            }
            v187 = (WTF::StringImpl *)*((_QWORD *)v60 + 8097);
            *((_QWORD *)v60 + 8097) = v186;
            if (v187)
            {
              if (*(_DWORD *)v187 == 2)
              {
                WTF::StringImpl::~StringImpl(v187, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
              }
              else
              {
                *(_DWORD *)v187 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
          {
            v188 = (WTF::StringImpl *)*((_QWORD *)v60 + 8097);
            *(_DWORD *)v188 += 2;
            v614[0] = v188;
            __dmb(0xAu);
            v189 = *(WTF::StringImpl **)(v12 + 8);
            *(WTF::StringImpl **)(v12 + 8) = v614[0];
            v614[0] = v189;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v60 + 192, (unint64_t)v614);
            v190 = v614[0];
            v614[0] = 0;
            if (v190)
            {
              if (*(_DWORD *)v190 == 2)
              {
                WTF::StringImpl::~StringImpl(v190, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
              }
              else
              {
                *(_DWORD *)v190 -= 2;
              }
            }
          }
          v61 = *((_QWORD *)v60 + 8097);
        }
        goto LABEL_114;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v13);
      if (!*((_DWORD *)v60 + 20))
        goto LABEL_314;
      v228 = v60;
      goto LABEL_466;
    }
    v12 = JSC::JSCell::toPrimitive(v12, v13, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v613 = (unsigned __int8 *)v12;
  if (*((_DWORD *)v60 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, this, a3, a4, a5, a6, a7, a8))
    {
      v61 = *(_QWORD *)(*((_QWORD *)v60 + 5244) + 8);
      if (v61)
      {
LABEL_114:
        v62 = *(_DWORD *)v61 + 2;
LABEL_115:
        *(_DWORD *)v61 = v62;
        goto LABEL_116;
      }
      goto LABEL_116;
    }
    v12 = (unint64_t)v613;
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v457 = *(unsigned __int8 *)(v12 + 5);
    if (v457 == 2)
      goto LABEL_976;
    if (v457 == 4)
    {
      v61 = *(_QWORD *)(v12 + 8);
      v464 = *(_DWORD *)v61;
      *(_DWORD *)v61 += 4;
      v62 = v464 + 2;
      if (v62)
        goto LABEL_115;
      v166 = (WTF::StringImpl *)v61;
LABEL_992:
      WTF::StringImpl::~StringImpl(v166, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v465, v466, v467, v468, v469, v470, v471, v472);
      goto LABEL_116;
    }
  }
  v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v613, (uint64_t)v13, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_976:
  if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, this, a3, a4, a5, a6, a7, a8))
  {
    v61 = 0;
    goto LABEL_116;
  }
  v61 = *(_QWORD *)(v12 + 8);
  v458 = v13[7];
  if ((v61 & 1) == 0)
  {
    if ((*(_BYTE *)(v61 + 16) & 0x10) == 0)
    {
      if (*((_QWORD *)v458 + 8096) != v61)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v458 + 8096, *(WTF::AtomStringImpl **)(v12 + 8), a3, a4, a5, a6, a7, a8);
        v459 = *(WTF::StringImpl **)(v12 + 8);
        if (v459)
        {
          if ((*((_BYTE *)v459 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v459 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v459, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v614);
            v459 = v614[0];
          }
        }
        v460 = (WTF::StringImpl *)*((_QWORD *)v458 + 8097);
        *((_QWORD *)v458 + 8097) = v459;
        if (v460)
        {
          if (*(_DWORD *)v460 == 2)
          {
            WTF::StringImpl::~StringImpl(v460, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v481, v482, v483, v484, v485, v486, v487, v488);
          }
          else
          {
            *(_DWORD *)v460 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v461 = (WTF::StringImpl *)*((_QWORD *)v458 + 8097);
        *(_DWORD *)v461 += 2;
        v614[0] = v461;
        __dmb(0xAu);
        v462 = *(WTF::StringImpl **)(v12 + 8);
        *(WTF::StringImpl **)(v12 + 8) = v614[0];
        v614[0] = v462;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v458 + 192, (unint64_t)v614);
        v463 = v614[0];
        v614[0] = 0;
        if (v463)
        {
          if (*(_DWORD *)v463 == 2)
          {
            WTF::StringImpl::~StringImpl(v463, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v473, v474, v475, v476, v477, v478, v479, v480);
          }
          else
          {
            *(_DWORD *)v463 -= 2;
          }
        }
      }
      v61 = *((_QWORD *)v458 + 8097);
    }
    goto LABEL_114;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)v13);
  if (!*((_DWORD *)v458 + 20))
  {
LABEL_314:
    v61 = (unint64_t)v614[0];
    if (!v614[0])
      goto LABEL_116;
    *(_DWORD *)v614[0] += 2;
    v614[0] = 0;
    v166 = (WTF::StringImpl *)v61;
LABEL_316:
    if (*(_DWORD *)v166 != 2)
    {
      *(_DWORD *)v166 -= 2;
      goto LABEL_116;
    }
    goto LABEL_992;
  }
  v228 = v458;
LABEL_466:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v228, this, a3, a4, a5, a6, a7, a8))
    goto LABEL_314;
  v61 = 0;
  v166 = v614[0];
  v614[0] = 0;
  if (v166)
    goto LABEL_316;
LABEL_116:
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, this, a3, a4, a5, a6, a7, a8))
  {
    IndexQuickly = 0;
    goto LABEL_177;
  }
  if (!v15)
  {
    v63 = v13[7];
    v64 = *(unsigned __int8 *)(v601 + 5);
    if (v64 > 0x16)
      goto LABEL_119;
    if (v64 == 2)
    {
      if (*(_QWORD *)(*((_QWORD *)v63 + 5244) + 1768) == v61)
      {
        v490 = *(_QWORD *)(v601 + 8);
        if ((v490 & 1) != 0)
          v491 = (unsigned int *)(v601 + 16);
        else
          v491 = (unsigned int *)(v490 + 4);
        v492 = *v491;
        if ((v492 & 0x80000000) != 0)
          v493 = COERCE__INT64((double)v492) + 0x2000000000000;
        else
          v493 = v492 | 0xFFFE000000000000;
        v494 = 14;
        goto LABEL_1022;
      }
      if (!v61 || (v508 = *(_DWORD *)(v61 + 16), (v508 & 0x20) != 0))
      {
LABEL_1065:
        v495 = 0;
LABEL_1023:
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, this, a3, a4, a5, a6, a7, a8))
          goto LABEL_201;
        if ((v495 & 1) != 0)
          goto LABEL_175;
        goto LABEL_1025;
      }
      v509 = *(_WORD **)(v61 + 8);
      v510 = *(unsigned int *)(v61 + 4);
      if ((v508 & 4) == 0)
      {
        if ((_DWORD)v510)
        {
          v511 = (unsigned __int16)*v509 - 48;
          if (v511 <= 9 && (*v509 != 48 || v510 <= 1))
          {
            v516 = v509 + 1;
            v517 = v510 - 1;
            while (v517)
            {
              if (v511 > 0x19999999)
                goto LABEL_1061;
              v518 = *v516 - 48;
              if (v518 > 9)
                goto LABEL_1061;
              v512 = 0;
              LOBYTE(v510) = 0;
              v513 = 0;
              v59 = __CFADD__(v518, 10 * v511);
              v511 = v518 + 10 * v511;
              ++v516;
              --v517;
              if (v59)
                goto LABEL_1063;
            }
            v513 = v511 & 0xFFFFFF00;
            v512 = 0x100000000;
            if (v511 == -1)
            {
              v512 = 0;
              LOBYTE(v510) = 0;
            }
            else
            {
              LOBYTE(v510) = v511;
            }
            if (v511 == -1)
              v513 = 0;
            goto LABEL_1063;
          }
LABEL_1061:
          v512 = 0;
          LOBYTE(v510) = 0;
        }
        else
        {
          v512 = 0;
        }
        v513 = 0;
LABEL_1063:
        v514 = v510;
LABEL_1064:
        if ((v512 & 0x100000000) != 0)
        {
          a3 = v513 | v514;
          v578 = *(_QWORD *)(v601 + 8);
          v579 = (_DWORD *)((v578 & 1) != 0 ? v601 + 16 : v578 + 4);
          if (*v579 > a3)
          {
            v493 = JSC::JSString::getIndex((JSC::JSString *)v601, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v63 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v63, this, a3, a4, a5, a6, a7, a8))
            {
              v494 = 10;
LABEL_1022:
              v602 = (uint64_t (*)(unint64_t))v493;
              LODWORD(v604) = v494;
              v606 = 0;
              v495 = 1;
              BYTE1(v607[1]) = 1;
              goto LABEL_1023;
            }
          }
        }
        goto LABEL_1065;
      }
      if ((_DWORD)v510)
      {
        v591 = *(unsigned __int8 *)v509 - 48;
        if (v591 <= 9 && (v510 < 2 || *(_BYTE *)v509 != 48))
        {
          v592 = v510 - 1;
          v593 = (unsigned __int8 *)v509 + 1;
          while (v592)
          {
            if (v591 > 0x19999999)
              goto LABEL_1412;
            v594 = *v593 - 48;
            if (v594 > 9)
              goto LABEL_1412;
            v514 = 0;
            LOBYTE(v510) = 0;
            v512 = 0;
            v59 = __CFADD__(v594, 10 * v591);
            v591 = v594 + 10 * v591;
            --v592;
            ++v593;
            if (v59)
              goto LABEL_1436;
          }
          if (v591 == -1)
            v514 = 0;
          else
            v514 = v591 & 0xFFFFFF00;
          if (v591 == -1)
            LOBYTE(v510) = 0;
          else
            LOBYTE(v510) = v591;
          if (v591 == -1)
            v512 = 0;
          else
            v512 = 0x100000000;
          goto LABEL_1436;
        }
LABEL_1412:
        v514 = 0;
        LOBYTE(v510) = 0;
      }
      else
      {
        v514 = 0;
      }
      v512 = 0;
LABEL_1436:
      v513 = v510;
      goto LABEL_1064;
    }
  }
LABEL_1025:
  v601 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v612, (unint64_t)v13);
  if (!v601)
    goto LABEL_201;
  v63 = v13[7];
LABEL_119:
  v65 = v601;
  v66 = (_BYTE *)(v601 + 6);
  v67 = v61 >> 4;
  if ((*(_BYTE *)(v601 + 6) & 8) == 0)
  {
    v12 = v601;
    while (1)
    {
      v68 = *(_DWORD *)v12 & 0xFFFFFFFE;
      v69 = 16 * v68;
      if ((_DWORD)v67)
      {
        if ((v67 & ~*(_DWORD *)(16 * v68 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v69, v63, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v70)
          {
            v614[0] = (WTF::StringImpl *)v61;
            v71 = JSC::PropertyTable::get(v70, (uint64_t *)v614);
            a6 = v71;
            if ((_DWORD)v71 != -1)
              break;
          }
        }
      }
      if ((*v66 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v12, v63, v61, (uint64_t)&v602) & 1) != 0)
      {
        goto LABEL_175;
      }
      v65 = *(_QWORD *)(v69 + 48);
      if (!v65)
        v65 = *(_QWORD *)(v12 + 16);
      if ((v65 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v65 + 5) < 0x17u)
      {
        if (v61)
        {
          v103 = *(_DWORD *)(v61 + 16);
          if ((v103 & 0x20) != 0)
          {
LABEL_546:
            IndexQuickly = 10;
            goto LABEL_178;
          }
          v104 = *(_WORD **)(v61 + 8);
          v105 = *(unsigned int *)(v61 + 4);
          if ((v103 & 4) == 0)
          {
            if ((_DWORD)v105)
            {
              v106 = (unsigned __int16)*v104 - 48;
              if (v106 <= 9 && (*v104 != 48 || v105 <= 1))
              {
                v116 = v104 + 1;
                v117 = v105 - 1;
                while (v117)
                {
                  if (v106 > 0x19999999)
                    goto LABEL_197;
                  v118 = *v116 - 48;
                  if (v118 > 9)
                    goto LABEL_197;
                  v107 = 0;
                  LOBYTE(v105) = 0;
                  v108 = 0;
                  v59 = __CFADD__(v118, 10 * v106);
                  v106 = v118 + 10 * v106;
                  ++v116;
                  --v117;
                  if (v59)
                    goto LABEL_199;
                }
                v108 = v106 & 0xFFFFFF00;
                v107 = 0x100000000;
                if (v106 == -1)
                {
                  v107 = 0;
                  LOBYTE(v105) = 0;
                }
                else
                {
                  LOBYTE(v105) = v106;
                }
                if (v106 == -1)
                  v108 = 0;
LABEL_199:
                v109 = v105;
LABEL_200:
                if ((v107 & 0x100000000) == 0)
                {
LABEL_201:
                  IndexQuickly = 10;
                  goto LABEL_177;
                }
                v167 = v108 | v109;
                v168 = v13[7];
                IndexQuickly = 10;
                while (2)
                {
                  v169 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
                  v170 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v169 + 0x4C) + 0x70))();
                  if (*((_DWORD *)v168 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v168, this, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_201;
                  }
                  if ((v170 & 1) != 0)
                    goto LABEL_175;
                  if (BYTE2(v607[1]) == 3)
                  {
                    if (BYTE4(v607[1]))
                      goto LABEL_201;
                    v171 = *(unsigned __int8 *)(v601 + 5);
                    if (v171 != 61)
                      goto LABEL_323;
                  }
                  else
                  {
                    v171 = *(unsigned __int8 *)(v601 + 5);
                    if (v171 == 61)
                    {
                      if (BYTE2(v607[1]) == 1)
                        goto LABEL_201;
                    }
                    else
                    {
LABEL_323:
                      if ((v171 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, this, a3, a4, a5, a6, a7, a8) <= v167)
                      {
                        goto LABEL_201;
                      }
                    }
                  }
                  if ((*(_WORD *)(v169 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
                  {
                    v172 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                    if (!v172)
                      v172 = *(_QWORD *)(v601 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v172 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v601, v13);
                    }
                    else
                    {
                      v172 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
                      if (!v172)
                        v172 = *(_QWORD *)(v601 + 16);
                    }
                    if (*((_DWORD *)v168 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v168, this, a3, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_201;
                    }
                  }
                  if ((v172 & 0xFFFE000000000002) != 0)
                    goto LABEL_177;
                  v601 = v172;
                  if (*(unsigned __int8 *)(v172 + 5) <= 0x16u)
                    goto LABEL_177;
                  continue;
                }
              }
LABEL_197:
              v107 = 0;
              LOBYTE(v105) = 0;
            }
            else
            {
              v107 = 0;
            }
            v108 = 0;
            goto LABEL_199;
          }
          if ((_DWORD)v105)
          {
            v433 = *(unsigned __int8 *)v104 - 48;
            if (v433 <= 9 && (v105 < 2 || *(_BYTE *)v104 != 48))
            {
              v454 = v105 - 1;
              v455 = (unsigned __int8 *)v104 + 1;
              while (v454)
              {
                if (v433 > 0x19999999)
                  goto LABEL_890;
                v456 = *v455 - 48;
                if (v456 > 9)
                  goto LABEL_890;
                v109 = 0;
                LOBYTE(v105) = 0;
                v107 = 0;
                v59 = __CFADD__(v456, 10 * v433);
                v433 = v456 + 10 * v433;
                --v454;
                ++v455;
                if (v59)
                  goto LABEL_892;
              }
              if (v433 == -1)
                v109 = 0;
              else
                v109 = v433 & 0xFFFFFF00;
              if (v433 == -1)
                LOBYTE(v105) = 0;
              else
                LOBYTE(v105) = v433;
              if (v433 == -1)
                v107 = 0;
              else
                v107 = 0x100000000;
              goto LABEL_892;
            }
LABEL_890:
            v109 = 0;
            LOBYTE(v105) = 0;
          }
          else
          {
            v109 = 0;
          }
          v107 = 0;
LABEL_892:
          v108 = v105;
          goto LABEL_200;
        }
LABEL_358:
        IndexQuickly = 10;
        goto LABEL_180;
      }
      v66 = (_BYTE *)(v65 + 6);
      v12 = v65;
      if ((*(_BYTE *)(v65 + 6) & 8) != 0)
        goto LABEL_131;
    }
    a5 = HIDWORD(v71);
    if ((int)v71 <= 63)
    {
      v96 = v12 + 16;
      v97 = v71 << 32;
    }
    else
    {
      v96 = *(_QWORD *)(v12 + 8) - 8;
      v97 = 0x3F00000000 - (v71 << 32);
    }
    a4 = *(_QWORD *)(v96 + (v97 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_173;
    v98 = *(unsigned __int8 *)(a4 + 5);
    if (v98 != 5)
    {
      if (v98 != 6)
      {
LABEL_173:
        v602 = (uint64_t (*)(unint64_t))a4;
        v606 = (JSC::Structure *)v12;
LABEL_174:
        v604 = __PAIR64__(a6, a5);
        LOWORD(v607[1]) = 257;
        goto LABEL_175;
      }
      v173 = *(_DWORD *)(v69 + 16) & 3;
      v174 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v176 = *(int8x16_t ***)(a4 + 24);
        v175 = *(_QWORD *)(a4 + 32);
        v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v603 = v174;
        LODWORD(v604) = HIDWORD(v71);
        v606 = (JSC::Structure *)v12;
        goto LABEL_333;
      }
      v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v603 = v174;
      LODWORD(v604) = HIDWORD(v71);
      v606 = (JSC::Structure *)v12;
LABEL_419:
      BYTE1(v607[1]) = 3;
      if (v173 != 2)
        LOBYTE(v607[1]) = 1;
      goto LABEL_175;
    }
    v147 = (unsigned int *)v12;
    v148 = (uint64_t)v63;
LABEL_266:
    JSC::JSObject::fillGetterPropertySlot(v147, v148, (uint64_t)&v602, a4, a5, a6);
    goto LABEL_175;
  }
LABEL_131:
  if (!v61)
    goto LABEL_140;
  v72 = *(_DWORD *)(v61 + 16);
  if ((v72 & 0x20) != 0)
    goto LABEL_140;
  v73 = *(_WORD **)(v61 + 8);
  v74 = *(unsigned int *)(v61 + 4);
  if ((v72 & 4) == 0)
  {
    if ((_DWORD)v74)
    {
      v75 = (unsigned __int16)*v73 - 48;
      if (v75 <= 9 && (*v73 != 48 || v74 <= 1))
      {
        v208 = v73 + 1;
        v209 = v74 - 1;
        while (v209)
        {
          if (v75 > 0x19999999)
            goto LABEL_136;
          v210 = *v208 - 48;
          if (v210 > 9)
            goto LABEL_136;
          v76 = 0;
          LOBYTE(v74) = 0;
          v77 = 0;
          v59 = __CFADD__(v210, 10 * v75);
          v75 = v210 + 10 * v75;
          ++v208;
          --v209;
          if (v59)
            goto LABEL_138;
        }
        v77 = v75 & 0xFFFFFF00;
        v76 = 0x100000000;
        if (v75 == -1)
        {
          v76 = 0;
          LOBYTE(v74) = 0;
        }
        else
        {
          LOBYTE(v74) = v75;
        }
        if (v75 == -1)
          v77 = 0;
        goto LABEL_138;
      }
LABEL_136:
      v76 = 0;
      LOBYTE(v74) = 0;
    }
    else
    {
      v76 = 0;
    }
    v77 = 0;
LABEL_138:
    v78 = v74;
    goto LABEL_139;
  }
  if ((_DWORD)v74)
  {
    v520 = *(unsigned __int8 *)v73 - 48;
    if (v520 <= 9 && (v74 < 2 || *(_BYTE *)v73 != 48))
    {
      v536 = v74 - 1;
      v537 = (unsigned __int8 *)v73 + 1;
      while (v536)
      {
        if (v520 > 0x19999999)
          goto LABEL_1113;
        v538 = *v537 - 48;
        if (v538 > 9)
          goto LABEL_1113;
        v78 = 0;
        LOBYTE(v74) = 0;
        v76 = 0;
        v59 = __CFADD__(v538, 10 * v520);
        v520 = v538 + 10 * v520;
        --v536;
        ++v537;
        if (v59)
          goto LABEL_1115;
      }
      if (v520 == -1)
        v78 = 0;
      else
        v78 = v520 & 0xFFFFFF00;
      if (v520 == -1)
        LOBYTE(v74) = 0;
      else
        LOBYTE(v74) = v520;
      if (v520 == -1)
        v76 = 0;
      else
        v76 = 0x100000000;
      goto LABEL_1115;
    }
LABEL_1113:
    v78 = 0;
    LOBYTE(v74) = 0;
  }
  else
  {
    v78 = 0;
  }
  v76 = 0;
LABEL_1115:
  v77 = v74;
LABEL_139:
  if ((v76 & 0x100000000) != 0)
  {
    v212 = v77 | v78;
    v213 = v13[7];
    IndexQuickly = 10;
    while (1)
    {
      v214 = 16 * (*(_DWORD *)v601 & 0xFFFFFFFE);
      v215 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v214 + 0x4C) + 0x70))();
      v216 = v215;
      if (*((_DWORD *)v213 + 20))
      {
        v256 = JSC::VM::hasExceptionsAfterHandlingTraps(v213, this, a3, a4, a5, a6, a7, a8);
        if (((v256 | v216) & 1) != 0)
        {
          if (!v256)
            goto LABEL_175;
          goto LABEL_201;
        }
      }
      else if ((v215 & 1) != 0)
      {
        goto LABEL_175;
      }
      if (BYTE2(v607[1]) == 3)
      {
        if (BYTE4(v607[1]))
          goto LABEL_201;
        v217 = *(unsigned __int8 *)(v601 + 5);
        if (v217 == 61)
          goto LABEL_445;
      }
      else
      {
        v217 = *(unsigned __int8 *)(v601 + 5);
        if (v217 == 61)
        {
          if (BYTE2(v607[1]) == 1)
            goto LABEL_201;
          goto LABEL_445;
        }
      }
      if ((v217 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v601, this, a3, a4, a5, a6, a7, a8) <= v212)
      {
        goto LABEL_201;
      }
LABEL_445:
      if ((*(_WORD *)(v214 + 12) & 0x800) == 0 || BYTE2(v607[1]) == 3)
      {
        v218 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
        if (!v218)
          v218 = *(_QWORD *)(v601 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v218 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v601 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v601, v13);
        }
        else
        {
          v218 = *(_QWORD *)(16 * (*(_DWORD *)v601 & 0xFFFFFFFE) + 0x30);
          if (!v218)
            v218 = *(_QWORD *)(v601 + 16);
        }
        if (*((_DWORD *)v213 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v213, this, a3, a4, a5, a6, a7, a8))
          goto LABEL_201;
      }
      if ((v218 & 0xFFFE000000000002) == 0)
      {
        v601 = v218;
        if (*(unsigned __int8 *)(v218 + 5) > 0x16u)
          continue;
      }
      goto LABEL_177;
    }
  }
LABEL_140:
  v79 = v13[7];
  IndexQuickly = 10;
  while (1)
  {
    v80 = 16 * (*(_DWORD *)v65 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v65 + 6) & 8) == 0)
      break;
    v235 = (*(uint64_t (**)(int64_t, JSC::VM **, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C) + 0x68))(v65, v13, v61, &v602);
    if (*((_DWORD *)v79 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v79, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_201;
    if ((v235 & 1) != 0)
      goto LABEL_175;
    if (BYTE2(v607[1]) == 3)
    {
      if (BYTE4(v607[1]))
        goto LABEL_201;
      v236 = *(unsigned __int8 *)(v65 + 5);
      if (v236 != 61)
      {
LABEL_497:
        if (!v61)
          goto LABEL_147;
        if ((v236 - 50) < 0xFFFFFFF5)
          goto LABEL_147;
        v237 = *(_DWORD *)(v61 + 16);
        if ((v237 & 0x20) != 0)
          goto LABEL_147;
        v238 = *(unsigned int *)(v61 + 4);
        if (!(_DWORD)v238)
          goto LABEL_147;
        v239 = *(unsigned __int8 **)(v61 + 8);
        if ((v237 & 4) == 0)
        {
          v240 = *(unsigned __int16 *)v239;
          if ((_DWORD)v238 == 1)
            goto LABEL_503;
          if (v240 == 45)
          {
            v240 = *((unsigned __int16 *)v239 + 1);
            goto LABEL_527;
          }
          if ((v240 - 48) >= 0xA && ((_DWORD)v238 != 8 || v240 != 73))
          {
LABEL_802:
            if ((_DWORD)v238 != 3 || v240 != 78)
              goto LABEL_147;
          }
LABEL_545:
          v12 = v12 & 0xFFFFFF0000000000 | v238 | ((unint64_t)((v237 >> 2) & 1) << 32);
          JSC::jsToNumber(v239, v12);
          WTF::numberToString(v614, v259);
          if (WTF::equal(v61, (unint64_t)v614, v260))
            goto LABEL_546;
          goto LABEL_147;
        }
        v240 = *v239;
        if ((_DWORD)v238 == 1)
        {
LABEL_503:
          if ((v240 - 48) < 0xA)
            goto LABEL_546;
          goto LABEL_147;
        }
        if (v240 == 45)
        {
          v240 = v239[1];
LABEL_527:
          if ((v240 - 48) < 0xA)
          {
            if ((_DWORD)v238 == 2)
              goto LABEL_546;
            goto LABEL_545;
          }
          if ((_DWORD)v238 != 9)
            goto LABEL_147;
        }
        else
        {
          if ((v240 - 48) < 0xA)
            goto LABEL_545;
          if ((_DWORD)v238 != 8)
            goto LABEL_802;
        }
        if (v240 != 73)
          goto LABEL_147;
        goto LABEL_545;
      }
    }
    else
    {
      v236 = *(unsigned __int8 *)(v65 + 5);
      if (v236 != 61)
        goto LABEL_497;
      if (BYTE2(v607[1]) == 1)
        goto LABEL_201;
    }
LABEL_147:
    if ((*(_WORD *)(v80 + 12) & 0x800) == 0)
    {
      v83 = *(_DWORD *)v65;
LABEL_149:
      v84 = *(_QWORD *)(16 * (v83 & 0xFFFFFFFE) + 0x30);
      if (!v84)
        v84 = *(_QWORD *)(v65 + 16);
      goto LABEL_151;
    }
    v83 = *(_DWORD *)v65;
    if (BYTE2(v607[1]) == 3)
      goto LABEL_149;
    v234 = 16 * (v83 & 0xFFFFFFFE);
    if ((*(_WORD *)(v234 + 12) & 0x800) != 0)
    {
      v84 = (*(uint64_t (**)(int64_t, JSC::VM **))(16 * *(unsigned int *)(v234 + 76) + 0xB0))(v65, v13);
    }
    else
    {
      v84 = *(_QWORD *)(v234 + 48);
      if (!v84)
        v84 = *(_QWORD *)(v65 + 16);
    }
    if (*((_DWORD *)v79 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v79, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_201;
LABEL_151:
    if ((v84 & 0xFFFE000000000002) == 0)
    {
      v65 = v84;
      if (*(unsigned __int8 *)(v84 + 5) > 0x16u)
        continue;
    }
    goto LABEL_177;
  }
  if (!(_DWORD)v67
    || (v67 & ~*(_DWORD *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE)), v79, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v81)|| (v614[0] = (WTF::StringImpl *)v61, v82 = JSC::PropertyTable::get(v81, (uint64_t *)v614), a6 = v82, (_DWORD)v82 == -1))
  {
    if ((*(_BYTE *)(v65 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v65, v79, v61, (uint64_t)&v602) & 1) != 0)
    {
      goto LABEL_175;
    }
    goto LABEL_147;
  }
  a5 = HIDWORD(v82);
  if ((int)v82 <= 63)
  {
    v205 = v65 + 16;
    v206 = v82 << 32;
  }
  else
  {
    v205 = *(_QWORD *)(v65 + 8) - 8;
    v206 = 0x3F00000000 - (v82 << 32);
  }
  a4 = *(_QWORD *)(v205 + (v206 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_398:
    v602 = (uint64_t (*)(unint64_t))a4;
    v606 = (JSC::Structure *)v65;
    goto LABEL_174;
  }
  v207 = *(unsigned __int8 *)(a4 + 5);
  if (v207 == 5)
  {
    v147 = (unsigned int *)v65;
    v148 = (uint64_t)v79;
    goto LABEL_266;
  }
  if (v207 != 6)
    goto LABEL_398;
  v173 = *(_DWORD *)(v80 + 16) & 3;
  v229 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v603 = v229;
    LODWORD(v604) = HIDWORD(v82);
    v606 = (JSC::Structure *)v65;
    goto LABEL_419;
  }
  v176 = *(int8x16_t ***)(a4 + 24);
  v175 = *(_QWORD *)(a4 + 32);
  v602 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v603 = v229;
  LODWORD(v604) = HIDWORD(v82);
  v606 = (JSC::Structure *)v65;
LABEL_333:
  BYTE1(v607[1]) = 3;
  if (v173 != 2)
    LOBYTE(v607[1]) = 1;
  BYTE3(v607[1]) = 1;
  v610 = v176;
  v611 = v175;
LABEL_175:
  if (BYTE1(v607[1]) == 1)
  {
    IndexQuickly = (uint64_t)v602;
  }
  else
  {
    if (BYTE1(v607[1]) == 2)
      v138 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v602, (JSC::JSGlobalObject *)v13, a3, a4, a5, a6, a7, a8);
    else
      v138 = JSC::PropertySlot::customGetter((uint64_t)&v602, v13[7], (WTF::StringImpl *)v61);
    IndexQuickly = v138;
  }
LABEL_177:
  if (v61)
  {
LABEL_178:
    if (*(_DWORD *)v61 != 2)
    {
      *(_DWORD *)v61 -= 2;
      goto LABEL_180;
    }
    v119 = (WTF::StringImpl *)v61;
LABEL_231:
    WTF::StringImpl::~StringImpl(v119, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
LABEL_180:
  if (v609)
  {
    v99 = *(_DWORD *)(v608 + 4);
    if (!v99)
    {
      __break(0xC471u);
      JUMPOUT(0x1987B4120);
    }
    *(_DWORD *)(v608 + 4) = v99 - 1;
  }
  return IndexQuickly;
}

uint64_t operationGetByValWithThisMegamorphicGeneric(JSC::VM **a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t IndexQuickly;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t Index;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  unint64_t v41;
  int64_t v42;
  JSC::Structure *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  const WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::VM *v100;
  JSC::Structure *v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  int v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int8x16_t **v121;
  WTF::StringImpl *v122;
  JSC::VM *v123;
  WTF::StringImpl *v124;
  JSC::VM *v125;
  JSC::VM *v126;
  _QWORD *v127;
  uint64_t v128;
  JSC::VM **v129;
  JSC::VM **p_dst;
  WTF::StringImpl *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  _WORD *v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  unsigned __int16 *v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  size_t v173;
  char *v174;
  char *v175;
  int v176;
  uint64_t v177;
  unsigned __int8 *v178;
  JSC::VM **v179;
  uint64_t v180;
  int v181;
  int v182;
  JSC::VM **v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t **v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  int8x16_t **v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  int v199;
  int v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  JSC::VM *v219;
  uint64_t v220;
  int8x16_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF::AtomStringImpl *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t Error;
  JSC::Structure *v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  unsigned int v242;
  _QWORD *v243;
  uint64_t *v244;
  unint64_t v245;
  int v246;
  JSC::Structure *v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int OwnStaticPropertySlot;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  JSC::Structure *v259;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int8x16_t **v265;
  int v266;
  JSC::VM **v267;
  uint64_t v268;
  uint64_t v269;
  JSC::JSGlobalObject *v270;
  uint64_t v271;
  JSC::Structure *v272;
  unint64_t v273;
  JSC::VM *v274;
  int8x16_t **v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  BOOL v279;
  uint64_t v281;
  int v282;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  _DWORD *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unsigned int v307;
  _BYTE *v308;
  unint64_t v309;
  int64_t v310;
  JSC::Structure *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  JSC::JSGlobalObject *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _WORD *v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  unsigned __int16 *v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  _DWORD *v338;
  uint64_t ***v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  JSC::JSGlobalObject *v343;
  uint64_t v344;
  char v345;
  int v346;
  uint64_t v347;
  int v348;
  int v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  WTF::StringImpl *v372;
  JSC::Structure *v373;
  unint64_t v374;
  uint64_t v375;
  BOOL v376;
  uint64_t v377;
  BOOL v378;
  WTF::StringImpl *v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  int8x16_t **v392;
  WTF::StringImpl *v393;
  JSC::VM *v394;
  WTF::StringImpl *v395;
  JSC::VM *v396;
  JSC::VM *v397;
  _QWORD *v398;
  uint64_t v399;
  JSC::VM **v400;
  JSC::VM **v401;
  WTF::StringImpl *v402;
  unint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  _BYTE *v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423;
  unsigned int v424;
  int v425;
  int v426;
  int v427;
  unsigned __int16 *v428;
  uint64_t v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned __int8 *v443;
  int v444;
  unint64_t v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  unint64_t v449;
  size_t v450;
  char *v451;
  char *v452;
  uint64_t v453;
  unsigned __int8 *v454;
  JSC::VM **v455;
  uint64_t v456;
  int v457;
  int v458;
  JSC::VM **v459;
  uint64_t v460;
  int v461;
  int v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  unsigned int v479;
  uint64_t v480;
  unsigned __int8 *v481;
  int v482;
  unint64_t v483;
  uint64_t v484;
  char *v485;
  uint64_t v486;
  unint64_t v487;
  size_t v488;
  char *v489;
  char *v490;
  uint64_t v491;
  unsigned __int8 *v492;
  JSC::VM **v493;
  uint64_t v494;
  int v495;
  int v496;
  JSC::VM **v497;
  uint64_t v498;
  int v499;
  int v500;
  int v501;
  char v502;
  unint64_t v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  int v523;
  _BOOL4 v524;
  unint64_t v525;
  void *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char v538;
  int v539;
  uint64_t v540;
  int v541;
  int v542;
  unint64_t v543;
  unint64_t v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  int8x16_t **v548;
  JSC::Structure *v549;
  uint64_t v550;
  BOOL v551;
  uint64_t v552;
  BOOL v553;
  uint64_t v555;
  unsigned __int8 *v556;
  unsigned int v557;
  int v558;
  int v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  WTF::StringImpl *v569;
  JSC::VM *v570;
  WTF::StringImpl *v571;
  JSC::VM *v572;
  JSC::VM *v573;
  _QWORD *v574;
  uint64_t v575;
  JSC::VM **v576;
  JSC::VM **v577;
  WTF::StringImpl *v578;
  int v579;
  unint64_t v580;
  void *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  int v589;
  unint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  char v611;
  JSC::VM *v612;
  uint64_t v613;
  int8x16_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  WTF::AtomStringImpl *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  JSC::Structure *v627;
  int8x16_t **v628;
  uint64_t v629;
  BOOL v630;
  uint64_t v631;
  BOOL v632;
  uint64_t v634;
  int v635;
  _WORD *v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  unsigned int v640;
  int v641;
  uint64_t v642;
  BOOL v643;
  BOOL v644;
  unint64_t v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unsigned __int16 *v653;
  uint64_t v654;
  unsigned int v655;
  unsigned int v656;
  uint64_t v657;
  unsigned int v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  char v663;
  int v664;
  uint64_t v665;
  int v666;
  int v667;
  unint64_t v668;
  unint64_t v669;
  unsigned int v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  char v675;
  char v676;
  int v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  char v681;
  int v682;
  unint64_t v683;
  unint64_t v684;
  uint64_t v685;
  unsigned __int8 *v686;
  unsigned int v687;
  uint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  uint64_t v691;
  int v692;
  int v693;
  int v694;
  uint64_t v695;
  unsigned int *v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  char v700;
  int v701;
  _BYTE *v702;
  uint64_t v703;
  unsigned int v704;
  uint64_t v705;
  unsigned int v706;
  uint64_t v707;
  int v708;
  unsigned __int16 *v709;
  uint64_t v710;
  unsigned int v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t **v714;
  WTF::StringImpl *v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  char v725;
  char v726;
  int v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  char v731;
  unint64_t v732;
  int v733;
  unint64_t v734;
  WTF::StringImpl *v735;
  JSC::VM *v736;
  WTF::StringImpl *v737;
  JSC::VM *v738;
  JSC::VM *v739;
  _QWORD *v740;
  uint64_t v741;
  JSC::VM **v742;
  JSC::VM **v743;
  WTF::StringImpl *v744;
  unint64_t v745;
  void *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unsigned __int8 *v754;
  unsigned int v755;
  int v756;
  int v757;
  int v758;
  unint64_t v759;
  void *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  void *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  unsigned int v776;
  uint64_t v777;
  unsigned __int8 *v778;
  unsigned int v779;
  uint64_t v780;
  unsigned int v781;
  uint64_t v782;
  unsigned __int8 *v783;
  unsigned int v784;
  uint64_t v785;
  uint64_t v786;
  _DWORD *v787;
  int v788;
  uint64_t v789;
  _DWORD *v790;
  int v791;
  unint64_t v792;
  unint64_t v793;
  char v794;
  char v795;
  char *v796;
  int v797;
  char v798;
  char *v799;
  int v800;
  JSC::JSGlobalObject *v801;
  JSC::VM *v802;
  uint64_t (*v803)(unint64_t);
  uint64_t v804;
  unint64_t v805;
  JSC::Structure *v806;
  JSC::Structure *v807;
  _QWORD v808[2];
  uint64_t v809;
  char v810;
  int8x16_t **v811;
  uint64_t v812;
  unint64_t v813;
  JSC::VM *__dst;
  char v815;
  char __s[8];
  uint64_t v817;
  uint64_t vars0;

  v9 = a4;
  v10 = a3;
  v11 = this;
  v12 = (JSC::JSGlobalObject *)a1;
  v817 = *MEMORY[0x1E0C80C00];
  v802 = a1[7];
  *((_QWORD *)v802 + 5) = vars0;
  v13 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) != 0)
  {
    v813 = this;
    goto LABEL_46;
  }
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) < 0x17u)
  {
    v813 = this;
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_46;
LABEL_26:
    if (*(_BYTE *)(a3 + 5) != 2)
      goto LABEL_46;
    v24 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if (((*(_DWORD *)(v24 + 0x10) | *(unsigned __int8 *)(v24 + 0xA)) & 8) != 0)
      goto LABEL_46;
    v14 = *(_QWORD *)(a3 + 8);
    if ((v14 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
    }
    else
    {
      if ((*(_BYTE *)(v14 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v14 += 2;
        goto LABEL_34;
      }
      WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(a3 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &__dst);
    }
    v14 = (unint64_t)__dst;
LABEL_34:
    if (*((_DWORD *)v802 + 20))
    {
      v149 = *((_DWORD *)v802 + 20);
      if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v802 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v802 + 2))
      {
        IndexQuickly = 0;
        if (v14)
          goto LABEL_567;
        return IndexQuickly;
      }
    }
    if (v14)
    {
      if ((v14 >> 4))
      {
        if (((v14 >> 4) & ~*(_DWORD *)(v24 + 32)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v24, v802, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v25)
          {
            __dst = (JSC::VM *)v14;
            v26 = JSC::PropertyTable::get(v25, (uint64_t *)&__dst);
            if ((_DWORD)v26 != -1)
            {
              if ((int)v26 <= 63)
              {
                v27 = v11 + 16;
                v28 = v26 << 32;
              }
              else
              {
                v27 = *(_QWORD *)(v11 + 8) - 8;
                v28 = 0x3F00000000 - (v26 << 32);
              }
              IndexQuickly = *(_QWORD *)(v27 + (v28 >> 29));
              if (IndexQuickly)
                goto LABEL_567;
            }
          }
        }
      }
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
LABEL_46:
    a9.i64[0] = 0xFFFFFFFF00000000;
    v805 = 0xFFFFFFFF00000000;
    LOBYTE(v809) = 0;
    v810 = 0;
    v811 = 0;
    v812 = 0;
    v807 = 0;
    memset(v808, 0, 13);
    v806 = (JSC::Structure *)v9;
    if (v10 >= 0xFFFE000000000000 && (v10 & 0x80000000) == 0)
    {
      v30 = v10;
      goto LABEL_49;
    }
    if (v10 >> 49)
    {
      *(double *)a9.i64 = (double)(int)v10;
      if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
        a9.i64[0] = v10 - 0x2000000000000;
      v30 = *(double *)a9.i64;
      if ((_DWORD)v30 != -1 && *(double *)a9.i64 == (double)v30)
      {
LABEL_49:
        if (v13)
          goto LABEL_136;
        v31 = *(unsigned __int8 *)(v11 + 5);
        if (v31 == 2)
        {
          v32 = *(_QWORD *)(v11 + 8);
          if ((v32 & 1) != 0)
            v33 = (_DWORD *)(v11 + 16);
          else
            v33 = (_DWORD *)(v32 + 4);
          if (*v33 > v30)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)v11, v12, v30, a4, a5, a6, a7, a8, a9);
            goto LABEL_56;
          }
        }
        else
        {
          if (v31 <= 0x16)
          {
            v63 = *((_QWORD *)v12 + 7);
            goto LABEL_127;
          }
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v11, v30, 0);
          if (IndexQuickly)
            goto LABEL_218;
          if ((*(_BYTE *)(v11 + 4) & 0xF) != 9
            || v30 >= *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8)
            || ((v56 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28),
                 v57 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8),
                 (v57 & 0x10) != 0)
              ? (v58 = ((v57 & 0xE) + 10) >> 1)
              : (v58 = (v57 >> 1) & 7),
                (v59 = *(_DWORD *)(v56 + 4 * v58 + 852)) != 0 ? (v60 = 16 * (v59 & 0xFFFFFFFE)) : (v60 = 0),
                v60 != 16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
             || ((v61 = *(_QWORD *)(v56 + 2304), (v61 & 1) != 0)
               ? (v62 = (v61 >> 1) & 3)
               : (v62 = *(unsigned __int8 *)(v61 + 4)),
                 v62 == 2)))
          {
            v31 = *(unsigned __int8 *)(v11 + 5);
            if (v31 != 34)
              goto LABEL_110;
            JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v11, v30);
          }
        }
        v31 = *(unsigned __int8 *)(v11 + 5);
LABEL_110:
        v63 = *((_QWORD *)v12 + 7);
        if (v31 > 0x16)
        {
LABEL_138:
          IndexQuickly = 10;
          while (1)
          {
            v73 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
            v80 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v73 + 0x4C) + 0x70))(v11, v12, v30, &v803);
            if (*(_DWORD *)(v63 + 80))
            {
              v83 = *(_DWORD *)(v63 + 80);
              if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, (uint64_t)v74, v75, v76, v77, v78, v79);
              if (*(_QWORD *)(v63 + 16))
                goto LABEL_218;
            }
            if ((v80 & 1) != 0)
            {
              if (BYTE1(v808[1]) == 1)
                goto LABEL_179;
              if (BYTE1(v808[1]) == 2)
              {
                Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v803, v12, (uint64_t)v74, v75, v76, v77, v78, v79);
LABEL_56:
                IndexQuickly = Index;
LABEL_218:
                if (v810)
                {
                  v108 = *(_DWORD *)(v809 + 4);
                  if (!v108)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987B7A7CLL);
                  }
                  *(_DWORD *)(v809 + 4) = v108 - 1;
                }
                return IndexQuickly;
              }
              v191 = (uint64_t **)*((_QWORD *)v12 + 7);
              JSC::Identifier::from(v191, v30, v74, v75, v76, v77, v78, v79, (int **)__s);
              v192 = *(WTF::StringImpl **)__s;
              v234 = v807;
              v193 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
              if ((v805 & 0x20) != 0)
                v234 = v806;
              if (BYTE3(v808[1]) == 1)
              {
                v194 = v811;
                if (((unint64_t)v234 & 0xFFFE000000000002) == 0)
                {
                  v235 = *(unsigned int *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C);
                  v196 = *(_DWORD *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C) != 0;
                  v236 = 16 * v235;
                  if ((_DWORD)v235)
                    v237 = v811 == (int8x16_t **)v236;
                  else
                    v237 = 1;
                  if (!v237)
                  {
                    do
                    {
                      v236 = *(_QWORD *)(v236 + 16);
                      v196 = v236 != 0;
                    }
                    while ((int8x16_t **)v236 != v811 && v236 != 0);
                  }
                  goto LABEL_453;
                }
                goto LABEL_1501;
              }
LABEL_454:
              v239 = v803(v193);
              goto LABEL_455;
            }
            if (BYTE2(v808[1]) == 3)
            {
              if (BYTE4(v808[1]))
                goto LABEL_218;
              v81 = *(unsigned __int8 *)(v11 + 5);
              if (v81 == 61)
                goto LABEL_144;
            }
            else
            {
              v81 = *(unsigned __int8 *)(v11 + 5);
              if (v81 == 61)
              {
                if (BYTE2(v808[1]) == 1)
                  goto LABEL_218;
                goto LABEL_144;
              }
            }
            if ((v81 - 39) <= 0xA)
            {
              if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
              {
                LOBYTE(__dst) = 0;
                v815 = 0;
                v86 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, (uint64_t)v74, v75, v76, v77, v78, v79);
                v85 = v87 ? v86 : 0;
              }
              else
              {
                v85 = *(_QWORD *)(v11 + 24);
              }
              if (v85 <= v30)
                goto LABEL_218;
            }
LABEL_144:
            if ((*(_WORD *)(v73 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
            {
              v82 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v82)
                v82 = *(_QWORD *)(v11 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v82 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0xB0))(v11, v12);
              }
              else
              {
                v82 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                if (!v82)
                  v82 = *(_QWORD *)(v11 + 16);
              }
              if (*(_DWORD *)(v63 + 80))
              {
                v84 = *(_DWORD *)(v63 + 80);
                if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, (uint64_t)v74, v75, v76, v77, v78, v79);
                if (*(_QWORD *)(v63 + 16))
                  goto LABEL_218;
              }
            }
            if ((v82 & 0xFFFE000000000002) == 0)
            {
              v11 = v82;
              if (*(unsigned __int8 *)(v82 + 5) > 0x16u)
                continue;
            }
            goto LABEL_218;
          }
        }
LABEL_127:
        if (v31 == 2)
        {
          v68 = *(_QWORD *)(v11 + 8);
          if ((v68 & 1) != 0)
            v69 = (_DWORD *)(v11 + 16);
          else
            v69 = (_DWORD *)(v68 + 4);
          if (*v69 <= v30)
            goto LABEL_413;
          v70 = JSC::JSString::getIndex((JSC::JSString *)v11, v12, v30, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v63 + 80))
            goto LABEL_133;
          v200 = *(_DWORD *)(v63 + 80);
          if ((v200 & 0x27) != 0 && (v200 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v63 + 16))
          {
LABEL_413:
            v71 = 0;
          }
          else
          {
LABEL_133:
            v803 = (uint64_t (*)(unint64_t))v70;
            LODWORD(v805) = 10;
            v807 = 0;
            v71 = 1;
            BYTE1(v808[1]) = 1;
          }
          if (*(_DWORD *)(v63 + 80))
          {
            v199 = *(_DWORD *)(v63 + 80);
            if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v63 + 16))
              goto LABEL_262;
          }
          if (v71)
          {
            if (BYTE1(v808[1]) == 1)
            {
LABEL_179:
              IndexQuickly = (uint64_t)v803;
              goto LABEL_218;
            }
            v191 = (uint64_t **)*((_QWORD *)v12 + 7);
            JSC::Identifier::from(v191, v30, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)__s);
            v192 = *(WTF::StringImpl **)__s;
            v193 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
            if (BYTE3(v808[1]) != 1)
              goto LABEL_454;
            v194 = v811;
            v195 = *(unsigned int *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x4C);
            v196 = *(_DWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v195)
            {
              v197 = 16 * v195;
              if (v811 != (int8x16_t **)v197)
              {
                do
                {
                  v197 = *(_QWORD *)(v197 + 16);
                  v196 = v197 != 0;
                }
                while ((int8x16_t **)v197 != v811 && v197 != 0);
              }
            }
LABEL_453:
            if (v196)
              goto LABEL_454;
LABEL_1501:
            __dst = (JSC::VM *)v191;
            v239 = JSC::throwDOMAttributeGetterTypeError(v193, &__dst, v194, v192);
LABEL_455:
            IndexQuickly = v239;
            v109 = *(WTF::StringImpl **)__s;
            *(_QWORD *)__s = 0;
            if (!v109)
              goto LABEL_218;
            if (*(_DWORD *)v109 != 2)
            {
              *(_DWORD *)v109 -= 2;
              goto LABEL_218;
            }
            goto LABEL_222;
          }
        }
LABEL_136:
        v72 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v813, (unint64_t)v12);
        if (v72)
        {
          v11 = v72;
          v63 = *((_QWORD *)v12 + 7);
          goto LABEL_138;
        }
LABEL_262:
        IndexQuickly = 0;
        goto LABEL_218;
      }
    }
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v219 = (JSC::VM *)*((_QWORD *)v12 + 7);
      v220 = WTF::fastCompactMalloc((WTF *)0x20);
      v221.i64[0] = 0x1000000002;
      *(_QWORD *)v220 = 0x1000000002;
      *(_QWORD *)(v220 + 8) = "is not an object";
      *(_DWORD *)(v220 + 16) = 4;
      __dst = (JSC::VM *)v220;
      Error = JSC::createError((unint64_t)v12, v11, (uint64_t *)&__dst, (uint64_t)JSC::defaultSourceAppender, v222, v223, v224, v225, v221);
      if (*(_DWORD *)v220 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v220, v226, v227, v228, v229, v230, v231, v232);
        WTF::fastFree(v525, v526, v527, v528, v529, v530, v531, v532);
      }
      else
      {
        *(_DWORD *)v220 -= 2;
      }
      JSC::VM::throwException(v219, v12, Error, v228, v229, v230, v231, v232);
    }
    if (*((_DWORD *)v802 + 20))
    {
      v147 = *((_DWORD *)v802 + 20);
      if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v802 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v802 + 2))
        goto LABEL_262;
    }
    v35 = *((_QWORD *)v12 + 7);
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v10 + 5) == 2)
      {
        v36 = *(_QWORD *)(v10 + 8);
        if ((v36 & 1) == 0)
        {
          if ((*(_BYTE *)(v36 + 16) & 0x10) == 0)
          {
            v122 = *(WTF::StringImpl **)(v35 + 64768);
            if (v122 != (WTF::StringImpl *)v36)
            {
              *(_DWORD *)v36 += 2;
              *(_QWORD *)(v35 + 64768) = v36;
              if (v122)
              {
                if (*(_DWORD *)v122 == 2)
                {
                  WTF::StringImpl::~StringImpl(v122, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
                }
                else
                {
                  *(_DWORD *)v122 -= 2;
                }
              }
              v123 = *(JSC::VM **)(v10 + 8);
              if (v123)
              {
                if ((*((_BYTE *)v123 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v123 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v123, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
                  v123 = __dst;
                }
              }
              v124 = *(WTF::StringImpl **)(v35 + 64776);
              *(_QWORD *)(v35 + 64776) = v123;
              if (v124)
              {
                if (*(_DWORD *)v124 == 2)
                {
                  WTF::StringImpl::~StringImpl(v124, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
                }
                else
                {
                  *(_DWORD *)v124 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v125 = *(JSC::VM **)(v35 + 64776);
              *(_DWORD *)v125 += 2;
              __dst = v125;
              __dmb(0xAu);
              v126 = *(JSC::VM **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = __dst;
              __dst = v126;
              v127 = (_QWORD *)(v35 + 808);
              v128 = *(unsigned int *)(v35 + 820);
              if ((_DWORD)v128 == *(_DWORD *)(v35 + 816))
              {
                p_dst = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v127, v128 + 1, (unint64_t)&__dst);
                v128 = *(unsigned int *)(v35 + 820);
                v129 = (JSC::VM **)(*(_QWORD *)(v35 + 808) + 8 * v128);
                v126 = *p_dst;
              }
              else
              {
                v129 = (JSC::VM **)(*v127 + 8 * v128);
                p_dst = &__dst;
              }
              *p_dst = 0;
              *v129 = v126;
              *(_DWORD *)(v35 + 820) = v128 + 1;
              v131 = __dst;
              __dst = 0;
              if (v131)
              {
                if (*(_DWORD *)v131 == 2)
                {
                  WTF::StringImpl::~StringImpl(v131, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
                }
                else
                {
                  *(_DWORD *)v131 -= 2;
                }
              }
            }
            v36 = *(_QWORD *)(v35 + 64776);
          }
          goto LABEL_64;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, v12);
        if (*(_DWORD *)(v35 + 80))
        {
          v217 = *(_DWORD *)(v35 + 80);
          if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v35 + 16))
            goto LABEL_419;
        }
        goto LABEL_195;
      }
      v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)__s = v10;
    if (*(_DWORD *)(v35 + 80))
    {
      v588 = *(_DWORD *)(v35 + 80);
      if ((v588 & 0x27) != 0 && (v588 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v35 + 16))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v35 + 41952) + 8);
        if (v36)
        {
LABEL_64:
          v37 = *(_DWORD *)v36 + 2;
LABEL_65:
          *(_DWORD *)v36 = v37;
        }
LABEL_66:
        if (*((_DWORD *)v802 + 20))
        {
          v148 = *((_DWORD *)v802 + 20);
          if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v802 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*((_QWORD *)v802 + 2))
          {
            IndexQuickly = 0;
            goto LABEL_215;
          }
        }
        if (v13)
          goto LABEL_1297;
        v38 = *((_QWORD *)v12 + 7);
        v39 = *(unsigned __int8 *)(v11 + 5);
        if (v39 > 0x16)
          goto LABEL_69;
        if (v39 != 2)
        {
LABEL_1297:
          v657 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v813, (unint64_t)v12);
          if (!v657)
            goto LABEL_192;
          v11 = v657;
          v38 = *((_QWORD *)v12 + 7);
LABEL_69:
          v40 = (_BYTE *)(v11 + 6);
          v41 = v36 >> 4;
          v42 = v11;
          if ((*(_BYTE *)(v11 + 6) & 8) == 0)
          {
            v43 = (JSC::Structure *)v11;
            while (1)
            {
              v44 = *(_DWORD *)v43 & 0xFFFFFFFE;
              v45 = 16 * v44;
              if ((_DWORD)v41)
              {
                if ((v41 & ~*(_DWORD *)(16 * v44 + 0x20)) == 0)
                {
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v45, (JSC::VM *)v38, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  if (v46)
                  {
                    __dst = (JSC::VM *)v36;
                    v47 = JSC::PropertyTable::get(v46, (uint64_t *)&__dst);
                    a6 = v47;
                    if ((_DWORD)v47 != -1)
                    {
                      a5 = HIDWORD(v47);
                      if ((int)v47 <= 63)
                      {
                        v48 = (uint64_t)v43 + 16;
                        v49 = v47 << 32;
                      }
                      else
                      {
                        v48 = *((_QWORD *)v43 + 1) - 8;
                        v49 = 0x3F00000000 - (v47 << 32);
                      }
                      a4 = *(_QWORD *)(v48 + (v49 >> 29));
                      if ((a4 & 0xFFFE000000000002) == 0)
                      {
                        v64 = *(unsigned __int8 *)(a4 + 5);
                        if (v64 == 5)
                        {
                          v88 = (unsigned int *)v43;
                          v89 = v38;
                          goto LABEL_181;
                        }
                        if (v64 == 6)
                        {
                          v118 = *(_DWORD *)(v45 + 16) & 3;
                          v119 = *(_QWORD *)(a4 + 16);
                          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                          {
                            v121 = *(int8x16_t ***)(a4 + 24);
                            v120 = *(_QWORD *)(a4 + 32);
                            v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                            v804 = v119;
                            LODWORD(v805) = HIDWORD(v47);
                            v807 = v43;
                            goto LABEL_225;
                          }
                          v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                          v804 = v119;
                          LODWORD(v805) = HIDWORD(v47);
                          v807 = v43;
                          goto LABEL_280;
                        }
                      }
                      v803 = (uint64_t (*)(unint64_t))a4;
                      v807 = v43;
LABEL_117:
                      v805 = __PAIR64__(a6, a5);
                      LOWORD(v808[1]) = 257;
                      goto LABEL_182;
                    }
                  }
                }
              }
              if ((*v40 & 0x20) != 0
                && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v43, (JSC::VM *)v38, v36, (uint64_t)&v803) & 1) != 0)
              {
                goto LABEL_182;
              }
              v42 = *(_QWORD *)(v45 + 48);
              if (!v42)
                v42 = *((_QWORD *)v43 + 2);
              if ((v42 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v42 + 5) < 0x17u)
                break;
              v40 = (_BYTE *)(v42 + 6);
              v43 = (JSC::Structure *)v42;
              if ((*(_BYTE *)(v42 + 6) & 8) != 0)
                goto LABEL_251;
            }
            if (!v36)
            {
              IndexQuickly = 10;
              goto LABEL_218;
            }
            v50 = *(_DWORD *)(v36 + 16);
            if ((v50 & 0x20) != 0)
            {
              IndexQuickly = 10;
              goto LABEL_216;
            }
            v51 = *(_WORD **)(v36 + 8);
            v52 = *(unsigned int *)(v36 + 4);
            if ((v50 & 4) == 0)
            {
              if ((_DWORD)v52)
              {
                v53 = (unsigned __int16)*v51 - 48;
                if (v53 <= 9 && (*v51 != 48 || v52 <= 1))
                {
                  v65 = v51 + 1;
                  v66 = v52 - 1;
                  while (v66)
                  {
                    if (v53 > 0x19999999)
                      goto LABEL_91;
                    v67 = *v65 - 48;
                    if (v67 > 9)
                      goto LABEL_91;
                    v54 = 0;
                    LOBYTE(v52) = 0;
                    v55 = 0;
                    v23 = __CFADD__(v67, 10 * v53);
                    v53 = v67 + 10 * v53;
                    ++v65;
                    --v66;
                    if (v23)
                      goto LABEL_191;
                  }
                  v55 = v53 & 0xFFFFFF00;
                  v54 = 0x100000000;
                  if (v53 == -1)
                  {
                    v54 = 0;
                    LOBYTE(v52) = 0;
                  }
                  else
                  {
                    LOBYTE(v52) = v53;
                  }
                  if (v53 == -1)
                    v55 = 0;
LABEL_191:
                  v91 = v52;
                  if ((v54 & 0x100000000) == 0)
                  {
LABEL_192:
                    IndexQuickly = 10;
                    goto LABEL_215;
                  }
                  goto LABEL_1087;
                }
LABEL_91:
                v54 = 0;
                LOBYTE(v52) = 0;
              }
              else
              {
                v54 = 0;
              }
              v55 = 0;
              goto LABEL_191;
            }
            if ((_DWORD)v52)
            {
              v533 = *(unsigned __int8 *)v51 - 48;
              if (v533 <= 9 && (v52 < 2 || *(_BYTE *)v51 != 48))
              {
                v555 = v52 - 1;
                v556 = (unsigned __int8 *)v51 + 1;
                while (v555)
                {
                  if (v533 > 0x19999999)
                    goto LABEL_1084;
                  v557 = *v556 - 48;
                  if (v557 > 9)
                    goto LABEL_1084;
                  v91 = 0;
                  LOBYTE(v52) = 0;
                  v534 = 0;
                  v23 = __CFADD__(v557, 10 * v533);
                  v533 = v557 + 10 * v533;
                  --v555;
                  ++v556;
                  if (v23)
                    goto LABEL_1086;
                }
                if (v533 == -1)
                  v91 = 0;
                else
                  v91 = v533 & 0xFFFFFF00;
                if (v533 == -1)
                  LOBYTE(v52) = 0;
                else
                  LOBYTE(v52) = v533;
                if (v533 == -1)
                  v534 = 0;
                else
                  v534 = 0x100000000;
LABEL_1086:
                v55 = v52;
                if ((v534 & 0x100000000) == 0)
                  goto LABEL_192;
LABEL_1087:
                v535 = v55 | v91;
                v536 = *((_QWORD *)v12 + 7);
                IndexQuickly = 10;
                while (1)
                {
                  v537 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                  v538 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v537 + 0x4C) + 0x70))(v11, v12, v535, &v803);
                  if (*(_DWORD *)(v536 + 80))
                  {
                    v541 = *(_DWORD *)(v536 + 80);
                    if ((v541 & 0x27) != 0 && (v541 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v536 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v536 + 16))
                      goto LABEL_215;
                  }
                  if ((v538 & 1) != 0)
                    goto LABEL_182;
                  if (BYTE2(v808[1]) == 3)
                  {
                    if (BYTE4(v808[1]))
                      goto LABEL_215;
                    v539 = *(unsigned __int8 *)(v11 + 5);
                    if (v539 == 61)
                      goto LABEL_1093;
                  }
                  else
                  {
                    v539 = *(unsigned __int8 *)(v11 + 5);
                    if (v539 == 61)
                    {
                      if (BYTE2(v808[1]) == 1)
                        goto LABEL_215;
                      goto LABEL_1093;
                    }
                  }
                  if ((v539 - 39) <= 0xA)
                  {
                    if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
                    {
                      LOBYTE(__dst) = 0;
                      v815 = 0;
                      v544 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                      v543 = (_BYTE)this ? v544 : 0;
                    }
                    else
                    {
                      v543 = *(_QWORD *)(v11 + 24);
                    }
                    if (v543 <= v535)
                      goto LABEL_215;
                  }
LABEL_1093:
                  if ((*(_WORD *)(v537 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
                  {
                    v540 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v540)
                      v540 = *(_QWORD *)(v11 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v540 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0xB0))(v11, v12);
                    }
                    else
                    {
                      v540 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                      if (!v540)
                        v540 = *(_QWORD *)(v11 + 16);
                    }
                    if (*(_DWORD *)(v536 + 80))
                    {
                      v542 = *(_DWORD *)(v536 + 80);
                      if ((v542 & 0x27) != 0 && (v542 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v536 + 64), 7u, a3, a4, a5, a6, a7, a8);
                      if (*(_QWORD *)(v536 + 16))
                        goto LABEL_215;
                    }
                  }
                  if ((v540 & 0xFFFE000000000002) == 0)
                  {
                    v11 = v540;
                    if (*(unsigned __int8 *)(v540 + 5) > 0x16u)
                      continue;
                  }
LABEL_215:
                  if (!v36)
                    goto LABEL_218;
LABEL_216:
                  if (*(_DWORD *)v36 != 2)
                  {
                    *(_DWORD *)v36 -= 2;
                    goto LABEL_218;
                  }
                  v109 = (WTF::StringImpl *)v36;
LABEL_222:
                  WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                  goto LABEL_218;
                }
              }
LABEL_1084:
              v91 = 0;
              LOBYTE(v52) = 0;
            }
            else
            {
              v91 = 0;
            }
            v534 = 0;
            goto LABEL_1086;
          }
LABEL_251:
          if (!v36)
            goto LABEL_290;
          v141 = *(_DWORD *)(v36 + 16);
          if ((v141 & 0x20) != 0)
            goto LABEL_290;
          v142 = *(_WORD **)(v36 + 8);
          v143 = *(unsigned int *)(v36 + 4);
          if ((v141 & 4) == 0)
          {
            if ((_DWORD)v143)
            {
              v144 = (unsigned __int16)*v142 - 48;
              if (v144 <= 9 && (*v142 != 48 || v143 <= 1))
              {
                v150 = v142 + 1;
                v151 = v143 - 1;
                while (v151)
                {
                  if (v144 > 0x19999999)
                    goto LABEL_256;
                  v152 = *v150 - 48;
                  if (v152 > 9)
                    goto LABEL_256;
                  v145 = 0;
                  LOBYTE(v143) = 0;
                  v146 = 0;
                  v23 = __CFADD__(v152, 10 * v144);
                  v144 = v152 + 10 * v144;
                  ++v150;
                  --v151;
                  if (v23)
                    goto LABEL_289;
                }
                v146 = v144 & 0xFFFFFF00;
                v145 = 0x100000000;
                if (v144 == -1)
                {
                  v145 = 0;
                  LOBYTE(v143) = 0;
                }
                else
                {
                  LOBYTE(v143) = v144;
                }
                if (v144 == -1)
                  v146 = 0;
LABEL_289:
                v153 = v143;
                if ((v145 & 0x100000000) == 0)
                {
LABEL_290:
                  v154 = *((_QWORD *)v12 + 7);
                  IndexQuickly = 10;
                  while (1)
                  {
                    v155 = 16 * (*(_DWORD *)v42 & 0xFFFFFFFE);
                    if ((*(_BYTE *)(v42 + 6) & 8) == 0)
                    {
                      if ((_DWORD)v41)
                      {
                        if ((v41 & ~*(_DWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x20)) == 0)
                        {
                          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE)), (JSC::VM *)v154, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                          if (v156)
                          {
                            __dst = (JSC::VM *)v36;
                            v157 = JSC::PropertyTable::get(v156, (uint64_t *)&__dst);
                            a6 = v157;
                            if ((_DWORD)v157 != -1)
                            {
                              a5 = HIDWORD(v157);
                              if ((int)v157 <= 63)
                              {
                                v188 = v42 + 16;
                                v189 = v157 << 32;
                              }
                              else
                              {
                                v188 = *(_QWORD *)(v42 + 8) - 8;
                                v189 = 0x3F00000000 - (v157 << 32);
                              }
                              a4 = *(_QWORD *)(v188 + (v189 >> 29));
                              if ((a4 & 0xFFFE000000000002) == 0)
                              {
                                v190 = *(unsigned __int8 *)(a4 + 5);
                                if (v190 != 5)
                                {
                                  if (v190 != 6)
                                    goto LABEL_392;
                                  v118 = *(_DWORD *)(v155 + 16) & 3;
                                  v218 = *(_QWORD *)(a4 + 16);
                                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                  {
                                    v121 = *(int8x16_t ***)(a4 + 24);
                                    v120 = *(_QWORD *)(a4 + 32);
                                    v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                    v804 = v218;
                                    LODWORD(v805) = HIDWORD(v157);
                                    v807 = (JSC::Structure *)v42;
LABEL_225:
                                    BYTE1(v808[1]) = 3;
                                    if (v118 != 2)
                                      LOBYTE(v808[1]) = 1;
                                    BYTE3(v808[1]) = 1;
                                    v811 = v121;
                                    v812 = v120;
LABEL_182:
                                    if (BYTE1(v808[1]) == 1)
                                    {
                                      IndexQuickly = (uint64_t)v803;
                                    }
                                    else
                                    {
                                      if (BYTE1(v808[1]) == 2)
                                      {
                                        v90 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v803, v12, a3, a4, a5, a6, a7, a8);
                                      }
                                      else
                                      {
                                        v101 = v807;
                                        v102 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
                                        if ((v805 & 0x20) != 0)
                                          v101 = v806;
                                        if (BYTE3(v808[1]) != 1)
                                          goto LABEL_213;
                                        if (((unint64_t)v101 & 0xFFFE000000000002) != 0)
                                          goto LABEL_1069;
                                        v103 = *(unsigned int *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C);
                                        v104 = *(_DWORD *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C) != 0;
                                        v105 = 16 * v103;
                                        if ((_DWORD)v103)
                                          v106 = v811 == (int8x16_t **)v105;
                                        else
                                          v106 = 1;
                                        if (!v106)
                                        {
                                          do
                                          {
                                            v105 = *(_QWORD *)(v105 + 16);
                                            v104 = v105 != 0;
                                          }
                                          while ((int8x16_t **)v105 != v811 && v105 != 0);
                                        }
                                        if (!v104)
                                        {
LABEL_1069:
                                          __dst = (JSC::VM *)*((_QWORD *)v12 + 7);
                                          v90 = JSC::throwDOMAttributeGetterTypeError(v102, &__dst, v811, (WTF::StringImpl *)v36);
                                        }
                                        else
                                        {
LABEL_213:
                                          v90 = v803(v102);
                                        }
                                      }
                                      IndexQuickly = v90;
                                    }
                                    goto LABEL_215;
                                  }
                                  v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                  v804 = v218;
                                  LODWORD(v805) = HIDWORD(v157);
                                  v807 = (JSC::Structure *)v42;
LABEL_280:
                                  BYTE1(v808[1]) = 3;
                                  if (v118 != 2)
                                    LOBYTE(v808[1]) = 1;
                                  goto LABEL_182;
                                }
                                v88 = (unsigned int *)v42;
                                v89 = v154;
LABEL_181:
                                JSC::JSObject::fillGetterPropertySlot(v88, v89, (uint64_t)&v803, a4, a5, a6);
                                goto LABEL_182;
                              }
LABEL_392:
                              v803 = (uint64_t (*)(unint64_t))a4;
                              v807 = (JSC::Structure *)v42;
                              goto LABEL_117;
                            }
                          }
                        }
                      }
                      if ((*(_BYTE *)(v42 + 6) & 0x20) != 0
                        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v42, (JSC::VM *)v154, v36, (uint64_t)&v803) & 1) != 0)
                      {
                        goto LABEL_182;
                      }
                      goto LABEL_297;
                    }
                    v801 = v12;
                    v794 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C) + 0x68))(v42, v12, v36, &v803);
                    if (*(_DWORD *)(v154 + 80))
                    {
                      v187 = *(_DWORD *)(v154 + 80);
                      if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v154 + 64), 7u, a3, a4, a5, a6, a7, a8);
                      if (*(_QWORD *)(v154 + 16))
                        goto LABEL_215;
                    }
                    if ((v794 & 1) != 0)
                      goto LABEL_182;
                    if (BYTE2(v808[1]) == 3)
                    {
                      if (BYTE4(v808[1]))
                        goto LABEL_215;
                      v162 = *(unsigned __int8 *)(v42 + 5);
                      if (v162 == 61)
                        goto LABEL_369;
                    }
                    else
                    {
                      v162 = *(unsigned __int8 *)(v42 + 5);
                      if (v162 == 61)
                      {
                        if (BYTE2(v808[1]) == 1)
                          goto LABEL_215;
                        goto LABEL_297;
                      }
                    }
                    if (!v36)
                      goto LABEL_369;
                    if ((v162 - 50) < 0xFFFFFFF5)
                      goto LABEL_369;
                    v163 = *(_DWORD *)(v36 + 16);
                    if ((v163 & 0x20) != 0)
                      goto LABEL_369;
                    v164 = *(unsigned int *)(v36 + 4);
                    if (!(_DWORD)v164)
                      goto LABEL_369;
                    v165 = *(unsigned __int8 **)(v36 + 8);
                    if ((v163 & 4) != 0)
                    {
                      v166 = *v165;
                      if ((_DWORD)v164 == 1)
                      {
LABEL_324:
                        if ((v166 - 48) < 0xA)
                          goto LABEL_216;
                        goto LABEL_297;
                      }
                      if (v166 == 45)
                      {
                        v166 = v165[1];
                        goto LABEL_328;
                      }
                      if ((v166 - 48) < 0xA)
                        goto LABEL_339;
                      if ((_DWORD)v164 == 8)
                        goto LABEL_338;
                    }
                    else
                    {
                      v166 = *(unsigned __int16 *)v165;
                      if ((_DWORD)v164 == 1)
                        goto LABEL_324;
                      if (v166 == 45)
                      {
                        v166 = *((unsigned __int16 *)v165 + 1);
LABEL_328:
                        if ((v166 - 48) < 0xA)
                        {
                          if ((_DWORD)v164 == 2)
                            goto LABEL_216;
                          goto LABEL_339;
                        }
                        if ((_DWORD)v164 != 9)
                          goto LABEL_369;
LABEL_338:
                        if (v166 != 73)
                          goto LABEL_369;
                        goto LABEL_339;
                      }
                      if ((v166 - 48) < 0xA || (_DWORD)v164 == 8 && v166 == 73)
                        goto LABEL_339;
                    }
                    if ((_DWORD)v164 != 3 || v166 != 78)
                      goto LABEL_369;
LABEL_339:
                    v792 = v792 & 0xFFFFFF0000000000 | v164 | ((unint64_t)((v163 >> 2) & 1) << 32);
                    JSC::jsToNumber(v165, v792);
                    v168 = (v167 >> 52) & 0x7FF;
                    if ((_DWORD)v168 == 2047)
                    {
                      if ((v167 & 0xFFFFFFFFFFFFFLL) != 0)
                      {
                        qmemcpy(__s, "NaN", 3);
                        v169 = &__s[3];
                      }
                      else
                      {
                        if ((v167 & 0x8000000000000000) != 0)
                        {
                          __s[0] = 45;
                          v175 = &__s[1];
                        }
                        else
                        {
                          v175 = __s;
                        }
                        *(_QWORD *)v175 = 0x7974696E69666E49;
                        v169 = v175 + 8;
                      }
                      goto LABEL_353;
                    }
                    v170 = v167 & 0x7FFFFFFFFFFFFFFFLL;
                    if ((v167 & 0x8000000000000000) != 0 && v170)
                    {
                      __s[0] = 45;
                      v171 = &__s[1];
                    }
                    else
                    {
                      if (!v170)
                      {
                        __s[0] = 48;
                        v169 = &__s[1];
                        goto LABEL_353;
                      }
                      v171 = __s;
                    }
                    v172 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v167 & 0x800FFFFFFFFFFFFFLL, v168);
                    v169 = WTF::dragonbox::detail::to_shortest(v172, v173, (uint64_t)v171, v174);
LABEL_353:
                    *v169 = 0;
                    v176 = strlen(__s);
                    memcpy(&__dst, __s, v176);
                    *((_BYTE *)&__dst + v176) = 0;
                    v177 = *(unsigned int *)(v36 + 4);
                    v178 = *(unsigned __int8 **)(v36 + 8);
                    if ((*(_BYTE *)(v36 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v177)
                      {
                        v183 = &__dst;
                        v184 = *(unsigned int *)(v36 + 4);
                        do
                        {
                          v186 = *(unsigned __int8 *)v183;
                          v183 = (JSC::VM **)((char *)v183 + 1);
                          v185 = v186;
                          if (!v186 || *v178 != v185)
                            goto LABEL_369;
                          ++v178;
                        }
                        while (--v184);
                      }
                    }
                    else if ((_DWORD)v177)
                    {
                      v179 = &__dst;
                      v180 = *(unsigned int *)(v36 + 4);
                      while (1)
                      {
                        v182 = *(unsigned __int8 *)v179;
                        v179 = (JSC::VM **)((char *)v179 + 1);
                        v181 = v182;
                        if (!v182 || *(unsigned __int16 *)v178 != v181)
                          break;
                        v178 += 2;
                        if (!--v180)
                          goto LABEL_365;
                      }
LABEL_369:
                      v12 = v801;
                      goto LABEL_297;
                    }
LABEL_365:
                    v12 = v801;
                    if (!*((_BYTE *)&__dst + v177))
                      goto LABEL_216;
LABEL_297:
                    if ((*(_WORD *)(v155 + 12) & 0x800) == 0)
                    {
                      v158 = *(_DWORD *)v42;
LABEL_299:
                      v159 = *(_QWORD *)(16 * (v158 & 0xFFFFFFFE) + 0x30);
                      if (!v159)
                        v159 = *(_QWORD *)(v42 + 16);
                      goto LABEL_301;
                    }
                    v158 = *(_DWORD *)v42;
                    if (BYTE2(v808[1]) == 3)
                      goto LABEL_299;
                    v160 = 16 * (v158 & 0xFFFFFFFE);
                    if ((*(_WORD *)(v160 + 12) & 0x800) != 0)
                    {
                      v159 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(v160 + 76)
                                                                                              + 0xB0))(v42, v12);
                    }
                    else
                    {
                      v159 = *(_QWORD *)(v160 + 48);
                      if (!v159)
                        v159 = *(_QWORD *)(v42 + 16);
                    }
                    if (*(_DWORD *)(v154 + 80))
                    {
                      v161 = *(_DWORD *)(v154 + 80);
                      if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v154 + 64), 7u, a3, a4, a5, a6, a7, a8);
                      if (*(_QWORD *)(v154 + 16))
                        goto LABEL_215;
                    }
LABEL_301:
                    if ((v159 & 0xFFFE000000000002) == 0)
                    {
                      v42 = v159;
                      if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_215;
                  }
                }
                goto LABEL_1350;
              }
LABEL_256:
              v145 = 0;
              LOBYTE(v143) = 0;
            }
            else
            {
              v145 = 0;
            }
            v146 = 0;
            goto LABEL_289;
          }
          if ((_DWORD)v143)
          {
            v670 = *(unsigned __int8 *)v142 - 48;
            if (v670 <= 9 && (v143 < 2 || *(_BYTE *)v142 != 48))
            {
              v688 = v143 - 1;
              v689 = (unsigned __int8 *)v142 + 1;
              while (v688)
              {
                if (v670 > 0x19999999)
                  goto LABEL_1347;
                v690 = *v689 - 48;
                if (v690 > 9)
                  goto LABEL_1347;
                v153 = 0;
                LOBYTE(v143) = 0;
                v671 = 0;
                v23 = __CFADD__(v690, 10 * v670);
                v670 = v690 + 10 * v670;
                --v688;
                ++v689;
                if (v23)
                  goto LABEL_1349;
              }
              if (v670 == -1)
                v153 = 0;
              else
                v153 = v670 & 0xFFFFFF00;
              if (v670 == -1)
                LOBYTE(v143) = 0;
              else
                LOBYTE(v143) = v670;
              if (v670 == -1)
                v671 = 0;
              else
                v671 = 0x100000000;
LABEL_1349:
              v146 = v143;
              if ((v671 & 0x100000000) == 0)
                goto LABEL_290;
LABEL_1350:
              v672 = v146 | v153;
              v673 = *((_QWORD *)v12 + 7);
              IndexQuickly = 10;
              while (1)
              {
                v674 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v675 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v674 + 0x4C) + 0x70))(v11, v12, v672, &v803);
                v676 = v675;
                if (*(_DWORD *)(v673 + 80))
                {
                  v679 = *(_DWORD *)(v673 + 80);
                  if ((v679 & 0x27) != 0 && (v679 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v673 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v680 = *(_QWORD *)(v673 + 16);
                  if (v680)
                    v681 = 1;
                  else
                    v681 = v676;
                  if ((v681 & 1) != 0)
                  {
                    if (!v680)
                      goto LABEL_182;
                    goto LABEL_192;
                  }
                }
                else if ((v675 & 1) != 0)
                {
                  goto LABEL_182;
                }
                if (BYTE2(v808[1]) == 3)
                {
                  if (BYTE4(v808[1]))
                    goto LABEL_215;
                  v677 = *(unsigned __int8 *)(v11 + 5);
                  if (v677 == 61)
                    goto LABEL_1356;
                }
                else
                {
                  v677 = *(unsigned __int8 *)(v11 + 5);
                  if (v677 == 61)
                  {
                    if (BYTE2(v808[1]) == 1)
                      goto LABEL_215;
                    goto LABEL_1356;
                  }
                }
                if ((v677 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v815 = 0;
                    v684 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v683 = (_BYTE)this ? v684 : 0;
                  }
                  else
                  {
                    v683 = *(_QWORD *)(v11 + 24);
                  }
                  if (v683 <= v672)
                    goto LABEL_215;
                }
LABEL_1356:
                if ((*(_WORD *)(v674 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
                {
                  v678 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v678)
                    v678 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v678 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v11, v12);
                  }
                  else
                  {
                    v678 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v678)
                      v678 = *(_QWORD *)(v11 + 16);
                  }
                  if (*(_DWORD *)(v673 + 80))
                  {
                    v682 = *(_DWORD *)(v673 + 80);
                    if ((v682 & 0x27) != 0 && (v682 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v673 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v673 + 16))
                      goto LABEL_215;
                  }
                }
                if ((v678 & 0xFFFE000000000002) == 0)
                {
                  v11 = v678;
                  if (*(unsigned __int8 *)(v678 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_215;
              }
            }
LABEL_1347:
            v153 = 0;
            LOBYTE(v143) = 0;
          }
          else
          {
            v153 = 0;
          }
          v671 = 0;
          goto LABEL_1349;
        }
        if (*(_QWORD *)(*(_QWORD *)(v38 + 41952) + 1768) == v36)
        {
          v606 = *(_QWORD *)(v11 + 8);
          if ((v606 & 1) != 0)
            v607 = (unsigned int *)(v11 + 16);
          else
            v607 = (unsigned int *)(v606 + 4);
          v608 = *v607;
          if ((v608 & 0x80000000) != 0)
            v609 = COERCE__INT64((double)v608) + 0x2000000000000;
          else
            v609 = v608 | 0xFFFE000000000000;
          v610 = 14;
          goto LABEL_1231;
        }
        if (!v36 || (v635 = *(_DWORD *)(v36 + 16), (v635 & 0x20) != 0))
        {
LABEL_1294:
          v611 = 0;
LABEL_1295:
          if (*(_DWORD *)(v38 + 80))
          {
            v708 = *(_DWORD *)(v38 + 80);
            if ((v708 & 0x27) != 0 && (v708 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v38 + 16))
              goto LABEL_192;
          }
          if ((v611 & 1) != 0)
            goto LABEL_182;
          goto LABEL_1297;
        }
        v636 = *(_WORD **)(v36 + 8);
        v637 = *(unsigned int *)(v36 + 4);
        if ((v635 & 4) == 0)
        {
          if ((_DWORD)v637)
          {
            v638 = (unsigned __int16)*v636 - 48;
            if (v638 <= 9 && (*v636 != 48 || v637 <= 1))
            {
              v653 = v636 + 1;
              v654 = v637 - 1;
              while (v654)
              {
                if (v638 > 0x19999999)
                  goto LABEL_1258;
                v655 = *v653 - 48;
                if (v655 > 9)
                  goto LABEL_1258;
                v639 = 0;
                LOBYTE(v637) = 0;
                v640 = 0;
                v23 = __CFADD__(v655, 10 * v638);
                v638 = v655 + 10 * v638;
                ++v653;
                --v654;
                if (v23)
                  goto LABEL_1293;
              }
              if (v638 != -1)
              {
                v640 = v638 & 0xFFFFFF00;
                v639 = 0x100000000;
                LOBYTE(v637) = v638;
LABEL_1293:
                v656 = v637;
                if ((v639 & 0x100000000) == 0)
                  goto LABEL_1294;
                goto LABEL_1658;
              }
            }
LABEL_1258:
            v639 = 0;
            LOBYTE(v637) = 0;
          }
          else
          {
            v639 = 0;
          }
          v640 = 0;
          goto LABEL_1293;
        }
        if ((_DWORD)v637)
        {
          v776 = *(unsigned __int8 *)v636 - 48;
          if (v776 <= 9 && (v637 < 2 || *(_BYTE *)v636 != 48))
          {
            v777 = v637 - 1;
            v778 = (unsigned __int8 *)v636 + 1;
            while (v777)
            {
              if (v776 > 0x19999999)
                goto LABEL_1655;
              v779 = *v778 - 48;
              if (v779 > 9)
                goto LABEL_1655;
              v656 = 0;
              LOBYTE(v637) = 0;
              v780 = 0;
              v23 = __CFADD__(v779, 10 * v776);
              v776 = v779 + 10 * v776;
              --v777;
              ++v778;
              if (v23)
                goto LABEL_1657;
            }
            if (v776 != -1)
            {
              v656 = v776 & 0xFFFFFF00;
              v780 = 0x100000000;
              LOBYTE(v637) = v776;
              goto LABEL_1657;
            }
          }
LABEL_1655:
          v656 = 0;
          LOBYTE(v637) = 0;
        }
        else
        {
          v656 = 0;
        }
        v780 = 0;
LABEL_1657:
        v640 = v637;
        if ((v780 & 0x100000000) == 0)
          goto LABEL_1294;
LABEL_1658:
        a3 = v640 | v656;
        v786 = *(_QWORD *)(v11 + 8);
        if ((v786 & 1) != 0)
          v787 = (_DWORD *)(v11 + 16);
        else
          v787 = (_DWORD *)(v786 + 4);
        if (*v787 > a3)
        {
          v609 = JSC::JSString::getIndex((JSC::JSString *)v11, v12, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v38 + 80))
            goto LABEL_1663;
          v788 = *(_DWORD *)(v38 + 80);
          if ((v788 & 0x27) != 0 && (v788 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v38 + 16))
          {
LABEL_1663:
            v610 = 10;
LABEL_1231:
            v803 = (uint64_t (*)(unint64_t))v609;
            LODWORD(v805) = v610;
            v807 = 0;
            v611 = 1;
            BYTE1(v808[1]) = 1;
            goto LABEL_1295;
          }
        }
        goto LABEL_1294;
      }
      v10 = *(_QWORD *)__s;
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v558 = *(unsigned __int8 *)(v10 + 5);
      if (v558 == 2)
      {
LABEL_1180:
        if (*(_DWORD *)(v35 + 80))
        {
          v589 = *(_DWORD *)(v35 + 80);
          if ((v589 & 0x27) != 0 && (v589 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v35 + 16))
          {
            v36 = 0;
            goto LABEL_66;
          }
        }
        v36 = *(_QWORD *)(v10 + 8);
        v568 = *((_QWORD *)v12 + 7);
        if ((v36 & 1) == 0)
        {
          if ((*(_BYTE *)(v36 + 16) & 0x10) == 0)
          {
            v569 = *(WTF::StringImpl **)(v568 + 64768);
            if (v569 != (WTF::StringImpl *)v36)
            {
              *(_DWORD *)v36 += 2;
              *(_QWORD *)(v568 + 64768) = v36;
              if (v569)
              {
                if (*(_DWORD *)v569 == 2)
                {
                  WTF::StringImpl::~StringImpl(v569, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v598, v599, v600, v601, v602, v603, v604, v605);
                }
                else
                {
                  *(_DWORD *)v569 -= 2;
                }
              }
              v570 = *(JSC::VM **)(v10 + 8);
              if (v570)
              {
                if ((*((_BYTE *)v570 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v570 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v570, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
                  v570 = __dst;
                }
              }
              v571 = *(WTF::StringImpl **)(v568 + 64776);
              *(_QWORD *)(v568 + 64776) = v570;
              if (v571)
              {
                if (*(_DWORD *)v571 == 2)
                {
                  WTF::StringImpl::~StringImpl(v571, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v590, v591, v592, v593, v594, v595, v596, v597);
                }
                else
                {
                  *(_DWORD *)v571 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v572 = *(JSC::VM **)(v568 + 64776);
              *(_DWORD *)v572 += 2;
              __dst = v572;
              __dmb(0xAu);
              v573 = *(JSC::VM **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = __dst;
              __dst = v573;
              v574 = (_QWORD *)(v568 + 808);
              v575 = *(unsigned int *)(v568 + 820);
              if ((_DWORD)v575 == *(_DWORD *)(v568 + 816))
              {
                v577 = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v574, v575 + 1, (unint64_t)&__dst);
                v575 = *(unsigned int *)(v568 + 820);
                v576 = (JSC::VM **)(*(_QWORD *)(v568 + 808) + 8 * v575);
                v573 = *v577;
              }
              else
              {
                v576 = (JSC::VM **)(*v574 + 8 * v575);
                v577 = &__dst;
              }
              *v577 = 0;
              *v576 = v573;
              *(_DWORD *)(v568 + 820) = v575 + 1;
              v578 = __dst;
              __dst = 0;
              if (v578)
              {
                if (*(_DWORD *)v578 == 2)
                {
                  WTF::StringImpl::~StringImpl(v578, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v580, v581, v582, v583, v584, v585, v586, v587);
                }
                else
                {
                  *(_DWORD *)v578 -= 2;
                }
              }
            }
            v36 = *(_QWORD *)(v568 + 64776);
          }
          goto LABEL_64;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, v12);
        if (*(_DWORD *)(v568 + 80))
        {
          v579 = *(_DWORD *)(v568 + 80);
          if ((v579 & 0x27) != 0 && (v579 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v568 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v568 + 16))
          {
LABEL_419:
            v36 = 0;
            v100 = __dst;
            __dst = 0;
            if (!v100)
              goto LABEL_66;
            goto LABEL_197;
          }
        }
LABEL_195:
        v36 = (unint64_t)__dst;
        if (!__dst)
          goto LABEL_66;
        *(_DWORD *)__dst += 2;
        __dst = 0;
        v100 = (JSC::VM *)v36;
LABEL_197:
        if (*(_DWORD *)v100 != 2)
        {
          *(_DWORD *)v100 -= 2;
          goto LABEL_66;
        }
        goto LABEL_1178;
      }
      if (v558 == 4)
      {
        v36 = *(_QWORD *)(v10 + 8);
        v559 = *(_DWORD *)v36;
        *(_DWORD *)v36 += 4;
        v37 = v559 + 2;
        if (v37)
          goto LABEL_65;
        v100 = (JSC::VM *)v36;
LABEL_1178:
        WTF::StringImpl::~StringImpl(v100, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
        goto LABEL_66;
      }
    }
    v10 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)__s, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_1180;
  }
  if (*(_BYTE *)(a3 + 5) != 2
    || (v14 = *(_QWORD *)(a3 + 8)) == 0
    || (v14 & 1) != 0
    || (v15 = *(_DWORD *)(v14 + 16), (v15 & 0x10) == 0))
  {
    v813 = this;
    goto LABEL_26;
  }
  *(_DWORD *)v14 += 2;
  if (*((_DWORD *)v802 + 20))
  {
    v140 = *((_DWORD *)v802 + 20);
    if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v802 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v802 + 2))
    {
      IndexQuickly = 0;
      goto LABEL_567;
    }
    v15 = *(_DWORD *)(v14 + 16);
  }
  v16 = *(_BYTE **)(v14 + 8);
  v17 = *(unsigned int *)(v14 + 4);
  if ((v15 & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      v18 = *v16 - 48;
      if (v18 <= 9 && (v17 < 2 || *v16 != 48))
      {
        v240 = v17 - 1;
        v241 = v16 + 1;
        while (v240)
        {
          if (v18 <= 0x19999999)
          {
            v242 = *v241 - 48;
            if (v242 <= 9)
            {
              v23 = __CFADD__(v242, 10 * v18);
              v18 = v242 + 10 * v18;
              --v240;
              ++v241;
              if (!v23)
                continue;
            }
          }
          goto LABEL_477;
        }
LABEL_476:
        if (v18 != -1)
          goto LABEL_571;
      }
    }
  }
  else if ((_DWORD)v17)
  {
    v18 = *(unsigned __int16 *)v16 - 48;
    if (v18 <= 9 && (*(_WORD *)v16 != 48 || v17 <= 1))
    {
      v20 = (unsigned __int16 *)(v16 + 2);
      v21 = v17 - 1;
      while (v21)
      {
        if (v18 <= 0x19999999)
        {
          v22 = *v20 - 48;
          if (v22 <= 9)
          {
            v23 = __CFADD__(v22, 10 * v18);
            v18 = v22 + 10 * v18;
            ++v20;
            --v21;
            if (!v23)
              continue;
          }
        }
        goto LABEL_477;
      }
      goto LABEL_476;
    }
  }
LABEL_477:
  v243 = (_QWORD *)*((_QWORD *)v802 + 5244);
  if (v243[221] != v14 && v243[246] != v14 && v243[270] != v14 && v243[2] != v14)
  {
    v244 = (uint64_t *)((char *)v802 + 93080);
    v805 = 0xFFFFFFFF00000000;
    LOBYTE(v809) = 0;
    v810 = 0;
    v811 = 0;
    v812 = 0;
    v245 = v14 >> 4;
    v807 = 0;
    memset(v808, 0, 13);
    v806 = (JSC::Structure *)v9;
    v246 = 1;
    v247 = (JSC::Structure *)v11;
    while (1)
    {
      v248 = *((_BYTE *)v247 + 6);
      if ((v248 & 8) != 0)
      {
        v261 = *((unsigned __int8 *)v247 + 5);
        if (v261 != 26 && v261 != 36 && v247 != *((JSC::Structure **)v12 + 84))
        {
          v469 = *((_QWORD *)v12 + 7);
          while (1)
          {
            v470 = *(_DWORD *)v247 & 0xFFFFFFFE;
            v471 = 16 * v470;
            if ((v248 & 8) == 0)
            {
              if ((_DWORD)v245)
              {
                if ((v245 & ~*(_DWORD *)(16 * v470 + 0x20)) == 0)
                {
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v470), (JSC::VM *)v469, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  if (v472)
                  {
                    __dst = (JSC::VM *)v14;
                    v473 = JSC::PropertyTable::get(v472, (uint64_t *)&__dst);
                    a6 = v473;
                    if ((_DWORD)v473 != -1)
                    {
                      a5 = HIDWORD(v473);
                      if ((int)v473 <= 63)
                      {
                        v519 = (uint64_t)v247 + 16;
                        v520 = v473 << 32;
                      }
                      else
                      {
                        v519 = *((_QWORD *)v247 + 1) - 8;
                        v520 = 0x3F00000000 - (v473 << 32);
                      }
                      a4 = *(_QWORD *)(v519 + (v520 >> 29));
                      if ((a4 & 0xFFFE000000000002) != 0)
                        goto LABEL_1062;
                      v523 = *(unsigned __int8 *)(a4 + 5);
                      if (v523 == 5)
                      {
                        JSC::JSObject::fillGetterPropertySlot((unsigned int *)v247, v469, (uint64_t)&v803, a4, SHIDWORD(v473), v473);
LABEL_1071:
                        v524 = 1;
                      }
                      else
                      {
                        if (v523 != 6)
                        {
LABEL_1062:
                          v803 = (uint64_t (*)(unint64_t))a4;
                          v807 = v247;
                          v805 = __PAIR64__(v473, HIDWORD(v473));
                          v524 = 1;
                          LOWORD(v808[1]) = 257;
                          goto LABEL_1072;
                        }
                        v545 = *(_DWORD *)(v471 + 16) & 3;
                        v546 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v548 = *(int8x16_t ***)(a4 + 24);
                          v547 = *(_QWORD *)(a4 + 32);
                          v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                          v804 = v546;
                          LODWORD(v805) = HIDWORD(v473);
                          v807 = v247;
                          BYTE1(v808[1]) = 3;
                          v524 = 1;
                          if (v545 != 2)
                            LOBYTE(v808[1]) = 1;
                          BYTE3(v808[1]) = 1;
                          v811 = v548;
                          v812 = v547;
                        }
                        else
                        {
                          v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
                          v804 = v546;
                          LODWORD(v805) = HIDWORD(v473);
                          v807 = v247;
                          v524 = 1;
                          BYTE1(v808[1]) = 3;
                          if (v545 != 2)
                            LOBYTE(v808[1]) = 1;
                        }
                      }
LABEL_1072:
                      if (!*((_DWORD *)v802 + 20))
                      {
                        if (v524)
                          goto LABEL_1074;
LABEL_544:
                        IndexQuickly = 10;
LABEL_564:
                        if (v810)
                        {
                          v281 = v809;
                          v282 = *(_DWORD *)(v809 + 4);
                          if (!v282)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1987B89C0);
                          }
                          goto LABEL_566;
                        }
                        goto LABEL_567;
                      }
                      v641 = *((_DWORD *)v802 + 20);
                      if ((v641 & 0x27) != 0 && (v641 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v802 + 64), 7u, a3, a4, a5, a6, a7, a8);
                      v642 = *((_QWORD *)v802 + 2);
                      v643 = v642 == 0;
                      if (v642)
                        v644 = 0;
                      else
                        v644 = v524;
                      if (v643)
                        IndexQuickly = 10;
                      else
                        IndexQuickly = 0;
                      if (!v644)
                        goto LABEL_564;
LABEL_1074:
                      if (BYTE1(v808[1]) != 1)
                      {
                        if (BYTE1(v808[1]) == 2)
                        {
                          v270 = v12;
LABEL_547:
                          v271 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v803, v270, a3, a4, a5, a6, a7, a8);
LABEL_563:
                          IndexQuickly = v271;
                          goto LABEL_564;
                        }
                        v549 = v807;
                        v273 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
                        if ((v805 & 0x20) != 0)
                          v549 = v806;
                        if (BYTE3(v808[1]) == 1)
                        {
                          v274 = (JSC::VM *)*((_QWORD *)v12 + 7);
                          v275 = v811;
                          if (((unint64_t)v549 & 0xFFFE000000000002) != 0)
                            goto LABEL_1145;
                          v550 = *(unsigned int *)(16 * (*(_DWORD *)v549 & 0xFFFFFFFE) + 0x4C);
                          v551 = *(_DWORD *)(16 * (*(_DWORD *)v549 & 0xFFFFFFFE) + 0x4C) != 0;
                          v552 = 16 * v550;
                          if ((_DWORD)v550)
                            v553 = v811 == (int8x16_t **)v552;
                          else
                            v553 = 1;
                          if (!v553)
                          {
                            do
                            {
                              v552 = *(_QWORD *)(v552 + 16);
                              v551 = v552 != 0;
                            }
                            while ((int8x16_t **)v552 != v811 && v552 != 0);
                          }
                          if (!v551)
                          {
LABEL_1145:
                            __dst = v274;
                            v271 = JSC::throwDOMAttributeGetterTypeError(v273, &__dst, v275, (WTF::StringImpl *)v14);
                            goto LABEL_563;
                          }
                        }
LABEL_562:
                        v271 = v803(v273);
                        goto LABEL_563;
                      }
                      goto LABEL_537;
                    }
                  }
                }
              }
              if ((*((_BYTE *)v247 + 6) & 0x20) != 0
                && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v247, (JSC::VM *)v469, v14, (uint64_t)&v803) & 1) != 0)
              {
                goto LABEL_1071;
              }
              goto LABEL_957;
            }
            v798 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * v470 + 0x4C) + 0x68))(v247, v12, v14, &v803);
            if (*(_DWORD *)(v469 + 80))
            {
              v501 = *(_DWORD *)(v469 + 80);
              if ((v501 & 0x27) != 0 && (v501 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v469 + 64), 7u, a3, a4, a5, a6, a7, a8);
              v502 = v798;
              if (*(_QWORD *)(v469 + 16))
                v502 = 1;
              if ((v502 & 1) != 0)
              {
                v524 = *(_QWORD *)(v469 + 16) == 0;
                goto LABEL_1072;
              }
            }
            else if ((v798 & 1) != 0)
            {
              goto LABEL_1071;
            }
            if (BYTE2(v808[1]) == 3)
            {
              if (BYTE4(v808[1]))
                goto LABEL_1066;
              v478 = *((unsigned __int8 *)v247 + 5);
              if (v478 == 61)
                goto LABEL_957;
            }
            else
            {
              v478 = *((unsigned __int8 *)v247 + 5);
              if (v478 == 61)
              {
                if (BYTE2(v808[1]) == 1)
                  goto LABEL_1066;
                goto LABEL_957;
              }
            }
            if ((v478 - 50) < 0xFFFFFFF5)
              goto LABEL_957;
            v479 = *(_DWORD *)(v14 + 16);
            if ((v479 & 0x20) != 0)
              goto LABEL_957;
            v480 = *(unsigned int *)(v14 + 4);
            if (!(_DWORD)v480)
              goto LABEL_957;
            v481 = *(unsigned __int8 **)(v14 + 8);
            if ((v479 & 4) != 0)
            {
              v482 = *v481;
              if ((_DWORD)v480 == 1)
              {
LABEL_983:
                if ((v482 - 48) < 0xA)
                  goto LABEL_1066;
                goto LABEL_957;
              }
              if (v482 == 45)
              {
                v482 = v481[1];
                goto LABEL_987;
              }
              if ((v482 - 48) < 0xA)
                goto LABEL_998;
              if ((_DWORD)v480 == 8)
                goto LABEL_997;
            }
            else
            {
              v482 = *(unsigned __int16 *)v481;
              if ((_DWORD)v480 == 1)
                goto LABEL_983;
              if (v482 == 45)
              {
                v482 = *((unsigned __int16 *)v481 + 1);
LABEL_987:
                if ((v482 - 48) < 0xA)
                {
                  if ((_DWORD)v480 == 2)
                    goto LABEL_1066;
                  goto LABEL_998;
                }
                if ((_DWORD)v480 != 9)
                  goto LABEL_957;
LABEL_997:
                if (v482 != 73)
                  goto LABEL_957;
                goto LABEL_998;
              }
              if ((v482 - 48) < 0xA || (_DWORD)v480 == 8 && v482 == 73)
                goto LABEL_998;
            }
            if ((_DWORD)v480 != 3 || v482 != 78)
              goto LABEL_957;
LABEL_998:
            v793 = v793 & 0xFFFFFF0000000000 | v480 | ((unint64_t)((v479 >> 2) & 1) << 32);
            JSC::jsToNumber(v481, v793);
            v484 = (v483 >> 52) & 0x7FF;
            if ((_DWORD)v484 == 2047)
            {
              if ((v483 & 0xFFFFFFFFFFFFFLL) != 0)
              {
                qmemcpy(__s, "NaN", 3);
                v485 = &__s[3];
              }
              else
              {
                if ((v483 & 0x8000000000000000) != 0)
                {
                  __s[0] = 45;
                  v490 = &__s[1];
                }
                else
                {
                  v490 = __s;
                }
                *(_QWORD *)v490 = 0x7974696E69666E49;
                v485 = v490 + 8;
              }
              goto LABEL_1012;
            }
            v486 = v483 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v483 & 0x8000000000000000) != 0 && v486)
            {
              __s[0] = 45;
              v799 = &__s[1];
            }
            else
            {
              if (!v486)
              {
                __s[0] = 48;
                v485 = &__s[1];
                goto LABEL_1012;
              }
              v799 = __s;
            }
            v487 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v483 & 0x800FFFFFFFFFFFFFLL, v484);
            v485 = WTF::dragonbox::detail::to_shortest(v487, v488, (uint64_t)v799, v489);
LABEL_1012:
            *v485 = 0;
            v800 = strlen(__s);
            memcpy(&__dst, __s, v800);
            *((_BYTE *)&__dst + v800) = 0;
            v491 = *(unsigned int *)(v14 + 4);
            v492 = *(unsigned __int8 **)(v14 + 8);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              if ((_DWORD)v491)
              {
                v497 = &__dst;
                v498 = *(unsigned int *)(v14 + 4);
                do
                {
                  v500 = *(unsigned __int8 *)v497;
                  v497 = (JSC::VM **)((char *)v497 + 1);
                  v499 = v500;
                  if (!v500 || *v492 != v499)
                    goto LABEL_957;
                  ++v492;
                }
                while (--v498);
              }
            }
            else if ((_DWORD)v491)
            {
              v493 = &__dst;
              v494 = *(unsigned int *)(v14 + 4);
              do
              {
                v496 = *(unsigned __int8 *)v493;
                v493 = (JSC::VM **)((char *)v493 + 1);
                v495 = v496;
                if (!v496 || *(unsigned __int16 *)v492 != v495)
                  goto LABEL_957;
                v492 += 2;
              }
              while (--v494);
            }
            if (!*((_BYTE *)&__dst + v491))
              goto LABEL_1066;
LABEL_957:
            if ((*(_WORD *)(v471 + 12) & 0x800) == 0)
            {
              v474 = *(_DWORD *)v247;
LABEL_959:
              v475 = *(_QWORD *)(16 * (v474 & 0xFFFFFFFE) + 0x30);
              if (!v475)
                v475 = *((_QWORD *)v247 + 2);
              goto LABEL_961;
            }
            v474 = *(_DWORD *)v247;
            if (BYTE2(v808[1]) == 3)
              goto LABEL_959;
            v476 = 16 * (v474 & 0xFFFFFFFE);
            if ((*(_WORD *)(v476 + 12) & 0x800) != 0)
            {
              v475 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(v476 + 76)
                                                                                        + 0xB0))(v247, v12);
            }
            else
            {
              v475 = *(_QWORD *)(v476 + 48);
              if (!v475)
                v475 = *((_QWORD *)v247 + 2);
            }
            if (*(_DWORD *)(v469 + 80))
            {
              v477 = *(_DWORD *)(v469 + 80);
              if ((v477 & 0x27) != 0 && (v477 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v469 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v469 + 16))
              {
LABEL_1066:
                v524 = 0;
                goto LABEL_1072;
              }
            }
LABEL_961:
            if ((v475 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v475 + 5) < 0x17u)
              goto LABEL_1066;
            v248 = *(_BYTE *)(v475 + 6);
            v247 = (JSC::Structure *)v475;
          }
        }
      }
      if (!(_DWORD)v245
        || (v249 = 16 * (*(_DWORD *)v247 & 0xFFFFFFFE), (v245 & ~*(_DWORD *)(v249 + 0x20)) != 0)
        || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE)), v802, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v250)|| (__dst = (JSC::VM *)v14, v251 = JSC::PropertyTable::get(v250, (uint64_t *)&__dst), a6 = v251, (_DWORD)v251 == -1))
      {
        if ((*((_BYTE *)v247 + 6) & 0x20) != 0)
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v247, v802, v14, (uint64_t)&v803);
        else
          OwnStaticPropertySlot = 0;
      }
      else
      {
        if ((int)v251 <= 63)
        {
          v252 = (uint64_t)v247 + 16;
          v253 = v251 << 32;
        }
        else
        {
          v252 = *((_QWORD *)v247 + 1) - 8;
          v253 = 0x3F00000000 - (v251 << 32);
        }
        a5 = HIDWORD(v251);
        a4 = *(_QWORD *)(v252 + (v253 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_495;
        v255 = *(unsigned __int8 *)(a4 + 5);
        if (v255 == 5)
        {
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v247, (uint64_t)v802, (uint64_t)&v803, a4, SHIDWORD(v251), v251);
          OwnStaticPropertySlot = 1;
          goto LABEL_498;
        }
        if (v255 == 6)
        {
          v262 = *(_DWORD *)(v249 + 16) & 3;
          v263 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v265 = *(int8x16_t ***)(a4 + 24);
            v264 = *(_QWORD *)(a4 + 32);
            v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v804 = v263;
            LODWORD(v805) = HIDWORD(v251);
            v807 = v247;
            BYTE1(v808[1]) = 3;
            OwnStaticPropertySlot = 1;
            if (v262 != 2)
              LOBYTE(v808[1]) = 1;
            BYTE3(v808[1]) = 1;
            v811 = v265;
            v812 = v264;
          }
          else
          {
            v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v804 = v263;
            LODWORD(v805) = HIDWORD(v251);
            v807 = v247;
            OwnStaticPropertySlot = 1;
            BYTE1(v808[1]) = 3;
            if (v262 != 2)
              LOBYTE(v808[1]) = 1;
          }
        }
        else
        {
LABEL_495:
          v803 = (uint64_t (*)(unint64_t))a4;
          v807 = v247;
          v805 = __PAIR64__(v251, HIDWORD(v251));
          OwnStaticPropertySlot = 1;
          LOWORD(v808[1]) = 257;
        }
      }
LABEL_498:
      if ((*(_DWORD *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0x10) & 3) == 2
        || (v256 = *(unsigned __int16 *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0xC), (v256 & 8) != 0))
      {
        v257 = 0;
      }
      else if ((v256 & 0x10) != 0)
      {
        v257 = (v256 >> 5) & 1;
      }
      else
      {
        v257 = 1;
      }
      v258 = v246 & v257;
      if (OwnStaticPropertySlot)
      {
        v266 = BYTE1(v808[1]);
        if (v258)
        {
          v267 = (JSC::VM **)v12;
          if (BYTE1(v808[1]) == 1 && LOBYTE(v808[1]) == 1)
          {
            if (SHIDWORD(v805) >= 0x10000)
              goto LABEL_537;
            a4 = (uint64_t)v807;
            this = *(unsigned int *)v11;
            if (v807 != (JSC::Structure *)v11 && (*(_BYTE *)((16 * this) | 0x10) & 3) != 0)
              goto LABEL_537;
            if ((*v244 & 1) != 0)
              v268 = 0;
            else
              v268 = *v244;
            JSC::MegamorphicCache::initAsHit(v268, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v14, (uint64_t)v807, WORD2(v805), v807 == (JSC::Structure *)v11, a7, a8);
            v266 = BYTE1(v808[1]);
          }
        }
        else
        {
          v267 = (JSC::VM **)v12;
        }
        if (v266 != 1)
        {
          if (v266 == 2)
          {
            v270 = (JSC::JSGlobalObject *)v267;
            goto LABEL_547;
          }
          v272 = v807;
          v273 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
          if ((v805 & 0x20) != 0)
            v272 = v806;
          if (BYTE3(v808[1]) == 1)
          {
            v274 = v267[7];
            v275 = v811;
            if (((unint64_t)v272 & 0xFFFE000000000002) != 0)
              goto LABEL_1145;
            v276 = *(unsigned int *)(16 * (*(_DWORD *)v272 & 0xFFFFFFFE) + 0x4C);
            v277 = *(_DWORD *)(16 * (*(_DWORD *)v272 & 0xFFFFFFFE) + 0x4C) != 0;
            v278 = 16 * v276;
            if ((_DWORD)v276)
              v279 = v811 == (int8x16_t **)v278;
            else
              v279 = 1;
            if (!v279)
            {
              do
              {
                v278 = *(_QWORD *)(v278 + 16);
                v277 = v278 != 0;
              }
              while ((int8x16_t **)v278 != v811 && v278 != 0);
            }
            if (!v277)
              goto LABEL_1145;
          }
          goto LABEL_562;
        }
LABEL_537:
        IndexQuickly = (uint64_t)v803;
        goto LABEL_564;
      }
      v259 = *(JSC::Structure **)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0x30);
      if ((*(_WORD *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v259 == 0)
        v246 = 0;
      else
        v246 = v258;
      if (!v259)
        v259 = (JSC::Structure *)*((_QWORD *)v247 + 2);
      if (((unint64_t)v259 & 0xFFFE000000000002) == 0)
      {
        v247 = v259;
        if (*((unsigned __int8 *)v259 + 5) > 0x16u)
          continue;
      }
      if (v246)
      {
        this = *(unsigned int *)v11;
        if ((*(_BYTE *)((16 * this) | 0x10) & 3) == 0)
        {
          if ((*v244 & 1) != 0)
            v269 = 0;
          else
            v269 = *v244;
          JSC::MegamorphicCache::initAsMiss(v269, (WTF::AtomStringImpl *)this, (WTF::StringImpl *)v14, a4, a5, a6, a7, a8);
        }
      }
      goto LABEL_544;
    }
  }
LABEL_571:
  v813 = v11;
  v292 = *((_QWORD *)v12 + 7);
  if (((v10 | v11) & 0xFFFE000000000002) != 0)
    goto LABEL_596;
  if (*(_BYTE *)(v10 + 5) != 2)
    goto LABEL_596;
  v293 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
  if (((*(_DWORD *)(v293 + 0x10) | *(unsigned __int8 *)(v293 + 0xA)) & 8) != 0)
    goto LABEL_596;
  v294 = *(_QWORD *)(v10 + 8);
  if ((v294 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v10, v12);
  }
  else
  {
    if ((*(_BYTE *)(v294 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v294 += 2;
      goto LABEL_582;
    }
    WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v10 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &__dst);
  }
  v294 = (unint64_t)__dst;
LABEL_582:
  if (*(_DWORD *)(v292 + 80))
  {
    v425 = *(_DWORD *)(v292 + 80);
    if ((v425 & 0x27) != 0 && (v425 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v292 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v292 + 16))
    {
      IndexQuickly = 0;
      if (!v294)
        goto LABEL_567;
      goto LABEL_592;
    }
  }
  if (v294)
  {
    if ((v294 >> 4))
    {
      if (((v294 >> 4) & ~*(_DWORD *)(v293 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v293, (JSC::VM *)v292, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v295)
        {
          __dst = (JSC::VM *)v294;
          v296 = JSC::PropertyTable::get(v295, (uint64_t *)&__dst);
          if ((_DWORD)v296 != -1)
          {
            if ((int)v296 <= 63)
            {
              v297 = v11 + 16;
              v298 = v296 << 32;
            }
            else
            {
              v297 = *(_QWORD *)(v11 + 8) - 8;
              v298 = 0x3F00000000 - (v296 << 32);
            }
            IndexQuickly = *(_QWORD *)(v297 + (v298 >> 29));
            if (IndexQuickly)
            {
LABEL_592:
              if (*(_DWORD *)v294 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v294, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v363, v364, v365, v366, v367, v368, v369, v370);
              }
              else
              {
                *(_DWORD *)v294 -= 2;
              }
              goto LABEL_567;
            }
          }
        }
      }
    }
    if (*(_DWORD *)v294 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v294, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v352, v353, v354, v355, v356, v357, v358, v359);
    }
    else
    {
      *(_DWORD *)v294 -= 2;
    }
  }
LABEL_596:
  a9.i64[0] = 0xFFFFFFFF00000000;
  v805 = 0xFFFFFFFF00000000;
  LOBYTE(v809) = 0;
  v810 = 0;
  v811 = 0;
  v812 = 0;
  v807 = 0;
  memset(v808, 0, 13);
  v806 = (JSC::Structure *)v9;
  if (v10 >= 0xFFFE000000000000 && (v10 & 0x80000000) == 0)
  {
    v299 = v10;
    goto LABEL_599;
  }
  if (v10 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v10 - 0x2000000000000;
    v299 = *(double *)a9.i64;
    if ((_DWORD)v299 != -1 && *(double *)a9.i64 == (double)v299)
    {
LABEL_599:
      v300 = *(unsigned __int8 *)(v11 + 5);
      if (v300 == 2)
      {
        v301 = *(_QWORD *)(v11 + 8);
        if ((v301 & 1) != 0)
          v302 = (_DWORD *)(v11 + 16);
        else
          v302 = (_DWORD *)(v301 + 4);
        if (*v302 > v299)
        {
          v303 = JSC::JSString::getIndex((JSC::JSString *)v11, v12, v299, a4, a5, a6, a7, a8, a9);
LABEL_605:
          IndexQuickly = v303;
          goto LABEL_766;
        }
      }
      else
      {
        if (v300 <= 0x16)
        {
          v332 = *((_QWORD *)v12 + 7);
          goto LABEL_673;
        }
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v11, v299, 0);
        if (IndexQuickly)
          goto LABEL_766;
        if ((*(_BYTE *)(v11 + 4) & 0xF) != 9
          || v299 >= *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8)
          || ((v325 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28),
               v326 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8),
               (v326 & 0x10) != 0)
            ? (v327 = ((v326 & 0xE) + 10) >> 1)
            : (v327 = (v326 >> 1) & 7),
              (v328 = *(_DWORD *)(v325 + 4 * v327 + 852)) != 0 ? (v329 = 16 * (v328 & 0xFFFFFFFE)) : (v329 = 0),
              v329 != 16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
           || ((v330 = *(_QWORD *)(v325 + 2304), (v330 & 1) != 0)
             ? (v331 = (v330 >> 1) & 3)
             : (v331 = *(unsigned __int8 *)(v330 + 4)),
               v331 == 2)))
        {
          v300 = *(unsigned __int8 *)(v11 + 5);
          if (v300 != 34)
            goto LABEL_656;
          JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v11, v299);
        }
      }
      v300 = *(unsigned __int8 *)(v11 + 5);
LABEL_656:
      v332 = *((_QWORD *)v12 + 7);
      if (v300 > 0x16)
      {
LABEL_684:
        v343 = v12;
        IndexQuickly = 10;
        while (1)
        {
          v344 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
          v345 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v344 + 0x4C) + 0x70))(v11, v343, v299, &v803);
          if (*(_DWORD *)(v332 + 80))
          {
            v348 = *(_DWORD *)(v332 + 80);
            if ((v348 & 0x27) != 0 && (v348 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v332 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v332 + 16))
              goto LABEL_766;
          }
          if ((v345 & 1) != 0)
          {
            if (BYTE1(v808[1]) == 1)
              goto LABEL_725;
            if (BYTE1(v808[1]) == 2)
            {
              v303 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v803, v343, a3, a4, a5, a6, a7, a8);
              goto LABEL_605;
            }
            v714 = (uint64_t **)*((_QWORD *)v343 + 7);
            JSC::Identifier::from(v714, v299, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)__s);
            v715 = *(WTF::StringImpl **)__s;
            v627 = v807;
            v716 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
            if ((v805 & 0x20) != 0)
              v627 = v806;
            if (BYTE3(v808[1]) != 1)
              goto LABEL_1249;
            v628 = v811;
            if (((unint64_t)v627 & 0xFFFE000000000002) != 0)
              goto LABEL_1609;
            v629 = *(unsigned int *)(16 * (*(_DWORD *)v627 & 0xFFFFFFFE) + 0x4C);
            v630 = *(_DWORD *)(16 * (*(_DWORD *)v627 & 0xFFFFFFFE) + 0x4C) != 0;
            v631 = 16 * v629;
            if ((_DWORD)v629)
              v632 = v811 == (int8x16_t **)v631;
            else
              v632 = 1;
            if (!v632)
            {
              do
              {
                v631 = *(_QWORD *)(v631 + 16);
                v630 = v631 != 0;
              }
              while ((int8x16_t **)v631 != v811 && v631 != 0);
            }
            goto LABEL_1248;
          }
          if (BYTE2(v808[1]) == 3)
          {
            if (BYTE4(v808[1]))
              goto LABEL_766;
            v346 = *(unsigned __int8 *)(v11 + 5);
            if (v346 == 61)
              goto LABEL_690;
          }
          else
          {
            v346 = *(unsigned __int8 *)(v11 + 5);
            if (v346 == 61)
            {
              if (BYTE2(v808[1]) == 1)
                goto LABEL_766;
              goto LABEL_690;
            }
          }
          if ((v346 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              v815 = 0;
              v351 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v350 = (_BYTE)this ? v351 : 0;
            }
            else
            {
              v350 = *(_QWORD *)(v11 + 24);
            }
            if (v350 <= v299)
              goto LABEL_766;
          }
LABEL_690:
          if ((*(_WORD *)(v344 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
          {
            v347 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v347)
              v347 = *(_QWORD *)(v11 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v347 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v11, v343);
            }
            else
            {
              v347 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v347)
                v347 = *(_QWORD *)(v11 + 16);
            }
            if (*(_DWORD *)(v332 + 80))
            {
              v349 = *(_DWORD *)(v332 + 80);
              if ((v349 & 0x27) != 0 && (v349 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v332 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v332 + 16))
                goto LABEL_766;
            }
          }
          if ((v347 & 0xFFFE000000000002) == 0)
          {
            v11 = v347;
            if (*(unsigned __int8 *)(v347 + 5) > 0x16u)
              continue;
          }
          goto LABEL_766;
        }
      }
LABEL_673:
      if (v300 != 2)
        goto LABEL_682;
      v337 = *(_QWORD *)(v11 + 8);
      if ((v337 & 1) != 0)
        v338 = (_DWORD *)(v11 + 16);
      else
        v338 = (_DWORD *)(v337 + 4);
      if (*v338 <= v299)
      {
        v339 = (uint64_t ***)v12;
      }
      else
      {
        v339 = (uint64_t ***)v12;
        v340 = JSC::JSString::getIndex((JSC::JSString *)v11, v12, v299, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v332 + 80))
          goto LABEL_679;
        v468 = *(_DWORD *)(v332 + 80);
        if ((v468 & 0x27) != 0 && (v468 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v332 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v332 + 16))
        {
LABEL_679:
          v803 = (uint64_t (*)(unint64_t))v340;
          LODWORD(v805) = 10;
          v807 = 0;
          v341 = 1;
          BYTE1(v808[1]) = 1;
          goto LABEL_680;
        }
      }
      v341 = 0;
LABEL_680:
      if (*(_DWORD *)(v332 + 80))
      {
        v467 = *(_DWORD *)(v332 + 80);
        if ((v467 & 0x27) != 0 && (v467 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v332 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v332 + 16))
          goto LABEL_813;
      }
      v12 = (JSC::JSGlobalObject *)v339;
      if (v341)
      {
        if (BYTE1(v808[1]) == 1)
        {
LABEL_725:
          IndexQuickly = (uint64_t)v803;
          goto LABEL_766;
        }
        v714 = v339[7];
        JSC::Identifier::from(*((uint64_t ***)v12 + 7), v299, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)__s);
        v715 = *(WTF::StringImpl **)__s;
        v716 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
        if (BYTE3(v808[1]) != 1)
          goto LABEL_1249;
        v628 = v811;
        v717 = *(unsigned int *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x4C);
        v630 = *(_DWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v717)
        {
          v718 = 16 * v717;
          if (v811 != (int8x16_t **)v718)
          {
            do
            {
              v718 = *(_QWORD *)(v718 + 16);
              v630 = v718 != 0;
            }
            while ((int8x16_t **)v718 != v811 && v718 != 0);
          }
        }
LABEL_1248:
        if (!v630)
        {
LABEL_1609:
          __dst = (JSC::VM *)v714;
          v634 = JSC::throwDOMAttributeGetterTypeError(v716, &__dst, v628, v715);
        }
        else
        {
LABEL_1249:
          v634 = v803(v716);
        }
        IndexQuickly = v634;
        v380 = *(WTF::StringImpl **)__s;
        *(_QWORD *)__s = 0;
        if (v380)
        {
          if (*(_DWORD *)v380 == 2)
            goto LABEL_770;
          *(_DWORD *)v380 -= 2;
        }
        goto LABEL_766;
      }
LABEL_682:
      v342 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v813, (unint64_t)v12);
      if (v342)
      {
        v11 = v342;
        v332 = *((_QWORD *)v12 + 7);
        goto LABEL_684;
      }
LABEL_813:
      IndexQuickly = 0;
      goto LABEL_766;
    }
  }
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v612 = (JSC::VM *)*((_QWORD *)v12 + 7);
    v613 = WTF::fastCompactMalloc((WTF *)0x20);
    v614.i64[0] = 0x1000000002;
    *(_QWORD *)v613 = 0x1000000002;
    *(_QWORD *)(v613 + 8) = "is not an object";
    *(_DWORD *)(v613 + 16) = 4;
    __dst = (JSC::VM *)v613;
    v626 = JSC::createError((unint64_t)v12, v11, (uint64_t *)&__dst, (uint64_t)JSC::defaultSourceAppender, v615, v616, v617, v618, v614);
    if (*(_DWORD *)v613 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v613, v619, v620, v621, v622, v623, v624, v625);
      WTF::fastFree(v645, v646, v647, v648, v649, v650, v651, v652);
    }
    else
    {
      *(_DWORD *)v613 -= 2;
    }
    JSC::VM::throwException(v612, v12, v626, v621, v622, v623, v624, v625);
  }
  if (*(_DWORD *)(v292 + 80))
  {
    v426 = *(_DWORD *)(v292 + 80);
    if ((v426 & 0x27) != 0 && (v426 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v292 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v292 + 16))
      goto LABEL_813;
  }
  v304 = *((_QWORD *)v12 + 7);
  if (*(_BYTE *)(v10 + 5) != 2)
  {
    v691 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)v12, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    *(_QWORD *)__s = v691;
    if (*(_DWORD *)(v304 + 80))
    {
      v756 = *(_DWORD *)(v304 + 80);
      if ((v756 & 0x27) != 0 && (v756 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v304 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v304 + 16))
      {
        v305 = *(_QWORD *)(*(_QWORD *)(v304 + 41952) + 8);
        if (!v305)
          goto LABEL_613;
LABEL_1458:
        v694 = *(_DWORD *)v305 + 2;
        goto LABEL_1459;
      }
      v691 = *(_QWORD *)__s;
    }
    if ((v691 & 0xFFFE000000000002) == 0)
    {
      v692 = *(unsigned __int8 *)(v691 + 5);
      if (v692 == 2)
        goto LABEL_1455;
      if (v692 == 4)
      {
        v305 = *(_QWORD *)(v691 + 8);
        v693 = *(_DWORD *)v305;
        *(_DWORD *)v305 += 4;
        v694 = v693 + 2;
        if (!v694)
        {
          v372 = (WTF::StringImpl *)v305;
LABEL_794:
          WTF::StringImpl::~StringImpl(v372, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v403, v404, v405, v406, v407, v408, v409, v410);
          goto LABEL_613;
        }
LABEL_1459:
        *(_DWORD *)v305 = v694;
        goto LABEL_613;
      }
    }
    v691 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)__s, (uint64_t)v12, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_1455:
    if (*(_DWORD *)(v304 + 80))
    {
      v758 = *(_DWORD *)(v304 + 80);
      if ((v758 & 0x27) != 0 && (v758 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v304 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v304 + 16))
      {
        v305 = 0;
        goto LABEL_613;
      }
    }
    v305 = *(_QWORD *)(v691 + 8);
    v707 = *((_QWORD *)v12 + 7);
    if ((v305 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v691, v12);
      if (!*(_DWORD *)(v707 + 80))
        goto LABEL_1496;
      v775 = *(_DWORD *)(v707 + 80);
      if ((v775 & 0x27) != 0 && (v775 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v707 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v707 + 16))
      {
        v305 = 0;
        v372 = __dst;
        __dst = 0;
        if (!v372)
          goto LABEL_613;
      }
      else
      {
LABEL_1496:
        v305 = (unint64_t)__dst;
        if (!__dst)
          goto LABEL_613;
        *(_DWORD *)__dst += 2;
        __dst = 0;
        v372 = (WTF::StringImpl *)v305;
      }
      if (*(_DWORD *)v372 != 2)
      {
        *(_DWORD *)v372 -= 2;
        goto LABEL_613;
      }
      goto LABEL_794;
    }
    if ((*(_BYTE *)(v305 + 16) & 0x10) == 0)
    {
      v735 = *(WTF::StringImpl **)(v707 + 64768);
      if (v735 != (WTF::StringImpl *)v305)
      {
        *(_DWORD *)v305 += 2;
        *(_QWORD *)(v707 + 64768) = v305;
        if (v735)
        {
          if (*(_DWORD *)v735 == 2)
          {
            WTF::StringImpl::~StringImpl(v735, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v767, v768, v769, v770, v771, v772, v773, v774);
          }
          else
          {
            *(_DWORD *)v735 -= 2;
          }
        }
        v736 = *(JSC::VM **)(v691 + 8);
        if (v736)
        {
          if ((*((_BYTE *)v736 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v736 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v736, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
            v736 = __dst;
          }
        }
        v737 = *(WTF::StringImpl **)(v707 + 64776);
        *(_QWORD *)(v707 + 64776) = v736;
        if (v737)
        {
          if (*(_DWORD *)v737 == 2)
          {
            WTF::StringImpl::~StringImpl(v737, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v759, v760, v761, v762, v763, v764, v765, v766);
          }
          else
          {
            *(_DWORD *)v737 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v691 + 8) + 16) & 0x10) == 0)
      {
        v738 = *(JSC::VM **)(v707 + 64776);
        *(_DWORD *)v738 += 2;
        __dst = v738;
        __dmb(0xAu);
        v739 = *(JSC::VM **)(v691 + 8);
        *(_QWORD *)(v691 + 8) = __dst;
        __dst = v739;
        v740 = (_QWORD *)(v707 + 808);
        v741 = *(unsigned int *)(v707 + 820);
        if ((_DWORD)v741 == *(_DWORD *)(v707 + 816))
        {
          v743 = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v740, v741 + 1, (unint64_t)&__dst);
          v741 = *(unsigned int *)(v707 + 820);
          v742 = (JSC::VM **)(*(_QWORD *)(v707 + 808) + 8 * v741);
          v739 = *v743;
        }
        else
        {
          v742 = (JSC::VM **)(*v740 + 8 * v741);
          v743 = &__dst;
        }
        *v743 = 0;
        *v742 = v739;
        *(_DWORD *)(v707 + 820) = v741 + 1;
        v744 = __dst;
        __dst = 0;
        if (v744)
        {
          if (*(_DWORD *)v744 == 2)
          {
            WTF::StringImpl::~StringImpl(v744, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v745, v746, v747, v748, v749, v750, v751, v752);
          }
          else
          {
            *(_DWORD *)v744 -= 2;
          }
        }
      }
      v305 = *(_QWORD *)(v707 + 64776);
    }
    goto LABEL_1458;
  }
  v305 = *(_QWORD *)(v10 + 8);
  if ((v305 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, v12);
    if (!*(_DWORD *)(v304 + 80))
      goto LABEL_742;
    v521 = *(_DWORD *)(v304 + 80);
    if ((v521 & 0x27) != 0 && (v521 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v304 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v304 + 16))
    {
      v305 = 0;
      v372 = __dst;
      __dst = 0;
      if (!v372)
        goto LABEL_613;
    }
    else
    {
LABEL_742:
      v305 = (unint64_t)__dst;
      if (!__dst)
        goto LABEL_613;
      *(_DWORD *)__dst += 2;
      __dst = 0;
      v372 = (WTF::StringImpl *)v305;
    }
    if (*(_DWORD *)v372 != 2)
    {
      *(_DWORD *)v372 -= 2;
      goto LABEL_613;
    }
    goto LABEL_794;
  }
  if ((*(_BYTE *)(v305 + 16) & 0x10) == 0)
  {
    v393 = *(WTF::StringImpl **)(v304 + 64768);
    if (v393 != (WTF::StringImpl *)v305)
    {
      *(_DWORD *)v305 += 2;
      *(_QWORD *)(v304 + 64768) = v305;
      if (v393)
      {
        if (*(_DWORD *)v393 == 2)
        {
          WTF::StringImpl::~StringImpl(v393, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v511, v512, v513, v514, v515, v516, v517, v518);
        }
        else
        {
          *(_DWORD *)v393 -= 2;
        }
      }
      v394 = *(JSC::VM **)(v10 + 8);
      if (v394)
      {
        if ((*((_BYTE *)v394 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v394 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v394, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
          v394 = __dst;
        }
      }
      v395 = *(WTF::StringImpl **)(v304 + 64776);
      *(_QWORD *)(v304 + 64776) = v394;
      if (v395)
      {
        if (*(_DWORD *)v395 == 2)
        {
          WTF::StringImpl::~StringImpl(v395, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v503, v504, v505, v506, v507, v508, v509, v510);
        }
        else
        {
          *(_DWORD *)v395 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v396 = *(JSC::VM **)(v304 + 64776);
      *(_DWORD *)v396 += 2;
      __dst = v396;
      __dmb(0xAu);
      v397 = *(JSC::VM **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = __dst;
      __dst = v397;
      v398 = (_QWORD *)(v304 + 808);
      v399 = *(unsigned int *)(v304 + 820);
      if ((_DWORD)v399 == *(_DWORD *)(v304 + 816))
      {
        v401 = (JSC::VM **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v398, v399 + 1, (unint64_t)&__dst);
        v399 = *(unsigned int *)(v304 + 820);
        v400 = (JSC::VM **)(*(_QWORD *)(v304 + 808) + 8 * v399);
        v397 = *v401;
      }
      else
      {
        v400 = (JSC::VM **)(*v398 + 8 * v399);
        v401 = &__dst;
      }
      *v401 = 0;
      *v400 = v397;
      *(_DWORD *)(v304 + 820) = v399 + 1;
      v402 = __dst;
      __dst = 0;
      if (v402)
      {
        if (*(_DWORD *)v402 == 2)
        {
          WTF::StringImpl::~StringImpl(v402, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v411, v412, v413, v414, v415, v416, v417, v418);
        }
        else
        {
          *(_DWORD *)v402 -= 2;
        }
      }
    }
    v305 = *(_QWORD *)(v304 + 64776);
  }
  *(_DWORD *)v305 += 2;
LABEL_613:
  if (*(_DWORD *)(v292 + 80))
  {
    v427 = *(_DWORD *)(v292 + 80);
    if ((v427 & 0x27) != 0 && (v427 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v292 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v292 + 16))
    {
      IndexQuickly = 0;
      goto LABEL_763;
    }
  }
  v306 = *((_QWORD *)v12 + 7);
  v307 = *(unsigned __int8 *)(v11 + 5);
  if (v307 > 0x16)
    goto LABEL_615;
  v316 = v12;
  if (v307 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v306 + 41952) + 1768) == v305)
    {
      v695 = *(_QWORD *)(v11 + 8);
      if ((v695 & 1) != 0)
        v696 = (unsigned int *)(v11 + 16);
      else
        v696 = (unsigned int *)(v695 + 4);
      v697 = *v696;
      if ((v697 & 0x80000000) != 0)
        v698 = COERCE__INT64((double)v697) + 0x2000000000000;
      else
        v698 = v697 | 0xFFFE000000000000;
      v699 = 14;
      goto LABEL_1445;
    }
    if (!v305 || (v701 = *(_DWORD *)(v305 + 16), (v701 & 0x20) != 0))
    {
LABEL_1480:
      v700 = 0;
LABEL_1481:
      if (*(_DWORD *)(v306 + 80))
      {
        v757 = *(_DWORD *)(v306 + 80);
        if ((v757 & 0x27) != 0 && (v757 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v306 + 16))
          goto LABEL_740;
      }
      if ((v700 & 1) != 0)
        goto LABEL_729;
      goto LABEL_1483;
    }
    v702 = *(_BYTE **)(v305 + 8);
    v703 = *(unsigned int *)(v305 + 4);
    if ((v701 & 4) != 0)
    {
      if (!(_DWORD)v703 || (v781 = *v702 - 48, v781 > 9) || v703 >= 2 && *v702 == 48)
      {
LABEL_1643:
        v712 = 0;
        LOBYTE(v706) = 0;
        v785 = 0;
      }
      else
      {
        v782 = v703 - 1;
        v783 = v702 + 1;
        while (v782)
        {
          if (v781 <= 0x19999999)
          {
            v784 = *v783 - 48;
            if (v784 <= 9)
            {
              v23 = __CFADD__(v784, 10 * v781);
              v781 = v784 + 10 * v781;
              --v782;
              ++v783;
              if (!v23)
                continue;
            }
          }
          goto LABEL_1643;
        }
        v712 = v781 & 0xFFFFFF00;
        if (v781 == -1)
        {
          v712 = 0;
          LOBYTE(v706) = 0;
        }
        else
        {
          LOBYTE(v706) = v781;
        }
        if (v781 == -1)
          v785 = 0;
        else
          v785 = 0x100000000;
      }
      v706 = v706;
      if ((v785 & 0x100000000) == 0)
        goto LABEL_1480;
LABEL_1674:
      a3 = v706 | v712;
      v789 = *(_QWORD *)(v11 + 8);
      if ((v789 & 1) != 0)
        v790 = (_DWORD *)(v11 + 16);
      else
        v790 = (_DWORD *)(v789 + 4);
      if (*v790 > a3)
      {
        v698 = JSC::JSString::getIndex((JSC::JSString *)v11, v12, a3, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v306 + 80))
          goto LABEL_1679;
        v791 = *(_DWORD *)(v306 + 80);
        if ((v791 & 0x27) != 0 && (v791 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v306 + 16))
        {
LABEL_1679:
          v699 = 10;
LABEL_1445:
          v803 = (uint64_t (*)(unint64_t))v698;
          LODWORD(v805) = v699;
          v807 = 0;
          v700 = 1;
          BYTE1(v808[1]) = 1;
          goto LABEL_1481;
        }
      }
      goto LABEL_1480;
    }
    if ((_DWORD)v703)
    {
      v704 = *(unsigned __int16 *)v702 - 48;
      if (v704 <= 9 && (*(_WORD *)v702 != 48 || v703 <= 1))
      {
        v709 = (unsigned __int16 *)(v702 + 2);
        v710 = v703 - 1;
        while (v710)
        {
          if (v704 > 0x19999999)
            goto LABEL_1451;
          v711 = *v709 - 48;
          if (v711 > 9)
            goto LABEL_1451;
          v705 = 0;
          LOBYTE(v703) = 0;
          v706 = 0;
          v23 = __CFADD__(v711, 10 * v704);
          v704 = v711 + 10 * v704;
          ++v709;
          --v710;
          if (v23)
            goto LABEL_1479;
        }
        v706 = v704 & 0xFFFFFF00;
        v705 = 0x100000000;
        if (v704 == -1)
        {
          v705 = 0;
          LOBYTE(v703) = 0;
        }
        else
        {
          LOBYTE(v703) = v704;
        }
        if (v704 == -1)
          v706 = 0;
LABEL_1479:
        v712 = v703;
        if ((v705 & 0x100000000) == 0)
          goto LABEL_1480;
        goto LABEL_1674;
      }
LABEL_1451:
      v705 = 0;
      LOBYTE(v703) = 0;
    }
    else
    {
      v705 = 0;
    }
    v706 = 0;
    goto LABEL_1479;
  }
LABEL_1483:
  v713 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v813, (unint64_t)v12);
  if (!v713)
    goto LABEL_740;
  v11 = v713;
  v306 = *((_QWORD *)v12 + 7);
LABEL_615:
  v308 = (_BYTE *)(v11 + 6);
  v309 = v305 >> 4;
  v310 = v11;
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v311 = (JSC::Structure *)v11;
    while (1)
    {
      v312 = *(_DWORD *)v311 & 0xFFFFFFFE;
      v313 = 16 * v312;
      if ((_DWORD)v309)
      {
        if ((v309 & ~*(_DWORD *)(16 * v312 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v313, (JSC::VM *)v306, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v314)
          {
            __dst = (JSC::VM *)v305;
            v315 = JSC::PropertyTable::get(v314, (uint64_t *)&__dst);
            a6 = v315;
            if ((_DWORD)v315 != -1)
              break;
          }
        }
      }
      v316 = v12;
      if ((*v308 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v311, (JSC::VM *)v306, v305, (uint64_t)&v803) & 1) != 0)
      {
        goto LABEL_729;
      }
      v310 = *(_QWORD *)(v313 + 48);
      if (!v310)
        v310 = *((_QWORD *)v311 + 2);
      if ((v310 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v310 + 5) < 0x17u)
      {
        if (!v305)
        {
          IndexQuickly = 10;
          goto LABEL_766;
        }
        v319 = *(_DWORD *)(v305 + 16);
        if ((v319 & 0x20) != 0)
        {
          IndexQuickly = 10;
          goto LABEL_764;
        }
        v320 = *(_WORD **)(v305 + 8);
        v321 = *(unsigned int *)(v305 + 4);
        if ((v319 & 4) == 0)
        {
          if ((_DWORD)v321)
          {
            v322 = (unsigned __int16)*v320 - 48;
            if (v322 <= 9 && (*v320 != 48 || v321 <= 1))
            {
              v334 = v320 + 1;
              v335 = v321 - 1;
              while (v335)
              {
                if (v322 > 0x19999999)
                  goto LABEL_637;
                v336 = *v334 - 48;
                if (v336 > 9)
                  goto LABEL_637;
                v323 = 0;
                LOBYTE(v321) = 0;
                v324 = 0;
                v23 = __CFADD__(v336, 10 * v322);
                v322 = v336 + 10 * v322;
                ++v334;
                --v335;
                if (v23)
                  goto LABEL_739;
              }
              v324 = v322 & 0xFFFFFF00;
              v323 = 0x100000000;
              if (v322 == -1)
              {
                v323 = 0;
                LOBYTE(v321) = 0;
              }
              else
              {
                LOBYTE(v321) = v322;
              }
              if (v322 == -1)
                v324 = 0;
LABEL_739:
              v371 = v321;
              if ((v323 & 0x100000000) == 0)
              {
LABEL_740:
                IndexQuickly = 10;
                goto LABEL_763;
              }
LABEL_1305:
              v660 = v324 | v371;
              v661 = *((_QWORD *)v12 + 7);
              IndexQuickly = 10;
              while (2)
              {
                v662 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v663 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v662 + 0x4C) + 0x70))(v11, v316, v660, &v803);
                if (*(_DWORD *)(v661 + 80))
                {
                  v666 = *(_DWORD *)(v661 + 80);
                  if ((v666 & 0x27) != 0 && (v666 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v661 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v661 + 16))
                    goto LABEL_763;
                }
                if ((v663 & 1) != 0)
                  goto LABEL_729;
                if (BYTE2(v808[1]) == 3)
                {
                  if (BYTE4(v808[1]))
                    goto LABEL_763;
                  v664 = *(unsigned __int8 *)(v11 + 5);
                  if (v664 != 61)
                    goto LABEL_1310;
                }
                else
                {
                  v664 = *(unsigned __int8 *)(v11 + 5);
                  if (v664 == 61)
                  {
                    if (BYTE2(v808[1]) == 1)
                      goto LABEL_763;
                  }
                  else
                  {
LABEL_1310:
                    if ((v664 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v815 = 0;
                        v669 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                        v668 = (_BYTE)this ? v669 : 0;
                      }
                      else
                      {
                        v668 = *(_QWORD *)(v11 + 24);
                      }
                      if (v668 <= v660)
                        goto LABEL_763;
                    }
                  }
                }
                if ((*(_WORD *)(v662 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
                {
                  v665 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v665)
                    v665 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v665 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v11, v316);
                  }
                  else
                  {
                    v665 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v665)
                      v665 = *(_QWORD *)(v11 + 16);
                  }
                  if (*(_DWORD *)(v661 + 80))
                  {
                    v667 = *(_DWORD *)(v661 + 80);
                    if ((v667 & 0x27) != 0 && (v667 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v661 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v661 + 16))
                      goto LABEL_763;
                  }
                }
                if ((v665 & 0xFFFE000000000002) != 0)
                  goto LABEL_763;
                v11 = v665;
                if (*(unsigned __int8 *)(v665 + 5) <= 0x16u)
                  goto LABEL_763;
                continue;
              }
            }
LABEL_637:
            v323 = 0;
            LOBYTE(v321) = 0;
          }
          else
          {
            v323 = 0;
          }
          v324 = 0;
          goto LABEL_739;
        }
        if ((_DWORD)v321)
        {
          v658 = *(unsigned __int8 *)v320 - 48;
          if (v658 <= 9 && (v321 < 2 || *(_BYTE *)v320 != 48))
          {
            v685 = v321 - 1;
            v686 = (unsigned __int8 *)v320 + 1;
            while (v685)
            {
              if (v658 > 0x19999999)
                goto LABEL_1302;
              v687 = *v686 - 48;
              if (v687 > 9)
                goto LABEL_1302;
              v371 = 0;
              LOBYTE(v321) = 0;
              v659 = 0;
              v23 = __CFADD__(v687, 10 * v658);
              v658 = v687 + 10 * v658;
              --v685;
              ++v686;
              if (v23)
                goto LABEL_1304;
            }
            if (v658 == -1)
              v371 = 0;
            else
              v371 = v658 & 0xFFFFFF00;
            if (v658 == -1)
              LOBYTE(v321) = 0;
            else
              LOBYTE(v321) = v658;
            if (v658 == -1)
              v659 = 0;
            else
              v659 = 0x100000000;
LABEL_1304:
            v324 = v321;
            if ((v659 & 0x100000000) == 0)
              goto LABEL_740;
            goto LABEL_1305;
          }
LABEL_1302:
          v371 = 0;
          LOBYTE(v321) = 0;
        }
        else
        {
          v371 = 0;
        }
        v659 = 0;
        goto LABEL_1304;
      }
      v308 = (_BYTE *)(v310 + 6);
      v311 = (JSC::Structure *)v310;
      if ((*(_BYTE *)(v310 + 6) & 8) != 0)
        goto LABEL_800;
    }
    a5 = HIDWORD(v315);
    v316 = v12;
    if ((int)v315 <= 63)
    {
      v317 = (uint64_t)v311 + 16;
      v318 = v315 << 32;
    }
    else
    {
      v317 = *((_QWORD *)v311 + 1) - 8;
      v318 = 0x3F00000000 - (v315 << 32);
    }
    a4 = *(_QWORD *)(v317 + (v318 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_662;
    v333 = *(unsigned __int8 *)(a4 + 5);
    if (v333 != 5)
    {
      if (v333 != 6)
      {
LABEL_662:
        v803 = (uint64_t (*)(unint64_t))a4;
        v807 = v311;
LABEL_663:
        v805 = __PAIR64__(a6, a5);
        LOWORD(v808[1]) = 257;
        goto LABEL_729;
      }
      v389 = *(_DWORD *)(v313 + 16) & 3;
      v390 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v392 = *(int8x16_t ***)(a4 + 24);
        v391 = *(_QWORD *)(a4 + 32);
        v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v804 = v390;
        LODWORD(v805) = HIDWORD(v315);
        v807 = v311;
        goto LABEL_773;
      }
      v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v804 = v390;
      LODWORD(v805) = HIDWORD(v315);
      v807 = v311;
LABEL_826:
      BYTE1(v808[1]) = 3;
      if (v389 != 2)
        LOBYTE(v808[1]) = 1;
      goto LABEL_729;
    }
    v360 = (unsigned int *)v311;
    v361 = v306;
LABEL_728:
    JSC::JSObject::fillGetterPropertySlot(v360, v361, (uint64_t)&v803, a4, a5, a6);
    goto LABEL_729;
  }
LABEL_800:
  v316 = v12;
  if (!v305)
    goto LABEL_838;
  v419 = *(_DWORD *)(v305 + 16);
  if ((v419 & 0x20) != 0)
    goto LABEL_838;
  v420 = *(_BYTE **)(v305 + 8);
  v421 = *(unsigned int *)(v305 + 4);
  if ((v419 & 4) != 0)
  {
    if ((_DWORD)v421)
    {
      v720 = *v420 - 48;
      if (v720 <= 9 && (v421 < 2 || *v420 != 48))
      {
        v753 = v421 - 1;
        v754 = v420 + 1;
        while (v753)
        {
          if (v720 > 0x19999999)
            goto LABEL_1506;
          v755 = *v754 - 48;
          if (v755 > 9)
            goto LABEL_1506;
          v431 = 0;
          LOBYTE(v421) = 0;
          v721 = 0;
          v23 = __CFADD__(v755, 10 * v720);
          v720 = v755 + 10 * v720;
          --v753;
          ++v754;
          if (v23)
            goto LABEL_1508;
        }
        if (v720 == -1)
          v431 = 0;
        else
          v431 = v720 & 0xFFFFFF00;
        if (v720 == -1)
          LOBYTE(v421) = 0;
        else
          LOBYTE(v421) = v720;
        if (v720 == -1)
          v721 = 0;
        else
          v721 = 0x100000000;
LABEL_1508:
        v424 = v421;
        if ((v721 & 0x100000000) == 0)
          goto LABEL_838;
        goto LABEL_1509;
      }
LABEL_1506:
      v431 = 0;
      LOBYTE(v421) = 0;
    }
    else
    {
      v431 = 0;
    }
    v721 = 0;
    goto LABEL_1508;
  }
  if (!(_DWORD)v421)
  {
    v423 = 0;
    goto LABEL_806;
  }
  v422 = *(unsigned __int16 *)v420 - 48;
  if (v422 > 9 || *(_WORD *)v420 == 48 && v421 > 1)
  {
LABEL_805:
    v423 = 0;
    LOBYTE(v421) = 0;
LABEL_806:
    v424 = 0;
    goto LABEL_837;
  }
  v428 = (unsigned __int16 *)(v420 + 2);
  v429 = v421 - 1;
  while (v429)
  {
    if (v422 > 0x19999999)
      goto LABEL_805;
    v430 = *v428 - 48;
    if (v430 > 9)
      goto LABEL_805;
    v423 = 0;
    LOBYTE(v421) = 0;
    v424 = 0;
    v23 = __CFADD__(v430, 10 * v422);
    v422 = v430 + 10 * v422;
    ++v428;
    --v429;
    if (v23)
      goto LABEL_837;
  }
  v424 = v422 & 0xFFFFFF00;
  v423 = 0x100000000;
  if (v422 == -1)
  {
    v423 = 0;
    LOBYTE(v421) = 0;
  }
  else
  {
    LOBYTE(v421) = v422;
  }
  if (v422 == -1)
    v424 = 0;
LABEL_837:
  v431 = v421;
  if ((v423 & 0x100000000) != 0)
  {
LABEL_1509:
    v722 = v424 | v431;
    v723 = *((_QWORD *)v12 + 7);
    IndexQuickly = 10;
    while (1)
    {
      v724 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v725 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v724 + 0x4C) + 0x70))(v11, v316, v722, &v803);
      v726 = v725;
      if (*(_DWORD *)(v723 + 80))
      {
        v729 = *(_DWORD *)(v723 + 80);
        if ((v729 & 0x27) != 0 && (v729 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v723 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v730 = *(_QWORD *)(v723 + 16);
        if (v730)
          v731 = 1;
        else
          v731 = v726;
        if ((v731 & 1) != 0)
        {
          if (!v730)
            goto LABEL_729;
          goto LABEL_740;
        }
      }
      else if ((v725 & 1) != 0)
      {
        goto LABEL_729;
      }
      if (BYTE2(v808[1]) == 3)
      {
        if (BYTE4(v808[1]))
          goto LABEL_763;
        v727 = *(unsigned __int8 *)(v11 + 5);
        if (v727 == 61)
          goto LABEL_1515;
      }
      else
      {
        v727 = *(unsigned __int8 *)(v11 + 5);
        if (v727 == 61)
        {
          if (BYTE2(v808[1]) == 1)
            goto LABEL_763;
          goto LABEL_1515;
        }
      }
      if ((v727 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          v815 = 0;
          v734 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
          v732 = (_BYTE)this ? v734 : 0;
        }
        else
        {
          v732 = *(_QWORD *)(v11 + 24);
        }
        if (v732 <= v722)
          goto LABEL_763;
      }
LABEL_1515:
      if ((*(_WORD *)(v724 + 12) & 0x800) == 0 || BYTE2(v808[1]) == 3)
      {
        v728 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v728)
          v728 = *(_QWORD *)(v11 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v728 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v11, v316);
        }
        else
        {
          v728 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v728)
            v728 = *(_QWORD *)(v11 + 16);
        }
        if (*(_DWORD *)(v723 + 80))
        {
          v733 = *(_DWORD *)(v723 + 80);
          if ((v733 & 0x27) != 0 && (v733 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v723 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v723 + 16))
            goto LABEL_763;
        }
      }
      if ((v728 & 0xFFFE000000000002) == 0)
      {
        v11 = v728;
        if (*(unsigned __int8 *)(v728 + 5) > 0x16u)
          continue;
      }
      goto LABEL_763;
    }
  }
LABEL_838:
  v432 = *((_QWORD *)v12 + 7);
  IndexQuickly = 10;
  while (1)
  {
    v433 = 16 * (*(_DWORD *)v310 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v310 + 6) & 8) == 0)
      break;
    v795 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v310 & 0xFFFFFFFE) + 0x4C) + 0x68))(v310, v12, v305, &v803);
    if (*(_DWORD *)(v432 + 80))
    {
      v463 = *(_DWORD *)(v432 + 80);
      if ((v463 & 0x27) != 0 && (v463 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v432 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v432 + 16))
        goto LABEL_763;
    }
    if ((v795 & 1) != 0)
      goto LABEL_729;
    if (BYTE2(v808[1]) == 3)
    {
      if (BYTE4(v808[1]))
        goto LABEL_763;
      v440 = *(unsigned __int8 *)(v310 + 5);
      if (v440 == 61)
        goto LABEL_845;
    }
    else
    {
      v440 = *(unsigned __int8 *)(v310 + 5);
      if (v440 == 61)
      {
        if (BYTE2(v808[1]) == 1)
          goto LABEL_763;
        goto LABEL_845;
      }
    }
    if (!v305)
      goto LABEL_845;
    if ((v440 - 50) < 0xFFFFFFF5)
      goto LABEL_845;
    v441 = *(_DWORD *)(v305 + 16);
    if ((v441 & 0x20) != 0)
      goto LABEL_845;
    v442 = *(unsigned int *)(v305 + 4);
    if (!(_DWORD)v442)
      goto LABEL_845;
    v443 = *(unsigned __int8 **)(v305 + 8);
    if ((v441 & 4) != 0)
    {
      v444 = *v443;
      if ((_DWORD)v442 == 1)
      {
LABEL_872:
        if ((v444 - 48) < 0xA)
          goto LABEL_764;
        goto LABEL_845;
      }
      if (v444 == 45)
      {
        v444 = v443[1];
        goto LABEL_876;
      }
      if ((v444 - 48) < 0xA)
        goto LABEL_887;
      if ((_DWORD)v442 == 8)
        goto LABEL_886;
    }
    else
    {
      v444 = *(unsigned __int16 *)v443;
      if ((_DWORD)v442 == 1)
        goto LABEL_872;
      if (v444 == 45)
      {
        v444 = *((unsigned __int16 *)v443 + 1);
LABEL_876:
        if ((v444 - 48) < 0xA)
        {
          if ((_DWORD)v442 == 2)
            goto LABEL_764;
          goto LABEL_887;
        }
        if ((_DWORD)v442 != 9)
          goto LABEL_845;
LABEL_886:
        if (v444 != 73)
          goto LABEL_845;
        goto LABEL_887;
      }
      if ((v444 - 48) < 0xA || (_DWORD)v442 == 8 && v444 == 73)
        goto LABEL_887;
    }
    if ((_DWORD)v442 != 3 || v444 != 78)
      goto LABEL_845;
LABEL_887:
    v793 = v793 & 0xFFFFFF0000000000 | v442 | ((unint64_t)((v441 >> 2) & 1) << 32);
    JSC::jsToNumber(v443, v793);
    v446 = (v445 >> 52) & 0x7FF;
    if ((_DWORD)v446 == 2047)
    {
      if ((v445 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v447 = &__s[3];
      }
      else
      {
        if ((v445 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v452 = &__s[1];
        }
        else
        {
          v452 = __s;
        }
        *(_QWORD *)v452 = 0x7974696E69666E49;
        v447 = v452 + 8;
      }
      goto LABEL_901;
    }
    v448 = v445 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v445 & 0x8000000000000000) != 0 && v448)
    {
      __s[0] = 45;
      v796 = &__s[1];
    }
    else
    {
      if (!v448)
      {
        __s[0] = 48;
        v447 = &__s[1];
        goto LABEL_901;
      }
      v796 = __s;
    }
    v449 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v445 & 0x800FFFFFFFFFFFFFLL, v446);
    v447 = WTF::dragonbox::detail::to_shortest(v449, v450, (uint64_t)v796, v451);
LABEL_901:
    *v447 = 0;
    v797 = strlen(__s);
    memcpy(&__dst, __s, v797);
    *((_BYTE *)&__dst + v797) = 0;
    v453 = *(unsigned int *)(v305 + 4);
    v454 = *(unsigned __int8 **)(v305 + 8);
    if ((*(_BYTE *)(v305 + 16) & 4) != 0)
    {
      if ((_DWORD)v453)
      {
        v459 = &__dst;
        v460 = *(unsigned int *)(v305 + 4);
        do
        {
          v462 = *(unsigned __int8 *)v459;
          v459 = (JSC::VM **)((char *)v459 + 1);
          v461 = v462;
          if (!v462 || *v454 != v461)
            goto LABEL_845;
          ++v454;
        }
        while (--v460);
      }
    }
    else if ((_DWORD)v453)
    {
      v455 = &__dst;
      v456 = *(unsigned int *)(v305 + 4);
      do
      {
        v458 = *(unsigned __int8 *)v455;
        v455 = (JSC::VM **)((char *)v455 + 1);
        v457 = v458;
        if (!v458 || *(unsigned __int16 *)v454 != v457)
          goto LABEL_845;
        v454 += 2;
      }
      while (--v456);
    }
    if (!*((_BYTE *)&__dst + v453))
      goto LABEL_764;
LABEL_845:
    if ((*(_WORD *)(v433 + 12) & 0x800) == 0)
    {
      v436 = *(_DWORD *)v310;
LABEL_847:
      v437 = *(_QWORD *)(16 * (v436 & 0xFFFFFFFE) + 0x30);
      if (!v437)
        v437 = *(_QWORD *)(v310 + 16);
      goto LABEL_849;
    }
    v436 = *(_DWORD *)v310;
    if (BYTE2(v808[1]) == 3)
      goto LABEL_847;
    v438 = 16 * (v436 & 0xFFFFFFFE);
    if ((*(_WORD *)(v438 + 12) & 0x800) != 0)
    {
      v437 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v438 + 76)
                                                                              + 0xB0))(v310, v12);
    }
    else
    {
      v437 = *(_QWORD *)(v438 + 48);
      if (!v437)
        v437 = *(_QWORD *)(v310 + 16);
    }
    if (*(_DWORD *)(v432 + 80))
    {
      v439 = *(_DWORD *)(v432 + 80);
      if ((v439 & 0x27) != 0 && (v439 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v432 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v432 + 16))
        goto LABEL_763;
    }
LABEL_849:
    if ((v437 & 0xFFFE000000000002) == 0)
    {
      v310 = v437;
      if (*(unsigned __int8 *)(v437 + 5) > 0x16u)
        continue;
    }
    goto LABEL_763;
  }
  if (!(_DWORD)v309
    || (v309 & ~*(_DWORD *)(16 * (*(_DWORD *)v310 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v310 & 0xFFFFFFFE)), (JSC::VM *)v432, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v434)|| (__dst = (JSC::VM *)v305, v435 = JSC::PropertyTable::get(v434, (uint64_t *)&__dst), a6 = v435, (_DWORD)v435 == -1))
  {
    if ((*(_BYTE *)(v310 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v310, (JSC::VM *)v432, v305, (uint64_t)&v803) & 1) != 0)
    {
      goto LABEL_729;
    }
    goto LABEL_845;
  }
  a5 = HIDWORD(v435);
  if ((int)v435 <= 63)
  {
    v464 = v310 + 16;
    v465 = v435 << 32;
  }
  else
  {
    v464 = *(_QWORD *)(v310 + 8) - 8;
    v465 = 0x3F00000000 - (v435 << 32);
  }
  a4 = *(_QWORD *)(v464 + (v465 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_940:
    v803 = (uint64_t (*)(unint64_t))a4;
    v807 = (JSC::Structure *)v310;
    goto LABEL_663;
  }
  v466 = *(unsigned __int8 *)(a4 + 5);
  if (v466 == 5)
  {
    v360 = (unsigned int *)v310;
    v361 = v432;
    goto LABEL_728;
  }
  if (v466 != 6)
    goto LABEL_940;
  v389 = *(_DWORD *)(v433 + 16) & 3;
  v522 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v804 = v522;
    LODWORD(v805) = HIDWORD(v435);
    v807 = (JSC::Structure *)v310;
    goto LABEL_826;
  }
  v392 = *(int8x16_t ***)(a4 + 24);
  v391 = *(_QWORD *)(a4 + 32);
  v803 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v804 = v522;
  LODWORD(v805) = HIDWORD(v435);
  v807 = (JSC::Structure *)v310;
LABEL_773:
  BYTE1(v808[1]) = 3;
  if (v389 != 2)
    LOBYTE(v808[1]) = 1;
  BYTE3(v808[1]) = 1;
  v811 = v392;
  v812 = v391;
LABEL_729:
  if (BYTE1(v808[1]) == 1)
  {
    IndexQuickly = (uint64_t)v803;
  }
  else
  {
    if (BYTE1(v808[1]) == 2)
    {
      v362 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v803, v316, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v373 = v807;
      v374 = *(_QWORD *)(16 * (*(_DWORD *)v807 & 0xFFFFFFFE) + 0x28);
      if ((v805 & 0x20) != 0)
        v373 = v806;
      if (BYTE3(v808[1]) != 1)
        goto LABEL_761;
      if (((unint64_t)v373 & 0xFFFE000000000002) != 0)
        goto LABEL_1278;
      v375 = *(unsigned int *)(16 * (*(_DWORD *)v373 & 0xFFFFFFFE) + 0x4C);
      v376 = *(_DWORD *)(16 * (*(_DWORD *)v373 & 0xFFFFFFFE) + 0x4C) != 0;
      v377 = 16 * v375;
      if ((_DWORD)v375)
        v378 = v811 == (int8x16_t **)v377;
      else
        v378 = 1;
      if (!v378)
      {
        do
        {
          v377 = *(_QWORD *)(v377 + 16);
          v376 = v377 != 0;
        }
        while ((int8x16_t **)v377 != v811 && v377 != 0);
      }
      if (!v376)
      {
LABEL_1278:
        __dst = (JSC::VM *)*((_QWORD *)v316 + 7);
        v362 = JSC::throwDOMAttributeGetterTypeError(v374, &__dst, v811, (WTF::StringImpl *)v305);
      }
      else
      {
LABEL_761:
        v362 = v803(v374);
      }
    }
    IndexQuickly = v362;
  }
LABEL_763:
  if (v305)
  {
LABEL_764:
    if (*(_DWORD *)v305 != 2)
    {
      *(_DWORD *)v305 -= 2;
      goto LABEL_766;
    }
    v380 = (WTF::StringImpl *)v305;
LABEL_770:
    WTF::StringImpl::~StringImpl(v380, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v381, v382, v383, v384, v385, v386, v387, v388);
  }
LABEL_766:
  if (v810)
  {
    v281 = v809;
    v282 = *(_DWORD *)(v809 + 4);
    if (!v282)
    {
      __break(0xC471u);
      JUMPOUT(0x1987B9220);
    }
LABEL_566:
    *(_DWORD *)(v281 + 4) = v282 - 1;
  }
LABEL_567:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
  return IndexQuickly;
}

WTF::StringImpl *operationGetPrivateNameOptimize(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  WTF::AtomStringImpl *v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  int v39;
  unint64_t v41;
  WTF::AtomStringImpl *v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  JSC::VM *v63;
  char *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  _DWORD *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  JSC::VM *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned int v134;
  char v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  JSC::VM *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  JSC::VM *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  _DWORD *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  int v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225[2];
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  char v237;
  uint64_t v238;
  WTF *v239;
  char *v240;
  WTF::StringImpl *v241;
  uint64_t *v242;
  char *v243;
  _QWORD v244[2];
  uint64_t vars0;

  v8 = a2;
  v10 = *(JSC::VM ***)(a3 + 56);
  v11 = v10[7];
  v12 = vars0;
  *((_QWORD *)v11 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    v244[0] = a1;
    v41 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v244, (JSC::JSGlobalObject *)v10, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 5) >= 0x17u)
    {
      v13 = a3;
      v14 = *(_QWORD *)(v12 + 16);
      if ((a2 & 0xFFFE000000000002) != 0)
      {
        v61 = a2;
      }
      else
      {
        if (*(_BYTE *)(a2 + 5) == 2)
        {
          v15 = *(WTF::StringImpl **)(a2 + 8);
          if ((v15 & 1) == 0)
          {
            if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
            {
              if (*((WTF::StringImpl **)v11 + 8096) != v15)
              {
                WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v11 + 8096, *(WTF::AtomStringImpl **)(a2 + 8), a3, (uint64_t)a4, a5, a6, a7, a8);
                v105 = *(WTF::StringImpl **)(v8 + 8);
                if (v105)
                {
                  if ((*((_BYTE *)v105 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v105 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase((unint64_t)v105, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v225);
                    v105 = v225[0];
                  }
                }
                v106 = (WTF::StringImpl *)*((_QWORD *)v11 + 8097);
                *((_QWORD *)v11 + 8097) = v105;
                if (v106)
                {
                  if (*(_DWORD *)v106 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v106, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
                  }
                  else
                  {
                    *(_DWORD *)v106 -= 2;
                  }
                }
              }
              if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
              {
                v107 = (_DWORD *)*((_QWORD *)v11 + 8097);
                *v107 += 2;
                __dmb(0xAu);
                v108 = *(WTF::StringImpl **)(v8 + 8);
                *(_QWORD *)(v8 + 8) = v107;
                v225[0] = v108;
                JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v11 + 192, (unint64_t)v225);
                v109 = v225[0];
                v225[0] = 0;
                if (v109)
                {
                  if (*(_DWORD *)v109 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
                  }
                  else
                  {
                    *(_DWORD *)v109 -= 2;
                  }
                }
              }
              v15 = (WTF::StringImpl *)*((_QWORD *)v11 + 8097);
            }
LABEL_7:
            v16 = *(_DWORD *)v15 + 2;
LABEL_8:
            *(_DWORD *)v15 = v16;
LABEL_9:
            if (*((_DWORD *)v11 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
            {
              v38 = 0;
LABEL_37:
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                {
                  WTF::StringImpl::~StringImpl(v15, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
                }
                else
                {
                  *(_DWORD *)v15 -= 2;
                }
              }
              return v38;
            }
            v226 = 0xFFFFFFFF00000000;
            v230 = 0x20000;
            v228 = 0;
            v229 = 0;
            v227 = a1;
            v231 = 0;
            LOBYTE(v232) = 0;
            v233 = 0;
            v234 = 0;
            v235 = 0;
            v17 = v10[7];
            if (!((unint64_t)v15 >> 4)
              || (((unint64_t)v15 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) != 0
              || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v10[7], a3, a4, a5, a6, a7, a8), !v18)|| (v239 = v15, v19 = JSC::PropertyTable::get(v18, (uint64_t *)&v239), (_DWORD)v19 == -1))
            {
              v24 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v24 = 0x2300000002;
              *(_QWORD *)(v24 + 8) = "Cannot access invalid private field";
              *(_DWORD *)(v24 + 16) = 4;
              v239 = (WTF *)v24;
              v32 = JSC::createTypeError((uint64_t)v10, &v239, (uint64_t)JSC::defaultSourceAppender, 0);
              v34 = v239;
              v239 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                {
                  WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
                  WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
                }
                else
                {
                  *(_DWORD *)v34 -= 2;
                }
              }
              if ((v32 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)))
              {
                v32 = JSC::Exception::create((uint64_t)v17, (JSC::VM *)v32, 0, v27, v28, v29, v30, v31);
              }
              JSC::VM::throwException(v17, (JSC::JSGlobalObject *)v10, (JSC::Exception *)v32, v33, v27, v28, v29, v30, v31);
            }
            else
            {
              if ((int)v19 <= 63)
              {
                v22 = a1 + 16;
                v23 = v19 << 32;
              }
              else
              {
                v22 = *(_QWORD *)(a1 + 8) - 8;
                v23 = 0x3F00000000 - (v19 << 32);
              }
              v225[0] = *(WTF::StringImpl **)(v22 + (v23 >> 29));
              v228 = a1;
              v226 = __PAIR64__(v19, HIDWORD(v19));
              LOWORD(v230) = 257;
            }
            if (*((_DWORD *)v11 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v20, a3, (uint64_t)a4, a5, a6, a7, a8))
            {
              v38 = 0;
              goto LABEL_34;
            }
            if (byte_1ECF4C6B7)
            {
              JSC::ICEvent::ICEvent((uint64_t)&v239, (uint64_t **)v11, (const WTF::StringImpl *)0x25, 16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C), v15, 1, a7, a8);
              JSC::ICEvent::log((JSC::ICEvent *)&v239, v144, v145, v146, v147, v148, v149, v150);
              v151 = v241;
              v241 = 0;
              if (v151)
              {
                if (*(_DWORD *)v151 == 2)
                {
                  WTF::StringImpl::~StringImpl(v151, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
                }
                else
                {
                  *(_DWORD *)v151 -= 2;
                }
              }
            }
            v35 = *(unsigned __int8 *)(v8 + 5);
            if (v35 == 2)
            {
              v36 = *(_QWORD *)(v8 + 8);
              if (v36 && (v36 & 1) == 0 && (*(_BYTE *)(v36 + 16) & 0x10) != 0)
              {
LABEL_29:
                v37 = *(_DWORD *)a1 & 0xFFFFFFFE;
                if (!v37)
                {
                  *(_WORD *)(v13 + 129) |= 0x10u;
                  goto LABEL_32;
                }
                v238 = v8;
                *(_WORD *)(v13 + 129) |= 4u;
                if (*(_BYTE *)(v13 + 124))
                {
                  --*(_BYTE *)(v13 + 124);
                  goto LABEL_32;
                }
                v55 = *(unsigned __int8 *)(v13 + 125);
                if (v55 != 255)
                  *(_BYTE *)(v13 + 125) = ++v55;
                if (xmmword_1ECF4C260 < v55)
                {
                  *(_BYTE *)(v13 + 125) = 0;
                  v132 = *(unsigned __int8 *)(v13 + 126);
                  v133 = BYTE4(xmmword_1ECF4C260) << v132;
                  v134 = v133;
                  if (v133 == 255)
                    LOBYTE(v133) = -2;
                  if (v134 >> v132 == BYTE4(xmmword_1ECF4C260))
                    v135 = v133;
                  else
                    v135 = -2;
                  *(_BYTE *)(v13 + 124) = v135;
                  if (v132 != 255)
                    *(_BYTE *)(v13 + 126) = v132 + 1;
                  *(_BYTE *)(v13 + 127) = 0;
                  goto LABEL_105;
                }
                if (!*(_BYTE *)(v13 + 127))
                {
LABEL_105:
                  JSC::repatchGetBy((uint64_t *)v10, (unsigned __int8 *)v14, (const WTF::StringImpl *)a1, v8, (uint64_t)v225, v13, 6, a8, v21);
                  goto LABEL_32;
                }
                --*(_BYTE *)(v13 + 127);
                v237 = 0;
                v236 = v37;
                v56 = (unsigned __int8 *)(v13 + 128);
                if (__ldaxr((unsigned __int8 *)(v13 + 128)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v56))
                {
                  goto LABEL_68;
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 128);
LABEL_68:
                v58 = *(_DWORD *)(v13 + 96);
                if (!v58)
                {
                  if (*(_QWORD *)(v13 + 16))
                  {
                    *(_QWORD *)(v13 + 80) = 0;
                    *(_QWORD *)(v13 + 88) = 0;
                    v58 = 1;
                    *(_DWORD *)(v13 + 96) = 1;
                    v241 = (WTF::StringImpl *)&v236;
                    v242 = &v238;
                    v243 = &v237;
                    v239 = (WTF *)&v236;
                    v240 = &v237;
                    goto LABEL_71;
                  }
                  v239 = 0;
                  v240 = 0;
                  std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(v13 + 80, &v239, a3, (uint64_t)a4, a5, a6, a7, a8);
                  if (v239)
                    WTF::fastFree((unint64_t)v239, v110, v111, v112, v113, v114, v115, v116);
                  v58 = *(_DWORD *)(v13 + 96);
                }
                v241 = (WTF::StringImpl *)&v236;
                v242 = &v238;
                v243 = &v237;
                v239 = (WTF *)&v236;
                v240 = &v237;
                if (v58 != -1)
                {
LABEL_71:
                  v244[0] = &v239;
                  off_1E3596010[v58]((WTF ***)v244, v13 + 80);
                  v59 = __ldxr(v56);
                  if (v59 == 1)
                  {
                    if (!__stlxr(0, v56))
                      goto LABEL_102;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v13 + 128), 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_102:
                  if (!v237
                    || v14
                    && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v14 + 7)
                    && (JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v14), !v237))
                  {
LABEL_32:
                    if (BYTE1(v230) == 1)
                    {
                      v38 = v225[0];
                    }
                    else
                    {
                      if (BYTE1(v230) == 2)
                        v60 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v225, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8);
                      else
                        v60 = JSC::PropertySlot::customGetter((uint64_t)v225, v10[7], v15);
                      v38 = (WTF::StringImpl *)v60;
                    }
LABEL_34:
                    if (v233)
                    {
                      v39 = *(_DWORD *)(v232 + 4);
                      if (!v39)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987BC454);
                      }
                      *(_DWORD *)(v232 + 4) = v39 - 1;
                    }
                    goto LABEL_37;
                  }
                  goto LABEL_105;
                }
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_138;
              }
            }
            else if (v35 == 4)
            {
              goto LABEL_29;
            }
            __break(0xC471u);
            JUMPOUT(0x1987BBFECLL);
          }
          JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a2, (JSC::JSGlobalObject *)v10);
          if (!*((_DWORD *)v11 + 20))
            goto LABEL_109;
          v118 = v11;
LABEL_198:
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v118, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v15 = 0;
            v86 = v225[0];
            v225[0] = 0;
            if (!v86)
              goto LABEL_9;
LABEL_111:
            if (*(_DWORD *)v86 != 2)
            {
              *(_DWORD *)v86 -= 2;
              goto LABEL_9;
            }
            goto LABEL_121;
          }
LABEL_109:
          v15 = v225[0];
          if (!v225[0])
            goto LABEL_9;
          *(_DWORD *)v225[0] += 2;
          v225[0] = 0;
          v86 = v15;
          goto LABEL_111;
        }
        v61 = JSC::JSCell::toPrimitive(a2, v10, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
      }
      v239 = (WTF *)v61;
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v15 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 5244) + 8);
        if (!v15)
          goto LABEL_9;
        goto LABEL_7;
      }
      if ((v61 & 0xFFFE000000000002) == 0)
      {
        v62 = *(unsigned __int8 *)(v61 + 5);
        if (v62 == 2)
          goto LABEL_82;
        if (v62 == 4)
        {
          v15 = *(WTF::StringImpl **)(v61 + 8);
          v96 = *(_DWORD *)v15;
          *(_DWORD *)v15 += 4;
          v16 = v96 + 2;
          if (v16)
            goto LABEL_8;
          v86 = v15;
LABEL_121:
          WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
          goto LABEL_9;
        }
      }
      v61 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v239, (uint64_t)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_82:
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v15 = 0;
        goto LABEL_9;
      }
      v15 = *(WTF::StringImpl **)(v61 + 8);
      v63 = v10[7];
      if ((v15 & 1) == 0)
      {
        if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
        {
          v64 = (char *)v63 + 64768;
          if (*((WTF::StringImpl **)v63 + 8096) != v15)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v63 + 8096, v15, a3, (uint64_t)a4, a5, a6, a7, a8);
            v65 = *(WTF::StringImpl **)(v61 + 8);
            if (v65)
            {
              if ((*((_BYTE *)v65 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v65 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v65, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v225);
                v65 = v225[0];
              }
            }
            v64 = (char *)v63 + 64768;
            v66 = (WTF::StringImpl *)*((_QWORD *)v63 + 8097);
            *((_QWORD *)v63 + 8097) = v65;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
              {
                WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v66 -= 2;
              }
              v64 = (char *)v63 + 64768;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v61 + 8) + 16) & 0x10) == 0)
          {
            v67 = (WTF::StringImpl *)*((_QWORD *)v64 + 1);
            *(_DWORD *)v67 += 2;
            v225[0] = v67;
            __dmb(0xAu);
            v68 = *(WTF::StringImpl **)(v61 + 8);
            *(WTF::StringImpl **)(v61 + 8) = v225[0];
            v225[0] = v68;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v63 + 192, (unint64_t)v225);
            v69 = v225[0];
            v225[0] = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
            v64 = (char *)v63 + 64768;
          }
          v15 = (WTF::StringImpl *)*((_QWORD *)v64 + 1);
        }
        goto LABEL_7;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v61, (JSC::JSGlobalObject *)v10);
      if (!*((_DWORD *)v63 + 20))
        goto LABEL_109;
      v118 = v63;
      goto LABEL_198;
    }
    v244[0] = a1;
    v41 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a1, v10, a3, a4, a5, a6, a7, a8);
  }
  v13 = v41;
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v42, (uint64_t)v43, v44, v45, v46, v47, v48))
  {
    return 0;
  }
  v14 = (unint64_t)v10[7];
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v8 + 5) == 2)
    {
      v49 = *(_QWORD *)(v8 + 8);
      if ((v49 & 1) != 0)
      {
LABEL_138:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)v10);
        if (!*(_DWORD *)(v14 + 80))
        {
LABEL_139:
          v49 = (unint64_t)v225[0];
          if (!v225[0])
            goto LABEL_50;
          *(_DWORD *)v225[0] += 2;
          v225[0] = 0;
          v117 = (WTF::StringImpl *)v49;
LABEL_141:
          if (*(_DWORD *)v117 != 2)
          {
            *(_DWORD *)v117 -= 2;
            goto LABEL_50;
          }
          goto LABEL_234;
        }
        v184 = (JSC::VM *)v14;
        goto LABEL_207;
      }
      if ((*(_BYTE *)(v49 + 16) & 0x10) == 0)
      {
        if (*(_QWORD *)(v14 + 64768) != v49)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v14 + 64768), *(WTF::AtomStringImpl **)(v8 + 8), (uint64_t)v43, v44, v45, v46, v47, v48);
          v119 = *(WTF::StringImpl **)(v8 + 8);
          if (v119)
          {
            if ((*((_BYTE *)v119 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v119 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v119, v43, v44, v45, v46, v47, v48, (WTF *)v225);
              v119 = v225[0];
            }
          }
          v120 = *(WTF::StringImpl **)(v14 + 64776);
          *(_QWORD *)(v14 + 64776) = v119;
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
            {
              WTF::StringImpl::~StringImpl(v120, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
              WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
            }
            else
            {
              *(_DWORD *)v120 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
        {
          v121 = *(_DWORD **)(v14 + 64776);
          *v121 += 2;
          __dmb(0xAu);
          v122 = *(WTF::StringImpl **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = v121;
          v225[0] = v122;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v14 + 192, (unint64_t)v225);
          v123 = v225[0];
          v225[0] = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
            {
              WTF::StringImpl::~StringImpl(v123, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
              WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
            }
            else
            {
              *(_DWORD *)v123 -= 2;
            }
          }
        }
        v49 = *(_QWORD *)(v14 + 64776);
      }
      goto LABEL_48;
    }
    v8 = JSC::JSCell::toPrimitive(v8, v10, (JSC::Structure *)2, v44, v45, v46, v47, v48);
  }
  v239 = (WTF *)v8;
  if (*(_DWORD *)(v14 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)v42, (uint64_t)v43, v44, v45, v46, v47, v48))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
    if (!v49)
      goto LABEL_50;
    goto LABEL_48;
  }
  if ((v8 & 0xFFFE000000000002) != 0)
    goto LABEL_235;
  v193 = *(unsigned __int8 *)(v8 + 5);
  if (v193 != 2)
  {
    if (v193 == 4)
    {
      v49 = *(_QWORD *)(v8 + 8);
      v200 = *(_DWORD *)v49;
      *(_DWORD *)v49 += 4;
      v50 = v200 + 2;
      if (!v50)
      {
        v117 = (WTF::StringImpl *)v49;
LABEL_234:
        WTF::StringImpl::~StringImpl(v117, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
        goto LABEL_50;
      }
LABEL_49:
      *(_DWORD *)v49 = v50;
      goto LABEL_50;
    }
LABEL_235:
    v8 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v239, (uint64_t)v10, (JSC::Structure *)1, v44, v45, v46, v47, v48);
  }
  if (*(_DWORD *)(v14 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)v42, (uint64_t)v43, v44, v45, v46, v47, v48))
  {
    v49 = 0;
    goto LABEL_50;
  }
  v49 = *(_QWORD *)(v8 + 8);
  v194 = v10[7];
  if ((v49 & 1) == 0)
  {
    if ((*(_BYTE *)(v49 + 16) & 0x10) == 0)
    {
      if (*((_QWORD *)v194 + 8096) != v49)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v194 + 8096, *(WTF::AtomStringImpl **)(v8 + 8), (uint64_t)v43, v44, v45, v46, v47, v48);
        v195 = *(WTF::StringImpl **)(v8 + 8);
        if (v195)
        {
          if ((*((_BYTE *)v195 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v195 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v195, v43, v44, v45, v46, v47, v48, (WTF *)v225);
            v195 = v225[0];
          }
        }
        v196 = (WTF::StringImpl *)*((_QWORD *)v194 + 8097);
        *((_QWORD *)v194 + 8097) = v195;
        if (v196)
        {
          if (*(_DWORD *)v196 == 2)
          {
            WTF::StringImpl::~StringImpl(v196, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          }
          else
          {
            *(_DWORD *)v196 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
      {
        v197 = (_DWORD *)*((_QWORD *)v194 + 8097);
        *v197 += 2;
        __dmb(0xAu);
        v198 = *(WTF::StringImpl **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v197;
        v225[0] = v198;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v194 + 192, (unint64_t)v225);
        v199 = v225[0];
        v225[0] = 0;
        if (v199)
        {
          if (*(_DWORD *)v199 == 2)
          {
            WTF::StringImpl::~StringImpl(v199, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
          }
          else
          {
            *(_DWORD *)v199 -= 2;
          }
        }
      }
      v49 = *((_QWORD *)v194 + 8097);
    }
LABEL_48:
    v50 = *(_DWORD *)v49 + 2;
    goto LABEL_49;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)v10);
  if (!*((_DWORD *)v194 + 20))
    goto LABEL_139;
  v184 = v194;
LABEL_207:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v184, (uint64_t)v42, (uint64_t)v43, v44, v45, v46, v47, v48))
    goto LABEL_139;
  v49 = 0;
  v117 = v225[0];
  v225[0] = 0;
  if (v117)
    goto LABEL_141;
LABEL_50:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v42, (uint64_t)v43, v44, v45, v46, v47, v48))
  {
    v38 = 0;
  }
  else
  {
    v226 = 0xFFFFFFFF00000000;
    v228 = 0;
    v229 = 0;
    v227 = v13;
    v230 = 0x20000;
    v231 = 0;
    LOBYTE(v232) = 0;
    v233 = 0;
    v234 = 0;
    v235 = 0;
    JSC::JSObject::getPrivateField(v13, v10, v49, (uint64_t)v225, v45, v46, v47, v48);
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v51, v52, v53, v45, v46, v47, v48))
    {
      v38 = 0;
    }
    else if (BYTE1(v230) == 1)
    {
      v38 = v225[0];
    }
    else
    {
      if (BYTE1(v230) == 2)
        v87 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v225, (JSC::JSGlobalObject *)v10, v52, v53, v45, v46, v47, v48);
      else
        v87 = JSC::PropertySlot::customGetter((uint64_t)v225, v10[7], (WTF::StringImpl *)v49);
      v38 = (WTF::StringImpl *)v87;
    }
    if (v233)
    {
      v54 = *(_DWORD *)(v232 + 4);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x1987BC4D4);
      }
      *(_DWORD *)(v232 + 4) = v54 - 1;
    }
  }
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v49, v51, v52, v53, v45, v46, v47, v48);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  return v38;
}

uint64_t JSC::JSObject::getPrivateField(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::Structure *v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;

  v9 = a2[7];
  if (!(a3 >> 4)
    || (v11 = (JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)),
        ((a3 >> 4) & ~*((_DWORD *)v11 + 8)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty(v11, a2[7], a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8),
        !v14)
    || (v38 = (WTF::StringImpl *)a3, v15 = JSC::PropertyTable::get(v14, (uint64_t *)&v38), (_DWORD)v15 == -1))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x2300000002;
    *(_QWORD *)(v19 + 8) = "Cannot access invalid private field";
    *(_DWORD *)(v19 + 16) = 4;
    v38 = (WTF::StringImpl *)v19;
    v27 = JSC::createTypeError((uint64_t)a2, &v38, (uint64_t)JSC::defaultSourceAppender, 0);
    v29 = v38;
    v38 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    if ((v27 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
    {
      v27 = JSC::Exception::create((uint64_t)v9, (JSC::VM *)v27, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, (JSC::Exception *)v27, v28, v22, v23, v24, v25, v26);
    return 0;
  }
  else
  {
    if ((int)v15 <= 63)
    {
      v16 = a1 + 16;
      v17 = v15 << 32;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 8) - 8;
      v17 = 0x3F00000000 - (v15 << 32);
    }
    *(_QWORD *)a4 = *(_QWORD *)(v16 + (v17 >> 29));
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v15);
    *(_DWORD *)(a4 + 20) = v15;
    *(_WORD *)(a4 + 48) = 257;
    return 1;
  }
}

JSC::VM **operationGetPrivateNameGaveUp(JSC::JSCell *a1, WTF::AtomStringImpl *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM **v9;
  uint64_t v10;
  JSC::VM *v11;
  unsigned __int8 *v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  WTF::StringImpl *v31;
  char v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  char v36;
  JSC::VM **v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  _QWORD *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  _QWORD *v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  WTF::StringImpl **v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::JSCell *v141;
  unsigned __int8 *v142;
  WTF::StringImpl *v143;
  uint64_t vars0;

  v8 = (uint64_t)a2;
  v9 = *(JSC::VM ***)(a3 + 56);
  v10 = vars0;
  *((_QWORD *)v9[7] + 5) = vars0;
  *(_DWORD *)(v10 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v141 = a1;
  v11 = v9[7];
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v66 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v141, (JSC::JSGlobalObject *)v9, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_59;
  }
  v12 = (unsigned __int8 *)a1;
  if (*((unsigned __int8 *)a1 + 5) <= 0x16u)
  {
    v66 = JSC::JSCell::toObjectSlow(a1, v9, a3, a4, a5, a6, a7, a8);
LABEL_59:
    v12 = (unsigned __int8 *)v66;
  }
  if (*((_DWORD *)v11 + 20))
  {
    v75 = *((_DWORD *)v11 + 20);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v11 + 2))
      return 0;
  }
  v13 = v9[7];
  if ((v8 & 0xFFFE000000000002) != 0)
  {
LABEL_84:
    v142 = (unsigned __int8 *)v8;
    if (*((_DWORD *)v13 + 20))
    {
      v122 = *((_DWORD *)v13 + 20);
      if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v13 + 2))
      {
        v14 = *(WTF::StringImpl **)(*((_QWORD *)v13 + 5244) + 8);
        if (!v14)
          goto LABEL_10;
        goto LABEL_8;
      }
    }
    if ((v8 & 0xFFFE000000000002) == 0)
    {
      v93 = *(unsigned __int8 *)(v8 + 5);
      if (v93 == 2)
      {
LABEL_91:
        if (*((_DWORD *)v13 + 20))
        {
          v123 = *((_DWORD *)v13 + 20);
          if ((v123 & 0x27) != 0 && (v123 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_QWORD *)v13 + 2))
          {
            v14 = 0;
            goto LABEL_10;
          }
        }
        v14 = *(WTF::StringImpl **)(v8 + 8);
        v13 = v9[7];
        if ((v14 & 1) == 0)
        {
          if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
          {
            v96 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
            if (v96 != v14)
            {
              *(_DWORD *)v14 += 2;
              *((_QWORD *)v13 + 8096) = v14;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::~StringImpl(v96, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                }
              }
              v97 = *(WTF::StringImpl **)(v8 + 8);
              if (v97)
              {
                if ((*((_BYTE *)v97 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v97 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v97, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v143);
                  v97 = v143;
                }
              }
              v98 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
              *((_QWORD *)v13 + 8097) = v97;
              if (v98)
              {
                if (*(_DWORD *)v98 == 2)
                {
                  WTF::StringImpl::~StringImpl(v98, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
                }
                else
                {
                  *(_DWORD *)v98 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
            {
              v99 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
              *(_DWORD *)v99 += 2;
              v143 = v99;
              __dmb(0xAu);
              v100 = *(WTF::StringImpl **)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v143;
              v143 = v100;
              v101 = (_QWORD *)((char *)v13 + 808);
              v102 = *((unsigned int *)v13 + 205);
              if ((_DWORD)v102 == *((_DWORD *)v13 + 204))
              {
                v104 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v143);
                v102 = *((unsigned int *)v13 + 205);
                v103 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v102);
                v100 = *v104;
              }
              else
              {
                v103 = (WTF::StringImpl **)(*v101 + 8 * v102);
                v104 = &v143;
              }
              *v104 = 0;
              *v103 = v100;
              *((_DWORD *)v13 + 205) = v102 + 1;
              v105 = v143;
              v143 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                {
                  WTF::StringImpl::~StringImpl(v105, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
                }
                else
                {
                  *(_DWORD *)v105 -= 2;
                }
              }
            }
            v14 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
          }
          goto LABEL_8;
        }
        goto LABEL_107;
      }
      if (v93 == 4)
      {
        v14 = *(WTF::StringImpl **)(v8 + 8);
        v94 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v15 = v94 + 2;
        if (v15)
          goto LABEL_9;
        v95 = v14;
LABEL_112:
        WTF::StringImpl::~StringImpl(v95, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        goto LABEL_10;
      }
    }
    v8 = (uint64_t)JSC::JSValue::toStringSlowCase(&v142, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_91;
  }
  if (*(_BYTE *)(v8 + 5) != 2)
  {
    v8 = JSC::JSCell::toPrimitive(v8, v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_84;
  }
  v14 = *(WTF::StringImpl **)(v8 + 8);
  if ((v14 & 1) != 0)
  {
LABEL_107:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)v9);
    if (!*((_DWORD *)v13 + 20))
      goto LABEL_108;
    v124 = *((_DWORD *)v13 + 20);
    if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v13 + 2))
    {
      v14 = 0;
      v95 = v143;
      v143 = 0;
      if (!v95)
        goto LABEL_10;
    }
    else
    {
LABEL_108:
      v14 = v143;
      if (!v143)
        goto LABEL_10;
      *(_DWORD *)v143 += 2;
      v143 = 0;
      v95 = v14;
    }
    if (*(_DWORD *)v95 != 2)
    {
      *(_DWORD *)v95 -= 2;
      goto LABEL_10;
    }
    goto LABEL_112;
  }
  if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
  {
    v56 = (WTF::StringImpl *)*((_QWORD *)v13 + 8096);
    if (v56 != v14)
    {
      *(_DWORD *)v14 += 2;
      *((_QWORD *)v13 + 8096) = v14;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      v57 = *(WTF::StringImpl **)(v8 + 8);
      if (v57)
      {
        if ((*((_BYTE *)v57 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v57 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v57, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v143);
          v57 = v143;
        }
      }
      v58 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
      *((_QWORD *)v13 + 8097) = v57;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
    {
      v59 = (_DWORD *)*((_QWORD *)v13 + 8097);
      *v59 += 2;
      __dmb(0xAu);
      v60 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v59;
      v143 = v60;
      v61 = (_QWORD *)((char *)v13 + 808);
      v62 = *((unsigned int *)v13 + 205);
      if ((_DWORD)v62 == *((_DWORD *)v13 + 204))
      {
        v64 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v143);
        v62 = *((unsigned int *)v13 + 205);
        v63 = (WTF::StringImpl **)(*((_QWORD *)v13 + 101) + 8 * v62);
        v60 = *v64;
      }
      else
      {
        v63 = (WTF::StringImpl **)(*v61 + 8 * v62);
        v64 = &v143;
      }
      *v64 = 0;
      *v63 = v60;
      *((_DWORD *)v13 + 205) = v62 + 1;
      v65 = v143;
      v143 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
        {
          WTF::StringImpl::~StringImpl(v65, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v65 -= 2;
        }
      }
    }
    v14 = (WTF::StringImpl *)*((_QWORD *)v13 + 8097);
  }
LABEL_8:
  v15 = *(_DWORD *)v14 + 2;
LABEL_9:
  *(_DWORD *)v14 = v15;
LABEL_10:
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_11;
  v76 = *((_DWORD *)v11 + 20);
  if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v11 + 2))
  {
LABEL_11:
    v16 = (uint64_t)v9[7];
    if (!((unint64_t)v14 >> 4)
      || (((unint64_t)v14 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)), v9[7], a3, a4, a5, a6, a7, a8), !v17)|| (v143 = v14, v18 = JSC::PropertyTable::get(v17, (uint64_t *)&v143), (_DWORD)v18 == -1))
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x2300000002;
      *(_QWORD *)(v21 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v21 + 16) = 4;
      v143 = (WTF::StringImpl *)v21;
      v29 = JSC::createTypeError((uint64_t)v9, &v143, (uint64_t)JSC::defaultSourceAppender, 0);
      v31 = v143;
      v143 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
      if ((v29 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
      {
        v29 = JSC::Exception::create(v16, (JSC::VM *)v29, 0, v24, v25, v26, v27, v28);
      }
      JSC::VM::throwException((JSC::VM *)v16, (JSC::JSGlobalObject *)v9, (JSC::Exception *)v29, v30, v24, v25, v26, v27, v28);
      v32 = 0;
      v33 = 0;
      LOBYTE(v16) = 0;
    }
    else
    {
      if ((int)v18 <= 63)
      {
        v19 = (uint64_t)(v12 + 16);
        v20 = v18 << 32;
      }
      else
      {
        v19 = *((_QWORD *)v12 + 1) - 8;
        v20 = 0x3F00000000 - (v18 << 32);
      }
      v9 = *(JSC::VM ***)(v19 + (v20 >> 29));
      if (!*((_DWORD *)v11 + 20))
        goto LABEL_34;
      v16 = HIDWORD(v18);
      v32 = 1;
      v33 = v12;
    }
    v34 = *((_DWORD *)v11 + 20);
    if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    v35 = *((_QWORD *)v11 + 2);
    if (v35)
      v36 = 1;
    else
      v36 = v32;
    if (v35)
      v37 = 0;
    else
      v37 = v9;
    if ((v36 & 1) != 0)
    {
      v9 = v37;
    }
    else
    {
      if ((v16 & 0x20) != 0)
        v55 = v12;
      else
        v55 = v33;
      v9 = (JSC::VM **)((uint64_t (*)(_QWORD, unsigned __int8 *, WTF::StringImpl *))v9)(*(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28), v55, v14);
    }
    goto LABEL_34;
  }
  v9 = 0;
LABEL_34:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v9;
}

JSC::VM **operationGetPrivateNameGeneric(JSC::VM **a1, JSC::JSCell *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM **v9;
  JSC::VM *v10;
  unsigned __int8 *v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  int v14;
  JSC::VM *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t TypeError;
  WTF::StringImpl *v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  char v34;
  JSC::VM **v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  _QWORD *v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::JSCell *v139;
  unsigned __int8 *v140;
  WTF::StringImpl *var48[10];

  v8 = (uint64_t)a3;
  v9 = a1;
  v10 = a1[7];
  *((WTF::StringImpl **)v10 + 5) = var48[9];
  v139 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    v64 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v139, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_57;
  }
  v11 = (unsigned __int8 *)a2;
  if (*((unsigned __int8 *)a2 + 5) <= 0x16u)
  {
    v64 = JSC::JSCell::toObjectSlow(a2, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_57:
    v11 = (unsigned __int8 *)v64;
  }
  if (*((_DWORD *)v10 + 20))
  {
    v73 = *((_DWORD *)v10 + 20);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  v12 = v9[7];
  if ((v8 & 0xFFFE000000000002) != 0)
  {
LABEL_81:
    v140 = (unsigned __int8 *)v8;
    if (*((_DWORD *)v12 + 20))
    {
      v120 = *((_DWORD *)v12 + 20);
      if ((v120 & 0x27) != 0 && (v120 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v12 + 2))
      {
        v13 = *(WTF::StringImpl **)(*((_QWORD *)v12 + 5244) + 8);
        if (!v13)
          goto LABEL_10;
        goto LABEL_8;
      }
    }
    if ((v8 & 0xFFFE000000000002) == 0)
    {
      v91 = *(unsigned __int8 *)(v8 + 5);
      if (v91 == 2)
      {
LABEL_88:
        if (*((_DWORD *)v12 + 20))
        {
          v121 = *((_DWORD *)v12 + 20);
          if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_QWORD *)v12 + 2))
          {
            v13 = 0;
            goto LABEL_10;
          }
        }
        v13 = *(WTF::StringImpl **)(v8 + 8);
        v12 = v9[7];
        if ((v13 & 1) == 0)
        {
          if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
          {
            v94 = (WTF::StringImpl *)*((_QWORD *)v12 + 8096);
            if (v94 != v13)
            {
              *(_DWORD *)v13 += 2;
              *((_QWORD *)v12 + 8096) = v13;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                {
                  WTF::StringImpl::~StringImpl(v94, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
                }
                else
                {
                  *(_DWORD *)v94 -= 2;
                }
              }
              v95 = *(WTF::StringImpl **)(v8 + 8);
              if (v95)
              {
                if ((*((_BYTE *)v95 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v95 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v95, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)var48);
                  v95 = var48[0];
                }
              }
              v96 = (WTF::StringImpl *)*((_QWORD *)v12 + 8097);
              *((_QWORD *)v12 + 8097) = v95;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::~StringImpl(v96, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
            {
              v97 = (WTF::StringImpl *)*((_QWORD *)v12 + 8097);
              *(_DWORD *)v97 += 2;
              var48[0] = v97;
              __dmb(0xAu);
              v98 = *(WTF::StringImpl **)(v8 + 8);
              *(WTF::StringImpl **)(v8 + 8) = var48[0];
              var48[0] = v98;
              v99 = (_QWORD *)((char *)v12 + 808);
              v100 = *((unsigned int *)v12 + 205);
              if ((_DWORD)v100 == *((_DWORD *)v12 + 204))
              {
                v102 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)var48);
                v100 = *((unsigned int *)v12 + 205);
                v101 = (WTF::StringImpl **)(*((_QWORD *)v12 + 101) + 8 * v100);
                v98 = *v102;
              }
              else
              {
                v101 = (WTF::StringImpl **)(*v99 + 8 * v100);
                v102 = var48;
              }
              *v102 = 0;
              *v101 = v98;
              *((_DWORD *)v12 + 205) = v100 + 1;
              v103 = var48[0];
              var48[0] = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                {
                  WTF::StringImpl::~StringImpl(v103, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
                }
                else
                {
                  *(_DWORD *)v103 -= 2;
                }
              }
            }
            v13 = (WTF::StringImpl *)*((_QWORD *)v12 + 8097);
          }
          goto LABEL_8;
        }
        goto LABEL_104;
      }
      if (v91 == 4)
      {
        v13 = *(WTF::StringImpl **)(v8 + 8);
        v92 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 4;
        v14 = v92 + 2;
        if (v14)
          goto LABEL_9;
        v93 = v13;
LABEL_109:
        WTF::StringImpl::~StringImpl(v93, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        goto LABEL_10;
      }
    }
    v8 = (uint64_t)JSC::JSValue::toStringSlowCase(&v140, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_88;
  }
  if (*(_BYTE *)(v8 + 5) != 2)
  {
    v8 = JSC::JSCell::toPrimitive(v8, v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_81;
  }
  v13 = *(WTF::StringImpl **)(v8 + 8);
  if ((v13 & 1) != 0)
  {
LABEL_104:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)v9);
    if (!*((_DWORD *)v12 + 20))
      goto LABEL_105;
    v122 = *((_DWORD *)v12 + 20);
    if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v12 + 2))
    {
      v13 = 0;
      v93 = var48[0];
      var48[0] = 0;
      if (!v93)
        goto LABEL_10;
    }
    else
    {
LABEL_105:
      v13 = var48[0];
      if (!var48[0])
        goto LABEL_10;
      *(_DWORD *)var48[0] += 2;
      var48[0] = 0;
      v93 = v13;
    }
    if (*(_DWORD *)v93 != 2)
    {
      *(_DWORD *)v93 -= 2;
      goto LABEL_10;
    }
    goto LABEL_109;
  }
  if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
  {
    v54 = (WTF::StringImpl *)*((_QWORD *)v12 + 8096);
    if (v54 != v13)
    {
      *(_DWORD *)v13 += 2;
      *((_QWORD *)v12 + 8096) = v13;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v55 = *(WTF::StringImpl **)(v8 + 8);
      if (v55)
      {
        if ((*((_BYTE *)v55 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v55 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v55, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)var48);
          v55 = var48[0];
        }
      }
      v56 = (WTF::StringImpl *)*((_QWORD *)v12 + 8097);
      *((_QWORD *)v12 + 8097) = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
    {
      v57 = (_DWORD *)*((_QWORD *)v12 + 8097);
      *v57 += 2;
      __dmb(0xAu);
      v58 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v57;
      var48[0] = v58;
      v59 = (_QWORD *)((char *)v12 + 808);
      v60 = *((unsigned int *)v12 + 205);
      if ((_DWORD)v60 == *((_DWORD *)v12 + 204))
      {
        v62 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)var48);
        v60 = *((unsigned int *)v12 + 205);
        v61 = (WTF::StringImpl **)(*((_QWORD *)v12 + 101) + 8 * v60);
        v58 = *v62;
      }
      else
      {
        v61 = (WTF::StringImpl **)(*v59 + 8 * v60);
        v62 = var48;
      }
      *v62 = 0;
      *v61 = v58;
      *((_DWORD *)v12 + 205) = v60 + 1;
      v63 = var48[0];
      var48[0] = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
    v13 = (WTF::StringImpl *)*((_QWORD *)v12 + 8097);
  }
LABEL_8:
  v14 = *(_DWORD *)v13 + 2;
LABEL_9:
  *(_DWORD *)v13 = v14;
LABEL_10:
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_11;
  v74 = *((_DWORD *)v10 + 20);
  if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v10 + 2))
  {
LABEL_11:
    v15 = v9[7];
    if (!((unint64_t)v13 >> 4)
      || (((unint64_t)v13 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)), v9[7], (uint64_t)a3, a4, a5, a6, a7, a8), !v16)|| (var48[0] = v13, v17 = JSC::PropertyTable::get(v16, (uint64_t *)var48), (_DWORD)v17 == -1))
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v20 = 0x2300000002;
      *(_QWORD *)(v20 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v20 + 16) = 4;
      var48[0] = (WTF::StringImpl *)v20;
      TypeError = JSC::createTypeError((uint64_t)v9, var48, (uint64_t)JSC::defaultSourceAppender, 0);
      v29 = var48[0];
      var48[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      JSC::VM::throwException(v15, (JSC::JSGlobalObject *)v9, TypeError, v23, v24, v25, v26, v27);
      v30 = 0;
      v31 = 0;
      LOBYTE(v15) = 0;
    }
    else
    {
      if ((int)v17 <= 63)
      {
        v18 = (uint64_t)(v11 + 16);
        v19 = v17 << 32;
      }
      else
      {
        v18 = *((_QWORD *)v11 + 1) - 8;
        v19 = 0x3F00000000 - (v17 << 32);
      }
      v9 = *(JSC::VM ***)(v18 + (v19 >> 29));
      if (!*((_DWORD *)v10 + 20))
        goto LABEL_32;
      v15 = (JSC::VM *)HIDWORD(v17);
      v30 = 1;
      v31 = v11;
    }
    v32 = *((_DWORD *)v10 + 20);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v33 = *((_QWORD *)v10 + 2);
    if (v33)
      v34 = 1;
    else
      v34 = v30;
    if (v33)
      v35 = 0;
    else
      v35 = v9;
    if ((v34 & 1) != 0)
    {
      v9 = v35;
    }
    else
    {
      if ((v15 & 0x20) != 0)
        v53 = v11;
      else
        v53 = v31;
      v9 = (JSC::VM **)((uint64_t (*)(_QWORD, unsigned __int8 *, WTF::StringImpl *))v9)(*(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28), v53, v13);
    }
    goto LABEL_32;
  }
  v9 = 0;
LABEL_32:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v9;
}

JSC::VM **operationGetPrivateNameByIdGaveUp(JSC::JSCell *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  JSC::VM *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t TypeError;
  double v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned __int8 *v33;
  char v34;
  WTF::StringImpl *v35;
  int *v36;
  int v37;
  int v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  char v77;
  JSC::VM **v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t Error;
  double v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::VM *v103;
  WTF::StringImpl *v104[2];
  WTF::StringImpl *v105;
  int v106;
  unsigned __int8 *v107;
  uint64_t vars0;

  v9 = *(JSC::VM ***)(a2 + 56);
  v10 = v9[7];
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  v12 = *(_QWORD *)(a2 + 16);
  v103 = v10;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  v107 = (unsigned __int8 *)a1;
  v14 = (uint64_t)v9[7];
  if (((unint64_t)a1 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    v81.i64[0] = 0x1000000002;
    *(_QWORD *)v80 = 0x1000000002;
    *(_QWORD *)(v80 + 8) = "is not an object";
    *(_DWORD *)(v80 + 16) = 4;
    v104[0] = (WTF::StringImpl *)v80;
    Error = JSC::createError((unint64_t)v9, (unint64_t)a1, (uint64_t *)v104, (uint64_t)JSC::defaultSourceAppender, v82, v83, v84, v85, v81);
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v80, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
    if ((Error & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
    {
      Error = JSC::Exception::create(v14, (JSC::VM *)Error, 0, v88, v89, v90, v91, v92);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)v9, (JSC::Exception *)Error, v94, v88, v89, v90, v91, v92);
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v73 = *(_DWORD *)(v14 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_56;
  }
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v72 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v107, (JSC::JSGlobalObject *)v9, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_49;
  }
  v15 = (unsigned __int8 *)a1;
  if (*((unsigned __int8 *)a1 + 5) <= 0x16u)
  {
    v72 = JSC::JSCell::toObjectSlow(a1, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_49:
    v15 = (unsigned __int8 *)v72;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v74 = *(_DWORD *)(v14 + 80);
    if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
LABEL_56:
      v9 = 0;
      goto LABEL_25;
    }
  }
  v16 = v9[7];
  if (!(v13 >> 4)
    || ((v13 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)), v9[7], (uint64_t)a3, a4, a5, a6, a7, a8), !v17)|| (v104[0] = (WTF::StringImpl *)v13, v18 = JSC::PropertyTable::get(v17, (uint64_t *)v104), (_DWORD)v18 == -1))
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v21 = 0x2300000002;
    *(_QWORD *)(v21 + 8) = "Cannot access invalid private field";
    *(_DWORD *)(v21 + 16) = 4;
    v104[0] = (WTF::StringImpl *)v21;
    TypeError = JSC::createTypeError((uint64_t)v9, v104, (uint64_t)JSC::defaultSourceAppender, 0);
    v31 = v104[0];
    v104[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      TypeError = JSC::Exception::create((uint64_t)v16, (JSC::VM *)TypeError, 0, v24, v25, v26, v27, v28);
    }
    JSC::VM::throwException(v16, (JSC::JSGlobalObject *)v9, (JSC::Exception *)TypeError, v30, v24, v25, v26, v27, v28);
    v32 = 0;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    if ((int)v18 <= 63)
    {
      v19 = (uint64_t)(v15 + 16);
      v20 = v18 << 32;
    }
    else
    {
      v19 = *((_QWORD *)v15 + 1) - 8;
      v20 = 0x3F00000000 - (v18 << 32);
    }
    v9 = *(JSC::VM ***)(v19 + (v20 >> 29));
    v32 = BYTE4(v18) & 0x20;
    v34 = 1;
    v33 = v15;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v75 = *(_DWORD *)(v14 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v76 = *(_QWORD *)(v14 + 16);
    if (v76)
      v77 = 1;
    else
      v77 = v34;
    if (v76)
      v78 = 0;
    else
      v78 = v9;
    if ((v77 & 1) != 0)
    {
      v9 = v78;
      goto LABEL_25;
    }
  }
  else if ((v34 & 1) != 0)
  {
    goto LABEL_25;
  }
  if (v32)
    v79 = v15;
  else
    v79 = v33;
  v9 = (JSC::VM **)((uint64_t (*)(_QWORD, unsigned __int8 *, unint64_t))v9)(*(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28), v79, v13);
LABEL_25:
  if (!byte_1ECF4C6B7)
    return v9;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
  {
    v35 = 0;
    if ((v12 & 1) != 0)
    {
LABEL_28:
      v36 = (int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_29;
    }
  }
  else
  {
    v35 = (WTF::StringImpl *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
    if ((v12 & 1) != 0)
      goto LABEL_28;
  }
  v36 = *(int **)(v12 + 8);
LABEL_29:
  LODWORD(v104[0]) = 38;
  v104[1] = v35;
  v37 = v36[4];
  if ((v37 & 0x20) != 0)
  {
    v38 = *v36 + 2;
LABEL_36:
    *v36 = v38;
    goto LABEL_37;
  }
  if ((v37 & 0x10) != 0)
  {
    *v36 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v103 + 5239), (unint64_t)v36, a3, (uint64_t)a4, a5, a6, a7, a8, &v107);
    v36 = (int *)v107;
  }
  v38 = *v36;
  *v36 += 2;
  if (v38)
    goto LABEL_36;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v36, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
LABEL_37:
  v105 = (WTF::StringImpl *)v36;
  v106 = 1;
  JSC::ICEvent::log((JSC::ICEvent *)v104, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v46 = v105;
  v105 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  return v9;
}

WTF::StringImpl *operationGetPrivateNameByIdOptimize(unint64_t a1, uint64_t a2, JSC::Structure *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  JSC::Structure *v16;
  uint64_t v17;
  unint64_t v18;
  WTF::AtomStringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t TypeError;
  double v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  WTF::StringImpl *v122;
  int8x16_t **v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  int v128;
  unint64_t v130;
  int v131;
  int v132;
  unsigned int v133;
  char v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int8x16_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t Error;
  double v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162[2];
  unint64_t v163;
  _DWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  int v167;
  char v168;
  uint64_t v169;
  char v170;
  int8x16_t **v171;
  uint64_t v172;
  unsigned int v173;
  char v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  char *v177;
  WTF::StringImpl *v178;
  uint64_t *v179;
  char *v180;
  WTF::StringImpl **v181;
  uint64_t vars0;

  v8 = a1;
  v9 = *(JSC::VM ***)(a2 + 56);
  v10 = (uint64_t)v9[7];
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a1 + 5) >= 0x17u)
  {
    v163 = 0xFFFFFFFF00000000;
    v165 = 0;
    v166 = 0;
    v164 = (_DWORD *)a1;
    v167 = 0x20000;
    v168 = 0;
    LOBYTE(v169) = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    if (v12)
    {
      if ((v12 & 1) != 0)
        v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
      else
        v15 = *(_QWORD *)(v12 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (!(v15 >> 4)
      || (v16 = (JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)),
          ((v15 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x20)) != 0)
      || (JSC::Structure::ensurePropertyTableIfNotEmpty(v16, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8), !v17)
      || (v176 = (WTF::StringImpl *)v15, v18 = JSC::PropertyTable::get(v17, (uint64_t *)&v176), (_DWORD)v18 == -1))
    {
      v60 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v60 = 0x2300000002;
      *(_QWORD *)(v60 + 8) = "Cannot access invalid private field";
      *(_DWORD *)(v60 + 16) = 4;
      v176 = (WTF::StringImpl *)v60;
      v68 = JSC::createTypeError((uint64_t)v9, &v176, (uint64_t)JSC::defaultSourceAppender, 0);
      v70 = v176;
      v176 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, v61, v62, v63, v64, v65, v66, v67);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
      if ((v68 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)))
      {
        v68 = JSC::Exception::create(v10, (JSC::VM *)v68, 0, v63, v64, v65, v66, v67);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, (JSC::Exception *)v68, v69, v63, v64, v65, v66, v67);
    }
    else
    {
      if ((int)v18 <= 63)
      {
        v27 = v8 + 16;
        v28 = v18 << 32;
      }
      else
      {
        v27 = *(_QWORD *)(v8 + 8) - 8;
        v28 = 0x3F00000000 - (v18 << 32);
      }
      v162[0] = *(WTF::StringImpl **)(v27 + (v28 >> 29));
      v165 = (_DWORD *)v8;
      v163 = __PAIR64__(v18, HIDWORD(v18));
      LOWORD(v167) = 257;
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v137 = *(_DWORD *)(v10 + 80);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v20, v21, v22, v23, v24, v25);
      if (*(_QWORD *)(v10 + 16))
      {
        v59 = 0;
LABEL_109:
        if (v170)
        {
          v128 = *(_DWORD *)(v169 + 4);
          if (!v128)
          {
            __break(0xC471u);
            JUMPOUT(0x1987BE550);
          }
          *(_DWORD *)(v169 + 4) = v128 - 1;
        }
        return v59;
      }
    }
    if (!byte_1ECF4C6B7)
    {
LABEL_58:
      v86 = *(_DWORD *)v8 & 0xFFFFFFFE;
      if (!v86)
      {
        *(_WORD *)(a2 + 129) |= 0x10u;
        goto LABEL_88;
      }
      v87 = *(unsigned __int8 **)(v11 + 16);
      v175 = v12;
      *(_WORD *)(a2 + 129) |= 4u;
      if (*(_BYTE *)(a2 + 124))
      {
        --*(_BYTE *)(a2 + 124);
        goto LABEL_88;
      }
      v88 = *(unsigned __int8 *)(a2 + 125);
      if (v88 != 255)
        *(_BYTE *)(a2 + 125) = ++v88;
      if (xmmword_1ECF4C260 < v88)
      {
        *(_BYTE *)(a2 + 125) = 0;
        v131 = *(unsigned __int8 *)(a2 + 126);
        v132 = BYTE4(xmmword_1ECF4C260) << v131;
        v133 = v132;
        if (v132 == 255)
          LOBYTE(v132) = -2;
        if (v133 >> v131 == BYTE4(xmmword_1ECF4C260))
          v134 = v132;
        else
          v134 = -2;
        *(_BYTE *)(a2 + 124) = v134;
        if (v131 != 255)
          *(_BYTE *)(a2 + 126) = v131 + 1;
        *(_BYTE *)(a2 + 127) = 0;
        goto LABEL_87;
      }
      if (!*(_BYTE *)(a2 + 127))
      {
LABEL_87:
        JSC::repatchGetBy((uint64_t *)v9, v87, (const WTF::StringImpl *)v8, v12, (uint64_t)v162, a2, 7, v25, v26);
        goto LABEL_88;
      }
      --*(_BYTE *)(a2 + 127);
      v174 = 0;
      v173 = v86;
      v89 = (unsigned __int8 *)(a2 + 128);
      if (__ldaxr((unsigned __int8 *)(a2 + 128)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v89))
      {
        goto LABEL_73;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 128);
LABEL_73:
      v115 = *(_DWORD *)(a2 + 96);
      if (v115)
      {
        v178 = (WTF::StringImpl *)&v173;
        v179 = &v175;
        v180 = &v174;
        v176 = (WTF::StringImpl *)&v173;
        v177 = &v174;
        if (v115 == -1)
        {
          v121 = std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_166;
        }
      }
      else
      {
        if (*(_QWORD *)(a2 + 16))
          v115 = 1;
        else
          v115 = 2;
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_DWORD *)(a2 + 96) = v115;
        v178 = (WTF::StringImpl *)&v173;
        v179 = &v175;
        v180 = &v174;
        v176 = (WTF::StringImpl *)&v173;
        v177 = &v174;
      }
      v181 = &v176;
      ((void (*)(WTF::StringImpl ***))off_1E3596010[v115])(&v181);
      v117 = __ldxr(v89);
      if (v117 == 1)
      {
        if (!__stlxr(0, v89))
          goto LABEL_84;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 128), 0, (uint64_t)v20, v116, v22, v23, v24, v25);
LABEL_84:
      if (!v174
        || v87
        && *(_DWORD *)(v10 + 760) >= v87[7]
        && (JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)v87), !v174))
      {
LABEL_88:
        if (v12)
        {
          if ((v12 & 1) != 0)
            v118 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
          else
            v118 = *(WTF::StringImpl **)(v12 + 8);
        }
        else
        {
          v118 = 0;
        }
        if (BYTE1(v167) == 1)
        {
          v59 = v162[0];
          goto LABEL_109;
        }
        if (BYTE1(v167) == 2)
        {
          v119 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v162, (JSC::JSGlobalObject *)v9, (uint64_t)v20, (uint64_t)v118, v22, v23, v24, v25);
LABEL_108:
          v59 = (WTF::StringImpl *)v119;
          goto LABEL_109;
        }
        v120 = (unint64_t)v165;
        v121 = *(_QWORD *)(16 * (*v165 & 0xFFFFFFFE) + 0x28);
        if ((v163 & 0x20) != 0)
          v120 = (unint64_t)v164;
        if (HIBYTE(v167) != 1)
          goto LABEL_107;
        v122 = v9[7];
        v123 = v171;
        if ((v120 & 0xFFFE000000000002) == 0)
        {
          v124 = *(unsigned int *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x4C);
          v125 = *(_DWORD *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v124)
          {
            v126 = 16 * v124;
            if (v171 != (int8x16_t **)v126)
            {
              do
              {
                v126 = *(_QWORD *)(v126 + 16);
                v125 = v126 != 0;
              }
              while ((int8x16_t **)v126 != v171 && v126 != 0);
            }
          }
          if (v125)
          {
LABEL_107:
            v119 = ((uint64_t (*)(unint64_t))v162[0])(v121);
            goto LABEL_108;
          }
        }
LABEL_166:
        v176 = v122;
        v119 = JSC::throwDOMAttributeGetterTypeError(v121, &v176, v123, v118);
        goto LABEL_108;
      }
      goto LABEL_87;
    }
    v79 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    if ((v12 & 1) != 0)
      v80 = (int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    else
      v80 = *(int **)(v12 + 8);
    LODWORD(v176) = 39;
    v177 = (char *)v79;
    v81 = v80[4];
    if ((v81 & 0x20) != 0)
    {
      v82 = *v80 + 2;
    }
    else
    {
      if ((v81 & 0x10) != 0)
      {
        *v80 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v10 + 41912), (unint64_t)v80, v20, v21, v22, v23, v24, v25, &v181);
        v80 = (int *)v181;
      }
      v82 = *v80;
      *v80 += 2;
      if (!v82)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v80, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
LABEL_55:
        v178 = (WTF::StringImpl *)v80;
        LODWORD(v179) = 1;
        JSC::ICEvent::log((JSC::ICEvent *)&v176, (uint64_t)v19, (uint64_t)v20, v21, v22, v23, v24, v25);
        v85 = v178;
        v178 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
          {
            WTF::StringImpl::~StringImpl(v85, v83, (uint64_t)v20, v84, v22, v23, v24, v25);
            WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
          }
          else
          {
            *(_DWORD *)v85 -= 2;
          }
        }
        goto LABEL_58;
      }
    }
    *v80 = v82;
    goto LABEL_55;
  }
  if (v12)
  {
    if ((v12 & 1) != 0)
      v29 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v29 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v29 = 0;
  }
  v176 = (WTF::StringImpl *)a1;
  if ((a1 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v139 = WTF::fastCompactMalloc((WTF *)0x20);
    v140.i64[0] = 0x1000000002;
    *(_QWORD *)v139 = 0x1000000002;
    *(_QWORD *)(v139 + 8) = "is not an object";
    *(_DWORD *)(v139 + 16) = 4;
    v162[0] = (WTF::StringImpl *)v139;
    Error = JSC::createError((unint64_t)v9, v8, (uint64_t *)v162, (uint64_t)JSC::defaultSourceAppender, v141, v142, v143, v144, v140);
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v139, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
    if ((Error & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
    {
      Error = JSC::Exception::create(v10, (JSC::VM *)Error, 0, v147, v148, v149, v150, v151);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, (JSC::Exception *)Error, v153, v147, v148, v149, v150, v151);
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v135 = *(_DWORD *)(v10 + 80);
    if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v13)
  {
    v130 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v176, (JSC::JSGlobalObject *)v9, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_123;
  }
  if (*(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    v130 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_123:
    v8 = v130;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v136 = *(_DWORD *)(v10 + 80);
    if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v30 = v9[7];
  if (!(v29 >> 4)
    || ((v29 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)), v9[7], (uint64_t)a3, a4, a5, a6, a7, a8), !v31)|| (v162[0] = (WTF::StringImpl *)v29, v32 = JSC::PropertyTable::get(v31, (uint64_t *)v162), (_DWORD)v32 == -1))
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v41 = 0x2300000002;
    *(_QWORD *)(v41 + 8) = "Cannot access invalid private field";
    *(_DWORD *)(v41 + 16) = 4;
    v162[0] = (WTF::StringImpl *)v41;
    TypeError = JSC::createTypeError((uint64_t)v9, v162, (uint64_t)JSC::defaultSourceAppender, 0);
    v51 = v162[0];
    v162[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      TypeError = JSC::Exception::create((uint64_t)v30, (JSC::VM *)TypeError, 0, v44, v45, v46, v47, v48);
    }
    JSC::VM::throwException(v30, (JSC::JSGlobalObject *)v9, (JSC::Exception *)TypeError, v50, v44, v45, v46, v47, v48);
    v58 = *(_DWORD *)(v10 + 80);
    if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v52, v53, v54, v55, v56, v57);
    return 0;
  }
  else
  {
    if ((int)v32 <= 63)
    {
      v39 = v8 + 16;
      v40 = v32 << 32;
    }
    else
    {
      v39 = *(_QWORD *)(v8 + 8) - 8;
      v40 = 0x3F00000000 - (v32 << 32);
    }
    v59 = *(WTF::StringImpl **)(v39 + (v40 >> 29));
    if (*(_DWORD *)(v10 + 80))
    {
      v138 = *(_DWORD *)(v10 + 80);
      if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v33, v34, v35, v36, v37, v38);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
  }
  return v59;
}

JSC::VM **operationGetPrivateNameByIdGeneric(uint64_t a1, unint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t TypeError;
  WTF::StringImpl *v28;
  int v29;
  _DWORD *v30;
  char v31;
  WTF::StringImpl *v32;
  int *v33;
  int v34;
  int v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  char v75;
  JSC::VM **v76;
  _DWORD *v77;
  uint64_t v78;
  int8x16_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t Error;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  WTF::StringImpl *v101[2];
  WTF::StringImpl *v102;
  int v103;
  _QWORD var58[12];

  v10 = (JSC::VM **)a1;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var58[11];
  if (a3)
  {
    if ((a3 & 1) != 0)
      v12 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v12 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v12 = 0;
  }
  var58[0] = a2;
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v78 = WTF::fastCompactMalloc((WTF *)0x20);
    v79.i64[0] = 0x1000000002;
    *(_QWORD *)v78 = 0x1000000002;
    *(_QWORD *)(v78 + 8) = "is not an object";
    *(_DWORD *)(v78 + 16) = 4;
    v101[0] = (WTF::StringImpl *)v78;
    Error = JSC::createError((unint64_t)v10, a2, (uint64_t *)v101, (uint64_t)JSC::defaultSourceAppender, v80, v81, v82, v83, v79);
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v78, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)v10, Error, v86, v87, v88, v89, v90);
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v70 = *(_DWORD *)(v11 + 80);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_53;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v69 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var58, (JSC::JSGlobalObject *)v10, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_47;
  }
  v13 = a2;
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v69 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, v10, a3, a4, a5, a6, a7, a8);
LABEL_47:
    v13 = v69;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v71 = *(_DWORD *)(v11 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
LABEL_53:
      v10 = 0;
      goto LABEL_23;
    }
  }
  v14 = v10[7];
  if (!(v12 >> 4)
    || ((v12 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE)), v10[7], a3, a4, a5, a6, a7, a8), !v15)|| (v101[0] = (WTF::StringImpl *)v12, v16 = JSC::PropertyTable::get(v15, (uint64_t *)v101), (_DWORD)v16 == -1))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x2300000002;
    *(_QWORD *)(v19 + 8) = "Cannot access invalid private field";
    *(_DWORD *)(v19 + 16) = 4;
    v101[0] = (WTF::StringImpl *)v19;
    TypeError = JSC::createTypeError((uint64_t)v10, v101, (uint64_t)JSC::defaultSourceAppender, 0);
    v28 = v101[0];
    v101[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    JSC::VM::throwException(v14, (JSC::JSGlobalObject *)v10, TypeError, v22, v23, v24, v25, v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    if ((int)v16 <= 63)
    {
      v17 = v13 + 16;
      v18 = v16 << 32;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 8) - 8;
      v18 = 0x3F00000000 - (v16 << 32);
    }
    v10 = *(JSC::VM ***)(v17 + (v18 >> 29));
    v29 = BYTE4(v16) & 0x20;
    v31 = 1;
    v30 = (_DWORD *)v13;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v72 = *(_DWORD *)(v11 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
    {
      v100 = v31;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v31 = v100;
    }
    v73 = *(_QWORD *)(v11 + 16);
    v74 = v73 == 0;
    if (v73)
      v75 = 1;
    else
      v75 = v31;
    if (v74)
      v76 = v10;
    else
      v76 = 0;
    if ((v75 & 1) != 0)
    {
      v10 = v76;
      goto LABEL_23;
    }
  }
  else if ((v31 & 1) != 0)
  {
    goto LABEL_23;
  }
  if (v29)
    v77 = (_DWORD *)v13;
  else
    v77 = v30;
  v10 = (JSC::VM **)((uint64_t (*)(_QWORD, _DWORD *, unint64_t))v10)(*(_QWORD *)(16 * (*v30 & 0xFFFFFFFE) + 0x28), v77, v12);
LABEL_23:
  if (!byte_1ECF4C6B7)
    return v10;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v32 = 0;
    if ((a3 & 1) != 0)
    {
LABEL_26:
      v33 = (int *)(a3 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_27;
    }
  }
  else
  {
    v32 = (WTF::StringImpl *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
    if ((a3 & 1) != 0)
      goto LABEL_26;
  }
  v33 = *(int **)(a3 + 8);
LABEL_27:
  LODWORD(v101[0]) = 40;
  v101[1] = v32;
  v34 = v33[4];
  if ((v34 & 0x20) != 0)
  {
    v35 = *v33 + 2;
LABEL_34:
    *v33 = v35;
    goto LABEL_35;
  }
  if ((v34 & 0x10) != 0)
  {
    *v33 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), (unint64_t)v33, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, var58);
    v33 = (int *)var58[0];
  }
  v35 = *v33;
  *v33 += 2;
  if (v35)
    goto LABEL_34;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_35:
  v102 = (WTF::StringImpl *)v33;
  v103 = 1;
  JSC::ICEvent::log((JSC::ICEvent *)v101, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = v102;
  v102 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  return v10;
}

uint64_t operationDeleteByIdSloppyOptimize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  unint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  char v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  __int16 v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  WTF *v66;
  char *v67;
  unsigned int *v68;
  uint64_t *v69;
  char *v70;
  WTF **v71;
  unint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a2 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (unsigned __int8 *)(a1 & 0xFFFE000000000002);
  if ((a1 & 0xFFFE000000000002) != 0)
    v15 = 0;
  else
    v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v61 = -1;
  v62 = 1;
  if (!v13)
    goto LABEL_58;
  if ((v13 & 1) != 0)
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
  else
    v16 = *(_QWORD *)(v13 + 8);
  while (1)
  {
    v24 = JSC::deleteById(v10, (JSC::VM *)v11, (JSC::Structure *)&v61, a1, v16, 1, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v17, v18, v19, v20, v21, v22, v23))
        return 0;
    }
    if (v14 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
      return v24;
    if (v13)
    {
      v26 = (v13 & 1) != 0 ? v13 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v13 + 8);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 16);
        if ((v27 & 0x20) == 0)
        {
          v28 = *(_BYTE **)(v26 + 8);
          v29 = *(unsigned int *)(v26 + 4);
          if ((v27 & 4) != 0)
          {
            if (!(_DWORD)v29)
              goto LABEL_17;
            v30 = *v28 - 48;
            if (v30 > 9 || v29 >= 2 && *v28 == 48)
              goto LABEL_17;
            v58 = v28 + 1;
            v59 = v29 - 1;
            while (v59)
            {
              if (v30 <= 0x19999999)
              {
                v60 = *v58 - 48;
                if (v60 <= 9)
                {
                  v36 = __CFADD__(v60, 10 * v30);
                  v30 = v60 + 10 * v30;
                  ++v58;
                  --v59;
                  if (!v36)
                    continue;
                }
              }
              goto LABEL_17;
            }
          }
          else
          {
            if (!(_DWORD)v29)
              goto LABEL_17;
            v30 = *(unsigned __int16 *)v28 - 48;
            if (v30 > 9 || *(_WORD *)v28 == 48 && v29 > 1)
              goto LABEL_17;
            v33 = (unsigned __int16 *)(v28 + 2);
            v34 = v29 - 1;
            while (v34)
            {
              if (v30 <= 0x19999999)
              {
                v35 = *v33 - 48;
                if (v35 <= 9)
                {
                  v36 = __CFADD__(v35, 10 * v30);
                  v30 = v35 + 10 * v30;
                  ++v33;
                  --v34;
                  if (!v36)
                    continue;
                }
              }
              goto LABEL_17;
            }
          }
          if (v30 != -1)
            return v24;
        }
      }
    }
LABEL_17:
    v31 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v31)
    {
      *(_WORD *)(a2 + 129) |= 0x10u;
      return v24;
    }
    v12 = *(_QWORD *)(v12 + 16);
    v65 = v13;
    *(_WORD *)(a2 + 129) |= 4u;
    if (*(_BYTE *)(a2 + 124))
    {
      --*(_BYTE *)(a2 + 124);
      return v24;
    }
    v37 = *(unsigned __int8 *)(a2 + 125);
    if (v37 != 255)
      *(_BYTE *)(a2 + 125) = ++v37;
    if (xmmword_1ECF4C260 < v37)
    {
      *(_BYTE *)(a2 + 125) = 0;
      v54 = *(unsigned __int8 *)(a2 + 126);
      v55 = BYTE4(xmmword_1ECF4C260) << v54;
      v56 = v55;
      if (v55 == 255)
        LOBYTE(v55) = -2;
      if (v56 >> v54 == BYTE4(xmmword_1ECF4C260))
        v57 = v55;
      else
        v57 = -2;
      *(_BYTE *)(a2 + 124) = v57;
      if (v54 != 255)
        *(_BYTE *)(a2 + 126) = v54 + 1;
      *(_BYTE *)(a2 + 127) = 0;
LABEL_48:
      JSC::repatchDeleteBy((uint64_t *)v10, (unsigned __int8 *)v12, (const WTF::StringImpl *)&v61, a1, v15, v13, a2, 1, v25, 1u);
      return v24;
    }
    if (!*(_BYTE *)(a2 + 127))
      goto LABEL_48;
    --*(_BYTE *)(a2 + 127);
    v64 = 0;
    v63 = v31;
    v14 = (unsigned __int8 *)(a2 + 128);
    if (__ldaxr((unsigned __int8 *)(a2 + 128)))
    {
      __clrex();
LABEL_36:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 128);
      goto LABEL_37;
    }
    if (__stxr(1u, v14))
      goto LABEL_36;
LABEL_37:
    v39 = *(_DWORD *)(a2 + 96);
    if (!v39)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        v39 = 1;
        *(_DWORD *)(a2 + 96) = 1;
        v68 = &v63;
        v69 = &v65;
        v70 = &v64;
        v66 = (WTF *)&v63;
        v67 = &v64;
LABEL_40:
        v71 = &v66;
        off_1E3596010[v39](&v71, a2 + 80);
        v46 = __ldxr(v14);
        if (v46 == 1)
        {
          if (!__stlxr(0, v14))
            goto LABEL_45;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 128), 0, v40, v41, v42, v43, v44, v45);
LABEL_45:
        if (v64)
        {
          if (!v12)
            goto LABEL_48;
          if (*(_DWORD *)(v11 + 760) < *(unsigned __int8 *)(v12 + 7))
            goto LABEL_48;
          JSC::Heap::writeBarrierSlowPath(v11 + 192, v12);
          if (v64)
            goto LABEL_48;
        }
        return v24;
      }
      v66 = 0;
      v67 = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a2 + 80, &v66, v18, v19, v20, v21, v22, v23);
      if (v66)
        WTF::fastFree((unint64_t)v66, v47, v48, v49, v50, v51, v52, v53);
      v39 = *(_DWORD *)(a2 + 96);
    }
    v68 = &v63;
    v69 = &v65;
    v70 = &v64;
    v66 = (WTF *)&v63;
    v67 = &v64;
    if (v39 != -1)
      goto LABEL_40;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
    v16 = 0;
  }
}

uint64_t operationDeleteByIdStrictOptimize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  unint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  char v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  __int16 v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  WTF *v66;
  char *v67;
  unsigned int *v68;
  uint64_t *v69;
  char *v70;
  WTF **v71;
  unint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a2 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (unsigned __int8 *)(a1 & 0xFFFE000000000002);
  if ((a1 & 0xFFFE000000000002) != 0)
    v15 = 0;
  else
    v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v61 = -1;
  v62 = 1;
  if (!v13)
    goto LABEL_58;
  if ((v13 & 1) != 0)
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
  else
    v16 = *(_QWORD *)(v13 + 8);
  while (1)
  {
    v24 = JSC::deleteById(v10, (JSC::VM *)v11, (JSC::Structure *)&v61, a1, v16, 0, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v17, v18, v19, v20, v21, v22, v23))
        return 0;
    }
    if (v14 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
      return v24;
    if (v13)
    {
      v26 = (v13 & 1) != 0 ? v13 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v13 + 8);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 16);
        if ((v27 & 0x20) == 0)
        {
          v28 = *(_BYTE **)(v26 + 8);
          v29 = *(unsigned int *)(v26 + 4);
          if ((v27 & 4) != 0)
          {
            if (!(_DWORD)v29)
              goto LABEL_17;
            v30 = *v28 - 48;
            if (v30 > 9 || v29 >= 2 && *v28 == 48)
              goto LABEL_17;
            v58 = v28 + 1;
            v59 = v29 - 1;
            while (v59)
            {
              if (v30 <= 0x19999999)
              {
                v60 = *v58 - 48;
                if (v60 <= 9)
                {
                  v36 = __CFADD__(v60, 10 * v30);
                  v30 = v60 + 10 * v30;
                  ++v58;
                  --v59;
                  if (!v36)
                    continue;
                }
              }
              goto LABEL_17;
            }
          }
          else
          {
            if (!(_DWORD)v29)
              goto LABEL_17;
            v30 = *(unsigned __int16 *)v28 - 48;
            if (v30 > 9 || *(_WORD *)v28 == 48 && v29 > 1)
              goto LABEL_17;
            v33 = (unsigned __int16 *)(v28 + 2);
            v34 = v29 - 1;
            while (v34)
            {
              if (v30 <= 0x19999999)
              {
                v35 = *v33 - 48;
                if (v35 <= 9)
                {
                  v36 = __CFADD__(v35, 10 * v30);
                  v30 = v35 + 10 * v30;
                  ++v33;
                  --v34;
                  if (!v36)
                    continue;
                }
              }
              goto LABEL_17;
            }
          }
          if (v30 != -1)
            return v24;
        }
      }
    }
LABEL_17:
    v31 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v31)
    {
      *(_WORD *)(a2 + 129) |= 0x10u;
      return v24;
    }
    v12 = *(_QWORD *)(v12 + 16);
    v65 = v13;
    *(_WORD *)(a2 + 129) |= 4u;
    if (*(_BYTE *)(a2 + 124))
    {
      --*(_BYTE *)(a2 + 124);
      return v24;
    }
    v37 = *(unsigned __int8 *)(a2 + 125);
    if (v37 != 255)
      *(_BYTE *)(a2 + 125) = ++v37;
    if (xmmword_1ECF4C260 < v37)
    {
      *(_BYTE *)(a2 + 125) = 0;
      v54 = *(unsigned __int8 *)(a2 + 126);
      v55 = BYTE4(xmmword_1ECF4C260) << v54;
      v56 = v55;
      if (v55 == 255)
        LOBYTE(v55) = -2;
      if (v56 >> v54 == BYTE4(xmmword_1ECF4C260))
        v57 = v55;
      else
        v57 = -2;
      *(_BYTE *)(a2 + 124) = v57;
      if (v54 != 255)
        *(_BYTE *)(a2 + 126) = v54 + 1;
      *(_BYTE *)(a2 + 127) = 0;
LABEL_48:
      JSC::repatchDeleteBy((uint64_t *)v10, (unsigned __int8 *)v12, (const WTF::StringImpl *)&v61, a1, v15, v13, a2, 0, v25, 0);
      return v24;
    }
    if (!*(_BYTE *)(a2 + 127))
      goto LABEL_48;
    --*(_BYTE *)(a2 + 127);
    v64 = 0;
    v63 = v31;
    v14 = (unsigned __int8 *)(a2 + 128);
    if (__ldaxr((unsigned __int8 *)(a2 + 128)))
    {
      __clrex();
LABEL_36:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 128);
      goto LABEL_37;
    }
    if (__stxr(1u, v14))
      goto LABEL_36;
LABEL_37:
    v39 = *(_DWORD *)(a2 + 96);
    if (!v39)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        v39 = 1;
        *(_DWORD *)(a2 + 96) = 1;
        v68 = &v63;
        v69 = &v65;
        v70 = &v64;
        v66 = (WTF *)&v63;
        v67 = &v64;
LABEL_40:
        v71 = &v66;
        off_1E3596010[v39](&v71, a2 + 80);
        v46 = __ldxr(v14);
        if (v46 == 1)
        {
          if (!__stlxr(0, v14))
            goto LABEL_45;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 128), 0, v40, v41, v42, v43, v44, v45);
LABEL_45:
        if (v64)
        {
          if (!v12)
            goto LABEL_48;
          if (*(_DWORD *)(v11 + 760) < *(unsigned __int8 *)(v12 + 7))
            goto LABEL_48;
          JSC::Heap::writeBarrierSlowPath(v11 + 192, v12);
          if (v64)
            goto LABEL_48;
        }
        return v24;
      }
      v66 = 0;
      v67 = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a2 + 80, &v66, v18, v19, v20, v21, v22, v23);
      if (v66)
        WTF::fastFree((unint64_t)v66, v47, v48, v49, v50, v51, v52, v53);
      v39 = *(_DWORD *)(a2 + 96);
    }
    v68 = &v63;
    v69 = &v65;
    v70 = &v64;
    v66 = (WTF *)&v63;
    v67 = &v64;
    if (v39 != -1)
      goto LABEL_40;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
    v16 = 0;
  }
}

uint64_t operationDeleteByIdSloppyGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  __int16 v16;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a2 + 56);
  v10 = (JSC::VM *)*((_QWORD *)v9 + 7);
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  v12 = *(_QWORD *)(a2 + 16);
  v15 = -1;
  v16 = 1;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  return JSC::deleteById(v9, v10, (JSC::Structure *)&v15, a1, v13, 1, a7, a8);
}

uint64_t JSC::deleteById(JSC::JSGlobalObject *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v26;
  uint64_t v27;

  v8 = a6;
  v26 = a2;
  v27 = a4;
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    v24 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v27, a1, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = (_DWORD *)a4;
    if (*(unsigned __int8 *)(a4 + 5) > 0x16u)
      goto LABEL_3;
    v24 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a4, (JSC::SymbolObject **)a1, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
  }
  v13 = (_DWORD *)v24;
LABEL_3:
  if (*((_DWORD *)a2 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8) || !v13)
      return v22;
  }
  else if (!v13)
  {
    return 0;
  }
  v14 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, uint64_t, JSC::Structure *))(16
                                                                                              * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x58))(v13, a1, a5, a3);
  v22 = v14;
  if (*((_DWORD *)a2 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, v15, v16, v17, v18, v19, v20, v21);
    if (((hasExceptionsAfterHandlingTraps | v22) & 1) != 0)
      return v22 & ~hasExceptionsAfterHandlingTraps;
  }
  else if ((v14 & 1) != 0)
  {
    return 1;
  }
  if (!v8)
    JSC::throwTypeError((unint64_t)a1, &v26, (uint64_t)"Unable to delete property.", 27);
  return v22;
}

uint64_t operationDeleteByIdStrictGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  __int16 v16;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a2 + 56);
  v10 = (JSC::VM *)*((_QWORD *)v9 + 7);
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  v12 = *(_QWORD *)(a2 + 16);
  v15 = -1;
  v16 = 1;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  return JSC::deleteById(v9, v10, (JSC::Structure *)&v15, a1, v13, 0, a7, a8);
}

uint64_t operationDeleteByIdSloppyGeneric(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  int v11;
  __int16 v12;
  uint64_t vars0;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = vars0;
  v11 = -1;
  v12 = 1;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v9 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v9 = 0;
  }
  return JSC::deleteById(a1, v8, (JSC::Structure *)&v11, a2, v9, 1, a7, a8);
}

uint64_t operationDeleteByIdStrictGeneric(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  int v11;
  __int16 v12;
  uint64_t vars0;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = vars0;
  v11 = -1;
  v12 = 1;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v9 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v9 = 0;
  }
  return JSC::deleteById(a1, v8, (JSC::Structure *)&v11, a2, v9, 0, a7, a8);
}

uint64_t operationDeleteByValSloppyOptimize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  int v25;
  WTF *v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t result;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  char v70;
  int v71;
  WTF *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  WTF *v120;
  char *v121;
  unsigned int *v122;
  uint64_t *v123;
  char *v124;
  WTF **v125;
  uint64_t vars0;

  v11 = *(JSC::JSGlobalObject **)(a3 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  v115 = -1;
  v116 = 1;
  v14 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) != 0)
    v15 = 0;
  else
    v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v23 = JSC::deleteByVal(v11, (JSC::VM *)v12, (JSC::Structure *)&v115, a1, a2, 1uLL, a7, a8);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
  {
    return 0;
  }
  if (v14 || (a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return v23;
  v25 = *(unsigned __int8 *)(a2 + 5);
  if (v25 != 2)
  {
    if (v25 == 4)
    {
      v114 = v15;
      v46 = *((_QWORD *)v11 + 7);
      v47 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v11, (JSC::Structure *)2, v18, v19, v20, v21, v22);
      v125 = (WTF **)v47;
      if (*(_DWORD *)(v46 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
        {
          v26 = *(WTF **)(*(_QWORD *)(v46 + 41952) + 8);
          if (!v26)
            goto LABEL_62;
          goto LABEL_60;
        }
        v47 = (uint64_t)v125;
      }
      if ((v47 & 0xFFFE000000000002) == 0)
      {
        v48 = *(unsigned __int8 *)(v47 + 5);
        if (v48 == 2)
          goto LABEL_57;
        if (v48 == 4)
        {
          v26 = *(WTF **)(v47 + 8);
          v71 = *(_DWORD *)v26;
          *(_DWORD *)v26 += 4;
          v50 = v71 + 2;
          if (v50)
            goto LABEL_61;
          v72 = v26;
          goto LABEL_90;
        }
      }
      v47 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v125, (uint64_t)v11, (JSC::Structure *)1, v18, v19, v20, v21, v22);
LABEL_57:
      if (*(_DWORD *)(v46 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
      {
        v26 = 0;
        goto LABEL_62;
      }
      v26 = *(WTF **)(v47 + 8);
      v49 = *((_QWORD *)v11 + 7);
      if ((v26 & 1) == 0)
      {
        if ((*((_BYTE *)v26 + 16) & 0x10) == 0)
        {
          if (*(WTF **)(v49 + 64768) != v26)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v49 + 64768), v26, (uint64_t)v17, v18, v19, v20, v21, v22);
            v81 = *(WTF **)(v47 + 8);
            if (v81)
            {
              if ((*((_BYTE *)v81 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v81 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v81, v17, v18, v19, v20, v21, v22, (WTF *)&v120);
                v81 = v120;
              }
            }
            v82 = *(WTF::StringImpl **)(v49 + 64776);
            *(_QWORD *)(v49 + 64776) = v81;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
              {
                WTF::StringImpl::~StringImpl(v82, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
              }
              else
              {
                *(_DWORD *)v82 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v47 + 8) + 16) & 0x10) == 0)
          {
            v83 = *(WTF **)(v49 + 64776);
            *(_DWORD *)v83 += 2;
            v120 = v83;
            __dmb(0xAu);
            v84 = *(WTF **)(v47 + 8);
            *(_QWORD *)(v47 + 8) = v120;
            v120 = v84;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v49 + 192, (unint64_t)&v120);
            v85 = v120;
            v120 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
              {
                WTF::StringImpl::~StringImpl(v85, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
              }
              else
              {
                *(_DWORD *)v85 -= 2;
              }
            }
          }
          v26 = *(WTF **)(v49 + 64776);
        }
LABEL_60:
        v50 = *(_DWORD *)v26 + 2;
LABEL_61:
        *(_DWORD *)v26 = v50;
LABEL_62:
        v15 = v114;
        goto LABEL_12;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v47, v11);
      if (*(_DWORD *)(v49 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
      {
        v26 = 0;
        v72 = v120;
        v120 = 0;
        if (!v72)
          goto LABEL_62;
      }
      else
      {
        v26 = v120;
        if (!v120)
          goto LABEL_62;
        *(_DWORD *)v120 += 2;
        v120 = 0;
        v72 = v26;
      }
      if (*(_DWORD *)v72 != 2)
      {
        *(_DWORD *)v72 -= 2;
        goto LABEL_62;
      }
LABEL_90:
      WTF::StringImpl::~StringImpl(v72, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      goto LABEL_62;
    }
    return v23;
  }
  v26 = *(WTF **)(a2 + 8);
  if (!v26 || (v26 & 1) != 0 || (*((_BYTE *)v26 + 16) & 0x10) == 0)
    return v23;
  *(_DWORD *)v26 += 2;
LABEL_12:
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
  {
    v113 = v15;
    v27 = *(unsigned __int8 *)(a2 + 5);
    if (v27 == 4)
      goto LABEL_23;
    if (v26)
    {
      v28 = *((_DWORD *)v26 + 4);
      if ((v28 & 0x20) == 0)
      {
        v29 = (_BYTE *)*((_QWORD *)v26 + 1);
        v30 = *((unsigned int *)v26 + 1);
        if ((v28 & 4) != 0)
        {
          if ((_DWORD)v30)
          {
            v31 = *v29 - 48;
            if (v31 <= 9 && (v30 < 2 || *v29 != 48))
            {
              v110 = v30 - 1;
              v111 = v29 + 1;
              while (v110)
              {
                if (v31 <= 0x19999999)
                {
                  v112 = *v111 - 48;
                  if (v112 <= 9)
                  {
                    v39 = __CFADD__(v112, 10 * v31);
                    v31 = v112 + 10 * v31;
                    --v110;
                    ++v111;
                    if (!v39)
                      continue;
                  }
                }
                goto LABEL_19;
              }
LABEL_141:
              if (v31 != -1)
                goto LABEL_26;
            }
          }
        }
        else if ((_DWORD)v30)
        {
          v31 = *(unsigned __int16 *)v29 - 48;
          if (v31 <= 9 && (*(_WORD *)v29 != 48 || v30 <= 1))
          {
            v36 = (unsigned __int16 *)(v29 + 2);
            v37 = v30 - 1;
            while (v37)
            {
              if (v31 <= 0x19999999)
              {
                v38 = *v36 - 48;
                if (v38 <= 9)
                {
                  v39 = __CFADD__(v38, 10 * v31);
                  v31 = v38 + 10 * v31;
                  ++v36;
                  --v37;
                  if (!v39)
                    continue;
                }
              }
              goto LABEL_19;
            }
            goto LABEL_141;
          }
        }
      }
    }
LABEL_19:
    if (v27 != 2 || (v32 = *(_QWORD *)(a2 + 8)) == 0 || (v32 & 1) != 0 || (*(_BYTE *)(v32 + 16) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1987BF8E0);
    }
LABEL_23:
    v33 = *(unsigned __int8 **)(v13 + 16);
    v34 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v34)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      goto LABEL_26;
    }
    v119 = a2;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      goto LABEL_26;
    }
    v40 = *(unsigned __int8 *)(a3 + 125);
    if (v40 != 255)
      *(_BYTE *)(a3 + 125) = ++v40;
    v41 = g_config;
    if (xmmword_1ECF4C260 < v40)
      goto LABEL_77;
    if (!*(_BYTE *)(a3 + 127))
      goto LABEL_69;
    --*(_BYTE *)(a3 + 127);
    v118 = 0;
    v117 = v34;
    v42 = (unsigned __int8 *)(a3 + 128);
    if (__ldaxr((unsigned __int8 *)(a3 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v42))
    {
      goto LABEL_47;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_47:
    v44 = *(_DWORD *)(a3 + 96);
    if (!v44)
    {
      if (*(_QWORD *)(a3 + 16))
      {
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 88) = 0;
        v44 = 1;
        *(_DWORD *)(a3 + 96) = 1;
        v122 = &v117;
        v123 = &v119;
        v124 = &v118;
        v120 = (WTF *)&v117;
        v121 = &v118;
        goto LABEL_50;
      }
      v120 = 0;
      v121 = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a3 + 80, &v120, (uint64_t)v17, v18, v19, v20, v21, v22);
      if (v120)
        WTF::fastFree((unint64_t)v120, v59, v60, v61, v62, v63, v64, v65);
      v44 = *(_DWORD *)(a3 + 96);
    }
    v122 = &v117;
    v123 = &v119;
    v124 = &v118;
    v120 = (WTF *)&v117;
    v121 = &v118;
    if (v44 != -1)
    {
LABEL_50:
      v125 = &v120;
      off_1E3596010[v44](&v125, a3 + 80);
      v45 = __ldxr(v42);
      if (v45 == 1)
      {
        if (!__stlxr(0, v42))
          goto LABEL_66;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, (uint64_t)v17, v18, v19, v20, v21, v22);
LABEL_66:
      if (!v118
        || v33
        && *(_DWORD *)(v12 + 760) >= v33[7]
        && (JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)v33), !v118))
      {
LABEL_26:
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        return v23;
      }
LABEL_69:
      JSC::repatchDeleteBy((uint64_t *)v11, v33, (const WTF::StringImpl *)&v115, a1, v113, a2, a3, 3, v24, 1u);
      goto LABEL_26;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
    *(_BYTE *)(a3 + 125) = 0;
    v66 = *((unsigned __int8 *)v41 + 612);
    v67 = *(unsigned __int8 *)(a3 + 126);
    v68 = v66 << v67;
    v69 = (v66 << v67);
    if (v69 == 255)
      LOBYTE(v68) = -2;
    if (v69 >> v67 == v66)
      v70 = v68;
    else
      v70 = -2;
    *(_BYTE *)(a3 + 124) = v70;
    if (v67 != 255)
      *(_BYTE *)(a3 + 126) = v67 + 1;
    *(_BYTE *)(a3 + 127) = 0;
    goto LABEL_69;
  }
  if (!v26)
    return 0;
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    return 0;
  }
  result = 0;
  *(_DWORD *)v26 -= 2;
  return result;
}

uint64_t operationDeleteByValStrictOptimize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  int v25;
  WTF *v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t result;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  char v70;
  int v71;
  WTF *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  WTF *v120;
  char *v121;
  unsigned int *v122;
  uint64_t *v123;
  char *v124;
  WTF **v125;
  uint64_t vars0;

  v11 = *(JSC::JSGlobalObject **)(a3 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  v115 = -1;
  v116 = 1;
  v14 = a1 & 0xFFFE000000000002;
  if ((a1 & 0xFFFE000000000002) != 0)
    v15 = 0;
  else
    v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v23 = JSC::deleteByVal(v11, (JSC::VM *)v12, (JSC::Structure *)&v115, a1, a2, 0, a7, a8);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
  {
    return 0;
  }
  if (v14 || (a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return v23;
  v25 = *(unsigned __int8 *)(a2 + 5);
  if (v25 != 2)
  {
    if (v25 == 4)
    {
      v114 = v15;
      v46 = *((_QWORD *)v11 + 7);
      v47 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)v11, (JSC::Structure *)2, v18, v19, v20, v21, v22);
      v125 = (WTF **)v47;
      if (*(_DWORD *)(v46 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
        {
          v26 = *(WTF **)(*(_QWORD *)(v46 + 41952) + 8);
          if (!v26)
            goto LABEL_62;
          goto LABEL_60;
        }
        v47 = (uint64_t)v125;
      }
      if ((v47 & 0xFFFE000000000002) == 0)
      {
        v48 = *(unsigned __int8 *)(v47 + 5);
        if (v48 == 2)
          goto LABEL_57;
        if (v48 == 4)
        {
          v26 = *(WTF **)(v47 + 8);
          v71 = *(_DWORD *)v26;
          *(_DWORD *)v26 += 4;
          v50 = v71 + 2;
          if (v50)
            goto LABEL_61;
          v72 = v26;
          goto LABEL_90;
        }
      }
      v47 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v125, (uint64_t)v11, (JSC::Structure *)1, v18, v19, v20, v21, v22);
LABEL_57:
      if (*(_DWORD *)(v46 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
      {
        v26 = 0;
        goto LABEL_62;
      }
      v26 = *(WTF **)(v47 + 8);
      v49 = *((_QWORD *)v11 + 7);
      if ((v26 & 1) == 0)
      {
        if ((*((_BYTE *)v26 + 16) & 0x10) == 0)
        {
          if (*(WTF **)(v49 + 64768) != v26)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v49 + 64768), v26, (uint64_t)v17, v18, v19, v20, v21, v22);
            v81 = *(WTF **)(v47 + 8);
            if (v81)
            {
              if ((*((_BYTE *)v81 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v81 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v81, v17, v18, v19, v20, v21, v22, (WTF *)&v120);
                v81 = v120;
              }
            }
            v82 = *(WTF::StringImpl **)(v49 + 64776);
            *(_QWORD *)(v49 + 64776) = v81;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
              {
                WTF::StringImpl::~StringImpl(v82, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
              }
              else
              {
                *(_DWORD *)v82 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v47 + 8) + 16) & 0x10) == 0)
          {
            v83 = *(WTF **)(v49 + 64776);
            *(_DWORD *)v83 += 2;
            v120 = v83;
            __dmb(0xAu);
            v84 = *(WTF **)(v47 + 8);
            *(_QWORD *)(v47 + 8) = v120;
            v120 = v84;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v49 + 192, (unint64_t)&v120);
            v85 = v120;
            v120 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
              {
                WTF::StringImpl::~StringImpl(v85, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
              }
              else
              {
                *(_DWORD *)v85 -= 2;
              }
            }
          }
          v26 = *(WTF **)(v49 + 64776);
        }
LABEL_60:
        v50 = *(_DWORD *)v26 + 2;
LABEL_61:
        *(_DWORD *)v26 = v50;
LABEL_62:
        v15 = v114;
        goto LABEL_12;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v47, v11);
      if (*(_DWORD *)(v49 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
      {
        v26 = 0;
        v72 = v120;
        v120 = 0;
        if (!v72)
          goto LABEL_62;
      }
      else
      {
        v26 = v120;
        if (!v120)
          goto LABEL_62;
        *(_DWORD *)v120 += 2;
        v120 = 0;
        v72 = v26;
      }
      if (*(_DWORD *)v72 != 2)
      {
        *(_DWORD *)v72 -= 2;
        goto LABEL_62;
      }
LABEL_90:
      WTF::StringImpl::~StringImpl(v72, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      goto LABEL_62;
    }
    return v23;
  }
  v26 = *(WTF **)(a2 + 8);
  if (!v26 || (v26 & 1) != 0 || (*((_BYTE *)v26 + 16) & 0x10) == 0)
    return v23;
  *(_DWORD *)v26 += 2;
LABEL_12:
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22))
  {
    v113 = v15;
    v27 = *(unsigned __int8 *)(a2 + 5);
    if (v27 == 4)
      goto LABEL_23;
    if (v26)
    {
      v28 = *((_DWORD *)v26 + 4);
      if ((v28 & 0x20) == 0)
      {
        v29 = (_BYTE *)*((_QWORD *)v26 + 1);
        v30 = *((unsigned int *)v26 + 1);
        if ((v28 & 4) != 0)
        {
          if ((_DWORD)v30)
          {
            v31 = *v29 - 48;
            if (v31 <= 9 && (v30 < 2 || *v29 != 48))
            {
              v110 = v30 - 1;
              v111 = v29 + 1;
              while (v110)
              {
                if (v31 <= 0x19999999)
                {
                  v112 = *v111 - 48;
                  if (v112 <= 9)
                  {
                    v39 = __CFADD__(v112, 10 * v31);
                    v31 = v112 + 10 * v31;
                    --v110;
                    ++v111;
                    if (!v39)
                      continue;
                  }
                }
                goto LABEL_19;
              }
LABEL_141:
              if (v31 != -1)
                goto LABEL_26;
            }
          }
        }
        else if ((_DWORD)v30)
        {
          v31 = *(unsigned __int16 *)v29 - 48;
          if (v31 <= 9 && (*(_WORD *)v29 != 48 || v30 <= 1))
          {
            v36 = (unsigned __int16 *)(v29 + 2);
            v37 = v30 - 1;
            while (v37)
            {
              if (v31 <= 0x19999999)
              {
                v38 = *v36 - 48;
                if (v38 <= 9)
                {
                  v39 = __CFADD__(v38, 10 * v31);
                  v31 = v38 + 10 * v31;
                  ++v36;
                  --v37;
                  if (!v39)
                    continue;
                }
              }
              goto LABEL_19;
            }
            goto LABEL_141;
          }
        }
      }
    }
LABEL_19:
    if (v27 != 2 || (v32 = *(_QWORD *)(a2 + 8)) == 0 || (v32 & 1) != 0 || (*(_BYTE *)(v32 + 16) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1987C0014);
    }
LABEL_23:
    v33 = *(unsigned __int8 **)(v13 + 16);
    v34 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v34)
    {
      *(_WORD *)(a3 + 129) |= 0x10u;
      goto LABEL_26;
    }
    v119 = a2;
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      goto LABEL_26;
    }
    v40 = *(unsigned __int8 *)(a3 + 125);
    if (v40 != 255)
      *(_BYTE *)(a3 + 125) = ++v40;
    v41 = g_config;
    if (xmmword_1ECF4C260 < v40)
      goto LABEL_77;
    if (!*(_BYTE *)(a3 + 127))
      goto LABEL_69;
    --*(_BYTE *)(a3 + 127);
    v118 = 0;
    v117 = v34;
    v42 = (unsigned __int8 *)(a3 + 128);
    if (__ldaxr((unsigned __int8 *)(a3 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v42))
    {
      goto LABEL_47;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
LABEL_47:
    v44 = *(_DWORD *)(a3 + 96);
    if (!v44)
    {
      if (*(_QWORD *)(a3 + 16))
      {
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 88) = 0;
        v44 = 1;
        *(_DWORD *)(a3 + 96) = 1;
        v122 = &v117;
        v123 = &v119;
        v124 = &v118;
        v120 = (WTF *)&v117;
        v121 = &v118;
        goto LABEL_50;
      }
      v120 = 0;
      v121 = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a3 + 80, &v120, (uint64_t)v17, v18, v19, v20, v21, v22);
      if (v120)
        WTF::fastFree((unint64_t)v120, v59, v60, v61, v62, v63, v64, v65);
      v44 = *(_DWORD *)(a3 + 96);
    }
    v122 = &v117;
    v123 = &v119;
    v124 = &v118;
    v120 = (WTF *)&v117;
    v121 = &v118;
    if (v44 != -1)
    {
LABEL_50:
      v125 = &v120;
      off_1E3596010[v44](&v125, a3 + 80);
      v45 = __ldxr(v42);
      if (v45 == 1)
      {
        if (!__stlxr(0, v42))
          goto LABEL_66;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, (uint64_t)v17, v18, v19, v20, v21, v22);
LABEL_66:
      if (!v118
        || v33
        && *(_DWORD *)(v12 + 760) >= v33[7]
        && (JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)v33), !v118))
      {
LABEL_26:
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        return v23;
      }
LABEL_69:
      JSC::repatchDeleteBy((uint64_t *)v11, v33, (const WTF::StringImpl *)&v115, a1, v113, a2, a3, 2, v24, 0);
      goto LABEL_26;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
    *(_BYTE *)(a3 + 125) = 0;
    v66 = *((unsigned __int8 *)v41 + 612);
    v67 = *(unsigned __int8 *)(a3 + 126);
    v68 = v66 << v67;
    v69 = (v66 << v67);
    if (v69 == 255)
      LOBYTE(v68) = -2;
    if (v69 >> v67 == v66)
      v70 = v68;
    else
      v70 = -2;
    *(_BYTE *)(a3 + 124) = v70;
    if (v67 != 255)
      *(_BYTE *)(a3 + 126) = v67 + 1;
    *(_BYTE *)(a3 + 127) = 0;
    goto LABEL_69;
  }
  if (!v26)
    return 0;
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    return 0;
  }
  result = 0;
  *(_DWORD *)v26 -= 2;
  return result;
}

uint64_t operationDeleteByValSloppyGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  int v13;
  __int16 v14;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a3 + 56);
  v10 = (JSC::VM *)*((_QWORD *)v9 + 7);
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v13 = -1;
  v14 = 1;
  return JSC::deleteByVal(v9, v10, (JSC::Structure *)&v13, a1, a2, 1uLL, a7, a8);
}

uint64_t JSC::deleteByVal(JSC::JSGlobalObject *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v9;
  JSC::VM *v11;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl **v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  WTF::StringImpl *v114;

  v8 = a6;
  v9 = a5;
  v11 = a2;
  v111 = a2;
  v112 = a4;
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    v38 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v112, a1, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = (_DWORD *)a4;
    if (*(unsigned __int8 *)(a4 + 5) > 0x16u)
      goto LABEL_3;
    v38 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a4, (JSC::SymbolObject **)a1, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
  }
  v13 = (_DWORD *)v38;
LABEL_3:
  if (*((_DWORD *)v11 + 20))
  {
    v47 = *((_DWORD *)v11 + 20);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v17 = 0;
    if (*((_QWORD *)v11 + 2) || !v13)
      return v17;
  }
  else if (!v13)
  {
    return 0;
  }
  if (v9 >= 0xFFFE000000000000)
  {
    if ((v9 & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
         && COERCE_DOUBLE(v9 - 0x2000000000000) == (double)COERCE_DOUBLE(v9 - 0x2000000000000))
  {
    v9 = COERCE_DOUBLE(v9 - 0x2000000000000);
LABEL_27:
    v17 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, unint64_t))(16
                                                                                       * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0x60))(v13, a1, v9);
    goto LABEL_20;
  }
  v14 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
LABEL_72:
    v113 = (unsigned __int8 *)v9;
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v15 = *(WTF::StringImpl **)(*(_QWORD *)(v14 + 41952) + 8);
      if (!v15)
        goto LABEL_13;
      goto LABEL_11;
    }
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v66 = *(unsigned __int8 *)(v9 + 5);
      if (v66 == 2)
      {
LABEL_75:
        if (*(_DWORD *)(v14 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v15 = 0;
          goto LABEL_13;
        }
        v15 = *(WTF::StringImpl **)(v9 + 8);
        v14 = *((_QWORD *)a1 + 7);
        if ((v15 & 1) == 0)
        {
          if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
          {
            v67 = *(WTF::StringImpl **)(v14 + 64768);
            if (v67 != v15)
            {
              *(_DWORD *)v15 += 2;
              *(_QWORD *)(v14 + 64768) = v15;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                {
                  WTF::StringImpl::~StringImpl(v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
                }
                else
                {
                  *(_DWORD *)v67 -= 2;
                }
              }
              v68 = *(WTF::StringImpl **)(v9 + 8);
              if (v68)
              {
                if ((*((_BYTE *)v68 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v68 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v68, a3, a4, a5, a6, a7, a8, (WTF *)&v114);
                  v68 = v114;
                }
              }
              v69 = *(WTF::StringImpl **)(v14 + 64776);
              *(_QWORD *)(v14 + 64776) = v68;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                {
                  WTF::StringImpl::~StringImpl(v69, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
                }
                else
                {
                  *(_DWORD *)v69 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
            {
              v70 = *(_DWORD **)(v14 + 64776);
              *v70 += 2;
              __dmb(0xAu);
              v71 = *(WTF::StringImpl **)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v70;
              v114 = v71;
              v72 = (_QWORD *)(v14 + 808);
              v73 = *(unsigned int *)(v14 + 820);
              if ((_DWORD)v73 == *(_DWORD *)(v14 + 816))
              {
                v75 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v114);
                v73 = *(unsigned int *)(v14 + 820);
                v74 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v73);
                v71 = *v75;
              }
              else
              {
                v74 = (WTF::StringImpl **)(*v72 + 8 * v73);
                v75 = &v114;
              }
              *v75 = 0;
              *v74 = v71;
              *(_DWORD *)(v14 + 820) = v73 + 1;
              v76 = v114;
              v114 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
            }
            v15 = *(WTF::StringImpl **)(v14 + 64776);
          }
          goto LABEL_11;
        }
        goto LABEL_91;
      }
      if (v66 == 4)
      {
        v15 = *(WTF::StringImpl **)(v9 + 8);
        v78 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v78 + 2;
        if (v16)
          goto LABEL_12;
        v77 = v15;
LABEL_99:
        WTF::StringImpl::~StringImpl(v77, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
        goto LABEL_13;
      }
    }
    v9 = (unint64_t)JSC::JSValue::toStringSlowCase(&v113, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_75;
  }
  if (*(_BYTE *)(v9 + 5) != 2)
  {
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_72;
  }
  v15 = *(WTF::StringImpl **)(v9 + 8);
  if ((v15 & 1) != 0)
  {
LABEL_91:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v9, a1);
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v15 = 0;
      v77 = v114;
      v114 = 0;
      if (!v77)
        goto LABEL_13;
    }
    else
    {
      v15 = v114;
      if (!v114)
        goto LABEL_13;
      *(_DWORD *)v114 += 2;
      v114 = 0;
      v77 = v15;
    }
    if (*(_DWORD *)v77 != 2)
    {
      *(_DWORD *)v77 -= 2;
      goto LABEL_13;
    }
    goto LABEL_99;
  }
  if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
  {
    v28 = *(WTF::StringImpl **)(v14 + 64768);
    if (v28 != v15)
    {
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v14 + 64768) = v15;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v29 = *(WTF::StringImpl **)(v9 + 8);
      if (v29)
      {
        if ((*((_BYTE *)v29 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v29 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v29, a3, a4, a5, a6, a7, a8, (WTF *)&v114);
          v29 = v114;
        }
      }
      v30 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 16) & 0x10) == 0)
    {
      v31 = *(_DWORD **)(v14 + 64776);
      *v31 += 2;
      __dmb(0xAu);
      v32 = *(WTF::StringImpl **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v31;
      v114 = v32;
      v33 = (_QWORD *)(v14 + 808);
      v34 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v34 == *(_DWORD *)(v14 + 816))
      {
        v36 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v114);
        v34 = *(unsigned int *)(v14 + 820);
        v35 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v34);
        v32 = *v36;
      }
      else
      {
        v35 = (WTF::StringImpl **)(*v33 + 8 * v34);
        v36 = &v114;
      }
      *v36 = 0;
      *v35 = v32;
      *(_DWORD *)(v14 + 820) = v34 + 1;
      v37 = v114;
      v114 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    v15 = *(WTF::StringImpl **)(v14 + 64776);
  }
LABEL_11:
  v16 = *(_DWORD *)v15 + 2;
LABEL_12:
  *(_DWORD *)v15 = v16;
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_14;
LABEL_13:
  v48 = *((_DWORD *)v11 + 20);
  if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*((_QWORD *)v11 + 2))
  {
    v18 = 0;
    v17 = 0;
  }
  else
  {
LABEL_14:
    v17 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, WTF::StringImpl *, JSC::Structure *))(16 * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C) + 0x58))(v13, a1, v15, a3);
    v18 = 1;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (!v18)
    return 0;
  v11 = v111;
LABEL_20:
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((hasExceptionsAfterHandlingTraps | v17) & 1) != 0)
      return v17 & ~hasExceptionsAfterHandlingTraps;
  }
  else if ((v17 & 1) != 0)
  {
    return 1;
  }
  if (!v8)
    JSC::throwTypeError((unint64_t)a1, &v111, (uint64_t)"Unable to delete property.", 27);
  return v17;
}

uint64_t operationDeleteByValStrictGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  int v13;
  __int16 v14;
  uint64_t vars0;

  v9 = *(JSC::JSGlobalObject **)(a3 + 56);
  v10 = (JSC::VM *)*((_QWORD *)v9 + 7);
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v13 = -1;
  v14 = 1;
  return JSC::deleteByVal(v9, v10, (JSC::Structure *)&v13, a1, a2, 0, a7, a8);
}

uint64_t operationDeleteByValSloppyGeneric(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  int v10;
  __int16 v11;
  uint64_t vars0;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = vars0;
  v10 = -1;
  v11 = 1;
  return JSC::deleteByVal(a1, v8, (JSC::Structure *)&v10, a2, a3, 1uLL, a7, a8);
}

uint64_t operationDeleteByValStrictGeneric(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  int v10;
  __int16 v11;
  uint64_t vars0;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = vars0;
  v10 = -1;
  v11 = 1;
  return JSC::deleteByVal(a1, v8, (JSC::Structure *)&v10, a2, a3, 0, a7, a8);
}

unint64_t operationPushWithScope(JSC::JSGlobalObject *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSScope *v11;
  unint64_t v13;
  int v14;
  JSC::JSScope *v15;
  _QWORD var28[6];

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var28[5];
  var28[0] = a3;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v13 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var28, a1, (JSC::Structure *)a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_8;
  }
  v11 = (JSC::JSScope *)a3;
  if (*(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    v13 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a3, (JSC::SymbolObject **)a1, a3, (JSC::Symbol *)a3, (uint64_t)a5, a6, a7, a8);
LABEL_8:
    v11 = (JSC::JSScope *)v13;
  }
  if (!*(_DWORD *)(v10 + 80))
    return JSC::JSWithScope::create((JSC::JSWithScope *)v10, (unint64_t)a1, a2, v11, a5, a6, a7, a8);
  v14 = *(_DWORD *)(v10 + 80);
  if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
  {
    v15 = v11;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, (uint64_t)v11, (uint64_t)a5, a6, a7, a8);
    v11 = v15;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::JSWithScope::create((JSC::JSWithScope *)v10, (unint64_t)a1, a2, v11, a5, a6, a7, a8);
}

unint64_t operationPushWithScopeObject(unint64_t a1, JSC::JSGlobalObject *a2, JSC::JSScope *a3, uint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSWithScope *v11;
  uint64_t vars0;

  v11 = *(JSC::JSWithScope **)(a1 + 56);
  *((_QWORD *)v11 + 5) = vars0;
  return JSC::JSWithScope::create(v11, a1, a2, a3, a5, a6, a7, a8);
}

uint64_t operationInstanceOfGaveUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t vars0;

  v10 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(*(_QWORD *)(v10 + 56) + 40) = vars0;
  *(_DWORD *)(vars0 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  if (JSC::JSObject::defaultHasInstance(v10, a1, a2, a4, a5, a6, a7, a8))
    return 7;
  else
    return 6;
}

uint64_t operationInstanceOfOptimize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t HasInstance;
  double v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v26;
  unsigned __int8 *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  char v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  unsigned int *v42;
  char *v43;
  unsigned int *v44;
  uint64_t *v45;
  char *v46;
  unsigned int **v47;
  uint64_t vars0;

  v11 = *(JSC::JSCell **)(a3 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a3 + 112);
  HasInstance = JSC::JSObject::defaultHasInstance((unint64_t)v11, a1, a2, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, v15, v16, v17, v18, v19, v20))
  {
    return 10;
  }
  if ((a1 & 0xFFFE000000000002) != 0 || (v23 = *(_DWORD *)a1 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a3 + 129) |= 0x10u;
    goto LABEL_6;
  }
  v24 = *(unsigned __int8 **)(v13 + 16);
  v41 = 0;
  *(_WORD *)(a3 + 129) |= 4u;
  if (*(_BYTE *)(a3 + 124))
  {
    --*(_BYTE *)(a3 + 124);
    goto LABEL_6;
  }
  v26 = *(unsigned __int8 *)(a3 + 125);
  if (v26 != 255)
    *(_BYTE *)(a3 + 125) = ++v26;
  if (xmmword_1ECF4C260 < v26)
  {
    *(_BYTE *)(a3 + 125) = 0;
    v35 = *(unsigned __int8 *)(a3 + 126);
    v36 = BYTE4(xmmword_1ECF4C260) << v35;
    v37 = v36;
    if (v36 == 255)
      LOBYTE(v36) = -2;
    if (v37 >> v35 == BYTE4(xmmword_1ECF4C260))
      v38 = v36;
    else
      v38 = -2;
    *(_BYTE *)(a3 + 124) = v38;
    if (v35 != 255)
      *(_BYTE *)(a3 + 126) = v35 + 1;
    *(_BYTE *)(a3 + 127) = 0;
  }
  else if (*(_BYTE *)(a3 + 127))
  {
    --*(_BYTE *)(a3 + 127);
    v40 = 0;
    v39 = v23;
    v27 = (unsigned __int8 *)(a3 + 128);
    if (!__ldaxr((unsigned __int8 *)(a3 + 128)))
      goto LABEL_33;
    __clrex();
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 128);
    while (1)
    {
      v29 = *(_DWORD *)(a3 + 96);
      if (!v29)
        break;
      v44 = &v39;
      v45 = &v41;
      v46 = &v40;
      v42 = &v39;
      v43 = &v40;
      if (v29 != -1)
        goto LABEL_22;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
      if (__stxr(1u, v27))
        goto LABEL_16;
    }
    if (*(_QWORD *)(a3 + 16))
      v29 = 1;
    else
      v29 = 2;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_DWORD *)(a3 + 96) = v29;
    v44 = &v39;
    v45 = &v41;
    v46 = &v40;
    v42 = &v39;
    v43 = &v40;
LABEL_22:
    v47 = &v42;
    ((void (*)(unsigned int ***))off_1E3596010[v29])(&v47);
    v34 = __ldxr(v27);
    if (v34 == 1)
    {
      if (!__stlxr(0, v27))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a3 + 128), 0, v30, v31, v32, v33, v19, v20);
LABEL_27:
    if (!v40)
      goto LABEL_6;
    if (v24)
    {
      if (*(_DWORD *)(v12 + 760) >= v24[7])
      {
        JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)v24);
        if (!v40)
          goto LABEL_6;
      }
    }
  }
  JSC::repatchInstanceOf(v11, v24, a1, a2, a3, HasInstance, v19, v20, v22);
LABEL_6:
  if ((_DWORD)HasInstance)
    return 7;
  else
    return 6;
}

uint64_t operationSizeFrameForForwardArguments(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  int v10;
  JSC::VM *v12;
  uint64_t vars0;

  v8 = *(JSC::VM **)(a1 + 56);
  v9 = vars0;
  *((_QWORD *)v8 + 5) = vars0;
  v12 = v8;
  v10 = *(_DWORD *)(v9 + 32);
  if (*((_QWORD *)v8 + 1) > v9 - 8 * (unint64_t)(((_DWORD)a3 + (v10 & 0xFFFFFFFE) + 7) & 0xFFFFFFFE))
    JSC::throwStackOverflowError(a1, &v12, a3, a4, a5, a6, a7, a8);
  return (v10 - 1);
}

uint64_t operationSizeFrameForVarargs(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  JSC::JSObject *v18;
  uint64_t v19;
  unint64_t InvalidFunctionApplyParameterError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  JSC::JSObject *v29;
  int8x16_t v30;
  JSC::JSObject *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  int v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  int8x16_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v48;
  int8x16_t v49;
  int v50;
  JSC::VM *v51;
  JSC::VM *v52;
  JSC::JSObject *v53;
  uint64_t vars0;

  v9 = a3;
  v11 = *((_QWORD *)a1 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  v51 = (JSC::VM *)v11;
  v52 = (JSC::VM *)v11;
  if ((this & 0xFFFE000000000002) != 0)
  {
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_43:
      v16 = 0;
      goto LABEL_11;
    }
LABEL_37:
    InvalidFunctionApplyParameterError = JSC::createInvalidFunctionApplyParameterError((uint64_t)a1, this);
    JSC::VM::throwException((JSC::VM *)v11, a1, InvalidFunctionApplyParameterError, v21, v22, v23, v24, v25);
    goto LABEL_43;
  }
  v13 = a4;
  v14 = *(unsigned __int8 *)(this + 5);
  if (v14 <= 0x20)
  {
    if (v14 == 19)
    {
      LODWORD(v15) = *(_DWORD *)(this + 8);
      goto LABEL_5;
    }
    if (v14 - 2 >= 3)
    {
LABEL_20:
      if (v14 <= 0x16)
      {
        __break(0xC471u);
        JUMPOUT(0x1987C13B4);
      }
      if (v14 == 36)
      {
        if ((*(_BYTE *)(this + 4) & 0xE) == 0)
        {
          LODWORD(v15) = 0;
          goto LABEL_5;
        }
        v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        goto LABEL_24;
      }
      if (v14 != 35)
      {
        if (v14 == 33)
        {
          v32 = *(_QWORD *)(this + 40);
          if (v32
            && (!qword_1ECF4C038
             || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
             || (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          {
            v53 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
            if (*(_DWORD *)(v11 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v48, a3, a4, a5, a6, a7, a8))
            {
              LODWORD(v15) = 0;
            }
            else
            {
              LODWORD(v15) = JSC::JSValue::toUInt32(&v53, a1, a3, a4, a5, a6, a7, a8, v49);
            }
          }
          else
          {
            LODWORD(v15) = *(_DWORD *)(this + 32);
          }
        }
        else
        {
          if (v14 != 34)
          {
            v29 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
            v53 = v29;
            if (!*(_DWORD *)(v11 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v28, a3, a4, a5, a6, a7, a8))
            {
              if ((unint64_t)v29 >= 0xFFFE000000000000)
              {
                v15 = v29 & ~((int)v29 >> 31);
                goto LABEL_24;
              }
              v38 = JSC::JSValue::toIntegerOrInfinity(&v53, a1, a3, a4, a5, a6, a7, a8, v30);
              if (v38 > 0.0)
              {
                if (v38 > 9.00719925e15)
                  v38 = 9.00719925e15;
                v15 = (unint64_t)v38;
                goto LABEL_24;
              }
            }
            goto LABEL_75;
          }
          LODWORD(v15) = JSC::ScopedArguments::length((JSC::ScopedArguments *)this, a1, a3, a4, a5, a6, a7, a8);
        }
        v15 = v15;
        goto LABEL_24;
      }
      if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x20) != 0)
      {
        v53 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v37, a3, a4, a5, a6, a7, a8))
        {
LABEL_75:
          v15 = 0;
LABEL_24:
          if (v15 > 0xFFFFFFFE)
            LODWORD(v15) = -1;
          goto LABEL_5;
        }
      }
      else
      {
        v31 = *(JSC::JSObject **)(*(_QWORD *)(this + 8) - 16);
        v53 = v31;
        if ((unint64_t)v31 >= 0xFFFE000000000000)
        {
          v15 = v31 & ~((int)v31 >> 31);
          goto LABEL_24;
        }
      }
      v15 = JSC::JSValue::toLength(&v53, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_24;
    }
    goto LABEL_37;
  }
  switch(v14)
  {
    case '#':
      if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x20) != 0)
      {
        v34 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
        v53 = (JSC::JSObject *)v34;
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v33, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_84;
        }
        if (v34 >= 0xFFFE000000000000)
        {
          LODWORD(v15) = v34 & ~((int)v34 >> 31);
          break;
        }
      }
      else
      {
        v18 = *(JSC::JSObject **)(*(_QWORD *)(this + 8) - 16);
        v53 = v18;
        if ((unint64_t)v18 >= 0xFFFE000000000000)
        {
          LODWORD(v15) = v18 & ~((int)v18 >> 31);
          break;
        }
      }
      v35 = JSC::JSValue::toIntegerOrInfinity(&v53, a1, a3, a4, a5, a6, a7, a8, a9);
      if (v35 <= 0.0)
      {
LABEL_84:
        LODWORD(v15) = 0;
        break;
      }
      if (v35 > 9.00719925e15)
        v35 = 9.00719925e15;
      v15 = (unint64_t)v35;
      break;
    case '!':
      v19 = *(_QWORD *)(this + 40);
      if (!v19
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        LODWORD(v15) = *(_DWORD *)(this + 32);
        break;
      }
      v15 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
      v53 = (JSC::JSObject *)v15;
      if (*(_DWORD *)(v11 + 80))
      {
        v46 = v15;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v39, a3, a4, a5, a6, a7, a8);
        v15 = v46;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_84;
      }
      if (v15 >= 0xFFFE000000000000)
        break;
      v41 = v15 - 0x2000000000000;
      if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(&v53, a1, a3, a4, a5, a6, a7, a8, v40);
        v41 = v45;
      }
      v42 = (v41 >> 52) & 0x7FF;
      if ((v42 - 1023) > 0x53)
        goto LABEL_84;
      v43 = v41 >> (51 - (v41 >> 52));
      if (v42 > 0x433)
        LODWORD(v43) = v41 << ((v41 >> 52) - 51);
      if (v42 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << ((v41 >> 52) + 1)) - 1) & v43) + (1 << ((v41 >> 52) + 1));
      if ((v41 & 0x8000000000000000) == 0)
        LODWORD(v15) = v44;
      else
        LODWORD(v15) = -v44;
      break;
    case '"':
      LODWORD(v15) = JSC::ScopedArguments::length((JSC::ScopedArguments *)this, a1, a3, a4, a5, a6, a7, a8);
      break;
    default:
      goto LABEL_20;
  }
LABEL_5:
  if (*(_DWORD *)(v11 + 80))
  {
    v27 = *(_DWORD *)(v11 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
    {
      v50 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      LODWORD(v15) = v50;
    }
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_43;
  }
  if (v15 > 0x10000)
  {
    v36 = v15;
    JSC::throwStackOverflowError((unint64_t)a1, &v52, a3, a4, a5, a6, a7, a8);
    LODWORD(v15) = v36;
  }
  if (v15 >= v13)
    v16 = v15 - v13;
  else
    v16 = 0;
LABEL_11:
  if (*(_DWORD *)(v11 + 80))
  {
    v26 = *(_DWORD *)(v11 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (v16 > 0x10000
    || *(_QWORD *)(v11 + 8) > v12 - 8 * (unint64_t)((v9 + ((v16 + 1) & 0xFFFFFFFE) + 7) & 0xFFFFFFFE))
  {
    JSC::throwStackOverflowError((unint64_t)a1, &v51, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return v16;
}

uint64_t operationSetupForwardArgumentsFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  memcpy((void *)(a2 + 48), (const void *)(vars0 + 48), 8 * a5);
  *(_DWORD *)(a2 + 32) = a5 + 1;
  return a2;
}

uint64_t operationSetupVarargsFrame(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t this, unint64_t a4, unsigned int a5)
{
  uint64_t v9;
  unint64_t v10;
  JSC::JSValue *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::JSValue *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 IndexQuicklyForTypedArray;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58[2];
  int v59;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = (unint64_t)(a2 - vars0) >> 3;
  if ((int)v10 >= 1073741818)
  {
    v23 = *(_QWORD *)(vars0 + 16);
    v24 = (v10 - 1073741818);
    if (v24 >= *(unsigned int *)(v23 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1987C1C4CLL);
    }
    v11 = (JSC::JSValue *)(*(_QWORD *)(v23 + 160) + 8 * v24);
  }
  else
  {
    v11 = (JSC::JSValue *)(vars0 + ((((a2 - vars0) << 29) + 0x600000000) >> 29));
  }
  if ((this & 0xFFFE000000000002) == 0 && a5)
  {
    switch(*(_BYTE *)(this + 5))
    {
      case '!':
        JSC::DirectArguments::copyToArguments((JSC::DirectArguments *)this, a1, v11, a4, a5);
        goto LABEL_14;
      case '"':
        JSC::ScopedArguments::copyToArguments((JSC::ScopedArguments *)this, a1, v11, a4, a5);
        goto LABEL_14;
      case '#':
        JSC::ClonedArguments::copyToArguments(this, a1, v11, a4, a5);
        goto LABEL_14;
      case '$':
        v12 = a5 + a4;
        v13 = *(_QWORD *)(this + 8);
        if ((*(_BYTE *)(this + 4) & 0xF) != 9)
        {
          v15 = a4;
          switch(*(_BYTE *)(this + 4) & 0xF)
          {
            case 1:
              goto LABEL_14;
            case 3:
              goto LABEL_13;
            case 5:
              break;
            case 7:
              v15 = a4;
              if (*(_DWORD *)(v13 - 8) > a4)
              {
                v15 = a4;
                v25 = v11;
                do
                {
                  *(_QWORD *)v25 = *(_QWORD *)(v13 + 8 * v15) + 0x2000000000000;
                  v25 = (JSC::JSValue *)((char *)v25 + 8);
                  ++v15;
                }
                while (v15 < *(unsigned int *)(v13 - 8));
              }
              goto LABEL_13;
            case 0xB:
            case 0xD:
              v14 = *(_DWORD *)(v13 - 4);
              v13 += 16;
              if (v14 >= v12)
                v14 = a5 + a4;
              goto LABEL_8;
            default:
              __break(0xC471u);
              JUMPOUT(0x1987C1C24);
          }
        }
        v14 = *(_DWORD *)(v13 - 8);
LABEL_8:
        v15 = a4;
        if (v14 > a4)
        {
          v16 = 0;
          v17 = a4;
          while (1)
          {
            v18 = *(_QWORD *)(v13 + 8 * v17);
            if (!v18)
              break;
            *((_QWORD *)v11 + v16) = v18;
            ++v17;
            ++v16;
            if (v14 == v17)
            {
              v15 = v14;
              goto LABEL_13;
            }
          }
          v15 = v17;
        }
LABEL_13:
        while (v15 < v12)
        {
          while (1)
          {
            v56 = v12;
            v59 = a4;
            *((_QWORD *)v11 + (v15 - a4)) = JSC::JSObject::get((JSC::JSObject *)this, a1, v15);
            if (*(_DWORD *)(v9 + 80))
              break;
            v15 = (v15 + 1);
            v12 = v56;
            LODWORD(a4) = v59;
            if (v15 >= v56)
              goto LABEL_14;
          }
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v45, v46, v47, v48, v49, v50, v51);
          LODWORD(a4) = v59;
          v12 = v56;
          if (hasExceptionsAfterHandlingTraps)
            break;
          v15 = (v15 + 1);
        }
        goto LABEL_14;
      default:
        if (*(_BYTE *)(this + 5) == 19)
        {
          v20 = (char *)(this + 16);
          v21 = a5;
          do
          {
            if (a4 >= *(_DWORD *)(this + 8))
            {
              v22 = 10;
            }
            else if ((*(_BYTE *)(this + 4) & 0xE) == 6)
            {
              v22 = *(_QWORD *)&v20[8 * a4] + 0x2000000000000;
            }
            else
            {
              v22 = *(_QWORD *)&v20[8 * a4];
            }
            *(_QWORD *)v11 = v22;
            v11 = (JSC::JSValue *)((char *)v11 + 8);
            LODWORD(a4) = a4 + 1;
            --v21;
          }
          while (v21);
          goto LABEL_14;
        }
        v26 = 0;
        v27 = a4;
        v28 = a5;
        break;
    }
    do
    {
      v29 = v27 + v26;
      v30 = *(_QWORD *)(this + 8);
      v31 = *(_BYTE *)(this + 4) & 0xF;
      if ((v31 - 8) >= 2)
      {
        switch(*(_BYTE *)(this + 4) & 0xF)
        {
          case 0:
          case 1:
            v54 = v28;
            v55 = v27 + v26;
            v57 = a4;
            v53 = v26;
            IndexQuicklyForTypedArray = JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)this, v27 + v26);
            v26 = v53;
            LODWORD(v28) = v54;
            LODWORD(a4) = v57;
            if (!IndexQuicklyForTypedArray)
              goto LABEL_35;
            v30 = *(_QWORD *)(this + 8);
            v31 = *(_BYTE *)(this + 4) & 0xF;
            break;
          case 3:
            goto LABEL_35;
          case 4:
          case 5:
            goto LABEL_33;
          case 6:
          case 7:
            if (*(_DWORD *)(v30 - 4) > v29)
              goto LABEL_42;
            goto LABEL_35;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v30 - 4) > v29 && *(_QWORD *)(v30 + 8 * v29 + 16))
              goto LABEL_42;
            goto LABEL_35;
          default:
            __break(0xC471u);
            JUMPOUT(0x1987C1C1CLL);
        }
      }
      else
      {
LABEL_33:
        if (*(_DWORD *)(v30 - 4) <= v29 || !*(_QWORD *)(v30 + 8 * v29))
        {
LABEL_35:
          if (v26 < a5)
          {
            v32 = v26 + a4;
            v33 = v28 - v26;
            do
            {
              v34 = JSC::JSObject::get((JSC::JSObject *)this, a1, v32);
              if (*(_DWORD *)(v9 + 80))
              {
                *(_QWORD *)v58 = v34;
                v44 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v35, v36, v37, v38, v39, v40, v41);
                v34 = *(_QWORD *)v58;
                if (v44)
                  break;
              }
              *(_QWORD *)v11 = v34;
              v11 = (JSC::JSValue *)((char *)v11 + 8);
              v32 = (v32 + 1);
              --v33;
            }
            while (v33);
          }
          break;
        }
LABEL_42:
        v53 = v26;
        v54 = v28;
        v55 = v27 + v26;
        v57 = a4;
      }
      if ((v31 - 8) >= 2)
      {
        switch(v31)
        {
          case 0:
          case 1:
            v42 = JSC::JSObject::getIndexQuicklyForTypedArray(this, v55, 0);
            break;
          case 4:
          case 5:
            v42 = *(unsigned int *)(v30 + 8 * v55) | 0xFFFE000000000000;
            break;
          case 6:
          case 7:
            v42 = *(_QWORD *)(v30 + 8 * v55) + 0x2000000000000;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v42 = *(_QWORD *)(v30 + 8 * v55 + 16);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1987C1C7CLL);
        }
      }
      else
      {
        v42 = *(_QWORD *)(v30 + 8 * v55);
      }
      *(_QWORD *)v11 = v42;
      v11 = (JSC::JSValue *)((char *)v11 + 8);
      v28 = v54;
      v26 = v53 + 1;
      LODWORD(a4) = v57;
    }
    while (v54 != v53 + 1);
  }
LABEL_14:
  *(_DWORD *)(a2 + 32) = a5 + 1;
  return a2;
}

unsigned int *operationResolveScopeForBaseline(JSC::JSScope *a1, unsigned __int8 *a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  const JSC::PropertyTable *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int hasProperty;
  unsigned __int8 *v39;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(_QWORD *)(vars0 + 16);
  v11 = *a2;
  if (v11 == 128)
  {
    v43 = *((__int16 *)a2 + 2);
    if (v43 <= 63)
      v13 = *((__int16 *)a2 + 2);
    else
      v13 = v43 + 1073741760;
    v14 = *((unsigned __int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)a2 + 6);
  }
  else if (v11 == 130)
  {
    v13 = *(_DWORD *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 22);
  }
  else
  {
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = (char)a2[2];
    else
      v13 = v12 + 1073741808;
    v14 = a2[3];
    v15 = a2[6];
  }
  v16 = *(unsigned int **)(*(_QWORD *)(v10 + 56) + 104);
  if (v16)
  {
    v17 = *v16;
    if (*v16 > v14)
    {
      v18 = &v16[2 * v14];
      goto LABEL_10;
    }
  }
  else
  {
    v17 = 0;
  }
  v34 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 120) + 72))(*(_QWORD *)(v10 + 120)) + 48);
  if (*v34 <= v14 - v17)
    goto LABEL_59;
  v18 = &v34[2 * (v14 - v17)];
LABEL_10:
  v19 = (unint64_t *)(v18 + 2);
  v27 = JSC::JSScope::resolve(a1, *(unsigned int ***)(vars0 + 8 * v13), (JSC::JSScope *)(v18 + 2), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v20, v21, (uint64_t)v22, v23, v24, v25, v26))
  {
    return 0;
  }
  v28 = *(_QWORD *)(v10 + 136);
  v29 = *(unsigned __int16 *)(v28 + 50);
  if (!*(_WORD *)(v28 + 50))
    v29 = *(_DWORD *)(v28 + 196);
  v30 = (v28 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (unsigned int *)(v30 + 16 * v15);
  if (*v31 > 0xB || ((1 << *v31) & 0xC41) == 0)
    return v27;
  v35 = (int)*v31;
  v36 = *((unsigned __int8 *)v27 + 5);
  if (v36 != 51)
  {
    if (v36 != 52)
      return v27;
    v39 = (unsigned __int8 *)(v10 + 16);
    if (__ldaxr((unsigned __int8 *)(v10 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v39))
    {
LABEL_53:
      if (v35 < 0xC)
      {
        *v31 = dword_199156FE0[v35];
        *(_QWORD *)(v30 + 16 * v15 + 8) = v27;
        if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v10 + 7))
          JSC::Heap::writeBarrierSlowPath(v9 + 192, v10);
        goto LABEL_32;
      }
LABEL_59:
      __break(0xC471u);
      JUMPOUT(0x1987C1F94);
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10 + 16);
    goto LABEL_53;
  }
  hasProperty = JSC::JSObject::hasProperty((unint64_t)v27, (uint64_t)v27, *v19, v22, v23, v24, v25, v26);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v37, v21, (uint64_t)v22, v23, v24, v25, v26))
  {
    return 0;
  }
  if (hasProperty)
  {
    v39 = (unsigned __int8 *)(v10 + 16);
    if (__ldaxr((unsigned __int8 *)(v10 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v39))
    {
      goto LABEL_28;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10 + 16);
LABEL_28:
    if (v35 >= 0xC)
    {
      __break(0xC471u);
      JUMPOUT(0x1987C2034);
    }
    *v31 = dword_199156FB0[v35];
    v41 = v30 + 16 * v15;
    *(_QWORD *)(v41 + 8) = v27;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, v10);
    *(_DWORD *)(v41 + 4) = v27[794];
LABEL_32:
    v42 = __ldxr(v39);
    if (v42 == 1)
    {
      if (!__stlxr(0, v39))
        return v27;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, v21, (uint64_t)v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t operationGetFromScope(JSC::JSGlobalObject *a1, unsigned __int8 *a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  JSC::JSGlobalObject *v7;
  JSC::VM *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint32x4_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::JSGlobalObject *v45;
  JSC::JSGlobalObject *v46;
  unint64_t v47;
  JSC::VM *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t UndefinedVariableError;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  JSC::VM *v88;
  uint64_t v89;
  uint64_t v90;
  JSC::VM *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  unint64_t v98;
  JSC::JSGlobalObject *v99;
  JSC::JSGlobalObject *v100;
  unint64_t v101;
  JSC::VM *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char OwnStaticPropertySlot;
  JSC::JSGlobalObject *v107;
  uint64_t v108;
  JSC::JSGlobalObject *v109;
  unint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  JSC::JSGlobalObject *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int8x16_t **v123;
  int v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  unint64_t v127;
  JSC::JSGlobalObject *v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  BOOL v141;
  int v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  JSC::VM *v149;
  unint64_t v150;
  JSC::Structure *v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  unsigned __int16 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  unsigned int v171;
  unint64_t v172;
  JSC::JSGlobalObject *v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int8x16_t **v181;
  uint64_t v182;
  JSC::JSGlobalObject *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  JSC::JSGlobalObject *v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  JSC::JSGlobalObject *v193;
  uint64_t v194;
  JSC::JSGlobalObject *v195;
  unint64_t v196;
  JSC::VM *v197;
  uint64_t v198;
  uint64_t v199;
  JSC::JSGlobalObject *v200;
  unint64_t v201;
  JSC::VM *v202;
  uint64_t v203;
  JSC::JSGlobalObject *v204;
  unint64_t v205;
  unsigned __int8 *v206;
  uint64_t v207;
  unsigned int v208;
  _BOOL4 v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  double v215;
  const unsigned __int8 *v216;
  BOOL v217;
  uint64_t v218;
  unsigned __int8 *v219;
  unsigned int v220;
  BOOL v221;
  BOOL v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  JSC::JSGlobalObject *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  JSC::VM *v232;
  JSC::VM *v233;
  JSC::VM *v234;
  JSC::VM *v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned __int32 v239;
  int v240;
  _BYTE v241[28];
  uint64_t (*v242)(unint64_t);
  uint64_t v243;
  unint64_t v244;
  _DWORD *v245;
  _DWORD *v246;
  _QWORD v247[2];
  uint64_t v248;
  char v249;
  int8x16_t **v250;
  uint64_t v251;
  JSC::VM *v252[18];
  uint64_t vars0;

  v7 = a1;
  v252[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v9 = vars0;
  *((_QWORD *)v8 + 5) = vars0;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *a2;
  if (v11 == 128)
  {
    v114 = *((__int16 *)a2 + 1);
    if (v114 > 63)
      v114 += 1073741760;
    v115 = *((__int16 *)a2 + 2);
    if (v115 <= 63)
      v14 = *((__int16 *)a2 + 2);
    else
      v14 = v115 + 1073741760;
    v240 = v114;
    *(_DWORD *)v241 = v14;
    v15 = *((unsigned __int16 *)a2 + 3);
    v116 = ((*((unsigned __int16 *)a2 + 4) >> 3) | (*((unsigned __int16 *)a2 + 4) << 20)) & 0x10000F | (((*((unsigned __int16 *)a2 + 4) >> 1) & 3) << 10) & 0xBFFFFFFF | (((*((unsigned __int16 *)a2 + 4) >> 7) & 1) << 30);
    *(_DWORD *)&v241[4] = v15;
    *(_DWORD *)&v241[8] = v116;
    v17 = vmovl_u16(*(uint16x4_t *)(a2 + 10));
    goto LABEL_9;
  }
  if (v11 != 130)
  {
    v12 = (char)a2[1];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = (char)a2[2];
    if (v13 <= 15)
      v14 = (char)a2[2];
    else
      v14 = v13 + 1073741808;
    v240 = v12;
    *(_DWORD *)v241 = v14;
    v15 = a2[3];
    v16 = ((a2[4] >> 3) | (a2[4] << 20) | (a2[4] << 9)) & 0x100C0F | ((((a2[4] & 0x80) >> 7) & 1) << 30);
    *(_DWORD *)&v241[4] = v15;
    *(_DWORD *)&v241[8] = v16;
    a3.i32[0] = *(_DWORD *)(a2 + 5);
    v17 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
LABEL_9:
    *(uint32x4_t *)&v241[12] = v17;
    v239 = v17.u32[3];
    goto LABEL_10;
  }
  v124 = *(_DWORD *)(a2 + 2);
  *(_OWORD *)v241 = *(_OWORD *)(a2 + 6);
  *(_QWORD *)&v241[16] = *(_QWORD *)(a2 + 22);
  v239 = *(_DWORD *)(a2 + 30);
  v240 = v124;
  *(_DWORD *)&v241[24] = v239;
  v15 = *(_DWORD *)&v241[4];
  v14 = *(_DWORD *)v241;
LABEL_10:
  v18 = *(unsigned int **)(*(_QWORD *)(v10 + 56) + 104);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_77;
  }
  v19 = *v18;
  if (*v18 <= v15)
  {
LABEL_77:
    v69 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 120) + 72))(*(_QWORD *)(v10 + 120)) + 48);
    if (*v69 <= v15 - v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1987C2CC0);
    }
    v20 = &v69[2 * (v15 - v19)];
    goto LABEL_13;
  }
  v20 = &v18[2 * v15];
LABEL_13:
  v21 = (JSC::JSGlobalObject *)(v20 + 2);
  v22 = *(_QWORD *)(v9 + 8 * v14);
  v23 = *(_QWORD *)(v10 + 136);
  v24 = *(unsigned __int16 *)(v23 + 52);
  if (!*(_WORD *)(v23 + 52))
    v24 = *(unsigned int *)(v23 + 200);
  v25 = *(_QWORD *)v21;
  v244 = 0xFFFFFFFF00000000;
  LOBYTE(v248) = 0;
  v249 = 0;
  v250 = 0;
  v251 = 0;
  v246 = 0;
  memset(v247, 0, 13);
  v245 = (_DWORD *)v22;
  v26 = *((_QWORD *)v7 + 7);
  v27 = v25 >> 4;
  v28 = (_BYTE *)(v22 + 6);
  if ((*(_BYTE *)(v22 + 6) & 8) == 0)
  {
    v29 = v22;
    while (1)
    {
      v30 = *(_DWORD *)v29 & 0xFFFFFFFE;
      v31 = 16 * v30;
      if (!(_DWORD)v27 || (v27 & ~*(_DWORD *)(16 * v30 + 0x20)) != 0)
        goto LABEL_28;
      v32 = *(_QWORD *)(16 * v30 + 0x58);
      if (!v32)
      {
        v44 = *(_QWORD *)(16 * v30 + 0x40);
        if (!v44 || *(_BYTE *)(v44 + 5) != 1 && *(_DWORD *)(v44 + 80) < 2u)
          goto LABEL_28;
        v229 = v25;
        v233 = (JSC::VM *)v22;
        v45 = v21;
        v236 = v24;
        v46 = v7;
        v47 = v10;
        v48 = v8;
        v49 = v23;
        v50 = v26;
        v51 = v27;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v31, (JSC::VM *)v26, 1, (const JSC::PropertyTable *)a5, a6, a7, (uint64_t)v21, v26);
        v27 = v51;
        v26 = v50;
        v23 = v49;
        v8 = v48;
        v10 = v47;
        v7 = v46;
        v25 = v229;
        v22 = (uint64_t)v233;
        v24 = v236;
        v21 = v45;
        if (!v32)
          goto LABEL_28;
      }
      if (!*(_DWORD *)(v32 + 24))
        goto LABEL_28;
      v33 = *(_QWORD *)(v32 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
      v35 = *(unsigned int *)(v32 + 8);
      v36 = *(_DWORD *)(v25 + 16);
      if ((v33 & 1) != 0)
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v25 + 32);
        v37 = *(_DWORD *)(v32 + 12);
        v38 = (v36 >> 8) & *(_QWORD *)&v37;
        v39 = *(unsigned __int8 *)(v34 + v38);
        if (!*(_BYTE *)(v34 + v38))
          goto LABEL_28;
        v40 = v34 + v35;
        v41 = 1;
        while (1)
        {
          v42 = *(_QWORD *)(v40 + 8 * (v39 - 1));
          if (v25 == (v42 & 0xFFFFFFFFFFFFLL))
            break;
          v38 = ((_DWORD)v38 + v41) & v37;
          v39 = *(unsigned __int8 *)(v34 + v38);
          ++v41;
          if (!*(_BYTE *)(v34 + v38))
            goto LABEL_28;
        }
        a7 = (v42 >> 16) & 0xFF00000000 | HIBYTE(v42);
      }
      else
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v25 + 32);
        v52 = *(_DWORD *)(v32 + 12);
        v53 = v52 & (v36 >> 8);
        v54 = *(_DWORD *)(v34 + 4 * v53);
        if (!v54)
          goto LABEL_28;
        v55 = v34 + 4 * v35;
        v56 = 1;
        while (1)
        {
          v57 = (v54 - 1);
          if (v25 == *(_QWORD *)(v55 + 16 * v57))
            break;
          v53 = (v53 + v56) & v52;
          v54 = *(_DWORD *)(v34 + 4 * v53);
          ++v56;
          if (!v54)
            goto LABEL_28;
        }
        a7 = *(unsigned int *)(v55 + 16 * v57 + 8) | ((unint64_t)*(unsigned __int8 *)(v55 + 16 * v57 + 12) << 32);
      }
      if ((_DWORD)a7 != -1)
      {
        a6 = HIDWORD(a7);
        if ((int)a7 <= 63)
        {
          v66 = v29 + 16;
          v67 = a7 << 32;
        }
        else
        {
          v66 = *(_QWORD *)(v29 + 8) - 8;
          v67 = 0x3F00000000 - (a7 << 32);
        }
        a5 = *(_QWORD *)(v66 + (v67 >> 29));
        if ((a5 & 0xFFFE000000000002) == 0)
        {
          v68 = *(unsigned __int8 *)(a5 + 5);
          if (v68 == 5)
          {
            v107 = v21;
            v108 = v22;
            v109 = v7;
            v110 = v10;
            v111 = v8;
            v112 = v23;
            v113 = v26;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v29, v26, (uint64_t)&v242, a5, SHIDWORD(a7), a7);
            v26 = v113;
            v23 = v112;
            v8 = v111;
            v10 = v110;
            v7 = v109;
            v22 = v108;
            v21 = v107;
LABEL_108:
            v62 = 1;
            goto LABEL_56;
          }
          if (v68 == 6)
          {
            v120 = *(_DWORD *)(v31 + 16) & 3;
            v121 = *(_QWORD *)(a5 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a5 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v123 = *(int8x16_t ***)(a5 + 24);
              v122 = *(_QWORD *)(a5 + 32);
              v242 = *(uint64_t (**)(unint64_t))(a5 + 8);
              v243 = v121;
              LODWORD(v244) = HIDWORD(a7);
              v246 = (_DWORD *)v29;
              BYTE1(v247[1]) = 3;
              v62 = 1;
              if (v120 != 2)
                LOBYTE(v247[1]) = 1;
              BYTE3(v247[1]) = 1;
              v250 = v123;
              v251 = v122;
            }
            else
            {
              v242 = *(uint64_t (**)(unint64_t))(a5 + 8);
              v243 = v121;
              LODWORD(v244) = HIDWORD(a7);
              v246 = (_DWORD *)v29;
              v62 = 1;
              BYTE1(v247[1]) = 3;
              if (v120 != 2)
                LOBYTE(v247[1]) = 1;
            }
            goto LABEL_56;
          }
        }
        v242 = (uint64_t (*)(unint64_t))a5;
        v246 = (_DWORD *)v29;
LABEL_75:
        v244 = __PAIR64__(a7, a6);
        v62 = 1;
        LOWORD(v247[1]) = 257;
        goto LABEL_56;
      }
LABEL_28:
      if ((*v28 & 0x20) != 0)
      {
        v238 = v24;
        v98 = v25;
        v99 = v21;
        v234 = (JSC::VM *)v22;
        v100 = v7;
        v101 = v10;
        v102 = v8;
        v103 = v23;
        v104 = v26;
        v105 = v27;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v29, (JSC::VM *)v26, v25, (uint64_t)&v242);
        v27 = v105;
        v25 = v98;
        v24 = v238;
        v26 = v104;
        v23 = v103;
        v8 = v102;
        v10 = v101;
        v7 = v100;
        v22 = (uint64_t)v234;
        v21 = v99;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_108;
      }
      v43 = *(_QWORD *)(v31 + 48);
      if (!v43)
        v43 = *(_QWORD *)(v29 + 16);
      if ((v43 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v43 + 5) < 0x17u)
      {
        if (!v25)
          goto LABEL_55;
        v58 = *(_DWORD *)(v25 + 16);
        if ((v58 & 0x20) != 0)
          goto LABEL_55;
        v59 = *(_WORD **)(v25 + 8);
        v60 = *(unsigned int *)(v25 + 4);
        if ((v58 & 4) == 0)
        {
          if ((_DWORD)v60)
          {
            v61 = (unsigned __int16)*v59 - 48;
            if (v61 <= 9 && (*v59 != 48 || v60 <= 1))
            {
              v84 = v59 + 1;
              v85 = v60 - 1;
              while (v85)
              {
                if (v61 > 0x19999999)
                  goto LABEL_55;
                v86 = *v84 - 48;
                if (v86 > 9)
                  goto LABEL_55;
                v62 = 0;
                v87 = __CFADD__(v86, 10 * v61);
                v61 = v86 + 10 * (_DWORD)v61;
                ++v84;
                --v85;
                if (v87)
                  goto LABEL_56;
              }
              if ((_DWORD)v61 != -1)
                goto LABEL_93;
            }
          }
LABEL_55:
          v62 = 0;
          goto LABEL_56;
        }
        a5 = v26;
        v25 = v24;
        a2 = (unsigned __int8 *)v22;
        v200 = v7;
        v201 = v10;
        v202 = v8;
        v203 = v23;
        v204 = v21;
        if (!(_DWORD)v60
          || (v61 = *(unsigned __int8 *)v59 - 48, v61 > 9)
          || v60 >= 2 && *(_BYTE *)v59 == 48)
        {
LABEL_254:
          v62 = 0;
          v21 = v204;
          v23 = v203;
          v8 = v202;
          v10 = v201;
          v7 = v200;
          v22 = (uint64_t)a2;
          LODWORD(v24) = v25;
          v26 = a5;
          goto LABEL_56;
        }
        v206 = (unsigned __int8 *)v59 + 1;
        v207 = v60 - 1;
        while (v207)
        {
          if (v61 > 0x19999999)
            goto LABEL_254;
          v208 = *v206 - 48;
          if (v208 > 9)
            goto LABEL_254;
          v62 = 0;
          v87 = __CFADD__(v208, 10 * v61);
          v61 = v208 + 10 * (_DWORD)v61;
          ++v206;
          --v207;
          v21 = v204;
          v23 = v203;
          v8 = v202;
          v10 = v201;
          v7 = v200;
          v22 = (uint64_t)a2;
          LODWORD(v24) = v25;
          v26 = a5;
          if (v87)
            goto LABEL_56;
        }
        v21 = v204;
        v23 = v203;
        v8 = v202;
        v10 = v201;
        v7 = v200;
        v22 = (uint64_t)a2;
        LODWORD(v24) = v25;
        v26 = a5;
        if ((_DWORD)v61 == -1)
          goto LABEL_55;
LABEL_93:
        v88 = (JSC::VM *)*((_QWORD *)v7 + 7);
        v89 = v22;
        v226 = v23;
        v227 = v21;
        v237 = v24;
        v228 = v26;
        while (2)
        {
          v90 = 16 * (*(_DWORD *)v89 & 0xFFFFFFFE);
          v91 = v88;
          v92 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v90 + 0x4C) + 0x70))(v89, v7, v61, &v242);
          v88 = v91;
          v95 = v92;
          if (*((_DWORD *)v91 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v91, (uint64_t)a2, v25, a5, a6, a7, v93, v94);
            v88 = v91;
            if (((hasExceptionsAfterHandlingTraps | v95) & 1) != 0)
            {
LABEL_224:
              v62 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_212;
            }
          }
          else if ((v92 & 1) != 0)
          {
LABEL_211:
            v62 = 1;
            goto LABEL_212;
          }
          v23 = v226;
          v21 = v227;
          v26 = v228;
          if (BYTE2(v247[1]) == 3)
          {
            if (BYTE4(v247[1]))
            {
              v62 = 0;
              v21 = v227;
              goto LABEL_213;
            }
            v96 = *(unsigned __int8 *)(v89 + 5);
            v23 = v226;
            v21 = v227;
            v26 = v228;
            v88 = v91;
            if (v96 != 61)
              goto LABEL_98;
          }
          else
          {
            v96 = *(unsigned __int8 *)(v89 + 5);
            if (v96 == 61)
            {
              if (BYTE2(v247[1]) == 1)
                goto LABEL_267;
            }
            else
            {
LABEL_98:
              if ((v96 - 39) <= 0xA)
              {
                v205 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v89, (uint64_t)a2, v25, a5, a6, a7, (uint64_t)v21, v26);
                v88 = v91;
                v21 = v227;
                v26 = v228;
                v23 = v226;
                if (v205 <= v61)
                {
LABEL_267:
                  v62 = 0;
                  LODWORD(v24) = v237;
                  goto LABEL_56;
                }
              }
            }
          }
          if ((*(_WORD *)(v90 + 12) & 0x800) == 0 || BYTE2(v247[1]) == 3)
          {
            v24 = *(_QWORD *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE) + 0x30);
            if (!v24)
              v24 = *(_QWORD *)(v89 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v24 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v89 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v89, v7);
            }
            else
            {
              v24 = *(_QWORD *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE) + 0x30);
              if (!v24)
                v24 = *(_QWORD *)(v89 + 16);
            }
            if (*((_DWORD *)v91 + 20))
            {
              v222 = JSC::VM::hasExceptionsAfterHandlingTraps(v91, (uint64_t)a2, v25, a5, a6, a7, (uint64_t)v21, v26);
              v88 = v91;
              v23 = v226;
              v21 = v227;
              v26 = v228;
              if (v222)
                goto LABEL_267;
            }
            else
            {
              v23 = v226;
              v21 = v227;
              v26 = v228;
              v88 = v91;
            }
          }
          if ((v24 & 0xFFFE000000000002) != 0)
            goto LABEL_267;
          v62 = 0;
          v97 = *(unsigned __int8 *)(v24 + 5);
          v89 = v24;
          LODWORD(v24) = v237;
          if (v97 <= 0x16)
            goto LABEL_56;
          continue;
        }
      }
      v28 = (_BYTE *)(v43 + 6);
      v29 = v43;
      if ((*(_BYTE *)(v43 + 6) & 8) != 0)
        goto LABEL_160;
    }
  }
  v43 = v22;
LABEL_160:
  v226 = v23;
  v227 = v21;
  v228 = v26;
  if (v25)
  {
    v143 = *(_DWORD *)(v25 + 16);
    if ((v143 & 0x20) == 0)
    {
      v144 = *(_BYTE **)(v25 + 8);
      v145 = *(unsigned int *)(v25 + 4);
      if ((v143 & 4) != 0)
      {
        if ((_DWORD)v145)
        {
          v146 = *v144 - 48;
          if (v146 <= 9 && (v145 < 2 || *v144 != 48))
          {
            v218 = v145 - 1;
            v219 = v144 + 1;
            while (v218)
            {
              if (v146 <= 0x19999999)
              {
                v220 = *v219 - 48;
                if (v220 <= 9)
                {
                  v87 = __CFADD__(v220, 10 * v146);
                  v146 = v220 + 10 * (_DWORD)v146;
                  --v218;
                  ++v219;
                  if (!v87)
                    continue;
                }
              }
              goto LABEL_165;
            }
            if ((_DWORD)v146 != -1)
              goto LABEL_199;
          }
        }
      }
      else if ((_DWORD)v145)
      {
        v146 = *(unsigned __int16 *)v144 - 48;
        if (v146 <= 9 && (*(_WORD *)v144 != 48 || v145 <= 1))
        {
          v160 = (unsigned __int16 *)(v144 + 2);
          v161 = v145 - 1;
          while (v161)
          {
            if (v146 <= 0x19999999)
            {
              v162 = *v160 - 48;
              if (v162 <= 9)
              {
                v87 = __CFADD__(v162, 10 * v146);
                v146 = v162 + 10 * (_DWORD)v146;
                ++v160;
                --v161;
                if (!v87)
                  continue;
              }
            }
            goto LABEL_165;
          }
          if ((_DWORD)v146 != -1)
          {
LABEL_199:
            v163 = (JSC::VM *)*((_QWORD *)v7 + 7);
            v164 = v22;
            v237 = v24;
            while (1)
            {
              v165 = 16 * (*(_DWORD *)v164 & 0xFFFFFFFE);
              v166 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v165 + 0x4C) + 0x70))(v164, v7, v146, &v242);
              v169 = v166;
              if (*((_DWORD *)v163 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v163, (uint64_t)a2, v25, a5, a6, a7, v167, v168);
                if (((hasExceptionsAfterHandlingTraps | v169) & 1) != 0)
                  goto LABEL_224;
              }
              else if ((v166 & 1) != 0)
              {
                goto LABEL_211;
              }
              if (BYTE2(v247[1]) == 3)
              {
                if (BYTE4(v247[1]))
                  goto LABEL_335;
                v170 = *(unsigned __int8 *)(v164 + 5);
                if (v170 == 61)
                  goto LABEL_205;
              }
              else
              {
                v170 = *(unsigned __int8 *)(v164 + 5);
                if (v170 == 61)
                {
                  if (BYTE2(v247[1]) == 1)
                    goto LABEL_335;
                  goto LABEL_205;
                }
              }
              if ((v170 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v164, (uint64_t)a2, v25, a5, a6, a7, v167, v168) <= v146)
              {
                goto LABEL_335;
              }
LABEL_205:
              if ((*(_WORD *)(v165 + 12) & 0x800) == 0 || BYTE2(v247[1]) == 3)
              {
                v24 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                if (!v24)
                  v24 = *(_QWORD *)(v164 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v24 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v164, v7);
                }
                else
                {
                  v24 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                  if (!v24)
                    v24 = *(_QWORD *)(v164 + 16);
                }
                if (*((_DWORD *)v163 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v163, (uint64_t)a2, v25, a5, a6, a7, v167, v168))
                {
LABEL_335:
                  v62 = 0;
LABEL_212:
                  v21 = v227;
LABEL_213:
                  v23 = v226;
LABEL_214:
                  LODWORD(v24) = v237;
                  goto LABEL_215;
                }
              }
              if ((v24 & 0xFFFE000000000002) != 0)
                goto LABEL_335;
              v62 = 0;
              v171 = *(unsigned __int8 *)(v24 + 5);
              v164 = v24;
              v23 = v226;
              v21 = v227;
              LODWORD(v24) = v237;
              v26 = v228;
              if (v171 <= 0x16)
                goto LABEL_56;
            }
          }
        }
      }
    }
  }
LABEL_165:
  v235 = (JSC::VM *)*((_QWORD *)v7 + 7);
  while (1)
  {
    v147 = v24;
    v148 = 16 * (*(_DWORD *)v43 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v43 + 6) & 8) == 0)
      break;
    v225 = v27;
    v237 = v24;
    v232 = v8;
    v185 = v23;
    v186 = 16 * (*(_DWORD *)v43 & 0xFFFFFFFE);
    v187 = v7;
    v188 = v25;
    v189 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v186 + 0x4C) + 0x68))(v43, v7);
    v192 = v189;
    if (*((_DWORD *)v235 + 20))
    {
      v209 = JSC::VM::hasExceptionsAfterHandlingTraps(v235, (uint64_t)a2, v25, a5, a6, a7, v190, v191);
      if (((v209 | v192) & 1) != 0)
      {
        v62 = !v209;
        goto LABEL_241;
      }
    }
    else if ((v189 & 1) != 0)
    {
      v62 = 1;
      goto LABEL_241;
    }
    if (BYTE2(v247[1]) == 3)
    {
      if (!BYTE4(v247[1]))
      {
        v210 = *(unsigned __int8 *)(v43 + 5);
        if (v210 == 61)
          goto LABEL_301;
LABEL_283:
        if (!v188
          || (v210 - 50) < 0xFFFFFFF5
          || (v211 = *(_DWORD *)(v188 + 16), (v211 & 0x20) != 0)
          || (v212 = *(unsigned int *)(v188 + 4), !(_DWORD)v212))
        {
LABEL_301:
          v21 = v227;
          v26 = v228;
          v23 = v185;
          v8 = v232;
          v7 = v187;
          v147 = v237;
          v25 = v188;
          v27 = v225;
          v148 = v186;
          goto LABEL_172;
        }
        v213 = *(unsigned __int8 **)(v188 + 8);
        if ((v211 & 4) == 0)
        {
          v214 = *(unsigned __int16 *)v213;
          if ((_DWORD)v212 == 1)
            goto LABEL_289;
          if (v214 == 45)
          {
            v214 = *((unsigned __int16 *)v213 + 1);
            goto LABEL_293;
          }
          if ((v214 - 48) >= 0xA && ((_DWORD)v212 != 8 || v214 != 73))
          {
LABEL_304:
            if ((_DWORD)v212 != 3 || v214 != 78)
              goto LABEL_301;
          }
LABEL_297:
          v223 = v223 & 0xFFFFFF0000000000 | v212 | ((unint64_t)((v211 >> 2) & 1) << 32);
          JSC::jsToNumber(v213, v223);
          WTF::numberToString(v252, v215);
          v217 = WTF::equal(v188, (unint64_t)v252, v216);
          v25 = v188;
          v21 = v227;
          v26 = v228;
          v23 = v185;
          v8 = v232;
          v7 = v187;
          v147 = v237;
          v27 = v225;
          v148 = v186;
          if (v217)
            goto LABEL_298;
          goto LABEL_172;
        }
        v214 = *v213;
        if ((_DWORD)v212 == 1)
        {
LABEL_289:
          v21 = v227;
          v26 = v228;
          v23 = v185;
          v8 = v232;
          v7 = v187;
          v147 = v237;
          v25 = v188;
          v27 = v225;
          v148 = v186;
          if ((v214 - 48) < 0xA)
            goto LABEL_298;
          goto LABEL_172;
        }
        if (v214 == 45)
        {
          v214 = v213[1];
LABEL_293:
          if ((v214 - 48) < 0xA)
          {
            if ((_DWORD)v212 == 2)
              goto LABEL_338;
            goto LABEL_297;
          }
          if ((_DWORD)v212 != 9)
            goto LABEL_301;
        }
        else
        {
          if ((v214 - 48) < 0xA)
            goto LABEL_297;
          if ((_DWORD)v212 != 8)
            goto LABEL_304;
        }
        if (v214 != 73)
          goto LABEL_301;
        goto LABEL_297;
      }
LABEL_338:
      v62 = 0;
LABEL_241:
      v21 = v227;
      v23 = v185;
      v8 = v232;
      v7 = v187;
      goto LABEL_214;
    }
    v210 = *(unsigned __int8 *)(v43 + 5);
    if (v210 != 61)
      goto LABEL_283;
    v21 = v227;
    v26 = v228;
    v23 = v185;
    v8 = v232;
    v7 = v187;
    v147 = v237;
    v25 = v188;
    v27 = v225;
    v148 = v186;
    if (BYTE2(v247[1]) == 1)
    {
LABEL_298:
      v62 = 0;
      goto LABEL_222;
    }
LABEL_172:
    if ((*(_WORD *)(v148 + 12) & 0x800) != 0)
    {
      v154 = *(_DWORD *)v43;
      v24 = v147;
      if (BYTE2(v247[1]) != 3)
      {
        v224 = v27;
        v231 = v25;
        v182 = v26;
        v183 = v21;
        v184 = 16 * (v154 & 0xFFFFFFFE);
        if ((*(_WORD *)(v184 + 12) & 0x800) != 0)
        {
          v155 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v184 + 76) + 0xB0))(v43, v7);
        }
        else
        {
          v155 = *(_QWORD *)(v184 + 48);
          if (!v155)
            v155 = *(_QWORD *)(v43 + 16);
        }
        if (*((_DWORD *)v235 + 20))
        {
          v221 = JSC::VM::hasExceptionsAfterHandlingTraps(v235, (uint64_t)a2, v25, a5, a6, a7, (uint64_t)v21, v26);
          v21 = v183;
          v27 = v224;
          v23 = v226;
          v26 = v182;
          v25 = v231;
          if (v221)
            goto LABEL_55;
        }
        else
        {
          v21 = v183;
          v27 = v224;
          v23 = v226;
          v26 = v182;
          v25 = v231;
        }
        goto LABEL_176;
      }
    }
    else
    {
      v154 = *(_DWORD *)v43;
      v24 = v147;
    }
    v155 = *(_QWORD *)(16 * (v154 & 0xFFFFFFFE) + 0x30);
    if (!v155)
      v155 = *(_QWORD *)(v43 + 16);
LABEL_176:
    if ((v155 & 0xFFFE000000000002) != 0)
      goto LABEL_55;
    v62 = 0;
    v43 = v155;
    if (*(unsigned __int8 *)(v155 + 5) <= 0x16u)
      goto LABEL_56;
  }
  if (!(_DWORD)v27)
    goto LABEL_358;
  if ((v27 & ~*(_DWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_358;
  v149 = (JSC::VM *)v25;
  v150 = v27;
  v151 = (JSC::Structure *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE));
  JSC::Structure::ensurePropertyTableIfNotEmpty(v151, v235, v25, (const JSC::PropertyTable *)a5, a6, a7, (uint64_t)v21, v26);
  v148 = (uint64_t)v151;
  v27 = v150;
  v25 = (unint64_t)v149;
  v21 = v227;
  v26 = v228;
  v23 = v226;
  if (!v152)
    goto LABEL_358;
  v252[0] = v149;
  v153 = JSC::PropertyTable::get(v152, (uint64_t *)v252);
  v148 = (uint64_t)v151;
  v27 = v150;
  v25 = (unint64_t)v149;
  v21 = v227;
  v26 = v228;
  v23 = v226;
  a7 = v153;
  if ((_DWORD)v153 == -1)
  {
LABEL_358:
    if ((*(_BYTE *)(v43 + 6) & 0x20) != 0)
    {
      v172 = v25;
      v173 = v21;
      v174 = v23;
      v175 = v27;
      v230 = v148;
      v176 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v43, v235, v25, (uint64_t)&v242);
      v26 = v228;
      v148 = v230;
      v27 = v175;
      v25 = v172;
      v23 = v174;
      v21 = v173;
      if ((v176 & 1) != 0)
      {
        v62 = 1;
LABEL_222:
        LODWORD(v24) = v147;
        goto LABEL_56;
      }
    }
    goto LABEL_172;
  }
  a6 = HIDWORD(v153);
  if ((int)v153 <= 63)
  {
    v156 = v43 + 16;
    v157 = v153 << 32;
  }
  else
  {
    v156 = *(_QWORD *)(v43 + 8) - 8;
    v157 = 0x3F00000000 - (v153 << 32);
  }
  LODWORD(v24) = v147;
  a5 = *(_QWORD *)(v156 + (v157 >> 29));
  if ((a5 & 0xFFFE000000000002) != 0)
    goto LABEL_184;
  v158 = *(unsigned __int8 *)(a5 + 5);
  if (v158 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v43, (uint64_t)v235, (uint64_t)&v242, a5, SHIDWORD(v153), v153);
    v21 = v227;
    v26 = v228;
    v23 = v226;
    goto LABEL_108;
  }
  if (v158 != 6)
  {
LABEL_184:
    v242 = (uint64_t (*)(unint64_t))a5;
    v246 = (_DWORD *)v43;
    goto LABEL_75;
  }
  v178 = *((_DWORD *)v151 + 4) & 3;
  v179 = *(_QWORD *)(a5 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C)))
  {
    v181 = *(int8x16_t ***)(a5 + 24);
    v180 = *(_QWORD *)(a5 + 32);
    v242 = *(uint64_t (**)(unint64_t))(a5 + 8);
    v243 = v179;
    LODWORD(v244) = HIDWORD(v153);
    v246 = (_DWORD *)v43;
    BYTE1(v247[1]) = 3;
    v62 = 1;
    if (v178 != 2)
      LOBYTE(v247[1]) = 1;
    BYTE3(v247[1]) = 1;
    v250 = v181;
    v251 = v180;
  }
  else
  {
    v242 = *(uint64_t (**)(unint64_t))(a5 + 8);
    v243 = v179;
    LODWORD(v244) = HIDWORD(v153);
    v246 = (_DWORD *)v43;
    v62 = 1;
    BYTE1(v247[1]) = 3;
    if (v178 != 2)
      LOBYTE(v247[1]) = 1;
  }
  v23 = v226;
  v21 = v227;
LABEL_215:
  v26 = v228;
LABEL_56:
  if (*(_DWORD *)(v26 + 80))
  {
    v159 = *(_DWORD *)(v26 + 80);
    if ((v159 & 0x27) != 0 && (v159 & 0x20) == 0)
    {
      v193 = v21;
      v194 = v22;
      v195 = v7;
      v196 = v10;
      v197 = v8;
      v198 = v23;
      v199 = v26;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, v25, a5, a6, a7, (uint64_t)v21, v26);
      v26 = v199;
      v23 = v198;
      v8 = v197;
      v10 = v196;
      v7 = v195;
      v22 = v194;
      v21 = v193;
    }
    if (*(_QWORD *)(v26 + 16))
    {
      v63 = 0;
      goto LABEL_65;
    }
  }
  if ((v62 & 1) == 0)
  {
    if ((*(_WORD *)(((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v239 + 2) & 0x3FF0) == 0)
    {
      UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)v7, v21, (const JSC::Identifier *)v25);
      goto LABEL_83;
    }
LABEL_64:
    v63 = 10;
    goto LABEL_65;
  }
  if (*(_BYTE *)(v22 + 5) == 52)
  {
    if (BYTE1(v247[1]) == 1)
    {
      v63 = (uint64_t)v242;
    }
    else if (BYTE1(v247[1]) == 2)
    {
      v117 = v21;
      v118 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v242, v7, v25, a5, a6, a7, (uint64_t)v21, v26);
      v21 = v117;
      v63 = v118;
    }
    else
    {
      v125 = *(WTF::StringImpl **)v21;
      v126 = (unint64_t)v246;
      v127 = *(_QWORD *)(16 * (*v246 & 0xFFFFFFFE) + 0x28);
      if ((v244 & 0x20) != 0)
        v126 = (unint64_t)v245;
      v128 = v21;
      if (BYTE3(v247[1]) != 1)
        goto LABEL_142;
      if ((v126 & 0xFFFE000000000002) != 0)
        goto LABEL_250;
      v129 = *(unsigned int *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x4C);
      v130 = *(_DWORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x4C) != 0;
      v131 = 16 * v129;
      if ((_DWORD)v129)
        v132 = v250 == (int8x16_t **)v131;
      else
        v132 = 1;
      if (!v132)
      {
        do
        {
          v131 = *(_QWORD *)(v131 + 16);
          v130 = v131 != 0;
        }
        while ((int8x16_t **)v131 != v250 && v131 != 0);
      }
      if (!v130)
      {
LABEL_250:
        v252[0] = *((JSC::VM **)v7 + 7);
        v134 = JSC::throwDOMAttributeGetterTypeError(v127, v252, v250, v125);
      }
      else
      {
LABEL_142:
        v134 = v242(v127);
      }
      v63 = v134;
      v21 = v128;
    }
    if (v63)
    {
      JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal((uint64_t)v7, v10, v8, (uint64_t)&v240, v22, (uint64_t)&v242, (uint64_t *)v21, v26);
      goto LABEL_65;
    }
    UndefinedVariableError = JSC::createTDZError(v7, (JSC::JSGlobalObject *)a2);
LABEL_83:
    JSC::VM::throwException(v8, v7, UndefinedVariableError, v79, v80, v81, v82, v83);
    goto LABEL_64;
  }
  v70 = v10;
  v71 = (WTF::StringImpl **)v21;
  JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal((uint64_t)v7, v70, v8, (uint64_t)&v240, v22, (uint64_t)&v242, (uint64_t *)v21, v26);
  if (BYTE1(v247[1]) == 1)
  {
    v63 = (uint64_t)v242;
  }
  else
  {
    if (BYTE1(v247[1]) == 2)
    {
      v119 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v242, v7, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      v135 = *v71;
      v136 = (unint64_t)v246;
      v137 = *(_QWORD *)(16 * (*v246 & 0xFFFFFFFE) + 0x28);
      if ((v244 & 0x20) != 0)
        v136 = (unint64_t)v245;
      if (BYTE3(v247[1]) != 1)
        goto LABEL_158;
      if ((v136 & 0xFFFE000000000002) != 0)
        goto LABEL_251;
      v138 = *(unsigned int *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x4C);
      v139 = *(_DWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x4C) != 0;
      v140 = 16 * v138;
      if ((_DWORD)v138)
        v141 = v250 == (int8x16_t **)v140;
      else
        v141 = 1;
      if (!v141)
      {
        do
        {
          v140 = *(_QWORD *)(v140 + 16);
          v139 = v140 != 0;
        }
        while ((int8x16_t **)v140 != v250 && v140 != 0);
      }
      if (!v139)
      {
LABEL_251:
        v252[0] = *((JSC::VM **)v7 + 7);
        v119 = JSC::throwDOMAttributeGetterTypeError(v137, v252, v250, v135);
      }
      else
      {
LABEL_158:
        v119 = v242(v137);
      }
    }
    v63 = v119;
  }
LABEL_65:
  if (v249)
  {
    v64 = *(_DWORD *)(v248 + 4);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x1987C2B90);
    }
    *(_DWORD *)(v248 + 4) = v64 - 1;
  }
  return v63;
}

uint64_t operationPutToScope(JSC::JSGlobalObject *a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned __int32 v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int32 *v23;
  unsigned __int32 v24;
  unsigned __int32 *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _DWORD *v34;
  uint64_t v35;
  const JSC::Identifier *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int hasProperty;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  JSC::JSGlobalObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t UndefinedVariableError;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t TDZError;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (**v85)(JSC::StringFireDetail *__hidden);
  const char *v86;
  unint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  _QWORD v90[2];
  uint64_t v91;
  char v92;
  int8x16_t **v93;
  uint64_t v94;
  int v95;
  __n128 v96;
  int v97;
  unsigned int v98;
  JSC::VM *v99;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  v10 = vars0;
  *(_QWORD *)(v9 + 40) = vars0;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *a2;
  if (v12 == 128)
  {
    v52 = *((__int16 *)a2 + 1);
    if (v52 <= 63)
      v14 = *((__int16 *)a2 + 1);
    else
      v14 = v52 + 1073741760;
    v15 = *((unsigned __int16 *)a2 + 2);
    v95 = v14;
    v96.n128_u32[0] = v15;
    v53 = *((__int16 *)a2 + 3);
    if (v53 <= 63)
      v17 = *((__int16 *)a2 + 3);
    else
      v17 = v53 + 1073741760;
    v54 = *((unsigned __int16 *)a2 + 4);
    v96.n128_u32[1] = v17;
    v96.n128_u32[2] = ((v54 >> 3) | (v54 << 20)) & 0x10000F | (((v54 >> 1) & 3) << 10) & 0xBFFFFFFF | (((v54 >> 7) & 1) << 30);
    v55 = *((unsigned __int16 *)a2 + 6);
    v96.n128_u32[3] = *((unsigned __int16 *)a2 + 5);
    v97 = v55;
    v20 = *((unsigned __int16 *)a2 + 7);
    goto LABEL_10;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    if (v13 <= 15)
      v14 = (char)a2[1];
    else
      v14 = v13 + 1073741808;
    v15 = a2[2];
    v95 = v14;
    v96.n128_u32[0] = v15;
    v16 = (char)a2[3];
    if (v16 <= 15)
      v17 = (char)a2[3];
    else
      v17 = v16 + 1073741808;
    v18 = a2[4];
    v96.n128_u32[1] = v17;
    v96.n128_u32[2] = ((v18 >> 3) | (v18 << 20) | (v18 << 9)) & 0x100C0F | ((((v18 & 0x80) >> 7) & 1) << 30);
    v19 = a2[6];
    v96.n128_u32[3] = a2[5];
    v97 = v19;
    v20 = a2[7];
LABEL_10:
    v98 = v20;
    goto LABEL_11;
  }
  v14 = *(_DWORD *)(a2 + 2);
  v95 = v14;
  a3 = *(__n128 *)(a2 + 6);
  v96 = a3;
  v20 = *(_DWORD *)(a2 + 26);
  v97 = *(_DWORD *)(a2 + 22);
  v98 = v20;
  v17 = a3.n128_i32[1];
  v15 = a3.n128_u32[0];
LABEL_11:
  v21 = *(_QWORD *)(v11 + 136);
  v22 = *(unsigned __int16 *)(v21 + 54);
  if (!*(_WORD *)(v21 + 54))
    v22 = *(_DWORD *)(v21 + 204);
  v23 = *(unsigned __int32 **)(*(_QWORD *)(v11 + 56) + 104);
  if (v23)
  {
    v24 = *v23;
    if (*v23 > v15)
    {
      v25 = &v23[2 * v15];
      goto LABEL_16;
    }
  }
  else
  {
    v24 = 0;
  }
  v34 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 120) + 72))(*(_QWORD *)(v11 + 120)) + 48);
  if (*v34 <= v15 - v24)
    goto LABEL_83;
  v25 = &v34[2 * (v15 - v24)];
LABEL_16:
  v26 = (unint64_t *)(v25 + 2);
  v27 = *(_QWORD *)(v10 + 8 * v14);
  if (v17 < 0x40000000)
  {
    v28 = (uint64_t *)(v10 + 8 * v17);
    goto LABEL_18;
  }
  v51 = *(_QWORD *)(v10 + 16);
  if ((v17 - 0x40000000) >= *(_DWORD *)(v51 + 172))
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x1987C3A1CLL);
  }
  v28 = (uint64_t *)(*(_QWORD *)(v51 + 160) + 8 * (v17 - 0x40000000));
LABEL_18:
  v29 = (v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (int *)(v29 + 24 * v20);
  v31 = *v28;
  if ((*v30 & 0x3FF) == 4)
  {
    *(_QWORD *)(v27 + 8 * *(unsigned int *)(v29 + 24 * v20 + 16) + 32) = v31;
    if (v31
      && (v31 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v27 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v9 + 192, v27);
    }
    v32 = *(_QWORD *)(v29 + 24 * v20 + 8);
    if (v32)
    {
      v85 = &off_1E3583C90;
      v86 = "Executed op_put_scope<ResolvedClosureVar>";
      if (*(_BYTE *)(v32 + 4))
      {
        if (*(_BYTE *)(v32 + 4) == 1)
          JSC::WatchpointSet::fireAllSlow(v32, (JSC::VM *)v9, &v85, (uint64_t)a5, a6, a7, a8, a9, a3.n128_f64[0]);
      }
      else
      {
        __dmb(0xAu);
        *(_BYTE *)(v32 + 4) = 1;
        __dmb(0xAu);
      }
    }
    return *(_QWORD *)(v9 + 16);
  }
  hasProperty = JSC::JSObject::hasProperty(v27, (uint64_t)a1, *v26, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v35, (uint64_t)v36, v37, v38, v39, v40, v41))
  {
    return *(_QWORD *)(v9 + 16);
  }
  if (!hasProperty)
  {
    v43 = *v30;
    if ((*v30 & 0x3FF00000) != 0)
      goto LABEL_33;
    UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)a1, (JSC::JSGlobalObject *)v26, v36);
    JSC::VM::throwException((JSC::VM *)v9, a1, UndefinedVariableError, v66, v67, v68, v69, v70);
    return *(_QWORD *)(v9 + 16);
  }
  v43 = *v30;
  if (*(_BYTE *)(v27 + 5) != 52 || (v43 & 0xFF800) == 0)
  {
LABEL_33:
    v85 = 0;
    v86 = (const char *)v27;
    LODWORD(v87) = -1;
    BYTE4(v87) = (2 * ((v43 & 0xFF800) == 0)) | ((v43 & 0x40000000) != 0);
    *(_WORD *)((char *)&v87 + 5) = 0;
    HIBYTE(v87) = 1;
    v88 = 0;
    (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t, void (***)(JSC::StringFireDetail *__hidden)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) + 0x48))(v27, a1, *v26, v31, &v85);
    if (!*(_DWORD *)(v9 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v44, v45, v46, v47, v48, v49, v50))
    {
      JSC::CommonSlowPaths::tryCachePutToScopeGlobal((uint64_t)a1, v11, (uint64_t)&v95, v27, (uint64_t)&v85, (uint64_t *)v26, v49, v50);
    }
    return *(_QWORD *)(v9 + 16);
  }
  v87 = 0xFFFFFFFF00000000;
  LOBYTE(v91) = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0;
  memset(v90, 0, 13);
  v88 = (_DWORD *)v27;
  result = JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>(v27, *v26, (uint64_t)&v85, v37, v38, v39, v40, v41);
  if (BYTE1(v90[1]) == 1)
  {
    v63 = (uint64_t)v85;
  }
  else
  {
    if (BYTE1(v90[1]) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v85, a1, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      v71 = (WTF::StringImpl *)*v26;
      v72 = (unint64_t)v89;
      v73 = *(_QWORD *)(16 * (*v89 & 0xFFFFFFFE) + 0x28);
      if ((v87 & 0x20) != 0)
        v72 = (unint64_t)v88;
      if (BYTE3(v90[1]) != 1)
        goto LABEL_72;
      if ((v72 & 0xFFFE000000000002) != 0)
        goto LABEL_82;
      v74 = *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C);
      v75 = *(_DWORD *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v74)
      {
        v76 = 16 * v74;
        if (v93 != (int8x16_t **)v76)
        {
          do
          {
            v76 = *(_QWORD *)(v76 + 16);
            v75 = v76 != 0;
          }
          while ((int8x16_t **)v76 != v93 && v76 != 0);
        }
      }
      if (!v75)
      {
LABEL_82:
        v99 = (JSC::VM *)*((_QWORD *)a1 + 7);
        result = JSC::throwDOMAttributeGetterTypeError(v73, &v99, v93, v71);
      }
      else
      {
LABEL_72:
        result = ((uint64_t (*)(unint64_t))v85)(v73);
      }
    }
    v63 = result;
  }
  if (!v63)
  {
    TDZError = JSC::createTDZError(a1, v56);
    JSC::VM::throwException((JSC::VM *)v9, a1, TDZError, v79, v80, v81, v82, v83);
    result = *(_QWORD *)(v9 + 16);
  }
  if (v92)
  {
    v64 = *(_DWORD *)(v91 + 4);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x1987C3A5CLL);
    }
    *(_DWORD *)(v91 + 4) = v64 - 1;
  }
  if (v63)
  {
    v43 = *v30;
    goto LABEL_33;
  }
  return result;
}

void JSC::CommonSlowPaths::tryCachePutToScopeGlobal(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  unsigned __int8 *v19;
  int v21;
  BOOL v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t *v51;

  v12 = *(_DWORD *)(a3 + 24);
  v13 = *(_QWORD *)(a2 + 136);
  v14 = *(unsigned __int16 *)(v13 + 54);
  if (!*(_WORD *)(v13 + 54))
    v14 = *(_DWORD *)(v13 + 204);
  v15 = (v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (int *)(v15 + 24 * v12);
  v17 = *v16 & 0x3FF;
  if ((*v16 & 0x3FFu) - 10 < 2)
  {
    if (*(_BYTE *)(a4 + 5) != 51)
      goto LABEL_44;
    if ((*v16 & 0x3FF) == 0xA)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      if ((*v16 & 0x3FF) != 0xB)
      {
        __break(0xC471u);
        goto LABEL_74;
      }
      LODWORD(v17) = 6;
    }
    v19 = (unsigned __int8 *)(a2 + 16);
    if (__ldaxr((unsigned __int8 *)(a2 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
LABEL_15:
      *v16 = *v16 & 0x7FFFFC00 | v17;
      v21 = __ldxr(v19);
      if (v21 == 1)
      {
        if (!__stlxr(0, v19))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, a3, a4, a5, (uint64_t)a6, a7, a8);
      goto LABEL_20;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_15;
  }
  if ((*v16 & 0x3FF) == 0 || (*v16 & 0x3FF) == 6)
  {
LABEL_44:
    if (*(_BYTE *)(a4 + 5) == 52)
    {
      if ((*v16 & 0x3FFu) >= 0xC)
      {
        __break(0xC471u);
        JUMPOUT(0x1987C3E4CLL);
      }
      v36 = dword_199156FE0[v17];
      JSC::SymbolTable::get(*(_QWORD *)(a4 + 24), *a6, a3, a4, a5, (uint64_t)a6, a7, a8, (unint64_t *)&v51);
      v44 = (unsigned __int8 *)(a2 + 16);
      if (__ldaxr(v44))
      {
        __clrex();
      }
      else if (!__stxr(1u, v44))
      {
        goto LABEL_49;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v44);
LABEL_49:
      *v16 = *v16 & 0x7FFFFC00 | v36;
      v46 = v51;
      if ((v51 & 1) != 0)
      {
        v47 = 0;
        v46 = (unint64_t *)&v51;
      }
      else
      {
        v47 = v51[1];
      }
      *(_QWORD *)(v15 + 24 * v12 + 8) = v47;
      v48 = *v46;
      v49 = (v48 >> 10) & 0xFFFFFFF;
      if (v49 < *(unsigned int *)(a4 + 52))
      {
        *(_QWORD *)(v15 + 24 * v12 + 16) = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v49) + 8 * ((v48 >> 6) & 0xF);
        v50 = __ldxr(v44);
        if (v50 == 1)
        {
          if (!__stlxr(0, v44))
          {
LABEL_64:
            if ((v51 & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v51, v37, v38, v39, v40, v41, v42, v43);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, v38, v39, v40, v41, v42, v43);
        goto LABEL_64;
      }
      __break(0xC471u);
LABEL_74:
      JUMPOUT(0x1987C3E20);
    }
LABEL_20:
    if ((_DWORD)v17)
      v22 = (_DWORD)v17 == 6;
    else
      v22 = 1;
    if (!v22)
      return;
    if (*(_BYTE *)(a5 + 23) != 1)
      return;
    v23 = *(unsigned __int8 *)(a5 + 21);
    if ((v23 - 1) > 1)
      return;
    if (*(_QWORD *)a5 != a4)
      return;
    if (*(_QWORD *)(a2 + 8) != a4)
      return;
    if ((*(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x10) & 3) == 2)
      return;
    v24 = *(_WORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0xC);
    if ((v24 & 8) != 0)
      return;
    v25 = *(_QWORD *)(a1 + 56);
    if ((v24 & 0x10) != 0)
    {
      if (v23 == 2 || (v24 & 0x20) == 0)
        return;
    }
    else if (v23 == 2)
    {
      return;
    }
    JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)), *(JSC::VM **)(a1 + 56), (JSC::Structure *)*(unsigned int *)(a5 + 16), "Did cache property replacement", a5, (uint64_t)a6, a7, a8);
    v32 = (unsigned __int8 *)(a2 + 16);
    if (__ldaxr((unsigned __int8 *)(a2 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v32))
    {
      goto LABEL_36;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
LABEL_36:
    v34 = *(_DWORD *)a4 & 0xFFFFFFFE;
    *(_QWORD *)(v15 + 24 * v12 + 8) = 16 * v34;
    if ((_DWORD)v34 && *(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v25 + 192, a2);
    *(_QWORD *)(v15 + 24 * v12 + 16) = *(int *)(a5 + 16);
    v35 = __ldxr(v32);
    if (v35 == 1)
    {
      if (!__stlxr(0, v32))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, v26, v27, v28, v29, v30, v31);
  }
}

unint64_t operationReallocateButterflyToHavePropertyStorageWithInitialCapacity(uint64_t a1, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t MoreOutOfLineStorage;
  uint64_t v12;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a2, (JSC::VM *)a1, 0, 4uLL, a6, a7, a8, a9, a3);
  v12 = a1 + 192;
  if (*(_BYTE *)(a1 + 755))
  {
    *(_DWORD *)a2 |= 1u;
    __dmb(0xAu);
    *(_QWORD *)(a2 + 8) = MoreOutOfLineStorage;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v12, a2);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = MoreOutOfLineStorage;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v12, a2);
  }
  return MoreOutOfLineStorage;
}

unint64_t operationReallocateButterflyToGrowPropertyStorage(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v12;
  unint64_t v13;
  unint64_t MoreOutOfLineStorage;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v12 = *(unsigned __int16 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x18);
  if (v12 == 65534)
    goto LABEL_5;
  if (v12 == 0xFFFF)
    v12 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40) + 84);
  if (v12 < 64)
  {
LABEL_5:
    v13 = 0;
  }
  else if ((v12 - 63) >= 5)
  {
    v17 = (v12 - 64) | ((v12 - 64) >> 1) | (((v12 - 64) | ((v12 - 64) >> 1)) >> 2);
    v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
    v13 = (v18 | HIWORD(v18)) + 1;
  }
  else
  {
    v13 = 4;
  }
  MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a2, (JSC::VM *)a1, v13, a3, a6, a7, a8, a9, a4);
  v15 = a1 + 192;
  if (*(_BYTE *)(a1 + 755))
  {
    *(_DWORD *)a2 |= 1u;
    __dmb(0xAu);
    *(_QWORD *)(a2 + 8) = MoreOutOfLineStorage;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v15, a2);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = MoreOutOfLineStorage;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v15, a2);
  }
  return MoreOutOfLineStorage;
}

uint64_t operationReallocateButterflyAndTransition(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v12 = a3[7];
  v13 = 16 * (a3[6] & 0xFFFFFFFE);
  v14 = 16 * (a3[10] & 0xFFFFFFFE);
  result = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a2, (JSC::VM *)a1, (unint64_t)a3[12] >> 3, (unint64_t)a3[11] >> 3, a5, a6, a7, a8, a9);
  if (*(_BYTE *)(a1 + 755))
  {
    *(_DWORD *)a2 = (v13 >> 4) | 1;
    __dmb(0xAu);
    *(_QWORD *)(a2 + 8) = result;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      result = JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = result;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      result = JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  if (v12 <= 63)
  {
    v16 = a2 + 16;
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 8) - 8;
    v12 = 63 - v12;
  }
  *(_QWORD *)(v16 + 8 * v12) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    result = JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  *(_DWORD *)a2 = v14 >> 4;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a2 + 6) & 0x80 | *(_BYTE *)(v14 + 10);
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(v14 + 9);
  v17 = (unsigned __int8 *)(a2 + 4);
  if (*(unsigned __int8 *)(a2 + 4) != *(unsigned __int8 *)(v14 + 8))
  {
    do
    {
      while (1)
      {
        v18 = *v17;
        v19 = __ldxr(v17);
        if (v19 == v18)
          break;
        __clrex();
      }
    }
    while (__stxr(v18 & 0xC0 | *(_BYTE *)(v14 + 8), v17));
  }
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    return JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  return result;
}

uint64_t operationOSRWriteBarrier(uint64_t result, unint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(result + 40) = vars0;
  if (a2)
  {
    if (*(_DWORD *)(result + 760) >= *(unsigned __int8 *)(a2 + 7))
      return JSC::Heap::writeBarrierSlowPath(result + 192, a2);
  }
  return result;
}

void operationLookupExceptionHandler(JSC *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *vars0;

  *((_QWORD *)a1 + 5) = vars0;
  JSC::genericUnwind(a1, vars0, a3, a4, a5, a6, a7, a8);
}

void operationLookupExceptionHandlerFromCallerFrame(JSC *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *vars0;

  *((_QWORD *)a1 + 5) = vars0;
  JSC::genericUnwind(a1, vars0, a3, a4, a5, a6, a7, a8);
}

void operationVMHandleException(JSC *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *vars0;

  *((_QWORD *)a1 + 5) = vars0;
  JSC::genericUnwind(a1, vars0, a3, a4, a5, a6, a7, a8);
}

void operationExceptionFuzz(unint64_t a1)
{
  const void *v1;
  JSC::VM **v2;
  JSC::VM *var8[2];

  v2 = *(JSC::VM ***)(a1 + 56);
  v2[5] = var8[1];
  var8[0] = (JSC::VM *)v2;
  JSC::doExceptionFuzzing(a1, var8, "JITOperations", v1);
}

void operationExceptionFuzzWithCallFrame(JSC::VM *a1)
{
  const void *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  JSC::VM *v7;
  _QWORD *vars0;

  v2 = vars0;
  *((_QWORD *)a1 + 5) = vars0;
  v7 = a1;
  v3 = v2[3];
  if ((v3 & 0xFFFE000000000007) == 3)
  {
    while (1)
    {
      v6 = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
      if (v6)
        break;
      v2 = (_QWORD *)*v2;
      v3 = v2[3];
      if ((v3 & 0xFFFE000000000007) != 3)
      {
        v4 = (unint64_t *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 40);
        goto LABEL_3;
      }
    }
    if (v6 != 1)
    {
      v5 = 0;
      goto LABEL_4;
    }
    v4 = (unint64_t *)(v2[2] + 32);
  }
  else
  {
    v4 = (unint64_t *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 40);
  }
LABEL_3:
  v5 = *v4;
LABEL_4:
  JSC::doExceptionFuzzing(v5, &v7, "JITOperations", v1);
}

JSC::JSBigInt *operationValueAdd(unint64_t a1, unint64_t a2, unint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  int *v17;
  int v18;
  _BOOL4 v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  JSC::JSString *v50;
  JSC::JSString *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t OutOfMemoryError;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::Exception *v91;
  int v92;
  unint64_t v93;
  uint64_t SlowCase;
  WTF::StringImpl *v95;
  unint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  _QWORD var48[10];

  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var48[9];
  if (a2 >> 49 && a3 >> 49)
  {
    v72 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v72 = a2 - 0x2000000000000;
    v73 = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v73 = a3 - 0x2000000000000;
    v74 = v72 + v73;
    if ((*(_QWORD *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v75 = (int)v74, v74 == (double)(int)v75)
      && ((_DWORD)v75 || (*(_QWORD *)&v74 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v75 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v74 + 0x2000000000000);
    }
  }
  v96 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return JSC::jsAddSlowCase((JSC::VM **)a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  v12 = *(unsigned __int8 *)(a3 + 5);
  if (v12 > 0x16)
    return JSC::jsAddSlowCase((JSC::VM **)a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if (v12 == 2)
  {
    var48[0] = v11;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (int *)(a2 + 16);
    if ((v13 & 1) == 0)
      v14 = (int *)(v13 + 4);
    v15 = *v14;
    if (!v15)
      return (JSC::JSBigInt *)a3;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = (int *)(a3 + 16);
    if ((v16 & 1) == 0)
      v17 = (int *)(v16 + 4);
    v18 = *v17;
    if (!v18)
      return (JSC::JSBigInt *)a2;
    v19 = __OFADD__(v15, v18);
    if ((v18 | v15) < 0 || v19)
    {
      JSC::throwOutOfMemoryError(a1, var48);
      return 0;
    }
    v20 = (uint64_t *)(v11 + 39432);
    if ((v13 & 1) != 0)
    {
      v13 = (v13 >> 2) & 1;
      if ((v16 & 1) == 0)
        goto LABEL_20;
    }
    else
    {
      LODWORD(v13) = (*(unsigned __int8 *)(v13 + 16) >> 2) & 1;
      if ((v16 & 1) == 0)
      {
LABEL_20:
        LODWORD(v16) = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
        goto LABEL_21;
      }
    }
    v16 = (v16 >> 2) & 1;
LABEL_21:
    v21 = v18 + v15;
    v22 = v13 & v16;
    v23 = *v20;
    if ((unint64_t)*v20 >= *(_QWORD *)(v11 + 39440))
    {
      v23 = *(_QWORD *)(v11 + 39448);
      if ((v23 & 1) != 0)
      {
        v93 = a3;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, 0, 0);
        a3 = v93;
        v23 = SlowCase;
        goto LABEL_23;
      }
      v76 = *(_QWORD *)(v23 + 8) ^ *(_QWORD *)(v11 + 39456);
      *(_QWORD *)(v11 + 39440) = v23 + HIDWORD(v76);
      *(_QWORD *)(v11 + 39448) = v23 + (int)v76;
    }
    *v20 = v23 + 32;
LABEL_23:
    *(_DWORD *)v23 = *(_QWORD *)(v11 + 41512) >> 4;
    *(_DWORD *)(v23 + 4) = 17302016;
    v24 = 5;
    if (!v22)
      v24 = 1;
    *(_QWORD *)(v23 + 8) = v24 | a2;
    *(_DWORD *)(v23 + 16) = v21;
    *(_DWORD *)(v23 + 20) = a3;
    *(_WORD *)(v23 + 24) = WORD2(a3);
    *(_WORD *)(v23 + 26) = 0;
    *(_DWORD *)(v23 + 28) = 0;
    if (*(_BYTE *)(v11 + 755))
      __dmb(0xAu);
    return (JSC::JSBigInt *)v23;
  }
LABEL_30:
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v96, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v95);
  if (*(_DWORD *)(v11 + 80))
  {
    v92 = *(_DWORD *)(v11 + 80);
    if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v27, (uint64_t)v28, v29, v30, v31, v32);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_90;
  }
  v33 = *(JSC **)(a1 + 56);
  var48[0] = v33;
  v27 = *(_QWORD *)(a2 + 8);
  v34 = (unsigned int *)(a2 + 16);
  if ((v27 & 1) == 0)
    v34 = (unsigned int *)(v27 + 4);
  v35 = *v34;
  if (!(_DWORD)v35)
  {
    v48 = JSC::jsString(v33, (JSC::VM *)&v95, (const WTF::String *)v27, (uint64_t)v28, v29, v30, v31, v32);
    goto LABEL_59;
  }
  v28 = v95;
  if (!v95 || (v36 = *((unsigned int *)v95 + 1), !(_DWORD)v36))
  {
    v23 = a2;
    goto LABEL_60;
  }
  v37 = __OFADD__((_DWORD)v35, (_DWORD)v36);
  if (((v36 | v35) & 0x80000000) == 0 && !v37)
  {
    if ((v27 & 1) == 0 && (unint64_t)(v35 + v36 + 20) < 0x20)
    {
      if (v27)
        v38 = *(_DWORD *)(v27 + 4);
      else
        v38 = 0;
      if (((v38 | v36) & 0x80000000) != 0 || __OFADD__(v38, (_DWORD)v36))
      {
        v98 = 0;
      }
      else
      {
        if (v27 && (*(_BYTE *)(v27 + 16) & 4) == 0)
          v39 = 0;
        else
          v39 = (*((unsigned __int8 *)v95 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v38 + v36), v39, v27, (uint64_t)v95, (int **)&v98);
        if (v98)
        {
          v97 = v98;
          v98 = 0;
          v23 = JSC::JSString::create((uint64_t)v33, (JSC::VM *)&v97, v40, v41, v42, v43, v44, v45);
          v46 = v97;
          v97 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, v26, v27, (uint64_t)v28, v29, v30, v31, v32);
              WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
LABEL_52:
          v47 = v98;
          v98 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v26, v27, (uint64_t)v28, v29, v30, v31, v32);
              WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
          goto LABEL_60;
        }
      }
      OutOfMemoryError = JSC::createOutOfMemoryError(a1, v26);
      v91 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v91 = (JSC::Exception *)JSC::Exception::create((uint64_t)v33, (JSC::VM *)OutOfMemoryError, 0, v86, v87, v88, v89, v90);
      }
      JSC::VM::throwException(v33, (JSC::JSGlobalObject *)a1, v91);
      v23 = 0;
      goto LABEL_52;
    }
    v50 = (JSC::JSString *)JSC::jsString(v33, (JSC::VM *)&v95, (const WTF::String *)v27, (uint64_t)v95, v29, v30, v31, v32);
    v48 = JSC::JSRopeString::create(v33, a2, v50, v51, v52, v53, v54, v55);
LABEL_59:
    v23 = v48;
    goto LABEL_60;
  }
  JSC::throwOutOfMemoryError(a1, var48);
LABEL_90:
  v23 = 0;
LABEL_60:
  v49 = v95;
  v95 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v26, v27, (uint64_t)v28, v29, v30, v31, v32);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  return (JSC::JSBigInt *)v23;
}

unint64_t operationValueAddProfiled(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int *v19;
  int v20;
  unint64_t v21;
  int *v22;
  int v23;
  _BOOL4 v24;
  unint64_t *v25;
  int v26;
  int v27;
  unint64_t SlowCase;
  uint64_t v29;
  __int16 v30;
  int v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  int v60;
  unint64_t *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  uint64_t v64;
  JSC::JSString *v65;
  JSC::JSString *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t OutOfMemoryError;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::Exception *v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  _QWORD var58[12];

  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = var58[11];
  v14 = *(unsigned __int16 *)a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v16) = (*(_WORD *)a4 >> 10) & 5 | 2;
  if (!v15)
    LOWORD(v16) = (*(_WORD *)a4 >> 10) & 3 | 4;
  if (a3 >> 49)
  {
    v32 = (v14 >> 7) & 6 | 1;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      LOWORD(v32) = (*(_WORD *)a4 >> 7) & 5 | 2;
    *(_WORD *)a4 = v14 & 0xE07F | ((_WORD)v16 << 10) | ((_WORD)v32 << 7);
    if (v15)
    {
      v33 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = a2 - 0x2000000000000;
      v34 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v34 = a3 - 0x2000000000000;
      v35 = v33 + v34;
      if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v36 = (int)v35;
        if (v35 == (double)(int)v36 && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
          return v36 | 0xFFFE000000000000;
      }
      SlowCase = *(_QWORD *)&v35 + 0x2000000000000;
      goto LABEL_32;
    }
  }
  else
  {
    *(_WORD *)a4 = v14 & 0x180 | v14 & 0xE07F | ((_WORD)v16 << 10) | 0x200;
  }
  v112 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    goto LABEL_81;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
LABEL_55:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v112, a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v111);
    if (*(_DWORD *)(v13 + 80))
    {
      v106 = *(_DWORD *)(v13 + 80);
      if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v38, (uint64_t)v39, v40, v41, v42, v43);
      if (*(_QWORD *)(v13 + 16))
        goto LABEL_124;
    }
    v44 = *((_QWORD *)a1 + 7);
    var58[0] = v44;
    v38 = *(_QWORD *)(a2 + 8);
    v45 = (unsigned int *)(a2 + 16);
    if ((v38 & 1) == 0)
      v45 = (unsigned int *)(v38 + 4);
    v46 = *v45;
    v39 = v111;
    if ((_DWORD)v46)
    {
      if (!v111 || (v47 = *((unsigned int *)v111 + 1), !(_DWORD)v47))
      {
        SlowCase = a2;
        goto LABEL_97;
      }
      v48 = __OFADD__((_DWORD)v46, (_DWORD)v47);
      if (((v47 | v46) & 0x80000000) != 0 || v48)
      {
        JSC::throwOutOfMemoryError(a1, var58);
LABEL_124:
        SlowCase = 0;
LABEL_97:
        v71 = v111;
        v111 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::~StringImpl(v71, v37, v38, (uint64_t)v39, v40, v41, v42, v43);
            WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
          }
          else
          {
            *(_DWORD *)v71 -= 2;
          }
        }
        goto LABEL_32;
      }
      if ((v38 & 1) != 0 || (unint64_t)(v46 + v47 + 20) >= 0x20)
      {
        v65 = (JSC::JSString *)JSC::jsString((JSC *)v44, (JSC::VM *)&v111, (const WTF::String *)v38, (uint64_t)v111, v40, v41, v42, v43);
        SlowCase = JSC::JSRopeString::create((JSC::JSRopeString *)v44, a2, v65, v66, v67, v68, v69, v70);
        goto LABEL_97;
      }
      if (v38)
        v49 = *(_DWORD *)(v38 + 4);
      else
        v49 = 0;
      if (((v49 | v47) & 0x80000000) != 0 || __OFADD__(v49, (_DWORD)v47))
      {
        v114 = 0;
      }
      else
      {
        if (v38 && (*(_BYTE *)(v38 + 16) & 4) == 0)
          v50 = 0;
        else
          v50 = (*((unsigned __int8 *)v111 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v49 + v47), v50, v38, (uint64_t)v111, (int **)&v114);
        if (v114)
        {
          v113 = v114;
          v114 = 0;
          SlowCase = JSC::JSString::create(v44, (JSC::VM *)&v113, v51, v52, v53, v54, v55, v56);
          v57 = v113;
          v113 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              WTF::StringImpl::~StringImpl(v57, v37, v38, (uint64_t)v39, v40, v41, v42, v43);
              WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
LABEL_77:
          v58 = v114;
          v114 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
            {
              WTF::StringImpl::~StringImpl(v58, v37, v38, (uint64_t)v39, v40, v41, v42, v43);
              WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
            }
            else
            {
              *(_DWORD *)v58 -= 2;
            }
          }
          goto LABEL_97;
        }
      }
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v37);
      v105 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v105 = (JSC::Exception *)JSC::Exception::create(v44, (JSC::VM *)OutOfMemoryError, 0, v100, v101, v102, v103, v104);
      }
      JSC::VM::throwException((JSC::VM *)v44, a1, v105);
      SlowCase = 0;
      goto LABEL_77;
    }
    if (v111)
    {
      v59 = *((_DWORD *)v111 + 1);
      if (v59 == 1)
      {
        v60 = *((_DWORD *)v111 + 4);
        v88 = (unsigned __int8 *)*((_QWORD *)v111 + 1);
        if ((v60 & 4) != 0)
        {
          v89 = *v88;
        }
        else
        {
          v89 = *(unsigned __int16 *)v88;
          if (v89 > 0xFF)
            goto LABEL_87;
        }
        SlowCase = *(_QWORD *)(v44 + 8 * v89 + 42216);
        goto LABEL_97;
      }
      if (v59)
      {
        v60 = *((_DWORD *)v111 + 4);
LABEL_87:
        v61 = (unint64_t *)(v44 + 39696);
        *(_DWORD *)v111 += 2;
        v62 = v39;
        if ((v60 & 3) == 2)
        {
          v62 = v39;
          do
          {
            v62 = (WTF::StringImpl *)*((_QWORD *)v62 + 3);
            v60 = *((_DWORD *)v62 + 4);
          }
          while ((v60 & 3) == 2);
        }
        if ((v60 & 8) != 0)
        {
          v63 = 0;
        }
        else
        {
          *((_DWORD *)v62 + 4) = v60 | 8;
          v63 = (unint64_t)*((unsigned int *)v62 + 1) << ((v60 & 4) == 0);
        }
        v64 = v44 + 192;
        SlowCase = *v61;
        if (*v61 >= *(_QWORD *)(v44 + 39704))
        {
          v110 = v39;
          SlowCase = *(_QWORD *)(v44 + 39712);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v44, v37, v38, (uint64_t)v39, v40, v41, v42, v43);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v44 + 39672, v44 + 192, 16, 0, 0);
            v64 = v44 + 192;
            v39 = v110;
            v61 = (unint64_t *)(v44 + 39696);
          }
          else
          {
            v107 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v44 + 39720);
            *(_QWORD *)(v44 + 39704) = SlowCase + HIDWORD(v107);
            *(_QWORD *)(v44 + 39712) = SlowCase + (int)v107;
            *v61 = SlowCase + 16;
          }
        }
        else
        {
          *v61 = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = v61[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v39;
        if (*(_BYTE *)(v44 + 755))
          __dmb(0xAu);
        if (v63 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v64, 0, SlowCase, v63, v40, v41, v42, v43);
        goto LABEL_97;
      }
    }
    SlowCase = *(_QWORD *)(v44 + 41968);
    goto LABEL_97;
  }
  v17 = *(unsigned __int8 *)(a3 + 5);
  if (v17 > 0x16)
  {
LABEL_81:
    SlowCase = (unint64_t)JSC::jsAddSlowCase((JSC::VM **)a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_32;
  }
  if (v17 != 2)
    goto LABEL_55;
  var58[0] = v13;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (int *)(a2 + 16);
  if ((v18 & 1) == 0)
    v19 = (int *)(v18 + 4);
  v20 = *v19;
  if (*v19)
  {
    v21 = *(_QWORD *)(a3 + 8);
    v22 = (int *)(a3 + 16);
    if ((v21 & 1) == 0)
      v22 = (int *)(v21 + 4);
    v23 = *v22;
    if (*v22)
    {
      v24 = __OFADD__(v20, v23);
      if (((v23 | v20) & 0x80000000) == 0 && !v24)
      {
        v25 = (unint64_t *)(v13 + 39432);
        if ((v18 & 1) != 0)
        {
          v18 = (v18 >> 2) & 1;
          if ((v21 & 1) == 0)
            goto LABEL_25;
        }
        else
        {
          LODWORD(v18) = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
          if ((v21 & 1) == 0)
          {
LABEL_25:
            LODWORD(v21) = (*(unsigned __int8 *)(v21 + 16) >> 2) & 1;
            goto LABEL_26;
          }
        }
        v21 = (v21 >> 2) & 1;
LABEL_26:
        v26 = v23 + v20;
        v27 = v18 & v21;
        SlowCase = *v25;
        if (*v25 >= *(_QWORD *)(v13 + 39440))
        {
          SlowCase = *(_QWORD *)(v13 + 39448);
          if ((SlowCase & 1) != 0)
          {
            v108 = v26;
            JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            v109 = JSC::LocalAllocator::allocateSlowCase(v13 + 39408, v13 + 192, 32, 0, 0);
            v26 = v108;
            v25 = (unint64_t *)(v13 + 39432);
            SlowCase = v109;
            goto LABEL_28;
          }
          v90 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v13 + 39456);
          *(_QWORD *)(v13 + 39440) = SlowCase + HIDWORD(v90);
          *(_QWORD *)(v13 + 39448) = SlowCase + (int)v90;
        }
        *v25 = SlowCase + 32;
LABEL_28:
        *(_DWORD *)SlowCase = v25[260] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        v29 = 5;
        if (!v27)
          v29 = 1;
        *(_QWORD *)(SlowCase + 8) = v29 | a2;
        *(_DWORD *)(SlowCase + 16) = v26;
        *(_DWORD *)(SlowCase + 20) = a3;
        *(_WORD *)(SlowCase + 24) = WORD2(a3);
        *(_WORD *)(SlowCase + 26) = 0;
        *(_DWORD *)(SlowCase + 28) = 0;
        if (*(_BYTE *)(v13 + 755))
          __dmb(0xAu);
        goto LABEL_32;
      }
      JSC::throwOutOfMemoryError(a1, var58);
      SlowCase = 0;
    }
    else
    {
      SlowCase = a2;
    }
  }
  else
  {
    SlowCase = a3;
  }
LABEL_32:
  if (SlowCase <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (SlowCase >> 49)
    {
      v30 = 27;
    }
    else if (SlowCase && (SlowCase & 0xFFFE000000000002) == 0 && *(_BYTE *)(SlowCase + 5) == 3)
    {
      v30 = 32;
    }
    else
    {
      v30 = 4;
    }
    *(_WORD *)a4 |= v30;
  }
  return SlowCase;
}

unint64_t operationValueAddProfiledOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unsigned __int16 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  const WTF::String *v20;
  JSC::JSString *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  JSC::VM *v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  __int16 v38;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  JSC::JSString *v65;
  JSC::JSString *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  JSC *v103;
  uint64_t vars0;

  v8 = a3;
  v11 = vars0;
  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v12 = *a4;
  v13 = **a4;
  v14 = a2 >> 49;
  v15 = (v13 >> 10) & 3 | 4;
  v16 = (v13 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v16) = (**a4 >> 10) & 5 | 2;
  if (v14)
    LOWORD(v15) = v16;
  v17 = a3 >> 49;
  v18 = (v13 >> 7) & 3 | 4;
  v19 = (v13 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v19) = (v13 >> 7) & 5 | 2;
  if (v17)
    LOBYTE(v18) = v19;
  *v12 = v13 & 0xE07F | ((_WORD)v15 << 10) | (v18 << 7);
  JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v11 + 16), (int *)operationValueAddProfiledNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  if (v14 && v17)
  {
    v87 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v87 = a2 - 0x2000000000000;
    v88 = (double)(int)v8;
    if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v88 = v8 - 0x2000000000000;
    v89 = v87 + v88;
    if ((*(_QWORD *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v90 = (int)v89;
      if (v89 == (double)(int)v90 && ((_DWORD)v90 || (*(_QWORD *)&v89 & 0x8000000000000000) == 0))
        return v90 | 0xFFFE000000000000;
    }
    v8 = *(_QWORD *)&v89 + 0x2000000000000;
    goto LABEL_31;
  }
  v100 = v8;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    goto LABEL_66;
  v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v8 & 0xFFFE000000000002) != 0)
  {
LABEL_40:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v100, a1, v20, (uint64_t)v21, v22, v23, v24, v25, (int **)&v99);
    if (*((_DWORD *)v27 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)v40, v41, (uint64_t)v42, v43, v44, v45, v46))
    {
      goto LABEL_93;
    }
    v47 = (JSC *)*((_QWORD *)a1 + 7);
    v103 = v47;
    v48 = *(_QWORD *)(a2 + 8);
    v49 = (unsigned int *)(a2 + 16);
    if ((v48 & 1) == 0)
      v49 = (unsigned int *)(v48 + 4);
    v50 = *v49;
    if ((_DWORD)v50)
    {
      v42 = v99;
      if (!v99 || (v51 = *((unsigned int *)v99 + 1), !(_DWORD)v51))
      {
        v8 = a2;
        goto LABEL_69;
      }
      v52 = __OFADD__((_DWORD)v50, (_DWORD)v51);
      if (((v51 | v50) & 0x80000000) != 0 || v52)
      {
        JSC::throwOutOfMemoryError(a1, &v103);
LABEL_93:
        v8 = 0;
LABEL_69:
        v64 = v99;
        v99 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
          {
            WTF::StringImpl::~StringImpl(v64, v40, v48, (uint64_t)v42, v43, v44, v45, v46);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v64 -= 2;
          }
        }
        goto LABEL_31;
      }
      if ((v48 & 1) == 0 && (unint64_t)(v50 + v51 + 20) < 0x20)
      {
        if (v48)
          v53 = *(_DWORD *)(v48 + 4);
        else
          v53 = 0;
        if (((v51 | v53) & 0x80000000) != 0 || __OFADD__(v53, (_DWORD)v51))
        {
          v102 = 0;
        }
        else
        {
          if (v48 && (*(_BYTE *)(v48 + 16) & 4) == 0)
            v54 = 0;
          else
            v54 = (*((unsigned __int8 *)v99 + 16) >> 2) & 1;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v53 + v51), v54, v48, (uint64_t)v99, (int **)&v102);
          if (v102)
          {
            v101 = v102;
            v102 = 0;
            v8 = JSC::JSString::create((uint64_t)v47, (JSC::VM *)&v101, v55, v56, v57, v58, v59, v60);
            v61 = v101;
            v101 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
              {
                WTF::StringImpl::~StringImpl(v61, v40, v48, (uint64_t)v42, v43, v44, v45, v46);
                WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
              }
              else
              {
                *(_DWORD *)v61 -= 2;
              }
            }
            goto LABEL_62;
          }
        }
        JSC::throwOutOfMemoryError(a1, &v103);
        v8 = 0;
LABEL_62:
        v62 = v102;
        v102 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, v40, v48, (uint64_t)v42, v43, v44, v45, v46);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
        goto LABEL_69;
      }
      v65 = (JSC::JSString *)JSC::jsString(v47, (JSC::VM *)&v99, (const WTF::String *)v48, (uint64_t)v99, v43, v44, v45, v46);
      v63 = JSC::JSRopeString::create(v47, a2, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      v63 = JSC::jsString(v47, (JSC::VM *)&v99, (const WTF::String *)v48, (uint64_t)v42, v43, v44, v45, v46);
    }
    v8 = v63;
    goto LABEL_69;
  }
  v28 = *(unsigned __int8 *)(v8 + 5);
  if (v28 > 0x16)
  {
LABEL_66:
    v37 = (uint64_t)JSC::jsAddSlowCase((JSC::VM **)a1, a2, (const WTF::String *)v8, v21, v22, v23, v24, v25, v26);
    goto LABEL_30;
  }
  if (v28 != 2)
    goto LABEL_40;
  v103 = (JSC *)*((_QWORD *)a1 + 7);
  v29 = *(_QWORD *)(a2 + 8);
  if ((v29 & 1) != 0)
    v30 = (int *)(a2 + 16);
  else
    v30 = (int *)(v29 + 4);
  v31 = *v30;
  if (v31)
  {
    v32 = *(_QWORD *)(v8 + 8);
    if ((v32 & 1) != 0)
      v33 = (int *)(v8 + 16);
    else
      v33 = (int *)(v32 + 4);
    v34 = *v33;
    if (v34)
    {
      v35 = v34 | v31;
      v36 = __OFADD__(v31, v34);
      if ((v35 & 0x80000000) == 0 && !v36)
      {
        v37 = JSC::JSRopeString::create(v27, a2, (JSC::JSString *)v8, v21, v22, v23, v24, v25);
LABEL_30:
        v8 = v37;
        goto LABEL_31;
      }
      JSC::throwOutOfMemoryError(a1, &v103);
      v8 = 0;
    }
    else
    {
      v8 = a2;
    }
  }
LABEL_31:
  if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v8 >> 49)
    {
      v38 = 27;
    }
    else if (v8 && (v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 3)
    {
      v38 = 32;
    }
    else
    {
      v38 = 4;
    }
    *v12 |= v38;
  }
  return v8;
}

_WORD *JSC::BinaryArithProfile::observeLHSAndRHS(_WORD *result, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  int v4;
  __int16 v5;
  int v6;
  int v7;

  v3 = (unsigned __int16)*result;
  v4 = (v3 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    v4 = (v3 >> 10) & 5 | 2;
  if (a2 >> 49)
    v5 = v4;
  else
    v5 = (*result >> 10) & 3 | 4;
  v6 = (v3 >> 7) & 3 | 4;
  v7 = (v3 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    v7 = (v3 >> 7) & 5 | 2;
  if (a3 >> 49)
    LOBYTE(v6) = v7;
  *result = v3 & 0xE07F | (v5 << 10) | (v6 << 7);
  return result;
}

unint64_t operationValueAddProfiledNoOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  int *v21;
  int v22;
  _BOOL4 v23;
  unint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  JSC::JSString *v61;
  JSC::JSString *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t SlowCase;
  WTF::StringImpl *v94;
  unint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  _QWORD var58[12];

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var58[11];
  v12 = *(_WORD **)a4;
  v13 = **(unsigned __int16 **)a4;
  v14 = a2 >> 49;
  v15 = (v13 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v15) = (**(_WORD **)a4 >> 10) & 5 | 2;
  if (!v14)
    LOWORD(v15) = (**(_WORD **)a4 >> 10) & 3 | 4;
  if (a3 >> 49)
  {
    v31 = (v13 >> 7) & 6 | 1;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      LOWORD(v31) = (**(_WORD **)a4 >> 7) & 5 | 2;
    *v12 = v13 & 0xE07F | ((_WORD)v15 << 10) | ((_WORD)v31 << 7);
    if (v14)
    {
      v32 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v32 = a2 - 0x2000000000000;
      v33 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = a3 - 0x2000000000000;
      v34 = v32 + v33;
      if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v35 = (int)v34;
        if (v34 == (double)(int)v35 && ((_DWORD)v35 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
          return v35 | 0xFFFE000000000000;
      }
      v27 = *(_QWORD *)&v34 + 0x2000000000000;
      goto LABEL_33;
    }
  }
  else
  {
    *v12 = v13 & 0x180 | v13 & 0xE07F | ((_WORD)v15 << 10) | 0x200;
  }
  v95 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    goto LABEL_82;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
LABEL_56:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v95, a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v94);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v36, v37, (uint64_t)v38, v39, v40, v41, v42))
    {
      goto LABEL_103;
    }
    v43 = (JSC *)*((_QWORD *)a1 + 7);
    var58[0] = v43;
    v44 = *(_QWORD *)(a2 + 8);
    v45 = (unsigned int *)(a2 + 16);
    if ((v44 & 1) == 0)
      v45 = (unsigned int *)(v44 + 4);
    v46 = *v45;
    if ((_DWORD)v46)
    {
      v38 = v94;
      if (!v94 || (v47 = *((unsigned int *)v94 + 1), !(_DWORD)v47))
      {
        v27 = a2;
        goto LABEL_86;
      }
      v48 = __OFADD__((_DWORD)v46, (_DWORD)v47);
      if (((v47 | v46) & 0x80000000) != 0 || v48)
      {
        JSC::throwOutOfMemoryError(a1, var58);
LABEL_103:
        v27 = 0;
LABEL_86:
        v60 = v94;
        v94 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, v36, v44, (uint64_t)v38, v39, v40, v41, v42);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        goto LABEL_33;
      }
      if ((v44 & 1) == 0 && (unint64_t)(v46 + v47 + 20) < 0x20)
      {
        if (v44)
          v49 = *(_DWORD *)(v44 + 4);
        else
          v49 = 0;
        if (((v49 | v47) & 0x80000000) != 0 || __OFADD__(v49, (_DWORD)v47))
        {
          v97 = 0;
        }
        else
        {
          if (v44 && (*(_BYTE *)(v44 + 16) & 4) == 0)
            v50 = 0;
          else
            v50 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v49 + v47), v50, v44, (uint64_t)v94, (int **)&v97);
          if (v97)
          {
            v96 = v97;
            v97 = 0;
            v27 = JSC::JSString::create((uint64_t)v43, (JSC::VM *)&v96, v51, v52, v53, v54, v55, v56);
            v57 = v96;
            v96 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
              {
                WTF::StringImpl::~StringImpl(v57, v36, v44, (uint64_t)v38, v39, v40, v41, v42);
                WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
              }
              else
              {
                *(_DWORD *)v57 -= 2;
              }
            }
            goto LABEL_78;
          }
        }
        JSC::throwOutOfMemoryError(a1, var58);
        v27 = 0;
LABEL_78:
        v58 = v97;
        v97 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, v36, v44, (uint64_t)v38, v39, v40, v41, v42);
            WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
        goto LABEL_86;
      }
      v61 = (JSC::JSString *)JSC::jsString(v43, (JSC::VM *)&v94, (const WTF::String *)v44, (uint64_t)v94, v39, v40, v41, v42);
      v59 = JSC::JSRopeString::create(v43, a2, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      v59 = JSC::jsString(v43, (JSC::VM *)&v94, (const WTF::String *)v44, (uint64_t)v38, v39, v40, v41, v42);
    }
    v27 = v59;
    goto LABEL_86;
  }
  v16 = *(unsigned __int8 *)(a3 + 5);
  if (v16 > 0x16)
  {
LABEL_82:
    v27 = (unint64_t)JSC::jsAddSlowCase((JSC::VM **)a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_33;
  }
  if (v16 != 2)
    goto LABEL_56;
  var58[0] = v11;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = (int *)(a2 + 16);
  if ((v17 & 1) == 0)
    v18 = (int *)(v17 + 4);
  v19 = *v18;
  if (*v18)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v21 = (int *)(a3 + 16);
    if ((v20 & 1) == 0)
      v21 = (int *)(v20 + 4);
    v22 = *v21;
    if (*v21)
    {
      v23 = __OFADD__(v19, v22);
      if (((v22 | v19) & 0x80000000) == 0 && !v23)
      {
        v24 = (unint64_t *)(v11 + 39432);
        if ((v17 & 1) != 0)
          v17 = (v17 >> 2) & 1;
        else
          LODWORD(v17) = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
        if ((v20 & 1) != 0)
          v20 = (v20 >> 2) & 1;
        else
          LODWORD(v20) = (*(unsigned __int8 *)(v20 + 16) >> 2) & 1;
        v25 = v22 + v19;
        v26 = v17 & v20;
        v27 = *v24;
        if (*v24 >= *(_QWORD *)(v11 + 39440))
        {
          v27 = *(_QWORD *)(v11 + 39448);
          if ((v27 & 1) != 0)
          {
            v92 = a3;
            JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, 0, 0);
            a3 = v92;
            v27 = SlowCase;
            goto LABEL_29;
          }
          v83 = *(_QWORD *)(v27 + 8) ^ *(_QWORD *)(v11 + 39456);
          *(_QWORD *)(v11 + 39440) = v27 + HIDWORD(v83);
          *(_QWORD *)(v11 + 39448) = v27 + (int)v83;
        }
        *v24 = v27 + 32;
LABEL_29:
        *(_DWORD *)v27 = *(_QWORD *)(v11 + 41512) >> 4;
        *(_DWORD *)(v27 + 4) = 17302016;
        v28 = 5;
        if (!v26)
          v28 = 1;
        *(_QWORD *)(v27 + 8) = v28 | a2;
        *(_DWORD *)(v27 + 16) = v25;
        *(_DWORD *)(v27 + 20) = a3;
        *(_WORD *)(v27 + 24) = WORD2(a3);
        *(_WORD *)(v27 + 26) = 0;
        *(_DWORD *)(v27 + 28) = 0;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        goto LABEL_33;
      }
      JSC::throwOutOfMemoryError(a1, var58);
      v27 = 0;
    }
    else
    {
      v27 = a2;
    }
  }
  else
  {
    v27 = a3;
  }
LABEL_33:
  if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v27 >> 49)
    {
      v29 = 27;
    }
    else if (v27 && (v27 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v27 + 5) == 3)
    {
      v29 = 32;
    }
    else
    {
      v29 = 4;
    }
    *v12 |= v29;
  }
  return v27;
}

uint64_t JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  pthread_key_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  pthread_key_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  WTF **p_start;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  WTF *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  JSC::ExecutableMemoryHandle *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  uint64_t result;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  int v115;
  int v116;
  BOOL v117;
  char v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  unint64_t v153;
  pthread_key_t *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  unsigned int v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int i;
  unsigned int v174;
  char v175;
  unsigned int v176;
  int *v177;
  int *v178;
  int v179;
  char *v180;
  int v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  unint64_t v188;
  pthread_key_t *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  unsigned int v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  __int128 *v209;
  uint64_t v210;
  size_t v211;
  unsigned int *v212;
  WTF **v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  JSC::ExecutableMemoryHandle *v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  WTF *v228;
  WTF *v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  BOOL v240;
  char v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  _BOOL4 v276;
  _BOOL4 v277;
  WTF ***v278;
  JSC::ExecutableMemoryHandle *v279;
  int v280;
  int v281;
  char v282;
  __int16 v283;
  char v284;
  WTF *v285;
  JSC::ExecutableMemoryHandle *v286;
  _BYTE v287[24];
  WTF *v288;
  uint64_t v289;
  int v290;
  WTF *v291;
  uint64_t v292;
  _BYTE v293[32];
  uint64_t *v294[2];
  int v295[2];
  WTF **v296;
  JSC::ExecutableMemoryHandle *v297;
  char v298;
  WTF **v299;
  size_t len;
  uint64_t v301;
  WTF *v302;
  _BYTE v303[128];
  unsigned int v304;
  char v305;
  int v306;
  unsigned int v307;
  __int128 start;
  __int128 v309;
  uint64_t v310;
  _BYTE v311[24];
  char v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  WTF *v316;
  _BYTE v317[128];
  unsigned int v318;
  int v319;
  int v320;
  char v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  _BYTE *v325;
  char v326;
  uint64_t v327;
  int v328;
  _BYTE *v329;
  char v330;
  uint64_t v331;
  int v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;

  v9 = a2;
  v336 = *MEMORY[0x1E0C80C00];
  v294[1] = (uint64_t *)a1;
  *(_QWORD *)v295 = a2;
  v294[0] = (uint64_t *)v295;
  v11 = *(_QWORD *)(a2 + 120);
  if (v11)
    LOBYTE(v11) = *(_BYTE *)(v11 + 12);
  v12 = v11 & 0xFE;
  if (*(_BYTE *)(a1 + 56))
  {
    v311[0] = 0;
    v312 = 0;
    v313 = 0;
    v314 = 0;
    v315 = 0x8000000080000000;
    v316 = (WTF *)v317;
    v318 = 128;
    v13 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v13 != -1)
    {
      v299 = &v285;
      v288 = (WTF *)&v299;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v288, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v14 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v22 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v22)
    {
      v22 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v22, v14);
    }
    v23 = *(WTF **)v22;
    if (*(_QWORD *)v22 != v22 + 8)
    {
      v24 = *(_DWORD *)(v22 + 136);
      if (v318 < v24)
      {
        if (v316 && v316 != (WTF *)v317)
        {
          WTF::fastFree((unint64_t)v316, v15, v16, v17, v18, v19, v20, v21);
          v23 = *(WTF **)v22;
          v24 = *(_DWORD *)(v22 + 136);
        }
        v316 = v23;
        v318 = v24;
        *(_QWORD *)v22 = v22 + 8;
        *(_DWORD *)(v22 + 136) = 128;
      }
    }
    v321 = 1;
    v319 = 0;
    v320 = 0;
    v324 = 0u;
    v323 = 0u;
    v322 = 0u;
    v325 = v311;
    v326 = 16;
    v327 = 0;
    v328 = 0x10000;
    v329 = v311;
    v330 = 17;
    v331 = 0;
    v332 = 0x20000;
    v333 = 0;
    v334 = v9;
    v25 = *(_QWORD *)(v9 + 192);
    if (!v25)
      v25 = v9;
    v26 = *(_QWORD *)(v25 + 120);
    if (v26)
    {
      v27 = *(unsigned __int8 *)(v26 + 12);
      if ((v27 & 0xFE) != 2)
      {
        if (v27)
        {
          result = 1878;
          __break(0xC471u);
          return result;
        }
      }
    }
    v335 = v25;
    v288 = (WTF *)-1;
    v289 = -1;
    v290 = 0;
    v291 = (WTF *)v293;
    v292 = 2;
    JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateInline(a1, (uint64_t)v311, (uint64_t)&v288, v12 != 4, v18, v19, v20, v21);
    *(_BYTE *)(a1 + 56) = 0;
    if (v35)
    {
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26432>((uint64_t)v311, *(_QWORD *)(a1 + 32), v29, v30, v31, v32, v33, v34);
      if (HIDWORD(v292))
      {
        v41 = *(_QWORD *)(a1 + 48);
        v42 = (unsigned int *)v291;
        v43 = 12 * HIDWORD(v292);
        do
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v42, v41, (uint64_t)v311, v36, v37, v38, v39, v40);
          v42 += 3;
          v43 -= 12;
        }
        while (v43);
      }
      v299 = 0;
      len = 0;
      v301 = *(_QWORD *)v295;
      v302 = (WTF *)v303;
      v304 = 128;
      v44 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
      if (v44 != -1)
      {
        v285 = (WTF *)&v278;
        v296 = &v285;
        std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v296, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
      }
      v45 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
      v53 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
      if (!v53)
      {
        v53 = WTF::fastMalloc((WTF *)0x98);
        WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v53, v45);
      }
      v54 = *(WTF **)v53;
      if (*(_QWORD *)v53 != v53 + 8)
      {
        v55 = *(_DWORD *)(v53 + 136);
        if (v304 < v55)
        {
          if (v302 && v302 != (WTF *)v303)
          {
            WTF::fastFree((unint64_t)v302, v46, v47, v48, v49, v50, v51, v52);
            v54 = *(WTF **)v53;
            v55 = *(_DWORD *)(v53 + 136);
          }
          v302 = v54;
          v304 = v55;
          *(_QWORD *)v53 = v53 + 8;
          *(_DWORD *)(v53 + 136) = 128;
        }
      }
      v305 = 1;
      v306 = 0;
      v307 = 6;
      start = 0u;
      v309 = 0u;
      v310 = 0;
      JSC::LinkBuffer::linkCode((uint64_t)&v299, (uint64_t)v311, 0, v48, v49, v50, v51, v52);
      if ((_BYTE)v306)
      {
        v276 = *(_QWORD *)v295
            && (v63 = *(_QWORD *)(*(_QWORD *)v295 + 120)) != 0
            && ((*(_BYTE *)(v63 + 12) & 0xFE) == 4 ? (v64 = BYTE1(dword_1ECF4C28A) == 0) : (v64 = 1), !v64)
            || HIBYTE(word_1ECF4C286) != 0;
        if (!v276 && !byte_1ECF4C288 && !byte_1ECF4C289)
        {
          if (DWORD1(v309))
          {
            v107 = (uint64_t *)*((_QWORD *)&start + 1);
            v108 = 8 * DWORD1(v309);
            do
            {
              v109 = *v107++;
              (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v109 + 16))(v109, &v299);
              v108 -= 8;
            }
            while (v108);
          }
          p_start = (WTF **)&start;
          if (HIDWORD(v310))
          {
            v110 = (uint64_t *)*((_QWORD *)&v309 + 1);
            v111 = 8 * HIDWORD(v310);
            do
            {
              v112 = *v110++;
              (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v112 + 16))(v112, &v299);
              v111 -= 8;
            }
            while (v111);
          }
          v66 = v307;
          v67 = len;
          *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v307 / 2] += len;
          ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v66);
          sys_icache_invalidate((void *)start, v67);
          v75 = (unsigned int *)v299;
          if (v299)
          {
            do
              v274 = __ldaxr(v75);
            while (__stlxr(v274 + 1, v75));
            p_start = (WTF **)(v75 + 2);
          }
          v76 = *p_start;
          v285 = v76;
          v286 = (JSC::ExecutableMemoryHandle *)v75;
          if (byte_1ECF4C2A2)
            JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v299, (uint64_t)&v285, 0, 0);
          v296 = (WTF **)v76;
          v297 = 0;
          if (v75)
          {
            do
              v77 = __ldaxr(v75);
            while (__stlxr(v77 + 1, v75));
            v78 = (unsigned int *)v297;
            v297 = (JSC::ExecutableMemoryHandle *)v75;
            if (v78)
            {
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                atomic_store(1u, v78);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
                WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
              }
            }
            v81 = (unsigned int *)v286;
            v286 = 0;
            if (v81)
            {
              do
              {
                v82 = __ldaxr(v81);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, v81));
              if (!v83)
              {
                atomic_store(1u, v81);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v81, v68, v69, v70, v71, v72, v73, v74);
                WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
              }
            }
          }
          goto LABEL_59;
        }
        if (*(_QWORD *)v295)
        {
          v114 = *(_QWORD *)(*(_QWORD *)v295 + 120);
          v115 = HIBYTE(word_1ECF4C286);
          if (v114)
          {
            v116 = *(_BYTE *)(v114 + 12) & 0xFE;
            if (BYTE1(dword_1ECF4C28A))
              v117 = v116 == 4;
            else
              v117 = 0;
            v118 = 1;
            if (v117 || HIBYTE(word_1ECF4C286))
              goto LABEL_88;
            goto LABEL_207;
          }
        }
        else
        {
          v115 = HIBYTE(word_1ECF4C286);
        }
        if (v115)
        {
          v118 = 1;
LABEL_88:
          JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v299, v118, 0, 0, "JITMathIC: generating out of line fast IC snippet", &v296);
LABEL_59:
          v84 = v297;
          v297 = 0;
          v85 = *(unsigned int **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v296;
          *(_QWORD *)(a1 + 16) = v84;
          if (v85)
          {
            do
            {
              v86 = __ldaxr(v85);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v85));
            if (!v87)
            {
              atomic_store(1u, v85);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v85, v68, v69, v70, v71, v72, v73, v74);
              WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
            }
            v88 = (unsigned int *)v297;
            v297 = 0;
            if (v88)
            {
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                atomic_store(1u, v88);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v88, v68, v69, v70, v71, v72, v73, v74);
                WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
              }
            }
          }
          if (!v293[24])
            JSC::ftlThunkAwareRepatchCall(*(uint64_t *)v295, *(_QWORD *)(a1 + 40), a3, v70, v71, v72, v73, v74);
          JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v294);
          JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v299, v91, v92, v93, v94, v95, v96, v97);
          v105 = v291;
          if (v293 != (_BYTE *)v291)
          {
            if (v291)
            {
              v291 = 0;
              LODWORD(v292) = 0;
              WTF::fastFree((unint64_t)v105, v98, v99, v100, v101, v102, v103, v104);
            }
          }
          return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v311, v98, v99, v100, v101, v102, v103, v104);
        }
LABEL_207:
        v118 = byte_1ECF4C288 != 0;
        goto LABEL_88;
      }
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v299, v56, v57, v58, v59, v60, v61, v62);
    }
    v113 = a3;
    v151 = v291;
    if (v293 != (_BYTE *)v291 && v291)
    {
      v291 = 0;
      LODWORD(v292) = 0;
      WTF::fastFree((unint64_t)v151, v28, v29, v30, v31, v32, v33, v34);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v311, v28, v29, v30, v31, v32, v33, v34);
    v9 = *(_QWORD *)v295;
  }
  else
  {
    v113 = a3;
  }
  JSC::ftlThunkAwareRepatchCall(v9, *(_QWORD *)(a1 + 40), v113, a4, a5, a6, a7, a8);
  v152 = *(_QWORD *)v295;
  v311[0] = 0;
  v312 = 0;
  v313 = 0;
  v314 = 0;
  v315 = 0x8000000080000000;
  v316 = (WTF *)v317;
  v318 = 128;
  v153 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v153 != -1)
  {
    v299 = &v285;
    v288 = (WTF *)&v299;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v288, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v154 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v162 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v162)
  {
    v162 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v162, v154);
  }
  v163 = *(WTF **)v162;
  if (*(_QWORD *)v162 != v162 + 8)
  {
    v164 = *(_DWORD *)(v162 + 136);
    if (v318 < v164)
    {
      if (v316 && v316 != (WTF *)v317)
      {
        WTF::fastFree((unint64_t)v316, v155, v156, v157, v158, v159, v160, v161);
        v163 = *(WTF **)v162;
        v164 = *(_DWORD *)(v162 + 136);
      }
      v316 = v163;
      v318 = v164;
      *(_QWORD *)v162 = v162 + 8;
      *(_DWORD *)(v162 + 136) = 128;
    }
  }
  v165 = 0;
  v321 = 1;
  v319 = 0;
  v320 = 0;
  v322 = 0u;
  v323 = 0u;
  v324 = 0u;
  v326 = 16;
  v328 = 0x10000;
  v325 = v311;
  v327 = 0;
  v329 = v311;
  v330 = 17;
  v331 = 0;
  v332 = 0x20000;
  v333 = 0;
  v334 = v152;
  if (v152)
    v165 = JSC::CodeBlock::baselineAlternative(v152);
  v335 = v165;
  v288 = (WTF *)&v290;
  v289 = 2;
  v285 = (WTF *)v287;
  v286 = (JSC::ExecutableMemoryHandle *)2;
  if (JSC::JITAddGenerator::generateFastPath((_BYTE *)(a1 + 57), (uint64_t)v311, (uint64_t)&v288, (uint64_t)&v285, *(_QWORD *)a1, v12 != 4, v160, v161))
  {
    for (i = v319; i < SHIDWORD(v315); v319 = i)
    {
      if (i + 4 > v318)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v316, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
        i = v319;
      }
      *(_DWORD *)((char *)v316 + i) = -721215457;
      i = v319 + 4;
    }
    v174 = i;
    if (i + 4 > v318)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v316, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
      v174 = v319;
    }
    *(_DWORD *)((char *)v316 + v174) = 335544320;
    v319 += 4;
    if (v333)
      v175 = 69;
    else
      v175 = 65;
    v280 = i;
    v281 = 0;
    v282 = v175;
    v283 = 15;
    v284 = -1;
    v176 = HIDWORD(v289);
    if (i != -1)
    {
      if (HIDWORD(v289) == (_DWORD)v289)
      {
        v177 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v280, v168, v169, v170, v171, v172);
        v179 = *v177;
        v178 = v177 + 1;
        v180 = (char *)v288 + 12 * HIDWORD(v289);
        *(_DWORD *)v180 = v179;
      }
      else
      {
        v178 = &v281;
        v180 = (char *)v288 + 12 * HIDWORD(v289);
        *(_DWORD *)v180 = i;
      }
      *(_QWORD *)(v180 + 4) = *(_QWORD *)v178;
      v176 = ++HIDWORD(v289);
    }
    if (v176)
    {
      v182 = *(_QWORD *)(a1 + 32);
      v183 = (unsigned int *)v288;
      v184 = 12 * v176;
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v183, v182, (uint64_t)v311, v168, v169, v170, v171, v172);
        v183 += 3;
        v184 -= 12;
      }
      while (v184);
    }
    if (HIDWORD(v286))
    {
      v185 = *(_QWORD *)(a1 + 48);
      v186 = (unsigned int *)v285;
      v187 = 12 * HIDWORD(v286);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v186, v185, (uint64_t)v311, v168, v169, v170, v171, v172);
        v186 += 3;
        v187 -= 12;
      }
      while (v187);
    }
    v299 = 0;
    len = 0;
    v301 = *(_QWORD *)v295;
    v302 = (WTF *)v303;
    v304 = 128;
    v188 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v188 != -1)
    {
      v296 = (WTF **)&v298;
      v278 = &v296;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v278, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v189 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v197 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v197)
    {
      v197 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v197, v189);
    }
    v198 = *(WTF **)v197;
    if (*(_QWORD *)v197 != v197 + 8)
    {
      v199 = *(_DWORD *)(v197 + 136);
      if (v304 < v199)
      {
        if (v302 && v302 != (WTF *)v303)
        {
          WTF::fastFree((unint64_t)v302, v190, v191, v192, v193, v194, v195, v196);
          v198 = *(WTF **)v197;
          v199 = *(_DWORD *)(v197 + 136);
        }
        v302 = v198;
        v304 = v199;
        *(_QWORD *)v197 = v197 + 8;
        *(_DWORD *)(v197 + 136) = 128;
      }
    }
    v181 = 1;
    v305 = 1;
    v306 = 0;
    v307 = 6;
    start = 0u;
    v309 = 0u;
    v310 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v299, (uint64_t)v311, 0, v192, v193, v194, v195, v196);
    if (!(_BYTE)v306)
      goto LABEL_171;
    v277 = *(_QWORD *)v295
        && (v207 = *(_QWORD *)(*(_QWORD *)v295 + 120)) != 0
        && ((*(_BYTE *)(v207 + 12) & 0xFE) == 4 ? (v208 = BYTE1(dword_1ECF4C28A) == 0) : (v208 = 1), !v208)
        || HIBYTE(word_1ECF4C286) != 0;
    if (!v277 && !byte_1ECF4C288 && !byte_1ECF4C289)
    {
      if (DWORD1(v309))
      {
        v231 = (uint64_t *)*((_QWORD *)&start + 1);
        v232 = 8 * DWORD1(v309);
        do
        {
          v233 = *v231++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v233 + 16))(v233, &v299);
          v232 -= 8;
        }
        while (v232);
      }
      v209 = &start;
      if (HIDWORD(v310))
      {
        v234 = (uint64_t *)*((_QWORD *)&v309 + 1);
        v235 = 8 * HIDWORD(v310);
        do
        {
          v236 = *v234++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v236 + 16))(v236, &v299);
          v235 -= 8;
        }
        while (v235);
      }
      v210 = v307;
      v211 = len;
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v307 / 2] += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v210);
      sys_icache_invalidate((void *)start, v211);
      v212 = (unsigned int *)v299;
      if (v299)
      {
        do
          v275 = __ldaxr(v212);
        while (__stlxr(v275 + 1, v212));
        v209 = (__int128 *)(v212 + 2);
      }
      v213 = *(WTF ***)v209;
      v296 = v213;
      v297 = (JSC::ExecutableMemoryHandle *)v212;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v299, (uint64_t)&v296, 0, 0);
      v278 = (WTF ***)v213;
      v279 = 0;
      if (v212)
      {
        do
          v214 = __ldaxr(v212);
        while (__stlxr(v214 + 1, v212));
        v215 = (unsigned int *)v279;
        v279 = (JSC::ExecutableMemoryHandle *)v212;
        if (v215)
        {
          do
          {
            v216 = __ldaxr(v215);
            v217 = v216 - 1;
          }
          while (__stlxr(v217, v215));
          if (!v217)
          {
            atomic_store(1u, v215);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v215, (uint64_t)v200, v201, v202, v203, v204, v205, v206);
            WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
          }
        }
        v218 = (unsigned int *)v297;
        v297 = 0;
        if (v218)
        {
          do
          {
            v219 = __ldaxr(v218);
            v220 = v219 - 1;
          }
          while (__stlxr(v220, v218));
          if (!v220)
          {
            atomic_store(1u, v218);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v218, (uint64_t)v200, v201, v202, v203, v204, v205, v206);
            WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
          }
        }
      }
      goto LABEL_162;
    }
    if (*(_QWORD *)v295)
    {
      v237 = *(_QWORD *)(*(_QWORD *)v295 + 120);
      v238 = HIBYTE(word_1ECF4C286);
      if (v237)
      {
        v239 = *(_BYTE *)(v237 + 12) & 0xFE;
        if (BYTE1(dword_1ECF4C28A))
          v240 = v239 == 4;
        else
          v240 = 0;
        v241 = 1;
        if (v240 || HIBYTE(word_1ECF4C286))
          goto LABEL_195;
        goto LABEL_211;
      }
    }
    else
    {
      v238 = HIBYTE(word_1ECF4C286);
    }
    if (v238)
    {
      v241 = 1;
LABEL_195:
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v299, v241, 0, 0, "JITMathIC: generating out of line IC snippet", &v278);
LABEL_162:
      v221 = v279;
      v279 = 0;
      v222 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v278;
      *(_QWORD *)(a1 + 16) = v221;
      if (v222)
      {
        do
        {
          v223 = __ldaxr(v222);
          v224 = v223 - 1;
        }
        while (__stlxr(v224, v222));
        if (!v224)
        {
          atomic_store(1u, v222);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v222, (uint64_t)v200, v201, v202, v203, v204, v205, v206);
          WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
        }
        v225 = (unsigned int *)v279;
        v279 = 0;
        if (v225)
        {
          do
          {
            v226 = __ldaxr(v225);
            v227 = v226 - 1;
          }
          while (__stlxr(v227, v225));
          if (!v227)
          {
            atomic_store(1u, v225);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v225, (uint64_t)v200, v201, v202, v203, v204, v205, v206);
            WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
          }
        }
      }
      v181 = 0;
LABEL_171:
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v299, v200, v201, v202, v203, v204, v205, v206);
      goto LABEL_172;
    }
LABEL_211:
    v241 = byte_1ECF4C288 != 0;
    goto LABEL_195;
  }
  v181 = 1;
LABEL_172:
  v228 = v285;
  if (v287 != (_BYTE *)v285 && v285 != 0)
  {
    v285 = 0;
    LODWORD(v286) = 0;
    WTF::fastFree((unint64_t)v228, v166, v167, v168, v169, v170, v171, v172);
  }
  v230 = v288;
  if (&v290 != (int *)v288 && v288)
  {
    v288 = 0;
    LODWORD(v289) = 0;
    WTF::fastFree((unint64_t)v230, v166, v167, v168, v169, v170, v171, v172);
  }
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v311, v166, v167, v168, v169, v170, v171, v172);
  if (!v181)
    return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v294);
  return result;
}

JSC::JSBigInt *operationValueAddOptimize(JSC::VM **a1, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  _WORD *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  JSC::JSGlobalObject *v19;
  const WTF::String *v20;
  JSC::JSString *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  JSC::JSGlobalObject *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  JSC::JSString *v62;
  JSC::JSString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::Exception *v103;
  int v104;
  unint64_t OutOfMemoryError;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::Exception *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::Exception *v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t vars0;

  v8 = a3;
  v11 = vars0;
  *((_QWORD *)a1[7] + 5) = vars0;
  v12 = (_WORD *)*a4;
  v13 = a2 >> 49;
  if (*a4)
  {
    v14 = (unsigned __int16)*v12;
    v15 = (v14 >> 10) & 3 | 4;
    v16 = (v14 >> 10) & 6 | 1;
    if (a2 < 0xFFFE000000000000)
      LOWORD(v16) = (*v12 >> 10) & 5 | 2;
    if (v13)
      LOWORD(v15) = v16;
    v17 = (v14 >> 7) & 3 | 4;
    v18 = (v14 >> 7) & 6 | 1;
    if (a3 < 0xFFFE000000000000)
      LOBYTE(v18) = (v14 >> 7) & 5 | 2;
    if (a3 >> 49)
      LOBYTE(v17) = v18;
    *v12 = v14 & 0xE07F | ((_WORD)v15 << 10) | (v17 << 7);
  }
  JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v11 + 16), (int *)operationValueAddNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  if (v13 && v8 >> 49)
  {
    v85 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v85 = a2 - 0x2000000000000;
    v86 = (double)(int)v8;
    if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v86 = v8 - 0x2000000000000;
    v87 = v85 + v86;
    if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v88 = (int)v87, v87 == (double)(int)v88)
      && ((_DWORD)v88 || (*(_QWORD *)&v87 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v88 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v87 + 0x2000000000000);
    }
  }
  v120 = v8;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)v8, v21, v22, v23, v24, v25, v26);
  v27 = (uint64_t)a1[7];
  if ((v8 & 0xFFFE000000000002) != 0)
  {
LABEL_33:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v120, (JSC::JSGlobalObject *)a1, v20, (uint64_t)v21, v22, v23, v24, v25, (int **)&v119);
    if (*(_DWORD *)(v27 + 80))
    {
      v104 = *(_DWORD *)(v27 + 80);
      if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v40, (uint64_t)v41, v42, v43, v44, v45);
      if (*(_QWORD *)(v27 + 16))
        goto LABEL_90;
    }
    v46 = a1[7];
    v40 = *(_QWORD *)(a2 + 8);
    v47 = (unsigned int *)(a2 + 16);
    if ((v40 & 1) == 0)
      v47 = (unsigned int *)(v40 + 4);
    v48 = *v47;
    if ((_DWORD)v48)
    {
      v41 = v119;
      if (!v119 || (v49 = *((unsigned int *)v119 + 1), !(_DWORD)v49))
      {
        v8 = a2;
        goto LABEL_63;
      }
      v50 = __OFADD__((_DWORD)v48, (_DWORD)v49);
      if (((v49 | v48) & 0x80000000) != 0 || v50)
      {
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v39);
        v111 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v111 = (JSC::Exception *)JSC::Exception::create((uint64_t)v46, (JSC::VM *)OutOfMemoryError, 0, v106, v107, v108, v109, v110);
        }
        JSC::VM::throwException(v46, (JSC::JSGlobalObject *)a1, v111);
LABEL_90:
        v8 = 0;
LABEL_63:
        v68 = v119;
        v119 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
          {
            WTF::StringImpl::~StringImpl(v68, v39, v40, (uint64_t)v41, v42, v43, v44, v45);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v68 -= 2;
          }
        }
        return (JSC::JSBigInt *)v8;
      }
      if ((v40 & 1) == 0 && (unint64_t)(v48 + v49 + 20) < 0x20)
      {
        if (v40)
          v51 = *(_DWORD *)(v40 + 4);
        else
          v51 = 0;
        if (((v51 | v49) & 0x80000000) != 0 || __OFADD__(v51, (_DWORD)v49))
        {
          v122 = 0;
        }
        else
        {
          if (v40 && (*(_BYTE *)(v40 + 16) & 4) == 0)
            v52 = 0;
          else
            v52 = (*((unsigned __int8 *)v119 + 16) >> 2) & 1;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v51 + v49), v52, v40, (uint64_t)v119, (int **)&v122);
          if (v122)
          {
            v121 = v122;
            v122 = 0;
            v8 = JSC::JSString::create((uint64_t)v46, (JSC::VM *)&v121, v53, v54, v55, v56, v57, v58);
            v59 = v121;
            v121 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
              {
                WTF::StringImpl::~StringImpl(v59, v39, v40, (uint64_t)v41, v42, v43, v44, v45);
                WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
              }
              else
              {
                *(_DWORD *)v59 -= 2;
              }
            }
LABEL_55:
            v60 = v122;
            v122 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2)
              {
                WTF::StringImpl::~StringImpl(v60, v39, v40, (uint64_t)v41, v42, v43, v44, v45);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v60 -= 2;
              }
            }
            goto LABEL_63;
          }
        }
        v97 = JSC::createOutOfMemoryError((unint64_t)a1, v39);
        v103 = (JSC::Exception *)v97;
        if ((v97 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x4C)))
        {
          v103 = (JSC::Exception *)JSC::Exception::create((uint64_t)v46, (JSC::VM *)v97, 0, v98, v99, v100, v101, v102);
        }
        JSC::VM::throwException(v46, (JSC::JSGlobalObject *)a1, v103);
        v8 = 0;
        goto LABEL_55;
      }
      v62 = (JSC::JSString *)JSC::jsString(a1[7], (JSC::VM *)&v119, (const WTF::String *)v40, (uint64_t)v119, v42, v43, v44, v45);
      v61 = JSC::JSRopeString::create(v46, a2, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      v61 = JSC::jsString(a1[7], (JSC::VM *)&v119, (const WTF::String *)v40, (uint64_t)v41, v42, v43, v44, v45);
    }
    v8 = v61;
    goto LABEL_63;
  }
  v28 = *(unsigned __int8 *)(v8 + 5);
  if (v28 > 0x16)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)v8, v21, v22, v23, v24, v25, v26);
  if (v28 != 2)
    goto LABEL_33;
  v29 = *(_QWORD *)(a2 + 8);
  if ((v29 & 1) != 0)
    v30 = (int *)(a2 + 16);
  else
    v30 = (int *)(v29 + 4);
  v31 = *v30;
  if (!v31)
    return (JSC::JSBigInt *)v8;
  v32 = *(_QWORD *)(v8 + 8);
  if ((v32 & 1) != 0)
    v33 = (int *)(v8 + 16);
  else
    v33 = (int *)(v32 + 4);
  v34 = *v33;
  if (!v34)
    return (JSC::JSBigInt *)a2;
  v35 = v34 | v31;
  v36 = __OFADD__(v31, v34);
  if ((v35 & 0x80000000) == 0 && !v36)
    return (JSC::JSBigInt *)JSC::JSRopeString::create(a1[7], a2, (JSC::JSString *)v8, v21, v22, v23, v24, v25);
  v112 = JSC::createOutOfMemoryError((unint64_t)a1, v19);
  v118 = (JSC::Exception *)v112;
  if ((v112 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C)))
  {
    v118 = (JSC::Exception *)JSC::Exception::create(v27, (JSC::VM *)v112, 0, v113, v114, v115, v116, v117);
  }
  JSC::VM::throwException((JSC::VM *)v27, (JSC::JSGlobalObject *)a1, v118);
  return 0;
}

JSC::JSBigInt *operationValueAddNoOptimize(JSC::VM **a1, unint64_t a2, unint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSString *v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  _BOOL4 v21;
  JSC::JSGlobalObject *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  JSC::JSString *v47;
  JSC::JSString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::Exception *v88;
  int v89;
  unint64_t OutOfMemoryError;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::Exception *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::Exception *v103;
  WTF::StringImpl *v104;
  JSC::JSString *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *var38[8];

  v9 = (JSC::JSString *)a3;
  v12 = (uint64_t)a1[7];
  *(WTF::StringImpl **)(v12 + 40) = var38[7];
  if (a2 >> 49 && a3 >> 49)
  {
    v70 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v70 = a2 - 0x2000000000000;
    v71 = (double)(int)a3;
    if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v71 = a3 - 0x2000000000000;
    v72 = v70 + v71;
    if ((*(_QWORD *)&v72 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v73 = (int)v72, v72 == (double)(int)v73)
      && ((_DWORD)v73 || (*(_QWORD *)&v72 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v73 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v72 + 0x2000000000000);
    }
  }
  v105 = (JSC::JSString *)a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if ((a3 & 0xFFFE000000000002) != 0)
  {
LABEL_23:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v105, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v104);
    if (*(_DWORD *)(v12 + 80))
    {
      v89 = *(_DWORD *)(v12 + 80);
      if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v25, (uint64_t)v26, v27, v28, v29, v30);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_80;
    }
    v31 = a1[7];
    v25 = *(_QWORD *)(a2 + 8);
    v32 = (unsigned int *)(a2 + 16);
    if ((v25 & 1) == 0)
      v32 = (unsigned int *)(v25 + 4);
    v33 = *v32;
    if ((_DWORD)v33)
    {
      v26 = v104;
      if (!v104 || (v34 = *((unsigned int *)v104 + 1), !(_DWORD)v34))
      {
        v9 = (JSC::JSString *)a2;
        goto LABEL_53;
      }
      v35 = __OFADD__((_DWORD)v33, (_DWORD)v34);
      if (((v34 | v33) & 0x80000000) != 0 || v35)
      {
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v24);
        v96 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v96 = (JSC::Exception *)JSC::Exception::create((uint64_t)v31, (JSC::VM *)OutOfMemoryError, 0, v91, v92, v93, v94, v95);
        }
        JSC::VM::throwException(v31, (JSC::JSGlobalObject *)a1, v96);
LABEL_80:
        v9 = 0;
LABEL_53:
        v53 = v104;
        v104 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, v24, v25, (uint64_t)v26, v27, v28, v29, v30);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
        }
        return v9;
      }
      if ((v25 & 1) == 0 && (unint64_t)(v33 + v34 + 20) < 0x20)
      {
        if (v25)
          v36 = *(_DWORD *)(v25 + 4);
        else
          v36 = 0;
        if (((v36 | v34) & 0x80000000) != 0 || __OFADD__(v36, (_DWORD)v34))
        {
          var38[0] = 0;
        }
        else
        {
          if (v25 && (*(_BYTE *)(v25 + 16) & 4) == 0)
            v37 = 0;
          else
            v37 = (*((unsigned __int8 *)v104 + 16) >> 2) & 1;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v36 + v34), v37, v25, (uint64_t)v104, (int **)var38);
          if (var38[0])
          {
            v106 = var38[0];
            var38[0] = 0;
            v9 = (JSC::JSString *)JSC::JSString::create((uint64_t)v31, (JSC::VM *)&v106, v38, v39, v40, v41, v42, v43);
            v44 = v106;
            v106 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, v24, v25, (uint64_t)v26, v27, v28, v29, v30);
                WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
LABEL_45:
            v45 = var38[0];
            var38[0] = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
              {
                WTF::StringImpl::~StringImpl(v45, v24, v25, (uint64_t)v26, v27, v28, v29, v30);
                WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              }
              else
              {
                *(_DWORD *)v45 -= 2;
              }
            }
            goto LABEL_53;
          }
        }
        v82 = JSC::createOutOfMemoryError((unint64_t)a1, v24);
        v88 = (JSC::Exception *)v82;
        if ((v82 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C)))
        {
          v88 = (JSC::Exception *)JSC::Exception::create((uint64_t)v31, (JSC::VM *)v82, 0, v83, v84, v85, v86, v87);
        }
        JSC::VM::throwException(v31, (JSC::JSGlobalObject *)a1, v88);
        v9 = 0;
        goto LABEL_45;
      }
      v47 = (JSC::JSString *)JSC::jsString(a1[7], (JSC::VM *)&v104, (const WTF::String *)v25, (uint64_t)v104, v27, v28, v29, v30);
      v46 = JSC::JSRopeString::create(v31, a2, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      v46 = JSC::jsString(a1[7], (JSC::VM *)&v104, (const WTF::String *)v25, (uint64_t)v26, v27, v28, v29, v30);
    }
    v9 = (JSC::JSString *)v46;
    goto LABEL_53;
  }
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 > 0x16)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2)
    goto LABEL_23;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
    v15 = (int *)(a2 + 16);
  else
    v15 = (int *)(v14 + 4);
  v16 = *v15;
  if (!v16)
    return v9;
  v17 = *(_QWORD *)(a3 + 8);
  if ((v17 & 1) != 0)
    v18 = (int *)(a3 + 16);
  else
    v18 = (int *)(v17 + 4);
  v19 = *v18;
  if (!v19)
    return (JSC::JSBigInt *)a2;
  v20 = v19 | v16;
  v21 = __OFADD__(v16, v19);
  if ((v20 & 0x80000000) == 0 && !v21)
    return (JSC::JSBigInt *)JSC::JSRopeString::create((JSC::JSRopeString *)v12, a2, (JSC::JSString *)a3, a4, a5, a6, a7, a8);
  v97 = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
  v103 = (JSC::Exception *)v97;
  if ((v97 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x4C)))
  {
    v103 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v97, 0, v98, v99, v100, v101, v102);
  }
  JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v103);
  return 0;
}

JSC::JSBigInt *operationValueMul(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  double v31;
  JSC::VM *v32;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v32 = (JSC::VM *)v12;
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_52:
      if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v24 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v24)
        && ((_DWORD)v24 || (a9.i64[0] & 0x8000000000000000) == 0))
      {
        v10 = v24 | 0xFFFE000000000000;
      }
      else
      {
        v10 = a9.i64[0] + 0x2000000000000;
      }
      goto LABEL_2;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v25 = *(_DWORD *)(v12 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_63:
      v10 = 0;
      goto LABEL_2;
    }
  }
  if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_51:
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_52;
        v30 = a9.i64[0];
        v26 = *(_DWORD *)(v12 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a9.i64[0] = v30;
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_52;
        goto LABEL_63;
      }
LABEL_50:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_51;
    }
    if (*(_BYTE *)(v10 + 5) != 3)
      goto LABEL_50;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80))
  {
    v22 = *(_DWORD *)(v12 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 >> 49)
    goto LABEL_4;
  v19 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_78:
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v27 = (int)v21, v21 == (double)(int)v27)
        && ((_DWORD)v27 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
      {
        v9 = v27 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *(_QWORD *)&v21 + 0x2000000000000;
      }
      goto LABEL_4;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v19 + 80))
  {
    v28 = *(_DWORD *)(v19 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v19 + 16))
    {
LABEL_89:
      v9 = 0;
      goto LABEL_4;
    }
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v21 = (double)(int)v9;
LABEL_77:
        if (!*(_DWORD *)(v19 + 80))
          goto LABEL_78;
        v31 = v21;
        v29 = *(_DWORD *)(v19 + 80);
        if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v21 = v31;
        if (!*(_QWORD *)(v19 + 16))
          goto LABEL_78;
        goto LABEL_89;
      }
LABEL_76:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_77;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_76;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80))
  {
    v23 = *(_DWORD *)(v12 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = v13 * v14;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v32, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
  }
  else
  {
    return JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v10, v9, a4);
  }
}

JSC::JSBigInt *operationValueMulNoOptimize(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  double v31;
  JSC::VM *v32;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v32 = (JSC::VM *)v12;
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_52:
      if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v24 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v24)
        && ((_DWORD)v24 || (a9.i64[0] & 0x8000000000000000) == 0))
      {
        v10 = v24 | 0xFFFE000000000000;
      }
      else
      {
        v10 = a9.i64[0] + 0x2000000000000;
      }
      goto LABEL_2;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v25 = *(_DWORD *)(v12 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_63:
      v10 = 0;
      goto LABEL_2;
    }
  }
  if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_51:
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_52;
        v30 = a9.i64[0];
        v26 = *(_DWORD *)(v12 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a9.i64[0] = v30;
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_52;
        goto LABEL_63;
      }
LABEL_50:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_51;
    }
    if (*(_BYTE *)(v10 + 5) != 3)
      goto LABEL_50;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80))
  {
    v22 = *(_DWORD *)(v12 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 >> 49)
    goto LABEL_4;
  v19 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_78:
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v27 = (int)v21, v21 == (double)(int)v27)
        && ((_DWORD)v27 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
      {
        v9 = v27 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *(_QWORD *)&v21 + 0x2000000000000;
      }
      goto LABEL_4;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v19 + 80))
  {
    v28 = *(_DWORD *)(v19 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v19 + 16))
    {
LABEL_89:
      v9 = 0;
      goto LABEL_4;
    }
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v21 = (double)(int)v9;
LABEL_77:
        if (!*(_DWORD *)(v19 + 80))
          goto LABEL_78;
        v31 = v21;
        v29 = *(_DWORD *)(v19 + 80);
        if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v21 = v31;
        if (!*(_QWORD *)(v19 + 16))
          goto LABEL_78;
        goto LABEL_89;
      }
LABEL_76:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_77;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_76;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80))
  {
    v23 = *(_DWORD *)(v12 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = v13 * v14;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v32, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
  }
  else
  {
    return JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v10, v9, a4);
  }
}

JSC::JSBigInt *operationValueMulOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, _WORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  JSC::VM *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  int v27;
  JSC::VM *v28;
  int v29;
  double v30;
  uint64_t v31;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  double v36;
  JSC::VM *v37;
  JSC::JSObject *v38;
  uint64_t vars0;

  v9 = a3;
  v10 = a2;
  v12 = vars0;
  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if (*a4)
    JSC::BinaryArithProfile::observeLHSAndRHS(*a4, a2, a3);
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v12 + 16), (int *)operationValueMulNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v37 = v21;
  if (!(v10 >> 49))
  {
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v27 = *(unsigned __int8 *)(v10 + 5);
      if (v27 == 3)
        goto LABEL_4;
      if (v27 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v10, a1, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_48;
      }
      v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)a1, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v38 = (JSC::JSObject *)v10;
    if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    {
LABEL_55:
      v10 = 0;
      goto LABEL_4;
    }
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_4;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)v20.i64 = (double)(int)v10;
LABEL_47:
        if (!*((_DWORD *)v21 + 20)
          || (v35 = v20.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19), v20.i64[0] = v35, !hasExceptionsAfterHandlingTraps))
        {
LABEL_48:
          if ((v20.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v31 = (int)*(double *)v20.i64, *(double *)v20.i64 == (double)(int)v31)
            && ((_DWORD)v31 || (v20.i64[0] & 0x8000000000000000) == 0))
          {
            v10 = v31 | 0xFFFE000000000000;
          }
          else
          {
            v10 = v20.i64[0] + 0x2000000000000;
          }
          goto LABEL_4;
        }
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_4;
    }
    JSC::JSValue::toNumberSlowCase(&v38, a1, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_47;
  }
LABEL_4:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    return 0;
  if (v9 >> 49)
    goto LABEL_6;
  v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v29 = *(unsigned __int8 *)(v9 + 5);
    if (v29 == 3)
      goto LABEL_6;
    if (v29 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_68;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, v15, v16, v17, v18, v19);
  }
  v38 = (JSC::JSObject *)v9;
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v13, v14, v15, v16, v17, v18, v19))
  {
LABEL_75:
    v9 = 0;
    goto LABEL_6;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_6;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_6;
    goto LABEL_66;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_66:
    JSC::JSValue::toNumberSlowCase(&v38, a1, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_67;
  }
  v30 = (double)(int)v9;
LABEL_67:
  if (*((_DWORD *)v28 + 20))
  {
    v36 = v30;
    v34 = JSC::VM::hasExceptionsAfterHandlingTraps(v28, v13, v14, v15, v16, v17, v18, v19);
    v30 = v36;
    if (v34)
      goto LABEL_75;
  }
LABEL_68:
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v33 = (int)v30, v30 == (double)(int)v33)
    && ((_DWORD)v33 || (*(_QWORD *)&v30 & 0x8000000000000000) == 0))
  {
    v9 = v33 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v30 + 0x2000000000000;
  }
LABEL_6:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    return 0;
  if (v10 >> 49 && v9 >> 49)
  {
    v22 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v10 - 0x2000000000000;
    v23 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v23 = v9 - 0x2000000000000;
    v24 = v22 * v23;
    if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v25 = (int)v24, v24 == (double)(int)v25)
      && ((_DWORD)v25 || (*(_QWORD *)&v24 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v25 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v24 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v37, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
  }
  else
  {
    return JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v10, v9, v15);
  }
}

uint64_t JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  pthread_key_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int *v38;
  int *v39;
  int v40;
  char *v41;
  unint64_t v42;
  pthread_key_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unint64_t v73;
  pthread_key_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  WTF **v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  WTF *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  JSC::ExecutableMemoryHandle *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  uint64_t result;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  unint64_t v145;
  pthread_key_t *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  unsigned int v156;
  int v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  __int128 *p_start;
  uint64_t v168;
  size_t v169;
  unsigned int *v170;
  WTF **v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  JSC::ExecutableMemoryHandle *v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  WTF *v186;
  WTF *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  BOOL v201;
  char v202;
  WTF *v203;
  uint64_t v204;
  int v205;
  int v206;
  BOOL v207;
  char v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  _BOOL4 v275;
  _BOOL4 v276;
  WTF ***v277;
  JSC::ExecutableMemoryHandle *v278;
  int v279;
  int v280;
  char v281;
  __int16 v282;
  char v283;
  WTF *v284;
  JSC::ExecutableMemoryHandle *v285;
  _BYTE v286[24];
  WTF *v287;
  uint64_t v288;
  int v289;
  WTF *v290;
  uint64_t v291;
  _BYTE v292[32];
  uint64_t *v293[2];
  int v294[2];
  WTF **v295;
  JSC::ExecutableMemoryHandle *v296;
  char v297;
  WTF **v298;
  size_t len;
  uint64_t v300;
  WTF *v301;
  _BYTE v302[128];
  unsigned int v303;
  char v304;
  int v305;
  unsigned int v306;
  __int128 start;
  __int128 v308;
  uint64_t v309;
  _BYTE v310[24];
  char v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  WTF *v315;
  _BYTE v316[128];
  unsigned int v317;
  int v318;
  int v319;
  char v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _BYTE *v324;
  char v325;
  uint64_t v326;
  int v327;
  _BYTE *v328;
  char v329;
  uint64_t v330;
  int v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v9 = a2;
  v335 = *MEMORY[0x1E0C80C00];
  v293[1] = (uint64_t *)a1;
  *(_QWORD *)v294 = a2;
  v293[0] = (uint64_t *)v294;
  v11 = *(_QWORD *)(a2 + 120);
  if (v11)
    LOBYTE(v11) = *(_BYTE *)(v11 + 12);
  v12 = v11 & 0xFE;
  if (!*(_BYTE *)(a1 + 56))
  {
LABEL_4:
    JSC::ftlThunkAwareRepatchCall(v9, *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
    v13 = *(_QWORD *)v294;
    v310[0] = 0;
    v311 = 0;
    v312 = 0;
    v313 = 0;
    v314 = 0x8000000080000000;
    v315 = (WTF *)v316;
    v317 = 128;
    v14 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v14 != -1)
    {
      v298 = &v284;
      v287 = (WTF *)&v298;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v287, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v15 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v23 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v23)
    {
      v23 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v23, v15);
    }
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 != v23 + 8)
    {
      v25 = *(_DWORD *)(v23 + 136);
      if (v317 < v25)
      {
        if (v315 && v315 != (WTF *)v316)
        {
          WTF::fastFree((unint64_t)v315, v16, v17, v18, v19, v20, v21, v22);
          v24 = *(WTF **)v23;
          v25 = *(_DWORD *)(v23 + 136);
        }
        v315 = v24;
        v317 = v25;
        *(_QWORD *)v23 = v23 + 8;
        *(_DWORD *)(v23 + 136) = 128;
      }
    }
    v26 = 0;
    v320 = 1;
    v318 = 0;
    v319 = 0;
    v321 = 0u;
    v322 = 0u;
    v323 = 0u;
    v325 = 16;
    v327 = 0x10000;
    v324 = v310;
    v326 = 0;
    v328 = v310;
    v329 = 17;
    v330 = 0;
    v331 = 0x20000;
    v332 = 0;
    v333 = v13;
    if (v13)
      v26 = JSC::CodeBlock::baselineAlternative(v13);
    v334 = v26;
    v287 = (WTF *)&v289;
    v288 = 2;
    v284 = (WTF *)v286;
    v285 = (JSC::ExecutableMemoryHandle *)2;
    if (!JSC::JITMulGenerator::generateFastPath(a1 + 57, (uint64_t)v310, (uint64_t)&v287, (uint64_t)&v284, *(_QWORD *)a1, v12 != 4, v21, v22))
    {
      v157 = 1;
      goto LABEL_154;
    }
    for (i = v318; i < SHIDWORD(v314); v318 = i)
    {
      if (i + 4 > v317)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v315, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
        i = v318;
      }
      *(_DWORD *)((char *)v315 + i) = -721215457;
      i = v318 + 4;
    }
    v35 = i;
    if (i + 4 > v317)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v315, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v35 = v318;
    }
    *(_DWORD *)((char *)v315 + v35) = 335544320;
    v318 += 4;
    if (v332)
      v36 = 69;
    else
      v36 = 65;
    v279 = i;
    v280 = 0;
    v281 = v36;
    v282 = 15;
    v283 = -1;
    v37 = HIDWORD(v288);
    if (i != -1)
    {
      if (HIDWORD(v288) == (_DWORD)v288)
      {
        v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v287, (void *)(HIDWORD(v288) + 1), (unint64_t)&v279, v29, v30, v31, v32, v33);
        v40 = *v38;
        v39 = v38 + 1;
        v41 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v41 = v40;
      }
      else
      {
        v39 = &v280;
        v41 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v41 = i;
      }
      *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
      v37 = ++HIDWORD(v288);
    }
    if (v37)
    {
      v139 = *(_QWORD *)(a1 + 32);
      v140 = (unsigned int *)v287;
      v141 = 12 * v37;
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v140, v139, (uint64_t)v310, v29, v30, v31, v32, v33);
        v140 += 3;
        v141 -= 12;
      }
      while (v141);
    }
    if (HIDWORD(v285))
    {
      v142 = *(_QWORD *)(a1 + 48);
      v143 = (unsigned int *)v284;
      v144 = 12 * HIDWORD(v285);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v143, v142, (uint64_t)v310, v29, v30, v31, v32, v33);
        v143 += 3;
        v144 -= 12;
      }
      while (v144);
    }
    v298 = 0;
    len = 0;
    v300 = *(_QWORD *)v294;
    v301 = (WTF *)v302;
    v303 = 128;
    v145 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v145 != -1)
    {
      v295 = (WTF **)&v297;
      v277 = &v295;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v277, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v146 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v154 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v154)
    {
      v154 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v154, v146);
    }
    v155 = *(WTF **)v154;
    if (*(_QWORD *)v154 != v154 + 8)
    {
      v156 = *(_DWORD *)(v154 + 136);
      if (v303 < v156)
      {
        if (v301 && v301 != (WTF *)v302)
        {
          WTF::fastFree((unint64_t)v301, v147, v148, v149, v150, v151, v152, v153);
          v155 = *(WTF **)v154;
          v156 = *(_DWORD *)(v154 + 136);
        }
        v301 = v155;
        v303 = v156;
        *(_QWORD *)v154 = v154 + 8;
        *(_DWORD *)(v154 + 136) = 128;
      }
    }
    v157 = 1;
    v304 = 1;
    v305 = 0;
    v306 = 6;
    start = 0u;
    v308 = 0u;
    v309 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v298, (uint64_t)v310, 0, v149, v150, v151, v152, v153);
    if (!(_BYTE)v305)
    {
LABEL_153:
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v158, v159, v160, v161, v162, v163, v164);
LABEL_154:
      v186 = v284;
      if (v286 != (_BYTE *)v284 && v284 != 0)
      {
        v284 = 0;
        LODWORD(v285) = 0;
        WTF::fastFree((unint64_t)v186, v27, v28, v29, v30, v31, v32, v33);
      }
      v188 = v287;
      if (&v289 != (int *)v287 && v287)
      {
        v287 = 0;
        LODWORD(v288) = 0;
        WTF::fastFree((unint64_t)v188, v27, v28, v29, v30, v31, v32, v33);
      }
      result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v27, v28, v29, v30, v31, v32, v33);
      if (!v157)
        return JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v293);
      return result;
    }
    v275 = *(_QWORD *)v294
        && (v165 = *(_QWORD *)(*(_QWORD *)v294 + 120)) != 0
        && ((*(_BYTE *)(v165 + 12) & 0xFE) == 4 ? (v166 = BYTE1(dword_1ECF4C28A) == 0) : (v166 = 1), !v166)
        || HIBYTE(word_1ECF4C286) != 0;
    if (!v275 && !byte_1ECF4C288 && !byte_1ECF4C289)
    {
      if (DWORD1(v308))
      {
        v189 = (uint64_t *)*((_QWORD *)&start + 1);
        v190 = 8 * DWORD1(v308);
        do
        {
          v191 = *v189++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v191 + 16))(v191, &v298);
          v190 -= 8;
        }
        while (v190);
      }
      p_start = &start;
      if (HIDWORD(v309))
      {
        v192 = (uint64_t *)*((_QWORD *)&v308 + 1);
        v193 = 8 * HIDWORD(v309);
        do
        {
          v194 = *v192++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v194 + 16))(v194, &v298);
          v193 -= 8;
        }
        while (v193);
      }
      v168 = v306;
      v169 = len;
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v306 / 2] += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v168);
      sys_icache_invalidate((void *)start, v169);
      v170 = (unsigned int *)v298;
      if (v298)
      {
        do
          v273 = __ldaxr(v170);
        while (__stlxr(v273 + 1, v170));
        p_start = (__int128 *)(v170 + 2);
      }
      v171 = *(WTF ***)p_start;
      v295 = v171;
      v296 = (JSC::ExecutableMemoryHandle *)v170;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v298, (uint64_t)&v295, 0, 0);
      v277 = (WTF ***)v171;
      v278 = 0;
      if (v170)
      {
        do
          v172 = __ldaxr(v170);
        while (__stlxr(v172 + 1, v170));
        v173 = (unsigned int *)v278;
        v278 = (JSC::ExecutableMemoryHandle *)v170;
        if (v173)
        {
          do
          {
            v174 = __ldaxr(v173);
            v175 = v174 - 1;
          }
          while (__stlxr(v175, v173));
          if (!v175)
          {
            atomic_store(1u, v173);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v173, (uint64_t)v158, v159, v160, v161, v162, v163, v164);
            WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
          }
        }
        v176 = (unsigned int *)v296;
        v296 = 0;
        if (v176)
        {
          do
          {
            v177 = __ldaxr(v176);
            v178 = v177 - 1;
          }
          while (__stlxr(v178, v176));
          if (!v178)
          {
            atomic_store(1u, v176);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v176, (uint64_t)v158, v159, v160, v161, v162, v163, v164);
            WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
          }
        }
      }
      goto LABEL_144;
    }
    if (*(_QWORD *)v294)
    {
      v198 = *(_QWORD *)(*(_QWORD *)v294 + 120);
      v199 = HIBYTE(word_1ECF4C286);
      if (v198)
      {
        v200 = *(_BYTE *)(v198 + 12) & 0xFE;
        if (BYTE1(dword_1ECF4C28A))
          v201 = v200 == 4;
        else
          v201 = 0;
        v202 = 1;
        if (v201 || HIBYTE(word_1ECF4C286))
          goto LABEL_181;
        goto LABEL_206;
      }
    }
    else
    {
      v199 = HIBYTE(word_1ECF4C286);
    }
    if (v199)
    {
      v202 = 1;
LABEL_181:
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v298, v202, 0, 0, "JITMathIC: generating out of line IC snippet", &v277);
LABEL_144:
      v179 = v278;
      v278 = 0;
      v180 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v277;
      *(_QWORD *)(a1 + 16) = v179;
      if (v180)
      {
        do
        {
          v181 = __ldaxr(v180);
          v182 = v181 - 1;
        }
        while (__stlxr(v182, v180));
        if (!v182)
        {
          atomic_store(1u, v180);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v180, (uint64_t)v158, v159, v160, v161, v162, v163, v164);
          WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
        }
        v183 = (unsigned int *)v278;
        v278 = 0;
        if (v183)
        {
          do
          {
            v184 = __ldaxr(v183);
            v185 = v184 - 1;
          }
          while (__stlxr(v185, v183));
          if (!v185)
          {
            atomic_store(1u, v183);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v183, (uint64_t)v158, v159, v160, v161, v162, v163, v164);
            WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          }
        }
      }
      v157 = 0;
      goto LABEL_153;
    }
LABEL_206:
    v202 = byte_1ECF4C288 != 0;
    goto LABEL_181;
  }
  v310[0] = 0;
  v311 = 0;
  v312 = 0;
  v313 = 0;
  v314 = 0x8000000080000000;
  v315 = (WTF *)v316;
  v317 = 128;
  v42 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v42 != -1)
  {
    v298 = &v284;
    v287 = (WTF *)&v298;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v287, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v43 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v51 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v51)
  {
    v51 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v51, v43);
  }
  v52 = *(WTF **)v51;
  if (*(_QWORD *)v51 != v51 + 8)
  {
    v53 = *(_DWORD *)(v51 + 136);
    if (v317 < v53)
    {
      if (v315 && v315 != (WTF *)v316)
      {
        WTF::fastFree((unint64_t)v315, v44, v45, v46, v47, v48, v49, v50);
        v52 = *(WTF **)v51;
        v53 = *(_DWORD *)(v51 + 136);
      }
      v315 = v52;
      v317 = v53;
      *(_QWORD *)v51 = v51 + 8;
      *(_DWORD *)(v51 + 136) = 128;
    }
  }
  v320 = 1;
  v318 = 0;
  v319 = 0;
  v323 = 0u;
  v322 = 0u;
  v321 = 0u;
  v324 = v310;
  v325 = 16;
  v326 = 0;
  v327 = 0x10000;
  v328 = v310;
  v329 = 17;
  v330 = 0;
  v331 = 0x20000;
  v332 = 0;
  v333 = v9;
  v54 = *(_QWORD *)(v9 + 192);
  if (!v54)
    v54 = v9;
  v55 = *(_QWORD *)(v54 + 120);
  if (v55)
  {
    v56 = *(unsigned __int8 *)(v55 + 12);
    if ((v56 & 0xFE) != 2)
    {
      if (v56)
      {
        result = 1878;
        __break(0xC471u);
        return result;
      }
    }
  }
  v334 = v54;
  v287 = (WTF *)-1;
  v288 = -1;
  v289 = 0;
  v290 = (WTF *)v292;
  v291 = 2;
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateInline(a1, (uint64_t)v310, (uint64_t)&v287, v12 != 4, v47, v48, v49, v50);
  *(_BYTE *)(a1 + 56) = 0;
  if (!v64)
  {
LABEL_183:
    v203 = v290;
    if (v292 != (_BYTE *)v290 && v290)
    {
      v290 = 0;
      LODWORD(v291) = 0;
      WTF::fastFree((unint64_t)v203, v57, v58, v59, v60, v61, v62, v63);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v57, v58, v59, v60, v61, v62, v63);
    v9 = *(_QWORD *)v294;
    goto LABEL_4;
  }
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26432>((uint64_t)v310, *(_QWORD *)(a1 + 32), v58, v59, v60, v61, v62, v63);
  if (HIDWORD(v291))
  {
    v70 = *(_QWORD *)(a1 + 48);
    v71 = (unsigned int *)v290;
    v72 = 12 * HIDWORD(v291);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v71, v70, (uint64_t)v310, v65, v66, v67, v68, v69);
      v71 += 3;
      v72 -= 12;
    }
    while (v72);
  }
  v298 = 0;
  len = 0;
  v300 = *(_QWORD *)v294;
  v301 = (WTF *)v302;
  v303 = 128;
  v73 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v73 != -1)
  {
    v284 = (WTF *)&v277;
    v295 = &v284;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v295, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v74 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v82 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v82)
  {
    v82 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v82, v74);
  }
  v83 = *(WTF **)v82;
  if (*(_QWORD *)v82 != v82 + 8)
  {
    v84 = *(_DWORD *)(v82 + 136);
    if (v303 < v84)
    {
      if (v301 && v301 != (WTF *)v302)
      {
        WTF::fastFree((unint64_t)v301, v75, v76, v77, v78, v79, v80, v81);
        v83 = *(WTF **)v82;
        v84 = *(_DWORD *)(v82 + 136);
      }
      v301 = v83;
      v303 = v84;
      *(_QWORD *)v82 = v82 + 8;
      *(_DWORD *)(v82 + 136) = 128;
    }
  }
  v304 = 1;
  v305 = 0;
  v306 = 6;
  start = 0u;
  v308 = 0u;
  v309 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v298, (uint64_t)v310, 0, v77, v78, v79, v80, v81);
  if (!(_BYTE)v305)
  {
    JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v85, v86, v87, v88, v89, v90, v91);
    goto LABEL_183;
  }
  v276 = *(_QWORD *)v294
      && (v92 = *(_QWORD *)(*(_QWORD *)v294 + 120)) != 0
      && ((*(_BYTE *)(v92 + 12) & 0xFE) == 4 ? (v93 = BYTE1(dword_1ECF4C28A) == 0) : (v93 = 1), !v93)
      || HIBYTE(word_1ECF4C286) != 0;
  if (!v276 && !byte_1ECF4C288 && !byte_1ECF4C289)
  {
    if (DWORD1(v308))
    {
      v136 = (uint64_t *)*((_QWORD *)&start + 1);
      v137 = 8 * DWORD1(v308);
      do
      {
        v138 = *v136++;
        (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v138 + 16))(v138, &v298);
        v137 -= 8;
      }
      while (v137);
    }
    v94 = (WTF **)&start;
    if (HIDWORD(v309))
    {
      v195 = (uint64_t *)*((_QWORD *)&v308 + 1);
      v196 = 8 * HIDWORD(v309);
      do
      {
        v197 = *v195++;
        (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v197 + 16))(v197, &v298);
        v196 -= 8;
      }
      while (v196);
    }
    v95 = v306;
    v96 = len;
    *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v306 / 2] += len;
    ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v95);
    sys_icache_invalidate((void *)start, v96);
    v104 = (unsigned int *)v298;
    if (v298)
    {
      do
        v274 = __ldaxr(v104);
      while (__stlxr(v274 + 1, v104));
      v94 = (WTF **)(v104 + 2);
    }
    v105 = *v94;
    v284 = v105;
    v285 = (JSC::ExecutableMemoryHandle *)v104;
    if (byte_1ECF4C2A2)
      JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v298, (uint64_t)&v284, 0, 0);
    v295 = (WTF **)v105;
    v296 = 0;
    if (v104)
    {
      do
        v106 = __ldaxr(v104);
      while (__stlxr(v106 + 1, v104));
      v107 = (unsigned int *)v296;
      v296 = (JSC::ExecutableMemoryHandle *)v104;
      if (v107)
      {
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v107);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v107, v97, v98, v99, v100, v101, v102, v103);
          WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
        }
      }
      v110 = (unsigned int *)v285;
      v285 = 0;
      if (v110)
      {
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v110, v97, v98, v99, v100, v101, v102, v103);
          WTF::fastFree(v265, v266, v267, v268, v269, v270, v271, v272);
        }
      }
    }
    goto LABEL_81;
  }
  if (*(_QWORD *)v294)
  {
    v204 = *(_QWORD *)(*(_QWORD *)v294 + 120);
    v205 = HIBYTE(word_1ECF4C286);
    if (v204)
    {
      v206 = *(_BYTE *)(v204 + 12) & 0xFE;
      if (BYTE1(dword_1ECF4C28A))
        v207 = v206 == 4;
      else
        v207 = 0;
      v208 = 1;
      if (v207 || HIBYTE(word_1ECF4C286))
        goto LABEL_194;
      goto LABEL_210;
    }
  }
  else
  {
    v205 = HIBYTE(word_1ECF4C286);
  }
  if (!v205)
  {
LABEL_210:
    v208 = byte_1ECF4C288 != 0;
    goto LABEL_194;
  }
  v208 = 1;
LABEL_194:
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v298, v208, 0, 0, "JITMathIC: generating out of line fast IC snippet", &v295);
LABEL_81:
  v113 = v296;
  v296 = 0;
  v114 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v295;
  *(_QWORD *)(a1 + 16) = v113;
  if (v114)
  {
    do
    {
      v115 = __ldaxr(v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, v114));
    if (!v116)
    {
      atomic_store(1u, v114);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v114, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
    }
    v117 = (unsigned int *)v296;
    v296 = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v117, v97, v98, v99, v100, v101, v102, v103);
        WTF::fastFree(v249, v250, v251, v252, v253, v254, v255, v256);
      }
    }
  }
  if (!v292[24])
    JSC::ftlThunkAwareRepatchCall(*(uint64_t *)v294, *(_QWORD *)(a1 + 40), a3, v99, v100, v101, v102, v103);
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v293);
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v120, v121, v122, v123, v124, v125, v126);
  v134 = v290;
  if (v292 != (_BYTE *)v290 && v290)
  {
    v290 = 0;
    LODWORD(v291) = 0;
    WTF::fastFree((unint64_t)v134, v127, v128, v129, v130, v131, v132, v133);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v127, v128, v129, v130, v131, v132, v133);
}

unint64_t operationValueMulProfiled(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  int v28;
  JSC::VM *v29;
  int v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  double v41;
  JSC::VM *v42;
  JSC::JSObject *var38[8];

  v10 = a3;
  v11 = a2;
  v13 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v13 + 40) = var38[7];
  v14 = (unsigned __int16)*a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 3 | 4;
  v17 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v17) = (*a4 >> 10) & 5 | 2;
  if (v15)
    LOWORD(v16) = v17;
  v18 = a3 >> 49;
  v19 = (v14 >> 7) & 3 | 4;
  v20 = (v14 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v20) = (v14 >> 7) & 5 | 2;
  if (v18)
    LOBYTE(v19) = v20;
  *a4 = v14 & 0xE07F | ((_WORD)v16 << 10) | (v19 << 7);
  v42 = (JSC::VM *)v13;
  if (!v15)
  {
    if ((a2 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(a2 + 5);
      if (v28 == 3)
        goto LABEL_10;
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_76;
      }
      v11 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    var38[0] = (JSC::JSObject *)v11;
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_83:
      v11 = 0;
      goto LABEL_10;
    }
    if (v11 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      if (v11 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v11;
LABEL_75:
        if (!*(_DWORD *)(v13 + 80)
          || (v40 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v40, !hasExceptionsAfterHandlingTraps))
        {
LABEL_76:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v36 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v36)
            && ((_DWORD)v36 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v11 = v36 | 0xFFFE000000000000;
          }
          else
          {
            v11 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_83;
      }
    }
    else if (*(_BYTE *)(v11 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_75;
  }
LABEL_10:
  if (*(_DWORD *)(v13 + 80))
  {
    v33 = *(_DWORD *)(v13 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_55;
  }
  if (v18)
    goto LABEL_12;
  v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v10 + 5);
    if (v30 == 3)
      goto LABEL_12;
    if (v30 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v10, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_96;
    }
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*((_DWORD *)v29 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_103:
      v10 = 0;
      goto LABEL_12;
    }
    v10 = (unint64_t)var38[0];
  }
  if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        v31 = (double)(int)v10;
LABEL_95:
        if (!*((_DWORD *)v29 + 20)
          || (v41 = v31,
              v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8),
              v31 = v41,
              !v39))
        {
LABEL_96:
          if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v38 = (int)v31, v31 == (double)(int)v38)
            && ((_DWORD)v38 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
          {
            v10 = v38 | 0xFFFE000000000000;
          }
          else
          {
            v10 = *(_QWORD *)&v31 + 0x2000000000000;
          }
          goto LABEL_12;
        }
        goto LABEL_103;
      }
LABEL_94:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_95;
    }
    if (*(_BYTE *)(v10 + 5) != 3)
      goto LABEL_94;
  }
LABEL_12:
  if (*(_DWORD *)(v13 + 80))
  {
    v35 = *(_DWORD *)(v13 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
    {
LABEL_55:
      v25 = 0;
      goto LABEL_24;
    }
  }
  if (v11 >> 49 && v10 >> 49)
  {
    v21 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v21 = v11 - 0x2000000000000;
    v22 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v10 - 0x2000000000000;
    v23 = v21 * v22;
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v24 = (int)v23, v23 == (double)(int)v24)
      && ((_DWORD)v24 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
    {
      v25 = v24 | 0xFFFE000000000000;
    }
    else
    {
      v25 = *(_QWORD *)&v23 + 0x2000000000000;
    }
  }
  else
  {
    if ((v11 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v11 + 5) != 3
      || (v10 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v10 + 5) != 3)
    {
      v32 = JSC::throwTypeError((unint64_t)a1, &v42, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
    }
    else
    {
      v32 = (uint64_t)JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v11, v10, a4);
    }
    v25 = v32;
  }
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_25;
LABEL_24:
  v34 = *(_DWORD *)(v13 + 80);
  if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v13 + 16))
    return 0;
LABEL_25:
  if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v25 >> 49)
    {
      v26 = 27;
    }
    else if (v25 && (v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 3)
    {
      v26 = 32;
    }
    else
    {
      v26 = 4;
    }
    *a4 |= v26;
  }
  return v25;
}

unint64_t operationValueMulProfiledOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unsigned __int16 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  JSC::VM *v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  int v36;
  JSC::VM *v37;
  int v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  double v46;
  JSC::VM *v47;
  JSC::JSObject *v48;
  uint64_t vars0;

  v8 = a3;
  v9 = a2;
  v11 = vars0;
  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v12 = *a4;
  v13 = **a4;
  v14 = a2 >> 49;
  v15 = (v13 >> 10) & 3 | 4;
  v16 = (v13 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v16) = (**a4 >> 10) & 5 | 2;
  if (v14)
    LOWORD(v15) = v16;
  v17 = a3 >> 49;
  v18 = (v13 >> 7) & 3 | 4;
  v19 = (v13 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v19) = (v13 >> 7) & 5 | 2;
  if (v17)
    LOBYTE(v18) = v19;
  *v12 = v13 & 0xE07F | ((_WORD)v15 << 10) | (v18 << 7);
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v11 + 16), (int *)operationValueMulProfiledNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v47 = v28;
  if (!v14)
  {
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v36 = *(unsigned __int8 *)(v9 + 5);
      if (v36 == 3)
        goto LABEL_10;
      if (v36 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v9, a1, v21, v22, v23, v24, v25, v26, v27);
        goto LABEL_67;
      }
      v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, v22, v23, v24, v25, v26);
    }
    v48 = (JSC::JSObject *)v9;
    if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v20, v21, v22, v23, v24, v25, v26))
    {
LABEL_74:
      v9 = 0;
      goto LABEL_10;
    }
    if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        *(double *)v27.i64 = (double)(int)v9;
LABEL_66:
        if (!*((_DWORD *)v28 + 20)
          || (v45 = v27.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28, v20, v21, v22, v23, v24, v25, v26), v27.i64[0] = v45, !hasExceptionsAfterHandlingTraps))
        {
LABEL_67:
          if ((v27.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v41 = (int)*(double *)v27.i64, *(double *)v27.i64 == (double)(int)v41)
            && ((_DWORD)v41 || (v27.i64[0] & 0x8000000000000000) == 0))
          {
            v9 = v41 | 0xFFFE000000000000;
          }
          else
          {
            v9 = v27.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_74;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(&v48, a1, v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_66;
  }
LABEL_10:
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v20, v21, v22, v23, v24, v25, v26))
    goto LABEL_52;
  if (v17)
    goto LABEL_12;
  v37 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    v38 = *(unsigned __int8 *)(v8 + 5);
    if (v38 == 3)
      goto LABEL_12;
    if (v38 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v8, a1, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_87;
    }
    v8 = JSC::JSCell::toPrimitive(v8, (JSC::VM **)a1, (JSC::Structure *)1, v22, v23, v24, v25, v26);
  }
  v48 = (JSC::JSObject *)v8;
  if (*((_DWORD *)v37 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v37, v20, v21, v22, v23, v24, v25, v26))
    {
LABEL_94:
      v8 = 0;
      goto LABEL_12;
    }
    v8 = (unint64_t)v48;
  }
  if (v8 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_12;
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v8 + 5) == 3)
      goto LABEL_12;
    goto LABEL_85;
  }
  if (v8 < 0xFFFE000000000000)
  {
LABEL_85:
    JSC::JSValue::toNumberSlowCase(&v48, a1, v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_86;
  }
  v39 = (double)(int)v8;
LABEL_86:
  if (*((_DWORD *)v37 + 20))
  {
    v46 = v39;
    v44 = JSC::VM::hasExceptionsAfterHandlingTraps(v37, v20, v21, v22, v23, v24, v25, v26);
    v39 = v46;
    if (v44)
      goto LABEL_94;
  }
LABEL_87:
  if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v43 = (int)v39, v39 == (double)(int)v43)
    && ((_DWORD)v43 || (*(_QWORD *)&v39 & 0x8000000000000000) == 0))
  {
    v8 = v43 | 0xFFFE000000000000;
  }
  else
  {
    v8 = *(_QWORD *)&v39 + 0x2000000000000;
  }
LABEL_12:
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v20, v21, v22, v23, v24, v25, v26))
  {
LABEL_52:
    v33 = 0;
    goto LABEL_24;
  }
  if (v9 >> 49 && v8 >> 49)
  {
    v29 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v29 = v9 - 0x2000000000000;
    v30 = (double)(int)v8;
    if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v30 = v8 - 0x2000000000000;
    v31 = v29 * v30;
    if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v32 = (int)v31, v31 == (double)(int)v32)
      && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
    {
      v33 = v32 | 0xFFFE000000000000;
    }
    else
    {
      v33 = *(_QWORD *)&v31 + 0x2000000000000;
    }
  }
  else
  {
    if ((v9 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v9 + 5) != 3
      || (v8 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v8 + 5) != 3)
    {
      v40 = JSC::throwTypeError((unint64_t)a1, &v47, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
    }
    else
    {
      v40 = (uint64_t)JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v9, v8, v22);
    }
    v33 = v40;
  }
LABEL_24:
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v20, v21, v22, v23, v24, v25, v26))
    return 0;
  if (v33 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v33 >> 49)
    {
      v34 = 27;
    }
    else if (v33 && (v33 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v33 + 5) == 3)
    {
      v34 = 32;
    }
    else
    {
      v34 = 4;
    }
    *v12 |= v34;
  }
  return v33;
}

unint64_t operationValueMulProfiledNoOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unsigned __int16 **a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  int v28;
  JSC::VM *v29;
  int v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  double v41;
  JSC::VM *v42;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v13 = *a4;
  v14 = **a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 3 | 4;
  v17 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v17) = (**a4 >> 10) & 5 | 2;
  if (v15)
    LOWORD(v16) = v17;
  v18 = a3 >> 49;
  v19 = (v14 >> 7) & 3 | 4;
  v20 = (v14 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v20) = (v14 >> 7) & 5 | 2;
  if (v18)
    LOBYTE(v19) = v20;
  *v13 = v14 & 0xE07F | ((_WORD)v16 << 10) | (v19 << 7);
  v42 = (JSC::VM *)v12;
  if (!v15)
  {
    if ((a2 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(a2 + 5);
      if (v28 == 3)
        goto LABEL_10;
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_70;
      }
      v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    var38[0] = (JSC::JSObject *)v10;
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_77:
      v10 = 0;
      goto LABEL_10;
    }
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_69:
        if (!*(_DWORD *)(v12 + 80)
          || (v40 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v40, !hasExceptionsAfterHandlingTraps))
        {
LABEL_70:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v36 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v36)
            && ((_DWORD)v36 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v10 = v36 | 0xFFFE000000000000;
          }
          else
          {
            v10 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_77;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_69;
  }
LABEL_10:
  if (*(_DWORD *)(v12 + 80))
  {
    v33 = *(_DWORD *)(v12 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_55;
  }
  if (v18)
    goto LABEL_12;
  v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v9 + 5);
    if (v30 == 3)
      goto LABEL_12;
    if (v30 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_90;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v29 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_97:
      v9 = 0;
      goto LABEL_12;
    }
    v9 = (unint64_t)var38[0];
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v31 = (double)(int)v9;
LABEL_89:
        if (!*((_DWORD *)v29 + 20)
          || (v41 = v31,
              v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8),
              v31 = v41,
              !v39))
        {
LABEL_90:
          if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v38 = (int)v31, v31 == (double)(int)v38)
            && ((_DWORD)v38 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
          {
            v9 = v38 | 0xFFFE000000000000;
          }
          else
          {
            v9 = *(_QWORD *)&v31 + 0x2000000000000;
          }
          goto LABEL_12;
        }
        goto LABEL_97;
      }
LABEL_88:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_89;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_88;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80))
  {
    v35 = *(_DWORD *)(v12 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_55:
      v25 = 0;
      goto LABEL_24;
    }
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v21 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v21 = v10 - 0x2000000000000;
    v22 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v9 - 0x2000000000000;
    v23 = v21 * v22;
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v24 = (int)v23, v23 == (double)(int)v24)
      && ((_DWORD)v24 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
    {
      v25 = v24 | 0xFFFE000000000000;
    }
    else
    {
      v25 = *(_QWORD *)&v23 + 0x2000000000000;
    }
  }
  else
  {
    if ((v10 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v10 + 5) != 3
      || (v9 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v9 + 5) != 3)
    {
      v32 = JSC::throwTypeError((unint64_t)a1, &v42, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
    }
    else
    {
      v32 = (uint64_t)JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v10, v9, a4);
    }
    v25 = v32;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_25;
LABEL_24:
  v34 = *(_DWORD *)(v12 + 80);
  if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
    return 0;
LABEL_25:
  if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v25 >> 49)
    {
      v26 = 27;
    }
    else if (v25 && (v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 3)
    {
      v26 = 32;
    }
    else
    {
      v26 = 4;
    }
    *v13 |= v26;
  }
  return v25;
}

unint64_t operationArithNegate(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM **v10;
  uint64_t v11;
  JSC::VM *v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  JSC::VM **v27;
  uint64_t v28;
  JSC::VM **v29;
  double v30;
  unint64_t v31;
  JSC::JSObject *var28[6];

  v10 = (JSC::VM **)a1;
  v11 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v11 + 40) = var28[5];
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v26 = a2;
    v27 = v10;
    v28 = JSC::JSCell::toPrimitive(v26, v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v10 = v27;
    a2 = v28;
  }
  var28[0] = (JSC::JSObject *)a2;
  if (*(_DWORD *)(v11 + 80))
  {
    v23 = *(_DWORD *)(v11 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    {
      v29 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v29;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(a2 + 5) == 3)
    {
      v12 = v10[7];
      if (!*(_DWORD *)(a2 + 8))
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v10, v10[7], 0, a4);
      result = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>((JSC::JSBigInt *)v10, a2, a3, a4);
      if (!*((_DWORD *)v12 + 20))
        goto LABEL_8;
      v25 = *((_DWORD *)v12 + 20);
      if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      {
        v31 = result;
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
        result = v31;
      }
      if (!*((_QWORD *)v12 + 2))
      {
LABEL_8:
        *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16) == 0;
        return result;
      }
      return 0;
    }
    goto LABEL_13;
  }
  if (a2 < 0xFFFE000000000000)
  {
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
LABEL_13:
      JSC::JSValue::toNumberSlowCase(var28, (JSC::JSGlobalObject *)v10, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_14;
    }
    *(_QWORD *)&v20 = a2 - 0x2000000000000;
  }
  else
  {
    v20 = (double)(int)a2;
  }
LABEL_14:
  if (*(_DWORD *)(v11 + 80))
  {
    v24 = *(_DWORD *)(v11 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v30 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v20 = v30;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = -v20;
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v22 = (int)v21, (double)(int)v22 == v21)
    && ((_DWORD)v22 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
  {
    return v22 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v21 + 0x2000000000000;
  }
}

unint64_t operationArithNegateProfiled(uint64_t a1, unint64_t a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  unint64_t result;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  JSC::JSObject *var48[10];

  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var48[9];
  v13 = *(unsigned __int16 *)a3;
  v14 = (v13 >> 7) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOBYTE(v14) = (v13 >> 7) & 5 | 2;
  if (a2 >> 49)
    v15 = v14;
  else
    v15 = (v13 >> 7) & 3 | 4;
  *(_WORD *)a3 = v13 & 0xFC7F | (v15 << 7);
  if ((a2 & 0xFFFE000000000002) == 0)
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  var48[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 3)
    {
      v30 = JSC::JSBigInt::unaryMinus((JSC::JSBigInt *)a1, (JSC::JSGlobalObject *)v10, a3, a4);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v23, v24, v25, v26, v27, v28, v29))
      {
        return 0;
      }
      if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        if (v30 >> 49)
        {
          v31 = 27;
        }
        else if (v30 && (v30 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v30 + 5) == 3)
        {
          v31 = 32;
        }
        else
        {
          v31 = 4;
        }
        *(_WORD *)a3 |= v31;
      }
      return v30;
    }
    goto LABEL_11;
  }
  if (v10 < 0xFFFE000000000000)
  {
    if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
LABEL_11:
      JSC::JSValue::toNumberSlowCase(var48, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v17 = v16;
      goto LABEL_12;
    }
    *(_QWORD *)&v17 = v10 - 0x2000000000000;
  }
  else
  {
    v17 = (double)(int)v10;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v18 = -v17;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v19 = (int)v18;
    if ((double)(int)v19 == v18 && ((_DWORD)v19 || (*(_QWORD *)&v18 & 0x8000000000000000) == 0))
      return v19 | 0xFFFE000000000000;
  }
  result = *(_QWORD *)&v18 + 0x2000000000000;
  if ((unint64_t)(*(_QWORD *)&v18 + 0x2000000000000) <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (*(_QWORD *)&v18 < 0xFFFE000000000000)
    {
      v22 = 27;
    }
    else
    {
      v21 = v18 != NAN && (result & 0xFFFE000000000002) == 0;
      if (v21 && *(_BYTE *)(*(_QWORD *)&v18 + 0x2000000000005) == 3)
        v22 = 32;
      else
        v22 = 4;
    }
    *(_WORD *)a3 |= v22;
  }
  return result;
}

_WORD *JSC::UnaryArithProfile::observeArg(_WORD *result, unint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned __int8 v4;

  v2 = (unsigned __int16)*result;
  v3 = (v2 >> 7) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    v3 = (v2 >> 7) & 5 | 2;
  if (a2 >> 49)
    v4 = v3;
  else
    v4 = (v2 >> 7) & 3 | 4;
  *result = v2 & 0xFC7F | (v4 << 7);
  return result;
}

unint64_t operationArithNegateProfiledOptimize(uint64_t a1, unint64_t a2, _WORD **a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSBigInt *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t result;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSObject *v38;
  uint64_t vars0;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = vars0;
  *(_QWORD *)(v6 + 40) = vars0;
  v8 = *a3;
  JSC::UnaryArithProfile::observeArg(*a3, a2);
  JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine((uint64_t)a3, *(JSC::CodeBlock **)(v7 + 16), (int *)operationArithNegateProfiled, v9, v10, v11, v12, v13);
  if ((v4 & 0xFFFE000000000002) == 0)
    v4 = JSC::JSCell::toPrimitive(v4, (JSC::VM **)a1, (JSC::Structure *)1, v16, v17, v18, v19, v20);
  v38 = (JSC::JSObject *)v4;
  if (*(_DWORD *)(v6 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6, v14, (uint64_t)v15, v16, v17, v18, v19, v20))
  {
    return 0;
  }
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    if (v4 >= 0xFFFE000000000000)
    {
      v23 = (double)(int)v4;
      goto LABEL_7;
    }
    if (v4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v23 = v4 - 0x2000000000000;
      goto LABEL_7;
    }
LABEL_6:
    JSC::JSValue::toNumberSlowCase(&v38, (JSC::JSGlobalObject *)a1, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
    v23 = v22;
LABEL_7:
    if (*(_DWORD *)(v6 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6, v14, (uint64_t)v15, v16, v17, v18, v19, v20))
    {
      return 0;
    }
    v24 = -v23;
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v25 = (int)v24;
      if ((double)(int)v25 == v24 && ((_DWORD)v25 || (*(_QWORD *)&v24 & 0x8000000000000000) == 0))
        return v25 | 0xFFFE000000000000;
    }
    result = *(_QWORD *)&v24 + 0x2000000000000;
    if ((unint64_t)(*(_QWORD *)&v24 + 0x2000000000000) <= 0xFFFDFFFFFFFFFFFFLL)
    {
      if (*(_QWORD *)&v24 >= 0xFFFE000000000000)
      {
        if (v24 == NAN || (result & 0xFFFE000000000002) != 0)
          goto LABEL_22;
        goto LABEL_21;
      }
      goto LABEL_34;
    }
    return result;
  }
  if (*(_BYTE *)(v4 + 5) != 3)
    goto LABEL_6;
  result = JSC::JSBigInt::unaryMinus((JSC::JSBigInt *)a1, (JSC::JSGlobalObject *)v4, v15, v16);
  if (*(_DWORD *)(v6 + 80))
  {
    v36 = result;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6, v29, v30, v31, v32, v33, v34, v35);
    result = v36;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  if (result <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (!(result >> 49))
    {
      if (!result || (result & 0xFFFE000000000002) != 0)
      {
LABEL_22:
        v28 = 4;
LABEL_23:
        *v8 |= v28;
        return result;
      }
LABEL_21:
      if (*(_BYTE *)(result + 5) == 3)
      {
        v28 = 32;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_34:
    v28 = 27;
    goto LABEL_23;
  }
  return result;
}

uint64_t JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine(uint64_t a1, JSC::CodeBlock *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int Inline;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  WTF *v151;
  WTF *v152;
  uint64_t v153;
  char v155;
  uint64_t v156;
  char v158;
  int v159;
  int v160;
  BOOL v161;
  BOOL v162;
  _QWORD v163[2];
  _DWORD v164[2];
  char v165;
  __int16 v166;
  char v167;
  WTF *v168;
  uint64_t v169;
  _BYTE v170[24];
  WTF *v171;
  uint64_t v172;
  int v173;
  WTF *v174;
  uint64_t v175;
  _BYTE v176[32];
  int v177[42];
  char v178;
  _BYTE v179[32];
  _DWORD v180[6];
  _BYTE v181[296];
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 15);
  if (v11)
    LOBYTE(v11) = *(_BYTE *)(v11 + 12);
  v12 = v11 & 0xFE;
  if (*(_BYTE *)(a1 + 56))
  {
    JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v179, a2);
    v171 = (WTF *)-1;
    v172 = -1;
    v173 = 0;
    v174 = (WTF *)v176;
    v175 = 2;
    Inline = JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateInline(a1, (uint64_t)v179, (uint64_t)&v171, v12 != 4, v13, v14, v15, v16);
    *(_BYTE *)(a1 + 56) = 0;
    if (Inline)
    {
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26432>((uint64_t)v179, *(_QWORD *)(a1 + 32), v19, v20, v21, v22, v23, v24);
      if (HIDWORD(v175))
      {
        v30 = *(_QWORD *)(a1 + 48);
        v31 = (unsigned int *)v174;
        v32 = 12 * HIDWORD(v175);
        do
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v31, v30, (uint64_t)v179, v25, v26, v27, v28, v29);
          v31 += 3;
          v32 -= 12;
        }
        while (v32);
      }
      JSC::LinkBuffer::LinkBuffer((uint64_t)v177, (uint64_t)v179, (uint64_t)a2, 6, 0);
      if (v178)
      {
        if (a2
          && (v40 = *((_QWORD *)a2 + 15)) != 0
          && ((*(_BYTE *)(v40 + 12) & 0xFE) == 4 ? (v41 = BYTE1(dword_1ECF4C28A) == 0) : (v41 = 1), !v41))
        {
          v159 = byte_1ECF4C288;
        }
        else
        {
          v159 = byte_1ECF4C288;
          if (HIBYTE(word_1ECF4C286))
            v42 = 0;
          else
            v42 = byte_1ECF4C288 == 0;
          if (v42 && byte_1ECF4C289 == 0)
          {
            JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)49594>((uint64_t)v177, 0, 0, &v168);
            goto LABEL_25;
          }
          if (!a2)
            goto LABEL_83;
        }
        v153 = *((_QWORD *)a2 + 15);
        if (v153)
        {
          if ((*(_BYTE *)(v153 + 12) & 0xFE) == 4 && BYTE1(dword_1ECF4C28A) != 0)
          {
            v161 = 1;
LABEL_84:
            if (v159)
              v155 = 1;
            else
              v155 = v161;
            JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v177, v155, 0, 0, "JITMathIC: generating out of line fast IC snippet", &v168);
LABEL_25:
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=((_QWORD *)(a1 + 8), &v168, v44, v45, v46, v47, v48, v49);
            JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v168, v50, v51, v52, v53, v54, v55, v56);
            if (!v176[24])
              JSC::ftlThunkAwareRepatchCall((uint64_t)a2, *(_QWORD *)(a1 + 40), a3, v57, v58, v59, v60, v61);
            JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(a2, (uint64_t *)a1);
            JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v177, v62, v63, v64, v65, v66, v67, v68);
            v76 = v174;
            if (v176 == (_BYTE *)v174 || !v174)
              return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v179, v69, v70, v71, v72, v73, v74, v75);
            v174 = 0;
            LODWORD(v175) = 0;
LABEL_30:
            WTF::fastFree((unint64_t)v76, v69, v70, v71, v72, v73, v74, v75);
            return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v179, v69, v70, v71, v72, v73, v74, v75);
          }
        }
LABEL_83:
        v161 = HIBYTE(word_1ECF4C286) != 0;
        goto LABEL_84;
      }
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v177, v33, v34, v35, v36, v37, v38, v39);
    }
    v78 = v174;
    if (v176 != (_BYTE *)v174 && v174)
    {
      v174 = 0;
      LODWORD(v175) = 0;
      WTF::fastFree((unint64_t)v78, v18, v19, v20, v21, v22, v23, v24);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v179, v18, v19, v20, v21, v22, v23, v24);
  }
  JSC::ftlThunkAwareRepatchCall((uint64_t)a2, *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v179, a2);
  v171 = (WTF *)&v173;
  v172 = 2;
  v168 = (WTF *)v170;
  v169 = 2;
  JSC::JITNegGenerator::generateFastPath((unsigned __int8 *)(a1 + 57), (uint64_t)v179, (uint64_t)&v171, (uint64_t)&v168, *(unsigned __int16 **)a1, v12 != 4, v79, v80);
  JSC::ARM64Assembler::label(v180, v81, v82, v83, v84, v85, v86, v87, v177);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v181, 335544320, v88, v89, v90, v91, v92, v93);
  if (v181[272])
    v100 = 69;
  else
    v100 = 65;
  v164[0] = v177[0];
  v164[1] = 0;
  v165 = v100;
  v166 = 15;
  v167 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v171, v164, v94, v95, v96, v97, v98, v99);
  if (HIDWORD(v172))
  {
    v106 = *(_QWORD *)(a1 + 32);
    v107 = (unsigned int *)v171;
    v108 = 12 * HIDWORD(v172);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v107, v106, (uint64_t)v179, v101, v102, v103, v104, v105);
      v107 += 3;
      v108 -= 12;
    }
    while (v108);
  }
  if (HIDWORD(v169))
  {
    v109 = *(_QWORD *)(a1 + 48);
    v110 = (unsigned int *)v168;
    v111 = 12 * HIDWORD(v169);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v110, v109, (uint64_t)v179, v101, v102, v103, v104, v105);
      v110 += 3;
      v111 -= 12;
    }
    while (v111);
  }
  JSC::LinkBuffer::LinkBuffer((uint64_t)v177, (uint64_t)v179, (uint64_t)a2, 6, 0);
  if (!v178)
  {
    JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v177, v112, v113, v114, v115, v116, v117, v118);
    v152 = v168;
    if (v170 != (_BYTE *)v168 && v168)
    {
      v168 = 0;
      LODWORD(v169) = 0;
      WTF::fastFree((unint64_t)v152, v69, v70, v71, v72, v73, v74, v75);
    }
    v76 = v171;
    if (&v173 == (int *)v171 || !v171)
      return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v179, v69, v70, v71, v72, v73, v74, v75);
    v171 = 0;
    LODWORD(v172) = 0;
    goto LABEL_30;
  }
  if (a2)
  {
    v119 = *((_QWORD *)a2 + 15);
    if (v119)
    {
      if ((*(_BYTE *)(v119 + 12) & 0xFE) == 4 && BYTE1(dword_1ECF4C28A) != 0)
      {
        v160 = byte_1ECF4C288;
LABEL_89:
        v156 = *((_QWORD *)a2 + 15);
        if (v156)
        {
          if ((*(_BYTE *)(v156 + 12) & 0xFE) == 4 && BYTE1(dword_1ECF4C28A) != 0)
          {
            v162 = 1;
LABEL_96:
            if (v160)
              v158 = 1;
            else
              v158 = v162;
            JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v177, v158, 0, 0, "JITMathIC: generating out of line IC snippet", v163);
            goto LABEL_63;
          }
        }
LABEL_95:
        v162 = HIBYTE(word_1ECF4C286) != 0;
        goto LABEL_96;
      }
    }
  }
  v160 = byte_1ECF4C288;
  if (HIBYTE(word_1ECF4C286))
    v121 = 0;
  else
    v121 = byte_1ECF4C288 == 0;
  if (!v121 || byte_1ECF4C289 != 0)
  {
    if (!a2)
      goto LABEL_95;
    goto LABEL_89;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)49594>((uint64_t)v177, 0, 0, v163);
LABEL_63:
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=((_QWORD *)(a1 + 8), v163, v123, v124, v125, v126, v127, v128);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v163, v129, v130, v131, v132, v133, v134, v135);
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v177, v136, v137, v138, v139, v140, v141, v142);
  v150 = v168;
  if (v170 != (_BYTE *)v168 && v168)
  {
    v168 = 0;
    LODWORD(v169) = 0;
    WTF::fastFree((unint64_t)v150, v143, v144, v145, v146, v147, v148, v149);
  }
  v151 = v171;
  if (&v173 != (int *)v171 && v171)
  {
    v171 = 0;
    LODWORD(v172) = 0;
    WTF::fastFree((unint64_t)v151, v143, v144, v145, v146, v147, v148, v149);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v179, v143, v144, v145, v146, v147, v148, v149);
  return JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(a2, (uint64_t *)a1);
}

unint64_t operationArithNegateOptimize(JSC::VM **a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  int v35;
  int v36;
  int v37;
  double v38;
  JSC::JSObject *v39;
  uint64_t vars0;

  v8 = a2;
  v10 = a1[7];
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  v12 = (_WORD *)*a3;
  if (*a3)
  {
    v13 = (unsigned __int16)*v12;
    v14 = (v13 >> 7) & 6 | 1;
    if (a2 < 0xFFFE000000000000)
      LOBYTE(v14) = (v13 >> 7) & 5 | 2;
    if (a2 >> 49)
      v15 = v14;
    else
      v15 = (v13 >> 7) & 3 | 4;
    *v12 = v13 & 0xFC7F | (v15 << 7);
  }
  JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine((uint64_t)a3, *(JSC::CodeBlock **)(v11 + 16), (int *)operationArithNegate, a4, a5, a6, a7, a8);
  if ((v8 & 0xFFFE000000000002) == 0)
    v8 = JSC::JSCell::toPrimitive(v8, a1, (JSC::Structure *)1, v17, v18, v19, v20, v21);
  v39 = (JSC::JSObject *)v8;
  if (*((_DWORD *)v10 + 20))
  {
    v35 = *((_DWORD *)v10 + 20);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    if (v8 >= 0xFFFE000000000000)
    {
      v31 = (double)(int)v8;
      goto LABEL_21;
    }
    if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v31 = v8 - 0x2000000000000;
      goto LABEL_21;
    }
LABEL_20:
    JSC::JSValue::toNumberSlowCase(&v39, (JSC::JSGlobalObject *)a1, v16, v17, v18, v19, v20, v21, v22);
LABEL_21:
    if (*((_DWORD *)v10 + 20))
    {
      v36 = *((_DWORD *)v10 + 20);
      if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      {
        v38 = v31;
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
        v31 = v38;
      }
      if (*((_QWORD *)v10 + 2))
        return 0;
    }
    v32 = -v31;
    if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v33 = (int)v32, (double)(int)v33 == v32)
      && ((_DWORD)v33 || (*(_QWORD *)&v32 & 0x8000000000000000) == 0))
    {
      return v33 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v32 + 0x2000000000000;
    }
  }
  if (*(_BYTE *)(v8 + 5) != 3)
    goto LABEL_20;
  v23 = a1[7];
  if (!*(_DWORD *)(v8 + 8))
    return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v17);
  v30 = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v8, v16, v17);
  if (*((_DWORD *)v23 + 20))
  {
    v37 = *((_DWORD *)v23 + 20);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*((_QWORD *)v23 + 2))
      return 0;
  }
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v8 + 16) == 0;
  return v30;
}

JSC::JSBigInt *operationValueSub(JSC::JSGlobalObject *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  JSC::VM *v19;
  int v20;
  double v21;
  uint64_t v22;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  double v27;
  JSC::VM *v28;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v28 = (JSC::VM *)v12;
  if ((unint64_t)a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_46;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_53:
    v10 = 0;
    goto LABEL_2;
  }
  if (v10 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_2;
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 3)
      goto LABEL_2;
    goto LABEL_44;
  }
  if (v10 < 0xFFFE000000000000)
  {
LABEL_44:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_45;
  }
  *(double *)a9.i64 = (double)(int)v10;
LABEL_45:
  if (*(_DWORD *)(v12 + 80))
  {
    v26 = a9.i64[0];
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v26;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_53;
  }
LABEL_46:
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v22 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v22)
    && ((_DWORD)v22 || (a9.i64[0] & 0x8000000000000000) == 0))
  {
    v10 = v22 | 0xFFFE000000000000;
  }
  else
  {
    v10 = a9.i64[0] + 0x2000000000000;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v9 >> 49)
    goto LABEL_4;
  v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_66;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_73:
    v9 = 0;
    goto LABEL_4;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_4;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_4;
    goto LABEL_64;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_64:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_65;
  }
  v21 = (double)(int)v9;
LABEL_65:
  if (*((_DWORD *)v19 + 20))
  {
    v27 = v21;
    v25 = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8);
    v21 = v27;
    if (v25)
      goto LABEL_73;
  }
LABEL_66:
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v24 = (int)v21, v21 == (double)(int)v24)
    && ((_DWORD)v24 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
  {
    v9 = v24 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v21 + 0x2000000000000;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = v13 - v14;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
  }
  else
  {
    return JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9);
  }
}

unint64_t operationValueSubProfiled(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  int v28;
  JSC::VM *v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *var38[8];

  v10 = a3;
  v11 = a2;
  v13 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v13 + 40) = var38[7];
  v14 = (unsigned __int16)*a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 3 | 4;
  v17 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v17) = (*a4 >> 10) & 5 | 2;
  if (v15)
    LOWORD(v16) = v17;
  v18 = a3 >> 49;
  v19 = (v14 >> 7) & 3 | 4;
  v20 = (v14 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v20) = (v14 >> 7) & 5 | 2;
  if (v18)
    LOBYTE(v19) = v20;
  *a4 = v14 & 0xE07F | ((_WORD)v16 << 10) | (v19 << 7);
  v39 = (JSC::VM *)v13;
  if (!v15)
  {
    if ((a2 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(a2 + 5);
      if (v28 == 3)
        goto LABEL_10;
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_67;
      }
      v11 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    var38[0] = (JSC::JSObject *)v11;
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_74:
      v11 = 0;
      goto LABEL_10;
    }
    if (v11 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      if (v11 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v11;
LABEL_66:
        if (!*(_DWORD *)(v13 + 80)
          || (v37 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v37, !hasExceptionsAfterHandlingTraps))
        {
LABEL_67:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v33 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v33)
            && ((_DWORD)v33 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v11 = v33 | 0xFFFE000000000000;
          }
          else
          {
            v11 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_74;
      }
    }
    else if (*(_BYTE *)(v11 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_66;
  }
LABEL_10:
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_48;
  }
  if (v18)
    goto LABEL_12;
  v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v10 + 5);
    if (v30 == 3)
      goto LABEL_12;
    if (v30 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v10, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_87;
    }
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_94:
    v10 = 0;
    goto LABEL_12;
  }
  if (v10 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_12;
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 3)
      goto LABEL_12;
    goto LABEL_85;
  }
  if (v10 < 0xFFFE000000000000)
  {
LABEL_85:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_86;
  }
  v31 = (double)(int)v10;
LABEL_86:
  if (*((_DWORD *)v29 + 20))
  {
    v38 = v31;
    v36 = JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v31 = v38;
    if (v36)
      goto LABEL_94;
  }
LABEL_87:
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v35 = (int)v31, v31 == (double)(int)v35)
    && ((_DWORD)v35 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
  {
    v10 = v35 | 0xFFFE000000000000;
  }
  else
  {
    v10 = *(_QWORD *)&v31 + 0x2000000000000;
  }
LABEL_12:
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_48:
    v25 = 0;
    goto LABEL_24;
  }
  if (v11 >> 49 && v10 >> 49)
  {
    v21 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v21 = v11 - 0x2000000000000;
    v22 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v10 - 0x2000000000000;
    v23 = v21 - v22;
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v24 = (int)v23, v23 == (double)(int)v24)
      && ((_DWORD)v24 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
    {
      v25 = v24 | 0xFFFE000000000000;
    }
    else
    {
      v25 = *(_QWORD *)&v23 + 0x2000000000000;
    }
  }
  else
  {
    if ((v11 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v11 + 5) != 3
      || (v10 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v10 + 5) != 3)
    {
      v32 = JSC::throwTypeError((unint64_t)a1, &v39, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
    }
    else
    {
      v32 = (uint64_t)JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v11, v10);
    }
    v25 = v32;
  }
LABEL_24:
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v25 >> 49)
    {
      v26 = 27;
    }
    else if (v25 && (v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 3)
    {
      v26 = 32;
    }
    else
    {
      v26 = 4;
    }
    *a4 |= v26;
  }
  return v25;
}

JSC::JSBigInt *operationValueSubOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, _WORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  JSC::VM *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  int v27;
  JSC::VM *v28;
  int v29;
  double v30;
  uint64_t v31;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  double v36;
  JSC::VM *v37;
  JSC::JSObject *v38;
  uint64_t vars0;

  v9 = a3;
  v10 = a2;
  v12 = vars0;
  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if (*a4)
    JSC::BinaryArithProfile::observeLHSAndRHS(*a4, a2, a3);
  JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v12 + 16), (int *)operationValueSubNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v37 = v21;
  if (!(v10 >> 49))
  {
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v27 = *(unsigned __int8 *)(v10 + 5);
      if (v27 == 3)
        goto LABEL_4;
      if (v27 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v10, a1, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_48;
      }
      v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)a1, (JSC::Structure *)1, v15, v16, v17, v18, v19);
    }
    v38 = (JSC::JSObject *)v10;
    if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    {
LABEL_55:
      v10 = 0;
      goto LABEL_4;
    }
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_4;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)v20.i64 = (double)(int)v10;
LABEL_47:
        if (!*((_DWORD *)v21 + 20)
          || (v35 = v20.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19), v20.i64[0] = v35, !hasExceptionsAfterHandlingTraps))
        {
LABEL_48:
          if ((v20.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v31 = (int)*(double *)v20.i64, *(double *)v20.i64 == (double)(int)v31)
            && ((_DWORD)v31 || (v20.i64[0] & 0x8000000000000000) == 0))
          {
            v10 = v31 | 0xFFFE000000000000;
          }
          else
          {
            v10 = v20.i64[0] + 0x2000000000000;
          }
          goto LABEL_4;
        }
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_4;
    }
    JSC::JSValue::toNumberSlowCase(&v38, a1, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_47;
  }
LABEL_4:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    return 0;
  if (v9 >> 49)
    goto LABEL_6;
  v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v29 = *(unsigned __int8 *)(v9 + 5);
    if (v29 == 3)
      goto LABEL_6;
    if (v29 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_68;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, v15, v16, v17, v18, v19);
  }
  v38 = (JSC::JSObject *)v9;
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28, v13, v14, v15, v16, v17, v18, v19))
  {
LABEL_75:
    v9 = 0;
    goto LABEL_6;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_6;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_6;
    goto LABEL_66;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_66:
    JSC::JSValue::toNumberSlowCase(&v38, a1, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_67;
  }
  v30 = (double)(int)v9;
LABEL_67:
  if (*((_DWORD *)v28 + 20))
  {
    v36 = v30;
    v34 = JSC::VM::hasExceptionsAfterHandlingTraps(v28, v13, v14, v15, v16, v17, v18, v19);
    v30 = v36;
    if (v34)
      goto LABEL_75;
  }
LABEL_68:
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v33 = (int)v30, v30 == (double)(int)v33)
    && ((_DWORD)v33 || (*(_QWORD *)&v30 & 0x8000000000000000) == 0))
  {
    v9 = v33 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v30 + 0x2000000000000;
  }
LABEL_6:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v13, v14, v15, v16, v17, v18, v19))
    return 0;
  if (v10 >> 49 && v9 >> 49)
  {
    v22 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v10 - 0x2000000000000;
    v23 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v23 = v9 - 0x2000000000000;
    v24 = v22 - v23;
    if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v25 = (int)v24, v24 == (double)(int)v25)
      && ((_DWORD)v25 || (*(_QWORD *)&v24 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v25 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v24 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v37, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
  }
  else
  {
    return JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9);
  }
}

JSC::JSBigInt *operationValueSubNoOptimize(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  double v31;
  JSC::VM *v32;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v32 = (JSC::VM *)v12;
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_52:
      if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v24 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v24)
        && ((_DWORD)v24 || (a9.i64[0] & 0x8000000000000000) == 0))
      {
        v10 = v24 | 0xFFFE000000000000;
      }
      else
      {
        v10 = a9.i64[0] + 0x2000000000000;
      }
      goto LABEL_2;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v25 = *(_DWORD *)(v12 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_63:
      v10 = 0;
      goto LABEL_2;
    }
  }
  if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_51:
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_52;
        v30 = a9.i64[0];
        v26 = *(_DWORD *)(v12 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a9.i64[0] = v30;
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_52;
        goto LABEL_63;
      }
LABEL_50:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_51;
    }
    if (*(_BYTE *)(v10 + 5) != 3)
      goto LABEL_50;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80))
  {
    v22 = *(_DWORD *)(v12 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 >> 49)
    goto LABEL_4;
  v19 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_78:
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v27 = (int)v21, v21 == (double)(int)v27)
        && ((_DWORD)v27 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
      {
        v9 = v27 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *(_QWORD *)&v21 + 0x2000000000000;
      }
      goto LABEL_4;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v19 + 80))
  {
    v28 = *(_DWORD *)(v19 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v19 + 16))
    {
LABEL_89:
      v9 = 0;
      goto LABEL_4;
    }
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v21 = (double)(int)v9;
LABEL_77:
        if (!*(_DWORD *)(v19 + 80))
          goto LABEL_78;
        v31 = v21;
        v29 = *(_DWORD *)(v19 + 80);
        if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v21 = v31;
        if (!*(_QWORD *)(v19 + 16))
          goto LABEL_78;
        goto LABEL_89;
      }
LABEL_76:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_77;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_76;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80))
  {
    v23 = *(_DWORD *)(v12 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = v13 - v14;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v32, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
  }
  else
  {
    return JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9);
  }
}

uint64_t JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  unint64_t v12;
  pthread_key_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  pthread_key_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  WTF **p_start;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  WTF *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  JSC::ExecutableMemoryHandle *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t result;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  BOOL v115;
  char v116;
  WTF *v117;
  uint64_t v118;
  unint64_t v119;
  pthread_key_t *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unsigned int v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int i;
  unsigned int v140;
  char v141;
  unsigned int v142;
  int *v143;
  int *v144;
  int v145;
  char *v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  unint64_t v153;
  pthread_key_t *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  unsigned int v164;
  int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  __int128 *v175;
  uint64_t v176;
  size_t v177;
  unsigned int *v178;
  WTF **v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  JSC::ExecutableMemoryHandle *v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  WTF *v194;
  WTF *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  BOOL v238;
  char v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  _BOOL4 v274;
  _BOOL4 v275;
  int *v276;
  WTF ***v277;
  JSC::ExecutableMemoryHandle *v278;
  int v279;
  int v280;
  char v281;
  __int16 v282;
  char v283;
  WTF *v284;
  JSC::ExecutableMemoryHandle *v285;
  _BYTE v286[24];
  WTF *v287;
  uint64_t v288;
  int v289;
  WTF *v290;
  uint64_t v291;
  _BYTE v292[32];
  uint64_t *v293[2];
  int v294[2];
  WTF **v295;
  JSC::ExecutableMemoryHandle *v296;
  char v297;
  WTF **v298;
  size_t len;
  uint64_t v300;
  WTF *v301;
  _BYTE v302[128];
  unsigned int v303;
  char v304;
  int v305;
  unsigned int v306;
  __int128 start;
  __int128 v308;
  uint64_t v309;
  _BYTE v310[24];
  char v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  WTF *v315;
  _BYTE v316[128];
  unsigned int v317;
  int v318;
  int v319;
  char v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _BYTE *v324;
  char v325;
  uint64_t v326;
  int v327;
  _BYTE *v328;
  char v329;
  uint64_t v330;
  int v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v8 = a2;
  v335 = *MEMORY[0x1E0C80C00];
  v293[1] = (uint64_t *)a1;
  *(_QWORD *)v294 = a2;
  v293[0] = (uint64_t *)v294;
  v10 = *(_QWORD *)(a2 + 120);
  if (v10)
    LOBYTE(v10) = *(_BYTE *)(v10 + 12);
  v11 = v10 & 0xFE;
  if (*(_BYTE *)(a1 + 56))
  {
    v276 = a3;
    v310[0] = 0;
    v311 = 0;
    v312 = 0;
    v313 = 0;
    v314 = 0x8000000080000000;
    v315 = (WTF *)v316;
    v317 = 128;
    v12 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v12 != -1)
    {
      v298 = &v284;
      v287 = (WTF *)&v298;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v287, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v13 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v21 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v21)
    {
      v21 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v21, v13);
    }
    v22 = *(WTF **)v21;
    if (*(_QWORD *)v21 != v21 + 8)
    {
      v23 = *(_DWORD *)(v21 + 136);
      if (v317 < v23)
      {
        if (v315 && v315 != (WTF *)v316)
        {
          WTF::fastFree((unint64_t)v315, v14, v15, v16, v17, v18, v19, v20);
          v22 = *(WTF **)v21;
          v23 = *(_DWORD *)(v21 + 136);
        }
        v315 = v22;
        v317 = v23;
        *(_QWORD *)v21 = v21 + 8;
        *(_DWORD *)(v21 + 136) = 128;
      }
    }
    v320 = 1;
    v318 = 0;
    v319 = 0;
    v323 = 0u;
    v322 = 0u;
    v321 = 0u;
    v324 = v310;
    v325 = 16;
    v326 = 0;
    v327 = 0x10000;
    v328 = v310;
    v329 = 17;
    v330 = 0;
    v331 = 0x20000;
    v332 = 0;
    v333 = v8;
    v24 = *(_QWORD *)(v8 + 192);
    if (!v24)
      v24 = v8;
    v25 = *(_QWORD *)(v24 + 120);
    if (v25)
    {
      v26 = *(unsigned __int8 *)(v25 + 12);
      if ((v26 & 0xFE) != 2)
      {
        if (v26)
        {
          result = 1878;
          __break(0xC471u);
          return result;
        }
      }
    }
    v334 = v24;
    v287 = (WTF *)-1;
    v288 = -1;
    v289 = 0;
    v290 = (WTF *)v292;
    v291 = 2;
    JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateInline(a1, (uint64_t)v310, (uint64_t)&v287, v11 != 4, v17, v18, v19, v20);
    *(_BYTE *)(a1 + 56) = 0;
    if (v34)
    {
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26432>((uint64_t)v310, *(_QWORD *)(a1 + 32), v28, v29, v30, v31, v32, v33);
      if (HIDWORD(v291))
      {
        v40 = *(_QWORD *)(a1 + 48);
        v41 = (unsigned int *)v290;
        v42 = 12 * HIDWORD(v291);
        do
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v41, v40, (uint64_t)v310, v35, v36, v37, v38, v39);
          v41 += 3;
          v42 -= 12;
        }
        while (v42);
      }
      v298 = 0;
      len = 0;
      v300 = *(_QWORD *)v294;
      v301 = (WTF *)v302;
      v303 = 128;
      v43 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
      if (v43 != -1)
      {
        v284 = (WTF *)&v277;
        v295 = &v284;
        std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v295, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
      }
      v44 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
      v52 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
      if (!v52)
      {
        v52 = WTF::fastMalloc((WTF *)0x98);
        WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v52, v44);
      }
      v53 = *(WTF **)v52;
      if (*(_QWORD *)v52 != v52 + 8)
      {
        v54 = *(_DWORD *)(v52 + 136);
        if (v303 < v54)
        {
          if (v301 && v301 != (WTF *)v302)
          {
            WTF::fastFree((unint64_t)v301, v45, v46, v47, v48, v49, v50, v51);
            v53 = *(WTF **)v52;
            v54 = *(_DWORD *)(v52 + 136);
          }
          v301 = v53;
          v303 = v54;
          *(_QWORD *)v52 = v52 + 8;
          *(_DWORD *)(v52 + 136) = 128;
        }
      }
      v304 = 1;
      v305 = 0;
      v306 = 6;
      start = 0u;
      v308 = 0u;
      v309 = 0;
      JSC::LinkBuffer::linkCode((uint64_t)&v298, (uint64_t)v310, 0, v47, v48, v49, v50, v51);
      if ((_BYTE)v305)
      {
        v274 = *(_QWORD *)v294
            && (v62 = *(_QWORD *)(*(_QWORD *)v294 + 120)) != 0
            && ((*(_BYTE *)(v62 + 12) & 0xFE) == 4 ? (v63 = BYTE1(dword_1ECF4C28A) == 0) : (v63 = 1), !v63)
            || HIBYTE(word_1ECF4C286) != 0;
        if (!v274 && !byte_1ECF4C288 && !byte_1ECF4C289)
        {
          if (DWORD1(v308))
          {
            v106 = (uint64_t *)*((_QWORD *)&start + 1);
            v107 = 8 * DWORD1(v308);
            do
            {
              v108 = *v106++;
              (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v108 + 16))(v108, &v298);
              v107 -= 8;
            }
            while (v107);
          }
          p_start = (WTF **)&start;
          if (HIDWORD(v309))
          {
            v109 = (uint64_t *)*((_QWORD *)&v308 + 1);
            v110 = 8 * HIDWORD(v309);
            do
            {
              v111 = *v109++;
              (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v111 + 16))(v111, &v298);
              v110 -= 8;
            }
            while (v110);
          }
          v65 = v306;
          v66 = len;
          *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v306 / 2] += len;
          ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v65);
          sys_icache_invalidate((void *)start, v66);
          v74 = (unsigned int *)v298;
          if (v298)
          {
            do
              v272 = __ldaxr(v74);
            while (__stlxr(v272 + 1, v74));
            p_start = (WTF **)(v74 + 2);
          }
          v75 = *p_start;
          v284 = v75;
          v285 = (JSC::ExecutableMemoryHandle *)v74;
          if (byte_1ECF4C2A2)
            JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v298, (uint64_t)&v284, 0, 0);
          v295 = (WTF **)v75;
          v296 = 0;
          if (v74)
          {
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 + 1, v74));
            v77 = (unsigned int *)v296;
            v296 = (JSC::ExecutableMemoryHandle *)v74;
            if (v77)
            {
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                atomic_store(1u, v77);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v77, v67, v68, v69, v70, v71, v72, v73);
                WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
              }
            }
            v80 = (unsigned int *)v285;
            v285 = 0;
            if (v80)
            {
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                atomic_store(1u, v80);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v80, v67, v68, v69, v70, v71, v72, v73);
                WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
              }
            }
          }
          goto LABEL_59;
        }
        if (*(_QWORD *)v294)
        {
          v112 = *(_QWORD *)(*(_QWORD *)v294 + 120);
          v113 = HIBYTE(word_1ECF4C286);
          if (v112)
          {
            v114 = *(_BYTE *)(v112 + 12) & 0xFE;
            if (BYTE1(dword_1ECF4C28A))
              v115 = v114 == 4;
            else
              v115 = 0;
            v116 = 1;
            if (v115 || HIBYTE(word_1ECF4C286))
              goto LABEL_87;
            goto LABEL_206;
          }
        }
        else
        {
          v113 = HIBYTE(word_1ECF4C286);
        }
        if (v113)
        {
          v116 = 1;
LABEL_87:
          JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v298, v116, 0, 0, "JITMathIC: generating out of line fast IC snippet", &v295);
LABEL_59:
          v83 = v296;
          v296 = 0;
          v84 = *(unsigned int **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v295;
          *(_QWORD *)(a1 + 16) = v83;
          if (v84)
          {
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              atomic_store(1u, v84);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v67, v68, v69, v70, v71, v72, v73);
              WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
            }
            v87 = (unsigned int *)v296;
            v296 = 0;
            if (v87)
            {
              do
              {
                v88 = __ldaxr(v87);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v87));
              if (!v89)
              {
                atomic_store(1u, v87);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v87, v67, v68, v69, v70, v71, v72, v73);
                WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
              }
            }
          }
          if (!v292[24])
            JSC::ftlThunkAwareRepatchCall(*(uint64_t *)v294, *(_QWORD *)(a1 + 40), v276, v69, v70, v71, v72, v73);
          JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v293);
          JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v90, v91, v92, v93, v94, v95, v96);
          v104 = v290;
          if (v292 != (_BYTE *)v290)
          {
            if (v290)
            {
              v290 = 0;
              LODWORD(v291) = 0;
              WTF::fastFree((unint64_t)v104, v97, v98, v99, v100, v101, v102, v103);
            }
          }
          return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v97, v98, v99, v100, v101, v102, v103);
        }
LABEL_206:
        v116 = byte_1ECF4C288 != 0;
        goto LABEL_87;
      }
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v55, v56, v57, v58, v59, v60, v61);
    }
    v117 = v290;
    if (v292 != (_BYTE *)v290 && v290)
    {
      v290 = 0;
      LODWORD(v291) = 0;
      WTF::fastFree((unint64_t)v117, v27, v28, v29, v30, v31, v32, v33);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v27, v28, v29, v30, v31, v32, v33);
    v8 = *(_QWORD *)v294;
    a3 = v276;
  }
  JSC::ftlThunkAwareRepatchCall(v8, *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
  v118 = *(_QWORD *)v294;
  v310[0] = 0;
  v311 = 0;
  v312 = 0;
  v313 = 0;
  v314 = 0x8000000080000000;
  v315 = (WTF *)v316;
  v317 = 128;
  v119 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v119 != -1)
  {
    v298 = &v284;
    v287 = (WTF *)&v298;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v287, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v120 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v128 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v128)
  {
    v128 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v128, v120);
  }
  v129 = *(WTF **)v128;
  if (*(_QWORD *)v128 != v128 + 8)
  {
    v130 = *(_DWORD *)(v128 + 136);
    if (v317 < v130)
    {
      if (v315 && v315 != (WTF *)v316)
      {
        WTF::fastFree((unint64_t)v315, v121, v122, v123, v124, v125, v126, v127);
        v129 = *(WTF **)v128;
        v130 = *(_DWORD *)(v128 + 136);
      }
      v315 = v129;
      v317 = v130;
      *(_QWORD *)v128 = v128 + 8;
      *(_DWORD *)(v128 + 136) = 128;
    }
  }
  v131 = 0;
  v320 = 1;
  v318 = 0;
  v319 = 0;
  v321 = 0u;
  v322 = 0u;
  v323 = 0u;
  v325 = 16;
  v327 = 0x10000;
  v324 = v310;
  v326 = 0;
  v328 = v310;
  v329 = 17;
  v330 = 0;
  v331 = 0x20000;
  v332 = 0;
  v333 = v118;
  if (v118)
    v131 = JSC::CodeBlock::baselineAlternative(v118);
  v334 = v131;
  v287 = (WTF *)&v289;
  v288 = 2;
  v284 = (WTF *)v286;
  v285 = (JSC::ExecutableMemoryHandle *)2;
  if (!JSC::JITSubGenerator::generateFastPath((_BYTE *)(a1 + 57), (uint64_t)v310, (uint64_t)&v287, (uint64_t)&v284, *(unsigned __int16 **)a1, v11 != 4, v126, v127))
  {
    v165 = 1;
    goto LABEL_170;
  }
  for (i = v318; i < SHIDWORD(v314); v318 = i)
  {
    if (i + 4 > v317)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v315, (uint64_t)v132, v133, v134, v135, v136, v137, v138);
      i = v318;
    }
    *(_DWORD *)((char *)v315 + i) = -721215457;
    i = v318 + 4;
  }
  v140 = i;
  if (i + 4 > v317)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v315, (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v140 = v318;
  }
  *(_DWORD *)((char *)v315 + v140) = 335544320;
  v318 += 4;
  if (v332)
    v141 = 69;
  else
    v141 = 65;
  v279 = i;
  v280 = 0;
  v281 = v141;
  v282 = 15;
  v283 = -1;
  v142 = HIDWORD(v288);
  if (i != -1)
  {
    if (HIDWORD(v288) == (_DWORD)v288)
    {
      v143 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v287, (void *)(HIDWORD(v288) + 1), (unint64_t)&v279, v134, v135, v136, v137, v138);
      v145 = *v143;
      v144 = v143 + 1;
      v146 = (char *)v287 + 12 * HIDWORD(v288);
      *(_DWORD *)v146 = v145;
    }
    else
    {
      v144 = &v280;
      v146 = (char *)v287 + 12 * HIDWORD(v288);
      *(_DWORD *)v146 = i;
    }
    *(_QWORD *)(v146 + 4) = *(_QWORD *)v144;
    v142 = ++HIDWORD(v288);
  }
  if (v142)
  {
    v147 = *(_QWORD *)(a1 + 32);
    v148 = (unsigned int *)v287;
    v149 = 12 * v142;
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v148, v147, (uint64_t)v310, v134, v135, v136, v137, v138);
      v148 += 3;
      v149 -= 12;
    }
    while (v149);
  }
  if (HIDWORD(v285))
  {
    v150 = *(_QWORD *)(a1 + 48);
    v151 = (unsigned int *)v284;
    v152 = 12 * HIDWORD(v285);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v151, v150, (uint64_t)v310, v134, v135, v136, v137, v138);
      v151 += 3;
      v152 -= 12;
    }
    while (v152);
  }
  v298 = 0;
  len = 0;
  v300 = *(_QWORD *)v294;
  v301 = (WTF *)v302;
  v303 = 128;
  v153 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v153 != -1)
  {
    v295 = (WTF **)&v297;
    v277 = &v295;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v277, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v154 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v162 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v162)
  {
    v162 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v162, v154);
  }
  v163 = *(WTF **)v162;
  if (*(_QWORD *)v162 != v162 + 8)
  {
    v164 = *(_DWORD *)(v162 + 136);
    if (v303 < v164)
    {
      if (v301 && v301 != (WTF *)v302)
      {
        WTF::fastFree((unint64_t)v301, v155, v156, v157, v158, v159, v160, v161);
        v163 = *(WTF **)v162;
        v164 = *(_DWORD *)(v162 + 136);
      }
      v301 = v163;
      v303 = v164;
      *(_QWORD *)v162 = v162 + 8;
      *(_DWORD *)(v162 + 136) = 128;
    }
  }
  v165 = 1;
  v304 = 1;
  v305 = 0;
  v306 = 6;
  start = 0u;
  v308 = 0u;
  v309 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v298, (uint64_t)v310, 0, v157, v158, v159, v160, v161);
  if ((_BYTE)v305)
  {
    v275 = *(_QWORD *)v294
        && (v173 = *(_QWORD *)(*(_QWORD *)v294 + 120)) != 0
        && ((*(_BYTE *)(v173 + 12) & 0xFE) == 4 ? (v174 = BYTE1(dword_1ECF4C28A) == 0) : (v174 = 1), !v174)
        || HIBYTE(word_1ECF4C286) != 0;
    if (!v275 && !byte_1ECF4C288 && !byte_1ECF4C289)
    {
      if (DWORD1(v308))
      {
        v197 = (uint64_t *)*((_QWORD *)&start + 1);
        v198 = 8 * DWORD1(v308);
        do
        {
          v199 = *v197++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v199 + 16))(v199, &v298);
          v198 -= 8;
        }
        while (v198);
      }
      v175 = &start;
      if (HIDWORD(v309))
      {
        v200 = (uint64_t *)*((_QWORD *)&v308 + 1);
        v201 = 8 * HIDWORD(v309);
        do
        {
          v202 = *v200++;
          (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v202 + 16))(v202, &v298);
          v201 -= 8;
        }
        while (v201);
      }
      v176 = v306;
      v177 = len;
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v306 / 2] += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v176);
      sys_icache_invalidate((void *)start, v177);
      v178 = (unsigned int *)v298;
      if (v298)
      {
        do
          v273 = __ldaxr(v178);
        while (__stlxr(v273 + 1, v178));
        v175 = (__int128 *)(v178 + 2);
      }
      v179 = *(WTF ***)v175;
      v295 = v179;
      v296 = (JSC::ExecutableMemoryHandle *)v178;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v298, (uint64_t)&v295, 0, 0);
      v277 = (WTF ***)v179;
      v278 = 0;
      if (v178)
      {
        do
          v180 = __ldaxr(v178);
        while (__stlxr(v180 + 1, v178));
        v181 = (unsigned int *)v278;
        v278 = (JSC::ExecutableMemoryHandle *)v178;
        if (v181)
        {
          do
          {
            v182 = __ldaxr(v181);
            v183 = v182 - 1;
          }
          while (__stlxr(v183, v181));
          if (!v183)
          {
            atomic_store(1u, v181);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v181, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
            WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
          }
        }
        v184 = (unsigned int *)v296;
        v296 = 0;
        if (v184)
        {
          do
          {
            v185 = __ldaxr(v184);
            v186 = v185 - 1;
          }
          while (__stlxr(v186, v184));
          if (!v186)
          {
            atomic_store(1u, v184);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v184, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
            WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
          }
        }
      }
      goto LABEL_160;
    }
    if (*(_QWORD *)v294)
    {
      v235 = *(_QWORD *)(*(_QWORD *)v294 + 120);
      v236 = HIBYTE(word_1ECF4C286);
      if (v235)
      {
        v237 = *(_BYTE *)(v235 + 12) & 0xFE;
        if (BYTE1(dword_1ECF4C28A))
          v238 = v237 == 4;
        else
          v238 = 0;
        v239 = 1;
        if (v238 || HIBYTE(word_1ECF4C286))
          goto LABEL_194;
        goto LABEL_210;
      }
    }
    else
    {
      v236 = HIBYTE(word_1ECF4C286);
    }
    if (v236)
    {
      v239 = 1;
LABEL_194:
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v298, v239, 0, 0, "JITMathIC: generating out of line IC snippet", &v277);
LABEL_160:
      v187 = v278;
      v278 = 0;
      v188 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v277;
      *(_QWORD *)(a1 + 16) = v187;
      if (v188)
      {
        do
        {
          v189 = __ldaxr(v188);
          v190 = v189 - 1;
        }
        while (__stlxr(v190, v188));
        if (!v190)
        {
          atomic_store(1u, v188);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v188, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
          WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
        }
        v191 = (unsigned int *)v278;
        v278 = 0;
        if (v191)
        {
          do
          {
            v192 = __ldaxr(v191);
            v193 = v192 - 1;
          }
          while (__stlxr(v193, v191));
          if (!v193)
          {
            atomic_store(1u, v191);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v191, (uint64_t)v166, v167, v168, v169, v170, v171, v172);
            WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
          }
        }
      }
      v165 = 0;
      goto LABEL_169;
    }
LABEL_210:
    v239 = byte_1ECF4C288 != 0;
    goto LABEL_194;
  }
LABEL_169:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v298, v166, v167, v168, v169, v170, v171, v172);
LABEL_170:
  v194 = v284;
  if (v286 != (_BYTE *)v284 && v284 != 0)
  {
    v284 = 0;
    LODWORD(v285) = 0;
    WTF::fastFree((unint64_t)v194, v132, v133, v134, v135, v136, v137, v138);
  }
  v196 = v287;
  if (&v289 != (int *)v287 && v287)
  {
    v287 = 0;
    LODWORD(v288) = 0;
    WTF::fastFree((unint64_t)v196, v132, v133, v134, v135, v136, v137, v138);
  }
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v310, v132, v133, v134, v135, v136, v137, v138);
  if (!v165)
    return JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(v293);
  return result;
}

unint64_t operationValueSubProfiledOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unsigned __int16 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  JSC::VM *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  int v37;
  JSC::VM *v38;
  int v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  double v47;
  JSC::VM *v48;
  JSC::JSObject *v49;
  uint64_t vars0;

  v8 = a3;
  v9 = a2;
  v11 = *((_QWORD *)a1 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  v13 = *a4;
  v14 = **a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 3 | 4;
  v17 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v17) = (**a4 >> 10) & 5 | 2;
  if (v15)
    LOWORD(v16) = v17;
  v18 = a3 >> 49;
  v19 = (v14 >> 7) & 3 | 4;
  v20 = (v14 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v20) = (v14 >> 7) & 5 | 2;
  if (v18)
    LOBYTE(v19) = v20;
  *v13 = v14 & 0xE07F | ((_WORD)v16 << 10) | (v19 << 7);
  JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine((uint64_t)a4, *(_QWORD *)(v12 + 16), (int *)operationValueSubProfiledNoOptimize, (uint64_t)a4, a5, a6, a7, a8);
  v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v48 = v29;
  if (!v15)
  {
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v37 = *(unsigned __int8 *)(v9 + 5);
      if (v37 == 3)
        goto LABEL_10;
      if (v37 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v9, a1, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_67;
      }
      v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, v23, v24, v25, v26, v27);
    }
    v49 = (JSC::JSObject *)v9;
    if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, v21, v22, v23, v24, v25, v26, v27))
    {
LABEL_74:
      v9 = 0;
      goto LABEL_10;
    }
    if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        *(double *)v28.i64 = (double)(int)v9;
LABEL_66:
        if (!*((_DWORD *)v29 + 20)
          || (v46 = v28.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v29, v21, v22, v23, v24, v25, v26, v27), v28.i64[0] = v46, !hasExceptionsAfterHandlingTraps))
        {
LABEL_67:
          if ((v28.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v42 = (int)*(double *)v28.i64, *(double *)v28.i64 == (double)(int)v42)
            && ((_DWORD)v42 || (v28.i64[0] & 0x8000000000000000) == 0))
          {
            v9 = v42 | 0xFFFE000000000000;
          }
          else
          {
            v9 = v28.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_74;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(&v49, a1, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_66;
  }
LABEL_10:
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, v21, v22, v23, v24, v25, v26, v27))
    goto LABEL_48;
  if (v18)
    goto LABEL_12;
  v38 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    v39 = *(unsigned __int8 *)(v8 + 5);
    if (v39 == 3)
      goto LABEL_12;
    if (v39 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v8, a1, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_87;
    }
    v8 = JSC::JSCell::toPrimitive(v8, (JSC::VM **)a1, (JSC::Structure *)1, v23, v24, v25, v26, v27);
  }
  v49 = (JSC::JSObject *)v8;
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, v22, v23, v24, v25, v26, v27))
  {
LABEL_94:
    v8 = 0;
    goto LABEL_12;
  }
  if (v8 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_12;
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v8 + 5) == 3)
      goto LABEL_12;
    goto LABEL_85;
  }
  if (v8 < 0xFFFE000000000000)
  {
LABEL_85:
    JSC::JSValue::toNumberSlowCase(&v49, a1, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_86;
  }
  v40 = (double)(int)v8;
LABEL_86:
  if (*((_DWORD *)v38 + 20))
  {
    v47 = v40;
    v45 = JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, v22, v23, v24, v25, v26, v27);
    v40 = v47;
    if (v45)
      goto LABEL_94;
  }
LABEL_87:
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v44 = (int)v40, v40 == (double)(int)v44)
    && ((_DWORD)v44 || (*(_QWORD *)&v40 & 0x8000000000000000) == 0))
  {
    v8 = v44 | 0xFFFE000000000000;
  }
  else
  {
    v8 = *(_QWORD *)&v40 + 0x2000000000000;
  }
LABEL_12:
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, v21, v22, v23, v24, v25, v26, v27))
  {
LABEL_48:
    v34 = 0;
    goto LABEL_24;
  }
  if (v9 >> 49 && v8 >> 49)
  {
    v30 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v30 = v9 - 0x2000000000000;
    v31 = (double)(int)v8;
    if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v31 = v8 - 0x2000000000000;
    v32 = v30 - v31;
    if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v33 = (int)v32, v32 == (double)(int)v33)
      && ((_DWORD)v33 || (*(_QWORD *)&v32 & 0x8000000000000000) == 0))
    {
      v34 = v33 | 0xFFFE000000000000;
    }
    else
    {
      v34 = *(_QWORD *)&v32 + 0x2000000000000;
    }
  }
  else
  {
    if ((v9 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v9 + 5) != 3
      || (v8 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v8 + 5) != 3)
    {
      v41 = JSC::throwTypeError((unint64_t)a1, &v48, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
    }
    else
    {
      v41 = (uint64_t)JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v9, v8);
    }
    v34 = v41;
  }
LABEL_24:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v21, v22, v23, v24, v25, v26, v27))
  {
    return 0;
  }
  if (v34 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v34 >> 49)
    {
      v35 = 27;
    }
    else if (v34 && (v34 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v34 + 5) == 3)
    {
      v35 = 32;
    }
    else
    {
      v35 = 4;
    }
    *v13 |= v35;
  }
  return v34;
}

unint64_t operationValueSubProfiledNoOptimize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unsigned __int16 **a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  int v28;
  JSC::VM *v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v13 = *a4;
  v14 = **a4;
  v15 = a2 >> 49;
  v16 = (v14 >> 10) & 3 | 4;
  v17 = (v14 >> 10) & 6 | 1;
  if (a2 < 0xFFFE000000000000)
    LOWORD(v17) = (**a4 >> 10) & 5 | 2;
  if (v15)
    LOWORD(v16) = v17;
  v18 = a3 >> 49;
  v19 = (v14 >> 7) & 3 | 4;
  v20 = (v14 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    LOBYTE(v20) = (v14 >> 7) & 5 | 2;
  if (v18)
    LOBYTE(v19) = v20;
  *v13 = v14 & 0xE07F | ((_WORD)v16 << 10) | (v19 << 7);
  v39 = (JSC::VM *)v12;
  if (!v15)
  {
    if ((a2 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned __int8 *)(a2 + 5);
      if (v28 == 3)
        goto LABEL_10;
      if (v28 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_67;
      }
      v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    var38[0] = (JSC::JSObject *)v10;
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_74:
      v10 = 0;
      goto LABEL_10;
    }
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_10;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_66:
        if (!*(_DWORD *)(v12 + 80)
          || (v37 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v37, !hasExceptionsAfterHandlingTraps))
        {
LABEL_67:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v33 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v33)
            && ((_DWORD)v33 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v10 = v33 | 0xFFFE000000000000;
          }
          else
          {
            v10 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_10;
        }
        goto LABEL_74;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_10;
    }
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_66;
  }
LABEL_10:
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_48;
  }
  if (v18)
    goto LABEL_12;
  v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v9 + 5);
    if (v30 == 3)
      goto LABEL_12;
    if (v30 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_87;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_94:
    v9 = 0;
    goto LABEL_12;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_12;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_12;
    goto LABEL_85;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_85:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_86;
  }
  v31 = (double)(int)v9;
LABEL_86:
  if (*((_DWORD *)v29 + 20))
  {
    v38 = v31;
    v36 = JSC::VM::hasExceptionsAfterHandlingTraps(v29, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v31 = v38;
    if (v36)
      goto LABEL_94;
  }
LABEL_87:
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v35 = (int)v31, v31 == (double)(int)v35)
    && ((_DWORD)v35 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
  {
    v9 = v35 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v31 + 0x2000000000000;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_48:
    v25 = 0;
    goto LABEL_24;
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v21 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v21 = v10 - 0x2000000000000;
    v22 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v22 = v9 - 0x2000000000000;
    v23 = v21 - v22;
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v24 = (int)v23, v23 == (double)(int)v24)
      && ((_DWORD)v24 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
    {
      v25 = v24 | 0xFFFE000000000000;
    }
    else
    {
      v25 = *(_QWORD *)&v23 + 0x2000000000000;
    }
  }
  else
  {
    if ((v10 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v10 + 5) != 3
      || (v9 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v9 + 5) != 3)
    {
      v32 = JSC::throwTypeError((unint64_t)a1, &v39, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
    }
    else
    {
      v32 = (uint64_t)JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9);
    }
    v25 = v32;
  }
LABEL_24:
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v25 >> 49)
    {
      v26 = 27;
    }
    else if (v25 && (v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 3)
    {
      v26 = 32;
    }
    else
    {
      v26 = 4;
    }
    *v13 |= v26;
  }
  return v25;
}

