uint64_t **JSC::B3::Procedure::dominators(JSC::B3::Procedure *this)
{
  uint64_t **result;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t StatusReg;
  uint64_t v21;
  uint64_t v22;

  result = (uint64_t **)*((_QWORD *)this + 13);
  if (result)
    return result;
  v3 = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  result = WTF::Dominators<JSC::B3::CFG>::Dominators(v3, *((uint64_t **)this + 12), 0, v4, v5, v6, v7, v8);
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = result;
  if (!v16)
    return result;
  v17 = *(unsigned int *)(v16 + 20);
  v18 = *(_QWORD *)(v16 + 8);
  if (!(_DWORD)v17)
    goto LABEL_13;
  v19 = 32 * v17;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v9 = *(_QWORD *)v18;
    if (!*(_QWORD *)v18)
      goto LABEL_6;
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 0;
    v21 = *(_QWORD *)(StatusReg + 752);
    if (v21)
    {
      if (v9 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v9 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v9)) & 1) == 0)
      {
        if (v9 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v9 >> 24)
        {
          v11 = 0;
LABEL_20:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v9, 1, v11, v12, v13, v14, v15);
          goto LABEL_6;
        }
        v11 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v9 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v9) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v11 != 1)
          goto LABEL_20;
      }
      v22 = *(unsigned int *)(v21 + 8000);
      if (v22 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v21, v9, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
      }
      else
      {
        *(_QWORD *)(v21 + 8 * v22) = v9 | 0x5000000000000;
        *(_DWORD *)(v21 + 8000) = v22 + 1;
      }
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v9, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_6:
    v18 += 32;
    v19 -= 32;
  }
  while (v19);
  v18 = *(_QWORD *)(v16 + 8);
LABEL_13:
  if (v18)
  {
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = 0;
    WTF::fastFree(v18, (void *)v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(v16, (void *)v9, v10, v11, v12, v13, v14, v15);
  return (uint64_t **)*((_QWORD *)this + 13);
}

uint64_t JSC::B3::Procedure::naturalLoops(JSC::B3::Procedure *this)
{
  uint64_t result;
  unint64_t *v3;
  WTF **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;

  v3 = (unint64_t *)((char *)this + 112);
  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v4 = (WTF **)WTF::fastMalloc((WTF *)0x148);
    v18 = JSC::B3::NaturalLoops::NaturalLoops(v4, this);
    std::unique_ptr<JSC::B3::NaturalLoops>::operator=[abi:sn180100](v3, (unint64_t *)&v18, v5, v6, v7, v8, v9, v10);
    std::unique_ptr<JSC::B3::NaturalLoops>::~unique_ptr[abi:sn180100]((unint64_t *)&v18, v11, v12, v13, v14, v15, v16, v17);
    return *((_QWORD *)this + 14);
  }
  return result;
}

unint64_t *std::unique_ptr<JSC::B3::NaturalLoops>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 312);
    if (v11)
    {
      *(_QWORD *)(v10 + 312) = 0;
      *(_DWORD *)(v10 + 320) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

WTF **JSC::B3::Procedure::backwardsDominators(JSC::B3::Procedure *this)
{
  WTF **result;
  JSC::B3::BackwardsDominators *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = (WTF **)*((_QWORD *)this + 16);
  if (!result)
  {
    v3 = (JSC::B3::BackwardsDominators *)WTF::fastMalloc((WTF *)0x40);
    result = JSC::B3::BackwardsDominators::BackwardsDominators(v3, this);
    v11 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = result;
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        *(_QWORD *)(v11 + 24) = 0;
        *(_DWORD *)(v11 + 32) = 0;
        WTF::fastFree(v12, v4, v5, v6, v7, v8, v9, v10);
      }
      v13 = *(unsigned int *)(v11 + 20);
      v14 = *(_QWORD *)(v11 + 8);
      if ((_DWORD)v13)
      {
        v15 = 40 * v13;
        do
        {
          v16 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v16, v4, v5, v6, v7, v8, v9, v10);
          }
          v14 += 40;
          v15 -= 40;
        }
        while (v15);
        v14 = *(_QWORD *)(v11 + 8);
      }
      if (v14)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        WTF::fastFree(v14, v4, v5, v6, v7, v8, v9, v10);
      }
      WTF::fastFree(v11, v4, v5, v6, v7, v8, v9, v10);
      return (WTF **)*((_QWORD *)this + 16);
    }
  }
  return result;
}

unint64_t JSC::B3::Procedure::addDataSection(JSC::B3::Procedure *this, size_t a2)
{
  unint64_t v2;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (!a2)
    return 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E357D8B8;
  v2 = WTF::fastZeroedMalloc(a2, v7, v8, v9, v10, v11, v12, v13);
  v6[1] = v2;
  v6[2] = a2;
  v14 = *((_QWORD *)this + 19);
  v19 = v6;
  v15 = *(unsigned int *)(v14 + 12);
  if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
  {
    v16 = (_QWORD **)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v19);
    v15 = *(unsigned int *)(v14 + 12);
    v17 = (_QWORD *)(*(_QWORD *)v14 + 8 * v15);
    v6 = *v16;
  }
  else
  {
    v17 = (_QWORD *)(*(_QWORD *)v14 + 8 * v15);
    v16 = &v19;
  }
  *v16 = 0;
  *v17 = v6;
  *(_DWORD *)(v14 + 12) = v15 + 1;
  v18 = v19;
  v19 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  return v2;
}

_QWORD *JSC::B3::Procedure::pinRegister(_QWORD *result, unsigned __int8 a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  _BYTE *v15;

  v3 = result[20];
  v4 = a2 & 0x7F;
  v6 = (a2 & 0x60) == 0 || v4 < 0x1F;
  v7 = !v6;
  v8 = 32;
  if (!v7)
    v8 = 16;
  v9 = v3 + v8;
  if (v4 == 127)
    v10 = v3 + 32;
  else
    v10 = v9;
  v11 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(_BYTE **)v10;
    if (((**(_BYTE **)v10 ^ a2) & 0x7F) != 0)
    {
      v13 = 0;
      while (v11 - 1 != v13)
      {
        v14 = v12[++v13] ^ a2;
        if ((v14 & 0x7F) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      v13 = 0;
LABEL_17:
      result = &v12[v13];
      v15 = &v12[v13 + 1];
      if (v15 != &v12[v11])
      {
        result = memmove(result, v15, ~v13 + v11);
        LODWORD(v11) = *(_DWORD *)(v10 + 12);
      }
      *(_DWORD *)(v10 + 12) = v11 - 1;
    }
  }
  if ((a2 & 0x7Fu) >= 0x40uLL || (*(_QWORD *)(v3 + 48) &= ~(1 << (a2 & 0x7F)), (a2 & 0x40) != 0))
    __break(1u);
  else
    *(_QWORD *)(v3 + 56) |= 1 << a2;
  return result;
}

uint64_t JSC::B3::Procedure::setOptLevel(uint64_t this, int a2)
{
  *(_DWORD *)(this + 204) = a2;
  *(_DWORD *)(*(_QWORD *)(this + 160) + 192) = a2;
  return this;
}

uint64_t JSC::B3::Procedure::frameSize(JSC::B3::Procedure *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 20) + 184);
}

_DWORD *JSC::B3::Procedure::calleeSaveRegisterAtOffsetList@<X0>(JSC::B3::Procedure *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unsigned int *v3;
  _DWORD *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (_QWORD *)*((_QWORD *)this + 20);
  v3 = (unsigned int *)v2[25];
  if (v3)
  {
    v16 = a2;
    v17 = (_QWORD *)*((_QWORD *)this + 20);
    v13 = *v3;
    v15 = v3 + 2;
    result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v13 + 8));
    *result = v13;
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        *(_QWORD *)&result[v14 + 2] = *(_QWORD *)&v15[v14];
        v14 += 2;
      }
      while (2 * v13 != v14);
    }
    a2 = v16;
    v2 = v17;
  }
  else
  {
    result = 0;
  }
  v5 = v2[26];
  *a2 = result;
  a2[1] = v5;
  v6 = (unsigned int *)v2[29];
  if (v6)
  {
    v7 = result ? (uint64_t *)(result + 2) : 0;
    v8 = result ? (uint64_t)&result[2 * *result + 2] : 0;
    if (v7 != (uint64_t *)v8)
    {
      v9 = (*((_QWORD *)v6 + 2) + *v6) << 6;
      do
      {
        v10 = *v7;
        v11 = *v7 & 0x7F | 0x80;
        if ((*v7 & 0x60) == 0x20)
        {
          v12 = 128;
        }
        else
        {
          v11 = *v7;
          v12 = 0;
        }
        if ((v10 & 0x80) == 0)
        {
          v11 = *v7;
          v12 = 0;
        }
        *v7++ = ((v10 & 0xFFFFFFFFFFFFFF00) + v9) & 0xFFFFFFFFFFFFFF00 | v11 & 0x7F | v12;
      }
      while (v7 != (uint64_t *)v8);
    }
  }
  return result;
}

JSC::B3::Value *JSC::B3::Procedure::addValueImpl(JSC::B3::Value *this, JSC::B3::Value *a2)
{
  JSC::B3::Value *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = this;
  v4 = *((unsigned int *)this + 23);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v4 - 8);
    *((_DWORD *)this + 23) = v4 - 1;
    v6 = *((_QWORD *)this + 8);
    goto LABEL_4;
  }
  v5 = *((unsigned int *)this + 19);
  if ((_DWORD)v5 != *((_DWORD *)this + 18))
  {
    v6 = *((_QWORD *)this + 8);
    *(_QWORD *)(v6 + 8 * v5) = 0;
    *((_DWORD *)this + 19) = v5 + 1;
LABEL_4:
    *((_DWORD *)a2 + 2) = v5;
    *(_QWORD *)(v6 + 8 * v5) = a2;
    return a2;
  }
  v7 = v5 + (v5 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v5 + 1)
    v9 = v5 + 1;
  else
    v9 = v8;
  if (!(v9 >> 29))
  {
    v10 = (const void *)*((_QWORD *)this + 8);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)v3 + 18) = v9;
    *((_QWORD *)v3 + 8) = v11;
    memcpy(v11, v10, 8 * v5);
    if (v10)
    {
      if (*((const void **)v3 + 8) == v10)
      {
        *((_QWORD *)v3 + 8) = 0;
        *((_DWORD *)v3 + 18) = 0;
      }
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }
    v19 = *((unsigned int *)v3 + 19);
    v6 = *((_QWORD *)v3 + 8);
    *(_QWORD *)(v6 + 8 * v19) = 0;
    *((_DWORD *)v3 + 19) = v19 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return this;
}

void JSC::B3::Procedure::setBlockOrderImpl(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v46;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;

  v50 = 0x8000000000000000;
  v10 = a2[3];
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int ***)a2;
    v12 = 8 * v10;
    do
    {
      v13 = v50;
      if (v50 < 0)
        v14 = 63;
      else
        v14 = *(_QWORD *)(2 * v50);
      v15 = **v11;
      if (v14 <= v15)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v50, v15 + 1, 0);
        v13 = v50;
      }
      if (v13 >= 0)
        v16 = (uint64_t *)(2 * v13 + 8);
      else
        v16 = &v50;
      *(uint64_t *)((char *)v16 + ((v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v17 = (void **)(a1 + 48);
  v18 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v18)
  {
    v19 = 0;
    while (!*((_QWORD *)*v17 + v19))
    {
      if (v18 == ++v19)
        goto LABEL_17;
    }
    if ((_DWORD)v18 != (_DWORD)v19)
    {
      v30 = v50;
      v31 = (unint64_t *)(2 * v50);
      if (v50 >= 0)
        v32 = (uint64_t *)(2 * v50 + 8);
      else
        v32 = &v50;
      v33 = v19;
      v20 = *(unsigned int *)(a1 + 60);
      while (1)
      {
        v49 = 0;
        if (v20 <= v33)
          break;
        v34 = (unsigned int *)*((_QWORD *)*v17 + v33);
        v49 = v34;
        if (!v34
          || (v30 < 0 ? (v35 = 63) : (v35 = *v31),
              (v36 = *v34, v35 <= v36)
           || ((*(unint64_t *)((char *)v32 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) == 0))
        {
          v37 = a2[3];
          if ((_DWORD)v37 == a2[2])
          {
            v38 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v37 + 1, (unint64_t)&v49);
            v39 = a2[3];
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v39) = *v38;
            a2[3] = v39 + 1;
            v20 = *(unsigned int *)(a1 + 60);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v37) = v34;
            a2[3] = v37 + 1;
          }
        }
        if (v20 > ++v33)
        {
          while (!*((_QWORD *)*v17 + v33))
          {
            if (v20 == ++v33)
            {
              v33 = v20;
              goto LABEL_55;
            }
          }
          v33 = v33;
        }
LABEL_55:
        if (v18 == v33)
          goto LABEL_18;
      }
LABEL_87:
      __break(0xC471u);
      JUMPOUT(0x197FE58F8);
    }
LABEL_17:
    v20 = *(unsigned int *)(a1 + 60);
LABEL_18:
    if (v20)
      bzero(*v17, 8 * v20);
  }
  else
  {
    v20 = 0;
  }
  v21 = a2[3];
  if (v20 < v21)
  {
    if (*(unsigned int *)(a1 + 56) < v21)
      WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, a2[3]);
    if (*v17)
      bzero((char *)*v17 + 8 * *(unsigned int *)(a1 + 60), 8 * v21 - 8 * *(unsigned int *)(a1 + 60));
  }
  else if (v20 != v21)
  {
    v22 = (unint64_t *)((char *)*v17 + 8 * v21);
    v23 = 8 * v20 - 8 * v21;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 56);
        if (v24 + 72 != v25 && v25 != 0)
        {
          *(_QWORD *)(v24 + 56) = 0;
          *(_DWORD *)(v24 + 64) = 0;
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        }
        v27 = *(_QWORD *)(v24 + 24);
        if (v24 + 40 != v27 && v27 != 0)
        {
          *(_QWORD *)(v24 + 24) = 0;
          *(_DWORD *)(v24 + 32) = 0;
          WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
        }
        v29 = *(_QWORD *)(v24 + 8);
        if (v29)
        {
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 16) = 0;
          WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  *(_DWORD *)(a1 + 60) = v21;
  v40 = a2[3];
  if ((_DWORD)v40)
  {
    v41 = 0;
    do
    {
      v42 = *(_DWORD **)(*(_QWORD *)a2 + 8 * v41);
      *v42 = v41;
      if (v41 >= *(unsigned int *)(a1 + 60))
        goto LABEL_87;
      v43 = *((_QWORD *)*v17 + v41);
      *((_QWORD *)*v17 + v41) = v42;
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 56);
        if (v43 + 72 != v44 && v44 != 0)
        {
          *(_QWORD *)(v43 + 56) = 0;
          *(_DWORD *)(v43 + 64) = 0;
          WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
        }
        v46 = *(_QWORD *)(v43 + 24);
        if (v43 + 40 != v46 && v46 != 0)
        {
          *(_QWORD *)(v43 + 24) = 0;
          *(_DWORD *)(v43 + 32) = 0;
          WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
        }
        v48 = *(_QWORD *)(v43 + 8);
        if (v48)
        {
          *(_QWORD *)(v43 + 8) = 0;
          *(_DWORD *)(v43 + 16) = 0;
          WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
        v40 = a2[3];
      }
    }
    while (++v41 < v40);
  }
  if ((v50 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v50, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::B3::Procedure::setWasmBoundsCheckGenerator(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *a2;
  if (*a2)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
  }
  result = *(unsigned int **)(v2 + 296);
  *(_QWORD *)(v2 + 296) = v3;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (v3)
  {
    v11 = v3 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v3 + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t JSC::B3::Procedure::mutableGPRs(JSC::B3::Procedure *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 20) + 48);
  if (!v1)
    return 0;
  v2 = 0;
  do
  {
    v2 |= v1 & -v1;
    v1 &= v1 - 1;
  }
  while (v1);
  return v2;
}

void JSC::B3::Procedure::setNumEntrypoints(JSC::B3::Procedure *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_DWORD *)this + 50) = (_DWORD)a2;
  JSC::B3::Air::Code::setNumEntrypoints(*((JSC::B3::Air::Code **)this + 20), a2, a3, a4, a5, a6, a7, a8);
}

void JSC::B3::Procedure::freeUnneededB3ValuesAfterLowering(JSC::B3::Procedure *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  const void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;

  if (*((_DWORD *)this + 6))
  {
    if (*((_DWORD *)this + 7))
      *((_DWORD *)this + 7) = 0;
    v9 = *((_QWORD *)this + 2);
    if (v9)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 2))
  {
    v10 = *((unsigned int *)this + 3);
    if ((_DWORD)v10)
    {
      v11 = *(unint64_t **)this;
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        ++v11;
        v12 -= 8;
      }
      while (v12);
      *((_DWORD *)this + 3) = 0;
    }
    v14 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 14))
  {
    v15 = *((unsigned int *)this + 15);
    if ((_DWORD)v15)
    {
      v16 = (unint64_t *)*((_QWORD *)this + 6);
      v17 = 8 * v15;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 56);
          if (v18 + 72 != v19 && v19 != 0)
          {
            *(_QWORD *)(v18 + 56) = 0;
            *(_DWORD *)(v18 + 64) = 0;
            WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
          }
          v21 = *(_QWORD *)(v18 + 24);
          if (v18 + 40 != v21 && v21 != 0)
          {
            *(_QWORD *)(v18 + 24) = 0;
            *(_DWORD *)(v18 + 32) = 0;
            WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
          }
          v23 = *(_QWORD *)(v18 + 8);
          if (v23)
          {
            *(_QWORD *)(v18 + 8) = 0;
            *(_DWORD *)(v18 + 16) = 0;
            WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
      *((_DWORD *)this + 15) = 0;
    }
    v24 = *((_QWORD *)this + 6);
    if (v24)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v25 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  v26 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 20);
    v28 = *(_QWORD *)(v26 + 8);
    if ((_DWORD)v27)
    {
      v29 = 32 * v27;
      do
      {
        v30 = *(_QWORD *)v28;
        if (*(_QWORD *)v28)
        {
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 8) = 0;
          WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
        }
        v28 += 32;
        v29 -= 32;
      }
      while (v29);
      v28 = *(_QWORD *)(v26 + 8);
    }
    if (v28)
    {
      *(_QWORD *)(v26 + 8) = 0;
      *(_DWORD *)(v26 + 16) = 0;
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 312);
    if (v32)
    {
      *(_QWORD *)(v31 + 312) = 0;
      *(_DWORD *)(v31 + 320) = 0;
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31 + 8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v31, v33, v34, v35, v36, v37, v38, v39);
  }
  v40 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 88);
    if ((v41 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v41, a2, a3, a4, a5, a6, a7, a8);
    v42 = *(_QWORD *)(v40 + 8);
    if (v40 + 24 != v42 && v42 != 0)
    {
      *(_QWORD *)(v40 + 8) = 0;
      *(_DWORD *)(v40 + 16) = 0;
      WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 24);
    if (v45)
    {
      *(_QWORD *)(v44 + 24) = 0;
      *(_DWORD *)(v44 + 32) = 0;
      WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
    }
    v46 = *(unsigned int *)(v44 + 20);
    v47 = *(_QWORD *)(v44 + 8);
    if ((_DWORD)v46)
    {
      v48 = 40 * v46;
      do
      {
        v49 = *(_QWORD *)v47;
        if (*(_QWORD *)v47)
        {
          *(_QWORD *)v47 = 0;
          *(_DWORD *)(v47 + 8) = 0;
          WTF::fastFree(v49, a2, a3, a4, a5, a6, a7, a8);
        }
        v47 += 40;
        v48 -= 40;
      }
      while (v48);
      v47 = *(_QWORD *)(v44 + 8);
    }
    if (v47)
    {
      *(_QWORD *)(v44 + 8) = 0;
      *(_DWORD *)(v44 + 16) = 0;
      WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
  }
  v50 = *((_QWORD *)this + 17);
  if (v50)
  {
    *((_QWORD *)this + 17) = 0;
    WTF::fastFree(v50 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 20) + 197))
  {
    v85 = 0x8000000000000000;
    v51 = *((unsigned int *)this + 19);
    LODWORD(v52) = v51;
    if (v51 >= 0x40)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v85, v51, 0);
      LODWORD(v52) = *((_DWORD *)this + 19);
    }
    if ((_DWORD)v52)
    {
      v53 = 0;
      while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v53))
      {
        if (v52 == ++v53)
        {
          LODWORD(v53) = v52;
          break;
        }
      }
    }
    else
    {
      LODWORD(v53) = 0;
    }
    if ((_DWORD)v52 != (_DWORD)v53)
    {
      do
      {
        v54 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v53);
        v55 = *(unsigned __int8 *)(v54 + 12) - 82;
        if (v55 <= 7)
        {
          if (((1 << v55) & 0x7B) != 0)
          {
            if (v85 >= 0)
              v57 = (uint64_t *)(2 * v85 + 8);
            else
              v57 = &v85;
            *(uint64_t *)((char *)v57 + (((unint64_t)*(unsigned int *)(v54 + 8) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v54 + 8);
            v58 = (uint64_t *)JSC::B3::Value::children((JSC::B3::Value *)v54);
            while (v58 != (uint64_t *)v51)
            {
              v59 = *v58++;
              v60 = *(unsigned int *)(v59 + 8);
              if (v85 >= 0)
                v61 = (uint64_t *)(2 * v85 + 8);
              else
                v61 = &v85;
              *(uint64_t *)((char *)v61 + ((v60 >> 3) & 0x1FFFFFF8)) |= 1 << v60;
            }
          }
          else if (*(_BYTE *)(v54 + 12) == 89)
          {
            if (v85 >= 0)
              v84 = (uint64_t *)(2 * v85 + 8);
            else
              v84 = &v85;
            *(uint64_t *)((char *)v84 + (((unint64_t)*(unsigned int *)(v54 + 8) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v54 + 8);
          }
        }
        v53 = (v53 + 1);
        v56 = *((unsigned int *)this + 19);
        if (v56 > v53)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v53))
          {
            if (v56 == ++v53)
            {
              LODWORD(v53) = *((_DWORD *)this + 19);
              break;
            }
          }
        }
      }
      while ((_DWORD)v52 != (_DWORD)v53);
      LODWORD(v52) = *((_DWORD *)this + 19);
    }
    if ((_DWORD)v52)
    {
      v62 = 0;
      while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v62))
      {
        if (v52 == ++v62)
        {
          LODWORD(v62) = v52;
          break;
        }
      }
    }
    else
    {
      LODWORD(v62) = 0;
    }
    if ((_DWORD)v52 != (_DWORD)v62)
    {
      if (v85 >= 0)
        v63 = (uint64_t *)(2 * v85 + 8);
      else
        v63 = &v85;
      do
      {
        v64 = *((_QWORD *)this + 8);
        v65 = *(_QWORD *)(v64 + 8 * v62);
        v66 = *(unsigned int *)(v65 + 8);
        if (((*(unint64_t *)((char *)v63 + ((v66 >> 3) & 0x1FFFFFF8)) >> v66) & 1) == 0)
        {
          if (*(_QWORD *)(v64 + 8 * v66) != v65)
            goto LABEL_166;
          v67 = *((unsigned int *)this + 23);
          if ((_DWORD)v67 == *((_DWORD *)this + 22))
          {
            v71 = v67 + (v67 >> 2);
            if (v71 >= 0x10)
              v72 = v71 + 1;
            else
              v72 = 16;
            if (v72 <= v67 + 1)
              v73 = v67 + 1;
            else
              v73 = v72;
            if (v73 >> 29)
            {
LABEL_166:
              __break(0xC471u);
              JUMPOUT(0x197FE6084);
            }
            v74 = (const void *)*((_QWORD *)this + 10);
            v75 = (void *)WTF::fastMalloc((WTF *)(8 * v73));
            *((_DWORD *)this + 22) = v73;
            *((_QWORD *)this + 10) = v75;
            memcpy(v75, v74, 8 * v67);
            if (v74)
            {
              if (*((const void **)this + 10) == v74)
              {
                *((_QWORD *)this + 10) = 0;
                *((_DWORD *)this + 22) = 0;
              }
              WTF::fastFree((unint64_t)v74, (void *)v51, a3, a4, a5, a6, a7, a8);
            }
            v67 = *((unsigned int *)this + 23);
            *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v67) = *(unsigned int *)(v65 + 8);
            v64 = *((_QWORD *)this + 8);
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v67) = v66;
          }
          *((_DWORD *)this + 23) = v67 + 1;
          v68 = *(unsigned int *)(v65 + 8);
          v69 = *(_QWORD *)(v64 + 8 * v68);
          *(_QWORD *)(v64 + 8 * v68) = 0;
          if (v69)
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        }
        v62 = (v62 + 1);
        v70 = *((unsigned int *)this + 19);
        if (v70 > v62)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v62))
          {
            if (v70 == ++v62)
            {
              LODWORD(v62) = *((_DWORD *)this + 19);
              break;
            }
          }
        }
      }
      while ((_DWORD)v52 != (_DWORD)v62);
      LODWORD(v52) = *((_DWORD *)this + 19);
    }
    if (*((_DWORD *)this + 23))
    {
      for (LODWORD(v76) = 0; ; LODWORD(v76) = v76 + 1)
      {
        v77 = *((_QWORD *)this + 8);
        if (v76 < v52)
        {
          v76 = v76;
          while (*(_QWORD *)(v77 + 8 * v76))
          {
            if (v52 == ++v76)
              goto LABEL_150;
          }
        }
        if ((_DWORD)v76 == (_DWORD)v52)
          break;
        do
        {
          v52 = (v52 - 1);
          v78 = *(_QWORD *)(v77 + 8 * v52);
        }
        while (v52 > v76 && !v78);
        if ((_DWORD)v76 == (_DWORD)v52)
        {
          LODWORD(v52) = v76;
          break;
        }
        *(_DWORD *)(v78 + 8) = v76;
        *(_QWORD *)(v77 + 8 * v52) = 0;
        v79 = *(_QWORD *)(v77 + 8 * v76);
        *(_QWORD *)(v77 + 8 * v76) = v78;
        if (v79)
          (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
      }
LABEL_150:
      *((_DWORD *)this + 23) = 0;
      v80 = *((unsigned int *)this + 19);
      if ((_DWORD)v80 != (_DWORD)v52)
      {
        v81 = (uint64_t *)(v77 + 8 * v52);
        v82 = 8 * v80 - 8 * v52;
        do
        {
          v83 = *v81;
          *v81 = 0;
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
          ++v81;
          v82 -= 8;
        }
        while (v82);
      }
      *((_DWORD *)this + 19) = v52;
    }
    if ((v85 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v85, (void *)v51, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::B3::Procedure::setShouldDumpIR(uint64_t this)
{
  *(_BYTE *)(this + 211) = 1;
  *(_BYTE *)(*(_QWORD *)(this + 160) + 197) = 1;
  return this;
}

uint64_t JSC::B3::Procedure::setNeedsPCToOriginMap(uint64_t this)
{
  *(_BYTE *)(this + 210) = 1;
  *(_BYTE *)(*(_QWORD *)(this + 160) + 197) = 1;
  return this;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  BOOL v45;

  v6 = (uint64_t *)result;
  while (1)
  {
    v7 = v6;
LABEL_3:
    v8 = 1 - a3;
LABEL_4:
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    if (v11 == 4)
      break;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v35 = *(a2 - 1);
        v36 = *v7;
        if (*(_DWORD *)(v35 + 8) < *(_DWORD *)(*v7 + 8))
        {
          *v7 = v35;
          *(a2 - 1) = v36;
        }
        return result;
      case 3uLL:
        v27 = *v7;
        v28 = v7[1];
        v29 = *(_DWORD *)(v28 + 8);
        v30 = *(_DWORD *)(*v7 + 8);
        v31 = *(a2 - 1);
        v32 = *(_DWORD *)(v31 + 8);
        if (v29 < v30)
        {
          if (v32 >= v29)
          {
            *v7 = v28;
            v7[1] = v27;
            v37 = *(a2 - 1);
            if (*(_DWORD *)(v37 + 8) >= v30)
              return result;
            v7[1] = v37;
          }
          else
          {
            *v7 = v31;
          }
          *(a2 - 1) = v27;
          return result;
        }
        if (v32 < v29)
        {
          v7[1] = v31;
          *(a2 - 1) = v28;
          v34 = *v7;
          v33 = v7[1];
          if (*(_DWORD *)(v33 + 8) < *(_DWORD *)(*v7 + 8))
          {
            *v7 = v33;
            v7[1] = v34;
          }
        }
        return result;
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,0>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          if ((a4 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v7, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v7, a2);
        }
        if (v9 == 1)
          return (uint64_t)std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,JSC::B3::Value **>((char *)v7, (char *)a2, (char *)a2);
        v38 = a2 - 1;
        v39 = v11 >> 1;
        v40 = &v6[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(&v6[v11 >> 1], v6, v38);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v6, v40, v38);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v6 + 1, v40 - 1, a2 - 2);
          v41 = &v6[v39 + 1];
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v6 + 2, v41, a2 - 3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v40 - 1, v40, v41);
          v42 = *v6;
          *v6 = *v40;
          *v40 = v42;
        }
        if ((a4 & 1) == 0 && *(_DWORD *)(*(v6 - 1) + 8) >= *(_DWORD *)(*v6 + 8))
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &>(v6, a2);
          v7 = (uint64_t *)result;
          goto LABEL_45;
        }
        v43 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &>(v6, a2);
        if ((v44 & 1) == 0)
          goto LABEL_44;
        v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v6, v43);
        v7 = v43 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(v43 + 1, a2);
        if (!(_DWORD)result)
        {
          v8 = v9 + 1;
          if (v45)
            goto LABEL_4;
LABEL_44:
          result = std::__introsort<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,false>(v6, v43, -v9, a4 & 1);
          v7 = v43 + 1;
LABEL_45:
          a4 = 0;
          a3 = -v9;
          goto LABEL_3;
        }
        a3 = -v9;
        a2 = v43;
        if (v45)
          return result;
        break;
    }
  }
  v12 = v7 + 1;
  v13 = (uint64_t *)v7[1];
  v14 = v7 + 2;
  v15 = v7[2];
  v16 = *v7;
  v17 = *((_DWORD *)v13 + 2);
  v18 = *(_DWORD *)(*v7 + 8);
  v19 = *(_DWORD *)(v15 + 8);
  if (v17 < v18)
  {
    v20 = v7;
    v21 = v7 + 2;
    result = *v7;
    if (v19 >= v17)
    {
      *v7 = (uint64_t)v13;
      v7[1] = v16;
      v20 = v7 + 1;
      v21 = v7 + 2;
      result = v16;
      if (v19 >= v18)
        goto LABEL_19;
    }
LABEL_13:
    *v20 = v15;
    *v21 = v16;
    v13 = (uint64_t *)result;
    goto LABEL_14;
  }
  if (v19 >= v17)
  {
LABEL_19:
    v13 = (uint64_t *)v15;
    goto LABEL_14;
  }
  *v12 = v15;
  *v14 = (uint64_t)v13;
  v20 = v7;
  v21 = v7 + 1;
  result = (uint64_t)v13;
  if (v19 < v18)
    goto LABEL_13;
LABEL_14:
  v22 = *(a2 - 1);
  if (*(_DWORD *)(v22 + 8) < *((_DWORD *)v13 + 2))
  {
    *v14 = v22;
    *(a2 - 1) = (uint64_t)v13;
    v23 = *v14;
    v24 = *v12;
    v25 = *(_DWORD *)(v23 + 8);
    if (v25 < *(_DWORD *)(v24 + 8))
    {
      v7[1] = v23;
      v7[2] = v24;
      v26 = *v7;
      if (v25 < *(_DWORD *)(*v7 + 8))
      {
        *v7 = v23;
        v7[1] = v26;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 8);
  v8 = *(_DWORD *)(*result + 8);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 8);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 8) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(v5 + 8))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 8) < *(_DWORD *)(*a4 + 8))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(*a3 + 8))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 8;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        v7 = *(_DWORD *)(v5 + 8);
        if (v7 < *(_DWORD *)(v6 + 8))
        {
          v8 = v3;
          while (1)
          {
            *(uint64_t *)((char *)result + v8) = v6;
            v9 = v8 - 8;
            if (v8 == 8)
              break;
            v6 = *(uint64_t *)((char *)result + v8 - 16);
            v8 -= 8;
            if (v7 >= *(_DWORD *)(v6 + 8))
            {
              v10 = (uint64_t *)((char *)result + v9);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v5;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = 1;
      while (1)
      {
        v5 = result[v3];
        v3 = v4;
        v6 = *v2;
        v7 = *(_DWORD *)(*v2 + 8);
        if (v7 < *(_DWORD *)(v5 + 8))
          break;
LABEL_9:
        v4 = v3 + 1;
        if (++v2 == a2)
          return result;
      }
      v8 = 0;
      while (1)
      {
        v9 = &v2[v8];
        *v9 = v5;
        if (!(v3 + v8))
          break;
        v5 = *(v9 - 2);
        --v8;
        if (v7 >= *(_DWORD *)(v5 + 8))
        {
          v2[v8] = v6;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

char *std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,JSC::B3::Value **>(char *result, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;

  if (result != a2)
  {
    v3 = a2 - result;
    v4 = (a2 - result) >> 3;
    if (a2 - result >= 9 && (unint64_t)v3 >= 0x10)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = &result[8 * v7];
          v9 = *(_QWORD *)v8;
          if (2 * v6 + 2 < v4 && *(_DWORD *)(v9 + 8) < *(_DWORD *)(*((_QWORD *)v8 + 1) + 8))
          {
            v9 = *((_QWORD *)v8 + 1);
            v8 += 8;
            v7 = 2 * v6 + 2;
          }
          v10 = &result[8 * v6];
          v11 = *(_QWORD *)v10;
          v12 = *(_DWORD *)(*(_QWORD *)v10 + 8);
          if (*(_DWORD *)(v9 + 8) >= v12)
          {
            do
            {
              v13 = v8;
              *(_QWORD *)v10 = v9;
              if (v5 < v7)
                break;
              v14 = (2 * v7) | 1;
              v8 = &result[8 * v14];
              v15 = 2 * v7 + 2;
              v9 = *(_QWORD *)v8;
              if (v15 < v4 && *(_DWORD *)(v9 + 8) < *(_DWORD *)(*((_QWORD *)v8 + 1) + 8))
              {
                v9 = *((_QWORD *)v8 + 1);
                v8 += 8;
                v14 = v15;
              }
              v10 = v13;
              v7 = v14;
            }
            while (*(_DWORD *)(v9 + 8) >= v12);
            *(_QWORD *)v13 = v11;
          }
        }
        v16 = v6-- <= 0;
      }
      while (!v16);
    }
    if (a2 != a3)
    {
      v17 = result + 16;
      v18 = *(_QWORD *)result;
      if (v3 >= 16)
      {
        v21 = a2;
        do
        {
          v22 = *(_QWORD *)v21;
          v23 = *(_DWORD *)(*(_QWORD *)v21 + 8);
          if (v23 < *(_DWORD *)(v18 + 8))
          {
            *(_QWORD *)v21 = v18;
            *(_QWORD *)result = v22;
            v24 = *((_QWORD *)result + 1);
            if (v3 == 16)
            {
              v25 = result + 8;
              v26 = 1;
            }
            else
            {
              v27 = *(_DWORD *)(v24 + 8);
              v28 = *(_DWORD *)(*v17 + 8);
              if (v27 >= v28)
              {
                v25 = result + 8;
              }
              else
              {
                v24 = *v17;
                v25 = result + 16;
              }
              if (v27 >= v28)
                v26 = 1;
              else
                v26 = 2;
            }
            if (*(_DWORD *)(v24 + 8) >= v23)
            {
              v29 = result;
              do
              {
                v30 = v25;
                *(_QWORD *)v29 = v24;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v26)
                  break;
                v31 = (2 * v26) | 1;
                v25 = &result[8 * v31];
                v32 = 2 * v26 + 2;
                v24 = *(_QWORD *)v25;
                if (v32 < v4 && *(_DWORD *)(v24 + 8) < *(_DWORD *)(*((_QWORD *)v25 + 1) + 8))
                {
                  v24 = *((_QWORD *)v25 + 1);
                  v25 += 8;
                  v31 = v32;
                }
                v29 = v30;
                v26 = v31;
              }
              while (*(_DWORD *)(v24 + 8) >= v23);
              *(_QWORD *)v30 = v22;
              v18 = *(_QWORD *)result;
            }
            else
            {
              v18 = v22;
            }
          }
          v21 += 8;
        }
        while (v21 != a3);
      }
      else
      {
        v19 = a2;
        do
        {
          v20 = *(_QWORD *)v19;
          if (*(_DWORD *)(*(_QWORD *)v19 + 8) < *(_DWORD *)(v18 + 8))
          {
            *(_QWORD *)v19 = v18;
            *(_QWORD *)result = v20;
            v18 = v20;
          }
          v19 += 8;
        }
        while (v19 != a3);
      }
    }
    if (v3 >= 9)
    {
      v33 = (unint64_t)v3 >> 3;
      do
      {
        v34 = 0;
        v35 = *(_QWORD *)result;
        v36 = result;
        do
        {
          v37 = &v36[8 * v34];
          v40 = *((_QWORD *)v37 + 1);
          v38 = v37 + 8;
          v39 = v40;
          v41 = (2 * v34) | 1;
          v42 = 2 * v34 + 2;
          if (v42 < v33 && *(_DWORD *)(v39 + 8) < *(_DWORD *)(*((_QWORD *)v38 + 1) + 8))
          {
            v39 = *((_QWORD *)v38 + 1);
            v38 += 8;
            v41 = v42;
          }
          *(_QWORD *)v36 = v39;
          v36 = v38;
          v34 = v41;
        }
        while (v41 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        a2 -= 8;
        if (v38 == a2)
        {
          *(_QWORD *)v38 = v35;
        }
        else
        {
          *(_QWORD *)v38 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v35;
          v43 = v38 - result + 8;
          if (v43 >= 9)
          {
            v44 = (((unint64_t)v43 >> 3) - 2) >> 1;
            v45 = &result[8 * v44];
            v46 = *(_QWORD *)v45;
            v47 = *(_QWORD *)v38;
            v48 = *(_DWORD *)(*(_QWORD *)v38 + 8);
            if (*(_DWORD *)(*(_QWORD *)v45 + 8) < v48)
            {
              do
              {
                v49 = v45;
                *(_QWORD *)v38 = v46;
                if (!v44)
                  break;
                v44 = (v44 - 1) >> 1;
                v45 = &result[8 * v44];
                v46 = *(_QWORD *)v45;
                v38 = v49;
              }
              while (*(_DWORD *)(*(_QWORD *)v45 + 8) < v48);
              *(_QWORD *)v49 = v47;
            }
          }
        }
        v16 = v33-- <= 2;
      }
      while (!v16);
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 8);
  v6 = *(_DWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *result;
  v3 = *(_DWORD *)(*result + 8);
  if (v3 < *(_DWORD *)(*(a2 - 1) + 8))
  {
    v4 = result + 1;
    while (v4 != a2)
    {
      v5 = *v4++;
      if (v3 < *(_DWORD *)(v5 + 8))
      {
        v6 = v4 - 1;
        goto LABEL_9;
      }
    }
    goto LABEL_25;
  }
  v7 = result + 1;
  do
  {
    v6 = v7;
    if (v7 >= a2)
      break;
    ++v7;
  }
  while (v3 >= *(_DWORD *)(*v6 + 8));
LABEL_9:
  v8 = a2;
  if (v6 < a2)
  {
    v8 = a2;
    while (v8 != result)
    {
      v9 = *--v8;
      if (v3 >= *(_DWORD *)(v9 + 8))
        goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_13:
  if (v6 < v8)
  {
    v10 = *v6;
    v11 = *v8;
LABEL_15:
    *v6 = v11;
    v12 = v6 + 1;
    *v8 = v10;
    while (v12 != a2)
    {
      v13 = *v12++;
      v10 = v13;
      if (v3 < *(_DWORD *)(v13 + 8))
      {
        v6 = v12 - 1;
        while (v8 != result)
        {
          v14 = *--v8;
          v11 = v14;
          if (v3 >= *(_DWORD *)(v14 + 8))
          {
            if (v6 < v8)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_22:
  if (v6 - 1 != result)
    *result = *(v6 - 1);
  *(v6 - 1) = v2;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (unint64_t)(result + 1);
  v2 = *result;
  if (result + 1 == a2)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  v4 = *(_QWORD *)v3;
  v5 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)(*(_QWORD *)v3 + 8) < v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t)&result[v6 + 2];
      if ((uint64_t *)v7 == a2)
        goto LABEL_28;
      v4 = *(_QWORD *)v7;
      ++v6;
      if (*(_DWORD *)(*(_QWORD *)v7 + 8) >= v5)
      {
        v8 = &result[v6];
        v3 = (unint64_t)&result[v6 + 1];
        if (!(v6 * 8))
          break;
        v9 = a2;
        while (v9 != result)
        {
          v10 = *--v9;
          if (*(_DWORD *)(v10 + 8) < v5)
            goto LABEL_15;
        }
        goto LABEL_28;
      }
    }
  }
  v9 = a2;
  do
  {
    if (v3 >= (unint64_t)v9)
      break;
    v11 = *--v9;
  }
  while (*(_DWORD *)(v11 + 8) >= v5);
  v8 = result;
LABEL_15:
  if (v3 < (unint64_t)v9)
  {
    v12 = *v9;
    v13 = (uint64_t *)v3;
    v14 = v9;
LABEL_17:
    *v13 = v12;
    *v14 = v4;
    v15 = v13 + 1;
    while (v15 != a2)
    {
      v16 = *v15++;
      v4 = v16;
      if (*(_DWORD *)(v16 + 8) >= v5)
      {
        v13 = v15 - 1;
        while (v14 != result)
        {
          v17 = *--v14;
          v12 = v17;
          if (*(_DWORD *)(v17 + 8) < v5)
          {
            if (v13 < v14)
              goto LABEL_17;
            v8 = v15 - 2;
            goto LABEL_25;
          }
        }
        goto LABEL_28;
      }
    }
    goto LABEL_28;
  }
LABEL_25:
  if (v8 != result)
    *result = *v8;
  *v8 = v2;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 8);
      v17 = *(_DWORD *)(*a1 + 8);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 8) < *(_DWORD *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 8) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 8);
      v26 = *(_DWORD *)(*a1 + 8);
      v27 = *(_DWORD *)(v23 + 8);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_36;
        }
LABEL_35:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_37;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v21 = v23;
LABEL_37:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 8) < *(_DWORD *)(v21 + 8))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 8);
        if (v45 < *(_DWORD *)(v44 + 8))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 8))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 8);
      v10 = *(_DWORD *)(*a1 + 8);
      v11 = *(_DWORD *)(v5 + 8);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v34 = *v31;
        v35 = *v6;
        v36 = *(_DWORD *)(*v31 + 8);
        if (v36 < *(_DWORD *)(v35 + 8))
        {
          v37 = i;
          while (1)
          {
            *(uint64_t *)((char *)a1 + v37) = v35;
            v38 = v37 - 8;
            if (v37 == 8)
              break;
            v35 = *(uint64_t *)((char *)a1 + v37 - 16);
            v37 -= 8;
            if (v36 >= *(_DWORD *)(v35 + 8))
            {
              v39 = (uint64_t *)((char *)a1 + v38);
              goto LABEL_27;
            }
          }
          v39 = a1;
LABEL_27:
          *v39 = v34;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

BOOL WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::isDeletedBucket(uint64_t a1)
{
  _BOOL8 result;

  result = 0;
  if (!*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 1) == 159)
  {
    result = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (*(_BYTE *)(a1 + 2) & 0xF) == 0)
    {
      return *(_DWORD *)(a1 + 20) == 0;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  char *v10;

  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
    WTF::VectorTypeOperations<WTF::NaturalLoop<JSC::B3::CFG>>::destruct(*(char **)a1, (char *)(*(_QWORD *)a1 + 72 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(char **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<WTF::NaturalLoop<JSC::B3::CFG>>::destruct(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unint64_t v10;
  char *v12;

  if (a1 != a2)
  {
    v9 = a1 + 32;
    do
    {
      v10 = *((_QWORD *)v9 - 2);
      if (v9 != (char *)v10 && v10 != 0)
      {
        *((_QWORD *)v9 - 2) = 0;
        *((_DWORD *)v9 - 2) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = v9 + 40;
      v9 += 72;
    }
    while (v12 != a2);
  }
}

uint64_t JSC::B3::Value::allocate<JSC::B3::ArgumentRegValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = v3;
  *(_QWORD *)Space = &unk_1E357D2C8;
  *(_BYTE *)(Space + 40) = *(_BYTE *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::Const128Value>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 56);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = off_1E357D6F8;
  *(_OWORD *)(Space + 40) = *(_OWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 56, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::ConstFloatValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = v3;
  *(_QWORD *)Space = off_1E357DDD8;
  *(_DWORD *)(Space + 40) = *(_DWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::BottomTupleValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 40);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = &unk_1E357D120;
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 40, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::FenceValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 56);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = off_1E357DF80;
  *(_OWORD *)(Space + 40) = *(_OWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 56, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::SlotBaseValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = v3;
  *(_QWORD *)Space = &unk_1E357E8A8;
  *(_QWORD *)(Space + 40) = *(_QWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::ExtractValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = v3;
  *(_QWORD *)Space = &unk_1E357E128;
  *(_DWORD *)(Space + 40) = *(_DWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::WasmAddressValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = v3;
  *(_QWORD *)Space = off_1E357F2A0;
  *(_BYTE *)(Space + 40) = *(_BYTE *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::WasmBoundsCheckValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 56);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = off_1E357F448;
  *(_OWORD *)(Space + 40) = *(_OWORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 56, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::AtomicValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;
  int v4;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 64);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = off_1E357E4C8;
  v4 = *(_DWORD *)(a1 + 56);
  *(_OWORD *)(Space + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(Space + 56) = v4;
  *(_QWORD *)Space = off_1E357CDD0;
  *(_BYTE *)(Space + 60) = *(_BYTE *)(a1 + 60);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 64, (const JSC::B3::Value *)a1);
  return Space;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::SIMDValue>(uint64_t a1)
{
  uint64_t Space;
  __int128 v3;

  Space = JSC::B3::Value::allocateSpace(*(unsigned __int8 *)(a1 + 12), 48);
  *(_QWORD *)Space = off_1E357F5F0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(Space + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(Space + 24) = v3;
  *(_QWORD *)Space = off_1E357EA50;
  *(_WORD *)(Space + 40) = *(_WORD *)(a1 + 40);
  JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, 48, (const JSC::B3::Value *)a1);
  return Space;
}

_QWORD *JSC::B3::Value::buildAdjacencyList(_QWORD *this, uint64_t a2, const JSC::B3::Value *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v5 = this;
  switch(*((_BYTE *)a3 + 20))
  {
    case 1:
      goto LABEL_2;
    case 2:
      goto LABEL_8;
    case 3:
      *(_QWORD *)((char *)this + a2 + 16) = *(_QWORD *)(JSC::B3::Value::childrenArray(a3) + 16);
LABEL_8:
      *(_QWORD *)((char *)v5 + a2 + 8) = *(_QWORD *)(JSC::B3::Value::childrenArray(a3) + 8);
LABEL_2:
      this = (_QWORD *)JSC::B3::Value::childrenArray(a3);
      *(_QWORD *)((char *)v5 + a2) = *this;
      break;
    case 4:
      v6 = (char *)this + a2;
      v7 = JSC::B3::Value::childrenVector(a3);
      v8 = *(unsigned int *)(v7 + 12);
      v9 = v6 + 16;
      *(_QWORD *)v6 = v6 + 16;
      *((_DWORD *)v6 + 2) = 3;
      *((_DWORD *)v6 + 3) = v8;
      if (v8 >= 4)
      {
        if (v8 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE7A90);
        }
        v9 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
        *((_DWORD *)v6 + 2) = v8;
        *(_QWORD *)v6 = v9;
      }
      this = memcpy(v9, *(const void **)v7, 8 * *(unsigned int *)(v7 + 12));
      break;
    default:
      return this;
  }
  return this;
}

uint64_t JSC::B3::Value::childrenArray(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      goto LABEL_2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      return (uint64_t)this + 48;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v1 = 56;
LABEL_2:
      result = (uint64_t)this + v1;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      result = (uint64_t)this + 64;
      break;
    case 0x53:
      result = (uint64_t)this + 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      result = (uint64_t)this + 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FE7B28);
  }
  return result;
}

uint64_t **WTF::Dominators<JSC::B3::CFG>::Dominators(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  unsigned int *v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  unsigned int **v35;
  char *v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unsigned int v63;
  int v64;
  int v65;
  WTF *v66;
  char *v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _OWORD *v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  uint64_t v80;
  char *v81;
  unint64_t StatusReg;
  uint64_t v83;
  uint64_t v84;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  unsigned int *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _BOOL4 v98;
  unsigned int *v99;
  _BOOL4 v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t *v110[2];
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  uint64_t *v116;
  WTF *v117;
  unsigned int v118;
  unsigned int v119;
  WTF *v120;
  uint64_t v121;

  v8 = a3;
  *a1 = a2;
  a1[1] = 0;
  v10 = (uint64_t *)(a1 + 1);
  v11 = *(unsigned int *)(*a2 + 60);
  a1[2] = 0;
  *((_DWORD *)a1 + 5) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE8520);
    }
    v12 = (uint64_t *)WTF::fastMalloc((WTF *)(32 * v11));
    *((_DWORD *)a1 + 4) = v11;
    a1[1] = v12;
    v13 = &v12[4 * v11];
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = -1;
      v12 += 4;
    }
    while (v12 != v13);
    a2 = *a1;
  }
  v116 = a2;
  v14 = *(unsigned int *)(*a2 + 60);
  v117 = 0;
  v118 = 0;
  v119 = v14;
  if ((_DWORD)v14)
  {
    if (v14 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE8528);
    }
    v15 = 56 * v14;
    v16 = WTF::fastMalloc((WTF *)(56 * v14));
    v118 = v15 / 0x38;
    v117 = (WTF *)v16;
    v17 = v16 + v15;
    do
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = -1;
      *(_OWORD *)(v16 + 16) = 0uLL;
      *(_OWORD *)(v16 + 32) = 0uLL;
      *(_QWORD *)(v16 + 48) = 0;
      v16 += 56;
    }
    while (v16 != v17);
    a2 = v116;
  }
  v120 = 0;
  v121 = 0;
  v18 = *(_DWORD *)(*a2 + 60);
  if (v18)
  {
    v19 = *(_QWORD *)(*a2 + 48);
    v20 = v117;
    v21 = v18 - 1;
    do
    {
      v22 = *(unsigned int **)(v19 + 8 * v21);
      if (v22)
        *((_QWORD *)v20 + 7 * *v22 + 3) = v22;
    }
    while ((unint64_t)v21--);
  }
  WTF::Dominators<JSC::B3::CFG>::LengauerTarjan::computeDepthFirstPreNumbering(&v116, a2, a3, a4, a5, a6, a7, a8);
  WTF::Dominators<JSC::B3::CFG>::LengauerTarjan::computeSemiDominatorsAndImplicitImmediateDominators((uint64_t)&v116, v24, v25, v26, v27, v28, v29, v30);
  v31 = HIDWORD(v121);
  if (HIDWORD(v121) >= 2)
  {
    v32 = v120;
    v33 = v117;
    v34 = HIDWORD(v121) - 1;
    v35 = (unsigned int **)((char *)v120 + 8);
    do
    {
      v36 = (char *)v33 + 56 * **v35;
      v39 = (unsigned int *)*((_QWORD *)v36 + 6);
      v37 = v36 + 48;
      v38 = v39;
      v40 = *((unsigned int *)v37 - 9);
      if (v31 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE8518);
      }
      if (v38 != *((unsigned int **)v32 + v40))
        *v37 = *((_QWORD *)v33 + 7 * *v38 + 6);
      ++v35;
      --v34;
    }
    while (v34);
  }
  v41 = *a1;
  v42 = *(_DWORD *)(**a1 + 60);
  if (v42)
  {
    v43 = v42 - 1;
    v44 = 8 * (v42 - 1);
    do
    {
      *(_QWORD *)&v109 = 0;
      v45 = **a1;
      if (*(_DWORD *)(v45 + 60) <= v43)
        goto LABEL_112;
      v46 = *(unsigned int **)(*(_QWORD *)(v45 + 48) + v44);
      *(_QWORD *)&v109 = v46;
      if (v46)
      {
        v47 = *v46;
        v48 = (unsigned int *)*((_QWORD *)v117 + 7 * v47 + 6);
        v49 = *v10;
        *(_QWORD *)(*v10 + 32 * v47 + 16) = v48;
        if (v48)
        {
          v50 = v49 + 32 * *v48;
          v51 = *(unsigned int *)(v50 + 12);
          if ((_DWORD)v51 == *(_DWORD *)(v50 + 8))
          {
            v52 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v109);
            v51 = *(unsigned int *)(v50 + 12);
            *(_QWORD *)(*(_QWORD *)v50 + 8 * v51) = *v52;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v50 + 8 * v51) = v109;
          }
          *(_DWORD *)(v50 + 12) = v51 + 1;
        }
      }
      v44 -= 8;
      --v43;
    }
    while (v43 != -1);
    v41 = *a1;
  }
  v114 = 0;
  v115 = 0;
  v53 = *v41;
  if (!*(_DWORD *)(v53 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x197FE8530);
  }
  *(_QWORD *)&v109 = **(_QWORD **)(v53 + 48);
  BYTE8(v109) = 0;
  v54 = (_OWORD *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, 1uLL, (unint64_t)&v109);
  *((_OWORD *)v114 + HIDWORD(v115)) = *v54;
  v62 = __CFADD__(HIDWORD(v115), 1);
  v63 = ++HIDWORD(v115);
  if (!v62)
  {
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = v114;
      v67 = (char *)v114 + 16 * v63;
      v68 = (unsigned int *)*((_QWORD *)v67 - 2);
      v69 = *(v67 - 8);
      v70 = v63 - 1;
      HIDWORD(v115) = v63 - 1;
      if (v69 == 1)
      {
        *(_DWORD *)(*v10 + 32 * *v68 + 28) = v65++;
      }
      else if (!v69)
      {
        *(_DWORD *)(*v10 + 32 * *v68 + 24) = v64;
        *(_QWORD *)&v109 = v68;
        BYTE8(v109) = 1;
        if (v70 == (_DWORD)v115)
        {
          v71 = (__int128 *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, v63, (unint64_t)&v109);
          v70 = HIDWORD(v115);
          v66 = v114;
        }
        else
        {
          v71 = &v109;
        }
        ++v64;
        *((_OWORD *)v66 + v70) = *v71;
        v70 = ++HIDWORD(v115);
        v72 = *v10 + 32 * *v68;
        v73 = *(unsigned int *)(v72 + 12);
        if ((_DWORD)v73)
        {
          v74 = *(_QWORD **)v72;
          v75 = 8 * v73;
          do
          {
            *(_QWORD *)&v109 = *v74;
            BYTE8(v109) = 0;
            if (v70 == (_DWORD)v115)
            {
              v76 = (_OWORD *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, v70 + 1, (unint64_t)&v109);
              *((_OWORD *)v114 + HIDWORD(v115)) = *v76;
            }
            else
            {
              *((_OWORD *)v114 + v70) = v109;
            }
            v70 = ++HIDWORD(v115);
            ++v74;
            v75 -= 8;
          }
          while (v75);
        }
      }
      v63 = v70;
    }
    while (v70);
  }
  if (v8)
  {
    *(_QWORD *)&v109 = *a1;
    *((_QWORD *)&v109 + 1) = a1;
    WTF::Dominators<JSC::B3::CFG>::NaiveDominators::NaiveDominators(v110, (uint64_t *)v109);
    v112 = 0;
    v113 = 0;
    v86 = *(_DWORD *)(**a1 + 60);
    if (v86)
    {
      while (1)
      {
        --v86;
        v87 = **a1;
        v88 = *(_DWORD *)(v87 + 60);
        if (v88 <= v86)
          break;
        v89 = *(unsigned int **)(*(_QWORD *)(v87 + 48) + 8 * v86);
        if (v89 && *(_DWORD *)(*v10 + 32 * *v89 + 24) != -1)
        {
          do
          {
            --v88;
            v90 = **a1;
            if (*(_DWORD *)(v90 + 60) <= v88)
            {
              __break(0xC471u);
              JUMPOUT(0x197FE8538);
            }
            v91 = *(unsigned int **)(*(_QWORD *)(v90 + 48) + 8 * v88);
            if (v91)
            {
              v92 = *v91;
              v93 = *v10;
              v94 = *(_DWORD *)(*v10 + 32 * v92 + 24);
              if (v94 != -1)
              {
                if (v89 == v91)
                {
                  v101 = 1;
                }
                else
                {
                  v95 = *v89;
                  v96 = v93 + 32 * v95;
                  v97 = *(_DWORD *)(v96 + 24);
                  v98 = v94 > v97 && *(_DWORD *)(v93 + 32 * v92 + 28) < *(_DWORD *)(v96 + 28);
                  v99 = v91;
                  do
                    v99 = *(unsigned int **)(v93 + 32 * *v99 + 16);
                  while (v99 != v89 && v99 != 0);
                  if (v98 != (v99 != 0))
                  {
                    WTF::Dominators<JSC::B3::CFG>::ValidationContext::reportError((uint64_t)&v109, (uint64_t)v89, (uint64_t)v91, (uint64_t)"Range-based domination check is broken", 39);
                    v92 = *v91;
                    v93 = *v10;
                    v94 = *(_DWORD *)(*v10 + 32 * v92 + 24);
                    v95 = *v89;
                    v97 = *(_DWORD *)(*v10 + 32 * v95 + 24);
                  }
                  v101 = v94 > v97 && *(_DWORD *)(v93 + 32 * v92 + 28) < *(_DWORD *)(v93 + 32 * v95 + 28);
                }
                if (v111 <= v92)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FE8540);
                }
                if (v101 != ((*(_DWORD *)(v110[1][2 * v92] + (((unint64_t)*v89 >> 3) & 0x1FFFFFFC)) >> *v89) & 1))
                  WTF::Dominators<JSC::B3::CFG>::ValidationContext::reportError((uint64_t)&v109, (uint64_t)v89, (uint64_t)v91, (uint64_t)"Lengauer-Tarjan domination is broken", 37);
              }
            }
          }
          while (v88);
        }
        if (!v86)
          goto LABEL_103;
      }
LABEL_112:
      __break(0xC471u);
      JUMPOUT(0x197FE8510);
    }
LABEL_103:
    WTF::Dominators<JSC::B3::CFG>::ValidationContext::handleErrors((uint64_t)&v109);
    WTF::Dominators<JSC::B3::CFG>::ValidationContext::~ValidationContext((uint64_t)&v109, v102, v103, v104, v105, v106, v107, v108);
  }
  v77 = v114;
  if (v114)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v77, (void *)v55, v56, v57, v58, v59, v60, v61);
  }
  v78 = v120;
  if (v120)
  {
    v120 = 0;
    LODWORD(v121) = 0;
    WTF::fastFree((unint64_t)v78, (void *)v55, v56, v57, v58, v59, v60, v61);
  }
  v79 = v117;
  if (v119)
  {
    v80 = 56 * v119;
    v81 = (char *)v117 + 32;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v55 = *(_QWORD *)v81;
      if (*(_QWORD *)v81)
      {
        *(_QWORD *)v81 = 0;
        *((_DWORD *)v81 + 2) = 0;
        v83 = *(_QWORD *)(StatusReg + 752);
        if (v83)
        {
          if (!(v55 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v55 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v55)) & 1) != 0)
          {
LABEL_63:
            v84 = *(unsigned int *)(v83 + 8000);
            if (v84 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v83, v55, (os_unfair_lock_s *)5, v57, v58, v59, v60, v61);
            }
            else
            {
              *(_QWORD *)(v83 + 8 * v84) = v55 | 0x5000000000000;
              *(_DWORD *)(v83 + 8000) = v84 + 1;
            }
            goto LABEL_58;
          }
          if (v55 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v55 >> 24)
          {
            v57 = 0;
          }
          else
          {
            v57 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v55 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v55) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v57 == 1)
              goto LABEL_63;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v83, v55, 1, v57, v58, v59, v60, v61);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v55, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_58:
      v81 += 56;
      v80 -= 56;
      if (!v80)
      {
        v79 = v117;
        break;
      }
    }
  }
  if (v79)
  {
    v117 = 0;
    v118 = 0;
    WTF::fastFree((unint64_t)v79, (void *)v55, v56, v57, v58, v59, v60, v61);
  }
  return a1;
}

__int128 *WTF::Dominators<JSC::B3::CFG>::ValidationContext::reportError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  result = (__int128 *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 64))
  {
    result = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)&v11);
    v8 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 68));
    v9 = *result;
    v10 = result[1];
  }
  else
  {
    v8 = (_OWORD *)(*(_QWORD *)result + 32 * v7);
    v9 = v11;
    v10 = v12;
  }
  *v8 = v9;
  v8[1] = v10;
  ++*(_DWORD *)(a1 + 68);
  return result;
}

uint64_t WTF::Dominators<JSC::B3::CFG>::ValidationContext::handleErrors(uint64_t result)
{
  JSC::B3::Procedure ***v1;
  uint64_t v2;
  unint64_t v3;
  JSC::B3::Procedure **v4;
  JSC::B3::Procedure *v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  char v24;
  JSC::B3::Procedure *v25;

  if (*(_DWORD *)(result + 68))
  {
    v1 = (JSC::B3::Procedure ***)result;
    WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILED:\n");
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("For block domination relationships:\n");
    if (*((_DWORD *)v1 + 17))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = &v1[7][v2];
        v20 = (const char *)*v4;
        v25 = v4[1];
        WTF::dataLog<char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>("    ", (uint64_t *)&v20, " -> ", (uint64_t *)&v25, " (", (uint64_t)(v4 + 2), ")\n");
        ++v3;
        v2 += 4;
      }
      while (v3 < *((unsigned int *)v1 + 17));
    }
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("Control flow graph:\n");
    v5 = **v1;
    v6 = *((unsigned int *)v5 + 15);
    if ((_DWORD)v6)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *((_QWORD *)v5 + 6);
        v9 = *(_QWORD *)(v8 + 8 * i);
        if (v9)
        {
          if (i >= v6)
          {
            __break(0xC471u);
LABEL_21:
            JUMPOUT(0x197FE8860);
          }
          v20 = *(const char **)(v8 + 8 * i);
          WTF::dataLog<char [11],WTF::PointerDump<JSC::B3::BasicBlock>,char [17]>("    Block ", (uint64_t *)&v20, ": successors = [");
          v20 = ", ";
          v21 = 3;
          v22 = "";
          v23 = 1;
          v24 = 0;
          v10 = *(unsigned int *)(v9 + 68);
          if ((_DWORD)v10)
          {
            v11 = 0;
            v12 = 0;
            v13 = 16 * v10;
            do
            {
              if (v12 >= *(unsigned int *)(v9 + 68))
              {
                __break(0xC471u);
                JUMPOUT(0x197FE8868);
              }
              v25 = *(JSC::B3::Procedure **)(*(_QWORD *)(v9 + 56) + v11);
              WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>((uint64_t)&v20, (uint64_t *)&v25);
              ++v12;
              v11 += 16;
            }
            while (v13 != v11);
          }
          WTF::dataLog<char [16]>("], predecessors = [");
          v20 = ", ";
          v21 = 3;
          v22 = "";
          v23 = 1;
          v24 = 0;
          v14 = *(unsigned int *)(v9 + 36);
          if ((_DWORD)v14)
          {
            v15 = *(uint64_t **)(v9 + 24);
            v16 = 8 * v14;
            do
            {
              v17 = *v15++;
              v25 = (JSC::B3::Procedure *)v17;
              WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>((uint64_t)&v20, (uint64_t *)&v25);
              v16 -= 8;
            }
            while (v16);
          }
          WTF::dataLog<char [16]>("]\n");
          v5 = **v1;
        }
        v6 = *((unsigned int *)v5 + 15);
      }
    }
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("Lengauer-Tarjan Dominators:\n");
    WTF::dataLog<WTF::Dominators<JSC::B3::CFG>>((uint64_t)v1[1]);
    WTF::dataLog<char [16]>("\n");
    v18 = (WTF *)WTF::dataLog<char [16]>("Naive Dominators:\n");
    v19 = WTF::dataFile(v18);
    WTF::Dominators<JSC::B3::CFG>::NaiveDominators::dump((uint64_t **)v1 + 2, v19);
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("Graph at time of failure:\n");
    WTF::dataLog<JSC::B3::CFG>(*v1);
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILIED!\n");
    __break(0xC471u);
    goto LABEL_21;
  }
  return result;
}

uint64_t WTF::Dominators<JSC::B3::CFG>::ValidationContext::~ValidationContext(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a1 + 36);
  v12 = *(unint64_t **)(a1 + 24);
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    do
    {
      if (*v12)
        WTF::fastFree(*v12, a2, a3, a4, a5, a6, a7, a8);
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
    v12 = *(unint64_t **)(a1 + 24);
  }
  if (v12)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Dominators<JSC::B3::CFG>::LengauerTarjan::computeDepthFirstPreNumbering(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  __int128 v29;
  uint64_t *v30;
  __int128 *v31;
  _OWORD *v32;
  WTF *v33;
  _OWORD *v34;
  unsigned int *v35;
  unint64_t v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;

  v37 = 0;
  v38 = 0;
  v36 = 0x8000000000000000;
  v8 = **a1;
  if (!*(_DWORD *)(v8 + 60))
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x197FE8C2CLL);
  }
  *(_QWORD *)&v39 = **(_QWORD **)(v8 + 48);
  DWORD2(v39) = 0;
  v10 = *(unsigned int *)v39;
  if (v10 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v36, v10 + 1, 0), (v36 & 0x8000000000000000) != 0))
  {
    v11 = &v36;
  }
  else
  {
    v11 = (unint64_t *)(2 * v36 + 8);
  }
  v12 = (v10 >> 3) & 0x1FFFFFF8;
  v13 = *(unint64_t *)((char *)v11 + v12);
  *(unint64_t *)((char *)v11 + v12) = v13 | (1 << v10);
  v14 = HIDWORD(v38);
  if ((v13 & (1 << v10)) == 0)
  {
    if (HIDWORD(v38) == (_DWORD)v38)
    {
      v34 = (_OWORD *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v39);
      *((_OWORD *)v37 + HIDWORD(v38)) = *v34;
    }
    else
    {
      *((_OWORD *)v37 + HIDWORD(v38)) = v39;
    }
    v14 = ++HIDWORD(v38);
  }
  if (v14)
  {
    do
    {
      v15 = (char *)v37 + 16 * v14;
      v16 = (unsigned int *)*((_QWORD *)v15 - 2);
      v17 = *((unsigned int *)v15 - 2);
      HIDWORD(v38) = v14 - 1;
      if (!v16)
        break;
      v35 = v16;
      if (!(_DWORD)v17)
      {
        v18 = *((unsigned int *)a1 + 9);
        HIDWORD(a1[1][7 * *v16 + 1]) = v18;
        if ((_DWORD)v18 == *((_DWORD *)a1 + 8))
        {
          v30 = (uint64_t *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 3), v18 + 1, (unint64_t)&v35);
          v18 = *((unsigned int *)a1 + 9);
          a1[3][v18] = *v30;
        }
        else
        {
          a1[3][v18] = (uint64_t)v16;
        }
        *((_DWORD *)a1 + 9) = v18 + 1;
        v16 = v35;
      }
      v19 = v16[17];
      if (v17 < v19)
      {
        if (v19 > (int)v17 + 1)
        {
          *(_QWORD *)&v39 = v16;
          DWORD2(v39) = v17 + 1;
          if (HIDWORD(v38) == (_DWORD)v38)
          {
            v32 = (_OWORD *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v39);
            *((_OWORD *)v37 + HIDWORD(v38)) = *v32;
            v16 = v35;
          }
          else
          {
            *((_OWORD *)v37 + HIDWORD(v38)) = v39;
          }
          ++HIDWORD(v38);
          v19 = v16[17];
        }
        if (v17 >= v19)
        {
          __break(0xC471u);
          goto LABEL_47;
        }
        v20 = *(unsigned int **)(*((_QWORD *)v16 + 7) + 16 * v17);
        *(_QWORD *)&v39 = v20;
        DWORD2(v39) = 0;
        v21 = v36;
        if ((v36 & 0x8000000000000000) != 0)
          v22 = 63;
        else
          v22 = *(_QWORD *)(2 * v36);
        v23 = *v20;
        if (v22 <= v23)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v36, v23 + 1, 0);
          v21 = v36;
        }
        if (v21 >= 0)
          v24 = (unint64_t *)(2 * v21 + 8);
        else
          v24 = &v36;
        v25 = (v23 >> 3) & 0x1FFFFFF8;
        v26 = *(unint64_t *)((char *)v24 + v25);
        *(unint64_t *)((char *)v24 + v25) = v26 | (1 << v23);
        if ((v26 & (1 << v23)) == 0)
        {
          v27 = HIDWORD(v38);
          if (HIDWORD(v38) == (_DWORD)v38)
          {
            v31 = (__int128 *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v39);
            v27 = HIDWORD(v38);
            v28 = v37;
            v29 = *v31;
          }
          else
          {
            v28 = v37;
            v29 = v39;
          }
          *((_OWORD *)v28 + v27) = v29;
          ++HIDWORD(v38);
          a1[1][7 * *v20] = (uint64_t)v35;
        }
      }
      v14 = HIDWORD(v38);
    }
    while (HIDWORD(v38));
  }
  v33 = v37;
  if (v37)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((v36 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v36, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Dominators<JSC::B3::CFG>::LengauerTarjan::computeSemiDominatorsAndImplicitImmediateDominators(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t StatusReg;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int **v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unsigned int *v69;
  unsigned int *v70;
  WTF *v71;
  uint64_t v72;
  _BYTE v73[136];

  v8 = *(unsigned int *)(a1 + 36);
  if (v8 >= 2)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      --v8;
      v69 = 0;
      v11 = *(unsigned int *)(a1 + 36);
      if (v8 >= v11)
      {
LABEL_81:
        __break(0xC471u);
        JUMPOUT(0x197FE91B8);
      }
      v12 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 8 * v8);
      v69 = v12;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = (_DWORD **)(v13 + 56 * *v12);
      v15 = v12[9];
      v16 = (unsigned int *)v14 + 3;
      if ((_DWORD)v15)
      {
        v17 = (unsigned int **)*((_QWORD *)v12 + 3);
        v18 = &v17[v15];
        do
        {
          v19 = *v17;
          v20 = **v17;
          v21 = *(unsigned int **)(v13 + 56 * v20 + 16);
          if (v21)
          {
            if (*(_QWORD *)(v13 + 56 * *v21 + 16))
            {
              v24 = 0;
              v70 = *v17;
              v71 = (WTF *)v73;
              v72 = 16;
              v25 = v19;
              do
              {
                if (v24 == (_DWORD)v72)
                {
                  v67 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v24 + 1, (unint64_t)&v70);
                  v26 = HIDWORD(v72);
                  *((_QWORD *)v71 + HIDWORD(v72)) = *v67;
                }
                else
                {
                  *((_QWORD *)v71 + v24) = v25;
                  v26 = v24;
                }
                v24 = v26 + 1;
                HIDWORD(v72) = v26 + 1;
                v25 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 56 * *v70 + 16);
                v70 = v25;
              }
              while (v25);
              if (v26 != 1)
              {
                v27 = v26 - 2;
                if (v27 >= v24)
                  goto LABEL_81;
                v28 = 8 * v27;
                do
                {
                  v29 = *(_QWORD *)(a1 + 8);
                  v30 = v29 + 56 * **(unsigned int **)((char *)v71 + v28);
                  v32 = *(unsigned int **)(v30 + 24);
                  v31 = (_QWORD *)(v30 + 24);
                  v33 = *(_DWORD *)*(v31 - 1);
                  v34 = *(unsigned int **)(v29 + 56 * v33 + 24);
                  if (*(_DWORD *)(v29 + 56 * *v34 + 12) < *(_DWORD *)(v29 + 56 * *v32 + 12))
                  {
                    *v31 = v34;
                    v29 = *(_QWORD *)(a1 + 8);
                  }
                  *(v31 - 1) = *(_QWORD *)(v29 + 56 * v33 + 16);
                  v28 -= 8;
                }
                while (v28 != -8);
              }
              v35 = v71;
              if (v73 != (_BYTE *)v71 && v71)
              {
                v71 = 0;
                LODWORD(v72) = 0;
                WTF::fastFree((unint64_t)v35, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              v20 = *v19;
              v13 = *(_QWORD *)(a1 + 8);
            }
            v20 = **(_DWORD **)(v13 + 56 * v20 + 24);
          }
          v22 = *v16;
          v23 = *(_DWORD *)(v13 + 56 * v20 + 12);
          if (*v16 >= v23)
            v22 = v23;
          *v16 = v22;
          ++v17;
        }
        while (v17 != v18);
        LODWORD(v11) = *(_DWORD *)(a1 + 36);
      }
      else
      {
        v22 = *v16;
      }
      if (v11 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE91C0);
      }
      v36 = v13 + 56 * **(unsigned int **)(*(_QWORD *)(a1 + 24) + 8 * v22);
      v37 = v36 + 32;
      v38 = *(unsigned int *)(v36 + 44);
      if ((_DWORD)v38 == *(_DWORD *)(v36 + 40))
      {
        v64 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v69);
        v38 = *(unsigned int *)(v37 + 12);
        *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = *v64;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = v69;
      }
      *(_DWORD *)(v37 + 12) = v38 + 1;
      v39 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v39 + 56 * *v69 + 16) = *v14;
      v40 = **v14;
      v41 = v39 + 56 * v40;
      v42 = *(unsigned int *)(v41 + 44);
      if ((_DWORD)v42)
      {
        v43 = *(unsigned int ***)(v41 + 32);
        v44 = &v43[v42];
        do
        {
          v45 = *v43;
          v46 = **v43;
          v47 = *(_QWORD *)(a1 + 8);
          v48 = *(unsigned int **)(v47 + 56 * v46 + 16);
          if (v48)
          {
            if (*(_QWORD *)(v47 + 56 * *v48 + 16))
            {
              v50 = 0;
              v70 = *v43;
              v71 = (WTF *)v73;
              v72 = 16;
              v51 = v45;
              do
              {
                if (v50 == (_DWORD)v72)
                {
                  v68 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v50 + 1, (unint64_t)&v70);
                  v52 = HIDWORD(v72);
                  *((_QWORD *)v71 + HIDWORD(v72)) = *v68;
                }
                else
                {
                  *((_QWORD *)v71 + v50) = v51;
                  v52 = v50;
                }
                v50 = v52 + 1;
                HIDWORD(v72) = v52 + 1;
                v51 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 56 * *v70 + 16);
                v70 = v51;
              }
              while (v51);
              if (v52 != 1)
              {
                v53 = v52 - 2;
                if (v53 >= v50)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FE91C8);
                }
                v54 = 8 * v53;
                do
                {
                  v55 = *(_QWORD *)(a1 + 8);
                  v56 = v55 + 56 * **(unsigned int **)((char *)v71 + v54);
                  v58 = *(unsigned int **)(v56 + 24);
                  v57 = (_QWORD *)(v56 + 24);
                  v59 = *(_DWORD *)*(v57 - 1);
                  v60 = *(unsigned int **)(v55 + 56 * v59 + 24);
                  if (*(_DWORD *)(v55 + 56 * *v60 + 12) < *(_DWORD *)(v55 + 56 * *v58 + 12))
                  {
                    *v57 = v60;
                    v55 = *(_QWORD *)(a1 + 8);
                  }
                  *(v57 - 1) = *(_QWORD *)(v55 + 56 * v59 + 16);
                  v54 -= 8;
                }
                while (v54 != -8);
              }
              v61 = v71;
              if (v73 != (_BYTE *)v71 && v71)
              {
                v71 = 0;
                LODWORD(v72) = 0;
                WTF::fastFree((unint64_t)v61, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              v46 = *v45;
              v47 = *(_QWORD *)(a1 + 8);
            }
            v45 = *(unsigned int **)(v47 + 56 * v46 + 24);
            v49 = *v45;
          }
          else
          {
            v49 = **v43;
          }
          if (*(_DWORD *)(v47 + 56 * v49 + 12) >= *(_DWORD *)(v47 + 56 * v46 + 12))
            v45 = *v14;
          *(_QWORD *)(v47 + 56 * v46 + 48) = v45;
          ++v43;
        }
        while (v43 != v44);
        v40 = **v14;
        v39 = *(_QWORD *)(a1 + 8);
      }
      v62 = v39 + 56 * v40;
      if (!*(_DWORD *)(v62 + 40))
        continue;
      v63 = v62 + 32;
      if (*(_DWORD *)(v63 + 12))
        *(_DWORD *)(v63 + 12) = 0;
      a2 = *(_QWORD *)v63;
      if (!*(_QWORD *)v63)
        continue;
      *(_QWORD *)v63 = 0;
      *(_DWORD *)(v63 + 8) = 0;
      v65 = *(_QWORD *)(StatusReg + 752);
      if (v65)
      {
        if (!(a2 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
        {
LABEL_66:
          v66 = *(unsigned int *)(v65 + 8000);
          if (v66 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v65, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v65 + 8 * v66) = a2 | 0x5000000000000;
            *(_DWORD *)(v65 + 8000) = v66 + 1;
          }
          continue;
        }
        if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_66;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v65, a2, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    while (v8 > 1);
  }
}

uint64_t WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 16 * v8;
      v18 = (__int128 *)v7;
      do
      {
        v19 = *v18++;
        *v9++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t **WTF::Dominators<JSC::B3::CFG>::NaiveDominators::NaiveDominators(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  void ***v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int i;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v85;
  void **v86;
  unint64_t v87;
  int *v88;
  _DWORD *v89;
  int v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v119;
  void **v120;
  unint64_t v121;
  int *v122;
  _DWORD *v123;
  int v124;
  void ***v127;
  uint64_t v128;

  v2 = a2;
  *a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  v4 = (void ***)(a1 + 1);
  *(_OWORD *)(a1 + 3) = 0u;
  v5 = *(unsigned int *)(*a2 + 60);
  if ((_DWORD)v5)
  {
    if (v5 <= 0x10)
      v6 = 16;
    else
      v6 = *(unsigned int *)(*a2 + 60);
    WTF::Vector<WTF::FastBitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 1), v6);
    if (*v4)
    {
      v7 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v7 != (_DWORD)v5)
        bzero(&(*v4)[2 * v7], (16 * v5 - 16 * v7) & 0xFFFFFFFFFFFFFFF0);
    }
    *((_DWORD *)a1 + 5) = v5;
    v8 = (unsigned int *)a1 + 5;
    v9 = v5 + 31;
    v10 = (v5 + 31) >> 5;
    v127 = v4;
    v11 = v5 - 1;
    v12 = 2 * (v5 - 1);
    v128 = v5 + 31;
    do
    {
      if (*v8 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B30);
      }
      v13 = v5;
      v14 = &(*v4)[v12];
      v15 = (unint64_t)v14[1] + 31;
      if ((v15 ^ v9) >= 0x20)
      {
        if (v10 < v15 >> 5)
          goto LABEL_122;
        v16 = v15 >> 5;
        v17 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        memcpy(v17, *v14, 4 * v16);
        bzero(&v17[4 * v16], 4 * (v10 - v16));
        if (*v14)
          WTF::fastFree((unint64_t)*v14, v18, v19, v20, v21, v22, v23, v24);
        *v14 = v17;
        v4 = v127;
        v9 = v128;
      }
      v14[1] = (void *)v13;
      v5 = v13;
      v12 -= 2;
      --v11;
    }
    while (v11 != -1);
    v25 = a1[4];
    v2 = a2;
  }
  else
  {
    v25 = 0;
    v8 = (unsigned int *)a1 + 5;
    v9 = 31;
  }
  v26 = (unint64_t)v25 + 31;
  if ((v26 ^ v9) >= 0x20)
  {
    v27 = (v5 + 31) >> 5;
    if (v27 < v26 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE9AF0);
    }
    v28 = v26 >> 5;
    v29 = (char *)WTF::fastMalloc((WTF *)(4 * v27));
    memcpy(v29, a1[3], 4 * v28);
    bzero(&v29[4 * v28], 4 * (v27 - v28));
    v37 = (unint64_t)a1[3];
    if (v37)
      WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
    a1[3] = (uint64_t *)v29;
  }
  a1[4] = (uint64_t *)v5;
  if (!*((_DWORD *)a1 + 5))
  {
    __break(0xC471u);
    JUMPOUT(0x197FE9B70);
  }
  bzero(**v4, (((unint64_t)(*v4)[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (!*v8)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x197FE9AD0);
  }
  *(_DWORD *)*a1[1] |= 1u;
  bzero(a1[3], (((unint64_t)a1[4] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v5)
    return a1;
  v38 = *v2;
  v39 = v5 - 1;
  do
  {
    if (*(_DWORD *)(v38 + 60) <= v39)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE9B38);
    }
    if (*(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v39))
      *(_DWORD *)((char *)a1[3] + (((unint64_t)v39 >> 3) & 0x1FFFFFFC)) |= 1 << v39;
    --v39;
  }
  while (v39 != -1);
  if (v5 < 2)
    return a1;
  v40 = (v5 - 1);
  v41 = 2 * v40;
  for (i = v5; i > 1; --i)
  {
    if (*(_DWORD *)(*v2 + 60) <= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE9B40);
    }
    v43 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v40);
    if (v43 && *(_DWORD *)(v43 + 36))
    {
      if (*v8 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B58);
      }
      v44 = (uint64_t)&a1[1][v41];
      v45 = (unint64_t)(*(_QWORD *)(v44 + 8) + 31) >> 5;
      v46 = (unint64_t)a1[4] + 31;
      if (v45 == v46 >> 5)
      {
        memcpy(*(void **)v44, a1[3], 4 * v45);
        v55 = a1[4];
      }
      else
      {
        v47 = (void *)WTF::fastMalloc((WTF *)((v46 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v47, a1[3], (((unint64_t)a1[4] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        if (*(_QWORD *)v44)
          WTF::fastFree(*(_QWORD *)v44, v48, v49, v50, v51, v52, v53, v54);
        v55 = a1[4];
        *(_QWORD *)v44 = v47;
      }
      *(_QWORD *)(v44 + 8) = v55;
    }
    else
    {
      if (*v8 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B50);
      }
      bzero((*v4)[v41], (((unint64_t)(*v4)[v41 + 1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    }
    v41 -= 2;
    --v40;
  }
  v56 = **a1;
  if (*(_DWORD *)(v56 + 60) < 2u)
    goto LABEL_116;
  v57 = 0;
  v58 = 1;
  while (2)
  {
    v59 = v58;
    v60 = *(_QWORD *)(*(_QWORD *)(v56 + 48) + 8 * v58);
    if (!v60)
    {
LABEL_69:
      LOBYTE(v61) = 0;
      goto LABEL_70;
    }
    v61 = *(_DWORD *)(v60 + 36);
    if (v61)
    {
      v62 = ***(unsigned int ***)(v60 + 24);
      if (*v8 <= v62)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B60);
      }
      v63 = (uint64_t)&a1[1][2 * v62];
      v64 = ((unint64_t)a1[4] + 31) >> 5;
      v65 = *(_QWORD *)(v63 + 8) + 31;
      if (v64 == v65 >> 5)
      {
        memcpy(a1[3], *(const void **)v63, 4 * v64);
      }
      else
      {
        v66 = (void *)WTF::fastMalloc((WTF *)((v65 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v66, *(const void **)v63, ((unint64_t)(*(_QWORD *)(v63 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        v74 = (unint64_t)a1[3];
        if (v74)
          WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
        a1[3] = (uint64_t *)v66;
      }
      v75 = *(uint64_t **)(v63 + 8);
      a1[4] = v75;
      v76 = *(unsigned int *)(v60 + 36);
      if (v76 >= 2)
      {
        v77 = (unint64_t)v75 + 31;
        v78 = ((unint64_t)v75 + 31) & 0x1FFFFFFFE0;
        v79 = (v77 >> 5) - 1;
        do
        {
          if (--v76 >= *(unsigned int *)(v60 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x197FE9B10);
          }
          v80 = **(unsigned int **)(*(_QWORD *)(v60 + 24) + 8 * v76);
          if (*v8 <= v80)
          {
            __break(0xC471u);
            JUMPOUT(0x197FE9B18);
          }
          if (v78)
          {
            v81 = a1[1][2 * v80];
            v82 = a1[3];
            v83 = v79;
            do
              *((_DWORD *)v82 + v83) &= *(_DWORD *)(v81 + 4 * v83);
            while ((unint64_t)v83--);
          }
        }
        while (v76 > 1);
      }
      v85 = a1[3];
      *(_DWORD *)((char *)v85 + ((v59 >> 3) & 0x1FFFFFFC)) |= 1 << v59;
      if (*((_DWORD *)a1 + 5) <= v59)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B68);
      }
      v86 = &(*v4)[2 * v59];
      v87 = ((unint64_t)v86[1] + 31) >> 5;
      if ((_DWORD)v87)
      {
        LOBYTE(v61) = 0;
        v88 = (int *)v85 + (v87 - 1);
        v89 = (char *)*v86 + 4 * (v87 - 1);
        do
        {
          v90 = *v88--;
          LOBYTE(v61) = v61 | (*v89 != v90);
          *v89-- = v90;
          LODWORD(v87) = v87 - 1;
        }
        while ((_DWORD)v87);
        goto LABEL_70;
      }
      goto LABEL_69;
    }
LABEL_70:
    v57 |= v61;
    v58 = v59 + 1;
    if ((int)v59 + 1 < v5)
      goto LABEL_100;
    if ((v57 & 1) == 0)
      return a1;
    v91 = 0;
    LODWORD(v92) = v5;
    do
    {
      v92 = (v92 - 1);
      v93 = **a1;
      if (*(_DWORD *)(v93 + 60) <= v92)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B08);
      }
      v94 = *(_QWORD *)(*(_QWORD *)(v93 + 48) + 8 * v92);
      if (!v94)
        goto LABEL_94;
      v95 = *(_DWORD *)(v94 + 36);
      if (!v95)
        goto LABEL_95;
      v96 = ***(unsigned int ***)(v94 + 24);
      if (*v8 <= v96)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B20);
      }
      v97 = (uint64_t)&a1[1][2 * v96];
      v98 = ((unint64_t)a1[4] + 31) >> 5;
      v99 = *(_QWORD *)(v97 + 8) + 31;
      if (v98 == v99 >> 5)
      {
        memcpy(a1[3], *(const void **)v97, 4 * v98);
      }
      else
      {
        v100 = (void *)WTF::fastMalloc((WTF *)((v99 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v100, *(const void **)v97, ((unint64_t)(*(_QWORD *)(v97 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        v108 = (unint64_t)a1[3];
        if (v108)
          WTF::fastFree(v108, v101, v102, v103, v104, v105, v106, v107);
        a1[3] = (uint64_t *)v100;
      }
      v109 = *(uint64_t **)(v97 + 8);
      a1[4] = v109;
      v110 = *(unsigned int *)(v94 + 36);
      if (v110 >= 2)
      {
        v111 = (unint64_t)v109 + 31;
        v112 = ((unint64_t)v109 + 31) & 0x1FFFFFFFE0;
        v113 = (v111 >> 5) - 1;
        do
        {
          if (--v110 >= *(unsigned int *)(v94 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x197FE9AF8);
          }
          v114 = **(unsigned int **)(*(_QWORD *)(v94 + 24) + 8 * v110);
          if (*v8 <= v114)
          {
            __break(0xC471u);
            JUMPOUT(0x197FE9B00);
          }
          if (v112)
          {
            v115 = a1[1][2 * v114];
            v116 = a1[3];
            v117 = v113;
            do
              *((_DWORD *)v116 + v117) &= *(_DWORD *)(v115 + 4 * v117);
            while ((unint64_t)v117--);
          }
        }
        while (v110 > 1);
      }
      v119 = a1[3];
      *(_DWORD *)((char *)v119 + ((v92 >> 3) & 0x1FFFFFFC)) |= 1 << v92;
      if (*((_DWORD *)a1 + 5) <= v92)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE9B28);
      }
      v120 = &(*v4)[2 * v92];
      v121 = ((unint64_t)v120[1] + 31) >> 5;
      if ((_DWORD)v121)
      {
        LOBYTE(v95) = 0;
        v122 = (int *)v119 + (v121 - 1);
        v123 = (char *)*v120 + 4 * (v121 - 1);
        do
        {
          v124 = *v122--;
          LOBYTE(v95) = v95 | (*v123 != v124);
          *v123-- = v124;
          LODWORD(v121) = v121 - 1;
        }
        while ((_DWORD)v121);
      }
      else
      {
LABEL_94:
        LOBYTE(v95) = 0;
      }
LABEL_95:
      v91 |= v95;
    }
    while (v92 > 1);
    if ((v91 & 1) != 0)
    {
      v57 = 0;
      v58 = 1;
LABEL_100:
      v56 = **a1;
      if (*(_DWORD *)(v56 + 60) <= v58)
      {
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x197FE9B48);
      }
      continue;
    }
    return a1;
  }
}

uint64_t WTF::Vector<WTF::FastBitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v14 = (unint64_t *)v6;
      v15 = (unint64_t *)(v4 + 8);
      v16 = 16 * v5;
      do
      {
        *v14 = 0;
        v14[1] = 0;
        v17 = *v15;
        v18 = *v15 + 31;
        if (v18 >= 0x20)
        {
          v19 = (void *)WTF::fastMalloc((WTF *)((v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
          memcpy(v19, (const void *)*(v15 - 1), ((*v15 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
          if (*v14)
            WTF::fastFree(*v14, v7, v8, v9, v10, v11, v12, v13);
          v17 = *v15;
          *v14 = (unint64_t)v19;
        }
        v14[1] = v17;
        v20 = *(v15 - 1);
        if (v20)
          WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
        v14 += 2;
        v15 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v4)
    {
      if (*(_QWORD *)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 32 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 32 * ((uint64_t)(v3 - v5) >> 5);
      }
      if (!(v10 >> 27))
      {
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = (_OWORD *)(v11 + v19);
          v21 = *(_OWORD *)(v5 + v19 + 16);
          *v20 = *(_OWORD *)(v5 + v19);
          v20[1] = v21;
          v19 += 32;
        }
        while (32 * v6 != v19);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 32 * ((uint64_t)(v3 - v5) >> 5);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x197FE9DECLL);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v26 = a2;
  else
    v26 = v25;
  if (v26 > v23)
  {
    if (v26 >> 27)
      goto LABEL_35;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v27)
    {
      v36 = 32 * v27;
      v37 = (__int128 *)v5;
      do
      {
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        *v28 = v38;
        v28[1] = v39;
        v28 += 2;
        v36 -= 32;
      }
      while (v36);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

uint64_t WTF::dataLog<char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>(const char *a1, uint64_t *a2, const char *a3, uint64_t *a4, const char *a5, uint64_t a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  WTF::PrintStream::printImpl<WTF::PointerDump<JSC::B3::BasicBlock>,char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>(v16, a2, a3, a4, a5, a6, a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

uint64_t WTF::dataLog<char [11],WTF::PointerDump<JSC::B3::BasicBlock>,char [17]>(const char *a1, uint64_t *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  v11 = v10;
  if (v9)
  {
    WTF::PrintStream::printf(v10, "%s", "#");
    WTF::PrintStream::printf(v11, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v10, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::BasicBlock>>(v6, a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<WTF::Dominators<JSC::B3::CFG>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::Dominators<JSC::B3::CFG>::dump(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t **WTF::Dominators<JSC::B3::CFG>::NaiveDominators::dump(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;

  v2 = **result;
  if (!*(_DWORD *)(v2 + 60))
    return result;
  v4 = result;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned int **)(*(_QWORD *)(v2 + 48) + 8 * v5);
    if (v6)
      break;
LABEL_14:
    if (++v5 >= (unint64_t)*(unsigned int *)(v2 + 60))
      return result;
  }
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "    Block ");
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  WTF::PrintStream::printf(v8, "%s", "#");
  WTF::PrintStream::printf(v8, "%u", *v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  WTF::PrintStream::printf(v7, "%s", ":");
  result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v9 = **v4;
  if (!*(_DWORD *)(v9 + 60))
  {
LABEL_13:
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v16, "%s", "\n");
    result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v2 = **v4;
    goto LABEL_14;
  }
  v10 = 0;
  v11 = 0;
  while (v11 < *((unsigned int *)v4 + 5))
  {
    if (((*(_DWORD *)(v4[1][v10] + (((unint64_t)*v6 >> 3) & 0x1FFFFFFC)) >> *v6) & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v11);
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v13, "%s", " ");
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
      v15 = v14;
      if (v12)
      {
        WTF::PrintStream::printf(v14, "%s", "#");
        WTF::PrintStream::printf(v15, "%u");
      }
      else
      {
        WTF::PrintStream::printf(v14, "%s");
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
      result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v9 = **v4;
    }
    ++v11;
    v10 += 2;
    if (v11 >= *(unsigned int *)(v9 + 60))
      goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<JSC::B3::CFG>(JSC::B3::Procedure **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::B3::Procedure::dump(*a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::PrintStream::printImpl<WTF::PointerDump<JSC::B3::BasicBlock>,char [5],WTF::PointerDump<JSC::B3::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>(WTF::PrintStream *a1, uint64_t *a2, const char *a3, uint64_t *a4, const char *a5, uint64_t a6, const char *a7)
{
  uint64_t v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  char v28;

  v13 = *a2;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  v15 = v14;
  if (v13)
  {
    WTF::PrintStream::printf(v14, "%s", "#");
    WTF::PrintStream::printf(v15, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v14, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a3);
  v16 = *a4;
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  v18 = v17;
  if (v16)
  {
    WTF::PrintStream::printf(v17, "%s", "#");
    WTF::PrintStream::printf(v18, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v17, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a5);
  v19 = *(char **)a6;
  v20 = *(_QWORD *)(a6 + 8);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v19)
  {
    v23 = v20 - 1;
    if (!v20)
      v23 = 0;
    WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v26, v22);
  }
  else
  {
    v24 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 16) = 0;
    v26 = v24;
    v27 = 0;
  }
  WTF::printExpectedCStringHelper(v21, "StringView", &v26);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return WTF::PrintStream::printf(a1, "%s", a7);
}

uint64_t WTF::Dominators<JSC::B3::CFG>::dump(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  float v17;
  const char *v18;
  const char *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  const char *v22;
  const char *v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  float v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  WTF::PrintStream *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  unsigned int v38;
  _QWORD *v39;
  unsigned int *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;

  v38 = 0;
  v2 = *(_DWORD *)(result + 20);
  if (v2)
  {
    v4 = result;
    for (i = 0; i < v2; v38 = i)
    {
      v6 = *(_QWORD *)(v4 + 8) + 32 * i;
      if (*(_DWORD *)(v6 + 24) != -1)
      {
        v37[0] = "    Block #";
        v37[1] = 12;
        v36[0] = ": idom = ";
        v36[1] = 10;
        v7 = *(_QWORD *)(v6 + 16);
        v34[0] = ", idomKids = [";
        v34[1] = 15;
        v35 = v7;
        v39 = v37;
        v40 = &v38;
        v41 = v36;
        v42 = &v35;
        v43 = v34;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral>(WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>(a2, (uint64_t)&v39);
        v8 = v38;
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 32 * v38;
        if (*(_DWORD *)(v10 + 12))
        {
          v11 = 0;
          v12 = 0;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)v10 + 8 * v11);
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
            v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            if (v12)
            {
              WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v39, v17);
              if ((_DWORD)v40)
              {
                if ((_DWORD)v40 != 1)
                  goto LABEL_44;
                if ((_BYTE)v39)
                  v22 = "(failed to convert ";
                else
                  v22 = "(Out of memory while converting ";
                WTF::PrintStream::printf(v16, "%s", v22);
                WTF::PrintStream::printf(v16, "%s", "StringView");
                v18 = " to utf8)";
              }
              else if (v39)
              {
                v18 = (const char *)(v39 + 2);
              }
              else
              {
                v18 = 0;
              }
              WTF::PrintStream::printf(v16, "%s", v18);
              if ((_DWORD)v40 != -1)
                ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(v37, &v39);
            }
            else
            {
              WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v39, v17);
              if ((_DWORD)v40)
              {
                if ((_DWORD)v40 != 1)
                {
LABEL_44:
                  v32 = std::__throw_bad_variant_access[abi:sn180100]();
                  return WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral>(WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>(v32, v33);
                }
                if ((_BYTE)v39)
                  v23 = "(failed to convert ";
                else
                  v23 = "(Out of memory while converting ";
                WTF::PrintStream::printf(v16, "%s", v23);
                WTF::PrintStream::printf(v16, "%s", "StringView");
                v19 = " to utf8)";
              }
              else if (v39)
              {
                v19 = (const char *)(v39 + 2);
              }
              else
              {
                v19 = 0;
              }
              WTF::PrintStream::printf(v16, "%s", v19);
              if ((_DWORD)v40 != -1)
                ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(v37, &v39);
              v12 = 1;
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
            v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
            v21 = v20;
            if (v13)
            {
              WTF::PrintStream::printf(v20, "%s", "#");
              WTF::PrintStream::printf(v21, "%u");
            }
            else
            {
              WTF::PrintStream::printf(v20, "%s");
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            ++v11;
            v8 = v38;
            v9 = *(_QWORD *)(v4 + 8);
            v10 = v9 + 32 * v38;
          }
          while (v11 < *(unsigned int *)(v10 + 12));
        }
        v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 32))(v24);
        WTF::StringImpl::utf8ForCharacters("], pre/post = ", 0xEuLL, (uint64_t)&v39, v26);
        WTF::printExpectedCStringHelper(v25, "StringView", &v39);
        if ((_DWORD)v40 != -1)
          ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(v37, &v39);
        v27 = v9 + 32 * v8;
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 40))(v24);
        WTF::PrintStream::printf(v24, "%u", *(_DWORD *)(v27 + 24));
        v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 32))(v24);
        WTF::StringImpl::utf8ForCharacters("/", 1uLL, (uint64_t)&v39, v29);
        WTF::printExpectedCStringHelper(v28, "StringView", &v39);
        if ((_DWORD)v40 != -1)
          ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(v37, &v39);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 40))(v24);
        WTF::PrintStream::printf(v24, "%u", *(_DWORD *)(v27 + 28));
        v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 32))(v24);
        WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v39, v31);
        WTF::printExpectedCStringHelper(v30, "StringView", &v39);
        if ((_DWORD)v40 != -1)
          ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(v37, &v39);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 40))(v24);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        i = v38;
        v2 = *(_DWORD *)(v4 + 20);
      }
      ++i;
    }
  }
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral>(WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::PointerDump<JSC::B3::BasicBlock>,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  char v33;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = *(_DWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(uint64_t **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = **(char ***)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v31, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v31 = v14;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%u", *v5);
  v15 = *(char **)v7;
  v16 = *(_QWORD *)(v7 + 8);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v15)
  {
    v19 = v16 - 1;
    if (!v16)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v31, v18);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v31 = v20;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v17, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  v21 = *v6;
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  v23 = v22;
  if (v21)
  {
    WTF::PrintStream::printf(v22, "%s", "#");
    WTF::PrintStream::printf(v23, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v22, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  v24 = *(char **)v8;
  v25 = *(_QWORD *)(v8 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v24)
  {
    v28 = v25 - 1;
    if (!v25)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v31, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v31 = v29;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

WTF **JSC::B3::NaturalLoops::NaturalLoops(WTF **this, JSC::B3::Procedure *a2)
{
  WTF *v3;
  uint64_t **v4;

  v3 = (WTF *)*((_QWORD *)a2 + 12);
  v4 = JSC::B3::Procedure::dominators(a2);
  return WTF::NaturalLoops<JSC::B3::CFG>::NaturalLoops(this, v3, (uint64_t)v4);
}

WTF **WTF::NaturalLoops<JSC::B3::CFG>::NaturalLoops(WTF **a1, WTF *a2, uint64_t a3)
{
  WTF *v4;
  WTF **v5;
  char **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _DWORD *v90;
  WTF *v91;
  unsigned int v94;
  unsigned int v95;
  WTF *v96;
  uint64_t v97;
  char **v98;
  WTF **v99;
  _DWORD *v100;
  WTF *v101;
  uint64_t v102;
  WTF *v103[2];
  void *__src;
  uint64_t v105;
  _QWORD v106[4];
  uint64_t v107;
  _QWORD v108[2];

  v4 = a2;
  v5 = a1;
  *a1 = a2;
  a1[1] = (WTF *)(a1 + 3);
  v6 = (char **)(a1 + 1);
  a1[2] = (WTF *)4;
  v7 = (uint64_t *)(a1 + 39);
  v8 = *(unsigned int *)(*(_QWORD *)a2 + 60);
  v103[0] = 0;
  WTF::Vector<std::array<unsigned int,2ul>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 39), v8, v103);
  WTF::VectorTypeOperations<WTF::NaturalLoop<JSC::B3::CFG>>::destruct(*v6, &(*v6)[72 * *((unsigned int *)v5 + 5)], v9, v10, v11, v12, v13, v14);
  *((_DWORD *)v5 + 5) = 0;
  v22 = *(_DWORD *)(*(_QWORD *)v4 + 60);
  v98 = v6;
  v99 = v5;
  if (v22)
  {
    v96 = v4;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v4 + 60) <= --v22)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEB5A0);
      }
      v23 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)v4 + 48) + 8 * v22);
      if (v23)
      {
        v24 = v23[9];
        while (v24)
        {
          if (v23[9] <= --v24)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEB598);
          }
          v15 = *(_QWORD *)(*((_QWORD *)v23 + 3) + 8 * v24);
          if (v23 == (unsigned int *)v15
            || (v25 = *(_QWORD *)(a3 + 8),
                v26 = v25 + 32 * *(unsigned int *)v15,
                v27 = v25 + 32 * *v23,
                *(_DWORD *)(v26 + 24) > *(_DWORD *)(v27 + 24))
            && *(_DWORD *)(v26 + 28) < *(_DWORD *)(v27 + 28))
          {
            v31 = *((_DWORD *)v5 + 5);
            v30 = 72 * v31;
            while (1)
            {
              v28 = v30 - 72;
              if (!v30)
                break;
              v29 = *(unsigned int **)&(*v6)[v30 - 64];
              v30 -= 72;
              if (v29 == v23)
              {
                WTF::NaturalLoop<JSC::B3::CFG>::addBlock((uint64_t)&(*v6)[v28], v15);
                goto LABEL_10;
              }
            }
            v103[0] = v4;
            v103[1] = (WTF *)v23;
            __src = v106;
            LODWORD(v107) = -1;
            HIDWORD(v107) = v31;
            v106[0] = v15;
            v105 = 0x100000004;
            if (v31 == *((_DWORD *)v5 + 4))
            {
              WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::NaturalLoop<JSC::B3::CFG>&>((uint64_t)v6, (unint64_t)v103);
            }
            else
            {
              v32 = *v6;
              v33 = (uint64_t)&(*v6)[72 * v31];
              *(_OWORD *)v33 = *(_OWORD *)v103;
              v34 = (void *)(v33 + 32);
              *(_QWORD *)(v33 + 16) = v33 + 32;
              v35 = (_QWORD *)(v33 + 16);
              v36 = HIDWORD(v105);
              *(_DWORD *)(v33 + 28) = HIDWORD(v105);
              *(_DWORD *)(v33 + 24) = 4;
              v37 = (_DWORD *)(v33 + 24);
              if (v36 >= 5)
              {
                if (v36 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FEB5C0);
                }
                v34 = (void *)WTF::fastMalloc((WTF *)(8 * v36));
                *v37 = v36;
                *v35 = v34;
              }
              memcpy(v34, __src, 8 * HIDWORD(v105));
              *(_QWORD *)&v32[72 * v31 + 64] = v107;
              v6 = v98;
              v5 = v99;
              ++*((_DWORD *)v99 + 5);
              v4 = v96;
            }
            v38 = __src;
            if (v106 != __src && __src != 0)
            {
              __src = 0;
              LODWORD(v105) = 0;
              WTF::fastFree((unint64_t)v38, (void *)v15, v16, v17, v18, v19, v20, v21);
            }
          }
LABEL_10:
          ;
        }
      }
    }
    while (v22);
    v40 = *(unsigned int *)(*(_QWORD *)v4 + 60);
    v101 = 0;
    v102 = 0;
    v103[0] = (WTF *)&__src;
    v103[1] = (WTF *)4;
    if ((_DWORD)v40)
      WTF::FastBitVectorWordOwner::resizeSlow((WTF::FastBitVectorWordOwner *)&v101, v40);
    else
      v40 = 0;
  }
  else
  {
    v40 = 0;
    v101 = 0;
    v102 = 0;
    v103[0] = (WTF *)&__src;
    v103[1] = (WTF *)4;
  }
  v102 = v40;
  v41 = *((unsigned int *)v5 + 5);
  if ((_DWORD)v41)
  {
    v42 = v101;
    do
    {
      v43 = v41 - 1;
      if (*((_DWORD *)v5 + 5) <= v43)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEB5D0);
      }
      v97 = v43;
      v44 = v43;
      v45 = *v6;
      bzero(v42, ((unint64_t)(v102 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v46 = &v45[72 * v44];
      v49 = *((_DWORD *)v46 + 7);
      v48 = (unsigned int *)(v46 + 28);
      v47 = v49;
      if (v49)
      {
        v50 = v47 - 1;
        v51 = 8 * (v47 - 1);
        do
        {
          if (*v48 <= v50)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEB5D8);
          }
          v52 = *(_DWORD **)(*(_QWORD *)&v45[72 * v44 + 16] + v51);
          *(_DWORD *)((char *)v42 + (((unint64_t)*v52 >> 3) & 0x1FFFFFFC)) |= 1 << *v52;
          if (*v48 <= v50)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEB5E0);
          }
          v108[0] = v52;
          v53 = HIDWORD(v103[1]);
          if (HIDWORD(v103[1]) == LODWORD(v103[1]))
          {
            WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>((uint64_t)v103, (unint64_t)v108);
          }
          else
          {
            *((_QWORD *)v103[0] + HIDWORD(v103[1])) = v52;
            HIDWORD(v103[1]) = v53 + 1;
          }
          v51 -= 8;
          --v50;
        }
        while (v50 != -1);
      }
      v54 = HIDWORD(v103[1]);
      if (HIDWORD(v103[1]))
      {
        v55 = &v45[72 * v44];
        v56 = v55 + 8;
        v57 = v55 + 16;
        v58 = v55 + 24;
        do
        {
          v59 = *((_QWORD *)v103[0] + --v54);
          HIDWORD(v103[1]) = v54;
          if (v59 != *v56)
          {
            v60 = *(_DWORD *)(v59 + 36);
            if (v60)
            {
              v61 = v60 - 1;
              v62 = 8 * (v60 - 1);
              do
              {
                v100 = 0;
                if (*(_DWORD *)(v59 + 36) <= v61)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FEB5B0);
                }
                v63 = *(_DWORD **)(*(_QWORD *)(v59 + 24) + v62);
                v100 = v63;
                if (((*(_DWORD *)((char *)v42 + (((unint64_t)*v63 >> 3) & 0x1FFFFFFC)) >> *v63) & 1) == 0)
                {
                  v108[0] = v63;
                  v64 = *v48;
                  if ((_DWORD)v64 == *v58)
                  {
                    v66 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v64 + 1, (unint64_t)v108);
                    v64 = *v48;
                    *(_QWORD *)(*v57 + 8 * v64) = *v66;
                  }
                  else
                  {
                    *(_QWORD *)(*v57 + 8 * v64) = v63;
                  }
                  *v48 = v64 + 1;
                  v65 = HIDWORD(v103[1]);
                  if (HIDWORD(v103[1]) == LODWORD(v103[1]))
                  {
                    v67 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v103, HIDWORD(v103[1]) + 1, (unint64_t)&v100);
                    v65 = HIDWORD(v103[1]);
                    *((_QWORD *)v103[0] + HIDWORD(v103[1])) = *v67;
                  }
                  else
                  {
                    *((_QWORD *)v103[0] + HIDWORD(v103[1])) = v100;
                  }
                  HIDWORD(v103[1]) = v65 + 1;
                  *(_DWORD *)((char *)v42 + (((unint64_t)*v100 >> 3) & 0x1FFFFFFC)) |= 1 << *v100;
                }
                v62 -= 8;
                --v61;
              }
              while (v61 != -1);
              v54 = HIDWORD(v103[1]);
            }
          }
        }
        while (v54);
      }
      v6 = v98;
      v5 = v99;
      v41 = v97;
    }
    while ((_DWORD)v97);
  }
  v68 = *(_QWORD *)v4;
  v69 = *(_DWORD *)(*(_QWORD *)v4 + 60);
  if (v69)
  {
    v70 = v69 - 1;
    v71 = 8 * v70;
    do
    {
      if (*(_DWORD *)(v68 + 60) <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEB5A8);
      }
      v72 = *(unsigned int **)(*(_QWORD *)(v68 + 48) + v71);
      if (v72)
      {
        v73 = *v7;
        *(_DWORD *)(*v7 + 8 * *v72 + 4) = -1;
        *(_DWORD *)(v73 + 8 * *v72) = -1;
      }
      v71 -= 8;
      --v70;
    }
    while (v70 != -1);
  }
  v74 = *((_DWORD *)v5 + 5);
  if (v74)
  {
    while (1)
    {
      if (*((_DWORD *)v5 + 5) <= --v74)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEB5E8);
      }
      v75 = *v6;
      v76 = (uint64_t)&(*v6)[72 * v74];
      v79 = *(_DWORD *)(v76 + 28);
      v77 = (unsigned int *)(v76 + 28);
      v78 = v79;
      if (v79)
        break;
LABEL_79:
      if (!v74)
      {
        v86 = *((unsigned int *)v5 + 5);
        if ((_DWORD)v86)
        {
          v87 = *v7;
          v88 = &v75[72 * v86 - 8];
          v89 = v86 - 1;
          do
          {
            v90 = (_DWORD *)(v87 + 8 * **((unsigned int **)v88 - 7));
            if (v89 != *v90)
            {
              __break(0xC471u);
              JUMPOUT(0x197FEB590);
            }
            *(_DWORD *)v88 = v90[1];
            v88 -= 72;
            --v89;
          }
          while (v89 != -1);
        }
        goto LABEL_84;
      }
    }
    v80 = v78 - 1;
    v81 = 8 * v80;
    while (1)
    {
      v82 = *v77;
      if (*v77 <= v80)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEB5B8);
      }
      v83 = (unsigned int *)(*v7 + 8 * **(unsigned int **)(*(_QWORD *)&v75[72 * v74 + 16] + v81));
      v84 = *v83;
      if (*v83 == -1)
        break;
      v85 = *((_DWORD *)v5 + 5);
      if (v85 <= v84)
        goto LABEL_105;
      v15 = *(unsigned int *)&v75[72 * v84 + 28];
      if (v82 < v15)
        break;
      v95 = v83[1];
      ++v83;
      v94 = v95;
      if (v95 == -1)
        goto LABEL_73;
      if (v85 <= v94)
      {
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x197FEB5C8);
      }
      if (v82 < *(_DWORD *)&v75[72 * v94 + 28])
        goto LABEL_73;
LABEL_74:
      v81 -= 8;
      if (--v80 == -1)
        goto LABEL_79;
    }
    v83[1] = v84;
LABEL_73:
    *v83 = v74;
    goto LABEL_74;
  }
LABEL_84:
  v91 = v103[0];
  if (&__src != (void **)v103[0] && v103[0] != 0)
  {
    v103[0] = 0;
    LODWORD(v103[1]) = 0;
    WTF::fastFree((unint64_t)v91, (void *)v15, v16, v17, v18, v19, v20, v21);
  }
  if (v101)
    WTF::fastFree((unint64_t)v101, (void *)v15, v16, v17, v18, v19, v20, v21);
  return v5;
}

_QWORD *WTF::NaturalLoop<JSC::B3::CFG>::addBlock(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (_QWORD *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 24))
  {
    result = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 28);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v4) = a2;
  }
  *(_DWORD *)(a1 + 28) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<std::array<unsigned int,2ul>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, unint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  if (!a2)
    return v4;
  if (!(a2 >> 29))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v4 + 8) = v3;
    *(_QWORD *)v4 = v6;
    v7 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        *v6++ = *a3;
        v8 -= 8;
      }
      while (v8);
    }
    return v4;
  }
  __break(0xC471u);
  return result;
}

void *WTF::NaturalLoop<JSC::B3::CFG>::NaturalLoop(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = (void *)(a1 + 32);
  v5 = *(unsigned int *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 28) = v5;
  if (v5 < 5)
    goto LABEL_2;
  if (!(v5 >> 29))
  {
    result = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = result;
LABEL_2:
    memcpy(result, *(const void **)(a2 + 16), 8 * *(unsigned int *)(a2 + 28));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    return (void *)a1;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::NaturalLoop<JSC::B3::CFG>&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  void *result;

  v3 = WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WTF::NaturalLoop<JSC::B3::CFG>::NaturalLoop(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,WTF::NaturalLoop<JSC::B3::CFG>>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if (a1 + 16 != v3 && v3 != 0)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::VectorBuffer<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
  }
  else
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x197FEB94CLL);
    }
    v3 = 72 * a2;
    result = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::VectorMover<false,WTF::NaturalLoop<JSC::B3::CFG>>::move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  if (a1 != a2)
  {
    v11 = 0;
    do
    {
      v12 = a1 + v11;
      v13 = a3 + v11;
      *(_OWORD *)v13 = *(_OWORD *)(a1 + v11);
      v14 = (void *)(a3 + v11 + 32);
      *(_QWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 24) = 4;
      v15 = *(void **)(a1 + v11 + 16);
      v16 = a1 + v11 + 32;
      if ((void *)v16 == v15)
      {
        memcpy(v14, v15, 8 * *(unsigned int *)(v12 + 28));
      }
      else
      {
        *(_QWORD *)(v12 + 16) = v16;
        *(_QWORD *)(v13 + 16) = v15;
        v19 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = 4;
        *(_DWORD *)(v13 + 24) = v19;
      }
      v17 = *(_DWORD *)(a1 + v11 + 28);
      *(_DWORD *)(a1 + v11 + 28) = 0;
      *(_DWORD *)(v13 + 28) = v17;
      *(_QWORD *)(a3 + v11 + 64) = *(_QWORD *)(a1 + v11 + 64);
      v18 = *(_QWORD *)(v12 + 16);
      if (v16 != v18)
      {
        if (v18)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(a1 + v11 + 24) = 0;
          WTF::fastFree(v18, v15, a3, a4, a5, a6, a7, a8);
        }
      }
      v11 += 72;
    }
    while (a1 + v11 != a2);
  }
}

_QWORD *WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

WTF::BitVector **WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(WTF::BitVector **a1, WTF::BitVector *a2)
{
  uint64_t v2;
  size_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  __int128 v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int **v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  WTF *v60;
  __int128 *v62;
  WTF::BitVector *v63[3];
  unint64_t v64;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[128];
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;

  *a1 = a2;
  a1[1] = (WTF::BitVector *)(a1 + 3);
  a1[2] = (WTF::BitVector *)4;
  a1[11] = (WTF::BitVector *)0x8000000000000000;
  v64 = 0x8000000000000000;
  v65 = (WTF *)v67;
  v66 = 16;
  v63[0] = (WTF::BitVector *)&v64;
  v63[1] = (WTF::BitVector *)a1;
  v63[2] = a2;
  v2 = *(unsigned int *)(*(_QWORD *)a2 + 60);
  if (!(_DWORD)v2)
    goto LABEL_75;
  if (v2 >> 28)
  {
    __break(0xC471u);
    goto LABEL_77;
  }
  v5 = 16 * v2;
  v6 = (char *)WTF::fastMalloc((WTF *)(16 * v2));
  bzero(v6, v5);
  v14 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(*(_QWORD *)a2 + 60);
  v69 = 0;
  v70 = 0;
  v68 = 0x8000000000000000;
  if (!v15)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x197FEBF40);
  }
  *(_QWORD *)&v71 = **(_QWORD **)(v14 + 48);
  DWORD2(v71) = 0;
  v16 = *(unsigned int *)v71;
  if (v16 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v68, v16 + 1, 0), (v68 & 0x8000000000000000) != 0))
  {
    v17 = &v68;
  }
  else
  {
    v17 = (unint64_t *)(2 * v68 + 8);
  }
  v18 = (v16 >> 3) & 0x1FFFFFF8;
  v19 = *(unint64_t *)((char *)v17 + v18);
  *(unint64_t *)((char *)v17 + v18) = v19 | (1 << v16);
  v20 = HIDWORD(v70);
  if ((v19 & (1 << v16)) != 0)
  {
    if (!HIDWORD(v70))
      goto LABEL_37;
  }
  else
  {
    if (HIDWORD(v70) == (_DWORD)v70)
    {
      v62 = (__int128 *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v71);
      v20 = HIDWORD(v70);
      v21 = v69;
      v22 = *v62;
    }
    else
    {
      v21 = v69;
      v22 = v71;
    }
    *(_OWORD *)(v21 + 16 * v20) = v22;
    LODWORD(v20) = HIDWORD(v70) + 1;
    HIDWORD(v70) = v20;
    if (!(_DWORD)v20)
      goto LABEL_37;
  }
  v23 = 0;
  do
  {
    v24 = v69;
    v25 = v69 + 16 * v20;
    v26 = *(unsigned int **)(v25 - 16);
    v27 = *(unsigned int *)(v25 - 8);
    v20 = (v20 - 1);
    HIDWORD(v70) = v20;
    if (!v26)
      break;
    if (!(_DWORD)v27)
      *(_QWORD *)&v6[16 * *v26] = v23++;
    if (v27 >= v26[17])
    {
      *(_QWORD *)&v6[16 * *v26 + 8] = v23++;
    }
    else
    {
      *(_QWORD *)&v71 = v26;
      DWORD2(v71) = v27 + 1;
      if ((_DWORD)v20 == (_DWORD)v70)
      {
        v36 = (__int128 *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, v20 + 1, (unint64_t)&v71);
        v20 = HIDWORD(v70);
        v24 = v69;
        v28 = *v36;
      }
      else
      {
        v28 = v71;
      }
      *(_OWORD *)(v24 + 16 * v20) = v28;
      LODWORD(v20) = ++HIDWORD(v70);
      if (v27 >= v26[17])
      {
        __break(0xC471u);
        JUMPOUT(0x197FEBF38);
      }
      v29 = *(unsigned int **)(*((_QWORD *)v26 + 7) + 16 * v27);
      *(_QWORD *)&v71 = v29;
      DWORD2(v71) = 0;
      v30 = v68;
      if ((v68 & 0x8000000000000000) != 0)
        v31 = 63;
      else
        v31 = *(_QWORD *)(2 * v68);
      v32 = *v29;
      if (v31 <= v32)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v68, v32 + 1, 0);
        v30 = v68;
        LODWORD(v20) = HIDWORD(v70);
      }
      if (v30 >= 0)
        v33 = (unint64_t *)(2 * v30 + 8);
      else
        v33 = &v68;
      v34 = (v32 >> 3) & 0x1FFFFFF8;
      v35 = *(unint64_t *)((char *)v33 + v34);
      *(unint64_t *)((char *)v33 + v34) = v35 | (1 << v32);
      if ((v35 & (1 << v32)) == 0)
      {
        if ((_DWORD)v20 == (_DWORD)v70)
        {
          v37 = (_OWORD *)WTF::Vector<WTF::GraphNodeWith<JSC::B3::BasicBlock *,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, v20 + 1, (unint64_t)&v71);
          *(_OWORD *)(v69 + 16 * HIDWORD(v70)) = *v37;
        }
        else
        {
          *(_OWORD *)(v69 + 16 * v20) = v71;
        }
        LODWORD(v20) = ++HIDWORD(v70);
      }
    }
  }
  while ((_DWORD)v20);
LABEL_37:
  v38 = v69;
  if (v69)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v38, v7, v8, v9, v10, v11, v12, v13);
  }
  if ((v68 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v68, v7, v8, v9, v10, v11, v12, v13);
  v39 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 60))
  {
    v40 = 0;
    do
    {
      v7 = *(unsigned int **)(*(_QWORD *)(v39 + 48) + 8 * v40);
      if (v7)
      {
        v41 = v7[17];
        if ((_DWORD)v41)
        {
          v42 = (unsigned int **)*((_QWORD *)v7 + 7);
          v43 = &v6[16 * *v7];
          v46 = *(_QWORD *)v43;
          v44 = v43 + 8;
          v45 = v46;
          while (1)
          {
            v47 = **v42;
            if (*(_QWORD *)&v6[16 * v47] <= v45 && *(_QWORD *)&v6[16 * v47 + 8] >= *v44)
              break;
            v42 += 2;
            if (!--v41)
              goto LABEL_51;
          }
          WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(JSC::B3::CFG&)::{lambda(JSC::B3::BasicBlock *)#1}::operator()(v63, v7, v8, v9, v10, v11, v12, v13);
          v39 = *(_QWORD *)a2;
        }
      }
LABEL_51:
      ++v40;
    }
    while (v40 < *(unsigned int *)(v39 + 60));
  }
  WTF::fastFree((unint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
  v55 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 60))
  {
    v56 = 0;
    do
    {
      v48 = *(unsigned int **)(*(_QWORD *)(v55 + 48) + 8 * v56);
      if (v48 && !v48[17])
      {
        WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(JSC::B3::CFG&)::{lambda(JSC::B3::BasicBlock *)#1}::operator()(v63, v48, v49, v50, v51, v52, v53, v54);
        v55 = *(_QWORD *)a2;
      }
      ++v56;
      v57 = *(unsigned int *)(v55 + 60);
    }
    while (v56 < v57);
    if ((_DWORD)v57)
    {
      v58 = v57 - 1;
      v59 = 8 * (v57 - 1);
      while (*(_DWORD *)(*(_QWORD *)a2 + 60) > v58)
      {
        v48 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a2 + 48) + v59);
        if (v48)
          WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(JSC::B3::CFG&)::{lambda(JSC::B3::BasicBlock *)#1}::operator()(v63, v48, v49, v50, v51, v52, v53, v54);
        v59 -= 8;
        if (--v58 == -1)
          goto LABEL_64;
      }
      __break(0xC471u);
LABEL_77:
      JUMPOUT(0x197FEBF30);
    }
  }
LABEL_64:
  v60 = v65;
  if (v67 != (_BYTE *)v65 && v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v60, v48, v49, v50, v51, v52, v53, v54);
  }
  if ((v64 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v64, v48, v49, v50, v51, v52, v53, v54);
  return a1;
}

void WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(JSC::B3::CFG&)::{lambda(JSC::B3::BasicBlock *)#1}::operator()(WTF::BitVector **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::BitVector *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::BitVector *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF::BitVector *v28;
  unsigned int i;
  unsigned int *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int **v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned int *v46;
  unsigned int *v47;

  v46 = a2;
  v47 = a2;
  v11 = (uint64_t *)*a1;
  v10 = a1[1];
  v12 = *a2;
  v13 = *(_QWORD *)*a1;
  if (v13 < 0)
    v14 = 63;
  else
    v14 = *(_QWORD *)(2 * v13);
  if (v14 <= v12)
  {
    WTF::BitVector::resizeOutOfLine(*a1, v12 + 1, 0);
    v13 = *v11;
  }
  if (v13 >= 0)
    v15 = 2 * v13 + 8;
  else
    v15 = (uint64_t)v11;
  v16 = (v12 >> 3) & 0x1FFFFFF8;
  v17 = *(_QWORD *)(v15 + v16);
  *(_QWORD *)(v15 + v16) = v17 | (1 << v12);
  if ((v17 & (1 << v12)) == 0)
  {
    v18 = v11 + 1;
    v19 = *((unsigned int *)v11 + 5);
    if ((_DWORD)v19 == *((_DWORD *)v11 + 4))
    {
      v45 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v47);
      v19 = *((unsigned int *)v11 + 5);
      *(_QWORD *)(v11[1] + 8 * v19) = *v45;
    }
    else
    {
      *(_QWORD *)(*v18 + 8 * v19) = a2;
    }
    *((_DWORD *)v11 + 5) = v19 + 1;
    v20 = *((unsigned int *)v10 + 5);
    if ((_DWORD)v20 == *((_DWORD *)v10 + 4))
    {
      WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>((uint64_t)v10 + 8, &v46, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v21 = *((_QWORD *)v10 + 1) + 16 * v20;
      *(_QWORD *)v21 = a2;
      *(_BYTE *)(v21 + 8) = 0;
      *((_DWORD *)v10 + 5) = v20 + 1;
    }
    v24 = *((_QWORD *)v10 + 11);
    v23 = (WTF::BitVector *)((char *)v10 + 88);
    v22 = v24;
    v25 = *a2;
    if (v24 < 0)
      v26 = 63;
    else
      v26 = *(_QWORD *)(2 * v22);
    if (v26 <= v25)
    {
      WTF::BitVector::resizeOutOfLine(v23, v25 + 1, 0);
      v22 = *(_QWORD *)v23;
    }
    if (v22 >= 0)
      v27 = 2 * v22 + 8;
    else
      v27 = (uint64_t)v23;
    *(_QWORD *)(v27 + ((v25 >> 3) & 0x1FFFFFF8)) |= 1 << v25;
    v28 = *a1;
    v30 = (unsigned int *)((char *)*a1 + 20);
    for (i = *v30; i; i = *((_DWORD *)v28 + 5))
    {
      v31 = (_QWORD *)((char *)v28 + 8);
      v32 = *(_QWORD *)(*((_QWORD *)v28 + 1) + 8 * i - 8);
      *((_DWORD *)v28 + 5) = i - 1;
      if (!v32)
        break;
      v33 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v33)
      {
        v34 = *(unsigned int ***)(v32 + 24);
        v35 = 8 * v33;
        do
        {
          v36 = *v34;
          v47 = *v34;
          v37 = *(_QWORD *)v28;
          if ((*(_QWORD *)v28 & 0x8000000000000000) != 0)
            v38 = 63;
          else
            v38 = *(_QWORD *)(2 * v37);
          v39 = *v36;
          if (v38 <= v39)
          {
            WTF::BitVector::resizeOutOfLine(v28, v39 + 1, 0);
            v37 = *(_QWORD *)v28;
          }
          if (v37 >= 0)
            v40 = 2 * v37 + 8;
          else
            v40 = (uint64_t)v28;
          v41 = (v39 >> 3) & 0x1FFFFFF8;
          v42 = *(_QWORD *)(v40 + v41);
          *(_QWORD *)(v40 + v41) = v42 | (1 << v39);
          if ((v42 & (1 << v39)) == 0)
          {
            v43 = *v30;
            if ((_DWORD)v43 == *((_DWORD *)v28 + 4))
            {
              v44 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28 + 8, v43 + 1, (unint64_t)&v47);
              v43 = *v30;
              *(_QWORD *)(*v31 + 8 * v43) = *v44;
            }
            else
            {
              *(_QWORD *)(*v31 + 8 * v43) = v36;
            }
            *v30 = v43 + 1;
          }
          ++v34;
          v35 -= 8;
        }
        while (v35);
        v28 = *a1;
      }
      v30 = (unsigned int *)((char *)v28 + 20);
    }
  }
}

void WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  v15 = *(_QWORD *)a1;
  if (v14 <= v10)
  {
LABEL_22:
    v20 = *(unsigned int *)(a1 + 12);
    v21 = v20 + 1;
    v22 = v15 + 16 * v20;
    *(_QWORD *)v22 = *a2;
    *(_BYTE *)(v22 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v21;
    return;
  }
  if (v14 < 5)
  {
    v16 = (_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4;
    if (!(_DWORD)v11)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    if (!(_DWORD)v11)
      goto LABEL_16;
LABEL_13:
    v17 = 16 * v11;
    v18 = (__int128 *)v15;
    do
    {
      v19 = *v18++;
      *v16++ = v19;
      v17 -= 16;
    }
    while (v17);
    v16 = *(_OWORD **)a1;
LABEL_16:
    if (a1 + 16 == v15 || !v15)
    {
      v15 = (unint64_t)v16;
    }
    else
    {
      if (v16 == (_OWORD *)v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)a1;
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

WTF **JSC::B3::BackwardsDominators::BackwardsDominators(JSC::B3::BackwardsDominators *this, JSC::B3::Procedure *a2)
{
  WTF::BitVector **v3;
  WTF::BitVector **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = (WTF::BitVector **)*((_QWORD *)a2 + 15);
  if (!v3)
  {
    v3 = (WTF::BitVector **)WTF::fastMalloc((WTF *)0x60);
    v5 = WTF::BackwardsGraph<JSC::B3::CFG>::BackwardsGraph(v3, *((WTF::BitVector **)a2 + 12));
    v13 = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 15) = v5;
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 88);
      if ((v14 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * v14, v6, v7, v8, v9, v10, v11, v12);
      v15 = *(_QWORD *)(v13 + 8);
      if (v13 + 24 != v15 && v15 != 0)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v15, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
      v3 = (WTF::BitVector **)*((_QWORD *)a2 + 15);
    }
  }
  return WTF::Dominators<JSC::B3::BackwardsCFG>::Dominators((uint64_t)this, (uint64_t **)v3, 0);
}

WTF **WTF::Dominators<JSC::B3::BackwardsCFG>::Dominators(uint64_t a1, uint64_t **a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  char v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  WTF *v36;
  __int128 v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  _BYTE *v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  WTF **v62;
  uint64_t v63;
  WTF *v64;
  int v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  int v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  WTF **v81;
  uint64_t v82;
  WTF *v83;
  int v84;
  uint64_t v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  unsigned int **v90;
  unsigned int *v91;
  unsigned int *v92;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int **v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  unsigned int *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  char *v110;
  char *v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  unsigned int *v120;
  char *v121;
  int v122;
  char *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t *v126;
  unsigned int *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  BOOL v132;
  unsigned int *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  WTF *v144;
  unint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  char *v148;
  unsigned int *v149;
  unsigned int *v150;
  int v151;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  WTF **v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  char *v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  WTF *v180;
  char *v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  unsigned int *v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  __int128 *v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  __int128 v209;
  char *v210;
  WTF *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unsigned int i;
  char *v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  _DWORD *v242;
  unint64_t j;
  uint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  unsigned int *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t k;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  void *v264;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  unsigned int *v277;
  int v278;
  uint64_t v279;
  unsigned int *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  int v286;
  uint64_t v287;
  unsigned int *v288;
  BOOL v289;
  char v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  unsigned int *v297;
  uint64_t v298;
  BOOL v299;
  _BOOL4 v300;
  _OWORD *v301;
  _OWORD *v302;
  __int128 v303;
  __int128 v304;
  __int128 *v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  _OWORD *v314;
  _OWORD *v315;
  __int128 v316;
  __int128 v317;
  __int128 *v318;
  __int128 v319;
  __int128 v320;
  WTF *v321;
  unint64_t *v322;
  uint64_t v323;
  WTF *v324;
  WTF *v325;
  WTF *v326;
  uint64_t v327;
  char *v328;
  unint64_t v329;
  double v331;
  float v332;
  double v333;
  float v334;
  uint64_t v335;
  unsigned int v336;
  unint64_t v337;
  unint64_t StatusReg;
  uint64_t v339;
  unsigned int *v340;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  float v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t *v354;
  uint64_t *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  _BYTE *v364;
  __int128 *casual;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  __int128 *v373;
  __int128 v374;
  uint64_t v375;
  uint64_t v376;
  __int128 *v377;
  uint64_t v378;
  unsigned int v379;
  unint64_t *v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  __int128 *v397;
  uint64_t v398;
  __int128 v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  double v412;
  float v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  unint64_t v417;
  unint64_t v418;
  _QWORD *v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  _BYTE *v432;
  __int128 *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  __int128 *v441;
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  __int128 *v445;
  uint64_t v446;
  unsigned int v447;
  unint64_t *v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  unint64_t *v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  double v467;
  float v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _DWORD *v476;
  _DWORD *v477;
  WTF *v478;
  uint64_t v479;
  double v480;
  float v481;
  int v482;
  WTF *v483;
  int v484;
  WTF *v485;
  unsigned int *v486;
  WTF **v487;
  uint64_t v488;
  unint64_t v489;
  _QWORD *v490;
  __int128 v491;
  WTF *v492;
  WTF *v493[2];
  void *__src[2];
  WTF *v495;
  uint64_t v496;
  WTF *v497;
  uint64_t v498;
  uint64_t **v499;
  WTF *v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  char v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  char v509;
  WTF *v510;
  uint64_t v511;
  unsigned int *v512;
  uint64_t v513;
  WTF *v514;
  uint64_t v515;
  unint64_t v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  const char *v521;
  uint64_t v522;
  char v523;

  *(_QWORD *)(a1 + 8) = 0;
  v490 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  v5 = *(unsigned int *)(**a2 + 60);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x197FEECFCLL);
    }
    v6 = 5 * v5;
    v7 = 40 * v5;
    v8 = WTF::fastMalloc((WTF *)(40 * v5));
    *(_DWORD *)(a1 + 16) = (v7 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = v8 + 8 * v6;
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 32) = -1;
      v8 += 40;
    }
    while (v8 != v9);
    a2 = *(uint64_t ***)a1;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v488 = a1 + 24;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = -1;
  v499 = a2;
  v10 = *(_DWORD *)(**a2 + 60);
  v500 = 0;
  v501 = 0;
  v502 = v10;
  if (v10)
  {
    if (v10 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x197FEED04);
    }
    v11 = WTF::fastMalloc((WTF *)(88 * v10));
    v501 = 88 * v10 / 0x58;
    v500 = (WTF *)v11;
    v12 = v11 + 88 * v10;
    do
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = -1;
      *(_QWORD *)(v11 + 24) = 0;
      *(_BYTE *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_BYTE *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_BYTE *)(v11 + 80) = 0;
      v11 += 88;
    }
    while (v11 != v12);
    a2 = v499;
  }
  v482 = a3;
  v487 = (WTF **)a1;
  v503 = 0;
  v504 = 0;
  v505 = -1;
  v506 = 0;
  v507 = 0;
  v508 = 0;
  v509 = 0;
  v511 = 0;
  v512 = 0;
  v510 = 0;
  LOBYTE(v513) = 0;
  v514 = 0;
  v515 = 0;
  v13 = *(unsigned int *)(**a2 + 60);
  if ((_DWORD)v13 != -1)
  {
    v14 = v500;
    do
    {
      if (v13)
      {
        v15 = **a2;
        if (*(_DWORD *)(v15 + 60) <= (v13 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x197FEEC94);
        }
        v16 = *(unsigned int **)(*(_QWORD *)(v15 + 48) + 8 * (v13 - 1));
        if (!v16)
          goto LABEL_19;
        v17 = 0;
        v18 = (uint64_t *)((char *)v14 + 88 * *v16);
      }
      else
      {
        v16 = 0;
        v17 = 1;
        v18 = &v503;
      }
      v18[5] = (uint64_t)v16;
      *((_BYTE *)v18 + 48) = v17;
LABEL_19:
      --v13;
    }
    while (v13 != -1);
  }
  *(_QWORD *)&v491 = 0x8000000000000000;
  BYTE8(v491) = 0;
  v492 = 0;
  v493[0] = 0;
  v517 = xmmword_19914FB90;
  LODWORD(v518) = 0;
  WTF::ExtendedGraphNodeWorklist<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int,WTF::SingleRootGraphSet<JSC::B3::CFG>>::push((WTF::BitVector *)&v491, (unsigned int **)&v517);
  while (HIDWORD(v493[0]))
  {
    v26 = (char *)v492 + 24 * HIDWORD(v493[0]);
    v27 = (unsigned int *)*((_QWORD *)v26 - 3);
    v28 = *(v26 - 16);
    LODWORD(v516) = *(_DWORD *)(v26 - 15);
    *(_DWORD *)((char *)&v516 + 3) = *((_DWORD *)v26 - 3);
    v29 = *((unsigned int *)v26 - 2);
    --HIDWORD(v493[0]);
    if (!v27)
      goto LABEL_25;
LABEL_26:
    *(_QWORD *)&v520 = v27;
    BYTE8(v520) = v28;
    *(_DWORD *)((unint64_t)&v520 | 9) = v516;
    *(_DWORD *)(((unint64_t)&v520 | 9) + 3) = *(_DWORD *)((char *)&v516 + 3);
    if (v29)
    {
      if (v28)
        goto LABEL_28;
      goto LABEL_42;
    }
    v33 = (char *)&v503;
    if (!v28)
      v33 = (char *)v500 + 88 * *v27;
    v34 = HIDWORD(v515);
    *((_DWORD *)v33 + 5) = HIDWORD(v515);
    if ((_DWORD)v34 == (_DWORD)v515)
    {
      v35 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v514, v34 + 1, (unint64_t)&v520);
      v34 = HIDWORD(v515);
      v36 = v514;
      v37 = *v35;
    }
    else
    {
      v36 = v514;
      v37 = v520;
    }
    *((_OWORD *)v36 + v34) = v37;
    ++HIDWORD(v515);
    v27 = (unsigned int *)v520;
    if (BYTE8(v520))
    {
LABEL_28:
      v30 = (uint64_t)v499;
      v31 = *((unsigned int *)v499 + 5);
      *(_QWORD *)&v517 = &v518;
      DWORD2(v517) = 4;
      HIDWORD(v517) = v31;
      if (v31 < 5)
      {
        v32 = &v518;
        if (!(_DWORD)v31)
          goto LABEL_67;
      }
      else
      {
        if (v31 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197FEEC9CLL);
        }
        v32 = (__int128 *)WTF::fastMalloc((WTF *)(16 * v31));
        DWORD2(v517) = v31;
        *(_QWORD *)&v517 = v32;
        v31 = *(unsigned int *)(v30 + 20);
        if (!(_DWORD)v31)
          goto LABEL_67;
      }
      v38 = *(__int128 **)(v30 + 8);
      v39 = 16 * v31;
      do
      {
        v40 = *v38++;
        *v32++ = v40;
        v39 -= 16;
      }
      while (v39);
      v32 = (__int128 *)v517;
LABEL_67:
      v56 = HIDWORD(v517);
      v57 = &v518 == v32 || v32 == 0;
      if (!v57)
      {
        *(_QWORD *)&v517 = 0;
        DWORD2(v517) = 0;
        WTF::fastFree((unint64_t)v32, v19, v20, v21, v22, v23, v24, v25);
      }
      if (v56 > v29)
      {
        if (BYTE8(v520))
        {
          v58 = (uint64_t)v499;
          v59 = *((unsigned int *)v499 + 5);
          *(_QWORD *)&v517 = &v518;
          DWORD2(v517) = 4;
          HIDWORD(v517) = v59;
          if (v59 < 5)
          {
            v60 = &v518;
            if ((_DWORD)v59)
              goto LABEL_86;
          }
          else
          {
            if (v59 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x197FEECDCLL);
            }
            v60 = (__int128 *)WTF::fastMalloc((WTF *)(16 * v59));
            DWORD2(v517) = v59;
            *(_QWORD *)&v517 = v60;
            v59 = *(unsigned int *)(v58 + 20);
            if ((_DWORD)v59)
            {
LABEL_86:
              v67 = *(__int128 **)(v58 + 8);
              v68 = 16 * v59;
              do
              {
                v69 = *v67++;
                *v60++ = v69;
                v68 -= 16;
              }
              while (v68);
            }
          }
        }
        else
        {
          *(_QWORD *)&v517 = &v518;
          *((_QWORD *)&v517 + 1) = 4;
          v61 = *(unsigned int *)(v520 + 36);
          if ((_DWORD)v61)
          {
            v62 = *(WTF ***)(v520 + 24);
            v63 = 8 * v61;
            do
            {
              v64 = *v62;
              v497 = *v62;
              v65 = HIDWORD(v517);
              if (HIDWORD(v517) == DWORD2(v517))
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>((uint64_t)&v517, &v497, v20, v21, v22, v23, v24, v25);
              }
              else
              {
                v66 = v517 + 16 * HIDWORD(v517);
                *(_QWORD *)v66 = v64;
                *(_BYTE *)(v66 + 8) = 0;
                HIDWORD(v517) = v65 + 1;
              }
              ++v62;
              v63 -= 8;
            }
            while (v63);
          }
        }
        v70 = HIDWORD(v517);
        v71 = v517;
        if (&v518 != (__int128 *)v517 && (_QWORD)v517 != 0)
        {
          *(_QWORD *)&v517 = 0;
          DWORD2(v517) = 0;
          WTF::fastFree(v71, v19, v20, v21, v22, v23, v24, v25);
        }
        if (v70 > v29 + 1)
        {
          v517 = v520;
          LODWORD(v518) = v29 + 1;
          v73 = HIDWORD(v493[0]);
          if (HIDWORD(v493[0]) == LODWORD(v493[0]))
          {
            v74 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v492, HIDWORD(v493[0]) + 1, (unint64_t)&v517);
            v73 = HIDWORD(v493[0]);
            v75 = (char *)v492 + 24 * HIDWORD(v493[0]);
            v76 = *(_QWORD *)(v74 + 16);
            *(_OWORD *)v75 = *(_OWORD *)v74;
          }
          else
          {
            v75 = (char *)v492 + 24 * HIDWORD(v493[0]);
            v76 = v518;
            *(_OWORD *)v75 = v517;
          }
          *((_QWORD *)v75 + 2) = v76;
          HIDWORD(v493[0]) = v73 + 1;
        }
        if (BYTE8(v520))
        {
          v77 = (uint64_t)v499;
          v78 = *((unsigned int *)v499 + 5);
          *(_QWORD *)&v517 = &v518;
          DWORD2(v517) = 4;
          HIDWORD(v517) = v78;
          if (v78 < 5)
          {
            v79 = &v518;
            if (!(_DWORD)v78)
              goto LABEL_113;
LABEL_111:
            v86 = *(__int128 **)(v77 + 8);
            v87 = 16 * v78;
            do
            {
              v88 = *v86++;
              *v79++ = v88;
              v87 -= 16;
            }
            while (v87);
            goto LABEL_113;
          }
          if (v78 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEECE4);
          }
          v79 = (__int128 *)WTF::fastMalloc((WTF *)(16 * v78));
          DWORD2(v517) = v78;
          *(_QWORD *)&v517 = v79;
          v78 = *(unsigned int *)(v77 + 20);
          if ((_DWORD)v78)
            goto LABEL_111;
        }
        else
        {
          *(_QWORD *)&v517 = &v518;
          *((_QWORD *)&v517 + 1) = 4;
          v80 = *(unsigned int *)(v520 + 36);
          if ((_DWORD)v80)
          {
            v81 = *(WTF ***)(v520 + 24);
            v82 = 8 * v80;
            do
            {
              v83 = *v81;
              v497 = *v81;
              v84 = HIDWORD(v517);
              if (HIDWORD(v517) == DWORD2(v517))
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>((uint64_t)&v517, &v497, v20, v21, v22, v23, v24, v25);
              }
              else
              {
                v85 = v517 + 16 * HIDWORD(v517);
                *(_QWORD *)v85 = v83;
                *(_BYTE *)(v85 + 8) = 0;
                HIDWORD(v517) = v84 + 1;
              }
              ++v81;
              v82 -= 8;
            }
            while (v82);
          }
        }
LABEL_113:
        if (HIDWORD(v517) <= v29)
        {
          __break(0xC471u);
          JUMPOUT(0x197FEEC8CLL);
        }
        v89 = v517;
        v90 = (unsigned int **)(v517 + 16 * v29);
        v91 = *v90;
        v92 = v90[1];
        if (&v518 != (__int128 *)v517 && (_QWORD)v517 != 0)
        {
          *(_QWORD *)&v517 = 0;
          DWORD2(v517) = 0;
          WTF::fastFree(v89, v19, v20, v21, v22, v23, v24, v25);
        }
        *(_QWORD *)&v517 = v91;
        *((_QWORD *)&v517 + 1) = v92;
        LODWORD(v518) = 0;
        if (WTF::ExtendedGraphNodeWorklist<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int,WTF::SingleRootGraphSet<JSC::B3::CFG>>::push((WTF::BitVector *)&v491, (unsigned int **)&v517))
        {
          v94 = (char *)&v503;
          if (!(_BYTE)v92)
            v94 = (char *)v500 + 88 * *v91;
          v95 = v520;
          v94[8] = BYTE8(v520);
          *(_QWORD *)v94 = v95;
        }
      }
    }
    else
    {
LABEL_42:
      *(_QWORD *)&v517 = &v518;
      *((_QWORD *)&v517 + 1) = 4;
      v41 = v27[9];
      if ((_DWORD)v41)
      {
        v42 = 0;
        v43 = (uint64_t *)*((_QWORD *)v27 + 3);
        v44 = &v43[v41];
        v32 = &v518;
        while (1)
        {
          v45 = *v43;
          if (v42 == DWORD2(v517))
            break;
          v50 = &v32[v42];
          *(_QWORD *)v50 = v45;
          v51 = (char *)v50 + 8;
LABEL_66:
          *v51 = 0;
          HIDWORD(v517) = ++v42;
          if (++v43 == v44)
            goto LABEL_67;
        }
        v46 = v42 + ((unint64_t)v42 >> 2);
        if (v46 >= 0x10)
          v47 = v46 + 1;
        else
          v47 = 16;
        if (v47 <= (unint64_t)v42 + 1)
          v48 = v42 + 1;
        else
          v48 = v47;
        if (v48 < 5)
        {
          *(_QWORD *)&v517 = &v518;
          DWORD2(v517) = 4;
          v49 = &v518;
          if (v42)
            goto LABEL_57;
        }
        else
        {
          if (v48 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEEBDCLL);
          }
          v49 = (__int128 *)WTF::fastMalloc((WTF *)(16 * v48));
          DWORD2(v517) = v48;
          *(_QWORD *)&v517 = v49;
          if (!v42)
            goto LABEL_60;
LABEL_57:
          v52 = 16 * v42;
          v53 = v32;
          do
          {
            v54 = *v53++;
            *v49++ = v54;
            v52 -= 16;
          }
          while (v52);
          v49 = (__int128 *)v517;
        }
LABEL_60:
        if (&v518 != v32 && v32)
        {
          if (v49 == v32)
          {
            *(_QWORD *)&v517 = 0;
            DWORD2(v517) = 0;
          }
          WTF::fastFree((unint64_t)v32, v19, v20, v21, v22, v23, v24, v25);
          v49 = (__int128 *)v517;
        }
        v42 = HIDWORD(v517);
        v55 = &v49[HIDWORD(v517)];
        *(_QWORD *)v55 = v45;
        v51 = (char *)v55 + 8;
        v32 = v49;
        goto LABEL_66;
      }
    }
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
LABEL_25:
  if (v28)
    goto LABEL_26;
  if (v492)
    WTF::fastFree((unint64_t)v492, v19, v20, v21, v22, v23, v24, v25);
  if ((v491 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v491, v19, v20, v21, v22, v23, v24, v25);
  v96 = HIDWORD(v515);
  v97 = v488;
  if (HIDWORD(v515) >= 2)
  {
    do
    {
      if (HIDWORD(v515) <= --v96)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEEC7CLL);
      }
      v491 = *((_OWORD *)v514 + v96);
      v98 = (unsigned int **)&v503;
      if (!BYTE8(v491))
        v98 = (unsigned int **)((char *)v500 + 88 * *(unsigned int *)v491);
      WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v517, (uint64_t)v499, (unsigned int *)v491, BYTE8(v491), v22, v23, v24, v25);
      v102 = (unint64_t *)v517;
      v103 = (unint64_t *)(v517 + 16 * HIDWORD(v517));
      if (HIDWORD(v517))
      {
        do
        {
          v104 = (unsigned int *)*v102;
          v100 = v102[1];
          v105 = (char *)&v503;
          v106 = v100;
          if (!(_BYTE)v100)
            v105 = (char *)v500 + 88 * *v104;
          v107 = *((_QWORD *)v105 + 3);
          v108 = v105[32];
          if (v107)
            v109 = 0;
          else
            v109 = v108 == 0;
          if (!v109)
          {
            WTF::Dominators<JSC::B3::BackwardsCFG>::LengauerTarjan::compress((uint64_t)&v499, *v102, v100, v101, v22, v23, v24, v25);
            v110 = (char *)&v503;
            if (!v106)
              v110 = (char *)v500 + 88 * *v104;
            v100 = v110[48];
            v104 = (unsigned int *)*((_QWORD *)v110 + 5);
          }
          v111 = (char *)&v503;
          if (!(_BYTE)v100)
            v111 = (char *)v500 + 88 * *v104;
          v112 = *((_DWORD *)v111 + 5);
          if (*((_DWORD *)v98 + 5) < v112)
            v112 = *((_DWORD *)v98 + 5);
          *((_DWORD *)v98 + 5) = v112;
          v102 += 2;
        }
        while (v102 != v103);
        v102 = (unint64_t *)v517;
      }
      if (&v518 != (__int128 *)v102 && v102)
      {
        *(_QWORD *)&v517 = 0;
        DWORD2(v517) = 0;
        WTF::fastFree((unint64_t)v102, v99, v100, v101, v22, v23, v24, v25);
      }
      v113 = *((unsigned int *)v98 + 5);
      if (HIDWORD(v515) <= v113)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEEC84);
      }
      v114 = (char *)&v503;
      if (!*((_BYTE *)v514 + 16 * v113 + 8))
        v114 = (char *)v500 + 88 * **((unsigned int **)v514 + 2 * v113);
      v115 = (uint64_t *)(v114 + 56);
      v116 = *((unsigned int *)v114 + 17);
      if ((_DWORD)v116 == *((_DWORD *)v114 + 16))
      {
        v117 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v491);
        v116 = *((unsigned int *)v114 + 17);
        v118 = *((_QWORD *)v114 + 7);
        v119 = *v117;
      }
      else
      {
        v118 = *v115;
        v119 = v491;
      }
      *(_OWORD *)(v118 + 16 * v116) = v119;
      ++*((_DWORD *)v114 + 17);
      v120 = v98[1];
      v121 = (char *)&v503;
      if (!BYTE8(v491))
        v121 = (char *)v500 + 88 * *(unsigned int *)v491;
      *((_QWORD *)v121 + 3) = *v98;
      v121[32] = (char)v120;
      v122 = *((unsigned __int8 *)v98 + 8);
      v123 = (char *)&v503;
      if (!*((_BYTE *)v98 + 8))
        v123 = (char *)v500 + 88 * **v98;
      v124 = *((unsigned int *)v123 + 17);
      if ((_DWORD)v124)
      {
        v125 = (unint64_t *)*((_QWORD *)v123 + 7);
        v126 = &v125[2 * v124];
        do
        {
          v127 = (unsigned int *)*v125;
          v100 = v125[1];
          v128 = (char *)&v503;
          v129 = v100;
          if (!(_BYTE)v100)
            v128 = (char *)v500 + 88 * *v127;
          v130 = *((_QWORD *)v128 + 3);
          v131 = v128[32];
          if (v130)
            v132 = 0;
          else
            v132 = v131 == 0;
          v133 = (unsigned int *)*v125;
          if (!v132)
          {
            WTF::Dominators<JSC::B3::BackwardsCFG>::LengauerTarjan::compress((uint64_t)&v499, *v125, v100, v101, v22, v23, v24, v25);
            v134 = (char *)&v503;
            if (!v129)
              v134 = (char *)v500 + 88 * *v127;
            v135 = v134 + 40;
            v133 = (unsigned int *)*((_QWORD *)v134 + 5);
            v100 = *((_QWORD *)v135 + 1);
          }
          v136 = (char *)&v503;
          if (!v129)
            v136 = (char *)v500 + 88 * *v127;
          v137 = (char *)&v503;
          if (!(_BYTE)v100)
            v137 = (char *)v500 + 88 * *v133;
          if (*((_DWORD *)v137 + 5) >= *((_DWORD *)v136 + 5))
          {
            v138 = v136 + 72;
            v139 = (uint64_t)*v98;
            v138[8] = *((_BYTE *)v98 + 8);
            *(_QWORD *)v138 = v139;
          }
          else
          {
            *((_QWORD *)v136 + 9) = v133;
            v136[80] = v100;
          }
          v125 += 2;
        }
        while (v125 != v126);
        v122 = *((unsigned __int8 *)v98 + 8);
      }
      v140 = (char *)&v503;
      if (!v122)
        v140 = (char *)v500 + 88 * **v98;
      if (*((_DWORD *)v140 + 16))
      {
        if (*((_DWORD *)v140 + 17))
          *((_DWORD *)v140 + 17) = 0;
        v141 = *((_QWORD *)v140 + 7);
        if (v141)
        {
          *((_QWORD *)v140 + 7) = 0;
          *((_DWORD *)v140 + 16) = 0;
          WTF::fastFree(v141, v99, v100, v101, v22, v23, v24, v25);
        }
      }
      v97 = v488;
    }
    while (v96 > 1);
    v142 = HIDWORD(v515);
    if (HIDWORD(v515) >= 2)
    {
      v143 = 0;
      v144 = v500;
      v145 = 1;
      do
      {
        v146 = &v503;
        if (!*((_BYTE *)v514 + v143 + 24))
          v146 = (uint64_t *)((char *)v144 + 88 * **(unsigned int **)((char *)v514 + v143 + 16));
        v147 = *((unsigned int *)v146 + 5);
        if (v142 <= v147)
        {
          __break(0xC471u);
          JUMPOUT(0x197FEECACLL);
        }
        v148 = (char *)v514 + 16 * v147;
        v149 = (unsigned int *)v146[9];
        v150 = *(unsigned int **)v148;
        v151 = v148[8];
        if (v149 != v150 || *((unsigned __int8 *)v146 + 80) != v151)
        {
          v153 = &v503;
          if (!*((_BYTE *)v146 + 80))
            v153 = (uint64_t *)((char *)v144 + 88 * *v149);
          v154 = v146 + 9;
          v155 = v153[9];
          *((_BYTE *)v154 + 8) = *((_BYTE *)v153 + 80);
          *v154 = v155;
          v142 = HIDWORD(v515);
        }
        ++v145;
        v143 += 16;
      }
      while (v145 < v142);
    }
  }
  v156 = v487;
  v157 = *(unsigned int *)(**(_QWORD **)*v487 + 60);
  if ((_DWORD)v157 != -1)
  {
    do
    {
      if (v157)
      {
        v158 = **(_QWORD **)*v487;
        if (*(_DWORD *)(v158 + 60) <= (v157 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x197FEECA4);
        }
        v159 = *(unsigned int **)(*(_QWORD *)(v158 + 48) + 8 * (v157 - 1));
        v517 = (unint64_t)v159;
        if (!v159)
          goto LABEL_217;
        v160 = *v159;
        v161 = (char *)v500 + 88 * *v159;
        v162 = (unsigned int *)*((_QWORD *)v161 + 9);
        v163 = *((_QWORD *)v161 + 10);
        v164 = *v490 + 40 * v160;
      }
      else
      {
        v517 = xmmword_19914FB90;
        v164 = v97;
        v162 = v512;
        LOBYTE(v163) = v513;
      }
      *(_QWORD *)(v164 + 16) = v162;
      *(_BYTE *)(v164 + 24) = v163;
      if (v162)
        v165 = 0;
      else
        v165 = v163 == 0;
      if (!v165)
      {
        v166 = v97;
        if (!(_BYTE)v163)
          v166 = *v490 + 40 * *v162;
        v167 = *(unsigned int *)(v166 + 12);
        if ((_DWORD)v167 == *(_DWORD *)(v166 + 8))
        {
          v168 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v166, v167 + 1, (unint64_t)&v517);
          v167 = *(unsigned int *)(v166 + 12);
          v169 = *(_QWORD *)v166;
          v170 = *v168;
          v97 = v488;
        }
        else
        {
          v169 = *(_QWORD *)v166;
          v170 = v517;
        }
        *(_OWORD *)(v169 + 16 * v167) = v170;
        ++*(_DWORD *)(v166 + 12);
      }
LABEL_217:
      --v157;
    }
    while (v157 != -1);
  }
  v497 = 0;
  v498 = 0;
  v517 = xmmword_19914FB90;
  LOBYTE(v518) = 0;
  v171 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v497, 1uLL, (unint64_t)&v517);
  v179 = HIDWORD(v498);
  v180 = v497;
  v181 = (char *)v497 + 24 * HIDWORD(v498);
  v182 = *(_QWORD *)(v171 + 16);
  *(_OWORD *)v181 = *(_OWORD *)v171;
  *((_QWORD *)v181 + 2) = v182;
  v183 = __CFADD__(v179, 1);
  v184 = (v179 + 1);
  HIDWORD(v498) = v184;
  if (!v183)
  {
    v185 = 0;
    v186 = 0;
    v187 = v488;
    do
    {
      v188 = (char *)v180 + 24 * v184;
      v190 = (unsigned int *)*((_QWORD *)v188 - 3);
      v189 = *((_QWORD *)v188 - 2);
      v191 = v189;
      v192 = *(v188 - 8);
      v193 = (v184 - 1);
      HIDWORD(v498) = v184 - 1;
      if (v192 == 1)
      {
        v199 = v187;
        if (!(_BYTE)v189)
          v199 = *v490 + 40 * *v190;
        *(_DWORD *)(v199 + 36) = v186++;
      }
      else if (!v192)
      {
        v194 = v187;
        if (!(_BYTE)v189)
          v194 = *v490 + 40 * *v190;
        *(_DWORD *)(v194 + 32) = v185;
        *(_QWORD *)&v517 = v190;
        *((_QWORD *)&v517 + 1) = v189;
        LOBYTE(v518) = 1;
        if ((_DWORD)v193 == (_DWORD)v498)
        {
          v195 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v497, v184, (unint64_t)&v517);
          v196 = HIDWORD(v498);
          v180 = v497;
          v197 = (char *)v497 + 24 * HIDWORD(v498);
          v198 = *(_QWORD *)(v195 + 16);
          v187 = v488;
          *(_OWORD *)v197 = *(_OWORD *)v195;
          *((_QWORD *)v197 + 2) = v198;
          v184 = (v196 + 1);
        }
        else
        {
          v200 = v517;
          v201 = (char *)v180 + 24 * v193;
          *((_QWORD *)v201 + 2) = v518;
          *(_OWORD *)v201 = v200;
        }
        HIDWORD(v498) = v184;
        v202 = v187;
        if (!v191)
          v202 = *v490 + 40 * *v190;
        ++v185;
        v203 = *(unsigned int *)(v202 + 12);
        if ((_DWORD)v203)
        {
          v204 = *(__int128 **)v202;
          v205 = 16 * v203;
          do
          {
            v517 = *v204;
            LOBYTE(v518) = 0;
            if ((_DWORD)v184 == (_DWORD)v498)
            {
              v206 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v497, v184 + 1, (unint64_t)&v517);
              LODWORD(v184) = HIDWORD(v498);
              v180 = v497;
              v207 = (char *)v497 + 24 * HIDWORD(v498);
              v208 = *(_QWORD *)(v206 + 16);
              v187 = v488;
              *(_OWORD *)v207 = *(_OWORD *)v206;
              *((_QWORD *)v207 + 2) = v208;
            }
            else
            {
              v209 = v517;
              v210 = (char *)v180 + 24 * v184;
              *((_QWORD *)v210 + 2) = v518;
              *(_OWORD *)v210 = v209;
            }
            v184 = (v184 + 1);
            HIDWORD(v498) = v184;
            ++v204;
            v205 -= 16;
          }
          while (v205);
        }
        v193 = v184;
      }
      v184 = v193;
    }
    while ((_DWORD)v193);
  }
  if (v482)
  {
    v211 = *v487;
    *(_QWORD *)&v491 = v211;
    *((_QWORD *)&v491 + 1) = v487;
    v492 = v211;
    *(_OWORD *)v493 = 0u;
    *(_OWORD *)__src = 0u;
    v212 = *(unsigned int *)(**(_QWORD **)v211 + 60);
    v213 = (v212 + 1);
    v483 = v180;
    v485 = v211;
    if ((_DWORD)v212 == -1)
    {
      v214 = 31;
      v215 = 31;
    }
    else
    {
      if (v213 <= 0x10)
        v216 = 16;
      else
        v216 = (v212 + 1);
      WTF::Vector<WTF::FastBitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v493, v216);
      if (v493[0] && HIDWORD(v493[1]) != (_DWORD)v213)
        bzero((char *)v493[0] + 16 * HIDWORD(v493[1]), (16 * v213 - 16 * HIDWORD(v493[1])) & 0xFFFFFFFFFFFFFFF0);
      v215 = v213 + 31;
      v217 = (v213 + 31) >> 5;
      HIDWORD(v493[1]) = v212 + 1;
      v218 = 16 * v212;
      for (i = v212; i != -1; --i)
      {
        if (HIDWORD(v493[1]) <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x197FEECB4);
        }
        v220 = (char *)v493[0] + v218;
        v221 = *(_QWORD *)((char *)v493[0] + v218 + 8) + 31;
        if ((v221 ^ v215) >= 0x20)
        {
          if (v217 < v221 >> 5)
            goto LABEL_725;
          v222 = v221 >> 5;
          v223 = (char *)WTF::fastMalloc((WTF *)(4 * v217));
          memcpy(v223, *(const void **)v220, 4 * v222);
          bzero(&v223[4 * v222], 4 * (v217 - v222));
          if (*(_QWORD *)v220)
            WTF::fastFree(*(_QWORD *)v220, v224, v225, v226, v227, v228, v229, v230);
          *(_QWORD *)v220 = v223;
        }
        *((_QWORD *)v220 + 1) = v213;
        v218 -= 16;
      }
      v214 = (unint64_t)__src[1] + 31;
      v180 = v483;
      v211 = v485;
    }
    if ((v215 ^ v214) >= 0x20)
    {
      v231 = (v213 + 31) >> 5;
      if (v231 < v214 >> 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEDC54);
      }
      v232 = v214 >> 5;
      v233 = (char *)WTF::fastMalloc((WTF *)(4 * v231));
      memcpy(v233, __src[0], 4 * v232);
      bzero(&v233[4 * v232], 4 * (v231 - v232));
      if (__src[0])
        WTF::fastFree((unint64_t)__src[0], v234, v235, v236, v237, v238, v239, v240);
      __src[0] = v233;
    }
    __src[1] = (void *)(v212 + 1);
    if (!HIDWORD(v493[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x197FEED0CLL);
    }
    bzero(*(void **)v493[0], ((unint64_t)(*((_QWORD *)v493[0] + 1) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    if (!HIDWORD(v493[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x197FEED14);
    }
    **(_DWORD **)v493[0] |= 1u;
    bzero(__src[0], (((unint64_t)__src[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    if ((_DWORD)v212 != -1)
    {
      v241 = *(uint64_t **)v211;
      v242 = __src[0];
      for (j = v212; j != -1; --j)
      {
        if (!j)
          goto LABEL_270;
        if (*(_DWORD *)(*v241 + 60) <= (j - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x197FEECBCLL);
        }
        if (*(_QWORD *)(*(_QWORD *)(*v241 + 48) + 8 * (j - 1)))
LABEL_270:
          v242[j >> 5] |= 1 << j;
      }
      if (v213 >= 2)
      {
        v244 = (uint64_t *)((char *)v211 + 88);
        v245 = v212;
        while (1)
        {
          v246 = **(_QWORD **)v211;
          if (*(_DWORD *)(v246 + 60) <= (v213 - 2))
          {
            __break(0xC471u);
            JUMPOUT(0x197FEECC4);
          }
          v247 = *(unsigned int **)(*(_QWORD *)(v246 + 48) + 8 * (v213 - 2));
          if (!v247)
          {
LABEL_303:
            if (v245 >= HIDWORD(v493[1]))
            {
              __break(0xC471u);
              JUMPOUT(0x197FEECECLL);
            }
            bzero(*((void **)v493[0] + 2 * v245), ((unint64_t)(*((_QWORD *)v493[0] + 2 * v245 + 1) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
            goto LABEL_305;
          }
          *(_QWORD *)&v517 = &v518;
          *((_QWORD *)&v517 + 1) = 4;
          v248 = (unint64_t *)(2 * *v244);
          if (*v244 < 0)
            v249 = 63;
          else
            v249 = *v248;
          v250 = *v247;
          if (v249 > v250
            && ((v251 = (uint64_t *)(v248 + 1), *v244 >= 0) ? (v252 = v251) : (v252 = v244),
                ((*(unint64_t *)((char *)v252 + ((v250 >> 3) & 0x1FFFFFF8)) >> v250) & 1) != 0))
          {
            v518 = xmmword_19914FB90;
            HIDWORD(v517) = 1;
            v253 = v247 + 17;
            v254 = v247[17];
            if (!(_DWORD)v254)
              goto LABEL_297;
          }
          else
          {
            v253 = v247 + 17;
            v254 = v247[17];
            if (!(_DWORD)v254)
              goto LABEL_303;
          }
          v255 = 0;
          for (k = 0; k != v254; ++k)
          {
            if (k >= *v253)
            {
              __break(0xC471u);
              JUMPOUT(0x197FEEBD4);
            }
            v257 = *(_QWORD *)(*((_QWORD *)v247 + 7) + v255);
            *(_QWORD *)&v520 = v257;
            v258 = HIDWORD(v517);
            if (HIDWORD(v517) == DWORD2(v517))
            {
              WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>((uint64_t)&v517, &v520, v173, v174, v175, v176, v177, v178);
            }
            else
            {
              v259 = v517 + 16 * HIDWORD(v517);
              *(_QWORD *)v259 = v257;
              *(_BYTE *)(v259 + 8) = 0;
              HIDWORD(v517) = v258 + 1;
            }
            v255 += 16;
          }
          v260 = HIDWORD(v517);
          v261 = v517;
          if (&v518 != (__int128 *)v517 && (_QWORD)v517)
          {
            *(_QWORD *)&v517 = 0;
            DWORD2(v517) = 0;
            WTF::fastFree(v261, v172, v173, v174, v175, v176, v177, v178);
          }
          v211 = v485;
          if (!v260)
            goto LABEL_303;
LABEL_297:
          if (v245 >= HIDWORD(v493[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FEECF4);
          }
          v262 = (char *)v493[0] + 16 * v245;
          v263 = (unint64_t)(*((_QWORD *)v262 + 1) + 31) >> 5;
          if (v263 == ((unint64_t)__src[1] + 31) >> 5)
          {
            memcpy(*(void **)v262, __src[0], 4 * v263);
          }
          else
          {
            v264 = (void *)WTF::fastMalloc((WTF *)((((unint64_t)__src[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
            memcpy(v264, __src[0], (((unint64_t)__src[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
            if (*(_QWORD *)v262)
              WTF::fastFree(*(_QWORD *)v262, v172, v173, v174, v175, v176, v177, v178);
            *(_QWORD *)v262 = v264;
          }
          *((void **)v262 + 1) = __src[1];
LABEL_305:
          LODWORD(v213) = v213 - 1;
          if (v245-- <= 1)
          {
            v266 = 0;
            v267 = 1;
            v180 = v483;
            do
            {
              do
              {
                v266 |= WTF::Dominators<JSC::B3::BackwardsCFG>::NaiveDominators::pruneDominators((uint64_t)&v492, v267, v173, v174, v175, v176, v177, v178);
                v57 = v267++ == (_DWORD)v212;
              }
              while (!v57);
              if ((v266 & 1) == 0)
                break;
              v268 = 0;
              v269 = v212;
              do
              {
                v268 |= WTF::Dominators<JSC::B3::BackwardsCFG>::NaiveDominators::pruneDominators((uint64_t)&v492, v269, v173, v174, v175, v176, v177, v178);
                v183 = v269-- != 0;
              }
              while (v269 != 0 && v183);
              v266 = 0;
              v267 = 1;
            }
            while ((v268 & 1) != 0);
            break;
          }
        }
      }
    }
    v495 = 0;
    v496 = 0;
    v156 = v487;
    v270 = *(unsigned int *)(**(_QWORD **)*v487 + 60);
    v271 = v270 + 1;
    if ((_DWORD)v270 != -1)
    {
      v272 = 0;
      v273 = v488;
      while (1)
      {
        v274 = v270;
        v275 = *v487;
        v484 = v271;
        if (!v274)
          break;
        v276 = **(_QWORD **)v275;
        if (*(_DWORD *)(v276 + 60) <= (v271 - 2))
        {
          __break(0xC471u);
          JUMPOUT(0x197FEECCCLL);
        }
        v277 = *(unsigned int **)(*(_QWORD *)(v276 + 48) + 8 * (v271 - 2));
        if (v277)
        {
          v278 = 0;
          v279 = *v490 + 40 * *v277;
          v280 = v277;
LABEL_321:
          if (*(_DWORD *)(v279 + 32) != -1)
          {
            v281 = *(unsigned int *)(**(_QWORD **)v275 + 60);
            v282 = v281 + 1;
            if ((_DWORD)v281 != -1)
            {
              v486 = v277;
              while (1)
              {
                v283 = v281;
                if (v281)
                {
                  v284 = **(_QWORD **)*v487;
                  if (*(_DWORD *)(v284 + 60) <= (v282 - 2))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FEEBE4);
                  }
                  v285 = *(unsigned int **)(*(_QWORD *)(v284 + 48) + 8 * (v282 - 2));
                  if (!v285)
                    goto LABEL_393;
                  v286 = 0;
                  v287 = *v490 + 40 * *v285;
                  v288 = *(unsigned int **)(*(_QWORD *)(v284 + 48) + 8 * (v282 - 2));
                }
                else
                {
                  v285 = 0;
                  v288 = 0;
                  v286 = 1;
                  v287 = v273;
                }
                if (*(_DWORD *)(v287 + 32) != -1)
                  break;
LABEL_393:
                --v282;
                v281 = v283 - 1;
                if (!v283)
                  goto LABEL_394;
              }
              v289 = v280 == v288 && v278 == v286;
              v290 = v289;
              if (v289)
              {
                v291 = 1;
                if (v283)
                  goto LABEL_352;
                goto LABEL_353;
              }
              v292 = v273;
              if (v283)
                v292 = *v490 + 40 * *v288;
              v293 = v273;
              if (v274)
                v293 = *v490 + 40 * *v280;
              if (*(_DWORD *)(v292 + 32) <= *(_DWORD *)(v293 + 32))
              {
                v291 = 0;
                if (v283)
                  goto LABEL_352;
                goto LABEL_353;
              }
              v294 = v273;
              if (v283)
                v294 = *v490 + 40 * *v288;
              v295 = v273;
              if (v274)
                v295 = *v490 + 40 * *v280;
              v291 = *(_DWORD *)(v294 + 36) < *(_DWORD *)(v295 + 36);
              if (!v283)
                goto LABEL_353;
LABEL_352:
              if (v285)
              {
LABEL_353:
                v296 = v286;
                v297 = v288;
                while (v297 != v280 || v296 != v278)
                {
                  v298 = v273;
                  if (!v296)
                    v298 = *v490 + 40 * *v297;
                  v297 = *(unsigned int **)(v298 + 16);
                  v296 = *(unsigned __int8 *)(v298 + 24);
                  if (v297)
                    v299 = 0;
                  else
                    v299 = v296 == 0;
                  if (v299)
                    goto LABEL_363;
                }
                if (!v291)
                {
LABEL_368:
                  *(_QWORD *)&v517 = v277;
                  BYTE8(v517) = v278;
                  *(_QWORD *)&v518 = v285;
                  BYTE8(v518) = v286;
                  *(_QWORD *)&v519 = "Range-based domination check is broken";
                  *((_QWORD *)&v519 + 1) = 39;
                  if (v272 == (_DWORD)v496)
                  {
                    v301 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v495, v272 + 1, (unint64_t)&v517);
                    v277 = v486;
                    v302 = (_OWORD *)((char *)v495 + 48 * HIDWORD(v496));
                    v304 = v301[1];
                    v303 = v301[2];
                    v273 = v488;
                    *v302 = *v301;
                    v302[1] = v304;
                    v302[2] = v303;
                  }
                  else
                  {
                    v305 = (__int128 *)((char *)v495 + 48 * v272);
                    v306 = v517;
                    v307 = v519;
                    v305[1] = v518;
                    v305[2] = v307;
                    *v305 = v306;
                  }
                  v272 = ++HIDWORD(v496);
                  if ((v290 & 1) == 0)
                  {
LABEL_372:
                    v308 = v273;
                    if (v283)
                      v308 = *v490 + 40 * *v288;
                    v309 = v273;
                    if (v274)
                      v309 = *v490 + 40 * *v280;
                    if (*(_DWORD *)(v308 + 32) <= *(_DWORD *)(v309 + 32))
                    {
                      v300 = 0;
                      if (v274)
                        goto LABEL_382;
                    }
                    else
                    {
                      v310 = v273;
                      if (v283)
                        v310 = *v490 + 40 * *v288;
                      v311 = v273;
                      if (v274)
                        v311 = *v490 + 40 * *v280;
                      v300 = *(_DWORD *)(v310 + 36) < *(_DWORD *)(v311 + 36);
                      if (v274)
                      {
LABEL_382:
                        v312 = *v280 + 1;
                        if (v283)
                          goto LABEL_383;
LABEL_386:
                        v313 = 0;
                        goto LABEL_387;
                      }
                    }
LABEL_385:
                    v312 = 0;
                    if (!v283)
                      goto LABEL_386;
LABEL_383:
                    v313 = *v288 + 1;
LABEL_387:
                    if (HIDWORD(v493[1]) <= v313)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FEEC6CLL);
                    }
                    if (v300 != ((*(_DWORD *)(*((_QWORD *)v493[0] + 2 * v313) + 4 * (v312 >> 5)) >> v312) & 1))
                    {
                      *(_QWORD *)&v517 = v277;
                      BYTE8(v517) = v278;
                      *(_QWORD *)&v518 = v285;
                      BYTE8(v518) = v286;
                      *(_QWORD *)&v519 = "Lengauer-Tarjan domination is broken";
                      *((_QWORD *)&v519 + 1) = 37;
                      if (v272 == (_DWORD)v496)
                      {
                        v314 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v495, v272 + 1, (unint64_t)&v517);
                        v277 = v486;
                        v315 = (_OWORD *)((char *)v495 + 48 * HIDWORD(v496));
                        v317 = v314[1];
                        v316 = v314[2];
                        v273 = v488;
                        *v315 = *v314;
                        v315[1] = v317;
                        v315[2] = v316;
                      }
                      else
                      {
                        v318 = (__int128 *)((char *)v495 + 48 * v272);
                        v319 = v517;
                        v320 = v519;
                        v318[1] = v518;
                        v318[2] = v320;
                        *v318 = v319;
                      }
                      v272 = ++HIDWORD(v496);
                    }
                    goto LABEL_393;
                  }
LABEL_365:
                  v300 = 1;
                  if (v274)
                    goto LABEL_382;
                  goto LABEL_385;
                }
              }
              else
              {
LABEL_363:
                if (v291)
                  goto LABEL_368;
              }
              if ((v290 & 1) == 0)
                goto LABEL_372;
              goto LABEL_365;
            }
          }
        }
LABEL_394:
        v271 = v484 - 1;
        v270 = v274 - 1;
        v180 = v483;
        if (!v274)
        {
          v156 = v487;
          if (!v272)
            goto LABEL_396;
          WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILED:\n");
          WTF::dataLog<char [16]>("\n");
          WTF::dataLog<char [16]>("For block domination relationships:\n");
          if (HIDWORD(v496))
          {
            v465 = 0;
            v466 = 0;
            while (1)
            {
              WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v517, *(_QWORD *)((char *)v495 + v465), *(_QWORD *)((char *)v495 + v465 + 8), v331, v332);
              if (v466 >= HIDWORD(v496))
              {
                __break(0xC471u);
                JUMPOUT(0x197FEED1CLL);
              }
              WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v520, *(_QWORD *)((char *)v495 + v465 + 16), *(_QWORD *)((char *)v495 + v465 + 24), v467, v468);
              if (v466 >= HIDWORD(v496))
                break;
              WTF::dataLog<char [5],WTF::CString,char [5],WTF::CString,char [3],WTF::ASCIILiteral,char [3]>("    ", &v517, " -> ", &v520, " (", (uint64_t)v495 + v465 + 32, ")\n");
              v476 = (_DWORD *)v520;
              *(_QWORD *)&v520 = 0;
              if (v476)
              {
                if (*v476 == 1)
                  WTF::fastFree((unint64_t)v476, v469, v470, v471, v472, v473, v474, v475);
                else
                  --*v476;
              }
              v477 = (_DWORD *)v517;
              *(_QWORD *)&v517 = 0;
              if (v477)
              {
                if (*v477 == 1)
                  WTF::fastFree((unint64_t)v477, v469, v470, v471, v472, v473, v474, v475);
                else
                  --*v477;
              }
              ++v466;
              v465 += 48;
              if (v466 >= HIDWORD(v496))
                goto LABEL_426;
            }
LABEL_725:
            __break(0xC471u);
            JUMPOUT(0x197FEDC34);
          }
LABEL_426:
          WTF::dataLog<char [16]>("\n");
          WTF::dataLog<char [16]>("Control flow graph:\n");
          v335 = **(_QWORD **)v491;
          v336 = *(_DWORD *)(v335 + 60);
          if (v336 == -1)
          {
LABEL_701:
            WTF::dataLog<char [16]>("\n");
            WTF::dataLog<char [16]>("Lengauer-Tarjan Dominators:\n");
            WTF::dataLog<WTF::Dominators<JSC::B3::BackwardsCFG>>(*((uint64_t *)&v491 + 1));
            WTF::dataLog<char [16]>("\n");
            v478 = (WTF *)WTF::dataLog<char [16]>("Naive Dominators:\n");
            v479 = WTF::dataFile(v478);
            WTF::Dominators<JSC::B3::BackwardsCFG>::NaiveDominators::dump((uint64_t ***)&v492, v479, v480, v481);
            WTF::dataLog<char [16]>("\n");
            WTF::dataLog<char [16]>("Graph at time of failure:\n");
            WTF::dataLog<JSC::B3::BackwardsCFG>(v491);
            WTF::dataLog<char [16]>("\n");
            WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILIED!\n");
            __break(0xC471u);
            JUMPOUT(0x197FEEC64);
          }
          v337 = 0;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          while (2)
          {
            if (v337)
            {
              if (v337 - 1 >= v336)
              {
                __break(0xC471u);
                JUMPOUT(0x197FEEC74);
              }
              v339 = *(_QWORD *)(v335 + 48);
              v340 = *(unsigned int **)(v339 + 8 * (v337 - 1));
              if (v340)
              {
                v341 = 0;
                v342 = *(_QWORD *)(v339 + 8 * (v337 - 1));
                goto LABEL_433;
              }
LABEL_650:
              ++v337;
              v336 = *(_DWORD *)(v335 + 60);
              if (v337 >= v336 + 1)
                goto LABEL_701;
              continue;
            }
            break;
          }
          v340 = 0;
          v342 = 0;
          v341 = 1;
LABEL_433:
          WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v517, v342, v341, v333, v334);
          WTF::dataLog<char [11],WTF::CString,char [17]>("    Block ", &v517, ": successors = [");
          v350 = v517;
          *(_QWORD *)&v517 = 0;
          if (v350)
          {
            if (*(_DWORD *)v350 != 1)
            {
              --*(_DWORD *)v350;
              goto LABEL_436;
            }
            v389 = *(_QWORD *)(StatusReg + 752);
            if (v389)
            {
              if (v350 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v350 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v350)) & 1) == 0)
              {
                if (v350 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v350 >> 24)
                {
                  v343 = 0;
                }
                else
                {
                  v343 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v350 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v350) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v343 == 1)
                    goto LABEL_507;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v389, v350, 1, v343, v344, v345, v346, v347);
              }
              else
              {
LABEL_507:
                v390 = *(unsigned int *)(v389 + 8000);
                if (v390 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v389, v350, (os_unfair_lock_s *)5, v343, v344, v345, v346, v347);
                }
                else
                {
                  *(_QWORD *)(v389 + 8 * v390) = v350 | 0x5000000000000;
                  *(_DWORD *)(v389 + 8000) = v390 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v350, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_436:
          *(_QWORD *)&v520 = ", ";
          *((_QWORD *)&v520 + 1) = 3;
          v521 = "";
          v522 = 1;
          v489 = v337;
          v523 = 0;
          if (v337)
          {
            *(_QWORD *)&v517 = &v518;
            *((_QWORD *)&v517 + 1) = 4;
            v351 = (unint64_t)&v518;
            v352 = v340[9];
            if (!(_DWORD)v352)
              goto LABEL_519;
            v353 = 0;
            v354 = (uint64_t *)*((_QWORD *)v340 + 3);
            v355 = &v354[v352];
            v351 = (unint64_t)&v518;
            do
            {
              v356 = *v354;
              if (v353 != DWORD2(v517))
              {
                v363 = (_QWORD *)(v351 + 16 * v353);
                *v363 = v356;
                v364 = v363 + 1;
                goto LABEL_477;
              }
              v357 = v353 + ((unint64_t)v353 >> 2);
              if (v357 >= 0x10)
                v358 = v357 + 1;
              else
                v358 = 16;
              if (v358 <= (unint64_t)v353 + 1)
                v359 = v353 + 1;
              else
                v359 = v358;
              if (v359 < 5)
              {
                *(_QWORD *)&v517 = &v518;
                DWORD2(v517) = 4;
                casual = &v518;
                if (v353)
                  goto LABEL_463;
                goto LABEL_466;
              }
              if (v359 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x197FEEBC4);
              }
              v360 = *(_QWORD *)(StatusReg + 752);
              if (!v360)
                goto LABEL_493;
              v361 = (16 * (v359 & 0x3FFFFFFFFLL)) | 0xF;
              if (v361 <= 0x1AF)
              {
                v362 = 23 * v359 + 7;
              }
              else
              {
                if (v361 >> 5 > 0x138)
                  goto LABEL_493;
                v362 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v359 + 626);
                if (*(_DWORD *)(v360 + 8052) <= v362)
                  goto LABEL_493;
              }
              v366 = v360 + 8 * v362;
              v367 = v366 + 8064;
              *(_BYTE *)(v366 + 8064) = 1;
              v368 = *(unsigned int *)(v366 + 8080);
              if ((_DWORD)v368)
              {
                *(_DWORD *)(v367 + 16) = v368 - *(_DWORD *)(v367 + 20);
                casual = (__int128 *)(*(_QWORD *)(v367 + 8) - v368);
                goto LABEL_461;
              }
              v369 = *(_QWORD *)(v367 + 40);
              v370 = *(_QWORD *)(v367 + 24);
              if (v369)
                goto LABEL_460;
              if (*(_BYTE *)(v367 + 5) != 6)
                goto LABEL_492;
              v378 = *(unsigned int *)(v367 + 32);
              v379 = *(_DWORD *)(v367 + 36);
              if (v378 >= v379)
                goto LABEL_492;
              *(_QWORD *)(v367 + 8 * v378 + 56) = 0;
              v380 = (unint64_t *)(v360 + 8128 + 8 * v362 + 8 * v378);
              v381 = v379 - 1 - v378;
              do
              {
                if (!v381)
                {
                  *(_DWORD *)(v367 + 32) = v379;
LABEL_492:
                  *(_BYTE *)v367 = 0;
LABEL_493:
                  casual = (__int128 *)bmalloc_allocate_casual(16 * v359, 1);
                  goto LABEL_462;
                }
                v370 += 1024;
                v383 = *v380++;
                v382 = v383;
                LODWORD(v378) = v378 + 1;
                --v381;
              }
              while (!v383);
              v369 = __rbit64(v382);
              *(_DWORD *)(v367 + 32) = v378;
              *(_QWORD *)(v367 + 24) = v370;
LABEL_460:
              v371 = __clz(v369);
              *(_QWORD *)(v367 + 40) = v369 & ~(0x8000000000000000 >> v371);
              casual = (__int128 *)(v370 + 16 * v371);
LABEL_461:
              *(_BYTE *)v367 = 0;
LABEL_462:
              DWORD2(v517) = v359;
              *(_QWORD *)&v517 = casual;
              if (v353)
              {
LABEL_463:
                v372 = 16 * v353;
                v373 = (__int128 *)v351;
                do
                {
                  v374 = *v373++;
                  v348 = *(double *)&v374;
                  *casual++ = v374;
                  v372 -= 16;
                }
                while (v372);
                casual = (__int128 *)v517;
              }
LABEL_466:
              if (&v518 != (__int128 *)v351 && v351)
              {
                if (casual == (__int128 *)v351)
                {
                  *(_QWORD *)&v517 = 0;
                  DWORD2(v517) = 0;
                }
                v375 = *(_QWORD *)(StatusReg + 752);
                if (v375)
                {
                  if (v351 >> 43
                    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v351 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v351)) & 1) == 0)
                  {
                    if (v351 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v351 >> 24)
                    {
                      v343 = 0;
                    }
                    else
                    {
                      v343 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v351 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v351) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v343 == 1)
                        goto LABEL_473;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v375, v351, 1, v343, v344, v345, v346, v347);
                  }
                  else
                  {
LABEL_473:
                    v376 = *(unsigned int *)(v375 + 8000);
                    if (v376 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v375, v351, (os_unfair_lock_s *)5, v343, v344, v345, v346, v347);
                    }
                    else
                    {
                      *(_QWORD *)(v375 + 8 * v376) = v351 | 0x5000000000000;
                      *(_DWORD *)(v375 + 8000) = v376 + 1;
                    }
                  }
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v351, (uint64_t)&bmalloc_heap_config, 1);
                }
                casual = (__int128 *)v517;
              }
              v353 = HIDWORD(v517);
              v377 = &casual[HIDWORD(v517)];
              *(_QWORD *)v377 = v356;
              v364 = (char *)v377 + 8;
              v351 = (unint64_t)casual;
LABEL_477:
              *v364 = 0;
              HIDWORD(v517) = ++v353;
              ++v354;
            }
            while (v354 != v355);
LABEL_520:
            if (v353)
            {
              v400 = v351 + 16 * v353;
              v337 = v489;
              while (1)
              {
                WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v516, *(_QWORD *)v351, *(_QWORD *)(v351 + 8), v348, v349);
                WTF::dataLog<WTF::CommaPrinter,WTF::CString>((uint64_t)&v520, &v516);
                v401 = v516;
                v516 = 0;
                if (v401)
                {
                  if (*(_DWORD *)v401 == 1)
                  {
                    v402 = *(_QWORD *)(StatusReg + 752);
                    if (v402)
                    {
                      if (!(v401 >> 43)
                        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v401 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v401)) & 1) != 0)
                      {
LABEL_530:
                        v403 = *(unsigned int *)(v402 + 8000);
                        if (v403 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v402, v401, (os_unfair_lock_s *)5, v343, v344, v345, v346, v347);
                        }
                        else
                        {
                          *(_QWORD *)(v402 + 8 * v403) = v401 | 0x5000000000000;
                          *(_DWORD *)(v402 + 8000) = v403 + 1;
                        }
                        goto LABEL_525;
                      }
                      if (v401 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v401 >> 24)
                      {
                        v343 = 0;
                      }
                      else
                      {
                        v343 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v401 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v401) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v343 == 1)
                          goto LABEL_530;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v402, v401, 1, v343, v344, v345, v346, v347);
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v401, (uint64_t)&bmalloc_heap_config, 1);
                    }
                  }
                  else
                  {
                    --*(_DWORD *)v401;
                  }
                }
LABEL_525:
                v351 += 16;
                if (v351 == v400)
                {
                  v351 = v517;
                  goto LABEL_540;
                }
              }
            }
            v337 = v489;
LABEL_540:
            if (&v518 != (__int128 *)v351 && v351 != 0)
            {
              *(_QWORD *)&v517 = 0;
              DWORD2(v517) = 0;
              v405 = *(_QWORD *)(StatusReg + 752);
              if (v405)
              {
                if (v351 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v351 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v351)) & 1) == 0)
                {
                  if (v351 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v351 >> 24)
                  {
                    v343 = 0;
                  }
                  else
                  {
                    v343 = (*(_DWORD *)((char *)off_1ECF425F8
                                      + ((((v351 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                      + 24) >> (2 * ((BYTE3(v351) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v343 == 1)
                      goto LABEL_547;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v405, v351, 1, v343, v344, v345, v346, v347);
                }
                else
                {
LABEL_547:
                  v406 = *(unsigned int *)(v405 + 8000);
                  if (v406 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v405, v351, (os_unfair_lock_s *)5, v343, v344, v345, v346, v347);
                  }
                  else
                  {
                    *(_QWORD *)(v405 + 8 * v406) = v351 | 0x5000000000000;
                    *(_DWORD *)(v405 + 8000) = v406 + 1;
                  }
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v351, (uint64_t)&bmalloc_heap_config, 1);
              }
            }
            WTF::dataLog<char [16]>("], predecessors = [");
            *(_QWORD *)&v520 = ", ";
            *((_QWORD *)&v520 + 1) = 3;
            v521 = "";
            v522 = 1;
            v523 = 0;
            *(_QWORD *)&v517 = &v518;
            *((_QWORD *)&v517 + 1) = 4;
            if (v337)
            {
              if (!v340)
                goto LABEL_559;
              v414 = (_QWORD *)(v491 + 88);
              v415 = *(_QWORD *)(v491 + 88);
              v416 = (_QWORD *)(2 * v415);
              v417 = v415 < 0 ? 63 : *v416;
              v418 = *v340;
              if (v417 <= v418)
                goto LABEL_559;
              v419 = v416 + 1;
              if (v415 >= 0)
                v414 = v419;
              if (((*(_QWORD *)((char *)v414 + ((v418 >> 3) & 0x1FFFFFF8)) >> v418) & 1) != 0)
              {
                v412 = 0.0;
                v518 = xmmword_19914FB90;
                v420 = 1;
                HIDWORD(v517) = 1;
              }
              else
              {
LABEL_559:
                v420 = 0;
              }
              v421 = v340[17];
              if (!(_DWORD)v421)
              {
                v423 = (unint64_t)&v518;
                goto LABEL_620;
              }
              v422 = 0;
              v423 = (unint64_t)&v518;
              do
              {
                if (v422 >= v340[17])
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FEEACCLL);
                }
                v424 = *(_QWORD *)(*((_QWORD *)v340 + 7) + 16 * v422);
                if (v420 != DWORD2(v517))
                {
                  v431 = (_QWORD *)(v423 + 16 * v420);
                  *v431 = v424;
                  v432 = v431 + 1;
                  goto LABEL_601;
                }
                v425 = v420 + ((unint64_t)v420 >> 2);
                if (v425 >= 0x10)
                  v426 = v425 + 1;
                else
                  v426 = 16;
                if (v426 <= (unint64_t)v420 + 1)
                  v427 = v420 + 1;
                else
                  v427 = v426;
                if (v427 < 5)
                {
                  *(_QWORD *)&v517 = &v518;
                  DWORD2(v517) = 4;
                  v433 = &v518;
                  if (v420)
                    goto LABEL_587;
                  goto LABEL_590;
                }
                if (v427 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FEEBCCLL);
                }
                v428 = *(_QWORD *)(StatusReg + 752);
                if (!v428)
                  goto LABEL_617;
                v429 = (16 * (v427 & 0x3FFFFFFFFLL)) | 0xF;
                if (v429 <= 0x1AF)
                {
                  v430 = 23 * v427 + 7;
                }
                else
                {
                  if (v429 >> 5 > 0x138)
                    goto LABEL_617;
                  v430 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v427 + 626);
                  if (*(_DWORD *)(v428 + 8052) <= v430)
                    goto LABEL_617;
                }
                v434 = v428 + 8 * v430;
                v435 = v434 + 8064;
                *(_BYTE *)(v434 + 8064) = 1;
                v436 = *(unsigned int *)(v434 + 8080);
                if ((_DWORD)v436)
                {
                  *(_DWORD *)(v435 + 16) = v436 - *(_DWORD *)(v435 + 20);
                  v433 = (__int128 *)(*(_QWORD *)(v435 + 8) - v436);
                  goto LABEL_585;
                }
                v437 = *(_QWORD *)(v435 + 40);
                v438 = *(_QWORD *)(v435 + 24);
                if (v437)
                  goto LABEL_584;
                if (*(_BYTE *)(v435 + 5) != 6)
                  goto LABEL_616;
                v446 = *(unsigned int *)(v435 + 32);
                v447 = *(_DWORD *)(v435 + 36);
                if (v446 >= v447)
                  goto LABEL_616;
                *(_QWORD *)(v435 + 8 * v446 + 56) = 0;
                v448 = (unint64_t *)(v428 + 8128 + 8 * v430 + 8 * v446);
                v449 = v447 - 1 - v446;
                do
                {
                  if (!v449)
                  {
                    *(_DWORD *)(v435 + 32) = v447;
LABEL_616:
                    *(_BYTE *)v435 = 0;
LABEL_617:
                    v433 = (__int128 *)bmalloc_allocate_casual(16 * v427, 1);
                    goto LABEL_586;
                  }
                  v438 += 1024;
                  v451 = *v448++;
                  v450 = v451;
                  LODWORD(v446) = v446 + 1;
                  --v449;
                }
                while (!v451);
                v437 = __rbit64(v450);
                *(_DWORD *)(v435 + 32) = v446;
                *(_QWORD *)(v435 + 24) = v438;
LABEL_584:
                v439 = __clz(v437);
                *(_QWORD *)(v435 + 40) = v437 & ~(0x8000000000000000 >> v439);
                v433 = (__int128 *)(v438 + 16 * v439);
LABEL_585:
                *(_BYTE *)v435 = 0;
LABEL_586:
                DWORD2(v517) = v427;
                *(_QWORD *)&v517 = v433;
                if (v420)
                {
LABEL_587:
                  v440 = 16 * v420;
                  v441 = (__int128 *)v423;
                  do
                  {
                    v442 = *v441++;
                    v412 = *(double *)&v442;
                    *v433++ = v442;
                    v440 -= 16;
                  }
                  while (v440);
                  v433 = (__int128 *)v517;
                }
LABEL_590:
                if (&v518 != (__int128 *)v423 && v423)
                {
                  if (v433 == (__int128 *)v423)
                  {
                    *(_QWORD *)&v517 = 0;
                    DWORD2(v517) = 0;
                  }
                  v443 = *(_QWORD *)(StatusReg + 752);
                  if (v443)
                  {
                    if (v423 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v423 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v423)) & 1) == 0)
                    {
                      if (v423 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v423 >> 24)
                      {
                        v407 = 0;
                      }
                      else
                      {
                        v407 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v423 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v423) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v407 == 1)
                          goto LABEL_597;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v443, v423, 1, v407, v408, v409, v410, v411);
                    }
                    else
                    {
LABEL_597:
                      v444 = *(unsigned int *)(v443 + 8000);
                      if (v444 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v443, v423, (os_unfair_lock_s *)5, v407, v408, v409, v410, v411);
                      }
                      else
                      {
                        *(_QWORD *)(v443 + 8 * v444) = v423 | 0x5000000000000;
                        *(_DWORD *)(v443 + 8000) = v444 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v423, (uint64_t)&bmalloc_heap_config, 1);
                  }
                  v433 = (__int128 *)v517;
                }
                v420 = HIDWORD(v517);
                v445 = &v433[HIDWORD(v517)];
                *(_QWORD *)v445 = v424;
                v432 = (char *)v445 + 8;
                v423 = (unint64_t)v433;
LABEL_601:
                *v432 = 0;
                HIDWORD(v517) = ++v420;
                ++v422;
              }
              while (v422 != v421);
LABEL_620:
              if (v420)
              {
                v452 = v423 + 16 * v420;
                v337 = v489;
                while (1)
                {
                  WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v516, *(_QWORD *)v423, *(_QWORD *)(v423 + 8), v412, v413);
                  WTF::dataLog<WTF::CommaPrinter,WTF::CString>((uint64_t)&v520, &v516);
                  v453 = v516;
                  v516 = 0;
                  if (v453)
                  {
                    if (*(_DWORD *)v453 == 1)
                    {
                      v454 = *(_QWORD *)(StatusReg + 752);
                      if (v454)
                      {
                        if (!(v453 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v453 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v453)) & 1) != 0)
                        {
LABEL_630:
                          v455 = *(unsigned int *)(v454 + 8000);
                          if (v455 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v454, v453, (os_unfair_lock_s *)5, v407, v408, v409, v410, v411);
                          }
                          else
                          {
                            *(_QWORD *)(v454 + 8 * v455) = v453 | 0x5000000000000;
                            *(_DWORD *)(v454 + 8000) = v455 + 1;
                          }
                          goto LABEL_625;
                        }
                        if (v453 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v453 >> 24)
                        {
                          v407 = 0;
                        }
                        else
                        {
                          v407 = (*(_DWORD *)((char *)off_1ECF425F8
                                            + ((((v453 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                            + 24) >> (2 * ((BYTE3(v453) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)v407 == 1)
                            goto LABEL_630;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v454, v453, 1, v407, v408, v409, v410, v411);
                      }
                      else
                      {
                        pas_try_deallocate_slow_no_cache(v453, (uint64_t)&bmalloc_heap_config, 1);
                      }
                    }
                    else
                    {
                      --*(_DWORD *)v453;
                    }
                  }
LABEL_625:
                  v423 += 16;
                  if (v423 == v452)
                  {
                    v423 = v517;
                    goto LABEL_640;
                  }
                }
              }
              v337 = v489;
LABEL_640:
              if (&v518 != (__int128 *)v423 && v423 != 0)
              {
                *(_QWORD *)&v517 = 0;
                DWORD2(v517) = 0;
                v457 = *(_QWORD *)(StatusReg + 752);
                if (v457)
                {
                  if (v423 >> 43
                    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v423 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v423)) & 1) == 0)
                  {
                    if (v423 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v423 >> 24)
                    {
                      v407 = 0;
                    }
                    else
                    {
                      v407 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v423 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v423) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v407 == 1)
                        goto LABEL_647;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v457, v423, 1, v407, v408, v409, v410, v411);
                  }
                  else
                  {
LABEL_647:
                    v458 = *(unsigned int *)(v457 + 8000);
                    if (v458 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v457, v423, (os_unfair_lock_s *)5, v407, v408, v409, v410, v411);
                    }
                    else
                    {
                      *(_QWORD *)(v457 + 8 * v458) = v423 | 0x5000000000000;
                      *(_DWORD *)(v457 + 8000) = v458 + 1;
                    }
                  }
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v423, (uint64_t)&bmalloc_heap_config, 1);
                }
              }
            }
            WTF::dataLog<char [16]>("]\n");
            v335 = **(_QWORD **)v491;
            goto LABEL_650;
          }
          v384 = v491;
          v385 = *(unsigned int *)(v491 + 20);
          *(_QWORD *)&v517 = &v518;
          DWORD2(v517) = 4;
          HIDWORD(v517) = v385;
          if (v385 < 5)
          {
            v351 = (unint64_t)&v518;
            if ((_DWORD)v385)
              goto LABEL_516;
            goto LABEL_519;
          }
          if (v385 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x197FEECD4);
          }
          v386 = *(_QWORD *)(StatusReg + 752);
          if (v386)
          {
            v387 = (16 * v385) | 0xF;
            if (v387 <= 0x1AF)
            {
              v388 = 23 * v385 + 7;
            }
            else
            {
              if (v387 >> 5 > 0x138)
                goto LABEL_678;
              v388 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v385 + 626);
              if (*(_DWORD *)(v386 + 8052) <= v388)
                goto LABEL_678;
            }
            v391 = v386 + 8 * v388;
            v392 = v391 + 8064;
            *(_BYTE *)(v391 + 8064) = 1;
            v393 = *(unsigned int *)(v391 + 8080);
            if ((_DWORD)v393)
            {
              *(_DWORD *)(v392 + 16) = v393 - *(_DWORD *)(v392 + 20);
              v351 = *(_QWORD *)(v392 + 8) - v393;
              goto LABEL_514;
            }
            v394 = *(_QWORD *)(v392 + 40);
            v395 = *(_QWORD *)(v392 + 24);
            if (v394)
              goto LABEL_513;
            if (*(_BYTE *)(v392 + 5) == 6)
            {
              v459 = *(unsigned int *)(v392 + 32);
              v460 = *(_DWORD *)(v392 + 36);
              if (v459 < v460)
              {
                *(_QWORD *)(v392 + 8 * v459 + 56) = 0;
                v461 = (unint64_t *)(v386 + 8128 + 8 * v388 + 8 * v459);
                v462 = v460 - 1 - v459;
                while (v462)
                {
                  v395 += 1024;
                  v464 = *v461++;
                  v463 = v464;
                  LODWORD(v459) = v459 + 1;
                  --v462;
                  if (v464)
                  {
                    v394 = __rbit64(v463);
                    *(_DWORD *)(v392 + 32) = v459;
                    *(_QWORD *)(v392 + 24) = v395;
LABEL_513:
                    v396 = __clz(v394);
                    *(_QWORD *)(v392 + 40) = v394 & ~(0x8000000000000000 >> v396);
                    v351 = v395 + 16 * v396;
LABEL_514:
                    *(_BYTE *)v392 = 0;
LABEL_515:
                    DWORD2(v517) = v385;
                    *(_QWORD *)&v517 = v351;
                    v385 = *(unsigned int *)(v384 + 20);
                    if ((_DWORD)v385)
                    {
LABEL_516:
                      v397 = *(__int128 **)(v384 + 8);
                      v398 = 16 * v385;
                      do
                      {
                        v399 = *v397++;
                        v348 = *(double *)&v399;
                        *(_OWORD *)v351 = v399;
                        v351 += 16;
                        v398 -= 16;
                      }
                      while (v398);
                      v351 = v517;
                    }
LABEL_519:
                    v353 = HIDWORD(v517);
                    goto LABEL_520;
                  }
                }
                *(_DWORD *)(v392 + 32) = v460;
              }
            }
            *(_BYTE *)v392 = 0;
          }
LABEL_678:
          v351 = bmalloc_allocate_casual(16 * v385, 1);
          goto LABEL_515;
        }
      }
      v277 = 0;
      v280 = 0;
      v278 = 1;
      v279 = v273;
      goto LABEL_321;
    }
LABEL_396:
    v321 = v495;
    if (v495)
    {
      v495 = 0;
      LODWORD(v496) = 0;
      WTF::fastFree((unint64_t)v321, v172, v173, v174, v175, v176, v177, v178);
    }
    if (__src[0])
      WTF::fastFree((unint64_t)__src[0], v172, v173, v174, v175, v176, v177, v178);
    v322 = (unint64_t *)v493[0];
    if (HIDWORD(v493[1]))
    {
      v323 = 16 * HIDWORD(v493[1]);
      do
      {
        if (*v322)
          WTF::fastFree(*v322, v172, v173, v174, v175, v176, v177, v178);
        v322 += 2;
        v323 -= 16;
      }
      while (v323);
      v322 = (unint64_t *)v493[0];
    }
    if (v322)
    {
      v493[0] = 0;
      LODWORD(v493[1]) = 0;
      WTF::fastFree((unint64_t)v322, v172, v173, v174, v175, v176, v177, v178);
    }
  }
  if (v180)
  {
    v497 = 0;
    LODWORD(v498) = 0;
    WTF::fastFree((unint64_t)v180, v172, v173, v174, v175, v176, v177, v178);
  }
  v324 = v514;
  if (v514)
  {
    v514 = 0;
    LODWORD(v515) = 0;
    WTF::fastFree((unint64_t)v324, v172, v173, v174, v175, v176, v177, v178);
  }
  v325 = v510;
  if (v510)
  {
    v510 = 0;
    LODWORD(v511) = 0;
    WTF::fastFree((unint64_t)v325, v172, v173, v174, v175, v176, v177, v178);
  }
  v326 = v500;
  if (v502)
  {
    v327 = 88 * v502;
    v328 = (char *)v500 + 56;
    do
    {
      v329 = *(_QWORD *)v328;
      if (*(_QWORD *)v328)
      {
        *(_QWORD *)v328 = 0;
        *((_DWORD *)v328 + 2) = 0;
        WTF::fastFree(v329, v172, v173, v174, v175, v176, v177, v178);
      }
      v328 += 88;
      v327 -= 88;
    }
    while (v327);
    v326 = v500;
  }
  if (v326)
  {
    v500 = 0;
    v501 = 0;
    WTF::fastFree((unint64_t)v326, v172, v173, v174, v175, v176, v177, v178);
  }
  return v156;
}

uint64_t WTF::ExtendedGraphNodeWorklist<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int,WTF::SingleRootGraphSet<JSC::B3::CFG>>::push(WTF::BitVector *this, unsigned int **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int *v16;

  if (!*((_BYTE *)a2 + 8))
  {
    v4 = **a2;
    v5 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v6 = 63;
    else
      v6 = *(_QWORD *)(2 * v5);
    if (v6 <= v4)
    {
      WTF::BitVector::resizeOutOfLine(this, v4 + 1, 0);
      v5 = *(_QWORD *)this;
    }
    if (v5 >= 0)
      v7 = (WTF::BitVector *)(2 * v5 + 8);
    else
      v7 = this;
    v8 = (v4 >> 3) & 0x1FFFFFF8;
    v9 = *(_QWORD *)((char *)v7 + v8);
    *(_QWORD *)((char *)v7 + v8) = v9 | (1 << v4);
    if ((v9 & (1 << v4)) == 0)
      goto LABEL_14;
    return 0;
  }
  if (*((_BYTE *)this + 8))
    return 0;
  *((_BYTE *)this + 8) = 1;
LABEL_14:
  v11 = (_QWORD *)((char *)this + 16);
  v12 = *((unsigned int *)this + 7);
  if ((_DWORD)v12 == *((_DWORD *)this + 6))
  {
    v13 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)a2);
    v14 = *((_QWORD *)this + 2) + 24 * *((unsigned int *)this + 7);
    v15 = *(_OWORD *)v13;
    v16 = *(unsigned int **)(v13 + 16);
  }
  else
  {
    v14 = *v11 + 24 * v12;
    v15 = *(_OWORD *)a2;
    v16 = a2[2];
  }
  *(_QWORD *)(v14 + 16) = v16;
  *(_OWORD *)v14 = v15;
  ++*((_DWORD *)this + 7);
  return 1;
}

unint64_t WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 24 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = *(_OWORD *)(v5 + v19);
          *(_QWORD *)(v20 + 16) = *(_QWORD *)(v5 + v19 + 16);
          *(_OWORD *)v20 = v21;
          v19 += 24;
        }
        while (24 * v6 != v19);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197FEF030);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v25 = a2;
  if (v25 > v23)
  {
    if (v25 >= 0xAAAAAAB)
      goto LABEL_33;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = 24 * v25;
    v28 = WTF::fastMalloc((WTF *)(24 * v25));
    *(_DWORD *)(a1 + 8) = (v27 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v26)
    {
      v36 = 24 * v26;
      v37 = v5;
      do
      {
        v38 = *(_OWORD *)v37;
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v37 + 16);
        *(_OWORD *)v28 = v38;
        v28 += 24;
        v37 += 24;
        v36 -= 24;
      }
      while (v36);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

void WTF::BackwardsGraph<JSC::B3::CFG>::predecessors(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 4;
  if (!(_BYTE)a4)
  {
    if (a3)
    {
      v10 = (_QWORD *)(a2 + 88);
      v11 = *a3;
      v12 = *(_QWORD *)(a2 + 88);
      v13 = (_QWORD *)(2 * v12);
      v14 = v12 < 0 ? 63 : *v13;
      if (v14 > v11)
      {
        v15 = v13 + 1;
        if (v12 >= 0)
          v10 = v15;
        if (((*(_QWORD *)((char *)v10 + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
        {
          *(_OWORD *)(a1 + 16) = xmmword_19914FB90;
          *(_DWORD *)(a1 + 12) = 1;
        }
      }
    }
    v16 = a3[17];
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 16 * v16;
      while (v18 < a3[17])
      {
        v20 = *(_QWORD *)(*((_QWORD *)a3 + 7) + v17);
        v23 = v20;
        v21 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>(a1, &v23, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v22 = *(_QWORD *)a1 + 16 * v21;
          *(_QWORD *)v22 = v20;
          *(_BYTE *)(v22 + 8) = 0;
          *(_DWORD *)(a1 + 12) = v21 + 1;
        }
        ++v18;
        v17 += 16;
        if (v19 == v17)
          return;
      }
      __break(0xC471u);
    }
  }
}

void WTF::Dominators<JSC::B3::BackwardsCFG>::LengauerTarjan::compress(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _OWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  unsigned int **v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  WTF *v31;
  __int128 v32;
  WTF *v33;
  uint64_t v34;
  _BYTE v35[256];

  if ((_BYTE)a3)
    v9 = a1 + 24;
  else
    v9 = *(_QWORD *)(a1 + 8) + 88 * *(unsigned int *)a2;
  if (*(_BYTE *)(v9 + 32))
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 8) + 88 * **(unsigned int **)(v9 + 24);
  v11 = *(_QWORD *)(v10 + 24);
  v12 = *(unsigned __int8 *)(v10 + 32);
  if (v11)
    v13 = 0;
  else
    v13 = v12 == 0;
  if (v13)
    return;
  *((_QWORD *)&v32 + 1) = a3;
  v33 = (WTF *)v35;
  v34 = 16;
  *(_QWORD *)&v32 = a2;
  if (!(a3 | a2))
    goto LABEL_40;
  v14 = 0;
  do
  {
    if (v14 == (_DWORD)v34)
    {
      v15 = (_OWORD *)WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, (void *)(v14 + 1), (unint64_t)&v32, a4, a5, a6, a7, a8);
      *((_OWORD *)v33 + HIDWORD(v34)) = *v15;
    }
    else
    {
      *((_OWORD *)v33 + v14) = v32;
    }
    v16 = HIDWORD(v34);
    v14 = ++HIDWORD(v34);
    v17 = a1 + 24;
    if (!BYTE8(v32))
      v17 = *(_QWORD *)(a1 + 8) + 88 * *(unsigned int *)v32;
    *(_QWORD *)&v32 = *(_QWORD *)(v17 + 24);
    v18 = *(unsigned __int8 *)(v17 + 32);
    BYTE8(v32) = v18;
  }
  while ((_QWORD)v32 || v18);
  if (v14 == 2)
    goto LABEL_36;
  if (v14 < 3)
  {
LABEL_40:
    __break(0xC471u);
    return;
  }
  v19 = 16 * (v16 - 2);
  do
  {
    v20 = (unsigned int **)(a1 + 64);
    v21 = a1 + 24;
    if (!*((_BYTE *)v33 + v19 + 8))
    {
      v21 = *(_QWORD *)(a1 + 8) + 88 * **(unsigned int **)((char *)v33 + v19);
      v20 = (unsigned int **)(v21 + 40);
    }
    v22 = (unsigned int **)(v21 + 24);
    v23 = *(unsigned __int8 *)(v21 + 32);
    v24 = a1 + 24;
    if (!*(_BYTE *)(v21 + 32))
      v24 = *(_QWORD *)(a1 + 8) + 88 * **v22;
    v25 = *(unsigned int **)(v24 + 40);
    v26 = *(unsigned __int8 *)(v24 + 48);
    v27 = a1 + 24;
    if (!v26)
      v27 = *(_QWORD *)(a1 + 8) + 88 * *v25;
    a2 = *((unsigned __int8 *)v20 + 8);
    v28 = (unsigned int *)(a1 + 24);
    if (!*((_BYTE *)v20 + 8))
    {
      a2 = *(_QWORD *)(a1 + 8);
      v28 = (unsigned int *)(a2 + 88 * **v20);
    }
    if (*(_DWORD *)(v27 + 20) < v28[5])
    {
      *v20 = v25;
      *((_BYTE *)v20 + 8) = v26;
      v23 = *(unsigned __int8 *)(v21 + 32);
    }
    v29 = a1 + 24;
    if (!v23)
      v29 = *(_QWORD *)(a1 + 8) + 88 * **v22;
    v30 = *(unsigned int **)(v29 + 24);
    *((_BYTE *)v22 + 8) = *(_BYTE *)(v29 + 32);
    *v22 = v30;
    v19 -= 16;
  }
  while (v19 != -16);
LABEL_36:
  v31 = v33;
  if (v35 != (_BYTE *)v33)
  {
    if (v33)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree((unint64_t)v31, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
      if (v15 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_34;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_OWORD *)(v16 + v27) = *(_OWORD *)(v10 + v27);
          v27 += 16;
        }
        while (16 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x197FEF574);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 0x11)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_43;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::Dominators<JSC::B3::BackwardsCFG>::NaiveDominators::pruneDominators(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  WTF *v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;
  int *v61;
  _DWORD *v62;
  int v63;
  WTF *v65;
  int v66;
  unsigned int v67;
  _BYTE v68[64];

  v10 = *(uint64_t ***)a1;
  if (a2)
  {
    v11 = **v10;
    if (*(_DWORD *)(v11 + 60) <= a2 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FEF8B0);
    }
    v12 = *(unsigned int **)(*(_QWORD *)(v11 + 48) + 8 * (a2 - 1));
    if (!v12)
    {
LABEL_45:
      v60 = 0;
      return v60 & 1;
    }
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v65, (uint64_t)v10, v12, v13, a5, a6, a7, a8);
  v21 = v67;
  v22 = v65;
  if (v68 != (_BYTE *)v65 && v65 != 0)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
  }
  if (!v21)
    goto LABEL_45;
  WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v65, *(_QWORD *)a1, v12, v13, v17, v18, v19, v20);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x197FEF8B8);
  }
  if (*((_BYTE *)v65 + 8))
    v24 = 0;
  else
    v24 = (**(_DWORD **)v65 + 1);
  if (v24 >= *(unsigned int *)(a1 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197FEF8C0);
  }
  v25 = *(_QWORD *)(a1 + 8) + 16 * v24;
  v26 = (unint64_t)(*(_QWORD *)(a1 + 32) + 31) >> 5;
  v27 = *(_QWORD *)(v25 + 8) + 31;
  if (v26 == v27 >> 5)
  {
    memcpy(*(void **)(a1 + 24), *(const void **)v25, 4 * v26);
  }
  else
  {
    v28 = (void *)WTF::fastMalloc((WTF *)((v27 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
    memcpy(v28, *(const void **)v25, ((unint64_t)(*(_QWORD *)(v25 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v36 = *(_QWORD *)(a1 + 24);
    if (v36)
      WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
    *(_QWORD *)(a1 + 24) = v28;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 + 8);
  v37 = v65;
  if (v68 != (_BYTE *)v65 && v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree((unint64_t)v37, v29, v30, v31, v32, v33, v34, v35);
  }
  WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v65, *(_QWORD *)a1, v12, v13, v32, v33, v34, v35);
  v45 = v67;
  v46 = v65;
  if (v68 != (_BYTE *)v65 && v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree((unint64_t)v46, v38, v39, v40, v41, v42, v43, v44);
  }
  if (v45 >= 2)
  {
    while (1)
    {
      --v45;
      WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v65, *(_QWORD *)a1, v12, v13, v41, v42, v43, v44);
      if (v67 <= v45)
        break;
      v50 = v65;
      if (*((_BYTE *)v65 + 16 * v45 + 8))
        v51 = 0;
      else
        v51 = **((_DWORD **)v65 + 2 * v45) + 1;
      if (*(_DWORD *)(a1 + 20) <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x197FEF8A8);
      }
      v52 = *(_QWORD *)(a1 + 32) + 31;
      if ((v52 & 0x1FFFFFFFE0) != 0)
      {
        v53 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v51);
        v54 = *(_QWORD *)(a1 + 24);
        v55 = (v52 >> 5) - 1;
        do
          *(_DWORD *)(v54 + 4 * v55) &= *(_DWORD *)(v53 + 4 * v55);
        while ((unint64_t)v55--);
      }
      if (v68 != (_BYTE *)v50 && v50)
      {
        v65 = 0;
        v66 = 0;
        WTF::fastFree((unint64_t)v50, v47, v48, v49, v41, v42, v43, v44);
      }
      if (v45 <= 1)
        goto LABEL_40;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x197FEF8A0);
  }
LABEL_40:
  v57 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v57 + (((unint64_t)a2 >> 3) & 0x1FFFFFFC)) |= 1 << a2;
  if (*(_DWORD *)(a1 + 20) <= a2)
    goto LABEL_53;
  v58 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * a2);
  v59 = (unint64_t)(v58[1] + 31) >> 5;
  if (!(_DWORD)v59)
    goto LABEL_45;
  v60 = 0;
  v61 = (int *)(v57 + 4 * (v59 - 1));
  v62 = (_DWORD *)(*v58 + 4 * (v59 - 1));
  do
  {
    v63 = *v61--;
    v60 |= *v62 != v63;
    *v62-- = v63;
    LODWORD(v59) = v59 - 1;
  }
  while ((_DWORD)v59);
  return v60 & 1;
}

unint64_t WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  _OWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 48 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v23 = *(_QWORD *)a1;
        return v23 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (v9 < 0x5555556)
      {
        v10 = 48 * v9;
        v11 = WTF::fastMalloc((WTF *)(48 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = (_OWORD *)(v11 + v19);
          v21 = *(_OWORD *)(v5 + v19);
          v22 = *(_OWORD *)(v5 + v19 + 32);
          v20[1] = *(_OWORD *)(v5 + v19 + 16);
          v20[2] = v22;
          *v20 = v21;
          v19 += 48;
        }
        while (48 * v6 != v19);
        v23 = *(_QWORD *)a1;
        if (v5)
        {
          if (v23 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v23 = *(_QWORD *)a1;
        }
        return v23 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197FEFAB0);
    }
  }
  v24 = *(unsigned int *)(a1 + 8);
  v25 = v24 + (v24 >> 2);
  if (v25 >= 0x10)
    v26 = v25 + 1;
  else
    v26 = 16;
  if (v26 <= a2)
    v26 = a2;
  if (v26 > v24)
  {
    if (v26 >= 0x5555556)
      goto LABEL_33;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = 48 * v26;
    v29 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v26));
    *(_DWORD *)(a1 + 8) = (v28 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v29;
    if ((_DWORD)v27)
    {
      v37 = 48 * v27;
      v38 = (__int128 *)v5;
      do
      {
        v39 = *v38;
        v40 = v38[2];
        v29[1] = v38[1];
        v29[2] = v40;
        *v29 = v39;
        v29 += 3;
        v38 += 3;
        v37 -= 48;
      }
      while (v37);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  return v3;
}

uint64_t WTF::dataLog<char [5],WTF::CString,char [5],WTF::CString,char [3],WTF::ASCIILiteral,char [3]>(const char *a1, _QWORD *a2, const char *a3, _QWORD *a4, const char *a5, uint64_t a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  const char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  char v26;
  char **v27;
  char *v28;
  int v29;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  if (*a2)
    v17 = (const char *)(*a2 + 16);
  else
    v17 = 0;
  WTF::PrintStream::printf(v16, "%s", v17);
  WTF::PrintStream::printf(v16, "%s", a3);
  if (*a4)
    v18 = (const char *)(*a4 + 16);
  else
    v18 = 0;
  WTF::PrintStream::printf(v16, "%s", v18);
  WTF::PrintStream::printf(v16, "%s", a5);
  v19 = *(char **)a6;
  v20 = *(_QWORD *)(a6 + 8);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
  if (v19)
  {
    v23 = v20 - 1;
    if (!v20)
      v23 = 0;
    WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v28, v22);
  }
  else
  {
    v24 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 16) = 0;
    v28 = (char *)v24;
    v29 = 0;
  }
  WTF::printExpectedCStringHelper(v21, "StringView", &v28);
  if (v29 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v29])(&v27, &v28);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

void WTF::BackwardsGraph<JSC::B3::CFG>::dump(uint64_t *a1, uint64_t a2, unsigned __int8 a3, double a4, float a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  char v20;
  void (**v21)(WTF::StringPrintStream *__hidden);
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = off_1E3572250;
  v22 = v24;
  v23 = xmmword_199122F80;
  v24[0] = 0;
  if (a2 | a3)
  {
    if (a3)
    {
      WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v18, a5);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v21, "StringView", &v18);
      if (v19 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v20, &v18);
    }
    else if (a2)
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s", "#");
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%u");
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s");
    }
    v21[5]((WTF::StringPrintStream *)&v21);
  }
  else
  {
    WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s", "<null>");
  }
  v21[5]((WTF::StringPrintStream *)&v21);
  v14 = v22;
  v13 = v23;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_15:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197FEFE80);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v22;
  if (v22 != v24)
    goto LABEL_15;
}

uint64_t WTF::dataLog<char [11],WTF::CString,char [17]>(const char *a1, _QWORD *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const char *v9;
  char v11;
  char **v12;
  char *v13;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  if (*a2)
    v9 = (const char *)(*a2 + 16);
  else
    v9 = 0;
  WTF::PrintStream::printf(v8, "%s", v9);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<WTF::CommaPrinter,WTF::CString>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char v24;
  char **v25;
  char *v26;
  int v27;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v26, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v26 = (char *)v20;
      v27 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v26);
    if (v27 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v25, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v26, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v26 = (char *)v21;
      v27 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v26);
    if (v27 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v25, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  if (*a2)
    v22 = (const char *)(*a2 + 16);
  else
    v22 = 0;
  WTF::PrintStream::printf(v7, "%s", v22);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<WTF::Dominators<JSC::B3::BackwardsCFG>>(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  int v5;
  double v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  float v12;
  WTF::PrintStream *v13;
  float v14;
  void (***v15)(WTF::StringPrintStream *__hidden);
  const char *v16;
  WTF::PrintStream *v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unint64_t casual;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::PrintStream *v56;
  uint64_t v57;
  WTF::PrintStream *v58;
  float v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  WTF::PrintStream *v80;
  WTF::PrintStream *v81;
  float v82;
  WTF::PrintStream *v83;
  float v84;
  WTF::PrintStream *v85;
  float v86;
  uint64_t v88;
  int i;
  void (***v91)(WTF::StringPrintStream *__hidden);
  int v92;
  char v93;
  void (**v94)(WTF::StringPrintStream *__hidden);
  void *__src;
  size_t __n[2];
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v1 != -1)
  {
    v94 = (void (**)(WTF::StringPrintStream *__hidden))&v93;
    v91 = &v94;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v88 = WTF::s_file;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  v4 = 0;
  v5 = 0;
  v6 = 0.0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v8 + 40 * (v4 - 1) + 32) == -1)
        goto LABEL_128;
      v9 = v8 + 40 * (v4 - 1);
    }
    else
    {
      if (*(_DWORD *)(a1 + 56) == -1)
        goto LABEL_128;
      v9 = a1 + 24;
    }
    WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v91, *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), v6, v3);
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters("    Block #", 0xBuLL, (uint64_t)&v94, v12);
    WTF::printExpectedCStringHelper(v11, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    WTF::PrintStream::printf(v10, "%u", v5);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters(": idom = ", 9uLL, (uint64_t)&v94, v14);
    WTF::printExpectedCStringHelper(v13, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    v15 = v91;
    v16 = (const char *)(v91 + 2);
    if (!v91)
      v16 = 0;
    WTF::PrintStream::printf(v10, "%s", v16);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters(", idomKids = [", 0xEuLL, (uint64_t)&v94, v18);
    WTF::printExpectedCStringHelper(v17, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree((unint64_t)v15, v19, v20, v21, v22, v23, v24, v25);
      else
        --*(_DWORD *)v15;
    }
    v27 = 0;
    v28 = 0;
    v29 = v4 - 1;
    for (i = v5; !i; v5 = i)
    {
      v31 = a1 + 24;
      if (v27 >= *(unsigned int *)(a1 + 36))
      {
        v79 = (_DWORD *)(a1 + 56);
        v78 = a1 + 24;
        goto LABEL_121;
      }
LABEL_24:
      if (v27 >= *(unsigned int *)(v31 + 12))
        goto LABEL_134;
      v32 = *(_QWORD *)v31 + 16 * v27;
      v33 = *(_QWORD *)v32;
      v34 = *(unsigned __int8 *)(v32 + 8);
      v94 = off_1E3572250;
      __src = v97;
      *(_OWORD *)__n = xmmword_199122F80;
      v97[0] = 0;
      if (v33 | v34)
      {
        if (v34)
        {
          WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v91, v26);
          if (v92)
          {
            if (v92 != 1)
LABEL_131:
              std::__throw_bad_variant_access[abi:sn180100]();
            if ((_BYTE)v91)
              v71 = "(failed to convert ";
            else
              v71 = "(Out of memory while converting ";
            WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", v71);
            WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "StringView");
            WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s");
          }
          else
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s");
          }
          if (v92 != -1)
            ((void (*)(char *, void (****)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v92])(&v93, &v91);
        }
        else if (v33)
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "#");
          WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%u");
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s");
        }
        v94[5]((WTF::StringPrintStream *)&v94);
      }
      else
      {
        WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "<null>");
      }
      v94[5]((WTF::StringPrintStream *)&v94);
      v40 = __src;
      if (!__src)
      {
        casual = 0;
        v47 = 0;
        goto LABEL_52;
      }
      v41 = __n[0];
      if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF0E24);
      }
      v42 = __n[0] + 17;
      if (__n[0] == -17)
      {
LABEL_134:
        __break(0xC471u);
        JUMPOUT(0x197FF0E1CLL);
      }
      v43 = *(_QWORD *)(StatusReg + 752);
      if (!v43)
        goto LABEL_116;
      v44 = (__n[0] + 32) >> 4;
      if (__n[0] + 32 <= 0x1AF)
      {
        v45 = 23 * v44 + 7;
      }
      else
      {
        if ((__n[0] + 32) >> 5 > 0x138)
          goto LABEL_116;
        v45 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v44 + 626);
        if (*(_DWORD *)(v43 + 8052) <= v45)
          goto LABEL_116;
      }
      v48 = v43 + 8 * v45;
      v49 = v48 + 8064;
      *(_BYTE *)(v48 + 8064) = 1;
      v50 = *(unsigned int *)(v48 + 8080);
      if ((_DWORD)v50)
      {
        *(_DWORD *)(v49 + 16) = v50 - *(_DWORD *)(v49 + 20);
        casual = *(_QWORD *)(v49 + 8) - v50;
LABEL_50:
        *(_BYTE *)v49 = 0;
        goto LABEL_51;
      }
      v51 = *(_QWORD *)(v49 + 40);
      v52 = *(_QWORD *)(v49 + 24);
      if (v51)
      {
LABEL_49:
        v53 = __clz(v51);
        *(_QWORD *)(v49 + 40) = v51 & ~(0x8000000000000000 >> v53);
        casual = v52 + 16 * v53;
        goto LABEL_50;
      }
      if (*(_BYTE *)(v49 + 5) == 6)
      {
        v72 = *(unsigned int *)(v49 + 32);
        v73 = *(_DWORD *)(v49 + 36);
        if (v72 < v73)
        {
          *(_QWORD *)(v49 + 8 * v72 + 56) = 0;
          v74 = (unint64_t *)(v43 + 8128 + 8 * v45 + 8 * v72);
          v75 = v73 - 1 - v72;
          while (v75)
          {
            v52 += 1024;
            v77 = *v74++;
            v76 = v77;
            LODWORD(v72) = v72 + 1;
            --v75;
            if (v77)
            {
              v51 = __rbit64(v76);
              *(_DWORD *)(v49 + 32) = v72;
              *(_QWORD *)(v49 + 24) = v52;
              goto LABEL_49;
            }
          }
          *(_DWORD *)(v49 + 32) = v73;
        }
      }
      *(_BYTE *)v49 = 0;
LABEL_116:
      casual = bmalloc_allocate_casual(v42, 1);
LABEL_51:
      *(_DWORD *)casual = 1;
      *(_QWORD *)(casual + 8) = v41;
      memcpy((void *)(casual + 16), v40, v41);
      *(_BYTE *)(casual + 16 + v41) = 0;
      v47 = (unint64_t)__src;
      if (__src == v97)
        goto LABEL_57;
LABEL_52:
      v54 = *(_QWORD *)(StatusReg + 752);
      if (v54)
      {
        if (v47 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v47 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v47)) & 1) == 0)
        {
          if (v47 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v47 >> 24)
          {
            v35 = 0;
LABEL_84:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v54, v47, 1, v35, v36, v37, v38, v39);
            goto LABEL_57;
          }
          v35 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v47 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v47) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v35 != 1)
            goto LABEL_84;
        }
        v55 = *(unsigned int *)(v54 + 8000);
        if (v55 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v54, v47, (os_unfair_lock_s *)5, v35, v36, v37, v38, v39);
        }
        else
        {
          *(_QWORD *)(v54 + 8 * v55) = v47 | 0x5000000000000;
          *(_DWORD *)(v54 + 8000) = v55 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v47, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_57:
      v56 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      v57 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v56 + 32))(v56);
      v58 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
      if (v28)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v94, v59);
        if ((_DWORD)__src)
        {
          if ((_DWORD)__src != 1)
            goto LABEL_131;
          if ((_BYTE)v94)
            v69 = "(failed to convert ";
          else
            v69 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v58, "%s", v69);
          WTF::PrintStream::printf(v58, "%s", "StringView");
          v60 = " to utf8)";
        }
        else if (v94)
        {
          v60 = (const char *)(v94 + 2);
        }
        else
        {
          v60 = 0;
        }
        WTF::PrintStream::printf(v58, "%s", v60);
        if ((_DWORD)__src != -1)
          ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v91, &v94);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v94, v59);
        if ((_DWORD)__src)
        {
          if ((_DWORD)__src != 1)
            goto LABEL_131;
          if ((_BYTE)v94)
            v70 = "(failed to convert ";
          else
            v70 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v58, "%s", v70);
          WTF::PrintStream::printf(v58, "%s", "StringView");
          WTF::PrintStream::printf(v58, "%s");
        }
        else
        {
          WTF::PrintStream::printf(v58, "%s");
        }
        if ((_DWORD)__src != -1)
          ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v91, &v94);
        v28 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v56 + 40))(v56);
      v61 = (const char *)(casual + 16);
      if (!casual)
        v61 = 0;
      WTF::PrintStream::printf(v56, "%s", v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      if (casual)
      {
        if (*(_DWORD *)casual == 1)
        {
          v67 = *(_QWORD *)(StatusReg + 752);
          if (v67)
          {
            if (!(casual >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) != 0)
            {
LABEL_79:
              v68 = *(unsigned int *)(v67 + 8000);
              if (v68 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v67, casual, (os_unfair_lock_s *)5, v62, v63, v64, v65, v66);
              }
              else
              {
                *(_QWORD *)(v67 + 8 * v68) = casual | 0x5000000000000;
                *(_DWORD *)(v67 + 8000) = v68 + 1;
              }
              goto LABEL_74;
            }
            if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
            {
              v62 = 0;
            }
            else
            {
              v62 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v62 == 1)
                goto LABEL_79;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v67, casual, 1, v62, v63, v64, v65, v66);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          --*(_DWORD *)casual;
        }
      }
LABEL_74:
      ++v27;
    }
    v30 = *(_QWORD *)(a1 + 8);
    if (v27 < *(unsigned int *)(v30 + 40 * v29 + 12))
    {
      v31 = v30 + 40 * v29;
      goto LABEL_24;
    }
    v78 = v30 + 40 * v29;
    v79 = (_DWORD *)(v78 + 32);
LABEL_121:
    v80 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v81 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 32))(v80);
    WTF::StringImpl::utf8ForCharacters("], pre/post = ", 0xEuLL, (uint64_t)&v94, v82);
    WTF::printExpectedCStringHelper(v81, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v91, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 40))(v80);
    WTF::PrintStream::printf(v80, "%u", *v79);
    v83 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 32))(v80);
    WTF::StringImpl::utf8ForCharacters("/", 1uLL, (uint64_t)&v94, v84);
    WTF::printExpectedCStringHelper(v83, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v91, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 40))(v80);
    WTF::PrintStream::printf(v80, "%u", *(_DWORD *)(v78 + 36));
    v85 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 32))(v80);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v94, v86);
    WTF::printExpectedCStringHelper(v85, "StringView", &v94);
    if ((_DWORD)__src != -1)
      ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v91, &v94);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v80 + 40))(v80);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
LABEL_128:
    v4 = (v5 + 1);
    v5 = v4;
  }
  while (*(_DWORD *)(a1 + 20) >= v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
}

uint64_t ***WTF::Dominators<JSC::B3::BackwardsCFG>::NaiveDominators::dump(uint64_t ***result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t ***v7;
  unint64_t v8;
  double v9;
  _DWORD *v10;
  unsigned __int8 v11;
  WTF::PrintStream *v12;
  void (**v13)(WTF::StringPrintStream *__hidden);
  const char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  void *v36;
  WTF::PrintStream *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::PrintStream *v61;
  const char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF::PrintStream *v71;
  _DWORD *v72;
  unint64_t StatusReg;
  int v74;
  int v75;
  char v76;
  void (**v77)(WTF::StringPrintStream *__hidden);
  void *ptr;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = ***result;
  v5 = *(_DWORD *)(v4 + 60);
  if (v5 != -1)
  {
    v7 = result;
    v8 = 0;
    v9 = 0.0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v8)
      {
        if (v8 - 1 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF14ACLL);
        }
        v10 = *(_DWORD **)(*(_QWORD *)(v4 + 48) + 8 * (v8 - 1));
        if (!v10)
          goto LABEL_74;
        v11 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v77, (uint64_t)v10, v11, v9, a4);
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v12, "%s", "    Block ");
      v13 = v77;
      v14 = (const char *)(v77 + 2);
      if (!v77)
        v14 = 0;
      WTF::PrintStream::printf(v12, "%s", v14);
      WTF::PrintStream::printf(v12, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
        else
          --*(_DWORD *)v13;
      }
      v23 = ***v7;
      v24 = *(_DWORD *)(v23 + 60);
      if (v24 != -1)
        break;
LABEL_73:
      v71 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v71, "%s", "\n");
      result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = ***v7;
LABEL_74:
      ++v8;
      v5 = *(_DWORD *)(v4 + 60);
      if (v8 >= v5 + 1)
        return result;
    }
    if (v8)
      v25 = *v10 + 1;
    else
      v25 = 0;
    if (!*((_DWORD *)v7 + 5))
    {
LABEL_84:
      __break(0xC471u);
      JUMPOUT(0x197FF148CLL);
    }
    v72 = v10;
    if (((*((_DWORD *)*v7[1] + (v25 >> 5)) >> v25) & 1) == 0)
    {
LABEL_35:
      if (v24 - 1 <= 0xFFFFFFFD)
      {
        v46 = 0;
        v47 = 2;
        while (1)
        {
          if (v8)
            v48 = *v10 + 1;
          else
            v48 = 0;
          if (v46 + 1 >= *((unsigned int *)v7 + 5))
            goto LABEL_84;
          if (((*((_DWORD *)v7[1][v47] + (v48 >> 5)) >> v48) & 1) != 0)
            break;
LABEL_63:
          v24 = *(_DWORD *)(v23 + 60);
          v47 += 2;
          v70 = v46 + 2;
          ++v46;
          if (v70 >= v24 + 1)
            goto LABEL_73;
        }
        if (v46 >= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF1494);
        }
        v49 = *(_DWORD **)(*(_QWORD *)(v23 + 48) + 8 * v46);
        v77 = off_1E3572250;
        ptr = v80;
        v79 = xmmword_199122F80;
        v80[0] = 0;
        if (v49)
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%s", "#");
          WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%u", *v49);
          v77[5]((WTF::StringPrintStream *)&v77);
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v77, "%s", "<null>");
        }
        v77[5]((WTF::StringPrintStream *)&v77);
        v55 = ptr;
        if (ptr)
        {
          v56 = v79;
          if ((unint64_t)v79 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x197FF149CLL);
          }
          if ((_QWORD)v79 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x197FF14A4);
          }
          v57 = WTF::fastMalloc((WTF *)(v79 + 17));
          *(_DWORD *)v57 = 1;
          *(_QWORD *)(v57 + 8) = v56;
          memcpy((void *)(v57 + 16), v55, v56);
          *(_BYTE *)(v57 + 16 + v56) = 0;
          v58 = (unint64_t)ptr;
          v10 = v72;
          if (ptr == v80)
            goto LABEL_57;
        }
        else
        {
          v57 = 0;
          v58 = 0;
        }
        v59 = *(_QWORD *)(StatusReg + 752);
        if (v59)
        {
          if (v58 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v58 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v58)) & 1) == 0)
          {
            if (v58 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v58 >> 24)
            {
              v50 = 0;
            }
            else
            {
              v50 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v58 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v58) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v50 == 1)
                goto LABEL_55;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v59, v58, 1, v50, v51, v52, v53, v54);
          }
          else
          {
LABEL_55:
            v60 = *(unsigned int *)(v59 + 8000);
            if (v60 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v59, v58, (os_unfair_lock_s *)5, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_QWORD *)(v59 + 8 * v60) = v58 | 0x5000000000000;
              *(_DWORD *)(v59 + 8000) = v60 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v58, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_57:
        v61 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v61, "%s", " ");
        v62 = (const char *)(v57 + 16);
        if (!v57)
          v62 = 0;
        WTF::PrintStream::printf(v61, "%s", v62);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        if (v57)
        {
          if (*(_DWORD *)v57 == 1)
            WTF::fastFree(v57, v63, v64, v65, v66, v67, v68, v69);
          else
            --*(_DWORD *)v57;
        }
        v23 = ***v7;
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    v77 = off_1E3572250;
    ptr = v80;
    v79 = xmmword_199122F80;
    v80[0] = 0;
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v74, v22);
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v77, "StringView", &v74);
    if (v75 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v75])(&v76, &v74);
    v77[5]((WTF::StringPrintStream *)&v77);
    v77[5]((WTF::StringPrintStream *)&v77);
    v33 = ptr;
    if (ptr)
    {
      v34 = v79;
      if ((unint64_t)v79 >= 0xFFFFFFFFFFFFFFF0)
        goto LABEL_84;
      if ((_QWORD)v79 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF14B4);
      }
      v35 = WTF::fastMalloc((WTF *)(v79 + 17));
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = v34;
      memcpy((void *)(v35 + 16), v33, v34);
      *(_BYTE *)(v35 + 16 + v34) = 0;
      v36 = ptr;
      v10 = v72;
      if (ptr == v80)
        goto LABEL_29;
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    WTF::fastFree((unint64_t)v36, v26, v27, v28, v29, v30, v31, v32);
LABEL_29:
    v37 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v37, "%s", " ");
    v38 = (const char *)(v35 + 16);
    if (!v35)
      v38 = 0;
    WTF::PrintStream::printf(v37, "%s", v38);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree(v35, v39, v40, v41, v42, v43, v44, v45);
      else
        --*(_DWORD *)v35;
    }
    v23 = ***v7;
    v24 = *(_DWORD *)(v23 + 60);
    goto LABEL_35;
  }
  return result;
}

uint64_t WTF::dataLog<JSC::B3::BackwardsCFG>(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  WTF *v13;
  const char *v14;
  WTF::PrintStream *v15;
  float v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  WTF *v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  unint64_t casual;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::PrintStream *v66;
  uint64_t v67;
  WTF::PrintStream *v68;
  float v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  WTF::PrintStream *v83;
  float v84;
  uint64_t v85;
  WTF::PrintStream *v86;
  float v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  WTF *v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  void (***v102)(WTF::StringPrintStream *__hidden);
  uint64_t v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  int v105;
  char *v106;
  WTF *v107;
  int v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  size_t v119;
  size_t v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::PrintStream *v134;
  uint64_t v135;
  WTF::PrintStream *v136;
  float v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  const char *v142;
  const char *v143;
  uint64_t v144;
  unsigned int v145;
  unint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v151;
  WTF::PrintStream *v152;
  float v153;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t StatusReg;
  WTF *v161;
  uint64_t v162;
  _BYTE v163[64];
  uint64_t v164;
  int v165;
  char v166;
  void (**v167)(WTF::StringPrintStream *__hidden);
  void *__src;
  size_t __n[2];
  _BYTE v170[128];
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v1 != -1)
  {
    v167 = (void (**)(WTF::StringPrintStream *__hidden))&v164;
    v161 = (WTF *)&v167;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v161, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v155 = WTF::s_file;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  v4 = **(_QWORD **)a1;
  v5 = *(_DWORD *)(v4 + 60);
  if (v5 == -1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
  v6 = v2;
  v7 = 0;
  v8 = 0.0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    if (v7)
    {
      if (v7 - 1 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF26D8);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * (v7 - 1));
      if (!v9)
        goto LABEL_226;
      v157 = v7;
      v10 = 0;
    }
    else
    {
      v157 = 0;
      v9 = 0;
      v10 = 1;
    }
    WTF::BackwardsGraph<JSC::B3::CFG>::dump((uint64_t *)&v161, v9, v10, v8, v3);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v12 = v11;
    v13 = v161;
    v14 = (char *)v161 + 16;
    if (!v161)
      v14 = 0;
    WTF::PrintStream::printf(v11, "%s", v14);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::StringImpl::utf8ForCharacters(":\n", 2uLL, (uint64_t)&v167, v16);
    WTF::printExpectedCStringHelper(v15, "StringView", &v167);
    if ((_DWORD)__src != -1)
      ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v164, &v167);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree((unint64_t)v13, v17, v18, v19, v20, v21, v22, v23);
      else
        --*(_DWORD *)v13;
    }
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    WTF::StringImpl::utf8ForCharacters("    Preds: ", 0xBuLL, (uint64_t)&v167, v26);
    WTF::printExpectedCStringHelper(v25, "StringView", &v167);
    if ((_DWORD)__src != -1)
      ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v161, &v167);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v158 = v10;
    WTF::BackwardsGraph<JSC::B3::CFG>::predecessors((uint64_t)&v161, a1, (unsigned int *)v9, v10, v27, v28, v29, v30);
    v39 = v161;
    if (HIDWORD(v162))
    {
      v156 = v9;
      v40 = 0;
      v41 = (WTF *)((char *)v161 + 16 * HIDWORD(v162));
      while (1)
      {
        v42 = *(_QWORD *)v39;
        v43 = *((unsigned __int8 *)v39 + 8);
        v167 = off_1E3572250;
        __src = v170;
        *(_OWORD *)__n = xmmword_199122F80;
        v170[0] = 0;
        if (v42 | v43)
        {
          if (v43)
          {
            WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v164, v38);
            if (v165)
            {
              if (v165 != 1)
LABEL_230:
                std::__throw_bad_variant_access[abi:sn180100]();
              v75 = (_BYTE)v164 ? "(failed to convert " : "(Out of memory while converting ";
              WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", v75);
              WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "StringView");
              v44 = " to utf8)";
            }
            else
            {
              v44 = v164 ? (const char *)(v164 + 16) : 0;
            }
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", v44);
            if (v165 != -1)
              ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v165])(&v166, &v164);
          }
          else if (v42)
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "#");
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%u");
          }
          else
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s");
          }
          v167[5]((WTF::StringPrintStream *)&v167);
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "<null>");
        }
        v167[5]((WTF::StringPrintStream *)&v167);
        v50 = __src;
        if (__src)
          break;
        casual = 0;
        v57 = 0;
LABEL_50:
        v64 = *(_QWORD *)(StatusReg + 752);
        if (v64)
        {
          if (!(v57 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v57 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v57)) & 1) != 0)
          {
LABEL_53:
            v65 = *(unsigned int *)(v64 + 8000);
            if (v65 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v64, v57, (os_unfair_lock_s *)5, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_QWORD *)(v64 + 8 * v65) = v57 | 0x5000000000000;
              *(_DWORD *)(v64 + 8000) = v65 + 1;
            }
            goto LABEL_55;
          }
          if (v57 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v57 >> 24)
          {
            v45 = 0;
          }
          else
          {
            v45 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v57 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v57) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v45 == 1)
              goto LABEL_53;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v64, v57, 1, v45, v46, v47, v48, v49);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v57, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_55:
        v66 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        v67 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v66 + 32))(v66);
        v68 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
        if (v40)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v167, v69);
          if ((_DWORD)__src)
          {
            if ((_DWORD)__src != 1)
              goto LABEL_230;
            if ((_BYTE)v167)
              v73 = "(failed to convert ";
            else
              v73 = "(Out of memory while converting ";
            WTF::PrintStream::printf(v68, "%s", v73);
            WTF::PrintStream::printf(v68, "%s", "StringView");
            v70 = " to utf8)";
          }
          else if (v167)
          {
            v70 = (const char *)(v167 + 2);
          }
          else
          {
            v70 = 0;
          }
          WTF::PrintStream::printf(v68, "%s", v70);
          if ((_DWORD)__src != -1)
            ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v164, &v167);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v167, v69);
          if ((_DWORD)__src)
          {
            if ((_DWORD)__src != 1)
              goto LABEL_230;
            if ((_BYTE)v167)
              v74 = "(failed to convert ";
            else
              v74 = "(Out of memory while converting ";
            WTF::PrintStream::printf(v68, "%s", v74);
            WTF::PrintStream::printf(v68, "%s", "StringView");
            v71 = " to utf8)";
          }
          else if (v167)
          {
            v71 = (const char *)(v167 + 2);
          }
          else
          {
            v71 = 0;
          }
          WTF::PrintStream::printf(v68, "%s", v71);
          if ((_DWORD)__src != -1)
            ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v164, &v167);
          v40 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v66 + 40))(v66);
        v72 = (const char *)(casual + 16);
        if (!casual)
          v72 = 0;
        WTF::PrintStream::printf(v66, "%s", v72);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        if (casual)
        {
          if (*(_DWORD *)casual == 1)
            WTF::fastFree(casual, v31, v32, v33, v34, v35, v36, v37);
          else
            --*(_DWORD *)casual;
        }
        v39 = (WTF *)((char *)v39 + 16);
        if (v39 == v41)
        {
          v39 = v161;
          v9 = v156;
          goto LABEL_108;
        }
      }
      v51 = __n[0];
      if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
        goto LABEL_236;
      v52 = __n[0] + 17;
      if (__n[0] == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF26C0);
      }
      v53 = *(_QWORD *)(StatusReg + 752);
      if (!v53)
        goto LABEL_106;
      v54 = (__n[0] + 32) >> 4;
      if (__n[0] + 32 <= 0x1AF)
      {
        v55 = 23 * v54 + 7;
      }
      else if ((__n[0] + 32) >> 5 > 0x138
             || (v55 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v54 + 626),
                 *(_DWORD *)(v53 + 8052) <= v55))
      {
LABEL_106:
        casual = bmalloc_allocate_casual(v52, 1);
LABEL_49:
        *(_DWORD *)casual = 1;
        *(_QWORD *)(casual + 8) = v51;
        memcpy((void *)(casual + 16), v50, v51);
        *(_BYTE *)(casual + 16 + v51) = 0;
        v57 = (unint64_t)__src;
        if (__src == v170)
          goto LABEL_55;
        goto LABEL_50;
      }
      v58 = v53 + 8 * v55;
      v59 = v58 + 8064;
      *(_BYTE *)(v58 + 8064) = 1;
      v60 = *(unsigned int *)(v58 + 8080);
      if ((_DWORD)v60)
      {
        *(_DWORD *)(v59 + 16) = v60 - *(_DWORD *)(v59 + 20);
        casual = *(_QWORD *)(v59 + 8) - v60;
      }
      else
      {
        v61 = *(_QWORD *)(v59 + 40);
        v62 = *(_QWORD *)(v59 + 24);
        if (!v61)
        {
          if (*(_BYTE *)(v59 + 5) == 6)
          {
            v76 = *(unsigned int *)(v59 + 32);
            v77 = *(_DWORD *)(v59 + 36);
            if (v76 < v77)
            {
              *(_QWORD *)(v59 + 8 * v76 + 56) = 0;
              v78 = (unint64_t *)(v53 + 8128 + 8 * v55 + 8 * v76);
              v79 = v77 - 1 - v76;
              while (v79)
              {
                v62 += 1024;
                v81 = *v78++;
                v80 = v81;
                LODWORD(v76) = v76 + 1;
                --v79;
                if (v81)
                {
                  v61 = __rbit64(v80);
                  *(_DWORD *)(v59 + 32) = v76;
                  *(_QWORD *)(v59 + 24) = v62;
                  goto LABEL_47;
                }
              }
              *(_DWORD *)(v59 + 32) = v77;
            }
          }
          *(_BYTE *)v59 = 0;
          goto LABEL_106;
        }
LABEL_47:
        v63 = __clz(v61);
        *(_QWORD *)(v59 + 40) = v61 & ~(0x8000000000000000 >> v63);
        casual = v62 + 16 * v63;
      }
      *(_BYTE *)v59 = 0;
      goto LABEL_49;
    }
LABEL_108:
    if (v163 != (_BYTE *)v39 && v39)
    {
      v161 = 0;
      LODWORD(v162) = 0;
      WTF::fastFree((unint64_t)v39, v31, v32, v33, v34, v35, v36, v37);
    }
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v83 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 32))(v82);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v167, v84);
    WTF::printExpectedCStringHelper(v83, "StringView", &v167);
    if ((_DWORD)__src != -1)
      ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v161, &v167);
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v86 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
    WTF::StringImpl::utf8ForCharacters("    Succs: ", 0xBuLL, (uint64_t)&v167, v87);
    WTF::printExpectedCStringHelper(v86, "StringView", &v167);
    if ((_DWORD)__src != -1)
      ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v161, &v167);
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    if (v158)
    {
      v96 = (WTF *)v163;
      v97 = *(unsigned int *)(a1 + 20);
      v161 = (WTF *)v163;
      LODWORD(v162) = 4;
      HIDWORD(v162) = v97;
      if (v97 >= 5)
      {
        if (v97 >> 28)
        {
LABEL_236:
          __break(0xC471u);
          JUMPOUT(0x197FF26B8);
        }
        v96 = (WTF *)WTF::fastMalloc((WTF *)(16 * v97));
        LODWORD(v162) = v97;
        v161 = v96;
        v97 = *(unsigned int *)(a1 + 20);
      }
      if ((_DWORD)v97)
      {
        v98 = *(__int128 **)(a1 + 8);
        v99 = 16 * v97;
        do
        {
          v100 = *v98++;
          *(_OWORD *)v96 = v100;
          v96 = (WTF *)((char *)v96 + 16);
          v99 -= 16;
        }
        while (v99);
      }
    }
    else
    {
      v161 = (WTF *)v163;
      v162 = 4;
      v101 = *(unsigned int *)(v9 + 36);
      if ((_DWORD)v101)
      {
        v102 = *(void (****)(WTF::StringPrintStream *__hidden))(v9 + 24);
        v103 = 8 * v101;
        do
        {
          v104 = *v102;
          v167 = *v102;
          v105 = HIDWORD(v162);
          if (HIDWORD(v162) == (_DWORD)v162)
          {
            WTF::Vector<WTF::SingleRootGraphNode<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *&>((uint64_t)&v161, &v167, v89, v90, v91, v92, v93, v94);
          }
          else
          {
            v106 = (char *)v161 + 16 * HIDWORD(v162);
            *(_QWORD *)v106 = v104;
            v106[8] = 0;
            HIDWORD(v162) = v105 + 1;
          }
          ++v102;
          v103 -= 8;
        }
        while (v103);
      }
    }
    v107 = v161;
    if (!HIDWORD(v162))
      goto LABEL_218;
    v108 = 0;
    v109 = (WTF *)((char *)v161 + 16 * HIDWORD(v162));
    do
    {
      v110 = *(_QWORD *)v107;
      v111 = *((unsigned __int8 *)v107 + 8);
      v167 = off_1E3572250;
      __src = v170;
      *(_OWORD *)__n = xmmword_199122F80;
      v170[0] = 0;
      if (v110 | v111)
      {
        if (v111)
        {
          WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v164, v95);
          if (v165)
          {
            if (v165 != 1)
              goto LABEL_230;
            if ((_BYTE)v164)
              v143 = "(failed to convert ";
            else
              v143 = "(Out of memory while converting ";
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", v143);
            WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "StringView");
            v112 = " to utf8)";
          }
          else if (v164)
          {
            v112 = (const char *)(v164 + 16);
          }
          else
          {
            v112 = 0;
          }
          WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", v112);
          if (v165 != -1)
            ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v165])(&v166, &v164);
        }
        else if (v110)
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "#");
          WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%u");
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s");
        }
        v167[5]((WTF::StringPrintStream *)&v167);
      }
      else
      {
        WTF::PrintStream::printf((WTF::PrintStream *)&v167, "%s", "<null>");
      }
      v167[5]((WTF::StringPrintStream *)&v167);
      v118 = __src;
      if (!__src)
      {
        v124 = 0;
        v125 = 0;
        goto LABEL_160;
      }
      v119 = __n[0];
      if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF26C8);
      }
      v120 = __n[0] + 17;
      if (__n[0] == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF26D0);
      }
      v121 = *(_QWORD *)(StatusReg + 752);
      if (!v121)
        goto LABEL_216;
      v122 = (__n[0] + 32) >> 4;
      if (__n[0] + 32 <= 0x1AF)
      {
        v123 = 23 * v122 + 7;
LABEL_154:
        v126 = v121 + 8 * v123;
        v127 = v126 + 8064;
        *(_BYTE *)(v126 + 8064) = 1;
        v128 = *(unsigned int *)(v126 + 8080);
        if ((_DWORD)v128)
        {
          *(_DWORD *)(v127 + 16) = v128 - *(_DWORD *)(v127 + 20);
          v124 = *(_QWORD *)(v127 + 8) - v128;
        }
        else
        {
          v129 = *(_QWORD *)(v127 + 40);
          v130 = *(_QWORD *)(v127 + 24);
          if (!v129)
          {
            if (*(_BYTE *)(v127 + 5) == 6)
            {
              v144 = *(unsigned int *)(v127 + 32);
              v145 = *(_DWORD *)(v127 + 36);
              if (v144 < v145)
              {
                *(_QWORD *)(v127 + 8 * v144 + 56) = 0;
                v146 = (unint64_t *)(v121 + 8128 + 8 * v123 + 8 * v144);
                v147 = v145 - 1 - v144;
                while (v147)
                {
                  v130 += 1024;
                  v149 = *v146++;
                  v148 = v149;
                  LODWORD(v144) = v144 + 1;
                  --v147;
                  if (v149)
                  {
                    v129 = __rbit64(v148);
                    *(_DWORD *)(v127 + 32) = v144;
                    *(_QWORD *)(v127 + 24) = v130;
                    goto LABEL_157;
                  }
                }
                *(_DWORD *)(v127 + 32) = v145;
              }
            }
            *(_BYTE *)v127 = 0;
            goto LABEL_216;
          }
LABEL_157:
          v131 = __clz(v129);
          *(_QWORD *)(v127 + 40) = v129 & ~(0x8000000000000000 >> v131);
          v124 = v130 + 16 * v131;
        }
        *(_BYTE *)v127 = 0;
        goto LABEL_159;
      }
      if ((__n[0] + 32) >> 5 <= 0x138)
      {
        v123 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v122 + 626);
        if (*(_DWORD *)(v121 + 8052) > v123)
          goto LABEL_154;
      }
LABEL_216:
      v124 = bmalloc_allocate_casual(v120, 1);
LABEL_159:
      *(_DWORD *)v124 = 1;
      *(_QWORD *)(v124 + 8) = v119;
      memcpy((void *)(v124 + 16), v118, v119);
      *(_BYTE *)(v124 + 16 + v119) = 0;
      v125 = (unint64_t)__src;
      if (__src == v170)
        goto LABEL_165;
LABEL_160:
      v132 = *(_QWORD *)(StatusReg + 752);
      if (v132)
      {
        if (v125 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v125 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v125)) & 1) == 0)
        {
          if (v125 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v125 >> 24)
          {
            v113 = 0;
LABEL_190:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v132, v125, 1, v113, v114, v115, v116, v117);
            goto LABEL_165;
          }
          v113 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v125 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v125) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v113 != 1)
            goto LABEL_190;
        }
        v133 = *(unsigned int *)(v132 + 8000);
        if (v133 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v132, v125, (os_unfair_lock_s *)5, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_QWORD *)(v132 + 8 * v133) = v125 | 0x5000000000000;
          *(_DWORD *)(v132 + 8000) = v133 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v125, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_165:
      v134 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v135 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v134 + 32))(v134);
      v136 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 32))(v135);
      if (v108)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v167, v137);
        if ((_DWORD)__src)
        {
          if ((_DWORD)__src != 1)
            goto LABEL_230;
          if ((_BYTE)v167)
            v141 = "(failed to convert ";
          else
            v141 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v136, "%s", v141);
          WTF::PrintStream::printf(v136, "%s", "StringView");
          v138 = " to utf8)";
        }
        else if (v167)
        {
          v138 = (const char *)(v167 + 2);
        }
        else
        {
          v138 = 0;
        }
        WTF::PrintStream::printf(v136, "%s", v138);
        if ((_DWORD)__src != -1)
          ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v164, &v167);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v167, v137);
        if ((_DWORD)__src)
        {
          if ((_DWORD)__src != 1)
            goto LABEL_230;
          if ((_BYTE)v167)
            v142 = "(failed to convert ";
          else
            v142 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v136, "%s", v142);
          WTF::PrintStream::printf(v136, "%s", "StringView");
          v139 = " to utf8)";
        }
        else if (v167)
        {
          v139 = (const char *)(v167 + 2);
        }
        else
        {
          v139 = 0;
        }
        WTF::PrintStream::printf(v136, "%s", v139);
        if ((_DWORD)__src != -1)
          ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v164, &v167);
        v108 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v135 + 40))(v135);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v134 + 40))(v134);
      v140 = (const char *)(v124 + 16);
      if (!v124)
        v140 = 0;
      WTF::PrintStream::printf(v134, "%s", v140);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      if (v124)
      {
        if (*(_DWORD *)v124 == 1)
          WTF::fastFree(v124, v88, v89, v90, v91, v92, v93, v94);
        else
          --*(_DWORD *)v124;
      }
      v107 = (WTF *)((char *)v107 + 16);
    }
    while (v107 != v109);
    v107 = v161;
LABEL_218:
    if (v163 != (_BYTE *)v107 && v107 != 0)
    {
      v161 = 0;
      LODWORD(v162) = 0;
      WTF::fastFree((unint64_t)v107, v88, v89, v90, v91, v92, v93, v94);
    }
    v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v152 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 32))(v151);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v167, v153);
    WTF::printExpectedCStringHelper(v152, "StringView", &v167);
    if ((_DWORD)__src != -1)
      ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v161, &v167);
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 40))(v151);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v4 = **(_QWORD **)a1;
    v7 = v157;
LABEL_226:
    ++v7;
    v5 = *(_DWORD *)(v4 + 60);
  }
  while (v7 < v5 + 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
}

_QWORD *WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WTF::HashTable<JSC::B3::BasicBlock *,JSC::B3::BasicBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_21;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_30;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v32 = 8;
      goto LABEL_26;
    }
LABEL_30:
    v32 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_26:
    result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v9, v32, (uint64_t)v19, a3, a4, a5, a6, a7);
    v19 = result;
    v25 = *v9;
    if (*v9)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_21:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

uint64_t WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 16 * v8;
      v18 = (__int128 *)v7;
      do
      {
        v19 = *v18++;
        *v9++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  char v32;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (unsigned __int8 *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v30, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v30 = v21;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v30, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v30 = v22;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v23 = *(char **)v6;
  v24 = *(_QWORD *)(v6 + 8);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v23)
  {
    v27 = v24 - 1;
    if (!v24)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v27, (uint64_t)&v30, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v30 = v28;
    v31 = 0;
  }
  WTF::printExpectedCStringHelper(v25, "StringView", &v30);
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%u", *v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_DWORD *JSC::B3::SparseCollection<JSC::B3::Variable>::add(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = (_DWORD *)*a2;
  v5 = result[7];
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)result + 2) + 8 * v5 - 8);
    result[7] = v5 - 1;
    v7 = *(_QWORD **)result;
    goto LABEL_4;
  }
  v6 = result[3];
  if ((_DWORD)v6 != result[2])
  {
    v7 = *(_QWORD **)result;
    *(_QWORD *)(*(_QWORD *)result + 8 * v6) = 0;
    result[3] = v6 + 1;
LABEL_4:
    v8 = (_DWORD *)*a2;
    *v8 = v6;
    *a2 = 0;
    v7[v6] = v8;
    return v4;
  }
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v6 + 1)
    v11 = v6 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = *(_QWORD **)result;
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    v3[2] = v11;
    *(_QWORD *)v3 = v13;
    memcpy(v13, v12, 8 * v6);
    if (v12)
    {
      if (*(_QWORD **)v3 == v12)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    v21 = v3[3];
    v7 = *(_QWORD **)v3;
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v21) = 0;
    v3[3] = v21 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 16 * v5;
        v16 = (_DWORD *)(v4 + 8);
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *((_QWORD *)v16 - 1);
          *((_QWORD *)v16 - 1) = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *v16;
          *v16 = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = v16[1];
          v16[1] = 0;
          *(_DWORD *)(v14 + 12) = v17;
          v18 = *((_QWORD *)v16 - 1);
          if (v18)
          {
            *((_QWORD *)v16 - 1) = 0;
            *v16 = 0;
            WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 4;
          v14 += 16;
          v15 -= 16;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::PrintStream::printImpl<WTF::PointerDump<JSC::B3::Air::StackSlot>,char [3],JSC::B3::Air::DeepStackSlotDump,char [2]>(WTF::PrintStream *a1, uint64_t a2, const char *a3, uint64_t *a4, const char *a5)
{
  int v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;

  if (*(_QWORD *)a2)
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 4);
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v11 = "stack";
    if (v9 == 1)
      v11 = "spill";
    WTF::PrintStream::printf(v10, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v12, "%u");
  }
  else
  {
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v13, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a3);
  v14 = *a4;
  if (v14)
  {
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v15, "%s", "byteSize = ");
    WTF::PrintStream::printImpl<unsigned int,char [18],long,char [10],JSC::B3::Air::StackSlotKind>(v15, (_DWORD *)v14, ", offsetFromFP = ", (_QWORD *)(v14 + 16), ", kind = ", (_BYTE *)(v14 + 4));
  }
  else
  {
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v16, "%s", "<null>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return WTF::PrintStream::printf(a1, "%s", a5);
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::add@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;

  v4 = (uint64_t *)result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::rehash((uint64_t *)result, 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v28 = 0;
  v7 = *((unsigned __int8 *)a2 + 2);
  v8 = *((_DWORD *)a2 + 2) + ~(*((_DWORD *)a2 + 2) << 15);
  v9 = (9 * (v8 ^ (v8 >> 10))) ^ ((9 * (v8 ^ (v8 >> 10))) >> 6);
  v10 = *((_DWORD *)a2 + 1)
      + *((unsigned __int8 *)a2 + 1)
      + ((v7 & 1) << 16)
      + ((v7 << 6) & 0x80)
      + *((_DWORD *)a2 + 3)
      + (((v7 >> 2) & 1) << 24)
      + (((v7 >> 3) & 1) << 13)
      + *((_DWORD *)a2 + 4)
      + *((_DWORD *)a2 + 5)
      + ((v9 + ~(v9 << 11)) ^ ((v9 + ~(v9 << 11)) >> 16));
  for (i = 1; ; ++i)
  {
    v12 = v10 & v6;
    v13 = v5 + 24 * (v10 & v6);
    if (*(_BYTE *)v13 || *(unsigned __int8 *)(v13 + 1) != 159)
      break;
    v14 = v5 + 24 * v12;
    v16 = *(int32x4_t *)(v14 + 4);
    v15 = (int32x4_t *)(v14 + 4);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v16, v16))) & 1) == 0
      && (v15[-1].i8[14] & 0xF) == 0
      && !*(_DWORD *)(v13 + 20))
    {
      if (v28)
      {
        *(_WORD *)v28 = -24832;
        *(_BYTE *)(v28 + 2) &= 0xF0u;
        *(_QWORD *)(v28 + 12) = 0;
        *(_QWORD *)(v28 + 4) = 0;
        *(_DWORD *)(v28 + 20) = 0;
        --*(_DWORD *)(*v4 - 16);
        v13 = v28;
      }
      v18 = *a2;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v13 = v18;
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_25;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_25:
        v25 = v21 + 24 * v24;
        v26 = 1;
        goto LABEL_26;
      }
      result = WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::expand(v4, v13);
      v13 = result;
      v21 = *v4;
      if (*v4)
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      else
        LODWORD(v24) = 0;
      goto LABEL_25;
    }
    result = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>::equal<JSC::B3::ValueKey,JSC::B3::ValueKey>((unsigned __int8 *)(v5 + 24 * v12), (unsigned __int8 *)a2);
    if ((result & 1) != 0)
      goto LABEL_33;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v15, (int32x4_t)xmmword_199123080)))) & 1) == 0
      && (v15[-1].i8[14] & 0xF) == 0)
    {
      v17 = v28;
      if (!*(_DWORD *)(v13 + 20))
        v17 = v5 + 24 * v12;
      v28 = v17;
    }
LABEL_15:
    v10 = i + v12;
  }
  result = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>::equal<JSC::B3::ValueKey,JSC::B3::ValueKey>((unsigned __int8 *)(v5 + 24 * v12), (unsigned __int8 *)a2);
  if (!(_DWORD)result)
    goto LABEL_15;
LABEL_33:
  v26 = 0;
  v25 = v5 + 24 * *(unsigned int *)(v5 - 4);
LABEL_26:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a1, v5, a2);
}

BOOL WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>::equal<JSC::B3::ValueKey,JSC::B3::ValueKey>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && ((a2[2] ^ a1[2]) & 0xF) == 0
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
      && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4)
      && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5);
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = v9 + 20;
    do
    {
      *(_WORD *)(v18 - 4) = -24832;
      *(_BYTE *)(v18 - 2) &= 0xF0u;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      v18 += 24;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if (v7)
  {
    v21 = v7;
    v22 = v6;
    do
    {
      if (!WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::isDeletedBucket(v22)
        && !WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket(v22))
      {
        v23 = WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(*a1, v22);
        v24 = *(_QWORD *)(v22 + 16);
        *(_OWORD *)v23 = *(_OWORD *)v22;
        *(_QWORD *)(v23 + 16) = v24;
        if (v22 == a3)
          v19 = v23;
      }
      v22 += 24;
      --v21;
    }
    while (v21);
  }
  if (v6)
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = *(unsigned __int8 *)(a2 + 2);
  v5 = *(_DWORD *)(a2 + 8) + ~(*(_DWORD *)(a2 + 8) << 15);
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  for (i = *(_DWORD *)(a2 + 4)
          + *(unsigned __int8 *)(a2 + 1)
          + ((v4 & 1) << 16)
          + ((v4 << 6) & 0x80)
          + *(_DWORD *)(a2 + 12)
          + (((v4 >> 2) & 1) << 24)
          + (((v4 >> 3) & 1) << 13)
          + *(_DWORD *)(a2 + 16)
          + *(_DWORD *)(a2 + 20)
          + ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16)); ; i = v3 + v8)
  {
    v8 = i & v2;
    v9 = a1 + 24 * (i & v2);
    if (!*(_BYTE *)v9 && *(unsigned __int8 *)(v9 + 1) == 159)
    {
      v10 = a1 + 24 * v8;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v10 + 4), *(int32x4_t *)(v10 + 4)))) & 1) == 0
        && (*(_BYTE *)(v10 + 2) & 0xF) == 0
        && !*(_DWORD *)(v9 + 20))
      {
        break;
      }
    }
    ++v3;
  }
  return a1 + 24 * v8;
}

unsigned __int8 *WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned __int8 *result;
  int v19;
  uint64_t v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = a2[1];
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 2);
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v10 ^ HIWORD(v10);
  v12 = *((_DWORD *)a2 + 3);
  v13 = *((_DWORD *)a2 + 4);
  v14 = *((_DWORD *)a2 + 5);
  v15 = v7
      + v5
      + ((v6 & 1) << 16)
      + ((v6 << 6) & 0x80)
      + v12
      + (((v6 >> 2) & 1) << 24)
      + (((v6 >> 3) & 1) << 13)
      + v13
      + v14
      + v11;
  v16 = *a2;
  while (1)
  {
    v17 = v15 & v4;
    result = (unsigned __int8 *)(v2 + 24 * (v15 & v4));
    v19 = result[1];
    if (*result == v16 && v19 == v5)
    {
      v19 = v5;
      if (((*(_BYTE *)(v2 + 24 * v17 + 2) ^ v6) & 0xF) == 0)
      {
        v19 = v5;
        if (*(_DWORD *)(v2 + 24 * v17 + 4) == v7)
        {
          v19 = v5;
          if (*(_DWORD *)(v2 + 24 * v17 + 8) == v8)
          {
            v19 = v5;
            if (*((_DWORD *)result + 3) == v12)
            {
              v19 = v5;
              if (*(_DWORD *)(v2 + 24 * v17 + 16) == v13)
              {
                v19 = v5;
                if (*((_DWORD *)result + 5) == v14)
                  break;
              }
            }
          }
        }
      }
    }
    if (!*result && v19 == 159)
    {
      v21 = v2 + 24 * v17;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v21 + 4), *(int32x4_t *)(v21 + 4)))) & 1) == 0
        && (*(_BYTE *)(v21 + 2) & 0xF) == 0
        && !*((_DWORD *)result + 5))
      {
        return 0;
      }
    }
    v15 = ++v3 + v17;
  }
  return result;
}

void JSC::B3::reduceDoubleToFloat(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value **v16;
  JSC::B3::Value **v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  JSC::B3::Value *v23;
  _BYTE *v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *i;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  int64x2_t *v40;
  uint64_t v41;
  int v42;
  WTF *v43;
  JSC::B3::Value *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  JSC::B3::Value *v48;
  char v49;
  JSC::B3::Value **v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  int64x2_t *v57;
  int64x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF **v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Value **v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 **v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  JSC::B3::Value *v81;
  JSC::B3::Value **v82;
  int v83;
  uint64_t v84;
  JSC::B3::Value *v85;
  JSC::B3::Value *v86;
  WTF *v87;
  WTF **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t j;
  uint64_t v94;
  __int16 v95;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  int64x2_t *v100;
  int64x2_t *v101;
  uint64_t v103;
  JSC::B3::Value *v104;
  int v105;
  WTF *v106;
  WTF *v108;
  WTF **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t *v132;
  uint64_t *v133;
  JSC::B3::Value **v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  JSC::B3::Value **v137;
  WTF *v138;
  WTF::BitVector *v140;
  uint64_t *v141;
  JSC::B3::Value *v142;
  JSC::B3::Value *v143;
  JSC::B3::Value *v144;
  uint64_t v146;
  WTF *v147;
  WTF *v148;
  char v149;
  JSC::B3::Value *v150;
  uint64_t v151;
  JSC::B3::Value *v152;
  JSC::B3::Value *v153;
  float v154;
  WTF *v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  double v158;
  float v159;
  int v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  WTF **v164;
  int64x2_t v165;
  int64x2_t v166;
  _QWORD v167[3];
  uint64_t v168;
  WTF *v169;
  JSC::B3::Value *v170;
  JSC::B3::Value *v171;
  WTF *v172;
  uint64_t v173;
  _BYTE v174[176];
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  uint64_t v178;
  _BYTE v179[176];
  uint64_t v180;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v167, this, (uint64_t)"reduceDoubleToFloat", 20);
  v164 = this;
  v165 = vdupq_n_s64(0x8000000000000000);
  v166 = v165;
  v176 = (WTF *)&v178;
  v177 = (WTF *)32;
  v10 = *((unsigned int *)this + 15);
  if (!(_DWORD)v10)
  {
LABEL_5:
    v12 = 0;
    goto LABEL_77;
  }
  v11 = 0;
  while (!*((_QWORD *)this[6] + v11))
  {
    if (v10 == ++v11)
      goto LABEL_5;
  }
  if ((_DWORD)v10 == (_DWORD)v11)
    goto LABEL_76;
  v162 = 0;
  v13 = *((_DWORD *)this + 15);
  do
  {
    if (v13 <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x197FF4B0CLL);
    }
    v14 = *((_QWORD *)this[6] + v11);
    v15 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v15)
    {
      v16 = *(JSC::B3::Value ***)(v14 + 8);
      v17 = &v16[v15];
      while (1)
      {
        v171 = 0;
        v18 = *v16;
        v171 = v18;
        v19 = *((unsigned __int8 *)v18 + 20);
        if (v19 == 4)
        {
          v31 = 40;
          switch(*((_WORD *)v18 + 6))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v31 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v31 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v31 = 64;
              break;
            case 0x53u:
              v31 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v31 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF4B2CLL);
          }
          v32 = (char *)v18 + v31;
          v21 = *(char **)v32;
          v19 = *((unsigned int *)v32 + 3);
        }
        else
        {
          v20 = 40;
          switch(*((_WORD *)v18 + 6))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v20 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v20 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v20 = 64;
              break;
            case 0x53u:
              v20 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v20 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF4AB4);
          }
          v21 = (char *)v18 + v20;
        }
        v22 = &v21[8 * v19];
        if (v21 == v22)
        {
          v25 = *((_WORD *)v18 + 6);
        }
        else
        {
          do
          {
            v23 = *(JSC::B3::Value **)v21;
            if (*(_BYTE *)(*(_QWORD *)v21 + 12) == 1)
            {
              do
              {
                if (*((_BYTE *)v23 + 20) == 4)
                {
                  v157 = JSC::B3::Value::childrenVector(v23);
                  if (!*(_DWORD *)(v157 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FF4B04);
                  }
                  v24 = *(_BYTE **)v157;
                }
                else
                {
                  v24 = (char *)v23 + 40;
                }
                v23 = *(JSC::B3::Value **)v24;
              }
              while (*(_BYTE *)(*(_QWORD *)v24 + 12) == 1);
              *(_QWORD *)v21 = v23;
            }
            v21 += 8;
          }
          while (v21 != v22);
          v18 = v171;
          LOBYTE(v25) = *((_BYTE *)v171 + 12);
        }
        switch(v25)
        {
          case 0x98u:
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v18, 0) + 16) == 4)
            {
              v41 = HIDWORD(v177);
              if (HIDWORD(v177) == (_DWORD)v177)
              {
                v71 = (JSC::B3::Value **)WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v176, HIDWORD(v177) + 1, (unint64_t)&v171);
                v41 = HIDWORD(v177);
                v42 = HIDWORD(v177) + 1;
                v43 = v176;
                v44 = *v71;
              }
              else
              {
                v42 = HIDWORD(v177) + 1;
                v43 = v176;
                v44 = v171;
              }
              *((_QWORD *)v43 + v41) = v44;
              HIDWORD(v177) = v42;
            }
            goto LABEL_31;
          case 0x31u:
            v162 = 1;
            break;
          case 0x32u:
            v48 = *(JSC::B3::Value **)JSC::B3::Value::child(v18, 0);
            if (*((_BYTE *)v48 + 12) == 49)
            {
              v81 = v171;
              v82 = (JSC::B3::Value **)JSC::B3::Value::child(v48, 0);
              JSC::B3::Value::replaceWithIdentity(v81, *v82);
            }
            v162 = 1;
            goto LABEL_31;
        }
        v26 = *((unsigned __int8 *)v18 + 20);
        if (v26 == 4)
        {
          v33 = 40;
          switch((char)v25)
          {
            case 0:
            case 1:
            case 2:
            case 8:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 79:
            case -103:
            case -102:
            case -101:
            case -99:
            case -98:
            case -97:
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
            case 11:
            case 12:
            case 80:
            case 84:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case -128:
            case -127:
            case -126:
            case -125:
            case -124:
            case -123:
            case -122:
            case -121:
            case -120:
            case -119:
            case -118:
            case -117:
            case -116:
            case -115:
            case -114:
            case -113:
            case -112:
            case -111:
            case -110:
            case -109:
            case -108:
            case -107:
            case -106:
            case -105:
            case -104:
              v33 = 48;
              break;
            case 7:
            case 81:
            case 89:
            case -100:
              v33 = 56;
              break;
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 82:
              v33 = 64;
              break;
            case 83:
              v33 = 176;
              break;
            case 85:
            case 86:
            case 87:
            case 88:
              v33 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF4AD4);
          }
          v34 = (char *)v18 + v33;
          v29 = *(char **)v34;
          v26 = *((unsigned int *)v34 + 3);
        }
        else
        {
          v27 = v25;
          v28 = 40;
          switch(v27)
          {
            case 0:
            case 1:
            case 2:
            case 8:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 79:
            case 153:
            case 154:
            case 155:
            case 157:
            case 158:
            case 159:
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
            case 11:
            case 12:
            case 80:
            case 84:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
              v28 = 48;
              break;
            case 7:
            case 81:
            case 89:
            case 156:
              v28 = 56;
              break;
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 82:
              v28 = 64;
              break;
            case 83:
              v28 = 176;
              break;
            case 85:
            case 86:
            case 87:
            case 88:
              v28 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF4A74);
          }
          v29 = (char *)v18 + v28;
        }
        for (i = &v29[8 * v26]; v29 != i; v29 += 8)
        {
          if (*(_DWORD *)(*(_QWORD *)v29 + 16) == 4)
          {
            v35 = v165.i64[0];
            if (v165.i64[0] < 0)
              v36 = 63;
            else
              v36 = *(_QWORD *)(2 * v165.i64[0]);
            v37 = *(unsigned int *)(*(_QWORD *)v29 + 8);
            if (v36 <= v37)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v165, v37 + 1, 0);
              v35 = v165.i64[0];
            }
            v38 = 2 * v35 + 8;
            v39 = v35 < 0;
            v40 = &v165;
            if (!v39)
              v40 = (int64x2_t *)v38;
            *(uint64_t *)((char *)v40->i64 + ((v37 >> 3) & 0x1FFFFFF8)) |= 1 << v37;
          }
        }
LABEL_31:
        if (++v16 == v17)
        {
          v13 = *((_DWORD *)this + 15);
          break;
        }
      }
    }
    v11 = (v11 + 1);
    if (v13 > v11)
    {
      while (!*((_QWORD *)this[6] + v11))
      {
        if (v13 == ++v11)
        {
          LODWORD(v11) = v13;
          break;
        }
      }
    }
  }
  while ((_DWORD)v10 != (_DWORD)v11);
  if ((v162 & 1) != 0)
  {
    while (HIDWORD(v177))
    {
      v49 = 0;
      v50 = (JSC::B3::Value **)v176;
      v51 = 8 * HIDWORD(v177);
      do
      {
        if ((*((_WORD *)*v50 + 6) & 0xFFF) == 0x98)
          v52 = *v50;
        else
          v52 = 0;
        v53 = *((_QWORD *)v52 + 5);
        if (v53)
        {
          v54 = (_QWORD *)(2 * v165.i64[0]);
          v55 = v165.i64[0] < 0 ? 63 : *v54;
          v56 = *(unsigned int *)(v53 + 8);
          if (v55 > v56)
          {
            v57 = (int64x2_t *)(v54 + 1);
            v58 = v165.i64[0] >= 0 ? v57 : &v165;
            if (((*(unint64_t *)((char *)v58->i64 + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) != 0)
            {
              v59 = JSC::B3::Value::child(*v50, 0);
              v60 = v165.i64[0];
              if (v165.i64[0] < 0)
                v61 = 63;
              else
                v61 = *(_QWORD *)(2 * v165.i64[0]);
              v62 = *(_QWORD *)v59;
              v63 = *(unsigned int *)(*(_QWORD *)v59 + 8);
              if (v61 <= v63)
              {
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v165, v63 + 1, 0);
                v60 = v165.i64[0];
              }
              v64 = 2 * v60 + 8;
              v39 = v60 < 0;
              v65 = &v165;
              if (!v39)
                v65 = (int64x2_t *)v64;
              v66 = (v63 >> 3) & 0x1FFFFFF8;
              v67 = *(uint64_t *)((char *)v65->i64 + v66);
              *(uint64_t *)((char *)v65->i64 + v66) = v67 | (1 << v63);
              if ((v67 & (1 << v63)) == 0)
                v49 |= *(unsigned __int8 *)(v62 + 12) == 153;
            }
          }
        }
        ++v50;
        v51 -= 8;
      }
      while (v51);
      v12 = 1;
      if ((v49 & 1) == 0)
        goto LABEL_77;
    }
    v12 = 1;
  }
  else
  {
LABEL_76:
    v12 = 0;
  }
LABEL_77:
  v45 = v176;
  if (&v178 != (uint64_t *)v176 && v176)
  {
    v176 = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v45, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!v12)
    goto LABEL_81;
  v176 = (WTF *)&v178;
  v177 = (WTF *)32;
  v68 = v164;
  v69 = *((unsigned int *)v164 + 15);
  if ((_DWORD)v69)
  {
    v70 = 0;
    while (!*((_QWORD *)v164[6] + v70))
    {
      if (v69 == ++v70)
        goto LABEL_159;
    }
    if ((_DWORD)v69 == (_DWORD)v70)
      goto LABEL_159;
    v72 = *((_DWORD *)v164 + 15);
    do
    {
      if (v72 <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF4B44);
      }
      v73 = *((_QWORD *)v68[6] + v70);
      v74 = *(unsigned int *)(v73 + 20);
      if ((_DWORD)v74)
      {
        v75 = *(unsigned __int8 ***)(v73 + 8);
        v76 = 8 * v74;
        do
        {
          v171 = 0;
          v77 = *v75;
          v171 = (JSC::B3::Value *)v77;
          if (v77[12] == 152)
          {
            v78 = JSC::B3::Value::child((JSC::B3::Value *)v77, 0);
            v79 = *(_QWORD *)v78;
            if (*(_DWORD *)(*(_QWORD *)v78 + 16) == 4)
            {
              v80 = *(_WORD *)(v79 + 12);
              if (v80 != 49)
              {
                if ((*(_WORD *)(v79 + 12) & 0xFFF) != 5
                  || (v158 = *(double *)(v79 + 40), v159 = v158, COERCE__INT64(v159) != *(_QWORD *)&v158))
                {
                  if (v80 == 153)
                  {
                    v160 = HIDWORD(v177);
                    if (HIDWORD(v177) == (_DWORD)v177)
                    {
                      WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v176, (unint64_t)&v171);
                    }
                    else
                    {
                      *((_QWORD *)v176 + HIDWORD(v177)) = v171;
                      HIDWORD(v177) = v160 + 1;
                    }
                  }
                  else
                  {
                    v156 = v171;
                    if ((*((_WORD *)v171 + 6) & 0xFFF) != 0x98)
                      v156 = 0;
                    WTF::IndexSet<JSC::B3::Value *>::add((WTF::BitVector *)&v165.u64[1], *(_DWORD *)(*((_QWORD *)v156 + 5) + 8));
                  }
                }
              }
            }
          }
          ++v75;
          v76 -= 8;
        }
        while (v76);
        v72 = *((_DWORD *)v68 + 15);
      }
      v70 = (v70 + 1);
      if (v72 > v70)
      {
        do
        {
          if (*((_QWORD *)v68[6] + v70))
            goto LABEL_149;
          ++v70;
        }
        while (v72 != v70);
        LODWORD(v70) = v72;
      }
LABEL_149:
      ;
    }
    while ((_DWORD)v69 != (_DWORD)v70);
  }
LABEL_159:
  while (1)
  {
    v87 = v176;
    if (!HIDWORD(v177))
      break;
    v83 = 0;
    v84 = 8 * HIDWORD(v177);
    do
    {
      v85 = *(JSC::B3::Value **)v87;
      v171 = 0;
      v171 = *(JSC::B3::Value **)JSC::B3::Value::child(v85, 0);
      if (WTF::IndexSet<JSC::B3::Value *>::contains(&v165.i64[1], (uint64_t)&v171))
      {
        if ((*((_WORD *)v85 + 6) & 0xFFF) == 0x98)
          v86 = v85;
        else
          v86 = 0;
        v83 |= WTF::IndexSet<JSC::B3::Value *>::add((WTF::BitVector *)&v165.u64[1], *(_DWORD *)(*((_QWORD *)v86 + 5) + 8));
      }
      v87 = (WTF *)((char *)v87 + 8);
      v84 -= 8;
    }
    while (v84);
    if ((v83 & 1) == 0)
    {
      v87 = v176;
      break;
    }
  }
  if (&v178 != (uint64_t *)v87 && v87 != 0)
  {
    v176 = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v87, v3, v4, v5, v6, v7, v8, v9);
  }
  v175 = 0;
  v176 = (WTF *)&v178;
  v177 = (WTF *)32;
  v89 = v164;
  v171 = (JSC::B3::Value *)v164;
  v172 = (WTF *)v174;
  v173 = 8;
  memset(&v174[128], 0, 48);
  v163 = *((unsigned int *)v164 + 15);
  if (!(_DWORD)v163)
    goto LABEL_221;
  v90 = 0;
  while (!*((_QWORD *)v164[6] + v90))
  {
    if (v163 == ++v90)
      goto LABEL_221;
  }
  if ((_DWORD)v163 == (_DWORD)v90)
    goto LABEL_221;
  LODWORD(v91) = *((_DWORD *)v164 + 15);
  while (2)
  {
    if (v91 <= v90)
    {
      __break(0xC471u);
      JUMPOUT(0x197FF4B4CLL);
    }
    v92 = *((_QWORD *)v89[6] + v90);
    if (*(_DWORD *)(v92 + 20))
    {
      for (j = 0; j < *(unsigned int *)(v92 + 20); ++j)
      {
        v170 = 0;
        v94 = *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * j);
        v170 = (JSC::B3::Value *)v94;
        v95 = *(_WORD *)(v94 + 12);
        if (v95 == 152)
        {
          v103 = JSC::B3::Value::child((JSC::B3::Value *)v94, 0);
          if (*(unsigned __int8 *)(*(_QWORD *)v103 + 12) == 153 && *(_DWORD *)(*(_QWORD *)v103 + 16) == 4)
          {
            v105 = HIDWORD(v177);
            if (HIDWORD(v177) == (_DWORD)v177)
            {
              WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v176, (unint64_t)&v170);
            }
            else
            {
              *((_QWORD *)v176 + HIDWORD(v177)) = v170;
              HIDWORD(v177) = v105 + 1;
            }
          }
          continue;
        }
        if (v95 > 0x3Du || ((1 << v95) & 0x21F8000000000000) == 0)
        {
          v97 = (_QWORD *)(2 * v165.i64[0]);
          if (v165.i64[0] < 0)
            v98 = 63;
          else
            v98 = *v97;
          v99 = *(unsigned int *)(v94 + 8);
          if (v98 > v99)
          {
            v100 = (int64x2_t *)(v97 + 1);
            v101 = v165.i64[0] >= 0 ? v100 : &v165;
            if (((*(unint64_t *)((char *)v101->i64 + ((v99 >> 3) & 0x1FFFFFF8)) >> v99) & 1) != 0)
              continue;
          }
          if (v95 > 0x2Eu)
          {
            switch(v95)
            {
              case 0x99u:
                if (*(_DWORD *)(v94 + 16) == 4)
                {
                  *(_DWORD *)(v94 + 16) = 3;
                  v140 = (WTF::BitVector *)&v166.u64[1];
                  goto LABEL_217;
                }
                break;
              case 0x2Fu:
                v161 = *(_QWORD *)(v94 + 24);
                v141 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v94, 0);
                v142 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v171, j, 48, v161, *v141);
                v143 = v170;
                *((_DWORD *)v170 + 4) = 3;
LABEL_215:
                JSC::B3::Value::replaceWithIdentity(v143, v142);
                v104 = v170;
                goto LABEL_216;
              case 0x31u:
                *(_DWORD *)(v94 + 16) = 3;
                v142 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v94, 0);
                v143 = (JSC::B3::Value *)v94;
                goto LABEL_215;
            }
          }
          else
          {
            if (v95 - 14 < 4)
            {
              continue;
            }
            if (v95 - 31 < 4 || v95 == 21)
            {
              v144 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v94, 0);
              {
                *(_QWORD *)JSC::B3::Value::child(v170, 0) = v146;
                v104 = v170;
                *((_DWORD *)v170 + 4) = 3;
LABEL_216:
                LODWORD(v99) = *((_DWORD *)v104 + 2);
                v140 = (WTF::BitVector *)&v166;
LABEL_217:
                WTF::IndexSet<JSC::B3::Value *>::add(v140, v99);
              }
            }
          }
        }
        else
        {
        }
      }
    }
    JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v171, (JSC::B3::BasicBlock *)v92);
    v90 = (v90 + 1);
    v91 = *((unsigned int *)v89 + 15);
    if (v91 > v90)
    {
      while (!*((_QWORD *)v89[6] + v90))
      {
        if (v91 == ++v90)
        {
          LODWORD(v90) = *((_DWORD *)v89 + 15);
          break;
        }
      }
    }
    if ((_DWORD)v163 != (_DWORD)v90)
      continue;
    break;
  }
  if (HIDWORD(v177))
  {
    v147 = v176;
    v148 = (WTF *)((char *)v176 + 8 * HIDWORD(v177));
    do
    {
      v149 = 0;
      do
      {
        while (1)
        {
          v150 = *(JSC::B3::Value **)v147;
          v151 = (*(_WORD *)(*(_QWORD *)v147 + 12) & 0xFFF) == 0x98 ? *(_QWORD *)v147 : 0;
          v170 = 0;
          v152 = *(JSC::B3::Value **)JSC::B3::Value::child(v150, 0);
          v170 = v152;
          if (*(_DWORD *)(*(_QWORD *)(v151 + 40) + 16) != 3
            || *((_DWORD *)v152 + 4) != 4
            || WTF::IndexSet<JSC::B3::Value *>::contains(&v165.i64[1], (uint64_t)&v170))
          {
            break;
          }
          v153 = v170;
          *((_DWORD *)v170 + 4) = 3;
          WTF::IndexSet<JSC::B3::Value *>::add((WTF::BitVector *)&v166.u64[1], *((_DWORD *)v153 + 2));
          v147 = (WTF *)((char *)v147 + 8);
          v149 = 1;
          if (v147 == v148)
            goto LABEL_310;
        }
        v147 = (WTF *)((char *)v147 + 8);
      }
      while (v147 != v148);
      if ((v149 & 1) == 0)
        break;
LABEL_310:
      v147 = v176;
      v148 = (WTF *)((char *)v176 + 8 * HIDWORD(v177));
    }
    while (HIDWORD(v177));
  }
LABEL_221:
  v106 = v172;
  if (v174 != (_BYTE *)v172 && v172 != 0)
  {
    v172 = 0;
    LODWORD(v173) = 0;
    WTF::fastFree((unint64_t)v106, v3, v4, v5, v6, v7, v8, v9);
  }
  v108 = v176;
  if (&v178 != (uint64_t *)v176 && v176 != 0)
  {
    v176 = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v108, v3, v4, v5, v6, v7, v8, v9);
  }
  v110 = v164;
  v176 = (WTF *)v164;
  v177 = (WTF *)v179;
  v178 = 8;
  memset(&v179[128], 0, 48);
  v180 = 0;
  v111 = *((unsigned int *)v164 + 15);
  if ((_DWORD)v111)
  {
    v112 = 0;
    while (!*((_QWORD *)v164[6] + v112))
    {
      if (v111 == ++v112)
        goto LABEL_81;
    }
    if ((_DWORD)v111 == (_DWORD)v112)
      goto LABEL_81;
    LODWORD(v113) = *((_DWORD *)v164 + 15);
    while (1)
    {
      if (v113 <= v112)
      {
        __break(0xC471u);
        JUMPOUT(0x197FF4B54);
      }
      v114 = *((_QWORD *)v110[6] + v112);
      if (*(_DWORD *)(v114 + 20))
        break;
LABEL_275:
      JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v176, (JSC::B3::BasicBlock *)v114);
      v112 = (v112 + 1);
      v113 = *((unsigned int *)v110 + 15);
      if (v113 > v112)
      {
        while (!*((_QWORD *)v110[6] + v112))
        {
          if (v113 == ++v112)
          {
            LODWORD(v112) = *((_DWORD *)v110 + 15);
            break;
          }
        }
      }
      if ((_DWORD)v111 == (_DWORD)v112)
      {
        v138 = v177;
        if (v179 != (_BYTE *)v177 && v177 != 0)
        {
          v177 = 0;
          LODWORD(v178) = 0;
          WTF::fastFree((unint64_t)v138, v3, v4, v5, v6, v7, v8, v9);
        }
        goto LABEL_81;
      }
    }
    v115 = 0;
    while (2)
    {
      v116 = *(_QWORD *)(*(_QWORD *)(v114 + 8) + 8 * v115);
      v117 = *(_WORD *)(v116 + 12);
      if (v117 == 50)
      {
        if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(*(JSC::B3::Value **)(*(_QWORD *)(v114 + 8) + 8 * v115), 0)
                       + 16) != 3)
        {
          v117 = *(_WORD *)(v116 + 12);
          goto LABEL_242;
        }
        v137 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v116, 0);
        JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)v116, *v137);
      }
      else
      {
LABEL_242:
        if (v117 == 152
          && ((v117 & 0xFFF) != 0x98 ? (v133 = 0) : (v133 = (uint64_t *)v116),
              v134 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v116, 0),
              *(_DWORD *)(v133[5] + 16) == 3))
        {
          v135 = *v134;
          if (*((_DWORD *)*v134 + 4) == 4)
          {
            if (*((_WORD *)v135 + 6) == 49)
            {
              v136 = *(_QWORD *)JSC::B3::Value::child(*v134, 0);
            }
            else if ((*((_WORD *)v135 + 6) & 0xFFF) == 5)
            {
              v154 = *((double *)v135 + 5);
              v136 = (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(&v176, v115, *((_QWORD *)v135 + 3), v154);
            }
            else
            {
              v136 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v176, v115, 50, v133[3], (uint64_t)v135);
            }
            v133[6] = v136;
          }
        }
        else
        {
          v118 = (unint64_t *)(2 * v166.i64[0]);
          if (v166.i64[0] < 0)
            v119 = 63;
          else
            v119 = *v118;
          v120 = *(unsigned int *)(v116 + 8);
          if (v119 <= v120
            || ((v121 = (int64x2_t *)(v118 + 1), v166.i64[0] >= 0) ? (v122 = v121) : (v122 = &v166),
                ((*(unint64_t *)((char *)v122->i64 + ((v120 >> 3) & 0x1FFFFFF8)) >> v120) & 1) == 0))
          {
            v123 = JSC::B3::Value::children((JSC::B3::Value *)v116);
            if ((uint64_t *)v123 != v124)
            {
              v125 = (uint64_t *)v123;
              v126 = v124;
              do
              {
                v127 = *v125;
                if (*v125)
                {
                  v128 = (_QWORD *)(2 * v166.i64[1]);
                  v129 = v166.i64[1] < 0 ? 63 : *v128;
                  v130 = *(unsigned int *)(v127 + 8);
                  if (v129 > v130)
                  {
                    v131 = v128 + 1;
                    v132 = v166.i64[1] >= 0 ? v131 : &v166.u64[1];
                    if (((*(unint64_t *)((char *)v132 + ((v130 >> 3) & 0x1FFFFFF8)) >> v130) & 1) != 0)
                      *v125 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v176, v115, 49, *(_QWORD *)(v116 + 24), v127);
                  }
                }
                ++v125;
              }
              while (v125 != v126);
            }
          }
        }
      }
      if (++v115 >= (unint64_t)*(unsigned int *)(v114 + 20))
        goto LABEL_275;
      continue;
    }
  }
LABEL_81:
  if ((v166.i64[1] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v166.i64[1], v3, v4, v5, v6, v7, v8, v9);
  if ((v166.i64[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v166.i64[0], v3, v4, v5, v6, v7, v8, v9);
  if ((v165.i64[1] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v165.i64[1], v3, v4, v5, v6, v7, v8, v9);
  if ((v165.i64[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v165.i64[0], v3, v4, v5, v6, v7, v8, v9);
  v46 = (WTF *)v167[0];
  *(_QWORD *)(v167[0] + 144) = v167[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v169)
      v155 = (WTF *)((char *)v169 + 16);
    else
      v155 = 0;
    v176 = v46;
    v177 = v155;
  }
  v47 = v169;
  v169 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::fastFree((unint64_t)v47, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v47;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v168);
}

BOOL JSC::B3::reduceStrength(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  JSC::B3 *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value **v93;
  uint64_t v94;
  uint64_t **v95;
  unsigned int v96;
  BOOL v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned __int8 *v104;
  BOOL v105;
  uint16x4_t v106;
  unint64_t v108;
  __int128 v109;
  uint64_t *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  JSC::B3::Value *v122;
  _BYTE *v123;
  JSC::B3::Value *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t *v132;
  uint64_t *v133;
  unsigned int v134;
  WTF *v135;
  uint64_t v136;
  char *v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  int v157;
  __int16 v158;
  BOOL v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  JSC::B3 *v182;
  WTF *v183;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  void *v195;
  __int128 v196;
  WTF **v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  _OWORD *v201;
  _OWORD *v202;
  __int128 v203;
  uint64_t v204;
  BOOL v205;
  int __src;
  void *__srca;
  uint64_t v208;
  WTF *v209;
  JSC::B3 *v210;
  WTF **v211;
  WTF *v212;
  uint64_t v213;
  _BYTE v214[128];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  char *v219;
  _QWORD v220[2];
  _QWORD v221[17];
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  JSC::B3::Value *v226;
  uint64_t **v227;
  uint64_t v228;
  __int16 v229;
  _QWORD v230[3];
  uint64_t v231;
  WTF *v232;
  WTF *v233;
  int v234;
  unsigned int v235;
  _BYTE v236[24];
  int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  JSC::B3::Value *v243;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v230, this, (uint64_t)"reduceStrength", 15);
  v210 = (JSC::B3 *)this;
  v211 = this;
  v212 = (WTF *)v214;
  v213 = 8;
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v10 = (uint64_t **)(this + 6);
  v218 = 0;
  v219 = (char *)(this + 6);
  v220[0] = v221;
  v220[1] = 8;
  v221[16] = this;
  v222 = 0;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197FF65CCLL);
  }
  LOBYTE(v11) = 0;
  v223 = **v10;
  v224 = 0;
  v225 = 0;
  v228 = 0;
  v226 = 0;
  v227 = 0;
  while (1)
  {
    v229 = 0;
    if (HIBYTE(v229))
    {
      JSC::B3::Procedure::resetReachability(v210, v12, v13, v14, v15, v16, v17, v18);
      JSC::B3::Procedure::invalidateCFG(v210, v19, v20, v21, v22, v23, v24, v25);
      LOBYTE(v229) = 1;
    }
    v205 = v11;
    v26 = JSC::B3::eliminateDeadCodeImpl(v210, (JSC::B3::Procedure *)v12, v13, v14, v15, v16, v17, v18);
    LOBYTE(v229) = v229 | v26;
    v34 = v222;
    if (v222)
    {
      v222 = 0;
      WTF::fastFree(v34 - 16, v27, v28, v29, v30, v31, v32, v33);
    }
    JSC::B3::PhiChildren::PhiChildren((uint64_t)v236, v210);
    v42 = *(uint64_t **)&v236[16];
    if (v238)
    {
      v43 = *(_QWORD *)&v236[16] + 8 * v238;
      v208 = v43;
      do
      {
        v44 = *v42;
        v45 = *(_QWORD *)v236 + 16 * *(unsigned int *)(*v42 + 8);
        v46 = *(unsigned int *)(v45 + 12);
        if ((_DWORD)v46)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            if (v46 <= v47)
            {
              __break(0xC471u);
              JUMPOUT(0x197FF64D8);
            }
            v51 = *(_QWORD **)v45;
            v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 8 * v49) + 48);
            if (v50 == v44 || v50 == v48)
            {
              v50 = v48;
            }
            else if (v48)
            {
              goto LABEL_19;
            }
            v47 = v49 + 1;
            v49 = (v49 + 1);
            v48 = v50;
          }
          while ((_DWORD)v46 != v47);
          if (v50)
          {
            LOBYTE(v229) = 1;
            v53 = 8 * v46;
            do
            {
              v54 = *v51;
              if (*(_DWORD *)(*v51 + 16))
              {
                __break(0xC471u);
                JUMPOUT(0x197FF63A4);
              }
              v55 = *(_QWORD *)(v54 + 32);
              v56 = *(_DWORD *)(v54 + 8);
              (**(void (***)(_QWORD))v54)(*v51);
              *(_QWORD *)v54 = off_1E357F5F0;
              *(_WORD *)(v54 + 12) = 0;
              *(_DWORD *)(v54 + 16) = 0;
              *(_BYTE *)(v54 + 20) = 0;
              *(_DWORD *)(v54 + 8) = v56;
              ++v51;
              *(_QWORD *)(v54 + 32) = v55;
              v53 -= 8;
            }
            while (v53);
            v57 = *(_DWORD *)(v44 + 16);
            if (v57 != *(_DWORD *)(v50 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197FF63D4);
            }
            v58 = *(_QWORD *)(v44 + 32);
            v59 = *(_DWORD *)(v44 + 8);
            (**(void (***)(uint64_t))v44)(v44);
            *(_QWORD *)v44 = off_1E357F5F0;
            if (v57)
            {
              *(_QWORD *)(v44 + 40) = v50;
              v60 = 1;
            }
            else
            {
              v60 = 0;
            }
            v43 = v208;
            *(_WORD *)(v44 + 12) = v60;
            *(_DWORD *)(v44 + 16) = v57;
            *(_BYTE *)(v44 + 20) = v60;
            *(_DWORD *)(v44 + 8) = v59;
            *(_QWORD *)(v44 + 32) = v58;
          }
        }
LABEL_19:
        ++v42;
      }
      while (v42 != (uint64_t *)v43);
      v42 = *(uint64_t **)&v236[16];
    }
    if (&v239 != v42 && v42 != 0)
    {
      *(_QWORD *)&v236[16] = 0;
      v237 = 0;
      WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
    }
    v62 = *(_QWORD *)v236;
    if (*(_DWORD *)&v236[12])
    {
      v63 = 16 * *(unsigned int *)&v236[12];
      do
      {
        v64 = *(_QWORD *)v62;
        if (*(_QWORD *)v62)
        {
          *(_QWORD *)v62 = 0;
          *(_DWORD *)(v62 + 8) = 0;
          WTF::fastFree(v64, v35, v36, v37, v38, v39, v40, v41);
        }
        v62 += 16;
        v63 -= 16;
      }
      while (v63);
      v62 = *(_QWORD *)v236;
    }
    if (v62)
    {
      *(_QWORD *)v236 = 0;
      *(_DWORD *)&v236[8] = 0;
      WTF::fastFree(v62, v35, v36, v37, v38, v39, v40, v41);
    }
    v65 = v210;
    if (*((_DWORD *)v210 + 51) >= 2u)
    {
      v66 = *((unsigned int *)v210 + 15);
      if ((_DWORD)v66)
      {
        v67 = 0;
        v68 = *((_QWORD *)v210 + 6);
        while (!*(_QWORD *)(v68 + 8 * v67))
        {
          if (v66 == ++v67)
            goto LABEL_60;
        }
        if ((_DWORD)v66 != (_DWORD)v67)
        {
          v67 = v67;
          do
          {
            if (v66 <= v67)
            {
              __break(0xC471u);
              JUMPOUT(0x197FF6520);
            }
            v69 = *(_QWORD *)(v68 + 8 * v67);
            v70 = *(unsigned int *)(v69 + 20);
            if ((_DWORD)v70)
            {
              v71 = *(uint64_t **)(v69 + 8);
              v72 = 8 * v70;
              do
              {
                v73 = *v71++;
                *(_QWORD *)(v73 + 32) = v69;
                v72 -= 8;
              }
              while (v72);
            }
            if (v66 > ++v67)
            {
              while (!*(_QWORD *)(v68 + 8 * v67))
              {
                if (v66 == ++v67)
                  goto LABEL_60;
              }
              v67 = v67;
            }
          }
          while (v66 != v67);
        }
      }
LABEL_60:
      v227 = JSC::B3::Procedure::dominators(v65);
      v74 = v228;
      if (v228)
      {
        v228 = 0;
        v75 = *(unsigned int *)(v74 - 4);
        if ((_DWORD)v75)
        {
          v76 = v74 + 40;
          do
          {
            if (*(_BYTE *)(v76 - 40)
              || *(unsigned __int8 *)(v76 - 39) != 159
              || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v76 - 36), (int32x4_t)xmmword_199123080)))) & 1) != 0|| (*(_BYTE *)(v76 - 38) & 0xF) != 0|| *(_DWORD *)(v76 - 20))
            {
              v77 = *(_QWORD *)(v76 - 16);
              if (v76 != v77 && v77 != 0)
              {
                *(_QWORD *)(v76 - 16) = 0;
                *(_DWORD *)(v76 - 8) = 0;
                WTF::fastFree(v77, v35, v36, v37, v38, v39, v40, v41);
              }
            }
            v76 += 48;
            --v75;
          }
          while (v75);
        }
        WTF::fastFree(v74 - 16, v35, v36, v37, v38, v39, v40, v41);
      }
      v65 = v210;
    }
    if (!*((_DWORD *)v65 + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x197FF65BCLL);
    }
    JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(**((unsigned int ***)v65 + 6), v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v233);
    v86 = v233;
    v209 = (WTF *)((char *)v233 + 8 * v235);
    if (v235)
    {
      while (1)
      {
        v87 = *(_QWORD *)v86;
        v224 = v87;
        v225 = 0;
        if (*(_DWORD *)(v87 + 20))
          break;
LABEL_168:
        v135 = v212;
        v136 = HIDWORD(v213);
        if (HIDWORD(v213))
        {
          v140 = 16 * HIDWORD(v213);
          v141 = (uint64_t *)((char *)v212 + 8);
          do
          {
            v142 = *v141;
            v141 += 2;
            *(_QWORD *)(v142 + 32) = v87;
            v140 -= 16;
          }
          while (v140);
        }
        v137 = (char *)v135 + 16 * v136;
        v138 = (_OWORD *)((char *)v135 + 32);
        do
        {
          if ((unint64_t)(v137 - (char *)v135) < 0x11)
            break;
          v152 = 0;
          v153 = (v137 - (char *)v135) >> 4;
LABEL_195:
          v154 = 16 * v153;
          do
          {
            --v153;
            v155 = (char *)v135 + v154;
            if (*(_QWORD *)((char *)v135 + v154 - 16) < *(_QWORD *)((char *)v135 + v154 - 32))
            {
              v196 = *((_OWORD *)v155 - 2);
              *((_OWORD *)v155 - 2) = *((_OWORD *)v155 - 1);
              *((_OWORD *)v155 - 1) = v196;
              v152 = 1;
              if (v153 <= 1)
                goto LABEL_199;
              goto LABEL_195;
            }
            v154 -= 16;
          }
          while (v153 > 1);
          if ((v152 & 1) == 0)
            break;
LABEL_199:
          v135 = (WTF *)((char *)v135 + 16);
          v156 = v137 - (char *)v135;
          if ((unint64_t)(v137 - (char *)v135) < 0x11)
            break;
          v199 = 0;
          v200 = 1;
          v201 = v138;
          do
          {
            v202 = v201 - 1;
            if (*(_QWORD *)v201 < *((_QWORD *)v201 - 2))
            {
              v203 = *v201;
              *v201 = *v202;
              *v202 = v203;
              v199 = 1;
            }
            v204 = v156 >> 4;
            if ((unint64_t)(v156 >> 4) <= 2)
              v204 = 2;
            ++v200;
            ++v201;
          }
          while (v200 != v204);
          v137 -= 16;
          ++v138;
        }
        while ((v199 & 1) != 0);
        v139 = HIDWORD(v213);
        if (HIDWORD(v213))
        {
          v143 = *(unsigned int *)(v87 + 16);
          v144 = *(unsigned int *)(v87 + 20);
          v145 = v144 + HIDWORD(v213);
          if (v145 > v143)
          {
            v192 = v143 + (v143 >> 2);
            if (v192 >= 0x10)
              v193 = v192 + 1;
            else
              v193 = 16;
            if (v193 <= v145)
              v194 = v144 + HIDWORD(v213);
            else
              v194 = v193;
            if (v194 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x197FF65C4);
            }
            __srca = *(void **)(v87 + 8);
            v195 = (void *)WTF::fastMalloc((WTF *)(8 * v194));
            *(_DWORD *)(v87 + 16) = v194;
            *(_QWORD *)(v87 + 8) = v195;
            memcpy(v195, __srca, 8 * v144);
            if (__srca)
            {
              if (*(void **)(v87 + 8) == __srca)
              {
                *(_QWORD *)(v87 + 8) = 0;
                *(_DWORD *)(v87 + 16) = 0;
              }
              WTF::fastFree((unint64_t)__srca, (void *)i, v80, v81, v82, v83, v84, v85);
            }
          }
          *(_DWORD *)(v87 + 20) = v145;
          if (v139 - 1 >= (unint64_t)HIDWORD(v213))
          {
            __break(0xC471u);
            JUMPOUT(0x197FF6540);
          }
          v146 = ~v139;
          v147 = v145;
          do
          {
            --v139;
            v148 = *((_QWORD *)v212 + 2 * v139) + v139;
            v149 = v147 - 1;
            if (v147 - 1 > v148)
            {
              v150 = v147 + v146;
              do
              {
                if (v145 <= v150)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FF6528);
                }
                if (v145 <= v149)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FF6530);
                }
                *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8 * v149--) = *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8 * v150--);
              }
              while (v149 > v148);
            }
            if (v145 <= v148)
            {
              __break(0xC471u);
              JUMPOUT(0x197FF6538);
            }
            *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8 * v148) = *((_QWORD *)v212 + 2 * v139 + 1);
            ++v146;
            v147 = v148;
          }
          while (v139);
          HIDWORD(v213) = 0;
        }
        v218 = 0;
        v216 = 0u;
        v217 = 0u;
        v215 = 0u;
        v86 = (WTF *)((char *)v86 + 8);
        if (v86 == v209)
        {
          v86 = v233;
          goto LABEL_212;
        }
      }
      v88 = 0;
      v89 = 0;
      while (1)
      {
        if (*(_DWORD *)(v224 + 20) <= v89)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF64C8);
        }
        v90 = *(_QWORD *)(*(_QWORD *)(v224 + 8) + 8 * v88);
        v226 = (JSC::B3::Value *)v90;
        v91 = *(unsigned __int8 *)(v90 + 20);
        if (v91 == 4)
        {
          v120 = 40;
          switch(*(_WORD *)(v90 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v120 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v120 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v120 = 64;
              break;
            case 0x53u:
              v120 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v120 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF6518);
          }
          v121 = v90 + v120;
          v93 = *(JSC::B3::Value ***)v121;
          v94 = *(_QWORD *)v121 + 8 * *(unsigned int *)(v121 + 12);
          if (*(_QWORD *)v121 != v94)
          {
            do
            {
LABEL_147:
              v122 = *v93;
              if (*((_BYTE *)*v93 + 12) == 1)
              {
                do
                {
                  if (*((_BYTE *)v122 + 20) == 4)
                  {
                    v198 = JSC::B3::Value::childrenVector(v122);
                    if (!*(_DWORD *)(v198 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FF64D0);
                    }
                    v123 = *(_BYTE **)v198;
                  }
                  else
                  {
                    v123 = (char *)v122 + 40;
                  }
                  v122 = *(JSC::B3::Value **)v123;
                }
                while (*(_BYTE *)(*(_QWORD *)v123 + 12) == 1);
                *v93 = v122;
              }
              ++v93;
            }
            while (v93 != (JSC::B3::Value **)v94);
          }
        }
        else
        {
          v92 = 40;
          switch(*(_WORD *)(v90 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v92 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v92 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v92 = 64;
              break;
            case 0x53u:
              v92 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v92 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF64F8);
          }
          v93 = (JSC::B3::Value **)(v90 + v92);
          v94 = v90 + v92 + 8 * v91;
          if (v90 + v92 != v94)
            goto LABEL_147;
        }
        if (*((_DWORD *)v210 + 51) >= 2u)
        {
          v95 = v227;
          v243 = v226;
          v96 = *((unsigned __int8 *)v226 + 12) - 1;
          if (v96 >= 7 || ((0x7Du >> v96) & 1) == 0)
          {
            if ((JSC::B3::Value::key((uint64_t)v226, (uint64_t)v236), v236[0])
              || v236[1] != 159
              || (v236[2] & 0xF) != 0
              || ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19914F6D0, (int8x16_t)vceqzq_s32(*(int32x4_t *)&v236[4]))) & 0xF) == 0? (v97 = *(_DWORD *)&v236[20] == 0): (v97 = 0), !v97))
            {
              v240 = &v242;
              v241 = 1;
              v98 = v228;
              if (v228
                || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(&v228, 8u, 0), (v98 = v228) != 0))
              {
                v99 = *(_DWORD *)(v98 - 8);
              }
              else
              {
                v99 = 0;
              }
              v100 = 0;
              v101 = 9
                   * ((*(_DWORD *)&v236[8] + ~(*(_DWORD *)&v236[8] << 15)) ^ ((*(_DWORD *)&v236[8]
                                                                                           + ~(*(_DWORD *)&v236[8] << 15)) >> 10));
              v102 = (v101 ^ (v101 >> 6)) + ~((v101 ^ (v101 >> 6)) << 11);
              v103 = *(_DWORD *)&v236[4]
                   + v236[1]
                   + ((v236[2] & 1) << 16)
                   + ((v236[2] << 6) & 0x80)
                   + *(_DWORD *)&v236[12]
                   + (((v236[2] >> 2) & 1) << 24)
                   + (((v236[2] >> 3) & 1) << 13)
                   + *(_DWORD *)&v236[16]
                   + *(_DWORD *)&v236[20]
                   + (v102 ^ HIWORD(v102));
              for (i = 1; ; i = (i + 1))
              {
                v80 = v103 & v99;
                v104 = (unsigned __int8 *)(v98 + 48 * v80);
                v82 = *v104;
                v83 = v104[1];
                v105 = !*v104 && (_DWORD)v83 == 159;
                v81 = v105;
                if (v105)
                {
                  v106 = (uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v104 + 4), *(int32x4_t *)(v104 + 4)));
                  v106.i16[0] = vmaxv_u16(v106);
                  v84 = v106.u32[0];
                  if ((v106.i8[0] & 1) == 0)
                  {
                    v84 = v104[2] & 0xF;
                    if ((v104[2] & 0xF) == 0)
                    {
                      v84 = *((unsigned int *)v104 + 5);
                      if (!(_DWORD)v84)
                        break;
                    }
                  }
                }
                if ((_DWORD)v82 == v236[0]
                  && (_DWORD)v83 == v236[1]
                  && ((v104[2] ^ v236[2]) & 0xF) == 0
                  && *(_OWORD *)(v104 + 4) == *(_OWORD *)&v236[4])
                {
                  v82 = *((unsigned int *)v104 + 5);
                  if ((_DWORD)v82 == *(_DWORD *)&v236[20])
                    goto LABEL_134;
                }
                if ((_DWORD)v81
                  && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v104 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (v104[2] & 0xF) == 0&& !*((_DWORD *)v104 + 5))
                {
                  v100 = (unsigned __int8 *)(v98 + 48 * v80);
                }
                v103 = i + v80;
              }
              if (v100)
              {
                *(_WORD *)v100 = -24832;
                v100[2] &= 0xF0u;
                *((_DWORD *)v100 + 5) = 0;
                *(_QWORD *)(v100 + 12) = 0;
                *(_QWORD *)(v100 + 4) = 0;
                v108 = (unint64_t)(v100 + 40);
                *((_QWORD *)v100 + 3) = v100 + 40;
                *((_QWORD *)v100 + 4) = 1;
                --*(_DWORD *)(v228 - 16);
                v104 = v100;
              }
              else
              {
                v108 = *(_QWORD *)(v98 + 48 * v80 + 24);
              }
              v109 = *(_OWORD *)v236;
              *((_QWORD *)v104 + 2) = *(_QWORD *)&v236[16];
              *(_OWORD *)v104 = v109;
              if ((unsigned __int8 *)v108 != v104 + 40)
              {
                if (v108)
                {
                  *((_QWORD *)v104 + 3) = 0;
                  *((_DWORD *)v104 + 8) = 0;
                  WTF::fastFree(v108, (void *)i, v80, v81, v82, v83, v84, v85);
                }
                *((_QWORD *)v104 + 3) = v104 + 40;
              }
              v110 = v240;
              if (v240 == &v242)
              {
                v111 = HIDWORD(v241);
                memcpy(v104 + 40, &v242, 8 * HIDWORD(v241));
                v112 = v241;
              }
              else
              {
                v240 = &v242;
                *((_QWORD *)v104 + 3) = v110;
                v112 = v241;
                v111 = HIDWORD(v241);
                LODWORD(v241) = 1;
              }
              HIDWORD(v241) = 0;
              *((_DWORD *)v104 + 8) = v112;
              *((_DWORD *)v104 + 9) = v111;
              if (v228)
                v113 = *(_DWORD *)(v228 - 12) + 1;
              else
                v113 = 1;
              *(_DWORD *)(v228 - 12) = v113;
              if (v228)
                v114 = *(_DWORD *)(v228 - 12);
              else
                v114 = 0;
              v115 = (*(_DWORD *)(v228 - 16) + v114);
              v116 = *(unsigned int *)(v228 - 4);
              if (v116 > 0x400)
              {
                if (v116 > 2 * v115)
                  goto LABEL_134;
              }
              else
              {
                if (3 * v116 > 4 * v115)
                  goto LABEL_134;
                if (!(_DWORD)v116)
                {
                  v134 = 8;
LABEL_176:
                  v104 = (unsigned __int8 *)WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(&v228, v134, (__int128 *)v104);
LABEL_134:
                  v117 = (unint64_t)v240;
                  if (&v242 != v240 && v240)
                  {
                    v240 = 0;
                    LODWORD(v241) = 0;
                    WTF::fastFree(v117, (void *)i, v80, v81, v82, v83, v84, v85);
                  }
                  v118 = *((unsigned int *)v104 + 9);
                  if ((_DWORD)v118)
                  {
                    v124 = v243;
                    v125 = v95[1];
                    v126 = 8 * v118;
                    v127 = (uint64_t *)*((_QWORD *)v104 + 3);
                    while (1)
                    {
                      v128 = *v127;
                      v129 = *(unsigned int **)(*v127 + 32);
                      if (v129)
                      {
                        v130 = *v129;
                        if ((_DWORD)v130 != -1)
                        {
                          v131 = (unsigned int *)*((_QWORD *)v243 + 4);
                          if (v129 == v131)
                            break;
                          v132 = &v125[4 * *v131];
                          v133 = &v125[4 * v130];
                          if (*((_DWORD *)v132 + 6) > *((_DWORD *)v133 + 6))
                          {
                            v129 = (unsigned int *)*((_QWORD *)v243 + 4);
                            if (*((_DWORD *)v132 + 7) < *((_DWORD *)v133 + 7))
                              break;
                          }
                        }
                      }
                      ++v127;
                      v126 -= 8;
                      if (!v126)
                        goto LABEL_136;
                    }
                    v157 = *((_DWORD *)v243 + 4);
                    if (v157 != *(_DWORD *)(v128 + 16))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FF63F4);
                    }
                    __src = *((_DWORD *)v243 + 2);
                    (**(void (***)(JSC::B3::Value *))v243)(v243);
                    *(_QWORD *)v124 = off_1E357F5F0;
                    if (v157)
                    {
                      *((_QWORD *)v124 + 5) = v128;
                      v158 = 1;
                    }
                    else
                    {
                      v158 = 0;
                    }
                    *((_WORD *)v124 + 6) = v158;
                    *((_DWORD *)v124 + 4) = v157;
                    *((_BYTE *)v124 + 20) = v158;
                    *((_DWORD *)v124 + 2) = __src;
                    v119 = 1;
                    *((_QWORD *)v124 + 4) = v129;
                  }
                  else
                  {
LABEL_136:
                    if ((_DWORD)v118 == *((_DWORD *)v104 + 8))
                    {
                      v151 = (_QWORD *)WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v104 + 24), v118 + 1, (unint64_t)&v243);
                      v119 = 0;
                      v118 = *((unsigned int *)v104 + 9);
                      *(_QWORD *)(*((_QWORD *)v104 + 3) + 8 * v118) = *v151;
                    }
                    else
                    {
                      v119 = 0;
                      *(_QWORD *)(*((_QWORD *)v104 + 3) + 8 * v118) = v243;
                    }
                    *((_DWORD *)v104 + 9) = v118 + 1;
                  }
LABEL_139:
                  LOBYTE(v229) = v229 | v119;
                  goto LABEL_140;
                }
              }
              v134 = (_DWORD)v116 << (6 * *(_DWORD *)(v228 - 12) >= (2 * v116));
              goto LABEL_176;
            }
          }
          v119 = 0;
          goto LABEL_139;
        }
LABEL_140:
        v88 = ++v225;
        v89 = v225;
        if (*(_DWORD *)(v87 + 20) <= v225)
        {
          v87 = v224;
          goto LABEL_168;
        }
      }
    }
LABEL_212:
    if (v86)
    {
      v233 = 0;
      v234 = 0;
      WTF::fastFree((unint64_t)v86, (void *)i, v80, v81, v82, v83, v84, v85);
    }
    v159 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute((unsigned int *)&v219, i, v80, v81, v82, v83, v84, v85);
    HIBYTE(v229) |= v159;
    if (!HIBYTE(v229))
      break;
    JSC::B3::Procedure::resetReachability(v210, v3, v4, v5, v6, v7, v8, v9);
    JSC::B3::Procedure::invalidateCFG(v210, v160, v161, v162, v163, v164, v165, v166);
    v227 = 0;
    v11 = 1;
    LOBYTE(v229) = 1;
LABEL_218:
    if (*((_DWORD *)v210 + 51) <= 1u)
      goto LABEL_232;
  }
  v11 = (v229 | v205) != 0;
  if ((_BYTE)v229)
    goto LABEL_218;
  if (*((_DWORD *)v210 + 51) <= 1u)
  {
LABEL_232:
    HIBYTE(v229) = 0;
    if (HIBYTE(v229))
    {
      JSC::B3::Procedure::resetReachability(v210, v3, v4, v5, v6, v7, v8, v9);
      JSC::B3::Procedure::invalidateCFG(v210, v185, v186, v187, v188, v189, v190, v191);
      v227 = 0;
      LOBYTE(v229) = 1;
    }
  }
  WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::~HashTable(&v228, v3, v4, v5, v6, v7, v8, v9);
  if (v222)
    WTF::fastFree(v222 - 16, v167, v168, v169, v170, v171, v172, v173);
  WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v220, v167, v168, v169, v170, v171, v172, v173);
  v181 = v212;
  if (v214 != (_BYTE *)v212 && v212)
  {
    v212 = 0;
    LODWORD(v213) = 0;
    WTF::fastFree((unint64_t)v181, v174, v175, v176, v177, v178, v179, v180);
  }
  v182 = (JSC::B3 *)v230[0];
  *(_QWORD *)(v230[0] + 144) = v230[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v232)
      v197 = (WTF **)((char *)v232 + 16);
    else
      v197 = 0;
    v210 = v182;
    v211 = v197;
  }
  v183 = v232;
  v232 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 1)
      WTF::fastFree((unint64_t)v183, v174, v175, v176, v177, v178, v179, v180);
    else
      --*(_DWORD *)v183;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v231);
  return v11;
}

void JSC::B3::SIMDValue::~SIMDValue(JSC::B3::SIMDValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::SIMDValue::~SIMDValue(JSC::B3::SIMDValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::B3::SSACalculator::~SSACalculator(JSC::B3::SSACalculator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((unsigned int *)this + 13);
  v10 = *((_QWORD *)this + 5);
  if ((_DWORD)v9)
  {
    v11 = 24 * v9;
    v12 = v10 + 8;
    do
    {
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(_QWORD *)(v12 - 8);
      if (v14)
        WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
      v12 += 24;
      v11 -= 24;
    }
    while (v11);
    v10 = *((_QWORD *)this + 5);
  }
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    do
    {
      v16 = *(_QWORD *)(v15 + 24);
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = v16;
    }
    while (v16);
  }
  *((_QWORD *)this + 4) = 0;
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    do
    {
      v18 = *(_QWORD *)(v17 + 24);
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      v17 = v18;
    }
    while (v18);
  }
  *((_QWORD *)this + 3) = 0;
  WTF::SegmentedVector<JSC::B3::SSACalculator::Variable,8ul>::~SegmentedVector((unint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::SSACalculator::newDef(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;

  v23 = a3;
  v24 = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = 0;
  v8[3] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v22 = v8;
  WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::B3::SSACalculator::Def *&>((uint64_t *)(*(_QWORD *)(a1 + 40) + 24 * *a3), &v24, (uint64_t *)&v22, v9, v10, v11, v12, v13, (uint64_t)&v20);
  if (v21)
  {
    v14 = v24;
    v15 = *(unsigned int *)(v24 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(v24 + 8))
    {
      v18 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v15 + 1, (unint64_t)&v23);
      v19 = *(unsigned int *)(v14 + 12);
      v16 = v19 + 1;
      *(_QWORD *)(*(_QWORD *)v14 + 8 * v19) = *v18;
    }
    else
    {
      v16 = v15 + 1;
      *(_QWORD *)(*(_QWORD *)v24 + 8 * v15) = a3;
    }
    *(_DWORD *)(v14 + 12) = v16;
  }
  else
  {
    *(_QWORD *)(v20 + 8) = v22;
  }
  return (uint64_t)v22;
}

uint64_t *WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::B3::SSACalculator::Def *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v13 - 4);
        v26 = 0;
        v27 = v13 + 16 * v25;
        goto LABEL_9;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v28 = *v11;
  if (*v11)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v11;
  if (*v11)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_24;
    goto LABEL_28;
  }
  if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v34 = 8;
LABEL_31:
      result = (uint64_t *)WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(v11, v34, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v30 = *v11;
      if (*v11)
        v33 = *(unsigned int *)(v30 - 4);
      else
        v33 = 0;
      goto LABEL_24;
    }
LABEL_28:
    v34 = ((_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33)));
    goto LABEL_31;
  }
LABEL_24:
  v27 = v30 + 16 * v33;
  v26 = 1;
LABEL_9:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v27;
  *(_BYTE *)(a9 + 16) = v26;
  return result;
}

uint64_t JSC::B3::SSACalculator::reachingDefAtTail(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;

  if (!a2)
    return 0;
  v9 = a2;
  v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = a2;
  while (1)
  {
    v16 = *v15;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v16);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = v18 & v14;
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v20 != a3)
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v18;
          v20 = *(_QWORD *)(v17 + 16 * v19);
          ++v21;
          if (v20 == a3)
            goto LABEL_8;
        }
        goto LABEL_9;
      }
LABEL_8:
      v22 = *(_QWORD *)(v17 + 16 * v19 + 8);
      if (v22)
        break;
    }
LABEL_9:
    v15 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32 * v16 + 16);
    if (!v15)
      return 0;
  }
  if (v15 != a2)
  {
    do
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = (uint64_t *)(v23 + 24 * *v15);
      v25 = *v24;
      if (*v24
        || (WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash((uint64_t *)(v23 + 24 * *v15), 8uLL, 0, a4, a5, a6, a7, a8), (v25 = *v24) != 0))
      {
        v26 = *(_DWORD *)(v25 - 8);
      }
      else
      {
        v26 = 0;
      }
      v27 = v26 & v14;
      v28 = (_QWORD *)(v25 + 16 * (v26 & v14));
      v29 = *v28;
      if (*v28)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != a3)
        {
          if (v29 == -1)
            v30 = v28;
          v27 = (v27 + v31) & v26;
          v28 = (_QWORD *)(v25 + 16 * v27);
          v29 = *v28;
          ++v31;
          if (!*v28)
          {
            if (v30)
            {
              *v30 = 0;
              v30[1] = 0;
              --*(_DWORD *)(*v24 - 16);
              v28 = v30;
            }
            goto LABEL_19;
          }
        }
        goto LABEL_17;
      }
LABEL_19:
      *v28 = a3;
      v28[1] = v22;
      v32 = *v24;
      if (*v24)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v24;
      if (*v24)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 <= 2 * v36)
          goto LABEL_37;
      }
      else if (3 * v37 <= 4 * v36)
      {
        if ((_DWORD)v37)
LABEL_37:
          v39 = ((_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37)));
        else
          v39 = 8;
        WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(v24, v39, (uint64_t)v28, a4, a5, a6, a7, a8);
      }
LABEL_17:
      v9 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32 * *v9 + 16);
    }
    while (v9 != v15);
  }
  return v22;
}

void JSC::B3::SlotBaseValue::~SlotBaseValue(JSC::B3::SlotBaseValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::SlotBaseValue::~SlotBaseValue(JSC::B3::SlotBaseValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::SlotBaseValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  int v20;
  WTF::PrintStream *v21;
  const char *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  uint64_t v26;
  int v27;
  char v28;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (!*(_BYTE *)(a2 + 32))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v26, v18);
    }
    else
    {
      WTF::CString::CString(&v26, &str_25, 0);
      v27 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v26);
    if (v27 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
    if (v5)
      goto LABEL_14;
LABEL_21:
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v24, "%s");
    goto LABEL_22;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v9 = *(char **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v26, v12);
  }
  else
  {
    WTF::CString::CString(&v26, &str_25, 0);
    v27 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v26);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (!v5)
    goto LABEL_21;
LABEL_14:
  v20 = *(unsigned __int8 *)(v5 + 4);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v22 = "stack";
  if (v20 == 1)
    v22 = "spill";
  WTF::PrintStream::printf(v21, "%s", v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  WTF::PrintStream::printf(v23, "%u");
LABEL_22:
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

uint64_t JSC::B3::StackmapGenerationParams::usedRegisters(JSC::B3::StackmapGenerationParams *this)
{
  return *(_QWORD *)this + 96;
}

uint64_t JSC::B3::StackmapGenerationParams::unavailableRegisters(JSC::B3::StackmapGenerationParams *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *i;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)this + 104);
  result = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)this + 96);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 3);
    do
    {
      v7 = *v6 & 0x7F;
      if (v7 >= 0x40)
        goto LABEL_12;
      v8 = 1 << v7;
      result &= ~v8;
      v2 &= ~v8;
      ++v6;
    }
    while (--v4);
  }
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5)
  {
    for (i = (_BYTE *)*((_QWORD *)this + 5); ; ++i)
    {
      v10 = (*i + 32) & 0x7F;
      if (v10 >= 0x40)
        break;
      v11 = 1 << v10;
      result &= ~v11;
      v2 &= ~v11;
      if (!--v5)
        return result;
    }
LABEL_12:
    __break(1u);
  }
  return result;
}

void JSC::B3::StackmapGenerationParams::successorLabels(JSC::B3::StackmapGenerationParams *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE v23[24];

  if (*(_DWORD *)(*((_QWORD *)this + 7) + 40) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 20) - 1)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  JSC::B3::Value::effects(*(_QWORD *)this, (uint64_t)v23);
  if (!v23[0])
  {
    __break(0xC471u);
    JUMPOUT(0x197FF77F0);
  }
  v4 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 36);
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + 3) = v4;
  if ((_DWORD)v4)
  {
    if (!(v4 >> 29))
    {
      v5 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)a2 + 2) = v4;
      *a2 = (uint64_t)v5;
      bzero(v5, 8 * v4);
      v13 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 36);
      while (v13)
      {
        --v13;
        v14 = *((_QWORD *)this + 7);
        v15 = *(_QWORD *)(v14 + 32);
        if (*(_DWORD *)(v15 + 36) <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF77F8);
        }
        if (*((_DWORD *)a2 + 3) <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF7800);
        }
        v16 = *(_QWORD *)(v14 + 16);
        v17 = *a2;
        v18 = *(unsigned int **)(v16 + 8 * **(unsigned int **)(*(_QWORD *)(v15 + 24) + 16 * v13));
        if (v18)
        {
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        v20 = *(unsigned int **)(v17 + 8 * v13);
        *(_QWORD *)(v17 + 8 * v13) = v18;
        if (v20)
        {
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            atomic_store(1u, v20);
            WTF::fastFree((unint64_t)v20, v6, v7, v8, v9, v10, v11, v12);
          }
        }
      }
      return;
    }
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x197FF77D0);
  }
}

BOOL JSC::B3::StackmapGenerationParams::fallsThroughToSuccessor(JSC::B3::StackmapGenerationParams *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  if (*(_DWORD *)(*((_QWORD *)this + 7) + 40) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 20) - 1)
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  JSC::B3::Value::effects(*(_QWORD *)this, (uint64_t)v12);
  if (!v12[0])
  {
    __break(0xC471u);
    JUMPOUT(0x197FF7914);
  }
  v4 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v4 + 32);
  if (*(_DWORD *)(v5 + 36) <= a2)
  {
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x197FF78F4);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * a2);
  v7 = *(_QWORD *)(v4 + 48);
  v8 = (*(_DWORD *)v5 + 1);
  v9 = *(unsigned int *)(v7 + 108);
  if (v9 > v8)
  {
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 8 * v8);
      if (v10)
        break;
      if (v9 == ++v8)
        return v6 == v10;
    }
  }
  if (v8 >= v9)
    v10 = 0;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 8 * v8);
  return v6 == v10;
}

uint64_t JSC::B3::StackmapGenerationParams::proc(JSC::B3::StackmapGenerationParams *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 48) + 8);
}

uint64_t JSC::B3::StackmapGenerationParams::code(JSC::B3::StackmapGenerationParams *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 48) + 8) + 160);
}

void JSC::B3::StackmapSpecial::reportUsedRegisters(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 96) |= *a3;
  *(_QWORD *)(v3 + 104) = v4 | a3[1];
}

uint64_t JSC::B3::StackmapSpecial::extraClobberedRegs(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 112) + 80);
}

uint64_t JSC::B3::StackmapSpecial::extraEarlyClobberedRegs(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 112) + 64);
}

uint64_t JSC::B3::StackmapSpecial::forEachArgImpl(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, unsigned __int16 a8)
{
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  char v29;
  unsigned int v30;
  _BOOL8 v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v46;

  v11 = a4[14];
  v12 = *(unsigned __int8 *)(v11 + 12) - 83;
  if (v12 > 5 || v12 == 1)
    v11 = 0;
  v14 = 0;
  v44 = a8;
  v15 = (_WORD *)(v11 + 12);
  v46 = a8 & 0xFF00;
  v16 = a2;
  v17 = a3;
  v18 = 32 * a3;
  v19 = (16 * a2) | 8;
  while (2)
  {
    v20 = 20;
    switch(*v15)
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        goto LABEL_8;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v20 = 24;
        goto LABEL_8;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v20 = 28;
LABEL_8:
        if (v14 < *(_DWORD *)&v15[v20] - a2)
          goto LABEL_9;
        return result;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        if (v14 >= *(_DWORD *)(v11 + 76) - a2)
          return result;
        goto LABEL_9;
      case 0x53u:
        if (v14 >= *(_DWORD *)(v11 + 188) - a2)
          return result;
        goto LABEL_9;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        if (v14 < *(_DWORD *)(v11 + 124) - a2)
        {
LABEL_9:
          v21 = *((unsigned int *)a4 + 3);
          if (v17 >= v21)
          {
            __break(0xC471u);
            JUMPOUT(0x197FF7DD8);
          }
          v22 = 40;
          switch(*v15)
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v22 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v22 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v22 = 64;
              break;
            case 0x53u:
              v22 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v22 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FF7DF8);
          }
          v23 = v11 + v22;
          if (v16 >= *(unsigned int *)(v23 + 12))
          {
            __break(0xC471u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(0xC471u);
            JUMPOUT(0x197FF7E08);
          }
          if (v16 < *(unsigned int *)(v11 + 52))
            v24 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + v19);
          else
            v24 = 1;
          v25 = *a4;
          v26 = (_QWORD *)(*a4 + v18);
          v27 = *(_QWORD *)(*(_QWORD *)v23 + 8 * v16);
          switch(a5)
          {
            case 0:
              goto LABEL_15;
            case 1:
              if ((a6 & 0xFF00000000) == 0)
                goto LABEL_76;
              if (a6 >= v21)
                goto LABEL_77;
              if (*v26 != *(_QWORD *)(v25 + 32 * a6)
                || (v34 = v25 + 32 * a6,
                    *(unsigned __int8 *)(v25 + v18 + 8) != *(unsigned __int8 *)(v34 + 8))
                || *(_DWORD *)(v25 + v18 + 16) != *(_DWORD *)(v34 + 16)
                || (v35 = v25 + 32 * a6, *(_DWORD *)(v25 + v18 + 20) != *(_DWORD *)(v35 + 20))
                || *(_DWORD *)(v25 + v18 + 12) != *(_DWORD *)(v35 + 12))
              {
                v36 = (a6 + 1);
                if (v36 >= v21)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FF7E10);
                }
                if (*v26 != *(_QWORD *)(v25 + 32 * v36)
                  || (v37 = v25 + 32 * v36, *(unsigned __int8 *)(v25 + v18 + 8) != *(unsigned __int8 *)(v37 + 8))
                  || *(_DWORD *)(v25 + v18 + 16) != *(_DWORD *)(v37 + 16)
                  || (v38 = v25 + v18, v39 = v25 + 32 * v36, *(_DWORD *)(v38 + 20) != *(_DWORD *)(v39 + 20))
                  || *(_DWORD *)(v38 + 12) != *(_DWORD *)(v39 + 12))
                {
LABEL_52:
                  v29 = 3;
                  goto LABEL_19;
                }
              }
LABEL_15:
              if (v24 != 1)
              {
                v28 = 0;
                v29 = 2;
                switch(v24)
                {
                  case 2:
                    goto LABEL_52;
                  case 4:
                    v28 = 6;
                    goto LABEL_17;
                  case 5:
                    __break(0xC471u);
                    JUMPOUT(0x197FF7DA4);
                  case 6:
                  case 8:
                    goto LABEL_19;
                  default:
                    goto LABEL_17;
                }
              }
              v28 = 1;
              if (!v46)
                goto LABEL_18;
LABEL_17:
              v40 = *(_DWORD *)(v27 + 16);
              if (v40 >= 0x80000000)
                v40 = 0x80000000;
              v41 = v40 - 1;
              v43 = v41 > 4;
              v42 = (0x403020302uLL >> (8 * v41)) & 7;
              v43 = !v43 && v42 > v44;
              if (v43)
              {
                if ((v28 - 4) <= 6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FF7D84);
                }
                if ((v28 & 5) != 0)
                  v29 = 3;
                else
                  v29 = 2;
              }
              else
              {
LABEL_18:
                v29 = v28;
              }
              goto LABEL_19;
            case 2:
              goto LABEL_52;
          }
          v29 = 0;
LABEL_19:
          v30 = *(_DWORD *)(v27 + 16);
          if (v30 >= 0x80000000)
            v30 = 0x80000000;
          v31 = v30 - 3 < 3;
          if (v30 >= 6)
            v32 = 0;
          else
            v32 = 0x40302030200uLL >> (8 * v30);
          result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _BOOL8, _QWORD))a7)(*(_QWORD *)(a7 + 8), v26, v29, v31, v32 & 7);
          ++v14;
          v18 += 32;
          ++v17;
          v19 += 16;
          ++v16;
          continue;
        }
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FF7DD0);
    }
  }
}

uint64_t JSC::B3::StackmapValue::constrainedChild@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = 40;
  switch(*(_BYTE *)(this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v3 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v3 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v3 = 64;
      break;
    case 0x53:
      v3 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v3 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FF83ECLL);
  }
  v4 = this + v3;
  if (*(_DWORD *)(v4 + 12) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197FF83F4);
  }
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 8 * a2);
  if (*(_DWORD *)(this + 52) > a2)
  {
    v8 = *(_QWORD *)(this + 40) + 16 * a2;
    v6 = *(_QWORD *)v8;
    v7 = *(_BYTE *)(v8 + 8);
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
  return this;
}

uint64_t JSC::B3::StackmapSpecial::isValidImpl(JSC::B3::StackmapSpecial *this, int a2, unsigned int a3, JSC::B3::Air::Inst *a4)
{
  unsigned int v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v5 = a3;
  LODWORD(v6) = a2;
  v8 = *((_QWORD *)a4 + 14);
  v9 = *(unsigned __int8 *)(v8 + 12) - 83;
  if (v9 > 5 || v9 == 1)
    v8 = 0;
  v11 = *((unsigned int *)a4 + 3) - (unint64_t)a3;
  if (v11 < JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v8) - a2)
    return 0;
  if (JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v8) != (_DWORD)v6)
  {
    v12 = 0;
    v13 = 32 * v5;
    while (1)
    {
      v14 = JSC::B3::StackmapValue::child((JSC::B3::StackmapValue *)v8, (int)v6 + (int)v12);
      if (v5 + v12 >= *((unsigned int *)a4 + 3))
        break;
      v15 = *(_QWORD *)a4;
      v16 = *(_DWORD *)(*(_QWORD *)v14 + 16);
      v17 = *(char *)(*(_QWORD *)a4 + v13 + 8);
      if (v17 - 1 >= 3 && v17 - 8 >= 3)
      {
        if (v17 != 7)
          return 0;
        v22 = *(_DWORD *)(v15 + v13 + 16);
        if (v22 != 32 && v22 != 30)
          return 0;
      }
      if (v16 >= 0x80000000)
        v16 = 0x80000000;
      if (v16 - 3 < 3)
      {
        if (v17 == 1)
        {
          if ((*(_DWORD *)(v15 + v13 + 16) & 0x80000000) == 0)
            return 0;
        }
        else if (v17 > 0xA || ((1 << v17) & 0x7C8) == 0)
        {
          return 0;
        }
      }
      else if (v17 == 1 && *(int *)(v15 + v13 + 16) < 1)
      {
        return 0;
      }
      ++v12;
      v13 += 32;
      if (v12 >= JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v8) - v6)
        goto LABEL_22;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x197FF8880);
  }
LABEL_22:
  if (*(_DWORD *)(v8 + 52) > v6)
  {
    v20 = 32 * v5;
    v21 = 16 * v6;
    v6 = v6;
    while (*((_DWORD *)a4 + 3) > v5)
    {
      result = JSC::B3::StackmapSpecial::isArgValidForRep(*((_QWORD *)this + 2), *(_QWORD *)a4 + v20, (_BYTE *)(*(_QWORD *)(v8 + 40) + v21));
      if ((result & 1) != 0)
      {
        ++v6;
        v20 += 32;
        ++v5;
        v21 += 16;
        if (v6 < *(unsigned int *)(v8 + 52))
          continue;
      }
      return result;
    }
    goto LABEL_43;
  }
  return 1;
}

BOOL JSC::B3::StackmapSpecial::isArgValidForType(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;

  v2 = *(char *)(a1 + 8);
  if (v2 - 1 >= 3 && v2 - 8 >= 3)
  {
    if (v2 != 7)
      return 0;
    v5 = *(_DWORD *)(a1 + 16);
    if (v5 != 32 && v5 != 30)
      return 0;
  }
  if (a2 >= 0x80000000)
    v3 = 0x80000000;
  else
    v3 = a2;
  if (v3 - 3 < 3)
  {
    if (v2 == 1)
      return *(_DWORD *)(a1 + 16) >> 31;
    else
      return v2 <= 0xA && ((1 << v2) & 0x7C8) != 0;
  }
  else
  {
    return v2 != 1 || *(_DWORD *)(a1 + 16) > 0;
  }
}

uint64_t JSC::B3::StackmapSpecial::isArgValidForRep(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v17;

  v3 = 1;
  switch(a3[8])
  {
    case 0:
    case 1:
    case 2:
      return v3;
    case 3:
    case 4:
    case 5:
    case 6:
      v4 = *(unsigned __int8 *)(a2 + 8);
      return v4 == 1;
    case 7:
    case 8:
      v5 = *a3 & 0x7F;
      if ((*a3 & 0x60) != 0)
        v6 = (char)(31 - (*a3 & 0x7F));
      else
        v6 = v5 + 1;
      if (v5 == 127)
        v6 = 0;
      if (*(_QWORD *)a2)
        v7 = 0;
      else
        v7 = *(_BYTE *)(a2 + 8) == 1;
      if (!v7 || *(_DWORD *)(a2 + 16) != v6 || *(_DWORD *)(a2 + 20) != 0)
        return 0;
      v4 = *(_DWORD *)(a2 + 12);
      return v4 == 1;
    case 9:
    case 0xB:
      __break(0xC471u);
      JUMPOUT(0x197FF8A50);
    case 0xA:
      v10 = *(_QWORD *)a3;
      v11 = *(unsigned __int8 *)(a2 + 8);
      v12 = *(_DWORD *)(a2 + 16);
      if (*(_QWORD *)a2 == *(_QWORD *)a3
        && v11 == 10
        && v12 == 0
        && *(_DWORD *)(a2 + 20) == 0
        && *(_DWORD *)(a2 + 12) == 1)
      {
        return 1;
      }
      if ((v11 - 7) > 1)
        return 0;
      v17 = *(unsigned int *)(a1 + 184);
      if (!(_DWORD)v17)
        return 0;
      if (v12 == 32)
        return v10 == (int)*(_QWORD *)a2;
      if (v12 != 30)
        return 0;
      v10 -= v17;
      return v10 == (int)*(_QWORD *)a2;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FF8A70);
  }
}

BOOL JSC::B3::StackmapSpecial::admitsStackImpl(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a4 + 112);
  v6 = *(unsigned __int8 *)(v5 + 12) - 83;
  if (v6 > 5 || v6 == 1)
    v5 = 0;
  v8 = a5 - a3 + a2;
  v9 = 40;
  switch(*(_BYTE *)(v5 + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v9 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v9 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v9 = 64;
      break;
    case 0x53:
      v9 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v9 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FF8B7CLL);
  }
  if (v8 >= *(_DWORD *)(v5 + v9 + 12))
    return 0;
  if (*(_DWORD *)(v5 + 52) > v8)
    return *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 16 * v8 + 8) < 3u;
  return 1;
}

void JSC::B3::StackmapSpecial::repsImpl(uint64_t a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  int64x2_t v23;
  _OWORD *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  _DWORD *v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;

  v9 = 0;
  v10 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v11 = 32 * a3;
  v12 = a3;
  v13 = vdupq_n_s64(7uLL);
  v30 = vdupq_n_s64(0xBuLL);
  v31 = vdupq_n_s64(9uLL);
  while (1)
  {
    v14 = a4[14];
    v15 = *(unsigned __int8 *)(v14 + 20);
    if (v15 == 4)
    {
      v16 = 40;
      switch(*(_BYTE *)(v14 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 8:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x4F:
        case 0x99:
        case 0x9A:
        case 0x9B:
        case 0x9D:
        case 0x9E:
        case 0x9F:
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0x50:
        case 0x54:
        case 0x5A:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5E:
        case 0x5F:
        case 0x60:
        case 0x61:
        case 0x62:
        case 0x63:
        case 0x64:
        case 0x65:
        case 0x66:
        case 0x67:
        case 0x68:
        case 0x69:
        case 0x6A:
        case 0x6B:
        case 0x6C:
        case 0x6D:
        case 0x6E:
        case 0x6F:
        case 0x70:
        case 0x71:
        case 0x72:
        case 0x73:
        case 0x74:
        case 0x75:
        case 0x76:
        case 0x77:
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
        case 0x7E:
        case 0x7F:
        case 0x80:
        case 0x81:
        case 0x82:
        case 0x83:
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x88:
        case 0x89:
        case 0x8A:
        case 0x8B:
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
        case 0x91:
        case 0x92:
        case 0x93:
        case 0x94:
        case 0x95:
        case 0x96:
        case 0x97:
        case 0x98:
          v16 = 48;
          break;
        case 7:
        case 0x51:
        case 0x59:
        case 0x9C:
          v16 = 56;
          break;
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x52:
          v16 = 64;
          break;
        case 0x53:
          v16 = 176;
          break;
        case 0x55:
        case 0x56:
        case 0x57:
        case 0x58:
          v16 = 112;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197FF9064);
      }
      v15 = *(_DWORD *)(v14 + v16 + 12);
    }
    if (v10 >= (v15 - a2))
      break;
    if (v12 + v10 >= *((unsigned int *)a4 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x197FF906CLL);
    }
    v17 = *a4;
    v18 = *a4 + v11;
    v19 = *(char *)(v18 + 8);
    if (v19 == 1)
    {
      v20 = *(_DWORD *)(v18 + 16);
      if (v20 <= 0)
        v21 = 31 - v20;
      else
        v21 = v20 - 1;
      v22 = v21 & 0x7F;
      v23.i64[1] = v13.i64[1];
    }
    else
    {
      if ((v19 - 7) >= 2)
      {
        if ((v19 - 2) >= 2)
        {
          v23 = 0uLL;
        }
        else
        {
          v23.i64[1] = v30.i64[1];
          v23.i64[0] = *(_QWORD *)v18;
        }
        goto LABEL_13;
      }
      v25 = *(unsigned __int8 *)(v18 + 8);
      v26 = (int *)(v17 + v11);
      if (*(_DWORD *)(v17 + v11 + 16) == 30)
      {
        v27 = v26 + 3;
        if (v25 != 9)
          v27 = v26;
        v22 = *v27;
        v23.i64[1] = v31.i64[1];
      }
      else
      {
        v28 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 184);
        if (v28 < 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197FF903CLL);
        }
        v29 = (_DWORD *)(v17 + v11);
        if (v25 == 9)
          v29 += 3;
        v22 = *v29 - v28;
        v23 = vdupq_n_s64(9uLL);
      }
    }
    v23.i64[0] = v22;
LABEL_13:
    v33 = v23;
    if (v9 == *(_DWORD *)(a5 + 8))
    {
      v32 = v13;
      v24 = (_OWORD *)WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v9 + 1, (unint64_t)&v33);
      v13 = v32;
      *(_OWORD *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 12)) = *v24;
    }
    else
    {
      *(int64x2_t *)(*(_QWORD *)a5 + 16 * v9) = v33;
    }
    v9 = *(_DWORD *)(a5 + 12) + 1;
    *(_DWORD *)(a5 + 12) = v9;
    ++v10;
    v11 += 32;
  }
}

uint64_t *WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::~HashTable(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  int32x4_t v16;

  v9 = *a1;
  if (*a1)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = v9 + 40;
      v12 = (int32x4_t)xmmword_199123080;
      do
      {
        if (*(_BYTE *)(v11 - 40)
          || *(unsigned __int8 *)(v11 - 39) != 159
          || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v11 - 36), v12)))) & 1) != 0
          || (*(_BYTE *)(v11 - 38) & 0xF) != 0
          || *(_DWORD *)(v11 - 20))
        {
          v13 = *(_QWORD *)(v11 - 16);
          if (v11 != v13 && v13 != 0)
          {
            *(_QWORD *)(v11 - 16) = 0;
            *(_DWORD *)(v11 - 8) = 0;
            v16 = v12;
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
            v12 = v16;
          }
        }
        v11 += 48;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

BOOL WTF::IndexSet<JSC::B3::Value *>::add(WTF::BitVector *this, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF::BitVector *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  v3 = a2;
  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v5 = 63;
  else
    v5 = *(_QWORD *)(2 * v4);
  if (v5 <= a2)
  {
    WTF::BitVector::resizeOutOfLine(this, a2 + 1, 0);
    v4 = *(_QWORD *)this;
  }
  if (v4 >= 0)
    v6 = (WTF::BitVector *)(2 * v4 + 8);
  else
    v6 = this;
  v7 = (v3 >> 3) & 0x1FFFFFF8;
  v8 = *(_QWORD *)((char *)v6 + v7);
  result = (v8 & (1 << v3)) == 0;
  *(_QWORD *)((char *)v6 + v7) = v8 | (1 << v3);
  return result;
}

_QWORD *WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x21)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Value *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x21)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t JSC::B3::`anonymous namespace'::DoubleToFloatReduction::attemptTwoOperandsSimplify(JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *this, JSC::B3::Value *a2, unsigned int a3, JSC::B3::Value **a4)
{
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  int v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  float v24;
  float v25;
  unint64_t v26;
  JSC::B3::Value *v27;

  v8 = *(JSC::B3::Value **)JSC::B3::Value::child(a2, 0);
  v9 = *(JSC::B3::Value **)JSC::B3::Value::child(a2, 1u);
  v27 = v8;
  v10 = *((_WORD *)v8 + 6);
  if (v10 == 49)
    goto LABEL_8;
  if ((*((_WORD *)v8 + 6) & 0xFFF) == 5)
  {
    v16 = *((double *)v8 + 5);
    if (COERCE__INT64(v16) != *((_QWORD *)v8 + 5))
      return 0;
    goto LABEL_8;
  }
  if (v10 == 153)
  {
    v13 = *((_DWORD *)v8 + 4);
    if (v13 == 4)
    {
      if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)this + 2, (uint64_t)&v27) & 1) != 0)
        return 0;
    }
    else if (v13 != 3)
    {
      return 0;
    }
LABEL_8:
    v27 = v9;
    v14 = *((_WORD *)v9 + 6);
    if (v14 != 49)
    {
      if ((*((_WORD *)v9 + 6) & 0xFFF) == 5)
      {
        v17 = *((double *)v9 + 5);
        if (COERCE__INT64(v17) != *((_QWORD *)v9 + 5))
          return 0;
      }
      else
      {
        if (v14 != 153)
          return 0;
        v15 = *((_DWORD *)v9 + 4);
        if (v15 == 4)
        {
          if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)this + 2, (uint64_t)&v27) & 1) != 0)
            return 0;
        }
        else if (v15 != 3)
        {
          return 0;
        }
      }
    }
    if ((*((_WORD *)v8 + 6) & 0xFFF) == 5 && (*((_WORD *)v9 + 6) & 0xFFF) == 5)
      return 0;
    v18 = (char *)this + 24;
    v19 = *((_QWORD *)this + 3);
    v20 = *((unsigned int *)a2 + 2);
    if (v19 < 0)
      v21 = 63;
    else
      v21 = *(_QWORD *)(2 * v19);
    if (v21 <= v20)
    {
      v26 = *((unsigned int *)a2 + 2);
      WTF::BitVector::resizeOutOfLine((JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *)((char *)this + 24), v20 + 1, 0);
      v20 = v26;
      v18 = (char *)this + 24;
      v19 = *((_QWORD *)this + 3);
    }
    if (v19 >= 0)
      v18 = (char *)(2 * v19 + 8);
    *(_QWORD *)&v18[(v20 >> 3) & 0x1FFFFFF8] |= 1 << v20;
    v22 = *((_WORD *)v8 + 6);
    if (v22 == 49)
    {
      v8 = *(JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
    }
    else if ((*((_WORD *)v8 + 6) & 0xFFF) == 5)
    {
      v24 = *((double *)v8 + 5);
      v8 = JSC::B3::InsertionSet::insert<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a4, a3, *((_QWORD *)v8 + 3), v24);
    }
    else
    {
      if (v22 != 153)
        goto LABEL_46;
      if (*((_DWORD *)v8 + 4) == 4)
      {
        *((_DWORD *)v8 + 4) = 3;
        WTF::IndexSet<JSC::B3::Value *>::add((JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *)((char *)this + 32), *((_DWORD *)v8 + 2));
      }
    }
    *(_QWORD *)JSC::B3::Value::child(a2, 0) = v8;
    v23 = *((_WORD *)v9 + 6);
    if (v23 == 49)
    {
      v9 = *(JSC::B3::Value **)JSC::B3::Value::child(v9, 0);
LABEL_32:
      v11 = 1;
      *(_QWORD *)JSC::B3::Value::child(a2, 1u) = v9;
      return v11;
    }
    if ((*((_WORD *)v9 + 6) & 0xFFF) == 5)
    {
      v25 = *((double *)v9 + 5);
      v9 = JSC::B3::InsertionSet::insert<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a4, a3, *((_QWORD *)v9 + 3), v25);
      goto LABEL_32;
    }
    if (v23 == 153)
    {
      if (*((_DWORD *)v9 + 4) == 4)
      {
        *((_DWORD *)v9 + 4) = 3;
        WTF::IndexSet<JSC::B3::Value *>::add((JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *)((char *)this + 32), *((_DWORD *)v9 + 2));
      }
      goto LABEL_32;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x197FF997CLL);
  }
  return 0;
}

uint64_t JSC::B3::`anonymous namespace'::DoubleToFloatReduction::canBeTransformedToFloat(JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *this, JSC::B3::Value *a2)
{
  int v2;
  int v4;
  float v5;
  JSC::B3::Value *v6;

  v6 = a2;
  v2 = *((_WORD *)a2 + 6);
  if (v2 == 49)
    return 1;
  if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
  {
    v5 = *((double *)a2 + 5);
    return COERCE__INT64(v5) == *((_QWORD *)a2 + 5);
  }
  else if (v2 == 153)
  {
    v4 = *((_DWORD *)a2 + 4);
    if (v4 == 4)
      return WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)this + 2, (uint64_t)&v6) ^ 1;
    else
      return v4 == 3;
  }
  else
  {
    return 0;
  }
}

uint64_t JSC::B3::`anonymous namespace'::DoubleToFloatReduction::transformToFloat(JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *this, JSC::B3::Value *a2, unsigned int a3, JSC::B3::Value **a4)
{
  JSC::B3::Value *v4;
  int v5;
  uint64_t result;
  float v7;

  v4 = a2;
  v5 = *((_WORD *)a2 + 6);
  if (v5 == 49)
    return *(_QWORD *)JSC::B3::Value::child(a2, 0);
  if ((*((_WORD *)a2 + 6) & 0xFFF) == 5)
  {
    v7 = *((double *)a2 + 5);
    return (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a4, a3, *((_QWORD *)a2 + 3), v7);
  }
  else
  {
    if (v5 == 153)
    {
      if (*((_DWORD *)a2 + 4) == 4)
      {
        *((_DWORD *)a2 + 4) = 3;
        WTF::IndexSet<JSC::B3::Value *>::add((JSC::B3::_anonymous_namespace_::DoubleToFloatReduction *)((char *)this + 32), *((_DWORD *)a2 + 2));
      }
      return (uint64_t)v4;
    }
    result = 253;
    __break(0xC471u);
  }
  return result;
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(JSC::B3::Value **a1, uint64_t a2, uint64_t a3, float a4)
{
  JSC::B3::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(*a1, a3, a4);
  return JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)a1, a2, v6, v7, v8, v9, v10, v11);
}

void JSC::B3::`anonymous namespace'::ReduceStrength::simplifyCFG(JSC::B3::_anonymous_namespace_::ReduceStrength *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t *v17;
  WTF *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t j;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t i;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void *__src;
  void *v137;
  int v138;
  void *v139;
  void *v140;
  char **v141;
  void *v142;
  _QWORD v143[3];
  unint64_t v144;
  WTF *v145;
  int v146;
  unsigned int v147;

  if (!*(_DWORD *)(*(_QWORD *)this + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x197FFA734);
  }
  JSC::B3::blocksInPostOrder<JSC::B3::BasicBlock>(**(unsigned int ***)(*(_QWORD *)this + 48), a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v145);
  v16 = v145;
  if (v147)
  {
    v17 = g_config;
    v18 = (WTF *)((char *)v145 + 8 * v147);
    while (1)
    {
      v19 = *(_QWORD *)v16;
      if (*((_BYTE *)v17 + 817))
      {
        v20 = *(unsigned int *)(*(_QWORD *)this + 60);
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = *(_QWORD *)(*(_QWORD *)this + 48);
          while (!*(_QWORD *)(v22 + 8 * v21))
          {
            if (v20 == ++v21)
              goto LABEL_11;
          }
          if ((_DWORD)v20 != (_DWORD)v21)
          {
            v21 = v21;
            do
            {
              if (v20 <= v21)
              {
                __break(0xC471u);
                JUMPOUT(0x197FFA6FCLL);
              }
              v129 = v17;
              v130 = *(_QWORD *)(v22 + 8 * v21);
              v131 = *(unsigned int *)(v130 + 68);
              if ((_DWORD)v131)
              {
                for (i = 0; i != v131; ++i)
                {
                  v133 = *(_QWORD *)(*(_QWORD *)(v130 + 56) + 16 * i);
                  v134 = *(unsigned int *)(v133 + 36);
                  if (!(_DWORD)v134)
                  {
LABEL_208:
                    __break(0xC471u);
                    JUMPOUT(0x197FFA6ECLL);
                  }
                  v135 = *(_QWORD **)(v133 + 24);
                  while (*v135 != v130)
                  {
                    ++v135;
                    if (!--v134)
                      goto LABEL_208;
                  }
                }
              }
              if (v20 > ++v21)
              {
                while (!*(_QWORD *)(v22 + 8 * v21))
                {
                  ++v21;
                  v17 = v129;
                  if (v20 == v21)
                    goto LABEL_11;
                }
                v21 = v21;
              }
              v17 = v129;
            }
            while (v20 != v21);
          }
        }
      }
LABEL_11:
      v23 = *(unsigned int *)(v19 + 68);
      if (!(_DWORD)v23)
        goto LABEL_30;
      v24 = 0;
      v25 = (uint64_t **)(v19 + 56);
      do
      {
        if (v24 >= *(unsigned int *)(v19 + 68))
        {
          __break(0xC471u);
          JUMPOUT(0x197FFA610);
        }
        v26 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v24);
        v27 = *v26;
        if (*v26 != v19 && *(_DWORD *)(v27 + 20) == 1 && *(unsigned __int8 *)(**(_QWORD **)(v27 + 8) + 12) == 154)
        {
          if (!*(_DWORD *)(v27 + 68))
          {
            __break(0xC471u);
            JUMPOUT(0x197FFA6CCLL);
          }
          v44 = **(_QWORD **)(v27 + 56);
          if (v44 != v27)
          {
            v143[0] = v19;
            v45 = (_QWORD *)(v44 + 24);
            v46 = *(unsigned int *)(v44 + 36);
            if ((_DWORD)v46)
            {
              v28 = (_QWORD *)*v45;
              v29 = *(unsigned int *)(v44 + 36);
              while (*v28 != v19)
              {
                ++v28;
                if (!--v29)
                  goto LABEL_22;
              }
            }
            else
            {
LABEL_22:
              if ((_DWORD)v46 == *(_DWORD *)(v44 + 32))
              {
                v121 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)v143);
                v46 = *(unsigned int *)(v44 + 36);
                *(_QWORD *)(*(_QWORD *)(v44 + 24) + 8 * v46) = *v121;
              }
              else
              {
                *(_QWORD *)(*v45 + 8 * v46) = v19;
              }
              *(_DWORD *)(v44 + 36) = v46 + 1;
            }
            *v26 = v44;
            *((_BYTE *)this + 433) = 1;
          }
        }
        ++v24;
      }
      while (v24 != v23);
      v30 = *(unsigned int *)(v19 + 68);
      if (v30 <= 1)
        goto LABEL_27;
      v32 = *(unsigned int *)(v19 + 20);
      if (!(_DWORD)v32)
      {
        __break(0xC471u);
        JUMPOUT(0x197FFA6F4);
      }
      v33 = 0;
      v34 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v32 - 8);
      v143[0] = 0;
      v35 = *(_WORD *)(v34 + 12);
      if (v35 > 0x3Eu)
        break;
      if (v35 == 9)
        goto LABEL_27;
      if (v35 == 10)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        if (v35 - 17 >= 4)
        {
LABEL_37:
          v38 = 0;
          v33 = 0;
          v36 = 0;
          v37 = 0;
          if (v35 - 63 < 0x10)
            goto LABEL_48;
        }
      }
LABEL_38:
      if (!(v33 | v36) && LODWORD(v143[0]) == HIDWORD(v143[0]) && !v37 && !v38)
      {
        v39 = *v25 + 2;
        v40 = **v25;
        v41 = v30 - 1;
        do
        {
          if (*v39 != v40)
            goto LABEL_27;
          v39 += 2;
          --v41;
        }
        while (v41);
        v104 = v17;
        v105 = *(_QWORD *)(v34 + 32);
        v106 = *(_DWORD *)(v34 + 8);
        (**(void (***)(uint64_t))v34)(v34);
        *(_QWORD *)v34 = off_1E357F5F0;
        *(_WORD *)(v34 + 12) = 154;
        *(_DWORD *)(v34 + 16) = 0;
        *(_BYTE *)(v34 + 20) = 0;
        *(_DWORD *)(v34 + 8) = v106;
        *(_QWORD *)(v34 + 32) = v105;
        if (*(_DWORD *)(v19 + 68))
        {
          v108 = *v25;
        }
        else if (*(_DWORD *)(v19 + 64))
        {
          v107 = 0;
          v108 = *v25;
LABEL_137:
          v109 = 16 * v107;
          do
          {
            v110 = v109;
            v111 = (char *)v108 + v109;
            *(_QWORD *)v111 = 0;
            v111[8] = 0;
            v109 = v110 + 16;
          }
          while (v110);
        }
        else
        {
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19 + 56, (void *)1, v10, v11, v12, v13, v14, v15);
          v107 = *(unsigned int *)(v19 + 68);
          v108 = *(uint64_t **)(v19 + 56);
          if ((_DWORD)v107 != 1)
            goto LABEL_137;
        }
        LODWORD(v30) = 1;
        *(_DWORD *)(v19 + 68) = 1;
        *v108 = v40;
        *((_BYTE *)v108 + 8) = 0;
        *((_BYTE *)this + 433) = 1;
        v17 = v104;
      }
LABEL_27:
      if ((_DWORD)v30 != 1)
        goto LABEL_30;
      v31 = **(_QWORD **)(v19 + 56);
      if (v31 == v19 || *(_DWORD *)(v31 + 36) != 1)
        goto LABEL_30;
      if (**(_QWORD **)(v31 + 24) != v19)
      {
        __break(0xC471u);
        JUMPOUT(0x197FFA500);
      }
      v48 = *(unsigned int *)(v19 + 20);
      if (!(_DWORD)v48)
      {
        __break(0xC471u);
        JUMPOUT(0x197FFA72CLL);
      }
      v49 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v48 - 8);
      *(_DWORD *)(v19 + 20) = v48 - 1;
      v50 = *(void **)(v49 + 24);
      JSC::B3::Value::effects(v49, (uint64_t)v143);
      if (!LOBYTE(v143[0]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FFA520);
      }
      v57 = *(_QWORD *)this;
      v58 = *(unsigned int *)(v49 + 8);
      v59 = *(_QWORD *)(*(_QWORD *)this + 64);
      if (*(_QWORD *)(v59 + 8 * v58) != v49)
      {
        __break(0xC471u);
        JUMPOUT(0x197FFA540);
      }
      v139 = v50;
      v60 = *(unsigned int *)(v57 + 92);
      if ((_DWORD)v60 == *(_DWORD *)(v57 + 88))
      {
        v112 = v60 + (v60 >> 2);
        if (v112 >= 0x10)
          v113 = v112 + 1;
        else
          v113 = 16;
        if (v113 <= v60 + 1)
          v113 = v60 + 1;
        if (v113 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197FFA71CLL);
        }
        v142 = *(void **)(v57 + 80);
        v138 = v113;
        v114 = (void *)WTF::fastMalloc((WTF *)(8 * v113));
        *(_DWORD *)(v57 + 88) = v138;
        *(_QWORD *)(v57 + 80) = v114;
        memcpy(v114, v142, 8 * v60);
        if (v142)
        {
          if (*(void **)(v57 + 80) == v142)
          {
            *(_QWORD *)(v57 + 80) = 0;
            *(_DWORD *)(v57 + 88) = 0;
          }
          WTF::fastFree((unint64_t)v142, v115, v51, v52, v53, v54, v55, v56);
        }
        v60 = *(unsigned int *)(v57 + 92);
        *(_QWORD *)(*(_QWORD *)(v57 + 80) + 8 * v60) = *(unsigned int *)(v49 + 8);
        v59 = *(_QWORD *)(v57 + 64);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v57 + 80) + 8 * v60) = v58;
      }
      *(_DWORD *)(v57 + 92) = v60 + 1;
      v61 = *(unsigned int *)(v49 + 8);
      v62 = *(_QWORD *)(v59 + 8 * v61);
      *(_QWORD *)(v59 + 8 * v61) = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v63 = *(const void **)(v31 + 8);
      v141 = (char **)(v31 + 8);
      v64 = *(unsigned int *)(v31 + 20);
      if ((_DWORD)v64)
      {
        v65 = *(unsigned int *)(v19 + 16);
        v66 = *(unsigned int *)(v19 + 20);
        v67 = v66 + v64;
        if (v66 + v64 > v65)
        {
          v137 = *(void **)(v31 + 8);
          v87 = v65 + (v65 >> 2);
          if (v87 >= 0x10)
            v88 = v87 + 1;
          else
            v88 = 16;
          if (v88 <= v67)
            v89 = v66 + v64;
          else
            v89 = v88;
          if (v89 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197FFA714);
          }
          __src = *(void **)(v19 + 8);
          v90 = (void *)WTF::fastMalloc((WTF *)(8 * v89));
          *(_DWORD *)(v19 + 16) = v89;
          *(_QWORD *)(v19 + 8) = v90;
          memcpy(v90, __src, 8 * v66);
          v17 = g_config;
          v63 = v137;
          if (__src)
          {
            if (*(void **)(v19 + 8) == __src)
            {
              *(_QWORD *)(v19 + 8) = 0;
              *(_DWORD *)(v19 + 16) = 0;
            }
            WTF::fastFree((unint64_t)__src, v137, v91, v92, v93, v94, v95, v96);
            v63 = v137;
          }
        }
        v68 = *(unsigned int *)(v19 + 20);
        if (v67 < v68)
        {
          __break(0xC471u);
          JUMPOUT(0x197FFA704);
        }
        memcpy((void *)(*(_QWORD *)(v19 + 8) + 8 * v68), v63, 8 * v64);
        *(_DWORD *)(v19 + 20) = v67;
      }
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v19 + 56, (const void **)(v31 + 56), v51, v52, v53, v54, v55, v56);
      *(_DWORD *)(v31 + 20) = 0;
      v69 = *(_QWORD *)this;
      v70 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v70 = off_1E357F5F0;
      *(_DWORD *)(v70 + 8) = -1;
      *(_WORD *)(v70 + 12) = 159;
      *(_DWORD *)(v70 + 16) = 0;
      *(_BYTE *)(v70 + 20) = 0;
      *(_QWORD *)(v70 + 24) = v139;
      *(_QWORD *)(v70 + 32) = 0;
      v71 = *(unsigned int *)(v69 + 92);
      if ((_DWORD)v71)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(v69 + 80) + 8 * v71 - 8);
        *(_DWORD *)(v69 + 92) = v71 - 1;
        v73 = *(_QWORD *)(v69 + 64);
      }
      else
      {
        v72 = *(unsigned int *)(v69 + 76);
        if ((_DWORD)v72 == *(_DWORD *)(v69 + 72))
        {
          v116 = v72 + (v72 >> 2);
          if (v116 >= 0x10)
            v117 = v116 + 1;
          else
            v117 = 16;
          if (v117 <= v72 + 1)
            v118 = v72 + 1;
          else
            v118 = v117;
          if (v118 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197FFA724);
          }
          v140 = *(void **)(v69 + 64);
          v119 = (void *)WTF::fastMalloc((WTF *)(8 * v118));
          *(_DWORD *)(v69 + 72) = v118;
          *(_QWORD *)(v69 + 64) = v119;
          memcpy(v119, v140, 8 * v72);
          v17 = g_config;
          if (v140)
          {
            if (*(void **)(v69 + 64) == v140)
            {
              *(_QWORD *)(v69 + 64) = 0;
              *(_DWORD *)(v69 + 72) = 0;
            }
            WTF::fastFree((unint64_t)v140, v9, v10, v11, v12, v13, v14, v15);
          }
          v120 = *(unsigned int *)(v69 + 76);
          v73 = *(_QWORD *)(v69 + 64);
          *(_QWORD *)(v73 + 8 * v120) = 0;
          *(_DWORD *)(v69 + 76) = v120 + 1;
        }
        else
        {
          v73 = *(_QWORD *)(v69 + 64);
          *(_QWORD *)(v73 + 8 * v72) = 0;
          *(_DWORD *)(v69 + 76) = v72 + 1;
        }
      }
      *(_DWORD *)(v70 + 8) = v72;
      *(_QWORD *)(v73 + 8 * v72) = v70;
      v143[0] = v70;
      v74 = *(unsigned int *)(v31 + 20);
      if ((_DWORD)v74 == *(_DWORD *)(v31 + 16))
      {
        v97 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v141, v74 + 1, (unint64_t)v143);
        v74 = *(unsigned int *)(v31 + 20);
        *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v74) = *(_QWORD *)v97;
        v70 = v143[0];
      }
      else
      {
        *(_QWORD *)&(*v141)[8 * v74] = v70;
      }
      *(_DWORD *)(v31 + 20) = v74 + 1;
      *(_QWORD *)(v70 + 32) = v31;
      if (*(_DWORD *)(v31 + 64))
      {
        if (*(_DWORD *)(v31 + 68))
          *(_DWORD *)(v31 + 68) = 0;
        v75 = *(_QWORD *)(v31 + 56);
        if (v31 + 72 != v75 && v75)
        {
          *(_QWORD *)(v31 + 56) = 0;
          *(_DWORD *)(v31 + 64) = 0;
          WTF::fastFree(v75, v9, v10, v11, v12, v13, v14, v15);
          v75 = *(_QWORD *)(v31 + 56);
        }
        if (!v75)
        {
          *(_QWORD *)(v31 + 56) = v31 + 72;
          *(_DWORD *)(v31 + 64) = 2;
        }
      }
      v76 = *(unsigned int *)(v19 + 68);
      if ((_DWORD)v76)
      {
        for (j = 0; j != v76; ++j)
        {
          if (j >= *(unsigned int *)(v19 + 68))
          {
            __break(0xC471u);
            JUMPOUT(0x197FFA70CLL);
          }
          v78 = (*v25)[2 * j];
          v79 = *(unsigned int *)(v78 + 36);
          if ((_DWORD)v79)
          {
            v80 = (_QWORD *)(v78 + 24);
            v81 = *(_QWORD **)(v78 + 24);
            if (*v81 == v31)
            {
              v82 = 0;
LABEL_94:
              v81[v82] = v81[v79 - 1];
              v79 = (v79 - 1);
              *(_DWORD *)(v78 + 36) = v79;
            }
            else
            {
              v82 = 0;
              while (v79 - 1 != v82)
              {
                v83 = v81[++v82];
                if (v83 == v31)
                  goto LABEL_94;
              }
            }
            LODWORD(v84) = v79;
            v143[0] = v19;
            if ((_DWORD)v79)
            {
              v85 = 0;
              while (*(_QWORD *)(*v80 + 8 * v85) != v19)
              {
                if (v79 == ++v85)
                  goto LABEL_99;
              }
              continue;
            }
            v79 = 0;
          }
          else
          {
            v79 = 0;
            LODWORD(v84) = 0;
            v143[0] = v19;
            v80 = (_QWORD *)(v78 + 24);
          }
LABEL_99:
          if ((_DWORD)v84 == *(_DWORD *)(v78 + 32))
          {
            v122 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v79 + 1, (unint64_t)v143);
            v84 = *(unsigned int *)(v78 + 36);
            *(_QWORD *)(*(_QWORD *)(v78 + 24) + 8 * v84) = *v122;
          }
          else
          {
            *(_QWORD *)(*v80 + 8 * v79) = v19;
          }
          *(_DWORD *)(v78 + 36) = v84 + 1;
        }
      }
      *((_BYTE *)this + 433) = 1;
LABEL_30:
      v16 = (WTF *)((char *)v16 + 8);
      if (v16 == v18)
      {
        v16 = v145;
        goto LABEL_121;
      }
    }
    v36 = 0;
    v37 = 0;
    v38 = 0;
    switch(*(_WORD *)(v34 + 12))
    {
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
        v43 = (unint64_t *)(v34 + 52);
        v42 = *(_DWORD *)(v34 + 52);
        v144 = *(_QWORD *)(v34 + 44);
        if (v42 == *(_DWORD *)(v34 + 56))
          goto LABEL_47;
        v127 = v34;
        v128 = v143;
        goto LABEL_186;
      case 'D':
      case 'E':
      case 'F':
        v43 = (unint64_t *)(v34 + 52);
        v86 = *(_DWORD *)(v34 + 52);
        v143[0] = *(_QWORD *)(v34 + 44);
        if (v86 == *(_DWORD *)(v34 + 56))
        {
LABEL_47:
          v38 = 0;
        }
        else
        {
          v127 = v34;
          v128 = &v144;
LABEL_186:
          *v128 = *v43;
LABEL_187:
          v38 = 1;
LABEL_188:
          v34 = v127;
        }
        break;
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
        v124 = *(_DWORD *)(v34 + 44);
        LODWORD(v123) = *(_DWORD *)(v34 + 48);
        v127 = v34;
        if (v124 == (_DWORD)v123)
        {
          v125 = *(_QWORD *)(v34 + 52);
          v144 = v125;
          v126 = HIDWORD(v125);
          v123 = HIDWORD(v125);
        }
        else
        {
          LODWORD(v125) = *(_DWORD *)(v34 + 52);
          LODWORD(v126) = *(_DWORD *)(v34 + 56);
          if ((_DWORD)v125 == (_DWORD)v126)
          {
            v144 = *(_QWORD *)(v34 + 44);
            v123 = HIDWORD(v144);
            LODWORD(v126) = v125;
            LODWORD(v125) = v144;
          }
          else
          {
            if (v125 >= v124)
              v125 = v124;
            else
              v125 = v125;
            if (v123 <= v126)
              v123 = v126;
            else
              v123 = v123;
            if ((_DWORD)v125 == (_DWORD)v123)
            {
              v123 = 0;
              LODWORD(v125) = 0;
            }
            else
            {
              v144 = v125 | (v123 << 32);
            }
          }
        }
        v143[0] = v125 | (v123 << 32);
        if (*(_DWORD *)(v34 + 52) != (_DWORD)v126)
          goto LABEL_187;
        v38 = 0;
        goto LABEL_188;
      case 'O':
      case 'T':
        goto LABEL_37;
      case 'P':
        goto LABEL_38;
      case 'Q':
        v33 = 0;
        v36 = 0;
        v37 = 0;
        if ((v35 & 0xFFF) == 0x51)
          v101 = v34;
        else
          v101 = 0;
        v103 = *(_QWORD *)(v101 + 40);
        v102 = *(_QWORD *)(v101 + 48);
        v144 = v103;
        v143[0] = v102;
        v38 = 1;
        goto LABEL_38;
      case 'R':
        if ((v35 & 0xFFF) == 0x52)
          v98 = v34;
        else
          v98 = 0;
        v33 = *(unsigned __int8 *)(v98 + 41);
        v36 = *(unsigned __int8 *)(v98 + 43);
        v37 = *(unsigned __int8 *)(v98 + 46);
        v38 = *(unsigned __int8 *)(v98 + 47);
        v100 = *(_QWORD *)(v98 + 48);
        v99 = *(_QWORD *)(v98 + 56);
        v143[0] = v100;
        v144 = v99;
        goto LABEL_38;
      case 'S':
        if (v35 == 83)
          v47 = v34;
        else
          v47 = 0;
        v33 = *(unsigned __int8 *)(v47 + 113);
        v36 = *(unsigned __int8 *)(v47 + 115);
        v37 = *(unsigned __int8 *)(v47 + 118);
        v38 = *(unsigned __int8 *)(v47 + 119);
        v143[0] = *(_QWORD *)(v47 + 120);
        goto LABEL_38;
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
        goto LABEL_27;
      default:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        if (v35 - 153 < 7)
          goto LABEL_38;
        if (v35 == 152)
          goto LABEL_27;
        goto LABEL_37;
    }
LABEL_48:
    if ((v35 & 0x200) != 0)
      goto LABEL_27;
    v33 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_38;
  }
LABEL_121:
  if (v16)
  {
    v145 = 0;
    v146 = 0;
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::B3::`anonymous namespace'::ReduceStrength::reduceValueStrength(JSC::B3::_anonymous_namespace_::ReduceStrength *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v11;
  JSC::B3::Value **v12;
  uint64_t v13;
  JSC::B3::Value **v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int i;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int j;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  BOOL v42;
  _BOOL4 v43;
  BOOL v44;
  char *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  char *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  char *v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __int16 v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  __int16 v90;
  JSC::B3::Value *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t StatusReg;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  _OWORD *impl_casual_case;
  uint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  unsigned __int8 **v127;
  unsigned __int8 *v128;
  int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  _QWORD *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v150;
  _BYTE *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  JSC::B3::Value *v169;
  char *v170;
  JSC::B3::Value *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  int v175;
  __int16 v176;
  uint64_t v177;
  uint64_t v178;
  JSC::B3::Procedure *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  int v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  JSC::B3::Value *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  int v202;
  int v203;
  JSC::B3::Value *v204;
  int v205;
  JSC::B3::Value *v206;
  JSC::B3::Value *v207;
  JSC::B3::Value *v208;
  int v209;
  uint64_t v210;
  int v211;
  __int16 v212;
  unint64_t v213;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  unsigned __int8 *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  JSC::B3::Procedure *v245;
  uint64_t v246;
  uint64_t v247;
  JSC::B3::Value *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char **v253;
  uint64_t v254;
  uint64_t v255;
  JSC::B3::Procedure *v256;
  uint64_t v257;
  uint64_t v258;
  JSC::B3::Value *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  char **v264;
  char **v265;
  uint64_t v266;
  JSC::B3::Value *v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int16 v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  JSC::B3::Procedure *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  JSC::B3::Procedure *v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  JSC::B3::Value *v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  char *v320;
  unsigned int v321;
  char v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  JSC::B3::Value *v328;
  JSC::B3::Procedure *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  __int16 v347;
  JSC::B3::Value **v348;
  JSC::B3::Procedure *v349;
  JSC::B3::Value *v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  JSC::B3::Value **v373;
  uint64_t v374;
  JSC::B3::Value **v375;
  uint64_t v376;
  uint64_t v377;
  JSC::B3::Procedure *v378;
  JSC::B3::Value **v379;
  _QWORD *v380;
  JSC::B3::Value *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  JSC::B3::Value *v388;
  uint64_t v389;
  JSC::B3::Value **v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  JSC::B3::Value *v396;
  uint64_t v397;
  unsigned int v398;
  JSC::B3::Value **v399;
  uint64_t inserted;
  uint64_t *v401;
  int v402;
  JSC::B3::Value **v403;
  JSC::B3::Value **v404;
  JSC::B3::Procedure *v405;
  JSC::B3::Value *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  JSC::B3::Value **v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  BOOL v425;
  BOOL v426;
  uint64_t v427;
  JSC::B3::Value **v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  JSC::B3::Value **v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  BOOL v437;
  BOOL v438;
  uint64_t v439;
  JSC::B3::Value **v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  JSC::B3::Value **v445;
  uint64_t v446;
  JSC::B3::Value **v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  BOOL v452;
  JSC::B3::Value *v453;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unsigned __int8 *v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  JSC::B3::Value *v472;
  unsigned __int8 *v473;
  _QWORD *v474;
  int v475;
  JSC::B3::Value **v476;
  JSC::B3::Value **v477;
  _BOOL4 v478;
  JSC::B3::Value **v479;
  uint64_t v480;
  uint64_t v481;
  JSC::B3::Procedure *v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  JSC::B3::Value **v490;
  uint64_t v491;
  BOOL v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  BOOL v498;
  int v499;
  JSC::B3::Value *v500;
  int v501;
  JSC::B3::Value *v502;
  unsigned int v503;
  int v504;
  JSC::B3::Value **v506;
  uint64_t v507;
  JSC::B3::Value **v508;
  uint64_t v509;
  uint64_t v510;
  JSC::B3::Value **v511;
  uint64_t v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  JSC::B3::Procedure *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  JSC::B3::Value *v532;
  int v533;
  unsigned int v534;
  uint64_t v535;
  JSC::B3::Procedure *v536;
  _QWORD *v537;
  JSC::B3::Value *v538;
  uint64_t v539;
  BOOL v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  JSC::B3::Value **v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  BOOL v550;
  BOOL v551;
  uint64_t v552;
  JSC::B3::Value **v553;
  uint64_t v554;
  _QWORD *v555;
  JSC::B3::Value **v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  BOOL v563;
  uint64_t v564;
  JSC::B3::Value **v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  char *v571;
  unsigned int v572;
  _DWORD *v573;
  uint64_t v574;
  int v575;
  __int16 v576;
  uint64_t v577;
  JSC::B3::Procedure *v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  JSC::B3::Value **v595;
  uint64_t v596;
  uint64_t v597;
  JSC::B3::Procedure *v598;
  JSC::B3::Value **v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  JSC::B3::Value *v607;
  JSC::B3::Value **v608;
  _QWORD *v609;
  uint64_t v610;
  JSC::B3::Procedure *v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  BOOL v622;
  BOOL v623;
  uint64_t v624;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v629;
  uint64_t v630;
  uint64_t v631;
  JSC::B3::Value *v632;
  unsigned int v633;
  BOOL v634;
  BOOL v635;
  BOOL v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t *v639;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v640;
  JSC::B3::Procedure *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  JSC::B3::Value *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  uint64_t v653;
  __int128 v654;
  uint64_t v655;
  JSC::B3::Procedure *v656;
  _QWORD *v657;
  JSC::B3::Value **v658;
  uint64_t v659;
  BOOL v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  uint64_t v668;
  JSC::B3::Procedure *v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  uint64_t v680;
  int8x8_t *v681;
  int v682;
  BOOL v683;
  JSC::B3::Value *v684;
  BOOL v685;
  uint64_t *v686;
  uint64_t v687;
  JSC::B3::Value *v688;
  uint64_t v689;
  JSC::B3::Value **v690;
  uint64_t v691;
  JSC::B3::Value *v692;
  unsigned int v693;
  JSC::B3::Value **v694;
  uint64_t v695;
  JSC::B3::Value **v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  JSC::B3::Value **v701;
  uint64_t v702;
  JSC::B3::Value **v703;
  uint64_t v704;
  JSC::B3::Value **v705;
  uint64_t v706;
  uint64_t v707;
  JSC::B3::Procedure *v708;
  JSC::B3::Value **v709;
  _QWORD *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t *v718;
  uint64_t v719;
  uint64_t v720;
  __int128 v721;
  JSC::B3::Value **v722;
  uint64_t v723;
  JSC::B3::Value *v724;
  unsigned int v725;
  uint64_t v726;
  JSC::B3::Procedure *v727;
  _QWORD *v728;
  _QWORD *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  JSC::B3::Value *v742;
  int v743;
  JSC::B3::Value *v744;
  int v745;
  JSC::B3::Value *v746;
  int v747;
  JSC::B3::Value *v748;
  JSC::B3::Value *v749;
  uint64_t v750;
  JSC::B3::Value **v751;
  uint64_t v752;
  uint64_t v753;
  JSC::B3::Value *v754;
  uint64_t v755;
  JSC::B3::Value **v756;
  uint64_t v757;
  uint64_t *v758;
  unsigned int v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int **v762;
  uint64_t v763;
  unsigned int *v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  JSC::B3::Value *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  JSC::B3::Value **v784;
  uint64_t v785;
  JSC::B3::Procedure *v786;
  _QWORD *v787;
  uint64_t v788;
  BOOL v789;
  JSC::B3::Value **v790;
  uint64_t v791;
  uint64_t v793;
  uint64_t v794;
  int v795;
  JSC::B3::Value **v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;
  BOOL v802;
  int8x8_t v803;
  uint8x8_t v804;
  int v805;
  int v806;
  JSC::B3::Value *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t *v822;
  uint64_t v823;
  uint64_t v824;
  __int128 v825;
  uint64_t *v826;
  int v827;
  _QWORD *v828;
  JSC::B3::Value **v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  _QWORD *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t *v843;
  uint64_t v844;
  uint64_t v845;
  __int128 v846;
  unsigned int v847;
  unsigned int *v848;
  unsigned int *v849;
  unsigned int v850;
  unsigned int v851;
  unsigned int *v852;
  unsigned int *v853;
  unsigned int v854;
  unsigned int v855;
  unsigned int *v856;
  unsigned int v857;
  unsigned int v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  unint64_t k;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int v866;
  void *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  JSC::B3::Value **v880;
  uint64_t v881;
  JSC::B3::Value **v882;
  uint64_t v883;
  JSC::B3::Value **v884;
  uint64_t v885;
  uint64_t *v886;
  uint64_t v887;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t *v899;
  uint64_t v900;
  uint64_t v901;
  __int128 v902;
  JSC::B3::Value **v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  BOOL v907;
  BOOL v908;
  uint64_t v909;
  JSC::B3::Value **v910;
  uint64_t v911;
  uint64_t *v912;
  uint64_t *v913;
  uint64_t v914;
  JSC::B3::Procedure *v915;
  JSC::B3::Value *v916;
  uint64_t v917;
  uint64_t v918;
  _QWORD *v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t *v927;
  uint64_t v928;
  uint64_t v929;
  __int128 v930;
  uint64_t v931;
  JSC::B3::Procedure *v932;
  JSC::B3::Value **v933;
  _QWORD *v934;
  JSC::B3::Value *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  JSC::B3::Value *v941;
  JSC::B3::Value **v942;
  uint64_t v943;
  uint64_t v944;
  BOOL v945;
  JSC::B3::Value *v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t *v958;
  uint64_t v959;
  uint64_t v960;
  __int128 v961;
  JSC::B3::Value **v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t *v969;
  uint64_t v970;
  uint64_t v971;
  __int128 v972;
  uint64_t *v973;
  uint64_t v974;
  uint64_t v975;
  __int128 v976;
  uint64_t v977;
  unsigned int v978;
  uint64_t v979;
  int v980;
  _QWORD *v981;
  uint64_t v982;
  BOOL v983;
  int v984;
  JSC::B3::Value *v985;
  JSC::B3::Value *v986;
  uint64_t v987;
  JSC::B3::Value **v988;
  uint64_t v989;
  uint64_t *v990;
  int v991;
  uint64_t v992;
  uint64_t *v993;
  uint64_t v994;
  uint64_t v995;
  __int128 v996;
  JSC::B3::Value *v997;
  uint64_t v998;
  uint64_t *v999;
  JSC::B3::Procedure *v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  __int128 v1012;
  int v1013;
  JSC::B3::Value **v1014;
  uint64_t v1015;
  JSC::B3::Value **v1017;
  JSC::B3::Value **v1018;
  JSC::B3::Value **v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  uint64_t v1023;
  uint64_t v1024;
  JSC::B3::Procedure *v1025;
  _QWORD *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  BOOL v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  BOOL v1038;
  uint64_t v1039;
  uint64_t v1040;
  int v1041;
  uint64_t v1042;
  int v1043;
  unsigned int v1044;
  unsigned int v1045;
  unsigned int v1046;
  unsigned int v1047;
  unsigned int v1048;
  unsigned int v1049;
  unsigned int v1050;
  unsigned int v1051;
  unsigned int v1052;
  unsigned int v1053;
  int v1054;
  uint64_t v1055;
  JSC::B3::Value *v1056;
  uint64_t v1057;
  uint64_t *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  _BYTE *v1063;
  uint64_t v1064;
  uint64_t casual;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  unint64_t v1072;
  uint64_t v1073;
  uint64_t *v1074;
  uint64_t v1075;
  uint64_t v1076;
  __int128 v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  JSC::B3::Value *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t *v1085;
  uint64_t v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  JSC::B3::Procedure *v1097;
  _QWORD *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  BOOL v1108;
  BOOL v1109;
  uint64_t v1110;
  _QWORD *v1111;
  JSC::B3::Value *v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v1122;
  uint64_t v1123;
  uint64_t v1124;
  JSC::B3::Value *v1125;
  unsigned int v1126;
  BOOL v1127;
  BOOL v1128;
  BOOL v1129;
  JSC::B3::Value *v1130;
  unsigned int v1131;
  JSC::B3::Value **v1132;
  uint64_t v1133;
  JSC::B3::Value **v1134;
  uint64_t v1135;
  uint64_t v1136;
  int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  JSC::B3::Procedure *v1141;
  JSC::B3::Value **v1142;
  _QWORD *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t *v1151;
  uint64_t v1152;
  uint64_t v1153;
  __int128 v1154;
  JSC::B3::Value **v1155;
  uint64_t v1156;
  uint64_t *v1157;
  uint64_t v1158;
  uint64_t v1159;
  __int128 v1160;
  JSC::B3::Value **v1161;
  uint64_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  JSC::B3::Value **v1166;
  uint64_t v1167;
  JSC::B3::Value **v1168;
  uint64_t *v1169;
  unint64_t v1170;
  unint64_t v1171;
  unint64_t v1172;
  JSC::B3::Procedure *v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  _DWORD *v1187;
  uint64_t *v1188;
  unsigned int v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  _DWORD *v1194;
  JSC::B3::Procedure *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  uint64_t v1206;
  char **v1207;
  uint64_t v1208;
  _DWORD *v1209;
  uint64_t v1210;
  uint64_t *v1211;
  unsigned int v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  JSC::B3::Procedure *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  char **v1229;
  uint64_t v1230;
  void *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  void *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  JSC::B3::Value **v1247;
  uint64_t v1248;
  uint64_t v1250;
  JSC::B3::Value **v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  unsigned int **v1263;
  uint64_t v1264;
  unsigned int *v1265;
  uint64_t *v1266;
  uint64_t v1267;
  JSC::B3::Value *v1268;
  uint64_t v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  unsigned int v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  JSC::B3::Procedure *v1283;
  JSC::B3::Value **v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t *v1293;
  uint64_t v1294;
  uint64_t v1295;
  __int128 v1296;
  JSC::B3::Value **v1297;
  uint64_t v1298;
  uint64_t v1299;
  JSC::B3::Procedure *v1300;
  _QWORD *v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  BOOL v1309;
  uint64_t v1310;
  uint64_t v1311;
  int v1312;
  BOOL v1313;
  uint64_t v1314;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v1319;
  uint64_t v1320;
  uint64_t v1321;
  JSC::B3::Value *v1322;
  unsigned int v1323;
  BOOL v1324;
  uint64_t v1325;
  JSC::B3::Value **v1326;
  uint64_t v1327;
  uint64_t v1328;
  int v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  unint64_t v1334;
  JSC::B3::Value **v1335;
  uint64_t v1336;
  unint64_t v1337;
  uint8x8_t v1338;
  __int32 v1339;
  uint8x8_t v1340;
  JSC::B3::Value *v1341;
  uint64_t v1342;
  uint64_t v1343;
  _QWORD *v1344;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v1345;
  int v1346;
  JSC::B3::Value *v1347;
  int v1348;
  JSC::B3::Value *v1349;
  JSC::B3::Value **v1350;
  uint64_t v1351;
  JSC::B3::Value **v1353;
  uint64_t v1354;
  uint64_t v1355;
  int v1356;
  BOOL v1357;
  uint64_t v1358;
  JSC::B3::Value *v1359;
  int v1360;
  uint64_t v1361;
  JSC::B3::Value **v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  uint64_t v1367;
  uint64_t v1368;
  int v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t *v1377;
  uint64_t v1378;
  uint64_t v1379;
  __int128 v1380;
  uint64_t v1381;
  int v1382;
  uint64_t v1383;
  int v1384;
  __int16 v1385;
  uint64_t v1386;
  BOOL v1387;
  uint64_t v1388;
  JSC::B3::Value **v1389;
  uint64_t v1390;
  JSC::B3::Value **v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  JSC::B3::Value **v1397;
  JSC::B3::Value **v1398;
  _QWORD *v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  uint64_t v1403;
  JSC::B3::Value **v1404;
  uint64_t v1405;
  uint64_t v1406;
  int v1407;
  uint64_t v1408;
  JSC::B3::Value *v1409;
  JSC::B3::Value **v1410;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v1411;
  JSC::B3::Value *v1412;
  int v1413;
  JSC::B3::Value *v1414;
  int v1415;
  __int16 v1416;
  _QWORD *v1417;
  double v1418;
  uint64_t v1419;
  JSC::B3::Value **v1420;
  uint64_t v1421;
  BOOL v1422;
  JSC::B3::Value **v1423;
  JSC::B3::Value **v1424;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v1425;
  uint64_t (*v1426)(void);
  uint64_t v1427;
  uint64_t v1428;
  __int16 v1429;
  float v1430;
  float v1431;
  uint64_t v1433;
  uint64_t *v1434;
  uint64_t v1435;
  uint64_t v1436;
  __int128 v1437;
  uint64_t v1438;
  int v1439;
  uint64_t v1440;
  int v1441;
  __int16 v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  double v1447;
  JSC::B3::Value **v1448;
  uint64_t v1449;
  char *v1450;
  char *v1451;
  char *v1452;
  char *v1453;
  char *v1454;
  unint64_t v1455;
  unint64_t v1456;
  unint64_t v1457;
  const void *v1458;
  void *v1459;
  void *v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t *v1463;
  uint64_t v1464;
  uint64_t v1465;
  __int128 v1466;
  unsigned int v1467;
  uint64_t v1468;
  JSC::B3::Value **v1469;
  uint64_t v1470;
  JSC::B3::Value **v1471;
  uint64_t v1472;
  JSC::B3::Value **v1473;
  uint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  unint64_t v1477;
  const void *v1478;
  void *v1479;
  void *v1480;
  uint64_t v1481;
  uint64_t v1482;
  _QWORD *v1483;
  int v1484;
  int v1485;
  JSC::B3::Value *v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t *v1490;
  uint64_t v1491;
  uint64_t v1492;
  BOOL v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  __int16 v1497;
  int v1498;
  uint64_t v1499;
  uint64_t v1500;
  JSC::B3::Value **v1501;
  uint64_t v1502;
  JSC::B3::Value **v1503;
  uint64_t v1504;
  uint64_t v1505;
  int v1506;
  uint64_t v1507;
  uint64_t v1508;
  JSC::B3::Procedure *v1509;
  _QWORD *v1510;
  uint64_t v1511;
  uint64_t v1512;
  BOOL v1513;
  uint64_t v1514;
  uint64_t v1515;
  int v1516;
  BOOL v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t *v1522;
  uint64_t v1523;
  uint64_t v1524;
  __int128 v1525;
  unint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  const void *v1529;
  void *v1530;
  void *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unsigned int v1537;
  uint64_t *v1538;
  uint64_t v1539;
  uint64_t v1540;
  __int128 v1541;
  uint64_t v1542;
  JSC::B3::Value *v1543;
  uint64_t v1544;
  BOOL v1545;
  JSC::B3::Value *v1546;
  uint64_t *v1547;
  uint64_t v1548;
  uint64_t v1549;
  __int128 v1550;
  uint64_t v1551;
  JSC::B3::Procedure *v1552;
  _QWORD *v1553;
  uint64_t v1554;
  BOOL v1555;
  uint64_t v1556;
  uint64_t v1557;
  int v1558;
  BOOL v1559;
  uint64_t v1560;
  uint64_t v1561;
  __int16 v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  JSC::B3::Value *v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t *v1570;
  JSC::B3::Value *v1571;
  uint64_t *v1572;
  uint64_t v1573;
  JSC::B3::Value *v1574;
  JSC::B3::Value **v1575;
  JSC::B3::Value *v1576;
  unsigned int v1577;
  uint64_t v1578;
  uint64_t v1579;
  unsigned int v1580;
  uint64_t v1581;
  unint64_t *v1582;
  unint64_t v1583;
  unint64_t v1584;
  __int128 *v1585;
  uint64_t *v1586;
  uint64_t v1587;
  uint64_t v1588;
  __int128 v1589;
  JSC::B3::Value **v1590;
  uint64_t v1591;
  JSC::B3::Value **v1593;
  uint64_t v1594;
  uint64_t v1595;
  int v1596;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  int v1602;
  uint64_t v1603;
  unint64_t v1604;
  unint64_t v1605;
  unint64_t v1606;
  const void *v1607;
  void *v1608;
  void *v1609;
  uint64_t v1610;
  uint64_t v1611;
  unsigned int v1612;
  uint64_t v1613;
  uint64_t v1614;
  unsigned int **v1615;
  uint64_t v1616;
  unsigned int *v1617;
  uint64_t v1618;
  uint64_t v1619;
  JSC::B3::Value *v1620;
  uint64_t v1621;
  int v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  unsigned int v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  int v1635;
  uint64_t v1636;
  uint64_t v1637;
  __int16 v1638;
  BOOL v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  __int128 *v1643;
  uint64_t v1644;
  uint64_t v1645;
  int v1646;
  unint64_t v1647;
  JSC::B3::Value **v1648;
  uint64_t v1649;
  uint64_t v1650;
  int v1651;
  unint64_t v1652;
  unint64_t v1653;
  unint64_t v1654;
  JSC::B3::Value **v1655;
  uint64_t v1656;
  int v1657;
  unint64_t v1658;
  uint8x8_t v1659;
  __int32 v1660;
  uint8x8_t v1661;
  unint64_t v1662;
  BOOL v1663;
  BOOL v1664;
  BOOL v1665;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t *v1669;
  JSC::B3::Value *v1670;
  JSC::B3::Value *v1671;
  uint64_t v1672;
  JSC::B3::Value *v1673;
  uint64_t v1674;
  JSC::B3::Value **v1675;
  uint64_t v1676;
  uint64_t *v1677;
  uint64_t v1678;
  JSC::B3::Value *v1679;
  uint64_t *v1680;
  uint64_t v1681;
  uint64_t v1682;
  __int128 v1683;
  uint64_t v1684;
  JSC::B3::Procedure *v1685;
  uint64_t v1686;
  uint64_t v1687;
  unint64_t v1688;
  unint64_t v1689;
  unint64_t v1690;
  const void *v1691;
  void *v1692;
  void *v1693;
  uint64_t v1694;
  uint64_t v1695;
  __int128 *v1696;
  uint64_t v1697;
  __int128 *v1698;
  uint64_t v1699;
  JSC::B3::Value *v1700;
  uint64_t v1701;
  uint64_t *v1702;
  uint64_t v1703;
  uint64_t *v1704;
  uint64_t v1705;
  int v1706;
  uint64_t v1707;
  char **v1708;
  unint64_t v1709;
  unint64_t v1710;
  unint64_t v1711;
  const void *v1712;
  void *v1713;
  void *v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  JSC::B3::Value **v1721;
  uint64_t v1722;
  JSC::B3::Value **v1724;
  uint64_t v1725;
  uint64_t v1726;
  JSC::B3::Value *v1727;
  uint64_t v1728;
  BOOL v1729;
  JSC::B3::Value *v1730;
  unsigned int v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  unint64_t v1735;
  unint64_t v1736;
  unint64_t v1737;
  const void *v1738;
  void *v1739;
  void *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  unint64_t v1748;
  unint64_t v1749;
  unint64_t v1750;
  const void *v1751;
  void *v1752;
  void *v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  char **v1761;
  unint64_t v1762;
  unint64_t v1763;
  unint64_t v1764;
  const void *v1765;
  void *v1766;
  void *v1767;
  uint64_t v1768;
  unint64_t v1769;
  unint64_t v1770;
  unint64_t v1771;
  const void *v1772;
  void *v1773;
  void *v1774;
  uint64_t v1775;
  unint64_t v1776;
  unint64_t v1777;
  unint64_t v1778;
  const void *v1779;
  void *v1780;
  void *v1781;
  uint64_t v1782;
  uint64_t v1783;
  __int128 *v1784;
  __int128 *v1785;
  uint64_t v1786;
  JSC::B3::Value **v1787;
  uint64_t v1788;
  uint64_t v1789;
  int v1790;
  unint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  int v1794;
  unint64_t v1795;
  unint64_t v1796;
  unint64_t v1797;
  JSC::B3::Value **v1798;
  uint64_t v1799;
  int v1800;
  unint64_t v1801;
  uint8x8_t v1802;
  __int32 v1803;
  uint8x8_t v1804;
  unint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t *v1808;
  JSC::B3::Value *v1809;
  uint64_t v1810;
  uint64_t v1811;
  JSC::B3::Value *v1812;
  uint64_t v1813;
  JSC::B3::Value **v1814;
  uint64_t *v1815;
  JSC::B3::Value *v1816;
  JSC::B3::Value **v1817;
  unint64_t v1818;
  unint64_t v1819;
  const void *v1820;
  void *v1821;
  void *v1822;
  uint64_t v1823;
  uint64_t v1824;
  JSC::B3::Value *v1825;
  uint64_t v1826;
  JSC::B3::Value **v1827;
  uint64_t v1828;
  uint64_t *v1829;
  int v1830;
  JSC::B3::Value *v1831;
  uint64_t v1832;
  __int128 *v1833;
  __int128 *v1834;
  __int128 *v1835;
  uint64_t v1836;
  uint64_t v1837;
  int v1838;
  uint64_t v1839;
  BOOL v1840;
  int v1841;
  JSC::B3::Value *v1842;
  JSC::B3::Value **v1843;
  uint64_t v1844;
  JSC::B3::Value **v1846;
  JSC::B3::Value **v1847;
  uint64_t v1848;
  uint64_t v1849;
  int v1850;
  uint64_t *v1851;
  uint64_t v1852;
  uint64_t v1853;
  int v1854;
  uint64_t v1855;
  uint64_t v1856;
  __int128 *v1857;
  JSC::B3::Value *v1858;
  JSC::B3::Value **v1859;
  __int128 *v1860;
  __int128 *v1861;
  __int128 *v1862;
  uint64_t v1863;
  uint64_t v1864;
  int v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  unint64_t v1869;
  unint64_t v1870;
  unint64_t v1871;
  void *v1872;
  void *v1873;
  uint64_t v1874;
  uint64_t v1875;
  unsigned int v1876;
  JSC::B3::Value **v1877;
  unint64_t v1878;
  unint64_t v1879;
  unint64_t v1880;
  const void *v1881;
  void *v1882;
  void *v1883;
  uint64_t v1884;
  uint64_t v1885;
  JSC::B3::Value *v1886;
  char v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  JSC::B3::Value *v1893;
  uint64_t v1894;
  JSC::B3::Value **v1895;
  uint64_t v1896;
  uint64_t v1897;
  int v1898;
  uint64_t v1899;
  BOOL v1900;
  JSC::B3::Value **v1901;
  uint64_t v1902;
  JSC::B3::Value **v1904;
  JSC::B3::Value **v1905;
  uint64_t v1906;
  uint64_t v1907;
  int v1908;
  uint64_t v1909;
  uint64_t v1910;
  JSC::B3::Value **v1911;
  uint64_t *v1912;
  JSC::B3::Value *v1913;
  unsigned int v1914;
  unsigned int v1915;
  JSC::B3::Procedure *v1916;
  JSC::B3::Value *v1917;
  uint64_t v1918;
  JSC::B3::Value **v1919;
  uint64_t v1920;
  uint64_t v1921;
  int v1922;
  unint64_t v1923;
  __int128 *v1924;
  __int128 *v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t *v1929;
  int v1930;
  uint64_t v1931;
  uint64_t v1932;
  __int128 *v1933;
  __int128 *v1934;
  uint64_t v1935;
  uint64_t v1936;
  int v1937;
  uint64_t v1938;
  JSC::B3::Value **v1939;
  int v1940;
  unint64_t v1941;
  uint64_t v1943;
  uint64_t *v1944;
  uint64_t v1945;
  uint64_t v1946;
  JSC::B3::Value *v1947;
  __int128 *v1948;
  __int128 *v1949;
  JSC::B3::Value **v1950;
  uint64_t v1951;
  JSC::B3::Value *v1952;
  uint64_t v1953;
  JSC::B3::Value **v1954;
  uint64_t v1955;
  uint64_t *v1956;
  __int128 *v1957;
  JSC::B3::Value **v1958;
  JSC::B3::Value **v1959;
  JSC::B3::Value **v1960;
  uint64_t v1961;
  JSC::B3::Value **v1963;
  JSC::B3::Value **v1964;
  uint64_t v1965;
  uint64_t v1966;
  int v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  int v1971;
  JSC::B3::Value **v1972;
  uint64_t v1973;
  JSC::B3::Value **v1975;
  JSC::B3::Value **v1976;
  uint64_t v1977;
  uint64_t v1978;
  int v1979;
  JSC::B3::Value **v1980;
  uint64_t v1981;
  JSC::B3::Value **v1982;
  JSC::B3::Value **v1983;
  uint64_t v1984;
  __int128 *v1985;
  __int128 *v1986;
  __int128 *v1987;
  uint64_t v1988;
  JSC::B3::Value *v1989;
  float v1990;
  JSC::B3::Value **v1991;
  JSC::B3::Value **v1992;
  JSC::B3::Value **v1993;
  uint64_t v1994;
  JSC::B3::Value **v1996;
  uint64_t v1997;
  uint64_t v1999;
  JSC::B3::Value **v2000;
  JSC::B3::Value **v2001;
  uint64_t v2002;
  uint64_t v2003;
  int v2004;
  unint64_t v2006;
  JSC::B3::Value **v2007;
  uint64_t v2008;
  uint64_t v2009;
  int v2010;
  uint64_t v2011;
  JSC::B3::Value **v2012;
  JSC::B3::Value **v2013;
  uint64_t v2014;
  uint64_t v2015;
  int v2016;
  uint64_t v2017;
  JSC::B3::Value **v2018;
  int v2019;
  uint64_t *v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  JSC::B3::Value *v2034;
  uint64_t v2035;
  JSC::B3::Value **v2036;
  uint64_t v2037;
  JSC::B3::Value **v2038;
  uint64_t *v2039;
  uint64_t v2040;
  JSC::B3::Value *v2041;
  uint64_t *v2042;
  uint64_t v2043;
  uint64_t v2044;
  JSC::B3::Value **v2045;
  uint64_t v2046;
  uint64_t *v2047;
  uint64_t v2048;
  uint64_t v2049;
  unint64_t v2050;
  unint64_t v2051;
  JSC::B3::Value **v2052;
  uint64_t v2053;
  JSC::B3::Procedure *v2054;
  _QWORD *v2055;
  uint64_t v2056;
  JSC::B3::Procedure *v2057;
  JSC::B3::Value **v2058;
  _QWORD *v2059;
  JSC::B3::Value *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  JSC::B3::Value *v2066;
  JSC::B3::Value **v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  JSC::B3::Procedure *v2072;
  _QWORD *v2073;
  uint64_t v2074;
  JSC::B3::Procedure *v2075;
  JSC::B3::Value **v2076;
  _QWORD *v2077;
  JSC::B3::Value *v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  JSC::B3::Value *v2084;
  JSC::B3::Value **v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  JSC::B3::Value *v2089;
  uint64_t v2090;
  JSC::B3::Value **v2091;
  uint64_t v2092;
  JSC::B3::Procedure *v2093;
  _QWORD *v2094;
  JSC::B3::Value *v2095;
  JSC::B3::Value **v2096;
  JSC::B3::Value *v2097;
  uint64_t v2098;
  BOOL v2099;
  uint64_t *v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  JSC::B3::Procedure *v2105;
  uint64_t v2106;
  uint64_t v2107;
  JSC::B3::Procedure *v2108;
  uint64_t v2109;
  uint64_t v2110;
  JSC::B3::Procedure *v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  JSC::B3::Procedure *v2115;
  uint64_t v2116;
  double v2117;
  double v2118;
  BOOL v2119;
  JSC::B3::Value **v2120;
  uint64_t v2121;
  uint64_t v2122;
  JSC::B3::Value *v2123;
  uint64_t v2124;
  JSC::B3::Value **v2125;
  uint64_t *v2126;
  JSC::B3::Value *v2127;
  uint64_t v2128;
  JSC::B3::Value **v2129;
  uint64_t *v2130;
  JSC::B3::Value *v2131;
  uint64_t v2132;
  JSC::B3::Value **v2133;
  uint64_t *v2134;
  JSC::B3::Value **v2135;
  uint64_t v2136;
  __int128 *v2137;
  JSC::B3::Value **v2138;
  uint64_t v2139;
  __int128 *v2140;
  __int128 *v2141;
  uint64_t v2142;
  uint64_t v2143;
  unint64_t isOnlyOneSideMask;
  JSC::B3::Value *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t *v2149;
  uint64_t v2150;
  int v2151;
  char v2152;
  uint64_t v2153;
  __int128 *v2154;
  __int128 *v2155;
  uint64_t v2156;
  uint64_t v2157;
  JSC::B3::Value *v2158;
  uint64_t v2159;
  JSC::B3::Value **v2160;
  uint64_t *v2161;
  uint64_t v2162;
  JSC::B3::Procedure *v2163;
  JSC::B3::Value **v2164;
  _QWORD *v2165;
  JSC::B3::Value *v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  JSC::B3::Value *v2172;
  JSC::B3::Value **v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  unsigned int v2178;
  JSC::B3::Value **v2179;
  JSC::B3::Value *v2180;
  JSC::B3::Value **v2181;
  uint64_t v2182;
  JSC::B3::Value **v2183;
  uint64_t v2184;
  JSC::B3::Value *v2185;
  JSC::B3::Value **v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  BOOL v2190;
  JSC::B3::Value **v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  BOOL v2195;
  uint64_t v2196;
  JSC::B3::Value **v2197;
  uint64_t v2198;
  uint64_t v2199;
  JSC::B3::Procedure *v2200;
  JSC::B3::Value **v2201;
  _QWORD *v2202;
  JSC::B3::Value *v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  JSC::B3::Value *v2210;
  uint64_t v2211;
  JSC::B3::Value **v2212;
  uint64_t v2213;
  uint64_t *v2214;
  uint64_t v2215;
  uint64_t v2216;
  int v2217;
  uint64_t *v2218;
  JSC::B3::Value *v2219;
  uint64_t v2220;
  unsigned int v2221;
  JSC::B3::Value **v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  JSC::B3::Value **v2232;
  uint64_t v2233;
  JSC::B3::Value **v2234;
  uint64_t v2235;
  uint64_t v2236;
  JSC::B3::Value **v2237;
  uint64_t v2238;
  JSC::B3::Value **v2239;
  uint64_t v2240;
  uint64_t v2241;
  JSC::B3::Value *v2242;
  uint64_t v2243;
  JSC::B3::Value **v2244;
  uint64_t v2245;
  JSC::B3::Value **v2246;
  uint64_t v2247;
  uint64_t *v2248;
  uint64_t v2249;
  int v2250;
  JSC::B3::Value **v2251;
  uint64_t v2252;
  uint64_t v2253;
  JSC::B3::Value *v2254;
  JSC::B3::Value **v2255;
  JSC::B3::Value **v2256;
  uint64_t v2257;
  BOOL v2258;
  uint64_t *v2259;
  uint64_t v2260;
  uint64_t v2261;
  const __int16 *v2262;
  float32x2_t v2263;
  uint64_t v2264;
  BOOL v2265;
  uint64_t v2266;
  uint64_t v2267;
  const float *v2268;
  uint64_t v2269;
  uint64_t v2270;
  uint64_t v2271;
  BOOL v2272;
  uint64_t v2273;
  uint64_t v2274;
  BOOL v2275;
  uint64_t v2276;
  BOOL v2277;
  uint64_t v2278;
  uint64_t v2279;
  const float *v2280;
  float32x2_t v2281;
  uint64_t v2282;
  BOOL v2283;
  uint64_t v2284;
  JSC::B3::Procedure *v2285;
  uint64_t v2286;
  JSC::B3::Value **v2287;
  uint64_t v2288;
  JSC::B3::Value **v2289;
  uint64_t v2290;
  uint64_t v2291;
  JSC::B3::Value *v2292;
  uint64_t v2293;
  JSC::B3::Value **v2294;
  uint64_t v2295;
  JSC::B3::Value **v2296;
  uint64_t v2297;
  uint64_t *v2298;
  uint64_t v2299;
  uint64_t v2300;
  int v2301;
  uint64_t v2302;
  JSC::B3::Value **v2303;
  uint64_t v2304;
  uint64_t v2305;
  JSC::B3::Procedure *v2306;
  JSC::B3::Value **v2307;
  _QWORD *v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  JSC::B3::Value *v2315;
  uint64_t v2316;
  JSC::B3::Value **v2317;
  unsigned int v2318;
  uint64_t v2319;
  unint64_t *v2320;
  uint64_t v2321;
  unint64_t v2322;
  unint64_t v2323;
  __int128 *v2324;
  uint64_t v2325;
  uint64_t v2326;
  int v2327;
  uint64_t v2328;
  uint8x8_t v2329;
  __int32 v2330;
  uint8x8_t v2331;
  unint64_t v2332;
  JSC::B3::Value **v2333;
  uint64_t v2334;
  unint64_t v2335;
  BOOL v2336;
  _BOOL4 v2337;
  uint64_t v2338;
  JSC::B3::Value *v2339;
  uint64_t v2340;
  JSC::B3::Value **v2341;
  JSC::B3::Value **v2342;
  uint64_t *v2343;
  uint64_t v2344;
  unsigned __int16 isI64x2DupElement;
  unsigned __int16 isI32x4DupElement;
  unsigned __int16 isI16x8DupElement;
  unsigned __int16 isI8x16DupElement;
  char v2349;
  JSC::B3::Value *v2350;
  uint64_t v2351;
  uint64_t v2352;
  char v2353;
  uint64_t *v2354;
  uint64_t v2355;
  char v2356;
  int64x2_t v2357;
  int8x16_t v2358;
  int8x16_t v2359;
  int8x8_t v2360;
  int64x2_t v2361;
  int8x16_t v2362;
  int8x16_t v2363;
  JSC::B3::Value *v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  JSC::B3::Value *v2370;
  uint64_t v2371;
  char v2372;
  JSC::B3::Value *v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  char v2382;
  JSC::B3::Value *v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t *v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  JSC::B3::Value **v2395;
  uint64_t v2396;
  uint64_t v2397;
  JSC::B3::Value *v2398;
  uint64_t v2399;
  JSC::B3::Value **v2400;
  JSC::B3::Value **v2401;
  char v2402;
  JSC::B3::Value *v2403;
  uint64_t v2404;
  float v2405;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v2406;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v2407;
  uint64_t v2408;
  unsigned int *__src;
  int __srca;
  void *__srcb;
  unint64_t v2412;
  int v2413;
  uint64_t v2414;
  int64x2_t v2415;
  __int128 v2416;
  _BYTE v2417[24];
  _BYTE v2418[128];
  JSC::B3::Value *v2419;
  uint64_t v2420;
  uint64_t v2421;
  _DWORD *v2422;
  uint64_t v2423;
  uint64_t v2424;

  v2424 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 51);
  LOWORD(v10) = *((_WORD *)v9 + 6);
  v11 = this;
  v12 = (JSC::B3::Value **)((char *)this + 408);
  switch((char)v10)
  {
    case 2:
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 12) == 2)
        goto LABEL_1251;
      return;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      JSC::B3::Value::key(*((_QWORD *)this + 51), (uint64_t)v2417);
      v23 = (uint64_t *)((char *)v11 + 376);
      v24 = *((_QWORD *)v11 + 47);
      if (v24)
      {
        v25 = 0;
        v26 = *(_DWORD *)(v24 - 8);
        v27 = 9
            * ((*(_DWORD *)&v2417[8] + ~(*(_DWORD *)&v2417[8] << 15)) ^ ((*(_DWORD *)&v2417[8]
                                                                                      + ~(*(_DWORD *)&v2417[8] << 15)) >> 10));
        v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
        for (i = *(_DWORD *)&v2417[4]
                + v2417[1]
                + ((v2417[2] & 1) << 16)
                + ((v2417[2] << 6) & 0x80)
                + *(_DWORD *)&v2417[12]
                + (((v2417[2] >> 2) & 1) << 24)
                + (((v2417[2] >> 3) & 1) << 13)
                + *(_DWORD *)&v2417[16]
                + *(_DWORD *)&v2417[20]
                + (v28 ^ HIWORD(v28)); ; i = v25 + v30)
        {
          v30 = i & v26;
          v31 = (unsigned __int8 *)(v24 + 32 * v30);
          v32 = v31[1];
          if (*v31 == v2417[0] && v32 == v2417[1])
          {
            v32 = v2417[1];
            if (((v31[2] ^ v2417[2]) & 0xF) == 0)
            {
              v32 = v2417[1];
              if (*((_DWORD *)v31 + 1) == *(_DWORD *)&v2417[4])
              {
                v32 = v2417[1];
                if (*((_DWORD *)v31 + 2) == *(_DWORD *)&v2417[8])
                {
                  v32 = v2417[1];
                  if (*((_DWORD *)v31 + 3) == *(_DWORD *)&v2417[12])
                  {
                    v32 = v2417[1];
                    if (*((_DWORD *)v31 + 4) == *(_DWORD *)&v2417[16])
                    {
                      v32 = v2417[1];
                      if (*((_DWORD *)v31 + 5) == *(_DWORD *)&v2417[20])
                        break;
                    }
                  }
                }
              }
            }
          }
          if (!*v31
            && v32 == 159
            && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v31 + 4), *(int32x4_t *)(v31 + 4)))) & 1) == 0
            && (v31[2] & 0xF) == 0
            && !*((_DWORD *)v31 + 5))
          {
            goto LABEL_32;
          }
          ++v25;
        }
        v207 = *(JSC::B3::Value **)(v24 + 32 * v30 + 24);
        if (v207)
        {
          v208 = *v12;
          if (v207 != *v12)
          {
            v209 = *((_DWORD *)v208 + 4);
            if (v209 != *((_DWORD *)v207 + 4))
            {
              __break(0xC471u);
              JUMPOUT(0x198001690);
            }
            v210 = *((_QWORD *)v208 + 4);
            v211 = *((_DWORD *)v208 + 2);
            (**(void (***)(JSC::B3::Value *))v208)(v208);
            *(_QWORD *)v208 = off_1E357F5F0;
            if (v209)
            {
              *((_QWORD *)v208 + 5) = v207;
              v212 = 1;
            }
            else
            {
              v212 = 0;
            }
            *((_WORD *)v208 + 6) = v212;
            *((_DWORD *)v208 + 4) = v209;
LABEL_265:
            *((_BYTE *)v208 + 20) = v212;
            *((_DWORD *)v208 + 2) = v211;
            *((_QWORD *)v208 + 4) = v210;
LABEL_266:
            *((_BYTE *)v11 + 432) = 1;
            return;
          }
          return;
        }
LABEL_32:
        if (*((_QWORD *)v11 + 49) == *((_QWORD *)v11 + 48))
        {
LABEL_33:
          v34 = 0;
          v35 = 9
              * ((*(_DWORD *)&v2417[8] + ~(*(_DWORD *)&v2417[8] << 15)) ^ ((*(_DWORD *)&v2417[8]
                                                                                        + ~(*(_DWORD *)&v2417[8] << 15)) >> 10));
          v36 = (v35 ^ (v35 >> 6)) + ~((v35 ^ (v35 >> 6)) << 11);
          v37 = *(_DWORD *)&v2417[4]
              + v2417[1]
              + ((v2417[2] & 1) << 16)
              + ((v2417[2] << 6) & 0x80)
              + *(_DWORD *)&v2417[12]
              + (((v2417[2] >> 2) & 1) << 24)
              + (((v2417[2] >> 3) & 1) << 13)
              + *(_DWORD *)&v2417[16]
              + *(_DWORD *)&v2417[20]
              + (v36 ^ HIWORD(v36));
          for (j = 1; ; ++j)
          {
            v39 = v37 & v26;
            v40 = (unsigned __int8 *)(v24 + 32 * v39);
            v41 = v40[1];
            v42 = !*v40 && v41 == 159;
            v43 = v42;
            if (v42
              && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v40 + 4), *(int32x4_t *)(v40 + 4)))) & 1) == 0
              && (v40[2] & 0xF) == 0
              && !*((_DWORD *)v40 + 5))
            {
              break;
            }
            v44 = *v40 == v2417[0] && v41 == v2417[1];
            if (v44
              && ((v40[2] ^ v2417[2]) & 0xF) == 0
              && *(_OWORD *)(v40 + 4) == *(_OWORD *)&v2417[4]
              && *((_DWORD *)v40 + 5) == *(_DWORD *)&v2417[20])
            {
              return;
            }
            if (v43
              && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v40 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (v40[2] & 0xF) == 0&& !*((_DWORD *)v40 + 5))
            {
              v34 = (unsigned __int8 *)(v24 + 32 * v39);
            }
            v37 = j + v39;
          }
          if (v34)
          {
            *(_WORD *)v34 = -24832;
            v34[2] &= 0xF0u;
            *(_QWORD *)(v34 + 4) = 0;
            *(_QWORD *)(v34 + 20) = 0;
            *(_QWORD *)(v34 + 12) = 0;
            *((_DWORD *)v34 + 7) = 0;
            --*(_DWORD *)(*v23 - 16);
            v40 = v34;
          }
          v81 = *(_OWORD *)v2417;
          *((_QWORD *)v40 + 2) = *(_QWORD *)&v2417[16];
          *(_OWORD *)v40 = v81;
          *((_QWORD *)v40 + 3) = *v12;
          v82 = *v23;
          if (*v23)
            v83 = *(_DWORD *)(v82 - 12) + 1;
          else
            v83 = 1;
          *(_DWORD *)(v82 - 12) = v83;
          v84 = *v23;
          if (*v23)
            v85 = *(_DWORD *)(v84 - 12);
          else
            v85 = 0;
          v86 = (*(_DWORD *)(v84 - 16) + v85);
          v87 = *(unsigned int *)(v84 - 4);
          if (v87 > 0x400)
          {
            if (v87 > 2 * v86)
              return;
          }
          else
          {
            if (3 * v87 > 4 * v86)
              return;
            if (!(_DWORD)v87)
            {
              v88 = 8;
LABEL_122:
              WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(v23, v88, (uint64_t)v40);
              return;
            }
          }
          v88 = (_DWORD)v87 << (6 * *(_DWORD *)(v84 - 12) >= (2 * v87));
          goto LABEL_122;
        }
      }
      else if (*((_QWORD *)v11 + 49) == *((_QWORD *)v11 + 48))
      {
        WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash((uint64_t *)v11 + 47, 8u, 0);
        v24 = *v23;
        if (*v23)
          v26 = *(_DWORD *)(v24 - 8);
        else
          v26 = 0;
        goto LABEL_33;
      }
      v566 = JSC::B3::Procedure::clone(*(JSC::B3::Procedure **)v11, *((JSC::B3::Value **)v11 + 51));
      v2422 = (_DWORD *)v566;
      v567 = *((_QWORD *)v11 + 48);
      v568 = *(unsigned int *)(v567 + 20);
      if (!(_DWORD)v568)
      {
        __break(0xC471u);
        JUMPOUT(0x1980060CCLL);
      }
      v569 = v566;
      v570 = (_QWORD *)(*(_QWORD *)(v567 + 8) + 8 * v568);
      v571 = (char *)(v570 - 1);
      if ((_DWORD)v568 == *(_DWORD *)(v567 + 16))
      {
        v571 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v567 + 8), v568 + 1, (unint64_t)v571);
        v568 = *(unsigned int *)(v567 + 20);
        v570 = (_QWORD *)(*(_QWORD *)(v567 + 8) + 8 * v568);
      }
      *v570 = *(_QWORD *)v571;
      v572 = v568 + 1;
      *(_DWORD *)(v567 + 20) = v572;
      if (v572 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980060D4);
      }
      *(_QWORD *)(*(_QWORD *)(v567 + 8) + 8 * v572 - 16) = v569;
      *(_QWORD *)(v569 + 32) = v567;
      WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>((uint64_t *)v11 + 47, v2417, &v2422, (uint64_t)&v2416);
      v532 = *v12;
      v573 = v2422;
      v533 = *((_DWORD *)v532 + 4);
      if (v533 != v2422[4])
      {
        __break(0xC471u);
        JUMPOUT(0x198001FACLL);
      }
      v574 = *((_QWORD *)v532 + 4);
      v575 = *((_DWORD *)v532 + 2);
      (**(void (***)(JSC::B3::Value *))v532)(v532);
      *(_QWORD *)v532 = off_1E357F5F0;
      if (!v533)
        goto LABEL_1604;
      *((_QWORD *)v532 + 5) = v573;
      goto LABEL_629;
    case 14:
      if (*((_BYTE *)v9 + 20) == 4)
      {
        v2387 = JSC::B3::Value::childrenVector(*((JSC::B3::Value **)this + 51));
        if (*(_DWORD *)(v2387 + 12) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x19800621CLL);
        }
        v170 = *(char **)v2387;
      }
      else
      {
        v170 = (char *)v9 + 40;
      }
      if (*(unsigned __int8 *)(*((_QWORD *)v170 + 1) + 12) - 3 >= 5
        && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 12) != 72)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 12) - 3 < 5
          || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v9, 1u) + 12) == 72
          || (v525 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 8),
              v525 > *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v9, 1u) + 8)))
        {
          v526 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v527 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
          v528 = *v526;
          *v526 = *v527;
          *v527 = v528;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v171 = *v12;
      if (*((_BYTE *)*v12 + 20) == 4)
      {
        v2388 = JSC::B3::Value::childrenVector(v171);
        if (!*(_DWORD *)(v2388 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198006224);
        }
        v173 = *(char **)v2388;
        v171 = *v12;
      }
      else
      {
        v172 = 40;
        switch(*((_BYTE *)v171 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v172 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v172 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v172 = 64;
            break;
          case 0x53:
            v172 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v172 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198006004);
        }
        v173 = (char *)v171 + v172;
      }
      if (*(_BYTE *)(*(_QWORD *)v173 + 12) != 14 || (*((_DWORD *)v171 + 4) - 1) > 1)
        goto LABEL_225;
      v707 = *(_QWORD *)JSC::B3::Value::child(v171, 1u);
      v708 = *(JSC::B3::Procedure **)v11;
      v709 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v710 = (_QWORD *)JSC::B3::Value::child(*v709, 1u);
      v711 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v707 + 40))(v707, v708, *v710);
      if (v711)
      {
        v717 = v711;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v711;
        v718 = (uint64_t *)((char *)v11 + 16);
        v719 = *((unsigned int *)v11 + 7);
        if ((_DWORD)v719 == *((_DWORD *)v11 + 6))
        {
          v1696 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v718, (void *)(v719 + 1), (unint64_t)v2417, v712, v713, v714, v715, v716);
          v719 = *((unsigned int *)v11 + 7);
          v720 = *((_QWORD *)v11 + 2);
          v721 = *v1696;
        }
        else
        {
          v720 = *v718;
          v721 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v720 + 16 * v719) = v721;
        ++*((_DWORD *)v11 + 7);
        v722 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v723 = *(_QWORD *)JSC::B3::Value::child(*v722, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v723;
        v724 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v725 = 1;
        goto LABEL_752;
      }
      v879 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      v171 = *v12;
      if (!v879 || (*(_WORD *)(v879 + 12) & 0xFFFu) - 3 >= 2)
      {
        v880 = (JSC::B3::Value **)JSC::B3::Value::child(v171, 0);
        v881 = *(_QWORD *)JSC::B3::Value::child(*v880, 1u);
        v171 = *v12;
        if (v881)
        {
          if ((*(_WORD *)(v881 + 12) & 0xFFFu) - 3 <= 1)
          {
            v882 = (JSC::B3::Value **)JSC::B3::Value::child(v171, 0);
            v883 = *(_QWORD *)JSC::B3::Value::child(*v882, 0);
            v884 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v885 = *(_QWORD *)JSC::B3::Value::child(*v884, 1u);
            v886 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v887 = *((unsigned int *)v11 + 100);
            v888 = v11;
            v889 = *((_QWORD *)v11 + 1);
            v895 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), v883, *v886);
            v896 = *(unsigned int *)(v889 + 92);
            if (!(_DWORD)v896)
            {
              v897 = *(unsigned int *)(v889 + 76);
              if ((_DWORD)v897 != *(_DWORD *)(v889 + 72))
              {
LABEL_903:
                v898 = *(_QWORD *)(v889 + 64);
                *(_QWORD *)(v898 + 8 * v897) = 0;
                *(_DWORD *)(v889 + 76) = v897 + 1;
LABEL_904:
                *(_DWORD *)(v895 + 8) = v897;
                *(_QWORD *)(v898 + 8 * v897) = v895;
                *(_QWORD *)v2417 = v887;
                *(_QWORD *)&v2417[8] = v895;
                v899 = (uint64_t *)((char *)v888 + 16);
                v900 = *((unsigned int *)v888 + 7);
                if ((_DWORD)v900 == *((_DWORD *)v888 + 6))
                {
                  v1860 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v899, (void *)(v900 + 1), (unint64_t)v2417, v890, v891, v892, v893, v894);
                  v900 = *((unsigned int *)v888 + 7);
                  v901 = *((_QWORD *)v888 + 2);
                  v902 = *v1860;
                }
                else
                {
                  v901 = *v899;
                  v902 = *(_OWORD *)v2417;
                }
                *(_OWORD *)(v901 + 16 * v900) = v902;
                ++*((_DWORD *)v888 + 7);
                *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v888 + 51), 0) = v895;
                *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v888 + 51), 1u) = v885;
                *((_BYTE *)v888 + 432) = 1;
                return;
              }
              v1818 = v897 + (v897 >> 2);
              if (v1818 >= 0x10)
                v1819 = v1818 + 1;
              else
                v1819 = 16;
              if (v1819 <= v897 + 1)
                v1172 = v897 + 1;
              else
                v1172 = v1819;
              if (v1172 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1980061B4);
              }
LABEL_1872:
              v1820 = *(const void **)(v889 + 64);
              v1821 = (void *)WTF::fastMalloc((WTF *)(8 * v1172));
              *(_DWORD *)(v889 + 72) = v1172;
              *(_QWORD *)(v889 + 64) = v1821;
              memcpy(v1821, v1820, 8 * v897);
              if (v1820)
              {
                if (*(const void **)(v889 + 64) == v1820)
                {
                  *(_QWORD *)(v889 + 64) = 0;
                  *(_DWORD *)(v889 + 72) = 0;
                }
                WTF::fastFree((unint64_t)v1820, v1822, v1823, v890, v891, v892, v893, v894);
              }
              v1824 = *(unsigned int *)(v889 + 76);
              v898 = *(_QWORD *)(v889 + 64);
              *(_QWORD *)(v898 + 8 * v1824) = 0;
              *(_DWORD *)(v889 + 76) = v1824 + 1;
              goto LABEL_904;
            }
            goto LABEL_1334;
          }
        }
      }
LABEL_225:
      if ((*((_DWORD *)v171 + 4) - 1) <= 1)
      {
        v174 = *(_QWORD *)JSC::B3::Value::child(v171, 0);
        v171 = *v12;
        if (!v174 || (*(_WORD *)(v174 + 12) & 0xFFFu) - 3 >= 2)
        {
          v175 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v171, 1u) + 12);
          v171 = *v12;
          if (v175 == 14)
          {
            v1161 = (JSC::B3::Value **)JSC::B3::Value::child(v171, 1u);
            v1162 = JSC::B3::Value::child(*v1161, 1u);
            v1163 = *(_QWORD *)v1162;
            v1164 = (*(_WORD *)(*(_QWORD *)v1162 + 12) & 0xFFF) - 3;
            v171 = *v12;
            if (v1163 && v1164 <= 1)
            {
              v1166 = (JSC::B3::Value **)JSC::B3::Value::child(v171, 1u);
              v1167 = *(_QWORD *)JSC::B3::Value::child(*v1166, 0);
              v1168 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              v885 = *(_QWORD *)JSC::B3::Value::child(*v1168, 1u);
              v1169 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
              v887 = *((unsigned int *)v11 + 100);
              v888 = v11;
              v889 = *((_QWORD *)v11 + 1);
              v895 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), v1167, *v1169);
              v896 = *(unsigned int *)(v889 + 92);
              if (!(_DWORD)v896)
              {
                v897 = *(unsigned int *)(v889 + 76);
                if ((_DWORD)v897 != *(_DWORD *)(v889 + 72))
                  goto LABEL_903;
                v1170 = v897 + (v897 >> 2);
                if (v1170 >= 0x10)
                  v1171 = v1170 + 1;
                else
                  v1171 = 16;
                if (v1171 <= v897 + 1)
                  v1172 = v897 + 1;
                else
                  v1172 = v1171;
                if (v1172 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FFF7F8);
                }
                goto LABEL_1872;
              }
LABEL_1334:
              v897 = *(_QWORD *)(*(_QWORD *)(v889 + 80) + 8 * v896 - 8);
              *(_DWORD *)(v889 + 92) = v896 - 1;
              v898 = *(_QWORD *)(v889 + 64);
              goto LABEL_904;
            }
          }
        }
      }
      if (*((_BYTE *)v171 + 20) == 4)
      {
        v2389 = JSC::B3::Value::childrenVector(v171);
        if (!*(_DWORD *)(v2389 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19800622CLL);
        }
        v2390 = *(uint64_t **)v2389;
        v171 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v178 = *v2390;
        v179 = *(JSC::B3::Procedure **)v11;
        if (*((_BYTE *)v171 + 20) == 4)
        {
          v2391 = JSC::B3::Value::childrenVector(v171);
          if (*(_DWORD *)(v2391 + 12) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x19800623CLL);
          }
          v181 = *(char **)v2391;
          goto LABEL_234;
        }
        LOBYTE(v176) = *((_BYTE *)v171 + 12);
      }
      else
      {
        v176 = *((_WORD *)v171 + 6);
        v177 = 40;
        switch((char)v176)
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 79:
          case -103:
          case -102:
          case -101:
          case -99:
          case -98:
          case -97:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 10:
          case 11:
          case 12:
          case 80:
          case 84:
          case 90:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 126:
          case 127:
          case -128:
          case -127:
          case -126:
          case -125:
          case -124:
          case -123:
          case -122:
          case -121:
          case -120:
          case -119:
          case -118:
          case -117:
          case -116:
          case -115:
          case -114:
          case -113:
          case -112:
          case -111:
          case -110:
          case -109:
          case -108:
          case -107:
          case -106:
          case -105:
          case -104:
            v177 = 48;
            break;
          case 7:
          case 81:
          case 89:
          case -100:
            v177 = 56;
            break;
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 82:
            v177 = 64;
            break;
          case 83:
            v177 = 176;
            break;
          case 85:
          case 86:
          case 87:
          case 88:
            v177 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198006024);
        }
        v178 = *(_QWORD *)((char *)v171 + v177);
        v179 = *(JSC::B3::Procedure **)v11;
      }
      v180 = 40;
      switch((char)v176)
      {
        case 0:
        case 1:
        case 2:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 79:
        case -103:
        case -102:
        case -101:
        case -99:
        case -98:
        case -97:
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 80:
        case 84:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case -128:
        case -127:
        case -126:
        case -125:
        case -124:
        case -123:
        case -122:
        case -121:
        case -120:
        case -119:
        case -118:
        case -117:
        case -116:
        case -115:
        case -114:
        case -113:
        case -112:
        case -111:
        case -110:
        case -109:
        case -108:
        case -107:
        case -106:
        case -105:
        case -104:
          v180 = 48;
          break;
        case 7:
        case 81:
        case 89:
        case -100:
          v180 = 56;
          break;
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 82:
          v180 = 64;
          break;
        case 83:
          v180 = 176;
          break;
        case 85:
        case 86:
        case 87:
        case 88:
          v180 = 112;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198006044);
      }
      v181 = (char *)v171 + v180;
LABEL_234:
      v182 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v178 + 40))(v178, v179, *((_QWORD *)v181 + 1));
      if (!v182)
      {
        v188 = *v12;
        if ((*((_DWORD *)*v12 + 4) - 1) <= 1)
        {
          v189 = *(_QWORD *)JSC::B3::Value::child(v188, 0);
          v190 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
          v188 = *v12;
          if (v189 == v190)
          {
            v1926 = *((_QWORD *)v188 + 3);
            v1927 = *(_QWORD *)JSC::B3::Value::child(v188, 0);
            v1928 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v11 + 8, *((unsigned int *)v11 + 100), *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), 1);
            v1929 = (uint64_t *)v11;
            v1930 = 25;
            v1931 = v1926;
            v1932 = v1927;
            goto LABEL_2005;
          }
        }
        v191 = *((_WORD *)v188 + 6);
        if ((v191 & 0x400) != 0)
          goto LABEL_254;
        if (*((_BYTE *)v188 + 20) == 4)
        {
          v2392 = JSC::B3::Value::childrenVector(v188);
          if (*(_DWORD *)(v2392 + 12) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x198006244);
          }
          v194 = *(char **)v2392;
        }
        else
        {
          v192 = v191;
          v193 = 40;
          switch(v192)
          {
            case 0:
            case 1:
            case 2:
            case 8:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 79:
            case 153:
            case 154:
            case 155:
            case 157:
            case 158:
            case 159:
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
            case 11:
            case 12:
            case 80:
            case 84:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
              v193 = 48;
              break;
            case 7:
            case 81:
            case 89:
            case 156:
              v193 = 56;
              break;
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 82:
              v193 = 64;
              break;
            case 83:
              v193 = 176;
              break;
            case 85:
            case 86:
            case 87:
            case 88:
              v193 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198006064);
          }
          v194 = (char *)v188 + v193;
        }
        v195 = *((_QWORD *)v194 + 1);
        v196 = *(_WORD *)(v195 + 12) & 0xFFF;
        if (v195 && v196 == 3)
        {
          v197 = *(int *)(v195 + 40);
        }
        else
        {
          if (!v195 || v196 != 4)
            goto LABEL_247;
          v197 = *(_QWORD *)(v195 + 40);
        }
        if (!v197)
        {
LABEL_1364:
          v1419 = JSC::B3::Value::child(*v12, 0);
          v531 = *(_QWORD *)v1419;
          v532 = *v12;
          v533 = *((_DWORD *)*v12 + 4);
          if (v533 != *(_DWORD *)(*(_QWORD *)v1419 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x198000924);
          }
          goto LABEL_1089;
        }
LABEL_247:
        v198 = *v12;
        if (*((_BYTE *)*v12 + 20) == 4)
        {
          v2393 = JSC::B3::Value::childrenVector(v198);
          if (*(_DWORD *)(v2393 + 12) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x19800624CLL);
          }
          v200 = *(char **)v2393;
        }
        else
        {
          v199 = 40;
          switch(*((_BYTE *)v198 + 12))
          {
            case 0:
            case 1:
            case 2:
            case 8:
            case 0xD:
            case 0xE:
            case 0xF:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
            case 0x2B:
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3A:
            case 0x3B:
            case 0x3C:
            case 0x3D:
            case 0x3E:
            case 0x4F:
            case 0x99:
            case 0x9A:
            case 0x9B:
            case 0x9D:
            case 0x9E:
            case 0x9F:
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0x50:
            case 0x54:
            case 0x5A:
            case 0x5B:
            case 0x5C:
            case 0x5D:
            case 0x5E:
            case 0x5F:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6A:
            case 0x6B:
            case 0x6C:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78:
            case 0x79:
            case 0x7A:
            case 0x7B:
            case 0x7C:
            case 0x7D:
            case 0x7E:
            case 0x7F:
            case 0x80:
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8B:
            case 0x8C:
            case 0x8D:
            case 0x8E:
            case 0x8F:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
              v199 = 48;
              break;
            case 7:
            case 0x51:
            case 0x59:
            case 0x9C:
              v199 = 56;
              break;
            case 0x3F:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x52:
              v199 = 64;
              break;
            case 0x53:
              v199 = 176;
              break;
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
              v199 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198006084);
          }
          v200 = (char *)v198 + v199;
        }
        v201 = *((_QWORD *)v200 + 1);
        v202 = *(_WORD *)(v201 + 12) & 0xFFF;
        if (v201 && v202 == 5)
        {
          v1418 = *(double *)(v201 + 40);
          if (v1418 != 0.0 || (*(_QWORD *)&v1418 & 0x8000000000000000) == 0)
            goto LABEL_254;
        }
        else if (!v201
               || v202 != 6
               || (v1990 = *(float *)(v201 + 40), v1990 != 0.0)
               || (LODWORD(v1990) & 0x80000000) == 0)
        {
LABEL_254:
          if ((*((_DWORD *)*v12 + 4) - 1) > 1)
            return;
          v203 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12);
          v204 = *v12;
          if (v203 == 21)
          {
            v750 = *((_QWORD *)v204 + 3);
            v752 = *(_QWORD *)JSC::B3::Value::child(v204, 0);
            v1576 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v1577 = 1;
            goto LABEL_1590;
          }
          v205 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v204, 0) + 12);
          v206 = *v12;
          if (v205 == 21)
          {
            v750 = *((_QWORD *)v206 + 3);
            v752 = *(_QWORD *)JSC::B3::Value::child(v206, 1u);
            v1576 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            goto LABEL_1589;
          }
          if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v206, 0) + 12) != 15)
            goto LABEL_258;
          v1400 = JSC::B3::Value::child(*v12, 1u);
          v1401 = *(_QWORD *)v1400;
          v1402 = *(_WORD *)(*(_QWORD *)v1400 + 12) & 0xFFF;
          if (*(_QWORD *)v1400 && v1402 == 3)
          {
            v1403 = *(int *)(v1401 + 40);
          }
          else
          {
            if (!v1401 || v1402 != 4)
              goto LABEL_258;
            v1403 = *(_QWORD *)(v1401 + 40);
          }
          if (v1403 != -1)
            goto LABEL_258;
          v1404 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1405 = JSC::B3::Value::child(*v1404, 0);
          v1406 = *(_QWORD *)v1405;
          v1407 = *(_WORD *)(*(_QWORD *)v1405 + 12) & 0xFFF;
          if (*(_QWORD *)v1405 && v1407 == 3)
          {
            v1408 = *(int *)(v1406 + 40);
          }
          else
          {
            if (!v1406 || v1407 != 4)
              goto LABEL_258;
            v1408 = *(_QWORD *)(v1406 + 40);
          }
          if (v1408)
            goto LABEL_258;
          v1409 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v750 = *((_QWORD *)v1409 + 3);
          v1410 = (JSC::B3::Value **)JSC::B3::Value::child(v1409, 0);
          v752 = *(_QWORD *)JSC::B3::Value::child(*v1410, 1u);
          inserted = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
          v401 = (uint64_t *)v11;
          v402 = 24;
          goto LABEL_1593;
        }
        goto LABEL_1364;
      }
      v1433 = v182;
      *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
      *(_QWORD *)&v2417[8] = v182;
      v1522 = (uint64_t *)((char *)v11 + 16);
      v1523 = *((unsigned int *)v11 + 7);
      v640 = v11;
      if ((_DWORD)v1523 == *((_DWORD *)v11 + 6))
      {
        v1985 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1522, (void *)(v1523 + 1), (unint64_t)v2417, v183, v184, v185, v186, v187);
        v1523 = *((unsigned int *)v11 + 7);
        v1524 = *((_QWORD *)v11 + 2);
        v1525 = *v1985;
      }
      else
      {
        v1524 = *v1522;
        v1525 = *(_OWORD *)v2417;
      }
      *(_OWORD *)(v1524 + 16 * v1523) = v1525;
      ++*((_DWORD *)v11 + 7);
      v1438 = *((_QWORD *)v11 + 51);
      v1439 = *(_DWORD *)(v1438 + 16);
      if (v1439 != *(_DWORD *)(v1433 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x1980013D0);
      }
LABEL_1391:
      v1440 = *(_QWORD *)(v1438 + 32);
      v1441 = *(_DWORD *)(v1438 + 8);
      (**(void (***)(uint64_t))v1438)(v1438);
      *(_QWORD *)v1438 = off_1E357F5F0;
      if (v1439)
      {
        *(_QWORD *)(v1438 + 40) = v1433;
        v1442 = 1;
      }
      else
      {
        v1442 = 0;
      }
      *(_WORD *)(v1438 + 12) = v1442;
      *(_DWORD *)(v1438 + 16) = v1439;
      *(_BYTE *)(v1438 + 20) = v1442;
      *(_DWORD *)(v1438 + 8) = v1441;
      *(_QWORD *)(v1438 + 32) = v1440;
LABEL_1394:
      *((_BYTE *)v640 + 432) = 1;
      return;
    case 15:
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 12) == 24)
      {
        v1991 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v1991, 0) + 12) == 22)
        {
          v1992 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1993 = (JSC::B3::Value **)JSC::B3::Value::child(*v1992, 0);
          v1994 = JSC::B3::Value::child(*v1993, 1u);
          if (*(_QWORD *)v1994 && (*(_WORD *)(*(_QWORD *)v1994 + 12) & 0xFFFu) - 3 <= 1)
          {
            v1996 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
            v1997 = JSC::B3::Value::child(*v1996, 1u);
            if (*(_QWORD *)v1997 && (*(_WORD *)(*(_QWORD *)v1997 + 12) & 0xFFFu) - 3 <= 1)
            {
              v1999 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
              if (v1999)
              {
                if ((*(_WORD *)(v1999 + 12) & 0xFFFu) - 3 <= 1)
                {
                  v2000 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v2001 = (JSC::B3::Value **)JSC::B3::Value::child(*v2000, 0);
                  v2002 = JSC::B3::Value::child(*v2001, 1u);
                  v2003 = *(_QWORD *)v2002;
                  v2004 = *(_WORD *)(*(_QWORD *)v2002 + 12) & 0xFFF;
                  if (*(_QWORD *)v2002 && v2004 == 3)
                  {
                    v2006 = *(int *)(v2003 + 40);
                  }
                  else
                  {
                    if (v2004 != 4)
                      v2003 = 0;
                    v2006 = *(_QWORD *)(v2003 + 40);
                  }
                  v2007 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v2008 = JSC::B3::Value::child(*v2007, 1u);
                  v2009 = *(_QWORD *)v2008;
                  v2010 = *(_WORD *)(*(_QWORD *)v2008 + 12) & 0xFFF;
                  if (*(_QWORD *)v2008 && v2010 == 3)
                  {
                    v2011 = *(int *)(v2009 + 40);
                  }
                  else
                  {
                    if (v2010 != 4)
                      v2009 = 0;
                    v2011 = *(_QWORD *)(v2009 + 40);
                  }
                  v2325 = JSC::B3::Value::child(*v12, 1u);
                  v2326 = *(_QWORD *)v2325;
                  v2327 = *(_WORD *)(*(_QWORD *)v2325 + 12) & 0xFFF;
                  if (*(_QWORD *)v2325 && v2327 == 3)
                  {
                    v2328 = *(int *)(v2326 + 40);
                  }
                  else
                  {
                    if (v2327 != 4)
                      v2326 = 0;
                    v2328 = *(_QWORD *)(v2326 + 40);
                  }
                  v2329 = (uint8x8_t)vcnt_s8((int8x8_t)v2006);
                  v2329.i16[0] = vaddlv_u8(v2329);
                  v2330 = v2329.i32[0];
                  v2331 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v2006));
                  v2331.i16[0] = vaddlv_u8(v2331);
                  v2332 = (v2331.i32[0] + v2330);
                  v2333 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v2334 = JSC::B3::Value::child(*v2333, 0);
                  v2335 = 32;
                  if (*(_DWORD *)(*(_QWORD *)v2334 + 16) == 2)
                    v2335 = 64;
                  if (v2006)
                  {
                    v2336 = ((v2006 + 1) & v2006) == 0 && v2335 > v2332;
                    v2337 = v2336;
                  }
                  else
                  {
                    v2337 = 0;
                  }
                  if (v2337 && v2011 == v2328 && 2 * v2011 - 1 == v2006)
                  {
                    v1671 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>((JSC::B3::Value **)v11 + 1, *((unsigned int *)v11 + 100), *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), (int)v2335 - (int)v2332);
                    v2338 = *((unsigned int *)v11 + 100);
                    v2339 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                    v2340 = *((_QWORD *)v2339 + 3);
                    v2341 = (JSC::B3::Value **)JSC::B3::Value::child(v2339, 0);
                    v2342 = (JSC::B3::Value **)JSC::B3::Value::child(*v2341, 0);
                    v2343 = (uint64_t *)JSC::B3::Value::child(*v2342, 0);
                    v2344 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v2338, 25, v2340, *v2343, (uint64_t)v1671);
                    v1578 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                    v1579 = v2344;
                    v401 = (uint64_t *)v11;
                    v402 = 26;
LABEL_1964:
                    inserted = (uint64_t)v1671;
                    goto LABEL_1594;
                  }
                }
              }
            }
          }
        }
      }
      v726 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v727 = *(JSC::B3::Procedure **)v11;
      v728 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v726 + 48))(v726, v727, *v728);
      if (v518)
        goto LABEL_1713;
      if ((*((_DWORD *)*v12 + 4) - 1) > 1)
        return;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 21)
        goto LABEL_757;
      v2014 = JSC::B3::Value::child(*v12, 1u);
      v2015 = *(_QWORD *)v2014;
      v2016 = *(_WORD *)(*(_QWORD *)v2014 + 12) & 0xFFF;
      if (*(_QWORD *)v2014 && v2016 == 3)
      {
        v2017 = *(int *)(v2015 + 40);
      }
      else
      {
        if (!v2015 || v2016 != 4)
        {
LABEL_757:
          v729 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
          v730 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v729 + 24))(*v729, *(_QWORD *)v11);
          if (v730)
          {
            v992 = v730;
            *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
            *(_QWORD *)&v2417[8] = v730;
            v993 = (uint64_t *)((char *)v11 + 16);
            v994 = *((unsigned int *)v11 + 7);
            if ((_DWORD)v994 == *((_DWORD *)v11 + 6))
            {
              v1833 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11 + 16, (void *)(v994 + 1), (unint64_t)v2417, v731, v732, v733, v734, v735);
              v994 = *((unsigned int *)v11 + 7);
              v995 = *((_QWORD *)v11 + 2);
              v996 = *v1833;
            }
            else
            {
              v995 = *v993;
              v996 = *(_OWORD *)v2417;
            }
            *(_OWORD *)(v995 + 16 * v994) = v996;
            ++*((_DWORD *)v11 + 7);
            v997 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v998 = *((_QWORD *)v997 + 3);
            v999 = (uint64_t *)JSC::B3::Value::child(v997, 0);
            v1000 = *(JSC::B3::Procedure **)v11;
            v1006 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, v998, *v999, v992);
            v1007 = *((unsigned int *)v1000 + 23);
            if ((_DWORD)v1007)
            {
              v1008 = *(_QWORD *)(*((_QWORD *)v1000 + 10) + 8 * v1007 - 8);
              *((_DWORD *)v1000 + 23) = v1007 - 1;
              v1009 = *((_QWORD *)v1000 + 8);
            }
            else
            {
              v1008 = *((unsigned int *)v1000 + 19);
              if ((_DWORD)v1008 == *((_DWORD *)v1000 + 18))
              {
                v1688 = v1008 + (v1008 >> 2);
                if (v1688 >= 0x10)
                  v1689 = v1688 + 1;
                else
                  v1689 = 16;
                if (v1689 <= v1008 + 1)
                  v1690 = v1008 + 1;
                else
                  v1690 = v1689;
                if (v1690 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198006184);
                }
                v1691 = (const void *)*((_QWORD *)v1000 + 8);
                v1692 = (void *)WTF::fastMalloc((WTF *)(8 * v1690));
                *((_DWORD *)v1000 + 18) = v1690;
                *((_QWORD *)v1000 + 8) = v1692;
                memcpy(v1692, v1691, 8 * v1008);
                if (v1691)
                {
                  if (*((const void **)v1000 + 8) == v1691)
                  {
                    *((_QWORD *)v1000 + 8) = 0;
                    *((_DWORD *)v1000 + 18) = 0;
                  }
                  WTF::fastFree((unint64_t)v1691, v1693, v1694, v1001, v1002, v1003, v1004, v1005);
                }
                v1695 = *((unsigned int *)v1000 + 19);
                v1009 = *((_QWORD *)v1000 + 8);
                *(_QWORD *)(v1009 + 8 * v1695) = 0;
                *((_DWORD *)v1000 + 19) = v1695 + 1;
              }
              else
              {
                v1009 = *((_QWORD *)v1000 + 8);
                *(_QWORD *)(v1009 + 8 * v1008) = 0;
                *((_DWORD *)v1000 + 19) = v1008 + 1;
              }
            }
            *(_DWORD *)(v1006 + 8) = v1008;
            *(_QWORD *)(v1009 + 8 * v1008) = v1006;
            *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
            *(_QWORD *)&v2417[8] = v1006;
            v1010 = *((unsigned int *)v11 + 7);
            if ((_DWORD)v1010 == *((_DWORD *)v11 + 6))
            {
              v1834 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11 + 16, (void *)(v1010 + 1), (unint64_t)v2417, v1001, v1002, v1003, v1004, v1005);
              v1010 = *((unsigned int *)v11 + 7);
              v1011 = *((_QWORD *)v11 + 2);
              v1012 = *v1834;
            }
            else
            {
              v1011 = *v993;
              v1012 = *(_OWORD *)v2417;
            }
            *(_OWORD *)(v1011 + 16 * v1010) = v1012;
            ++*((_DWORD *)v11 + 7);
            v208 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v1013 = *((_DWORD *)v208 + 4);
            if (v1013 != *(_DWORD *)(v1006 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x1980037A0);
            }
LABEL_980:
            v210 = *((_QWORD *)v208 + 4);
            v211 = *((_DWORD *)v208 + 2);
            (**(void (***)(JSC::B3::Value *))v208)(v208);
            *(_QWORD *)v208 = off_1E357F5F0;
            if (v1013)
            {
              *((_QWORD *)v208 + 5) = v1006;
              v212 = 1;
            }
            else
            {
              v212 = 0;
            }
            *((_WORD *)v208 + 6) = v212;
            *((_DWORD *)v208 + 4) = v1013;
            goto LABEL_265;
          }
          v736 = JSC::B3::Value::child(*v12, 0);
          v737 = *(_QWORD *)v736;
          v738 = *(_WORD *)(*(_QWORD *)v736 + 12) & 0xFFF;
          if (*(_QWORD *)v736 && v738 == 3)
          {
            v739 = *(int *)(v737 + 40);
          }
          else
          {
            if (!v737 || v738 != 4)
              goto LABEL_764;
            v739 = *(_QWORD *)(v737 + 40);
          }
          if (v739)
          {
LABEL_764:
            v740 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
            if (v740 == *(_QWORD *)JSC::B3::Value::child(*v12, 1u))
              goto LABEL_1990;
            v741 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12);
            v742 = *v12;
            if (v741 == 21)
            {
              v750 = *((_QWORD *)v742 + 3);
              v752 = *(_QWORD *)JSC::B3::Value::child(v742, 0);
              v1913 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              v1914 = 0;
              goto LABEL_1983;
            }
            v743 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v742, 0) + 12);
            v744 = *v12;
            if (v743 != 21)
            {
              v745 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v744, 0) + 12);
              v746 = *v12;
              if (v745 != 15)
              {
                v747 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v746, 1u) + 12);
                v748 = *v12;
                if (v747 != 15)
                {
                  if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v748, 0) + 12) != 14)
                  {
LABEL_258:
                    return;
                  }
                  v749 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                  v750 = *((_QWORD *)v749 + 3);
                  v751 = (JSC::B3::Value **)JSC::B3::Value::child(v749, 0);
                  v752 = *(_QWORD *)JSC::B3::Value::child(*v751, 0);
                  v753 = *((unsigned int *)v11 + 100);
                  v754 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                  v755 = *((_QWORD *)v754 + 3);
                  v756 = (JSC::B3::Value **)JSC::B3::Value::child(v754, 0);
                  v757 = *(_QWORD *)JSC::B3::Value::child(*v756, 1u);
                  v758 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
                  inserted = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v753, 15, v755, v757, *v758);
                  goto LABEL_771;
                }
                v750 = *((_QWORD *)v748 + 3);
                v1909 = *((unsigned int *)v11 + 100);
                v1910 = *(_QWORD *)JSC::B3::Value::child(v748, 0);
                v1911 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
                v1912 = (uint64_t *)JSC::B3::Value::child(*v1911, 0);
                v752 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1909, 15, v750, v1910, *v1912);
                v1913 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
                v1914 = 1;
LABEL_1983:
                inserted = *(_QWORD *)JSC::B3::Value::child(v1913, v1914);
LABEL_771:
                v401 = (uint64_t *)v11;
                v402 = 14;
                goto LABEL_1593;
              }
              v750 = *((_QWORD *)v746 + 3);
              v1950 = (JSC::B3::Value **)JSC::B3::Value::child(v746, 0);
              v752 = *(_QWORD *)JSC::B3::Value::child(*v1950, 0);
              v1951 = *((unsigned int *)v11 + 100);
              v1952 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v1953 = *((_QWORD *)v1952 + 3);
              v1954 = (JSC::B3::Value **)JSC::B3::Value::child(v1952, 0);
              v1955 = *(_QWORD *)JSC::B3::Value::child(*v1954, 1u);
              v1956 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              inserted = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1951, 14, v1953, v1955, *v1956);
LABEL_1592:
              v401 = (uint64_t *)v11;
              v402 = 15;
LABEL_1593:
              v1578 = v750;
              v1579 = v752;
LABEL_1594:
              return;
            }
            v987 = *((_QWORD *)v744 + 3);
            v2044 = *((unsigned int *)v11 + 100);
            v2045 = (JSC::B3::Value **)JSC::B3::Value::child(v744, 0);
            v2046 = *(_QWORD *)JSC::B3::Value::child(*v2045, 0);
            v2047 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v989 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v2044, 14, v987, v2046, *v2047);
LABEL_1766:
            v990 = (uint64_t *)v11;
            v991 = 21;
LABEL_1767:
            v1732 = v987;
LABEL_1768:
            return;
          }
          v1730 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v987 = *((_QWORD *)v1730 + 3);
          v1731 = 1;
LABEL_1765:
          v989 = *(_QWORD *)JSC::B3::Value::child(v1730, v1731);
          goto LABEL_1766;
        }
        v2017 = *(_QWORD *)(v2015 + 40);
      }
      if (v2017 == 1)
      {
        v2018 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v2019 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(*v2018, 0) + 16);
        v2020 = (uint64_t *)((char *)v11 + 8);
        v2021 = *((unsigned int *)v11 + 100);
        v2022 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
        if (v2019 == 1)
          v2023 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v2020, v2021, v2022, -1);
        else
          v2023 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,int>(v2020, v2021, v2022, -1);
        v1671 = (JSC::B3::Value *)v2023;
        v2180 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v1894 = *((_QWORD *)v2180 + 3);
        v2181 = (JSC::B3::Value **)JSC::B3::Value::child(v2180, 0);
        v1579 = *(_QWORD *)JSC::B3::Value::child(*v2181, 0);
        v401 = (uint64_t *)v11;
        v402 = 24;
LABEL_1963:
        v1578 = v1894;
        goto LABEL_1964;
      }
      goto LABEL_757;
    case 16:
      v668 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v669 = *(JSC::B3::Procedure **)v11;
      v670 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v671 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v668 + 56))(v668, v669, *v670);
      if (v671)
      {
        v1433 = v671;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v671;
        v1463 = (uint64_t *)((char *)v11 + 16);
        v1464 = *((unsigned int *)v11 + 7);
        v640 = v11;
        if ((_DWORD)v1464 == *((_DWORD *)v11 + 6))
        {
          v1957 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1463, (void *)(v1464 + 1), (unint64_t)v2417, v672, v673, v674, v675, v676);
          v1464 = *((unsigned int *)v11 + 7);
          v1465 = *((_QWORD *)v11 + 2);
          v1466 = *v1957;
        }
        else
        {
          v1465 = *v1463;
          v1466 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1465 + 16 * v1464) = v1466;
        ++*((_DWORD *)v11 + 7);
        v1438 = *((_QWORD *)v11 + 51);
        v1439 = *(_DWORD *)(v1438 + 16);
        if (v1439 != *(_DWORD *)(v1433 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198000E1CLL);
        }
        goto LABEL_1391;
      }
      v677 = JSC::B3::Value::child(*v12, 1u);
      v678 = *(_QWORD *)v677;
      v679 = (*(_WORD *)(*(_QWORD *)v677 + 12) & 0xFFF) - 3;
      v680 = JSC::B3::Value::child(*v12, 1u);
      v681 = *(int8x8_t **)v680;
      v682 = *(_WORD *)(*(_QWORD *)v680 + 12) & 0xFFF;
      if (v678)
        v683 = v679 > 1;
      else
        v683 = 1;
      if (v683)
      {
        v684 = *v12;
        if (v681)
          v685 = v682 == 5;
        else
          v685 = 0;
        if (v685)
        {
          v1342 = JSC::B3::Value::child(v684, 1u);
          v1343 = *(_QWORD *)v1342;
          if ((*(_WORD *)(*(_QWORD *)v1342 + 12) & 0xFFF) != 5)
            v1343 = 0;
          v684 = *v12;
          if ((*((_WORD *)*v12 + 6) & 0x400) == 0 && *(double *)(v1343 + 40) == 1.0)
            goto LABEL_1252;
        }
      }
      else
      {
        if (v681)
          v802 = v682 == 3;
        else
          v802 = 0;
        if (v802)
        {
          v803 = (int8x8_t)v681[5].i32[0];
        }
        else
        {
          if (v682 != 4)
            v681 = 0;
          v803 = v681[5];
        }
        switch((unint64_t)v803)
        {
          case 1uLL:
            v1139 = JSC::B3::Value::child(*v12, 0);
            v531 = *(_QWORD *)v1139;
            v532 = *v12;
            v533 = *((_DWORD *)*v12 + 4);
            if (v533 != *(_DWORD *)(*(_QWORD *)v1139 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x198003878);
            }
            goto LABEL_1089;
          case 0uLL:
            goto LABEL_1987;
          case 0xFFFFFFFFFFFFFFFFLL:
LABEL_1988:
            v1730 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v987 = *((_QWORD *)v1730 + 3);
            v1731 = 0;
            goto LABEL_1765;
        }
        v804 = (uint8x8_t)vcnt_s8(v803);
        v804.i16[0] = vaddlv_u8(v804);
        if (v804.u32[0] == 1)
        {
          if (v803.i32[1])
          {
            v806 = WTF::fastLog2((WTF *)HIDWORD(*(_QWORD *)&v803)) + 32;
          }
          else
          {
            v805 = (v803.i32[0] & (v803.i32[0] - 1)) != 0;
            if (v803.i32[0] >= 0x10000u)
            {
              v803.i32[0] = HIWORD(v803.i32[0]);
              v805 |= 0x10u;
            }
            if (v803.i32[0] >= 0x100u)
            {
              v803.i32[0] = (unsigned __int32)v803.i32[0] >> 8;
              v805 += 8;
            }
            if (v803.i32[0] >= 0x10u)
            {
              v803.i32[0] = (unsigned __int32)v803.i32[0] >> 4;
              v805 += 4;
            }
            if (v803.i32[0] >= 4u)
            {
              v803.i32[0] = (unsigned __int32)v803.i32[0] >> 2;
              v805 += 2;
            }
            if (v803.i32[0] <= 1u)
              v806 = v805;
            else
              v806 = v805 + 1;
          }
          v807 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v808 = *((_QWORD *)v807 + 3);
          v809 = *(_QWORD *)JSC::B3::Value::child(v807, 0);
          v810 = *((unsigned int *)v11 + 100);
          v811 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
          v812 = *((_QWORD *)v11 + 1);
          v818 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)(v818 + 8) = -1;
          *(_WORD *)(v818 + 12) = 3;
          *(_DWORD *)(v818 + 16) = 1;
          *(_BYTE *)(v818 + 20) = 0;
          *(_QWORD *)(v818 + 24) = v811;
          *(_QWORD *)(v818 + 32) = 0;
          *(_QWORD *)v818 = off_1E357D8E0;
          *(_DWORD *)(v818 + 40) = v806;
          v819 = *(unsigned int *)(v812 + 92);
          if ((_DWORD)v819)
          {
            v820 = *(_QWORD *)(*(_QWORD *)(v812 + 80) + 8 * v819 - 8);
            *(_DWORD *)(v812 + 92) = v819 - 1;
            v821 = *(_QWORD *)(v812 + 64);
          }
          else
          {
            v820 = *(unsigned int *)(v812 + 76);
            if ((_DWORD)v820 == *(_DWORD *)(v812 + 72))
            {
              v1526 = v820 + (v820 >> 2);
              if (v1526 >= 0x10)
                v1527 = v1526 + 1;
              else
                v1527 = 16;
              if (v1527 <= v820 + 1)
                v1528 = v820 + 1;
              else
                v1528 = v1527;
              if (v1528 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19800615CLL);
              }
              v1529 = *(const void **)(v812 + 64);
              v1530 = (void *)WTF::fastMalloc((WTF *)(8 * v1528));
              *(_DWORD *)(v812 + 72) = v1528;
              *(_QWORD *)(v812 + 64) = v1530;
              memcpy(v1530, v1529, 8 * v820);
              if (v1529)
              {
                if (*(const void **)(v812 + 64) == v1529)
                {
                  *(_QWORD *)(v812 + 64) = 0;
                  *(_DWORD *)(v812 + 72) = 0;
                }
                WTF::fastFree((unint64_t)v1529, v1531, v1532, v813, v814, v815, v816, v817);
              }
              v1533 = *(unsigned int *)(v812 + 76);
              v821 = *(_QWORD *)(v812 + 64);
              *(_QWORD *)(v821 + 8 * v1533) = 0;
              *(_DWORD *)(v812 + 76) = v1533 + 1;
            }
            else
            {
              v821 = *(_QWORD *)(v812 + 64);
              *(_QWORD *)(v821 + 8 * v820) = 0;
              *(_DWORD *)(v812 + 76) = v820 + 1;
            }
          }
          *(_DWORD *)(v818 + 8) = v820;
          *(_QWORD *)(v821 + 8 * v820) = v818;
          *(_QWORD *)v2417 = v810;
          *(_QWORD *)&v2417[8] = v818;
          v822 = (uint64_t *)((char *)v11 + 16);
          v823 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v823 == *((_DWORD *)v11 + 6))
          {
            v1698 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v822, (void *)(v823 + 1), (unint64_t)v2417, v813, v814, v815, v816, v817);
            v823 = *((unsigned int *)v11 + 7);
            v824 = *((_QWORD *)v11 + 2);
            v825 = *v1698;
          }
          else
          {
            v824 = *v822;
            v825 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v824 + 16 * v823) = v825;
          ++*((_DWORD *)v11 + 7);
          v826 = (uint64_t *)v11;
          v827 = 25;
          goto LABEL_851;
        }
        v684 = *v12;
      }
      if ((*((_DWORD *)v684 + 4) - 1) > 1)
        return;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v684, 1u) + 12) == 21)
      {
        v686 = (uint64_t *)((char *)v11 + 8);
        v687 = *((unsigned int *)v11 + 100);
        v2041 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v689 = *((_QWORD *)v2041 + 3);
        v691 = *(_QWORD *)JSC::B3::Value::child(v2041, 0);
        v692 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v693 = 0;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 21)
          return;
        v686 = (uint64_t *)((char *)v11 + 8);
        v687 = *((unsigned int *)v11 + 100);
        v688 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v689 = *((_QWORD *)v688 + 3);
        v690 = (JSC::B3::Value **)JSC::B3::Value::child(v688, 0);
        v691 = *(_QWORD *)JSC::B3::Value::child(*v690, 0);
        v692 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v693 = 1;
      }
      v2042 = (uint64_t *)JSC::B3::Value::child(v692, v693);
      v2043 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v686, v687, 16, v689, v691, *v2042);
      v1732 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v989 = v2043;
      v990 = (uint64_t *)v11;
      v991 = 21;
      goto LABEL_1768;
    case 17:
      v1024 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1025 = *(JSC::B3::Procedure **)v11;
      v1026 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1027 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1024 + 96))(v1024, v1025, *v1026);
      if (v1027)
      {
        v1433 = v1027;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v1027;
        v1538 = (uint64_t *)((char *)v11 + 16);
        v1539 = *((unsigned int *)v11 + 7);
        v640 = v11;
        if ((_DWORD)v1539 == *((_DWORD *)v11 + 6))
        {
          v1986 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1538, (void *)(v1539 + 1), (unint64_t)v2417, v1028, v1029, v1030, v1031, v1032);
          v1539 = *((unsigned int *)v11 + 7);
          v1540 = *((_QWORD *)v11 + 2);
          v1541 = *v1986;
        }
        else
        {
          v1540 = *v1538;
          v1541 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1540 + 16 * v1539) = v1541;
        ++*((_DWORD *)v11 + 7);
        v1438 = *((_QWORD *)v11 + 51);
        v1439 = *(_DWORD *)(v1438 + 16);
        if (v1439 != *(_DWORD *)(v1433 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198001524);
        }
        goto LABEL_1391;
      }
      v1033 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v1033)
        v1034 = (*(_WORD *)(*(_QWORD *)v1033 + 12) & 0xFFFu) - 3 > 1;
      else
        v1034 = 1;
      if (v1034)
        return;
      v1035 = JSC::B3::Value::child(*v12, 1u);
      v1036 = *(_QWORD *)v1035;
      v1037 = *(_WORD *)(*(_QWORD *)v1035 + 12) & 0xFFF;
      if (*(_QWORD *)v1035)
        v1038 = v1037 == 3;
      else
        v1038 = 0;
      if (v1038)
      {
        v1039 = *(int *)(v1036 + 40);
      }
      else
      {
        if (v1037 != 4)
          v1036 = 0;
        v1039 = *(_QWORD *)(v1036 + 40);
      }
      switch(v1039)
      {
        case 1:
          goto LABEL_1251;
        case 0:
LABEL_1987:
          v308 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          goto LABEL_1936;
        case -1:
          goto LABEL_1988;
      }
      if (*((_DWORD *)*v12 + 4) == 1 && *(_DWORD *)(*(_QWORD *)v11 + 204) >= 2u)
      {
        v1040 = JSC::B3::Value::child(*v12, 1u);
        v1041 = 0;
        v1042 = *(_QWORD *)v1040;
        if ((*(_WORD *)(*(_QWORD *)v1040 + 12) & 0xFFF) != 3)
          v1042 = 0;
        v1043 = *(_DWORD *)(v1042 + 40);
        if (v1043 >= 0)
          v1044 = *(_DWORD *)(v1042 + 40);
        else
          v1044 = -v1043;
        v1045 = ((v1043 >> 31) | 0x80000000) + ~(((v1043 >> 31) | 0x80000000) % v1044);
        v1046 = 0x80000000 / v1045;
        v1047 = 0x80000000 % v1045;
        v1048 = 0x80000000 / v1044;
        v1049 = 0x80000000 % v1044;
        while (1)
        {
          v1050 = 2 * v1047;
          v1046 = (v1050 >= v1045) | (2 * v1046);
          v1051 = v1050 < v1045
                ? 0
                : ((v1043 >> 31) | 0x80000000) + ~(((v1043 >> 31) | 0x80000000) % v1044);
          v1047 = v1050 - v1051;
          v1052 = 2 * v1049;
          v1048 = (v1052 >= v1044) | (2 * v1048);
          v1053 = v1052 < v1044 ? 0 : v1044;
          v1049 = v1052 - v1053;
          if (v1046 >= v1044 - v1049 && (v1047 || v1046 != v1044 - v1049))
            break;
          --v1041;
        }
        if (v1043 >= 0)
          v1054 = v1048 + 1;
        else
          v1054 = ~v1048;
        v1055 = *((unsigned int *)v11 + 100);
        v1056 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v1057 = *((_QWORD *)v1056 + 3);
        v1058 = (uint64_t *)JSC::B3::Value::child(v1056, 0);
        v1059 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v1055, 42, v1057, *v1058);
        v2413 = v1054;
        v1060 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,int>((uint64_t *)v11 + 1, *((unsigned int *)v11 + 100), *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), v1054);
        v1061 = *((_QWORD *)v11 + 1);
        v1062 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v1062)
        {
          v1063 = (_BYTE *)(v1062 + 8856);
          *(_BYTE *)(v1062 + 8856) = 1;
          v1064 = *(unsigned int *)(v1062 + 8872);
          if ((_DWORD)v1064)
          {
            *(_DWORD *)(v1062 + 8872) = v1064 - *(_DWORD *)(v1062 + 8876);
            casual = *(_QWORD *)(v1062 + 8864) - v1064;
            goto LABEL_1032;
          }
          v1519 = *(_QWORD *)(v1062 + 8896);
          v1520 = *(_QWORD *)(v1062 + 8880);
          if (v1519)
            goto LABEL_1523;
          if (*(_BYTE *)(v1062 + 8861) == 6)
          {
            v2318 = *(_DWORD *)(v1062 + 8892);
            v2319 = *(unsigned int *)(v1062 + 8888);
            if (v2319 < v2318)
            {
              *(_QWORD *)&v1063[8 * v2319 + 56] = 0;
              v2320 = (unint64_t *)(v1062 + 8 * v2319 + 8920);
              v2321 = v2318 - 1 - v2319;
              while (v2321)
              {
                v1520 += 1024;
                v2323 = *v2320++;
                v2322 = v2323;
                LODWORD(v2319) = v2319 + 1;
                --v2321;
                if (v2323)
                {
                  v1519 = __rbit64(v2322);
                  *(_DWORD *)(v1062 + 8888) = v2319;
                  *(_QWORD *)(v1062 + 8880) = v1520;
LABEL_1523:
                  v1521 = __clz(v1519);
                  *(_QWORD *)(v1062 + 8896) = v1519 & ~(0x8000000000000000 >> v1521);
                  casual = v1520 + 16 * v1521;
LABEL_1032:
                  *v1063 = 0;
LABEL_1033:
                  JSC::B3::Value::Value<>(casual, 0, 16, 2, v1057, v1059, v1060);
                  v1071 = *(unsigned int *)(v1061 + 92);
                  if ((_DWORD)v1071)
                  {
                    v1072 = *(_QWORD *)(*(_QWORD *)(v1061 + 80) + 8 * v1071 - 8);
                    *(_DWORD *)(v1061 + 92) = v1071 - 1;
                    v1073 = *(_QWORD *)(v1061 + 64);
                  }
                  else
                  {
                    v1072 = *(unsigned int *)(v1061 + 76);
                    if ((_DWORD)v1072 == *(_DWORD *)(v1061 + 72))
                    {
                      v1869 = v1072 + (v1072 >> 2);
                      if (v1869 >= 0x10)
                        v1870 = v1869 + 1;
                      else
                        v1870 = 16;
                      if (v1870 <= v1072 + 1)
                        v1871 = v1072 + 1;
                      else
                        v1871 = v1870;
                      if (v1871 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980061BCLL);
                      }
                      __srcb = *(void **)(v1061 + 64);
                      v1872 = (void *)WTF::fastMalloc((WTF *)(8 * v1871));
                      *(_DWORD *)(v1061 + 72) = v1871;
                      *(_QWORD *)(v1061 + 64) = v1872;
                      memcpy(v1872, __srcb, 8 * v1072);
                      if (__srcb)
                      {
                        if (*(void **)(v1061 + 64) == __srcb)
                        {
                          *(_QWORD *)(v1061 + 64) = 0;
                          *(_DWORD *)(v1061 + 72) = 0;
                        }
                        WTF::fastFree((unint64_t)__srcb, v1873, v1874, v1066, v1067, v1068, v1069, v1070);
                      }
                      v1875 = *(unsigned int *)(v1061 + 76);
                      v1073 = *(_QWORD *)(v1061 + 64);
                      *(_QWORD *)(v1073 + 8 * v1875) = 0;
                      *(_DWORD *)(v1061 + 76) = v1875 + 1;
                    }
                    else
                    {
                      v1073 = *(_QWORD *)(v1061 + 64);
                      *(_QWORD *)(v1073 + 8 * v1072) = 0;
                      *(_DWORD *)(v1061 + 76) = v1072 + 1;
                    }
                  }
                  *(_DWORD *)(casual + 8) = v1072;
                  *(_QWORD *)(v1073 + 8 * v1072) = casual;
                  *(_QWORD *)v2417 = v1055;
                  *(_QWORD *)&v2417[8] = casual;
                  v1074 = (uint64_t *)((char *)v11 + 16);
                  v1075 = *((unsigned int *)v11 + 7);
                  if ((_DWORD)v1075 == *((_DWORD *)v11 + 6))
                  {
                    v1933 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1074, (void *)(v1075 + 1), (unint64_t)v2417, v1066, v1067, v1068, v1069, v1070);
                    v1075 = *((unsigned int *)v11 + 7);
                    v1076 = *((_QWORD *)v11 + 2);
                    v1077 = *v1933;
                  }
                  else
                  {
                    v1076 = *v1074;
                    v1077 = *(_OWORD *)v2417;
                  }
                  *(_OWORD *)(v1076 + 16 * v1075) = v1077;
                  ++*((_DWORD *)v11 + 7);
                  v1078 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v11 + 8, *((unsigned int *)v11 + 100), *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), 32);
                  v1079 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>((uint64_t *)v11 + 1, v1055, 27, v1057, casual, v1078);
                  v1080 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v1055, 44, v1057, v1079);
                  if (v1043 >= 1 && v2413 < 0)
                  {
                    v1081 = *((unsigned int *)v11 + 100);
                    v1082 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                    v1083 = *((_QWORD *)v1082 + 3);
                    v1084 = *(_QWORD *)JSC::B3::Value::child(v1082, 0);
                    v1085 = (uint64_t *)((char *)v11 + 8);
                    v1086 = v1081;
                    v1087 = 14;
                    goto LABEL_1041;
                  }
                  if (v1043 < 0 && v2413 >= 1)
                  {
                    v1542 = *((unsigned int *)v11 + 100);
                    v1543 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                    v1083 = *((_QWORD *)v1543 + 3);
                    v1084 = *(_QWORD *)JSC::B3::Value::child(v1543, 0);
                    v1085 = (uint64_t *)((char *)v11 + 8);
                    v1086 = v1542;
                    v1087 = 15;
LABEL_1041:
                    v1080 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v1085, v1086, v1087, v1083, v1080, v1084);
                  }
                  if (v1041)
                  {
                    v1088 = *((unsigned int *)v11 + 100);
                    v1089 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                    v1090 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned int>((uint64_t *)v11 + 1, v1088, v1089, -v1041);
                    v1080 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>((uint64_t *)v11 + 1, v1088, 26, v1089, v1080, v1090);
                  }
                  v1091 = *((unsigned int *)v11 + 100);
                  v1092 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                  v1093 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v11 + 8, v1091, v1092, 31);
                  v1094 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>((uint64_t *)v11 + 1, v1091, 27, v1092, v1080, v1093);
                  v1095 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1091, 14, v1092, v1080, v1094);
                  v208 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                  v1013 = *((_DWORD *)v208 + 4);
                  if (v1013 != *(_DWORD *)(v1095 + 16))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198004BD4);
                  }
                  v1006 = v1095;
                  goto LABEL_980;
                }
              }
              *(_DWORD *)(v1062 + 8888) = v2318;
            }
          }
          *v1063 = 0;
        }
        casual = bmalloc_allocate_casual(56, 1);
        goto LABEL_1033;
      }
      return;
    case 18:
      v1508 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1509 = *(JSC::B3::Procedure **)v11;
      v454 = v11;
      v1510 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1511 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1508 + 104))(v1508, v1509, *v1510);
      if (v1511)
        goto LABEL_1886;
      v1512 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v1512)
        v1513 = (*(_WORD *)(*(_QWORD *)v1512 + 12) & 0xFFFu) - 3 > 1;
      else
        v1513 = 1;
      if (v1513)
        return;
      v1514 = JSC::B3::Value::child(*v12, 1u);
      v1515 = *(_QWORD *)v1514;
      v1516 = *(_WORD *)(*(_QWORD *)v1514 + 12) & 0xFFF;
      if (*(_QWORD *)v1514)
        v1517 = v1516 == 3;
      else
        v1517 = 0;
      if (v1517)
      {
        v1518 = *(int *)(v1515 + 40);
      }
      else
      {
        if (v1516 != 4)
          v1515 = 0;
        v1518 = *(_QWORD *)(v1515 + 40);
      }
      if (v1518 == 1)
        goto LABEL_1984;
      if (!v1518)
        goto LABEL_2071;
      return;
    case 19:
      v1551 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1552 = *(JSC::B3::Procedure **)v11;
      v454 = v11;
      v1553 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1511 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1551 + 112))(v1551, v1552, *v1553);
      if (v1511)
      {
LABEL_1886:
        v467 = (unsigned __int8 *)v1511;
        *(_QWORD *)v2417 = *((unsigned int *)v454 + 100);
        *(_QWORD *)&v2417[8] = v1511;
        goto LABEL_459;
      }
      v1554 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v1554)
        v1555 = (*(_WORD *)(*(_QWORD *)v1554 + 12) & 0xFFFu) - 3 > 1;
      else
        v1555 = 1;
      if (!v1555)
      {
        v1556 = JSC::B3::Value::child(*v12, 1u);
        v1557 = *(_QWORD *)v1556;
        v1558 = *(_WORD *)(*(_QWORD *)v1556 + 12) & 0xFFF;
        if (*(_QWORD *)v1556)
          v1559 = v1558 == 3;
        else
          v1559 = 0;
        if (v1559)
        {
          v1560 = *(int *)(v1557 + 40);
        }
        else
        {
          if (v1558 != 4)
            v1557 = 0;
          v1560 = *(_QWORD *)(v1557 + 40);
        }
        if (v1560)
        {
          if (*(_DWORD *)(*(_QWORD *)v11 + 204) >= 2u)
          {
            v1561 = *((_QWORD *)v11 + 51);
            v1562 = *(_WORD *)(v1561 + 12);
            v1563 = *((unsigned int *)v11 + 100);
            v1564 = *(_QWORD *)(v1561 + 24);
            v1565 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v1561, 0);
            v1566 = *((unsigned int *)v11 + 100);
            v1567 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v1568 = *((_QWORD *)v1567 + 3);
            v1569 = *(_QWORD *)JSC::B3::Value::child(v1567, 0);
            v1570 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v1571 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), v1566, v1562 & 0x100 | 0x11u, v1568, v1569, *v1570);
            v1572 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v1573 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1566, 16, v1568, (uint64_t)v1571, *v1572);
            v1574 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1563, 15, v1564, v1565, v1573);
            JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), v1574);
            *((_BYTE *)v11 + 432) = 1;
          }
        }
        else
        {
LABEL_2071:
          v1982 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v454 + 51), 1u);
          JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v454 + 51), *v1982);
          *((_BYTE *)v454 + 432) = 1;
        }
      }
      return;
    case 20:
      v1684 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1685 = *(JSC::B3::Procedure **)v11;
      v1686 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v1684 + 120))(v1684, v1685, v1686);
      goto LABEL_1713;
    case 21:
      v1344 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1345 = v11;
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1344 + 24))(*v1344, *(_QWORD *)v11);
      if (v538)
        goto LABEL_2171;
      v1346 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
      v1347 = *v12;
      if (v1346 == 21)
      {
        v1958 = (JSC::B3::Value **)JSC::B3::Value::child(v1347, 0);
        v1959 = (JSC::B3::Value **)JSC::B3::Value::child(*v1958, 0);
        JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), *v1959);
        *((_BYTE *)v11 + 432) = 1;
        return;
      }
      if ((*((_DWORD *)v1347 + 4) - 1) > 1)
        return;
      v1348 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v1347, 0) + 12);
      v1349 = *v12;
      if (v1348 == 15)
      {
        v750 = *((_QWORD *)v1349 + 3);
        v1575 = (JSC::B3::Value **)JSC::B3::Value::child(v1349, 0);
        v752 = *(_QWORD *)JSC::B3::Value::child(*v1575, 1u);
        v1576 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
LABEL_1589:
        v1577 = 0;
LABEL_1590:
        v1130 = *(JSC::B3::Value **)JSC::B3::Value::child(v1576, v1577);
        v1131 = 0;
LABEL_1591:
        inserted = *(_QWORD *)JSC::B3::Value::child(v1130, v1131);
        goto LABEL_1592;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v1349, 0) + 12) == 16)
      {
        v1350 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1351 = JSC::B3::Value::child(*v1350, 1u);
        if (*(_QWORD *)v1351 && (*(_WORD *)(*(_QWORD *)v1351 + 12) & 0xFFFu) - 3 <= 1)
        {
          v1353 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1354 = JSC::B3::Value::child(*v1353, 1u);
          v1355 = *(_QWORD *)v1354;
          v1356 = *(_WORD *)(*(_QWORD *)v1354 + 12) & 0xFFF;
          if (*(_QWORD *)v1354)
            v1357 = v1356 == 3;
          else
            v1357 = 0;
          if (v1357)
          {
            v1358 = *(int *)(v1355 + 40);
          }
          else
          {
            if (v1356 != 4)
              v1355 = 0;
            v1358 = *(_QWORD *)(v1355 + 40);
          }
          v1359 = *v12;
          v1360 = *((_DWORD *)*v12 + 4);
          if (v1360 == 2)
          {
            if (v1358 == 0x8000000000000000)
              return;
            v2182 = *((unsigned int *)v11 + 100);
            v2183 = (JSC::B3::Value **)JSC::B3::Value::child(v1359, 0);
            v2184 = JSC::B3::Value::child(*v2183, 1u);
            v1364 = (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t *)v11 + 1, v2182, *(_QWORD *)(*(_QWORD *)v2184 + 24), -v1358);
          }
          else
          {
            if (v1360 != 1 || v1358 == 0xFFFFFFFF80000000)
              return;
            v1361 = *((unsigned int *)v11 + 100);
            v1362 = (JSC::B3::Value **)JSC::B3::Value::child(v1359, 0);
            v1363 = JSC::B3::Value::child(*v1362, 1u);
            v1364 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,long long>((uint64_t *)v11 + 1, v1361, *(_QWORD *)(*(_QWORD *)v1363 + 24), -(int)v1358);
          }
          v1671 = (JSC::B3::Value *)v1364;
          v2185 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v1894 = *((_QWORD *)v2185 + 3);
          v2186 = (JSC::B3::Value **)JSC::B3::Value::child(v2185, 0);
          v1579 = *(_QWORD *)JSC::B3::Value::child(*v2186, 0);
          v401 = (uint64_t *)v11;
          v402 = 16;
          goto LABEL_1963;
        }
      }
      return;
    case 22:
      v297 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v298 = *(JSC::B3::Procedure **)v11;
      v299 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v300 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v297 + 144))(v297, v298, *v299);
      if (v300)
      {
        v335 = v300;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v300;
        v973 = (uint64_t *)((char *)v11 + 16);
        v974 = *((unsigned int *)v11 + 7);
        if ((_DWORD)v974 == *((_DWORD *)v11 + 6))
        {
          v1784 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v973, (void *)(v974 + 1), (unint64_t)v2417, v301, v302, v303, v304, v305);
          v974 = *((unsigned int *)v11 + 7);
          v975 = *((_QWORD *)v11 + 2);
          v976 = *v1784;
        }
        else
        {
          v975 = *v973;
          v976 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v975 + 16 * v974) = v976;
        ++*((_DWORD *)v11 + 7);
        v343 = *((_QWORD *)v11 + 51);
        v344 = *(_DWORD *)(v343 + 16);
        if (v344 != *(_DWORD *)(v335 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x197FFEB98);
        }
        goto LABEL_356;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 22)
      {
        v1140 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v1141 = *(JSC::B3::Procedure **)v11;
        v1142 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v1143 = (_QWORD *)JSC::B3::Value::child(*v1142, 1u);
        v1144 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1140 + 144))(v1140, v1141, *v1143);
        if (v1144)
        {
          v1150 = v1144;
          *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
          *(_QWORD *)&v2417[8] = v1144;
          v1151 = (uint64_t *)((char *)v11 + 16);
          v1152 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v1152 == *((_DWORD *)v11 + 6))
          {
            v2137 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1151, (void *)(v1152 + 1), (unint64_t)v2417, v1145, v1146, v1147, v1148, v1149);
            v1152 = *((unsigned int *)v11 + 7);
            v1153 = *((_QWORD *)v11 + 2);
            v1154 = *v2137;
          }
          else
          {
            v1153 = *v1151;
            v1154 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v1153 + 16 * v1152) = v1154;
          ++*((_DWORD *)v11 + 7);
          v1155 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v1156 = *(_QWORD *)JSC::B3::Value::child(*v1155, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1156;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v1150;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v306 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      v307 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      v308 = *v12;
      if (v306 == v307)
        goto LABEL_2036;
      v309 = JSC::B3::Value::child(v308, 1u);
      v310 = *(_QWORD *)v309;
      v311 = *(_WORD *)(*(_QWORD *)v309 + 12) & 0xFFF;
      if (*(_QWORD *)v309 && v311 == 3)
      {
        v312 = *(int *)(v310 + 40);
      }
      else
      {
        if (!v310 || v311 != 4)
          goto LABEL_324;
        v312 = *(_QWORD *)(v310 + 40);
      }
      if (!v312)
        goto LABEL_1935;
LABEL_324:
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 27)
      {
        v1132 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1133 = *(_QWORD *)JSC::B3::Value::child(*v1132, 1u);
        if (v1133)
        {
          if ((*(_WORD *)(v1133 + 12) & 0xFFFu) - 3 <= 1)
          {
            v1134 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
            v1135 = JSC::B3::Value::child(*v1134, 1u);
            v1136 = *(_QWORD *)v1135;
            v1137 = *(_WORD *)(*(_QWORD *)v1135 + 12) & 0xFFF;
            if (*(_QWORD *)v1135 && v1137 == 3)
            {
              v1138 = *(int *)(v1136 + 40);
            }
            else
            {
              if (v1137 != 4)
                v1136 = 0;
              v1138 = *(_QWORD *)(v1136 + 40);
            }
            if ((v1138 & 0x8000000000000000) == 0)
            {
              v1325 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
              if (v1325)
              {
                if ((*(_WORD *)(v1325 + 12) & 0xFFFu) - 3 <= 1)
                {
                  v1326 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1327 = JSC::B3::Value::child(*v1326, 1u);
                  v1328 = *(_QWORD *)v1327;
                  v1329 = *(_WORD *)(*(_QWORD *)v1327 + 12) & 0xFFF;
                  if (*(_QWORD *)v1327 && v1329 == 3)
                  {
                    v1330 = *(int *)(v1328 + 40);
                  }
                  else
                  {
                    if (v1329 != 4)
                      v1328 = 0;
                    v1330 = *(_QWORD *)(v1328 + 40);
                  }
                  v1331 = JSC::B3::Value::child(*v12, 1u);
                  v1332 = *(_QWORD *)v1331;
                  v1333 = *(_WORD *)(*(_QWORD *)v1331 + 12) & 0xFFF;
                  if (*(_QWORD *)v1331 && v1333 == 3)
                  {
                    v1334 = *(int *)(v1332 + 40);
                  }
                  else
                  {
                    if (v1333 != 4)
                      v1332 = 0;
                    v1334 = *(_QWORD *)(v1332 + 40);
                  }
                  v1335 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1336 = JSC::B3::Value::child(*v1335, 0);
                  v1337 = 32;
                  if (*(_DWORD *)(*(_QWORD *)v1336 + 16) == 2)
                    v1337 = 64;
                  if (v1330 < v1337)
                  {
                    if (v1334)
                    {
                      if (((v1334 + 1) & v1334) == 0)
                      {
                        v1338 = (uint8x8_t)vcnt_s8((int8x8_t)v1334);
                        v1338.i16[0] = vaddlv_u8(v1338);
                        v1339 = v1338.i32[0];
                        v1340 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1334));
                        v1340.i16[0] = vaddlv_u8(v1340);
                        if (v1330 + (v1340.i32[0] + v1339) >= v1337)
                          goto LABEL_1251;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 25)
      {
        v1501 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1502 = JSC::B3::Value::child(*v1501, 1u);
        if (*(_QWORD *)v1502)
        {
          if ((*(_WORD *)(*(_QWORD *)v1502 + 12) & 0xFFFu) - 3 <= 1)
          {
            v1503 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
            v1504 = JSC::B3::Value::child(*v1503, 1u);
            v1505 = *(_QWORD *)v1504;
            v1506 = *(_WORD *)(*(_QWORD *)v1504 + 12) & 0xFFF;
            if (*(_QWORD *)v1504 && v1506 == 3)
            {
              v1507 = *(int *)(v1505 + 40);
            }
            else
            {
              if (v1506 != 4)
                v1505 = 0;
              v1507 = *(_QWORD *)(v1505 + 40);
            }
            if ((v1507 & 0x8000000000000000) == 0)
            {
              v1786 = JSC::B3::Value::child(*v12, 1u);
              if (*(_QWORD *)v1786)
              {
                if ((*(_WORD *)(*(_QWORD *)v1786 + 12) & 0xFFFu) - 3 <= 1)
                {
                  v1787 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1788 = JSC::B3::Value::child(*v1787, 1u);
                  v1789 = *(_QWORD *)v1788;
                  v1790 = *(_WORD *)(*(_QWORD *)v1788 + 12) & 0xFFF;
                  if (*(_QWORD *)v1788 && v1790 == 3)
                  {
                    v1791 = *(int *)(v1789 + 40);
                  }
                  else
                  {
                    if (v1790 != 4)
                      v1789 = 0;
                    v1791 = *(_QWORD *)(v1789 + 40);
                  }
                  v1792 = JSC::B3::Value::child(*v12, 1u);
                  v1793 = *(_QWORD *)v1792;
                  v1794 = *(_WORD *)(*(_QWORD *)v1792 + 12) & 0xFFF;
                  if (*(_QWORD *)v1792 && v1794 == 3)
                  {
                    v1795 = *(int *)(v1793 + 40);
                  }
                  else
                  {
                    if (v1794 != 4)
                      v1793 = 0;
                    v1795 = *(_QWORD *)(v1793 + 40);
                  }
                  v1796 = __clz(__rbit64(v1795));
                  v1797 = v1795 >> v1796;
                  v1798 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1799 = JSC::B3::Value::child(*v1798, 0);
                  if (v1797)
                  {
                    v1800 = *(_DWORD *)(*(_QWORD *)v1799 + 16);
                    v1801 = 32;
                    if (v1800 == 2)
                      v1801 = 64;
                    if (v1791 == v1796 && v1791 < v1801 && ((v1797 + 1) & v1797) == 0)
                    {
                      v1802 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1797));
                      v1802.i16[0] = vaddlv_u8(v1802);
                      v1803 = v1802.i32[0];
                      v1804 = (uint8x8_t)vcnt_s8((int8x8_t)v1797);
                      v1804.i16[0] = vaddlv_u8(v1804);
                      v1805 = (v1803 + v1804.i32[0]);
                      if (v1801 > v1805 && v1791 + v1805 <= v1801)
                      {
                        v1806 = *((unsigned int *)v11 + 100);
                        v1807 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                        v1808 = (uint64_t *)((char *)v11 + 8);
                        if (v1800 == 2)
                          v1809 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(v1808, v1806, v1807, v1797);
                        else
                          v1809 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>((JSC::B3::Value **)v1808, v1806, v1807, v1797);
                        v1810 = (uint64_t)v1809;
                        v1811 = *((unsigned int *)v11 + 100);
                        v1812 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                        v1813 = *((_QWORD *)v1812 + 3);
                        v1814 = (JSC::B3::Value **)JSC::B3::Value::child(v1812, 0);
                        v1815 = (uint64_t *)JSC::B3::Value::child(*v1814, 0);
                        v395 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1811, 22, v1813, *v1815, v1810);
                        v1816 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                        v397 = *((_QWORD *)v1816 + 3);
                        v1817 = (JSC::B3::Value **)JSC::B3::Value::child(v1816, 0);
                        inserted = *(_QWORD *)JSC::B3::Value::child(*v1817, 1u);
                        v401 = (uint64_t *)v11;
                        v402 = 25;
                        goto LABEL_1864;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*((_DWORD *)*v12 + 4) == 2
        && (v313 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u)) != 0
        && (*(_WORD *)(v313 + 12) & 0xFFF) == 4
        && *(_QWORD *)(v313 + 40) == -1
        || *((_DWORD *)*v12 + 4) == 1
        && (v529 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u)) != 0
        && (*(_WORD *)(v529 + 12) & 0xFFF) == 3
        && *(_DWORD *)(v529 + 40) == -1)
      {
        v530 = JSC::B3::Value::child(*v12, 0);
        v531 = *(_QWORD *)v530;
        v532 = *v12;
        v533 = *((_DWORD *)*v12 + 4);
        if (v533 != *(_DWORD *)(*(_QWORD *)v530 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x197FFCD00);
        }
        goto LABEL_1089;
      }
      v314 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      if (v314 && (*(_WORD *)(v314 + 12) & 0xFFF) == 4 && *(_QWORD *)(v314 + 40) == 0xFFFFFFFFLL)
      {
        v1699 = *((unsigned int *)v11 + 100);
        v1700 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v1701 = *((_QWORD *)v1700 + 3);
        v1702 = (uint64_t *)JSC::B3::Value::child(v1700, 0);
        v1703 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v1699, 44, v1701, *v1702);
        v1704 = (uint64_t *)((char *)v11 + 8);
        v1705 = v1699;
        v1706 = 43;
        v1707 = v1701;
        goto LABEL_1733;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 38)
      {
        v2024 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
        if (v2024)
        {
          if ((*(_WORD *)(v2024 + 12) & 0xFFF) == 3)
          {
            v2025 = JSC::B3::Value::child(*v12, 1u);
            v2026 = *(_QWORD *)v2025;
            if ((*(_WORD *)(*(_QWORD *)v2025 + 12) & 0xFFF) != 3)
              v2026 = 0;
            if (*(_DWORD *)(v2026 + 40) <= 0xFFu)
              goto LABEL_519;
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 39)
      {
        v2027 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
        if (v2027)
        {
          if ((*(_WORD *)(v2027 + 12) & 0xFFF) == 3)
          {
            v2028 = JSC::B3::Value::child(*v12, 1u);
            v2029 = *(_QWORD *)v2028;
            if ((*(_WORD *)(*(_QWORD *)v2028 + 12) & 0xFFF) != 3)
              v2029 = 0;
            if (!*(_WORD *)(v2029 + 42))
              goto LABEL_519;
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 42)
      {
        v2030 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
        if (v2030)
        {
          if ((*(_WORD *)(v2030 + 12) & 0xFFF) == 3)
          {
            v2031 = JSC::B3::Value::child(*v12, 1u);
            v2032 = *(_QWORD *)v2031;
            if ((*(_WORD *)(*(_QWORD *)v2031 + 12) & 0xFFF) != 3)
              v2032 = 0;
            if ((*(_DWORD *)(v2032 + 40) & 0x80000000) == 0)
            {
              v2033 = *((unsigned int *)v11 + 100);
              v2034 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v2035 = *((_QWORD *)v2034 + 3);
              v2036 = (JSC::B3::Value **)JSC::B3::Value::child(v2034, 0);
              v2037 = *(_QWORD *)JSC::B3::Value::child(*v2036, 0);
              v2038 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
              v2039 = (uint64_t *)JSC::B3::Value::child(*v2038, 1u);
              v2040 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v2033, 43, v2035, v2037, *v2039);
              *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2040;
              *((_BYTE *)v11 + 432) = 1;
              return;
            }
          }
        }
      }
      v315 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      if (v315 && (*(_WORD *)(v315 + 12) & 0xFFFu) - 3 <= 1)
      {
        v316 = JSC::B3::Value::child(*v12, 1u);
        v317 = *(_QWORD *)v316;
        v318 = *(_WORD *)(*(_QWORD *)v316 + 12) & 0xFFF;
        if (*(_QWORD *)v316 && v318 == 3)
        {
          v319 = *(int *)(v317 + 40);
        }
        else
        {
          if (v318 != 4)
            v317 = 0;
          v319 = *(_QWORD *)(v317 + 40);
        }
        if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) - 23 <= 1)
        {
          v694 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v695 = *(_QWORD *)JSC::B3::Value::child(*v694, 1u);
          if (v695)
          {
            if ((*(_WORD *)(v695 + 12) & 0xFFFu) - 3 <= 1)
            {
              v696 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v697 = JSC::B3::Value::child(*v696, 1u);
              v698 = *(_QWORD *)v697;
              v699 = *(_WORD *)(*(_QWORD *)v697 + 12) & 0xFFF;
              if (*(_QWORD *)v697 && v699 == 3)
              {
                v700 = *(int *)(v698 + 40);
              }
              else
              {
                if (v699 != 4)
                  v698 = 0;
                v700 = *(_QWORD *)(v698 + 40);
              }
              if ((v700 & v319) == 0)
                goto LABEL_799;
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 24
        && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12) == 24)
      {
        if (*((_DWORD *)*v12 + 4) == 2)
        {
          v701 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v702 = *(_QWORD *)JSC::B3::Value::child(*v701, 1u);
          if (v702)
          {
            if ((*(_WORD *)(v702 + 12) & 0xFFF) == 4 && *(_QWORD *)(v702 + 40) == -1)
            {
              v2239 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u);
              v2240 = *(_QWORD *)JSC::B3::Value::child(*v2239, 1u);
              if (v2240)
              {
                if ((*(_WORD *)(v2240 + 12) & 0xFFF) == 4 && *(_QWORD *)(v2240 + 40) == -1)
                  goto LABEL_2327;
              }
            }
          }
        }
        if (*((_DWORD *)*v12 + 4) == 1)
        {
          v703 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v704 = *(_QWORD *)JSC::B3::Value::child(*v703, 1u);
          if (v704)
          {
            if ((*(_WORD *)(v704 + 12) & 0xFFF) == 3 && *(_DWORD *)(v704 + 40) == -1)
            {
              v705 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u);
              v706 = *(_QWORD *)JSC::B3::Value::child(*v705, 1u);
              if (v706)
              {
                if ((*(_WORD *)(v706 + 12) & 0xFFF) == 3 && *(_DWORD *)(v706 + 40) == -1)
                {
LABEL_2327:
                  v2241 = *((unsigned int *)v11 + 100);
                  v2242 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                  v2243 = *((_QWORD *)v2242 + 3);
                  v2244 = (JSC::B3::Value **)JSC::B3::Value::child(v2242, 0);
                  v2245 = *(_QWORD *)JSC::B3::Value::child(*v2244, 0);
                  v2246 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
                  v2247 = *(_QWORD *)JSC::B3::Value::child(*v2246, 0);
                  v2248 = (uint64_t *)((char *)v11 + 8);
                  v2249 = v2241;
                  v2250 = 23;
                  goto LABEL_2332;
                }
              }
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 24)
      {
        v372 = JSC::B3::Value::child(*v12, 1u);
        if (*(_QWORD *)v372)
        {
          if ((*(_WORD *)(*(_QWORD *)v372 + 12) & 0xFFFu) - 3 <= 1)
          {
            if (*((_DWORD *)*v12 + 4) == 2
              && (v373 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                  (v374 = *(_QWORD *)JSC::B3::Value::child(*v373, 1u)) != 0)
              && (*(_WORD *)(v374 + 12) & 0xFFF) == 4
              && *(_QWORD *)(v374 + 40) == -1
              || *((_DWORD *)*v12 + 4) == 1
              && (v375 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                  (v376 = *(_QWORD *)JSC::B3::Value::child(*v375, 1u)) != 0)
              && (*(_WORD *)(v376 + 12) & 0xFFF) == 3
              && *(_DWORD *)(v376 + 40) == -1)
            {
              v377 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              v378 = *(JSC::B3::Procedure **)v11;
              v379 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
              v380 = (_QWORD *)JSC::B3::Value::child(*v379, 1u);
              v381 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v377 + 160))(v377, v378, *v380);
              JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v381, v382, v383, v384, v385, v386);
              v387 = *((unsigned int *)v11 + 100);
              v388 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v389 = *((_QWORD *)v388 + 3);
              v390 = (JSC::B3::Value **)JSC::B3::Value::child(v388, 0);
              v391 = *(_QWORD *)JSC::B3::Value::child(*v390, 0);
              v392 = (uint64_t *)((char *)v11 + 8);
              v393 = v387;
              v394 = 23;
              goto LABEL_393;
            }
          }
        }
      }
      return;
    case 23:
      v577 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v578 = *(JSC::B3::Procedure **)v11;
      v579 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v580 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v577 + 152))(v577, v578, *v579);
      if (v580)
      {
        v1433 = v580;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v580;
        v1586 = (uint64_t *)((char *)v11 + 16);
        v1587 = *((unsigned int *)v11 + 7);
        v640 = v11;
        if ((_DWORD)v1587 == *((_DWORD *)v11 + 6))
        {
          v2140 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1586, (void *)(v1587 + 1), (unint64_t)v2417, v581, v582, v583, v584, v585);
          v1587 = *((unsigned int *)v11 + 7);
          v1588 = *((_QWORD *)v11 + 2);
          v1589 = *v2140;
        }
        else
        {
          v1588 = *v1586;
          v1589 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1588 + 16 * v1587) = v1589;
        ++*((_DWORD *)v11 + 7);
        v1438 = *((_QWORD *)v11 + 51);
        v1439 = *(_DWORD *)(v1438 + 16);
        if (v1439 != *(_DWORD *)(v1433 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x1980019CCLL);
        }
        goto LABEL_1391;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 23)
      {
        v931 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v932 = *(JSC::B3::Procedure **)v11;
        v933 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v934 = (_QWORD *)JSC::B3::Value::child(*v933, 1u);
        v935 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v931
                                                                                                  + 152))(v931, v932, *v934);
        if (v935)
        {
          v941 = v935;
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v935, v936, v937, v938, v939, v940);
          v942 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v943 = *(_QWORD *)JSC::B3::Value::child(*v942, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v943;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v941;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v586 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      v587 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      v308 = *v12;
      if (v586 == v587)
      {
LABEL_2036:
        v1876 = 0;
        goto LABEL_1937;
      }
      v588 = JSC::B3::Value::child(v308, 1u);
      v589 = *(_QWORD *)v588;
      v590 = *(_WORD *)(*(_QWORD *)v588 + 12) & 0xFFF;
      if (*(_QWORD *)v588 && v590 == 3)
      {
        v591 = *(int *)(v589 + 40);
      }
      else
      {
        if (!v589 || v590 != 4)
        {
LABEL_640:
          if ((*((_DWORD *)*v12 + 4) != 2
             || (v592 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u)) == 0
             || (*(_WORD *)(v592 + 12) & 0xFFF) != 4
             || *(_QWORD *)(v592 + 40) != -1)
            && (*((_DWORD *)*v12 + 4) != 1
             || (v593 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u)) == 0
             || (*(_WORD *)(v593 + 12) & 0xFFF) != 3
             || *(_DWORD *)(v593 + 40) != -1))
          {
            if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 24
              || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12) != 24)
            {
              goto LABEL_656;
            }
            if (*((_DWORD *)*v12 + 4) == 2)
            {
              v1469 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v1470 = *(_QWORD *)JSC::B3::Value::child(*v1469, 1u);
              if (v1470)
              {
                if ((*(_WORD *)(v1470 + 12) & 0xFFF) == 4 && *(_QWORD *)(v1470 + 40) == -1)
                {
                  v2251 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u);
                  v2252 = *(_QWORD *)JSC::B3::Value::child(*v2251, 1u);
                  if (v2252)
                  {
                    if ((*(_WORD *)(v2252 + 12) & 0xFFF) == 4 && *(_QWORD *)(v2252 + 40) == -1)
                      goto LABEL_2331;
                  }
                }
              }
            }
            if (*((_DWORD *)*v12 + 4) == 1
              && (v1471 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                  (v1472 = *(_QWORD *)JSC::B3::Value::child(*v1471, 1u)) != 0)
              && (*(_WORD *)(v1472 + 12) & 0xFFF) == 3
              && *(_DWORD *)(v1472 + 40) == -1
              && (v1473 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u),
                  (v1474 = *(_QWORD *)JSC::B3::Value::child(*v1473, 1u)) != 0)
              && (*(_WORD *)(v1474 + 12) & 0xFFF) == 3
              && *(_DWORD *)(v1474 + 40) == -1)
            {
LABEL_2331:
              v2253 = *((unsigned int *)v11 + 100);
              v2254 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v2243 = *((_QWORD *)v2254 + 3);
              v2255 = (JSC::B3::Value **)JSC::B3::Value::child(v2254, 0);
              v2245 = *(_QWORD *)JSC::B3::Value::child(*v2255, 0);
              v2256 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              v2247 = *(_QWORD *)JSC::B3::Value::child(*v2256, 0);
              v2248 = (uint64_t *)((char *)v11 + 8);
              v2249 = v2253;
              v2250 = 22;
LABEL_2332:
              v395 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v2248, v2249, v2250, v2243, v2245, v2247);
              v396 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v397 = *((_QWORD *)v396 + 3);
              v398 = 1;
            }
            else
            {
LABEL_656:
              if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 24
                || (v594 = JSC::B3::Value::child(*v12, 1u), !*(_QWORD *)v594)
                || (*(_WORD *)(*(_QWORD *)v594 + 12) & 0xFFFu) - 3 > 1
                || (*((_DWORD *)*v12 + 4) != 2
                 || (v2120 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                     (v2121 = *(_QWORD *)JSC::B3::Value::child(*v2120, 1u)) == 0)
                 || (*(_WORD *)(v2121 + 12) & 0xFFF) != 4
                 || *(_QWORD *)(v2121 + 40) != -1)
                && (*((_DWORD *)*v12 + 4) != 1
                 || (v595 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                     (v596 = *(_QWORD *)JSC::B3::Value::child(*v595, 1u)) == 0)
                 || (*(_WORD *)(v596 + 12) & 0xFFF) != 3
                 || *(_DWORD *)(v596 + 40) != -1))
              {
LABEL_578:
                return;
              }
              v597 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              v598 = *(JSC::B3::Procedure **)v11;
              v599 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
              v600 = (_QWORD *)JSC::B3::Value::child(*v599, 1u);
              v381 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v597 + 160))(v597, v598, *v600);
              JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v381, v601, v602, v603, v604, v605);
              v606 = *((unsigned int *)v11 + 100);
              v607 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v389 = *((_QWORD *)v607 + 3);
              v608 = (JSC::B3::Value **)JSC::B3::Value::child(v607, 0);
              v391 = *(_QWORD *)JSC::B3::Value::child(*v608, 0);
              v392 = (uint64_t *)((char *)v11 + 8);
              v393 = v606;
              v394 = 22;
LABEL_393:
              v395 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v392, v393, v394, v389, v391, (uint64_t)v381);
              v396 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              v397 = *((_QWORD *)v396 + 3);
              v398 = 0;
            }
            v399 = (JSC::B3::Value **)JSC::B3::Value::child(v396, v398);
            inserted = *(_QWORD *)JSC::B3::Value::child(*v399, 1u);
            v401 = (uint64_t *)v11;
            v402 = 24;
LABEL_1864:
            v1578 = v397;
            v1579 = v395;
            goto LABEL_1594;
          }
LABEL_1935:
          v308 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
LABEL_1936:
          v1876 = 1;
LABEL_1937:
          v1877 = (JSC::B3::Value **)JSC::B3::Value::child(v308, v1876);
          JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), *v1877);
          *((_BYTE *)v11 + 432) = 1;
          return;
        }
        v591 = *(_QWORD *)(v589 + 40);
      }
      if (!v591)
        goto LABEL_1251;
      goto LABEL_640;
    case 24:
      v535 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v536 = *(JSC::B3::Procedure **)v11;
      v537 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v535 + 160))(v535, v536, *v537);
      if (v538)
        goto LABEL_1714;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 24)
      {
        v1282 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v1283 = *(JSC::B3::Procedure **)v11;
        v1284 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v1285 = (_QWORD *)JSC::B3::Value::child(*v1284, 1u);
        v1286 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1282 + 160))(v1282, v1283, *v1285);
        if (v1286)
        {
          v1292 = v1286;
          *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
          *(_QWORD *)&v2417[8] = v1286;
          v1293 = (uint64_t *)((char *)v11 + 16);
          v1294 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v1294 == *((_DWORD *)v11 + 6))
          {
            v2154 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1293, (void *)(v1294 + 1), (unint64_t)v2417, v1287, v1288, v1289, v1290, v1291);
            v1294 = *((unsigned int *)v11 + 7);
            v1295 = *((_QWORD *)v11 + 2);
            v1296 = *v2154;
          }
          else
          {
            v1295 = *v1293;
            v1296 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v1295 + 16 * v1294) = v1296;
          ++*((_DWORD *)v11 + 7);
          v1297 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v1298 = *(_QWORD *)JSC::B3::Value::child(*v1297, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1298;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v1292;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v539 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v539)
        v540 = (*(_WORD *)(*(_QWORD *)v539 + 12) & 0xFFF) == 3;
      else
        v540 = 0;
      if (v540 && *(_DWORD *)(*(_QWORD *)v539 + 40) == 1)
      {
        v962 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v963 = JSC::B3::Value::invertedCompare(*v962, *(JSC::B3::Procedure **)v11);
        if (v963)
        {
          v335 = v963;
          *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
          *(_QWORD *)&v2417[8] = v963;
          v969 = (uint64_t *)((char *)v11 + 16);
          v970 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v970 == *((_DWORD *)v11 + 6))
          {
            v1835 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v969, (void *)(v970 + 1), (unint64_t)v2417, v964, v965, v966, v967, v968);
            v970 = *((unsigned int *)v11 + 7);
            v971 = *((_QWORD *)v11 + 2);
            v972 = *v1835;
          }
          else
          {
            v971 = *v969;
            v972 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v971 + 16 * v970) = v972;
          ++*((_DWORD *)v11 + 7);
          v343 = *((_QWORD *)v11 + 51);
          v344 = *(_DWORD *)(v343 + 16);
          if (v344 != *(_DWORD *)(v335 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x197FFEB14);
          }
          goto LABEL_356;
        }
      }
      v541 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      if (v541 == *(_QWORD *)JSC::B3::Value::child(*v12, 1u))
      {
LABEL_1990:
        v1916 = *(JSC::B3::Procedure **)v11;
        v1917 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        goto LABEL_1991;
      }
      v542 = JSC::B3::Value::child(*v12, 1u);
      v543 = *(_QWORD *)v542;
      v544 = *(_WORD *)(*(_QWORD *)v542 + 12) & 0xFFF;
      if (*(_QWORD *)v542 && v544 == 3)
      {
        v545 = *(int *)(v543 + 40);
      }
      else
      {
        if (!v543 || v544 != 4)
          goto LABEL_578;
        v545 = *(_QWORD *)(v543 + 40);
      }
      if (v545)
        goto LABEL_578;
      v1642 = JSC::B3::Value::child(*v12, 0);
      v531 = *(_QWORD *)v1642;
      v532 = *v12;
      v533 = *((_DWORD *)*v12 + 4);
      if (v533 != *(_DWORD *)(*(_QWORD *)v1642 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x198001D54);
      }
      goto LABEL_1089;
    case 25:
      v481 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v482 = *(JSC::B3::Procedure **)v11;
      v483 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v484 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v481 + 168))(v481, v482, *v483);
      if (v484)
      {
        v1433 = v484;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v484;
        v1434 = (uint64_t *)((char *)v11 + 16);
        v1435 = *((unsigned int *)v11 + 7);
        v640 = v11;
        if ((_DWORD)v1435 == *((_DWORD *)v11 + 6))
        {
          v1949 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1434, (void *)(v1435 + 1), (unint64_t)v2417, v485, v486, v487, v488, v489);
          v1435 = *((unsigned int *)v11 + 7);
          v1436 = *((_QWORD *)v11 + 2);
          v1437 = *v1949;
        }
        else
        {
          v1436 = *v1434;
          v1437 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1436 + 16 * v1435) = v1437;
        ++*((_DWORD *)v11 + 7);
        v1438 = *((_QWORD *)v11 + 51);
        v1439 = *(_DWORD *)(v1438 + 16);
        if (v1439 != *(_DWORD *)(v1433 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198004C7CLL);
        }
        goto LABEL_1391;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 26
        || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 27)
      {
        v1247 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1248 = JSC::B3::Value::child(*v1247, 1u);
        if (*(_QWORD *)v1248 && (*(_WORD *)(*(_QWORD *)v1248 + 12) & 0xFFFu) - 3 <= 1)
        {
          v1250 = JSC::B3::Value::child(*v12, 1u);
          if (*(_QWORD *)v1250)
          {
            if ((*(_WORD *)(*(_QWORD *)v1250 + 12) & 0xFFFu) - 3 <= 1)
            {
              v1251 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v1252 = JSC::B3::Value::child(*v1251, 1u);
              v1253 = *(_QWORD *)v1252;
              v1254 = *(_WORD *)(*(_QWORD *)v1252 + 12) & 0xFFF;
              if (*(_QWORD *)v1252 && v1254 == 3)
              {
                v1256 = *(int *)(v1253 + 40);
              }
              else
              {
                if (v1254 != 4)
                  v1253 = 0;
                v1256 = *(_QWORD *)(v1253 + 40);
              }
              v1257 = JSC::B3::Value::child(*v12, 1u);
              v1258 = *(_QWORD *)v1257;
              v1259 = *(_WORD *)(*(_QWORD *)v1257 + 12) & 0xFFF;
              if (*(_QWORD *)v1257 && v1259 == 3)
              {
                v1260 = *(int *)(v1258 + 40);
              }
              else
              {
                if (v1259 != 4)
                  v1258 = 0;
                v1260 = *(_QWORD *)(v1258 + 40);
              }
              if (v1256 == v1260)
              {
                v1367 = JSC::B3::Value::child(*v12, 1u);
                v1368 = *(_QWORD *)v1367;
                v1369 = *(_WORD *)(*(_QWORD *)v1367 + 12) & 0xFFF;
                if (*(_QWORD *)v1367 && v1369 == 3)
                {
                  LODWORD(v1368) = *(_DWORD *)(v1368 + 40);
                }
                else
                {
                  if (v1369 != 4)
                    v1368 = 0;
                  v1368 = *(_QWORD *)(v1368 + 40);
                }
                v1886 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                v1887 = 63;
                if (*((_DWORD *)v1886 + 4) == 1)
                  v1887 = 31;
                v1671 = (JSC::B3::Value *)JSC::B3::Procedure::addIntConstant(*(JSC::B3::Procedure **)v11, v1886, -1 << (v1887 & v1368));
                JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v1671, v1888, v1889, v1890, v1891, v1892);
                v1893 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                goto LABEL_1962;
              }
            }
          }
        }
      }
      goto LABEL_496;
    case 26:
      v785 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v786 = *(JSC::B3::Procedure **)v11;
      v787 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v785 + 176))(v785, v786, *v787);
      if (v518)
        goto LABEL_1713;
      v788 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v788)
        v789 = (*(_WORD *)(*(_QWORD *)v788 + 12) & 0xFFF) == 3;
      else
        v789 = 0;
      if (v789 && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 25)
      {
        v790 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v791 = JSC::B3::Value::child(*v790, 1u);
        if (*(_QWORD *)v791 && (*(_WORD *)(*(_QWORD *)v791 + 12) & 0xFFF) == 3)
        {
          v793 = JSC::B3::Value::child(*v12, 1u);
          v794 = *(_QWORD *)v793;
          if ((*(_WORD *)(*(_QWORD *)v793 + 12) & 0xFFF) != 3)
            v794 = 0;
          v795 = *(_DWORD *)(v794 + 40);
          v796 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v797 = JSC::B3::Value::child(*v796, 1u);
          v798 = *(_QWORD *)v797;
          if ((*(_WORD *)(*(_QWORD *)v797 + 12) & 0xFFF) != 3)
            v798 = 0;
          if (v795 == *(_DWORD *)(v798 + 40))
          {
            v799 = JSC::B3::Value::child(*v12, 1u);
            v800 = *(_QWORD *)v799;
            if ((*(_WORD *)(*(_QWORD *)v799 + 12) & 0xFFF) != 3)
              v800 = 0;
            HIDWORD(v801) = *(_DWORD *)(v800 + 40);
            LODWORD(v801) = HIDWORD(v801) - 16;
            switch((v801 >> 3))
            {
              case 0u:
                v1825 = *v12;
                if (*((_DWORD *)*v12 + 4) == 1)
                {
                  v1826 = *((_QWORD *)v1825 + 3);
                  v1827 = (JSC::B3::Value **)JSC::B3::Value::child(v1825, 0);
                  v1828 = *(_QWORD *)JSC::B3::Value::child(*v1827, 0);
                  v1829 = (uint64_t *)v11;
                  v1830 = 39;
                  goto LABEL_1879;
                }
                break;
              case 1u:
                v1858 = *v12;
                if (*((_DWORD *)*v12 + 4) == 1)
                {
                  v1826 = *((_QWORD *)v1858 + 3);
                  v1859 = (JSC::B3::Value **)JSC::B3::Value::child(v1858, 0);
                  v1828 = *(_QWORD *)JSC::B3::Value::child(*v1859, 0);
                  v1829 = (uint64_t *)v11;
                  v1830 = 38;
                  goto LABEL_1879;
                }
                break;
              case 2u:
                v2131 = *v12;
                if (*((_DWORD *)*v12 + 4) == 2)
                {
                  v1826 = *((_QWORD *)v2131 + 3);
                  v2132 = *((unsigned int *)v11 + 100);
                  v2133 = (JSC::B3::Value **)JSC::B3::Value::child(v2131, 0);
                  v2134 = (uint64_t *)JSC::B3::Value::child(*v2133, 0);
                  v1828 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v2132, 44, v1826, *v2134);
                  v1829 = (uint64_t *)v11;
                  v1830 = 42;
                  goto LABEL_1879;
                }
                break;
              case 4u:
                v2123 = *v12;
                if (*((_DWORD *)*v12 + 4) == 2)
                {
                  v1826 = *((_QWORD *)v2123 + 3);
                  v2124 = *((unsigned int *)v11 + 100);
                  v2125 = (JSC::B3::Value **)JSC::B3::Value::child(v2123, 0);
                  v2126 = (uint64_t *)JSC::B3::Value::child(*v2125, 0);
                  v1828 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v2124, 44, v1826, *v2126);
                  v1829 = (uint64_t *)v11;
                  v1830 = 41;
                  goto LABEL_1879;
                }
                break;
              case 5u:
                v2127 = *v12;
                if (*((_DWORD *)*v12 + 4) == 2)
                {
                  v1826 = *((_QWORD *)v2127 + 3);
                  v2128 = *((unsigned int *)v11 + 100);
                  v2129 = (JSC::B3::Value **)JSC::B3::Value::child(v2127, 0);
                  v2130 = (uint64_t *)JSC::B3::Value::child(*v2129, 0);
                  v1828 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)v11 + 1, v2128, 44, v1826, *v2130);
                  v1829 = (uint64_t *)v11;
                  v1830 = 40;
LABEL_1879:
                }
                break;
              default:
                break;
            }
            if (*((_BYTE *)*v12 + 12) != 26)
              return;
          }
        }
      }
      goto LABEL_496;
    case 27:
      v655 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v656 = *(JSC::B3::Procedure **)v11;
      v657 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v655 + 184))(v655, v656, *v657);
      if (v538)
        goto LABEL_1714;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 25)
      {
        v1590 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1591 = JSC::B3::Value::child(*v1590, 1u);
        if (*(_QWORD *)v1591 && (*(_WORD *)(*(_QWORD *)v1591 + 12) & 0xFFFu) - 3 <= 1)
        {
          v1593 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1594 = JSC::B3::Value::child(*v1593, 1u);
          v1595 = *(_QWORD *)v1594;
          v1596 = *(_WORD *)(*(_QWORD *)v1594 + 12) & 0xFFF;
          if (*(_QWORD *)v1594 && v1596 == 3)
          {
            v1598 = *(int *)(v1595 + 40);
          }
          else
          {
            if (v1596 != 4)
              v1595 = 0;
            v1598 = *(_QWORD *)(v1595 + 40);
          }
          if ((v1598 & 0x8000000000000000) == 0)
          {
            v1599 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
            if (v1599)
            {
              if ((*(_WORD *)(v1599 + 12) & 0xFFFu) - 3 <= 1)
              {
                v1600 = JSC::B3::Value::child(*v12, 1u);
                v1601 = *(_QWORD *)v1600;
                v1602 = *(_WORD *)(*(_QWORD *)v1600 + 12) & 0xFFF;
                if (*(_QWORD *)v1600 && v1602 == 3)
                {
                  v1603 = *(int *)(v1601 + 40);
                }
                else
                {
                  if (v1602 != 4)
                    v1601 = 0;
                  v1603 = *(_QWORD *)(v1601 + 40);
                }
                if ((v1603 & 0x8000000000000000) == 0)
                {
                  v1919 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1920 = JSC::B3::Value::child(*v1919, 1u);
                  v1921 = *(_QWORD *)v1920;
                  v1922 = *(_WORD *)(*(_QWORD *)v1920 + 12) & 0xFFF;
                  if (*(_QWORD *)v1920 && v1922 == 3)
                  {
                    v1923 = *(int *)(v1921 + 40);
                  }
                  else
                  {
                    if (v1922 != 4)
                      v1921 = 0;
                    v1923 = *(_QWORD *)(v1921 + 40);
                  }
                  v1935 = JSC::B3::Value::child(*v12, 1u);
                  v1936 = *(_QWORD *)v1935;
                  v1937 = *(_WORD *)(*(_QWORD *)v1935 + 12) & 0xFFF;
                  if (*(_QWORD *)v1935 && v1937 == 3)
                  {
                    v1938 = *(int *)(v1936 + 40);
                  }
                  else
                  {
                    if (v1937 != 4)
                      v1936 = 0;
                    v1938 = *(_QWORD *)(v1936 + 40);
                  }
                  v1939 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1940 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(*v1939, 0) + 16);
                  v1941 = 32;
                  if (v1940 == 2)
                    v1941 = 64;
                  if (v1923 == v1938 && v1941 > v1923)
                  {
                    v1943 = ~(-1 << (v1941 - v1923));
                    v1944 = (uint64_t *)((char *)v11 + 8);
                    v1945 = *((unsigned int *)v11 + 100);
                    v1946 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                    if (v1940 == 2)
                      v1947 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(v1944, v1945, v1946, v1943);
                    else
                      v1947 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>((JSC::B3::Value **)v1944, v1945, v1946, v1943);
                    v1671 = v1947;
                    v1893 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
LABEL_1962:
                    v1894 = *((_QWORD *)v1893 + 3);
                    v1895 = (JSC::B3::Value **)JSC::B3::Value::child(v1893, 0);
                    v1579 = *(_QWORD *)JSC::B3::Value::child(*v1895, 0);
                    v401 = (uint64_t *)v11;
                    v402 = 22;
                    goto LABEL_1963;
                  }
                }
              }
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 22)
        goto LABEL_496;
      v658 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v659 = JSC::B3::Value::child(*v658, 1u);
      v660 = !*(_QWORD *)v659 || (*(_WORD *)(*(_QWORD *)v659 + 12) & 0xFFFu) - 3 > 1;
      if (v660)
        goto LABEL_496;
      v661 = JSC::B3::Value::child(*v12, 1u);
      if (!*(_QWORD *)v661 || (*(_WORD *)(*(_QWORD *)v661 + 12) & 0xFFFu) - 3 > 1)
        goto LABEL_496;
      v662 = JSC::B3::Value::child(*v12, 1u);
      v663 = *(_QWORD *)v662;
      v664 = *(_WORD *)(*(_QWORD *)v662 + 12) & 0xFFF;
      if (*(_QWORD *)v662 && v664 == 3)
      {
        v665 = *(int *)(v663 + 40);
      }
      else
      {
        if (v664 != 4)
          v663 = 0;
        v665 = *(_QWORD *)(v663 + 40);
      }
      if (v665 < 0)
        goto LABEL_496;
      v1644 = JSC::B3::Value::child(*v12, 1u);
      v1645 = *(_QWORD *)v1644;
      v1646 = *(_WORD *)(*(_QWORD *)v1644 + 12) & 0xFFF;
      if (*(_QWORD *)v1644 && v1646 == 3)
      {
        v1647 = *(int *)(v1645 + 40);
      }
      else
      {
        if (v1646 != 4)
          v1645 = 0;
        v1647 = *(_QWORD *)(v1645 + 40);
      }
      v1648 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1649 = JSC::B3::Value::child(*v1648, 1u);
      v1650 = *(_QWORD *)v1649;
      v1651 = *(_WORD *)(*(_QWORD *)v1649 + 12) & 0xFFF;
      if (*(_QWORD *)v1649 && v1651 == 3)
      {
        v1652 = *(int *)(v1650 + 40);
      }
      else
      {
        if (v1651 != 4)
          v1650 = 0;
        v1652 = *(_QWORD *)(v1650 + 40);
      }
      v1653 = __clz(__rbit64(v1652));
      v1654 = v1652 >> v1653;
      v1655 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1656 = JSC::B3::Value::child(*v1655, 0);
      if (!v1654)
        goto LABEL_496;
      v1657 = *(_DWORD *)(*(_QWORD *)v1656 + 16);
      v1658 = 32;
      if (v1657 == 2)
        v1658 = 64;
      v1659 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1654));
      v1659.i16[0] = vaddlv_u8(v1659);
      v1660 = v1659.i32[0];
      v1661 = (uint8x8_t)vcnt_s8((int8x8_t)v1654);
      v1661.i16[0] = vaddlv_u8(v1661);
      v1662 = (v1660 + v1661.i32[0]);
      v1663 = v1647 != v1653 || v1647 >= v1658;
      v1664 = !v1663 && ((v1654 + 1) & v1654) == 0;
      v1665 = v1664 && v1658 > v1662;
      if (!v1665 || v1647 + v1662 > v1658)
      {
LABEL_496:
        v490 = (JSC::B3::Value **)v11;
        goto LABEL_497;
      }
      v1667 = *((unsigned int *)v11 + 100);
      v1668 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v1669 = (uint64_t *)((char *)v11 + 8);
      if (v1657 == 2)
        v1670 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(v1669, v1667, v1668, v1654);
      else
        v1670 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>((JSC::B3::Value **)v1669, v1667, v1668, v1654);
      v1671 = v1670;
      v1672 = *((unsigned int *)v11 + 100);
      v1673 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v1674 = *((_QWORD *)v1673 + 3);
      v1675 = (JSC::B3::Value **)JSC::B3::Value::child(v1673, 0);
      v1676 = *(_QWORD *)JSC::B3::Value::child(*v1675, 0);
      v1677 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1678 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v1672, 27, v1674, v1676, *v1677);
      v1578 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v1579 = v1678;
      v401 = (uint64_t *)v11;
      v402 = 22;
      goto LABEL_1964;
    case 28:
      v2114 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v2115 = *(JSC::B3::Procedure **)v11;
      v454 = v11;
      v2116 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v2113 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v2114 + 192))(v2114, v2115, v2116);
      goto LABEL_2188;
    case 29:
      v2110 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v2111 = *(JSC::B3::Procedure **)v11;
      v454 = v11;
      v2112 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v2113 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v2110 + 200))(v2110, v2111, v2112);
LABEL_2188:
      if (v2113)
      {
        v538 = (JSC::B3::Value *)v2113;
LABEL_2033:
        v1687 = (uint64_t)v454;
        goto LABEL_1715;
      }
      v490 = (JSC::B3::Value **)v454;
LABEL_497:
      return;
    case 31:
      v1483 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v454 = v11;
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1483 + 248))(*v1483, *(_QWORD *)v11);
      if (v538)
        goto LABEL_2033;
      v1484 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
      v473 = *(unsigned __int8 **)JSC::B3::Value::child(*v12, 0);
      if (v1484 == 31)
        goto LABEL_1985;
      v1485 = v473[12];
      v1486 = *(JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      if (v1485 == 21)
      {
        v2122 = *(_QWORD *)JSC::B3::Value::child(v1486, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2122;
        goto LABEL_463;
      }
      if (*((_BYTE *)v1486 + 12) != 37)
        return;
      v1487 = *((_QWORD *)v11 + 51);
      v1488 = *((unsigned int *)v11 + 100);
      v1489 = *(_QWORD *)(v1487 + 24);
      v1490 = (uint64_t *)((char *)v11 + 8);
      if (*(_DWORD *)(v1487 + 16) == 4)
        v1491 = (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(v1490, v1488, v1489, 0x7FFFFFFFFFFFFFFFLL);
      else
        v1491 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,long>(v1490, v1488, v1489);
      v2156 = v1491;
      v2157 = *((unsigned int *)v11 + 100);
      v2158 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v2159 = *((_QWORD *)v2158 + 3);
      v2160 = (JSC::B3::Value **)JSC::B3::Value::child(v2158, 0);
      v2161 = (uint64_t *)JSC::B3::Value::child(*v2160, 0);
      v1703 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11 + 1, v2157, 22, v2159, *v2161, v2156);
      v1705 = *((unsigned int *)v11 + 100);
      v1707 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v1704 = (uint64_t *)((char *)v11 + 8);
      v1706 = 37;
LABEL_1733:
      v1341 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v1704, v1705, v1706, v1707, v1703);
      goto LABEL_1253;
    case 32:
      v1425 = this;
      v1426 = *(uint64_t (**)(void))(**(_QWORD **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 256);
      goto LABEL_1375;
    case 33:
      v1425 = this;
      v1426 = *(uint64_t (**)(void))(**(_QWORD **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 264);
LABEL_1375:
      v538 = (JSC::B3::Value *)v1426();
      if (v538)
      {
        v1687 = (uint64_t)v1425;
        goto LABEL_1715;
      }
      v1427 = JSC::B3::Value::child(*v12, 0);
      v1428 = *(_QWORD *)v1427;
      v1429 = *(_WORD *)(*(_QWORD *)v1427 + 12);
      if (v1429 > 0x30u)
        return;
      v11 = v1425;
      if (((1 << v1429) & 0x1800300000000) != 0)
        goto LABEL_2151;
      if (v1429 == 5)
      {
        if ((v1429 & 0xFFF) != 5)
          v1428 = 0;
        v2117 = *(double *)(v1428 + 40);
        v2118 = ceil(v2117);
        v2119 = (*(_QWORD *)&v2117 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v2117 == v2118;
        v11 = v1425;
        if (v2119)
          goto LABEL_2151;
      }
      else if (v1429 == 6)
      {
        v11 = v1425;
        if ((v1429 & 0xFFF) != 6)
          v1428 = 0;
        v1430 = *(float *)(v1428 + 40);
        v1431 = ceilf(v1430);
        if ((LODWORD(v1430) & 0x7FFFFFFFu) <= 0x7F7FFFFF && v1430 == v1431)
          goto LABEL_2151;
      }
      return;
    case 34:
      v1399 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v518 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1399 + 272))(*v1399, *(_QWORD *)v11);
      if (v518)
        goto LABEL_1713;
      return;
    case 35:
      v2107 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v2108 = *(JSC::B3::Procedure **)v11;
      v2109 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v2107 + 136))(v2107, v2108, v2109);
      goto LABEL_1713;
    case 36:
      v2104 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v2105 = *(JSC::B3::Procedure **)v11;
      v2106 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v2104 + 128))(v2104, v2105, v2106);
      goto LABEL_1713;
    case 37:
      v555 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v555 + 208))(*v555, *(_QWORD *)v11);
      if (v538)
        goto LABEL_1714;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 37)
        return;
      v556 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v557 = JSC::B3::Value::child(*v556, 0);
      v531 = *(_QWORD *)v557;
      v532 = *v12;
      v533 = *((_DWORD *)*v12 + 4);
      if (v533 != *(_DWORD *)(*(_QWORD *)v557 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x197FFD0FCLL);
      }
      goto LABEL_1089;
    case 38:
      v1633 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1634 = *(_QWORD *)v1633;
      v1635 = *(_WORD *)(*(_QWORD *)v1633 + 12) & 0xFFF;
      v1636 = JSC::B3::Value::child(*v12, 0);
      v1637 = *(_QWORD *)v1636;
      v1638 = *(_WORD *)(*(_QWORD *)v1636 + 12);
      if (v1634)
        v1639 = v1635 == 3;
      else
        v1639 = 0;
      if (v1639)
        goto LABEL_2061;
      if (*(_WORD *)(*(_QWORD *)v1636 + 12) == 38
        || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 39)
      {
        v1980 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v1981 = *(_QWORD *)JSC::B3::Value::child(*v1980, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1981;
        *((_BYTE *)v11 + 432) = 1;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 22)
        goto LABEL_1664;
      v1972 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1973 = JSC::B3::Value::child(*v1972, 1u);
      if (!*(_QWORD *)v1973 || (*(_WORD *)(*(_QWORD *)v1973 + 12) & 0xFFF) != 3)
        goto LABEL_1664;
      v1975 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v717 = *(_QWORD *)JSC::B3::Value::child(*v1975, 0);
      v1976 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1977 = JSC::B3::Value::child(*v1976, 1u);
      v1978 = *(_QWORD *)v1977;
      if ((*(_WORD *)(*(_QWORD *)v1977 + 12) & 0xFFF) != 3)
        v1978 = 0;
      v1979 = *(unsigned __int8 *)(v1978 + 40);
      if (v1979 == 255)
        goto LABEL_2059;
      if ((v1979 & 0x80) == 0)
      {
        v1968 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
        v1969 = (uint64_t)v11 + 8;
        v1970 = *((unsigned int *)v11 + 100);
        v1971 = v1979 & 0x7F;
        goto LABEL_2243;
      }
LABEL_1664:
      if (!*(_BYTE *)(*(_QWORD *)v11 + 209)
        && *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) - 73 <= 5)
      {
        v1640 = JSC::B3::Value::child(*v12, 0);
        v1641 = *(_QWORD *)v1640;
        if (*(unsigned __int8 *)(*(_QWORD *)v1640 + 12) - 71 >= 8)
          v1641 = 0;
        if (!*(_BYTE *)(v1641 + 60))
          goto LABEL_1251;
      }
      return;
    case 39:
      v1492 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (*(_QWORD *)v1492)
        v1493 = (*(_WORD *)(*(_QWORD *)v1492 + 12) & 0xFFF) == 3;
      else
        v1493 = 0;
      v1494 = v1493;
      v1495 = JSC::B3::Value::child(*v12, 0);
      v1496 = *(_QWORD *)v1495;
      v1497 = *(_WORD *)(*(_QWORD *)v1495 + 12);
      if ((v1497 & 0xFFF) != 3 || *(_WORD *)(*(_QWORD *)v1495 + 12) == 39)
      {
        if (!v1494)
        {
          if (*(_WORD *)(*(_QWORD *)v1495 + 12) == 39)
          {
            v2135 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2136 = *(_QWORD *)JSC::B3::Value::child(*v2135, 0);
            *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2136;
            *((_BYTE *)v11 + 432) = 1;
          }
          goto LABEL_1491;
        }
LABEL_2213:
        if ((v1497 & 0xFFF) != 3)
          v1496 = 0;
LABEL_2215:
        v1918 = *(__int16 *)(v1496 + 40);
        goto LABEL_2216;
      }
      if (v1494)
        goto LABEL_2215;
LABEL_1491:
      v1498 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
      v1341 = *(JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      if (v1498 == 38)
        goto LABEL_1253;
      if (*((_BYTE *)v1341 + 12) != 22)
        goto LABEL_1497;
      v1960 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1961 = JSC::B3::Value::child(*v1960, 1u);
      if (!*(_QWORD *)v1961 || (*(_WORD *)(*(_QWORD *)v1961 + 12) & 0xFFF) != 3)
        goto LABEL_1497;
      v1963 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v717 = *(_QWORD *)JSC::B3::Value::child(*v1963, 0);
      v1964 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1965 = JSC::B3::Value::child(*v1964, 1u);
      v1966 = *(_QWORD *)v1965;
      if ((*(_WORD *)(*(_QWORD *)v1965 + 12) & 0xFFF) != 3)
        v1966 = 0;
      v1967 = *(unsigned __int16 *)(v1966 + 40);
      if (v1967 == 0xFFFF)
      {
LABEL_2059:
        v724 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v725 = 0;
LABEL_752:
        *(_QWORD *)JSC::B3::Value::child(v724, v725) = v717;
        *((_BYTE *)v11 + 432) = 1;
        return;
      }
      if ((v1967 & 0x8000) == 0)
      {
        v1968 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
        v1969 = (uint64_t)v11 + 8;
        v1970 = *((unsigned int *)v11 + 100);
        v1971 = v1967 & 0x7FFF;
LABEL_2243:
        v1928 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>(v1969, v1970, v1968, v1971);
        v1929 = (uint64_t *)v11;
        v1930 = 22;
        v1931 = v1968;
        v1932 = v717;
LABEL_2005:
      }
      else
      {
LABEL_1497:
        if (!*(_BYTE *)(*(_QWORD *)v11 + 209)
          && *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) - 73 <= 5)
        {
          v1499 = JSC::B3::Value::child(*v12, 0);
          v1500 = *(_QWORD *)v1499;
          if (*(unsigned __int8 *)(*(_QWORD *)v1499 + 12) - 71 >= 8)
            v1500 = 0;
          if (*(_BYTE *)(v1500 + 60) == 1)
          {
LABEL_1251:
            v684 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
LABEL_1252:
            v1341 = *(JSC::B3::Value **)JSC::B3::Value::child(v684, 0);
LABEL_1253:
            JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), v1341);
            goto LABEL_266;
          }
        }
      }
      return;
    case 40:
      v1896 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1897 = *(_QWORD *)v1896;
      v1898 = *(_WORD *)(*(_QWORD *)v1896 + 12) & 0xFFF;
      v1899 = JSC::B3::Value::child(*v12, 0);
      v1637 = *(_QWORD *)v1899;
      v1638 = *(_WORD *)(*(_QWORD *)v1899 + 12);
      if (v1897)
        v1900 = v1898 == 3;
      else
        v1900 = 0;
      if (v1900)
      {
LABEL_2061:
        if ((v1638 & 0xFFF) != 3)
          v1637 = 0;
        v1918 = *(char *)(v1637 + 40);
LABEL_2216:
        v1916 = *(JSC::B3::Procedure **)v11;
        v1917 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        goto LABEL_1992;
      }
      if (*(_WORD *)(*(_QWORD *)v1899 + 12) == 38
        || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 39)
      {
        v1983 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v1984 = *(_QWORD *)JSC::B3::Value::child(*v1983, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1984;
        *((_BYTE *)v11 + 432) = 1;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 22)
        return;
      v1901 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1902 = JSC::B3::Value::child(*v1901, 1u);
      if (!*(_QWORD *)v1902 || (*(_WORD *)(*(_QWORD *)v1902 + 12) & 0xFFF) != 3)
        return;
      v1904 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v717 = *(_QWORD *)JSC::B3::Value::child(*v1904, 0);
      v1905 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1906 = JSC::B3::Value::child(*v1905, 1u);
      v1907 = *(_QWORD *)v1906;
      if ((*(_WORD *)(*(_QWORD *)v1906 + 12) & 0xFFF) != 3)
        v1907 = 0;
      v1908 = *(unsigned __int8 *)(v1907 + 40);
      if (v1908 == 255)
        goto LABEL_2059;
      if ((v1908 & 0x80) != 0)
        return;
      v1851 = (uint64_t *)((char *)v11 + 8);
      v1852 = *((unsigned int *)v11 + 100);
      v1853 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v1854 = v1908 & 0x7F;
      goto LABEL_1907;
    case 41:
      v1836 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1837 = *(_QWORD *)v1836;
      v1838 = *(_WORD *)(*(_QWORD *)v1836 + 12) & 0xFFF;
      v1839 = JSC::B3::Value::child(*v12, 0);
      v1496 = *(_QWORD *)v1839;
      v1497 = *(_WORD *)(*(_QWORD *)v1839 + 12);
      if (v1837)
        v1840 = v1838 == 3;
      else
        v1840 = 0;
      if (v1840)
        goto LABEL_2213;
      if (*(_WORD *)(*(_QWORD *)v1839 + 12) == 39)
      {
        v2138 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v2139 = *(_QWORD *)JSC::B3::Value::child(*v2138, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2139;
        *((_BYTE *)v11 + 432) = 1;
      }
      v1841 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
      v1842 = *v12;
      if (v1841 == 38)
      {
        v987 = *((_QWORD *)v1842 + 3);
        goto LABEL_2038;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v1842, 0) + 12) != 22)
        return;
      v1843 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1844 = JSC::B3::Value::child(*v1843, 1u);
      if (!*(_QWORD *)v1844 || (*(_WORD *)(*(_QWORD *)v1844 + 12) & 0xFFF) != 3)
        return;
      v1846 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v717 = *(_QWORD *)JSC::B3::Value::child(*v1846, 0);
      v1847 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v1848 = JSC::B3::Value::child(*v1847, 1u);
      v1849 = *(_QWORD *)v1848;
      if ((*(_WORD *)(*(_QWORD *)v1848 + 12) & 0xFFF) != 3)
        v1849 = 0;
      v1850 = *(unsigned __int16 *)(v1849 + 40);
      if (v1850 == 0xFFFF)
        goto LABEL_2059;
      if ((v1850 & 0x8000) != 0)
        return;
      v1851 = (uint64_t *)((char *)v11 + 8);
      v1852 = *((unsigned int *)v11 + 100);
      v1853 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v1854 = v1850 & 0x7FFF;
LABEL_1907:
      v1855 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v1851, v1852, v1853, v1854);
      v1856 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(v1851, *((unsigned int *)v11 + 100), 22, *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), v717, v1855);
      v1732 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
      v989 = v1856;
      v990 = (uint64_t *)v11;
      v991 = 43;
      goto LABEL_1768;
    case 42:
      v982 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (*(_QWORD *)v982)
        v983 = (*(_WORD *)(*(_QWORD *)v982 + 12) & 0xFFF) == 3;
      else
        v983 = 0;
      if (!v983)
      {
        if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 22)
          goto LABEL_966;
        v1721 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1722 = JSC::B3::Value::child(*v1721, 1u);
        if (!*(_QWORD *)v1722 || (*(_WORD *)(*(_QWORD *)v1722 + 12) & 0xFFF) != 3)
          goto LABEL_966;
        v1724 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1725 = JSC::B3::Value::child(*v1724, 1u);
        v1726 = *(_QWORD *)v1725;
        if ((*(_WORD *)(*(_QWORD *)v1725 + 12) & 0xFFF) != 3)
          v1726 = 0;
        if ((*(_DWORD *)(v1726 + 40) & 0x80000000) == 0)
        {
          v1727 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v987 = *((_QWORD *)v1727 + 3);
          v989 = *(_QWORD *)JSC::B3::Value::child(v1727, 0);
          v990 = (uint64_t *)v11;
          v991 = 43;
        }
        else
        {
LABEL_966:
          v984 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
          v985 = *v12;
          if (v984 == 38)
          {
            v987 = *((_QWORD *)v985 + 3);
            v1842 = *(JSC::B3::Value **)JSC::B3::Value::child(v985, 0);
LABEL_2038:
            v989 = *(_QWORD *)JSC::B3::Value::child(v1842, 0);
            v990 = (uint64_t *)v11;
            v991 = 40;
          }
          else
          {
            if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v985, 0) + 12) != 39)
              return;
            v986 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v987 = *((_QWORD *)v986 + 3);
            v988 = (JSC::B3::Value **)JSC::B3::Value::child(v986, 0);
            v989 = *(_QWORD *)JSC::B3::Value::child(*v988, 0);
            v990 = (uint64_t *)v11;
            v991 = 41;
          }
        }
        goto LABEL_1767;
      }
      v453 = *(JSC::B3::Value **)v11;
      v454 = v11;
      v1443 = *((_QWORD *)v11 + 51);
      v1444 = JSC::B3::Value::child((JSC::B3::Value *)v1443, 0);
      v1445 = *(_QWORD *)v1444;
      if ((*(_WORD *)(*(_QWORD *)v1444 + 12) & 0xFFF) != 3)
        v1445 = 0;
      v458 = *(int *)(v1445 + 40);
      v459 = *(_QWORD *)(v1443 + 24);
      v1446 = *(_DWORD *)(v1443 + 16);
      if (v1446 >= 0x80000000)
        v1446 = 0x80000000;
      switch(v1446)
      {
        case 1u:
          goto LABEL_456;
        case 2u:
          goto LABEL_1570;
        case 3u:
          v2405 = (float)(int)v458;
          goto LABEL_2497;
      }
      if (v1446 != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x198005EACLL);
      }
      v1447 = (double)(int)v458;
      goto LABEL_2482;
    case 43:
      v451 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (*(_QWORD *)v451)
        v452 = (*(_WORD *)(*(_QWORD *)v451 + 12) & 0xFFF) == 3;
      else
        v452 = 0;
      if (!v452)
        return;
      v453 = *(JSC::B3::Value **)v11;
      v454 = v11;
      v455 = *((_QWORD *)v11 + 51);
      v456 = JSC::B3::Value::child((JSC::B3::Value *)v455, 0);
      v457 = *(_QWORD *)v456;
      if ((*(_WORD *)(*(_QWORD *)v456 + 12) & 0xFFF) != 3)
        v457 = 0;
      v458 = *(unsigned int *)(v457 + 40);
      v459 = *(_QWORD *)(v455 + 24);
      v460 = *(_DWORD *)(v455 + 16);
      if (v460 >= 0x80000000)
        v460 = 0x80000000;
      switch(v460)
      {
        case 1u:
          goto LABEL_456;
        case 2u:
          goto LABEL_1570;
        case 3u:
          v2405 = (float)v458;
          goto LABEL_2497;
      }
      if (v460 != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x198005E84);
      }
      v1447 = (double)v458;
      goto LABEL_2482;
    case 44:
      v491 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (*(_QWORD *)v491)
        v492 = (*(_WORD *)(*(_QWORD *)v491 + 12) & 0xFFF) == 4;
      else
        v492 = 0;
      if (v492)
      {
        v453 = *(JSC::B3::Value **)v11;
        v454 = v11;
        v1534 = *((_QWORD *)v11 + 51);
        v1535 = JSC::B3::Value::child((JSC::B3::Value *)v1534, 0);
        v1536 = *(_QWORD *)v1535;
        if ((*(_WORD *)(*(_QWORD *)v1535 + 12) & 0xFFF) != 4)
          v1536 = 0;
        v458 = *(_QWORD *)(v1536 + 40);
        v459 = *(_QWORD *)(v1534 + 24);
        v1537 = *(_DWORD *)(v1534 + 16);
        if (v1537 >= 0x80000000)
          v1537 = 0x80000000;
        if (v1537 == 1)
        {
LABEL_456:
          v461 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v453, v459, v458);
        }
        else
        {
          v458 = (int)v458;
          switch(v1537)
          {
            case 2u:
LABEL_1570:
              v461 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)v453, v459, v458);
              break;
            case 3u:
              v2405 = (float)(int)v458;
LABEL_2497:
              v461 = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(v453, v459, v2405);
              break;
            case 4u:
              v1447 = (double)(int)v458;
LABEL_2482:
              v461 = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)v453, v459, v1447);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198005EF4);
          }
        }
        v467 = (unsigned __int8 *)v461;
        if (v461)
        {
          *(_QWORD *)v2417 = *((unsigned int *)v454 + 100);
          *(_QWORD *)&v2417[8] = v461;
LABEL_459:
          v468 = (uint64_t *)((char *)v454 + 16);
          v469 = *((unsigned int *)v454 + 7);
          if ((_DWORD)v469 == *((_DWORD *)v454 + 6))
          {
            v2141 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v468, (void *)(v469 + 1), (unint64_t)v2417, v462, v463, v464, v465, v466);
            v469 = *((unsigned int *)v454 + 7);
            v470 = *((_QWORD *)v454 + 2);
            v471 = *v2141;
          }
          else
          {
            v470 = *v468;
            v471 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v470 + 16 * v469) = v471;
          ++*((_DWORD *)v454 + 7);
          v472 = (JSC::B3::Value *)*((_QWORD *)v454 + 51);
          v473 = v467;
          goto LABEL_462;
        }
      }
      else
      {
        v493 = JSC::B3::Value::child(*v12, 0);
        v494 = *(_QWORD *)v493;
        v495 = *(_WORD *)(*(_QWORD *)v493 + 12) & 0xFFF;
        v496 = JSC::B3::Value::child(*v12, 0);
        v497 = *(_QWORD *)v496;
        if (v494)
          v498 = v495 == 5;
        else
          v498 = 0;
        if (v498)
        {
          if ((*(_WORD *)(*(_QWORD *)v496 + 12) & 0xFFF) != 5)
            v497 = 0;
          v518 = JSC::B3::Procedure::addConstant(*(JSC::B3::Value **)v11, *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), *(_DWORD *)(*((_QWORD *)v11 + 51) + 16), *(_QWORD *)(v497 + 40));
          goto LABEL_1713;
        }
        if (*(_WORD *)(*(_QWORD *)v496 + 12) == 42
          || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 43)
        {
          v1448 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1449 = JSC::B3::Value::child(*v1448, 0);
          v531 = *(_QWORD *)v1449;
          v532 = *v12;
          v533 = *((_DWORD *)*v12 + 4);
          if (v533 != *(_DWORD *)(*(_QWORD *)v1449 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x198000C04);
          }
          goto LABEL_1089;
        }
        v499 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12);
        v500 = *v12;
        if (v499 == 40)
        {
          v987 = *((_QWORD *)v500 + 3);
          v2012 = (JSC::B3::Value **)JSC::B3::Value::child(v500, 0);
          v989 = *(_QWORD *)JSC::B3::Value::child(*v2012, 0);
          v990 = (uint64_t *)v11;
          v991 = 38;
          goto LABEL_1767;
        }
        v501 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v500, 0) + 12);
        v502 = *v12;
        if (v501 == 41)
        {
          v987 = *((_QWORD *)v502 + 3);
          v2013 = (JSC::B3::Value **)JSC::B3::Value::child(v502, 0);
          v989 = *(_QWORD *)JSC::B3::Value::child(*v2013, 0);
          v990 = (uint64_t *)v11;
          v991 = 39;
          goto LABEL_1767;
        }
        v503 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v502, 0) + 12);
        v660 = v503 > 0x18;
        v504 = (1 << v503) & 0x180C000;
        if (!v660 && v504 != 0)
        {
          v506 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v507 = JSC::B3::Value::child(*v506, 1u);
          if (*(_QWORD *)v507)
          {
            if ((*(_WORD *)(*(_QWORD *)v507 + 12) & 0xFFF) == 4)
            {
              v508 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v509 = JSC::B3::Value::child(*v508, 1u);
              v510 = *(_QWORD *)v509;
              if ((*(_WORD *)(*(_QWORD *)v509 + 12) & 0xFFF) != 4)
                v510 = 0;
              if (!*(_DWORD *)(v510 + 40))
              {
LABEL_519:
                v511 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
                v512 = *(_QWORD *)JSC::B3::Value::child(*v511, 0);
                *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v512;
                *((_BYTE *)v11 + 432) = 1;
              }
            }
          }
        }
      }
      return;
    case 47:
      v609 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v518 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v609 + 216))(*v609, *(_QWORD *)v11);
      if (v518)
        goto LABEL_1713;
      return;
    case 48:
      v1417 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v518 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1417 + 224))(*v1417, *(_QWORD *)v11);
      if (v518)
        goto LABEL_1713;
      return;
    case 49:
      v981 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v518 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v981 + 240))(*v981, *(_QWORD *)v11);
      if (v518)
        goto LABEL_1713;
      return;
    case 50:
      if ((*((_WORD *)v9 + 6) & 0x400) == 0)
      {
        v1245 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
        v9 = *v12;
        if (*(_BYTE *)(*(_QWORD *)v1245 + 12) == 49)
        {
          v684 = *(JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          goto LABEL_1252;
        }
      }
      v1246 = (_QWORD *)JSC::B3::Value::child(v9, 0);
      v518 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1246 + 232))(*v1246, *(_QWORD *)v11);
      if (!v518)
        return;
      goto LABEL_1713;
    case 51:
      v403 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      if (JSC::B3::Value::returnsBool(*v403))
      {
        v944 = JSC::B3::Value::child(*v12, 1u);
        v945 = *(_QWORD *)v944 && (*(_WORD *)(*(_QWORD *)v944 + 12) & 0xFFF) == 3;
        if (v945 && !*(_DWORD *)(*(_QWORD *)v944 + 40))
        {
          v946 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v808 = *((_QWORD *)v946 + 3);
          v809 = *(_QWORD *)JSC::B3::Value::child(v946, 0);
          v947 = *((unsigned int *)v11 + 100);
          v948 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
          v949 = *((_QWORD *)v11 + 1);
          v818 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)(v818 + 8) = -1;
          *(_WORD *)(v818 + 12) = 3;
          *(_DWORD *)(v818 + 16) = 1;
          *(_BYTE *)(v818 + 20) = 0;
          *(_QWORD *)(v818 + 24) = v948;
          *(_QWORD *)(v818 + 32) = 0;
          *(_QWORD *)v818 = off_1E357D8E0;
          *(_DWORD *)(v818 + 40) = 1;
          v955 = *(unsigned int *)(v949 + 92);
          if ((_DWORD)v955)
          {
            v956 = *(_QWORD *)(*(_QWORD *)(v949 + 80) + 8 * v955 - 8);
            *(_DWORD *)(v949 + 92) = v955 - 1;
            v957 = *(_QWORD *)(v949 + 64);
          }
          else
          {
            v956 = *(unsigned int *)(v949 + 76);
            if ((_DWORD)v956 == *(_DWORD *)(v949 + 72))
            {
              v1604 = v956 + (v956 >> 2);
              if (v1604 >= 0x10)
                v1605 = v1604 + 1;
              else
                v1605 = 16;
              if (v1605 <= v956 + 1)
                v1606 = v956 + 1;
              else
                v1606 = v1605;
              if (v1606 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198006164);
              }
              v1607 = *(const void **)(v949 + 64);
              v1608 = (void *)WTF::fastMalloc((WTF *)(8 * v1606));
              *(_DWORD *)(v949 + 72) = v1606;
              *(_QWORD *)(v949 + 64) = v1608;
              memcpy(v1608, v1607, 8 * v956);
              if (v1607)
              {
                if (*(const void **)(v949 + 64) == v1607)
                {
                  *(_QWORD *)(v949 + 64) = 0;
                  *(_DWORD *)(v949 + 72) = 0;
                }
                WTF::fastFree((unint64_t)v1607, v1609, v1610, v950, v951, v952, v953, v954);
              }
              v1611 = *(unsigned int *)(v949 + 76);
              v957 = *(_QWORD *)(v949 + 64);
              *(_QWORD *)(v957 + 8 * v1611) = 0;
              *(_DWORD *)(v949 + 76) = v1611 + 1;
            }
            else
            {
              v957 = *(_QWORD *)(v949 + 64);
              *(_QWORD *)(v957 + 8 * v956) = 0;
              *(_DWORD *)(v949 + 76) = v956 + 1;
            }
          }
          *(_DWORD *)(v818 + 8) = v956;
          *(_QWORD *)(v957 + 8 * v956) = v818;
          *(_QWORD *)v2417 = v947;
          *(_QWORD *)&v2417[8] = v818;
          v958 = (uint64_t *)((char *)v11 + 16);
          v959 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v959 == *((_DWORD *)v11 + 6))
          {
            v1785 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v958, (void *)(v959 + 1), (unint64_t)v2417, v950, v951, v952, v953, v954);
            v959 = *((unsigned int *)v11 + 7);
            v960 = *((_QWORD *)v11 + 2);
            v961 = *v1785;
          }
          else
          {
            v960 = *v958;
            v961 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v960 + 16 * v959) = v961;
          ++*((_DWORD *)v11 + 7);
          v826 = (uint64_t *)v11;
          v827 = 24;
LABEL_851:
          return;
        }
      }
      v404 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      if (JSC::B3::Value::returnsBool(*v404))
      {
        v1728 = JSC::B3::Value::child(*v12, 1u);
        v1729 = *(_QWORD *)v1728 && (*(_WORD *)(*(_QWORD *)v1728 + 12) & 0xFFF) == 3;
        if (v1729 && *(_DWORD *)(*(_QWORD *)v1728 + 40) == 1)
          goto LABEL_1251;
      }
      v405 = *(JSC::B3::Procedure **)v11;
      v406 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v407 = *((_QWORD *)v406 + 3);
      v408 = *(_QWORD *)JSC::B3::Value::child(v406, 0);
      v409 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v410 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v408 + 304))(v408, *v409);
      if (v410 == 2)
        return;
      v411 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v405, v407, v410 == 1);
      if (!v411)
        return;
      v335 = v411;
      *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
      *(_QWORD *)&v2417[8] = v411;
      v417 = (uint64_t *)((char *)v11 + 16);
      v418 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v418 == *((_DWORD *)v11 + 6))
      {
        v1934 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v417, (void *)(v418 + 1), (unint64_t)v2417, v412, v413, v414, v415, v416);
        v418 = *((unsigned int *)v11 + 7);
        v419 = *((_QWORD *)v11 + 2);
        v420 = *v1934;
      }
      else
      {
        v419 = *v417;
        v420 = *(_OWORD *)v2417;
      }
      *(_OWORD *)(v419 + 16 * v418) = v420;
      ++*((_DWORD *)v11 + 7);
      v343 = *((_QWORD *)v11 + 51);
      v344 = *(_DWORD *)(v343 + 16);
      if (v344 != *(_DWORD *)(v335 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x197FFC494);
      }
      goto LABEL_356;
    case 52:
      v348 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      if (!JSC::B3::Value::returnsBool(*v348))
        goto LABEL_360;
      v1386 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v1386)
        v1387 = (*(_WORD *)(*(_QWORD *)v1386 + 12) & 0xFFF) == 3;
      else
        v1387 = 0;
      if (v1387 && !*(_DWORD *)(*(_QWORD *)v1386 + 40))
      {
        v1388 = JSC::B3::Value::child(*v12, 0);
        v531 = *(_QWORD *)v1388;
        v532 = *v12;
        v533 = *((_DWORD *)*v12 + 4);
        if (v533 != *(_DWORD *)(*(_QWORD *)v1388 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198000528);
        }
        goto LABEL_1089;
      }
      v1544 = JSC::B3::Value::child(*v12, 1u);
      if (*(_QWORD *)v1544)
        v1545 = (*(_WORD *)(*(_QWORD *)v1544 + 12) & 0xFFF) == 3;
      else
        v1545 = 0;
      if (v1545 && *(_DWORD *)(*(_QWORD *)v1544 + 40) == 1)
      {
        v1546 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v750 = *((_QWORD *)v1546 + 3);
        v752 = *(_QWORD *)JSC::B3::Value::child(v1546, 0);
        inserted = JSC::B3::InsertionSet::insertIntConstant((uint64_t)v11 + 8, *((unsigned int *)v11 + 100), *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), 1u, 0);
        v401 = (uint64_t *)v11;
        v402 = 51;
        goto LABEL_1593;
      }
LABEL_360:
      v349 = *(JSC::B3::Procedure **)v11;
      v350 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v351 = *((_QWORD *)v350 + 3);
      v352 = *(_QWORD *)JSC::B3::Value::child(v350, 0);
      v353 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v354 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v352 + 312))(v352, *v353);
      if (v354 != 2)
      {
        v355 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v349, v351, v354 == 1);
        if (v355)
        {
          v335 = v355;
          *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
          *(_QWORD *)&v2417[8] = v355;
          v361 = (uint64_t *)((char *)v11 + 16);
          v362 = *((unsigned int *)v11 + 7);
          if ((_DWORD)v362 == *((_DWORD *)v11 + 6))
          {
            v1925 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v361, (void *)(v362 + 1), (unint64_t)v2417, v356, v357, v358, v359, v360);
            v362 = *((unsigned int *)v11 + 7);
            v363 = *((_QWORD *)v11 + 2);
            v364 = *v1925;
          }
          else
          {
            v363 = *v361;
            v364 = *(_OWORD *)v2417;
          }
          *(_OWORD *)(v363 + 16 * v362) = v364;
          ++*((_DWORD *)v11 + 7);
          v343 = *((_QWORD *)v11 + 51);
          v344 = *(_DWORD *)(v343 + 16);
          if (v344 != *(_DWORD *)(v335 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x197FFC108);
          }
          goto LABEL_356;
        }
      }
      return;
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      if (*((_BYTE *)v9 + 20) == 4)
      {
        v2394 = JSC::B3::Value::childrenVector(*((JSC::B3::Value **)this + 51));
        if (*(_DWORD *)(v2394 + 12) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x198006254);
        }
        v320 = *(char **)v2394;
      }
      else
      {
        v320 = (char *)v9 + 40;
      }
      if (*(unsigned __int8 *)(*((_QWORD *)v320 + 1) + 12) - 3 < 5
        || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 12) == 72
        || *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 12) - 3 >= 5
        && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v9, 1u) + 12) != 72
        && (v534 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v9, 0) + 8),
            v534 <= *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v9, 1u) + 8)))
      {
        v321 = 0;
        v322 = *((_BYTE *)v9 + 12);
        v323 = 1;
LABEL_346:
        v324 = *(_QWORD *)JSC::B3::Value::child(v9, v321);
        v325 = *(_QWORD *)JSC::B3::Value::child(v9, v323);
        switch(v322)
        {
          case '5':
            goto LABEL_1327;
          case '6':
            goto LABEL_1082;
          case '7':
            goto LABEL_1396;
          case '8':
            goto LABEL_1475;
          case '9':
            goto LABEL_1424;
          case ':':
            goto LABEL_347;
          case ';':
            goto LABEL_1756;
          case '<':
            goto LABEL_971;
          default:
            __break(0xC471u);
            JUMPOUT(0x1980038F0);
        }
      }
      v322 = *((_BYTE *)v9 + 12);
      switch(v322)
      {
        case '5':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1082:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 320))(v325, v324);
          v327 = 54;
          goto LABEL_348;
        case '6':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1327:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 328))(v325, v324);
          v327 = 53;
          goto LABEL_348;
        case '7':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1475:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 336))(v325, v324);
          v327 = 56;
          goto LABEL_348;
        case '8':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1396:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 344))(v325, v324);
          v327 = 55;
          goto LABEL_348;
        case '9':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_347:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 352))(v325, v324);
          v327 = 58;
          goto LABEL_348;
        case ':':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1424:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 360))(v325, v324);
          v327 = 57;
          goto LABEL_348;
        case ';':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_971:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 368))(v325, v324);
          v327 = 60;
          goto LABEL_348;
        case '<':
          v324 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
          v325 = *(_QWORD *)JSC::B3::Value::child(v9, 0);
LABEL_1756:
          v326 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 376))(v325, v324);
          v327 = 59;
LABEL_348:
          v328 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          if (v326 == 2)
            goto LABEL_349;
          v640 = v11;
          v1370 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(*(_QWORD *)v11, *((_QWORD *)v328 + 3), v326 == 1);
          if (v1370)
          {
            v1376 = v1370;
            *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
            *(_QWORD *)&v2417[8] = v1370;
            v1377 = (uint64_t *)((char *)v11 + 16);
            v1378 = *((unsigned int *)v11 + 7);
            if ((_DWORD)v1378 == *((_DWORD *)v11 + 6))
            {
              v1924 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1377, (void *)(v1378 + 1), (unint64_t)v2417, v1371, v1372, v1373, v1374, v1375);
              v1378 = *((unsigned int *)v11 + 7);
              v1379 = *((_QWORD *)v11 + 2);
              v1380 = *v1924;
            }
            else
            {
              v1379 = *v1377;
              v1380 = *(_OWORD *)v2417;
            }
            *(_OWORD *)(v1379 + 16 * v1378) = v1380;
            ++*((_DWORD *)v11 + 7);
            v1381 = *((_QWORD *)v11 + 51);
            v1382 = *(_DWORD *)(v1381 + 16);
            if (v1382 != *(_DWORD *)(v1376 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x198004B58);
            }
            v1383 = *(_QWORD *)(v1381 + 32);
            v1384 = *(_DWORD *)(v1381 + 8);
            (**(void (***)(_QWORD))v1381)(*((_QWORD *)v11 + 51));
            *(_QWORD *)v1381 = off_1E357F5F0;
            if (v1382)
            {
              *(_QWORD *)(v1381 + 40) = v1376;
              v1385 = 1;
            }
            else
            {
              v1385 = 0;
            }
            *(_WORD *)(v1381 + 12) = v1385;
            *(_DWORD *)(v1381 + 16) = v1382;
            *(_BYTE *)(v1381 + 20) = v1385;
            *(_DWORD *)(v1381 + 8) = v1384;
            *(_QWORD *)(v1381 + 32) = v1383;
            goto LABEL_1394;
          }
          v328 = *v12;
LABEL_349:
          if (v327 != *((unsigned __int8 *)v328 + 12))
          {
            v329 = *(JSC::B3::Procedure **)v11;
            v335 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v327, *((_QWORD *)v328 + 3), v324, v325);
            v336 = *((unsigned int *)v329 + 23);
            if ((_DWORD)v336)
            {
              v337 = *(_QWORD *)(*((_QWORD *)v329 + 10) + 8 * v336 - 8);
              *((_DWORD *)v329 + 23) = v336 - 1;
              v338 = *((_QWORD *)v329 + 8);
            }
            else
            {
              v337 = *((unsigned int *)v329 + 19);
              if ((_DWORD)v337 == *((_DWORD *)v329 + 18))
              {
                v1455 = v337 + (v337 >> 2);
                if (v1455 >= 0x10)
                  v1456 = v1455 + 1;
                else
                  v1456 = 16;
                if (v1456 <= v337 + 1)
                  v1457 = v337 + 1;
                else
                  v1457 = v1456;
                if (v1457 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19800614CLL);
                }
                v1458 = (const void *)*((_QWORD *)v329 + 8);
                v1459 = (void *)WTF::fastMalloc((WTF *)(8 * v1457));
                *((_DWORD *)v329 + 18) = v1457;
                *((_QWORD *)v329 + 8) = v1459;
                memcpy(v1459, v1458, 8 * v337);
                if (v1458)
                {
                  if (*((const void **)v329 + 8) == v1458)
                  {
                    *((_QWORD *)v329 + 8) = 0;
                    *((_DWORD *)v329 + 18) = 0;
                  }
                  WTF::fastFree((unint64_t)v1458, v1460, v1461, v330, v331, v332, v333, v334);
                }
                v1462 = *((unsigned int *)v329 + 19);
                v338 = *((_QWORD *)v329 + 8);
                *(_QWORD *)(v338 + 8 * v1462) = 0;
                *((_DWORD *)v329 + 19) = v1462 + 1;
              }
              else
              {
                v338 = *((_QWORD *)v329 + 8);
                *(_QWORD *)(v338 + 8 * v337) = 0;
                *((_DWORD *)v329 + 19) = v337 + 1;
              }
            }
            *(_DWORD *)(v335 + 8) = v337;
            *(_QWORD *)(v338 + 8 * v337) = v335;
            *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
            *(_QWORD *)&v2417[8] = v335;
            v339 = (uint64_t *)((char *)v11 + 16);
            v340 = *((unsigned int *)v11 + 7);
            if ((_DWORD)v340 == *((_DWORD *)v11 + 6))
            {
              v1585 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v339, (void *)(v340 + 1), (unint64_t)v2417, v330, v331, v332, v333, v334);
              v340 = *((unsigned int *)v11 + 7);
              v341 = *((_QWORD *)v11 + 2);
              v342 = *v1585;
            }
            else
            {
              v341 = *v339;
              v342 = *(_OWORD *)v2417;
            }
            *(_OWORD *)(v341 + 16 * v340) = v342;
            ++*((_DWORD *)v11 + 7);
            v343 = *((_QWORD *)v11 + 51);
            v344 = *(_DWORD *)(v343 + 16);
            if (v344 != *(_DWORD *)(v335 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x198003094);
            }
            goto LABEL_356;
          }
          return;
        default:
          v323 = 0;
          v321 = 1;
          goto LABEL_346;
      }
      return;
    case 61:
      v915 = *(JSC::B3::Procedure **)v11;
      v916 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v917 = *((_QWORD *)v916 + 3);
      v918 = *(_QWORD *)JSC::B3::Value::child(v916, 1u);
      v919 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v920 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v918 + 384))(v918, *v919);
      if (v920 == 2)
        return;
      v921 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v915, v917, v920 == 1);
      if (!v921)
        return;
      v335 = v921;
      *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
      *(_QWORD *)&v2417[8] = v921;
      v927 = (uint64_t *)((char *)v11 + 16);
      v928 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v928 == *((_DWORD *)v11 + 6))
      {
        v2324 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v927, (void *)(v928 + 1), (unint64_t)v2417, v922, v923, v924, v925, v926);
        v928 = *((unsigned int *)v11 + 7);
        v929 = *((_QWORD *)v11 + 2);
        v930 = *v2324;
      }
      else
      {
        v929 = *v927;
        v930 = *(_OWORD *)v2417;
      }
      *(_OWORD *)(v929 + 16 * v928) = v930;
      ++*((_DWORD *)v11 + 7);
      v343 = *((_QWORD *)v11 + 51);
      v344 = *(_DWORD *)(v343 + 16);
      if (v344 != *(_DWORD *)(v335 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x197FFE8F8);
      }
      goto LABEL_356;
    case 62:
      v558 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v559 = *(_QWORD *)v558;
      v560 = *(_WORD *)(*(_QWORD *)v558 + 12) & 0xFFF;
      v561 = JSC::B3::Value::child(*v12, 0);
      v562 = *(_QWORD *)v561;
      if (v559)
        v563 = v560 == 3;
      else
        v563 = 0;
      if (v563)
      {
        if ((*(_WORD *)(*(_QWORD *)v561 + 12) & 0xFFF) != 3)
          v562 = 0;
        if (*(_DWORD *)(v562 + 40))
          v1467 = 1;
        else
          v1467 = 2;
        v1468 = JSC::B3::Value::child(*v12, v1467);
        v531 = *(_QWORD *)v1468;
        v532 = *v12;
        v533 = *((_DWORD *)*v12 + 4);
        if (v533 != *(_DWORD *)(*(_QWORD *)v1468 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198000E78);
        }
LABEL_1089:
        v574 = *((_QWORD *)v532 + 4);
        v575 = *((_DWORD *)v532 + 2);
        (**(void (***)(JSC::B3::Value *))v532)(v532);
        *(_QWORD *)v532 = off_1E357F5F0;
        if (v533)
        {
          *((_QWORD *)v532 + 5) = v531;
LABEL_629:
          v576 = 1;
        }
        else
        {
LABEL_1604:
          v576 = 0;
        }
        *((_WORD *)v532 + 6) = v576;
        *((_DWORD *)v532 + 4) = v533;
        *((_BYTE *)v532 + 20) = v576;
        *((_DWORD *)v532 + 2) = v575;
        *((_QWORD *)v532 + 4) = v574;
        goto LABEL_266;
      }
      if (*(_WORD *)(*(_QWORD *)v561 + 12) != 51)
        goto LABEL_610;
      v903 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v904 = JSC::B3::Value::child(*v903, 1u);
      v905 = *(_QWORD *)v904;
      v906 = *(_WORD *)(*(_QWORD *)v904 + 12) & 0xFFF;
      if (*(_QWORD *)v904)
        v907 = v906 == 3;
      else
        v907 = 0;
      if (v907)
      {
        v909 = *(int *)(v905 + 40);
      }
      else
      {
        if (v905)
          v908 = v906 == 4;
        else
          v908 = 0;
        if (!v908)
        {
LABEL_610:
          if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 24
            || ((v1420 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                 v1421 = JSC::B3::Value::child(*v1420, 1u),
                 *(_QWORD *)v1421)
              ? (v1422 = (*(_WORD *)(*(_QWORD *)v1421 + 12) & 0xFFF) == 3)
              : (v1422 = 0),
                !v1422
             || *(_DWORD *)(*(_QWORD *)v1421 + 40) != 1
             || (v1423 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                 v1424 = (JSC::B3::Value **)JSC::B3::Value::child(*v1423, 0),
                 !JSC::B3::Value::returnsBool(*v1424))))
          {
            if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 22)
            {
              v1389 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v1390 = JSC::B3::Value::child(*v1389, 1u);
              if (*(_QWORD *)v1390 && (*(_WORD *)(*(_QWORD *)v1390 + 12) & 0xFFFu) - 3 <= 1)
              {
                v1392 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                v1393 = JSC::B3::Value::child(*v1392, 1u);
                v1394 = *(_QWORD *)v1393;
                v1395 = *(_WORD *)(*(_QWORD *)v1393 + 12) & 0xFFF;
                if (*(_QWORD *)v1393 && v1395 == 3)
                {
                  LODWORD(v1394) = *(_DWORD *)(v1394 + 40);
                }
                else
                {
                  if (v1395 != 4)
                    v1394 = 0;
                  v1394 = *(_QWORD *)(v1394 + 40);
                }
                if ((v1394 & 1) != 0)
                {
                  v1397 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
                  v1398 = (JSC::B3::Value **)JSC::B3::Value::child(*v1397, 0);
                  if (JSC::B3::Value::returnsBool(*v1398))
                  {
LABEL_799:
                    v784 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
                    v169 = *(JSC::B3::Value **)JSC::B3::Value::child(*v784, 0);
LABEL_217:
                    *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v169;
                    goto LABEL_266;
                  }
                }
              }
            }
            v564 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
            if (v564 == *(_QWORD *)JSC::B3::Value::child(*v12, 2u))
            {
              v565 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
              JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), *v565);
              *((_BYTE *)v11 + 432) = 1;
            }
            return;
          }
LABEL_919:
          v910 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v911 = *(_QWORD *)JSC::B3::Value::child(*v910, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v911;
          v912 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
          v913 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 2u);
          v914 = *v912;
          *v912 = *v913;
          *v913 = v914;
          *((_BYTE *)v11 + 432) = 1;
          return;
        }
        v909 = *(_QWORD *)(v905 + 40);
      }
      if (!v909)
        goto LABEL_919;
      goto LABEL_610;
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      v13 = *((unsigned __int8 *)v9 + 20);
      if (v13 == 4)
      {
        v1988 = JSC::B3::Value::childrenVector(*((JSC::B3::Value **)this + 51));
        v10 = *(unsigned int *)(v1988 + 12);
        if (!(_DWORD)v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1980061CCLL);
        }
        v14 = (JSC::B3::Value **)(*(_QWORD *)v1988 + 8 * v10 - 8);
        v9 = *v12;
        LOBYTE(v10) = *((_BYTE *)*v12 + 12);
      }
      else
      {
        v14 = (JSC::B3::Value **)((char *)v9 + 8 * v13 + 56);
      }
      v15 = *v14;
      if ((((_BYTE)v10 - 63) & 0xF0) != 0)
        v9 = 0;
      if (*((_BYTE *)v15 + 12) == 14)
      {
        v365 = JSC::B3::Value::child(*v14, 1u);
        if (*(_QWORD *)v365 && (*(_WORD *)(*(_QWORD *)v365 + 12) & 0xFFF) == 4)
        {
          v367 = JSC::B3::Value::child(v15, 1u);
          v368 = *(_QWORD *)v367;
          if ((*(_WORD *)(*(_QWORD *)v367 + 12) & 0xFFF) != 4)
            v368 = 0;
          v369 = *(_QWORD *)(v368 + 40);
          v370 = *((int *)v9 + 10);
          if (!__OFADD__(v369, v370))
          {
            v371 = v369 + v370;
            if (v369 + v370 == (_DWORD)v369 + (_DWORD)v370)
            {
              v15 = *(JSC::B3::Value **)JSC::B3::Value::child(v15, 0);
              *(_QWORD *)JSC::B3::MemoryValue::lastChild(v9) = v15;
              *((_DWORD *)v9 + 10) = v371;
              *((_BYTE *)v11 + 432) = 1;
            }
          }
        }
      }
      if (*((_DWORD *)v9 + 10))
      {
        v16 = (JSC::B3::Value *)(*(uint64_t (**)(JSC::B3::Value *, _QWORD))(*(_QWORD *)v15 + 32))(v15, *(_QWORD *)v11);
        if (v16)
        {
          v1989 = v16;
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v16, v17, v18, v19, v20, v21);
          *(_QWORD *)JSC::B3::MemoryValue::lastChild(v9) = v1989;
          *((_DWORD *)v9 + 10) = 0;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v22 = *v12;
      if (*((_BYTE *)*v12 + 12) != 70)
        return;
      if (*((_BYTE *)v22 + 20) == 4)
      {
        v2385 = JSC::B3::Value::childrenVector(v22);
        if (!*(_DWORD *)(v2385 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19800620CLL);
        }
        v157 = *(uint64_t **)v2385;
        v22 = *v12;
      }
      else
      {
        v157 = (uint64_t *)((char *)v22 + 64);
      }
      v158 = *v157;
      if (v158)
        v159 = (*(_WORD *)(v158 + 12) & 0xFFF) == 6;
      else
        v159 = 0;
      if (v159)
      {
        v1863 = JSC::B3::Value::child(v22, 0);
        v1864 = *(_QWORD *)v1863;
        if ((*(_WORD *)(*(_QWORD *)v1863 + 12) & 0xFFF) != 6)
          v1864 = 0;
        v1865 = *(_DWORD *)(v1864 + 40);
        v1866 = *((unsigned int *)v11 + 100);
        v1867 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v1868 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v11 + 8, v1866, *(_QWORD *)(*(_QWORD *)v1867 + 24), v1865);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1868;
        *((_BYTE *)v11 + 432) = 1;
        v22 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      }
      if (*((_BYTE *)v22 + 20) == 4)
      {
        v2386 = JSC::B3::Value::childrenVector(v22);
        if (!*(_DWORD *)(v2386 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198006214);
        }
        v161 = *(uint64_t **)v2386;
      }
      else
      {
        v160 = 40;
        switch(*((_BYTE *)v22 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v160 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v160 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v160 = 64;
            break;
          case 0x53:
            v160 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v160 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005FE4);
        }
        v161 = (uint64_t *)((char *)v22 + v160);
      }
      v162 = *v161;
      if (!v162 || (*(_WORD *)(v162 + 12) & 0xFFF) != 5)
        return;
      v164 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v165 = *(_QWORD *)v164;
      if ((*(_WORD *)(*(_QWORD *)v164 + 12) & 0xFFF) != 5)
        v165 = 0;
      v166 = *(_QWORD *)(v165 + 40);
      v167 = *((unsigned int *)v11 + 100);
      v168 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v169 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t *)v11 + 1, v167, *(_QWORD *)(*(_QWORD *)v168 + 24), v166);
      goto LABEL_217;
    case 82:
      if (*((_DWORD *)v9 + 4) != 4 || JSC::B3::Value::numChildren(*((JSC::B3::Value **)this + 51)) != 3)
        return;
      v513 = JSC::B3::Value::child(*v12, 0);
      v514 = *(_QWORD *)v513 && (*(_WORD *)(*(_QWORD *)v513 + 12) & 0xFFF) == 4;
      if (!v514
        || *(long double (__cdecl **)(long double, long double))(*(_QWORD *)v513 + 40) != fmodDouble
        || *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 16) != 4
        || *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(*v12, 2u) + 16) != 4)
      {
        return;
      }
      v515 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v516 = *(JSC::B3::Procedure **)v11;
      v517 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 2u);
      v518 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, uint64_t))(*(_QWORD *)v515 + 112))(v515, v516, v517);
      goto LABEL_1713;
    case 85:
      v610 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v611 = *(JSC::B3::Procedure **)v11;
      v612 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v613 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v610 + 64))(v610, v611, *v612);
      if (v613)
      {
        v335 = v613;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v613;
        v1157 = (uint64_t *)((char *)v11 + 16);
        v1158 = *((unsigned int *)v11 + 7);
        if ((_DWORD)v1158 == *((_DWORD *)v11 + 6))
        {
          v1857 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1157, (void *)(v1158 + 1), (unint64_t)v2417, v614, v615, v616, v617, v618);
          v1158 = *((unsigned int *)v11 + 7);
          v1159 = *((_QWORD *)v11 + 2);
          v1160 = *v1857;
        }
        else
        {
          v1159 = *v1157;
          v1160 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1159 + 16 * v1158) = v1160;
        ++*((_DWORD *)v11 + 7);
        v343 = *((_QWORD *)v11 + 51);
        v344 = *(_DWORD *)(v343 + 16);
        if (v344 != *(_DWORD *)(v335 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x197FFF71CLL);
        }
LABEL_356:
        v345 = *(_QWORD *)(v343 + 32);
        v346 = *(_DWORD *)(v343 + 8);
        (**(void (***)(uint64_t))v343)(v343);
        *(_QWORD *)v343 = off_1E357F5F0;
        if (v344)
        {
          *(_QWORD *)(v343 + 40) = v335;
          v347 = 1;
        }
        else
        {
          v347 = 0;
        }
        *(_WORD *)(v343 + 12) = v347;
        *(_DWORD *)(v343 + 16) = v344;
        *(_BYTE *)(v343 + 20) = v347;
        *(_DWORD *)(v343 + 8) = v346;
        *(_QWORD *)(v343 + 32) = v345;
        goto LABEL_266;
      }
      v619 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v620 = *(_QWORD *)v619;
      v621 = *(_WORD *)(*(_QWORD *)v619 + 12) & 0xFFF;
      if (*(_QWORD *)v619)
        v622 = v621 == 3;
      else
        v622 = 0;
      if (v622)
      {
        v624 = *(int *)(v620 + 40);
      }
      else
      {
        if (v620)
          v623 = v621 == 4;
        else
          v623 = 0;
        if (!v623)
          goto LABEL_675;
        v624 = *(_QWORD *)(v620 + 40);
      }
      if (!v624)
        goto LABEL_1251;
LABEL_675:
      v625 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 0);
      v628 = v627;
      v629 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 1u);
      v632 = *v12;
      v633 = *((_DWORD *)*v12 + 4);
      if (v633 >= 0x80000000)
        v633 = 0x80000000;
      if (v633 == 1)
      {
        v634 = __OFADD__((_DWORD)v626, (_DWORD)v631);
        if (v626 != (int)v626 || (unint64_t)(v631 - 0x80000000) < 0xFFFFFFFF00000000 || v634)
          return;
        v635 = __OFADD__((_DWORD)v626, (_DWORD)v630);
        if (v630 != (int)v630 || v635)
          return;
        v636 = __OFADD__((_DWORD)v628, (_DWORD)v631);
        if (v628 != (int)v628 || v636 || __OFADD__((_DWORD)v628, (_DWORD)v630))
          return;
      }
      else if (v633 != 2
             || __OFADD__(v626, v631)
             || __OFADD__(v626, v630)
             || __OFADD__(v628, v631)
             || __OFADD__(v628, v630))
      {
        return;
      }
      v637 = *((_QWORD *)v632 + 3);
      v638 = *(_QWORD *)JSC::B3::Value::child(v632, 0);
      v639 = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v640 = v11;
      v641 = *(JSC::B3::Procedure **)v11;
      v647 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, v637, v638, *v639);
      v648 = *((unsigned int *)v641 + 23);
      if ((_DWORD)v648)
      {
        v649 = *(_QWORD *)(*((_QWORD *)v641 + 10) + 8 * v648 - 8);
        *((_DWORD *)v641 + 23) = v648 - 1;
        v650 = *((_QWORD *)v641 + 8);
      }
      else
      {
        v649 = *((unsigned int *)v641 + 19);
        if ((_DWORD)v649 == *((_DWORD *)v641 + 18))
        {
          v1878 = v649 + (v649 >> 2);
          if (v1878 >= 0x10)
            v1879 = v1878 + 1;
          else
            v1879 = 16;
          if (v1879 <= v649 + 1)
            v1880 = v649 + 1;
          else
            v1880 = v1879;
          if (v1880 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1980061C4);
          }
          v1881 = (const void *)*((_QWORD *)v641 + 8);
          v1882 = (void *)WTF::fastMalloc((WTF *)(8 * v1880));
          *((_DWORD *)v641 + 18) = v1880;
          *((_QWORD *)v641 + 8) = v1882;
          memcpy(v1882, v1881, 8 * v649);
          if (v1881)
          {
            if (*((const void **)v641 + 8) == v1881)
            {
              *((_QWORD *)v641 + 8) = 0;
              *((_DWORD *)v641 + 18) = 0;
            }
            WTF::fastFree((unint64_t)v1881, v1883, v1884, v642, v643, v644, v645, v646);
          }
          v1885 = *((unsigned int *)v641 + 19);
          v650 = *((_QWORD *)v641 + 8);
          *(_QWORD *)(v650 + 8 * v1885) = 0;
          *((_DWORD *)v641 + 19) = v1885 + 1;
        }
        else
        {
          v650 = *((_QWORD *)v641 + 8);
          *(_QWORD *)(v650 + 8 * v649) = 0;
          *((_DWORD *)v641 + 19) = v649 + 1;
        }
      }
      *((_DWORD *)v647 + 2) = v649;
      *(_QWORD *)(v650 + 8 * v649) = v647;
      *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
      *(_QWORD *)&v2417[8] = v647;
      v651 = (uint64_t *)((char *)v11 + 16);
      v652 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v652 == *((_DWORD *)v11 + 6))
      {
        v1948 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v651, (void *)(v652 + 1), (unint64_t)v2417, v642, v643, v644, v645, v646);
        v652 = *((unsigned int *)v11 + 7);
        v653 = *((_QWORD *)v11 + 2);
        v654 = *v1948;
      }
      else
      {
        v653 = *v651;
        v654 = *(_OWORD *)v2417;
      }
      *(_OWORD *)(v653 + 16 * v652) = v654;
      ++*((_DWORD *)v11 + 7);
      JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), v647);
      goto LABEL_1394;
    case 86:
      v1096 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1097 = *(JSC::B3::Procedure **)v11;
      v1098 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1099 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1096 + 72))(v1096, v1097, *v1098);
      if (v1099)
      {
        v1433 = v1099;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v1099;
        v1547 = (uint64_t *)((char *)v11 + 16);
        v1548 = *((unsigned int *)v11 + 7);
        v640 = v11;
        if ((_DWORD)v1548 == *((_DWORD *)v11 + 6))
        {
          v1987 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1547, (void *)(v1548 + 1), (unint64_t)v2417, v1100, v1101, v1102, v1103, v1104);
          v1548 = *((unsigned int *)v11 + 7);
          v1549 = *((_QWORD *)v11 + 2);
          v1550 = *v1987;
        }
        else
        {
          v1549 = *v1547;
          v1550 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1549 + 16 * v1548) = v1550;
        ++*((_DWORD *)v11 + 7);
        v1438 = *((_QWORD *)v11 + 51);
        v1439 = *(_DWORD *)(v1438 + 16);
        if (v1439 != *(_DWORD *)(v1433 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x19800165CLL);
        }
        goto LABEL_1391;
      }
      v1105 = JSC::B3::Value::child(*v12, 1u);
      v1106 = *(_QWORD *)v1105;
      v1107 = *(_WORD *)(*(_QWORD *)v1105 + 12) & 0xFFF;
      if (*(_QWORD *)v1105)
        v1108 = v1107 == 3;
      else
        v1108 = 0;
      if (v1108)
      {
        v1110 = *(int *)(v1106 + 40);
      }
      else
      {
        if (v1106)
          v1109 = v1107 == 4;
        else
          v1109 = 0;
        if (!v1109)
          goto LABEL_1059;
        v1110 = *(_QWORD *)(v1106 + 40);
      }
      if (!v1110)
        goto LABEL_1251;
LABEL_1059:
      v1111 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1112 = (JSC::B3::Value *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1111 + 88))(*v1111, *(_QWORD *)v11);
      if (!v1112)
      {
        v1118 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 0);
        v1121 = v1120;
        v1122 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 1u);
        v1125 = *v12;
        v1126 = *((_DWORD *)*v12 + 4);
        if (v1126 >= 0x80000000)
          v1126 = 0x80000000;
        if (v1126 == 1)
        {
          v1127 = __OFSUB__((_DWORD)v1119, (_DWORD)v1124);
          if (v1119 != (int)v1119 || (unint64_t)(v1124 - 0x80000000) < 0xFFFFFFFF00000000 || v1127)
            return;
          v1128 = __OFSUB__((_DWORD)v1119, (_DWORD)v1123);
          if (v1123 != (int)v1123 || v1128)
            return;
          v1129 = __OFSUB__((_DWORD)v1121, (_DWORD)v1124);
          if (v1121 != (int)v1121 || v1129 || __OFSUB__((_DWORD)v1121, (_DWORD)v1123))
            return;
        }
        else if (v1126 != 2
               || __OFSUB__(v1119, v1124)
               || __OFSUB__(v1119, v1123)
               || __OFSUB__(v1121, v1124)
               || __OFSUB__(v1121, v1123))
        {
          return;
        }
        v750 = *((_QWORD *)v1125 + 3);
        v752 = *(_QWORD *)JSC::B3::Value::child(v1125, 0);
        v1130 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v1131 = 1;
        goto LABEL_1591;
      }
      v1831 = v1112;
      JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v1112, v1113, v1114, v1115, v1116, v1117);
      if (*(unsigned __int8 *)(*((_QWORD *)v11 + 51) + 12) - 85 >= 4)
        v1832 = 0;
      else
        v1832 = *((_QWORD *)v11 + 51);
      JSC::B3::CheckValue::convertToAdd(v1832);
      *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v1831;
      *((_BYTE *)v11 + 432) = 1;
      return;
    case 87:
      v1299 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v1300 = *(JSC::B3::Procedure **)v11;
      v1301 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v1302 = (*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v1299 + 80))(v1299, v1300, *v1301);
      if (v1302)
      {
        v1679 = (JSC::B3::Value *)v1302;
        *(_QWORD *)v2417 = *((unsigned int *)v11 + 100);
        *(_QWORD *)&v2417[8] = v1302;
        v1680 = (uint64_t *)((char *)v11 + 16);
        v1681 = *((unsigned int *)v11 + 7);
        if ((_DWORD)v1681 == *((_DWORD *)v11 + 6))
        {
          v2155 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1680, (void *)(v1681 + 1), (unint64_t)v2417, v1303, v1304, v1305, v1306, v1307);
          v1681 = *((unsigned int *)v11 + 7);
          v1682 = *((_QWORD *)v11 + 2);
          v1683 = *v2155;
        }
        else
        {
          v1682 = *v1680;
          v1683 = *(_OWORD *)v2417;
        }
        *(_OWORD *)(v1682 + 16 * v1681) = v1683;
        ++*((_DWORD *)v11 + 7);
        JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), v1679);
        *((_BYTE *)v11 + 432) = 1;
        return;
      }
      v454 = v11;
      v1308 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      if (*(_QWORD *)v1308)
        v1309 = (*(_WORD *)(*(_QWORD *)v1308 + 12) & 0xFFFu) - 3 > 1;
      else
        v1309 = 1;
      if (v1309)
        goto LABEL_1214;
      v1310 = JSC::B3::Value::child(*v12, 1u);
      v1311 = *(_QWORD *)v1310;
      v1312 = *(_WORD *)(*(_QWORD *)v1310 + 12) & 0xFFF;
      if (*(_QWORD *)v1310)
        v1313 = v1312 == 3;
      else
        v1313 = 0;
      if (v1313)
      {
        v1314 = *(int *)(v1311 + 40);
      }
      else
      {
        if (v1312 != 4)
          v1311 = 0;
        v1314 = *(_QWORD *)(v1311 + 40);
      }
      if (v1314 == 2)
      {
        if (*(unsigned __int8 *)(*((_QWORD *)v11 + 51) + 12) - 85 >= 4)
          v1733 = 0;
        else
          v1733 = *((_QWORD *)v11 + 51);
        JSC::B3::CheckValue::convertToAdd(v1733);
        v1734 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v1734;
        *((_BYTE *)v11 + 432) = 1;
        return;
      }
      if (v1314 == 1)
      {
LABEL_1984:
        v473 = *(unsigned __int8 **)JSC::B3::Value::child(*((JSC::B3::Value **)v454 + 51), 0);
LABEL_1985:
        v472 = (JSC::B3::Value *)*((_QWORD *)v454 + 51);
LABEL_462:
        JSC::B3::Value::replaceWithIdentity(v472, (JSC::B3::Value *)v473);
LABEL_463:
        *((_BYTE *)v454 + 432) = 1;
      }
      else
      {
        if (v1314)
        {
LABEL_1214:
          v1315 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 0);
          v1318 = v1317;
          v1319 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(*v12, 1u);
          v1322 = *v12;
          v1323 = *((_DWORD *)*v12 + 4);
          if (v1323 >= 0x80000000)
            v1323 = 0x80000000;
          if (v1323 == 1)
          {
            if (v1316 != (int)v1316)
              return;
            if ((unint64_t)(v1321 - 0x80000000) < 0xFFFFFFFF00000000)
              return;
            if ((int)v1316 * (uint64_t)(int)v1321 != (_DWORD)v1316 * (_DWORD)v1321)
              return;
            if (v1320 != (int)v1320)
              return;
            if ((int)v1320 * (uint64_t)(int)v1316 != (_DWORD)v1320 * (_DWORD)v1316)
              return;
            v1324 = (int)v1318 * (uint64_t)(int)v1321 != (_DWORD)v1318 * (_DWORD)v1321;
            if (v1318 != (int)v1318 || v1324 || (int)v1318 * (uint64_t)(int)v1320 != (_DWORD)v1318 * (_DWORD)v1320)
              return;
          }
          else if (v1323 != 2
                 || (unsigned __int128)(v1316 * (__int128)v1321) >> 64 != (v1316 * v1321) >> 63
                 || (unsigned __int128)(v1316 * (__int128)v1320) >> 64 != (v1316 * v1320) >> 63
                 || (unsigned __int128)(v1318 * (__int128)v1321) >> 64 != (v1318 * v1321) >> 63
                 || (unsigned __int128)(v1318 * (__int128)v1320) >> 64 != (v1318 * v1320) >> 63)
          {
            return;
          }
          v750 = *((_QWORD *)v1322 + 3);
          v752 = *(_QWORD *)JSC::B3::Value::child(v1322, 0);
          inserted = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
          v401 = (uint64_t *)v11;
          v402 = 16;
          goto LABEL_1593;
        }
        v1916 = *(JSC::B3::Procedure **)v11;
        v1917 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
LABEL_1991:
        v1918 = 0;
LABEL_1992:
        v518 = JSC::B3::Procedure::addIntConstant(v1916, v1917, v1918);
LABEL_1713:
        v538 = (JSC::B3::Value *)v518;
LABEL_1714:
        v1687 = (uint64_t)v11;
LABEL_1715:
      }
      return;
    case 88:
      if (!*((_DWORD *)v9 + 31))
      {
        __break(0xC471u);
        JUMPOUT(0x198005FA4);
      }
      v89 = **((_QWORD **)v9 + 14);
      v90 = *(_WORD *)(v89 + 12);
      if (v90 != 52)
      {
        switch(*(_WORD *)(v89 + 12))
        {
          case 3u:
            if ((v90 & 0xFFF) != 3)
              v89 = 0;
            if (*(_DWORD *)(v89 + 40))
              goto LABEL_857;
            goto LABEL_1287;
          case 4u:
            if ((v90 & 0xFFF) != 4)
              v89 = 0;
            if (!*(_QWORD *)(v89 + 40))
              goto LABEL_1287;
            goto LABEL_857;
          case 5u:
            if ((v90 & 0xFFF) != 5)
              v89 = 0;
            if (*(double *)(v89 + 40) == 0.0)
              goto LABEL_1287;
            goto LABEL_857;
          case 6u:
            if ((v90 & 0xFFF) != 6)
              v89 = 0;
            if (*(float *)(v89 + 40) != 0.0)
            {
LABEL_857:
              v829 = (JSC::B3::Value **)((char *)this + 8);
              v830 = *((_QWORD *)this + 1);
              v831 = *((unsigned int *)this + 100);
              v832 = *((_QWORD *)v9 + 3);
              v833 = WTF::fastMalloc((WTF *)0xD8);
              *(_QWORD *)v833 = off_1E357F5F0;
              *(_DWORD *)(v833 + 8) = -1;
              *(_WORD *)(v833 + 12) = 83;
              *(_DWORD *)(v833 + 16) = 0;
              *(_BYTE *)(v833 + 20) = 4;
              *(_QWORD *)(v833 + 24) = v832;
              *(_QWORD *)(v833 + 32) = 0;
              v834 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v833);
              *v834 = v834 + 2;
              v834[1] = 3;
              *(_OWORD *)(v833 + 40) = 0u;
              *(_OWORD *)(v833 + 56) = 0u;
              *(_OWORD *)(v833 + 72) = 0u;
              *(_OWORD *)(v833 + 88) = 0u;
              *(_QWORD *)(v833 + 104) = 0;
              *(_OWORD *)(v833 + 112) = xmmword_1991243D0;
              *(_QWORD *)v833 = off_1E357E700;
              *(_QWORD *)(v833 + 152) = 0;
              *(_QWORD *)(v833 + 128) = 0xFFFFFFFF00000000;
              *(_QWORD *)(v833 + 136) = v833 + 152;
              *(_WORD *)(v833 + 168) = 0;
              *(_BYTE *)(v833 + 160) = 0;
              *(_QWORD *)(v833 + 144) = 0x100000001;
              v840 = *(unsigned int *)(v830 + 92);
              if ((_DWORD)v840)
              {
                v841 = *(_QWORD *)(*(_QWORD *)(v830 + 80) + 8 * v840 - 8);
                *(_DWORD *)(v830 + 92) = v840 - 1;
                v842 = *(_QWORD *)(v830 + 64);
              }
              else
              {
                v841 = *(unsigned int *)(v830 + 76);
                if ((_DWORD)v841 == *(_DWORD *)(v830 + 72))
                {
                  v2406 = v11;
                  v1475 = v841 + (v841 >> 2);
                  if (v1475 >= 0x10)
                    v1476 = v1475 + 1;
                  else
                    v1476 = 16;
                  if (v1476 <= v841 + 1)
                    v1477 = v841 + 1;
                  else
                    v1477 = v1476;
                  if (v1477 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198006154);
                  }
                  v1478 = *(const void **)(v830 + 64);
                  v1479 = (void *)WTF::fastMalloc((WTF *)(8 * v1477));
                  *(_DWORD *)(v830 + 72) = v1477;
                  *(_QWORD *)(v830 + 64) = v1479;
                  memcpy(v1479, v1478, 8 * v841);
                  if (v1478)
                  {
                    if (*(const void **)(v830 + 64) == v1478)
                    {
                      *(_QWORD *)(v830 + 64) = 0;
                      *(_DWORD *)(v830 + 72) = 0;
                    }
                    WTF::fastFree((unint64_t)v1478, v1480, v1481, v835, v836, v837, v838, v839);
                  }
                  v1482 = *(unsigned int *)(v830 + 76);
                  v842 = *(_QWORD *)(v830 + 64);
                  *(_QWORD *)(v842 + 8 * v1482) = 0;
                  *(_DWORD *)(v830 + 76) = v1482 + 1;
                  v11 = v2406;
                }
                else
                {
                  v842 = *(_QWORD *)(v830 + 64);
                  *(_QWORD *)(v842 + 8 * v841) = 0;
                  *(_DWORD *)(v830 + 76) = v841 + 1;
                }
              }
              *(_DWORD *)(v833 + 8) = v841;
              *(_QWORD *)(v842 + 8 * v841) = v833;
              *(_QWORD *)v2417 = v831;
              *(_QWORD *)&v2417[8] = v833;
              v843 = (uint64_t *)((char *)v11 + 16);
              v844 = *((unsigned int *)v11 + 7);
              if ((_DWORD)v844 == *((_DWORD *)v11 + 6))
              {
                v1643 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v843, (void *)(v844 + 1), (unint64_t)v2417, v835, v836, v837, v838, v839);
                v844 = *((unsigned int *)v11 + 7);
                v845 = *((_QWORD *)v11 + 2);
                v846 = *v1643;
              }
              else
              {
                v845 = *v843;
                v846 = *(_OWORD *)v2417;
              }
              *(_OWORD *)(v845 + 16 * v844) = v846;
              ++*((_DWORD *)v11 + 7);
              *(_QWORD *)(v833 + 112) = 0;
              *(_QWORD *)(v833 + 120) = 0;
              *(_QWORD *)(v833 + 128) = 0xFFFFFFFF00000000;
              *(_BYTE *)(v833 + 113) = 1;
              if (JSC::B3::StackmapValue::numChildren(v9) >= 2)
              {
                v847 = 1;
                do
                {
                  JSC::B3::StackmapValue::constrainedChild((uint64_t)v9, v847, (uint64_t)v2417);
                  JSC::B3::StackmapValue::append((__int128 *)v833, *(uint64_t *)v2417, (unint64_t)&v2417[8]);
                  ++v847;
                }
                while (v847 < JSC::B3::StackmapValue::numChildren(v9));
              }
              v848 = (unsigned int *)*((_QWORD *)v9 + 7);
              if (v848)
              {
                v849 = v848 + 2;
                do
                  v850 = __ldaxr(v849);
                while (__stlxr(v850 + 1, v849));
                do
                  v851 = __ldaxr(v849);
                while (__stlxr(v851 + 1, v849));
              }
              v852 = *(unsigned int **)(v833 + 56);
              *(_QWORD *)(v833 + 56) = v848;
              if (v852)
              {
                v853 = v852 + 2;
                do
                {
                  v854 = __ldaxr(v853);
                  v855 = v854 - 1;
                }
                while (__stlxr(v855, v853));
                if (!v855)
                {
                  atomic_store(1u, v852 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v852 + 8))(v852);
                }
              }
              if (v848)
              {
                v856 = v848 + 2;
                do
                {
                  v857 = __ldaxr(v856);
                  v858 = v857 - 1;
                }
                while (__stlxr(v858, v856));
                if (!v858)
                {
                  atomic_store(1u, v848 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v848 + 8))(v848);
                }
              }
              v859 = (*((_DWORD *)v11 + 100) + 1);
              v860 = *((_QWORD *)v11 + 49);
              v861 = *(unsigned int *)(v860 + 20);
              for (k = v861 - 1; v861 - 1 > v859; k = v861 - 1)
              {
                if (v859 >= v861)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198006114);
                }
                v977 = *(_QWORD *)(*(_QWORD *)(v860 + 8) + 8 * v859);
                v978 = *(_DWORD *)(v977 + 16);
                if (v978)
                {
                  if (*(unsigned __int8 *)(v977 + 12) - 3 >= 5)
                  {
                    v1411 = v11;
                    v1412 = JSC::B3::InsertionSet::insertBottom(v829, *((unsigned int *)v11 + 100), *(_QWORD *)(v977 + 24), v978);
                    v1413 = *(_DWORD *)(v977 + 16);
                    if (v1413 != *((_DWORD *)v1412 + 4))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198004BF4);
                    }
                    v1414 = v1412;
                    v2414 = *(_QWORD *)(v977 + 32);
                    v1415 = *(_DWORD *)(v977 + 8);
                    (**(void (***)(uint64_t))v977)(v977);
                    *(_QWORD *)v977 = off_1E357F5F0;
                    if (v1413)
                    {
                      *(_QWORD *)(v977 + 40) = v1414;
                      v1416 = 1;
                    }
                    else
                    {
                      v1416 = 0;
                    }
                    *(_WORD *)(v977 + 12) = v1416;
                    *(_DWORD *)(v977 + 16) = v1413;
                    *(_BYTE *)(v977 + 20) = v1416;
                    *(_DWORD *)(v977 + 8) = v1415;
                    *(_QWORD *)(v977 + 32) = v2414;
                    v11 = v1411;
                  }
                }
                else
                {
                  v979 = *(_QWORD *)(v977 + 32);
                  v980 = *(_DWORD *)(v977 + 8);
                  (**(void (***)(uint64_t))v977)(v977);
                  *(_QWORD *)v977 = off_1E357F5F0;
                  *(_WORD *)(v977 + 12) = 0;
                  *(_DWORD *)(v977 + 16) = 0;
                  *(_BYTE *)(v977 + 20) = 0;
                  *(_DWORD *)(v977 + 8) = v980;
                  *(_QWORD *)(v977 + 32) = v979;
                }
                ++v859;
                v860 = *((_QWORD *)v11 + 49);
                v861 = *(unsigned int *)(v860 + 20);
              }
              if (!v861)
              {
                __break(0xC471u);
                JUMPOUT(0x1980060ECLL);
              }
              v863 = *(_QWORD *)(v860 + 8);
              v864 = *(_QWORD *)(v863 + 8 * k);
              if (*(_QWORD *)(v863 + 8 * v861 - 8) != v864)
              {
                __break(0xC471u);
                JUMPOUT(0x1980030C8);
              }
              v865 = *(_QWORD *)(v864 + 32);
              v866 = *(_DWORD *)(v864 + 8);
              (**(void (***)(_QWORD))v864)(*(_QWORD *)(v863 + 8 * k));
              *(_QWORD *)v864 = off_1E357F5F0;
              *(_WORD *)(v864 + 12) = 159;
              *(_DWORD *)(v864 + 16) = 0;
              *(_BYTE *)(v864 + 20) = 0;
              *(_DWORD *)(v864 + 8) = v866;
              *(_QWORD *)(v864 + 32) = v865;
              if (*(_DWORD *)(v860 + 64))
              {
                if (*(_DWORD *)(v860 + 68))
                  *(_DWORD *)(v860 + 68) = 0;
                v874 = *(_QWORD *)(v860 + 56);
                if (v860 + 72 != v874 && v874)
                {
                  *(_QWORD *)(v860 + 56) = 0;
                  *(_DWORD *)(v860 + 64) = 0;
                  WTF::fastFree(v874, v867, v868, v869, v870, v871, v872, v873);
                  v874 = *(_QWORD *)(v860 + 56);
                }
                if (!v874)
                {
                  *(_QWORD *)(v860 + 56) = v860 + 72;
                  *(_DWORD *)(v860 + 64) = 2;
                }
              }
              v875 = *((_QWORD *)v11 + 49);
              v876 = *(unsigned int *)(v875 + 20);
              if (!(_DWORD)v876)
              {
                __break(0xC471u);
                JUMPOUT(0x1980060F4);
              }
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v875 + 8) + 8 * v876 - 8) + 24) = *((_QWORD *)v9 + 3);
              if (*((_DWORD *)v9 + 4))
              {
                __break(0xC471u);
                JUMPOUT(0x198003124);
              }
              v877 = *((_QWORD *)v9 + 4);
              v878 = *((_DWORD *)v9 + 2);
              (**(void (***)(JSC::B3::Value *))v9)(v9);
              *(_QWORD *)v9 = off_1E357F5F0;
              *((_WORD *)v9 + 6) = 0;
              *((_DWORD *)v9 + 4) = 0;
              *((_BYTE *)v9 + 20) = 0;
              *((_DWORD *)v9 + 2) = v878;
              *((_QWORD *)v9 + 4) = v877;
              *((_BYTE *)v11 + 433) = 1;
              return;
            }
LABEL_1287:
            if (*((_DWORD *)v9 + 4))
            {
              __break(0xC471u);
              JUMPOUT(0x19800550CLL);
            }
            v1365 = *((_QWORD *)v9 + 4);
            v1366 = *((_DWORD *)v9 + 2);
            (**(void (***)(_QWORD))v9)(*((_QWORD *)this + 51));
            *(_QWORD *)v9 = off_1E357F5F0;
            *((_WORD *)v9 + 6) = 0;
            *((_DWORD *)v9 + 4) = 0;
            *((_BYTE *)v9 + 20) = 0;
            *((_DWORD *)v9 + 2) = v1366;
            *((_QWORD *)v9 + 4) = v1365;
            break;
          default:
            goto LABEL_126;
        }
        goto LABEL_266;
      }
      v421 = (JSC::B3::Value **)JSC::B3::StackmapValue::child(*((JSC::B3::StackmapValue **)this + 51), 0);
      v422 = JSC::B3::Value::child(*v421, 1u);
      v423 = *(_QWORD *)v422;
      v424 = *(_WORD *)(*(_QWORD *)v422 + 12) & 0xFFF;
      if (*(_QWORD *)v422)
        v425 = v424 == 3;
      else
        v425 = 0;
      if (v425)
      {
        v427 = *(int *)(v423 + 40);
      }
      else
      {
        if (v423)
          v426 = v424 == 4;
        else
          v426 = 0;
        if (!v426)
          goto LABEL_126;
        v427 = *(_QWORD *)(v423 + 40);
      }
      if (!v427)
      {
        v428 = (JSC::B3::Value **)JSC::B3::StackmapValue::child(v9, 0);
        v429 = *(_QWORD *)JSC::B3::Value::child(*v428, 0);
        *(_QWORD *)JSC::B3::StackmapValue::child(v9, 0) = v429;
        *((_BYTE *)v11 + 432) = 1;
      }
LABEL_126:
      if (*(_DWORD *)(*(_QWORD *)v11 + 204) < 2u)
        return;
      v91 = *v12;
      if (*((_BYTE *)*v12 + 20) == 4)
      {
        v2381 = JSC::B3::Value::childrenVector(v91);
        if (!*(_DWORD *)(v2381 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x198006204);
        }
        v93 = *(uint64_t **)v2381;
      }
      else
      {
        v92 = 40;
        switch(*((_BYTE *)v91 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v92 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v92 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v92 = 64;
            break;
          case 0x53:
            v92 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v92 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005FC4);
        }
        v93 = (uint64_t *)((char *)v91 + v92);
      }
      v94 = *v93;
      v95 = *((_DWORD *)v11 + 100);
      v1663 = v95 >= 3;
      v96 = v95 - 3;
      if (v1663)
        v97 = v96;
      else
        v97 = 0;
      v98 = v2418;
      *(_QWORD *)v2417 = 0;
      *(_QWORD *)&v2417[8] = v2418;
      *(_QWORD *)&v2417[16] = 16;
      *(_QWORD *)&v2416 = v94;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v100 = *(_QWORD *)(StatusReg + 752);
      if (v100)
      {
        v101 = (_BYTE *)(v100 + 9040);
        *(_BYTE *)(v100 + 9040) = 1;
        v102 = *(unsigned int *)(v100 + 9056);
        if ((_DWORD)v102)
        {
          *(_DWORD *)(v100 + 9056) = v102 - *(_DWORD *)(v100 + 9060);
          impl_casual_case = (_OWORD *)(*(_QWORD *)(v100 + 9048) - v102);
          goto LABEL_136;
        }
        v430 = *(_QWORD *)(v100 + 9080);
        v431 = *(_QWORD *)(v100 + 9064);
        if (v430)
          goto LABEL_416;
        if (*(_BYTE *)(v100 + 9045) == 6)
        {
          v1580 = *(_DWORD *)(v100 + 9076);
          v1581 = *(unsigned int *)(v100 + 9072);
          if (v1581 < v1580)
          {
            *(_QWORD *)&v101[8 * v1581 + 56] = 0;
            v1582 = (unint64_t *)(v100 + 8 * v1581 + 9104);
            v8 = v1580 - 1 - v1581;
            while (v8)
            {
              v431 += 1024;
              v1584 = *v1582++;
              v1583 = v1584;
              LODWORD(v1581) = v1581 + 1;
              --v8;
              if (v1584)
              {
                v430 = __rbit64(v1583);
                *(_DWORD *)(v100 + 9072) = v1581;
                *(_QWORD *)(v100 + 9064) = v431;
LABEL_416:
                v432 = __clz(v430);
                *(_QWORD *)(v100 + 9080) = v430 & ~(0x8000000000000000 >> v432);
                impl_casual_case = (_OWORD *)(v431 + 16 * v432);
LABEL_136:
                *v101 = 0;
                v104 = 1;
LABEL_137:
                if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF00000000) != 0x100000000)
                {
                  impl_casual_case[3] = 0u;
                  impl_casual_case[4] = 0u;
                  impl_casual_case[1] = 0u;
                  impl_casual_case[2] = 0u;
                  *impl_casual_case = 0u;
                }
                *(_QWORD *)v2417 = impl_casual_case + 1;
                *((_QWORD *)impl_casual_case + 1) = 0x800000007;
                *(_DWORD *)impl_casual_case = 0;
                *(_DWORD *)(*(_QWORD *)v2417 - 12) = 0;
                if (*(_QWORD *)v2417)
                  v105 = *(_DWORD *)(*(_QWORD *)v2417 - 8);
                else
                  v105 = 0;
                v106 = (~(v94 << 32) + v94) ^ ((unint64_t)(~(v94 << 32) + v94) >> 22);
                v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
                v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
                v109 = v105 & ((v108 >> 31) ^ v108);
                v110 = (_QWORD *)(*(_QWORD *)v2417 + 8 * v109);
                v111 = *v110;
                if (*v110)
                {
                  v474 = 0;
                  v475 = 1;
                  while (v111 != v94)
                  {
                    if (v111 == -1)
                      v474 = v110;
                    v109 = (v109 + v475) & v105;
                    v110 = (_QWORD *)(*(_QWORD *)v2417 + 8 * v109);
                    v111 = *v110;
                    ++v475;
                    if (!*v110)
                    {
                      if (v474)
                      {
                        *v474 = 0;
                        --*(_DWORD *)(*(_QWORD *)v2417 - 16);
                        v94 = v2416;
                        v110 = v474;
                      }
                      goto LABEL_143;
                    }
                  }
                  v117 = *(_DWORD *)&v2417[20];
                }
                else
                {
LABEL_143:
                  *v110 = v94;
                  if (*(_QWORD *)v2417)
                    v112 = *(_DWORD *)(*(_QWORD *)v2417 - 12) + 1;
                  else
                    v112 = 1;
                  *(_DWORD *)(*(_QWORD *)v2417 - 12) = v112;
                  if (*(_QWORD *)v2417)
                    v113 = *(_DWORD *)(*(_QWORD *)v2417 - 12);
                  else
                    v113 = 0;
                  v114 = (*(_DWORD *)(*(_QWORD *)v2417 - 16) + v113);
                  v115 = *(unsigned int *)(*(_QWORD *)v2417 - 4);
                  if (v115 > 0x400)
                  {
                    if (v115 <= 2 * v114)
                      goto LABEL_659;
                  }
                  else
                  {
                    if (3 * v115 > 4 * v114)
                      goto LABEL_149;
LABEL_659:
                    WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand((uint64_t *)v2417, (unint64_t)v110, a3, a4, a5, a6, a7, a8);
                  }
LABEL_149:
                  v116 = *(_DWORD *)&v2417[20];
                  if (*(_DWORD *)&v2417[20] == *(_DWORD *)&v2417[16])
                  {
                    v828 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2417[8], *(unsigned int *)&v2417[20] + 1, (unint64_t)&v2416);
                    v116 = *(_DWORD *)&v2417[20];
                    *(_QWORD *)(*(_QWORD *)&v2417[8] + 8 * *(unsigned int *)&v2417[20]) = *v828;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)&v2417[8] + 8 * *(unsigned int *)&v2417[20]) = v2416;
                  }
                  v117 = v116 + 1;
                  *(_DWORD *)&v2417[20] = v117;
                }
                v118 = (unsigned int *)((char *)v11 + 400);
                __src = (unsigned int *)((char *)v11 + 400);
                if (v117)
                {
                  v2412 = StatusReg;
                  v119 = 1 - v97;
                  v120 = 8 * v97;
                  do
                  {
                    v121 = *(unsigned __int8 **)(*(_QWORD *)&v2417[8] + 8 * v117-- - 8);
                    *(_DWORD *)&v2417[20] = v117;
                    if (!v121)
                      goto LABEL_267;
                    v122 = *v118;
                    if (v97 <= v122)
                    {
                      v123 = *((_QWORD *)v11 + 49);
                      LODWORD(v124) = *(_DWORD *)(v123 + 20);
                      if (v124 <= v97)
                        v124 = v97;
                      else
                        v124 = v124;
                      if (v124 - v97 <= (unint64_t)(v122 - v97))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198005EFCLL);
                      }
                      v125 = 0;
                      v126 = v119 + v122;
                      v127 = (unsigned __int8 **)(*(_QWORD *)(v123 + 8) + v120);
                      do
                      {
                        v128 = *v127++;
                        v125 |= v128 == v121;
                        --v126;
                      }
                      while (v126);
                      if ((v125 & 1) != 0)
                      {
                        v129 = v121[12];
                        if (v129 == 62)
                        {
                          v1281 = v8;
                          if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v121, 1u)+ 12)- 3 < 5|| *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v121, 2u)+ 12)- 3 < 5)
                          {
                            goto LABEL_267;
                          }
                          v129 = v121[12];
                          v8 = v1281;
                          v118 = __src;
                        }
                        if (v129 != 153)
                        {
                          v130 = v121[20];
                          if (v130 == 4)
                          {
                            v154 = 40;
                            switch(v129)
                            {
                              case 0:
                              case 1:
                              case 2:
                              case 8:
                              case 13:
                              case 14:
                              case 15:
                              case 16:
                              case 17:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 22:
                              case 23:
                              case 24:
                              case 25:
                              case 26:
                              case 27:
                              case 28:
                              case 29:
                              case 30:
                              case 31:
                              case 32:
                              case 33:
                              case 34:
                              case 35:
                              case 36:
                              case 37:
                              case 38:
                              case 39:
                              case 40:
                              case 41:
                              case 42:
                              case 43:
                              case 44:
                              case 45:
                              case 46:
                              case 47:
                              case 48:
                              case 49:
                              case 50:
                              case 51:
                              case 52:
                              case 53:
                              case 54:
                              case 55:
                              case 56:
                              case 57:
                              case 58:
                              case 59:
                              case 60:
                              case 61:
                              case 62:
                              case 79:
                              case 154:
                              case 155:
                              case 157:
                              case 158:
                              case 159:
                                break;
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 9:
                              case 10:
                              case 11:
                              case 12:
                              case 80:
                              case 84:
                              case 90:
                              case 91:
                              case 92:
                              case 93:
                              case 94:
                              case 95:
                              case 96:
                              case 97:
                              case 98:
                              case 99:
                              case 100:
                              case 101:
                              case 102:
                              case 103:
                              case 104:
                              case 105:
                              case 106:
                              case 107:
                              case 108:
                              case 109:
                              case 110:
                              case 111:
                              case 112:
                              case 113:
                              case 114:
                              case 115:
                              case 116:
                              case 117:
                              case 118:
                              case 119:
                              case 120:
                              case 121:
                              case 122:
                              case 123:
                              case 124:
                              case 125:
                              case 126:
                              case 127:
                              case 128:
                              case 129:
                              case 130:
                              case 131:
                              case 132:
                              case 133:
                              case 134:
                              case 135:
                              case 136:
                              case 137:
                              case 138:
                              case 139:
                              case 140:
                              case 141:
                              case 142:
                              case 143:
                              case 144:
                              case 145:
                              case 146:
                              case 147:
                              case 148:
                              case 149:
                              case 150:
                              case 151:
                              case 152:
                                v154 = 48;
                                break;
                              case 7:
                              case 81:
                              case 89:
                              case 156:
                                v154 = 56;
                                break;
                              case 63:
                              case 64:
                              case 65:
                              case 66:
                              case 67:
                              case 68:
                              case 69:
                              case 70:
                              case 71:
                              case 72:
                              case 73:
                              case 74:
                              case 75:
                              case 76:
                              case 77:
                              case 78:
                              case 82:
                                v154 = 64;
                                break;
                              case 83:
                                v154 = 176;
                                break;
                              case 85:
                              case 86:
                              case 87:
                              case 88:
                                v154 = 112;
                                break;
                              default:
                                __break(0xC471u);
                                JUMPOUT(0x1980060A4);
                            }
                            v155 = &v121[v154];
                            v131 = *(uint64_t **)v155;
                            v130 = *((unsigned int *)v155 + 3);
                          }
                          else
                          {
                            v131 = (uint64_t *)(v121 + 40);
                          }
                          v132 = &v131[v130];
                          while (v131 != v132)
                          {
                            v133 = *v131;
                            *(_QWORD *)&v2416 = *v131;
                            v134 = *(_QWORD *)v2417;
                            if (*(_QWORD *)v2417)
                              goto LABEL_173;
                            v148 = v120;
                            v149 = v119;
                            v150 = v11;
                            v151 = v98;
                            v152 = v8;
                            v153 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v110, a3, a4, a5, a6, a7, a8);
                            v8 = v152;
                            v98 = v151;
                            v11 = v150;
                            v119 = v149;
                            v120 = v148;
                            v118 = __src;
                            *(_QWORD *)v2417 = v153 + 16;
                            *(_QWORD *)(v153 + 8) = 0x800000007;
                            *(_DWORD *)v153 = 0;
                            *(_DWORD *)(*(_QWORD *)v2417 - 12) = 0;
                            v134 = *(_QWORD *)v2417;
                            if (*(_QWORD *)v2417)
LABEL_173:
                              v135 = *(_DWORD *)(v134 - 8);
                            else
                              v135 = 0;
                            v136 = (~(v133 << 32) + v133) ^ ((unint64_t)(~(v133 << 32) + v133) >> 22);
                            v137 = 9 * ((v136 + ~(v136 << 13)) ^ ((v136 + ~(v136 << 13)) >> 8));
                            v138 = (v137 ^ (v137 >> 15)) + ~((v137 ^ (v137 >> 15)) << 27);
                            v139 = v135 & ((v138 >> 31) ^ v138);
                            v110 = (_QWORD *)(v134 + 8 * v139);
                            v140 = *v110;
                            if (*v110)
                            {
                              v146 = 0;
                              v147 = 1;
                              do
                              {
                                if (v140 == v133)
                                  goto LABEL_184;
                                if (v140 == -1)
                                  v146 = v110;
                                v139 = (v139 + v147) & v135;
                                v110 = (_QWORD *)(v134 + 8 * v139);
                                v140 = *v110;
                                ++v147;
                              }
                              while (*v110);
                              if (v146)
                              {
                                *v146 = 0;
                                --*(_DWORD *)(*(_QWORD *)v2417 - 16);
                                v133 = v2416;
                                v110 = v146;
                              }
                            }
                            *v110 = v133;
                            if (*(_QWORD *)v2417)
                              v141 = *(_DWORD *)(*(_QWORD *)v2417 - 12) + 1;
                            else
                              v141 = 1;
                            *(_DWORD *)(*(_QWORD *)v2417 - 12) = v141;
                            if (*(_QWORD *)v2417)
                              v142 = *(_DWORD *)(*(_QWORD *)v2417 - 12);
                            else
                              v142 = 0;
                            v143 = (*(_DWORD *)(*(_QWORD *)v2417 - 16) + v142);
                            v144 = *(unsigned int *)(*(_QWORD *)v2417 - 4);
                            if (v144 > 0x400)
                            {
                              if (v144 <= 2 * v143)
                              {
LABEL_199:
                                v156 = v8;
                                WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand((uint64_t *)v2417, (unint64_t)v110, a3, a4, a5, a6, a7, a8);
                                v8 = v156;
                              }
                            }
                            else if (3 * v144 <= 4 * v143)
                            {
                              goto LABEL_199;
                            }
                            v145 = *(_DWORD *)&v2417[20];
                            if (*(_DWORD *)&v2417[20] == *(_DWORD *)&v2417[16])
                            {
                              v666 = v8;
                              v667 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2417[8], *(unsigned int *)&v2417[20] + 1, (unint64_t)&v2416);
                              v8 = v666;
                              v145 = *(_DWORD *)&v2417[20];
                              *(_QWORD *)(*(_QWORD *)&v2417[8] + 8 * *(unsigned int *)&v2417[20]) = *v667;
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)&v2417[8] + 8 * *(unsigned int *)&v2417[20]) = v2416;
                            }
                            *(_DWORD *)&v2417[20] = v145 + 1;
LABEL_184:
                            ++v131;
                          }
                        }
                      }
                      v117 = *(_DWORD *)&v2417[20];
                    }
                  }
                  while (v117);
                  v121 = 0;
LABEL_267:
                  StatusReg = v2412;
                }
                else
                {
                  v121 = 0;
                }
                v213 = *(_QWORD *)&v2417[8];
                if (v98 != *(_BYTE **)&v2417[8] && *(_QWORD *)&v2417[8] != 0)
                {
                  *(_QWORD *)&v2417[8] = 0;
                  *(_DWORD *)&v2417[16] = 0;
                  WTF::fastFree(v213, v110, a3, a4, a5, a6, a7, a8);
                }
                if (*(_QWORD *)v2417)
                {
                  v215 = *(_QWORD *)v2417 - 16;
                  v216 = *(_QWORD *)(StatusReg + 752);
                  if (v216)
                  {
                    if (v215 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                           + (((unint64_t)(*(_QWORD *)v2417 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((*(_DWORD *)v2417 - 16) >> 24)) & 1) == 0)
                    {
                      if (v215 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v215 >> 24)
                      {
                        a4 = 0;
                      }
                      else
                      {
                        a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + (((((unint64_t)(*(_QWORD *)v2417 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2
                                                * ((((*(_DWORD *)v2417 - 16) >> 24)
                                                  - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)a4 == 1)
                          goto LABEL_277;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v216, v215, 1, a4, a5, a6, a7, a8);
                    }
                    else
                    {
LABEL_277:
                      v217 = *(unsigned int *)(v216 + 8000);
                      if (v217 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v216, v215, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        *(_QWORD *)(v216 + 8 * v217) = v215 | 0x5000000000000;
                        *(_DWORD *)(v216 + 8000) = v217 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(*(_QWORD *)v2417 - 16, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                if (!v121)
                  return;
                v2419 = (JSC::B3::Value *)v121;
                v218 = JSC::B3::BlockInsertionSet::splitForward((uint64_t)v11 + 216, *((_QWORD *)v11 + 49), __src, (JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), NAN);
                v226 = v218;
                if (*((_QWORD *)v11 + 49) == *((_QWORD *)v11 + 48))
                {
                  *((_QWORD *)v11 + 48) = v218;
                  v1697 = *((_QWORD *)v11 + 47);
                  if (v1697)
                  {
                    *((_QWORD *)v11 + 47) = 0;
                    WTF::fastFree(v1697 - 16, v219, v220, v221, v222, v223, v224, v225);
                  }
                }
                v227 = *(unsigned int *)(v226 + 20);
                if (!(_DWORD)v227)
                {
LABEL_2223:
                  __break(0xC471u);
                  JUMPOUT(0x198004748);
                }
                v228 = *(_QWORD *)(v226 + 8);
                if (*(unsigned __int8 **)(v228 + 8 * (v227 - 1)) == v121)
                {
                  __srca = v227 - 1;
                }
                else
                {
                  v229 = v228 - 16;
                  do
                  {
                    v230 = v227 - 1;
                    if (v227 == 1)
                      goto LABEL_2223;
                    v231 = *(unsigned __int8 **)(v229 + 8 * v227--);
                  }
                  while (v231 != v121);
                  __srca = v230 - 1;
                  LODWORD(v227) = v230;
                }
                v2422 = (_DWORD *)JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)v11 + 216, **((_DWORD **)v11 + 49), *(double *)(*((_QWORD *)v11 + 49) + 104));
                v2423 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)v11 + 216, **((_DWORD **)v11 + 49), *(double *)(*((_QWORD *)v11 + 49) + 104));
                v2420 = 0;
                v2421 = 0;
                v2408 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v121, 0);
                v232 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v121, 1u);
                WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(&v2420, (uint64_t *)&v2419, v232, v233, v234, v235, v236, v237, (uint64_t)v2417);
                v238 = (uint64_t *)JSC::B3::Value::child(v2419, 2u);
                WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(&v2421, (uint64_t *)&v2419, v238, v239, v240, v241, v242, v243, (uint64_t)v2417);
                *(_QWORD *)v2417 = v11;
                *(_QWORD *)&v2417[8] = &v2420;
                *(_QWORD *)&v2417[16] = &v2422;
                JSC::B3::BasicBlock::removeLast((JSC::B3::BasicBlock *)v226, *(JSC::B3::Procedure **)v11);
                v244 = v2422;
                v245 = *(JSC::B3::Procedure **)v11;
                v246 = *((_QWORD *)v2419 + 3);
                v247 = *(_QWORD *)JSC::B3::Value::child(v2419, 1u);
                v248 = v2419;
                v249 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v249 + 8) = -1;
                *(_WORD *)(v249 + 12) = 152;
                *(_DWORD *)(v249 + 16) = 0;
                *(_BYTE *)(v249 + 20) = 1;
                *(_QWORD *)(v249 + 24) = v246;
                *(_QWORD *)(v249 + 32) = 0;
                *(_QWORD *)v249 = &unk_1E357EDA0;
                *(_QWORD *)(v249 + 40) = v248;
                *(_QWORD *)(v249 + 48) = v247;
                v250 = *((unsigned int *)v245 + 23);
                if ((_DWORD)v250)
                {
                  v251 = *(_QWORD *)(*((_QWORD *)v245 + 10) + 8 * v250 - 8);
                  *((_DWORD *)v245 + 23) = v250 - 1;
                  v252 = *((_QWORD *)v245 + 8);
                }
                else
                {
                  v251 = *((unsigned int *)v245 + 19);
                  if ((_DWORD)v251 == *((_DWORD *)v245 + 18))
                  {
                    v1735 = v251 + (v251 >> 2);
                    if (v1735 >= 0x10)
                      v1736 = v1735 + 1;
                    else
                      v1736 = 16;
                    if (v1736 <= v251 + 1)
                      v1737 = v251 + 1;
                    else
                      v1737 = v1736;
                    if (v1737 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19800618CLL);
                    }
                    v1738 = (const void *)*((_QWORD *)v245 + 8);
                    v1739 = (void *)WTF::fastMalloc((WTF *)(8 * v1737));
                    *((_DWORD *)v245 + 18) = v1737;
                    *((_QWORD *)v245 + 8) = v1739;
                    memcpy(v1739, v1738, 8 * v251);
                    if (v1738)
                    {
                      if (*((const void **)v245 + 8) == v1738)
                      {
                        *((_QWORD *)v245 + 8) = 0;
                        *((_DWORD *)v245 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)v1738, v1740, v1741, v1742, v1743, v1744, v1745, v1746);
                    }
                    v1747 = *((unsigned int *)v245 + 19);
                    v252 = *((_QWORD *)v245 + 8);
                    *(_QWORD *)(v252 + 8 * v1747) = 0;
                    *((_DWORD *)v245 + 19) = v1747 + 1;
                  }
                  else
                  {
                    v252 = *((_QWORD *)v245 + 8);
                    *(_QWORD *)(v252 + 8 * v251) = 0;
                    *((_DWORD *)v245 + 19) = v251 + 1;
                  }
                }
                *(_DWORD *)(v249 + 8) = v251;
                *(_QWORD *)(v252 + 8 * v251) = v249;
                *(_QWORD *)&v2416 = v249;
                v253 = (char **)(v244 + 2);
                v254 = v244[5];
                if ((_DWORD)v254 == v244[4])
                {
                  v1450 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v253, v254 + 1, (unint64_t)&v2416);
                  v254 = v244[5];
                  *(_QWORD *)(*((_QWORD *)v244 + 1) + 8 * v254) = *(_QWORD *)v1450;
                  v249 = v2416;
                }
                else
                {
                  *(_QWORD *)&(*v253)[8 * v254] = v249;
                }
                v244[5] = v254 + 1;
                *(_QWORD *)(v249 + 32) = v244;
                v255 = v2423;
                v256 = *(JSC::B3::Procedure **)v11;
                v257 = *((_QWORD *)v2419 + 3);
                v258 = *(_QWORD *)JSC::B3::Value::child(v2419, 2u);
                v259 = v2419;
                v260 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v260 + 8) = -1;
                *(_WORD *)(v260 + 12) = 152;
                *(_DWORD *)(v260 + 16) = 0;
                *(_BYTE *)(v260 + 20) = 1;
                *(_QWORD *)(v260 + 24) = v257;
                *(_QWORD *)(v260 + 32) = 0;
                *(_QWORD *)v260 = &unk_1E357EDA0;
                *(_QWORD *)(v260 + 40) = v259;
                *(_QWORD *)(v260 + 48) = v258;
                v261 = *((unsigned int *)v256 + 23);
                if ((_DWORD)v261)
                {
                  v262 = *(_QWORD *)(*((_QWORD *)v256 + 10) + 8 * v261 - 8);
                  *((_DWORD *)v256 + 23) = v261 - 1;
                  v263 = *((_QWORD *)v256 + 8);
                }
                else
                {
                  v262 = *((unsigned int *)v256 + 19);
                  if ((_DWORD)v262 == *((_DWORD *)v256 + 18))
                  {
                    v1748 = v262 + (v262 >> 2);
                    if (v1748 >= 0x10)
                      v1749 = v1748 + 1;
                    else
                      v1749 = 16;
                    if (v1749 <= v262 + 1)
                      v1750 = v262 + 1;
                    else
                      v1750 = v1749;
                    if (v1750 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198006194);
                    }
                    v1751 = (const void *)*((_QWORD *)v256 + 8);
                    v1752 = (void *)WTF::fastMalloc((WTF *)(8 * v1750));
                    *((_DWORD *)v256 + 18) = v1750;
                    *((_QWORD *)v256 + 8) = v1752;
                    memcpy(v1752, v1751, 8 * v262);
                    if (v1751)
                    {
                      if (*((const void **)v256 + 8) == v1751)
                      {
                        *((_QWORD *)v256 + 8) = 0;
                        *((_DWORD *)v256 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)v1751, v1753, v1754, v1755, v1756, v1757, v1758, v1759);
                    }
                    v1760 = *((unsigned int *)v256 + 19);
                    v263 = *((_QWORD *)v256 + 8);
                    *(_QWORD *)(v263 + 8 * v1760) = 0;
                    *((_DWORD *)v256 + 19) = v1760 + 1;
                  }
                  else
                  {
                    v263 = *((_QWORD *)v256 + 8);
                    *(_QWORD *)(v263 + 8 * v262) = 0;
                    *((_DWORD *)v256 + 19) = v262 + 1;
                  }
                }
                v264 = (char **)(v226 + 8);
                *(_DWORD *)(v260 + 8) = v262;
                *(_QWORD *)(v263 + 8 * v262) = v260;
                *(_QWORD *)&v2416 = v260;
                v265 = (char **)(v255 + 8);
                v266 = *(unsigned int *)(v255 + 20);
                if ((_DWORD)v266 == *(_DWORD *)(v255 + 16))
                {
                  v1451 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v265, v266 + 1, (unint64_t)&v2416);
                  v266 = *(unsigned int *)(v255 + 20);
                  *(_QWORD *)(*(_QWORD *)(v255 + 8) + 8 * v266) = *(_QWORD *)v1451;
                  v260 = v2416;
                }
                else
                {
                  *(_QWORD *)&(*v265)[8 * v266] = v260;
                }
                *(_DWORD *)(v255 + 20) = v266 + 1;
                *(_QWORD *)(v260 + 32) = v255;
                v267 = v2419;
                v268 = *((_DWORD *)v2419 + 4);
                v269 = *((_QWORD *)v2419 + 4);
                v270 = *((_DWORD *)v2419 + 2);
                (**(void (***)(JSC::B3::Value *))v2419)(v2419);
                *(_QWORD *)v267 = off_1E357F5F0;
                if (v268)
                  v276 = 153;
                else
                  v276 = 0;
                *((_WORD *)v267 + 6) = v276;
                *((_DWORD *)v267 + 4) = v268;
                *((_BYTE *)v267 + 20) = 0;
                *((_DWORD *)v267 + 2) = v270;
                *((_QWORD *)v267 + 4) = v269;
                *(_QWORD *)&v2416 = *((unsigned int *)v11 + 100);
                *((_QWORD *)&v2416 + 1) = v2419;
                v277 = (uint64_t *)((char *)v11 + 16);
                v278 = *((unsigned int *)v11 + 7);
                if ((_DWORD)v278 == *((_DWORD *)v11 + 6))
                {
                  v1862 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11 + 16, (void *)(v278 + 1), (unint64_t)&v2416, v271, v272, v273, v274, v275);
                  v278 = *((unsigned int *)v11 + 7);
                  v279 = *((_QWORD *)v11 + 2);
                  v280 = *v1862;
                }
                else
                {
                  v279 = *v277;
                  v280 = v2416;
                }
                *(_OWORD *)(v279 + 16 * v278) = v280;
                ++*((_DWORD *)v11 + 7);
                if (*(_DWORD *)(v226 + 20) > v227)
                {
                  v281 = v227;
                  do
                  {
                    v282 = *(_QWORD *)&(*v264)[8 * v281];
                    *(_QWORD *)(v282 + 32) = 0;
                    if (*(_DWORD *)(v282 + 16))
                    {
                      *(_QWORD *)&v2416 = *((unsigned int *)v11 + 100);
                      *((_QWORD *)&v2416 + 1) = v282;
                      v288 = *((unsigned int *)v11 + 7);
                      if ((_DWORD)v288 == *((_DWORD *)v11 + 6))
                      {
                        v1861 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v277, (void *)(v288 + 1), (unint64_t)&v2416, v283, v284, v285, v286, v287);
                        v288 = *((unsigned int *)v11 + 7);
                        v289 = *((_QWORD *)v11 + 2);
                        v290 = *v1861;
                      }
                      else
                      {
                        v289 = *v277;
                        v290 = v2416;
                      }
                      *(_OWORD *)(v289 + 16 * v288) = v290;
                      ++*((_DWORD *)v11 + 7);
                    }
                    else
                    {
                      v291 = *(JSC::B3::Procedure **)v11;
                      v292 = *(unsigned int *)(v282 + 8);
                      v293 = *(_QWORD *)(*(_QWORD *)v11 + 64);
                      if (*(_QWORD *)(v293 + 8 * v292) != v282)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980046F0);
                      }
                      v294 = *((unsigned int *)v291 + 23);
                      if ((_DWORD)v294 == *((_DWORD *)v291 + 22))
                      {
                        v2407 = v11;
                        v1708 = v264;
                        v1709 = v294 + (v294 >> 2);
                        if (v1709 >= 0x10)
                          v1710 = v1709 + 1;
                        else
                          v1710 = 16;
                        if (v1710 <= v294 + 1)
                          v1711 = v294 + 1;
                        else
                          v1711 = v1710;
                        if (v1711 >> 29)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198006134);
                        }
                        v1712 = (const void *)*((_QWORD *)v291 + 10);
                        v1713 = (void *)WTF::fastMalloc((WTF *)(8 * v1711));
                        *((_DWORD *)v291 + 22) = v1711;
                        *((_QWORD *)v291 + 10) = v1713;
                        memcpy(v1713, v1712, 8 * v294);
                        if (v1712)
                        {
                          if (*((const void **)v291 + 10) == v1712)
                          {
                            *((_QWORD *)v291 + 10) = 0;
                            *((_DWORD *)v291 + 22) = 0;
                          }
                          WTF::fastFree((unint64_t)v1712, v1714, v1715, v1716, v1717, v1718, v1719, v1720);
                        }
                        v294 = *((unsigned int *)v291 + 23);
                        *(_QWORD *)(*((_QWORD *)v291 + 10) + 8 * v294) = *(unsigned int *)(v282 + 8);
                        v293 = *((_QWORD *)v291 + 8);
                        v264 = v1708;
                        v11 = v2407;
                      }
                      else
                      {
                        *(_QWORD *)(*((_QWORD *)v291 + 10) + 8 * v294) = v292;
                      }
                      *((_DWORD *)v291 + 23) = v294 + 1;
                      v295 = *(unsigned int *)(v282 + 8);
                      v296 = *(_QWORD *)(v293 + 8 * v295);
                      *(_QWORD *)(v293 + 8 * v295) = 0;
                      if (v296)
                        (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
                    }
                    ++v281;
                  }
                  while (v281 < *(unsigned int *)(v226 + 20));
                }
                *(_DWORD *)(v226 + 20) = __srca;
                v1173 = *(JSC::B3::Procedure **)v11;
                v1174 = *((_QWORD *)v2419 + 3);
                v1175 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)v1175 = off_1E357F5F0;
                *(_DWORD *)(v1175 + 8) = -1;
                *(_WORD *)(v1175 + 12) = 155;
                *(_DWORD *)(v1175 + 16) = 0;
                *(_BYTE *)(v1175 + 20) = 1;
                *(_QWORD *)(v1175 + 24) = v1174;
                *(_QWORD *)(v1175 + 32) = 0;
                JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v1175, 1, v2408);
                v1182 = *((unsigned int *)v1173 + 23);
                if ((_DWORD)v1182)
                {
                  v1183 = *(_QWORD *)(*((_QWORD *)v1173 + 10) + 8 * v1182 - 8);
                  *((_DWORD *)v1173 + 23) = v1182 - 1;
                  v1184 = *((_QWORD *)v1173 + 8);
                }
                else
                {
                  v1183 = *((unsigned int *)v1173 + 19);
                  if ((_DWORD)v1183 == *((_DWORD *)v1173 + 18))
                  {
                    v1761 = v264;
                    v1762 = v1183 + (v1183 >> 2);
                    if (v1762 >= 0x10)
                      v1763 = v1762 + 1;
                    else
                      v1763 = 16;
                    if (v1763 <= v1183 + 1)
                      v1764 = v1183 + 1;
                    else
                      v1764 = v1763;
                    if (v1764 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19800619CLL);
                    }
                    v1765 = (const void *)*((_QWORD *)v1173 + 8);
                    v1766 = (void *)WTF::fastMalloc((WTF *)(8 * v1764));
                    *((_DWORD *)v1173 + 18) = v1764;
                    *((_QWORD *)v1173 + 8) = v1766;
                    memcpy(v1766, v1765, 8 * v1183);
                    if (v1765)
                    {
                      if (*((const void **)v1173 + 8) == v1765)
                      {
                        *((_QWORD *)v1173 + 8) = 0;
                        *((_DWORD *)v1173 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)v1765, v1767, v1176, v1177, v1178, v1179, v1180, v1181);
                    }
                    v1768 = *((unsigned int *)v1173 + 19);
                    v1184 = *((_QWORD *)v1173 + 8);
                    *(_QWORD *)(v1184 + 8 * v1768) = 0;
                    *((_DWORD *)v1173 + 19) = v1768 + 1;
                    v264 = v1761;
                  }
                  else
                  {
                    v1184 = *((_QWORD *)v1173 + 8);
                    *(_QWORD *)(v1184 + 8 * v1183) = 0;
                    *((_DWORD *)v1173 + 19) = v1183 + 1;
                  }
                }
                *(_DWORD *)(v1175 + 8) = v1183;
                *(_QWORD *)(v1184 + 8 * v1183) = v1175;
                *(_QWORD *)&v2416 = v1175;
                v1185 = *(unsigned int *)(v226 + 20);
                if ((_DWORD)v1185 == *(_DWORD *)(v226 + 16))
                {
                  v1452 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v264, v1185 + 1, (unint64_t)&v2416);
                  v1185 = *(unsigned int *)(v226 + 20);
                  *(_QWORD *)(*(_QWORD *)(v226 + 8) + 8 * v1185) = *(_QWORD *)v1452;
                  v1175 = v2416;
                }
                else
                {
                  *(_QWORD *)&(*v264)[8 * v1185] = v1175;
                }
                *(_DWORD *)(v226 + 20) = v1185 + 1;
                *(_QWORD *)(v1175 + 32) = v226;
                v1187 = v2422;
                v1186 = v2423;
                v1188 = (uint64_t *)(v226 + 56);
                v1189 = *(_DWORD *)(v226 + 68);
                if (v1189 >= 2)
                {
                  v1190 = *v1188;
                }
                else if (*(_DWORD *)(v226 + 64) < 2u)
                {
                  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1188, (void *)2, v1176, v1177, v1178, v1179, v1180, v1181);
                  v1189 = *(_DWORD *)(v226 + 68);
                  v1190 = *(_QWORD *)(v226 + 56);
                  if (v1189 != 2)
                    goto LABEL_1127;
                }
                else
                {
                  v1190 = *v1188;
LABEL_1127:
                  v1191 = 16 * v1189;
                  do
                  {
                    v1192 = v1190 + v1191;
                    *(_QWORD *)v1192 = 0;
                    *(_BYTE *)(v1192 + 8) = 0;
                    v1191 += 16;
                  }
                  while (v1191 != 32);
                }
                *(_DWORD *)(v226 + 68) = 2;
                *(_QWORD *)v1190 = v1187;
                *(_BYTE *)(v1190 + 8) = 0;
                v1193 = *(_QWORD *)(v226 + 56);
                *(_QWORD *)(v1193 + 16) = v1186;
                *(_BYTE *)(v1193 + 24) = 0;
                v1194 = v2422;
                v1195 = *(JSC::B3::Procedure **)v11;
                v1196 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                v1203 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)v1203 = off_1E357F5F0;
                *(_DWORD *)(v1203 + 8) = -1;
                *(_WORD *)(v1203 + 12) = 154;
                *(_DWORD *)(v1203 + 16) = 0;
                *(_BYTE *)(v1203 + 20) = 0;
                *(_QWORD *)(v1203 + 24) = v1196;
                *(_QWORD *)(v1203 + 32) = 0;
                v1204 = *((unsigned int *)v1195 + 23);
                if ((_DWORD)v1204)
                {
                  v1205 = *(_QWORD *)(*((_QWORD *)v1195 + 10) + 8 * v1204 - 8);
                  *((_DWORD *)v1195 + 23) = v1204 - 1;
                  v1206 = *((_QWORD *)v1195 + 8);
                }
                else
                {
                  v1205 = *((unsigned int *)v1195 + 19);
                  if ((_DWORD)v1205 == *((_DWORD *)v1195 + 18))
                  {
                    v1769 = v1205 + (v1205 >> 2);
                    if (v1769 >= 0x10)
                      v1770 = v1769 + 1;
                    else
                      v1770 = 16;
                    if (v1770 <= v1205 + 1)
                      v1771 = v1205 + 1;
                    else
                      v1771 = v1770;
                    if (v1771 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980061A4);
                    }
                    v1772 = (const void *)*((_QWORD *)v1195 + 8);
                    v1773 = (void *)WTF::fastMalloc((WTF *)(8 * v1771));
                    *((_DWORD *)v1195 + 18) = v1771;
                    *((_QWORD *)v1195 + 8) = v1773;
                    memcpy(v1773, v1772, 8 * v1205);
                    if (v1772)
                    {
                      if (*((const void **)v1195 + 8) == v1772)
                      {
                        *((_QWORD *)v1195 + 8) = 0;
                        *((_DWORD *)v1195 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)v1772, v1774, v1197, v1198, v1199, v1200, v1201, v1202);
                    }
                    v1775 = *((unsigned int *)v1195 + 19);
                    v1206 = *((_QWORD *)v1195 + 8);
                    *(_QWORD *)(v1206 + 8 * v1775) = 0;
                    *((_DWORD *)v1195 + 19) = v1775 + 1;
                  }
                  else
                  {
                    v1206 = *((_QWORD *)v1195 + 8);
                    *(_QWORD *)(v1206 + 8 * v1205) = 0;
                    *((_DWORD *)v1195 + 19) = v1205 + 1;
                  }
                }
                *(_DWORD *)(v1203 + 8) = v1205;
                *(_QWORD *)(v1206 + 8 * v1205) = v1203;
                *(_QWORD *)&v2416 = v1203;
                v1207 = (char **)(v1194 + 2);
                v1208 = v1194[5];
                if ((_DWORD)v1208 == v1194[4])
                {
                  v1453 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1207, v1208 + 1, (unint64_t)&v2416);
                  v1208 = v1194[5];
                  *(_QWORD *)(*((_QWORD *)v1194 + 1) + 8 * v1208) = *(_QWORD *)v1453;
                  v1203 = v2416;
                }
                else
                {
                  *(_QWORD *)&(*v1207)[8 * v1208] = v1203;
                }
                v1194[5] = v1208 + 1;
                *(_QWORD *)(v1203 + 32) = v1194;
                v1209 = v2422;
                v1210 = *((_QWORD *)v11 + 49);
                v1211 = (uint64_t *)(v2422 + 14);
                if (v2422[17])
                {
                  v1213 = *v1211;
                }
                else if (v2422[16])
                {
                  v1212 = 0;
                  v1213 = *v1211;
LABEL_1137:
                  v1214 = 16 * v1212;
                  do
                  {
                    v1215 = v1214;
                    v1216 = v1213 + v1214;
                    *(_QWORD *)v1216 = 0;
                    *(_BYTE *)(v1216 + 8) = 0;
                    v1214 = v1215 + 16;
                  }
                  while (v1215);
                }
                else
                {
                  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1211, (void *)1, v1197, v1198, v1199, v1200, v1201, v1202);
                  v1212 = v1209[17];
                  v1213 = *((_QWORD *)v1209 + 7);
                  if (v1212 != 1)
                    goto LABEL_1137;
                }
                v1209[17] = 1;
                *(_QWORD *)v1213 = v1210;
                *(_BYTE *)(v1213 + 8) = 0;
                v1217 = v2423;
                v1218 = *(JSC::B3::Procedure **)v11;
                v1219 = *(_QWORD *)(*((_QWORD *)v11 + 51) + 24);
                v1225 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)v1225 = off_1E357F5F0;
                *(_DWORD *)(v1225 + 8) = -1;
                *(_WORD *)(v1225 + 12) = 154;
                *(_DWORD *)(v1225 + 16) = 0;
                *(_BYTE *)(v1225 + 20) = 0;
                *(_QWORD *)(v1225 + 24) = v1219;
                *(_QWORD *)(v1225 + 32) = 0;
                v1226 = *((unsigned int *)v1218 + 23);
                if ((_DWORD)v1226)
                {
                  v1227 = *(_QWORD *)(*((_QWORD *)v1218 + 10) + 8 * v1226 - 8);
                  *((_DWORD *)v1218 + 23) = v1226 - 1;
                  v1228 = *((_QWORD *)v1218 + 8);
                }
                else
                {
                  v1227 = *((unsigned int *)v1218 + 19);
                  if ((_DWORD)v1227 == *((_DWORD *)v1218 + 18))
                  {
                    v1776 = v1227 + (v1227 >> 2);
                    if (v1776 >= 0x10)
                      v1777 = v1776 + 1;
                    else
                      v1777 = 16;
                    if (v1777 <= v1227 + 1)
                      v1778 = v1227 + 1;
                    else
                      v1778 = v1777;
                    if (v1778 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980061ACLL);
                    }
                    v1779 = (const void *)*((_QWORD *)v1218 + 8);
                    v1780 = (void *)WTF::fastMalloc((WTF *)(8 * v1778));
                    *((_DWORD *)v1218 + 18) = v1778;
                    *((_QWORD *)v1218 + 8) = v1780;
                    memcpy(v1780, v1779, 8 * v1227);
                    if (v1779)
                    {
                      if (*((const void **)v1218 + 8) == v1779)
                      {
                        *((_QWORD *)v1218 + 8) = 0;
                        *((_DWORD *)v1218 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)v1779, v1781, v1782, v1220, v1221, v1222, v1223, v1224);
                    }
                    v1783 = *((unsigned int *)v1218 + 19);
                    v1228 = *((_QWORD *)v1218 + 8);
                    *(_QWORD *)(v1228 + 8 * v1783) = 0;
                    *((_DWORD *)v1218 + 19) = v1783 + 1;
                  }
                  else
                  {
                    v1228 = *((_QWORD *)v1218 + 8);
                    *(_QWORD *)(v1228 + 8 * v1227) = 0;
                    *((_DWORD *)v1218 + 19) = v1227 + 1;
                  }
                }
                *(_DWORD *)(v1225 + 8) = v1227;
                *(_QWORD *)(v1228 + 8 * v1227) = v1225;
                *(_QWORD *)&v2416 = v1225;
                v1229 = (char **)(v1217 + 8);
                v1230 = *(unsigned int *)(v1217 + 20);
                if ((_DWORD)v1230 == *(_DWORD *)(v1217 + 16))
                {
                  v1454 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1229, v1230 + 1, (unint64_t)&v2416);
                  v1230 = *(unsigned int *)(v1217 + 20);
                  *(_QWORD *)(*(_QWORD *)(v1217 + 8) + 8 * v1230) = *(_QWORD *)v1454;
                  v1225 = v2416;
                }
                else
                {
                  *(_QWORD *)&(*v1229)[8 * v1230] = v1225;
                }
                *(_DWORD *)(v1217 + 20) = v1230 + 1;
                *(_QWORD *)(v1225 + 32) = v1217;
                JSC::B3::BasicBlock::setSuccessors(v2423, *((_QWORD *)v11 + 49), 0, v1220, v1221, v1222, v1223, v1224);
                *((_BYTE *)v11 + 432) = 1;
                JSC::B3::updatePredecessorsAfter<JSC::B3::BasicBlock>(v226, v1231, v1232, v1233, v1234, v1235, v1236, v1237);
                if (v2421)
                  WTF::fastFree(v2421 - 16, v1238, v1239, v1240, v1241, v1242, v1243, v1244);
                if (v2420)
                  WTF::fastFree(v2420 - 16, v1238, v1239, v1240, v1241, v1242, v1243, v1244);
                return;
              }
            }
            *(_DWORD *)(v100 + 9072) = v1580;
          }
        }
        *v101 = 0;
      }
      impl_casual_case = bmalloc_allocate_impl_casual_case(0x50uLL, 1, a3, a4, a5, a6, a7, a8);
      goto LABEL_137;
    case 93:
      switch(*((_BYTE *)v9 + 40) & 0x3F)
      {
        case 1:
          v2098 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2098)
            v2099 = (*(_WORD *)(*(_QWORD *)v2098 + 12) & 0xFFF) == 3;
          else
            v2099 = 0;
          if (v2099)
          {
            v2100 = (uint64_t *)v11;
            v2101 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2102 = *(_QWORD *)v2101;
            if ((*(_WORD *)(*(_QWORD *)v2101 + 12) & 0xFFF) != 3)
              v2102 = 0;
            v2103 = 0x101010101010101 * *(unsigned __int8 *)(v2102 + 40);
            goto LABEL_2373;
          }
          break;
        case 2:
          v2257 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2257)
            v2258 = (*(_WORD *)(*(_QWORD *)v2257 + 12) & 0xFFF) == 3;
          else
            v2258 = 0;
          if (v2258)
          {
            v2259 = (uint64_t *)v11;
            v2260 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2261 = *(_QWORD *)v2260;
            if ((*(_WORD *)(*(_QWORD *)v2260 + 12) & 0xFFF) != 3)
              v2261 = 0;
            v2262 = (const __int16 *)(v2261 + 40);
            v2263 = (float32x2_t)vld1_dup_s16(v2262);
            goto LABEL_2349;
          }
          break;
        case 3:
          v2264 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2264)
            v2265 = (*(_WORD *)(*(_QWORD *)v2264 + 12) & 0xFFF) == 3;
          else
            v2265 = 0;
          if (v2265)
          {
            v2259 = (uint64_t *)v11;
            v2266 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2267 = *(_QWORD *)v2266;
            if ((*(_WORD *)(*(_QWORD *)v2266 + 12) & 0xFFF) != 3)
              v2267 = 0;
            v2268 = (const float *)(v2267 + 40);
            v2263 = vld1_dup_f32(v2268);
LABEL_2349:
            v2269 = *v2259;
            v2270 = *(_QWORD *)(v2259[51] + 24);
            v2103 = (uint64_t)v2263;
            goto LABEL_2374;
          }
          break;
        case 4:
          v2271 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2271)
            v2272 = (*(_WORD *)(*(_QWORD *)v2271 + 12) & 0xFFF) == 4;
          else
            v2272 = 0;
          if (v2272)
          {
            v2100 = (uint64_t *)v11;
            v2273 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2274 = *(_QWORD *)v2273;
            v2275 = (*(_WORD *)(*(_QWORD *)v2273 + 12) & 0xFFF) == 4;
            goto LABEL_2370;
          }
          break;
        case 5:
          v2276 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2276)
            v2277 = (*(_WORD *)(*(_QWORD *)v2276 + 12) & 0xFFF) == 6;
          else
            v2277 = 0;
          if (v2277)
          {
            v2100 = (uint64_t *)v11;
            v2278 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2279 = *(_QWORD *)v2278;
            if ((*(_WORD *)(*(_QWORD *)v2278 + 12) & 0xFFF) != 6)
              v2279 = 0;
            v2280 = (const float *)(v2279 + 40);
            v2281 = vld1_dup_f32(v2280);
            v2103 = (uint64_t)v2281;
            goto LABEL_2373;
          }
          break;
        case 6:
          v2282 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (*(_QWORD *)v2282)
            v2283 = (*(_WORD *)(*(_QWORD *)v2282 + 12) & 0xFFF) == 5;
          else
            v2283 = 0;
          if (v2283)
          {
            v2100 = (uint64_t *)v11;
            v2284 = JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2274 = *(_QWORD *)v2284;
            v2275 = (*(_WORD *)(*(_QWORD *)v2284 + 12) & 0xFFF) == 5;
LABEL_2370:
            if (!v2275)
              v2274 = 0;
            v2103 = *(_QWORD *)(v2274 + 40);
LABEL_2373:
            v2269 = *v2100;
            v2270 = *(_QWORD *)(v2100[51] + 24);
LABEL_2374:
            v538 = (JSC::B3::Value *)JSC::B3::Procedure::addConstant(v2269, v2270, 5u, v2103, v2103);
            goto LABEL_1714;
          }
          break;
        default:
          return;
      }
      return;
    case 108:
      v2095 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v2096 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u);
      if ((*((_BYTE *)v9 + 40) & 0x3Fu) - 5 <= 1)
      {
        v2097 = *v2096;
      }
      return;
    case 117:
      v2092 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v2093 = *(JSC::B3::Procedure **)v11;
      v1345 = v11;
      v2094 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2092
                                                                                                + 280))(v2092, v2093, *v2094);
      if (v538)
        goto LABEL_2171;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 117)
      {
        v2162 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v2163 = *(JSC::B3::Procedure **)v11;
        v2164 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v2165 = (_QWORD *)JSC::B3::Value::child(*v2164, 1u);
        v2166 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2162 + 280))(v2162, v2163, *v2165);
        if (v2166)
        {
          v2172 = v2166;
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2166, v2167, v2168, v2169, v2170, v2171);
          v2173 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v2174 = *(_QWORD *)JSC::B3::Value::child(*v2173, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2174;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v2172;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v2175 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      v2176 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      v2089 = *v12;
      if (v2175 == v2176)
        goto LABEL_2270;
      v2177 = *(_QWORD *)JSC::B3::Value::child(v2089, 1u);
      if (v2177 && (*(_WORD *)(v2177 + 12) & 0xFFF) == 7 && *(_OWORD *)(v2177 + 40) == 0)
        goto LABEL_2260;
      v2223 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      if (v2223 && (*(_WORD *)(v2223 + 12) & 0xFFF) == 7)
      {
        v2225 = *(_QWORD *)(v2223 + 40);
        v2224 = *(_QWORD *)(v2223 + 48);
        if (v2225 == -1 && v2224 == -1)
          goto LABEL_2169;
      }
      v2227 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      if (v2227 && (*(_WORD *)(v2227 + 12) & 0xFFF) == 7)
      {
        v2228 = JSC::B3::Value::child(*v12, 1u);
        v2229 = *(_QWORD *)v2228;
        if ((*(_WORD *)(*(_QWORD *)v2228 + 12) & 0xFFF) != 7)
          v2229 = 0;
        v2230 = *(_QWORD *)(v2229 + 40);
        v2231 = *(_QWORD *)(v2229 + 48);
        if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) - 119 <= 1)
        {
          v2232 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v2233 = *(_QWORD *)JSC::B3::Value::child(*v2232, 1u);
          if (v2233)
          {
            if ((*(_WORD *)(v2233 + 12) & 0xFFF) == 7)
            {
              v2234 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
              v2235 = JSC::B3::Value::child(*v2234, 1u);
              v2236 = *(_QWORD *)v2235;
              if ((*(_WORD *)(*(_QWORD *)v2235 + 12) & 0xFFF) != 7)
                v2236 = 0;
              if (!(*(_QWORD *)(v2236 + 40) & v2230 | *(_QWORD *)(v2236 + 48) & v2231))
              {
                v2237 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
                v2238 = *(_QWORD *)JSC::B3::Value::child(*v2237, 0);
                *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2238;
                *((_BYTE *)v11 + 432) = 1;
                return;
              }
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 120
        && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12) == 120)
      {
        v2287 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v2288 = *(_QWORD *)JSC::B3::Value::child(*v2287, 1u);
        if (v2288)
        {
          if ((*(_WORD *)(v2288 + 12) & 0xFFF) == 7
            && *(_QWORD *)(v2288 + 40) == -1
            && *(_QWORD *)(v2288 + 48) == -1)
          {
            v2289 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u);
            v2290 = *(_QWORD *)JSC::B3::Value::child(*v2289, 1u);
            if (v2290)
            {
              if ((*(_WORD *)(v2290 + 12) & 0xFFF) == 7
                && *(_QWORD *)(v2290 + 40) == -1
                && *(_QWORD *)(v2290 + 48) == -1)
              {
                v2291 = *((unsigned int *)v11 + 100);
                v2292 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
                v2293 = *((_QWORD *)v2292 + 3);
                v2294 = (JSC::B3::Value **)JSC::B3::Value::child(v2292, 0);
                v2295 = *(_QWORD *)JSC::B3::Value::child(*v2294, 0);
                v2296 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
                v2297 = *(_QWORD *)JSC::B3::Value::child(*v2296, 0);
                v2298 = (uint64_t *)((char *)v11 + 8);
                v2299 = v2291;
                v2300 = v2293;
                v2301 = 119;
                goto LABEL_2490;
              }
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 120)
        return;
      v2302 = JSC::B3::Value::child(*v12, 1u);
      if (!*(_QWORD *)v2302)
        return;
      if ((*(_WORD *)(*(_QWORD *)v2302 + 12) & 0xFFF) != 7)
        return;
      v2303 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v2304 = *(_QWORD *)JSC::B3::Value::child(*v2303, 1u);
      if (!v2304
        || (*(_WORD *)(v2304 + 12) & 0xFFF) != 7
        || *(_QWORD *)(v2304 + 40) != -1
        || *(_QWORD *)(v2304 + 48) != -1)
      {
        return;
      }
      v2305 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v2306 = *(JSC::B3::Procedure **)v11;
      v2307 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v2308 = (_QWORD *)JSC::B3::Value::child(*v2307, 1u);
      v2203 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2305
                                                                                                 + 296))(v2305, v2306, *v2308);
      JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2203, v2309, v2310, v2311, v2312, v2313);
      v2314 = *((unsigned int *)v11 + 100);
      v2315 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      v2316 = *((_QWORD *)v2315 + 3);
      v2317 = (JSC::B3::Value **)JSC::B3::Value::child(v2315, 0);
      v2213 = *(_QWORD *)JSC::B3::Value::child(*v2317, 0);
      v2214 = (uint64_t *)((char *)v11 + 8);
      v2215 = v2314;
      v2216 = v2316;
      v2217 = 119;
      goto LABEL_2305;
    case 119:
      v2071 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v2072 = *(JSC::B3::Procedure **)v11;
      v1345 = v11;
      v2073 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2071
                                                                                                + 288))(v2071, v2072, *v2073);
      if (v538)
        goto LABEL_2171;
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 119)
      {
        v2074 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v2075 = *(JSC::B3::Procedure **)v11;
        v2076 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v2077 = (_QWORD *)JSC::B3::Value::child(*v2076, 1u);
        v2078 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2074 + 288))(v2074, v2075, *v2077);
        if (v2078)
        {
          v2084 = v2078;
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2078, v2079, v2080, v2081, v2082, v2083);
          v2085 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v2086 = *(_QWORD *)JSC::B3::Value::child(*v2085, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2086;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v2084;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v2087 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      v2088 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      v2089 = *v12;
      if (v2087 == v2088)
      {
LABEL_2270:
        v2178 = 0;
      }
      else
      {
        v2090 = *(_QWORD *)JSC::B3::Value::child(v2089, 1u);
        if (v2090 && (*(_WORD *)(v2090 + 12) & 0xFFF) == 7 && *(_OWORD *)(v2090 + 40) == 0)
        {
LABEL_2169:
          v2091 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v1345 + 51), 0);
          JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v1345 + 51), *v2091);
          *((_BYTE *)v1345 + 432) = 1;
          return;
        }
        v2187 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
        if (!v2187
          || (*(_WORD *)(v2187 + 12) & 0xFFF) != 7
          || ((v2189 = *(_QWORD *)(v2187 + 40), v2188 = *(_QWORD *)(v2187 + 48), v2189 == -1)
            ? (v2190 = v2188 == -1)
            : (v2190 = 0),
              !v2190))
        {
          if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 120
            && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12) == 120
            && (v2191 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0),
                (v2192 = *(_QWORD *)JSC::B3::Value::child(*v2191, 1u)) != 0)
            && (*(_WORD *)(v2192 + 12) & 0xFFF) == 7
            && ((v2194 = *(_QWORD *)(v2192 + 40), v2193 = *(_QWORD *)(v2192 + 48), v2194 == -1)
              ? (v2195 = v2193 == -1)
              : (v2195 = 0),
                v2195
             && (v2395 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 1u),
                 (v2396 = *(_QWORD *)JSC::B3::Value::child(*v2395, 1u)) != 0)
             && (*(_WORD *)(v2396 + 12) & 0xFFF) == 7
             && *(_QWORD *)(v2396 + 40) == -1
             && *(_QWORD *)(v2396 + 48) == -1))
          {
            v2397 = *((unsigned int *)v11 + 100);
            v2398 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2399 = *((_QWORD *)v2398 + 3);
            v2400 = (JSC::B3::Value **)JSC::B3::Value::child(v2398, 0);
            v2295 = *(_QWORD *)JSC::B3::Value::child(*v2400, 0);
            v2401 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v2297 = *(_QWORD *)JSC::B3::Value::child(*v2401, 0);
            v2298 = (uint64_t *)((char *)v11 + 8);
            v2299 = v2397;
            v2300 = v2399;
            v2301 = 117;
LABEL_2490:
            v2218 = JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *,JSC::B3::Value *>(v2298, v2299, v2300, v2301, v2295, v2297);
            v2219 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2220 = *((_QWORD *)v2219 + 3);
            v2221 = 1;
          }
          else
          {
            if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) != 120)
              return;
            v2196 = JSC::B3::Value::child(*v12, 1u);
            if (!*(_QWORD *)v2196)
              return;
            if ((*(_WORD *)(*(_QWORD *)v2196 + 12) & 0xFFF) != 7)
              return;
            v2197 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
            v2198 = *(_QWORD *)JSC::B3::Value::child(*v2197, 1u);
            if (!v2198
              || (*(_WORD *)(v2198 + 12) & 0xFFF) != 7
              || *(_QWORD *)(v2198 + 40) != -1
              || *(_QWORD *)(v2198 + 48) != -1)
            {
              return;
            }
            v2199 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
            v2200 = *(JSC::B3::Procedure **)v11;
            v2201 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v2202 = (_QWORD *)JSC::B3::Value::child(*v2201, 1u);
            v2203 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2199 + 296))(v2199, v2200, *v2202);
            JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2203, v2204, v2205, v2206, v2207, v2208);
            v2209 = *((unsigned int *)v11 + 100);
            v2210 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2211 = *((_QWORD *)v2210 + 3);
            v2212 = (JSC::B3::Value **)JSC::B3::Value::child(v2210, 0);
            v2213 = *(_QWORD *)JSC::B3::Value::child(*v2212, 0);
            v2214 = (uint64_t *)((char *)v11 + 8);
            v2215 = v2209;
            v2216 = v2211;
            v2217 = 117;
LABEL_2305:
            v2218 = JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *,JSC::B3::Value *>(v2214, v2215, v2216, v2217, v2213, (uint64_t)v2203);
            v2219 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2220 = *((_QWORD *)v2219 + 3);
            v2221 = 0;
          }
          v2222 = (JSC::B3::Value **)JSC::B3::Value::child(v2219, v2221);
          v2148 = *(_QWORD *)JSC::B3::Value::child(*v2222, 1u);
          v2149 = (uint64_t *)v11;
          v2150 = v2220;
          v2151 = 120;
          v2152 = 0;
          v2153 = (uint64_t)v2218;
LABEL_2438:
          return;
        }
LABEL_2260:
        v2089 = (JSC::B3::Value *)*((_QWORD *)v1345 + 51);
        v2178 = 1;
      }
      v2179 = (JSC::B3::Value **)JSC::B3::Value::child(v2089, v2178);
      JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v1345 + 51), *v2179);
      *((_BYTE *)v1345 + 432) = 1;
      return;
    case 120:
      v2053 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
      v2054 = *(JSC::B3::Procedure **)v11;
      v1345 = v11;
      v2055 = (_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
      v538 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2053
                                                                                                + 296))(v2053, v2054, *v2055);
      if (v538)
      {
LABEL_2171:
        v1687 = (uint64_t)v1345;
        goto LABEL_1715;
      }
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v12, 0) + 12) == 120)
      {
        v2056 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u);
        v2057 = *(JSC::B3::Procedure **)v11;
        v2058 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v2059 = (_QWORD *)JSC::B3::Value::child(*v2058, 1u);
        v2060 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, JSC::B3::Procedure *, _QWORD))(*(_QWORD *)v2056 + 296))(v2056, v2057, *v2059);
        if (v2060)
        {
          v2066 = v2060;
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2060, v2061, v2062, v2063, v2064, v2065);
          v2067 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
          v2068 = *(_QWORD *)JSC::B3::Value::child(*v2067, 0);
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v2068;
          *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 1u) = v2066;
          *((_BYTE *)v11 + 432) = 1;
        }
      }
      v2069 = *(_QWORD *)JSC::B3::Value::child(*v12, 0);
      if (v2069 == *(_QWORD *)JSC::B3::Value::child(*v12, 1u))
      {
        v2285 = *(JSC::B3::Procedure **)v11;
        v2286 = *((_QWORD *)v11 + 51);
        goto LABEL_2377;
      }
      v2070 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
      if (!v2070 || (*(_WORD *)(v2070 + 12) & 0xFFF) != 7 || *(_OWORD *)(v2070 + 40) != 0)
        return;
      goto LABEL_2169;
    case -111:
      if (JSC::B3::Value::numChildren(*((JSC::B3::Value **)this + 51)) != 2
        || *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 1u) + 12) - 3 > 4)
      {
        if (JSC::B3::Value::numChildren(*v12) != 3
          || *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*v12, 2u) + 12) - 3 > 4)
        {
          return;
        }
        v2142 = JSC::B3::Value::child(*v12, 2u);
        v2143 = *(_QWORD *)v2142;
        if ((*(_WORD *)(*(_QWORD *)v2142 + 12) & 0xFFF) != 7)
          v2143 = 0;
        v2415 = *(int64x2_t *)(v2143 + 40);
        isOnlyOneSideMask = JSC::SIMDShuffle::isOnlyOneSideMask(*(_QWORD *)(v2143 + 40), *(_QWORD *)(v2143 + 48));
        if (!HIDWORD(isOnlyOneSideMask))
          return;
        if ((_DWORD)isOnlyOneSideMask == 1)
        {
          v2357 = vdupq_laneq_s64(v2415, 1);
          v2358.i64[0] = 0xFF00000000000000;
          v2358.i64[1] = 0xFF00000000000000;
          v2359 = vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v2357, (int64x2_t)xmmword_19914FC20), (int8x16_t)xmmword_19914FC50), vandq_s8((int8x16_t)vaddq_s64(v2357, (int64x2_t)xmmword_19914FC30), (int8x16_t)xmmword_19914FC40));
          v2360 = vorr_s8(*(int8x8_t *)v2359.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2359, v2359, 8uLL));
          v2361 = vdupq_lane_s64(v2415.i64[0], 0);
          v2362 = vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v2361, (int64x2_t)xmmword_19914FC80), (int8x16_t)xmmword_19914FCB0), vandq_s8((int8x16_t)vaddq_s64(v2361, (int64x2_t)xmmword_19914FC90), (int8x16_t)xmmword_19914FCA0));
          *(int8x8_t *)v2362.i8 = vorr_s8(*(int8x8_t *)v2362.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2362, v2362, 8uLL));
          v2362.u64[1] = (unint64_t)v2360;
          v2363 = vorrq_s8(v2362, vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v2415, (int64x2_t)xmmword_19914FC60), (int8x16_t)xmmword_19914FCC0), vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v2415, (int64x2_t)xmmword_19914FC70), (int8x16_t)xmmword_19914FCD0), vandq_s8((int8x16_t)vaddq_s64(v2415, (int64x2_t)xmmword_19914FC10), (int8x16_t)xmmword_19914FCE0))), (int8x16_t)vaddq_s64((int64x2_t)vandq_s8((int8x16_t)v2415, v2358), vdupq_n_s64(0xF000000000000000))));
          v2364 = (JSC::B3::Value *)JSC::B3::Procedure::addConstant(*(_QWORD *)v11, *(_QWORD *)(*((_QWORD *)v11 + 51) + 24), 5u, v2363.i64[0], v2363.i64[1]);
          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::ReduceStrength *)((char *)v11 + 8), *((unsigned int *)v11 + 100), v2364, v2365, v2366, v2367, v2368, v2369);
          v2370 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v2371 = *((_QWORD *)v2370 + 3);
          v2153 = *(_QWORD *)JSC::B3::Value::child(v2370, 1u);
          v2149 = (uint64_t *)v11;
          v2150 = v2371;
          v2151 = 145;
          v2152 = 1;
          v2148 = (uint64_t)v2364;
        }
        else
        {
          if ((_DWORD)isOnlyOneSideMask)
            return;
          v2145 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v2146 = *((_QWORD *)v2145 + 3);
          v2147 = *(_QWORD *)JSC::B3::Value::child(v2145, 0);
          v2148 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 2u);
          v2149 = (uint64_t *)v11;
          v2150 = v2146;
          v2151 = 145;
          v2152 = 1;
          v2153 = v2147;
        }
        goto LABEL_2438;
      }
      v2048 = JSC::B3::Value::child(*v12, 1u);
      v2049 = *(_QWORD *)v2048;
      if ((*(_WORD *)(*(_QWORD *)v2048 + 12) & 0xFFF) != 7)
        v2049 = 0;
      v2050 = *(_QWORD *)(v2049 + 40);
      v2051 = *(_QWORD *)(v2049 + 48);
      if (JSC::SIMDShuffle::isIdentity(v2050, v2051))
      {
LABEL_2151:
        v2052 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v11 + 51), *v2052);
        *((_BYTE *)v11 + 432) = 1;
        return;
      }
      if (JSC::SIMDShuffle::isAllOutOfBoundsForUnaryShuffle(v2050, v2051))
      {
        v2285 = *(JSC::B3::Procedure **)v11;
        v2286 = *((_QWORD *)v11 + 51);
LABEL_2377:
        v518 = JSC::B3::Procedure::addConstant((uint64_t)v2285, *(_QWORD *)(v2286 + 24), 5u, 0, 0);
        goto LABEL_1713;
      }
      isI64x2DupElement = JSC::SIMDShuffle::isI64x2DupElement(v2050, v2051);
      if (isI64x2DupElement >= 0x100u)
      {
        v2372 = isI64x2DupElement;
        v2373 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
        v2374 = *((_QWORD *)v2373 + 3);
        v2352 = *(_QWORD *)JSC::B3::Value::child(v2373, 0);
        v2353 = v2372;
        v2354 = (uint64_t *)v11;
        v2355 = v2374;
        v2356 = 4;
      }
      else
      {
        isI32x4DupElement = JSC::SIMDShuffle::isI32x4DupElement(v2050, v2051);
        if (isI32x4DupElement >= 0x100u)
        {
          v2382 = isI32x4DupElement;
          v2383 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
          v2384 = *((_QWORD *)v2383 + 3);
          v2352 = *(_QWORD *)JSC::B3::Value::child(v2383, 0);
          v2353 = v2382;
          v2354 = (uint64_t *)v11;
          v2355 = v2384;
          v2356 = 3;
        }
        else
        {
          isI16x8DupElement = JSC::SIMDShuffle::isI16x8DupElement(v2050, v2051);
          if (isI16x8DupElement >= 0x100u)
          {
            v2402 = isI16x8DupElement;
            v2403 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2404 = *((_QWORD *)v2403 + 3);
            v2352 = *(_QWORD *)JSC::B3::Value::child(v2403, 0);
            v2353 = v2402;
            v2354 = (uint64_t *)v11;
            v2355 = v2404;
            v2356 = 2;
          }
          else
          {
            isI8x16DupElement = JSC::SIMDShuffle::isI8x16DupElement(v2050, v2051);
            if (isI8x16DupElement < 0x100u)
              return;
            v2349 = isI8x16DupElement;
            v2350 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
            v2351 = *((_QWORD *)v2350 + 3);
            v2352 = *(_QWORD *)JSC::B3::Value::child(v2350, 0);
            v2353 = v2349;
            v2354 = (uint64_t *)v11;
            v2355 = v2351;
            v2356 = 1;
          }
        }
      }
      return;
    case -101:
      if (*((_BYTE *)v9 + 20) == 4)
      {
        v2375 = JSC::B3::Value::childrenVector(*((JSC::B3::Value **)this + 51));
        if (!*(_DWORD *)(v2375 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061D4);
        }
        v45 = *(char **)v2375;
      }
      else
      {
        v45 = (char *)v9 + 40;
      }
      if (*(_BYTE *)(*(_QWORD *)v45 + 12) != 52)
        goto LABEL_64;
      v546 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v547 = JSC::B3::Value::child(*v546, 1u);
      v548 = *(_QWORD *)v547;
      v549 = *(_WORD *)(*(_QWORD *)v547 + 12) & 0xFFF;
      if (*(_QWORD *)v547)
        v550 = v549 == 3;
      else
        v550 = 0;
      if (v550)
      {
        v552 = *(int *)(v548 + 40);
      }
      else
      {
        if (v548)
          v551 = v549 == 4;
        else
          v551 = 0;
        if (!v551)
          goto LABEL_64;
        v552 = *(_QWORD *)(v548 + 40);
      }
      if (!v552)
      {
        v553 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v554 = *(_QWORD *)JSC::B3::Value::child(*v553, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v554;
        *((_BYTE *)v11 + 432) = 1;
      }
LABEL_64:
      v46 = *v12;
      if (*((_BYTE *)*v12 + 20) == 4)
      {
        v2376 = JSC::B3::Value::childrenVector(v46);
        if (!*(_DWORD *)(v2376 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061DCLL);
        }
        v48 = *(char **)v2376;
      }
      else
      {
        v47 = 40;
        switch(*((_BYTE *)v46 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v47 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v47 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v47 = 64;
            break;
          case 0x53:
            v47 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v47 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005F1CLL);
        }
        v48 = (char *)v46 + v47;
      }
      if (*(_BYTE *)(*(_QWORD *)v48 + 12) != 51)
        goto LABEL_68;
      v433 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
      v434 = JSC::B3::Value::child(*v433, 1u);
      v435 = *(_QWORD *)v434;
      v436 = *(_WORD *)(*(_QWORD *)v434 + 12) & 0xFFF;
      if (*(_QWORD *)v434)
        v437 = v436 == 3;
      else
        v437 = 0;
      if (v437)
      {
        v439 = *(int *)(v435 + 40);
      }
      else
      {
        if (v435)
          v438 = v436 == 4;
        else
          v438 = 0;
        if (!v438)
          goto LABEL_68;
        v439 = *(_QWORD *)(v435 + 40);
      }
      if (!v439)
      {
        v440 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
        v441 = *(_QWORD *)JSC::B3::Value::child(*v440, 0);
        *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v441;
        v442 = *((_QWORD *)v11 + 49);
        v443 = *(_DWORD *)(v442 + 68);
        if (v443 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980060DCLL);
        }
        if (!v443)
        {
          __break(0xC471u);
          JUMPOUT(0x1980060E4);
        }
        v444 = *(_QWORD *)(v442 + 56);
        *(_OWORD *)v2417 = *(_OWORD *)v444;
        *(_QWORD *)v444 = *(_QWORD *)(v444 + 16);
        *(_BYTE *)(v444 + 8) = *(_BYTE *)(v444 + 24);
        *(_QWORD *)(v444 + 16) = *(_QWORD *)v2417;
        *(_BYTE *)(v444 + 24) = v2417[8];
        *((_BYTE *)v11 + 432) = 1;
      }
LABEL_68:
      v49 = *v12;
      if (*((_BYTE *)*v12 + 20) == 4)
      {
        v2377 = JSC::B3::Value::childrenVector(v49);
        if (!*(_DWORD *)(v2377 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061E4);
        }
        v51 = *(char **)v2377;
      }
      else
      {
        v50 = 40;
        switch(*((_BYTE *)v49 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v50 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v50 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v50 = 64;
            break;
          case 0x53:
            v50 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v50 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005F3CLL);
        }
        v51 = (char *)v49 + v50;
      }
      if (*(_BYTE *)(*(_QWORD *)v51 + 12) == 24)
      {
        v1014 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
        v1015 = JSC::B3::Value::child(*v1014, 1u);
        if (*(_QWORD *)v1015
          && (*(_WORD *)(*(_QWORD *)v1015 + 12) & 0xFFF) == 3
          && *(_DWORD *)(*(_QWORD *)v1015 + 40) == 1)
        {
          v1017 = (JSC::B3::Value **)JSC::B3::Value::child(*v12, 0);
          v1018 = (JSC::B3::Value **)JSC::B3::Value::child(*v1017, 0);
          if (JSC::B3::Value::returnsBool(*v1018))
          {
            v1019 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0);
            v1020 = *(_QWORD *)JSC::B3::Value::child(*v1019, 0);
            *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v1020;
            v1021 = *((_QWORD *)v11 + 49);
            v1022 = *(_DWORD *)(v1021 + 68);
            if (v1022 == 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19800613CLL);
            }
            if (!v1022)
            {
              __break(0xC471u);
              JUMPOUT(0x198006144);
            }
            v1023 = *(_QWORD *)(v1021 + 56);
            *(_OWORD *)v2417 = *(_OWORD *)v1023;
            *(_QWORD *)v1023 = *(_QWORD *)(v1023 + 16);
            *(_BYTE *)(v1023 + 8) = *(_BYTE *)(v1023 + 24);
            *(_QWORD *)(v1023 + 16) = *(_QWORD *)v2417;
            *(_BYTE *)(v1023 + 24) = v2417[8];
            *((_BYTE *)v11 + 432) = 1;
          }
        }
      }
      v52 = *v12;
      if (*((_BYTE *)*v12 + 20) == 4)
      {
        v2378 = JSC::B3::Value::childrenVector(v52);
        if (!*(_DWORD *)(v2378 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061ECLL);
        }
        v54 = *(char **)v2378;
        v52 = *v12;
      }
      else
      {
        v53 = 40;
        switch(*((_BYTE *)v52 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v53 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v53 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v53 = 64;
            break;
          case 0x53:
            v53 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v53 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005F5CLL);
        }
        v54 = (char *)v52 + v53;
      }
      if (*(_BYTE *)(*(_QWORD *)v54 + 12) == 22)
      {
        v445 = (JSC::B3::Value **)JSC::B3::Value::child(v52, 0);
        v446 = *(_QWORD *)JSC::B3::Value::child(*v445, 1u);
        v52 = *v12;
        if (v446)
        {
          if ((*(_WORD *)(v446 + 12) & 0xFFFu) - 3 <= 1)
          {
            v447 = (JSC::B3::Value **)JSC::B3::Value::child(v52, 0);
            v448 = JSC::B3::Value::child(*v447, 1u);
            v449 = *(_QWORD *)v448;
            v450 = *(_WORD *)(*(_QWORD *)v448 + 12) & 0xFFF;
            if (*(_QWORD *)v448 && v450 == 3)
            {
              LODWORD(v449) = *(_DWORD *)(v449 + 40);
            }
            else
            {
              if (v450 != 4)
                v449 = 0;
              v449 = *(_QWORD *)(v449 + 40);
            }
            v52 = *v12;
            if ((v449 & 1) != 0)
            {
              v476 = (JSC::B3::Value **)JSC::B3::Value::child(v52, 0);
              v477 = (JSC::B3::Value **)JSC::B3::Value::child(*v476, 0);
              v478 = JSC::B3::Value::returnsBool(*v477);
              v52 = *v12;
              if (v478)
              {
                v479 = (JSC::B3::Value **)JSC::B3::Value::child(v52, 0);
                v480 = *(_QWORD *)JSC::B3::Value::child(*v479, 0);
                *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v11 + 51), 0) = v480;
                *((_BYTE *)v11 + 432) = 1;
                v52 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
              }
            }
          }
        }
      }
      if (*((_BYTE *)v52 + 20) == 4)
      {
        v2379 = JSC::B3::Value::childrenVector(v52);
        if (!*(_DWORD *)(v2379 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061F4);
        }
        v56 = *(uint64_t **)v2379;
      }
      else
      {
        v55 = 40;
        switch(*((_BYTE *)v52 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v55 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v55 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v55 = 64;
            break;
          case 0x53:
            v55 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v55 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005F7CLL);
        }
        v56 = (uint64_t *)((char *)v52 + v55);
      }
      v57 = *v56;
      v58 = *(_WORD *)(v57 + 12);
      break;
    default:
      return;
  }
  switch(*(_WORD *)(v57 + 12))
  {
    case 3u:
      if ((v58 & 0xFFF) != 3)
        v57 = 0;
      if (*(_DWORD *)(v57 + 40))
        goto LABEL_1177;
      goto LABEL_777;
    case 4u:
      if ((v58 & 0xFFF) != 4)
        v57 = 0;
      if (*(_QWORD *)(v57 + 40))
        goto LABEL_1177;
      goto LABEL_777;
    case 5u:
      if ((v58 & 0xFFF) != 5)
        v57 = 0;
      if (*(double *)(v57 + 40) != 0.0)
        goto LABEL_1177;
      goto LABEL_777;
    case 6u:
      if ((v58 & 0xFFF) != 6)
        v57 = 0;
      if (*(float *)(v57 + 40) == 0.0)
      {
LABEL_777:
        v65 = (unsigned int *)*((_QWORD *)v11 + 49);
        v759 = v65[17];
        if (!v759)
        {
          __break(0xC471u);
          JUMPOUT(0x1980060FCLL);
        }
        v760 = **((_QWORD **)v65 + 7);
        v761 = *(unsigned int *)(v760 + 36);
        if ((_DWORD)v761)
        {
          v762 = *(unsigned int ***)(v760 + 24);
          if (*v762 == v65)
          {
            v763 = 0;
LABEL_783:
            v762[v763] = v762[v761 - 1];
            *(_DWORD *)(v760 + 36) = v761 - 1;
            v65 = (unsigned int *)*((_QWORD *)v11 + 49);
            v759 = v65[17];
          }
          else
          {
            v763 = 0;
            while (v761 - 1 != v763)
            {
              v764 = v762[++v763];
              if (v764 == v65)
                goto LABEL_783;
            }
          }
        }
        if (v759 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198006104);
        }
        v766 = (uint64_t *)(v65 + 14);
        v765 = *((_QWORD *)v65 + 7);
        v767 = v65[5];
        if (!(_DWORD)v767)
        {
          __break(0xC471u);
          JUMPOUT(0x19800610CLL);
        }
        v768 = *v12;
        if (*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * v767 - 8) != *v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198003254);
        }
        v770 = *(_QWORD *)(v765 + 16);
        v769 = *(_QWORD *)(v765 + 24);
        v771 = *((_QWORD *)v768 + 4);
        v772 = *((_DWORD *)v768 + 2);
        (**(void (***)(JSC::B3::Value *))v768)(v768);
        *(_QWORD *)v768 = off_1E357F5F0;
        *((_WORD *)v768 + 6) = 154;
        *((_DWORD *)v768 + 4) = 0;
        *((_BYTE *)v768 + 20) = 0;
        *((_DWORD *)v768 + 2) = v772;
        *((_QWORD *)v768 + 4) = v771;
        if (v65[17])
          goto LABEL_1656;
        if (v65[16])
        {
          v779 = 0;
          v780 = *v766;
        }
        else
        {
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v65 + 14), (void *)1, v773, v774, v775, v776, v777, v778);
          v779 = v65[17];
          v780 = *((_QWORD *)v65 + 7);
          if (v779 == 1)
            goto LABEL_1191;
        }
        v781 = 16 * v779;
        do
        {
          v782 = v781;
          v783 = v780 + v781;
          *(_QWORD *)v783 = 0;
          *(_BYTE *)(v783 + 8) = 0;
          v781 = v782 + 16;
        }
        while (v782);
        goto LABEL_1191;
      }
LABEL_1177:
      v65 = (unsigned int *)*((_QWORD *)v11 + 49);
      if (v65[17] <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19800611CLL);
      }
      v1261 = *(_QWORD *)(*((_QWORD *)v65 + 7) + 16);
      v1262 = *(unsigned int *)(v1261 + 36);
      if ((_DWORD)v1262)
      {
        v1263 = *(unsigned int ***)(v1261 + 24);
        if (*v1263 == v65)
        {
          v1264 = 0;
LABEL_1183:
          v1263[v1264] = v1263[v1262 - 1];
          *(_DWORD *)(v1261 + 36) = v1262 - 1;
          v65 = (unsigned int *)*((_QWORD *)v11 + 49);
          if (!v65[17])
          {
            __break(0xC471u);
            JUMPOUT(0x19800612CLL);
          }
        }
        else
        {
          v1264 = 0;
          while (v1262 - 1 != v1264)
          {
            v1265 = v1263[++v1264];
            if (v1265 == v65)
              goto LABEL_1183;
          }
        }
      }
      v766 = (uint64_t *)(v65 + 14);
      v1266 = (uint64_t *)*((_QWORD *)v65 + 7);
      v1267 = v65[5];
      if (!(_DWORD)v1267)
      {
        __break(0xC471u);
        JUMPOUT(0x198006124);
      }
      v1268 = *v12;
      if (*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * v1267 - 8) != *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198003390);
      }
      v770 = *v1266;
      v769 = v1266[1];
      v1269 = *((_QWORD *)v1268 + 4);
      v1270 = *((_DWORD *)v1268 + 2);
      (**(void (***)(JSC::B3::Value *))v1268)(v1268);
      *(_QWORD *)v1268 = off_1E357F5F0;
      *((_WORD *)v1268 + 6) = 154;
      *((_DWORD *)v1268 + 4) = 0;
      *((_BYTE *)v1268 + 20) = 0;
      *((_DWORD *)v1268 + 2) = v1270;
      *((_QWORD *)v1268 + 4) = v1269;
      if (v65[17])
        goto LABEL_1656;
      if (v65[16])
      {
        v1277 = 0;
        v780 = *v766;
      }
      else
      {
        WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v65 + 14), (void *)1, v1271, v1272, v1273, v1274, v1275, v1276);
        v1277 = v65[17];
        v780 = *((_QWORD *)v65 + 7);
        if (v1277 == 1)
          goto LABEL_1191;
      }
      v1278 = 16 * v1277;
      do
      {
        v1279 = v1278;
        v1280 = v780 + v1278;
        *(_QWORD *)v1280 = 0;
        *(_BYTE *)(v1280 + 8) = 0;
        v1278 = v1279 + 16;
      }
      while (v1279);
      goto LABEL_1191;
    default:
      if (*(_DWORD *)(*(_QWORD *)v11 + 204) < 2u)
        return;
      v59 = (JSC::B3::Value *)*((_QWORD *)v11 + 51);
      if (*((_BYTE *)v59 + 20) == 4)
      {
        v2380 = JSC::B3::Value::childrenVector(v59);
        if (!*(_DWORD *)(v2380 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980061FCLL);
        }
        v61 = *(_BYTE **)v2380;
      }
      else
      {
        v60 = 40;
        switch(*((_BYTE *)v59 + 12))
        {
          case 0:
          case 1:
          case 2:
          case 8:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x4F:
          case 0x99:
          case 0x9A:
          case 0x9B:
          case 0x9D:
          case 0x9E:
          case 0x9F:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x50:
          case 0x54:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x64:
          case 0x65:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6A:
          case 0x6B:
          case 0x6C:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x75:
          case 0x76:
          case 0x77:
          case 0x78:
          case 0x79:
          case 0x7A:
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
          case 0x7F:
          case 0x80:
          case 0x81:
          case 0x82:
          case 0x83:
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x8B:
          case 0x8C:
          case 0x8D:
          case 0x8E:
          case 0x8F:
          case 0x90:
          case 0x91:
          case 0x92:
          case 0x93:
          case 0x94:
          case 0x95:
          case 0x96:
          case 0x97:
          case 0x98:
            v60 = 48;
            break;
          case 7:
          case 0x51:
          case 0x59:
          case 0x9C:
            v60 = 56;
            break;
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x52:
            v60 = 64;
            break;
          case 0x53:
            v60 = 176;
            break;
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
            v60 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198005F9CLL);
        }
        v61 = (char *)v59 + v60;
      }
      v62 = *((_QWORD *)v11 + 53);
      if (!v62)
        return;
      v63 = 0;
      v64 = *(_DWORD *)(*(_QWORD *)v61 + 8);
      v65 = (unsigned int *)*((_QWORD *)v11 + 49);
      v66 = *(_DWORD *)(v62 - 8);
      v67 = 9 * ((v64 + ~(v64 << 15)) ^ ((v64 + ~(v64 << 15)) >> 10));
      v68 = (v67 ^ (v67 >> 6)) + ~((v67 ^ (v67 >> 6)) << 11);
      v69 = (v68 ^ HIWORD(v68)) + 88;
      while (2)
      {
        v70 = v69 & v66;
        v71 = v62 + 48 * (v69 & v66);
        v72 = *(unsigned __int8 *)(v71 + 1);
        if (*(_BYTE *)v71 || v72 != 88)
        {
          if (!*(_BYTE *)v71
            && v72 == 159
            && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v71 + 4), *(int32x4_t *)(v71 + 4)))) & 1) == 0
            && (*(_BYTE *)(v71 + 2) & 0xF) == 0
            && !*(_DWORD *)(v71 + 20))
          {
            v1915 = *(_DWORD *)(v62 - 4);
            v71 = v62 + 48 * v1915;
            goto LABEL_102;
          }
        }
        else if ((*(_BYTE *)(v71 + 2) & 0xF) == 0
               && !*(_DWORD *)(v71 + 4)
               && *(_DWORD *)(v71 + 8) == v64
               && !*(_DWORD *)(v71 + 12)
               && !*(_DWORD *)(v71 + 16)
               && !*(_DWORD *)(v71 + 20))
        {
          v1915 = *(_DWORD *)(v62 - 4);
LABEL_102:
          if (v71 == v62 + 48 * v1915)
            return;
          v73 = *(unsigned int *)(v71 + 36);
          if (!(_DWORD)v73)
            return;
          v74 = *(_QWORD *)(v71 + 24);
          v75 = *(_QWORD *)(*((_QWORD *)v11 + 52) + 8);
          v76 = 8 * v73;
          while (1)
          {
            v77 = *(unsigned int **)(*(_QWORD *)v74 + 32);
            if (v77)
            {
              v78 = *v77;
              if ((_DWORD)v78 != -1)
              {
                if (v77 == v65)
                  break;
                v79 = v75 + 32 * *v65;
                v80 = v75 + 32 * v78;
                if (*(_DWORD *)(v79 + 24) > *(_DWORD *)(v80 + 24) && *(_DWORD *)(v79 + 28) < *(_DWORD *)(v80 + 28))
                  break;
              }
            }
            v74 += 8;
            v76 -= 8;
            if (!v76)
              return;
          }
          v1612 = v65[17];
          if (!v1612)
          {
            __break(0xC471u);
            JUMPOUT(0x19800616CLL);
          }
          v1613 = **((_QWORD **)v65 + 7);
          v1614 = *(unsigned int *)(v1613 + 36);
          if ((_DWORD)v1614)
          {
            v1615 = *(unsigned int ***)(v1613 + 24);
            if (*v1615 == v65)
            {
              v1616 = 0;
LABEL_1646:
              v1615[v1616] = v1615[v1614 - 1];
              *(_DWORD *)(v1613 + 36) = v1614 - 1;
              v65 = (unsigned int *)*((_QWORD *)v11 + 49);
              v1612 = v65[17];
            }
            else
            {
              v1616 = 0;
              while (v1614 - 1 != v1616)
              {
                v1617 = v1615[++v1616];
                if (v1617 == v65)
                  goto LABEL_1646;
              }
            }
          }
          if (v1612 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198006174);
          }
          v766 = (uint64_t *)(v65 + 14);
          v1618 = *((_QWORD *)v65 + 7);
          v1619 = v65[5];
          if (!(_DWORD)v1619)
          {
            __break(0xC471u);
            JUMPOUT(0x19800617CLL);
          }
          v1620 = *v12;
          if (*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * v1619 - 8) != *v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1980058D8);
          }
          v770 = *(_QWORD *)(v1618 + 16);
          v769 = *(_QWORD *)(v1618 + 24);
          v1621 = *((_QWORD *)v1620 + 4);
          v1622 = *((_DWORD *)v1620 + 2);
          (**(void (***)(JSC::B3::Value *))v1620)(v1620);
          *(_QWORD *)v1620 = off_1E357F5F0;
          *((_WORD *)v1620 + 6) = 154;
          *((_DWORD *)v1620 + 4) = 0;
          *((_BYTE *)v1620 + 20) = 0;
          *((_DWORD *)v1620 + 2) = v1622;
          *((_QWORD *)v1620 + 4) = v1621;
          if (v65[17])
          {
LABEL_1656:
            v780 = *v766;
          }
          else
          {
            if (v65[16])
            {
              v1629 = 0;
              v780 = *v766;
              goto LABEL_1653;
            }
            WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v65 + 14), (void *)1, v1623, v1624, v1625, v1626, v1627, v1628);
            v1629 = v65[17];
            v780 = *((_QWORD *)v65 + 7);
            if (v1629 != 1)
            {
LABEL_1653:
              v1630 = 16 * v1629;
              do
              {
                v1631 = v1630;
                v1632 = v780 + v1630;
                *(_QWORD *)v1632 = 0;
                *(_BYTE *)(v1632 + 8) = 0;
                v1630 = v1631 + 16;
              }
              while (v1631);
            }
          }
LABEL_1191:
          v65[17] = 1;
          *(_QWORD *)v780 = v770;
          *(_BYTE *)(v780 + 8) = v769;
          *((_BYTE *)v11 + 433) = 1;
          return;
        }
        v69 = ++v63 + v70;
        continue;
      }
  }
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::handleCommutativity(uint64_t this)
{
  uint64_t v1;
  JSC::B3::Value *v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = this;
  v2 = *(JSC::B3::Value **)(this + 408);
  if (*((_BYTE *)v2 + 20) == 4)
  {
    this = JSC::B3::Value::childrenVector(*(JSC::B3::Value **)(this + 408));
    if (*(_DWORD *)(this + 12) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x1980089ECLL);
    }
    v4 = *(_BYTE **)this;
  }
  else
  {
    v3 = 40;
    switch(*((_BYTE *)v2 + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v3 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v3 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v3 = 64;
        break;
      case 0x53:
        v3 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v3 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980089E4);
    }
    v4 = (char *)v2 + v3;
  }
  if (*(unsigned __int8 *)(*((_QWORD *)v4 + 1) + 12) - 3 >= 5)
  {
    this = JSC::B3::Value::child(v2, 0);
    if (*(_BYTE *)(*(_QWORD *)this + 12) != 72)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(v2, 0) + 12) - 3 < 5
        || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v2, 1u) + 12) == 72
        || (v5 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v2, 0) + 8),
            this = JSC::B3::Value::child(v2, 1u),
            v5 > *(_DWORD *)(*(_QWORD *)this + 8)))
      {
        v6 = (uint64_t *)JSC::B3::Value::child(*(JSC::B3::Value **)(v1 + 408), 0);
        this = JSC::B3::Value::child(*(JSC::B3::Value **)(v1 + 408), 1u);
        v7 = *v6;
        *v6 = *(_QWORD *)this;
        *(_QWORD *)this = v7;
        *(_BYTE *)(v1 + 432) = 1;
      }
    }
  }
  return this;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNewValue(uint64_t this, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  __int128 *v19;
  __int128 v20;

  if (a2)
  {
    v9 = this;
    *(_QWORD *)&v20 = *(unsigned int *)(this + 400);
    *((_QWORD *)&v20 + 1) = a2;
    v10 = (uint64_t *)(this + 16);
    v11 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 24))
    {
      v19 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v11 + 1), (unint64_t)&v20, a4, a5, a6, a7, a8);
      v11 = *(unsigned int *)(v9 + 28);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *v19;
    }
    else
    {
      v12 = *v10;
      v13 = v20;
    }
    *(_OWORD *)(v12 + 16 * v11) = v13;
    ++*(_DWORD *)(v9 + 28);
    v14 = *(_QWORD *)(v9 + 408);
    v15 = *(_DWORD *)(v14 + 16);
    if (v15 == *((_DWORD *)a2 + 4))
    {
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_DWORD *)(v14 + 8);
      this = (**(uint64_t (***)(_QWORD))v14)(*(_QWORD *)(v9 + 408));
      *(_QWORD *)v14 = off_1E357F5F0;
      if (v15)
      {
        *(_QWORD *)(v14 + 40) = a2;
        v18 = 1;
      }
      else
      {
        v18 = 0;
      }
      *(_WORD *)(v14 + 12) = v18;
      *(_DWORD *)(v14 + 16) = v15;
      *(_BYTE *)(v14 + 20) = v18;
      *(_DWORD *)(v14 + 8) = v17;
      *(_QWORD *)(v14 + 32) = v16;
      *(_BYTE *)(v9 + 432) = 1;
    }
    else
    {
      this = 133;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int16 v10;
  uint64_t Space;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;

  v9 = *a1;
  v10 = a2;
  Space = JSC::B3::Value::allocateSpace(a2, 40);
  JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const32Value *>(Space, v10, a3, a4, a5);
  v17 = *(unsigned int *)(v9 + 92);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v17 - 8);
    *(_DWORD *)(v9 + 92) = v17 - 1;
    v19 = *(_QWORD *)(v9 + 64);
  }
  else
  {
    v18 = *(unsigned int *)(v9 + 76);
    if ((_DWORD)v18 == *(_DWORD *)(v9 + 72))
    {
      v30 = v18 + (v18 >> 2);
      if (v30 >= 0x10)
        v31 = v30 + 1;
      else
        v31 = 16;
      if (v31 <= v18 + 1)
        v32 = v18 + 1;
      else
        v32 = v31;
      if (v32 >> 29)
      {
        __break(0xC471u);
LABEL_27:
        JUMPOUT(0x198008F98);
      }
      v33 = *(const void **)(v9 + 64);
      v34 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
      *(_DWORD *)(v9 + 72) = v32;
      *(_QWORD *)(v9 + 64) = v34;
      memcpy(v34, v33, 8 * v18);
      if (v33)
      {
        if (*(const void **)(v9 + 64) == v33)
        {
          *(_QWORD *)(v9 + 64) = 0;
          *(_DWORD *)(v9 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v33, v35, v36, v12, v13, v14, v15, v16);
      }
      v37 = *(unsigned int *)(v9 + 76);
      v19 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v19 + 8 * v37) = 0;
      *(_DWORD *)(v9 + 76) = v37 + 1;
    }
    else
    {
      v19 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v19 + 8 * v18) = 0;
      *(_DWORD *)(v9 + 76) = v18 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v18;
  *(_QWORD *)(v19 + 8 * v18) = Space;
  *(_QWORD *)&v39 = *((unsigned int *)a1 + 100);
  *((_QWORD *)&v39 + 1) = Space;
  v20 = a1 + 2;
  v21 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v21 == *((_DWORD *)a1 + 6))
  {
    v38 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, (void *)(v21 + 1), (unint64_t)&v39, v12, v13, v14, v15, v16);
    v21 = *((unsigned int *)a1 + 7);
    v22 = a1[2];
    v23 = *v38;
  }
  else
  {
    v22 = *v20;
    v23 = v39;
  }
  *(_OWORD *)(v22 + 16 * v21) = v23;
  ++*((_DWORD *)a1 + 7);
  v24 = a1[51];
  v25 = *(_DWORD *)(v24 + 16);
  if (v25 != *(_DWORD *)(Space + 16))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v26 = *(_QWORD *)(v24 + 32);
  v27 = *(_DWORD *)(v24 + 8);
  result = (**(uint64_t (***)(uint64_t))v24)(a1[51]);
  *(_QWORD *)v24 = off_1E357F5F0;
  if (v25)
  {
    *(_QWORD *)(v24 + 40) = Space;
    v29 = 1;
  }
  else
  {
    v29 = 0;
  }
  *(_WORD *)(v24 + 12) = v29;
  *(_DWORD *)(v24 + 16) = v25;
  *(_BYTE *)(v24 + 20) = v29;
  *(_DWORD *)(v24 + 8) = v27;
  *(_QWORD *)(v24 + 32) = v26;
  *((_BYTE *)a1 + 432) = 1;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;

  v6 = *a1;
  v12 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a2, a3, a4, a5);
  v13 = *(unsigned int *)(v6 + 92);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v13 - 8);
    *(_DWORD *)(v6 + 92) = v13 - 1;
    v15 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v14 = *(unsigned int *)(v6 + 76);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 72))
    {
      v26 = v14 + (v14 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v14 + 1)
        v28 = v14 + 1;
      else
        v28 = v27;
      if (v28 >> 29)
      {
        __break(0xC471u);
LABEL_27:
        JUMPOUT(0x198009190);
      }
      v29 = *(const void **)(v6 + 64);
      v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
      *(_DWORD *)(v6 + 72) = v28;
      *(_QWORD *)(v6 + 64) = v30;
      memcpy(v30, v29, 8 * v14);
      if (v29)
      {
        if (*(const void **)(v6 + 64) == v29)
        {
          *(_QWORD *)(v6 + 64) = 0;
          *(_DWORD *)(v6 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v29, v31, v32, v7, v8, v9, v10, v11);
      }
      v33 = *(unsigned int *)(v6 + 76);
      v15 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v15 + 8 * v33) = 0;
      *(_DWORD *)(v6 + 76) = v33 + 1;
    }
    else
    {
      v15 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v15 + 8 * v14) = 0;
      *(_DWORD *)(v6 + 76) = v14 + 1;
    }
  }
  *(_DWORD *)(v12 + 8) = v14;
  *(_QWORD *)(v15 + 8 * v14) = v12;
  *(_QWORD *)&v35 = *((unsigned int *)a1 + 100);
  *((_QWORD *)&v35 + 1) = v12;
  v16 = a1 + 2;
  v17 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v17 == *((_DWORD *)a1 + 6))
  {
    v34 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)(v17 + 1), (unint64_t)&v35, v7, v8, v9, v10, v11);
    v17 = *((unsigned int *)a1 + 7);
    v18 = a1[2];
    v19 = *v34;
  }
  else
  {
    v18 = *v16;
    v19 = v35;
  }
  *(_OWORD *)(v18 + 16 * v17) = v19;
  ++*((_DWORD *)a1 + 7);
  v20 = a1[51];
  v21 = *(_DWORD *)(v20 + 16);
  if (v21 != *(_DWORD *)(v12 + 16))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(v20 + 32);
  v23 = *(_DWORD *)(v20 + 8);
  result = (**(uint64_t (***)(uint64_t))v20)(a1[51]);
  *(_QWORD *)v20 = off_1E357F5F0;
  if (v21)
  {
    *(_QWORD *)(v20 + 40) = v12;
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  *(_WORD *)(v20 + 12) = v25;
  *(_DWORD *)(v20 + 16) = v21;
  *(_BYTE *)(v20 + 20) = v25;
  *(_DWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 32) = v22;
  *((_BYTE *)a1 + 432) = 1;
  return result;
}

JSC::B3::Value *JSC::B3::`anonymous namespace'::ReduceStrength::handleMulDistributivity(JSC::B3::_anonymous_namespace_::ReduceStrength *this)
{
  JSC::B3::Value *result;
  uint64_t v3;
  uint64_t *v4;
  JSC::B3::Value **v5;
  uint64_t v6;
  JSC::B3::Value **v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  JSC::B3::Value **v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  JSC::B3::Value **v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  JSC::B3::Value **v19;
  JSC::B3::Value **v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  JSC::B3::Value **v25;
  uint64_t v26;
  JSC::B3::Value **v27;
  uint64_t v28;

  result = (JSC::B3::Value *)*((_QWORD *)this + 51);
  if (*((_BYTE *)result + 20) == 4)
  {
    result = (JSC::B3::Value *)JSC::B3::Value::childrenVector(result);
    if (!*((_DWORD *)result + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198009468);
    }
    v4 = *(uint64_t **)result;
  }
  else
  {
    v3 = 40;
    switch(*((_BYTE *)result + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v3 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v3 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v3 = 64;
        break;
      case 0x53:
        v3 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v3 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198009460);
    }
    v4 = (uint64_t *)((char *)result + v3);
  }
  if (*(_BYTE *)(*v4 + 12) == 16)
  {
    result = (JSC::B3::Value *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
    if (*(_BYTE *)(*(_QWORD *)result + 12) == 16)
    {
      v5 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v6 = *(_QWORD *)JSC::B3::Value::child(*v5, 0);
      v7 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
      v8 = *(_QWORD *)JSC::B3::Value::child(*v7, 0);
      v9 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (v6 == v8)
      {
        v21 = (uint64_t *)JSC::B3::Value::child(v9, 0);
        v22 = 1;
        v23 = 1;
      }
      else
      {
        v10 = *(_QWORD *)JSC::B3::Value::child(v9, 1u);
        v11 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
        v12 = *(_QWORD *)JSC::B3::Value::child(*v11, 0);
        v13 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
        if (v10 == v12)
        {
          v23 = 1;
          v21 = (uint64_t *)JSC::B3::Value::child(v13, 1u);
          v22 = 0;
        }
        else
        {
          v14 = *(_QWORD *)JSC::B3::Value::child(v13, 0);
          v15 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
          v16 = *(_QWORD *)JSC::B3::Value::child(*v15, 1u);
          v17 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          if (v14 == v16)
          {
            v21 = (uint64_t *)JSC::B3::Value::child(v17, 0);
            v23 = 0;
            v22 = 1;
          }
          else
          {
            v18 = *(_QWORD *)JSC::B3::Value::child(v17, 1u);
            v19 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
            result = (JSC::B3::Value *)JSC::B3::Value::child(*v19, 1u);
            if (v18 != *(_QWORD *)result)
              return result;
            v20 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
            v21 = (uint64_t *)JSC::B3::Value::child(*v20, 1u);
            v22 = 0;
            v23 = 0;
          }
        }
      }
      v24 = *v21;
      v25 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v26 = *(_QWORD *)JSC::B3::Value::child(*v25, v22);
      v27 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
      result = (JSC::B3::Value *)JSC::B3::Value::child(*v27, v23);
      if (v24)
      {
        v28 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)this + 1, *((unsigned int *)this + 100), *(unsigned __int8 *)(*((_QWORD *)this + 51) + 12), *(_QWORD *)(*((_QWORD *)this + 51) + 24), v26, *(_QWORD *)result);
      }
    }
  }
  return result;
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>(JSC::B3::Value **a1, uint64_t a2, uint64_t a3, int a4)
{
  JSC::B3::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>(*a1, a3, a4);
  return JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,int>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;

  v7 = *a1;
  v8 = a4;
  result = WTF::fastMalloc((WTF *)0x30);
  v15 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = v8;
  v16 = *(unsigned int *)(v7 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v16 - 8);
    *(_DWORD *)(v7 + 92) = v16 - 1;
    v18 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v17 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v17 == *(_DWORD *)(v7 + 72))
    {
      v23 = v17 + (v17 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v17 + 1)
        v25 = v17 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(const void **)(v7 + 64);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(v7 + 72) = v25;
      *(_QWORD *)(v7 + 64) = v27;
      memcpy(v27, v26, 8 * v17);
      if (v26)
      {
        if (*(const void **)(v7 + 64) == v26)
        {
          *(_QWORD *)(v7 + 64) = 0;
          *(_DWORD *)(v7 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, v29, v10, v11, v12, v13, v14);
      }
      v30 = *(unsigned int *)(v7 + 76);
      v18 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v18 + 8 * v30) = 0;
      *(_DWORD *)(v7 + 76) = v30 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      *(_DWORD *)(v7 + 76) = v17 + 1;
    }
  }
  *(_DWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v18 + 8 * v17) = v15;
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v15;
  v19 = a1 + 1;
  v20 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 4))
  {
    v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v32, v10, v11, v12, v13, v14);
    v20 = *((unsigned int *)a1 + 5);
    v21 = a1[1];
    v22 = *v31;
  }
  else
  {
    v21 = *v19;
    v22 = v32;
  }
  *(_OWORD *)(v21 + 16 * v20) = v22;
  ++*((_DWORD *)a1 + 5);
  return v15;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int16 v8;
  JSC::B3::Value *Space;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;

  v7 = *a1;
  v8 = a2;
  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a2, 40);
  result = JSC::B3::Value::Value<JSC::B3::Value*>((uint64_t)Space, v8, a3, a4);
  v16 = *(unsigned int *)(v7 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v16 - 8);
    *(_DWORD *)(v7 + 92) = v16 - 1;
    v18 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v17 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v17 == *(_DWORD *)(v7 + 72))
    {
      v23 = v17 + (v17 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v17 + 1)
        v25 = v17 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(const void **)(v7 + 64);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(v7 + 72) = v25;
      *(_QWORD *)(v7 + 64) = v27;
      memcpy(v27, v26, 8 * v17);
      if (v26)
      {
        if (*(const void **)(v7 + 64) == v26)
        {
          *(_QWORD *)(v7 + 64) = 0;
          *(_DWORD *)(v7 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, v29, v11, v12, v13, v14, v15);
      }
      v30 = *(unsigned int *)(v7 + 76);
      v18 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v18 + 8 * v30) = 0;
      *(_DWORD *)(v7 + 76) = v30 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(v7 + 64);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      *(_DWORD *)(v7 + 76) = v17 + 1;
    }
  }
  *((_DWORD *)Space + 2) = v17;
  *(_QWORD *)(v18 + 8 * v17) = Space;
  *(_QWORD *)&v32 = *((unsigned int *)a1 + 100);
  *((_QWORD *)&v32 + 1) = Space;
  v19 = a1 + 2;
  v20 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 6))
  {
    v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v32, v11, v12, v13, v14, v15);
    v20 = *((unsigned int *)a1 + 7);
    v21 = a1[2];
    v22 = *v31;
  }
  else
  {
    v21 = *v19;
    v22 = v32;
  }
  *(_OWORD *)(v21 + 16 * v20) = v22;
  ++*((_DWORD *)a1 + 7);
  result = JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)a1[51], Space);
  *((_BYTE *)a1 + 432) = 1;
  return result;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,long long>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;

  v8 = *a1;
  result = WTF::fastMalloc((WTF *)0x30);
  v15 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = a4;
  v16 = *(unsigned int *)(v8 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v16 - 8);
    *(_DWORD *)(v8 + 92) = v16 - 1;
    v18 = *(_QWORD *)(v8 + 64);
  }
  else
  {
    v17 = *(unsigned int *)(v8 + 76);
    if ((_DWORD)v17 == *(_DWORD *)(v8 + 72))
    {
      v23 = v17 + (v17 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v17 + 1)
        v25 = v17 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(const void **)(v8 + 64);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(v8 + 72) = v25;
      *(_QWORD *)(v8 + 64) = v27;
      memcpy(v27, v26, 8 * v17);
      if (v26)
      {
        if (*(const void **)(v8 + 64) == v26)
        {
          *(_QWORD *)(v8 + 64) = 0;
          *(_DWORD *)(v8 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, v29, v10, v11, v12, v13, v14);
      }
      v30 = *(unsigned int *)(v8 + 76);
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v30) = 0;
      *(_DWORD *)(v8 + 76) = v30 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      *(_DWORD *)(v8 + 76) = v17 + 1;
    }
  }
  *(_DWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v18 + 8 * v17) = v15;
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v15;
  v19 = a1 + 1;
  v20 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 4))
  {
    v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v32, v10, v11, v12, v13, v14);
    v20 = *((unsigned int *)a1 + 5);
    v21 = a1[1];
    v22 = *v31;
  }
  else
  {
    v21 = *v19;
    v22 = v32;
  }
  *(_OWORD *)(v21 + 16 * v20) = v22;
  ++*((_DWORD *)a1 + 5);
  return v15;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  __int16 v12;
  uint64_t Space;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;

  v11 = *a1;
  v12 = a3;
  Space = JSC::B3::Value::allocateSpace(a3, 40);
  result = JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const32Value *>(Space, v12, a4, a5, a6);
  v20 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v20 - 8);
    *(_DWORD *)(v11 + 92) = v20 - 1;
    v22 = *(_QWORD *)(v11 + 64);
  }
  else
  {
    v21 = *(unsigned int *)(v11 + 76);
    if ((_DWORD)v21 == *(_DWORD *)(v11 + 72))
    {
      v27 = v21 + (v21 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v21 + 1)
        v29 = v21 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v30 = *(const void **)(v11 + 64);
      v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(v11 + 72) = v29;
      *(_QWORD *)(v11 + 64) = v31;
      memcpy(v31, v30, 8 * v21);
      if (v30)
      {
        if (*(const void **)(v11 + 64) == v30)
        {
          *(_QWORD *)(v11 + 64) = 0;
          *(_DWORD *)(v11 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v30, v32, v33, v15, v16, v17, v18, v19);
      }
      v34 = *(unsigned int *)(v11 + 76);
      v22 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(v22 + 8 * v34) = 0;
      *(_DWORD *)(v11 + 76) = v34 + 1;
    }
    else
    {
      v22 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(v22 + 8 * v21) = 0;
      *(_DWORD *)(v11 + 76) = v21 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v21;
  *(_QWORD *)(v22 + 8 * v21) = Space;
  *(_QWORD *)&v36 = a2;
  *((_QWORD *)&v36 + 1) = Space;
  v23 = a1 + 1;
  v24 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v24 == *((_DWORD *)a1 + 4))
  {
    v35 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, (void *)(v24 + 1), (unint64_t)&v36, v15, v16, v17, v18, v19);
    v24 = *((unsigned int *)a1 + 5);
    v25 = a1[1];
    v26 = *v35;
  }
  else
  {
    v25 = *v23;
    v26 = v36;
  }
  *(_OWORD *)(v25 + 16 * v24) = v26;
  ++*((_DWORD *)a1 + 5);
  return Space;
}

uint64_t *JSC::B3::`anonymous namespace'::ReduceStrength::handleBitAndDistributivity(JSC::B3::_anonymous_namespace_::ReduceStrength *this)
{
  int v2;
  JSC::B3::Value *v3;
  uint64_t *result;
  JSC::B3::Value **v5;
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value **v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  unsigned int v13;
  JSC::B3::Value **v14;
  uint64_t v15;
  JSC::B3::Value **v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::B3::Value **v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  JSC::B3::Value **v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  JSC::B3::Value **v28;
  JSC::B3::Value **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  unsigned int v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  unsigned int v35;
  uint64_t v36;
  JSC::B3::Value **v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  JSC::B3::Value **v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  unsigned int v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  unsigned int v47;
  JSC::B3::Value *v48;
  unsigned int v49;

  if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 12) == 22
    && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u) + 12) == 22)
  {
    v14 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
    v15 = *(_QWORD *)JSC::B3::Value::child(*v14, 0);
    v16 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
    v17 = *(_QWORD *)JSC::B3::Value::child(*v16, 0);
    v18 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
    if (v15 == v17)
    {
      v30 = *(_QWORD *)JSC::B3::Value::child(v18, 0);
      v46 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v47 = 1;
    }
    else
    {
      v19 = *(_QWORD *)JSC::B3::Value::child(v18, 1u);
      v20 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
      v21 = *(_QWORD *)JSC::B3::Value::child(*v20, 0);
      v22 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      if (v19 != v21)
      {
        v23 = *(_QWORD *)JSC::B3::Value::child(v22, 0);
        v24 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
        v25 = *(_QWORD *)JSC::B3::Value::child(*v24, 1u);
        v26 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
        if (v23 == v25)
        {
          v30 = *(_QWORD *)JSC::B3::Value::child(v26, 0);
          v31 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          v32 = 1;
        }
        else
        {
          v27 = *(_QWORD *)JSC::B3::Value::child(v26, 1u);
          v28 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
          result = (uint64_t *)JSC::B3::Value::child(*v28, 1u);
          if (v27 != *result)
            return result;
          v29 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          v30 = *(_QWORD *)JSC::B3::Value::child(*v29, 1u);
          v31 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
          v32 = 0;
        }
        v33 = *(_QWORD *)JSC::B3::Value::child(v31, v32);
        v34 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
        v35 = 0;
        goto LABEL_15;
      }
      v30 = *(_QWORD *)JSC::B3::Value::child(v22, 1u);
      v46 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
      v47 = 0;
    }
    v33 = *(_QWORD *)JSC::B3::Value::child(v46, v47);
    v34 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
    v35 = 1;
LABEL_15:
    result = (uint64_t *)JSC::B3::Value::child(v34, v35);
    v36 = v33;
    v11 = *result;
    goto LABEL_21;
  }
  v2 = *(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0) + 12);
  v3 = (JSC::B3::Value *)*((_QWORD *)this + 51);
  if (v2 == 22)
  {
    v37 = (JSC::B3::Value **)JSC::B3::Value::child(v3, 0);
    v38 = *(_QWORD *)JSC::B3::Value::child(*v37, 0);
    v39 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
    v40 = (JSC::B3::Value *)*((_QWORD *)this + 51);
    if (v38 != v39)
    {
      v41 = (JSC::B3::Value **)JSC::B3::Value::child(v40, 0);
      v42 = *(_QWORD *)JSC::B3::Value::child(*v41, 1u);
      result = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
      if (v42 != *result)
        return result;
      v11 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
      v12 = (JSC::B3::Value *)*((_QWORD *)this + 51);
      v13 = 0;
      goto LABEL_19;
    }
    v11 = *(_QWORD *)JSC::B3::Value::child(v40, 1u);
    v48 = (JSC::B3::Value *)*((_QWORD *)this + 51);
    v49 = 0;
LABEL_26:
    v43 = *(JSC::B3::Value **)JSC::B3::Value::child(v48, v49);
    v44 = 1;
    goto LABEL_20;
  }
  result = (uint64_t *)JSC::B3::Value::child(v3, 1u);
  if (*(_BYTE *)(*result + 12) != 22)
    return result;
  v5 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 1u);
  v6 = *(_QWORD *)JSC::B3::Value::child(*v5, 0);
  v7 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 51);
  if (v6 == v7)
  {
    v11 = *(_QWORD *)JSC::B3::Value::child(v8, 0);
    v48 = (JSC::B3::Value *)*((_QWORD *)this + 51);
    v49 = 1;
    goto LABEL_26;
  }
  v9 = (JSC::B3::Value **)JSC::B3::Value::child(v8, 1u);
  v10 = *(_QWORD *)JSC::B3::Value::child(*v9, 1u);
  result = (uint64_t *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
  if (v10 != *result)
    return result;
  v11 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 51), 0);
  v12 = (JSC::B3::Value *)*((_QWORD *)this + 51);
  v13 = 1;
LABEL_19:
  v43 = *(JSC::B3::Value **)JSC::B3::Value::child(v12, v13);
  v44 = 0;
LABEL_20:
  result = (uint64_t *)JSC::B3::Value::child(v43, v44);
  v36 = *result;
  v30 = v11;
LABEL_21:
  if (v30)
  {
    v45 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)this + 1, *((unsigned int *)this + 100), *(unsigned __int8 *)(*((_QWORD *)this + 51) + 12), *(_QWORD *)(*((_QWORD *)this + 51) + 24), v36, v11);
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::handleShiftAmount(JSC::B3::Value **this)
{
  uint64_t v2;
  BOOL v3;
  JSC::B3::Value *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  JSC::B3::Value **v9;
  JSC::B3::Value **v11;
  uint64_t v12;
  JSC::B3::Value **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;

  v2 = JSC::B3::Value::child(this[51], 1u);
  if (*(_QWORD *)v2)
    v3 = (*(_WORD *)(*(_QWORD *)v2 + 12) & 0xFFF) == 3;
  else
    v3 = 0;
  if (v3 && !*(_DWORD *)(*(_QWORD *)v2 + 40))
  {
    v15 = JSC::B3::Value::child(this[51], 0);
    v16 = *(_QWORD *)v15;
    v17 = this[51];
    v18 = *((_DWORD *)v17 + 4);
    if (v18 == *(_DWORD *)(*(_QWORD *)v15 + 16))
    {
      v19 = *((_QWORD *)v17 + 4);
      v20 = *((_DWORD *)v17 + 2);
      result = (**(uint64_t (***)(JSC::B3::Value *))v17)(this[51]);
      *(_QWORD *)v17 = off_1E357F5F0;
      if (v18)
      {
        *((_QWORD *)v17 + 5) = v16;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      *((_WORD *)v17 + 6) = v21;
      *((_DWORD *)v17 + 4) = v18;
      *((_BYTE *)v17 + 20) = v21;
      *((_DWORD *)v17 + 2) = v20;
      *((_QWORD *)v17 + 4) = v19;
      goto LABEL_27;
    }
    result = 133;
    __break(0xC471u);
  }
  else
  {
    v4 = this[51];
    v5 = *((_DWORD *)v4 + 4);
    if (v5 >= 0x80000000)
      v5 = 0x80000000;
    v6 = v5 - 1;
    if (v6 > 4)
      v7 = -1;
    else
      v7 = dword_19914FD98[v6];
    result = JSC::B3::Value::child(v4, 1u);
    if (*(_BYTE *)(*(_QWORD *)result + 12) == 22)
    {
      v9 = (JSC::B3::Value **)JSC::B3::Value::child(this[51], 1u);
      result = JSC::B3::Value::child(*v9, 1u);
      if (*(_QWORD *)result && (*(_WORD *)(*(_QWORD *)result + 12) & 0xFFF) == 3)
      {
        v11 = (JSC::B3::Value **)JSC::B3::Value::child(this[51], 1u);
        result = JSC::B3::Value::child(*v11, 1u);
        v12 = *(_QWORD *)result;
        if ((*(_WORD *)(*(_QWORD *)result + 12) & 0xFFF) != 3)
          v12 = 0;
        if ((v7 & ~*(_DWORD *)(v12 + 40)) == 0)
        {
          v13 = (JSC::B3::Value **)JSC::B3::Value::child(this[51], 1u);
          v14 = *(_QWORD *)JSC::B3::Value::child(*v13, 0);
          result = JSC::B3::Value::child(this[51], 1u);
          *(_QWORD *)result = v14;
LABEL_27:
          *((_BYTE *)this + 432) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,long>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;

  v6 = *a1;
  result = WTF::fastMalloc((WTF *)0x30);
  v13 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = 0x7FFFFFFF;
  v14 = *(unsigned int *)(v6 + 92);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v14 - 8);
    *(_DWORD *)(v6 + 92) = v14 - 1;
    v16 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v15 = *(unsigned int *)(v6 + 76);
    if ((_DWORD)v15 == *(_DWORD *)(v6 + 72))
    {
      v21 = v15 + (v15 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v15 + 1)
        v23 = v15 + 1;
      else
        v23 = v22;
      if (v23 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v24 = *(const void **)(v6 + 64);
      v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)(v6 + 72) = v23;
      *(_QWORD *)(v6 + 64) = v25;
      memcpy(v25, v24, 8 * v15);
      if (v24)
      {
        if (*(const void **)(v6 + 64) == v24)
        {
          *(_QWORD *)(v6 + 64) = 0;
          *(_DWORD *)(v6 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v24, v26, v27, v8, v9, v10, v11, v12);
      }
      v28 = *(unsigned int *)(v6 + 76);
      v16 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v16 + 8 * v28) = 0;
      *(_DWORD *)(v6 + 76) = v28 + 1;
    }
    else
    {
      v16 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v16 + 8 * v15) = 0;
      *(_DWORD *)(v6 + 76) = v15 + 1;
    }
  }
  *(_DWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v16 + 8 * v15) = v13;
  *(_QWORD *)&v30 = a2;
  *((_QWORD *)&v30 + 1) = v13;
  v17 = a1 + 1;
  v18 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v18 == *((_DWORD *)a1 + 4))
  {
    v29 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, (void *)(v18 + 1), (unint64_t)&v30, v8, v9, v10, v11, v12);
    v18 = *((unsigned int *)a1 + 5);
    v19 = a1[1];
    v20 = *v29;
  }
  else
  {
    v19 = *v17;
    v20 = v30;
  }
  *(_OWORD *)(v19 + 16 * v18) = v20;
  ++*((_DWORD *)a1 + 5);
  return v13;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::rangeFor(JSC::B3::_anonymous_namespace_::ReduceStrength *this, JSC::B3::Value *a2)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  int v7;
  JSC::B3::_anonymous_namespace_::ReduceStrength *v8;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v9;
  JSC::B3::Value *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v58;
  int v59;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v61;
  JSC::B3::Value *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v74;
  JSC::B3::Value *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  uint64_t v88;
  BOOL v89;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::_anonymous_namespace_::ReduceStrength **v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;

  if ((_DWORD)a2)
  {
    if (*((_WORD *)this + 6) - 3 < 2)
    {
      v7 = *((_WORD *)this + 6) & 0xFFF;
      if (v7 == 3)
      {
        return *((int *)this + 10);
      }
      else
      {
        if (v7 == 4)
          v8 = this;
        else
          v8 = 0;
        return *((_QWORD *)v8 + 5);
      }
    }
    else
    {
      v3 = (int)a2;
      switch(*((_WORD *)this + 6))
      {
        case 0xEu:
          v9 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v10 = (JSC::B3::Value *)(v3 - 1);
          v14 = v13;
          v15 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 1u);
          v19 = *((_DWORD *)this + 4);
          if (v19 >= 0x80000000)
            v19 = 0x80000000;
          if (v19 != 1)
          {
            if (v19 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19800AD90);
            }
            if (__OFADD__(v12, v17) || __OFADD__(v12, v18) || __OFADD__(v14, v17) || __OFADD__(v14, v18))
              return 0x8000000000000000;
            return v17 + v12;
          }
          v5 = 0xFFFFFFFF80000000;
          v20 = __OFADD__((_DWORD)v12, (_DWORD)v17);
          if (v12 == (int)v12 && (unint64_t)(v17 - 0x80000000) >= 0xFFFFFFFF00000000 && !v20)
          {
            v21 = __OFADD__((_DWORD)v12, (_DWORD)v18);
            if (v18 == (int)v18 && !v21)
            {
              v22 = __OFADD__((_DWORD)v14, (_DWORD)v17);
              if (v14 == (int)v14 && !v22 && !__OFADD__((_DWORD)v14, (_DWORD)v18))
                return v17 + v12;
            }
          }
          break;
        case 0xFu:
          v74 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v75 = (JSC::B3::Value *)(v3 - 1);
          v79 = v78;
          v80 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 1u);
          v84 = *((_DWORD *)this + 4);
          if (v84 >= 0x80000000)
            v84 = 0x80000000;
          if (v84 == 1)
          {
            v5 = 0xFFFFFFFF80000000;
            v85 = __OFSUB__((_DWORD)v77, (_DWORD)v82);
            if (v77 == (int)v77 && (unint64_t)(v82 - 0x80000000) >= 0xFFFFFFFF00000000 && !v85)
            {
              v86 = __OFSUB__((_DWORD)v77, (_DWORD)v83);
              if (v83 == (int)v83 && !v86)
              {
                v87 = __OFSUB__((_DWORD)v79, (_DWORD)v82);
                if (v79 == (int)v79 && !v87 && !__OFSUB__((_DWORD)v79, (_DWORD)v83))
                  return v77 - v83;
              }
            }
          }
          else
          {
            if (v84 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19800AE30);
            }
            if (__OFSUB__(v77, v82))
              return 0x8000000000000000;
            v5 = v77 - v83;
            if (__OFSUB__(v77, v83) || __OFSUB__(v79, v82) || __OFSUB__(v79, v83))
              return 0x8000000000000000;
          }
          return v5;
        case 0x10u:
          v61 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v62 = (JSC::B3::Value *)(v3 - 1);
          v66 = v65;
          v67 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 1u);
          v71 = *((_DWORD *)this + 4);
          if (v71 >= 0x80000000)
            v71 = 0x80000000;
          if (v71 == 1)
          {
            v5 = 0xFFFFFFFF80000000;
            if (v64 == (int)v64
              && (unint64_t)(v69 - 0x80000000) >= 0xFFFFFFFF00000000
              && (int)v64 * (uint64_t)(int)v69 == (_DWORD)v64 * (_DWORD)v69
              && v70 == (int)v70
              && (int)v70 * (uint64_t)(int)v64 == (_DWORD)v70 * (_DWORD)v64
              && v66 == (int)v66
              && (int)v66 * (uint64_t)(int)v69 == (_DWORD)v66 * (_DWORD)v69
              && (int)v66 * (uint64_t)(int)v70 == (_DWORD)v66 * (_DWORD)v70)
            {
              if (v70 * v66 >= v69 * v66)
                v72 = v69 * v66;
              else
                v72 = v70 * v66;
              if (v70 * v64 >= v69 * v64)
                v73 = v69 * v64;
              else
                v73 = v70 * v64;
              if (v72 >= v73)
                return v73;
              else
                return v72;
            }
          }
          else
          {
            if (v71 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19800AE10);
            }
          }
          return v5;
        case 0x16u:
          v45 = JSC::B3::Value::child(this, 1u);
          if (*(_QWORD *)v45)
            v46 = (*(_WORD *)(*(_QWORD *)v45 + 12) & 0xFFFu) - 3 > 1;
          else
            v46 = 1;
          if (v46)
            goto LABEL_4;
          v47 = JSC::B3::Value::child(this, 1u);
          v48 = *(_QWORD *)v47;
          v49 = *(_WORD *)(*(_QWORD *)v47 + 12) & 0xFFF;
          if (*(_QWORD *)v47 && v49 == 3)
          {
            v50 = *(int *)(v48 + 40);
          }
          else
          {
            if (v49 != 4)
              v48 = 0;
            v50 = *(_QWORD *)(v48 + 40);
          }
          v51 = *((_DWORD *)this + 4);
          if (v51 >= 0x80000000)
            v51 = 0x80000000;
          if (v51 == 1)
          {
            if ((int)v50 < 0)
              return 0xFFFFFFFF80000000;
            else
              return 0;
          }
          else
          {
            if (v51 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19800ADF0);
            }
            return v50 & 0x8000000000000000;
          }
        case 0x19u:
          v32 = JSC::B3::Value::child(this, 1u);
          if (*(_QWORD *)v32)
            v33 = (*(_WORD *)(*(_QWORD *)v32 + 12) & 0xFFF) == 3;
          else
            v33 = 0;
          if (!v33)
            goto LABEL_4;
          v34 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v38 = v37;
          v39 = JSC::B3::Value::child(this, 1u);
          v40 = *(_QWORD *)v39;
          if ((*(_WORD *)(*(_QWORD *)v39 + 12) & 0xFFF) != 3)
            v40 = 0;
          v41 = *(_DWORD *)(v40 + 40);
          v42 = *((_DWORD *)this + 4);
          if (v42 >= 0x80000000)
            v42 = 0x80000000;
          if (v42 == 2)
          {
            v5 = v36 << v41;
            v24 = v36 << v41 >> v41 == v36;
            v43 = v38 << v41 >> v41;
            if (!v24 || v43 != v38)
              return 0x8000000000000000;
          }
          else
          {
            if (v42 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19800ADD0);
            }
            v58 = (_DWORD)v36 << v41;
            v24 = (int)((_DWORD)v36 << v41) >> v41 == (_DWORD)v36;
            v59 = (int)((_DWORD)v38 << v41) >> v41;
            if (!v24 || v59 != (_DWORD)v38)
              return (int)0x80000000;
            return v58;
          }
          return v5;
        case 0x1Au:
          v23 = JSC::B3::Value::child(this, 1u);
          if (*(_QWORD *)v23)
            v24 = (*(_WORD *)(*(_QWORD *)v23 + 12) & 0xFFF) == 3;
          else
            v24 = 0;
          if (!v24)
            goto LABEL_4;
          v25 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v28 = JSC::B3::Value::child(this, 1u);
          v29 = *(_QWORD *)v28;
          if ((*(_WORD *)(*(_QWORD *)v28 + 12) & 0xFFF) != 3)
            v29 = 0;
          v30 = *(_DWORD *)(v29 + 40);
          v31 = *((_DWORD *)this + 4);
          if (v31 >= 0x80000000)
            v31 = 0x80000000;
          if (v31 == 1)
            return (int)v27 >> v30;
          if (v31 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19800ADB0);
          }
          return v27 >> v30;
        case 0x1Bu:
          v88 = JSC::B3::Value::child(this, 1u);
          if (*(_QWORD *)v88)
            v89 = (*(_WORD *)(*(_QWORD *)v88 + 12) & 0xFFF) == 3;
          else
            v89 = 0;
          if (!v89)
            goto LABEL_4;
          v90 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v92 = JSC::B3::Value::child(this, 1u);
          v93 = *(_QWORD *)v92;
          if ((*(_WORD *)(*(_QWORD *)v92 + 12) & 0xFFF) != 3)
            v93 = 0;
          v94 = *(_DWORD *)(v93 + 40);
          v95 = *((_DWORD *)this + 4);
          if (v95 >= 0x80000000)
            v95 = 0x80000000;
          if (v95 == 1)
          {
            if (v94)
            {
              if ((v5 & 0x8000000000000000) != 0)
                return 0;
              else
                return v5 >> v94;
            }
          }
          else
          {
            if (v95 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19800AE50);
            }
            if (v94)
            {
              if ((v5 & 0x8000000000000000) != 0)
                return 0;
              else
                v5 >>= v94;
            }
          }
          return v5;
        case 0x26u:
        case 0x28u:
          v97 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v5 = v99;
          if (v99 != (char)v99 || v100 < -128 || v100 >= 128)
          {
            if ((v100 ^ (unint64_t)v99) <= 0x7F)
              return (char)v99;
            else
              return -128;
          }
          return v5;
        case 0x27u:
        case 0x29u:
          v101 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v5 = v103;
          if (v103 != (__int16)v103 || v104 < -32768 || v104 >= 0x8000)
          {
            if ((v104 ^ (unint64_t)v103) >> 15)
              return -32768;
            else
              return (__int16)v103;
          }
          return v5;
        case 0x2Au:
          v52 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          v5 = v54;
          if (v54 == (int)v54 && v55 >= (uint64_t)0xFFFFFFFF80000000 && v55 < 0x80000000)
            return v5;
          if ((v55 ^ (unint64_t)v54) >> 31)
            return 0xFFFFFFFF80000000;
          return (int)v54;
        case 0x2Bu:
          v105 = (JSC::B3::_anonymous_namespace_::ReduceStrength **)JSC::B3::Value::child(this, 0);
          if (v108 < 0 || v107 >= 0)
            return v107;
          else
            return 0;
        default:
LABEL_4:
          v4 = *((_DWORD *)this + 4);
          if (v4 >= 0x80000000)
            v4 = 0x80000000;
          if (v4 == 1)
            return 0xFFFFFFFF80000000;
          if (v4 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19800AE7CLL);
          }
          return 0x8000000000000000;
      }
    }
  }
  else
  {
    v96 = *((_DWORD *)this + 4);
    if (v96 >= 0x80000000)
      v96 = 0x80000000;
    if (v96 == 1)
    {
      return 0xFFFFFFFF80000000;
    }
    else
    {
      if (v96 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19800ABC8);
      }
      return 0x8000000000000000;
    }
  }
  return v5;
}

uint64_t *JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *,JSC::B3::Value *>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  __int16 v8;
  uint64_t v12;
  uint64_t Space;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;

  v8 = a4;
  v12 = *a1;
  Space = JSC::B3::Value::allocateSpace(a4, 48);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = v8;
  *(_DWORD *)(Space + 16) = 5;
  *(_BYTE *)(Space + 20) = 2;
  *(_QWORD *)(Space + 24) = a3;
  *(_QWORD *)(Space + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, a5, a6);
  *(_QWORD *)Space = off_1E357EA50;
  *(_WORD *)(Space + 40) = 0;
  v20 = *(unsigned int *)(v12 + 92);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8 * v20 - 8);
    *(_DWORD *)(v12 + 92) = v20 - 1;
    v22 = *(_QWORD *)(v12 + 64);
  }
  else
  {
    v21 = *(unsigned int *)(v12 + 76);
    if ((_DWORD)v21 == *(_DWORD *)(v12 + 72))
    {
      v27 = v21 + (v21 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v21 + 1)
        v29 = v21 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v30 = *(const void **)(v12 + 64);
      v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(v12 + 72) = v29;
      *(_QWORD *)(v12 + 64) = v31;
      memcpy(v31, v30, 8 * v21);
      if (v30)
      {
        if (*(const void **)(v12 + 64) == v30)
        {
          *(_QWORD *)(v12 + 64) = 0;
          *(_DWORD *)(v12 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v30, v32, v33, v15, v16, v17, v18, v19);
      }
      v34 = *(unsigned int *)(v12 + 76);
      v22 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v22 + 8 * v34) = 0;
      *(_DWORD *)(v12 + 76) = v34 + 1;
    }
    else
    {
      v22 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v22 + 8 * v21) = 0;
      *(_DWORD *)(v12 + 76) = v21 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v21;
  *(_QWORD *)(v22 + 8 * v21) = Space;
  *(_QWORD *)&v36 = a2;
  *((_QWORD *)&v36 + 1) = Space;
  v23 = a1 + 1;
  v24 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v24 == *((_DWORD *)a1 + 4))
  {
    v35 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, (void *)(v24 + 1), (unint64_t)&v36, v15, v16, v17, v18, v19);
    v24 = *((unsigned int *)a1 + 5);
    v25 = a1[1];
    v26 = *v35;
  }
  else
  {
    v25 = *v23;
    v26 = v36;
  }
  *(_OWORD *)(v25 + 16 * v24) = v26;
  ++*((_DWORD *)a1 + 5);
  return (uint64_t *)Space;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNew<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *,JSC::B3::Value *>(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6)
{
  __int16 v9;
  uint64_t v12;
  uint64_t Space;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t result;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;

  v9 = a3;
  v12 = *a1;
  Space = JSC::B3::Value::allocateSpace(a3, 48);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = v9;
  *(_DWORD *)(Space + 16) = 5;
  *(_BYTE *)(Space + 20) = 2;
  *(_QWORD *)(Space + 24) = a2;
  *(_QWORD *)(Space + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, a5, a6);
  *(_QWORD *)Space = off_1E357EA50;
  *(_BYTE *)(Space + 40) = a4 & 0x3F;
  *(_BYTE *)(Space + 41) = 0;
  v19 = *(unsigned int *)(v12 + 92);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8 * v19 - 8);
    *(_DWORD *)(v12 + 92) = v19 - 1;
    v21 = *(_QWORD *)(v12 + 64);
  }
  else
  {
    v20 = *(unsigned int *)(v12 + 76);
    if ((_DWORD)v20 == *(_DWORD *)(v12 + 72))
    {
      v32 = v20 + (v20 >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= v20 + 1)
        v34 = v20 + 1;
      else
        v34 = v33;
      if (v34 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19800B340);
      }
      v35 = *(const void **)(v12 + 64);
      v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
      *(_DWORD *)(v12 + 72) = v34;
      *(_QWORD *)(v12 + 64) = v36;
      memcpy(v36, v35, 8 * v20);
      if (v35)
      {
        if (*(const void **)(v12 + 64) == v35)
        {
          *(_QWORD *)(v12 + 64) = 0;
          *(_DWORD *)(v12 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v35, v37, v38, v14, v15, v16, v17, v18);
      }
      v39 = *(unsigned int *)(v12 + 76);
      v21 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v21 + 8 * v39) = 0;
      *(_DWORD *)(v12 + 76) = v39 + 1;
    }
    else
    {
      v21 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v21 + 8 * v20) = 0;
      *(_DWORD *)(v12 + 76) = v20 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v20;
  *(_QWORD *)(v21 + 8 * v20) = Space;
  *(_QWORD *)&v41 = *((unsigned int *)a1 + 100);
  *((_QWORD *)&v41 + 1) = Space;
  v22 = a1 + 2;
  v23 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v23 == *((_DWORD *)a1 + 6))
  {
    v40 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, (void *)(v23 + 1), (unint64_t)&v41, v14, v15, v16, v17, v18);
    v23 = *((unsigned int *)a1 + 7);
    v24 = a1[2];
    v25 = *v40;
  }
  else
  {
    v24 = *v22;
    v25 = v41;
  }
  *(_OWORD *)(v24 + 16 * v23) = v25;
  ++*((_DWORD *)a1 + 7);
  v26 = a1[51];
  v27 = *(_DWORD *)(v26 + 16);
  if (v27 != *(_DWORD *)(Space + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x19800B338);
  }
  v28 = *(_QWORD *)(v26 + 32);
  v29 = *(_DWORD *)(v26 + 8);
  result = (**(uint64_t (***)(uint64_t))v26)(a1[51]);
  *(_QWORD *)v26 = off_1E357F5F0;
  if (v27)
  {
    *(_QWORD *)(v26 + 40) = Space;
    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  *(_WORD *)(v26 + 12) = v31;
  *(_DWORD *)(v26 + 16) = v27;
  *(_BYTE *)(v26 + 20) = v31;
  *(_DWORD *)(v26 + 8) = v29;
  *(_QWORD *)(v26 + 32) = v28;
  *((_BYTE *)a1 + 432) = 1;
  return result;
}

BOOL JSC::SIMDShuffle::isIdentity(unint64_t a1, unint64_t a2)
{
  return (a1 & 0xF) == 0
      && a1 + 1 == BYTE1(a1)
      && a1 + 2 == BYTE2(a1)
      && a1 + 3 == BYTE3(a1)
      && a1 + 4 == BYTE4(a1)
      && a1 + 5 == BYTE5(a1)
      && a1 + 6 == BYTE6(a1)
      && a1 + 7 == HIBYTE(a1)
      && a1 + 8 == a2
      && a1 + 9 == BYTE1(a2)
      && a1 + 10 == BYTE2(a2)
      && a1 + 11 == BYTE3(a2)
      && a1 + 12 == BYTE4(a2)
      && a1 + 13 == BYTE5(a2)
      && a1 + 14 == BYTE6(a2)
      && a1 + 15 == HIBYTE(a2);
}

BOOL JSC::SIMDShuffle::isAllOutOfBoundsForUnaryShuffle(unint64_t a1, unint64_t a2)
{
  _BOOL4 v2;

  v2 = (a1 & 0xF0) != 0;
  if ((a1 & 0xF000) == 0)
    v2 = 0;
  if ((a1 & 0xF00000) == 0)
    v2 = 0;
  if ((a1 & 0xF0000000) == 0)
    v2 = 0;
  if ((a1 & 0xF000000000) == 0)
    v2 = 0;
  if ((a1 & 0xF00000000000) == 0)
    v2 = 0;
  if ((a1 & 0xF0000000000000) == 0)
    v2 = 0;
  if (!(a1 >> 60))
    v2 = 0;
  if ((a2 & 0xF0) == 0)
    v2 = 0;
  if ((a2 & 0xF000) == 0)
    v2 = 0;
  if ((a2 & 0xF00000) == 0)
    v2 = 0;
  if ((a2 & 0xF0000000) == 0)
    v2 = 0;
  if ((a2 & 0xF000000000) == 0)
    v2 = 0;
  if ((a2 & 0xF00000000000) == 0)
    v2 = 0;
  if ((a2 & 0xF0000000000000) == 0)
    v2 = 0;
  return a2 >> 60 && v2;
}

uint64_t JSC::SIMDShuffle::isI64x2DupElement(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;

  if ((a1 & 7) == 0
    && a1 + 1 == BYTE1(a1)
    && a1 + 2 == BYTE2(a1)
    && a1 + 3 == BYTE3(a1)
    && a1 + 4 == BYTE4(a1)
    && a1 + 5 == BYTE5(a1)
    && a1 + 6 == BYTE6(a1)
    && a1 + 7 == HIBYTE(a1)
    && (a2 & 7) == 0
    && a2 + 1 == BYTE1(a2)
    && a2 + 2 == BYTE2(a2)
    && a2 + 3 == BYTE3(a2)
    && a2 + 4 == BYTE4(a2)
    && a2 + 5 == BYTE5(a2)
    && a2 + 6 == BYTE6(a2)
    && a2 + 7 == HIBYTE(a2))
  {
    v2 = a1 == a2 && a1 < 0x10u;
    if (a1 == a2 && a1 < 0x10u)
      v3 = a1 >> 3;
    else
      v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | (v2 << 8);
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::replaceWithNew<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,unsigned char,JSC::B3::Value *>(uint64_t *a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;

  v10 = *a1;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 92;
  *(_DWORD *)(v16 + 16) = 5;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)v16 = off_1E357EA50;
  *(_BYTE *)(v16 + 40) = a3 & 0x3F;
  *(_BYTE *)(v16 + 41) = a4;
  v17 = *(unsigned int *)(v10 + 92);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v17 - 8);
    *(_DWORD *)(v10 + 92) = v17 - 1;
    v19 = *(_QWORD *)(v10 + 64);
  }
  else
  {
    v18 = *(unsigned int *)(v10 + 76);
    if ((_DWORD)v18 == *(_DWORD *)(v10 + 72))
    {
      v30 = v18 + (v18 >> 2);
      if (v30 >= 0x10)
        v31 = v30 + 1;
      else
        v31 = 16;
      if (v31 <= v18 + 1)
        v32 = v18 + 1;
      else
        v32 = v31;
      if (v32 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19800B834);
      }
      v33 = *(const void **)(v10 + 64);
      v34 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
      *(_DWORD *)(v10 + 72) = v32;
      *(_QWORD *)(v10 + 64) = v34;
      memcpy(v34, v33, 8 * v18);
      if (v33)
      {
        if (*(const void **)(v10 + 64) == v33)
        {
          *(_QWORD *)(v10 + 64) = 0;
          *(_DWORD *)(v10 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v33, v35, v36, v11, v12, v13, v14, v15);
      }
      v37 = *(unsigned int *)(v10 + 76);
      v19 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v19 + 8 * v37) = 0;
      *(_DWORD *)(v10 + 76) = v37 + 1;
    }
    else
    {
      v19 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v19 + 8 * v18) = 0;
      *(_DWORD *)(v10 + 76) = v18 + 1;
    }
  }
  *(_DWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v19 + 8 * v18) = v16;
  *(_QWORD *)&v39 = *((unsigned int *)a1 + 100);
  *((_QWORD *)&v39 + 1) = v16;
  v20 = a1 + 2;
  v21 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v21 == *((_DWORD *)a1 + 6))
  {
    v38 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, (void *)(v21 + 1), (unint64_t)&v39, v11, v12, v13, v14, v15);
    v21 = *((unsigned int *)a1 + 7);
    v22 = a1[2];
    v23 = *v38;
  }
  else
  {
    v22 = *v20;
    v23 = v39;
  }
  *(_OWORD *)(v22 + 16 * v21) = v23;
  ++*((_DWORD *)a1 + 7);
  v24 = a1[51];
  v25 = *(_DWORD *)(v24 + 16);
  if (v25 != *(_DWORD *)(v16 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x19800B82CLL);
  }
  v26 = *(_QWORD *)(v24 + 32);
  v27 = *(_DWORD *)(v24 + 8);
  result = (**(uint64_t (***)(uint64_t))v24)(a1[51]);
  *(_QWORD *)v24 = off_1E357F5F0;
  if (v25)
  {
    *(_QWORD *)(v24 + 40) = v16;
    v29 = 1;
  }
  else
  {
    v29 = 0;
  }
  *(_WORD *)(v24 + 12) = v29;
  *(_DWORD *)(v24 + 16) = v25;
  *(_BYTE *)(v24 + 20) = v29;
  *(_DWORD *)(v24 + 8) = v27;
  *(_QWORD *)(v24 + 32) = v26;
  *((_BYTE *)a1 + 432) = 1;
  return result;
}

uint64_t JSC::SIMDShuffle::isI32x4DupElement(unint64_t a1, unint64_t a2)
{
  BOOL v3;
  int v4;
  int v6;
  int v7;

  if ((a1 & 3) == 0
    && a1 + 1 == BYTE1(a1)
    && a1 + 2 == BYTE2(a1)
    && a1 + 3 == BYTE3(a1)
    && (a1 & 0x300000000) == 0
    && BYTE4(a1) + 1 == BYTE5(a1)
    && BYTE4(a1) + 2 == BYTE6(a1)
    && BYTE4(a1) + 3 == HIBYTE(a1)
    && (a2 & 3) == 0
    && a2 + 1 == BYTE1(a2)
    && a2 + 2 == BYTE2(a2)
    && a2 + 3 == BYTE3(a2)
    && (a2 & 0x300000000) == 0
    && BYTE4(a2) + 1 == BYTE5(a2)
    && BYTE4(a2) + 2 == BYTE6(a2)
    && BYTE4(a2) + 3 == HIBYTE(a2))
  {
    v3 = (_DWORD)a1 == HIDWORD(a1) && HIDWORD(a1) == (_DWORD)a2 && HIDWORD(a1) == HIDWORD(a2);
    v4 = a1 >> 2;
    v6 = !v3 || a1 > 0xFu;
    v7 = v6 ^ 1;
    if (v6)
      v4 = 0;
  }
  else
  {
    v7 = 0;
    v4 = 0;
  }
  return v4 | (v7 << 8);
}

uint64_t JSC::SIMDShuffle::isI16x8DupElement(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  BOOL v9;
  char v11;

  if ((a1 & 1) != 0)
    goto LABEL_44;
  v2 = 0;
  if ((a1 & 0x10000) != 0)
    goto LABEL_45;
  v3 = 0;
  if (a1 + 1 != BYTE1(a1))
    return v3 | (v2 << 8);
  v2 = 0;
  if ((a1 & 0x100000000) != 0)
    goto LABEL_45;
  v3 = 0;
  if (BYTE2(a1) + 1 != BYTE3(a1))
    return v3 | (v2 << 8);
  v2 = 0;
  if ((a1 & 0x1000000000000) != 0)
    goto LABEL_45;
  v3 = 0;
  if (BYTE4(a1) + 1 != BYTE5(a1))
    return v3 | (v2 << 8);
  v2 = 0;
  if (BYTE6(a1) + 1 != HIBYTE(a1))
    goto LABEL_45;
  v3 = 0;
  if ((a2 & 1) != 0)
    return v3 | (v2 << 8);
  v2 = 0;
  if (a2 + 1 != BYTE1(a2))
    goto LABEL_45;
  v3 = 0;
  if ((a2 & 0x10000) != 0)
    return v3 | (v2 << 8);
  v2 = 0;
  if (BYTE2(a2) + 1 != BYTE3(a2))
    goto LABEL_45;
  v3 = 0;
  if ((a2 & 0x100000000) != 0)
    return v3 | (v2 << 8);
  v2 = 0;
  if (BYTE4(a2) + 1 != BYTE5(a2))
  {
LABEL_45:
    v3 = 0;
    return v3 | (v2 << 8);
  }
  v3 = 0;
  if ((a2 & 0x1000000000000) != 0)
    return v3 | (v2 << 8);
  if (BYTE6(a2) + 1 != HIBYTE(a2))
  {
LABEL_44:
    v2 = 0;
    v3 = 0;
    return v3 | (v2 << 8);
  }
  v9 = WORD1(a1) == (unsigned __int16)a1
    && WORD1(a1) == WORD2(a1)
    && WORD1(a1) == HIWORD(a1)
    && WORD1(a1) == (unsigned __int16)a2
    && WORD1(a1) == WORD1(a2)
    && WORD1(a1) == WORD2(a2)
    && WORD1(a1) == HIWORD(a2);
  v3 = a1 >> 1;
  v11 = !v9 || a1 > 0xFu;
  v2 = (v11 & 1) == 0;
  if ((v11 & 1) != 0)
    v3 = 0;
  return v3 | (v2 << 8);
}

uint64_t JSC::SIMDShuffle::isI8x16DupElement(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;

  v2 = a2;
  v3 = BYTE1(a2);
  v4 = BYTE2(a2);
  v5 = BYTE3(a2);
  v6 = BYTE4(a2);
  v7 = BYTE5(a2);
  v8 = BYTE6(a2);
  v9 = HIBYTE(a2);
  if (a1 != BYTE1(a1)
    || a1 != BYTE2(a1)
    || a1 != BYTE3(a1)
    || a1 != BYTE4(a1)
    || a1 != BYTE5(a1)
    || a1 != BYTE6(a1)
    || a1 != HIBYTE(a1)
    || a1 != v2
    || a1 != v3
    || a1 != v4
    || a1 != v5
    || a1 != v6
    || a1 != v7
    || a1 != v8
    || a1 != (_DWORD)v9
    || a1 > 0xFu)
  {
    return 0;
  }
  else
  {
    return a1 | 0x100u;
  }
}

uint64_t JSC::SIMDShuffle::isOnlyOneSideMask(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  int v40;
  _BOOL4 v41;

  v2 = BYTE1(a1);
  v3 = BYTE2(a1);
  v4 = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  v8 = HIBYTE(a1);
  if (a1 > 0xFu)
  {
    v26 = a1 < 0x20u && (BYTE1(a1) & 0xF0) == 16;
    v40 = v26
       && (BYTE2(a1) & 0xF0) == 16
       && (BYTE3(a1) & 0xF0) == 16
       && (BYTE4(a1) & 0xF0) == 16
       && (BYTE5(a1) & 0xF0) == 16
       && (BYTE6(a1) & 0xF0) == 16
       && (HIBYTE(a1) & 0xF0) == 16
       && (a2 & 0xF0) == 16
       && (BYTE1(a2) & 0xF0) == 16
       && (BYTE2(a2) & 0xF0) == 16
       && (BYTE3(a2) & 0xF0) == 16
       && (BYTE4(a2) & 0xF0) == 16
       && (BYTE5(a2) & 0xF0) == 16
       && (BYTE6(a2) & 0xF0) == 16;
    v41 = (HIBYTE(a2) & 0xF0) == 16;
    v9 = v40 & v41;
    v26 = (v40 & v41) == 0;
    v25 = 0x100000000;
    if (v26)
      v25 = 0;
  }
  else
  {
    v9 = 0;
    v24 = v2 > 0xF
       || v3 > 0xF
       || v4 > 0xF
       || v5 > 0xF
       || v6 > 0xF
       || v7 > 0xF
       || v8 > 0xF
       || a2 > 0xFu
       || BYTE1(a2) > 0xFu
       || BYTE2(a2) > 0xFu
       || BYTE3(a2) > 0xFu
       || BYTE4(a2) > 0xFu
       || BYTE5(a2) > 0xFu
       || BYTE6(a2) > 0xFu
       || HIBYTE(a2) > 0xF;
    v26 = !v24;
    v25 = 0x100000000;
    if (!v26)
      v25 = 0;
  }
  return v9 | v25;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::reduceValueStrength(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, JSC::B3::Value *this)
{
  uint64_t v4;
  char v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;

  if (*((_BYTE *)this + 12) != 92)
    return 0;
  v4 = *((_BYTE *)this + 40) & 0x3F;
  if (v4 >= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19800BF60);
  }
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x3Fu) >= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19800BF80);
  }
  if (dword_19914FDAC[v4] != dword_19914FDAC[v5 & 0x3F])
    return 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *((_BYTE *)this + 41);
  v10 = *(_QWORD *)JSC::B3::Value::child(this, 0);
  v11 = *a2;
  v12 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v12 = off_1E357F5F0;
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 150;
  *(_DWORD *)(v12 + 16) = 5;
  *(_BYTE *)(v12 + 20) = 2;
  *(_QWORD *)(v12 + 24) = v8;
  *(_QWORD *)(v12 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v12, 2, a3, v10);
  *(_QWORD *)v12 = off_1E357EA50;
  *(_BYTE *)(v12 + 40) = v5;
  *(_BYTE *)(v12 + 41) = v9;
  v18 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v18 - 8);
    *(_DWORD *)(v11 + 92) = v18 - 1;
    v20 = *(_QWORD *)(v11 + 64);
  }
  else
  {
    v19 = *(unsigned int *)(v11 + 76);
    if ((_DWORD)v19 == *(_DWORD *)(v11 + 72))
    {
      v31 = v19 + (v19 >> 2);
      if (v31 >= 0x10)
        v32 = v31 + 1;
      else
        v32 = 16;
      if (v32 <= v19 + 1)
        v33 = v19 + 1;
      else
        v33 = v32;
      if (v33 >> 29)
      {
        __break(0xC471u);
LABEL_34:
        JUMPOUT(0x19800BF40);
      }
      v34 = *(const void **)(v11 + 64);
      v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
      *(_DWORD *)(v11 + 72) = v33;
      *(_QWORD *)(v11 + 64) = v35;
      memcpy(v35, v34, 8 * v19);
      if (v34)
      {
        if (*(const void **)(v11 + 64) == v34)
        {
          *(_QWORD *)(v11 + 64) = 0;
          *(_DWORD *)(v11 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v34, v36, v37, v13, v14, v15, v16, v17);
      }
      v38 = *(unsigned int *)(v11 + 76);
      v20 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(v20 + 8 * v38) = 0;
      *(_DWORD *)(v11 + 76) = v38 + 1;
    }
    else
    {
      v20 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(v20 + 8 * v19) = 0;
      *(_DWORD *)(v11 + 76) = v19 + 1;
    }
  }
  *(_DWORD *)(v12 + 8) = v19;
  *(_QWORD *)(v20 + 8 * v19) = v12;
  *(_QWORD *)&v40 = *((unsigned int *)a2 + 100);
  *((_QWORD *)&v40 + 1) = v12;
  v22 = a2 + 2;
  v23 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v23 == *((_DWORD *)a2 + 6))
  {
    v39 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, (void *)(v23 + 1), (unint64_t)&v40, v13, v14, v15, v16, v17);
    v23 = *((unsigned int *)a2 + 7);
    v24 = a2[2];
    v25 = *v39;
  }
  else
  {
    v24 = *v22;
    v25 = v40;
  }
  *(_OWORD *)(v24 + 16 * v23) = v25;
  ++*((_DWORD *)a2 + 7);
  v26 = a2[51];
  v27 = *(_DWORD *)(v26 + 16);
  if (v27 != *(_DWORD *)(v12 + 16))
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  v28 = *(_QWORD *)(v26 + 32);
  v29 = *(_DWORD *)(v26 + 8);
  (**(void (***)(uint64_t))v26)(a2[51]);
  *(_QWORD *)v26 = off_1E357F5F0;
  if (v27)
  {
    *(_QWORD *)(v26 + 40) = v12;
    v30 = 1;
  }
  else
  {
    v30 = 0;
  }
  *(_WORD *)(v26 + 12) = v30;
  *(_DWORD *)(v26 + 16) = v27;
  *(_BYTE *)(v26 + 20) = v30;
  *(_DWORD *)(v26 + 8) = v29;
  *(_QWORD *)(v26 + 32) = v28;
  result = 1;
  *((_BYTE *)a2 + 432) = 1;
  return result;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,unsigned long long>(JSC::B3::Value *a1, uint64_t a2, int a3)
{
  uint64_t v6;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 3;
  *(_DWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357D8E0;
  *(_DWORD *)(v6 + 40) = a3;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v6);
}

uint64_t WTF::fastLog2(WTF *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = (this & ((_DWORD)this - 1)) != 0;
  v2 = this >> 16;
  if (this >= 0x10000)
    v1 |= 0x10u;
  else
    v2 = this;
  if (v2 >= 0x100)
  {
    v2 >>= 8;
    v1 += 8;
  }
  if (v2 >= 0x10)
  {
    v2 >>= 4;
    v1 += 4;
  }
  if (v2 >= 4)
  {
    v2 >>= 2;
    v1 += 2;
  }
  if (v2 <= 1)
    return v1;
  else
    return v1 + 1;
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const64Value *>(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch((char)a2)
  {
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -106:
    case -105:
      return JSC::B3::Value::Value<>(a1, 0, a2, 2, a3, a4, a5);
    default:
      JSC::B3::Value::badKind(a2, 2);
  }
}

unint64_t JSC::B3::`anonymous namespace'::IntRange::mul<long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if ((unsigned __int128)(a1 * (__int128)a3) >> 64 != (a1 * a3) >> 63
    || (unsigned __int128)(a1 * (__int128)a4) >> 64 != (a1 * a4) >> 63
    || (unsigned __int128)(a2 * (__int128)a3) >> 64 != (a2 * a3) >> 63
    || (unsigned __int128)(a2 * (__int128)a4) >> 64 != (a2 * a4) >> 63)
  {
    return 0x8000000000000000;
  }
  if (a4 * a2 >= a3 * a2)
    v5 = a3 * a2;
  else
    v5 = a4 * a2;
  if (a4 * a1 >= a3 * a1)
    v6 = a3 * a1;
  else
    v6 = a4 * a1;
  if (v5 >= v6)
    return v6;
  else
    return v5;
}

uint64_t JSC::B3::`anonymous namespace'::ReduceStrength::specializeSelect(JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t a1, JSC::B3::Value *a2)
{
  JSC::B3::Procedure **v4;
  JSC::B3::Value *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  char **v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t result;
  __int16 v51;
  uint64_t v52;
  JSC::B3::Procedure *v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Procedure *v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  const void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  JSC::B3::Value *v103;
  JSC::B3::Value *v104;

  v104 = a2;
  v4 = *(JSC::B3::Procedure ***)a1;
  v5 = (JSC::B3::Value *)JSC::B3::Procedure::clone(**(JSC::B3::Procedure ***)a1, a2);
  v103 = v5;
  v6 = (_QWORD *)JSC::B3::Value::children(v5);
  if (v6 != v7 && **(_QWORD **)(a1 + 8))
  {
    do
    {
      v13 = **(_QWORD **)(a1 + 8);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = ~(*v6 << 32) + *v6;
        v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
        v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
        v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ ((_DWORD)v17 + ~((_DWORD)v17 << 27)));
        v19 = *(_QWORD *)(v13 + 16 * v18);
        if (v19 == *v6)
        {
LABEL_5:
          v20 = *(_QWORD *)(v13 + 16 * v18 + 8);
          if (v20)
            *v6 = v20;
        }
        else
        {
          v21 = 1;
          while (v19)
          {
            v18 = ((_DWORD)v18 + v21) & v14;
            v19 = *(_QWORD *)(v13 + 16 * v18);
            ++v21;
            if (v19 == *v6)
              goto LABEL_5;
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  if (*((_DWORD *)a2 + 4))
  {
    WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(*(uint64_t **)(a1 + 8), (uint64_t *)&v104, (uint64_t *)&v103, v8, v9, v10, v11, v12, (uint64_t)v102);
    v5 = v103;
  }
  v22 = **(_QWORD **)(a1 + 16);
  v102[0] = v5;
  v23 = (char **)(v22 + 8);
  v24 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v22 + 16))
  {
    v72 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)v102);
    v24 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v24) = *(_QWORD *)v72;
    v5 = (JSC::B3::Value *)v102[0];
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v5;
  }
  *(_DWORD *)(v22 + 20) = v24 + 1;
  *((_QWORD *)v5 + 4) = v22;
  v25 = v104;
  if (*((_DWORD *)v104 + 4))
  {
    v52 = **(_QWORD **)(a1 + 16);
    v53 = *v4;
    v54 = *((_QWORD *)v104 + 3);
    v55 = v103;
    v56 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v56 + 8) = -1;
    *(_WORD *)(v56 + 12) = 152;
    *(_DWORD *)(v56 + 16) = 0;
    *(_BYTE *)(v56 + 20) = 1;
    *(_QWORD *)(v56 + 24) = v54;
    *(_QWORD *)(v56 + 32) = 0;
    *(_QWORD *)v56 = &unk_1E357EDA0;
    *(_QWORD *)(v56 + 40) = v25;
    *(_QWORD *)(v56 + 48) = v55;
    v57 = *((unsigned int *)v53 + 23);
    if ((_DWORD)v57)
    {
      v58 = *(_QWORD *)(*((_QWORD *)v53 + 10) + 8 * v57 - 8);
      *((_DWORD *)v53 + 23) = v57 - 1;
      v59 = *((_QWORD *)v53 + 8);
    }
    else
    {
      v58 = *((unsigned int *)v53 + 19);
      if ((_DWORD)v58 == *((_DWORD *)v53 + 18))
      {
        v76 = v58 + (v58 >> 2);
        if (v76 >= 0x10)
          v77 = v76 + 1;
        else
          v77 = 16;
        if (v77 <= v58 + 1)
          v78 = v58 + 1;
        else
          v78 = v77;
        if (v78 >> 29)
          goto LABEL_82;
        v79 = (const void *)*((_QWORD *)v53 + 8);
        v80 = (void *)WTF::fastMalloc((WTF *)(8 * v78));
        *((_DWORD *)v53 + 18) = v78;
        *((_QWORD *)v53 + 8) = v80;
        memcpy(v80, v79, 8 * v58);
        if (v79)
        {
          if (*((const void **)v53 + 8) == v79)
          {
            *((_QWORD *)v53 + 8) = 0;
            *((_DWORD *)v53 + 18) = 0;
          }
          WTF::fastFree((unint64_t)v79, v81, v82, v83, v84, v85, v86, v87);
        }
        v88 = *((unsigned int *)v53 + 19);
        v59 = *((_QWORD *)v53 + 8);
        *(_QWORD *)(v59 + 8 * v88) = 0;
        *((_DWORD *)v53 + 19) = v88 + 1;
      }
      else
      {
        v59 = *((_QWORD *)v53 + 8);
        *(_QWORD *)(v59 + 8 * v58) = 0;
        *((_DWORD *)v53 + 19) = v58 + 1;
      }
    }
    *(_DWORD *)(v56 + 8) = v58;
    *(_QWORD *)(v59 + 8 * v58) = v56;
    v102[0] = v56;
    v60 = (char **)(v52 + 8);
    v61 = *(unsigned int *)(v52 + 20);
    if ((_DWORD)v61 == *(_DWORD *)(v52 + 16))
    {
      v74 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)v102);
      v61 = *(unsigned int *)(v52 + 20);
      *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8 * v61) = *(_QWORD *)v74;
      v56 = v102[0];
    }
    else
    {
      *(_QWORD *)&(*v60)[8 * v61] = v56;
    }
    *(_DWORD *)(v52 + 20) = v61 + 1;
    *(_QWORD *)(v56 + 32) = v52;
    v25 = v104;
  }
  v103 = 0;
  v103 = (JSC::B3::Value *)JSC::B3::Procedure::clone(*v4, v25);
  v26 = (_QWORD *)JSC::B3::Value::children(v103);
  if (v26 != v27 && *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
  {
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (v33)
      {
        v34 = *(_DWORD *)(v33 - 8);
        v35 = ~(*v26 << 32) + *v26;
        v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
        v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
        v38 = v34 & (((v37 + ~(v37 << 27)) >> 31) ^ ((_DWORD)v37 + ~((_DWORD)v37 << 27)));
        v39 = *(_QWORD *)(v33 + 16 * v38);
        if (v39 == *v26)
        {
LABEL_22:
          v40 = *(_QWORD *)(v33 + 16 * v38 + 8);
          if (v40)
            *v26 = v40;
        }
        else
        {
          v41 = 1;
          while (v39)
          {
            v38 = ((_DWORD)v38 + v41) & v34;
            v39 = *(_QWORD *)(v33 + 16 * v38);
            ++v41;
            if (v39 == *v26)
              goto LABEL_22;
          }
        }
      }
      ++v26;
    }
    while (v26 != v27);
  }
  if (*((_DWORD *)v104 + 4))
    WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>((uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)&v104, (uint64_t *)&v103, v28, v29, v30, v31, v32, (uint64_t)v102);
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v43 = v103;
  v102[0] = v103;
  v44 = (char **)(v42 + 8);
  v45 = *(unsigned int *)(v42 + 20);
  if ((_DWORD)v45 == *(_DWORD *)(v42 + 16))
  {
    v73 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44, v45 + 1, (unint64_t)v102);
    v45 = *(unsigned int *)(v42 + 20);
    *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8 * v45) = *(_QWORD *)v73;
    v43 = (JSC::B3::Value *)v102[0];
  }
  else
  {
    *(_QWORD *)&(*v44)[8 * v45] = v103;
  }
  *(_DWORD *)(v42 + 20) = v45 + 1;
  *((_QWORD *)v43 + 4) = v42;
  v46 = v104;
  if (!*((_DWORD *)v104 + 4))
  {
    v47 = 0;
    goto LABEL_36;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v63 = *v4;
  v64 = *((_QWORD *)v104 + 3);
  v65 = v103;
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)(v66 + 24) = v64;
  *(_QWORD *)(v66 + 32) = 0;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = v46;
  *(_QWORD *)(v66 + 48) = v65;
  v67 = *((unsigned int *)v63 + 23);
  if ((_DWORD)v67)
  {
    v68 = *(_QWORD *)(*((_QWORD *)v63 + 10) + 8 * v67 - 8);
    *((_DWORD *)v63 + 23) = v67 - 1;
    v69 = *((_QWORD *)v63 + 8);
    goto LABEL_49;
  }
  v68 = *((unsigned int *)v63 + 19);
  if ((_DWORD)v68 == *((_DWORD *)v63 + 18))
  {
    v89 = v68 + (v68 >> 2);
    if (v89 >= 0x10)
      v90 = v89 + 1;
    else
      v90 = 16;
    if (v90 <= v68 + 1)
      v91 = v68 + 1;
    else
      v91 = v90;
    if (!(v91 >> 29))
    {
      v92 = (const void *)*((_QWORD *)v63 + 8);
      v93 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
      *((_DWORD *)v63 + 18) = v91;
      *((_QWORD *)v63 + 8) = v93;
      memcpy(v93, v92, 8 * v68);
      if (v92)
      {
        if (*((const void **)v63 + 8) == v92)
        {
          *((_QWORD *)v63 + 8) = 0;
          *((_DWORD *)v63 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v92, v94, v95, v96, v97, v98, v99, v100);
      }
      v101 = *((unsigned int *)v63 + 19);
      v69 = *((_QWORD *)v63 + 8);
      *(_QWORD *)(v69 + 8 * v101) = 0;
      *((_DWORD *)v63 + 19) = v101 + 1;
      goto LABEL_49;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x19800C774);
  }
  v69 = *((_QWORD *)v63 + 8);
  *(_QWORD *)(v69 + 8 * v68) = 0;
  *((_DWORD *)v63 + 19) = v68 + 1;
LABEL_49:
  *(_DWORD *)(v66 + 8) = v68;
  *(_QWORD *)(v69 + 8 * v68) = v66;
  v102[0] = v66;
  v70 = (char **)(v62 + 8);
  v71 = *(unsigned int *)(v62 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v62 + 16))
  {
    v75 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)v102);
    v71 = *(unsigned int *)(v62 + 20);
    *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v71) = *(_QWORD *)v75;
    v66 = v102[0];
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
  }
  *(_DWORD *)(v62 + 20) = v71 + 1;
  *(_QWORD *)(v66 + 32) = v62;
  v46 = v104;
  v47 = *((_DWORD *)v104 + 4);
LABEL_36:
  v48 = *((_QWORD *)v46 + 4);
  v49 = *((_DWORD *)v46 + 2);
  result = (**(uint64_t (***)(JSC::B3::Value *))v46)(v46);
  *(_QWORD *)v46 = off_1E357F5F0;
  if (v47)
    v51 = 153;
  else
    v51 = 0;
  *((_WORD *)v46 + 6) = v51;
  *((_DWORD *)v46 + 4) = v47;
  *((_BYTE *)v46 + 20) = 0;
  *((_DWORD *)v46 + 2) = v49;
  *((_QWORD *)v46 + 4) = v48;
  return result;
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int i;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t **v48;
  unint64_t **v49;
  __int128 v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  _DWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v63;
  int v64;
  uint64_t v67;
  uint64_t v68;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = v7 + 56;
    do
    {
      *(_WORD *)(v16 - 40) = -24832;
      *(_BYTE *)(v16 - 38) &= 0xF0u;
      *(_QWORD *)(v16 - 28) = 0;
      *(_QWORD *)(v16 - 36) = 0;
      *(_DWORD *)(v16 - 20) = 0;
      *(_QWORD *)(v16 - 16) = v16;
      *(_QWORD *)(v16 - 8) = 1;
      v16 += 48;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v67 = v5;
    while (1)
    {
      v25 = (__int128 *)(v4 + 48 * v17);
      v26 = *((unsigned __int8 *)v25 + 1);
      if (*(_BYTE *)v25 || v26 != 159)
        goto LABEL_50;
      v27 = *((_DWORD *)v25 + 1);
      v28 = *((_DWORD *)v25 + 2);
      v29 = *((_DWORD *)v25 + 3);
      v30 = *((_DWORD *)v25 + 4);
      if ((*((_BYTE *)v25 + 2) & 0xF) == 0 && v27 == 1 && v28 == 0 && v29 == 0 && v30 == 0)
      {
        if (*((_DWORD *)v25 + 5))
          goto LABEL_50;
LABEL_18:
        if (++v17 == v67)
          goto LABEL_9;
      }
      else
      {
        v38 = (*((_BYTE *)v25 + 2) & 0xF) == 0 && v27 == 0 && v28 == 0 && v29 == 0 && v30 == 0;
        if (v38 && !*((_DWORD *)v25 + 5))
        {
          v20 = v4 + 48 * v17;
          v23 = *(_QWORD **)(v20 + 24);
          v22 = (_QWORD *)(v20 + 24);
          v21 = (unint64_t)v23;
          if (v22 + 2 != v23 && v21 != 0)
          {
            *v22 = 0;
            *(_DWORD *)(v4 + 48 * v17 + 32) = 0;
            WTF::fastFree(v21, v8, v9, v10, v11, v12, v13, v14);
          }
          goto LABEL_18;
        }
LABEL_50:
        v39 = *a1;
        v68 = v18;
        if (*a1)
          v40 = *(_DWORD *)(v39 - 8);
        else
          v40 = 0;
        v41 = 0;
        v42 = *((_DWORD *)v25 + 2) + ~(*((_DWORD *)v25 + 2) << 15);
        v43 = (9 * (v42 ^ (v42 >> 10))) ^ ((9 * (v42 ^ (v42 >> 10))) >> 6);
        for (i = *((_DWORD *)v25 + 1)
                + v26
                + ((*((_BYTE *)v25 + 2) & 1) << 16)
                + ((*((unsigned __int8 *)v25 + 2) << 6) & 0x80)
                + *((_DWORD *)v25 + 3)
                + (((*((unsigned __int8 *)v25 + 2) >> 2) & 1) << 24)
                + (((*((unsigned __int8 *)v25 + 2) >> 3) & 1) << 13)
                + *((_DWORD *)v25 + 4)
                + *((_DWORD *)v25 + 5)
                + ((v43 + ~(v43 << 11)) ^ ((v43 + ~(v43 << 11)) >> 16)); ; i = v41 + v45)
        {
          v45 = i & v40;
          v18 = v39 + 48 * (i & v40);
          if (!*(_BYTE *)v18
            && *(unsigned __int8 *)(v18 + 1) == 159
            && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v18 + 4), *(int32x4_t *)(v18 + 4)))) & 1) == 0
            && (*(_BYTE *)(v18 + 2) & 0xF) == 0
            && !*(_DWORD *)(v18 + 20))
          {
            break;
          }
          ++v41;
        }
        v46 = v39 + 48 * v45;
        v49 = *(unint64_t ***)(v46 + 24);
        v48 = (unint64_t **)(v46 + 24);
        v47 = (unint64_t)v49;
        if (v48 + 2 != v49 && v47 != 0)
        {
          *v48 = 0;
          *(_DWORD *)(v39 + 48 * v45 + 32) = 0;
          WTF::fastFree(v47, v8, v9, v10, v11, v12, v13, v14);
        }
        v51 = *v25;
        *(_QWORD *)(v18 + 16) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v18 = v51;
        v52 = v4 + 48 * v17;
        *v48 = (unint64_t *)(v48 + 2);
        v55 = *(unint64_t **)(v52 + 24);
        v54 = (unint64_t *)(v52 + 24);
        v53 = v55;
        v56 = v39 + 48 * v45;
        *(_QWORD *)(v56 + 32) = 1;
        v57 = (_DWORD *)(v56 + 32);
        v58 = v54 + 2;
        if (v55 == v54 + 2)
        {
          memcpy(v48 + 2, v54 + 2, 8 * *(unsigned int *)(v4 + 48 * v17 + 36));
        }
        else
        {
          *v54 = (unint64_t)v58;
          *v48 = v53;
          v63 = v4 + 48 * v17;
          v64 = *(_DWORD *)(v63 + 32);
          *(_DWORD *)(v63 + 32) = 1;
          *v57 = v64;
        }
        v59 = v4 + 48 * v17;
        v60 = *(_DWORD *)(v59 + 36);
        *(_DWORD *)(v59 + 36) = 0;
        v57[1] = v60;
        v61 = *v54;
        if (v58 != (_QWORD *)*v54 && v61 != 0)
        {
          *v54 = 0;
          *(_DWORD *)(v4 + 48 * v17 + 32) = 0;
          WTF::fastFree(v61, v8, v9, v10, v11, v12, v13, v14);
        }
        if (v25 != a3)
          v18 = v68;
        if (++v17 == v67)
          goto LABEL_9;
      }
    }
  }
  v18 = 0;
  result = 0;
  if (v4)
  {
LABEL_9:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
    return v18;
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::VectorFiller<false,JSC::B3::SSACalculator::BlockData>::uninitializedFill(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *i;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;

  if (result != a2)
  {
    for (i = result; i != a2; i += 3)
    {
      *i = 0;
      v6 = (_QWORD *)*a3;
      if (*a3)
      {
        v8 = *((_DWORD *)v6 - 3);
        if (v8)
        {
          v9 = WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::computeBestTableSize(*((_DWORD *)v6 - 3));
          v17 = WTF::fastZeroedMalloc(16 * v9 + 16, v10, v11, v12, v13, v14, v15, v16);
          *i = v17 + 16;
          *(_DWORD *)(v17 + 12) = v9;
          *(_DWORD *)(*i - 8) = v9 - 1;
          *(_DWORD *)(*i - 12) = v8;
          *(_DWORD *)(*i - 16) = 0;
          v18 = (_QWORD *)*a3;
          result = WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin((_QWORD *)*a3);
          v19 = result;
          v20 = v18;
          v22 = v21;
          v23 = v20 ? (uint64_t)&v20[2 * *((unsigned int *)v20 - 1)] : 0;
          if ((uint64_t *)v23 != result)
          {
            do
            {
              result = (uint64_t *)WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>>,JSC::B3::SSACalculator::Variable *>(*i, *v19);
              *(_OWORD *)result = *(_OWORD *)v19;
              if (v19 + 2 == v22)
              {
LABEL_15:
                v19 = v22;
              }
              else
              {
                v19 += 2;
                while ((unint64_t)(*v19 + 1) <= 1)
                {
                  v19 += 2;
                  if (v19 == v22)
                    goto LABEL_15;
                }
              }
            }
            while (v19 != (uint64_t *)v23);
          }
        }
      }
      v7 = *((unsigned int *)a3 + 5);
      i[1] = 0;
      i[2] = 0;
      *((_DWORD *)i + 5) = v7;
      if ((_DWORD)v7)
      {
        if (v7 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v24 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        *((_DWORD *)i + 4) = v7;
        i[1] = (uint64_t)v24;
        result = (uint64_t *)memcpy(v24, (const void *)a3[1], 8 * *((unsigned int *)a3 + 5));
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_6;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_6:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_7:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>>,JSC::B3::SSACalculator::Variable *>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 16 * v8;
}

void WTF::SegmentedVector<JSC::B3::SSACalculator::Variable,8ul>::~SegmentedVector(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *a1;
  if (*a1)
  {
    v10 = 0;
    while (v10 >> 3 < *((unsigned int *)a1 + 5))
    {
      v11 = *(_QWORD *)(a1[1] + 8 * (v10 >> 3)) + 56 * (v10 & 7);
      v12 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
        v13 = v11 + 16 == v12;
      else
        v13 = 1;
      if (!v13)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        v9 = *a1;
      }
      if (++v10 >= v9)
        goto LABEL_10;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_10:
    if (*((_DWORD *)a1 + 5))
    {
      v14 = 0;
      do
        WTF::fastFree(*(_QWORD *)(a1[1] + 8 * v14++), a2, a3, a4, a5, a6, a7, a8);
      while (v14 < *((unsigned int *)a1 + 5));
    }
    v15 = a1[1];
    if (v15)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *WTF::SegmentedVector<JSC::B3::SSACalculator::Variable,8ul>::append<JSC::B3::SSACalculator::Variable>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const void *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  v3 = result;
  v4 = (*result)++;
  v5 = v4 >> 3;
  v6 = *((unsigned int *)result + 5);
  if (v4 >> 3 >= v6)
  {
    v12 = result + 1;
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x1C0);
    v15 = result;
    v13 = *((unsigned int *)v3 + 5);
    if ((_DWORD)v13 == *((_DWORD *)v3 + 4))
    {
      result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 1), v13 + 1, (unint64_t)&v15);
      v13 = *((unsigned int *)v3 + 5);
      *(_QWORD *)(v3[1] + 8 * v13) = *result;
    }
    else
    {
      *(_QWORD *)(*v12 + 8 * v13) = result;
    }
    v6 = (v13 + 1);
    *((_DWORD *)v3 + 5) = v6;
    v4 = *v3 - 1;
    v5 = v4 >> 3;
  }
  if (v5 >= v6)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = *(_QWORD *)(v3[1] + 8 * v5);
    v8 = v4 & 7;
    v9 = v7 + 56 * (v4 & 7);
    result = (_QWORD *)(v9 + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 4;
    v10 = *(const void **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      result = memcpy(result, v10, 8 * *(unsigned int *)(a2 + 12));
    }
    else
    {
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)v9 = v10;
      v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 4;
      *(_DWORD *)(v9 + 8) = v14;
    }
    v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(v9 + 12) = v11;
    *(_DWORD *)(v7 + 56 * v8 + 48) = *(_DWORD *)(a2 + 48);
  }
  return result;
}

void JSC::B3::StackmapValue::~StackmapValue(JSC::B3::StackmapValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  *(_QWORD *)this = off_1E357EF48;
  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v14 = JSC::B3::Value::childrenAlloc(this);
    v22 = *(_QWORD *)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v22 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v22, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  *(_QWORD *)this = off_1E357EF48;
  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v14 = JSC::B3::Value::childrenAlloc(this);
    v22 = *(_QWORD *)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v22 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v22, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)this = off_1E357EF48;
  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v14 = JSC::B3::Value::childrenAlloc(this);
    v15 = *(_QWORD *)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

__int128 *JSC::B3::StackmapValue::append(__int128 *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = (uint64_t)this;
  v21 = a2;
  if (*(_BYTE *)(a3 + 8) == 1)
  {
    v4 = 40;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v4 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v4 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v4 = 64;
        break;
      case 0x53:
        v4 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v4 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19800D508);
    }
    v5 = (uint64_t)this + v4;
    v7 = *(_DWORD *)((char *)this + v4 + 8);
    v6 = *(unsigned int *)((char *)this + v4 + 12);
    if ((_DWORD)v6 == v7)
    {
      this = (__int128 *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v21);
      v16 = *(unsigned int *)(v5 + 12);
      v8 = v16 + 1;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v16) = *(_QWORD *)this;
    }
    else
    {
      v8 = v6 + 1;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
    }
    *(_DWORD *)(v5 + 12) = v8;
  }
  else
  {
    v10 = *((_DWORD *)this + 13);
    if (v10 < JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)this))
    {
      do
      {
        v20 = 1;
        v17 = *(unsigned int *)(v3 + 52);
        if ((_DWORD)v17 == *(_DWORD *)(v3 + 48))
        {
          WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ValueRep::Kind>(v3 + 40, &v20);
          v18 = *(_DWORD *)(v3 + 52);
        }
        else
        {
          v19 = *(_QWORD *)(v3 + 40) + 16 * v17;
          *(_QWORD *)v19 = 0;
          *(_BYTE *)(v19 + 8) = 1;
          v18 = *(_DWORD *)(v3 + 52) + 1;
          *(_DWORD *)(v3 + 52) = v18;
        }
      }
      while (v18 < JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v3));
    }
    this = (__int128 *)JSC::B3::Value::childrenVector((JSC::B3::Value *)v3);
    v11 = (uint64_t)this;
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12 == *((_DWORD *)this + 2))
    {
      this = (__int128 *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v12 + 1, (unint64_t)&v21);
      v12 = *(unsigned int *)(v11 + 12);
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = *(_QWORD *)this;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v12) = v21;
    }
    *(_DWORD *)(v11 + 12) = v12 + 1;
    v13 = *(unsigned int *)(v3 + 52);
    if ((_DWORD)v13 == *(_DWORD *)(v3 + 48))
    {
      this = (__int128 *)WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 40, v13 + 1, a3);
      v13 = *(unsigned int *)(v3 + 52);
      v14 = *(_QWORD *)(v3 + 40);
      v15 = *this;
    }
    else
    {
      v14 = *(_QWORD *)(v3 + 40);
      v15 = *(_OWORD *)a3;
    }
    *(_OWORD *)(v14 + 16 * v13) = v15;
    ++*(_DWORD *)(v3 + 52);
  }
  return this;
}

uint64_t JSC::B3::ValueRep::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  BOOL v3;

  if (a1[8] != a2[8])
    return 0;
  switch(a1[8])
  {
    case 7u:
    case 8u:
      v3 = ((*a2 ^ *a1) & 0x7F) == 0;
      goto LABEL_7;
    case 9u:
    case 0xAu:
    case 0xBu:
      v3 = *(_QWORD *)a1 == *(_QWORD *)a2;
LABEL_7:
      result = v3;
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

__int128 *JSC::B3::StackmapValue::appendSomeRegister(JSC::B3::StackmapValue *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 3;
  return JSC::B3::StackmapValue::append((__int128 *)this, (uint64_t)a2, (unint64_t)&v3);
}

__int128 *JSC::B3::StackmapValue::appendSomeRegisterWithClobber(JSC::B3::StackmapValue *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 4;
  return JSC::B3::StackmapValue::append((__int128 *)this, (uint64_t)a2, (unint64_t)&v3);
}

uint64_t JSC::B3::StackmapValue::setConstrainedChild(JSC::B3::StackmapValue *a1, unsigned int a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;

  v5 = (unsigned __int8 *)(a3 + 1);
  v6 = *a3;
  *(_QWORD *)JSC::B3::StackmapValue::child(a1, a2) = v6;
  return JSC::B3::StackmapValue::setConstraint((uint64_t)a1, a2, v5);
}

uint64_t JSC::B3::StackmapValue::setConstraint(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v27 = 0;
  v28 = 1;
  result = JSC::B3::ValueRep::operator==(a3, (unsigned __int8 *)&v27);
  if ((result & 1) == 0)
  {
    v7 = *(_DWORD *)(a1 + 52);
    if (v7 > a2)
    {
LABEL_3:
      v8 = *(_QWORD *)(a1 + 40) + 16 * a2;
      v9 = *(_QWORD *)a3;
      *(_BYTE *)(v8 + 8) = a3[8];
      *(_QWORD *)v8 = v9;
      return result;
    }
    while (1)
    {
      v10 = v7;
      if (v7 != *(_DWORD *)(a1 + 48))
      {
        v23 = *(_QWORD *)(a1 + 40) + 16 * v7;
        goto LABEL_20;
      }
      v11 = v7 + 1;
      v12 = v10 + (v10 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v11)
        v14 = v10 + 1;
      else
        v14 = v13;
      if (v14 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v15 = *(_QWORD *)(a1 + 40);
      result = WTF::fastMalloc((WTF *)(16 * v14));
      *(_DWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 40) = result;
      if ((_DWORD)v10)
      {
        v24 = 16 * v10;
        v25 = (__int128 *)v15;
        do
        {
          v26 = *v25++;
          *(_OWORD *)result = v26;
          result += 16;
          v24 -= 16;
        }
        while (v24);
        result = *(_QWORD *)(a1 + 40);
        if (v15)
        {
LABEL_15:
          if (result == v15)
          {
            *(_QWORD *)(a1 + 40) = 0;
            *(_DWORD *)(a1 + 48) = 0;
          }
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          result = *(_QWORD *)(a1 + 40);
        }
      }
      else if (v15)
      {
        goto LABEL_15;
      }
      v23 = result + 16 * *(unsigned int *)(a1 + 52);
LABEL_20:
      *(_QWORD *)v23 = 0;
      *(_BYTE *)(v23 + 8) = 1;
      v7 = *(_DWORD *)(a1 + 52) + 1;
      *(_DWORD *)(a1 + 52) = v7;
      if (v7 > a2)
        goto LABEL_3;
    }
  }
  return result;
}

uint64_t JSC::B3::StackmapValue::dumpChildren(JSC::B3::StackmapValue *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  unsigned int i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  char *v15;
  WTF::PrintStream *v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  WTF::PrintStream *v27;
  WTF::PrintStream *v28;
  WTF::PrintStream *v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;

  result = JSC::B3::StackmapValue::numChildren(a1);
  if ((_DWORD)result)
  {
    v7 = result;
    for (i = 0; i != v7; ++i)
    {
      JSC::B3::StackmapValue::constrainedChild((uint64_t)a1, i, (uint64_t)&v30);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
      v10 = *(unsigned __int8 *)(a2 + 32);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v12 = v11;
      v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32);
      if (v10)
      {
        v15 = *(char **)a2;
        v14 = *(_QWORD *)(a2 + 8);
        v16 = (WTF::PrintStream *)v13(v11);
        if (v15)
        {
          v18 = v14 - 1;
          if (!v14)
            v18 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v18, (uint64_t)&v32, v17);
        }
        else
        {
          v24 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v24 = 1;
          *(_QWORD *)(v24 + 8) = 0;
          *(_BYTE *)(v24 + 16) = 0;
          v32 = v24;
          v33 = 0;
        }
        WTF::printExpectedCStringHelper(v16, "StringView", &v32);
        if (v33 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      }
      else
      {
        v20 = *(char **)(a2 + 16);
        v19 = *(_QWORD *)(a2 + 24);
        v21 = (WTF::PrintStream *)v13(v11);
        if (v20)
        {
          v23 = v19 - 1;
          if (!v19)
            v23 = 0;
          WTF::StringImpl::utf8ForCharacters(v20, v23, (uint64_t)&v32, v22);
        }
        else
        {
          v25 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v25 = 1;
          *(_QWORD *)(v25 + 8) = 0;
          *(_BYTE *)(v25 + 16) = 0;
          v32 = v25;
          v33 = 0;
        }
        WTF::printExpectedCStringHelper(v21, "StringView", &v32);
        if (v33 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        *(_BYTE *)(a2 + 32) = 1;
      }
      v26 = v30;
      v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v28 = v27;
      if (v26)
      {
        JSC::B3::Value::dump(v26, v27);
      }
      else
      {
        v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v27 + 32))(v27);
        WTF::PrintStream::printf(v29, "%s", "(null)");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 40))(v28);
      }
      WTF::PrintStream::printf(v28, "%s", ":");
      JSC::B3::ValueRep::dump((JSC::B3::ValueRep *)&v31, v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    }
  }
  return result;
}

uint64_t JSC::B3::StackmapValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[3];

  v4 = *(_QWORD *)(a1 + 56);
  v5[0] = a2;
  v5[1] = "generator = ";
  v5[2] = &v4;
  return WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],WTF::RawPointer>(WTF::CommaPrinter,char [13],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(a3, v5);
}

uint64_t JSC::B3::StackmapValue::StackmapValue(uint64_t a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  _QWORD *v6;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_QWORD *)a1 = off_1E357EF48;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

{
  _QWORD *v6;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_QWORD *)a1 = off_1E357EF48;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void JSC::B3::SwitchValue::~SwitchValue(JSC::B3::SwitchValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v10 = JSC::B3::Value::childrenAlloc(this);
    v18 = *(_QWORD *)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v18 != 0)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v18, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v10 = JSC::B3::Value::childrenAlloc(this);
    v11 = *(_QWORD *)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v11 != 0)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::B3::SwitchValue::appendCase(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;

  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68);
  v9 = *(_DWORD *)(a1 + 52);
  v10 = v9 + 1;
  if (v8 != v9 && v10 != v8)
    goto LABEL_21;
  v15 = (_QWORD *)(a2 + 56);
  if (v10 == v8)
  {
    v16 = *(unsigned int *)(a2 + 68);
    if (!(_DWORD)v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19800E07CLL);
    }
    v17 = *(_QWORD *)(a2 + 56);
    v18 = (__int128 *)(v17 + 16 * v16 - 16);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 64))
    {
      v28 = (__int128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, (void *)(v16 + 1), (unint64_t)v18, a4, a5, a6, a7, a8);
      v16 = *(unsigned int *)(a2 + 68);
      v17 = *(_QWORD *)(a2 + 56);
      v19 = *v28;
    }
    else
    {
      v19 = *v18;
    }
    *(_OWORD *)(v17 + 16 * v16) = v19;
    v20 = *(_DWORD *)(a2 + 68);
    v21 = v20 + 1;
    *(_DWORD *)(a2 + 68) = v20 + 1;
    v22 = v20 - 1;
    if (v21 <= v22)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x19800E034);
    }
    v23 = a3[2];
    v24 = *v15 + 16 * v22;
    *(_QWORD *)v24 = a3[1];
    *(_BYTE *)(v24 + 8) = v23;
  }
  else
  {
    v30 = *(_OWORD *)(a3 + 1);
    v29 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v29 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>>((uint64_t)v15, (unint64_t)&v30, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(a2 + 56) + 16 * v29) = v30;
      ++*(_DWORD *)(a2 + 68);
    }
  }
  result = (_QWORD *)(a1 + 40);
  v26 = *a3;
  *(_QWORD *)&v30 = *a3;
  v27 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v27 == *(_DWORD *)(a1 + 48))
  {
    result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v27 + 1, (unint64_t)&v30);
    v27 = *(unsigned int *)(a1 + 52);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v27) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v27) = v26;
  }
  *(_DWORD *)(a1 + 52) = v27 + 1;
  return result;
}

uint64_t JSC::B3::SwitchValue::setFallThrough(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD *)(result + 32);
  v9 = *(unsigned int *)(v8 + 68);
  v10 = *(_DWORD *)(result + 52);
  v11 = v10 + 1;
  if ((_DWORD)v9 != v10 && v11 != (_DWORD)v9)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x19800E0F0);
  }
  if (v11 == (_DWORD)v9)
  {
    if (!(_DWORD)v9)
      goto LABEL_12;
    v13 = *(_QWORD *)(v8 + 56) + 16 * v9;
    v14 = *(_QWORD *)a2;
    *(_BYTE *)(v13 - 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(v13 - 16) = v14;
  }
  else if ((_DWORD)v9 == *(_DWORD *)(v8 + 64))
  {
    return WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock> const&>(v8 + 56, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9) = *(_OWORD *)a2;
    ++*(_DWORD *)(v8 + 68);
  }
  return result;
}

_QWORD *JSC::B3::SwitchValue::appendCase(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::B3::SwitchValue::appendCase(a1, *(_QWORD *)(a1 + 32), a2, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::SwitchValue::dumpSuccessors(JSC::B3::SwitchValue *this, const JSC::B3::BasicBlock *a2, WTF::PrintStream *a3)
{
  WTF::PrintStream *v4;
  _QWORD v6[2];

  if (*((_DWORD *)this + 13) + 1 != *((_DWORD *)a2 + 17))
    return JSC::B3::Value::dumpSuccessors(this, a2, a3);
  v6[0] = this;
  v6[1] = a2;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  JSC::B3::CaseCollection::dump((JSC::B3::CaseCollection *)v6, v4);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
}

uint64_t JSC::B3::SwitchValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  WTF::PrintStream *v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  WTF::PrintStream *v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  uint64_t v27;
  uint64_t v30;
  int v31;
  char v32;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v6 = (WTF::PrintStream *)v5;
  if (*(_BYTE *)(a2 + 32))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v9 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    if (v9)
    {
      v12 = v8 - 1;
      if (!v8)
        v12 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v12, (uint64_t)&v30, v11);
    }
    else
    {
      v19 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 0;
      v30 = v19;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v10, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v15 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    if (v15)
    {
      v18 = v14 - 1;
      if (!v14)
        v18 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v18, (uint64_t)&v30, v17);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v30 = v20;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v16, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v6, "%s", "cases = [");
  if (*(_DWORD *)(a1 + 52))
  {
    v21 = 0;
    v22 = *(uint64_t **)(a1 + 40);
    do
    {
      v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      if (v21)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v30, v26);
        WTF::printExpectedCStringHelper(v25, "StringView", &v30);
        if (v31 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v30, v26);
        WTF::printExpectedCStringHelper(v25, "StringView", &v30);
        if (v31 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
        v21 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
      v27 = *v22++;
      WTF::PrintStream::printf(v23, "%lld", v27);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    }
    while (v22 != (uint64_t *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 52)));
  }
  WTF::PrintStream::printf(v6, "%s", "]");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

uint64_t JSC::B3::SwitchValue::SwitchValue(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 156;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = a3;
  *(_QWORD *)result = off_1E357EBF8;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 156;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = a3;
  *(_QWORD *)result = off_1E357EBF8;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void JSC::B3::UpsilonValue::~UpsilonValue(JSC::B3::UpsilonValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::UpsilonValue::~UpsilonValue(JSC::B3::UpsilonValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::UpsilonValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v8 = (WTF::PrintStream *)v7;
    if (*(_BYTE *)(a2 + 32))
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v10 = *(char **)a2;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      if (v10)
      {
        v14 = v11 - 1;
        if (!v11)
          v14 = 0;
        WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v40, v13);
      }
      else
      {
        v29 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = 0;
        *(_BYTE *)(v29 + 16) = 0;
        v40 = v29;
        v41 = 0;
      }
      WTF::printExpectedCStringHelper(v12, "StringView", &v40);
      if (v41 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v41])(&v42, &v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    }
    else
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v24 = *(char **)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 24);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
      if (v24)
      {
        v28 = v25 - 1;
        if (!v25)
          v28 = 0;
        WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v40, v27);
      }
      else
      {
        v37 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = 0;
        *(_BYTE *)(v37 + 16) = 0;
        v40 = v37;
        v41 = 0;
      }
      WTF::printExpectedCStringHelper(v26, "StringView", &v40);
      if (v41 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v41])(&v42, &v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v8, "%s", "^");
    WTF::PrintStream::printf(v8, "%u", v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v16 = (WTF::PrintStream *)v15;
    if (*(_BYTE *)(a2 + 32))
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v18 = *(char **)a2;
      v19 = *(_QWORD *)(a2 + 8);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      if (v18)
      {
        v22 = v19 - 1;
        if (!v19)
          v22 = 0;
        WTF::StringImpl::utf8ForCharacters(v18, v22, (uint64_t)&v40, v21);
      }
      else
      {
        v36 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = 0;
        *(_BYTE *)(v36 + 16) = 0;
        v40 = v36;
        v41 = 0;
      }
      WTF::printExpectedCStringHelper(v20, "StringView", &v40);
      if (v41 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v41])(&v42, &v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
    }
    else
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v31 = *(char **)(a2 + 16);
      v32 = *(_QWORD *)(a2 + 24);
      v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
      if (v31)
      {
        v35 = v32 - 1;
        if (!v32)
          v35 = 0;
        WTF::StringImpl::utf8ForCharacters(v31, v35, (uint64_t)&v40, v34);
      }
      else
      {
        v39 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = 0;
        *(_BYTE *)(v39 + 16) = 0;
        v40 = v39;
        v41 = 0;
      }
      WTF::printExpectedCStringHelper(v33, "StringView", &v40);
      if (v41 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v41])(&v42, &v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v16, "%s", "^(null)");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
}

JSC::B3::UseCounts *JSC::B3::UseCounts::UseCounts(JSC::B3::UseCounts *this, JSC::B3::Procedure *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  _BYTE v40[512];

  v4 = *((unsigned int *)a2 + 19);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19800EBC8);
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = v5;
    v6 = *((unsigned int *)this + 3);
    if ((_DWORD)v6)
      bzero(v5, 8 * v6);
  }
  v37 = (WTF *)v40;
  v38 = 64;
  v7 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (!*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8))
    {
      if (v7 == ++v8)
        return this;
    }
    if ((_DWORD)v7 != (_DWORD)v8)
    {
      v9 = v40;
      while (1)
      {
        v10 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8);
        v39 = 0;
        v11 = *(unsigned __int8 *)(v10 + 20);
        if (v11 == 4)
        {
          v31 = 40;
          switch(*(_WORD *)(v10 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v31 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v31 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v31 = 64;
              break;
            case 0x53u:
              v31 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v31 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19800EE48);
          }
          v32 = v10 + v31;
          v13 = *(_QWORD **)v32;
          v11 = *(unsigned int *)(v32 + 12);
        }
        else
        {
          v12 = 40;
          switch(*(_WORD *)(v10 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v12 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v12 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v12 = 64;
              break;
            case 0x53u:
              v12 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v12 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19800EE28);
          }
          v13 = (_QWORD *)(v10 + v12);
        }
        v14 = &v13[v11];
        v15 = (unint64_t *)v9;
        if (v13 == v14)
          goto LABEL_24;
        do
        {
          v36 = 0;
          v16 = *v13;
          v36 = v16;
          ++*(_DWORD *)(*(_QWORD *)this + 8 * *(unsigned int *)(v16 + 8));
          v17 = v39;
          if (v39 == v38)
          {
            v34 = v14;
            v35 = v13;
            WTF::Vector<JSC::B3::Value *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v37, (unint64_t)&v36);
            v14 = v34;
            v13 = v35;
          }
          else
          {
            *((_QWORD *)v37 + v39) = v16;
            v39 = v17 + 1;
          }
          ++v13;
        }
        while (v13 != v14);
        v15 = (unint64_t *)v37;
        v9 = (char *)v37 + 8 * v39;
        if (!v39)
        {
LABEL_24:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,false>(v15, v9, 0, 1);
          v9 = (char *)v37;
          v24 = v39;
          if (v39)
          {
LABEL_25:
            v25 = 0;
            v26 = 8 * v24;
            v27 = v9;
            do
            {
              v28 = *(_QWORD *)v27;
              if (*(_QWORD *)v27 != v25)
              {
                v29 = *(_QWORD *)this + 8 * *(unsigned int *)(v28 + 8);
                ++*(_DWORD *)(v29 + 4);
                v25 = v28;
              }
              v27 += 8;
              v26 -= 8;
            }
            while (v26);
          }
        }
        else
        {
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,false>((unint64_t *)v37, v9, 126 - 2 * __clz(v39), 1);
          v9 = (char *)v37;
          v24 = v39;
          if (v39)
            goto LABEL_25;
        }
        v8 = (v8 + 1);
        v30 = *((unsigned int *)a2 + 19);
        if (v30 > v8)
        {
          while (!*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8))
          {
            if (v30 == ++v8)
            {
              LODWORD(v8) = *((_DWORD *)a2 + 19);
              break;
            }
          }
        }
        if ((_DWORD)v7 == (_DWORD)v8)
        {
          if (v40 != v9 && v9)
          {
            v37 = 0;
            v38 = 0;
            WTF::fastFree((unint64_t)v9, v9, v18, v19, v20, v21, v22, v23);
          }
          return this;
        }
      }
    }
  }
  return this;
}

void JSC::B3::UseCounts::~UseCounts(JSC::B3::UseCounts *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)this;
  if (v9)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *(_QWORD *)this;
  if (v9)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::B3::validate(JSC::B3 *this, JSC::B3::Procedure *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8[2];

  v8[0] = (const char *)this;
  v8[1] = (const char *)a2;
}

void JSC::B3::`anonymous namespace'::Validater::run(const char **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  WTF *v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _OWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  _DWORD *v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  _OWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  unsigned int v87;
  _DWORD *v88;
  _DWORD *v89;
  unsigned int v90;
  uint64_t j;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  _OWORD *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unsigned int v110;
  _OWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _OWORD *v119;
  _OWORD *v120;
  unsigned int v121;
  _DWORD *v122;
  _DWORD *v123;
  unsigned int v124;
  uint64_t k;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _DWORD *v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _OWORD *v157;
  _OWORD *impl_casual_case;
  unsigned int v159;
  _OWORD *v160;
  _OWORD *v161;
  unsigned int v162;
  _OWORD *v163;
  _OWORD *v164;
  _OWORD *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  int v176;
  JSC::B3::Value *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  JSC::B3::Value *v182;
  int v183;
  _QWORD *v184;
  uint64_t v185;
  _OWORD *v186;
  uint64_t v187;
  _OWORD *v188;
  _OWORD *v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  _OWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  JSC::B3::Value **v206;
  JSC::B3::Value **v207;
  uint64_t v208;
  JSC::B3::Value **v209;
  JSC::B3::Value *v210;
  WTF **v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int v215;
  WTF *v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unsigned int v221;
  unsigned int v222;
  WTF *v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  WTF *v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  JSC::B3::Value *v231;
  uint64_t v232;
  int v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  JSC::B3::Value *v237;
  int v238;
  unsigned int v239;
  uint64_t v240;
  WTF *v241;
  int v242;
  unsigned int v243;
  int v244;
  unsigned int *v245;
  unint64_t v246;
  unint64_t v247;
  JSC::B3::Value **v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int v263;
  WTF *v264;
  _OWORD *v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  unsigned int v271;
  WTF **v272;
  WTF *v273;
  WTF **v274;
  int v275;
  WTF *v276;
  int v277;
  int v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  WTF **v291;
  _QWORD *v292;
  unint64_t v293;
  WTF **v294;
  WTF *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  uint64_t v306;
  WTF **v307;
  WTF *v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  int v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  unint64_t v330;
  int v331;
  unsigned int v332;
  WTF *v333;
  int v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t *v347;
  int v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  int v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  JSC::B3::Value **m;
  JSC::B3::Value **v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  uint64_t v365;
  int v366;
  int v367;
  unsigned int v368;
  char *v369;
  unint64_t v370;
  int v371;
  __int16 v372;
  char *v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  uint64_t v388;
  unsigned int v389;
  uint64_t v391;
  unsigned int v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  unsigned int v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  unsigned __int8 v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  int v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  unsigned __int8 v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  __int128 *v439;
  int v440;
  unsigned int v441;
  unsigned int v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  unsigned int v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  int v463;
  int v465;
  uint64_t *v466;
  void *v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unsigned __int8 v482;
  unsigned int v483;
  unsigned int v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  char v491;
  int v492;
  unsigned int v493;
  unsigned int v494;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unsigned int v506;
  uint64_t v507;
  int v508;
  int v509;
  unsigned int v510;
  int v511;
  JSC::B3::Value *v512;
  char *Child;
  BOOL v514;
  uint64_t v515;
  int v516;
  unsigned int v517;
  unsigned int v518;
  int v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int *v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int v528;
  unsigned int v529;
  int v530;
  int v531;
  int v532;
  unsigned int v533;
  uint64_t v534;
  int v535;
  unsigned int v536;
  uint64_t v537;
  uint64_t v538;
  unsigned int v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  unsigned int *v562;
  unsigned int *v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t *v573;
  uint64_t v574;
  WTF *v575;
  int v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unsigned int v580;
  uint64_t v581;
  _QWORD *v582;
  int v583;
  int v584;
  int v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  int v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  WTF *v593;
  char v594;
  __int128 v595;
  WTF *v596;
  _QWORD *v597;
  unint64_t v598;
  _BYTE *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  unsigned int v605;
  unint64_t v606;
  double v607;
  double v608;
  unsigned int v609;
  unint64_t v610;
  _QWORD *v611;
  uint64_t v612;
  _QWORD *v613;
  _QWORD *v614;
  uint64_t v615;
  int v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  _QWORD *v624;
  _DWORD *v625;
  int v626;
  uint64_t v627;
  _DWORD **v628;
  _DWORD **v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t *v634;
  BOOL v635;
  _DWORD *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  _BYTE *v641;
  uint64_t v642;
  _OWORD *v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  int v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unsigned int v651;
  _QWORD *v652;
  uint64_t v653;
  _QWORD *v654;
  int v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  unint64_t v661;
  int v662;
  int v663;
  uint64_t *v664;
  int v665;
  unsigned int v666;
  unint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t n;
  uint64_t v675;
  uint64_t v676;
  int v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  unsigned int v681;
  int v682;
  unsigned int v683;
  uint64_t v684;
  unsigned int v685;
  uint64_t v686;
  unint64_t *v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  _DWORD **v691;
  _BYTE *v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  unsigned int v699;
  unint64_t v700;
  unint64_t v701;
  unint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  _QWORD *v706;
  unint64_t v707;
  int v708;
  unint64_t v709;
  unint64_t v710;
  unint64_t v711;
  unsigned int v712;
  uint64_t v713;
  _QWORD *v714;
  int v715;
  int v716;
  int v717;
  uint64_t v718;
  unint64_t v719;
  int v720;
  _QWORD *v721;
  int v722;
  unint64_t v723;
  unint64_t v725;
  void *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  unint64_t v736;
  unint64_t v737;
  unint64_t v738;
  int v739;
  int v740;
  int v741;
  uint64_t v742;
  char v743;
  uint64_t v744;
  _QWORD *v745;
  uint64_t v746;
  _QWORD *v747;
  unint64_t v748;
  uint64_t v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  _BYTE *v756;
  JSC::B3::Value **v757;
  uint64_t v758;
  BOOL v759;
  int v760;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  char v765;
  uint64_t v766;
  char v767;
  _OWORD *v769;
  uint64_t v770;
  char *v771;
  unint64_t v772;
  WTF *v773;
  unsigned int v774;
  _DWORD **v775;
  _OWORD *v776;
  uint64_t v777;
  uint64_t v778;
  char v779;
  int v780;
  _QWORD *v781;
  _QWORD *v782;
  int v783;
  unsigned int v784;
  const char *v785;
  uint64_t v786;
  int v787;
  unint64_t v788;
  _DWORD **v789;
  unsigned int v790;
  unsigned int v791;
  unsigned int v792;
  _DWORD *v793;
  unint64_t StatusReg;
  _DWORD *v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  _BYTE v801[24];
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  WTF *v1175;
  __int128 v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t *v1185;
  unint64_t v1186;
  int v1187;
  unsigned int v1188;
  uint64_t v1189;
  uint64_t v1190;
  _QWORD *v1191;
  uint64_t v1192;
  uint64_t v1193;
  _QWORD *v1194;

  v1191 = 0;
  v1192 = 0;
  v8 = *this;
  v9 = *((unsigned int *)*this + 11);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *((_QWORD *)v8 + 4);
    do
    {
      v12 = *(unsigned int *)(v11 + 16 * v10 + 12);
      if (!(_DWORD)v12)
      {
        LODWORD(v1185) = v10;
        WTF::toCString<char [10],unsigned int>(&v1190, &v1185);
      }
      for (i = 0; i != v12; ++i)
      {
        v14 = *(_DWORD *)(*(_QWORD *)(v11 + 16 * v10) + 4 * i);
        if (v14 >= 0x80000000)
          v14 = 0x80000000;
        if (v14 - 1 >= 5)
        {
          LODWORD(v1185) = v10;
          LODWORD(v1175) = i;
          WTF::toCString<char [10],unsigned int,char [10],unsigned int>(&v1189, &v1185, &v1175);
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  v15 = *((unsigned int *)v8 + 15);
  if (!(_DWORD)v15)
    goto LABEL_16;
  v16 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v16))
  {
    if (v15 == ++v16)
      goto LABEL_16;
  }
  if ((_DWORD)v15 == (_DWORD)v16)
  {
LABEL_16:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_207;
  }
  v19 = 0;
  v18 = 0;
  v17 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  LODWORD(v20) = v15;
  LODWORD(v21) = v16;
  v785 = v8;
  v780 = v15;
  do
  {
    v1175 = 0;
    if (v20 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198015218);
    }
    v22 = v17;
    v23 = v19;
    v24 = v18;
    v783 = v21;
    v1175 = *(WTF **)(*((_QWORD *)v785 + 6) + 8 * v21);
    WTF::HashTable<JSC::B3::BasicBlock *,JSC::B3::BasicBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>>::add(&v1192, (uint64_t *)&v1175, a4, a5, a6, a7, a8, (uint64_t)&v1185);
    v26 = v1175;
    if (*((_DWORD *)v1175 + 5))
    {
      v27 = 0;
      v18 = v24;
      v19 = v23;
      while (1)
      {
        v28 = *(_QWORD *)(*((_QWORD *)v26 + 1) + 8 * v27);
        v29 = v19;
        if (v19)
          goto LABEL_31;
        v30 = *(_QWORD *)(StatusReg + 752);
        if (v30)
        {
          v31 = (_BYTE *)(v30 + 9776);
          *(_BYTE *)(v30 + 9776) = 1;
          v32 = *(unsigned int *)(v30 + 9792);
          if ((_DWORD)v32)
          {
            *(_DWORD *)(v30 + 9792) = v32 - *(_DWORD *)(v30 + 9796);
            v33 = (_OWORD *)(*(_QWORD *)(v30 + 9784) - v32);
LABEL_27:
            *v31 = 0;
            v25 = 1;
LABEL_28:
            if ((v25 & 0xFFFFFFFF00000000) != 0x100000000)
            {
              v33[7] = 0u;
              v33[8] = 0u;
              v33[5] = 0u;
              v33[6] = 0u;
              v33[3] = 0u;
              v33[4] = 0u;
              v33[1] = 0u;
              v33[2] = 0u;
              *v33 = 0u;
            }
            goto LABEL_30;
          }
          v34 = *(_QWORD *)(v30 + 9816);
          v35 = *(_QWORD *)(v30 + 9800);
          if (v34)
          {
LABEL_26:
            v36 = __clz(v34);
            *(_QWORD *)(v30 + 9816) = v34 & ~(0x8000000000000000 >> v36);
            v33 = (_OWORD *)(v35 + 16 * v36);
            goto LABEL_27;
          }
          if (*(_BYTE *)(v30 + 9781) == 6)
          {
            v139 = *(_DWORD *)(v30 + 9812);
            v140 = *(unsigned int *)(v30 + 9808);
            if (v140 < v139)
            {
              *(_QWORD *)&v31[8 * v140 + 56] = 0;
              v141 = (unint64_t *)(v30 + 8 * v140 + 9840);
              v142 = v139 - 1 - v140;
              while (v142)
              {
                v35 += 1024;
                v144 = *v141++;
                v143 = v144;
                LODWORD(v140) = v140 + 1;
                --v142;
                if (v144)
                {
                  v34 = __rbit64(v143);
                  *(_DWORD *)(v30 + 9808) = v140;
                  *(_QWORD *)(v30 + 9800) = v35;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v30 + 9808) = v139;
            }
          }
          *v31 = 0;
        }
        v157 = v18;
        impl_casual_case = bmalloc_allocate_impl_casual_case(0x90uLL, 1, a3, a4, a5, a6, a7, a8);
        v18 = v157;
        v33 = impl_casual_case;
        if ((v25 & 1) != 0)
          goto LABEL_28;
LABEL_30:
        *v33 = xmmword_19914F680;
        v29 = v33 + 1;
LABEL_31:
        v37 = *((_DWORD *)v29 - 2);
        v38 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
        v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
        v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
        v41 = (v40 >> 31) ^ v40;
        v42 = v37 & v41;
        v43 = &v29[v37 & v41];
        v44 = *v43;
        if (*v43)
        {
          v45 = 0;
          v46 = 1;
          do
          {
            if (v44 == v28)
            {
              v19 = v29;
              goto LABEL_64;
            }
            if (v44 == -1)
              v45 = v43;
            v42 = (v42 + v46) & v37;
            v43 = &v29[v42];
            v44 = *v43;
            ++v46;
          }
          while (*v43);
          if (!v45)
            goto LABEL_39;
          *v45 = 0;
          v45[1] = 0;
          --*((_DWORD *)v29 - 4);
          *v45 = v28;
          *((_DWORD *)v45 + 2) = 0;
          v47 = *((_DWORD *)v29 - 3) + 1;
          *((_DWORD *)v29 - 3) = v47;
        }
        else
        {
LABEL_39:
          *v43 = v28;
          *((_DWORD *)v43 + 2) = 0;
          v47 = *((_DWORD *)v29 - 3) + 1;
          *((_DWORD *)v29 - 3) = v47;
          v45 = v43;
        }
        v48 = (unint64_t)(v29 - 1);
        v49 = (*((_DWORD *)v29 - 4) + v47);
        v50 = *((unsigned int *)v29 - 1);
        if (v50 > 0x400)
        {
          if (v50 > 2 * v49)
          {
LABEL_42:
            v19 = v29;
            v43 = v45;
            goto LABEL_64;
          }
LABEL_44:
          v790 = v41;
          v776 = v18;
          v51 = (_DWORD)v50 << (6 * v47 >= (2 * v50));
          goto LABEL_47;
        }
        if (3 * v50 > 4 * v49)
          goto LABEL_42;
        if ((_DWORD)v50)
          goto LABEL_44;
        v790 = v41;
        v776 = v18;
        v51 = 8;
LABEL_47:
        v52 = (_DWORD *)WTF::fastZeroedMalloc(16 * v51 + 16, v25, a3, a4, a5, a6, a7, a8);
        v53 = v52 + 4;
        v54 = v51 - 1;
        v52[2] = v51 - 1;
        v52[3] = v51;
        *v52 = 0;
        v52[1] = v47;
        if ((_DWORD)v50)
        {
          v55 = 0;
          v43 = 0;
          do
          {
            v56 = &v29[v55];
            if ((unint64_t)(*v56 + 1) >= 2)
            {
              v57 = (~(*v56 << 32) + *v56) ^ ((~(*v56 << 32) + *v56) >> 22);
              v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((unint64_t)(v57 + ~(v57 << 13)) >> 8));
              v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
              v60 = v54 & ((v59 >> 31) ^ v59);
              v61 = 1;
              do
              {
                v62 = v60;
                v63 = *(_QWORD *)&v53[4 * v60];
                v60 = (v60 + v61++) & v54;
              }
              while (v63);
              *(_OWORD *)&v53[4 * v62] = *(_OWORD *)v56;
              if (v56 == v45)
                v43 = &v53[4 * v62];
            }
            ++v55;
          }
          while (v55 != v50);
        }
        else
        {
          v43 = 0;
        }
        v64 = *(_QWORD *)(StatusReg + 752);
        if (!v64)
        {
          v137 = (unint64_t)(v29 - 1);
          v138 = v53;
          pas_try_deallocate_slow_no_cache(v137, (uint64_t)&bmalloc_heap_config, 1);
          v19 = v138;
          v18 = v776;
          goto LABEL_63;
        }
        v65 = v53;
        if (!(v48 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v48 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v48)) & 1) != 0)
        {
LABEL_60:
          v66 = *(unsigned int *)(v64 + 8000);
          if (v66 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v64, v48, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v64 + 8 * v66) = v48 | 0x5000000000000;
            *(_DWORD *)(v64 + 8000) = v66 + 1;
          }
          goto LABEL_62;
        }
        if (v48 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v48 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v48 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v48) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_60;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v64, v48, 1, a4, a5, a6, a7, a8);
LABEL_62:
        v18 = v776;
        v19 = v65;
LABEL_63:
        v41 = v790;
LABEL_64:
        ++*((_DWORD *)v43 + 2);
        if (v18)
          goto LABEL_74;
        v67 = *(_QWORD *)(StatusReg + 752);
        if (v67)
        {
          v68 = (_BYTE *)(v67 + 9776);
          *(_BYTE *)(v67 + 9776) = 1;
          v69 = *(unsigned int *)(v67 + 9792);
          if ((_DWORD)v69)
          {
            *(_DWORD *)(v67 + 9792) = v69 - *(_DWORD *)(v67 + 9796);
            v70 = (_OWORD *)(*(_QWORD *)(v67 + 9784) - v69);
LABEL_70:
            *v68 = 0;
            v25 = 1;
LABEL_71:
            if ((v25 & 0xFFFFFFFF00000000) != 0x100000000)
            {
              v70[7] = 0u;
              v70[8] = 0u;
              v70[5] = 0u;
              v70[6] = 0u;
              v70[3] = 0u;
              v70[4] = 0u;
              v70[1] = 0u;
              v70[2] = 0u;
              *v70 = 0u;
            }
            goto LABEL_73;
          }
          v71 = *(_QWORD *)(v67 + 9816);
          v72 = *(_QWORD *)(v67 + 9800);
          if (v71)
          {
LABEL_69:
            v73 = __clz(v71);
            *(_QWORD *)(v67 + 9816) = v71 & ~(0x8000000000000000 >> v73);
            v70 = (_OWORD *)(v72 + 16 * v73);
            goto LABEL_70;
          }
          if (*(_BYTE *)(v67 + 9781) == 6)
          {
            v145 = *(_DWORD *)(v67 + 9812);
            v146 = *(unsigned int *)(v67 + 9808);
            if (v146 < v145)
            {
              *(_QWORD *)&v68[8 * v146 + 56] = 0;
              v147 = (unint64_t *)(v67 + 8 * v146 + 9840);
              v148 = v145 - 1 - v146;
              while (v148)
              {
                v72 += 1024;
                v150 = *v147++;
                v149 = v150;
                LODWORD(v146) = v146 + 1;
                --v148;
                if (v150)
                {
                  v71 = __rbit64(v149);
                  *(_DWORD *)(v67 + 9808) = v146;
                  *(_QWORD *)(v67 + 9800) = v72;
                  goto LABEL_69;
                }
              }
              *(_DWORD *)(v67 + 9808) = v145;
            }
          }
          *v68 = 0;
        }
        v159 = v41;
        v160 = v19;
        v161 = bmalloc_allocate_impl_casual_case(0x90uLL, 1, a3, a4, a5, a6, a7, a8);
        v19 = v160;
        v70 = v161;
        v41 = v159;
        if ((v25 & 1) != 0)
          goto LABEL_71;
LABEL_73:
        *v70 = xmmword_19914F680;
        v18 = v70 + 1;
LABEL_74:
        v74 = *((_DWORD *)v18 - 2);
        v75 = v74 & v41;
        v76 = &v18[v74 & v41];
        v77 = *v76;
        if (*v76)
        {
          v78 = 0;
          v79 = 1;
          while (v77 != v28)
          {
            if (v77 == -1)
              v78 = v76;
            v75 = (v75 + v79) & v74;
            v76 = &v18[v75];
            v77 = *v76;
            ++v79;
            if (!*v76)
            {
              if (!v78)
                goto LABEL_82;
              *v78 = 0;
              v78[1] = 0;
              v80 = *((_DWORD *)v18 - 4) - 1;
              *((_DWORD *)v18 - 4) = v80;
              *v78 = v28;
              v78[1] = v1175;
              v81 = *((_DWORD *)v18 - 3);
              goto LABEL_83;
            }
          }
        }
        else
        {
LABEL_82:
          *v76 = v28;
          v76[1] = v1175;
          v80 = *((_DWORD *)v18 - 4);
          v81 = *((_DWORD *)v18 - 3);
LABEL_83:
          v82 = v81 + 1;
          *((_DWORD *)v18 - 3) = v81 + 1;
          v83 = (v80 + v81 + 1);
          v84 = *((unsigned int *)v18 - 1);
          if (v84 <= 0x400)
          {
            if (3 * v84 > 4 * v83)
              goto LABEL_101;
            if ((_DWORD)v84)
            {
LABEL_86:
              v791 = v41;
              v85 = v19;
              v86 = v18;
              v87 = (_DWORD)v84 << (6 * v82 >= (2 * v84));
            }
            else
            {
              v791 = v41;
              v85 = v19;
              v86 = v18;
              v87 = 8;
            }
            v88 = (_DWORD *)WTF::fastZeroedMalloc(16 * v87 + 16, v25, a3, a4, a5, a6, a7, a8);
            v89 = v88 + 4;
            v90 = v87 - 1;
            v88[2] = v87 - 1;
            v88[3] = v87;
            *v88 = 0;
            v88[1] = v82;
            if ((_DWORD)v84)
            {
              for (j = 0; j != v84; ++j)
              {
                v92 = &v86[j];
                if ((unint64_t)(*v92 + 1) >= 2)
                {
                  v93 = (~(*v92 << 32) + *v92) ^ ((~(*v92 << 32) + *v92) >> 22);
                  v94 = 9 * ((v93 + ~(v93 << 13)) ^ ((unint64_t)(v93 + ~(v93 << 13)) >> 8));
                  v95 = (v94 ^ (v94 >> 15)) + ~((v94 ^ (v94 >> 15)) << 27);
                  v96 = v90 & ((v95 >> 31) ^ v95);
                  v97 = 1;
                  do
                  {
                    v98 = v96;
                    v99 = *(_QWORD *)&v89[4 * v96];
                    v96 = (v96 + v97++) & v90;
                  }
                  while (v99);
                  *(_OWORD *)&v89[4 * v98] = *(_OWORD *)v92;
                }
              }
            }
            v25 = (unint64_t)(v86 - 1);
            v100 = *(_QWORD *)(StatusReg + 752);
            if (v100)
            {
              if (v25 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v86 - 1) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v86 - 16) >> 24)) & 1) == 0)
              {
                if (v25 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v25 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((unint64_t)(v86 - 1) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2
                                          * (((((_DWORD)v86 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_98;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v100, v25, 1, a4, a5, a6, a7, a8);
              }
              else
              {
LABEL_98:
                v101 = *(unsigned int *)(v100 + 8000);
                if (v101 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v100, v25, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v100 + 8 * v101) = v25 | 0x5000000000000;
                  *(_DWORD *)(v100 + 8000) = v101 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache((unint64_t)(v86 - 1), (uint64_t)&bmalloc_heap_config, 1);
            }
            v18 = v89;
            v19 = v85;
            v41 = v791;
            goto LABEL_101;
          }
          if (v84 <= 2 * v83)
            goto LABEL_86;
        }
LABEL_101:
        if (v22)
          goto LABEL_111;
        v102 = *(_QWORD *)(StatusReg + 752);
        if (v102)
        {
          v103 = (_BYTE *)(v102 + 9776);
          *(_BYTE *)(v102 + 9776) = 1;
          v104 = *(unsigned int *)(v102 + 9792);
          if ((_DWORD)v104)
          {
            *(_DWORD *)(v102 + 9792) = v104 - *(_DWORD *)(v102 + 9796);
            v105 = (_OWORD *)(*(_QWORD *)(v102 + 9784) - v104);
LABEL_107:
            *v103 = 0;
            v25 = 1;
LABEL_108:
            if ((v25 & 0xFFFFFFFF00000000) != 0x100000000)
            {
              v105[7] = 0u;
              v105[8] = 0u;
              v105[5] = 0u;
              v105[6] = 0u;
              v105[3] = 0u;
              v105[4] = 0u;
              v105[1] = 0u;
              v105[2] = 0u;
              *v105 = 0u;
            }
            goto LABEL_110;
          }
          v106 = *(_QWORD *)(v102 + 9816);
          v107 = *(_QWORD *)(v102 + 9800);
          if (v106)
          {
LABEL_106:
            v108 = __clz(v106);
            *(_QWORD *)(v102 + 9816) = v106 & ~(0x8000000000000000 >> v108);
            v105 = (_OWORD *)(v107 + 16 * v108);
            goto LABEL_107;
          }
          if (*(_BYTE *)(v102 + 9781) == 6)
          {
            v151 = *(_DWORD *)(v102 + 9812);
            v152 = *(unsigned int *)(v102 + 9808);
            if (v152 < v151)
            {
              *(_QWORD *)&v103[8 * v152 + 56] = 0;
              v153 = (unint64_t *)(v102 + 8 * v152 + 9840);
              v154 = v151 - 1 - v152;
              while (v154)
              {
                v107 += 1024;
                v156 = *v153++;
                v155 = v156;
                LODWORD(v152) = v152 + 1;
                --v154;
                if (v156)
                {
                  v106 = __rbit64(v155);
                  *(_DWORD *)(v102 + 9808) = v152;
                  *(_QWORD *)(v102 + 9800) = v107;
                  goto LABEL_106;
                }
              }
              *(_DWORD *)(v102 + 9808) = v151;
            }
          }
          *v103 = 0;
        }
        v162 = v41;
        v163 = v18;
        v164 = v19;
        v165 = bmalloc_allocate_impl_casual_case(0x90uLL, 1, a3, a4, a5, a6, a7, a8);
        v19 = v164;
        v18 = v163;
        v105 = v165;
        v41 = v162;
        if ((v25 & 1) != 0)
          goto LABEL_108;
LABEL_110:
        *v105 = xmmword_19914F680;
        v22 = v105 + 1;
LABEL_111:
        v109 = *((_DWORD *)v22 - 2);
        v110 = v109 & v41;
        v111 = &v22[v109 & v41];
        v112 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          v113 = 0;
          v114 = 1;
          while (v112 != v28)
          {
            if (v112 == -1)
              v113 = v111;
            v110 = (v110 + v114) & v109;
            v111 = &v22[v110];
            v112 = *(_QWORD *)v111;
            ++v114;
            if (!*(_QWORD *)v111)
            {
              if (!v113)
                goto LABEL_119;
              *v113 = 0;
              v113[1] = 0;
              --*((_DWORD *)v22 - 4);
              *v113 = v28;
              *((_DWORD *)v113 + 2) = v27;
              goto LABEL_120;
            }
          }
        }
        else
        {
LABEL_119:
          *(_QWORD *)v111 = v28;
          *((_DWORD *)v111 + 2) = v27;
LABEL_120:
          v115 = *((_DWORD *)v22 - 3) + 1;
          *((_DWORD *)v22 - 3) = v115;
          v116 = (unint64_t)(v22 - 1);
          v117 = (*((_DWORD *)v22 - 4) + v115);
          v118 = *((unsigned int *)v22 - 1);
          if (v118 > 0x400)
          {
            if (v118 <= 2 * v117)
              goto LABEL_124;
          }
          else if (3 * v118 <= 4 * v117)
          {
            if ((_DWORD)v118)
            {
LABEL_124:
              v119 = v19;
              v120 = v18;
              v121 = (_DWORD)v118 << (6 * v115 >= (2 * v118));
            }
            else
            {
              v119 = v19;
              v120 = v18;
              v121 = 8;
            }
            v122 = (_DWORD *)WTF::fastZeroedMalloc(16 * v121 + 16, v25, a3, a4, a5, a6, a7, a8);
            v123 = v122 + 4;
            v124 = v121 - 1;
            v122[2] = v121 - 1;
            v122[3] = v121;
            *v122 = 0;
            v122[1] = v115;
            if ((_DWORD)v118)
            {
              for (k = 0; k != v118; ++k)
              {
                v126 = &v22[k];
                if ((unint64_t)(*v126 + 1) >= 2)
                {
                  v127 = (~(*v126 << 32) + *v126) ^ ((~(*v126 << 32) + *v126) >> 22);
                  v128 = 9 * ((v127 + ~(v127 << 13)) ^ ((unint64_t)(v127 + ~(v127 << 13)) >> 8));
                  v129 = (v128 ^ (v128 >> 15)) + ~((v128 ^ (v128 >> 15)) << 27);
                  v130 = v124 & ((v129 >> 31) ^ v129);
                  v131 = 1;
                  do
                  {
                    v132 = v130;
                    v133 = *(_QWORD *)&v123[4 * v130];
                    v130 = (v130 + v131++) & v124;
                  }
                  while (v133);
                  *(_OWORD *)&v123[4 * v132] = *(_OWORD *)v126;
                }
              }
            }
            v134 = v122 + 4;
            v135 = *(_QWORD *)(StatusReg + 752);
            if (v135)
            {
              if (v116 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v22 - 1) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v22 - 16) >> 24)) & 1) == 0)
              {
                if (v116 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v116 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((unint64_t)(v22 - 1) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2
                                          * (((((_DWORD)v22 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_136;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v135, (unint64_t)(v22 - 1), 1, a4, a5, a6, a7, a8);
              }
              else
              {
LABEL_136:
                v136 = *(unsigned int *)(v135 + 8000);
                if (v136 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v135, (uint64_t)(v22 - 1), (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v135 + 8 * v136) = v116 | 0x5000000000000;
                  *(_DWORD *)(v135 + 8000) = v136 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache((unint64_t)(v22 - 1), (uint64_t)&bmalloc_heap_config, 1);
            }
            v18 = v120;
            v19 = v119;
            v17 = v134;
            goto LABEL_139;
          }
        }
        v17 = v22;
LABEL_139:
        ++v27;
        v26 = v1175;
        v22 = v17;
        if (v27 >= *((unsigned int *)v1175 + 5))
          goto LABEL_199;
      }
    }
    v18 = v24;
    v19 = v23;
    v17 = v22;
LABEL_199:
    v21 = (v783 + 1);
    v20 = *((unsigned int *)v785 + 15);
    if (v20 <= v21)
    {
      v166 = v780;
    }
    else
    {
      v166 = v780;
      while (!*(_QWORD *)(*((_QWORD *)v785 + 6) + 8 * v21))
      {
        if (v20 == ++v21)
        {
          LODWORD(v21) = *((_DWORD *)v785 + 15);
          break;
        }
      }
    }
  }
  while (v166 != (_DWORD)v21);
  v8 = *this;
LABEL_207:
  v777 = (uint64_t)v18;
  v167 = *((unsigned int *)v8 + 19);
  v769 = v19;
  if ((_DWORD)v167)
  {
    v168 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v168))
    {
      if (v167 == ++v168)
        goto LABEL_220;
    }
    while ((_DWORD)v167 != (_DWORD)v168)
    {
      v169 = v17;
      v1175 = 0;
      v1175 = *(WTF **)(*((_QWORD *)v8 + 8) + 8 * v168);
      WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add((uint64_t *)&v1191, (uint64_t *)&v1175, a3, a4, a5, a6, a7, a8, (uint64_t)&v1185);
      v168 = (v168 + 1);
      v170 = *((unsigned int *)v8 + 19);
      if (v170 <= v168)
      {
        v19 = v769;
        v17 = v169;
      }
      else
      {
        v19 = v769;
        v17 = v169;
        while (!*(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v168))
        {
          if (v170 == ++v168)
          {
            LODWORD(v168) = *((_DWORD *)v8 + 19);
            break;
          }
        }
      }
    }
  }
LABEL_220:
  if (!v1191)
  {
    v172 = 0;
    v171 = 0;
    goto LABEL_279;
  }
  v171 = *((unsigned int *)v1191 - 1);
  v172 = &v1191[v171];
  if (!*((_DWORD *)v1191 - 3))
  {
LABEL_279:
    v174 = v172;
    v172 = &v1191[v171];
    if (v1191)
      goto LABEL_227;
    v175 = 0;
    goto LABEL_230;
  }
  if ((_DWORD)v171)
  {
    v173 = 8 * v171;
    v174 = v1191;
    while ((unint64_t)(*v174 + 1) <= 1)
    {
      ++v174;
      v173 -= 8;
      if (!v173)
      {
        v174 = v172;
        break;
      }
    }
LABEL_227:
    LODWORD(v171) = *((_DWORD *)v1191 - 1);
  }
  else
  {
    v174 = v1191;
  }
  v175 = &v1191[v171];
LABEL_230:
  if (v175 != v174)
  {
    if (v19)
    {
      v176 = *((_DWORD *)v19 - 2);
      while (1)
      {
        v177 = (JSC::B3::Value *)*v174;
        v178 = ~(*v174 << 32) + *v174;
        v179 = (v178 ^ (v178 >> 22)) + ~((v178 ^ (v178 >> 22)) << 13);
        v180 = (9 * (v179 ^ (v179 >> 8))) ^ ((9 * (v179 ^ (v179 >> 8))) >> 15);
        v181 = v176 & (((v180 + ~(v180 << 27)) >> 31) ^ (v180 + ~((_DWORD)v180 << 27)));
        v182 = *(JSC::B3::Value **)&v19[v181];
        if (v182 != (JSC::B3::Value *)*v174)
          break;
LABEL_237:
        v184 = v174 + 1;
        v174 = v172;
        if (v184 != v172)
        {
          v174 = v184;
          while ((unint64_t)(*v174 + 1) <= 1)
          {
            if (++v174 == v172)
            {
              v174 = v172;
              break;
            }
          }
        }
        if (v174 == v175)
          goto LABEL_243;
      }
      v183 = 1;
      while (v182)
      {
        v181 = (v181 + v183) & v176;
        v182 = *(JSC::B3::Value **)&v19[v181];
        ++v183;
        if (v182 == v177)
          goto LABEL_237;
      }
    }
    else
    {
      v177 = (JSC::B3::Value *)*v174;
    }
    WTF::toCString<char [4],JSC::B3::Value>(&v1184, v177);
  }
LABEL_243:
  if (!v19)
  {
    v186 = 0;
    v185 = 0;
    goto LABEL_252;
  }
  v185 = *((unsigned int *)v19 - 1);
  v186 = &v19[v185];
  if (!*((_DWORD *)v19 - 3))
  {
LABEL_252:
    v188 = v186;
    v186 = &v19[v185];
    if (v19)
      goto LABEL_250;
    v189 = 0;
    goto LABEL_256;
  }
  if ((_DWORD)v185)
  {
    v187 = 16 * v185;
    v188 = v19;
    while ((unint64_t)(*(_QWORD *)v188 + 1) <= 1)
    {
      ++v188;
      v187 -= 16;
      if (!v187)
      {
        v188 = v186;
        break;
      }
    }
LABEL_250:
    LODWORD(v185) = *((_DWORD *)v19 - 1);
  }
  else
  {
    v188 = v19;
  }
  v189 = &v19[v185];
LABEL_256:
  if (v189 != v188)
  {
    if (v1191)
    {
      v190 = *((_DWORD *)v1191 - 2);
      while (1)
      {
        v191 = *(_QWORD *)v188;
        v192 = ~(*(_QWORD *)v188 << 32) + *(_QWORD *)v188;
        v193 = (v192 ^ (v192 >> 22)) + ~((v192 ^ (v192 >> 22)) << 13);
        v194 = (9 * (v193 ^ (v193 >> 8))) ^ ((9 * (v193 ^ (v193 >> 8))) >> 15);
        v195 = v190 & (((v194 + ~(v194 << 27)) >> 31) ^ (v194 + ~((_DWORD)v194 << 27)));
        v196 = v1191[v195];
        if (v196 != *(_QWORD *)v188)
          break;
LABEL_263:
        if (*((_DWORD *)v188 + 2) != 1)
          goto LABEL_1654;
        v198 = v188 + 1;
        v188 = v186;
        if (v198 != v186)
        {
          v188 = v198;
          while ((unint64_t)(*(_QWORD *)v188 + 1) <= 1)
          {
            if (++v188 == v186)
            {
              v188 = v186;
              break;
            }
          }
        }
        if (v188 == v189)
          goto LABEL_270;
      }
      v197 = 1;
      while (v196)
      {
        v195 = (v195 + v197) & v190;
        v196 = v1191[v195];
        ++v197;
        if (v196 == v191)
          goto LABEL_263;
      }
    }
    else
    {
      v191 = *(_QWORD *)v188;
    }
    WTF::toCString<char [4],JSC::B3::Value>(&v1183, (JSC::B3::Value *)v191);
  }
LABEL_270:
  v763 = (uint64_t)v17;
  WTF::Dominators<JSC::B3::CFG>::Dominators(&v1185, *((uint64_t **)*this + 12), 0, a4, a5, a6, a7, a8);
  if (!v1191)
  {
    v207 = 0;
    v205 = 0;
    goto LABEL_282;
  }
  v205 = *((unsigned int *)v1191 - 1);
  v206 = (JSC::B3::Value **)&v1191[v205];
  if (!*((_DWORD *)v1191 - 3))
  {
    v207 = (JSC::B3::Value **)&v1191[v205];
LABEL_282:
    v206 = (JSC::B3::Value **)&v1191[v205];
    goto LABEL_283;
  }
  v207 = (JSC::B3::Value **)v1191;
  if ((_DWORD)v205)
  {
    v208 = 8 * v205;
    v207 = (JSC::B3::Value **)v1191;
    while ((unint64_t)*v207 + 1 <= 1)
    {
      ++v207;
      v208 -= 8;
      if (!v208)
      {
        v207 = v206;
        break;
      }
    }
  }
LABEL_283:
  if (v1191)
    v209 = (JSC::B3::Value **)&v1191[*((unsigned int *)v1191 - 1)];
  else
    v209 = 0;
  while (v207 != v209)
  {
    v210 = *v207;
    v211 = (WTF **)JSC::B3::Value::children(*v207);
    v203 = v777;
    v204 = v763;
    if (v211 != (WTF **)v191)
    {
      if (v1191)
      {
        v212 = ((unint64_t)v210 + ~((_QWORD)v210 << 32)) ^ (((unint64_t)v210 + ~((_QWORD)v210 << 32)) >> 22);
        v213 = 9 * ((v212 + ~(v212 << 13)) ^ ((v212 + ~(v212 << 13)) >> 8));
        v214 = (v213 ^ (v213 >> 15)) + ~((v213 ^ (v213 >> 15)) << 27);
        v215 = (v214 >> 31) ^ v214;
        while (1)
        {
          v216 = *v211;
          if (!*v211)
            goto LABEL_1650;
          v217 = *((_DWORD *)v1191 - 2);
          v218 = ((unint64_t)v216 + ~((_QWORD)v216 << 32)) ^ (((unint64_t)v216 + ~((_QWORD)v216 << 32)) >> 22);
          v219 = 9 * ((v218 + ~(v218 << 13)) ^ ((v218 + ~(v218 << 13)) >> 8));
          v220 = (v219 ^ (v219 >> 15)) + ~((v219 ^ (v219 >> 15)) << 27);
          v221 = (v220 >> 31) ^ v220;
          v222 = v217 & v221;
          v223 = (WTF *)v1191[v217 & v221];
          if (v223 != v216)
            break;
LABEL_294:
          if (!v777)
            goto LABEL_325;
          v225 = *(_DWORD *)(v777 - 8);
          v226 = v225 & v221;
          v227 = *(WTF **)(v777 + 16 * v226);
          v228 = v226;
          if (v227 == v216)
          {
LABEL_299:
            v199 = *(_QWORD *)(v777 + 16 * v228 + 8);
          }
          else
          {
            v229 = 1;
            v199 = *(_QWORD *)(v777 + 16 * (v225 & v221));
            LODWORD(v228) = v225 & v221;
            while (v199)
            {
              v228 = ((_DWORD)v228 + v229) & v225;
              v199 = *(_QWORD *)(v777 + 16 * v228);
              ++v229;
              if ((WTF *)v199 == v216)
                goto LABEL_299;
            }
          }
          v230 = v225 & v215;
          v231 = *(JSC::B3::Value **)(v777 + 16 * v230);
          v232 = v230;
          if (v231 == v210)
          {
LABEL_304:
            v200 = *(_QWORD *)(v777 + 16 * v232 + 8);
          }
          else
          {
            v201 = 1;
            v202 = *(_QWORD *)(v777 + 16 * (v225 & v215));
            LODWORD(v232) = v225 & v215;
            while (v202)
            {
              v232 = ((_DWORD)v232 + (_DWORD)v201) & v225;
              v202 = *(_QWORD *)(v777 + 16 * v232);
              v201 = (v201 + 1);
              if ((JSC::B3::Value *)v202 == v210)
                goto LABEL_304;
            }
            v200 = 0;
          }
          if (v199 == v200)
          {
LABEL_325:
            if (!v763)
              goto LABEL_1657;
            v235 = *(_DWORD *)(v763 - 8);
            v236 = v235 & v215;
            v237 = *(JSC::B3::Value **)(v763 + 16 * v236);
            if (v237 == v210)
            {
LABEL_317:
              v239 = *(_DWORD *)(v763 + 16 * v236 + 8);
            }
            else
            {
              v238 = 1;
              while (v237)
              {
                v236 = ((_DWORD)v236 + v238) & v235;
                v237 = *(JSC::B3::Value **)(v763 + 16 * v236);
                ++v238;
                if (v237 == v210)
                  goto LABEL_317;
              }
              v239 = 0;
            }
            v240 = v235 & v221;
            v241 = *(WTF **)(v763 + 16 * v240);
            if (v241 == v216)
            {
LABEL_323:
              v243 = *(_DWORD *)(v763 + 16 * v240 + 8);
            }
            else
            {
              v242 = 1;
              while (v241)
              {
                v240 = ((_DWORD)v240 + v242) & v235;
                v241 = *(WTF **)(v763 + 16 * v240);
                ++v242;
                if (v241 == v216)
                  goto LABEL_323;
              }
              v243 = 0;
            }
            if (v239 <= v243)
            {
LABEL_1657:
              v1175 = *v211;
              WTF::toCString<char [4],JSC::B3::Value,char [3],WTF::PointerDump<JSC::B3::Value>>(&v1179, "At ", v210, &v1175);
            }
          }
          else
          {
            if (v227 == v216)
            {
LABEL_311:
              v234 = *(unsigned int **)(v777 + 16 * v226 + 8);
            }
            else
            {
              v233 = 1;
              while (v227)
              {
                v226 = ((_DWORD)v226 + v233) & v225;
                v227 = *(WTF **)(v777 + 16 * v226);
                ++v233;
                if (v227 == v216)
                  goto LABEL_311;
              }
              v234 = 0;
            }
            if (v231 == v210)
            {
LABEL_332:
              v245 = *(unsigned int **)(v777 + 16 * v230 + 8);
            }
            else
            {
              v244 = 1;
              while (v231)
              {
                v230 = ((_DWORD)v230 + v244) & v225;
                v231 = *(JSC::B3::Value **)(v777 + 16 * v230);
                ++v244;
                if (v231 == v210)
                  goto LABEL_332;
              }
              v245 = 0;
            }
            if (v234 != v245)
            {
              v246 = v1186 + 32 * *v245;
              v247 = v1186 + 32 * *v234;
              if (*(_DWORD *)(v246 + 24) <= *(_DWORD *)(v247 + 24) || *(_DWORD *)(v246 + 28) >= *(_DWORD *)(v247 + 28))
              {
                v1175 = *v211;
                WTF::toCString<char [4],JSC::B3::Value,char [3],WTF::PointerDump<JSC::B3::Value>>(&v1178, "at ", v210, &v1175);
              }
            }
          }
          if (++v211 == (WTF **)v191)
            goto LABEL_338;
        }
        v224 = 1;
        while (v223)
        {
          v222 = (v222 + v224) & v217;
          v223 = (WTF *)v1191[v222];
          ++v224;
          if (v223 == v216)
            goto LABEL_294;
        }
      }
      else
      {
        v216 = *v211;
        if (!*v211)
        {
LABEL_1650:
          WTF::toCString<char [4],JSC::B3::Value>(&v1181, v210);
        }
      }
      v1175 = v216;
      WTF::toCString<char [4],JSC::B3::Value,char [3],WTF::PointerDump<JSC::B3::Value>>(&v1180, "At ", v210, &v1175);
    }
LABEL_338:
    v248 = v207 + 1;
    v207 = v206;
    if (v248 != v206)
    {
      v207 = v248;
      while ((unint64_t)*v207 + 1 <= 1)
      {
        if (++v207 == v206)
        {
          v207 = v206;
          break;
        }
      }
    }
  }
  if (v1192)
  {
    v249 = *(unsigned int *)(v1192 - 4);
    v250 = v1192 + 8 * v249;
    if (*(_DWORD *)(v1192 - 12))
    {
      v251 = v1192;
      if ((_DWORD)v249)
      {
        v252 = 8 * v249;
        v251 = v1192;
        while ((unint64_t)(*(_QWORD *)v251 + 1) <= 1)
        {
          v251 += 8;
          v252 -= 8;
          if (!v252)
          {
            v251 = v250;
            break;
          }
        }
      }
LABEL_351:
      v253 = v1192 + 8 * *(unsigned int *)(v1192 - 4);
      goto LABEL_352;
    }
    v251 = v1192 + 8 * v249;
  }
  else
  {
    v251 = 0;
    v249 = 0;
  }
  v250 = v1192 + 8 * v249;
  if (v1192)
    goto LABEL_351;
  v253 = 0;
LABEL_352:
  if (v253 == v251)
  {
    v254 = 0;
    goto LABEL_500;
  }
  v254 = 0;
  v772 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v764 = v253;
  v766 = v250;
  do
  {
    v255 = *(_QWORD *)v251;
    v256 = *(unsigned int *)(*(_QWORD *)v251 + 20);
    v786 = *(_QWORD *)v251;
    if ((_DWORD)v256 == 1)
    {
      v256 = 1;
    }
    else
    {
      if (!*(_DWORD *)(*(_QWORD *)v251 + 20))
      {
        WTF::toCString<char [4],JSC::B3::BasicBlock>(&v1177, (_DWORD *)v255);
      }
      v257 = 0;
      do
      {
        if (v257 >= v256)
        {
          __break(0xC471u);
          JUMPOUT(0x198014F34);
        }
        JSC::B3::Value::effects(*(_QWORD *)(*(_QWORD *)(v255 + 8) + 8 * v257), (uint64_t)&v1175);
        v256 = *(unsigned int *)(v255 + 20);
        if ((_BYTE)v1175)
        {
          if (v256 > v257)
          {
            WTF::toCString<char [4],JSC::B3::Value>(&v1174, *(JSC::B3::Value **)(*(_QWORD *)(v786 + 8) + 8 * v257));
          }
          __break(0xC471u);
          JUMPOUT(0x198018F98);
        }
        ++v257;
      }
      while (v256 - 1 > v257);
      if (!*(_DWORD *)(v255 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x198018C88);
      }
    }
    JSC::B3::Value::effects(*(_QWORD *)(*(_QWORD *)(v255 + 8) + 8 * v256 - 8), (uint64_t)&v1175);
    if (!(_BYTE)v1175)
    {
      v758 = *(unsigned int *)(v255 + 20);
      if ((_DWORD)v758)
      {
        WTF::toCString<char [4],JSC::B3::Value>(&v1173, *(JSC::B3::Value **)(*(_QWORD *)(v786 + 8) + 8 * v758 - 8));
      }
      __break(0xC471u);
      JUMPOUT(0x198018FA0);
    }
    v770 = v251;
    v258 = *(unsigned int *)(v255 + 68);
    if ((_DWORD)v258)
    {
      v259 = 0;
      v260 = (~(v255 << 32) + v255) ^ ((unint64_t)(~(v255 << 32) + v255) >> 22);
      v261 = 9 * ((v260 + ~(v260 << 13)) ^ ((v260 + ~(v260 << 13)) >> 8));
      v262 = (v261 ^ (v261 >> 15)) + ~((v261 ^ (v261 >> 15)) << 27);
      v263 = (v262 >> 31) ^ v262;
      v778 = *(unsigned int *)(v255 + 68);
      v774 = v263;
      do
      {
        if (v259 >= *(unsigned int *)(v255 + 68))
        {
          __break(0xC471u);
          JUMPOUT(0x198014E50);
        }
        v264 = *(WTF **)(*(_QWORD *)(v255 + 56) + 16 * v259);
        if (v254)
          goto LABEL_369;
        v265 = (_OWORD *)WTF::fastMalloc((WTF *)0x90);
        v265[2] = 0u;
        v265[3] = 0u;
        v265[4] = 0u;
        v265[5] = 0u;
        v265[6] = 0u;
        v265[7] = 0u;
        v265[8] = 0u;
        *v265 = xmmword_19914F680;
        v265[1] = 0u;
        v254 = v265 + 1;
        if (v265 == (_OWORD *)-16)
          v266 = 0;
        else
LABEL_369:
          v266 = *((_DWORD *)v254 - 2);
        v267 = ((unint64_t)v264 + ~((_QWORD)v264 << 32)) ^ (((unint64_t)v264 + ~((_QWORD)v264 << 32)) >> 22);
        v268 = 9 * ((v267 + ~(v267 << 13)) ^ ((v267 + ~(v267 << 13)) >> 8));
        v269 = (v268 ^ (v268 >> 15)) + ~((v268 ^ (v268 >> 15)) << 27);
        v270 = (v269 >> 31) ^ v269;
        v271 = v266 & v270;
        v272 = (WTF **)&v254[2 * (v266 & v270)];
        v273 = *v272;
        if (*v272)
        {
          v274 = 0;
          v275 = 1;
          do
          {
            if (v273 == v264)
              goto LABEL_449;
            if (v273 == (WTF *)-1)
              v274 = v272;
            v271 = (v271 + v275) & v266;
            v272 = (WTF **)&v254[2 * v271];
            v273 = *v272;
            ++v275;
          }
          while (*v272);
          if (v274)
          {
            *v274 = 0;
            v274[1] = 0;
            --*((_DWORD *)v254 - 4);
            v272 = v274;
          }
        }
        v792 = v270;
        v276 = v272[1];
        *v272 = v264;
        v272[1] = 0;
        v781 = v254;
        if (v276)
          WTF::fastFree((unint64_t)v276 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
        v277 = *((_DWORD *)v254 - 4);
        v278 = *((_DWORD *)v254 - 3) + 1;
        *((_DWORD *)v254 - 3) = v278;
        v279 = (v277 + v278);
        v280 = *((unsigned int *)v254 - 1);
        if (v280 > 0x400)
        {
          if (v280 > 2 * v279)
            goto LABEL_448;
        }
        else
        {
          if (3 * v280 > 4 * v279)
            goto LABEL_448;
          if (!(_DWORD)v280)
          {
            v788 = (unint64_t)(v254 - 2);
            v281 = 8;
            goto LABEL_386;
          }
        }
        v788 = (unint64_t)(v254 - 2);
        v281 = (_DWORD)v280 << (6 * v278 >= (2 * v280));
LABEL_386:
        v282 = WTF::fastMalloc((WTF *)(16 * v281 + 16));
        v795 = (_DWORD *)v282;
        v254 = (_QWORD *)(v282 + 16);
        if (v281)
          bzero((void *)(v282 + 16), 16 * v281);
        v795[2] = v281 - 1;
        v795[3] = v281;
        *v795 = 0;
        v795[1] = v278;
        if ((_DWORD)v280)
        {
          v290 = 0;
          v291 = 0;
          v292 = v781;
          v293 = v772;
          while (2)
          {
            v294 = (WTF **)&v292[2 * v290];
            v295 = *v294;
            if (*v294 != (WTF *)-1)
            {
              if (v295)
              {
                if (v254)
                  v299 = v795[2];
                else
                  v299 = 0;
                v300 = ((unint64_t)v295 + ~((_QWORD)v295 << 32)) ^ (((unint64_t)v295
                                                                          + ~((_QWORD)v295 << 32)) >> 22);
                v301 = 9 * ((v300 + ~(v300 << 13)) ^ ((v300 + ~(v300 << 13)) >> 8));
                v302 = (v301 ^ (v301 >> 15)) + ~((v301 ^ (v301 >> 15)) << 27);
                v303 = v299 & ((v302 >> 31) ^ v302);
                v304 = 1;
                do
                {
                  v305 = v303;
                  v306 = v254[2 * v303];
                  v303 = (v303 + v304++) & v299;
                }
                while (v306);
                v307 = (WTF **)&v254[2 * v305];
                v309 = v307 + 1;
                v308 = v307[1];
                if (v308)
                {
                  v283 = (unint64_t)v308 - 16;
                  v310 = *(_QWORD *)(v293 + 752);
                  if (v310)
                  {
                    if (v283 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                           + ((((unint64_t)v308 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v308 - 16) >> 24)) & 1) == 0)
                    {
                      if (v283 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v283 >> 24)
                      {
                        v285 = 0;
                      }
                      else
                      {
                        v285 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((((unint64_t)v308 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2
                                                  * (((((_DWORD)v308 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v285 == 1)
                          goto LABEL_407;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v310, v283, 1, v285, v286, v287, v288, v289);
                    }
                    else
                    {
LABEL_407:
                      v311 = *(unsigned int *)(v310 + 8000);
                      if (v311 < 0x3E7)
                      {
                        *(_QWORD *)(v310 + 8 * v311) = v283 | 0x5000000000000;
                        *(_DWORD *)(v310 + 8000) = v311 + 1;
                        goto LABEL_409;
                      }
                      pas_thread_local_cache_append_deallocation_slow(v310, v283, (os_unfair_lock_s *)5, v285, v286, v287, v288, v289);
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache((unint64_t)v308 - 16, (uint64_t)&bmalloc_heap_config, 1);
                  }
                  v293 = v772;
                  v292 = v781;
LABEL_409:
                  v295 = *v294;
                }
                *v307 = v295;
                v312 = &v292[2 * v290];
                *v309 = 0;
                v313 = v312[1];
                v312[1] = 0;
                *v309 = v313;
                v314 = v312[1];
                if (v314)
                {
                  v283 = v314 - 16;
                  v315 = *(_QWORD *)(v293 + 752);
                  if (v315)
                  {
                    if (v283 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                           + (((unint64_t)(v314 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v314 - 16) >> 24)) & 1) == 0)
                    {
                      if (v283 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v283 >> 24)
                      {
                        v285 = 0;
                      }
                      else
                      {
                        v285 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + (((((unint64_t)(v314 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2
                                                  * ((((v314 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v285 == 1)
                          goto LABEL_414;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v315, v283, 1, v285, v286, v287, v288, v289);
                    }
                    else
                    {
LABEL_414:
                      v316 = *(unsigned int *)(v315 + 8000);
                      if (v316 < 0x3E7)
                      {
                        *(_QWORD *)(v315 + 8 * v316) = v283 | 0x5000000000000;
                        *(_DWORD *)(v315 + 8000) = v316 + 1;
                        goto LABEL_416;
                      }
                      pas_thread_local_cache_append_deallocation_slow(v315, v283, (os_unfair_lock_s *)5, v285, v286, v287, v288, v289);
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v314 - 16, (uint64_t)&bmalloc_heap_config, 1);
                  }
                  v293 = v772;
LABEL_416:
                  v292 = v781;
                }
                if (v294 == v272)
                  v291 = v307;
                goto LABEL_419;
              }
              v296 = v292[2 * v290 + 1];
              if (v296)
              {
                v283 = v296 - 16;
                v297 = *(_QWORD *)(v293 + 752);
                if (v297)
                {
                  if (v283 >> 43
                    || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                         + (((unint64_t)(v296 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v296 - 16) >> 24)) & 1) == 0)
                  {
                    if (v283 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v283 >> 24)
                    {
                      v285 = 0;
                    }
                    else
                    {
                      v285 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + (((((unint64_t)(v296 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2
                                                * ((((v296 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v285 == 1)
                        goto LABEL_396;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v297, v283, 1, v285, v286, v287, v288, v289);
                  }
                  else
                  {
LABEL_396:
                    v298 = *(unsigned int *)(v297 + 8000);
                    if (v298 < 0x3E7)
                    {
                      *(_QWORD *)(v297 + 8 * v298) = v283 | 0x5000000000000;
                      *(_DWORD *)(v297 + 8000) = v298 + 1;
                      goto LABEL_419;
                    }
                    pas_thread_local_cache_append_deallocation_slow(v297, v283, (os_unfair_lock_s *)5, v285, v286, v287, v288, v289);
                  }
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v296 - 16, (uint64_t)&bmalloc_heap_config, 1);
                }
                v293 = v772;
                v292 = v781;
              }
            }
LABEL_419:
            if (++v290 == v280)
              goto LABEL_446;
            continue;
          }
        }
        v291 = 0;
LABEL_446:
        WTF::fastFree(v788, (void *)v283, v284, v285, v286, v287, v288, v289);
        if (!v254)
        {
          v255 = v786;
          v258 = v778;
          v263 = v774;
          v270 = v792;
          goto LABEL_450;
        }
        v272 = v291;
        v255 = v786;
        v258 = v778;
        v263 = v774;
LABEL_448:
        v270 = v792;
LABEL_449:
        v291 = v272;
LABEL_450:
        v319 = (uint64_t)v291[1];
        v318 = (uint64_t *)(v291 + 1);
        v317 = v319;
        if (v319
          || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v318, 8uLL, 0, v200, v201, v202, v203, v204), (v317 = *v318) != 0))
        {
          v320 = *(_DWORD *)(v317 - 8);
        }
        else
        {
          v320 = 0;
        }
        v321 = v320 & v263;
        v199 = v317 + 8 * (v320 & v263);
        v322 = *(_QWORD *)v199;
        if (*(_QWORD *)v199)
        {
          v323 = 0;
          v324 = 1;
          while (v322 != v255)
          {
            if (v322 == -1)
              v323 = (_QWORD *)v199;
            v321 = (v321 + v324) & v320;
            v199 = v317 + 8 * v321;
            v322 = *(_QWORD *)v199;
            ++v324;
            if (!*(_QWORD *)v199)
            {
              if (v323)
              {
                *v323 = 0;
                --*(_DWORD *)(*v318 - 16);
                v199 = (uint64_t)v323;
              }
              goto LABEL_460;
            }
          }
          goto LABEL_466;
        }
LABEL_460:
        *(_QWORD *)v199 = v255;
        v325 = *v318;
        if (*v318)
          v326 = *(_DWORD *)(v325 - 12) + 1;
        else
          v326 = 1;
        *(_DWORD *)(v325 - 12) = v326;
        v327 = *v318;
        if (*v318)
          v328 = *(_DWORD *)(v327 - 12);
        else
          v328 = 0;
        v329 = (*(_DWORD *)(v327 - 16) + v328);
        v330 = *(unsigned int *)(v327 - 4);
        if (v330 > 0x400)
        {
          if (v330 > 2 * v329)
            goto LABEL_466;
LABEL_482:
          v335 = ((_DWORD)v330 << (6 * *(_DWORD *)(v327 - 12) >= (2 * v330)));
LABEL_480:
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v318, v335, v199, v200, v201, v202, v203, v204);
          goto LABEL_466;
        }
        if (3 * v330 <= 4 * v329)
        {
          if ((_DWORD)v330)
            goto LABEL_482;
          v335 = 8;
          goto LABEL_480;
        }
LABEL_466:
        if (!v1192)
          goto LABEL_1630;
        v331 = *(_DWORD *)(v1192 - 8);
        v332 = v331 & v270;
        v333 = *(WTF **)(v1192 + 8 * (v331 & v270));
        if (v333 != v264)
        {
          v334 = 1;
          while (v333)
          {
            v332 = (v332 + v334) & v331;
            v333 = *(WTF **)(v1192 + 8 * v332);
            ++v334;
            if (v333 == v264)
              goto LABEL_471;
          }
LABEL_1630:
          v1175 = v264;
          WTF::toCString<char [4],JSC::B3::BasicBlock,char [3],WTF::PointerDump<JSC::B3::BasicBlock>>(&v1172, (_DWORD *)v255, (uint64_t *)&v1175);
        }
LABEL_471:
        ++v259;
      }
      while (v259 != v258);
    }
    v251 = v766;
    if (v770 + 8 != v766)
    {
      v251 = v770 + 8;
      while ((unint64_t)(*(_QWORD *)v251 + 1) <= 1)
      {
        v251 += 8;
        if (v251 == v766)
        {
          v251 = v766;
          break;
        }
      }
    }
  }
  while (v251 != v764);
  if (!v254)
  {
LABEL_500:
    v339 = 1;
    goto LABEL_524;
  }
  if (!*((_DWORD *)v254 - 3))
    goto LABEL_523;
  v336 = *((unsigned int *)v254 - 1);
  v337 = v254;
  if ((_DWORD)v336)
  {
    v338 = 0;
    while ((unint64_t)(v254[v338] + 1) <= 1)
    {
      v338 += 2;
      if (2 * v336 == v338)
        goto LABEL_523;
    }
    v337 = &v254[v338];
  }
  v340 = &v254[2 * v336];
  if (v340 == v337)
  {
LABEL_523:
    v339 = 0;
  }
  else
  {
    v341 = *v337;
    while (1)
    {
      v342 = v337[1];
      v343 = v254;
      if (v342)
        v344 = *(unsigned int *)(v342 - 12);
      else
        v344 = 0;
      v345 = *(unsigned int *)(v341 + 36);
      if (v344 != v345)
        goto LABEL_1638;
      if ((_DWORD)v345)
      {
        if (v342)
        {
          v346 = *(uint64_t **)(v341 + 24);
          v347 = &v346[v344];
          v348 = *(_DWORD *)(v342 - 8);
          while (1)
          {
            v349 = *v346;
            v350 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*v346) & v348;
            v351 = *(_QWORD *)(v342 + 8 * v350);
            if (v351 != v349)
              break;
LABEL_514:
            if (++v346 == v347)
              goto LABEL_515;
          }
          v352 = 1;
          while (v351)
          {
            v350 = (v350 + v352) & v348;
            v351 = *(_QWORD *)(v342 + 8 * v350);
            ++v352;
            if (v351 == v349)
              goto LABEL_514;
          }
        }
LABEL_1638:
        WTF::toCString<char [4],JSC::B3::BasicBlock>(&v1171, (_DWORD *)v341);
      }
LABEL_515:
      v337 += 2;
      if (v337 == v340)
        break;
      v254 = v343;
      while (1)
      {
        v341 = *v337;
        if ((unint64_t)(*v337 + 1) > 1)
          break;
        v337 += 2;
        if (v337 == v340)
          goto LABEL_523;
      }
      if (v337 == v340)
        goto LABEL_523;
    }
    v339 = 0;
    v254 = v343;
  }
LABEL_524:
  v782 = v254;
  v353 = *this;
  v354 = *((unsigned int *)*this + 19);
  if ((_DWORD)v354)
  {
    v355 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v353 + 8) + 8 * v355))
    {
      if (v354 == ++v355)
        goto LABEL_530;
    }
    if ((_DWORD)v354 != (_DWORD)v355)
    {
      while (2)
      {
        v359 = *(_QWORD *)(*((_QWORD *)v353 + 8) + 8 * v355);
        for (m = (JSC::B3::Value **)JSC::B3::Value::children((JSC::B3::Value *)v359); m != v361; ++m)
        {
          if (!*((_DWORD *)*m + 4))
          {
            WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::Value>(&v1170, (JSC::B3::Value *)v359, *m);
          }
        }
        v362 = *(unsigned __int16 *)(v359 + 12);
        switch(*(_WORD *)(v359 + 12))
        {
          case 0u:
          case 0x51u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1169, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1168, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1167, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 1u:
          case 2u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1166, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1165, (JSC::B3::Value *)v359);
            }
            v399 = *(_DWORD *)(v359 + 16);
            if (v399 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1164, (JSC::B3::Value *)v359);
            }
            if (!*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1163, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 3u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1162, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1161, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1160, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 4u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1159, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1158, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1157, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 5u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1156, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1155, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1154, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 6u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1153, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1152, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1151, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 7u:
            if (!HIBYTE(dword_1ECF4C7B0))
            {
              __break(0xC471u);
              JUMPOUT(0x198014CC0);
            }
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1150, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1149, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1148, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 8u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1147, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1146, (JSC::B3::Value *)v359);
            }
            if ((*(_DWORD *)(v359 + 16) & 0x80000000) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1145, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 9u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1144, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1143, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != *(_DWORD *)(*(_QWORD *)(v359 + 40) + 4))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1142, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0xAu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1141, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1140, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != *(_DWORD *)(*(_QWORD *)(v359 + 40) + 4))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1139, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0xBu:
          case 0xDu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1138, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1137, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1136, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0xCu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1135, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1134, (JSC::B3::Value *)v359);
            }
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 0xC)
              v490 = v359;
            else
              v490 = 0;
            v491 = *(_BYTE *)(v490 + 40);
            v492 = *(_DWORD *)(v359 + 16);
            if ((v491 & 0x60) != 0)
            {
              if ((v492 & 0xFFFFFFFE) != 4)
                goto LABEL_1849;
            }
            else if (v492 != 2)
            {
LABEL_1849:
              WTF::toCString<char [4],JSC::B3::Value>(&v1133, (JSC::B3::Value *)v359);
            }
LABEL_1258:
            JSC::B3::Value::effects(v359, (uint64_t)&v1175);
            if ((_DWORD)v1176 != DWORD1(v1176))
            {
              JSC::B3::Value::key(v359, (uint64_t)v801);
              if (v801[0]
                || v801[1] != 159
                || (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)&v801[4], *(int32x4_t *)&v801[4]))) & 1) != 0
                || (v801[2] & 0xF) != 0
                || *(_DWORD *)&v801[20])
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v800, (JSC::B3::Value *)v359);
              }
            }
            JSC::B3::Value::effects(v359, (uint64_t)&v1175);
            if (BYTE1(v1175))
            {
              JSC::B3::Value::effects(v359, (uint64_t)v801);
              if (!*(_QWORD *)&v801[16])
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v799, (JSC::B3::Value *)v359);
              }
            }
            v355 = (v355 + 1);
            v560 = *((unsigned int *)v353 + 19);
            if (v560 > v355)
            {
              while (!*(_QWORD *)(*((_QWORD *)v353 + 8) + 8 * v355))
              {
                if (v560 == ++v355)
                {
                  LODWORD(v355) = *((_DWORD *)v353 + 19);
                  break;
                }
              }
            }
            if ((_DWORD)v354 != (_DWORD)v355)
              continue;
            v353 = *this;
            break;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
            if ((v362 & 0x200) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1132, (JSC::B3::Value *)v359);
            }
            if ((v362 | 2) == 0x13)
            {
              if ((v362 & 0x100) != 0)
              {
                if ((v362 | 2) != 0x13)
                {
                  WTF::toCString<char [4],JSC::B3::Value>(&v1131, (JSC::B3::Value *)v359);
                }
                v364 = *(_DWORD *)(v359 + 16);
                if (v364 >= 0x80000000)
                  v364 = 0x80000000;
                if (v364 - 1 >= 2)
                {
                  WTF::toCString<char [4],JSC::B3::Value>(&v1130, (JSC::B3::Value *)v359);
                }
              }
            }
            else if (((v362 >> 8) & 3) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1129, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1128, (JSC::B3::Value *)v359);
            }
            v381 = *(_DWORD *)(v359 + 16);
            if (v381 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1127, (JSC::B3::Value *)v359);
            }
            v382 = *(_DWORD *)(v359 + 16);
            if (v382 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1126, (JSC::B3::Value *)v359);
            }
            v383 = *(_DWORD *)(v359 + 16);
            if (v383 >= 0x80000000)
              v383 = 0x80000000;
            if (v383 - 1 >= 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1125, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x15u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1120, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1119, (JSC::B3::Value *)v359);
            }
            v516 = *(_DWORD *)(v359 + 16);
            if (v516 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1118, (JSC::B3::Value *)v359);
            }
            v517 = *(_DWORD *)(v359 + 16);
            if (v517 >= 0x80000000)
              v517 = 0x80000000;
            if (v517 - 1 >= 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1117, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1116, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1115, (JSC::B3::Value *)v359);
            }
            v375 = *(_DWORD *)(v359 + 16);
            if (v375 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1114, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1113, (JSC::B3::Value *)v359);
            }
            v376 = *(_DWORD *)(v359 + 16);
            if (v376 >= 0x80000000)
              v376 = 0x80000000;
            if (v376 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1112, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x1Eu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1099, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1098, (JSC::B3::Value *)v359);
            }
            v525 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v525 >= 0x80000000)
              v525 = 0x80000000;
            if (v525 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1097, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) >= 0x80000000)
              v526 = 0x80000000;
            else
              v526 = *(_DWORD *)(v359 + 16);
            if (v526 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1096, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1084, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1083, (JSC::B3::Value *)v359);
            }
            v379 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v379 >= 0x80000000)
              v379 = 0x80000000;
            if (v379 - 3 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1082, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) >= 0x80000000)
              v380 = 0x80000000;
            else
              v380 = *(_DWORD *)(v359 + 16);
            if (v380 - 3 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1081, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x23u:
          case 0x24u:
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1124, (JSC::B3::Value *)v359);
            }
            v400 = *(_DWORD *)(v359 + 16);
            if (v400 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1123, (JSC::B3::Value *)v359);
            }
            v401 = *(_DWORD *)(v359 + 16);
            if (v401 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1122, (JSC::B3::Value *)v359);
            }
            if ((*(_DWORD *)(v359 + 16) - 3) >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1121, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x25u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1111, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1110, (JSC::B3::Value *)v359);
            }
            v477 = *(_DWORD *)(v359 + 16);
            if (v477 == *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1109, (JSC::B3::Value *)v359);
            }
            v478 = *(_DWORD *)(v359 + 16);
            if (v478 != 2)
              goto LABEL_928;
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) == 4)
              goto LABEL_1258;
            v478 = *(_DWORD *)(v359 + 16);
LABEL_928:
            if (v478 != 4)
              goto LABEL_931;
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) == 2)
              goto LABEL_1258;
            v478 = *(_DWORD *)(v359 + 16);
LABEL_931:
            if (v478 != 3)
              goto LABEL_934;
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              v478 = *(_DWORD *)(v359 + 16);
LABEL_934:
              if (v478 != 1 || *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 3)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v1108, (JSC::B3::Value *)v359);
              }
            }
            goto LABEL_1258;
          case 0x26u:
          case 0x27u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1107, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1106, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1105, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1104, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1103, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1102, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1101, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1100, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x2Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1095, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1094, (JSC::B3::Value *)v359);
            }
            v440 = *(_DWORD *)(v359 + 16);
            if (v440 != 1)
              goto LABEL_858;
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              v440 = *(_DWORD *)(v359 + 16);
LABEL_858:
              if (v440 != 3 || *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 4)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v1093, (JSC::B3::Value *)v359);
              }
            }
            goto LABEL_1258;
          case 0x2Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1092, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1091, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1
              || *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1090, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x2Eu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1089, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1088, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1087, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1086, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1085, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x2Fu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1080, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1079, (JSC::B3::Value *)v359);
            }
            v518 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v518 >= 0x80000000)
              v518 = 0x80000000;
            if (v518 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1078, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1077, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x30u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1076, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1075, (JSC::B3::Value *)v359);
            }
            v524 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v524 >= 0x80000000)
              v524 = 0x80000000;
            if (v524 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1074, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1073, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x31u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1072, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1071, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1070, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1069, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x32u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1068, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1067, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1066, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1065, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1064, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1063, (JSC::B3::Value *)v359);
            }
            v366 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v366 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1062, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1061, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1060, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1059, (JSC::B3::Value *)v359);
            }
            v377 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v377 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1058, (JSC::B3::Value *)v359);
            }
            v378 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v378 >= 0x80000000)
              v378 = 0x80000000;
            if (v378 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1057, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1056, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x3Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1055, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1054, (JSC::B3::Value *)v359);
            }
            v532 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v532 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1053, (JSC::B3::Value *)v359);
            }
            v533 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v533 >= 0x80000000)
              v533 = 0x80000000;
            if (v533 - 3 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1052, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1051, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x3Eu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1050, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1049, (JSC::B3::Value *)v359);
            }
            v529 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v529 >= 0x80000000)
              v529 = 0x80000000;
            if (v529 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1048, (JSC::B3::Value *)v359);
            }
            v530 = *(_DWORD *)(v359 + 16);
            if (v530 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1047, (JSC::B3::Value *)v359);
            }
            v531 = *(_DWORD *)(v359 + 16);
            if (v531 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1046, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1045, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1044, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1043, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1042, (JSC::B3::Value *)v359);
            }
            goto LABEL_1033;
          case 0x43u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1041, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1040, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1039, (JSC::B3::Value *)v359);
            }
            v441 = *(_DWORD *)(v359 + 16);
            if (v441 >= 0x80000000)
              v441 = 0x80000000;
            if (v441 - 1 >= 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1038, (JSC::B3::Value *)v359);
            }
            goto LABEL_1033;
          case 0x44u:
          case 0x45u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1037, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1036, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1035, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1034, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1033, (JSC::B3::Value *)v359);
            }
            goto LABEL_1033;
          case 0x46u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1032, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1031, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1030, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1029, (JSC::B3::Value *)v359);
            }
LABEL_1033:
            v511 = *(unsigned __int8 *)(v359 + 12);
            if ((v511 - 63) >= 0x10)
              v512 = 0;
            else
              v512 = (JSC::B3::Value *)v359;
            if (*((_DWORD *)v512 + 13) != *((_DWORD *)v512 + 14))
            {
              if (JSC::B3::MemoryValue::accessBank(v512))
              {
                WTF::toCString<char [10],JSC::B3::MemoryValue>((uint64_t *)&v1175, v512);
              }
              v511 = *(unsigned __int8 *)(v359 + 12);
            }
            Child = JSC::B3::Value::lastChild((JSC::B3::Value *)v359);
            if (*(_QWORD *)Child)
              v514 = (*(_WORD *)(*(_QWORD *)Child + 12) & 0xFFF) == 11;
            else
              v514 = 0;
            if (!v514)
              goto LABEL_1258;
            v374 = v511 - 63;
            goto LABEL_1045;
          case 0x47u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1028, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1027, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1026, (JSC::B3::Value *)v359);
            }
            v540 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v540 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1025, (JSC::B3::Value *)v359);
            }
            v541 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v541 >= 0x80000000)
              v541 = 0x80000000;
            if (v541 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1024, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1023, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 71 >= 8)
              v369 = 0;
            else
              v369 = (char *)v359;
            v370 = v369[60];
            if (v370 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x198018BFCLL);
            }
            goto LABEL_584;
          case 0x48u:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1022, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1021, (JSC::B3::Value *)v359);
            }
            v421 = *(_DWORD *)(v359 + 16);
            if (v421 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1020, (JSC::B3::Value *)v359);
            }
            v422 = *(_DWORD *)(v359 + 16);
            if (v422 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1019, (JSC::B3::Value *)v359);
            }
            v423 = *(_DWORD *)(v359 + 16);
            if (v423 >= 0x80000000)
              v423 = 0x80000000;
            if (v423 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1018, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1017, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 71 >= 8)
              v369 = 0;
            else
              v369 = (char *)v359;
            v370 = v369[60];
            if (v370 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x198017CF4);
            }
            goto LABEL_584;
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
            if ((v362 & 0x100) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1016, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1015, (JSC::B3::Value *)v359);
            }
            v367 = *(_DWORD *)(v359 + 16);
            if (v367 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1014, (JSC::B3::Value *)v359);
            }
            v368 = *(_DWORD *)(v359 + 16);
            if (v368 >= 0x80000000)
              v368 = 0x80000000;
            if (v368 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1013, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1012, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 71 >= 8)
              v369 = 0;
            else
              v369 = (char *)v359;
            v370 = v369[60];
            if (v370 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x198015398);
            }
LABEL_584:
            v371 = dword_19914FDE0[v370];
            if (v371 != *(_DWORD *)(JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v369, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>((uint64_t *)&v1175, (JSC::B3::Value *)v359);
            }
            v372 = *(_WORD *)(v359 + 12);
            v373 = JSC::B3::Value::lastChild((JSC::B3::Value *)v359);
            if (!*(_QWORD *)v373 || (*(_WORD *)(*(_QWORD *)v373 + 12) & 0xFFF) != 0xB)
              goto LABEL_1258;
            v374 = v372 - 63;
LABEL_1045:
            if (v374 >= 0x10)
              v515 = 0;
            else
              v515 = v359;
            if ((*(_DWORD *)(v515 + 40) & 0x80000000) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>((uint64_t *)&v1175, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x4Fu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1011, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1010, (JSC::B3::Value *)v359);
            }
            v509 = *(_DWORD *)(v359 + 16);
            if (v509 != *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1009, (JSC::B3::Value *)v359);
            }
            v510 = *(_DWORD *)(v359 + 16);
            if (v510 >= 0x80000000)
              v510 = 0x80000000;
            if (v510 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1008, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x50u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1007, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1006, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1005, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1004, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x52u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v869, (JSC::B3::Value *)v359);
            }
            if (!JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v868, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v867, (JSC::B3::Value *)v359);
            }
            v519 = *(_DWORD *)(v359 + 16);
            if (v519 < 0)
            {
              v520 = v519 & 0x7FFFFFFF;
              if (v520 >= *((_DWORD *)*this + 11))
              {
                __break(0xC471u);
                JUMPOUT(0x198018F80);
              }
              v521 = *((_QWORD *)*this + 4);
              if (*(_DWORD *)(v521 + 16 * v520 + 12) != 2)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v866, (JSC::B3::Value *)v359);
              }
              v522 = *(unsigned int **)(v521 + 16 * v520);
              v523 = *v522;
              if (*v522 >= 0x80000000)
                v523 = 0x80000000;
              if (v523 - 1 >= 2)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v865, (JSC::B3::Value *)v359);
              }
              if (v522[1] != 2)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v864, (JSC::B3::Value *)v359);
              }
            }
            goto LABEL_1258;
          case 0x53u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v863, (JSC::B3::Value *)v359);
            }
            v436 = *(_DWORD *)(v359 + 16);
            if (v436)
            {
              if (v436 >= 0x80000000)
                v437 = 0x80000000;
              else
                v437 = *(_DWORD *)(v359 + 16);
              if (v437 > 5)
              {
                v552 = v436 & 0x7FFFFFFF;
                if (v552 >= *((_DWORD *)*this + 11))
                {
                  WTF::toCString<char [4],JSC::B3::Value>(&v859, (JSC::B3::Value *)v359);
                }
                if (*(_WORD *)(v359 + 12) == 83)
                  v553 = v359;
                else
                  v553 = 0;
                v554 = *(_DWORD *)(v553 + 148);
                if (v554 != *(_DWORD *)(*((_QWORD *)*this + 4) + 16 * v552 + 12))
                {
                  WTF::toCString<char [4],JSC::B3::Value>(&v858, (JSC::B3::Value *)v359);
                }
                if (v554)
                {
                  v555 = 0;
                  v556 = 0;
                  do
                  {
                    if (v362 == 83)
                      v557 = v359;
                    else
                      v557 = 0;
                    if (v556 >= *(unsigned int *)(v557 + 148))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198018F88);
                    }
                    v558 = *(_QWORD *)(v557 + 136);
                    v1175 = (WTF *)v359;
                    v1176 = *(_OWORD *)(v558 + v555);
                    v362 = *(unsigned __int8 *)(v359 + 12);
                    if (v362 == 83)
                      v559 = v359;
                    else
                      v559 = 0;
                    v555 += 16;
                  }
                  while (v556 < *(unsigned int *)(v559 + 148));
                }
              }
              else
              {
                if (*(_WORD *)(v359 + 12) == 83)
                  v438 = v359;
                else
                  v438 = 0;
                if (*(_DWORD *)(v438 + 148) != 1)
                {
                  WTF::toCString<char [4],JSC::B3::Value>(&v860, (JSC::B3::Value *)v359);
                }
                v439 = *(__int128 **)(v438 + 136);
                v1175 = (WTF *)v359;
                v1176 = *v439;
              }
            }
            else
            {
              if (*(_WORD *)(v359 + 12) == 83)
                v550 = v359;
              else
                v550 = 0;
              if (*(_DWORD *)(v550 + 148) != 1)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v862, (JSC::B3::Value *)v359);
              }
              v551 = *(unsigned __int8 **)(v550 + 136);
              v1175 = 0;
              LOBYTE(v1176) = 0;
              if ((JSC::B3::ValueRep::operator==(v551, (unsigned __int8 *)&v1175) & 1) == 0)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v861, (JSC::B3::Value *)v359);
              }
            }
            goto LABEL_1257;
          case 0x54u:
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v857, (JSC::B3::Value *)v359);
            }
            if ((*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) & 0x80000000) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v856, (JSC::B3::Value *)v359);
            }
            v431 = *(_DWORD *)(v359 + 16);
            if (v431 >= 0x80000000)
              v431 = 0x80000000;
            if (v431 - 1 >= 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v855, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x55u:
          case 0x56u:
          case 0x57u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v854, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) <= 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v853, (JSC::B3::Value *)v359);
            }
            v384 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v384 >= 0x80000000)
              v384 = 0x80000000;
            if (v384 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v852, (JSC::B3::Value *)v359);
            }
            v385 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16);
            if (v385 >= 0x80000000)
              v385 = 0x80000000;
            if (v385 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v851, (JSC::B3::Value *)v359);
            }
            v386 = *(unsigned __int8 *)(v359 + 12) - 83;
            if (v386 > 5 || v386 == 1)
              v388 = 0;
            else
              v388 = v359;
            JSC::B3::StackmapValue::constrainedChild(v388, 0, (uint64_t)&v1175);
            *(_QWORD *)v801 = 0;
            v801[8] = 0;
            if ((JSC::B3::ValueRep::operator==((unsigned __int8 *)&v1176, v801) & 1) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v850, (JSC::B3::Value *)v359);
            }
            v389 = *(unsigned __int8 *)(v359 + 12) - 83;
            if (v389 > 5 || v389 == 1)
              v391 = 0;
            else
              v391 = v359;
            JSC::B3::StackmapValue::constrainedChild(v391, 1u, (uint64_t)&v1175);
            *(_QWORD *)v801 = 0;
            v801[8] = 0;
            if ((JSC::B3::ValueRep::operator==((unsigned __int8 *)&v1176, v801) & 1) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v849, (JSC::B3::Value *)v359);
            }
            goto LABEL_1257;
          case 0x58u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v848, (JSC::B3::Value *)v359);
            }
            if (!JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v847, (JSC::B3::Value *)v359);
            }
            v493 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v493 >= 0x80000000)
              v493 = 0x80000000;
            if (v493 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v846, (JSC::B3::Value *)v359);
            }
            v494 = *(unsigned __int8 *)(v359 + 12) - 83;
            if (v494 > 5 || v494 == 1)
              v496 = 0;
            else
              v496 = v359;
            JSC::B3::StackmapValue::constrainedChild(v496, 0, (uint64_t)&v1175);
            *(_QWORD *)v801 = 0;
            v801[8] = 0;
            if ((JSC::B3::ValueRep::operator==((unsigned __int8 *)&v1176, v801) & 1) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v845, (JSC::B3::Value *)v359);
            }
LABEL_1257:
            goto LABEL_1258;
          case 0x59u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v844, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v843, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v842, (JSC::B3::Value *)v359);
            }
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 0x59)
              v417 = v359;
            else
              v417 = 0;
            v418 = *((_QWORD *)*this + 20);
            if (*(_DWORD *)(v417 + 44))
              goto LABEL_1289;
            v419 = *(_QWORD *)(v418 + 48);
            if (v419)
            {
              v420 = 0;
              do
              {
                v420 |= v419 & -v419;
                v419 &= v419 - 1;
              }
              while (v419);
            }
            else
            {
              v420 = 0;
            }
            v561 = *(_QWORD *)(v417 + 48) & 0x7FLL;
            if (v561 >= 0x40)
              goto LABEL_1653;
            if (((v420 >> v561) & 1) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v841, (JSC::B3::Value *)v359);
            }
LABEL_1289:
            v562 = *(unsigned int **)(v418 + 296);
            if (!v562)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v840, (JSC::B3::Value *)v359);
            }
            v563 = v562 + 2;
            do
              v564 = __ldaxr(v563);
            while (__stlxr(v564 + 1, v563));
            do
            {
              v565 = __ldaxr(v563);
              v566 = v565 - 1;
            }
            while (__stlxr(v566, v563));
            if (!v566)
            {
              atomic_store(1u, v562 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v562 + 8))(v562);
            }
            goto LABEL_1258;
          case 0x5Au:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1003, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1002, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v414 = 0;
            else
              v414 = v359;
            v416 = -2;
            switch(*(_BYTE *)(v414 + 40) & 0x3F)
            {
              case 0:
                __break(0xC471u);
                JUMPOUT(0x198018F08);
              case 1:
              case 2:
              case 3:
                v416 = -1;
                break;
              case 4:
                break;
              case 5:
                v416 = -3;
                break;
              case 6:
                v416 = -4;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198018EE8);
            }
            v415 = *(_DWORD *)(v359 + 16);
            if (v415 != JSC::Wasm::toB3Type(v416))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1001, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v1000, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x5Bu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v999, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v998, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v997, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v996, (JSC::B3::Value *)v359);
            }
            v432 = JSC::B3::Value::child((JSC::B3::Value *)v359, 1u);
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v433 = 0;
            else
              v433 = v359;
            v434 = *(_DWORD *)(*(_QWORD *)v432 + 16);
            v435 = -2;
            switch(*(_BYTE *)(v433 + 40) & 0x3F)
            {
              case 0:
                __break(0xC471u);
                JUMPOUT(0x198018EC8);
              case 1:
              case 2:
              case 3:
                v435 = -1;
                break;
              case 4:
                break;
              case 5:
                v435 = -3;
                break;
              case 6:
                v435 = -4;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198018F28);
            }
            if (v434 != JSC::Wasm::toB3Type(v435))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v995, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x5Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v994, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v993, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v992, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v991, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v527 = 0;
            else
              v527 = v359;
            v528 = *(_BYTE *)(v527 + 40) & 0x3F;
            if (v528 >= 7)
            {
              __break(0xC471u);
              JUMPOUT(0x198017F24);
            }
            if (0x10 / ((0x8040804020110uLL >> (8 * v528)) & 0x1F) <= *(unsigned __int8 *)(v527 + 41))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v990, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x5Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v985, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v984, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v983, (JSC::B3::Value *)v359);
            }
            v479 = JSC::B3::Value::child((JSC::B3::Value *)v359, 0);
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v480 = 0;
            else
              v480 = v359;
            v481 = *(_DWORD *)(*(_QWORD *)v479 + 16);
            v482 = -2;
            switch(*(_BYTE *)(v480 + 40) & 0x3F)
            {
              case 0:
                __break(0xC471u);
                JUMPOUT(0x198018F68);
              case 1:
              case 2:
              case 3:
                v482 = -1;
                break;
              case 4:
                break;
              case 5:
                v482 = -3;
                break;
              case 6:
                v482 = -4;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198018F48);
            }
            if (v481 != JSC::Wasm::toB3Type(v482))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v982, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x8Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v922, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v921, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v920, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v919, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v918, (JSC::B3::Value *)v359);
            }
            v363 = *(unsigned __int8 *)(v359 + 12);
            if (v363 == 109)
            {
              if ((*(_BYTE *)(v359 + 40) & 0x3F) != 3)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v916, (JSC::B3::Value *)v359);
              }
            }
            else if (v363 == 140 && (*(_BYTE *)(v359 + 40) & 0x3Fu) - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v917, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x6Eu:
          case 0x71u:
          case 0x72u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v904, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v903, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v902, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v901, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v900, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v394 = 0;
            else
              v394 = v359;
            if ((*(_BYTE *)(v394 + 40) & 0x3Fu) - 5 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v899, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x6Fu:
          case 0x70u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v909, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v908, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v907, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v906, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v905, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x73u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v898, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v897, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v896, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v895, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v894, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v448 = 0;
            else
              v448 = v359;
            v449 = *(unsigned __int8 *)(v448 + 40);
            if ((v449 & 0x3F) - 1 >= 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v893, (JSC::B3::Value *)v359);
            }
            if (v449 <= 0x3F)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v892, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x74u:
          case 0x7Bu:
          case 0x7Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v989, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v988, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v987, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v986, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x79u:
          case 0x7Au:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v915, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v914, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v913, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v912, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v911, (JSC::B3::Value *)v359);
            }
            if (*(_BYTE *)(v359 + 12) == 122 && *(unsigned __int8 *)(v359 + 40) <= 0x3Fu)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v910, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x7Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v981, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v980, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v979, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v978, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v537 = 0;
            else
              v537 = v359;
            if ((*(_BYTE *)(v537 + 40) & 0x3F) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v977, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x84u:
          case 0x85u:
          case 0x93u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v946, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v945, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v944, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v943, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v365 = 0;
            else
              v365 = v359;
            if ((*(_BYTE *)(v365 + 40) & 0x3Fu) - 5 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v942, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x82u:
          case 0x83u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v941, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v940, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v939, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v938, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v402 = 0;
            else
              v402 = v359;
            v403 = *(_BYTE *)(v402 + 40) & 0x3F;
            if (v403 - 1 >= 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v937, (JSC::B3::Value *)v359);
            }
            if (v403 != 3)
            {
              v759 = v403 > 4;
              v760 = (1 << v403) & 0x16;
              if (!v759 && v760 != 0)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v936, (JSC::B3::Value *)v359);
              }
              __break(0xC471u);
              JUMPOUT(0x198015C7CLL);
            }
            goto LABEL_1258;
          case 0x86u:
          case 0x87u:
          case 0x8Fu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v935, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v934, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v933, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5
              && *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v932, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v395 = 0;
            else
              v395 = v359;
            v396 = *(unsigned __int8 *)(v395 + 40);
            if ((v396 & 0x3F) - 1 >= 4)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v931, (JSC::B3::Value *)v359);
            }
            if (v396 <= 0x3F)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v930, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x88u:
          case 0x89u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v929, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v928, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v927, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v926, (JSC::B3::Value *)v359);
            }
            v404 = *(unsigned __int8 *)(v359 + 12);
            if ((v404 - 90) >= 0x3E)
              v405 = 0;
            else
              v405 = v359;
            v406 = *(_BYTE *)(v405 + 40) & 0x3F;
            if ((v406 - 5) >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v925, (JSC::B3::Value *)v359);
            }
            if (v404 == 136)
            {
              if (v406 != 5)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v924, (JSC::B3::Value *)v359);
              }
            }
            else if (v406 != 6)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v923, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x8Au:
          case 0x8Bu:
          case 0x8Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v952, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v951, (JSC::B3::Value *)v359);
            }
            v392 = *(_DWORD *)(v359 + 16);
            if (v392 >= 0x80000000)
              v392 = 0x80000000;
            if (v392 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v950, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v949, (JSC::B3::Value *)v359);
            }
            v393 = *(unsigned __int8 *)(v359 + 12);
            if (v393 == 138)
            {
              if ((*(_BYTE *)(v359 + 40) & 0x3F) != 0)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v948, (JSC::B3::Value *)v359);
              }
            }
            else
            {
              if ((v393 - 90) >= 0x3E)
                v407 = 0;
              else
                v407 = v359;
              if ((*(_BYTE *)(v407 + 40) & 0x3Fu) - 1 >= 4)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v947, (JSC::B3::Value *)v359);
              }
            }
            goto LABEL_1258;
          case 0x8Eu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v891, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v890, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v889, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v888, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v887, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v886, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v538 = 0;
            else
              v538 = v359;
            v539 = *(unsigned __int8 *)(v538 + 40);
            if ((v539 & 0x3F) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v885, (JSC::B3::Value *)v359);
            }
            if (v539 >= 0x40)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v884, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x90u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v976, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v975, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v974, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v973, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v972, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v542 = 0;
            else
              v542 = v359;
            if ((*(_BYTE *)(v542 + 40) & 0x3F) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v971, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x91u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v970, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2
              && JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v969, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v968, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v967, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v966, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2
              && *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v965, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v549 = 0;
            else
              v549 = v359;
            if ((*(_BYTE *)(v549 + 40) & 0x3F) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v964, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x92u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v883, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v882, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v881, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v880, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v879, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v430 = 0;
            else
              v430 = v359;
            if ((*(_BYTE *)(v430 + 40) & 0x3F) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v878, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x94u:
          case 0x95u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v877, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 3)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v876, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v875, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v874, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v873, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 2u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v872, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v397 = 0;
            else
              v397 = v359;
            v398 = *(unsigned __int8 *)(v397 + 40);
            if ((v398 & 0x3F) - 5 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v871, (JSC::B3::Value *)v359);
            }
            if (v398 >= 0x40)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v870, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x96u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v963, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v962, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v961, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v960, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v359 + 12) - 90 >= 0x3E)
              v534 = 0;
            else
              v534 = v359;
            v535 = *(_BYTE *)(v534 + 40) & 0x3F;
            if (v535 == 5)
            {
              v536 = 4;
            }
            else
            {
              if (v535 != 6)
              {
                WTF::toCString<char [4],JSC::B3::Value>(&v959, (JSC::B3::Value *)v359);
              }
              v536 = 8;
            }
            if (0x10 / v536 <= *(unsigned __int8 *)(v534 + 41))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v958, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x97u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v957, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v956, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v955, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v954, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 1u) + 16) != 5)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v953, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x98u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v839, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v838, (JSC::B3::Value *)v359);
            }
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 0x98)
              v497 = v359;
            else
              v497 = 0;
            v498 = *(_QWORD *)(v497 + 40);
            if (!v498)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v837, (JSC::B3::Value *)v359);
            }
            if (*(unsigned __int8 *)(v498 + 12) != 153)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v836, (JSC::B3::Value *)v359);
            }
            if (!*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v835, (JSC::B3::Value *)v359);
            }
            v499 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 0x98)
              v500 = v359;
            else
              v500 = 0;
            v501 = *(_QWORD *)(v500 + 40);
            if (v499 != *(_DWORD *)(v501 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v834, (JSC::B3::Value *)v359);
            }
            if (!v1191)
              goto LABEL_1631;
            v502 = *((_DWORD *)v1191 - 2);
            v503 = (~(v501 << 32) + v501) ^ ((unint64_t)(~(v501 << 32) + v501) >> 22);
            v504 = 9 * ((v503 + ~(v503 << 13)) ^ ((v503 + ~(v503 << 13)) >> 8));
            v505 = (v504 ^ (v504 >> 15)) + ~((v504 ^ (v504 >> 15)) << 27);
            v506 = v502 & ((v505 >> 31) ^ v505);
            v507 = v1191[v506];
            if (v507 != v501)
            {
              v508 = 1;
              do
              {
                if (!v507)
                {
LABEL_1631:
                  WTF::toCString<char [4],JSC::B3::Value>(&v833, (JSC::B3::Value *)v359);
                }
                v506 = (v506 + v508) & v502;
                v507 = v1191[v506];
                ++v508;
              }
              while (v507 != v501);
            }
            goto LABEL_1258;
          case 0x99u:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v832, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v831, (JSC::B3::Value *)v359);
            }
            if (!*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v830, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x9Au:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v829, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v828, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v827, (JSC::B3::Value *)v359);
            }
            v543 = *(_DWORD *)(v777 - 8);
            v544 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v545 = 9 * ((v544 + ~(v544 << 13)) ^ ((v544 + ~(v544 << 13)) >> 8));
            v546 = (v545 ^ (v545 >> 15)) + ~((v545 ^ (v545 >> 15)) << 27);
            v547 = v543 & ((v546 >> 31) ^ v546);
            if (*(_QWORD *)(v777 + 16 * v547) != v359)
            {
              v548 = 1;
              do
                v547 = ((_DWORD)v547 + v548++) & v543;
              while (*(_QWORD *)(v777 + 16 * v547) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v547 + 8) + 68) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v826, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x9Bu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v817, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v816, (JSC::B3::Value *)v359);
            }
            v483 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v483 >= 0x80000000)
              v483 = 0x80000000;
            if (v483 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v815, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v814, (JSC::B3::Value *)v359);
            }
            v484 = *(_DWORD *)(v777 - 8);
            v485 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v486 = 9 * ((v485 + ~(v485 << 13)) ^ ((v485 + ~(v485 << 13)) >> 8));
            v487 = (v486 ^ (v486 >> 15)) + ~((v486 ^ (v486 >> 15)) << 27);
            v488 = v484 & ((v487 >> 31) ^ v487);
            if (*(_QWORD *)(v777 + 16 * v488) != v359)
            {
              v489 = 1;
              do
                v488 = ((_DWORD)v488 + v489++) & v484;
              while (*(_QWORD *)(v777 + 16 * v488) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v488 + 8) + 68) != 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v813, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x9Cu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v812, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) != 1)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v811, (JSC::B3::Value *)v359);
            }
            v450 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v359, 0) + 16);
            if (v450 >= 0x80000000)
              v450 = 0x80000000;
            if (v450 - 1 >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v810, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v809, (JSC::B3::Value *)v359);
            }
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 0x9C)
              v451 = v359;
            else
              v451 = 0;
            v452 = *(_DWORD *)(v777 - 8);
            v453 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v454 = 9 * ((v453 + ~(v453 << 13)) ^ ((v453 + ~(v453 << 13)) >> 8));
            v455 = (v454 ^ (v454 >> 15)) + ~((v454 ^ (v454 >> 15)) << 27);
            v456 = v452 & ((v455 >> 31) ^ v455);
            v457 = *(_QWORD *)(v777 + 16 * v456);
            v458 = v456;
            if (v457 != v359)
            {
              v459 = 1;
              LODWORD(v458) = v456;
              do
                v458 = ((_DWORD)v458 + v459++) & v452;
              while (*(_QWORD *)(v777 + 16 * v458) != v359);
            }
            v460 = v339;
            v461 = *(_DWORD *)(*(_QWORD *)(v777 + 16 * v458 + 8) + 68);
            v462 = *(unsigned int *)(v451 + 52);
            v463 = v462 + 1;
            if (v461 != (_DWORD)v462 && v463 != v461)
            {
              __break(0xC471u);
              JUMPOUT(0x198014CA0);
            }
            if (v463 != v461)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v808, (JSC::B3::Value *)v359);
            }
            if (v457 != v359)
            {
              v465 = 1;
              do
                v456 = ((_DWORD)v456 + v465++) & v452;
              while (*(_QWORD *)(v777 + 16 * v456) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v456 + 8) + 68) != v461)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v807, (JSC::B3::Value *)v359);
            }
            if ((_DWORD)v462)
            {
              if (v462 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198018F78);
              }
              v466 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v462));
              memcpy(v466, *(const void **)(v451 + 40), 8 * *(unsigned int *)(v451 + 52));
              std::__sort<std::__less<long long,long long> &,long long *>();
              if (v462 >= 2)
              {
                v468 = v466 + 1;
                v474 = *v466;
                v475 = v462 - 1;
                do
                {
                  v476 = *v468;
                  if (v474 == *v468)
                  {
                    WTF::toCString<char [4],JSC::B3::Value,char [15],long long>(&v806, (JSC::B3::Value *)v359, v468);
                  }
                  ++v468;
                  v474 = v476;
                  --v475;
                }
                while (v475);
              }
              WTF::fastFree((unint64_t)v466, v467, (uint64_t)v468, v469, v470, v471, v472, v473);
            }
            else
            {
              std::__sort<std::__less<long long,long long> &,long long *>();
            }
            v339 = v460;
            goto LABEL_1258;
          case 0x9Du:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v805, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v804, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v803, (JSC::B3::Value *)v359);
            }
            v424 = *(_DWORD *)(v777 - 8);
            v425 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v426 = 9 * ((v425 + ~(v425 << 13)) ^ ((v425 + ~(v425 << 13)) >> 8));
            v427 = (v426 ^ (v426 >> 15)) + ~((v426 ^ (v426 >> 15)) << 27);
            v428 = v424 & ((v427 >> 31) ^ v427);
            if (*(_QWORD *)(v777 + 16 * v428) != v359)
            {
              v429 = 1;
              do
                v428 = ((_DWORD)v428 + v429++) & v424;
              while (*(_QWORD *)(v777 + 16 * v428) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v428 + 8) + 68) != *((_DWORD *)*this + 50))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v802, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x9Eu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v821, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359) >= 2)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v820, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v819, (JSC::B3::Value *)v359);
            }
            v408 = *(_DWORD *)(v777 - 8);
            v409 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v410 = 9 * ((v409 + ~(v409 << 13)) ^ ((v409 + ~(v409 << 13)) >> 8));
            v411 = (v410 ^ (v410 >> 15)) + ~((v410 ^ (v410 >> 15)) << 27);
            v412 = v408 & ((v411 >> 31) ^ v411);
            if (*(_QWORD *)(v777 + 16 * v412) != v359)
            {
              v413 = 1;
              do
                v412 = ((_DWORD)v412 + v413++) & v408;
              while (*(_QWORD *)(v777 + 16 * v412) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v412 + 8) + 68))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v818, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          case 0x9Fu:
            if ((v362 & 0x300) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v825, (JSC::B3::Value *)v359);
            }
            if (JSC::B3::Value::numChildren((JSC::B3::Value *)v359))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v824, (JSC::B3::Value *)v359);
            }
            if (*(_DWORD *)(v359 + 16))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v823, (JSC::B3::Value *)v359);
            }
            v442 = *(_DWORD *)(v777 - 8);
            v443 = (~(v359 << 32) + v359) ^ ((unint64_t)(~(v359 << 32) + v359) >> 22);
            v444 = 9 * ((v443 + ~(v443 << 13)) ^ ((v443 + ~(v443 << 13)) >> 8));
            v445 = (v444 ^ (v444 >> 15)) + ~((v444 ^ (v444 >> 15)) << 27);
            v446 = v442 & ((v445 >> 31) ^ v445);
            if (*(_QWORD *)(v777 + 16 * v446) != v359)
            {
              v447 = 1;
              do
                v446 = ((_DWORD)v446 + v447++) & v442;
              while (*(_QWORD *)(v777 + 16 * v446) != v359);
            }
            if (*(_DWORD *)(*(_QWORD *)(v777 + 16 * v446 + 8) + 68))
            {
              WTF::toCString<char [4],JSC::B3::Value>(&v822, (JSC::B3::Value *)v359);
            }
            goto LABEL_1258;
          default:
            goto LABEL_1258;
        }
        break;
      }
    }
  }
LABEL_530:
  v356 = *((unsigned int *)v353 + 3);
  if ((_DWORD)v356)
  {
    v357 = 0;
    v358 = *(_QWORD *)v353;
    while (!*(_QWORD *)(v358 + 8 * v357))
    {
      if (v356 == ++v357)
        goto LABEL_1299;
    }
    while ((_DWORD)v356 != (_DWORD)v357)
    {
      v191 = *(_QWORD *)(v358 + 8 * v357);
      if (!*(_DWORD *)(v191 + 4))
      {
        WTF::toCString<char [4],JSC::B3::Variable>(&v798, (_DWORD *)v191);
      }
      v357 = (v357 + 1);
      if (v356 > v357)
      {
        while (!*(_QWORD *)(v358 + 8 * v357))
        {
          if (v356 == ++v357)
            goto LABEL_1299;
        }
      }
    }
  }
LABEL_1299:
  v767 = v339;
  v567 = *((unsigned int *)v353 + 15);
  if (!(_DWORD)v567)
  {
    v762 = 0;
    v590 = 0;
    *(_QWORD *)v801 = 0x8000000000000000;
    goto LABEL_1351;
  }
  v568 = 0;
  while (2)
  {
    if (*(_QWORD *)(*((_QWORD *)v353 + 6) + 8 * v568))
    {
      if ((_DWORD)v567 == (_DWORD)v568)
        break;
      LODWORD(v569) = *((_DWORD *)v353 + 15);
      while (1)
      {
        if (v569 <= v568)
        {
          __break(0xC471u);
          JUMPOUT(0x198018D14);
        }
        v570 = *(_QWORD *)(*((_QWORD *)v353 + 6) + 8 * v568);
        v1175 = 0;
        v571 = *(unsigned int *)(v570 + 36);
        if (!(_DWORD)v571)
          goto LABEL_1339;
        v572 = *(uint64_t **)(v570 + 24);
        v573 = &v572[v571];
        do
        {
          v574 = *v572;
          v575 = v1175;
          if (v1175
            || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash((uint64_t *)&v1175, 8uLL, 0, v200, v201, v202, v203, v204), (v575 = v1175) != 0))
          {
            v576 = *((_DWORD *)v575 - 2);
          }
          else
          {
            v576 = 0;
          }
          v577 = (~(v574 << 32) + v574) ^ ((unint64_t)(~(v574 << 32) + v574) >> 22);
          v578 = 9 * ((v577 + ~(v577 << 13)) ^ ((v577 + ~(v577 << 13)) >> 8));
          v579 = (v578 ^ (v578 >> 15)) + ~((v578 ^ (v578 >> 15)) << 27);
          v580 = v576 & ((v579 >> 31) ^ v579);
          v199 = (uint64_t)v575 + 8 * v580;
          v581 = *(_QWORD *)v199;
          if (*(_QWORD *)v199)
          {
            v582 = 0;
            v583 = 1;
            while (v581 != v574)
            {
              if (v581 == -1)
                v582 = (_QWORD *)v199;
              v580 = (v580 + v583) & v576;
              v199 = (uint64_t)v575 + 8 * v580;
              v581 = *(_QWORD *)v199;
              ++v583;
              if (!*(_QWORD *)v199)
              {
                if (v582)
                {
                  *v582 = 0;
                  --*((_DWORD *)v1175 - 4);
                  v199 = (uint64_t)v582;
                }
                goto LABEL_1319;
              }
            }
          }
          else
          {
LABEL_1319:
            *(_QWORD *)v199 = v574;
            if (v1175)
              v584 = *((_DWORD *)v1175 - 3) + 1;
            else
              v584 = 1;
            *((_DWORD *)v1175 - 3) = v584;
            if (v1175)
              v585 = *((_DWORD *)v1175 - 3);
            else
              v585 = 0;
            v586 = (*((_DWORD *)v1175 - 4) + v585);
            v587 = *((unsigned int *)v1175 - 1);
            if (v587 <= 0x400)
            {
              if (3 * v587 > 4 * v586)
                goto LABEL_1325;
              if ((_DWORD)v587)
LABEL_1333:
                v588 = ((_DWORD)v587 << (6 * *((_DWORD *)v1175 - 3) >= (2 * v587)));
              else
                v588 = 8;
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash((uint64_t *)&v1175, v588, v199, v200, v201, v202, v203, v204);
              goto LABEL_1325;
            }
            if (v587 <= 2 * v586)
              goto LABEL_1333;
          }
LABEL_1325:
          ++v572;
        }
        while (v572 != v573);
        v589 = *(_DWORD *)(v570 + 36);
        if (v1175)
        {
          if (v589 == *((_DWORD *)v1175 - 3))
          {
            WTF::fastFree((unint64_t)v1175 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
            goto LABEL_1339;
          }
LABEL_1346:
          WTF::toCString<char [4],JSC::B3::BasicBlock>(&v797, (_DWORD *)v570);
        }
        if (v589)
          goto LABEL_1346;
LABEL_1339:
        v568 = (v568 + 1);
        v569 = *((unsigned int *)v353 + 15);
        if (v569 > v568)
        {
          while (!*(_QWORD *)(*((_QWORD *)v353 + 6) + 8 * v568))
          {
            if (v569 == ++v568)
            {
              LODWORD(v568) = *((_DWORD *)v353 + 15);
              break;
            }
          }
        }
        if ((_DWORD)v567 == (_DWORD)v568)
        {
          v353 = *this;
          v567 = *((unsigned int *)*this + 15);
          goto LABEL_1347;
        }
      }
    }
    if (v567 != ++v568)
      continue;
    break;
  }
LABEL_1347:
  *(_QWORD *)v801 = 0x8000000000000000;
  if ((_DWORD)v567)
  {
    if (v567 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198018F90);
    }
    v762 = v567;
    v590 = (void *)WTF::fastMalloc((WTF *)(8 * v567));
    bzero(v590, 8 * v567);
    v765 = 0;
    v353 = *this;
    goto LABEL_1352;
  }
  v762 = 0;
  v590 = 0;
LABEL_1351:
  v765 = 1;
LABEL_1352:
  v591 = *((unsigned int *)v353 + 15);
  if (!(_DWORD)v591)
    goto LABEL_1358;
  v592 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v353 + 6) + 8 * v592))
  {
    if (v591 == ++v592)
      goto LABEL_1358;
  }
  if ((_DWORD)v591 == (_DWORD)v592)
    goto LABEL_1358;
  v751 = v592;
  v752 = *((unsigned int *)v353 + 15);
  do
  {
    if (v752 <= v751)
    {
      __break(0xC471u);
      JUMPOUT(0x198018D1CLL);
    }
    v753 = *(_QWORD *)v801;
    if ((*(_QWORD *)v801 & 0x8000000000000000) != 0)
      v754 = 63;
    else
      v754 = *(_QWORD *)(2 * *(_QWORD *)v801);
    v755 = **(unsigned int **)(*((_QWORD *)v353 + 6) + 8 * v751);
    if (v754 <= v755)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v801, v755 + 1, 0);
      v753 = *(_QWORD *)v801;
      v752 = *((unsigned int *)v353 + 15);
    }
    if (v753 >= 0)
      v756 = (_BYTE *)(2 * v753 + 8);
    else
      v756 = v801;
    *(_QWORD *)&v756[(v755 >> 3) & 0x1FFFFFF8] |= 1 << v755;
    if (v752 > ++v751)
    {
      while (!*(_QWORD *)(*((_QWORD *)v353 + 6) + 8 * v751))
      {
        if (v752 == ++v751)
        {
          v751 = v752;
          goto LABEL_1614;
        }
      }
      v751 = v751;
    }
LABEL_1614:
    ;
  }
  while (v591 != v751);
LABEL_1358:
  while (2)
  {
    if (!*((_DWORD *)*this + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x198016650);
    }
    JSC::B3::blocksInPostOrder<JSC::B3::BasicBlock>(**((unsigned int ***)*this + 6), (void *)v191, v199, v200, v201, v202, v203, v204, (uint64_t)&v1175);
    v593 = v1175;
    v594 = BYTE4(v1176);
    if (DWORD1(v1176))
    {
      v779 = 0;
      v199 = 1;
      v796 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v200 = 9040;
      v201 = 8;
      v202 = 7;
      v203 = 0x100000000;
      v595 = 0uLL;
      v596 = v1175;
      v204 = 0x8000000000000000;
      v771 = (char *)v1175 + 8 * DWORD1(v1176);
      v597 = v782;
      while (1)
      {
        v773 = v596;
        v793 = *(_DWORD **)v596;
        v598 = **(unsigned int **)v596;
        v599 = v801;
        if (*(uint64_t *)v801 >= 0)
          v599 = (_BYTE *)(2 * *(_QWORD *)v801 + 8);
        v600 = (v598 >> 3) & 0x1FFFFFF8;
        v601 = *(_QWORD *)&v599[v600];
        *(_QWORD *)&v599[v600] = v601 & ~(1 << v598);
        if (((1 << v598) & v601) != 0)
          break;
LABEL_1558:
        v596 = (WTF *)((char *)v773 + 8);
        if ((char *)v773 + 8 == v771)
        {
          v593 = v1175;
          v594 = v779;
          if (!v1175)
            goto LABEL_1560;
LABEL_1563:
          v1175 = 0;
          LODWORD(v1176) = 0;
          v743 = v594;
          WTF::fastFree((unint64_t)v593, (void *)v191, v199, v200, v201, v202, v203, v204);
          v597 = v782;
          if ((v743 & 1) == 0)
            goto LABEL_1564;
          goto LABEL_1358;
        }
      }
      v1194 = 0;
      v602 = *((_QWORD *)v590 + v598);
      if (!v602)
        goto LABEL_1402;
      v603 = *(unsigned int *)(v602 - 12);
      if (!(_DWORD)v603)
        goto LABEL_1402;
      v604 = (v603 - 1) | ((v603 - 1) >> 1) | ((((_DWORD)v603 - 1) | ((v603 - 1) >> 1)) >> 2);
      v605 = v604 | (v604 >> 4) | ((v604 | (v604 >> 4)) >> 8);
      v606 = (v605 | HIWORD(v605)) + 1;
      if (v606 > 0x400)
      {
        if (v606 <= 2 * v603)
        {
LABEL_1368:
          LODWORD(v606) = 2 * v606;
          if (v606 <= 0x400)
            goto LABEL_1369;
        }
        v607 = (double)v603;
        v608 = (double)v606 * 0.416666667;
      }
      else
      {
        if (3 * v606 <= 4 * v603)
          goto LABEL_1368;
LABEL_1369:
        v607 = (double)v603;
        v608 = (double)v606 * 0.604166667;
      }
      if (v608 <= v607)
        LODWORD(v606) = 2 * v606;
      if (v606 <= 8)
        v609 = 8;
      else
        v609 = v606;
      v610 = WTF::fastZeroedMalloc(8 * v609 + 16, v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
      v1194 = (_QWORD *)(v610 + 16);
      *(_DWORD *)(v610 + 8) = v609 - 1;
      *(_DWORD *)(v610 + 12) = v609;
      *(_DWORD *)(v610 + 4) = v603;
      *((_DWORD *)v1194 - 4) = 0;
      v611 = (_QWORD *)*((_QWORD *)v590 + v598);
      if (v611)
      {
        v612 = *((unsigned int *)v611 - 1);
        v613 = &v611[v612];
        if (*((_DWORD *)v611 - 3))
        {
          v614 = (_QWORD *)*((_QWORD *)v590 + v598);
          v595 = 0uLL;
          if ((_DWORD)v612)
          {
            v615 = 8 * v612;
            v614 = (_QWORD *)*((_QWORD *)v590 + v598);
            do
            {
              if ((unint64_t)(*v614 + 1) > 1)
                goto LABEL_1387;
              ++v614;
              v615 -= 8;
            }
            while (v615);
            v614 = v613;
          }
LABEL_1387:
          if (v611)
            v611 += *((unsigned int *)v611 - 1);
          while (v614 != v611)
          {
            if (v1194)
              v616 = *((_DWORD *)v1194 - 2);
            else
              v616 = 0;
            v617 = ~(*v614 << 32) + *v614;
            v618 = (v617 ^ (v617 >> 22)) + ~((v617 ^ (v617 >> 22)) << 13);
            v619 = (9 * (v618 ^ (v618 >> 8))) ^ ((9 * (v618 ^ (v618 >> 8))) >> 15);
            v620 = v616 & (((v619 + ~(v619 << 27)) >> 31) ^ (v619 + ~((_DWORD)v619 << 27)));
            v621 = 1;
            do
            {
              v622 = v620;
              v623 = v1194[v620];
              v620 = (v620 + v621++) & v616;
            }
            while (v623);
            v1194[v622] = *v614;
            v624 = v614 + 1;
            v614 = v613;
            if (v624 != v613)
            {
              v614 = v624;
              do
              {
                if ((unint64_t)(*v614 + 1) > 1)
                  goto LABEL_1399;
                ++v614;
              }
              while (v614 != v613);
              v614 = v613;
            }
LABEL_1399:
            ;
          }
LABEL_1402:
          v625 = v793;
          v626 = v793[5];
          if (v626 == 1)
          {
LABEL_1403:
            v627 = v625[9];
            if (!(_DWORD)v627)
              goto LABEL_1492;
            v628 = (_DWORD **)*((_QWORD *)v625 + 3);
            v629 = &v628[v627];
            v775 = v629;
            while (1)
            {
              if (v1194)
              {
                v630 = *((unsigned int *)v1194 - 1);
                v631 = &v1194[v630];
                if (*((_DWORD *)v1194 - 3))
                {
                  v632 = v1194;
                  if ((_DWORD)v630)
                  {
                    v633 = 8 * v630;
                    v632 = v1194;
                    do
                    {
                      if ((unint64_t)(*v632 + 1) > 1)
                        goto LABEL_1415;
                      ++v632;
                      v633 -= 8;
                    }
                    while (v633);
                    v632 = v631;
                  }
                  goto LABEL_1415;
                }
                v632 = &v1194[v630];
              }
              else
              {
                v632 = 0;
                v630 = 0;
              }
              v631 = &v1194[v630];
LABEL_1415:
              if (v1194)
                v634 = &v1194[*((unsigned int *)v1194 - 1)];
              else
                v634 = 0;
              if (v634 == v632)
                goto LABEL_1489;
              v635 = 0;
              v636 = *v628;
              do
              {
                v637 = *v632;
                v638 = *v636;
                v639 = *((_QWORD *)v590 + v638);
                if (v639)
                {
LABEL_1429:
                  v647 = *(_DWORD *)(v639 - 8);
                  goto LABEL_1430;
                }
                v640 = *(_QWORD *)(v796 + 752);
                if (!v640)
                  goto LABEL_1482;
                v641 = (_BYTE *)(v640 + 9040);
                *(_BYTE *)(v640 + 9040) = 1;
                v642 = *(unsigned int *)(v640 + 9056);
                if ((_DWORD)v642)
                {
                  *(_DWORD *)(v640 + 9056) = v642 - *(_DWORD *)(v640 + 9060);
                  v643 = (_OWORD *)(*(_QWORD *)(v640 + 9048) - v642);
                }
                else
                {
                  v644 = *(_QWORD *)(v640 + 9080);
                  v645 = *(_QWORD *)(v640 + 9064);
                  if (!v644)
                  {
                    if (*(_BYTE *)(v640 + 9045) == 6)
                    {
                      v685 = *(_DWORD *)(v640 + 9076);
                      v686 = *(unsigned int *)(v640 + 9072);
                      if (v686 < v685)
                      {
                        *(_QWORD *)&v641[8 * v686 + 56] = 0;
                        v687 = (unint64_t *)(v640 + 8 * v686 + 9104);
                        v688 = v685 - 1 - v686;
                        while (v688)
                        {
                          v645 += 1024;
                          v690 = *v687++;
                          v689 = v690;
                          LODWORD(v686) = v686 + 1;
                          --v688;
                          if (v690)
                          {
                            v644 = __rbit64(v689);
                            *(_DWORD *)(v640 + 9072) = v686;
                            *(_QWORD *)(v640 + 9064) = v645;
                            goto LABEL_1424;
                          }
                        }
                        *(_DWORD *)(v640 + 9072) = v685;
                      }
                    }
                    *v641 = 0;
LABEL_1482:
                    v691 = v628;
                    v643 = bmalloc_allocate_impl_casual_case(0x50uLL, 1, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
                    v629 = v775;
                    v628 = v691;
                    v595 = 0uLL;
                    if ((v191 & 1) == 0)
                      goto LABEL_1428;
                    goto LABEL_1426;
                  }
LABEL_1424:
                  v646 = __clz(v644);
                  *(_QWORD *)(v640 + 9080) = v644 & ~(0x8000000000000000 >> v646);
                  v643 = (_OWORD *)(v645 + 16 * v646);
                }
                *v641 = 0;
                v191 = 1;
LABEL_1426:
                if ((v191 & 0xFFFFFFFF00000000) != 0x100000000)
                {
                  v643[3] = v595;
                  v643[4] = v595;
                  v643[1] = v595;
                  v643[2] = v595;
                  *v643 = v595;
                }
LABEL_1428:
                *((_QWORD *)v590 + v638) = v643 + 1;
                *((_DWORD *)v643 + 3) = 8;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 8) = 7;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 16) = 0;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 12) = 0;
                v639 = *((_QWORD *)v590 + v638);
                if (v639)
                  goto LABEL_1429;
                v647 = 0;
LABEL_1430:
                v648 = (~(v637 << 32) + v637) ^ ((unint64_t)(~(v637 << 32) + v637) >> 22);
                v649 = 9 * ((v648 + ~(v648 << 13)) ^ ((v648 + ~(v648 << 13)) >> 8));
                v650 = (v649 ^ (v649 >> 15)) + ~((v649 ^ (v649 >> 15)) << 27);
                v651 = v647 & ((v650 >> 31) ^ v650);
                v652 = (_QWORD *)(v639 + 8 * v651);
                v653 = *v652;
                if (*v652)
                {
                  v654 = 0;
                  v655 = 1;
                  do
                  {
                    if (v653 == v637)
                    {
                      v662 = 0;
                      goto LABEL_1445;
                    }
                    if (v653 == -1)
                      v654 = v652;
                    v651 = (v651 + v655) & v647;
                    v652 = (_QWORD *)(v639 + 8 * v651);
                    v653 = *v652;
                    ++v655;
                  }
                  while (*v652);
                  if (v654)
                  {
                    *v654 = 0;
                    --*(_DWORD *)(*((_QWORD *)v590 + v638) - 16);
                    v652 = v654;
                  }
                }
                *v652 = v637;
                v656 = *((_QWORD *)v590 + v638);
                if (v656)
                  v657 = *(_DWORD *)(v656 - 12) + 1;
                else
                  v657 = 1;
                *(_DWORD *)(v656 - 12) = v657;
                v658 = *((_QWORD *)v590 + v638);
                if (v658)
                  v659 = *(_DWORD *)(v658 - 12);
                else
                  v659 = 0;
                v660 = (*(_DWORD *)(v658 - 16) + v659);
                v661 = *(unsigned int *)(v658 - 4);
                if (v661 > 0x400)
                {
                  if (v661 > 2 * v660)
                  {
LABEL_1444:
                    v662 = 1;
                    goto LABEL_1445;
                  }
                  v665 = *(_DWORD *)(v658 - 12);
LABEL_1456:
                  v789 = v628;
                  v787 = v665;
                  v666 = (_DWORD)v661 << (6 * v665 >= (2 * v661));
                  goto LABEL_1460;
                }
                if (3 * v661 > 4 * v660)
                  goto LABEL_1444;
                v665 = *(_DWORD *)(v658 - 12);
                if ((_DWORD)v661)
                  goto LABEL_1456;
                v787 = *(_DWORD *)(v658 - 12);
                v789 = v628;
                v666 = 8;
LABEL_1460:
                v784 = v666;
                v667 = WTF::fastZeroedMalloc(8 * v666 + 16, v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
                *((_QWORD *)v590 + v638) = v667 + 16;
                *(_DWORD *)(v667 + 12) = v784;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 8) = v784 - 1;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 16) = 0;
                *(_DWORD *)(*((_QWORD *)v590 + v638) - 12) = v787;
                if (!(_DWORD)v661)
                  goto LABEL_1461;
                for (n = 0; n != v661; ++n)
                {
                  v675 = *(_QWORD *)(v658 + 8 * n);
                  if ((unint64_t)(v675 + 1) >= 2)
                  {
                    v676 = *((_QWORD *)v590 + v638);
                    if (v676)
                      v677 = *(_DWORD *)(v676 - 8);
                    else
                      v677 = 0;
                    v678 = (~(v675 << 32) + v675) ^ ((unint64_t)(~(v675 << 32) + v675) >> 22);
                    v679 = 9 * ((v678 + ~(v678 << 13)) ^ ((v678 + ~(v678 << 13)) >> 8));
                    v680 = (v679 ^ (v679 >> 15)) + ~((v679 ^ (v679 >> 15)) << 27);
                    v681 = v677 & ((v680 >> 31) ^ v680);
                    v682 = 1;
                    do
                    {
                      v683 = v681;
                      v684 = *(_QWORD *)(v676 + 8 * v681);
                      v681 = (v681 + v682++) & v677;
                    }
                    while (v684);
                    *(_QWORD *)(v676 + 8 * v683) = v675;
                  }
                }
                if (v658)
LABEL_1461:
                  WTF::fastFree(v658 - 16, (void *)v191, v668, v669, v670, v671, v672, v673);
                v662 = 1;
                v595 = 0uLL;
                v628 = v789;
                v629 = v775;
LABEL_1445:
                v663 = v662 | v635;
                v635 = v663 != 0;
                v664 = v632 + 1;
                v632 = v631;
                if (v664 != v631)
                {
                  v632 = v664;
                  while ((unint64_t)(*v632 + 1) <= 1)
                  {
                    if (++v632 == v631)
                    {
                      v632 = v631;
                      break;
                    }
                  }
                }
              }
              while (v632 != v634);
              if (v663)
              {
                v692 = v801;
                if (*(uint64_t *)v801 >= 0)
                  v692 = (_BYTE *)(2 * *(_QWORD *)v801 + 8);
                v779 = 1;
                *(_QWORD *)&v692[((unint64_t)*v636 >> 3) & 0x1FFFFFF8] |= 1 << *v636;
              }
LABEL_1489:
              if (++v628 == v629)
              {
LABEL_1492:
                if (*v793)
                {
                  if (!v1194)
                  {
LABEL_1557:
                    v597 = v782;
                    v199 = 1;
                    v200 = 9040;
                    v201 = 8;
                    v202 = 7;
                    v203 = 0x100000000;
                    v595 = 0uLL;
                    v204 = 0x8000000000000000;
                    goto LABEL_1558;
                  }
                }
                else
                {
                  if (!v1194)
                    goto LABEL_1557;
                  if (*((_DWORD *)v1194 - 3))
                  {
                    v757 = (JSC::B3::Value **)WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::begin(v1194);
                    WTF::toCString<char [40],JSC::B3::Value>(&v1193, *v757);
                  }
                }
                WTF::fastFree((unint64_t)(v1194 - 2), (void *)v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
                goto LABEL_1557;
              }
            }
          }
          v693 = (v626 - 2);
          while (1)
          {
            v694 = v693;
            if (v693 >= v625[5])
            {
              __break(0xC471u);
LABEL_1653:
              __break(1u);
LABEL_1654:
              WTF::toCString<char [4],JSC::B3::Value>(&v1182, (JSC::B3::Value *)v191);
            }
            v695 = *(_QWORD *)(*((_QWORD *)v625 + 1) + 8 * v693);
            v696 = *(_WORD *)(v695 + 12);
            if (v696 != 153)
            {
              if (v696 == 152)
              {
                v697 = (*(_WORD *)(v695 + 12) & 0xFFF) == 0x98 ? v695 : 0;
                if (v1194)
                {
                  v698 = *(_QWORD *)(v697 + 40);
                  v699 = *((_DWORD *)v1194 - 2);
                  v700 = (~(v698 << 32) + v698) ^ ((unint64_t)(~(v698 << 32) + v698) >> 22);
                  v701 = 9 * ((v700 + ~(v700 << 13)) ^ ((v700 + ~(v700 << 13)) >> 8));
                  v702 = (v701 ^ (v701 >> 15)) + ~((v701 ^ (v701 >> 15)) << 27);
                  v703 = v699 & ((v702 >> 31) ^ v702);
                  v704 = v1194[v703];
                  if (v704 != v698)
                  {
                    v705 = 1;
                    while (v704)
                    {
                      v703 = ((_DWORD)v703 + v705) & v699;
                      v704 = v1194[v703];
                      ++v705;
                      if (v704 == v698)
                        goto LABEL_1527;
                    }
                    v703 = *((unsigned int *)v1194 - 1);
                  }
LABEL_1527:
                  if (v703 != *((_DWORD *)v1194 - 1))
                  {
                    v1194[v703] = -1;
                    ++*((_DWORD *)v1194 - 4);
                    v720 = v1194 ? *((_DWORD *)v1194 - 3) - 1 : -1;
                    *((_DWORD *)v1194 - 3) = v720;
                    v721 = v1194;
                    if (v1194)
                    {
                      v722 = *((_DWORD *)v1194 - 3);
                      v723 = *((unsigned int *)v1194 - 1);
                      if (6 * v722 < v723 && v723 >= 9)
                      {
                        v725 = WTF::fastZeroedMalloc(8 * (v723 >> 1) + 16, v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
                        v733 = 0;
                        v1194 = (_QWORD *)(v725 + 16);
                        *(_DWORD *)(v725 + 8) = (v723 >> 1) - 1;
                        *(_DWORD *)(v725 + 12) = v723 >> 1;
                        *(_DWORD *)v725 = 0;
                        *((_DWORD *)v1194 - 3) = v722;
                        do
                        {
                          v734 = v721[v733];
                          if ((unint64_t)(v734 + 1) >= 2)
                          {
                            if (v1194)
                              v735 = *((_DWORD *)v1194 - 2);
                            else
                              v735 = 0;
                            v736 = (~(v734 << 32) + v734) ^ ((unint64_t)(~(v734 << 32) + v734) >> 22);
                            v737 = 9 * ((v736 + ~(v736 << 13)) ^ ((v736 + ~(v736 << 13)) >> 8));
                            v738 = (v737 ^ (v737 >> 15)) + ~((v737 ^ (v737 >> 15)) << 27);
                            v739 = v735 & ((v738 >> 31) ^ v738);
                            v740 = 1;
                            do
                            {
                              v741 = v739;
                              v742 = v1194[v739];
                              v739 = (v739 + v740++) & v735;
                            }
                            while (v742);
                            v1194[v741] = v734;
                          }
                          ++v733;
                        }
                        while (v733 != v723);
                        WTF::fastFree((unint64_t)(v721 - 2), v726, v727, v728, v729, v730, v731, v732);
                        v595 = 0uLL;
                      }
                    }
                  }
                }
              }
              goto LABEL_1550;
            }
            v706 = v1194;
            if (v1194
              || (v707 = WTF::fastZeroedMalloc(0x50uLL, v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000), v595 = 0uLL, v1194 = (_QWORD *)(v707 + 16), *(_QWORD *)(v707 + 8) = 0x800000007, *(_DWORD *)v707 = 0, *((_DWORD *)v1194 - 3) = 0, (v706 = v1194) != 0))
            {
              v708 = *((_DWORD *)v706 - 2);
            }
            else
            {
              v708 = 0;
            }
            v709 = (~(v695 << 32) + v695) ^ ((unint64_t)(~(v695 << 32) + v695) >> 22);
            v710 = 9 * ((v709 + ~(v709 << 13)) ^ ((v709 + ~(v709 << 13)) >> 8));
            v711 = (v710 ^ (v710 >> 15)) + ~((v710 ^ (v710 >> 15)) << 27);
            v712 = v708 & ((v711 >> 31) ^ v711);
            v191 = (unint64_t)&v706[v712];
            v713 = *(_QWORD *)v191;
            if (*(_QWORD *)v191)
            {
              v714 = 0;
              v715 = 1;
              do
              {
                if (v713 == v695)
                  goto LABEL_1550;
                if (v713 == -1)
                  v714 = (_QWORD *)v191;
                v712 = (v712 + v715) & v708;
                v191 = (unint64_t)&v706[v712];
                v713 = *(_QWORD *)v191;
                ++v715;
              }
              while (*(_QWORD *)v191);
              if (v714)
              {
                *v714 = 0;
                --*((_DWORD *)v1194 - 4);
                v191 = (unint64_t)v714;
              }
            }
            *(_QWORD *)v191 = v695;
            v716 = v1194 ? *((_DWORD *)v1194 - 3) + 1 : 1;
            *((_DWORD *)v1194 - 3) = v716;
            v717 = v1194 ? *((_DWORD *)v1194 - 3) : 0;
            v718 = (*((_DWORD *)v1194 - 4) + v717);
            v719 = *((unsigned int *)v1194 - 1);
            if (v719 > 0x400)
              break;
            if (3 * v719 <= 4 * v718)
              goto LABEL_1525;
LABEL_1550:
            v693 = v694 - 1;
            v625 = v793;
            if (!v694)
              goto LABEL_1403;
          }
          if (v719 > 2 * v718)
            goto LABEL_1550;
LABEL_1525:
          WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand((uint64_t *)&v1194, v191, 1, 9040, 8, 7, 0x100000000, 0x8000000000000000);
          v595 = 0uLL;
          goto LABEL_1550;
        }
        v614 = &v611[v612];
      }
      else
      {
        v614 = 0;
        v612 = 0;
      }
      v595 = 0uLL;
      v613 = &v611[v612];
      goto LABEL_1387;
    }
    v597 = v782;
    if (v1175)
      goto LABEL_1563;
LABEL_1560:
    if ((v594 & 1) != 0)
      continue;
    break;
  }
LABEL_1564:
  if ((v765 & 1) == 0)
  {
    v744 = 8 * v762;
    v745 = v590;
    do
    {
      if (*v745)
      {
        WTF::fastFree(*v745 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
        v597 = v782;
      }
      ++v745;
      v744 -= 8;
    }
    while (v744);
  }
  if (v590)
  {
    WTF::fastFree((unint64_t)v590, (void *)v191, v199, v200, v201, v202, v203, v204);
    v597 = v782;
  }
  if ((*(_QWORD *)v801 & 0x8000000000000000) != 0)
  {
    if ((v767 & 1) == 0)
      goto LABEL_1573;
  }
  else
  {
    WTF::fastFree(2 * *(_QWORD *)v801, (void *)v191, v199, v200, v201, v202, v203, v204);
    v597 = v782;
    if ((v767 & 1) == 0)
    {
LABEL_1573:
      v746 = *((unsigned int *)v597 - 1);
      if ((_DWORD)v746)
      {
        v747 = v597 + 1;
        do
        {
          if (*(v747 - 1) != -1 && *v747)
          {
            WTF::fastFree(*v747 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
            v597 = v782;
          }
          v747 += 2;
          --v746;
        }
        while (v746);
      }
      WTF::fastFree((unint64_t)(v597 - 2), (void *)v191, v199, v200, v201, v202, v203, v204);
    }
  }
  v748 = v1186;
  if (v1188)
  {
    v749 = 32 * v1188;
    do
    {
      v750 = *(_QWORD *)v748;
      if (*(_QWORD *)v748)
      {
        *(_QWORD *)v748 = 0;
        *(_DWORD *)(v748 + 8) = 0;
        WTF::fastFree(v750, (void *)v191, v199, v200, v201, v202, v203, v204);
      }
      v748 += 32;
      v749 -= 32;
    }
    while (v749);
    v748 = v1186;
  }
  if (v748)
  {
    v1186 = 0;
    v1187 = 0;
    WTF::fastFree(v748, (void *)v191, v199, v200, v201, v202, v203, v204);
  }
  if (v763)
    WTF::fastFree(v763 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
  if (v777)
    WTF::fastFree(v777 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
  if (v769)
    WTF::fastFree((unint64_t)(v769 - 1), (void *)v191, v199, v200, v201, v202, v203, v204);
  if (v1191)
    WTF::fastFree((unint64_t)(v1191 - 2), (void *)v191, v199, v200, v201, v202, v203, v204);
  if (v1192)
    WTF::fastFree(v1192 - 16, (void *)v191, v199, v200, v201, v202, v203, v204);
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,false>(unint64_t *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t **v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t **v20;
  unint64_t **v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t **v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  char v54;
  BOOL v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;

  while (2)
  {
    v4 = 1 - a3;
LABEL_2:
    v5 = v4;
    v6 = a2 - (char *)result;
    v7 = (a2 - (char *)result) >> 3;
    if (v7 < 2)
      return result;
    v8 = result;
    switch(v7)
    {
      case 2uLL:
        v9 = *((_QWORD *)a2 - 1);
        v10 = *result;
        if (v9 < *result)
        {
          *result = v9;
          *((_QWORD *)a2 - 1) = v10;
        }
        return result;
      case 3uLL:
        v11 = *result;
        v12 = result[1];
        v13 = *((_QWORD *)a2 - 1);
        if (v12 >= *result)
        {
          if (v13 < v12)
          {
            result[1] = v13;
            *((_QWORD *)a2 - 1) = v12;
            v31 = result[1];
            goto LABEL_24;
          }
        }
        else if (v13 >= v12)
        {
          *result = v12;
          result[1] = v11;
          v40 = *((_QWORD *)a2 - 1);
          if (v40 < v11)
          {
            result[1] = v40;
            *((_QWORD *)a2 - 1) = v11;
          }
        }
        else
        {
          *result = v13;
          *((_QWORD *)a2 - 1) = v11;
        }
        return result;
      case 4uLL:
        v14 = result + 1;
        v15 = (unint64_t *)result[1];
        v16 = (unint64_t **)(result + 2);
        v17 = result[2];
        v18 = (unint64_t *)*result;
        if ((unint64_t)v15 >= *result)
        {
          if (v17 >= (unint64_t)v15)
            goto LABEL_43;
          *v14 = v17;
          *v16 = v15;
          v19 = result;
          v20 = (unint64_t **)(result + 1);
          result = v15;
          if (v17 >= (unint64_t)v18)
            goto LABEL_29;
        }
        else
        {
          v19 = result;
          v20 = (unint64_t **)(result + 2);
          result = (unint64_t *)*result;
          if (v17 >= (unint64_t)v15)
          {
            *v8 = (unint64_t)v15;
            v8[1] = (unint64_t)v18;
            v19 = v8 + 1;
            v20 = (unint64_t **)(v8 + 2);
            result = v18;
            if (v17 >= (unint64_t)v18)
            {
LABEL_43:
              v15 = (unint64_t *)v17;
LABEL_29:
              v33 = *((_QWORD *)a2 - 1);
              if (v33 < (unint64_t)v15)
              {
                *v16 = (unint64_t *)v33;
                *((_QWORD *)a2 - 1) = v15;
                v34 = (unint64_t)*v16;
                v35 = *v14;
                if (v34 < v35)
                {
                  v8[1] = v34;
                  v8[2] = v35;
                  v36 = *v8;
                  if (v34 < *v8)
                  {
                    *v8 = v34;
                    v8[1] = v36;
                  }
                }
              }
              return result;
            }
          }
        }
        *v19 = v17;
        *v20 = v18;
        v15 = result;
        goto LABEL_29;
      case 5uLL:
        v21 = (unint64_t **)(result + 1);
        v22 = result[1];
        v24 = result + 2;
        v23 = (unint64_t *)result[2];
        v25 = (unint64_t *)*result;
        if (v22 >= *result)
        {
          if ((unint64_t)v23 >= v22)
          {
            v28 = *result;
            v25 = (unint64_t *)result[1];
          }
          else
          {
            v26 = result;
            v27 = (unint64_t **)(result + 1);
            *v21 = v23;
            *v24 = v22;
            v28 = (unint64_t)v23;
            result = v25;
            v29 = (unint64_t *)v22;
            if (v23 < v25)
              goto LABEL_17;
            v28 = (unint64_t)v25;
            v25 = v23;
            v23 = (unint64_t *)v22;
          }
        }
        else
        {
          if ((unint64_t)v23 < v22)
          {
            v26 = result;
            v27 = (unint64_t **)(result + 2);
            v28 = result[2];
            result = (unint64_t *)result[1];
            v29 = (unint64_t *)*v8;
LABEL_17:
            *v26 = (unint64_t)v23;
            *v27 = v25;
            v25 = result;
            v23 = v29;
            goto LABEL_18;
          }
          v26 = result + 1;
          v27 = (unint64_t **)(result + 2);
          *result = v22;
          result[1] = (unint64_t)v25;
          v28 = v22;
          result = v23;
          v29 = v25;
          if (v23 < v25)
            goto LABEL_17;
          v28 = v22;
        }
LABEL_18:
        v30 = v8[3];
        if (v30 >= (unint64_t)v23)
        {
          v23 = (unint64_t *)v8[3];
        }
        else
        {
          v8[2] = v30;
          v8[3] = (unint64_t)v23;
          if (v30 < (unint64_t)v25)
          {
            *v21 = (unint64_t *)v30;
            *v24 = v25;
            if (v30 < v28)
            {
              *v8 = v30;
              v8[1] = v28;
            }
          }
        }
        v37 = *((_QWORD *)a2 - 1);
        if (v37 < (unint64_t)v23)
        {
          v8[3] = v37;
          *((_QWORD *)a2 - 1) = v23;
          v38 = v8[2];
          v31 = v8[3];
          if (v31 < v38)
          {
            v8[2] = v31;
            v8[3] = v38;
            v39 = v8[1];
            if (v31 < v39)
            {
              v8[1] = v31;
              v8[2] = v39;
LABEL_24:
              v32 = *v8;
              if (v31 < *v8)
              {
                *v8 = v31;
                v8[1] = v32;
              }
            }
          }
        }
        return result;
      default:
        v41 = a4;
        v57 = (unint64_t *)a2;
        v58 = result;
        if (v6 > 191)
        {
          if (v5 == 1)
          {
            if (result != (unint64_t *)a2)
              return (unint64_t *)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,JSC::B3::Value **>((char *)result, a2, a2);
            return result;
          }
          v50 = (unint64_t *)(a2 - 8);
          v51 = v7 >> 1;
          v52 = &result[v7 >> 1];
          if ((unint64_t)v6 >= 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(result, &result[v7 >> 1], v50);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(v58 + 1, v52 - 1, v57 - 2);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(v58 + 2, &v58[v51 + 1], v57 - 3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(v52 - 1, v52, &v58[v51 + 1]);
            v56 = *v58;
            *v58 = *v52;
            *v52 = v56;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(&result[v7 >> 1], result, v50);
          }
          if ((v41 & 1) == 0 && *(v58 - 1) >= *v58)
          {
            result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,std::__less<void,void> &>(v58, v57);
            goto LABEL_67;
          }
          v53 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,std::__less<void,void> &>(v58, v57);
          LOBYTE(a4) = v41;
          if ((v54 & 1) == 0)
            goto LABEL_66;
          v55 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(v58, v53);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(v53 + 1, v57))
          {
            v4 = v5 + 1;
            a2 = (char *)v57;
            a4 = v41;
            result = v53 + 1;
            if (!v55)
            {
LABEL_66:
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,false>(v58, v53, -v5, a4 & 1);
              result = v53 + 1;
LABEL_67:
              a4 = 0;
              a3 = -v5;
              a2 = (char *)v57;
              continue;
            }
            goto LABEL_2;
          }
          a3 = -v5;
          a2 = (char *)v53;
          result = v58;
          a4 = v41;
          if (v55)
            return result;
          continue;
        }
        if ((a4 & 1) == 0)
          return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(result, (unint64_t *)a2);
        v42 = result;
        if (result != (unint64_t *)a2)
        {
          v43 = result + 1;
          if (result + 1 != (unint64_t *)a2)
          {
            v44 = 8;
            do
            {
              v46 = *v42;
              v45 = v42[1];
              v42 = v43;
              if (v45 < v46)
              {
                v47 = v44;
                while (1)
                {
                  *(unint64_t *)((char *)result + v47) = v46;
                  v48 = v47 - 8;
                  if (v47 == 8)
                    break;
                  v46 = *(unint64_t *)((char *)result + v47 - 16);
                  v47 -= 8;
                  if (v45 >= v46)
                  {
                    v49 = (unint64_t *)((char *)result + v48);
                    goto LABEL_58;
                  }
                }
                v49 = result;
LABEL_58:
                *v49 = v45;
              }
              v43 = v42 + 1;
              v44 += 8;
            }
            while (v42 + 1 != (unint64_t *)a2);
          }
        }
        return result;
    }
  }
}

unint64_t *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = 1;
      while (1)
      {
        v5 = result[v3];
        v3 = v4;
        v6 = *v2;
        if (*v2 < v5)
          break;
LABEL_9:
        v4 = v3 + 1;
        if (++v2 == a2)
          return result;
      }
      v7 = 0;
      while (1)
      {
        v8 = &v2[v7];
        *v8 = v5;
        if (!(v3 + v7))
          break;
        v5 = *(v8 - 2);
        --v7;
        if (v6 >= v5)
        {
          v2[v7] = v6;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 >= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,std::__less<void,void> &>(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *result;
  if (*result < *(a2 - 1))
  {
    v3 = result + 1;
    while (v3 != a2)
    {
      v4 = *v3++;
      if (v2 < v4)
      {
        v5 = (uint64_t *)(v3 - 1);
        goto LABEL_9;
      }
    }
    goto LABEL_25;
  }
  v6 = (uint64_t *)(result + 1);
  do
  {
    v5 = v6;
    if (v6 >= (uint64_t *)a2)
      break;
    ++v6;
  }
  while (v2 >= *v5);
LABEL_9:
  v7 = (uint64_t *)a2;
  if (v5 < (uint64_t *)a2)
  {
    v7 = (uint64_t *)a2;
    while (v7 != (uint64_t *)result)
    {
      v8 = *--v7;
      if (v2 >= v8)
        goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_13:
  if (v5 < v7)
  {
    v9 = *v5;
    v10 = *v7;
LABEL_15:
    *v5 = v10;
    v11 = (unint64_t *)(v5 + 1);
    *v7 = v9;
    while (v11 != a2)
    {
      v12 = *v11++;
      v9 = v12;
      if (v2 < v12)
      {
        v5 = (uint64_t *)(v11 - 1);
        while (v7 != (uint64_t *)result)
        {
          v13 = *--v7;
          v10 = v13;
          if (v2 >= v13)
          {
            if (v5 < v7)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_22:
  if (v5 - 1 != (uint64_t *)result)
    *result = *(v5 - 1);
  *(v5 - 1) = v2;
  return (unint64_t *)v5;
}

unint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Value **,std::__less<void,void> &>(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v2 = 0;
  v3 = *result;
  do
  {
    v4 = &result[v2 + 1];
    if (v4 == a2)
      goto LABEL_26;
    v5 = *v4;
    ++v2;
  }
  while (v5 < v3);
  v6 = &result[v2];
  if (v2 != 1)
  {
    v7 = a2;
    while (v7 != result)
    {
      v8 = *--v7;
      if (v8 < v3)
        goto LABEL_12;
    }
    goto LABEL_26;
  }
  v7 = a2;
  do
  {
    if (v6 >= v7)
      break;
    v9 = *--v7;
  }
  while (v9 >= v3);
LABEL_12:
  if (v6 < v7)
  {
    v10 = *v7;
    v11 = v6;
    v12 = v7;
LABEL_14:
    *v11 = v10;
    *v12 = v5;
    v13 = v11 + 1;
    while (v13 != a2)
    {
      v14 = *v13++;
      v5 = v14;
      if (v14 >= v3)
      {
        v11 = v13 - 1;
        while (v12 != result)
        {
          v15 = *--v12;
          v10 = v15;
          if (v15 < v3)
          {
            if (v11 < v12)
              goto LABEL_14;
            v16 = v13 - 2;
            goto LABEL_23;
          }
        }
        break;
      }
    }
LABEL_26:
    __break(1u);
    return result;
  }
  v16 = v6 - 1;
LABEL_23:
  if (v16 != result)
    *result = *v16;
  *v16 = v3;
  return v16;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  int v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v40 = a1[1];
        goto LABEL_62;
      }
      if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 >= v11)
          return 1;
        a1[1] = v45;
      }
      else
      {
        *a1 = v13;
      }
      *(a2 - 1) = v11;
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_40;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
          goto LABEL_41;
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_40:
            v25 = v27;
LABEL_41:
            v41 = *(a2 - 1);
            if (v41 < v25)
            {
              *v26 = v41;
              *(a2 - 1) = v25;
              v42 = *v26;
              v43 = *v24;
              if (v42 < v43)
              {
                a1[1] = v42;
                a1[2] = v43;
                v44 = *a1;
                if (v42 < *a1)
                {
                  *a1 = v42;
                  a1[1] = v44;
                }
              }
            }
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 1;
          *v14 = v16;
          *v17 = v15;
          v21 = v16;
          v22 = v18;
          v23 = v15;
          if (v16 >= v18)
          {
            v21 = v18;
            v18 = v16;
            v16 = v15;
            goto LABEL_53;
          }
          goto LABEL_49;
        }
        v21 = *a1;
        v18 = a1[1];
      }
      else
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 2;
          v21 = a1[2];
          v22 = a1[1];
          v23 = *a1;
LABEL_49:
          *v19 = v16;
          *v20 = v18;
          v18 = v22;
          v16 = v23;
          goto LABEL_53;
        }
        v19 = a1 + 1;
        v20 = a1 + 2;
        *a1 = v15;
        a1[1] = v18;
        v21 = v15;
        v22 = v16;
        v23 = v18;
        if (v16 < v18)
          goto LABEL_49;
        v21 = v15;
      }
LABEL_53:
      v46 = a1[3];
      if (v46 >= v16)
      {
        v16 = a1[3];
      }
      else
      {
        a1[2] = v46;
        a1[3] = v16;
        if (v46 < v18)
        {
          *v14 = v46;
          *v17 = v18;
          if (v46 < v21)
          {
            *a1 = v46;
            a1[1] = v21;
          }
        }
      }
      v47 = *(a2 - 1);
      if (v47 < v16)
      {
        a1[3] = v47;
        *(a2 - 1) = v16;
        v48 = a1[2];
        v40 = a1[3];
        if (v40 < v48)
        {
          a1[2] = v40;
          a1[3] = v48;
          v49 = a1[1];
          if (v40 < v49)
          {
            a1[1] = v40;
            a1[2] = v49;
LABEL_62:
            v50 = *a1;
            if (v40 < *a1)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_21;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_20;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_21;
LABEL_20:
      *v9 = v5;
      *v10 = v8;
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v32;
        v36 = *v6;
        if (*v32 < v36)
        {
          v37 = i;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v37) = v36;
            v38 = v37 - 8;
            if (v37 == 8)
              break;
            v36 = *(unint64_t *)((char *)a1 + v37 - 16);
            v37 -= 8;
            if (v35 >= v36)
            {
              v39 = (unint64_t *)((char *)a1 + v38);
              goto LABEL_29;
            }
          }
          v39 = a1;
LABEL_29:
          *v39 = v35;
          if (++v33 == 8)
            break;
        }
        v6 = v32++;
        if (v32 == a2)
          return 1;
      }
      return v32 + 1 == a2;
  }
}

char *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::B3::Value **,JSC::B3::Value **>(char *result, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;

  if (result != a2)
  {
    v3 = a2 - result;
    v4 = (a2 - result) >> 3;
    if (a2 - result >= 9 && (unint64_t)v3 >= 0x10)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = &result[8 * v7];
          if (2 * v6 + 2 >= v4)
          {
            v9 = *(_QWORD *)v8;
          }
          else
          {
            v9 = *((_QWORD *)v8 + 1);
            v10 = *(_QWORD *)v8 >= v9;
            if (*(_QWORD *)v8 < v9)
              v8 += 8;
            else
              v9 = *(_QWORD *)v8;
            if (!v10)
              v7 = 2 * v6 + 2;
          }
          v11 = &result[8 * v6];
          v12 = *(_QWORD *)v11;
          if (v9 >= *(_QWORD *)v11)
          {
            do
            {
              *(_QWORD *)v11 = v9;
              v11 = v8;
              if (v5 < v7)
                break;
              v13 = (2 * v7) | 1;
              v8 = &result[8 * v13];
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v9 = *(_QWORD *)v8;
                v7 = v13;
              }
              else
              {
                v9 = *(_QWORD *)v8;
                if (*(_QWORD *)v8 >= *((_QWORD *)v8 + 1))
                {
                  v7 = v13;
                }
                else
                {
                  v9 = *((_QWORD *)v8 + 1);
                  v8 += 8;
                }
              }
            }
            while (v9 >= v12);
            *(_QWORD *)v11 = v12;
          }
        }
        v14 = v6-- <= 0;
      }
      while (!v14);
    }
    if (a2 != a3)
    {
      if (v3 >= 16)
      {
        v18 = (unint64_t *)(result + 16);
        v19 = a2;
        do
        {
          v20 = *(_QWORD *)v19;
          if (*(_QWORD *)v19 < *(_QWORD *)result)
          {
            *(_QWORD *)v19 = *(_QWORD *)result;
            *(_QWORD *)result = v20;
            v21 = *((_QWORD *)result + 1);
            if (v3 == 16)
            {
              v22 = result + 8;
              v23 = 1;
            }
            else
            {
              v24 = v21 >= *v18;
              if (v21 >= *v18)
              {
                v22 = result + 8;
              }
              else
              {
                v21 = *v18;
                v22 = result + 16;
              }
              v23 = v24 ? 1 : 2;
            }
            if (v21 >= v20)
            {
              v25 = result;
              do
              {
                *(_QWORD *)v25 = v21;
                v25 = v22;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v23)
                  break;
                v26 = (2 * v23) | 1;
                v22 = &result[8 * v26];
                v23 = 2 * v23 + 2;
                if (v23 >= v4)
                {
                  v21 = *(_QWORD *)v22;
                  v23 = v26;
                }
                else
                {
                  v21 = *(_QWORD *)v22;
                  if (*(_QWORD *)v22 >= *((_QWORD *)v22 + 1))
                  {
                    v23 = v26;
                  }
                  else
                  {
                    v21 = *((_QWORD *)v22 + 1);
                    v22 += 8;
                  }
                }
              }
              while (v21 >= v20);
              *(_QWORD *)v25 = v20;
            }
          }
          v19 += 8;
        }
        while (v19 != a3);
      }
      else
      {
        v15 = *(_QWORD *)result;
        v16 = a2;
        do
        {
          v17 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 < v15)
          {
            *(_QWORD *)v16 = v15;
            *(_QWORD *)result = v17;
            v15 = v17;
          }
          v16 += 8;
        }
        while (v16 != a3);
      }
    }
    if (v3 >= 9)
    {
      v27 = (unint64_t)v3 >> 3;
      do
      {
        v28 = 0;
        v29 = *(_QWORD *)result;
        v30 = result;
        do
        {
          v31 = &v30[8 * v28 + 8];
          v32 = (2 * v28) | 1;
          v28 = 2 * v28 + 2;
          if (v28 >= v27)
          {
            v33 = *(_QWORD *)v31;
            v28 = v32;
          }
          else
          {
            v33 = *(_QWORD *)v31;
            if (*(_QWORD *)v31 >= *((_QWORD *)v31 + 1))
            {
              v28 = v32;
            }
            else
            {
              v33 = *((_QWORD *)v31 + 1);
              v31 += 8;
            }
          }
          *(_QWORD *)v30 = v33;
          v30 = v31;
        }
        while (v28 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        a2 -= 8;
        if (v31 == a2)
        {
          *(_QWORD *)v31 = v29;
        }
        else
        {
          *(_QWORD *)v31 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v29;
          v34 = v31 - result + 8;
          if (v34 >= 9)
          {
            v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
            v36 = &result[8 * v35];
            v37 = *(_QWORD *)v36;
            v38 = *(_QWORD *)v31;
            if (*(_QWORD *)v36 < *(_QWORD *)v31)
            {
              do
              {
                *(_QWORD *)v31 = v37;
                v31 = v36;
                if (!v35)
                  break;
                v35 = (v35 - 1) >> 1;
                v36 = &result[8 * v35];
                v37 = *(_QWORD *)v36;
              }
              while (*(_QWORD *)v36 < v38);
              *(_QWORD *)v31 = v38;
            }
          }
        }
        v14 = v27-- <= 2;
      }
      while (!v14);
    }
  }
  return result;
}

void JSC::B3::`anonymous namespace'::Validater::fail(const char **a1, int a2, const char *a3, const char *a4, _QWORD *a5)
{
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  const char *v12;
  const char *v13;
  WTF::PrintStream *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  size_t v23;
  WTF *v24;
  uint64_t v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v26 = off_1E3572250;
  v27 = (WTF *)v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "B3 VALIDATION FAILURE\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v10, "%s", "    ");
  WTF::PrintStream::printf(v10, "%s", a4);
  WTF::PrintStream::printf(v10, "%s", " (");
  WTF::PrintStream::printf(v10, "%s", "./b3/B3Validate.cpp");
  WTF::PrintStream::printf(v10, "%s", ":");
  WTF::PrintStream::printf(v10, "%d", a2);
  WTF::PrintStream::printf(v10, "%s", ")\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v11 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v11, "%s", "    ");
  if (*a5)
    v12 = (const char *)(*a5 + 16);
  else
    v12 = 0;
  WTF::PrintStream::printf(v11, "%s", v12);
  WTF::PrintStream::printf(v11, "%s", "\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v13 = (const char *)*((_QWORD *)*a1 + 18);
  v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v14, "%s", "    After ");
  WTF::PrintStream::printf(v14, "%s", v13);
  WTF::PrintStream::printf(v14, "%s", "\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v22 = v27;
  if (v27)
  {
    v23 = v28;
    if ((unint64_t)v28 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      goto LABEL_15;
    }
    if ((_QWORD)v28 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x19801A328);
    }
    v25 = WTF::fastMalloc((WTF *)(v28 + 17));
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v23;
    memcpy((void *)(v25 + 16), v22, v23);
    *(_BYTE *)(v25 + 16 + v23) = 0;
    v24 = v27;
    v30 = v25;
    if (v27 == (WTF *)v29)
    {
LABEL_12:
      WTF::dataLog<WTF::CString>(&v30);
      if (a1[1])
      {
        v26 = (void (**)(WTF::StringPrintStream *__hidden))*((_QWORD *)*a1 + 18);
        WTF::dataLog<char [8],char const*,char [3]>("Before ", (const char **)&v26, ":\n");
        WTF::dataLog<char const*>(a1 + 1);
      }
      WTF::dataLog<char [16]>("At time of failure:\n");
      WTF::dataLog<JSC::B3::Procedure>((JSC::B3::Procedure *)*a1);
      WTF::dataLog<WTF::CString>(&v30);
      WTFReportAssertionFailure("./b3/B3Validate.cpp", a2, a3, (uint64_t)a4);
      __break(0xC471u);
LABEL_15:
      JUMPOUT(0x19801A30CLL);
    }
  }
  else
  {
    v24 = 0;
    v30 = 0;
  }
  WTF::fastFree((unint64_t)v24, v15, v16, v17, v18, v19, v20, v21);
  goto LABEL_12;
}

void WTF::toCString<char [10],unsigned int>(uint64_t *a1, _DWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%s", "In tuple ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%u", *a2);
  v16[5]((WTF::StringPrintStream *)&v16);
  v12 = v17;
  v11 = v18;
  *a1 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_6:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801A510);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a1 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v17;
  if (v17 != v19)
    goto LABEL_6;
}

void WTF::toCString<char [10],unsigned int,char [10],unsigned int>(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "In tuple ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%u", *a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", " at index");
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%u", *a3);
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_6:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801A684);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_6;
}

_QWORD *WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v1 = *((unsigned int *)result - 1);
    v2 = &result[v1];
    if (*((_DWORD *)result - 3))
    {
      if ((_DWORD)v1)
      {
        v3 = 8 * v1;
        while ((unint64_t)(*result + 1) <= 1)
        {
          ++result;
          v3 -= 8;
          if (!v3)
            return v2;
        }
      }
    }
    else
    {
      return v2;
    }
  }
  return result;
}

void WTF::toCString<char [4],JSC::B3::Value>(uint64_t *a1, JSC::B3::Value *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%s", "At ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v16);
  v16[5]((WTF::StringPrintStream *)&v16);
  v12 = v17;
  v11 = v18;
  *a1 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_6:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801A7ECLL);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a1 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v17;
  if (v17 != v19)
    goto LABEL_6;
}

void WTF::toCString<char [4],JSC::B3::Value,char [3],WTF::PointerDump<JSC::B3::Value>>(uint64_t *a1, const char *a2, JSC::B3::Value *a3, JSC::B3::Value **a4)
{
  WTF::PrintStream *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  _BYTE *v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v20 = off_1E3572250;
  v21 = v23;
  v22 = xmmword_199122F80;
  v23[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%s", a2);
  JSC::B3::Value::dump(a3, (WTF::PrintStream *)&v20);
  WTF::PrintStream::printf((WTF::PrintStream *)&v20, "%s", "->");
  if (*a4)
  {
    JSC::B3::Value::dump(*a4, (WTF::PrintStream *)&v20);
  }
  else
  {
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v20[4])(&v20);
    WTF::PrintStream::printf(v7, "%s", "(null)");
    v20[5]((WTF::StringPrintStream *)&v20);
  }
  v20[5]((WTF::StringPrintStream *)&v20);
  v16 = v21;
  v15 = v22;
  *a1 = 0;
  if (!v16)
  {
    v19 = 0;
LABEL_9:
    WTF::fastFree(v19, v8, v9, v10, v11, v12, v13, v14);
    return;
  }
  if (v15 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801A980);
  }
  v17 = WTF::fastMalloc((WTF *)(v15 + 17));
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v15;
  *a1 = v17;
  v18 = v17 + 16;
  memcpy((void *)(v17 + 16), v16, v15);
  *(_BYTE *)(v18 + v15) = 0;
  v19 = (unint64_t)v21;
  if (v21 != v23)
    goto LABEL_9;
}

void WTF::toCString<char [4],JSC::B3::BasicBlock>(uint64_t *a1, _DWORD *a2)
{
  WTF::PrintStream *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v17, "%s", "At ");
  v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v17[4])(&v17);
  WTF::PrintStream::printf(v4, "%s", "#");
  WTF::PrintStream::printf(v4, "%u", *a2);
  v17[5]((WTF::StringPrintStream *)&v17);
  v17[5]((WTF::StringPrintStream *)&v17);
  v13 = v18;
  v12 = v19;
  *a1 = 0;
  if (!v13)
  {
    v16 = 0;
LABEL_6:
    WTF::fastFree(v16, v5, v6, v7, v8, v9, v10, v11);
    return;
  }
  if (v12 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801AAF8);
  }
  v14 = WTF::fastMalloc((WTF *)(v12 + 17));
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v12;
  *a1 = v14;
  v15 = v14 + 16;
  memcpy((void *)(v14 + 16), v13, v12);
  *(_BYTE *)(v15 + v12) = 0;
  v16 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_6;
}

void WTF::toCString<char [4],JSC::B3::BasicBlock,char [3],WTF::PointerDump<JSC::B3::BasicBlock>>(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(WTF::StringPrintStream *__hidden);
  _BYTE *v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = off_1E3572250;
  v23 = v25;
  v24 = xmmword_199122F80;
  v25[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "At ");
  v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v22[4])(&v22);
  WTF::PrintStream::printf(v6, "%s", "#");
  WTF::PrintStream::printf(v6, "%u", *a2);
  v22[5]((WTF::StringPrintStream *)&v22);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "->");
  v7 = *a3;
  v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v22[4])(&v22);
  v9 = v8;
  if (v7)
  {
    WTF::PrintStream::printf(v8, "%s", "#");
    WTF::PrintStream::printf(v9, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v8, "%s");
  }
  v22[5]((WTF::StringPrintStream *)&v22);
  v22[5]((WTF::StringPrintStream *)&v22);
  v18 = v23;
  v17 = v24;
  *a1 = 0;
  if (!v18)
  {
    v21 = 0;
LABEL_9:
    WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  if (v17 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801AD04);
  }
  v19 = WTF::fastMalloc((WTF *)(v17 + 17));
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  *a1 = v19;
  v20 = v19 + 16;
  memcpy((void *)(v19 + 16), v18, v17);
  *(_BYTE *)(v20 + v17) = 0;
  v21 = (unint64_t)v23;
  if (v23 != v25)
    goto LABEL_9;
}

void WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::Value>(uint64_t *a1, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "At ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v18);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "->");
  JSC::B3::Value::dump(a3, (WTF::PrintStream *)&v18);
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_6:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801AE60);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_6;
}

uint64_t JSC::Wasm::toB3Type(unsigned __int8 a1)
{
  uint64_t result;

  if (a1 == 255)
    return 1;
  switch(a1)
  {
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
      goto LABEL_8;
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xE1u:
    case 0xE2u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
      goto LABEL_9;
    case 0xE3u:
    case 0xE4u:
    case 0xEAu:
    case 0xEBu:
    case 0xEFu:
    case 0xF0u:
    case 0xFEu:
      return 2;
    case 0xFBu:
      return 5;
    case 0xFCu:
      return 4;
    case 0xFDu:
      return 3;
    default:
      if (a1 != 192)
      {
LABEL_9:
        __break(0xC471u);
        JUMPOUT(0x19801AEE8);
      }
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

const char **JSC::B3::`anonymous namespace'::Validater::validateStackmapConstraint(const char **result, JSC::B3::Value *a2, uint64_t a3, int a4, unsigned int a5)
{
  int v5;
  const char **v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const char **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char **v18;
  const char **v19;
  const char **v20;
  const char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  switch(*(_BYTE *)(a3 + 16))
  {
    case 1:
    case 2:
      if (a4)
      {
        v7 = result;
        WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v31, a2, (JSC::B3::Value **)a3);
      }
      return result;
    case 4:
      if (a4)
      {
        v20 = result;
        WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v30, a2, (JSC::B3::Value **)a3);
      }
      if (!a2 || *((_BYTE *)a2 + 12) != 83)
      {
        v9 = result;
        WTF::toCString<char [4],JSC::B3::Value>(&v29, a2);
      }
      return result;
    case 5:
      if (a4 != 1)
      {
        v10 = result;
        WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v28, a2, (JSC::B3::Value **)a3);
      }
      return result;
    case 6:
    case 7:
    case 8:
      if (a4 && *(_BYTE *)(a3 + 16) == 8)
      {
        v18 = result;
        WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v27, a2, (JSC::B3::Value **)a3);
      }
      v5 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      if ((*(_BYTE *)(a3 + 8) & 0x60) != 0)
      {
        if (v5 < 0)
        {
          v11 = v5 & 0x7FFFFFFF;
          if (v11 >= *((_DWORD *)*result + 11))
          {
            __break(0xC471u);
            JUMPOUT(0x19801B2ACLL);
          }
          v12 = *((_QWORD *)*result + 4) + 16 * v11;
          if (*(_DWORD *)(v12 + 12) <= a5)
          {
            __break(0xC471u);
            JUMPOUT(0x19801B2B4);
          }
          v13 = *(_DWORD *)(*(_QWORD *)v12 + 4 * a5);
          if (v13 >= 0x80000000)
            v13 = 0x80000000;
          if (v13 - 3 >= 3)
          {
            v14 = result;
            WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v24, a2, (JSC::B3::Value **)a3);
          }
        }
        else if ((v5 - 3) >= 3)
        {
          v6 = result;
          WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v23, a2, (JSC::B3::Value **)a3);
        }
      }
      else if (v5 < 0)
      {
        v15 = v5 & 0x7FFFFFFF;
        if (v15 >= *((_DWORD *)*result + 11))
        {
          __break(0xC471u);
          JUMPOUT(0x19801B2BCLL);
        }
        v16 = *((_QWORD *)*result + 4) + 16 * v15;
        if (*(_DWORD *)(v16 + 12) <= a5)
        {
          __break(0xC471u);
          JUMPOUT(0x19801B2C4);
        }
        v17 = *(_DWORD *)(*(_QWORD *)v16 + 4 * a5);
        if (v17 >= 0x80000000)
          v17 = 0x80000000;
        if (v17 - 1 >= 2)
        {
          v21 = result;
          WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v26, a2, (JSC::B3::Value **)a3);
        }
      }
      else if ((v5 - 1) >= 2)
      {
        v8 = result;
        WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v25, a2, (JSC::B3::Value **)a3);
      }
      return result;
    case 9:
    case 0xB:
      v19 = result;
      WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(&v22, a2, (JSC::B3::Value **)a3);
    default:
      return result;
  }
  return result;
}

const char **JSC::B3::`anonymous namespace'::Validater::validateStackmap(const char **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  const char **result;
  int v7;
  unsigned int i;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;

  v4 = *((unsigned __int8 *)a2 + 12) - 83;
  if (v4 > 5 || v4 == 1)
  {
    WTF::toCString<char [4],JSC::B3::Value>(&v11, a2);
  }
  if (*((_DWORD *)a2 + 13) > JSC::B3::StackmapValue::numChildren(a2))
  {
    WTF::toCString<char [4],JSC::B3::Value>(&v10, a2);
  }
  result = (const char **)JSC::B3::StackmapValue::numChildren(a2);
  if ((_DWORD)result)
  {
    v7 = (int)result;
    for (i = 0; i != v7; ++i)
    {
      JSC::B3::StackmapValue::constrainedChild((uint64_t)a2, i, (uint64_t)v9);
    }
  }
  return result;
}

void WTF::toCString<char [4],JSC::B3::Value,char [15],long long>(uint64_t *a1, JSC::B3::Value *a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "At ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v18);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", ", caseValue = ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%lld", *a3);
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_6:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801B548);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_6;
}

void WTF::toCString<char [4],JSC::B3::Variable>(uint64_t *a1, _DWORD *a2)
{
  WTF::PrintStream *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v17, "%s", "At ");
  v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v17[4])(&v17);
  WTF::PrintStream::printf(v4, "%s", "var");
  WTF::PrintStream::printf(v4, "%u", *a2);
  v17[5]((WTF::StringPrintStream *)&v17);
  v17[5]((WTF::StringPrintStream *)&v17);
  v13 = v18;
  v12 = v19;
  *a1 = 0;
  if (!v13)
  {
    v16 = 0;
LABEL_6:
    WTF::fastFree(v16, v5, v6, v7, v8, v9, v10, v11);
    return;
  }
  if (v12 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801B6C0);
  }
  v14 = WTF::fastMalloc((WTF *)(v12 + 17));
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v12;
  *a1 = v14;
  v15 = v14 + 16;
  memcpy((void *)(v14 + 16), v13, v12);
  *(_BYTE *)(v15 + v12) = 0;
  v16 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_6;
}

uint64_t WTF::dataLog<char [8],char const*,char [3]>(const char *a1, const char **a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char const*>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void WTF::toCString<char [10],JSC::B3::MemoryValue>(uint64_t *a1, JSC::B3::Value *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%s", "Fence at ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v16);
  v16[5]((WTF::StringPrintStream *)&v16);
  v12 = v17;
  v11 = v18;
  *a1 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_6:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801B958);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a1 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v17;
  if (v17 != v19)
    goto LABEL_6;
}

char *JSC::B3::Value::lastChild(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = *((unsigned __int8 *)this + 20);
  if (v1 == 4)
  {
    v5 = JSC::B3::Value::childrenVector(this);
    v1 = *(unsigned int *)(v5 + 12);
    if (!(_DWORD)v1)
    {
      __break(0xC471u);
      JUMPOUT(0x19801BA14);
    }
    v3 = *(char **)v5;
  }
  else
  {
    v2 = 40;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v2 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v2 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v2 = 64;
        break;
      case 0x53:
        v2 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v2 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19801BA0CLL);
    }
    v3 = (char *)this + v2;
  }
  return &v3[8 * v1 - 8];
}

void WTF::toCString<char [4],JSC::B3::Value,char [3],JSC::B3::ConstrainedValue>(uint64_t *a1, JSC::B3::Value *a2, JSC::B3::Value **a3)
{
  JSC::B3::Value *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(WTF::StringPrintStream *__hidden);
  _BYTE *v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = off_1E3572250;
  v23 = v25;
  v24 = xmmword_199122F80;
  v25[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "At ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v22);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", ": ");
  v6 = *a3;
  v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v22[4])(&v22);
  v8 = v7;
  if (v6)
  {
    JSC::B3::Value::dump(v6, v7);
  }
  else
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v9, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  }
  WTF::PrintStream::printf(v8, "%s", ":");
  JSC::B3::ValueRep::dump((JSC::B3::ValueRep *)(a3 + 1), v8);
  v22[5]((WTF::StringPrintStream *)&v22);
  v22[5]((WTF::StringPrintStream *)&v22);
  v18 = v23;
  v17 = v24;
  *a1 = 0;
  if (!v18)
  {
    v21 = 0;
LABEL_9:
    WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  if (v17 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801BE7CLL);
  }
  v19 = WTF::fastMalloc((WTF *)(v17 + 17));
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  *a1 = v19;
  v20 = v19 + 16;
  memcpy((void *)(v19 + 16), v18, v17);
  *(_BYTE *)(v20 + v17) = 0;
  v21 = (unint64_t)v23;
  if (v23 != v25)
    goto LABEL_9;
}

void WTF::toCString<char [40],JSC::B3::Value>(uint64_t *a1, JSC::B3::Value *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%s", "Undominated phi at top of entry block: ");
  JSC::B3::Value::dump(a2, (WTF::PrintStream *)&v16);
  v16[5]((WTF::StringPrintStream *)&v16);
  v12 = v17;
  v11 = v18;
  *a1 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_6:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19801BFA4);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a1 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v17;
  if (v17 != v19)
    goto LABEL_6;
}

void WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ValueRep::Kind>(uint64_t a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  unint64_t v21;
  char v22;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)a1;
  if (v8 <= v4)
    goto LABEL_18;
  if (!(v8 >> 28))
  {
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    if ((_DWORD)v5)
    {
      v18 = 16 * v5;
      v19 = (__int128 *)v9;
      do
      {
        v20 = *v19++;
        *v10++ = v20;
        v18 -= 16;
      }
      while (v18);
      v10 = *(_OWORD **)a1;
      if (v9)
      {
LABEL_11:
        if (v10 == (_OWORD *)v9)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
        v9 = *(_QWORD *)a1;
        goto LABEL_18;
      }
    }
    else if (v9)
    {
      goto LABEL_11;
    }
    v9 = (unint64_t)v10;
LABEL_18:
    v21 = v9 + 16 * *(unsigned int *)(a1 + 12);
    v22 = *a2;
    *(_QWORD *)v21 = 0;
    *(_BYTE *)(v21 + 8) = v22;
    ++*(_DWORD *)(a1 + 12);
    return;
  }
  __break(0xC471u);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],WTF::RawPointer>(WTF::CommaPrinter,char [13],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  const char *v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  char v26;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = (const char *)a2[1];
  v8 = (const void **)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v24, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v24 = v21;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v24, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v24 = v22;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  WTF::PrintStream::printf(v5, "%s", v6);
  WTF::PrintStream::printf(v5, "%p", *v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

__n128 WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

_QWORD *WTF::Vector<JSC::B3::Value *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::Value *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x41)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 64;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19801C52CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x41)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 64;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::B3::Value::deepDump(JSC::B3::Value *this, const JSC::B3::Procedure *a2, WTF::PrintStream *a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  unsigned int v8;
  const char *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  float v12;
  WTF::PrintStream *v13;
  float v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  size_t v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  char *v34;
  WTF::PrintStream *v35;
  float v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::PrintStream *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  char *v52;
  uint64_t v53;
  WTF::PrintStream *v54;
  float v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  WTF::PrintStream *v59;
  float v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::PrintStream *v65;
  float v66;
  _QWORD v68[3];
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  unsigned __int8 v73;
  char v74;
  void (**v75)(WTF::StringPrintStream *__hidden);
  WTF *v76;
  __int128 v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  v8 = *((_DWORD *)this + 4);
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  v9 = "Void";
  switch(v8)
  {
    case 0u:
      break;
    case 1u:
      v9 = "Int32";
      break;
    case 2u:
      v9 = "Int64";
      break;
    case 3u:
      v9 = "Float";
      break;
    case 4u:
      v9 = "Double";
      break;
    case 5u:
      v9 = "V128";
      break;
    default:
      if (v8 != 0x80000000)
      {
        __break(0xC471u);
        JUMPOUT(0x19801CD50);
      }
      v9 = "Tuple";
      break;
  }
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v10, "%s", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v75, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v75);
  if ((_DWORD)v76 != -1)
    ((void (*)(const char **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v69, &v75);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  WTF::PrintStream::printf(v7, "%s", "b@");
  WTF::PrintStream::printf(v7, "%u", *((_DWORD *)this + 2));
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  WTF::StringImpl::utf8ForCharacters(" = ", 3uLL, (uint64_t)&v75, v14);
  WTF::printExpectedCStringHelper(v13, "StringView", &v75);
  if ((_DWORD)v76 != -1)
    ((void (*)(const char **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v69, &v75);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  JSC::B3::Kind::dump((JSC::B3::Value *)((char *)this + 12), v7);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v75, v17);
  WTF::printExpectedCStringHelper(v16, "StringView", &v75);
  if ((_DWORD)v76 != -1)
    ((void (*)(const char **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v69, &v75);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v69 = ", ";
  v70 = 3;
  v71 = "";
  v72 = 1;
  v73 = 0;
  (*(void (**)(JSC::B3::Value *, const char **, WTF::PrintStream *))(*(_QWORD *)this + 392))(this, &v69, a3);
  (*(void (**)(JSC::B3::Value *, const char **, WTF::PrintStream *))(*(_QWORD *)this + 400))(this, &v69, a3);
  JSC::B3::Value::effects((uint64_t)this, (uint64_t)v68);
  v75 = off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  JSC::B3::Effects::dump(v68, (WTF::PrintStream *)&v75);
  v75[5]((WTF::StringPrintStream *)&v75);
  v25 = v76;
  if (v76)
  {
    v26 = v77;
    if ((unint64_t)v77 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x19801CD58);
    }
    if ((_QWORD)v77 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x19801CD60);
    }
    v27 = WTF::fastMalloc((WTF *)(v77 + 17));
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = v26;
    memcpy((void *)(v27 + 16), v25, v26);
    *(_BYTE *)(v27 + 16 + v26) = 0;
    if (v76 != (WTF *)v78)
      WTF::fastFree((unint64_t)v76, v18, v19, v20, v21, v22, v23, v24);
    if (*(_QWORD *)(v27 + 8))
    {
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      v29 = v73;
      v30 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 32))(v28);
      v31 = v30;
      v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32);
      if (v29)
      {
        v34 = (char *)v69;
        v33 = v70;
        v35 = (WTF::PrintStream *)v32(v30);
        if (v34)
        {
          v37 = v33 - 1;
          if (!v33)
            v37 = 0;
          WTF::StringImpl::utf8ForCharacters(v34, v37, (uint64_t)&v75, v36);
        }
        else
        {
          v44 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v44 = 1;
          *(_QWORD *)(v44 + 8) = 0;
          *(_BYTE *)(v44 + 16) = 0;
          v75 = (void (**)(WTF::StringPrintStream *__hidden))v44;
          LODWORD(v76) = 0;
        }
        WTF::printExpectedCStringHelper(v35, "StringView", &v75);
        if ((_DWORD)v76 != -1)
          ((void (*)(_QWORD *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(v68, &v75);
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 40))(v28);
      }
      else
      {
        v40 = (char *)v71;
        v39 = v72;
        v41 = (WTF::PrintStream *)v32(v30);
        if (v40)
        {
          v43 = v39 - 1;
          if (!v39)
            v43 = 0;
          WTF::StringImpl::utf8ForCharacters(v40, v43, (uint64_t)&v75, v42);
        }
        else
        {
          v45 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v45 = 1;
          *(_QWORD *)(v45 + 8) = 0;
          *(_BYTE *)(v45 + 16) = 0;
          v75 = (void (**)(WTF::StringPrintStream *__hidden))v45;
          LODWORD(v76) = 0;
        }
        WTF::printExpectedCStringHelper(v41, "StringView", &v75);
        if ((_DWORD)v76 != -1)
          ((void (*)(_QWORD *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(v68, &v75);
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 40))(v28);
        v73 = 1;
      }
      WTF::PrintStream::printf(v28, "%s", (const char *)(v27 + 16));
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
    }
    if (*(_DWORD *)v27 != 1)
    {
      --*(_DWORD *)v27;
      goto LABEL_46;
    }
    v38 = v27;
  }
  else
  {
    v38 = 0;
  }
  WTF::fastFree(v38, v18, v19, v20, v21, v22, v23, v24);
LABEL_46:
  v46 = *((_QWORD *)this + 3);
  if (v46)
  {
    v68[0] = a2;
    v68[1] = v46;
    v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    v48 = v73;
    v49 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v47 + 32))(v47);
    v50 = v49;
    v51 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32);
    if (v48)
    {
      v52 = (char *)v69;
      v53 = v70;
      v54 = (WTF::PrintStream *)v51(v49);
      if (v52)
      {
        v56 = v53 - 1;
        if (!v53)
          v56 = 0;
        WTF::StringImpl::utf8ForCharacters(v52, v56, (uint64_t)&v75, v55);
      }
      else
      {
        v62 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v62 = 1;
        *(_QWORD *)(v62 + 8) = 0;
        *(_BYTE *)(v62 + 16) = 0;
        v75 = (void (**)(WTF::StringPrintStream *__hidden))v62;
        LODWORD(v76) = 0;
      }
      WTF::printExpectedCStringHelper(v54, "StringView", &v75);
      if ((_DWORD)v76 != -1)
        ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v74, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v47 + 40))(v47);
    }
    else
    {
      v57 = (char *)v71;
      v58 = v72;
      v59 = (WTF::PrintStream *)v51(v49);
      if (v57)
      {
        v61 = v58 - 1;
        if (!v58)
          v61 = 0;
        WTF::StringImpl::utf8ForCharacters(v57, v61, (uint64_t)&v75, v60);
      }
      else
      {
        v63 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v63 = 1;
        *(_QWORD *)(v63 + 8) = 0;
        *(_BYTE *)(v63 + 16) = 0;
        v75 = (void (**)(WTF::StringPrintStream *__hidden))v63;
        LODWORD(v76) = 0;
      }
      WTF::printExpectedCStringHelper(v59, "StringView", &v75);
      if ((_DWORD)v76 != -1)
        ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v74, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v47 + 40))(v47);
      v73 = 1;
    }
    JSC::B3::OriginDump::dump((JSC::B3::OriginDump *)v68, v47);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  }
  v64 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v75, v66);
  WTF::printExpectedCStringHelper(v65, "StringView", &v75);
  if ((_DWORD)v76 != -1)
    ((void (*)(_QWORD *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(v68, &v75);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
}

void JSC::B3::Value::~Value(JSC::B3::Value *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::Value::~Value(JSC::B3::Value *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Value::replaceWithIdentity(JSC::B3::Value *this, JSC::B3::Value *a2)
{
  int v2;
  uint64_t v5;
  int v6;
  uint64_t result;
  __int16 v8;

  v2 = *((_DWORD *)this + 4);
  if (v2 == *((_DWORD *)a2 + 4))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *((_DWORD *)this + 2);
    result = (**(uint64_t (***)(JSC::B3::Value *))this)(this);
    *(_QWORD *)this = off_1E357F5F0;
    if (v2)
    {
      *((_QWORD *)this + 5) = a2;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    *((_WORD *)this + 6) = v8;
    *((_DWORD *)this + 4) = v2;
    *((_BYTE *)this + 20) = v8;
    *((_DWORD *)this + 2) = v6;
    *((_QWORD *)this + 4) = v5;
  }
  else
  {
    result = 133;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::B3::Value::replaceWithNopIgnoringType(JSC::B3::Value *this)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  v3 = *((_DWORD *)this + 2);
  result = (**(uint64_t (***)(JSC::B3::Value *))this)(this);
  *(_QWORD *)this = off_1E357F5F0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 2) = v3;
  *((_QWORD *)this + 4) = v2;
  return result;
}

uint64_t JSC::B3::Value::replaceWith(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;

  v10 = *(_DWORD *)(a1 + 8);
  (**(void (***)(uint64_t))a1)(a1);
  result = a2;
  switch((char)a2)
  {
    case 1:
    case 2:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 79:
    case 90:
    case 92:
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -122:
    case -121:
    case -120:
    case -119:
    case -118:
    case -117:
    case -115:
    case -113:
    case -109:
    case -101:
    case -98:
      *(_QWORD *)a1 = off_1E357F5F0;
      *(_DWORD *)(a1 + 8) = -1;
      *(_WORD *)(a1 + 12) = a2;
      *(_DWORD *)(a1 + 16) = a3;
      *(_BYTE *)(a1 + 20) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      v12 = 40;
      switch((char)a2)
      {
        case 0:
        case 1:
        case 2:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 79:
        case -101:
        case -99:
        case -98:
        case -97:
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
        case 12:
        case 80:
        case 84:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case -128:
        case -127:
        case -126:
        case -125:
        case -124:
        case -123:
        case -122:
        case -121:
        case -120:
        case -119:
        case -118:
        case -117:
        case -116:
        case -115:
        case -114:
        case -113:
        case -112:
        case -111:
        case -110:
        case -109:
          v12 = 48;
          break;
        case 7:
        case 81:
        case 89:
        case -100:
          v12 = 56;
          break;
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 82:
          v12 = 64;
          break;
        case 83:
          v12 = 176;
          break;
        case 85:
        case 86:
        case 87:
        case 88:
          v12 = 112;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19801D0D8);
      }
      *(_QWORD *)(a1 + v12) = a5;
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 32) = a4;
      return result;
    default:
      JSC::B3::Value::badKind(a2, 1);
  }
}

uint64_t JSC::B3::Value::replaceWithBottom(uint64_t this, JSC::B3::Value **a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  JSC::B3::Value *inserted;
  int v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  int v11;
  __int16 v12;

  v3 = this;
  v4 = *(_DWORD *)(this + 16);
  if (v4)
  {
    if (*(unsigned __int8 *)(this + 12) - 3 >= 5)
    {
      inserted = JSC::B3::InsertionSet::insertBottom(a2, a3, *(_QWORD *)(this + 24), v4);
      v8 = *(_DWORD *)(v3 + 16);
      if (v8 == *((_DWORD *)inserted + 4))
      {
        v9 = inserted;
        v10 = *(_QWORD *)(v3 + 32);
        v11 = *(_DWORD *)(v3 + 8);
        this = (**(uint64_t (***)(uint64_t))v3)(v3);
        *(_QWORD *)v3 = off_1E357F5F0;
        if (v8)
        {
          *(_QWORD *)(v3 + 40) = v9;
          v12 = 1;
        }
        else
        {
          v12 = 0;
        }
        *(_WORD *)(v3 + 12) = v12;
        *(_DWORD *)(v3 + 16) = v8;
        *(_BYTE *)(v3 + 20) = v12;
        *(_DWORD *)(v3 + 8) = v11;
        *(_QWORD *)(v3 + 32) = v10;
      }
      else
      {
        this = 133;
        __break(0xC471u);
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(this + 32);
    v6 = *(_DWORD *)(this + 8);
    this = (**(uint64_t (***)(uint64_t, JSC::B3::Value **))this)(this, a2);
    *(_QWORD *)v3 = off_1E357F5F0;
    *(_WORD *)(v3 + 12) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 20) = 0;
    *(_DWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 32) = v5;
  }
  return this;
}

uint64_t JSC::B3::Value::replaceWithNop(JSC::B3::Value *this)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (*((_DWORD *)this + 4))
  {
    result = 149;
    __break(0xC471u);
  }
  else
  {
    v2 = *((_QWORD *)this + 4);
    v3 = *((_DWORD *)this + 2);
    result = (**(uint64_t (***)(JSC::B3::Value *))this)(this);
    *(_QWORD *)this = off_1E357F5F0;
    *((_WORD *)this + 6) = 0;
    *((_DWORD *)this + 4) = 0;
    *((_BYTE *)this + 20) = 0;
    *((_DWORD *)this + 2) = v3;
    *((_QWORD *)this + 4) = v2;
  }
  return result;
}

uint64_t JSC::B3::Value::replaceWith(uint64_t a1, __int16 a2, int a3, uint64_t a4)
{
  int v8;
  uint64_t result;

  v8 = *(_DWORD *)(a1 + 8);
  (**(void (***)(uint64_t))a1)(a1);
  result = JSC::B3::Value::Value(a1, a2, a3, *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 32) = a4;
  return result;
}

uint64_t JSC::B3::Value::replaceWithPhi(JSC::B3::Value *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  __int16 v6;

  v2 = *((_DWORD *)this + 4);
  v3 = *((_QWORD *)this + 4);
  v4 = *((_DWORD *)this + 2);
  result = (**(uint64_t (***)(JSC::B3::Value *))this)(this);
  *(_QWORD *)this = off_1E357F5F0;
  if (v2)
    v6 = 153;
  else
    v6 = 0;
  *((_WORD *)this + 6) = v6;
  *((_DWORD *)this + 4) = v2;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 2) = v4;
  *((_QWORD *)this + 4) = v3;
  return result;
}

uint64_t *JSC::B3::Value::replaceWithJump(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v4 || *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4 - 8) != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19801D938);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 8);
  (**(void (***)(uint64_t))a1)(a1);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_WORD *)(a1 + 12) = 154;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 32) = v9;
  result = (uint64_t *)(a2 + 56);
  if (*(_DWORD *)(a2 + 68))
  {
    v19 = *result;
  }
  else
  {
    if (*(_DWORD *)(a2 + 64))
    {
      v18 = 0;
      v19 = *result;
    }
    else
    {
      result = (uint64_t *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)1, v11, v12, v13, v14, v15, v16);
      v18 = *(_DWORD *)(a2 + 68);
      v19 = *(_QWORD *)(a2 + 56);
      if (v18 == 1)
        goto LABEL_8;
    }
    v20 = 16 * v18;
    do
    {
      v21 = v20;
      v22 = v19 + v20;
      *(_QWORD *)v22 = 0;
      *(_BYTE *)(v22 + 8) = 0;
      v20 = v21 + 16;
    }
    while (v21);
  }
LABEL_8:
  *(_DWORD *)(a2 + 68) = 1;
  *(_QWORD *)v19 = a3;
  *(_BYTE *)(v19 + 8) = a4;
  return result;
}

JSC::B3::BasicBlock *JSC::B3::Value::replaceWithOops(JSC::B3::Value *this, JSC::B3::BasicBlock *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  JSC::B3::BasicBlock *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((unsigned int *)a2 + 5);
  if (!(_DWORD)v2 || *(JSC::B3::Value **)(*((_QWORD *)a2 + 1) + 8 * v2 - 8) != this)
  {
    __break(0xC471u);
    JUMPOUT(0x19801DA4CLL);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = *((_DWORD *)this + 2);
  result = (JSC::B3::BasicBlock *)(**(uint64_t (***)(JSC::B3::Value *))this)(this);
  *(_QWORD *)this = off_1E357F5F0;
  *((_WORD *)this + 6) = 159;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 2) = v6;
  *((_QWORD *)this + 4) = v5;
  if (*((_DWORD *)a2 + 16))
  {
    if (*((_DWORD *)a2 + 17))
      *((_DWORD *)a2 + 17) = 0;
    result = (JSC::B3::BasicBlock *)*((_QWORD *)a2 + 7);
    if ((JSC::B3::BasicBlock *)((char *)a2 + 72) != result && result)
    {
      *((_QWORD *)a2 + 7) = 0;
      *((_DWORD *)a2 + 16) = 0;
      WTF::fastFree((unint64_t)result, v8, v9, v10, v11, v12, v13, v14);
      result = (JSC::B3::BasicBlock *)*((_QWORD *)a2 + 7);
    }
    if (!result)
    {
      *((_QWORD *)a2 + 7) = (char *)a2 + 72;
      *((_DWORD *)a2 + 16) = 2;
    }
  }
  return result;
}

uint64_t *JSC::B3::Value::replaceWithJump(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *result;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned int *)(v3 + 20);
  if (!(_DWORD)v4 || *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4 - 8) != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19801DB50);
  }
  v8 = *(_DWORD *)(a1 + 8);
  (**(void (***)(uint64_t))a1)(a1);
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_WORD *)(a1 + 12) = 154;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 32) = v3;
  result = (uint64_t *)(v3 + 56);
  if (*(_DWORD *)(v3 + 68))
  {
    v17 = *result;
  }
  else
  {
    if (*(_DWORD *)(v3 + 64))
    {
      v16 = 0;
      v17 = *result;
    }
    else
    {
      result = (uint64_t *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)1, v9, v10, v11, v12, v13, v14);
      v16 = *(_DWORD *)(v3 + 68);
      v17 = *(_QWORD *)(v3 + 56);
      if (v16 == 1)
        goto LABEL_8;
    }
    v18 = 16 * v16;
    do
    {
      v19 = v18;
      v20 = v17 + v18;
      *(_QWORD *)v20 = 0;
      *(_BYTE *)(v20 + 8) = 0;
      v18 = v19 + 16;
    }
    while (v19);
  }
LABEL_8:
  *(_DWORD *)(v3 + 68) = 1;
  *(_QWORD *)v17 = a2;
  *(_BYTE *)(v17 + 8) = a3;
  return result;
}

unint64_t JSC::B3::Value::replaceWithOops(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 4);
  v2 = *(unsigned int *)(v1 + 20);
  if (!(_DWORD)v2 || *(JSC::B3::Value **)(*(_QWORD *)(v1 + 8) + 8 * v2 - 8) != this)
  {
    __break(0xC471u);
    JUMPOUT(0x19801DC60);
  }
  v4 = *((_DWORD *)this + 2);
  result = (**(uint64_t (***)(JSC::B3::Value *))this)(this);
  *(_QWORD *)this = off_1E357F5F0;
  *((_WORD *)this + 6) = 159;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 2) = v4;
  *((_QWORD *)this + 4) = v1;
  if (*(_DWORD *)(v1 + 64))
  {
    if (*(_DWORD *)(v1 + 68))
      *(_DWORD *)(v1 + 68) = 0;
    result = *(_QWORD *)(v1 + 56);
    if (v1 + 72 == result || result == 0)
    {
      if (!result)
      {
LABEL_14:
        *(_QWORD *)(v1 + 56) = v1 + 72;
        *(_DWORD *)(v1 + 64) = 2;
      }
    }
    else
    {
      *(_QWORD *)(v1 + 56) = 0;
      *(_DWORD *)(v1 + 64) = 0;
      WTF::fastFree(result, v6, v7, v8, v9, v10, v11, v12);
      result = *(_QWORD *)(v1 + 56);
      if (!result)
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t JSC::B3::Value::dump(JSC::B3::Value *this, WTF::PrintStream *a2)
{
  __int16 v4;
  JSC::B3::Value *v5;
  double v6;
  WTF::PrintStream *v7;
  const char *v8;
  WTF::PrintStream *v9;
  JSC::B3::Value *v10;
  double v11;
  JSC::B3::Value *v12;
  double v13;
  JSC::B3::Value *v14;
  float v15;
  WTF::PrintStream *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  double v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  double v23;

  v4 = *((_WORD *)this + 6);
  switch((char)v4)
  {
    case 3:
      if ((v4 & 0xFFF) == 3)
        v5 = this;
      else
        v5 = 0;
      *(_QWORD *)&v6 = *((unsigned int *)v5 + 10);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "$");
      v23 = v6;
      v8 = "%d";
      goto LABEL_20;
    case 4:
      if ((v4 & 0xFFF) == 4)
        v10 = this;
      else
        v10 = 0;
      v11 = *((double *)v10 + 5);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "$");
      v23 = v11;
      v8 = "%lld";
      goto LABEL_20;
    case 5:
      if ((v4 & 0xFFF) == 5)
        v12 = this;
      else
        v12 = 0;
      v13 = *((double *)v12 + 5);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "$");
      v23 = v13;
      goto LABEL_19;
    case 6:
      if ((v4 & 0xFFF) == 6)
        v14 = this;
      else
        v14 = 0;
      v15 = *((float *)v14 + 10);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "$");
      v23 = v15;
LABEL_19:
      v8 = "%lf";
LABEL_20:
      v16 = v7;
      goto LABEL_25;
    case 7:
      if ((v4 & 0xFFF) == 7)
        v17 = this;
      else
        v17 = 0;
      v18 = *((_QWORD *)v17 + 5);
      v19 = *((double *)v17 + 6);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v7, "%s", "$");
      WTF::PrintStream::printf(v7, "%llu", v18);
      v23 = v19;
      v16 = v7;
      v8 = "%llu";
LABEL_25:
      WTF::PrintStream::printf(v16, v8, *(_QWORD *)&v23);
      WTF::PrintStream::printf(v7, "%s", "(");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v20, "%s", "b@");
      WTF::PrintStream::printf(v20, "%u", *((_DWORD *)this + 2));
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v21, "%s");
      break;
    default:
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v9, "%s", "b@");
      WTF::PrintStream::printf(v9, "%u");
      break;
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::Value::dumpChildren(JSC::B3::Value *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  JSC::B3::Value **v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  WTF::PrintStream *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  char *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  WTF::PrintStream *v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  uint64_t v28;
  int v29;
  char v30;

  if (*((_BYTE *)this + 20) == 4)
  {
    result = JSC::B3::Value::childrenVector(this);
    v7 = *(JSC::B3::Value ***)result;
    v8 = *(_QWORD *)result + 8 * *(unsigned int *)(result + 12);
  }
  else
  {
    result = JSC::B3::Value::childrenArray(this);
    v7 = (JSC::B3::Value **)result;
    v8 = result + 8 * *((unsigned __int8 *)this + 20);
  }
  while (v7 != (JSC::B3::Value **)v8)
  {
    v9 = *v7;
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v11 = *(unsigned __int8 *)(a2 + 32);
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    v13 = v12;
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32);
    if (v11)
    {
      v16 = *(char **)a2;
      v15 = *(_QWORD *)(a2 + 8);
      v17 = (WTF::PrintStream *)v14(v12);
      if (v16)
      {
        v19 = v15 - 1;
        if (!v15)
          v19 = 0;
        WTF::StringImpl::utf8ForCharacters(v16, v19, (uint64_t)&v28, v18);
      }
      else
      {
        v25 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = 0;
        *(_BYTE *)(v25 + 16) = 0;
        v28 = v25;
        v29 = 0;
      }
      WTF::printExpectedCStringHelper(v17, "StringView", &v28);
      if (v29 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v29])(&v30, &v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      if (v9)
        goto LABEL_17;
    }
    else
    {
      v21 = *(char **)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      v22 = (WTF::PrintStream *)v14(v12);
      if (v21)
      {
        v24 = v20 - 1;
        if (!v20)
          v24 = 0;
        WTF::StringImpl::utf8ForCharacters(v21, v24, (uint64_t)&v28, v23);
      }
      else
      {
        v26 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = 0;
        *(_BYTE *)(v26 + 16) = 0;
        v28 = v26;
        v29 = 0;
      }
      WTF::printExpectedCStringHelper(v22, "StringView", &v28);
      if (v29 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v29])(&v30, &v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      *(_BYTE *)(a2 + 32) = 1;
      if (v9)
      {
LABEL_17:
        JSC::B3::Value::dump(v9, v10);
        goto LABEL_23;
      }
    }
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v27, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
LABEL_23:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    ++v7;
  }
  return result;
}

uint64_t JSC::B3::Value::effects@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_WORD *)(this + 12);
  switch((char)v2)
  {
    case 9:
    case -104:
      *(_BYTE *)(a2 + 3) = 1;
      return this;
    case 10:
    case -103:
      *(_BYTE *)(a2 + 4) = 1;
      return this;
    case 17:
    case 18:
    case 19:
    case 20:
      *(_BYTE *)(a2 + 2) = 1;
      return this;
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
      v3 = *(_DWORD *)(this + 52);
      this += 52;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(this - 8);
      if (v3 == *(_DWORD *)(this + 4))
        goto LABEL_6;
      v6 = (_QWORD *)(a2 + 8);
      goto LABEL_48;
    case 68:
    case 69:
    case 70:
      v5 = *(_DWORD *)(this + 52);
      this += 52;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(this - 8);
      if (v5 == *(_DWORD *)(this + 4))
        goto LABEL_6;
      v6 = (_QWORD *)(a2 + 16);
LABEL_48:
      *v6 = *(_QWORD *)this;
LABEL_49:
      *(_BYTE *)(a2 + 7) = 1;
LABEL_6:
      *(_BYTE *)(a2 + 2) = 1;
LABEL_7:
      if ((v2 & 0x200) != 0)
      {
LABEL_8:
        *(_BYTE *)(a2 + 1) = 1;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000000;
      }
      return this;
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
      v10 = *(_DWORD *)(this + 44);
      LODWORD(v9) = *(_DWORD *)(this + 48);
      if (v10 == (_DWORD)v9)
      {
        v11 = *(_QWORD *)(this + 52);
        *(_QWORD *)(a2 + 16) = v11;
        v12 = HIDWORD(v11);
        v9 = HIDWORD(v11);
      }
      else
      {
        LODWORD(v11) = *(_DWORD *)(this + 52);
        LODWORD(v12) = *(_DWORD *)(this + 56);
        if ((_DWORD)v11 == (_DWORD)v12)
        {
          v13 = *(_QWORD *)(this + 44);
          *(_QWORD *)(a2 + 16) = v13;
          v9 = HIDWORD(v13);
          LODWORD(v12) = v11;
          LODWORD(v11) = v13;
        }
        else
        {
          if (v11 >= v10)
            v11 = v10;
          else
            v11 = v11;
          if (v9 <= v12)
            v9 = v12;
          else
            v9 = v9;
          if ((_DWORD)v11 == (_DWORD)v9)
          {
            v9 = 0;
            LODWORD(v11) = 0;
          }
          else
          {
            *(_QWORD *)(a2 + 16) = v11 | (v9 << 32);
          }
        }
      }
      *(_QWORD *)(a2 + 8) = v11 | (v9 << 32);
      if (*(_DWORD *)(this + 52) != (_DWORD)v12)
        goto LABEL_49;
      goto LABEL_6;
    case 80:
      *(_BYTE *)(a2 + 5) = 1;
      return this;
    case 81:
      if ((v2 & 0xFFF) == 0x51)
        v8 = this;
      else
        v8 = 0;
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v8 + 40), *(int8x16_t *)(v8 + 40), 8uLL);
      *(_BYTE *)(a2 + 7) = 1;
      return this;
    case 82:
      if ((v2 & 0xFFF) == 0x52)
        v7 = this;
      else
        v7 = 0;
      *(_OWORD *)a2 = *(_OWORD *)(v7 + 40);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v7 + 56);
      return this;
    case 83:
      if (v2 == 83)
        v4 = this;
      else
        v4 = 0;
      *(_OWORD *)a2 = *(_OWORD *)(v4 + 112);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 128);
      return this;
    case 85:
    case 86:
    case 87:
    case 88:
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000000;
      *(_QWORD *)(a2 + 2) = 0;
      *(_BYTE *)(a2 + 1) = 1;
      return this;
    case 89:
      if ((v2 & 0xFFF) == 0x59)
        v14 = this;
      else
        v14 = 0;
      if (!*(_DWORD *)(v14 + 44))
        *(_BYTE *)(a2 + 5) = 1;
      goto LABEL_8;
    case -102:
    case -101:
    case -100:
    case -99:
    case -98:
    case -97:
      *(_BYTE *)a2 = 1;
      return this;
    default:
      if (*(_WORD *)(this + 12) - 63 > 0xF)
        return this;
      goto LABEL_7;
  }
}

uint64_t JSC::B3::Value::dumpSuccessors(JSC::B3::Value *this, const JSC::B3::BasicBlock *a2, WTF::PrintStream *a3)
{
  uint64_t *v4;
  WTF::PrintStream *v5;
  uint64_t v7;
  uint64_t **v8[5];
  char v9;

  if (*((unsigned __int8 *)this + 12) == 155 && *((_DWORD *)a2 + 17) == 2)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 7);
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::PrintStream::printf(v5, "%s", "Then:");
    JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump(v4, (uint64_t)v5);
    WTF::PrintStream::printf(v5, "%s", ", Else:");
    JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>::dump(v4 + 2, (uint64_t)v5);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  }
  else
  {
    v8[0] = (uint64_t **)((char *)a2 + 56);
    v8[1] = (uint64_t **)", ";
    v8[2] = (uint64_t **)3;
    v8[3] = (uint64_t **)"";
    v8[4] = (uint64_t **)1;
    v9 = 0;
    v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v8, v7);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  }
}

uint64_t JSC::B3::Value::negConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::addConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::addConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::subConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::mulConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::checkAddConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::checkSubConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::checkMulConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::checkNegConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::divConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::uDivConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::modConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::uModConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::fMinConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::fMaxConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::bitAndConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::bitOrConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::bitXorConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::shlConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::sShrConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::zShrConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::rotRConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::rotLConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::bitwiseCastConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::iToDConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::iToFConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::doubleToFloatConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::floatToDoubleConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::absConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::ceilConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::floorConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::sqrtConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  return 0;
}

uint64_t JSC::B3::Value::vectorAndConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::vectorOrConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::vectorXorConstant(JSC::B3::Value *this, JSC::B3::Procedure *a2, const JSC::B3::Value *a3)
{
  return 0;
}

uint64_t JSC::B3::Value::equalConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::notEqualConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::lessThanConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::greaterThanConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::lessEqualConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::greaterEqualConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::aboveConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::belowConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::aboveEqualConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::belowEqualConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::equalOrUnorderedConstant(JSC::B3::Value *this, const JSC::B3::Value *a2)
{
  return 2;
}

uint64_t JSC::B3::Value::invertedCompare(JSC::B3::Value *this, JSC::B3::Procedure *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t Space;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (JSC::B3::Value::numChildren(this) != 2)
    return 0;
  v4 = *((unsigned __int8 *)this + 12);
  v5 = JSC::B3::Value::child(this, 0);
  v6 = v4 - 51;
  v9 = *(_DWORD *)(v5 + 16);
  v10 = 52;
  switch(v6)
  {
    case 0:
      break;
    case 1:
      v10 = 51;
      break;
    case 2:
      if (v9 >= 0x80000000)
        v9 = 0x80000000;
      if (v9 - 1 >= 2)
        return 0;
      v10 = 56;
      break;
    case 3:
      if (v9 >= 0x80000000)
        v9 = 0x80000000;
      if (v9 - 1 >= 2)
        return 0;
      v10 = 55;
      break;
    case 4:
      if (v9 >= 0x80000000)
        v9 = 0x80000000;
      if (v9 - 1 >= 2)
        return 0;
      v10 = 54;
      break;
    case 5:
      if (v9 >= 0x80000000)
        v9 = 0x80000000;
      if (v9 - 1 > 1)
        return 0;
      v10 = 53;
      break;
    case 6:
      v10 = 60;
      break;
    case 7:
      v10 = 59;
      break;
    case 8:
      v10 = 58;
      break;
    case 9:
      v10 = 57;
      break;
    default:
      return 0;
  }
  v11 = *((_DWORD *)this + 4);
  v12 = *((_QWORD *)this + 3);
  v13 = JSC::B3::Value::child(this, 0);
  v14 = JSC::B3::Value::child(this, 1u);
  Space = JSC::B3::Value::allocateSpace(v10, 40);
  JSC::B3::Value::Value<JSC::B3::Value*>(Space, v10, v11, v12, v13, v14);
  v15 = *((unsigned int *)a2 + 23);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v15 - 8);
    *((_DWORD *)a2 + 23) = v15 - 1;
    v17 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v16 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v16 == *((_DWORD *)a2 + 18))
    {
      v18 = v16 + (v16 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v16 + 1)
        v20 = v16 + 1;
      else
        v20 = v19;
      if (v20 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19801E8F0);
      }
      v21 = (const void *)*((_QWORD *)a2 + 8);
      v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
      *((_DWORD *)a2 + 18) = v20;
      *((_QWORD *)a2 + 8) = v22;
      memcpy(v22, v21, 8 * v16);
      if (v21)
      {
        if (*((const void **)a2 + 8) == v21)
        {
          *((_QWORD *)a2 + 8) = 0;
          *((_DWORD *)a2 + 18) = 0;
        }
        WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
      }
      v30 = *((unsigned int *)a2 + 19);
      v17 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v17 + 8 * v30) = 0;
      *((_DWORD *)a2 + 19) = v30 + 1;
    }
    else
    {
      v17 = *((_QWORD *)a2 + 8);
      *(_QWORD *)(v17 + 8 * v16) = 0;
      *((_DWORD *)a2 + 19) = v16 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v16;
  *(_QWORD *)(v17 + 8 * v16) = Space;
  return Space;
}

BOOL JSC::B3::Value::isRounded(JSC::B3::Value *this)
{
  __int16 v1;
  JSC::B3::Value *v3;
  double v4;
  JSC::B3::Value *v6;
  float v7;

  v1 = *((_WORD *)this + 6);
  if (v1 > 0x30u)
    return 0;
  if (((1 << v1) & 0x1800300000000) != 0)
    return 1;
  if (v1 == 5)
  {
    if ((v1 & 0xFFF) == 5)
      v3 = this;
    else
      v3 = 0;
    v4 = *((double *)v3 + 5);
    return v4 == ceil(v4) && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  else
  {
    if (v1 != 6)
      return 0;
    if ((v1 & 0xFFF) == 6)
      v6 = this;
    else
      v6 = 0;
    v7 = *((float *)v6 + 10);
    return v7 == ceilf(v7) && (LODWORD(v7) & 0x7FFFFFFFu) < 0x7F800000;
  }
}

BOOL JSC::B3::Value::returnsBool(JSC::B3::Value *this)
{
  JSC::B3::Value *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  char v7;
  JSC::B3::Value *v9;
  char v10;
  JSC::B3::Value *v11;
  char v12;

  if (*((_DWORD *)this + 4) != 1)
    return 0;
  v1 = this;
  while (1)
  {
    v2 = *((_WORD *)v1 + 6);
    if (v2 <= 0x15)
      break;
    if (v2 == 22)
    {
      v6 = (JSC::B3::Value *)JSC::B3::Value::child(v1, 0);
      v7 = JSC::B3::Value::returnsBool(v6);
      v4 = 1;
      if ((v7 & 1) != 0)
        return v4;
    }
    else
    {
      v3 = v2 - 23;
      if (v3 > 0x30)
        return 0;
      if (((1 << v3) & 0x1007FF0000000) != 0)
        return 1;
      if (((1 << v3) & 3) != 0)
      {
        v9 = (JSC::B3::Value *)JSC::B3::Value::child(v1, 0);
        v10 = JSC::B3::Value::returnsBool(v9);
        v4 = 0;
        if ((v10 & 1) == 0)
          return v4;
        LODWORD(v4) = 1;
      }
      else
      {
        v4 = 0;
        if (v3 != 39)
          return v4;
        v11 = (JSC::B3::Value *)JSC::B3::Value::child(v1, 1u);
        v12 = JSC::B3::Value::returnsBool(v11);
        if ((v12 & 1) == 0)
          return 0;
        LODWORD(v4) = 2;
      }
    }
LABEL_18:
    v1 = (JSC::B3::Value *)JSC::B3::Value::child(v1, v4);
    if (*((_DWORD *)v1 + 4) != 1)
      return 0;
  }
  if (v2 != 3)
  {
    v4 = 0;
    if (v2 != 1)
      return v4;
    LODWORD(v4) = 0;
    goto LABEL_18;
  }
  if ((*((_WORD *)v1 + 6) & 0xFFF) == 3)
    v5 = v1;
  else
    v5 = 0;
  return *((_DWORD *)v5 + 10) < 2u;
}

uint64_t JSC::B3::Value::asTriState(JSC::B3::Value *this)
{
  __int16 v1;
  uint64_t result;
  JSC::B3::Value *v3;
  BOOL v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;

  v1 = *((_WORD *)this + 6);
  switch(*((_WORD *)this + 6))
  {
    case 3u:
      if ((v1 & 0xFFF) == 3)
        v3 = this;
      else
        v3 = 0;
      v4 = *((_DWORD *)v3 + 10) == 0;
      goto LABEL_8;
    case 4u:
      if ((v1 & 0xFFF) == 4)
        v5 = this;
      else
        v5 = 0;
      v4 = *((_QWORD *)v5 + 5) == 0;
      goto LABEL_8;
    case 5u:
      if ((v1 & 0xFFF) == 5)
        v6 = this;
      else
        v6 = 0;
      v4 = *((double *)v6 + 5) == 0.0;
      goto LABEL_8;
    case 6u:
      if ((v1 & 0xFFF) == 6)
        v7 = this;
      else
        v7 = 0;
      v4 = *((float *)v7 + 10) == 0.0;
LABEL_8:
      result = !v4;
      break;
    default:
      result = 2;
      break;
  }
  return result;
}

uint64_t JSC::B3::Value::key@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  __int16 v62;
  int v63;
  uint64_t v64;
  char v65;
  int v66;
  int v67;
  uint64_t v68;

  v3 = *(_WORD *)(this + 12);
  v4 = this;
  switch((char)v3)
  {
    case 1:
    case 2:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 79:
    case 88:
      v16 = *(_DWORD *)(this + 16);
      v17 = v3 - 1;
      if (*(_BYTE *)(this + 20) == 4)
      {
        if ((v3 - 1) >= 0x58u)
        {
          __break(0xC471u);
          JUMPOUT(0x19801FA38);
        }
        v24 = this + qword_19914FF50[v17];
        if (!*(_DWORD *)(v24 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19801FA70);
        }
        v18 = *(uint64_t **)v24;
      }
      else
      {
        if ((v3 - 1) >= 0x58u)
        {
          __break(0xC471u);
          JUMPOUT(0x19801F8A4);
        }
        v18 = (uint64_t *)(this + qword_19914FF50[v17]);
      }
      v19 = *v18;
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v16;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v19 + 8);
      return this;
    case 3:
      v12 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 3)
        v20 = this;
      else
        v20 = 0;
      v14 = *(int *)(v20 + 40);
      *(_BYTE *)a2 = 0;
      v15 = 3;
      goto LABEL_13;
    case 4:
      v12 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 4)
        v13 = this;
      else
        v13 = 0;
      v14 = *(_QWORD *)(v13 + 40);
      *(_BYTE *)a2 = 0;
      v15 = 4;
      goto LABEL_13;
    case 5:
      v30 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 5)
        v31 = this;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v31 + 40);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = 5;
      *(_DWORD *)(a2 + 4) = v30;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = v32;
      return this;
    case 6:
      v35 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 6)
        v36 = this;
      else
        v36 = 0;
      v37 = *(_DWORD *)(v36 + 40);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = 6;
      *(_DWORD *)(a2 + 4) = v35;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 8) = v37;
      return this;
    case 7:
      v67 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 7)
        v68 = this;
      else
        v68 = 0;
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = 7;
      *(_DWORD *)(a2 + 4) = v67;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v68 + 40);
      return this;
    case 8:
      v29 = *(_DWORD *)(this + 16);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = 8;
      goto LABEL_37;
    case 11:
      v12 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 0xB)
        v33 = this;
      else
        v33 = 0;
      v14 = *(unsigned int *)(*(_QWORD *)(v33 + 40) + 8);
      *(_BYTE *)a2 = 0;
      v15 = 11;
      goto LABEL_13;
    case 12:
      v12 = *(_DWORD *)(this + 16);
      if ((v3 & 0xFFF) == 0xC)
        v34 = this;
      else
        v34 = 0;
      v14 = *(_BYTE *)(v34 + 40) & 0x7F;
      *(_BYTE *)a2 = 0;
      v15 = 12;
LABEL_13:
      *(_WORD *)(a2 + 1) = v15;
      *(_DWORD *)(a2 + 4) = v12;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = 0;
      return this;
    case 13:
      v29 = *(_DWORD *)(this + 16);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = v3;
LABEL_37:
      *(_DWORD *)(a2 + 4) = v29;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      return this;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 85:
    case 86:
    case 87:
      v5 = *(_DWORD *)(this + 16);
      if (*(_BYTE *)(this + 20) == 4)
      {
        v21 = v3 - 14;
        if ((v3 - 14) >= 0x4Au)
        {
          __break(0xC471u);
          JUMPOUT(0x19801F9F0);
        }
        v22 = (uint64_t **)(this + qword_199150210[v21]);
        if (!*((_DWORD *)v22 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19801FA60);
        }
        if ((v3 - 14) >= 0x4Au)
        {
          __break(0xC471u);
          JUMPOUT(0x19801FA10);
        }
        v23 = (uint64_t *)(this + qword_199150210[v21]);
        if (*((_DWORD *)v23 + 3) < 2u)
        {
          __break(0xC471u);
          JUMPOUT(0x19801FA68);
        }
        v7 = **v22;
        v9 = *v23;
      }
      else
      {
        v6 = 40;
        switch((char)v3)
        {
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 79:
            goto LABEL_5;
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
            v6 = 64;
            goto LABEL_5;
          case 80:
          case 84:
            v7 = *(_QWORD *)(this + 48);
            v8 = 48;
            goto LABEL_6;
          case 81:
            v7 = *(_QWORD *)(this + 56);
            v8 = 56;
            goto LABEL_6;
          case 82:
            v7 = *(_QWORD *)(this + 64);
LABEL_46:
            v8 = 64;
            goto LABEL_6;
          case 83:
            v7 = *(_QWORD *)(this + 176);
            v8 = 176;
            goto LABEL_6;
          case 85:
          case 86:
          case 87:
            v6 = 112;
LABEL_5:
            v7 = *(_QWORD *)(this + v6);
            v8 = 40;
            if (v3 - 14 >= 0x31)
            {
              switch((char)v3)
              {
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                  goto LABEL_46;
                case 'O':
                  break;
                case 'U':
                case 'V':
                case 'W':
                  v8 = 112;
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x19801F4ECLL);
              }
            }
LABEL_6:
            v9 = this + v8;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19801FA58);
        }
      }
      v10 = *(_QWORD *)(v9 + 8);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v5;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v7 + 8);
      v11 = *(_DWORD *)(v10 + 8);
      goto LABEL_8;
    case 62:
      v25 = *(_DWORD *)(this + 16);
      v26 = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      v27 = JSC::B3::Value::child((JSC::B3::Value *)v4, 1u);
      this = JSC::B3::Value::child((JSC::B3::Value *)v4, 2u);
      *(_BYTE *)a2 = 0;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v25;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v26 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v27 + 8);
      goto LABEL_34;
    case 90:
    case 92:
      v51 = *(_DWORD *)(this + 16);
      v52 = *(_BYTE *)(this + 40);
      this = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      if (*(unsigned __int8 *)(v4 + 12) - 90 >= 0x3E)
        v53 = 0;
      else
        v53 = v4;
      v11 = *(unsigned __int8 *)(v53 + 41);
      *(_BYTE *)a2 = v52;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v51;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      if (this)
        v54 = *(_DWORD *)(this + 8);
      else
        v54 = -1;
      *(_DWORD *)(a2 + 8) = v54;
      goto LABEL_8;
    case 91:
    case -106:
      if (v3 - 91 > 0x3B
        || ((1 << (v3 - 91)) & 0x8A20000FDFFFFF9) == 0)
      {
        goto LABEL_69;
      }
      v55 = *(_DWORD *)(this + 16);
      v56 = *(_BYTE *)(this + 40);
      v57 = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      this = JSC::B3::Value::child((JSC::B3::Value *)v4, 1u);
      if (*(unsigned __int8 *)(v4 + 12) - 90 >= 0x3E)
        v58 = 0;
      else
        v58 = v4;
      v28 = *(unsigned __int8 *)(v58 + 41);
      *(_BYTE *)a2 = v56;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v55;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      if (v57)
        v59 = *(_DWORD *)(v57 + 8);
      else
        v59 = -1;
      *(_DWORD *)(a2 + 8) = v59;
      if (!this)
        goto LABEL_118;
      v60 = *(_DWORD *)(this + 8);
      goto LABEL_99;
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -122:
    case -121:
    case -120:
    case -119:
    case -118:
    case -117:
    case -115:
    case -113:
    case -109:
      if (v3 - 93 > 0x36
        || ((1 << (v3 - 93)) & 0x2880003F7FFFFELL) != 0
        || ((1 << (v3 - 93)) & 0x457FFFC0800001) == 0)
      {
        JSC::B3::Value::badKind(v3, 1);
      }
      v42 = *(_DWORD *)(this + 16);
      v43 = *(_BYTE *)(this + 40);
      this = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      *(_BYTE *)a2 = v43;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v42;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      if (this)
        v44 = *(_DWORD *)(this + 8);
      else
        v44 = -1;
      *(_DWORD *)(a2 + 8) = v44;
      return this;
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -105:
      if (v3 - 94 > 0x39
        || ((1 << (v3 - 94)) & 0x31440001FBFFFFFLL) == 0)
      {
LABEL_69:
        JSC::B3::Value::badKind(v3, 2);
      }
      v38 = *(_DWORD *)(this + 16);
      v39 = *(_BYTE *)(this + 40);
      v40 = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      this = JSC::B3::Value::child((JSC::B3::Value *)v4, 1u);
      *(_BYTE *)a2 = v39;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v38;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      if (v40)
        v41 = *(_DWORD *)(v40 + 8);
      else
        v41 = -1;
      *(_DWORD *)(a2 + 8) = v41;
      if (this)
        v11 = *(_DWORD *)(this + 8);
      else
        v11 = -1;
LABEL_8:
      *(_DWORD *)(a2 + 12) = v11;
      return this;
    case -114:
    case -108:
    case -107:
      v45 = *(_DWORD *)(this + 16);
      v46 = *(_BYTE *)(this + 40);
      v47 = JSC::B3::Value::child((JSC::B3::Value *)this, 0);
      v48 = JSC::B3::Value::child((JSC::B3::Value *)v4, 1u);
      this = JSC::B3::Value::child((JSC::B3::Value *)v4, 2u);
      *(_BYTE *)a2 = v46;
      *(_WORD *)(a2 + 1) = v3;
      *(_DWORD *)(a2 + 4) = v45;
      goto LABEL_78;
    case -111:
      v61 = JSC::B3::Value::numChildren((JSC::B3::Value *)this);
      v62 = *(_WORD *)(v4 + 12);
      v63 = *(_DWORD *)(v4 + 16);
      if (v62 - 90 >= 0x3E)
        v64 = 0;
      else
        v64 = v4;
      v65 = *(_BYTE *)(v64 + 40);
      v47 = JSC::B3::Value::child((JSC::B3::Value *)v4, 0);
      this = JSC::B3::Value::child((JSC::B3::Value *)v4, 1u);
      v48 = this;
      if (v61 == 2)
      {
        *(_BYTE *)a2 = v65;
        *(_WORD *)(a2 + 1) = v62;
        *(_DWORD *)(a2 + 4) = v63;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        if (v47)
          v66 = *(_DWORD *)(v47 + 8);
        else
          v66 = -1;
        *(_DWORD *)(a2 + 8) = v66;
        v28 = -1;
        if (this)
          v60 = *(_DWORD *)(this + 8);
        else
LABEL_118:
          v60 = -1;
LABEL_99:
        *(_DWORD *)(a2 + 12) = v60;
      }
      else
      {
        this = JSC::B3::Value::child((JSC::B3::Value *)v4, 2u);
        *(_BYTE *)a2 = v65;
        *(_WORD *)(a2 + 1) = v62;
        *(_DWORD *)(a2 + 4) = v63;
LABEL_78:
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        if (v47)
          v49 = *(_DWORD *)(v47 + 8);
        else
          v49 = -1;
        *(_DWORD *)(a2 + 8) = v49;
        if (v48)
          v50 = *(_DWORD *)(v48 + 8);
        else
          v50 = -1;
        *(_DWORD *)(a2 + 12) = v50;
        if (this)
LABEL_34:
          v28 = *(_DWORD *)(this + 8);
        else
          v28 = -1;
      }
      *(_DWORD *)(a2 + 16) = v28;
      return this;
    default:
      *(_WORD *)a2 = -24832;
      *(_BYTE *)(a2 + 2) &= 0xF0u;
      *(_QWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 20) = 0;
      return this;
  }
}

uint64_t JSC::B3::Value::foldIdentity(uint64_t this)
{
  uint64_t *v1;

  while (*(_BYTE *)(this + 12) == 1)
  {
    if (*(_BYTE *)(this + 20) == 4)
    {
      this = JSC::B3::Value::childrenVector((JSC::B3::Value *)this);
      if (!*(_DWORD *)(this + 12))
      {
        __break(0xC471u);
        return this;
      }
      v1 = *(uint64_t **)this;
    }
    else
    {
      v1 = (uint64_t *)(this + 40);
    }
    this = *v1;
  }
  return this;
}

uint64_t JSC::B3::Value::performSubstitution(JSC::B3::Value *this)
{
  uint64_t v1;
  uint64_t v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  char v5;
  JSC::B3::Value *v6;
  _BYTE *v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;

  v1 = *((unsigned __int8 *)this + 20);
  if (v1 != 4)
  {
    v2 = 40;
    switch(*((_WORD *)this + 6))
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        goto LABEL_3;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v2 = 48;
        goto LABEL_3;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v2 = 56;
        goto LABEL_3;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v2 = 64;
        goto LABEL_3;
      case 0x53u:
        v3 = (JSC::B3::Value *)((char *)this + 176);
        v4 = (JSC::B3::Value *)((char *)this + 8 * v1 + 176);
        if ((JSC::B3::Value *)((char *)this + 176) == v4)
          goto LABEL_14;
        goto LABEL_4;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v2 = 112;
LABEL_3:
        v3 = (JSC::B3::Value *)((char *)this + v2);
        v4 = (JSC::B3::Value *)((char *)v3 + 8 * v1);
        if (v3 != v4)
          goto LABEL_4;
        goto LABEL_14;
      default:
        __break(0xC471u);
        JUMPOUT(0x19802004CLL);
    }
  }
  v9 = 40;
  switch(*((_WORD *)this + 6))
  {
    case 0u:
    case 1u:
    case 2u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x4Fu:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x50u:
    case 0x54u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
      v9 = 48;
      break;
    case 7u:
    case 0x51u:
    case 0x59u:
    case 0x9Cu:
      v9 = 56;
      break;
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x52u:
      v9 = 64;
      break;
    case 0x53u:
      v9 = 176;
      break;
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
      v9 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198020074);
  }
  v10 = (char *)this + v9;
  v3 = *(JSC::B3::Value **)v10;
  v4 = (JSC::B3::Value *)(*(_QWORD *)v10 + 8 * *((unsigned int *)v10 + 3));
  if (v3 == v4)
  {
LABEL_14:
    v5 = 0;
  }
  else
  {
LABEL_4:
    v5 = 0;
    do
    {
      v6 = *(JSC::B3::Value **)v3;
      if (*(_BYTE *)(*(_QWORD *)v3 + 12) == 1)
      {
        do
        {
          if (*((_BYTE *)v6 + 20) == 4)
          {
            v12 = v3;
            v13 = v4;
            v11 = JSC::B3::Value::childrenVector(v6);
            if (!*(_DWORD *)(v11 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198020054);
            }
            v7 = *(_BYTE **)v11;
            v3 = v12;
            v4 = v13;
          }
          else
          {
            v7 = (char *)v6 + 40;
          }
          v6 = *(JSC::B3::Value **)v7;
        }
        while (*(_BYTE *)(*(_QWORD *)v7 + 12) == 1);
        *(_QWORD *)v3 = v6;
        v5 = 1;
      }
      v3 = (JSC::B3::Value *)((char *)v3 + 8);
    }
    while (v3 != v4);
  }
  return v5 & 1;
}

BOOL JSC::B3::Value::isFree(JSC::B3::Value *this)
{
  return *((unsigned __int8 *)this + 12) < 7u;
}

uint64_t JSC::B3::Value::typeFor(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v3 = a1;
  result = 2;
  switch(v3)
  {
    case 0:
    case 89:
      goto LABEL_5;
    case 1:
    case 2:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 79:
    case 85:
    case 86:
    case 87:
      return *(unsigned int *)(a2 + 16);
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 88:
      goto LABEL_17;
    case 13:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
      return result;
    case 37:
      v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 0x80000000)
        v5 = 0x80000000;
      v6 = v5 - 1;
      if (v6 >= 4)
        goto LABEL_5;
      result = dword_19914FDF0[v6];
      break;
    case 38:
    case 39:
    case 45:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
      return 1;
    case 44:
      if (*(_DWORD *)(a2 + 16) == 2)
        return 1;
      else
        return 3;
    case 47:
    case 49:
      return 4;
    case 48:
    case 50:
      return 3;
    case 62:
      return *(unsigned int *)(a3 + 16);
    default:
      if ((v3 - 154) > 5 || v3 == 156)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x19802065CLL);
      }
LABEL_5:
      result = 0;
      break;
  }
  return result;
}

void JSC::B3::Value::badKind(__int16 a1, int a2)
{
  int v2;
  __int16 v3;

  v3 = a1;
  v2 = a2;
  WTF::dataLog<char [10],JSC::B3::Kind,char [7],unsigned int,char [8]>("Bad kind ", (JSC::B3::Kind *)&v3, " with ", &v2, " args.\n");
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [10],JSC::B3::Kind,char [7],unsigned int,char [8]>(const char *a1, JSC::B3::Kind *a2, const char *a3, _DWORD *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  JSC::B3::Kind::dump(a2, v12);
  WTF::PrintStream::printf(v12, "%s", a3);
  WTF::PrintStream::printf(v12, "%u", *a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

JSC::B3::Value *JSC::B3::ValueKey::materialize(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t casual;
  __int16 v4;
  int v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t Space;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  char v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  JSC::B3::Value *result;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  const void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;

  casual = 0;
  v4 = *(_WORD *)(a1 + 1);
  switch((char)v4)
  {
    case 1:
    case 2:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 47:
    case 48:
    case 49:
    case 50:
    case 79:
      v29 = *((_DWORD *)a1 + 1);
      v30 = **(_QWORD **)(a2 + 64);
      Space = JSC::B3::Value::allocateSpace(v4, 40);
      switch((char)v4)
      {
        case 1:
        case 2:
        case 21:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 79:
          casual = Space;
          JSC::B3::Value::Value<>(Space, 0, v4, v29, 1, a3, v30);
          v12 = *(unsigned int *)(a2 + 92);
          if ((_DWORD)v12)
            goto LABEL_206;
          v13 = *(unsigned int *)(a2 + 76);
          if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
            goto LABEL_205;
          v32 = v13 + (v13 >> 2);
          if (v32 >= 0x10)
            v33 = v32 + 1;
          else
            v33 = 16;
          if (v33 <= v13 + 1)
            v16 = v13 + 1;
          else
            v16 = v33;
          if (v16 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198020BD8);
          }
          return result;
        default:
          JSC::B3::Value::badKind(v4, 1);
      }
      goto LABEL_216;
    case 3:
      v73 = *((_QWORD *)a1 + 1);
      casual = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 3;
      *(_DWORD *)(casual + 16) = 1;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = off_1E357D8E0;
      *(_DWORD *)(casual + 40) = v73;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v74 = v13 + (v13 >> 2);
      if (v74 >= 0x10)
        v75 = v74 + 1;
      else
        v75 = 16;
      if (v75 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v75;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020FECLL);
      }
      goto LABEL_216;
    case 4:
      v76 = *((_QWORD *)a1 + 1);
      casual = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 4;
      *(_DWORD *)(casual + 16) = 2;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = off_1E357DA88;
      *(_QWORD *)(casual + 40) = v76;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v77 = v13 + (v13 >> 2);
      if (v77 >= 0x10)
        v78 = v77 + 1;
      else
        v78 = 16;
      if (v78 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v78;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198021070);
      }
      goto LABEL_216;
    case 5:
      v87 = *((_QWORD *)a1 + 1);
      casual = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 5;
      *(_DWORD *)(casual + 16) = 4;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = off_1E357DC30;
      *(_QWORD *)(casual + 40) = v87;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v88 = v13 + (v13 >> 2);
      if (v88 >= 0x10)
        v89 = v88 + 1;
      else
        v89 = 16;
      if (v89 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v89;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1980211E0);
      }
      goto LABEL_216;
    case 6:
      return JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>((JSC::B3::Value *)a2, a3, *((float *)a1 + 2));
    case 7:
      v90 = *((_QWORD *)a1 + 1);
      v91 = *((_QWORD *)a1 + 2);
      casual = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 7;
      *(_DWORD *)(casual + 16) = 5;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = off_1E357D6F8;
      *(_QWORD *)(casual + 40) = v90;
      *(_QWORD *)(casual + 48) = v91;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v92 = v13 + (v13 >> 2);
      if (v92 >= 0x10)
        v93 = v92 + 1;
      else
        v93 = 16;
      if (v93 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v93;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198021264);
      }
      goto LABEL_216;
    case 8:
      v79 = *((_DWORD *)a1 + 1);
      casual = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 8;
      *(_DWORD *)(casual + 16) = v79;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = &unk_1E357D120;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v80 = v13 + (v13 >> 2);
      if (v80 >= 0x10)
        v81 = v80 + 1;
      else
        v81 = 16;
      if (v81 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v81;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1980210ECLL);
      }
      goto LABEL_216;
    case 11:
      v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 160) + 64) + 8 * *((unsigned int *)a1 + 2));
      casual = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = 11;
      *(_DWORD *)(casual + 16) = 2;
      *(_BYTE *)(casual + 20) = 0;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      *(_QWORD *)casual = &unk_1E357E8A8;
      *(_QWORD *)(casual + 40) = v61;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v62 = v13 + (v13 >> 2);
      if (v62 >= 0x10)
        v63 = v62 + 1;
      else
        v63 = 16;
      if (v63 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v63;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020F0CLL);
      }
      goto LABEL_216;
    case 12:
      v56 = a1[8];
      v57 = WTF::fastMalloc((WTF *)0x30);
      casual = v57;
      if ((v56 & 0x60) != 0)
        v58 = 4;
      else
        v58 = 2;
      *(_DWORD *)(v57 + 8) = -1;
      *(_WORD *)(v57 + 12) = 12;
      *(_DWORD *)(v57 + 16) = v58;
      *(_BYTE *)(v57 + 20) = 0;
      *(_QWORD *)(v57 + 24) = a3;
      *(_QWORD *)(v57 + 32) = 0;
      *(_QWORD *)v57 = &unk_1E357D2C8;
      *(_BYTE *)(v57 + 40) = v56 | 0x80;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v59 = v13 + (v13 >> 2);
      if (v59 >= 0x10)
        v60 = v59 + 1;
      else
        v60 = 16;
      if (v60 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v60;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020E7CLL);
      }
      goto LABEL_216;
    case 13:
      v82 = *((_DWORD *)a1 + 1);
      v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v83)
        goto LABEL_247;
      v84 = (_BYTE *)(v83 + 8672);
      *(_BYTE *)(v83 + 8672) = 1;
      v85 = *(unsigned int *)(v83 + 8688);
      if ((_DWORD)v85)
      {
        *(_DWORD *)(v83 + 8688) = v85 - *(_DWORD *)(v83 + 8692);
        casual = *(_QWORD *)(v83 + 8680) - v85;
        goto LABEL_163;
      }
      v103 = *(_QWORD *)(v83 + 8712);
      v104 = *(_QWORD *)(v83 + 8696);
      if (v103)
        goto LABEL_162;
      if (*(_BYTE *)(v83 + 8677) == 6)
      {
        v136 = *(_DWORD *)(v83 + 8708);
        v137 = *(unsigned int *)(v83 + 8704);
        if (v137 < v136)
        {
          *(_QWORD *)&v84[8 * v137 + 56] = 0;
          v138 = (unint64_t *)(v83 + 8 * v137 + 8736);
          v139 = v136 - 1 - v137;
          while (v139)
          {
            v104 += 1024;
            v141 = *v138++;
            v140 = v141;
            LODWORD(v137) = v137 + 1;
            --v139;
            if (v141)
            {
              v103 = __rbit64(v140);
              *(_DWORD *)(v83 + 8704) = v137;
              *(_QWORD *)(v83 + 8696) = v104;
LABEL_162:
              v105 = __clz(v103);
              *(_QWORD *)(v83 + 8712) = v103 & ~(0x8000000000000000 >> v105);
              casual = v104 + 16 * v105;
LABEL_163:
              *v84 = 0;
              goto LABEL_164;
            }
          }
          *(_DWORD *)(v83 + 8704) = v136;
        }
      }
      *v84 = 0;
LABEL_247:
      casual = bmalloc_allocate_casual(48, 1);
LABEL_164:
      JSC::B3::Value::Value(casual, v4, v82, a3);
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v106 = v13 + (v13 >> 2);
      if (v106 >= 0x10)
        v107 = v106 + 1;
      else
        v107 = 16;
      if (v107 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v107;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19802136CLL);
      }
      goto LABEL_216;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 51:
    case 52:
    case 53:
    case 54:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
      v17 = *((_DWORD *)a1 + 1);
      v18 = *(uint64_t **)(a2 + 64);
      v19 = *v18;
      v20 = v18[1];
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 40);
      JSC::B3::Value::Value<JSC::B3::Value*>(casual, v4, v17, a3, v19, v20);
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v21 = v13 + (v13 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v22;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020AA4);
      }
      goto LABEL_216;
    case 62:
      v94 = *((_DWORD *)a1 + 1);
      v95 = *(__int128 **)(a2 + 64);
      v165 = *v95;
      v96 = *((_QWORD *)v95 + 2);
      v97 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v97)
        goto LABEL_250;
      v98 = (_BYTE *)(v97 + 8856);
      *(_BYTE *)(v97 + 8856) = 1;
      v99 = *(unsigned int *)(v97 + 8872);
      if ((_DWORD)v99)
      {
        *(_DWORD *)(v97 + 8872) = v99 - *(_DWORD *)(v97 + 8876);
        casual = *(_QWORD *)(v97 + 8864) - v99;
        goto LABEL_176;
      }
      v108 = *(_QWORD *)(v97 + 8896);
      v109 = *(_QWORD *)(v97 + 8880);
      if (v108)
        goto LABEL_175;
      if (*(_BYTE *)(v97 + 8861) == 6)
      {
        v142 = *(_DWORD *)(v97 + 8892);
        v143 = *(unsigned int *)(v97 + 8888);
        if (v143 < v142)
        {
          *(_QWORD *)&v98[8 * v143 + 56] = 0;
          v144 = (unint64_t *)(v97 + 8 * v143 + 8920);
          v145 = v142 - 1 - v143;
          while (v145)
          {
            v109 += 1024;
            v147 = *v144++;
            v146 = v147;
            LODWORD(v143) = v143 + 1;
            --v145;
            if (v147)
            {
              v108 = __rbit64(v146);
              *(_DWORD *)(v97 + 8888) = v143;
              *(_QWORD *)(v97 + 8880) = v109;
LABEL_175:
              v110 = __clz(v108);
              *(_QWORD *)(v97 + 8896) = v108 & ~(0x8000000000000000 >> v110);
              casual = v109 + 16 * v110;
LABEL_176:
              *v98 = 0;
              goto LABEL_177;
            }
          }
          *(_DWORD *)(v97 + 8888) = v142;
        }
      }
      *v98 = 0;
LABEL_250:
      casual = bmalloc_allocate_casual(64, 1);
LABEL_177:
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = v4;
      *(_DWORD *)(casual + 16) = v94;
      *(_BYTE *)(casual + 20) = 3;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      v111 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
      *(_OWORD *)v111 = v165;
      *(_QWORD *)(v111 + 16) = v96;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
      {
LABEL_206:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v12 - 8);
        *(_DWORD *)(a2 + 92) = v12 - 1;
        v123 = *(_QWORD *)(a2 + 64);
      }
      else
      {
        v13 = *(unsigned int *)(a2 + 76);
        if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
          goto LABEL_205;
        v112 = v13 + (v13 >> 2);
        if (v112 >= 0x10)
          v113 = v112 + 1;
        else
          v113 = 16;
        if (v113 <= v13 + 1)
          v16 = v13 + 1;
        else
          v16 = v113;
        if (v16 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198021410);
        }
LABEL_216:
        v126 = *(const void **)(a2 + 64);
        v127 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
        *(_DWORD *)(a2 + 72) = v16;
        *(_QWORD *)(a2 + 64) = v127;
        memcpy(v127, v126, 8 * v13);
        if (v126)
        {
          if (*(const void **)(a2 + 64) == v126)
          {
            *(_QWORD *)(a2 + 64) = 0;
            *(_DWORD *)(a2 + 72) = 0;
          }
          WTF::fastFree((unint64_t)v126, v128, v129, v130, v131, v132, v133, v134);
        }
        v135 = *(unsigned int *)(a2 + 76);
        v123 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(v123 + 8 * v135) = 0;
        *(_DWORD *)(a2 + 76) = v135 + 1;
      }
      goto LABEL_207;
    case 90:
    case 92:
      v41 = *((_DWORD *)a1 + 1);
      v42 = *a1;
      v43 = *((_DWORD *)a1 + 3);
      v44 = **(_QWORD **)(a2 + 64);
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 48);
      v45 = JSC::B3::Value::Value<>(casual, 0, v4, v41, 1, a3, v44);
      *(_QWORD *)v45 = off_1E357EA50;
      *(_BYTE *)(v45 + 40) = v42;
      *(_BYTE *)(v45 + 41) = v43;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v46 = v13 + (v13 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v47;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020D34);
      }
      goto LABEL_216;
    case 91:
    case -106:
      v48 = *((_DWORD *)a1 + 1);
      v49 = *a1;
      v50 = *((_DWORD *)a1 + 4);
      v51 = *(uint64_t **)(a2 + 64);
      v52 = *v51;
      v53 = v51[1];
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 48);
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = v4;
      *(_DWORD *)(casual + 16) = v48;
      *(_BYTE *)(casual + 20) = 2;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, v52, v53);
      *(_QWORD *)casual = off_1E357EA50;
      *(_BYTE *)(casual + 40) = v49;
      *(_BYTE *)(casual + 41) = v50;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v54 = v13 + (v13 >> 2);
      if (v54 >= 0x10)
        v55 = v54 + 1;
      else
        v55 = 16;
      if (v55 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v55;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020DE8);
      }
      goto LABEL_216;
    case 93:
    case 116:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -122:
    case -121:
    case -120:
    case -119:
    case -118:
    case -117:
    case -115:
    case -113:
    case -109:
      v23 = *((_DWORD *)a1 + 1);
      v24 = *a1;
      v25 = **(_QWORD **)(a2 + 64);
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 48);
      v26 = JSC::B3::Value::Value<>(casual, 0, v4, v23, 1, a3, v25);
      *(_QWORD *)v26 = off_1E357EA50;
      *(_BYTE *)(v26 + 40) = v24;
      *(_BYTE *)(v26 + 41) = 0;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v27 = v13 + (v13 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v28;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020B38);
      }
      goto LABEL_216;
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -105:
      v7 = *((_DWORD *)a1 + 1);
      v8 = *a1;
      v9 = *(uint64_t **)(a2 + 64);
      v10 = *v9;
      v11 = v9[1];
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 48);
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = v4;
      *(_DWORD *)(casual + 16) = v7;
      *(_BYTE *)(casual + 20) = 2;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, v10, v11);
      *(_QWORD *)casual = off_1E357EA50;
      *(_BYTE *)(casual + 40) = v8;
      *(_BYTE *)(casual + 41) = 0;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v15;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020A30);
      }
      goto LABEL_216;
    case -114:
    case -108:
    case -107:
      v34 = *((_DWORD *)a1 + 1);
      v35 = *a1;
      v36 = *(__int128 **)(a2 + 64);
      v37 = *((_QWORD *)v36 + 2);
      v164 = *v36;
      casual = JSC::B3::Value::allocateSpace(*(_WORD *)(a1 + 1), 48);
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = v4;
      *(_DWORD *)(casual + 16) = v34;
      *(_BYTE *)(casual + 20) = 3;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      v38 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
      *(_OWORD *)v38 = v164;
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)casual = off_1E357EA50;
      *(_BYTE *)(casual + 40) = v35;
      *(_BYTE *)(casual + 41) = 0;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 != *(_DWORD *)(a2 + 72))
        goto LABEL_205;
      v39 = v13 + (v13 >> 2);
      if (v39 >= 0x10)
        v40 = v39 + 1;
      else
        v40 = 16;
      if (v40 <= v13 + 1)
        v16 = v13 + 1;
      else
        v16 = v40;
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198020C9CLL);
      }
      goto LABEL_216;
    case -111:
      v64 = *((_DWORD *)a1 + 1);
      v65 = *a1;
      v66 = *(uint64_t **)(a2 + 64);
      v68 = *v66;
      v67 = v66[1];
      if (*((_DWORD *)a1 + 4) != -1)
      {
        v69 = v66[2];
        v70 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v70)
        {
          v71 = (_BYTE *)(v70 + 9224);
          *(_BYTE *)(v70 + 9224) = 1;
          v72 = *(unsigned int *)(v70 + 9240);
          if ((_DWORD)v72)
          {
            *(_DWORD *)(v70 + 9240) = v72 - *(_DWORD *)(v70 + 9244);
            casual = *(_QWORD *)(v70 + 9232) - v72;
            goto LABEL_189;
          }
          v114 = *(_QWORD *)(v70 + 9264);
          v115 = *(_QWORD *)(v70 + 9248);
          if (v114)
            goto LABEL_188;
          if (*(_BYTE *)(v70 + 9229) == 6)
          {
            v148 = *(_DWORD *)(v70 + 9260);
            v149 = *(unsigned int *)(v70 + 9256);
            if (v149 < v148)
            {
              *(_QWORD *)&v71[8 * v149 + 56] = 0;
              v150 = (unint64_t *)(v70 + 8 * v149 + 9288);
              v151 = v148 - 1 - v149;
              while (v151)
              {
                v115 += 1024;
                v153 = *v150++;
                v152 = v153;
                LODWORD(v149) = v149 + 1;
                --v151;
                if (v153)
                {
                  v114 = __rbit64(v152);
                  *(_DWORD *)(v70 + 9256) = v149;
                  *(_QWORD *)(v70 + 9248) = v115;
LABEL_188:
                  v116 = __clz(v114);
                  *(_QWORD *)(v70 + 9264) = v114 & ~(0x8000000000000000 >> v116);
                  casual = v115 + 16 * v116;
LABEL_189:
                  *v71 = 0;
LABEL_190:
                  *(_QWORD *)casual = off_1E357F5F0;
                  *(_DWORD *)(casual + 8) = -1;
                  *(_WORD *)(casual + 12) = v4;
                  *(_DWORD *)(casual + 16) = v64;
                  *(_BYTE *)(casual + 20) = 3;
                  *(_QWORD *)(casual + 24) = a3;
                  *(_QWORD *)(casual + 32) = 0;
                  v117 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
                  *v117 = v68;
                  v117[1] = v67;
                  v117[2] = v69;
                  *(_QWORD *)casual = off_1E357EA50;
                  *(_BYTE *)(casual + 40) = v65;
                  *(_BYTE *)(casual + 41) = 0;
                  v12 = *(unsigned int *)(a2 + 92);
                  if ((_DWORD)v12)
                    goto LABEL_206;
                  v13 = *(unsigned int *)(a2 + 76);
                  if ((_DWORD)v13 == *(_DWORD *)(a2 + 72))
                  {
                    v118 = v13 + (v13 >> 2);
                    if (v118 >= 0x10)
                      v119 = v118 + 1;
                    else
                      v119 = 16;
                    if (v119 <= v13 + 1)
                      v16 = v13 + 1;
                    else
                      v16 = v119;
                    if (v16 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980214C8);
                    }
                    goto LABEL_216;
                  }
                  goto LABEL_205;
                }
              }
              *(_DWORD *)(v70 + 9256) = v148;
            }
          }
          *v71 = 0;
        }
        v160 = v64;
        v161 = bmalloc_allocate_casual(88, 1);
        v64 = v160;
        casual = v161;
        goto LABEL_190;
      }
      v100 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v100)
        goto LABEL_256;
      v101 = (_BYTE *)(v100 + 9224);
      *(_BYTE *)(v100 + 9224) = 1;
      v102 = *(unsigned int *)(v100 + 9240);
      if ((_DWORD)v102)
      {
        *(_DWORD *)(v100 + 9240) = v102 - *(_DWORD *)(v100 + 9244);
        casual = *(_QWORD *)(v100 + 9232) - v102;
        goto LABEL_202;
      }
      v120 = *(_QWORD *)(v100 + 9264);
      v121 = *(_QWORD *)(v100 + 9248);
      if (v120)
        goto LABEL_201;
      if (*(_BYTE *)(v100 + 9229) == 6)
      {
        v154 = *(_DWORD *)(v100 + 9260);
        v155 = *(unsigned int *)(v100 + 9256);
        if (v155 < v154)
        {
          *(_QWORD *)&v101[8 * v155 + 56] = 0;
          v156 = (unint64_t *)(v100 + 8 * v155 + 9288);
          v157 = v154 - 1 - v155;
          while (v157)
          {
            v121 += 1024;
            v159 = *v156++;
            v158 = v159;
            LODWORD(v155) = v155 + 1;
            --v157;
            if (v159)
            {
              v120 = __rbit64(v158);
              *(_DWORD *)(v100 + 9256) = v155;
              *(_QWORD *)(v100 + 9248) = v121;
LABEL_201:
              v122 = __clz(v120);
              *(_QWORD *)(v100 + 9264) = v120 & ~(0x8000000000000000 >> v122);
              casual = v121 + 16 * v122;
LABEL_202:
              *v101 = 0;
              goto LABEL_203;
            }
          }
          *(_DWORD *)(v100 + 9256) = v154;
        }
      }
      *v101 = 0;
LABEL_256:
      v162 = v64;
      v163 = bmalloc_allocate_casual(88, 1);
      v64 = v162;
      casual = v163;
LABEL_203:
      *(_QWORD *)casual = off_1E357F5F0;
      *(_DWORD *)(casual + 8) = -1;
      *(_WORD *)(casual + 12) = v4;
      *(_DWORD *)(casual + 16) = v64;
      *(_BYTE *)(casual + 20) = 2;
      *(_QWORD *)(casual + 24) = a3;
      *(_QWORD *)(casual + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, v68, v67);
      *(_QWORD *)casual = off_1E357EA50;
      *(_BYTE *)(casual + 40) = v65;
      *(_BYTE *)(casual + 41) = 0;
      v12 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v12)
        goto LABEL_206;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13 == *(_DWORD *)(a2 + 72))
      {
        v124 = v13 + (v13 >> 2);
        if (v124 >= 0x10)
          v125 = v124 + 1;
        else
          v125 = 16;
        if (v125 <= v13 + 1)
          v16 = v13 + 1;
        else
          v16 = v125;
        if (v16 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19802183CLL);
        }
        goto LABEL_216;
      }
LABEL_205:
      v123 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v123 + 8 * v13) = 0;
      *(_DWORD *)(a2 + 76) = v13 + 1;
LABEL_207:
      *(_DWORD *)(casual + 8) = v13;
      *(_QWORD *)(v123 + 8 * v13) = casual;
      return (JSC::B3::Value *)casual;
    default:
      return (JSC::B3::Value *)casual;
  }
}

uint64_t JSC::B3::ValueRep::addUsedRegistersTo(uint64_t result, int a2, _QWORD *a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  char v6;

  v3 = *(unsigned __int8 *)(result + 8);
  if (v3 > 0xB)
  {
    result = 73;
    __break(0xC471u);
    goto LABEL_13;
  }
  v4 = 1 << v3;
  if ((v4 & 0x600) != 0)
  {
    v5 = 2684354560;
LABEL_4:
    *a3 |= v5;
    return result;
  }
  if ((v4 & 0x180) != 0)
  {
    v6 = *(_BYTE *)result;
    if ((*(_BYTE *)result & 0x40) == 0)
    {
      v5 = 1 << v6;
      *a3 |= 1 << v6;
      if ((v6 & 0x60) == 0x20 && a2 && (v6 & 0x60) == 0x20)
      {
        ++a3;
        goto LABEL_4;
      }
      return result;
    }
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t JSC::B3::ValueRep::dump(JSC::B3::ValueRep *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  WTF::PrintStream *v8;
  uint64_t result;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  char v12;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = *((char *)this + 8);
  if (v5 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x198021E78);
  }
  v6 = v4;
  v7 = off_1E357F788[v5];
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  switch(*((_BYTE *)this + 8))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return result;
    case 7:
    case 8:
      v12 = *(_BYTE *)this;
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v11, "%s", "(");
      JSC::Reg::dump((JSC::Reg *)&v12, v11);
      WTF::PrintStream::printf(v11, "%s", ")");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 9:
    case 0xA:
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(");
      WTF::PrintStream::printf(v10, "%ld");
      goto LABEL_6;
    case 0xB:
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(");
      WTF::PrintStream::printf(v10, "%lld");
LABEL_6:
      WTF::PrintStream::printf(v10, "%s", ")");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    default:
      __break(0xC471u);
      JUMPOUT(0x198021E98);
  }
}

void JSC::B3::ValueRep::emitRestore(uint64_t a1, JSC::MacroAssemblerARM64 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(unsigned __int8 *)(a1 + 8);
  v11 = v10 - 7;
  if ((a3 & 0x60) != 0)
  {
    if (v11 < 2)
    {
      v20 = *(_BYTE *)a1 & 0x7F;
      if ((*(_BYTE *)a1 & 0x60) != 0)
      {
        JSC::MacroAssemblerARM64::moveDouble(a2, (char)(v20 - 32), (char)((a3 & 0x7F) - 32), a4, a5, a6, a7, a8);
        return;
      }
    }
    else
    {
      if (v10 == 9)
      {
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)a2, (*(_QWORD *)a1 << 32) | 0x1DLL, (char)((a3 & 0x7F) - 32), a4, a5, a6, a7, a8);
        return;
      }
      if (v10 != 11)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x198022010);
      }
      v13 = *(_QWORD *)a1;
      v14 = JSC::MacroAssemblerARM64::scratchRegister(a2);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, v13, v14, v15, v16, v17, v18, v19);
      v20 = JSC::MacroAssemblerARM64::scratchRegister(a2);
    }
    JSC::MacroAssemblerARM64::move64ToDouble(a2, v20, (char)((a3 & 0x7F) - 32), a4, a5, a6, a7, a8);
    return;
  }
  if (v11 >= 2)
  {
    if (v10 == 11)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *(_QWORD *)a1, a3 & 0x7F, a4, a5, a6, a7, a8);
      return;
    }
    if (v10 == 9)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)a2, (*(_QWORD *)a1 << 32) | 0x1DLL, a3 & 0x7F, a4, a5, a6, a7, a8);
      return;
    }
    goto LABEL_19;
  }
  v12 = *(_BYTE *)a1 & 0x7F;
  if ((*(_BYTE *)a1 & 0x60) != 0)
    JSC::MacroAssemblerARM64::moveDoubleTo64(a2, (char)(v12 - 32), a3 & 0x7F, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::move(a2, v12, a3 & 0x7F, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::moveDoubleTo64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x9E660000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::move64ToDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * (v9 & 0x1F)) | 0x9E670000;
  a1[50] += 4;
}

uint64_t JSC::MacroAssemblerARM64::scratchRegister(JSC::MacroAssemblerARM64 *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 212))
  {
    *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
    return *((char *)this + 272);
  }
  else
  {
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::B3::Variable::deepDump(JSC::B3::Variable *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  unsigned int v6;
  const char *v7;
  WTF::PrintStream *v8;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)v4;
  v6 = *((_DWORD *)this + 1);
  if (v6 >= 0x80000000)
    v6 = 0x80000000;
  v7 = "Void";
  switch(v6)
  {
    case 0u:
      break;
    case 1u:
      v7 = "Int32";
      break;
    case 2u:
      v7 = "Int64";
      break;
    case 3u:
      v7 = "Float";
      break;
    case 4u:
      v7 = "Double";
      break;
    case 5u:
      v7 = "V128";
      break;
    default:
      if (v6 != 0x80000000)
      {
        __break(0xC471u);
        JUMPOUT(0x198022314);
      }
      v7 = "Tuple";
      break;
  }
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", v7);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%s", " var");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)this);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::VariableLiveness::VariableLiveness(uint64_t this, JSC::B3::Procedure *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[4];
  double v17;
  char v18;
  char **v19;
  char *v20;

  v2 = this;
  v3 = *((_QWORD *)a2 + 12);
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = v3;
  v4 = *((unsigned int *)a2 + 3);
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  if ((_DWORD)v4)
  {
    if (v4 >> 30)
    {
      __break(0xC471u);
      return this;
    }
    v5 = WTF::fastMalloc((WTF *)(4 * v4));
    *(_DWORD *)(v2 + 24) = v4;
    *(_QWORD *)(v2 + 16) = v5;
  }
  *(_DWORD *)(v2 + 28) = v4;
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(v2 + 48, *(unsigned int *)(*(_QWORD *)v3 + 60));
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(v2 + 64, *(unsigned int *)(*(_QWORD *)v3 + 60));
  v16[0] = "B3";
  v16[1] = 3;
  v16[2] = "VariableLiveness";
  v16[3] = 17;
  v17 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v13 = mach_absolute_time();
    v15 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v15 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v14) = dword_1ECF4400C;
    v17 = (double)(v13 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v14 * 1000000000.0);
  }
  WTF::Liveness<JSC::B3::VariableLivenessAdapter>::compute(v2, v6, v7, v8, v9, v10, v11, v12);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v16);
  return v2;
}

void WTF::Liveness<JSC::B3::VariableLivenessAdapter>::compute(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int *v20;
  unint64_t i;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int **v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int **v90;
  unsigned int **v91;
  _DWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  unint64_t v101;
  int *v102;
  uint64_t v103;
  int *v104;
  WTF *v105;
  WTF *v106;
  BOOL v107;
  WTF *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  WTF *v117;
  WTF *v118;
  WTF *__src;
  char v121;
  WTF *v122;
  uint64_t v123;
  _BYTE v124[16];
  uint64_t v125;
  int v126;

  v9 = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 60);
  if (v9)
  {
    do
    {
      --v9;
      v10 = **(_QWORD **)(a1 + 8);
      if (*(_DWORD *)(v10 + 60) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198022CE8);
      }
      v11 = *(unsigned int **)(*(_QWORD *)(v10 + 48) + 8 * v9);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 64) + 32 * *v11;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v13 = *(char **)v12;
        v14 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v14)
        {
          v15 = &v13[4 * v14];
          v16 = (int *)(v13 + 4);
          v17 = 4 * v14 - 4;
          while (v17)
          {
            v18 = *(v16 - 1);
            v19 = *v16++;
            v17 -= 4;
            if (v18 == v19)
            {
              v20 = v16 - 2;
              if (v17)
              {
                for (i = 0; i != v17; i += 4)
                {
                  v22 = v18;
                  v18 = v16[i / 4];
                  if (v22 != v18)
                  {
                    v20[1] = v18;
                    ++v20;
                  }
                }
              }
              v15 = (char *)(v20 + 1);
              break;
            }
          }
        }
        else
        {
          v15 = *(char **)v12;
        }
        *(_DWORD *)(v12 + 12) = (unint64_t)(v15 - v13) >> 2;
      }
    }
    while (v9);
    v23 = *(unsigned int *)(**(_QWORD **)(a1 + 8) + 60);
    v125 = 0x8000000000000000;
    if ((_DWORD)v23)
    {
      v24 = v23 - 1;
      v25 = 0x8000000000000000;
      while (1)
      {
        if (v25 < 0)
          v26 = 63;
        else
          v26 = *(_QWORD *)(2 * v25);
        a2 = (void *)(v24 + 1);
        if (v26 < v24 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v125, (unint64_t)a2, 0);
          v25 = v125;
        }
        v27 = v25 >= 0 ? (uint64_t *)(2 * v25 + 8) : &v125;
        *(uint64_t *)((char *)v27 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        if (!v24)
          break;
        v25 = v125;
        --v24;
      }
    }
  }
  else
  {
    v125 = 0x8000000000000000;
  }
  v122 = (WTF *)v124;
  v28 = (int **)(a1 + 32);
  v123 = 4;
LABEL_31:
  v29 = *(unsigned int *)(**(_QWORD **)(a1 + 8) + 60);
  if ((_DWORD)v29)
  {
    v121 = 0;
    while (1)
    {
      --v29;
      v30 = **(_QWORD **)(a1 + 8);
      if (*(_DWORD *)(v30 + 60) <= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x198022CE0);
      }
      v31 = *(unsigned int **)(*(_QWORD *)(v30 + 48) + 8 * v29);
      if (v31)
      {
        v32 = v125 >= 0 ? (uint64_t *)(2 * v125 + 8) : &v125;
        v33 = (v29 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v34 = *(uint64_t *)((char *)v32 + v33);
        *(uint64_t *)((char *)v32 + v33) = v34 & ~(1 << v29);
        if ((v34 & (1 << v29)) != 0)
        {
          *(_DWORD *)(a1 + 44) = 0;
          v35 = *(_QWORD *)(a1 + 64) + 32 * *v31;
          v36 = *(unsigned int *)(v35 + 12);
          if ((_DWORD)v36)
          {
            v37 = *(unsigned int **)v35;
            v38 = *(_QWORD *)(a1 + 16);
            v39 = 4 * v36;
            do
            {
              v40 = *v37;
              v41 = *(unsigned int *)(v38 + 4 * v40);
              v42 = *(unsigned int *)(a1 + 44);
              if (v42 <= v41 || (*v28)[v41] != (_DWORD)v40)
              {
                v126 = *v37;
                if ((_DWORD)v42 == *(_DWORD *)(a1 + 40))
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 44)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v42 + 1, (unint64_t)&v126);
                  v38 = *(_QWORD *)(a1 + 16);
                }
                else
                {
                  (*v28)[v42] = v40;
                }
                ++*(_DWORD *)(a1 + 44);
                *(_DWORD *)(v38 + 4 * v40) = v42;
              }
              ++v37;
              v39 -= 4;
            }
            while (v39);
          }
          v43 = v31[5];
          if ((_DWORD)v43)
          {
            do
            {
              --v43;
              v44 = v31[5];
              if (v44 > v43)
              {
                v45 = *(_QWORD *)(*((_QWORD *)v31 + 1) + 8 * v43);
                if (v45)
                {
                  if (*(_WORD *)(v45 + 12) == 9)
                  {
                    v51 = **(unsigned int **)(v45 + 40);
                    v52 = *(_QWORD *)(a1 + 16);
                    v53 = *(unsigned int *)(v52 + 4 * v51);
                    v54 = *(unsigned int *)(a1 + 44);
                    if (v54 > v53)
                    {
                      v55 = *v28;
                      if ((*v28)[v53] == (_DWORD)v51)
                      {
                        v56 = v55[v54 - 1];
                        v55[v53] = v56;
                        *(_DWORD *)(v52 + 4 * v56) = v53;
                        --*(_DWORD *)(a1 + 44);
                        v44 = v31[5];
                      }
                    }
                  }
                }
              }
              if (v44 > v43)
              {
                v46 = *(_QWORD *)(*((_QWORD *)v31 + 1) + 8 * v43);
                if (v46)
                {
                  if (*(_WORD *)(v46 + 12) == 10)
                  {
                    v47 = **(unsigned int **)(v46 + 40);
                    v48 = *(_QWORD *)(a1 + 16);
                    v49 = *(unsigned int *)(v48 + 4 * v47);
                    v50 = *(unsigned int *)(a1 + 44);
                    if (v50 <= v49 || (*v28)[v49] != (_DWORD)v47)
                    {
                      v126 = v47;
                      if ((_DWORD)v50 == *(_DWORD *)(a1 + 40))
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 44)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v50 + 1, (unint64_t)&v126);
                        v48 = *(_QWORD *)(a1 + 16);
                      }
                      else
                      {
                        (*v28)[v50] = v47;
                      }
                      ++*(_DWORD *)(a1 + 44);
                      *(_DWORD *)(v48 + 4 * v47) = v50;
                    }
                  }
                }
              }
            }
            while (v43);
          }
          v57 = *(_QWORD *)(a1 + 48) + 32 * *v31;
          v58 = *(_DWORD *)(a1 + 44);
          v59 = *(unsigned int *)(v57 + 12);
          if ((_DWORD)v59 == v58)
          {
            *(_DWORD *)(a1 + 44) = 0;
            goto LABEL_39;
          }
          v60 = *(unsigned int **)v57;
          if ((_DWORD)v59)
          {
            v61 = *(_QWORD *)(a1 + 16);
            v62 = 4 * v59;
            v63 = *(unsigned int **)v57;
            do
            {
              v64 = *v63;
              v65 = *(unsigned int *)(v61 + 4 * v64);
              if (v58 > v65)
              {
                v66 = *v28;
                if ((*v28)[v65] == (_DWORD)v64)
                {
                  v67 = v66[v58 - 1];
                  v66[v65] = v67;
                  *(_DWORD *)(v61 + 4 * v67) = v65;
                  v58 = *(_DWORD *)(a1 + 44) - 1;
                  *(_DWORD *)(a1 + 44) = v58;
                }
              }
              ++v63;
              v62 -= 4;
            }
            while (v62);
          }
          if (v58)
          {
            v68 = *v28;
            v69 = *(unsigned int *)(v57 + 12);
            v70 = v69 + v58;
            if (v70 <= *(unsigned int *)(v57 + 8))
            {
              v79 = v60;
            }
            else
            {
              if (v70 < 5)
              {
                v71 = (void *)(v57 + 16);
                *(_QWORD *)v57 = v57 + 16;
                *(_DWORD *)(v57 + 8) = 4;
              }
              else
              {
                if (v70 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198022CFCLL);
                }
                v71 = (void *)WTF::fastMalloc((WTF *)(4 * v70));
                *(_DWORD *)(v57 + 8) = v70;
                *(_QWORD *)v57 = v71;
              }
              memcpy(v71, v60, 4 * v69);
              v79 = *(unsigned int **)v57;
              if ((unsigned int *)(v57 + 16) != v60 && v60)
              {
                if (v79 == v60)
                {
                  *(_QWORD *)v57 = 0;
                  *(_DWORD *)(v57 + 8) = 0;
                }
                WTF::fastFree((unint64_t)v60, v72, v73, v74, v75, v76, v77, v78);
                v79 = *(unsigned int **)v57;
              }
            }
            v80 = *(_DWORD *)(v57 + 12);
            v81 = 4 * v58;
            do
            {
              v82 = *v68++;
              v79[v80] = v82;
              v80 = *(_DWORD *)(v57 + 12) + 1;
              *(_DWORD *)(v57 + 12) = v80;
              v81 -= 4;
            }
            while (v81);
            v83 = *(unsigned int *)(a1 + 44);
            v84 = 126 - 2 * __clz(v83);
            if ((_DWORD)v83)
              v85 = v84;
            else
              v85 = 0;
            std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(*(unsigned int **)(a1 + 32), (char *)(*(_QWORD *)(a1 + 32) + 4 * v83), (uint64_t)&v126, v85, 1);
            if (*(_DWORD *)(a1 + 44))
            {
              v86 = 0;
              v87 = *(_QWORD *)(a1 + 32);
              v88 = *(_QWORD *)(a1 + 16);
              do
              {
                *(_DWORD *)(v88 + 4 * *(unsigned int *)(v87 + 4 * v86)) = v86;
                ++v86;
              }
              while (v86 < *(unsigned int *)(a1 + 44));
            }
            v89 = v31[9];
            if ((_DWORD)v89)
              break;
          }
        }
      }
LABEL_39:
      if (!v29)
      {
        if ((v121 & 1) == 0)
          goto LABEL_141;
        goto LABEL_31;
      }
    }
    v90 = (unsigned int **)*((_QWORD *)v31 + 3);
    v91 = &v90[v89];
    while (1)
    {
      v92 = *v90;
      v93 = *(_QWORD *)(a1 + 64);
      v94 = v93 + 32 * **v90;
      v95 = *(unsigned int *)(v94 + 12);
      if (!(_DWORD)v95)
        break;
      v97 = *(unsigned int *)(a1 + 44) + v95;
      v98 = HIDWORD(v123);
      if (v97 > HIDWORD(v123) && v97 > v123)
      {
        v114 = v123 + ((unint64_t)v123 >> 2);
        if (v114 >= 0x10)
          v115 = v114 + 1;
        else
          v115 = 16;
        if (v115 <= v97)
          v116 = v97;
        else
          v116 = v115;
        __src = v122;
        if (v116 < 5)
        {
          v117 = (WTF *)v124;
          v122 = (WTF *)v124;
          LODWORD(v123) = 4;
        }
        else
        {
          if (v116 >> 30)
          {
LABEL_159:
            __break(0xC471u);
            JUMPOUT(0x198022CB0);
          }
          v117 = (WTF *)WTF::fastMalloc((WTF *)(4 * v116));
          LODWORD(v123) = v116;
          v122 = v117;
        }
        memcpy(v117, __src, 4 * v98);
        if (v124 != (_BYTE *)__src && __src)
        {
          if (v122 == __src)
          {
            v122 = 0;
            LODWORD(v123) = 0;
          }
          WTF::fastFree((unint64_t)__src, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      HIDWORD(v123) = v97;
      v99 = *(int **)v94;
      v100 = *(unsigned int *)(v94 + 12);
      v101 = *(_QWORD *)v94 + 4 * v100;
      v102 = *(int **)(a1 + 32);
      v103 = *(unsigned int *)(a1 + 44);
      v104 = &v102[v103];
      v105 = v122;
      v107 = (_DWORD)v100 == 0;
      v106 = v122;
      v107 = v107 || (_DWORD)v103 == 0;
      if (!v107)
      {
LABEL_104:
        while (2)
        {
          v108 = v106;
          while (1)
          {
            v109 = *v99;
            v110 = *v102;
            if (*v99 < *v102)
            {
              *(_DWORD *)v108 = v109;
              v106 = (WTF *)((char *)v108 + 4);
              if ((unint64_t)++v99 < v101)
                goto LABEL_104;
              goto LABEL_113;
            }
            if (v109 == v110)
              break;
            v106 = (WTF *)((char *)v108 + 4);
            *(_DWORD *)v108 = v110;
            ++v102;
            v108 = (WTF *)((char *)v108 + 4);
            if (v102 >= v104)
              goto LABEL_115;
          }
          *(_DWORD *)v108 = v109;
          v106 = (WTF *)((char *)v108 + 4);
          ++v99;
          ++v102;
          if ((unint64_t)v99 < v101 && v102 < v104)
            continue;
          break;
        }
LABEL_113:
        v106 = (WTF *)((char *)v108 + 4);
      }
LABEL_115:
      while ((unint64_t)v99 < v101)
      {
        v111 = *v99++;
        *(_DWORD *)v106 = v111;
        v106 = (WTF *)((char *)v106 + 4);
      }
      while (v102 < v104)
      {
        v112 = *v102++;
        *(_DWORD *)v106 = v112;
        v106 = (WTF *)((char *)v106 + 4);
      }
      HIDWORD(v123) = (unint64_t)(v106 - v105) >> 2;
      v113 = *(unsigned int *)(v94 + 12);
      if (HIDWORD(v123) != v113)
      {
        if (HIDWORD(v123) <= v113)
          goto LABEL_159;
        WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(v94, (const void **)&v122, a3, a4, a5, a6, a7, a8);
        goto LABEL_92;
      }
LABEL_96:
      if (++v90 == v91)
        goto LABEL_39;
    }
    WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>(v93 + 32 * **v90, (const void **)(a1 + 32), a3, a4, a5, a6, a7, a8);
LABEL_92:
    if (v125 >= 0)
      v96 = (uint64_t *)(2 * v125 + 8);
    else
      v96 = &v125;
    v121 = 1;
    *(uint64_t *)((char *)v96 + (((unint64_t)*v92 >> 3) & 0x1FFFFFF8)) |= 1 << *v92;
    goto LABEL_96;
  }
LABEL_141:
  v118 = v122;
  if (v124 != (_BYTE *)v122 && v122 != 0)
  {
    v122 = 0;
    LODWORD(v123) = 0;
    WTF::fastFree((unint64_t)v118, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((v125 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v125, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Liveness<JSC::B3::VariableLivenessAdapter>::~Liveness(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;

  v9 = *(unsigned int *)(a1 + 76);
  v10 = *(_QWORD *)(a1 + 64);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    v12 = v10 + 16;
    do
    {
      v13 = *(_QWORD *)(v12 - 16);
      if (v12 != v13 && v13 != 0)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 32;
      v11 -= 32;
    }
    while (v11);
    v10 = *(_QWORD *)(a1 + 64);
  }
  if (v10)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(unsigned int *)(a1 + 60);
  v16 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v15)
  {
    v17 = 32 * v15;
    v18 = v16 + 16;
    do
    {
      v19 = *(_QWORD *)(v18 - 16);
      if (v18 != v19 && v19 != 0)
      {
        *(_QWORD *)(v18 - 16) = 0;
        *(_DWORD *)(v18 - 8) = 0;
        WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 += 32;
      v17 -= 32;
    }
    while (v17);
    v16 = *(_QWORD *)(a1 + 48);
  }
  if (v16)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 16);
  if (v22)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::B3::VariableValue::~VariableValue(JSC::B3::VariableValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::VariableValue::~VariableValue(JSC::B3::VariableValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::VariableValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  uint64_t v25;
  int v26;
  char v27;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v25, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v25 = v20;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v27, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v25, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v25 = v21;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v27, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v23 = v22;
  if (v5)
  {
    WTF::PrintStream::printf(v22, "%s", "var");
    WTF::PrintStream::printf(v23, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v22, "%s");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

_QWORD *JSC::B3::VariableValue::VariableValue(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)JSC::B3::Value::Value<>(a1, 0, a2, 0, 1, a3, a5);
  *result = off_1E357F0F8;
  result[5] = a4;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)JSC::B3::Value::Value<>(a1, 0, a2, 0, 1, a3, a5);
  *result = off_1E357F0F8;
  result[5] = a4;
  return result;
}

uint64_t JSC::B3::VariableValue::VariableValue(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = *(_DWORD *)(a4 + 4);
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = v4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  if (a2 >= 0xA0u)
  {
    result = 249;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)result = off_1E357F0F8;
    *(_QWORD *)(result + 40) = a4;
  }
  return result;
}

{
  int v4;

  v4 = *(_DWORD *)(a4 + 4);
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = v4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  if (a2 >= 0xA0u)
  {
    result = 249;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)result = off_1E357F0F8;
    *(_QWORD *)(result + 40) = a4;
  }
  return result;
}

void JSC::B3::WasmAddressValue::~WasmAddressValue(JSC::B3::WasmAddressValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::WasmAddressValue::~WasmAddressValue(JSC::B3::WasmAddressValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::WasmAddressValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  char *v24;
  WTF::PrintStream *v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  char v33;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v31, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v31 = v20;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v31, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v31 = v21;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v22 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *(char *)(a1 + 40)];
  v23 = *v22;
  v24 = v22[1];
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  WTF::PrintStream::printf(v25, "%s", "%");
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v25 + 32))(v25);
  if (v23)
  {
    v28 = (_DWORD)v24 - 1;
    if (!v24)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v28, (uint64_t)&v31, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v31 = v29;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v25 + 40))(v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

uint64_t JSC::B3::WasmAddressValue::WasmAddressValue(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 80;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = a3;
  *(_QWORD *)result = off_1E357F2A0;
  *(_BYTE *)(result + 40) = a4;
  return result;
}

{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 80;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = a3;
  *(_QWORD *)result = off_1E357F2A0;
  *(_BYTE *)(result + 40) = a4;
  return result;
}

void JSC::B3::WasmBoundsCheckValue::~WasmBoundsCheckValue(JSC::B3::WasmBoundsCheckValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::WasmBoundsCheckValue::~WasmBoundsCheckValue(JSC::B3::WasmBoundsCheckValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::WasmBoundsCheckValue::WasmBoundsCheckValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 89;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)a1, 1, a4);
  *(_QWORD *)a1 = off_1E357F448;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  return a1;
}

{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 89;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)a1, 1, a4);
  *(_QWORD *)a1 = off_1E357F448;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  return a1;
}

uint64_t JSC::B3::WasmBoundsCheckValue::WasmBoundsCheckValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 89;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)a1, 1, a3);
  *(_QWORD *)a1 = off_1E357F448;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 48) = a5;
  return a1;
}

{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 89;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)a1, 1, a3);
  *(_QWORD *)a1 = off_1E357F448;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 48) = a5;
  return a1;
}

uint64_t JSC::B3::WasmBoundsCheckValue::dumpMeta(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  WTF::PrintStream *v47;
  float v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  WTF::PrintStream *v55;
  float v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  WTF::PrintStream *v61;
  float v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  char *v67;
  char *v68;
  WTF::PrintStream *v69;
  WTF::PrintStream *v70;
  float v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if (v6 == 1)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v16 = (WTF::PrintStream *)v15;
    if (*(_BYTE *)(a2 + 32))
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v18 = *(char **)a2;
      v19 = *(_QWORD *)(a2 + 8);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      if (v18)
      {
        v22 = v19 - 1;
        if (!v19)
          v22 = 0;
        WTF::StringImpl::utf8ForCharacters(v18, v22, (uint64_t)&v75, v21);
      }
      else
      {
        v36 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = 0;
        *(_BYTE *)(v36 + 16) = 0;
        v75 = v36;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v20, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
    }
    else
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v30 = *(char **)(a2 + 16);
      v31 = *(_QWORD *)(a2 + 24);
      v32 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
      if (v30)
      {
        v34 = v31 - 1;
        if (!v31)
          v34 = 0;
        WTF::StringImpl::utf8ForCharacters(v30, v34, (uint64_t)&v75, v33);
      }
      else
      {
        v51 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v51 = 1;
        *(_QWORD *)(v51 + 8) = 0;
        *(_BYTE *)(v51 + 16) = 0;
        v75 = v51;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v32, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v16, "%s", "offset = ");
    WTF::PrintStream::printf(v16, "%u", *(_DWORD *)(v5 + 40));
    if (*(_BYTE *)(a2 + 32))
    {
      v52 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
      v53 = *(char **)a2;
      v54 = *(_QWORD *)(a2 + 8);
      v55 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
      if (v53)
      {
        v57 = v54 - 1;
        if (!v54)
          v57 = 0;
        WTF::StringImpl::utf8ForCharacters(v53, v57, (uint64_t)&v75, v56);
      }
      else
      {
        v64 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v64 = 1;
        *(_QWORD *)(v64 + 8) = 0;
        *(_BYTE *)(v64 + 16) = 0;
        v75 = v64;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v55, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
    }
    else
    {
      v58 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
      v59 = *(char **)(a2 + 16);
      v60 = *(_QWORD *)(a2 + 24);
      v61 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58);
      if (v59)
      {
        v63 = v60 - 1;
        if (!v60)
          v63 = 0;
        WTF::StringImpl::utf8ForCharacters(v59, v63, (uint64_t)&v75, v62);
      }
      else
      {
        v74 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v74 = 1;
        *(_QWORD *)(v74 + 8) = 0;
        *(_BYTE *)(v74 + 16) = 0;
        v75 = v74;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v61, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v16, "%s", "maximum = ");
    WTF::PrintStream::printf(v16, "%lu", *(_QWORD *)(v5 + 48));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
  else if (!v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v8 = (WTF::PrintStream *)v7;
    if (*(_BYTE *)(a2 + 32))
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v10 = *(char **)a2;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      if (v10)
      {
        v14 = v11 - 1;
        if (!v11)
          v14 = 0;
        WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v75, v13);
      }
      else
      {
        v35 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = 0;
        *(_BYTE *)(v35 + 16) = 0;
        v75 = v35;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v12, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    }
    else
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v24 = *(char **)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 24);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
      if (v24)
      {
        v28 = v25 - 1;
        if (!v25)
          v28 = 0;
        WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v75, v27);
      }
      else
      {
        v37 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = 0;
        *(_BYTE *)(v37 + 16) = 0;
        v75 = v37;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v26, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v8, "%s", "offset = ");
    WTF::PrintStream::printf(v8, "%u", *(_DWORD *)(v5 + 40));
    if (*(_BYTE *)(a2 + 32))
    {
      v38 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      v39 = *(char **)a2;
      v40 = *(_QWORD *)(a2 + 8);
      v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
      if (v39)
      {
        v43 = v40 - 1;
        if (!v40)
          v43 = 0;
        WTF::StringImpl::utf8ForCharacters(v39, v43, (uint64_t)&v75, v42);
      }
      else
      {
        v50 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v50 = 1;
        *(_QWORD *)(v50 + 8) = 0;
        *(_BYTE *)(v50 + 16) = 0;
        v75 = v50;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v41, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    }
    else
    {
      v44 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      v45 = *(char **)(a2 + 16);
      v46 = *(_QWORD *)(a2 + 24);
      v47 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
      if (v45)
      {
        v49 = v46 - 1;
        if (!v46)
          v49 = 0;
        WTF::StringImpl::utf8ForCharacters(v45, v49, (uint64_t)&v75, v48);
      }
      else
      {
        v65 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v65 = 1;
        *(_QWORD *)(v65 + 8) = 0;
        *(_BYTE *)(v65 + 16) = 0;
        v75 = v65;
        v76 = 0;
      }
      WTF::printExpectedCStringHelper(v47, "StringView", &v75);
      if (v76 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v8, "%s", "pinnedSize = ");
    v66 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *(char *)(v5 + 48)];
    v67 = *v66;
    v68 = v66[1];
    v69 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v69, "%s", "%");
    v70 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v69 + 32))(v69);
    if (v67)
    {
      v72 = (_DWORD)v68 - 1;
      if (!v68)
        v72 = 0;
      WTF::StringImpl::utf8ForCharacters(v67, v72, (uint64_t)&v75, v71);
    }
    else
    {
      v73 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v73 = 1;
      *(_QWORD *)(v73 + 8) = 0;
      *(_BYTE *)(v73 + 16) = 0;
      v75 = v73;
      v76 = 0;
    }
    WTF::printExpectedCStringHelper(v70, "StringView", &v75);
    if (v76 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v76])(&v77, &v75);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v69 + 40))(v69);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
  return result;
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*>(uint64_t a1, __int16 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch((char)a2)
  {
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -106:
    case -105:
      *(_QWORD *)a1 = off_1E357F5F0;
      *(_DWORD *)(a1 + 8) = -1;
      *(_WORD *)(a1 + 12) = a2;
      *(_DWORD *)(a1 + 16) = a3;
      *(_BYTE *)(a1 + 20) = 2;
      *(_QWORD *)(a1 + 24) = a4;
      *(_QWORD *)(a1 + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 2, a5, a6);
      return a1;
    default:
      JSC::B3::Value::badKind(a2, 2);
  }
}

uint64_t WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  if (a2)
  {
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19802447CLL);
    }
    v4 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v4;
    v5 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      v7 = v4 + 16;
      do
      {
        *(_QWORD *)(v7 - 16) = v7;
        *(_DWORD *)(v7 - 8) = 4;
        *(_DWORD *)(v7 - 4) = 0;
        v7 += 32;
        v6 -= 32;
      }
      while (v6);
    }
  }
  return a1;
}

unint64_t WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>(unint64_t result, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = result;
  v10 = *(_DWORD *)(result + 12);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
  }
  else
  {
    v12 = *(_DWORD *)(result + 8);
    if (v11 > v12)
    {
      if (v12)
      {
        if (v10)
          *(_DWORD *)(result + 12) = 0;
        result = *(_QWORD *)result;
        if (v9 + 16 != *(_QWORD *)v9 && result)
        {
          *(_QWORD *)v9 = 0;
          *(_DWORD *)(v9 + 8) = 0;
          WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
          result = *(_QWORD *)v9;
        }
        if (result)
        {
          v15 = *(_DWORD *)(v9 + 8);
        }
        else
        {
          *(_QWORD *)v9 = v9 + 16;
          v15 = 4;
          *(_DWORD *)(v9 + 8) = 4;
        }
      }
      else
      {
        v15 = 0;
      }
      v16 = *((unsigned int *)a2 + 3);
      if (v15 < v16)
      {
        v17 = *(const void **)v9;
        v18 = *(unsigned int *)(v9 + 12);
        if (v16 < 5)
        {
          v19 = (void *)(v9 + 16);
          *(_QWORD *)v9 = v9 + 16;
          *(_DWORD *)(v9 + 8) = 4;
        }
        else
        {
          if (v16 >> 30)
          {
            __break(0xC471u);
            return result;
          }
          v19 = (void *)WTF::fastMalloc((WTF *)(4 * v16));
          *(_DWORD *)(v9 + 8) = v16;
          *(_QWORD *)v9 = v19;
        }
        memcpy(v19, v17, 4 * v18);
        if ((const void *)(v9 + 16) != v17 && v17)
        {
          if (*(const void **)v9 == v17)
          {
            *(_QWORD *)v9 = 0;
            *(_DWORD *)(v9 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v17, v20, v21, v22, v23, v24, v25, v26);
        }
      }
    }
    v11 = *(_DWORD *)(v9 + 12);
  }
  v13 = *(char **)v9;
  if (v11)
  {
    memmove(v13, *a2, 4 * v11);
    v14 = *(unsigned int *)(v9 + 12);
    v13 = *(char **)v9;
  }
  else
  {
    v14 = 0;
  }
  memcpy(&v13[4 * v14], (char *)*a2 + 4 * v14, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v14));
  *(_DWORD *)(v9 + 12) = *((_DWORD *)a2 + 3);
  return v9;
}

unint64_t WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v8 = result;
  if (a2 == (const void **)result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
    goto LABEL_19;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
    goto LABEL_18;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v13 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      *(_QWORD *)v8 = v8 + 16;
      v13 = 4;
      *(_DWORD *)(v8 + 8) = 4;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *((unsigned int *)a2 + 3);
  if (v13 >= v14)
  {
LABEL_18:
    v11 = *(_DWORD *)(v8 + 12);
LABEL_19:
    v25 = *(char **)v8;
    if (v11)
    {
      memmove(v25, *a2, 4 * v11);
      v26 = *(unsigned int *)(v8 + 12);
      v25 = *(char **)v8;
    }
    else
    {
      v26 = 0;
    }
    memcpy(&v25[4 * v26], (char *)*a2 + 4 * v26, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v26));
    *(_DWORD *)(v8 + 12) = *((_DWORD *)a2 + 3);
    return v8;
  }
  v15 = *(const void **)v8;
  v16 = *(unsigned int *)(v8 + 12);
  if (v14 < 5)
  {
    v17 = (void *)(v8 + 16);
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 4;
    goto LABEL_16;
  }
  if (!(v14 >> 30))
  {
    v17 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
    *(_DWORD *)(v8 + 8) = v14;
    *(_QWORD *)v8 = v17;
LABEL_16:
    memcpy(v17, v15, 4 * v16);
    if ((const void *)(v8 + 16) != v15 && v15)
    {
      if (*(const void **)v8 == v15)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v15, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  char v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;

  while (2)
  {
    v5 = 1 - a4;
LABEL_2:
    v6 = result;
    v7 = v5;
    v8 = a2 - (char *)result;
    v9 = (a2 - (char *)result) >> 2;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v10 = *((_DWORD *)a2 - 1);
        v11 = *result;
        if (v10 < *result)
        {
          *result = v10;
          *((_DWORD *)a2 - 1) = v11;
        }
        return result;
      case 3uLL:
        v12 = *result;
        v13 = result[1];
        v14 = *((_DWORD *)a2 - 1);
        if (v13 < *result)
        {
          if (v14 >= v13)
          {
            *result = v13;
            result[1] = v12;
            v41 = *((_DWORD *)a2 - 1);
            if (v41 >= v12)
              return result;
            result[1] = v41;
          }
          else
          {
            *result = v14;
          }
          *((_DWORD *)a2 - 1) = v12;
          return result;
        }
        if (v14 < v13)
        {
          result[1] = v14;
          *((_DWORD *)a2 - 1) = v13;
          v32 = result[1];
          goto LABEL_24;
        }
        return result;
      case 4uLL:
        v15 = result + 1;
        v16 = (unsigned int *)result[1];
        v17 = result + 2;
        v18 = result[2];
        v19 = (unsigned int *)*result;
        if (v16 >= v19)
        {
          if (v18 >= v16)
            goto LABEL_41;
          *v15 = v18;
          *v17 = v16;
          v20 = result;
          v21 = result + 1;
          result = v16;
          if (v18 >= v19)
            goto LABEL_29;
        }
        else
        {
          v20 = result;
          v21 = result + 2;
          result = (unsigned int *)*result;
          if (v18 >= v16)
          {
            *v6 = v16;
            v6[1] = v19;
            v20 = v6 + 1;
            v21 = v6 + 2;
            result = v19;
            if (v18 >= v19)
            {
LABEL_41:
              LODWORD(v16) = v18;
LABEL_29:
              v34 = *((_DWORD *)a2 - 1);
              if (v34 < v16)
              {
                *v17 = v34;
                *((_DWORD *)a2 - 1) = (_DWORD)v16;
                v35 = *v17;
                v36 = *v15;
                if (v35 < v36)
                {
                  v6[1] = v35;
                  v6[2] = v36;
                  v37 = *v6;
                  if (v35 < *v6)
                  {
                    *v6 = v35;
                    v6[1] = v37;
                  }
                }
              }
              return result;
            }
          }
        }
        *v20 = v18;
        *v21 = (_DWORD)v19;
        LODWORD(v16) = (_DWORD)result;
        goto LABEL_29;
      case 5uLL:
        v22 = result + 1;
        v23 = result[1];
        v25 = result + 2;
        v24 = (unsigned int *)result[2];
        v26 = (unsigned int *)*result;
        if (v23 >= v26)
        {
          if (v24 >= v23)
          {
            v29 = *result;
            LODWORD(v26) = result[1];
          }
          else
          {
            v27 = result;
            v28 = result + 1;
            *v22 = v24;
            *v25 = v23;
            v29 = v24;
            result = v26;
            v30 = v23;
            if (v24 < v26)
              goto LABEL_17;
            v29 = v26;
            LODWORD(v26) = (_DWORD)v24;
            LODWORD(v24) = v23;
          }
        }
        else
        {
          if (v24 < v23)
          {
            v27 = result;
            v28 = result + 2;
            v29 = result[2];
            result = (unsigned int *)result[1];
            v30 = *v6;
LABEL_17:
            *v27 = (_DWORD)v24;
            *v28 = (_DWORD)v26;
            LODWORD(v26) = (_DWORD)result;
            LODWORD(v24) = v30;
            goto LABEL_18;
          }
          v27 = result + 1;
          v28 = result + 2;
          *result = v23;
          result[1] = v26;
          v29 = v23;
          result = v24;
          v30 = v26;
          if (v24 < v26)
            goto LABEL_17;
          v29 = v23;
        }
LABEL_18:
        v31 = v6[3];
        if (v31 >= v24)
        {
          LODWORD(v24) = v6[3];
        }
        else
        {
          v6[2] = v31;
          v6[3] = v24;
          if (v31 < v26)
          {
            *v22 = v31;
            *v25 = v26;
            if (v31 < v29)
            {
              *v6 = v31;
              v6[1] = v29;
            }
          }
        }
        v38 = *((_DWORD *)a2 - 1);
        if (v38 < v24)
        {
          v6[3] = v38;
          *((_DWORD *)a2 - 1) = (_DWORD)v24;
          v39 = v6[2];
          v32 = v6[3];
          if (v32 < v39)
          {
            v6[2] = v32;
            v6[3] = v39;
            v40 = v6[1];
            if (v32 < v40)
            {
              v6[1] = v32;
              v6[2] = v40;
LABEL_24:
              v33 = *v6;
              if (v32 < *v6)
              {
                *v6 = v32;
                v6[1] = v33;
              }
            }
          }
        }
        return result;
      default:
        v42 = a5;
        v59 = a3;
        v60 = result;
        v61 = (unsigned int *)a2;
        if (v8 > 95)
        {
          if (v7 == 1)
          {
            if (result != (unsigned int *)a2)
              return (unsigned int *)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,unsigned int *>((char *)result, a2, a2);
            return result;
          }
          v51 = (unsigned int *)(a2 - 4);
          v52 = v9 >> 1;
          v53 = &result[v9 >> 1];
          if ((unint64_t)v8 >= 0x201)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(result, &result[v9 >> 1], v51);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(v60 + 1, v53 - 1, v61 - 2);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(v60 + 2, &v60[v52 + 1], v61 - 3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(v53 - 1, v53, &v60[v52 + 1]);
            v58 = *v60;
            *v60 = *v53;
            *v53 = v58;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(&result[v9 >> 1], result, v51);
          }
          if ((v42 & 1) == 0 && *(v60 - 1) >= *v60)
          {
            result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,unsigned int *,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &>(v60, v61);
            goto LABEL_66;
          }
          v54 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,unsigned int *,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &>(v60, v61);
          a3 = v59;
          v55 = v54;
          LOBYTE(a5) = v42;
          if ((v56 & 1) == 0)
            goto LABEL_65;
          v57 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(v60, v54);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(v55 + 1, v61))
          {
            v5 = v7 + 1;
            a2 = (char *)v61;
            a3 = v59;
            a5 = v42;
            result = v55 + 1;
            if (!v57)
            {
LABEL_65:
              std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(v60, v55, a3, -v7, a5 & 1);
              result = v55 + 1;
LABEL_66:
              a5 = 0;
              a4 = -v7;
              a2 = (char *)v61;
              a3 = v59;
              continue;
            }
            goto LABEL_2;
          }
          a4 = -v7;
          a2 = (char *)v55;
          a3 = v59;
          result = v60;
          a5 = v42;
          if (v57)
            return result;
          continue;
        }
        if ((a5 & 1) == 0)
          return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(result, (unsigned int *)a2);
        v43 = result;
        if (result != (unsigned int *)a2)
        {
          v44 = result + 1;
          if (result + 1 != (unsigned int *)a2)
          {
            v45 = 4;
            do
            {
              v47 = *v43;
              v46 = v43[1];
              v43 = v44;
              if (v46 < v47)
              {
                v48 = v45;
                v49 = result;
                while (1)
                {
                  *(unsigned int *)((char *)result + v48) = v47;
                  v50 = v48 - 4;
                  if (v48 == 4)
                    break;
                  v47 = *(unsigned int *)((char *)result + v48 - 8);
                  v48 -= 4;
                  if (v46 >= v47)
                  {
                    v49 = (unsigned int *)((char *)result + v50);
                    break;
                  }
                }
                *v49 = v46;
              }
              v44 = v43 + 1;
              v45 += 4;
            }
            while (v43 + 1 != (unsigned int *)a2);
          }
        }
        return result;
    }
  }
}

unsigned int *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = 1;
      while (1)
      {
        v5 = result[v3];
        v3 = v4;
        v6 = *v2;
        if (*v2 < v5)
          break;
LABEL_9:
        v4 = v3 + 1;
        if (++v2 == a2)
          return result;
      }
      v7 = 0;
      while (1)
      {
        v8 = &v2[v7];
        *v8 = v5;
        if (!(v3 + v7))
          break;
        v5 = *(v8 - 2);
        --v7;
        if (v6 >= v5)
        {
          v2[v7] = v6;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,unsigned int *,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &>(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  int *v5;
  int *v6;
  int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = *result;
  if (*result < *(a2 - 1))
  {
    v3 = result + 1;
    while (v3 != a2)
    {
      v4 = *v3++;
      if (v2 < v4)
      {
        v5 = (int *)(v3 - 1);
        goto LABEL_9;
      }
    }
    goto LABEL_25;
  }
  v6 = (int *)(result + 1);
  do
  {
    v5 = v6;
    if (v6 >= (int *)a2)
      break;
    ++v6;
  }
  while (v2 >= *v5);
LABEL_9:
  v7 = (int *)a2;
  if (v5 < (int *)a2)
  {
    v7 = (int *)a2;
    while (v7 != (int *)result)
    {
      v8 = *--v7;
      if (v2 >= v8)
        goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_13:
  if (v5 < v7)
  {
    v9 = *v5;
    v10 = *v7;
LABEL_15:
    *v5 = v10;
    v11 = (unsigned int *)(v5 + 1);
    *v7 = v9;
    while (v11 != a2)
    {
      v12 = *v11++;
      v9 = v12;
      if (v2 < v12)
      {
        v5 = (int *)(v11 - 1);
        while (v7 != (int *)result)
        {
          v13 = *--v7;
          v10 = v13;
          if (v2 >= v13)
          {
            if (v5 < v7)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_22:
  if (v5 - 1 != (int *)result)
    *result = *(v5 - 1);
  *(v5 - 1) = v2;
  return (unsigned int *)v5;
}

unsigned int *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,unsigned int *,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &>(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  v2 = 0;
  v3 = *result;
  do
  {
    v4 = &result[v2 + 1];
    if (v4 == a2)
      goto LABEL_26;
    v5 = *v4;
    ++v2;
  }
  while (v5 < v3);
  v6 = &result[v2];
  if (v2 != 1)
  {
    v7 = a2;
    while (v7 != result)
    {
      v8 = *--v7;
      if (v8 < v3)
        goto LABEL_12;
    }
    goto LABEL_26;
  }
  v7 = a2;
  do
  {
    if (v6 >= v7)
      break;
    v9 = *--v7;
  }
  while (v9 >= v3);
LABEL_12:
  if (v6 < v7)
  {
    v10 = *v7;
    v11 = v6;
    v12 = v7;
LABEL_14:
    *v11 = v10;
    *v12 = v5;
    v13 = v11 + 1;
    while (v13 != a2)
    {
      v14 = *v13++;
      v5 = v14;
      if (v14 >= v3)
      {
        v11 = v13 - 1;
        while (v12 != result)
        {
          v15 = *--v12;
          v10 = v15;
          if (v15 < v3)
          {
            if (v11 < v12)
              goto LABEL_14;
            v16 = v13 - 2;
            goto LABEL_23;
          }
        }
        break;
      }
    }
LABEL_26:
    __break(1u);
    return result;
  }
  v16 = v6 - 1;
LABEL_23:
  if (v16 != result)
    *result = *v16;
  *v16 = v3;
  return v16;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  uint64_t i;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v6;
        if (*v22 < v26)
        {
          v27 = i;
          while (1)
          {
            *(unsigned int *)((char *)a1 + v27) = v26;
            v28 = v27 - 4;
            if (v27 == 4)
              break;
            v26 = *(unsigned int *)((char *)a1 + v27 - 8);
            v27 -= 4;
            if (v25 >= v26)
            {
              v29 = (unsigned int *)((char *)a1 + v28);
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

unsigned int *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = v7;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*a3 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v5)
  {
    *a3 = *a4;
    *a4 = v5;
    v9 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v9;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,unsigned int *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  char *v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  unsigned int v42;

  if (a1 != a2)
  {
    v3 = a2 - a1;
    v4 = (a2 - a1) >> 2;
    if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = &a1[4 * v7];
          if (2 * v6 + 2 >= v4)
          {
            v9 = *(_DWORD *)v8;
          }
          else
          {
            v9 = *((_DWORD *)v8 + 1);
            v10 = *(_DWORD *)v8 >= v9;
            if (*(_DWORD *)v8 > v9)
              v9 = *(_DWORD *)v8;
            if (!v10)
            {
              v8 += 4;
              v7 = 2 * v6 + 2;
            }
          }
          v11 = &a1[4 * v6];
          v12 = *(_DWORD *)v11;
          if (v9 >= *(_DWORD *)v11)
          {
            do
            {
              *(_DWORD *)v11 = v9;
              v11 = v8;
              if (v5 < v7)
                break;
              v13 = (2 * v7) | 1;
              v8 = &a1[4 * v13];
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v9 = *(_DWORD *)v8;
                v7 = v13;
              }
              else
              {
                v9 = *(_DWORD *)v8;
                v14 = *((_DWORD *)v8 + 1);
                if (*(_DWORD *)v8 <= v14)
                  v9 = *((_DWORD *)v8 + 1);
                if (*(_DWORD *)v8 >= v14)
                  v7 = v13;
                else
                  v8 += 4;
              }
            }
            while (v9 >= v12);
            *(_DWORD *)v11 = v12;
          }
        }
        v15 = v6-- <= 0;
      }
      while (!v15);
    }
    v16 = a2;
    if (a2 != a3)
    {
      if (v3 >= 8)
      {
        v20 = a2;
        do
        {
          v21 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 < *(_DWORD *)a1)
          {
            *(_DWORD *)v20 = *(_DWORD *)a1;
            *(_DWORD *)a1 = v21;
            v22 = *((_DWORD *)a1 + 1);
            if (v3 == 8)
            {
              v23 = a1 + 4;
              v24 = 1;
            }
            else
            {
              v25 = *((_DWORD *)a1 + 2);
              v26 = v22 >= v25;
              if (v22 <= v25)
                v22 = *((_DWORD *)a1 + 2);
              if (v26)
                v23 = a1 + 4;
              else
                v23 = a1 + 8;
              if (v26)
                v24 = 1;
              else
                v24 = 2;
            }
            if (v22 >= v21)
            {
              v27 = a1;
              do
              {
                *(_DWORD *)v27 = v22;
                v27 = v23;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v24)
                  break;
                v28 = (2 * v24) | 1;
                v23 = &a1[4 * v28];
                v24 = 2 * v24 + 2;
                if (v24 >= v4)
                {
                  v22 = *(_DWORD *)v23;
                  v24 = v28;
                }
                else
                {
                  v22 = *(_DWORD *)v23;
                  v29 = *((_DWORD *)v23 + 1);
                  if (*(_DWORD *)v23 <= v29)
                    v22 = *((_DWORD *)v23 + 1);
                  if (*(_DWORD *)v23 >= v29)
                    v24 = v28;
                  else
                    v23 += 4;
                }
              }
              while (v22 >= v21);
              *(_DWORD *)v27 = v21;
            }
          }
          v20 += 4;
        }
        while (v20 != a3);
      }
      else
      {
        v17 = *(_DWORD *)a1;
        v18 = a2;
        do
        {
          v19 = *(_DWORD *)v18;
          if (*(_DWORD *)v18 < v17)
          {
            *(_DWORD *)v18 = v17;
            *(_DWORD *)a1 = v19;
            v17 = v19;
          }
          v18 += 4;
        }
        while (v18 != a3);
      }
      v16 = a3;
    }
    if (v3 >= 5)
    {
      v30 = (unint64_t)v3 >> 2;
      do
      {
        v31 = 0;
        v32 = *(_DWORD *)a1;
        v33 = a1;
        do
        {
          v34 = &v33[4 * v31 + 4];
          v35 = (2 * v31) | 1;
          v31 = 2 * v31 + 2;
          if (v31 >= v30)
          {
            v36 = *(_DWORD *)v34;
            v31 = v35;
          }
          else
          {
            v36 = *(_DWORD *)v34;
            v37 = *((_DWORD *)v34 + 1);
            if (*(_DWORD *)v34 <= v37)
              v36 = *((_DWORD *)v34 + 1);
            if (*(_DWORD *)v34 >= v37)
              v31 = v35;
            else
              v34 += 4;
          }
          *(_DWORD *)v33 = v36;
          v33 = v34;
        }
        while (v31 <= (uint64_t)((unint64_t)(v30 - 2) >> 1));
        a2 -= 4;
        if (v34 == a2)
        {
          *(_DWORD *)v34 = v32;
        }
        else
        {
          *(_DWORD *)v34 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v32;
          v38 = v34 - a1 + 4;
          if (v38 >= 5)
          {
            v39 = (((unint64_t)v38 >> 2) - 2) >> 1;
            v40 = &a1[4 * v39];
            v41 = *(_DWORD *)v40;
            v42 = *(_DWORD *)v34;
            if (*(_DWORD *)v40 < *(_DWORD *)v34)
            {
              do
              {
                *(_DWORD *)v34 = v41;
                v34 = v40;
                if (!v39)
                  break;
                v39 = (v39 - 1) >> 1;
                v40 = &a1[4 * v39];
                v41 = *(_DWORD *)v40;
              }
              while (*(_DWORD *)v40 < v42);
              *(_DWORD *)v34 = v42;
            }
          }
        }
        v15 = v30-- <= 2;
      }
      while (!v15);
    }
    return v16;
  }
  return a3;
}

JSC::B3::Air::GenerateAndAllocateRegisters *JSC::B3::Air::GenerateAndAllocateRegisters::GenerateAndAllocateRegisters(JSC::B3::Air::GenerateAndAllocateRegisters *this, JSC::B3::Air::Code *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v5 = (v4 + 33);
  *((_DWORD *)this + 7) = v5;
  if (v4 != -33)
  {
    if (v5 >> 28)
      goto LABEL_12;
    v6 = WTF::fastMalloc((WTF *)(16 * v5));
    *((_DWORD *)this + 6) = v5;
    *((_QWORD *)this + 2) = v6;
    v7 = *((unsigned int *)this + 7);
    if ((_DWORD)v7)
    {
      v8 = v6 + 16 * v7;
      do
      {
        *(_QWORD *)v6 = 0;
        *(_BYTE *)(v6 + 8) = 127;
        *(_DWORD *)(v6 + 9) = 0;
        *(_DWORD *)(v6 + 12) = 0;
        v6 += 16;
      }
      while (v6 != v8);
    }
  }
  v9 = *((_DWORD *)a2 + 45);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v10 = (v9 + 33);
  *((_DWORD *)this + 11) = v10;
  if (v9 == -33)
    goto LABEL_11;
  if (v10 >> 28)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198025794);
  }
  v11 = WTF::fastMalloc((WTF *)(16 * v10));
  *((_DWORD *)this + 10) = v10;
  *((_QWORD *)this + 4) = v11;
  v12 = *((unsigned int *)this + 11);
  if ((_DWORD)v12)
  {
    v13 = v11 + 16 * v12;
    do
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 8) = 127;
      *(_DWORD *)(v11 + 9) = 0;
      *(_DWORD *)(v11 + 12) = 0;
      v11 += 16;
    }
    while (v11 != v13);
  }
LABEL_11:
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  return this;
}

void JSC::B3::Air::GenerateAndAllocateRegisters::buildLiveRanges(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned int v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v10 = *a1;
  v11 = *(_DWORD *)(*a1 + 176);
  v12 = (v11 + 33);
  if (v11 == -33)
  {
    v13 = 0;
  }
  else
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198025AE4);
    }
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    bzero(v13, 8 * v12);
  }
  v14 = *(_DWORD *)(v10 + 180);
  v15 = (v14 + 33);
  if (v14 == -33)
  {
    v16 = 0;
  }
  else
  {
    if (v15 >> 29)
    {
LABEL_79:
      __break(0xC471u);
      JUMPOUT(0x198025ADCLL);
    }
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    bzero(v16, 8 * v15);
  }
  v17 = a1[14];
  if (v17)
  {
    a1[14] = 0;
    *((_DWORD *)a1 + 30) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  a1[14] = v13;
  *((_DWORD *)a1 + 30) = v12;
  *((_DWORD *)a1 + 31) = v12;
  v18 = a1[16];
  if (v18)
  {
    a1[16] = 0;
    *((_DWORD *)a1 + 34) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  a1[16] = v16;
  *((_DWORD *)a1 + 34) = v15;
  *((_DWORD *)a1 + 35) = v15;
  a1[12] = 1;
  v19 = *a1;
  v20 = *(unsigned int *)(*a1 + 108);
  if ((_DWORD)v20)
  {
    v21 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * v21))
    {
      if (v20 == ++v21)
        return;
    }
    if ((_DWORD)v20 != (_DWORD)v21)
    {
      v22 = a2[8];
      v23 = *a2;
      v24 = 1;
      v25 = a2[10];
      do
      {
        if (v20 <= v21)
          goto LABEL_79;
        v26 = *(_QWORD *)(v19 + 96);
        v27 = *(unsigned int **)(v26 + 8 * v21);
        v28 = *v27;
        v29 = v22 + 32 * v28;
        v30 = *(unsigned int *)(v29 + 12);
        if ((_DWORD)v30)
        {
          v31 = *(int **)v29;
          v32 = *(_DWORD *)(v23 + 176) + 33;
          v33 = 4 * v30;
          do
          {
            v34 = *v31;
            if (v32 <= *v31)
              v34 = v32 - *v31;
            if (v34 <= 0xFFFFFFDF && (v34 - 1) >= 0x20)
            {
              if (v34 > 0)
              {
                v35 = 14;
              }
              else
              {
                v34 = -v34;
                v35 = 16;
              }
              *(_QWORD *)(a1[v35] + 8 * v34) = a1[12];
            }
            ++v31;
            v33 -= 4;
          }
          while (v33);
          v24 = a1[12];
        }
        v36 = v24 + 1;
        a1[12] = v24 + 1;
        v37 = v27[5];
        if (!(_DWORD)v37)
          goto LABEL_59;
        v38 = (unsigned int *)*((_QWORD *)v27 + 1);
        v39 = &v38[32 * v37];
        do
        {
          v40 = v38[3];
          if (!(_DWORD)v40)
            goto LABEL_58;
          v41 = 32 * v40;
          v42 = (int *)(*(_QWORD *)v38 + 16);
          do
          {
            v43 = *((char *)v42 - 8);
            if (v43 > 0xD)
              goto LABEL_48;
            if (((1 << v43) & 0x31C2) != 0)
            {
              v44 = *v42;
            }
            else
            {
              if (v43 != 11)
                goto LABEL_48;
              v47 = *v42;
              if (*v42 <= 0xFFFFFFDF && (v47 - 1) >= 0x20)
              {
                if (v47 > 0)
                {
                  v48 = 14;
                }
                else
                {
                  v47 = -v47;
                  v48 = 16;
                }
                *(_QWORD *)(a1[v48] + 8 * v47) = a1[12];
              }
              v44 = v42[1];
            }
            if (v44 <= 0xFFFFFFDF && (v44 - 1) >= 0x20)
            {
              v45 = (int)v44 > 0;
              if ((int)v44 <= 0)
                v44 = -v44;
              if (v45)
                v46 = 14;
              else
                v46 = 16;
              *(_QWORD *)(a1[v46] + 8 * v44) = a1[12];
            }
LABEL_48:
            v42 += 8;
            v41 -= 32;
          }
          while (v41);
          v36 = a1[12];
LABEL_58:
          a1[12] = ++v36;
          v38 += 32;
        }
        while (v38 != v39);
LABEL_59:
        v49 = v25 + 32 * v28;
        v50 = *(unsigned int *)(v49 + 12);
        if ((_DWORD)v50)
        {
          v51 = *(int **)v49;
          v52 = *(_DWORD *)(v23 + 176) + 33;
          v53 = 4 * v50;
          do
          {
            v54 = *v51;
            if (v52 <= *v51)
              v54 = v52 - *v51;
            if (v54 <= 0xFFFFFFDF && (v54 - 1) >= 0x20)
            {
              if (v54 > 0)
              {
                v55 = 14;
              }
              else
              {
                v54 = -v54;
                v55 = 16;
              }
              *(_QWORD *)(a1[v55] + 8 * v54) = a1[12];
            }
            ++v51;
            v53 -= 4;
          }
          while (v53);
          v36 = a1[12];
        }
        v24 = v36 + 1;
        a1[12] = v36 + 1;
        v21 = (v21 + 1);
        if (v20 > v21)
        {
          while (!*(_QWORD *)(v26 + 8 * v21))
          {
            if (v20 == ++v21)
              return;
          }
        }
      }
      while ((_DWORD)v20 != (_DWORD)v21);
    }
  }
}

uint64_t JSC::B3::Air::BasicBlock::setSuccessors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;

  v8 = a3;
  v11 = (uint64_t *)(a1 + 24);
  result = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(a1 + 24, 1uLL, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 36))
  {
    v13 = *v11;
    *(_QWORD *)v13 = a2;
    *(_BYTE *)(v13 + 8) = v8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

{
  char v8;
  char v10;
  uint64_t *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a5;
  v10 = a3;
  v13 = (uint64_t *)(a1 + 24);
  result = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(a1 + 24, 2uLL, a3, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(a1 + 36);
  if (!v15 || (v16 = *v13, *(_QWORD *)v16 = a2, *(_BYTE *)(v16 + 8) = v10, v15 == 1))
  {
    __break(0xC471u);
    JUMPOUT(0x19803857CLL);
  }
  v17 = *v13;
  *(_QWORD *)(v17 + 16) = a4;
  *(_BYTE *)(v17 + 24) = v8;
  return result;
}

void JSC::B3::Air::GenerateAndAllocateRegisters::prepareForGeneration(JSC::B3::Air::GenerateAndAllocateRegisters *this)
{
  unsigned int v1;
  JSC::B3::Air::GenerateAndAllocateRegisters *v2;
  JSC::B3::Air *v3;
  JSC::B3::Air::Code *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  JSC::B3::Air *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  WTF *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t casual;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD **v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  uint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  double v116;
  double v117;
  _DWORD *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  _QWORD *v128;
  unsigned int v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  WTF *v172;
  JSC::B3::Air *v174;
  uint64_t *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  JSC::B3::Air *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int **v217;
  uint64_t v218;
  int v219;
  char *v220;
  int v221;
  BOOL v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int *v225;
  WTF **v226;
  unsigned int v227;
  uint64_t v228;
  WTF *v229;
  char *v230;
  JSC::B3::Air::GenerateAndAllocateRegisters *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  WTF *v240;
  uint64_t v241;
  int v242;
  _DWORD *v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  WTF *v255;
  uint64_t v256;
  int v257;
  _DWORD *v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  int v272;
  char *v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  WTF *v294;
  uint64_t v295;
  int v296;
  _DWORD *v297;
  unsigned int v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t *v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unsigned int v320;
  uint64_t v321;
  unint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unsigned int v326;
  uint64_t v327;
  unint64_t *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int v332;
  uint64_t v333;
  BOOL v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  BOOL v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  BOOL v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  unint64_t v352;
  WTF *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  int *v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  int v361;
  unsigned int v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int **v366;
  uint64_t v367;
  int v368;
  char *v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int *v373;
  WTF **v374;
  unsigned int v375;
  uint64_t v376;
  WTF *v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  WTF *v382;
  _QWORD *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char v393;
  int v394;
  int v395;
  BOOL v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  uint64_t v403;
  WTF *v404;
  unsigned int v405;
  uint64_t v406;
  BOOL v407;
  uint64_t v408;
  uint64_t v409;
  JSC::B3::Air::Code *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  char v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int v437;
  int v438;
  char *v439;
  char *v440;
  char v441;
  unint64_t v442;
  uint64_t v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  WTF *v456;
  WTF **v457;
  uint64_t v458;
  WTF **v459;
  int v460;
  WTF **v461;
  char *v462;
  WTF **v463;
  int64_t v464;
  WTF *v465;
  uint64_t v466;
  WTF **v467;
  uint64_t v468;
  uint64_t v469;
  void **v470;
  uint64_t v471;
  WTF **v472;
  unsigned int v473;
  JSC::B3::Air *v474;
  WTF *v475;
  int v476;
  uint64_t v477;
  JSC::B3::Air *v478;
  uint64_t v479;
  unint64_t StatusReg;
  int v481;
  uint64_t *v482;
  unsigned int *v483;
  int v484;
  uint64_t *v485;
  uint64_t *v486;
  unsigned int **v487;
  unint64_t v488;
  char *v489;
  JSC::B3::Air::GenerateAndAllocateRegisters *v490;
  uint64_t v491;
  uint64_t *v492;
  WTF *v493;
  uint64_t v494;
  _BYTE v495[16];
  __int128 v496;
  _QWORD v497[12];
  uint64_t v498;
  int v499;
  uint64_t *v500;
  WTF *v501;
  WTF *v502;
  uint64_t v503;
  _BYTE v504[132];
  unsigned int v505;
  uint64_t v506[2];

  v2 = this;
  JSC::B3::Air::handleCalleeSaves(*(_QWORD *)this, 0xFF003FF80000);
  v3 = *(JSC::B3::Air **)v2;
  JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize(*(JSC::B3::Air **)v2, v4, v5, v6, v7, v8, v9, v10, (uint64_t)&v501);
  v18 = v501;
  if (HIDWORD(v502))
  {
    v19 = 0;
    v20 = 8 * HIDWORD(v502);
    v21 = v501;
    do
    {
      v22 = *(_QWORD *)v21;
      v21 = (WTF *)((char *)v21 + 8);
      v23 = *(_DWORD *)(v22 + 16);
      if (v19 <= -v23)
        v19 = -v23;
      v20 -= 8;
    }
    while (v20);
    v24 = (v19 + 15) & 0xFFFFFFF0;
  }
  else
  {
    v24 = 0;
  }
  *((_DWORD *)v3 + 46) = v24;
  if (v18)
  {
    v501 = 0;
    LODWORD(v502) = 0;
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  }
  v25 = *(JSC::B3::Air **)v2;
  v26 = (WTF *)(*(_QWORD *)v2 + 96);
  v501 = v26;
  v502 = (WTF *)v504;
  v503 = 8;
  v474 = v25;
  v490 = v2;
  v477 = *((unsigned int *)v25 + 27);
  if (!(_DWORD)v477)
    goto LABEL_218;
  v27 = 0;
  while (!*(_QWORD *)(*(_QWORD *)v26 + 8 * v27))
  {
    if (v477 == ++v27)
      goto LABEL_218;
  }
  if ((_DWORD)v477 == (_DWORD)v27)
    goto LABEL_218;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v28 = v477;
  LODWORD(v29) = v27;
  v475 = v26;
  v482 = (uint64_t *)((char *)v2 + 256);
  do
  {
    if (v28 <= v29)
      goto LABEL_662;
    v30 = *(_QWORD *)(*(_QWORD *)v26 + 8 * v29);
    v31 = *(unsigned int *)(v30 + 20);
    if (!(_DWORD)v31)
    {
      __break(0xC471u);
      JUMPOUT(0x198027FACLL);
    }
    v32 = v31 - 1;
    v33 = *(_QWORD *)(v30 + 8);
    v34 = v33 + ((v31 - 1) << 7);
    if (*(_WORD *)(v34 + 120) != 448)
      goto LABEL_207;
    v491 = *(_QWORD *)(*(_QWORD *)v26 + 8 * v29);
    v476 = v29;
    v506[0] = 0;
    v500 = v506;
    if ((*(__int16 *)(v34 + 120) - 446) > 5)
    {
      v35 = *(unsigned int *)(v34 + 12);
      if ((_DWORD)v35)
      {
        v36 = 0;
        v37 = 0;
        v38 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v34 + 120)
            + ((unint64_t)((v35 - 1) * v35) >> 1);
        v39 = 32 * v35;
        do
        {
          if (v37 >= *(unsigned int *)(v34 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198027F8CLL);
          }
          v40 = v38[v37];
          if ((v40 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198027F84);
          }
          v41 = (WTF *)(*(_QWORD *)v34 + v36);
          if (*((_BYTE *)v41 + 8) == 1)
          {
            v42 = v40 & 0xF;
            v43 = *(_DWORD *)(*(_QWORD *)v34 + v36 + 16);
            v505 = v43;
            if ((v42 - 4) <= 6 && v43 <= 0xFFFFFFDF && v43 - 1 >= 0x20)
            {
              v493 = v41;
              WTF::HashMap<JSC::B3::Air::Tmp,JSC::B3::Air::Arg *,WTF::DefaultHash<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Tmp>,WTF::HashTraits<JSC::B3::Air::Arg *>,WTF::HashTableTraits>::add<JSC::B3::Air::Arg *>(&v496, v500, (int *)&v505, &v493, v14, v15, v16, v17);
            }
          }
          ++v37;
          v36 += 32;
        }
        while (v39 != v36);
      }
    }
    else
    {
      *(_QWORD *)&v496 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::insertBlocksForFlushAfterTerminalPatchpoints(void)::$_0>::implFunction;
      *((_QWORD *)&v496 + 1) = &v496;
      v497[0] = &v500;
      JSC::B3::Air::Inst::forEachArgCustom(v34, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::insertBlocksForFlushAfterTerminalPatchpoints(void)::$_0>::implFunction, (uint64_t)&v496);
    }
    v44 = v506[0];
    if (!v506[0])
    {
      v26 = v475;
      LODWORD(v29) = v476;
      goto LABEL_206;
    }
    v26 = v475;
    LODWORD(v29) = v476;
    if (!*(_DWORD *)(v506[0] - 12) || (v45 = *(unsigned int *)(v491 + 36), !(_DWORD)v45))
    {
LABEL_205:
      WTF::fastFree(v44 - 16, v11, v12, v13, v14, v15, v16, v17);
      goto LABEL_206;
    }
    v46 = *(uint64_t **)(v491 + 24);
    v473 = v1 & 0xFFFFFFFC;
    v485 = (uint64_t *)(v33 + (v32 << 7) + 112);
    v487 = (unsigned int **)&v46[2 * v45];
    v484 = ((((v1 & 0xFC) >> 2) & 0x3F) << 18) | 0x149;
    do
    {
      v47 = (_QWORD *)*v46;
      v48 = *(_QWORD *)(*v46 + 104);
      v49 = *(unsigned int *)*v46;
      v50 = *(_QWORD *)(StatusReg + 752);
      if (v50)
      {
        v51 = (_BYTE *)(v50 + 9408);
        *(_BYTE *)(v50 + 9408) = 1;
        v52 = *(unsigned int *)(v50 + 9424);
        if ((_DWORD)v52)
        {
          *(_DWORD *)(v50 + 9424) = v52 - *(_DWORD *)(v50 + 9428);
          casual = *(_QWORD *)(v50 + 9416) - v52;
LABEL_41:
          *v51 = 0;
          goto LABEL_42;
        }
        v54 = *(_QWORD *)(v50 + 9448);
        v55 = *(_QWORD *)(v50 + 9432);
        if (v54)
        {
LABEL_40:
          v56 = __clz(v54);
          *(_QWORD *)(v50 + 9448) = v54 & ~(0x8000000000000000 >> v56);
          casual = v55 + 16 * v56;
          goto LABEL_41;
        }
        if (*(_BYTE *)(v50 + 9413) == 6)
        {
          v166 = *(_DWORD *)(v50 + 9444);
          v167 = *(unsigned int *)(v50 + 9440);
          if (v167 < v166)
          {
            *(_QWORD *)&v51[8 * v167 + 56] = 0;
            v168 = (unint64_t *)(v50 + 8 * v167 + 9472);
            v169 = v166 - 1 - v167;
            while (v169)
            {
              v55 += 1024;
              v171 = *v168++;
              v170 = v171;
              LODWORD(v167) = v167 + 1;
              --v169;
              if (v171)
              {
                v54 = __rbit64(v170);
                *(_DWORD *)(v50 + 9440) = v167;
                *(_QWORD *)(v50 + 9432) = v55;
                goto LABEL_40;
              }
            }
            *(_DWORD *)(v50 + 9440) = v166;
          }
        }
        *v51 = 0;
      }
      casual = bmalloc_allocate_casual(112, 1);
LABEL_42:
      *(_DWORD *)casual = -1;
      *(_QWORD *)(casual + 8) = 0;
      v57 = (uint64_t *)(casual + 8);
      *(_QWORD *)(casual + 16) = 0;
      *(_QWORD *)(casual + 24) = casual + 40;
      *(_QWORD *)(casual + 32) = 2;
      *(_QWORD *)(casual + 72) = casual + 88;
      v58 = (_QWORD **)(casual + 72);
      *(_QWORD *)(casual + 80) = 2;
      *(_QWORD *)(casual + 104) = v48;
      *(_QWORD *)&v496 = v49;
      *((_QWORD *)&v496 + 1) = casual;
      v59 = HIDWORD(v503);
      if (HIDWORD(v503) == (_DWORD)v503)
      {
        v60 = (uint64_t *)WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v502, HIDWORD(v503) + 1, (unint64_t)&v496, v13, v14, v15, v16, v17);
        v61 = *v60;
        v64 = v60[1];
        v62 = v60 + 1;
        v63 = v64;
        v65 = HIDWORD(v503);
        v66 = (_QWORD *)((char *)v502 + 16 * HIDWORD(v503));
        *v66 = v61;
        v67 = v66 + 1;
        v59 = v65;
      }
      else
      {
        v68 = (_QWORD *)((char *)v502 + 16 * HIDWORD(v503));
        *v68 = v49;
        v67 = v68 + 1;
        v63 = casual;
        v62 = (_QWORD *)&v496 + 1;
      }
      *v62 = 0;
      *v67 = v63;
      HIDWORD(v503) = v59 + 1;
      v69 = *((_QWORD *)&v496 + 1);
      *((_QWORD *)&v496 + 1) = 0;
      if (v69)
      {
        v70 = *(_QWORD *)(v69 + 72);
        if (v69 + 88 != v70 && v70)
        {
          *(_QWORD *)(v69 + 72) = 0;
          *(_DWORD *)(v69 + 80) = 0;
          WTF::fastFree(v70, v11, v12, v13, v14, v15, v16, v17);
        }
        v71 = *(_QWORD *)(v69 + 24);
        if (v69 + 40 != v71 && v71)
        {
          *(_QWORD *)(v69 + 24) = 0;
          *(_DWORD *)(v69 + 32) = 0;
          WTF::fastFree(v71, v11, v12, v13, v14, v15, v16, v17);
        }
        v72 = *(unsigned int *)(v69 + 20);
        v73 = *(_QWORD *)(v69 + 8);
        if ((_DWORD)v72)
        {
          v119 = v72 << 7;
          v120 = v73 + 16;
          do
          {
            v121 = *(_QWORD *)(v120 - 16);
            v122 = v120 == v121 || v121 == 0;
            if (!v122)
            {
              *(_QWORD *)(v120 - 16) = 0;
              *(_DWORD *)(v120 - 8) = 0;
              WTF::fastFree(v121, v11, v12, v13, v14, v15, v16, v17);
            }
            v120 += 128;
            v119 -= 128;
          }
          while (v119);
          v73 = *(_QWORD *)(v69 + 8);
          if (!v73)
            goto LABEL_52;
        }
        else if (!v73)
        {
LABEL_52:
          WTF::fastFree(v69, v11, v12, v13, v14, v15, v16, v17);
          goto LABEL_53;
        }
        *(_QWORD *)(v69 + 8) = 0;
        *(_DWORD *)(v69 + 16) = 0;
        WTF::fastFree(v73, v11, v12, v13, v14, v15, v16, v17);
        goto LABEL_52;
      }
LABEL_53:
      v74 = *v485;
      *(_QWORD *)&v496 = v497;
      *((_QWORD *)&v496 + 1) = 3;
      v498 = v74;
      v499 = v484;
      v75 = *(unsigned int *)(casual + 20);
      if ((_DWORD)v75 == *(_DWORD *)(casual + 16))
      {
        v88 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(casual + 8, v75 + 1, (unint64_t)&v496);
        v89 = *(unsigned int *)(casual + 20);
        v90 = *(_QWORD *)(casual + 8);
        v91 = v90 + (v89 << 7);
        v92 = (_OWORD *)(v91 + 16);
        *(_QWORD *)v91 = v91 + 16;
        *(_QWORD *)(v91 + 8) = 3;
        v93 = *(__int128 **)v88;
        v80 = v491;
        if (*(_QWORD *)v88 == v88 + 16)
        {
          v94 = *(unsigned int *)(v88 + 12);
          if ((_DWORD)v94)
          {
            v95 = 32 * v94;
            do
            {
              v96 = *v93;
              v97 = v93[1];
              v93 += 2;
              *v92 = v96;
              v92[1] = v97;
              v92 += 2;
              v95 -= 32;
            }
            while (v95);
          }
        }
        else
        {
          *(_QWORD *)v88 = v88 + 16;
          *(_QWORD *)v91 = v93;
          v126 = *(_DWORD *)(v88 + 8);
          *(_DWORD *)(v88 + 8) = 3;
          *(_DWORD *)(v91 + 8) = v126;
        }
        v87 = (uint64_t *)(v88 + 112);
        v98 = *(_DWORD *)(v88 + 12);
        *(_DWORD *)(v88 + 12) = 0;
        *(_DWORD *)(v91 + 12) = v98;
        v86 = v90 + (v89 << 7) + 112;
      }
      else
      {
        v76 = *v57;
        v77 = *v57 + (v75 << 7);
        v78 = (_OWORD *)(v77 + 16);
        *(_QWORD *)v77 = v77 + 16;
        *(_QWORD *)(v77 + 8) = 3;
        v79 = v496;
        v80 = v491;
        if ((_QWORD *)v496 == v497)
        {
          if (HIDWORD(v496))
          {
            v81 = 32 * HIDWORD(v496);
            v82 = (__int128 *)v497;
            do
            {
              v83 = *v82;
              v84 = v82[1];
              v82 += 2;
              *v78 = v83;
              v78[1] = v84;
              v78 += 2;
              v81 -= 32;
            }
            while (v81);
          }
        }
        else
        {
          *(_QWORD *)&v496 = v497;
          *(_QWORD *)v77 = v79;
          v123 = DWORD2(v496);
          DWORD2(v496) = 3;
          *(_DWORD *)(v77 + 8) = v123;
        }
        v85 = HIDWORD(v496);
        HIDWORD(v496) = 0;
        *(_DWORD *)(v77 + 12) = v85;
        v86 = v76 + (v75 << 7) + 112;
        v87 = &v498;
      }
      v99 = *v87;
      *(_DWORD *)(v86 + 7) = *(_DWORD *)((char *)v87 + 7);
      *(_QWORD *)v86 = v99;
      v100 = *(_DWORD *)(casual + 20);
      *(_DWORD *)(casual + 20) = v100 + 1;
      if (v100 == -1)
      {
        __break(0xC471u);
        goto LABEL_661;
      }
      v101 = v496;
      if (v497 != (_QWORD *)v496 && (_QWORD)v496)
      {
        *(_QWORD *)&v496 = 0;
        DWORD2(v496) = 0;
        WTF::fastFree(v101, v11, v12, v13, v14, v15, v16, v17);
      }
      v102 = *(_QWORD *)(casual + 24);
      if (!*(_DWORD *)(casual + 36))
      {
        if (*(_DWORD *)(casual + 32))
        {
          v125 = *(_QWORD *)(casual + 24);
        }
        else
        {
          v125 = WTF::fastMalloc((WTF *)0x100);
          *(_DWORD *)(casual + 32) = 16;
          *(_QWORD *)(casual + 24) = v125;
          if (casual + 40 != v102 && v102)
          {
            if (v125 == v102)
            {
              *(_QWORD *)(casual + 24) = 0;
              *(_DWORD *)(casual + 32) = 0;
            }
            WTF::fastFree(v102, v11, v12, v13, v14, v15, v16, v17);
            v125 = *(_QWORD *)(casual + 24);
          }
        }
        v162 = *(unsigned int *)(casual + 36);
        if ((_DWORD)v162 != 1)
        {
          v163 = 16 * v162;
          do
          {
            v164 = v163;
            v165 = v125 + v163;
            *(_QWORD *)v165 = 0;
            *(_BYTE *)(v165 + 8) = 0;
            v163 = v164 + 16;
          }
          while (v164);
        }
        v102 = v125;
      }
      *(_DWORD *)(casual + 36) = 1;
      *(_QWORD *)v102 = v47;
      *(_BYTE *)(v102 + 8) = 0;
      *(_QWORD *)&v496 = v80;
      v103 = *(unsigned int *)(casual + 84);
      if ((_DWORD)v103)
      {
        v104 = *v58;
        v105 = *(unsigned int *)(casual + 84);
        while (*v104 != v80)
        {
          ++v104;
          if (!--v105)
            goto LABEL_73;
        }
      }
      else
      {
LABEL_73:
        if ((_DWORD)v103 == *(_DWORD *)(casual + 80))
        {
          v127 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(casual + 72, v103 + 1, (unint64_t)&v496);
          v103 = *(unsigned int *)(casual + 84);
          *(_QWORD *)(*(_QWORD *)(casual + 72) + 8 * v103) = *v127;
        }
        else
        {
          (*v58)[v103] = v80;
        }
        *(_DWORD *)(casual + 84) = v103 + 1;
      }
      *v46 = casual;
      v106 = *((unsigned int *)v47 + 21);
      if (!(_DWORD)v106)
      {
        v106 = 0;
        LODWORD(v110) = 0;
        *(_QWORD *)&v496 = casual;
        v107 = v47 + 9;
LABEL_84:
        if ((_DWORD)v110 == *((_DWORD *)v47 + 20))
        {
          v128 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v106 + 1, (unint64_t)&v496);
          v110 = *((unsigned int *)v47 + 21);
          *(_QWORD *)(v47[9] + 8 * v110) = *v128;
        }
        else
        {
          *(_QWORD *)(*v107 + 8 * v106) = casual;
        }
        *((_DWORD *)v47 + 21) = v110 + 1;
        goto LABEL_87;
      }
      v107 = v47 + 9;
      v108 = (_QWORD *)v47[9];
      if (*v108 == v80)
      {
        v109 = 0;
LABEL_79:
        v108[v109] = v108[v106 - 1];
        v106 = (v106 - 1);
        *((_DWORD *)v47 + 21) = v106;
      }
      else
      {
        v109 = 0;
        while (v106 - 1 != v109)
        {
          v124 = v108[++v109];
          if (v124 == v80)
            goto LABEL_79;
        }
      }
      LODWORD(v110) = v106;
      *(_QWORD *)&v496 = casual;
      if (!(_DWORD)v106)
      {
        v106 = 0;
        goto LABEL_84;
      }
      v111 = 0;
      while (*(_QWORD *)(*v107 + 8 * v111) != casual)
      {
        if (v106 == ++v111)
          goto LABEL_84;
      }
LABEL_87:
      if (!v506[0] || (v112 = *(unsigned int *)(v506[0] - 12), !(_DWORD)v112))
      {
        v118 = 0;
        goto LABEL_151;
      }
      v113 = (v112 - 1) | ((v112 - 1) >> 1) | ((((_DWORD)v112 - 1) | ((v112 - 1) >> 1)) >> 2);
      v114 = v113 | (v113 >> 4) | ((v113 | (v113 >> 4)) >> 8);
      v115 = (v114 | HIWORD(v114)) + 1;
      if (v115 > 0x400)
      {
        if (v115 > 2 * v112)
          goto LABEL_116;
      }
      else if (3 * v115 > 4 * v112)
      {
        goto LABEL_92;
      }
      LODWORD(v115) = 2 * v115;
      if (v115 <= 0x400)
      {
LABEL_92:
        v116 = (double)v112;
        v117 = (double)v115 * 0.604166667;
        goto LABEL_117;
      }
LABEL_116:
      v116 = (double)v112;
      v117 = (double)v115 * 0.416666667;
LABEL_117:
      if (v117 <= v116)
        LODWORD(v115) = 2 * v115;
      if (v115 <= 8)
        v129 = 8;
      else
        v129 = v115;
      v130 = (_DWORD *)WTF::fastZeroedMalloc(16 * v129 + 16, (unint64_t)v11, v12, v13, v14, v15, v16, v17);
      v130[2] = v129 - 1;
      v130[3] = v129;
      *v130 = 0;
      v130[1] = v112;
      v131 = v506[0];
      if (v506[0])
      {
        v132 = *(unsigned int *)(v506[0] - 4);
        v133 = v506[0] + 16 * v132;
        if (*(_DWORD *)(v506[0] - 12))
        {
          v134 = (_DWORD *)v506[0];
          if ((_DWORD)v132)
          {
            v135 = 16 * v132;
            v134 = (_DWORD *)v506[0];
            while (*v134 == 0x7FFFFFFF || *v134 == 0)
            {
              v134 += 4;
              v135 -= 16;
              if (!v135)
              {
                v134 = (_DWORD *)v133;
                goto LABEL_136;
              }
            }
          }
          goto LABEL_136;
        }
        v134 = (_DWORD *)(v506[0] + 16 * v132);
      }
      else
      {
        v134 = 0;
        v132 = 0;
      }
      v133 = v506[0] + 16 * v132;
LABEL_136:
      if (v506[0])
        v131 = v506[0] + 16 * *(unsigned int *)(v506[0] - 4);
      v118 = v130 + 4;
      if ((_DWORD *)v131 != v134)
      {
        do
        {
          v137 = 0;
          v138 = *v134 + ~(*v134 << 15);
          v139 = (9 * (v138 ^ (v138 >> 10))) ^ ((9 * (v138 ^ (v138 >> 10))) >> 6);
          v140 = (v139 + ~(v139 << 11)) ^ ((v139 + ~(v139 << 11)) >> 16);
          do
          {
            v141 = v140 & (v129 - 1);
            v140 = ++v137 + v141;
          }
          while (v118[4 * v141]);
          *(_OWORD *)&v118[4 * v141] = *(_OWORD *)v134;
          v142 = v134 + 4;
          v134 = (_DWORD *)v133;
          if (v142 != (_DWORD *)v133)
          {
            v134 = v142;
            while (*v134 == 0x7FFFFFFF || *v134 == 0)
            {
              v134 += 4;
              if (v134 == (_DWORD *)v133)
              {
                v134 = (_DWORD *)v133;
                break;
              }
            }
          }
        }
        while (v134 != (_DWORD *)v131);
      }
LABEL_151:
      v144 = *v482;
      if (*v482
        || (WTF::HashTable<JSC::B3::Air::BasicBlock *,WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>>,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashMap<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::BasicBlock *>>::rehash(v482, 8u), (v144 = *v482) != 0))
      {
        v145 = *(_DWORD *)(v144 - 8);
      }
      else
      {
        v145 = 0;
      }
      v146 = (~(casual << 32) + casual) ^ ((unint64_t)(~(casual << 32) + casual) >> 22);
      v147 = 9 * ((v146 + ~(v146 << 13)) ^ ((v146 + ~(v146 << 13)) >> 8));
      v148 = (v147 ^ (v147 >> 15)) + ~((v147 ^ (v147 >> 15)) << 27);
      v149 = v145 & ((v148 >> 31) ^ v148);
      v150 = v144 + 32 * v149;
      v151 = *(_QWORD *)v150;
      if (*(_QWORD *)v150)
      {
        v152 = 0;
        v153 = 1;
        while (v151 != casual)
        {
          if (v151 == -1)
            v152 = v150;
          v149 = ((_DWORD)v149 + v153) & v145;
          v150 = v144 + 32 * v149;
          v151 = *(_QWORD *)v150;
          ++v153;
          if (!*(_QWORD *)v150)
          {
            if (v152)
            {
              *(_QWORD *)v152 = 0;
              *(_QWORD *)(v152 + 8) = 0xFFFFFFFFLL;
              *(_DWORD *)(v152 + 16) = -16773311;
              *(_DWORD *)(v152 + 20) = -1;
              *(_QWORD *)(v152 + 24) = 0;
              --*(_DWORD *)(*v482 - 16);
              v150 = v152;
            }
            goto LABEL_162;
          }
        }
        if (v118)
          WTF::fastFree((unint64_t)(v118 - 4), v11, v12, v13, v14, v15, v16, v17);
      }
      else
      {
LABEL_162:
        *(_QWORD *)v150 = casual;
        *(_DWORD *)(v150 + 8) = -1;
        *(_QWORD *)(v150 + 12) = 0xFF000F4100000000;
        *(_DWORD *)(v150 + 20) = -1;
        v154 = *(_QWORD *)(v150 + 24);
        *(_QWORD *)(v150 + 24) = v118;
        if (v154)
          WTF::fastFree(v154 - 16, v11, v12, v13, v14, v15, v16, v17);
        v155 = *v482;
        if (*v482)
          v156 = *(_DWORD *)(v155 - 12) + 1;
        else
          v156 = 1;
        *(_DWORD *)(v155 - 12) = v156;
        v157 = *v482;
        if (*v482)
          v158 = *(_DWORD *)(v157 - 12);
        else
          v158 = 0;
        v159 = (*(_DWORD *)(v157 - 16) + v158);
        v160 = *(unsigned int *)(v157 - 4);
        if (v160 <= 0x400)
        {
          if (3 * v160 > 4 * v159)
            goto LABEL_179;
          if ((_DWORD)v160)
LABEL_175:
            v161 = (_DWORD)v160 << (6 * *(_DWORD *)(v157 - 12) >= (2 * v160));
          else
            v161 = 8;
          WTF::HashTable<JSC::B3::Air::BasicBlock *,WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>>,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashMap<JSC::B3::Air::BasicBlock *,JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData,WTF::DefaultHash<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::BasicBlock *>,WTF::HashTraits<JSC::B3::Air::GenerateAndAllocateRegisters::PatchSpillData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::BasicBlock *>>::rehash(v482, v161);
          goto LABEL_179;
        }
        if (v160 <= 2 * v159)
          goto LABEL_175;
      }
LABEL_179:
      v46 += 2;
    }
    while (v46 != (uint64_t *)v487);
    v44 = v506[0];
    v26 = v475;
    LODWORD(v29) = v476;
    v1 = v473;
    if (v506[0])
      goto LABEL_205;
LABEL_206:
    v28 = *((_DWORD *)v474 + 27);
LABEL_207:
    v29 = (v29 + 1);
    if (v28 > v29)
    {
      while (!*(_QWORD *)(*(_QWORD *)v26 + 8 * v29))
      {
        if (v28 == ++v29)
        {
          LODWORD(v29) = v28;
          break;
        }
      }
    }
  }
  while ((_DWORD)v477 != (_DWORD)v29);
  v172 = v502;
  if (!HIDWORD(v503))
    goto LABEL_213;
  v439 = (char *)v502 + 16 * HIDWORD(v503);
  v440 = (char *)v502 + 40;
  do
  {
    if ((unint64_t)(v439 - (char *)v172) < 0x11)
      break;
    v441 = 0;
    v442 = (v439 - (char *)v172) >> 4;
LABEL_621:
    v443 = 16 * v442;
    do
    {
      --v442;
      v444 = (char *)v172 + v443;
      v445 = *(_QWORD *)((char *)v172 + v443 - 16);
      v446 = *(_QWORD *)((char *)v172 + v443 - 32);
      if (v445 < v446)
      {
        v447 = *((_QWORD *)v444 - 1);
        v448 = *((_QWORD *)v444 - 3);
        *((_QWORD *)v444 - 2) = v446;
        *((_QWORD *)v444 - 1) = v448;
        *((_QWORD *)v444 - 4) = v445;
        *((_QWORD *)v444 - 3) = v447;
        v441 = 1;
        if (v442 > 1)
          goto LABEL_621;
        goto LABEL_628;
      }
      v443 -= 16;
    }
    while (v442 > 1);
    if ((v441 & 1) == 0)
      break;
LABEL_628:
    v172 = (WTF *)((char *)v172 + 16);
    if ((unint64_t)(v439 - (char *)v172) < 0x11)
      break;
    v449 = 0;
    v450 = (v439 - (char *)v172) >> 4;
    if (v450 <= 2)
      v450 = 2;
    v451 = v450 - 1;
    v452 = (uint64_t *)v440;
    do
    {
      v453 = *(v452 - 1);
      v454 = *(v452 - 3);
      if (v453 < v454)
      {
        v455 = *v452;
        *(v452 - 1) = v454;
        *v452 = *(v452 - 2);
        *(v452 - 3) = v453;
        *(v452 - 2) = v455;
        v449 = 1;
      }
      v452 += 2;
      --v451;
    }
    while (v451);
    v439 -= 16;
    v440 += 16;
  }
  while ((v449 & 1) != 0);
  WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v501, (unsigned int *)&v502, v12, v13, v14, v15, v16, v17);
  v456 = v501;
  v457 = *(WTF ***)v501;
  v458 = *((unsigned int *)v501 + 3);
  v459 = (WTF **)(*(_QWORD *)v501 + 8 * v458);
  if ((_DWORD)v458)
  {
    v460 = 0;
    v461 = *(WTF ***)v501;
    v11 = (WTF **)(*(_QWORD *)v501 + 8 * v458);
    v462 = (char *)v11;
    while (*v457)
    {
LABEL_646:
      ++v457;
      ++v461;
      if (v457 >= v459)
      {
        v457 = *(WTF ***)v456;
        v466 = *((unsigned int *)v456 + 3);
        LODWORD(v458) = *((_DWORD *)v456 + 3);
        v459 = (WTF **)v462;
        goto LABEL_649;
      }
    }
    v463 = v457;
    if (v462 != (char *)(*(_QWORD *)v456 + 8 * *((unsigned int *)v456 + 3)))
    {
      if (v457 != v11)
      {
        v464 = (char *)v461 - (char *)v11;
        memmove(v462, v11, (char *)v461 - (char *)v11);
        v462 += v464;
        v465 = *v457;
        *v457 = 0;
        if (v465)
          std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v457, v465, v12, v13, v14, v15, v16, v17);
        goto LABEL_645;
      }
      v463 = (WTF **)v462;
    }
    *v457 = 0;
    v462 = (char *)v463;
LABEL_645:
    v11 = v457 + 1;
    ++v460;
    goto LABEL_646;
  }
  v466 = 0;
  v460 = 0;
  v11 = (WTF **)(*(_QWORD *)v501 + 8 * v458);
LABEL_649:
  v467 = &v457[v466];
  if (v11 != v467)
  {
    memmove(v459, v11, (char *)v467 - (char *)v11);
    LODWORD(v458) = *((_DWORD *)v456 + 3);
  }
  *((_DWORD *)v456 + 3) = v458 - v460;
  v468 = *((unsigned int *)v501 + 3);
  if ((_DWORD)v468)
  {
    v471 = 0;
    v472 = *(WTF ***)v501;
    do
    {
      *(_DWORD *)v472[v471] = v471;
      ++v471;
    }
    while (v468 != v471);
  }
  v172 = v502;
  if (HIDWORD(v503))
  {
    v469 = 16 * HIDWORD(v503);
    v470 = (void **)((char *)v502 + 8);
    do
    {
      v11 = (WTF **)*v470;
      *v470 = 0;
      if (v11)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v470, (WTF *)v11, v12, v13, v14, v15, v16, v17);
      v470 += 2;
      v469 -= 16;
    }
    while (v469);
    v172 = v502;
  }
LABEL_213:
  v2 = v490;
  if (v504 != (_BYTE *)v172 && v172 != 0)
  {
    v502 = 0;
    LODWORD(v503) = 0;
    WTF::fastFree((unint64_t)v172, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_218:
  v174 = *(JSC::B3::Air **)v2;
  v175 = (uint64_t *)WTF::fastMalloc((WTF *)0x60);
  JSC::B3::Air::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::Liveness((uint64_t)v175, (uint64_t)v174);
  v183 = *((_QWORD *)v2 + 31);
  *((_QWORD *)v2 + 31) = v175;
  if (v183)
  {
    v184 = WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::~Liveness(v183, v176, v177, v178, v179, v180, v181, v182);
    WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
    v175 = (uint64_t *)*((_QWORD *)v2 + 31);
  }
  JSC::B3::Air::GenerateAndAllocateRegisters::buildLiveRanges(v2, v175, v177, v178, v179, v180, v181, v182);
  v501 = (WTF *)&v503;
  v502 = (WTF *)16;
  *(_QWORD *)&v496 = v497;
  *((_QWORD *)&v496 + 1) = 4;
  *((_QWORD *)v2 + 12) = 1;
  v199 = *(JSC::B3::Air **)v2;
  v479 = *(unsigned int *)(*(_QWORD *)v2 + 108);
  if ((_DWORD)v479)
  {
    v200 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v199 + 12) + 8 * v200))
    {
      if (v479 == ++v200)
        goto LABEL_538;
    }
    if ((_DWORD)v479 == (_DWORD)v200)
      goto LABEL_538;
    v478 = *(JSC::B3::Air **)v2;
    v201 = (uint64_t *)((char *)v2 + 16);
    v492 = (uint64_t *)((char *)v2 + 32);
    v488 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v489 = (char *)v2 + 16;
    LODWORD(v202) = v479;
    LODWORD(v203) = v200;
    while (1)
    {
      if (v202 <= v203)
      {
        __break(0xC471u);
        JUMPOUT(0x198027FA4);
      }
      v481 = v203;
      v204 = *(unsigned int **)(*((_QWORD *)v199 + 12) + 8 * v203);
      v205 = (_QWORD *)*((_QWORD *)v2 + 31);
      v483 = v204;
      v206 = v205[8] + 32 * *v204;
      v207 = *(unsigned int *)(v206 + 12);
      if ((_DWORD)v207)
      {
        v208 = *(int **)v206;
        v209 = 4 * v207;
        do
        {
          v210 = *v208;
          v211 = *(_DWORD *)(*v205 + 176) + 33;
          v334 = v211 >= *v208;
          v212 = v211 - *v208;
          if (v212 == 0 || !v334)
            v210 = v212;
          if (v210 <= 0xFFFFFFDF && (v210 - 1) >= 0x20)
          {
            v213 = -v210;
            if (v210 > 0)
              v213 = v210;
            v214 = v492;
            if (v210 > 0)
              v214 = v201;
            v215 = v213;
            v216 = *v214;
            v217 = (unsigned int **)(*v214 + 16 * v213);
            if (*v217)
            {
              v396 = v210 <= 0;
              v218 = 128;
              if (!v396)
                v218 = 112;
              v201 = (uint64_t *)v489;
              if (*(_QWORD *)(*(_QWORD *)((char *)v490 + v218) + 8 * v213) == *((_QWORD *)v490 + 12))
              {
                v219 = HIDWORD(v496);
                if (HIDWORD(v496) == DWORD2(v496))
                {
                  v220 = WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v496, HIDWORD(v496) + 1, (unint64_t)v217);
                  v221 = HIDWORD(v496) + 1;
                  *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *(_QWORD *)v220;
                  HIDWORD(v496) = v221;
                }
                else
                {
                  *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *v217;
                  HIDWORD(v496) = v219 + 1;
                }
              }
            }
            else
            {
              v222 = v210 < 0;
              v223 = 16;
              if (!v222)
                v223 = 8;
              v224 = *(_QWORD *)v490;
              v192 = 8;
              if (HIBYTE(dword_1ECF4C7B0))
              {
                if (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v224 + 8) + 212))
                  v192 = v223;
                else
                  v192 = 8;
              }
              if (HIDWORD(v502) && (v225 = (unsigned int *)*((_QWORD *)v501 + HIDWORD(v502) - 1), *v225 >= v192))
                --HIDWORD(v502);
              else
                v225 = JSC::B3::Air::Code::addStackSlot(v224, v192, 1);
              *v217 = v225;
              *(_BYTE *)(v216 + 16 * v215 + 8) = -1;
              v201 = (uint64_t *)v489;
            }
          }
          ++v208;
          v209 -= 4;
        }
        while (v209);
      }
      if (HIDWORD(v496))
      {
        v226 = (WTF **)v496;
        v227 = HIDWORD(v502);
        v228 = 8 * HIDWORD(v496);
        do
        {
          v229 = *v226;
          v493 = *v226;
          if (v227 == (_DWORD)v502)
          {
            v230 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v501, v227 + 1, (unint64_t)&v493);
            v227 = HIDWORD(v502);
            *((_QWORD *)v501 + HIDWORD(v502)) = *(_QWORD *)v230;
          }
          else
          {
            *((_QWORD *)v501 + v227) = v229;
          }
          HIDWORD(v502) = ++v227;
          ++v226;
          v228 -= 8;
        }
        while (v228);
      }
      v231 = v490;
      if (DWORD2(v496))
      {
        if (HIDWORD(v496))
          HIDWORD(v496) = 0;
        v232 = v496;
        if (v497 != (_QWORD *)v496 && (_QWORD)v496)
        {
          *(_QWORD *)&v496 = 0;
          DWORD2(v496) = 0;
          WTF::fastFree(v232, (void *)v192, v193, v194, v195, v196, v197, v198);
          v232 = v496;
        }
        if (!v232)
        {
          *(_QWORD *)&v496 = v497;
          DWORD2(v496) = 4;
        }
      }
      ++*((_QWORD *)v490 + 12);
      v233 = v483[5];
      if ((_DWORD)v233)
        break;
LABEL_484:
      v354 = (_QWORD *)*((_QWORD *)v231 + 31);
      v355 = v354[10] + 32 * *v483;
      v356 = *(unsigned int *)(v355 + 12);
      if ((_DWORD)v356)
      {
        v357 = *(int **)v355;
        v358 = 4 * v356;
        do
        {
          v359 = *v357;
          v360 = *(_DWORD *)(*v354 + 176) + 33;
          v334 = v360 >= *v357;
          v361 = v360 - *v357;
          if (v361 == 0 || !v334)
            v359 = v361;
          if (v359 <= 0xFFFFFFDF && (v359 - 1) >= 0x20)
          {
            v362 = -v359;
            if (v359 > 0)
              v362 = v359;
            v363 = v492;
            if (v359 > 0)
              v363 = v201;
            v364 = v362;
            v365 = *v363;
            v366 = (unsigned int **)(*v363 + 16 * v362);
            if (*v366)
            {
              v396 = v359 <= 0;
              v367 = 128;
              if (!v396)
                v367 = 112;
              v201 = (uint64_t *)v489;
              if (*(_QWORD *)(*(_QWORD *)((char *)v490 + v367) + 8 * v362) == *((_QWORD *)v490 + 12))
              {
                v368 = HIDWORD(v496);
                if (HIDWORD(v496) == DWORD2(v496))
                {
                  v369 = WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v496, HIDWORD(v496) + 1, (unint64_t)v366);
                  v370 = HIDWORD(v496) + 1;
                  *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *(_QWORD *)v369;
                  HIDWORD(v496) = v370;
                }
                else
                {
                  *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *v366;
                  HIDWORD(v496) = v368 + 1;
                }
              }
            }
            else
            {
              v222 = v359 < 0;
              v371 = 16;
              if (!v222)
                v371 = 8;
              v372 = *(_QWORD *)v490;
              v192 = 8;
              if (HIBYTE(dword_1ECF4C7B0))
              {
                if (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v372 + 8) + 212))
                  v192 = v371;
                else
                  v192 = 8;
              }
              if (HIDWORD(v502) && (v373 = (unsigned int *)*((_QWORD *)v501 + HIDWORD(v502) - 1), *v373 >= v192))
                --HIDWORD(v502);
              else
                v373 = JSC::B3::Air::Code::addStackSlot(v372, v192, 1);
              *v366 = v373;
              *(_BYTE *)(v365 + 16 * v364 + 8) = -1;
              v201 = (uint64_t *)v489;
            }
          }
          ++v357;
          v358 -= 4;
        }
        while (v358);
      }
      if (HIDWORD(v496))
      {
        v374 = (WTF **)v496;
        v375 = HIDWORD(v502);
        v376 = 8 * HIDWORD(v496);
        do
        {
          v377 = *v374;
          v493 = *v374;
          if (v375 == (_DWORD)v502)
          {
            v378 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v501, v375 + 1, (unint64_t)&v493);
            v375 = HIDWORD(v502);
            *((_QWORD *)v501 + HIDWORD(v502)) = *(_QWORD *)v378;
          }
          else
          {
            *((_QWORD *)v501 + v375) = v377;
          }
          HIDWORD(v502) = ++v375;
          ++v374;
          v376 -= 8;
        }
        while (v376);
      }
      v2 = v490;
      v199 = v478;
      if (DWORD2(v496))
      {
        if (HIDWORD(v496))
          HIDWORD(v496) = 0;
        v379 = v496;
        if (v497 != (_QWORD *)v496 && (_QWORD)v496)
        {
          *(_QWORD *)&v496 = 0;
          DWORD2(v496) = 0;
          WTF::fastFree(v379, (void *)v192, v193, v194, v195, v196, v197, v198);
          v379 = v496;
        }
        if (!v379)
        {
          *(_QWORD *)&v496 = v497;
          DWORD2(v496) = 4;
        }
      }
      ++*((_QWORD *)v490 + 12);
      v203 = (v481 + 1);
      v202 = *((unsigned int *)v478 + 27);
      if (v202 > v203)
      {
        while (!*(_QWORD *)(*((_QWORD *)v478 + 12) + 8 * v203))
        {
          if (v202 == ++v203)
          {
            LODWORD(v203) = *((_DWORD *)v478 + 27);
            break;
          }
        }
      }
      if ((_DWORD)v479 == (_DWORD)v203)
      {
        v380 = v496;
        if (v497 != (_QWORD *)v496 && (_QWORD)v496 != 0)
        {
          *(_QWORD *)&v496 = 0;
          DWORD2(v496) = 0;
          WTF::fastFree(v380, (void *)v192, v193, v194, v195, v196, v197, v198);
        }
        goto LABEL_538;
      }
    }
    v234 = (uint64_t *)*((_QWORD *)v483 + 1);
    v486 = &v234[16 * v233];
    while (2)
    {
      v493 = (WTF *)v495;
      v494 = 4;
      v235 = *((unsigned int *)v234 + 3);
      if ((_DWORD)v235)
      {
        v236 = *v234;
        v237 = *v234 + 32 * v235;
        while (1)
        {
          v238 = *(char *)(v236 + 8);
          if (v238 > 0xD)
            goto LABEL_345;
          if (((1 << v238) & 0x31C2) != 0)
          {
            v239 = *(unsigned int *)(v236 + 16);
            LODWORD(v500) = *(_DWORD *)(v236 + 16);
            if (HIDWORD(v494))
            {
              v240 = v493;
              v241 = HIDWORD(v494);
              do
              {
                v242 = *(_DWORD *)v240;
                v240 = (WTF *)((char *)v240 + 4);
                if (v242 == v239)
                  goto LABEL_345;
              }
              while (--v241);
            }
            if (HIDWORD(v494) == (_DWORD)v494)
            {
              v243 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v493, (void *)(HIDWORD(v494) + 1), (unint64_t)&v500, v194, v195, v196, v197, v198);
              *((_DWORD *)v493 + HIDWORD(v494)) = *v243;
              v239 = v500;
            }
            else
            {
              *((_DWORD *)v493 + HIDWORD(v494)) = v239;
            }
            ++HIDWORD(v494);
            if (v239 <= 0xFFFFFFDF && v239 - 1 >= 0x20)
            {
              v244 = -(int)v239;
              if ((int)v239 > 0)
                v244 = v239;
              v245 = v492;
              if ((int)v239 > 0)
                v245 = v201;
              v246 = v244;
              v247 = *v245;
              v248 = (uint64_t *)(*v245 + 16 * v244);
              if (!*v248)
              {
                if ((v239 & 0x80000000) != 0)
                  v259 = 16;
                else
                  v259 = 8;
                v260 = *(_QWORD *)v231;
                if (!HIBYTE(dword_1ECF4C7B0) || !HIBYTE(word_1ECF4C79E) && !*(_BYTE *)(*(_QWORD *)(v260 + 8) + 212))
                  v259 = 8;
                if (!HIDWORD(v502) || (v261 = *((_QWORD *)v501 + HIDWORD(v502) - 1), *(_DWORD *)v261 < v259))
                {
                  v262 = *(_QWORD *)(v488 + 752);
                  if (v262)
                  {
                    v263 = (_BYTE *)(v262 + 8488);
                    *(_BYTE *)(v262 + 8488) = 1;
                    v264 = *(unsigned int *)(v262 + 8504);
                    if ((_DWORD)v264)
                    {
                      *(_DWORD *)(v262 + 8504) = v264 - *(_DWORD *)(v262 + 8508);
                      v265 = *(_QWORD *)(v262 + 8496) - v264;
                      goto LABEL_335;
                    }
                    v276 = *(_QWORD *)(v262 + 8528);
                    v277 = *(_QWORD *)(v262 + 8512);
                    if (v276)
                    {
LABEL_334:
                      v278 = __clz(v276);
                      *(_QWORD *)(v262 + 8528) = v276 & ~(0x8000000000000000 >> v278);
                      v265 = v277 + 16 * v278;
LABEL_335:
                      *v263 = 0;
LABEL_336:
                      *(_DWORD *)v265 = v259;
                      *(_BYTE *)(v265 + 4) = 1;
                      *(_DWORD *)(v265 + 8) = -1;
                      *(_QWORD *)(v265 + 16) = 0;
                      v506[0] = v265;
                      v261 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v260 + 64, v506);
                      v192 = v506[0];
                      v506[0] = 0;
                      if (v192)
                      {
                        v279 = *(_QWORD *)(v488 + 752);
                        if (v279)
                        {
                          if (v192 >> 43
                            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v192 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v192)) & 1) == 0)
                          {
                            if (v192 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v192 >> 24)
                            {
                              v194 = 0;
                            }
                            else
                            {
                              v194 = (*(_DWORD *)((char *)off_1ECF425F8
                                                + ((((v192 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                + 24) >> (2 * ((BYTE3(v192) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                              if ((_DWORD)v194 == 1)
                                goto LABEL_340;
                            }
                            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v279, v192, 1, v194, v195, v196, v197, v198);
                          }
                          else
                          {
LABEL_340:
                            v280 = *(unsigned int *)(v279 + 8000);
                            if (v280 >= 0x3E7)
                            {
                              pas_thread_local_cache_append_deallocation_slow(v279, v192, (os_unfair_lock_s *)5, v194, v195, v196, v197, v198);
                            }
                            else
                            {
                              *(_QWORD *)(v279 + 8 * v280) = v192 | 0x5000000000000;
                              *(_DWORD *)(v279 + 8000) = v280 + 1;
                            }
                          }
                        }
                        else
                        {
                          pas_try_deallocate_slow_no_cache(v192, (uint64_t)&bmalloc_heap_config, 1);
                        }
                      }
                      if (*(_BYTE *)(v260 + 196))
                      {
                        v332 = *(_DWORD *)v261;
                        v333 = 4;
                        if (*(_DWORD *)v261 > 4u)
                          v333 = 8;
                        v334 = v332 >= 2;
                        v122 = v332 == 2;
                        v335 = 2;
                        if (!v122)
                          v335 = v333;
                        if (!v334)
                          v335 = 1;
                        v336 = (v259 + v335 + 0xFFFFFFFFLL + *(unsigned int *)(v260 + 184)) & -v335;
                        *(_QWORD *)(v261 + 16) = -(uint64_t)((v259 + v335 - 1 + *(_DWORD *)(v260 + 184)) & -(int)v335);
                        *(_DWORD *)(v260 + 184) = (v336 + 15) & 0xFFFFFFF0;
                      }
LABEL_343:
                      *v248 = v261;
                      v281 = v247 + 16 * v246;
                      goto LABEL_344;
                    }
                    if (*(_BYTE *)(v262 + 8493) == 6)
                    {
                      v314 = *(_DWORD *)(v262 + 8524);
                      v315 = *(unsigned int *)(v262 + 8520);
                      if (v315 < v314)
                      {
                        *(_QWORD *)&v263[8 * v315 + 56] = 0;
                        v316 = (unint64_t *)(v262 + 8 * v315 + 8552);
                        v317 = v314 - 1 - v315;
                        while (v317)
                        {
                          v277 += 1024;
                          v319 = *v316++;
                          v318 = v319;
                          LODWORD(v315) = v315 + 1;
                          --v317;
                          if (v319)
                          {
                            v276 = __rbit64(v318);
                            *(_DWORD *)(v262 + 8520) = v315;
                            *(_QWORD *)(v262 + 8512) = v277;
                            goto LABEL_334;
                          }
                        }
                        *(_DWORD *)(v262 + 8520) = v314;
                      }
                    }
                    *v263 = 0;
                  }
                  v265 = bmalloc_allocate_casual(24, 1);
                  goto LABEL_336;
                }
                --HIDWORD(v502);
                goto LABEL_343;
              }
              v396 = (int)v239 <= 0;
              v249 = 128;
              if (!v396)
                v249 = 112;
              if (*(_QWORD *)(*(_QWORD *)((char *)v231 + v249) + 8 * v244) != *((_QWORD *)v231 + 12))
                goto LABEL_345;
              if (HIDWORD(v496) != DWORD2(v496))
              {
                v275 = HIDWORD(v496) + 1;
                *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *v248;
LABEL_331:
                HIDWORD(v496) = v275;
                goto LABEL_345;
              }
              v250 = HIDWORD(v496) + 1;
LABEL_297:
              v251 = WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v496, v250, (unint64_t)v248);
              v252 = HIDWORD(v496) + 1;
              *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *(_QWORD *)v251;
              HIDWORD(v496) = v252;
              goto LABEL_345;
            }
            goto LABEL_345;
          }
          if (v238 != 11)
            goto LABEL_345;
          v253 = *(unsigned int *)(v236 + 16);
          LODWORD(v500) = *(_DWORD *)(v236 + 16);
          v254 = HIDWORD(v494);
          if (!HIDWORD(v494))
            break;
          v255 = v493;
          v256 = HIDWORD(v494);
          while (1)
          {
            v257 = *(_DWORD *)v255;
            v255 = (WTF *)((char *)v255 + 4);
            if (v257 == v253)
              break;
            if (!--v256)
              goto LABEL_303;
          }
LABEL_369:
          v293 = *(unsigned int *)(v236 + 20);
          LODWORD(v500) = *(_DWORD *)(v236 + 20);
          if ((_DWORD)v254)
          {
            v294 = v493;
            v295 = v254;
            do
            {
              v296 = *(_DWORD *)v294;
              v294 = (WTF *)((char *)v294 + 4);
              if (v296 == v293)
                goto LABEL_345;
            }
            while (--v295);
          }
          if ((_DWORD)v254 == (_DWORD)v494)
          {
            v297 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v493, (void *)(v254 + 1), (unint64_t)&v500, v194, v195, v196, v197, v198);
            *((_DWORD *)v493 + HIDWORD(v494)) = *v297;
            v293 = v500;
          }
          else
          {
            *((_DWORD *)v493 + v254) = v293;
          }
          ++HIDWORD(v494);
          if (v293 <= 0xFFFFFFDF && v293 - 1 >= 0x20)
          {
            v298 = -(int)v293;
            if ((int)v293 > 0)
              v298 = v293;
            v299 = v492;
            if ((int)v293 > 0)
              v299 = v201;
            v300 = v298;
            v301 = *v299;
            v248 = (uint64_t *)(*v299 + 16 * v298);
            if (!*v248)
            {
              if ((v293 & 0x80000000) != 0)
                v303 = 16;
              else
                v303 = 8;
              v304 = *(_QWORD *)v231;
              if (!HIBYTE(dword_1ECF4C7B0) || !HIBYTE(word_1ECF4C79E) && !*(_BYTE *)(*(_QWORD *)(v304 + 8) + 212))
                v303 = 8;
              if (HIDWORD(v502))
              {
                v305 = *((_QWORD *)v501 + HIDWORD(v502) - 1);
                if (*(_DWORD *)v305 >= v303)
                {
                  --HIDWORD(v502);
                  goto LABEL_408;
                }
              }
              v306 = *(_QWORD *)(v488 + 752);
              if (v306)
              {
                v307 = (_BYTE *)(v306 + 8488);
                *(_BYTE *)(v306 + 8488) = 1;
                v308 = *(unsigned int *)(v306 + 8504);
                if ((_DWORD)v308)
                {
                  *(_DWORD *)(v306 + 8504) = v308 - *(_DWORD *)(v306 + 8508);
                  v309 = *(_QWORD *)(v306 + 8496) - v308;
                  goto LABEL_404;
                }
                v310 = *(_QWORD *)(v306 + 8528);
                v311 = *(_QWORD *)(v306 + 8512);
                if (v310)
                {
LABEL_403:
                  v312 = __clz(v310);
                  *(_QWORD *)(v306 + 8528) = v310 & ~(0x8000000000000000 >> v312);
                  v309 = v311 + 16 * v312;
LABEL_404:
                  *v307 = 0;
LABEL_405:
                  *(_DWORD *)v309 = v303;
                  *(_BYTE *)(v309 + 4) = 1;
                  *(_DWORD *)(v309 + 8) = -1;
                  *(_QWORD *)(v309 + 16) = 0;
                  v506[0] = v309;
                  v305 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v304 + 64, v506);
                  v313 = v506[0];
                  v506[0] = 0;
                  if (v313)
                    WTF::fastFree(v313, (void *)v192, v193, v194, v195, v196, v197, v198);
                  if (*(_BYTE *)(v304 + 196))
                  {
                    v342 = *(_DWORD *)v305;
                    v343 = 4;
                    if (*(_DWORD *)v305 > 4u)
                      v343 = 8;
                    v344 = v342 >= 2;
                    v122 = v342 == 2;
                    v345 = 2;
                    if (!v122)
                      v345 = v343;
                    if (!v344)
                      v345 = 1;
                    v346 = (v303 + v345 + 0xFFFFFFFFLL + *(unsigned int *)(v304 + 184)) & -v345;
                    *(_QWORD *)(v305 + 16) = -(uint64_t)((v303 + v345 - 1 + *(_DWORD *)(v304 + 184)) & -(int)v345);
                    *(_DWORD *)(v304 + 184) = (v346 + 15) & 0xFFFFFFF0;
                  }
LABEL_408:
                  *v248 = v305;
                  v281 = v301 + 16 * v300;
LABEL_344:
                  *(_BYTE *)(v281 + 8) = -1;
                  v201 = (uint64_t *)v489;
                  v231 = v490;
                  goto LABEL_345;
                }
                if (*(_BYTE *)(v306 + 8493) == 6)
                {
                  v326 = *(_DWORD *)(v306 + 8524);
                  v327 = *(unsigned int *)(v306 + 8520);
                  if (v327 < v326)
                  {
                    *(_QWORD *)&v307[8 * v327 + 56] = 0;
                    v328 = (unint64_t *)(v306 + 8 * v327 + 8552);
                    v329 = v326 - 1 - v327;
                    while (v329)
                    {
                      v311 += 1024;
                      v331 = *v328++;
                      v330 = v331;
                      LODWORD(v327) = v327 + 1;
                      --v329;
                      if (v331)
                      {
                        v310 = __rbit64(v330);
                        *(_DWORD *)(v306 + 8520) = v327;
                        *(_QWORD *)(v306 + 8512) = v311;
                        goto LABEL_403;
                      }
                    }
                    *(_DWORD *)(v306 + 8520) = v326;
                  }
                }
                *v307 = 0;
              }
              v309 = bmalloc_allocate_casual(24, 1);
              goto LABEL_405;
            }
            v396 = (int)v293 <= 0;
            v302 = 128;
            if (!v396)
              v302 = 112;
            if (*(_QWORD *)(*(_QWORD *)((char *)v231 + v302) + 8 * v298) != *((_QWORD *)v231 + 12))
              goto LABEL_345;
            if (HIDWORD(v496) != DWORD2(v496))
            {
              v275 = HIDWORD(v496) + 1;
              *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *v248;
              goto LABEL_331;
            }
            v250 = HIDWORD(v496) + 1;
            goto LABEL_297;
          }
LABEL_345:
          v236 += 32;
          if (v236 == v237)
            goto LABEL_464;
        }
LABEL_303:
        if (HIDWORD(v494) == (_DWORD)v494)
        {
          v258 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v493, (void *)(HIDWORD(v494) + 1), (unint64_t)&v500, v194, v195, v196, v197, v198);
          *((_DWORD *)v493 + HIDWORD(v494)) = *v258;
          v253 = v500;
        }
        else
        {
          *((_DWORD *)v493 + HIDWORD(v494)) = v253;
        }
        ++HIDWORD(v494);
        if (v253 > 0xFFFFFFDF || v253 - 1 < 0x20)
          goto LABEL_368;
        v266 = -(int)v253;
        if ((int)v253 > 0)
          v266 = v253;
        v267 = v492;
        if ((int)v253 > 0)
          v267 = v201;
        v268 = v266;
        v269 = *v267;
        v270 = (uint64_t *)(*v267 + 16 * v266);
        if (*v270)
        {
          v396 = (int)v253 <= 0;
          v271 = 128;
          if (!v396)
            v271 = 112;
          if (*(_QWORD *)(*(_QWORD *)((char *)v231 + v271) + 8 * v266) == *((_QWORD *)v231 + 12))
          {
            v272 = HIDWORD(v496);
            if (HIDWORD(v496) == DWORD2(v496))
            {
              v273 = WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v496, HIDWORD(v496) + 1, (unint64_t)v270);
              v274 = HIDWORD(v496) + 1;
              *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *(_QWORD *)v273;
              HIDWORD(v496) = v274;
            }
            else
            {
              *(_QWORD *)(v496 + 8 * HIDWORD(v496)) = *v270;
              HIDWORD(v496) = v272 + 1;
            }
          }
          goto LABEL_368;
        }
        if ((v253 & 0x80000000) != 0)
          v282 = 16;
        else
          v282 = 8;
        v283 = *(_QWORD *)v231;
        if (!HIBYTE(dword_1ECF4C7B0) || !HIBYTE(word_1ECF4C79E) && !*(_BYTE *)(*(_QWORD *)(v283 + 8) + 212))
          v282 = 8;
        if (HIDWORD(v502))
        {
          v284 = *((_QWORD *)v501 + HIDWORD(v502) - 1);
          if (*(_DWORD *)v284 >= v282)
          {
            --HIDWORD(v502);
            goto LABEL_367;
          }
        }
        v285 = *(_QWORD *)(v488 + 752);
        if (v285)
        {
          v286 = (_BYTE *)(v285 + 8488);
          *(_BYTE *)(v285 + 8488) = 1;
          v287 = *(unsigned int *)(v285 + 8504);
          if ((_DWORD)v287)
          {
            *(_DWORD *)(v285 + 8504) = v287 - *(_DWORD *)(v285 + 8508);
            v288 = *(_QWORD *)(v285 + 8496) - v287;
            goto LABEL_363;
          }
          v289 = *(_QWORD *)(v285 + 8528);
          v290 = *(_QWORD *)(v285 + 8512);
          if (v289)
          {
LABEL_362:
            v291 = __clz(v289);
            *(_QWORD *)(v285 + 8528) = v289 & ~(0x8000000000000000 >> v291);
            v288 = v290 + 16 * v291;
LABEL_363:
            *v286 = 0;
LABEL_364:
            *(_DWORD *)v288 = v282;
            *(_BYTE *)(v288 + 4) = 1;
            *(_DWORD *)(v288 + 8) = -1;
            *(_QWORD *)(v288 + 16) = 0;
            v506[0] = v288;
            v284 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v283 + 64, v506);
            v292 = v506[0];
            v506[0] = 0;
            if (v292)
              WTF::fastFree(v292, (void *)v192, v193, v194, v195, v196, v197, v198);
            if (*(_BYTE *)(v283 + 196))
            {
              v337 = *(_DWORD *)v284;
              v338 = 4;
              if (*(_DWORD *)v284 > 4u)
                v338 = 8;
              v339 = v337 >= 2;
              v122 = v337 == 2;
              v340 = 2;
              if (!v122)
                v340 = v338;
              if (!v339)
                v340 = 1;
              v341 = (v282 + v340 + 0xFFFFFFFFLL + *(unsigned int *)(v283 + 184)) & -v340;
              *(_QWORD *)(v284 + 16) = -(uint64_t)((v282 + v340 - 1 + *(_DWORD *)(v283 + 184)) & -(int)v340);
              *(_DWORD *)(v283 + 184) = (v341 + 15) & 0xFFFFFFF0;
            }
LABEL_367:
            *v270 = v284;
            *(_BYTE *)(v269 + 16 * v268 + 8) = -1;
            v201 = (uint64_t *)v489;
            v231 = v490;
LABEL_368:
            v254 = HIDWORD(v494);
            goto LABEL_369;
          }
          if (*(_BYTE *)(v285 + 8493) == 6)
          {
            v320 = *(_DWORD *)(v285 + 8524);
            v321 = *(unsigned int *)(v285 + 8520);
            if (v321 < v320)
            {
              *(_QWORD *)&v286[8 * v321 + 56] = 0;
              v322 = (unint64_t *)(v285 + 8 * v321 + 8552);
              v323 = v320 - 1 - v321;
              while (v323)
              {
                v290 += 1024;
                v325 = *v322++;
                v324 = v325;
                LODWORD(v321) = v321 + 1;
                --v323;
                if (v325)
                {
                  v289 = __rbit64(v324);
                  *(_DWORD *)(v285 + 8520) = v321;
                  *(_QWORD *)(v285 + 8512) = v290;
                  goto LABEL_362;
                }
              }
              *(_DWORD *)(v285 + 8520) = v320;
            }
          }
          *v286 = 0;
        }
        v288 = bmalloc_allocate_casual(24, 1);
        goto LABEL_364;
      }
LABEL_464:
      if (HIDWORD(v496))
      {
        v347 = (uint64_t *)v496;
        v348 = HIDWORD(v502);
        v349 = 8 * HIDWORD(v496);
        do
        {
          v350 = *v347;
          v506[0] = *v347;
          if (v348 == (_DWORD)v502)
          {
            v351 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v501, v348 + 1, (unint64_t)v506);
            v348 = HIDWORD(v502);
            *((_QWORD *)v501 + HIDWORD(v502)) = *(_QWORD *)v351;
          }
          else
          {
            *((_QWORD *)v501 + v348) = v350;
          }
          HIDWORD(v502) = ++v348;
          ++v347;
          v349 -= 8;
        }
        while (v349);
      }
      if (DWORD2(v496))
      {
        if (HIDWORD(v496))
          HIDWORD(v496) = 0;
        v352 = v496;
        if (v497 != (_QWORD *)v496 && (_QWORD)v496)
        {
          *(_QWORD *)&v496 = 0;
          DWORD2(v496) = 0;
          WTF::fastFree(v352, (void *)v192, v193, v194, v195, v196, v197, v198);
          if (!(_QWORD)v496)
          {
LABEL_476:
            *(_QWORD *)&v496 = v497;
            DWORD2(v496) = 4;
          }
        }
        else if (!(_QWORD)v496)
        {
          goto LABEL_476;
        }
      }
      ++*((_QWORD *)v231 + 12);
      v353 = v493;
      if (v495 != (_BYTE *)v493 && v493)
      {
        v493 = 0;
        LODWORD(v494) = 0;
        WTF::fastFree((unint64_t)v353, (void *)v192, v193, v194, v195, v196, v197, v198);
      }
      v234 += 16;
      if (v234 == v486)
        goto LABEL_484;
      continue;
    }
  }
LABEL_538:
  v382 = v501;
  if (&v503 != (uint64_t *)v501 && v501 != 0)
  {
    v501 = 0;
    LODWORD(v502) = 0;
    WTF::fastFree((unint64_t)v382, (void *)v192, v193, v194, v195, v196, v197, v198);
  }
  *((_QWORD *)v2 + 29) = 0;
  v384 = (_QWORD *)((char *)v2 + 232);
  *((_QWORD *)v2 + 30) = 0;
  WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)v2 + 6, (const void **)(*(_QWORD *)v2 + 16), v193, v194, v195, v196, v197, v198);
  v391 = *((unsigned int *)v2 + 15);
  if ((_DWORD)v391)
  {
    v392 = (char *)*((_QWORD *)v490 + 6);
    do
    {
      v393 = *v392;
      if ((*v392 & 0x40) != 0)
        goto LABEL_661;
      *v384 |= 1 << v393;
      v394 = v393 & 0x7F;
      if (v394 == 127)
      {
        v395 = 0;
      }
      else if ((v393 & 0x60) != 0)
      {
        v395 = 31 - v394;
      }
      else
      {
        v395 = v394 + 1;
      }
      v396 = v395 <= 0;
      if (v395 <= 0)
        v397 = -v395;
      else
        v397 = v395;
      v398 = 32;
      if (!v396)
        v398 = 16;
      v399 = *(_QWORD *)((char *)v490 + v398);
      v400 = *(_QWORD *)v490;
      v401 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v401 = 8;
      *(_BYTE *)(v401 + 4) = 1;
      *(_DWORD *)(v401 + 8) = -1;
      *(_QWORD *)(v401 + 16) = 0;
      v501 = (WTF *)v401;
      v403 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v400 + 64, (uint64_t *)&v501);
      v404 = v501;
      v501 = 0;
      if (v404)
        WTF::fastFree((unint64_t)v404, v402, v385, v386, v387, v388, v389, v390);
      if (*(_BYTE *)(v400 + 196))
      {
        v405 = *(_DWORD *)v403;
        v406 = 8;
        if (*(_DWORD *)v403 <= 4u)
          v406 = 4;
        v407 = v405 >= 2;
        v122 = v405 == 2;
        v408 = 2;
        if (!v122)
          v408 = v406;
        if (!v407)
          v408 = 1;
        v409 = (v408 + 0x100000007 + *(unsigned int *)(v400 + 184)) & -v408;
        *(_QWORD *)(v403 + 16) = -(uint64_t)v409;
        *(_DWORD *)(v400 + 184) = (v409 + 15) & 0xFFFFFFF0;
      }
      *(_QWORD *)(v399 + 16 * v397) = v403;
      *(_BYTE *)(v399 + 16 * v397 + 8) = -1;
      ++v392;
    }
    while (--v391);
  }
  WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)v490 + 8, (const void **)(*(_QWORD *)v490 + 32), v385, v386, v387, v388, v389, v390);
  v417 = *((unsigned int *)v490 + 19);
  if ((_DWORD)v417)
  {
    v418 = (char *)*((_QWORD *)v490 + 8);
    while (1)
    {
      v419 = *v418;
      if ((*v418 & 0x40) != 0)
        break;
      *v384 |= 1 << v419;
      v420 = v419 & 0x7F;
      if (v420 == 127)
      {
        v421 = 0;
      }
      else if ((v419 & 0x60) != 0)
      {
        v421 = (char)(31 - v420);
      }
      else
      {
        v421 = v420 + 1;
      }
      if (v421 > 0)
      {
        v422 = 16;
      }
      else
      {
        v421 = -v421;
        v422 = 32;
      }
      v423 = *(_QWORD *)v490;
      if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v423 + 8) + 212)))
        v424 = 16;
      else
        v424 = 8;
      v425 = v421;
      v426 = *(_QWORD *)((char *)v490 + v422);
      *(_QWORD *)(v426 + 16 * v421) = JSC::B3::Air::Code::addStackSlot(v423, v424, 1);
      *(_BYTE *)(v426 + 16 * v425 + 8) = -1;
      ++v418;
      if (!--v417)
        goto LABEL_586;
    }
LABEL_661:
    __break(1u);
LABEL_662:
    __break(0xC471u);
    JUMPOUT(0x198027F9CLL);
  }
LABEL_586:
  v427 = *(_QWORD *)v490;
  v428 = *(unsigned int *)(*(_QWORD *)v490 + 76);
  if (!(_DWORD)v428)
    goto LABEL_617;
  v429 = 0;
  v430 = -(uint64_t)*(unsigned int *)(v427 + 184);
  v431 = *(_QWORD *)(v427 + 64);
  while (!*(_QWORD *)(v431 + 8 * v429))
  {
    if (v428 == ++v429)
      goto LABEL_602;
  }
  while ((_DWORD)v428 != (_DWORD)v429)
  {
    v432 = *(_QWORD *)(v431 + 8 * v429);
    if (*(_BYTE *)(v432 + 4))
    {
      LODWORD(v433) = *(_DWORD *)v432;
      if (*(_DWORD *)v432 <= 8u)
        v433 = 8;
      else
        v433 = v433;
      v430 -= v433;
      *(_QWORD *)(v432 + 16) = v430;
    }
    v429 = (v429 + 1);
    if (v428 > v429)
    {
      while (!*(_QWORD *)(v431 + 8 * v429))
      {
        if (v428 == ++v429)
          goto LABEL_602;
      }
    }
  }
LABEL_602:
  v434 = 0;
  v435 = *(_QWORD *)(v427 + 64);
  do
  {
    v436 = *(_QWORD *)(v435 + 8 * v434);
    if (v436)
      break;
    ++v434;
  }
  while (v428 != v434);
  if ((_DWORD)v428 == (_DWORD)v434)
  {
LABEL_617:
    LODWORD(v436) = 0;
  }
  else
  {
    v437 = 0;
    do
    {
      v438 = *(_DWORD *)(*(_QWORD *)(v435 + 8 * v434) + 16);
      if (v437 <= -v438)
        v437 = -v438;
      v434 = (v434 + 1);
      if (v428 > v434)
      {
        while (!*(_QWORD *)(v435 + 8 * v434))
        {
          if (v428 == ++v434)
            goto LABEL_615;
        }
      }
    }
    while ((_DWORD)v428 != (_DWORD)v434);
LABEL_615:
    LODWORD(v436) = (v437 + 15) & 0xFFFFFFF0;
  }
  *(_DWORD *)(v427 + 184) = v436;
  *(_BYTE *)(v427 + 196) = 1;
  JSC::B3::Air::lowerStackArgs((WTF **)v427, v410, v411, v412, v413, v414, v415, v416);
}

void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::B3::Air::GenerateAndAllocateRegisters *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::GenerateAndAllocateRegisters *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  int v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int k;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int **v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  int v157;
  int v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  int m;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  char *v171;
  unint64_t v172;
  unint64_t n;
  unint64_t v174;
  unsigned int v175;
  _QWORD *v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  uint64_t v191;
  _OWORD *v192;
  uint64_t v193;
  __int128 *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  unsigned int *v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE *v214;
  unsigned __int8 v215;
  unsigned __int8 v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  char v224;
  char v225;
  uint64_t v226;
  unint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  unsigned int v241;
  char *v242;
  char *v243;
  unsigned int v244;
  int v245;
  uint64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  unint64_t v284;
  unsigned int v285;
  _QWORD *v286;
  uint64_t v287;
  _BYTE *v288;
  char v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unsigned __int8 *v295;
  uint64_t v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  _BOOL4 v311;
  int8x8_t v312;
  unint64_t v313;
  unsigned int *v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  BOOL v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char v323;
  unsigned int *v324;
  uint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  _DWORD *v336;
  int *v337;
  int v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  int v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  BOOL v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int *v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  unsigned int v366;
  unsigned int v367;
  uint64_t *v368;
  uint64_t v369;
  char v370;
  int8x16_t *v371;
  _DWORD *v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  int v377;
  char v378;
  __int16 v379;
  uint64_t v380;
  _DWORD *v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  int v386;
  char v387;
  __int16 v388;
  uint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  unsigned int v393;
  unint64_t v394;
  uint64_t v395;
  unsigned int v396;
  char v397;
  unsigned int v398;
  unsigned int *v399;
  unsigned int v400;
  JSC::AssemblerBuffer *v401;
  unsigned int v402;
  unint64_t v403;
  uint64_t v404;
  int v405;
  int v406;
  int v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  char v414;
  __int16 v415;
  char v416;
  char v417;
  unsigned int v418;
  unint64_t v419;
  uint64_t v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _OWORD *v428;
  __int128 *v429;
  uint64_t v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  uint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  unsigned int v441;
  unint64_t v442;
  int v443;
  unsigned int *v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  _DWORD *v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  _DWORD *v458;
  _QWORD *v459;
  int8x16_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  int v470;
  char v471;
  __int16 v472;
  uint64_t v473;
  unsigned int v474;
  _DWORD *v475;
  _DWORD *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int jj;
  unsigned int v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _DWORD *v490;
  _QWORD *v491;
  int *v492;
  unsigned int v493;
  void *v494;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  int v508;
  char v509;
  char v510;
  __int16 v511;
  uint64_t v512;
  char v513;
  unsigned int v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int v519;
  unint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  unint64_t v526;
  unsigned int v527;
  int8x16_t *v528;
  uint64_t v529;
  unsigned int v530;
  void **v531;
  uint64_t v532;
  _OWORD *v533;
  uint64_t v534;
  void **v535;
  __int128 v536;
  __int128 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  int v546;
  char v547;
  char v548;
  __int16 v549;
  uint64_t v550;
  char v551;
  unsigned int v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char v557;
  unint64_t v558;
  _QWORD *v559;
  unsigned int v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  int8x16_t *v564;
  _DWORD *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  int v575;
  char v576;
  __int16 v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  int v591;
  char v592;
  char v593;
  __int16 v594;
  uint64_t v595;
  uint64_t v596;
  unsigned int v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  unint64_t v603;
  uint64_t v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  unsigned int v608;
  unsigned int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  int v618;
  char v619;
  char v620;
  __int16 v621;
  uint64_t v622;
  char v623;
  unsigned int v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unsigned int v629;
  _QWORD *v630;
  uint64_t v631;
  uint64_t v632;
  _DWORD *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  int v643;
  char v644;
  __int16 v645;
  uint64_t v646;
  uint64_t v647;
  _DWORD *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  int v658;
  char v659;
  __int16 v660;
  uint64_t v661;
  unsigned int v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unsigned int v667;
  unint64_t v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  int v683;
  char v684;
  __int16 v685;
  uint64_t v686;
  unsigned int v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unsigned int v692;
  unint64_t v693;
  unint64_t ii;
  int v695;
  char v696;
  unsigned int v697;
  _QWORD *v698;
  _QWORD *v699;
  uint64_t v700;
  _DWORD *v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v717;
  uint64_t v718;
  int v719;
  int v720;
  char v721;
  char v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  char v727;
  char v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int *v731;
  unsigned int v732;
  uint64_t v733;
  _DWORD *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  int v744;
  char v745;
  __int16 v746;
  uint64_t v747;
  uint64_t v748;
  unsigned int v749;
  unint64_t v750;
  uint64_t v751;
  BOOL v752;
  _DWORD *v753;
  int v754;
  uint64_t v755;
  int v756;
  __int16 v757;
  uint64_t v758;
  uint64_t v759;
  unsigned int v761;
  unsigned int v762;
  unsigned int v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  int v774;
  char v775;
  __int16 v776;
  uint64_t v777;
  char v778;
  unsigned int v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int v786;
  uint64_t v787;
  int v788;
  unsigned int v789;
  char v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  void *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  unint64_t v807;
  unsigned int **v809;
  unsigned int **v810;
  unsigned int *v811;
  unsigned int v812;
  unsigned int v813;
  unsigned int **v814;
  unsigned int **v815;
  unsigned int *v816;
  unsigned int *v817;
  unsigned int v818;
  unsigned int v819;
  uint64_t v820;
  char *v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  _DWORD *v826;
  _DWORD *v827;
  int v828[2];
  _DWORD *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  uint64_t v835;
  int v836;
  JSC::CCallHelpers *v837;
  _QWORD *v838;
  uint64_t v839;
  int v840;
  uint64_t v841;
  char v842;
  _OWORD *v843;
  _QWORD *v844;
  uint64_t v845;
  uint64_t v846;
  signed int v847;
  char v848;
  uint64_t v849;
  uint64_t v850;
  char v851;
  uint64_t v852;
  char v853;
  JSC::B3::Air::GenerateAndAllocateRegisters *v854;
  uint64_t *v855;
  char *v856;
  unint64_t v857;
  _QWORD *v858;
  int v859;
  unsigned int v860;
  uint64_t v861;
  unsigned int *v862;
  uint64_t v863;
  int v864;
  uint64_t v865;
  _QWORD *v866;
  char *v867;
  __int16 *v868;
  unsigned __int8 v869;
  uint64_t v870;
  unsigned int v871;
  int v872;
  int v873;
  uint64_t v874;
  unsigned int v875;
  uint64_t v876;
  unsigned int v877;
  uint64_t v878;
  void *__src;
  int v880;
  unsigned int v881;
  _BYTE v882[96];
  _QWORD v883[2];
  unint64_t v884;
  int v885;
  unsigned int v886;
  __int128 v887;
  __int128 v888;
  unsigned int *v889;
  int v890;
  uint64_t v891;
  _QWORD v892[4];
  double v893;
  char v894;
  char v895;
  char v896;
  _QWORD v897[2];
  _BYTE v898[24];
  char v899;
  _BYTE v900[24];
  char v901;
  _QWORD *v902;
  int8x16_t *v903[5];

  v8 = this;
  *((_QWORD *)this + 1) = a2;
  v892[0] = "Air";
  v892[1] = 4;
  v892[2] = "GenerateAndAllocateRegisters::generate";
  v892[3] = 39;
  v893 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v823 = mach_absolute_time();
    v825 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v825 != -1)
    {
      *(_QWORD *)v900 = &__src;
      *(_QWORD *)v898 = v900;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v898, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v824) = dword_1ECF4400C;
    v893 = (double)(v823 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v824 * 1000000000.0);
    a2 = (JSC::CCallHelpers *)*((_QWORD *)v8 + 1);
  }
  v836 = *((unsigned __int8 *)a2 + 212);
  v837 = a2;
  *((_BYTE *)a2 + 212) = 0;
  JSC::B3::Air::GenerateAndAllocateRegisters::buildLiveRanges(v8, *((uint64_t **)v8 + 31), a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)v8;
  v14 = *(unsigned int *)(*(_QWORD *)v8 + 176);
  if ((_DWORD)v14)
  {
    for (i = 0; i != v14; ++i)
    {
      LODWORD(v887) = i + 33;
      v16 = -(i + 33);
      if ((int)i + 33 <= 0)
      {
        v17 = 128;
      }
      else
      {
        v16 = i + 33;
        v17 = 112;
      }
      v18 = *(_QWORD *)(*(_QWORD *)((char *)v8 + v17) + 8 * v16);
      if (v18)
      {
        __src = (void *)(v18 + 1);
        *(_QWORD *)v898 = &v898[16];
        *(_QWORD *)&v898[8] = 2;
        WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v900, (uint64_t *)v8 + 18, (uint64_t *)&__src, (uint64_t)v898, v9, v10, v11, v12);
        v22 = *(_QWORD *)v900;
        v23 = (_QWORD *)(*(_QWORD *)v900 + 8);
        v24 = *(unsigned int *)(*(_QWORD *)v900 + 20);
        if ((_DWORD)v24 == *(_DWORD *)(*(_QWORD *)v900 + 16))
          *(_DWORD *)(*(_QWORD *)(v22 + 8) + 4 * *(unsigned int *)(v22 + 20)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, (void *)(v24 + 1), (unint64_t)&v887, v21, v9, v10, v11, v12);
        else
          *(_DWORD *)(*v23 + 4 * v24) = i + 33;
        ++*(_DWORD *)(v22 + 20);
        v25 = *(_QWORD *)v898;
        if (&v898[16] != *(_BYTE **)v898)
        {
          if (*(_QWORD *)v898)
          {
            *(_QWORD *)v898 = 0;
            *(_DWORD *)&v898[8] = 0;
            WTF::fastFree(v25, v19, v20, v21, v9, v10, v11, v12);
          }
        }
      }
    }
  }
  v26 = *(unsigned int *)(v13 + 180);
  if ((_DWORD)v26)
  {
    v27 = -33;
    do
    {
      LODWORD(v887) = v27;
      v28 = -v27;
      if (v27 <= 0)
      {
        v29 = 128;
      }
      else
      {
        v28 = v27;
        v29 = 112;
      }
      v30 = *(_QWORD *)(*(_QWORD *)((char *)v8 + v29) + 8 * v28);
      if (v30)
      {
        __src = (void *)(v30 + 1);
        *(_QWORD *)v898 = &v898[16];
        *(_QWORD *)&v898[8] = 2;
        WTF::HashMap<unsigned long,WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v900, (uint64_t *)v8 + 18, (uint64_t *)&__src, (uint64_t)v898, v9, v10, v11, v12);
        v34 = *(_QWORD *)v900;
        v35 = (_QWORD *)(*(_QWORD *)v900 + 8);
        v36 = *(unsigned int *)(*(_QWORD *)v900 + 20);
        if ((_DWORD)v36 == *(_DWORD *)(*(_QWORD *)v900 + 16))
          *(_DWORD *)(*(_QWORD *)(v34 + 8) + 4 * *(unsigned int *)(v34 + 20)) = *(_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, (void *)(v36 + 1), (unint64_t)&v887, v33, v9, v10, v11, v12);
        else
          *(_DWORD *)(*v35 + 4 * v36) = v27;
        ++*(_DWORD *)(v34 + 20);
        v37 = *(_QWORD *)v898;
        if (&v898[16] != *(_BYTE **)v898)
        {
          if (*(_QWORD *)v898)
          {
            *(_QWORD *)v898 = 0;
            *(_DWORD *)&v898[8] = 0;
            WTF::fastFree(v37, v31, v32, v33, v9, v10, v11, v12);
          }
        }
      }
      --v27;
      --v26;
    }
    while (v26);
  }
  v38 = *(unsigned int *)(*(_QWORD *)v8 + 108);
  v39 = 16 * v38;
  v834 = *(_DWORD *)(*(_QWORD *)v8 + 108);
  v835 = 16 * v38;
  if ((_DWORD)v38)
  {
    if (v38 >> 28)
      goto LABEL_1057;
    v40 = (char *)WTF::fastMalloc((WTF *)(16 * v38));
    bzero(v40, v39);
  }
  else
  {
    v40 = 0;
  }
  v48 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
  *v48 = 0u;
  v48[1] = 0u;
  v48[2] = 0u;
  v48[3] = 0u;
  v48[4] = 0u;
  v48[5] = 0u;
  v48[6] = 0u;
  v48[7] = 0u;
  v48[8] = 0u;
  v48[9] = 0u;
  v48[10] = 0u;
  v48[11] = 0u;
  v48[12] = 0u;
  v48[13] = 0u;
  v48[14] = 0u;
  v48[15] = 0u;
  v49 = *(_QWORD *)v8;
  v50 = *(unsigned int *)(*(_QWORD *)v8 + 108);
  v856 = v40;
  if (!(_DWORD)v50)
    goto LABEL_72;
  for (j = 0; j != v50; ++j)
  {
    if (*(_QWORD *)(*(_QWORD *)(v49 + 96) + 8 * j))
    {
      if ((_DWORD)v50 == (_DWORD)j)
        break;
      v52 = j;
      v53 = *(unsigned int *)(*(_QWORD *)v8 + 108);
      while (1)
      {
        if (v53 <= v52)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CEE8);
        }
        v54 = &v40[16 * **(unsigned int **)(*(_QWORD *)(v49 + 96) + 8 * v52)];
        v55 = *((_DWORD *)v54 + 3);
        if (v55 >= 0x41)
        {
          *((_DWORD *)v54 + 3) = 64;
          v56 = *(char **)v54;
          v57 = 64;
          goto LABEL_60;
        }
        v58 = *((_DWORD *)v54 + 2);
        if (v58 <= 0x3F)
          break;
LABEL_59:
        v57 = *((unsigned int *)v54 + 3);
        v56 = *(char **)v54;
        if (!(_DWORD)v57)
        {
          v67 = 0;
LABEL_63:
          v68 = 4 * v67;
          do
          {
            *(_DWORD *)&v56[v68] = *(_DWORD *)((char *)v48 + v68);
            v68 += 4;
          }
          while (v68 != 256);
          goto LABEL_65;
        }
LABEL_60:
        memmove(v56, v48, 4 * v57);
        v67 = *((unsigned int *)v54 + 3);
        if ((_DWORD)v67 != 64)
        {
          v56 = *(char **)v54;
          goto LABEL_63;
        }
LABEL_65:
        *((_DWORD *)v54 + 3) = 64;
        ++v52;
        v53 = *(unsigned int *)(v49 + 108);
        if (v53 > v52)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v49 + 96) + 8 * v52))
          {
            if (v53 == ++v52)
            {
              v52 = *(unsigned int *)(v49 + 108);
              goto LABEL_70;
            }
          }
          v52 = v52;
        }
LABEL_70:
        if (v50 == v52)
        {
          v49 = *(_QWORD *)v8;
          goto LABEL_72;
        }
      }
      if (v58)
      {
        if (v55)
          *((_DWORD *)v54 + 3) = 0;
        v59 = *(_QWORD *)v54;
        if (!*(_QWORD *)v54)
        {
          v60 = 0;
LABEL_52:
          v61 = *((unsigned int *)v54 + 3);
          v62 = WTF::fastMalloc((WTF *)0x100);
          *((_DWORD *)v54 + 2) = 64;
          *(_QWORD *)v54 = v62;
          if ((_DWORD)v61)
          {
            v63 = 4 * v61;
            v64 = (_DWORD *)v62;
            v65 = (int *)v60;
            do
            {
              v66 = *v65++;
              *v64++ = v66;
              v63 -= 4;
            }
            while (v63);
          }
          v40 = v856;
          if (v60)
          {
            if (v62 == v60)
            {
              *(_QWORD *)v54 = 0;
              *((_DWORD *)v54 + 2) = 0;
            }
            WTF::fastFree(v60, v41, v42, v43, v44, v45, v46, v47);
          }
          goto LABEL_59;
        }
        *(_QWORD *)v54 = 0;
        *((_DWORD *)v54 + 2) = 0;
        WTF::fastFree(v59, v41, v42, v43, v44, v45, v46, v47);
        if (*((_DWORD *)v54 + 2) > 0x3Fu)
          goto LABEL_59;
      }
      v60 = *(_QWORD *)v54;
      goto LABEL_52;
    }
  }
LABEL_72:
  v69 = *(_DWORD *)(v49 + 252);
  while (v69)
  {
    if (*(_DWORD *)(v49 + 252) <= --v69)
    {
      __break(0xC471u);
      JUMPOUT(0x19802CEE0);
    }
    v70 = *(unsigned int **)(*(_QWORD *)(v49 + 240) + 16 * v69);
    v71 = (uint64_t *)*((_QWORD *)v8 + 31);
    v72 = v71[8] + 32 * *v70;
    v73 = *(unsigned int *)(v72 + 12);
    if ((_DWORD)v73)
    {
      v74 = *(int **)v72;
      v75 = *v71;
      v76 = 4 * v73;
      do
      {
        v77 = *v74;
        v78 = *(_DWORD *)(v75 + 176) + 33;
        v79 = v78 >= *v74;
        v80 = v78 - *v74;
        if (v80 == 0 || !v79)
          v77 = v80;
        v81 = v77 - 1;
        v82 = v77 <= 0xFFFFFFDF && v81 > 0x1F;
        if (!v82)
        {
          if (v77 <= 0)
            LOBYTE(v81) = 31 - v77;
          *(_DWORD *)(*(_QWORD *)&v40[16 * *v70] + 4 * (v81 & 0x7F)) = v77;
        }
        ++v74;
        v76 -= 4;
      }
      while (v76);
    }
  }
  WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  v83 = *(_QWORD *)v8;
  v889 = 0;
  v887 = 0u;
  v888 = 0u;
  v890 = -1;
  v891 = v83;
  v84 = *(unsigned int *)(v83 + 108);
  *(_QWORD *)v900 = 0;
  WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)&v888, v900, v84, v85, v86, v87, v88, v89);
  v97 = *(unsigned int **)v900;
  *(_QWORD *)v900 = 0;
  if (v97)
  {
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
    {
      atomic_store(1u, v97);
      WTF::fastFree((unint64_t)v97, v90, v91, v92, v93, v94, v95, v96);
    }
  }
  v100 = *(_QWORD *)v8;
  v101 = *(unsigned int *)(*(_QWORD *)v8 + 108);
  if ((_DWORD)v101)
  {
    v102 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v100 + 96) + 8 * v102))
    {
      if (v101 == ++v102)
        goto LABEL_110;
    }
    if ((_DWORD)v101 != (_DWORD)v102)
    {
      v103 = v102;
      v104 = *(unsigned int *)(*(_QWORD *)v8 + 108);
      do
      {
        if (v104 <= v103)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CEF0);
        }
        v105 = *(unsigned int **)(*(_QWORD *)(v100 + 96) + 8 * v103);
        v113 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v113 = 0xFFFFFFFF00000001;
        v114 = *v105;
        v115 = *(unsigned int **)(v888 + 8 * v114);
        *(_QWORD *)(v888 + 8 * v114) = v113;
        if (v115)
        {
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117)
          {
            atomic_store(1u, v115);
            WTF::fastFree((unint64_t)v115, v106, v107, v108, v109, v110, v111, v112);
          }
        }
        ++v103;
        v104 = *(unsigned int *)(v100 + 108);
        if (v104 > v103)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v100 + 96) + 8 * v103))
          {
            if (v104 == ++v103)
            {
              v103 = *(unsigned int *)(v100 + 108);
              goto LABEL_108;
            }
          }
          v103 = v103;
        }
LABEL_108:
        ;
      }
      while (v101 != v103);
      v100 = *(_QWORD *)v8;
    }
  }
LABEL_110:
  WTF::IndexMap<JSC::B3::Air::BasicBlock *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::IndexMap<>((uint64_t)&v884, *(unsigned int *)(v100 + 108));
  v125 = *(_QWORD *)v8;
  v849 = *(_QWORD *)(*(_QWORD *)v8 + 312);
  *((_QWORD *)v8 + 12) = 1;
  v839 = *(unsigned int *)(v125 + 108);
  if ((_DWORD)v839)
  {
    v126 = 0;
    v841 = v125;
    while (!*(_QWORD *)(*(_QWORD *)(v125 + 96) + 8 * v126))
    {
      if (v839 == ++v126)
        goto LABEL_116;
    }
    if ((_DWORD)v839 != (_DWORD)v126)
    {
      v866 = (_QWORD *)((char *)v8 + 32);
      v843 = (_OWORD *)((char *)v8 + 152);
      v838 = (_QWORD *)(v849 + 8);
      LODWORD(v133) = *(_DWORD *)(v125 + 108);
      LODWORD(v134) = v126;
      v858 = (_QWORD *)((char *)v8 + 16);
      v854 = v8;
      while (1)
      {
        if (v133 <= v134)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CF20);
        }
        v135 = *(unsigned int **)(*(_QWORD *)(v125 + 96) + 8 * v134);
        v889 = v135;
        v890 = -1;
        v136 = v884 + 40 * *v135;
        v137 = (_DWORD *)*((_QWORD *)v8 + 1);
        v138 = *(unsigned int *)(v136 + 12);
        v862 = v135;
        if ((_DWORD)v138)
        {
          v139 = v134;
          v140 = 0;
          v141 = 0;
          v142 = 12 * v138;
          do
          {
            if (v141 >= *(unsigned int *)(v136 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19802CEA0);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v136 + v140), (uint64_t)v137, v119, v120, v121, v122, v123, v124);
            ++v141;
            v140 += 12;
          }
          while (v142 != v140);
          v137 = (_DWORD *)*((_QWORD *)v8 + 1);
          LODWORD(v134) = v139;
          v135 = v862;
        }
        for (k = v137[50]; k < v137[13]; v137[50] = k)
        {
          if ((k + 4) > v137[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v137 + 14), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
            v135 = v862;
            k = v137[50];
          }
          *(_DWORD *)(*((_QWORD *)v137 + 7) + k) = -721215457;
          k = v137[50] + 4;
        }
        v137[52] = 0;
        *(_DWORD *)(*(_QWORD *)(v888 + 8 * *v135) + 4) = k;
        v144 = v858;
        if (v849)
        {
          *(_QWORD *)v900 = v135;
          v145 = *(unsigned int *)(v849 + 20);
          if ((_DWORD)v145 == *(_DWORD *)(v849 + 16))
          {
            v699 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v838, v145 + 1, (unint64_t)v900);
            v145 = *(unsigned int *)(v849 + 20);
            v135 = v862;
            *(_QWORD *)(*(_QWORD *)(v849 + 8) + 8 * v145) = *v699;
          }
          else
          {
            *(_QWORD *)(*v838 + 8 * v145) = v135;
          }
          *(_DWORD *)(v849 + 20) = v145 + 1;
        }
        v119 = *(_QWORD *)v8;
        v146 = *(unsigned int *)(*(_QWORD *)v8 + 252);
        if (!(_DWORD)v146)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CCA4);
        }
        v147 = 0;
        v148 = *(unsigned int ***)(v119 + 240);
        v840 = v134;
        while (*v148 != v135)
        {
          ++v147;
          v148 += 2;
          if (v146 == v147)
          {
            v149 = *((_QWORD *)v8 + 1);
            goto LABEL_141;
          }
        }
        if (v849)
          *(_DWORD *)(v849 + 24) = *(_DWORD *)(*((_QWORD *)v8 + 1) + 200);
        if (*(_DWORD *)(v119 + 284) <= v147)
        {
          __break(0xC471u);
          goto LABEL_1056;
        }
        v700 = *(_QWORD *)(*(_QWORD *)(v119 + 272) + 8 * v147);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v700 + 16))(v700, *((_QWORD *)v8 + 1));
        v149 = *((_QWORD *)v8 + 1);
        if (v849)
          *(_DWORD *)(v849 + 28) = *(_DWORD *)(v149 + 200);
        v135 = v862;
LABEL_141:
        v847 = *(_DWORD *)(v149 + 200);
        v150 = *((_QWORD *)v8 + 32);
        if (v150)
        {
          v151 = *(_DWORD *)(v150 - 8);
          v152 = ((unint64_t)v135 + ~((_QWORD)v135 << 32)) ^ (((unint64_t)v135 + ~((_QWORD)v135 << 32)) >> 22);
          v153 = 9 * ((v152 + ~(v152 << 13)) ^ ((v152 + ~(v152 << 13)) >> 8));
          v154 = (v153 ^ (v153 >> 15)) + ~((v153 ^ (v153 >> 15)) << 27);
          v155 = v151 & ((v154 >> 31) ^ v154);
          v156 = *(unsigned int **)(v150 + 32 * v155);
          if (v156 != v135)
          {
            v157 = 1;
            while (v156)
            {
              v155 = ((_DWORD)v155 + v157) & v151;
              v156 = *(unsigned int **)(v150 + 32 * v155);
              ++v157;
              if (v156 == v135)
                goto LABEL_148;
            }
            v155 = *(unsigned int *)(v150 - 4);
          }
LABEL_148:
          if (v155 != *(_DWORD *)(v150 - 4))
          {
            v158 = *(_DWORD *)(v149 + 200);
            if (v847 < *(_DWORD *)(v149 + 52))
            {
              v158 = *(_DWORD *)(v149 + 200);
              do
              {
                if ((v158 + 4) > *(_DWORD *)(v149 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 56), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
                  v135 = v862;
                  v158 = *(_DWORD *)(v149 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v149 + 56) + v158) = -721215457;
                v158 = *(_DWORD *)(v149 + 200) + 4;
                *(_DWORD *)(v149 + 200) = v158;
              }
              while (v158 < *(_DWORD *)(v149 + 52));
            }
            v159 = v158;
            if ((v158 + 4) > *(_DWORD *)(v149 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 56), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
              v135 = v862;
              v159 = *(_DWORD *)(v149 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v149 + 56) + v159) = 335544320;
            *(_DWORD *)(v149 + 200) += 4;
            v160 = 0xFF000F4500000000;
            if (!*(_BYTE *)(v149 + 328))
              v160 = 0xFF000F4100000000;
            *(_DWORD *)(v150 + 32 * v155 + 8) = v158;
            v161 = v150 + 32 * v155;
            *(_QWORD *)(v161 + 12) = v160;
            v162 = (_DWORD *)*((_QWORD *)v8 + 1);
            for (m = v162[50]; m < v162[13]; v162[50] = m)
            {
              if ((m + 4) > v162[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v162 + 14), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
                v135 = v862;
                m = v162[50];
              }
              *(_DWORD *)(*((_QWORD *)v162 + 7) + m) = -721215457;
              m = v162[50] + 4;
            }
            v162[52] = 0;
            *(_DWORD *)(v161 + 20) = m;
            v144 = v858;
          }
        }
        v164 = *((unsigned int *)v8 + 15);
        if ((_DWORD)v164)
        {
          v165 = 0;
          v166 = (_BYTE *)*((_QWORD *)v8 + 6);
          v167 = v866;
          while ((*v166 & 0x40) == 0)
          {
            v165 |= 1 << *v166++;
            if (!--v164)
              goto LABEL_162;
          }
LABEL_1056:
          __break(1u);
LABEL_1057:
          __break(0xC471u);
          JUMPOUT(0x19802CF30);
        }
        v165 = 0;
        v167 = v866;
LABEL_162:
        *((_QWORD *)v8 + 10) = v165;
        v168 = *((unsigned int *)v8 + 19);
        if ((_DWORD)v168)
        {
          v169 = 0;
          v170 = (_BYTE *)*((_QWORD *)v8 + 8);
          while ((*v170 & 0x40) == 0)
          {
            v169 |= 1 << *v170++;
            if (!--v168)
              goto LABEL_168;
          }
          goto LABEL_1056;
        }
        v169 = 0;
LABEL_168:
        *((_QWORD *)v8 + 11) = v169;
        v850 = *v135;
        v171 = &v40[16 * v850];
        *((_QWORD *)v8 + 13) = v171;
        v172 = *((unsigned int *)v171 + 3);
        if ((_DWORD)v172)
        {
          for (n = 0; n < v172; ++n)
          {
            v174 = *(unsigned int *)(*(_QWORD *)v171 + 4 * n);
            if ((_DWORD)v174)
            {
              v175 = -(int)v174;
              if ((int)v174 <= 0)
              {
                v176 = v167;
              }
              else
              {
                v175 = *(_DWORD *)(*(_QWORD *)v171 + 4 * n);
                v176 = v144;
              }
              *(_BYTE *)(*v176 + 16 * v175 + 8) = n | 0x80;
              if ((n & 0x40) != 0)
                goto LABEL_1056;
              *(_QWORD *)((char *)v8 + ((v174 >> 28) & 8) + 80) &= ~(1 << n);
              v172 = *((unsigned int *)v171 + 3);
            }
          }
          v177 = *((_QWORD *)v8 + 13);
          v178 = *(_DWORD *)(v177 + 12);
          ++*((_QWORD *)v8 + 12);
          if (v178)
          {
            v179 = 0;
            do
            {
              v180 = *(unsigned int *)(*(_QWORD *)v177 + 4 * v179);
              if ((v180 + 32) >= 0x41)
              {
                v181 = -(int)v180;
                if ((int)v180 > 0)
                  v181 = *(_DWORD *)(*(_QWORD *)v177 + 4 * v179);
                v182 = 128;
                if ((int)v180 > 0)
                  v182 = 112;
                if (*(_QWORD *)(*(_QWORD *)((char *)v8 + v182) + 8 * v181) < *((_QWORD *)v8 + 12))
                {
                  *(_DWORD *)(*(_QWORD *)v177 + 4 * (v179 & 0x7F)) = 0;
                  if ((v179 & 0x40) != 0)
                    goto LABEL_1056;
                  v183 = v181;
                  *((_QWORD *)v8 + ((v180 >> 31) & 1) + 10) |= 1 << v179;
                  v184 = v842 | 0x7F;
                  v82 = (int)v180 <= 0;
                  v185 = 32;
                  if (!v82)
                    v185 = 16;
                  v842 |= 0x7Fu;
                  *(_BYTE *)(*(_QWORD *)((char *)v8 + v185) + 16 * v183 + 8) = v184;
                  v177 = *((_QWORD *)v8 + 13);
                }
              }
              ++v179;
            }
            while (v179 < *(unsigned int *)(v177 + 12));
          }
        }
        else
        {
          ++*((_QWORD *)v8 + 12);
        }
        LODWORD(v186) = v135[5];
        if ((_DWORD)v186)
          break;
LABEL_786:
        v693 = *((unsigned int *)v171 + 3);
        if ((_DWORD)v693)
        {
          for (ii = 0; ii < v693; ++ii)
          {
            v695 = *(_DWORD *)(*(_QWORD *)v171 + 4 * ii);
            if (v695)
            {
              v696 = v848 | 0x7F;
              v697 = -v695;
              if (v695 <= 0)
              {
                v698 = v167;
              }
              else
              {
                v697 = *(_DWORD *)(*(_QWORD *)v171 + 4 * ii);
                v698 = v144;
              }
              v848 |= 0x7Fu;
              *(_BYTE *)(*v698 + 16 * v697 + 8) = v696;
              v693 = *((unsigned int *)v171 + 3);
            }
          }
        }
        ++*((_QWORD *)v8 + 12);
        v125 = v841;
        v134 = (v840 + 1);
        v133 = *(unsigned int *)(v841 + 108);
        if (v133 > v134)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v841 + 96) + 8 * v134))
          {
            if (v133 == ++v134)
            {
              LODWORD(v134) = *(_DWORD *)(v841 + 108);
              break;
            }
          }
          v125 = v841;
        }
        if ((_DWORD)v839 == (_DWORD)v134)
          goto LABEL_116;
      }
      v851 = 0;
      v187 = 0;
      v867 = &v40[16 * v850];
      while (1)
      {
        if (v187 && (v851 & 1) == 0)
          v847 = *(_DWORD *)(*((_QWORD *)v8 + 1) + 200);
        v890 = v187;
        if (v186 <= v187)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CEA8);
        }
        v188 = v187;
        v189 = *((_QWORD *)v135 + 1);
        v190 = (void **)(v189 + ((unint64_t)v187 << 7));
        v191 = *((unsigned int *)v190 + 3);
        __src = v882;
        v880 = 3;
        v881 = v191;
        v192 = v882;
        if (v191 >= 4)
        {
          if (v191 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x19802CF00);
          }
          v227 = v187;
          v192 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v191));
          v880 = v191;
          __src = v192;
          v187 = v227;
        }
        v857 = v187;
        v193 = *((unsigned int *)v190 + 3);
        if ((_DWORD)v193)
        {
          v194 = (__int128 *)*v190;
          v195 = 32 * v193;
          do
          {
            v196 = *v194;
            v197 = v194[1];
            v194 += 2;
            *v192 = v196;
            v192[1] = v197;
            v192 += 2;
            v195 -= 32;
          }
          while (v195);
        }
        v198 = v189 + (v188 << 7);
        v199 = *(_QWORD *)(v198 + 112);
        v198 += 112;
        *(_DWORD *)((char *)v883 + 7) = *(_DWORD *)(v198 + 7);
        v883[0] = v199;
        *v843 = 0u;
        v843[1] = 0u;
        v843[2] = 0u;
        v843[3] = 0u;
        v843[4] = 0u;
        v200 = *((unsigned __int16 *)v190 + 60);
        v852 = v198;
        if (v200 != 108 && v200 != 90)
        {
LABEL_244:
          v859 = 1;
          goto LABEL_245;
        }
        v201 = *((_DWORD *)v190 + 3);
        if (!v201)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CEB0);
        }
        if (v201 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19802CEB8);
        }
        v202 = (unsigned int *)*v190;
        v859 = 1;
        if (*((_BYTE *)*v190 + 8) == 1 && *((_BYTE *)v202 + 40) == 1)
        {
          v203 = v202[4];
          if ((int)v203 <= 0)
            v204 = -(int)v203;
          else
            v204 = v202[4];
          v205 = 128;
          if ((int)v203 > 0)
            v205 = 112;
          v859 = 1;
          if (v203 <= 0xFFFFFFDF && (v203 - 1) >= 0x20)
          {
            v206 = v202[12];
            v207 = *(_QWORD *)(*(_QWORD *)((char *)v8 + v205) + 8 * v204);
            v208 = *((_QWORD *)v8 + 12);
            if (*(_QWORD *)v202 == *((_QWORD *)v202 + 4)
              && (_DWORD)v203 == (_DWORD)v206
              && v202[5] == v202[13]
              && v202[3] == v202[11])
            {
              v859 = 0;
              goto LABEL_245;
            }
            v209 = v204;
            if ((int)v203 <= 0)
              v210 = 32;
            else
              v210 = 16;
            v211 = v858;
            if ((int)v203 <= 0)
              v211 = v167;
            v212 = *v211;
            v213 = *v211 + 16 * v209;
            v216 = *(_BYTE *)(v213 + 8);
            v214 = (_BYTE *)(v213 + 8);
            v215 = v216;
            v217 = v216 & 0x7F;
            if (v217 == 127)
              goto LABEL_244;
            if (v206 > 0xFFFFFFDF || (v206 - 1) <= 0x1F)
            {
              v228 = 31 - v206;
              if ((int)v206 > 0)
                v228 = v206 + 127;
              if (((v215 ^ v228) & 0x7F) != 0)
                goto LABEL_244;
              v869 = v228;
              if (v207 == v208)
              {
                *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * v217) = 0;
                if ((v215 & 0x40) != 0)
                  goto LABEL_1056;
                *(_QWORD *)((char *)v8 + ((v203 >> 28) & 8) + 80) |= 1 << v215;
                goto LABEL_661;
              }
              LODWORD(v897[0]) = v203;
              LOBYTE(v902) = v215;
              v460 = *(int8x16_t **)(*(_QWORD *)(v212 + 16 * v209) + 16);
              v903[0] = v460;
              v860 = v217;
              if ((_BYTE)word_1ECF4C286)
              {
                v528 = v460;
                v529 = v210;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(*((_QWORD *)v8 + 1), (JSC::B3::Air::Tmp *)v897, (JSC::Reg *)&v902, v903);
                v460 = v528;
                v210 = v529;
              }
              v845 = v210;
              if ((int)v203 >= 1)
              {
                v826 = (_DWORD *)*((_QWORD *)v8 + 1);
                v830 = (uint64_t)v460;
                v461 = *(unsigned int *)(*(_QWORD *)v8 + 184);
                *(_DWORD *)&v900[20] = 0;
                v901 = 0;
                *(_WORD *)&v900[8] = 519;
                *(_QWORD *)&v900[12] = 0x1E00000001;
                *(_QWORD *)v900 = v460;
                if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)
                  || (*(_QWORD *)v900 = v830 + v461,
                      *(_WORD *)&v900[8] = 519,
                      *(_QWORD *)&v900[12] = 0x2000000001,
                      *(_DWORD *)&v900[20] = 0,
                      v901 = 0,
                      JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)))
                {
                  v467 = *(unsigned int *)v900;
                  v468 = v900[8];
                  v469 = v900[9];
                  v470 = *(_DWORD *)&v900[12];
                  v471 = v900[16];
                  v472 = *(_WORD *)&v900[20];
                }
                else
                {
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v826, v830, 30, v462, v463, v464, v465, v466);
                  v899 = 0;
                  *(_WORD *)&v898[8] = 523;
                  *(_DWORD *)&v898[20] = 31;
                  *(_QWORD *)&v898[12] = 0x1E00000001;
                  *(_QWORD *)v898 = 0;
                  if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 90, 259))
                  {
                    v467 = *(unsigned int *)v898;
                    v468 = v898[8];
                    v469 = v898[9];
                    v470 = *(_DWORD *)&v898[12];
                    v471 = v898[16];
                    v472 = *(_WORD *)&v898[20];
                  }
                  else
                  {
                    v522 = v826[50];
                    if (v522 + 4 > v826[48])
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v826 + 14), v517, v518, v462, v463, v464, v465, v466);
                      v522 = v826[50];
                    }
                    v472 = 0;
                    v467 = 0;
                    *(_DWORD *)(*((_QWORD *)v826 + 7) + v522) = -1961032738;
                    v826[50] += 4;
                    v468 = 7;
                    v470 = 1;
                    v471 = 31;
                    v469 = 2;
                  }
                }
                v473 = *((_QWORD *)v8 + 1);
                if (v468 == 7)
                {
                  v474 = v860;
                  JSC::MacroAssemblerARM64::store64(v473, v860, (v471 - 1) | (unint64_t)(v467 << 32), v462, v463, v464, v465, v466);
                }
                else
                {
                  HIDWORD(v515) = v470;
                  LODWORD(v515) = v470 - 2;
                  v514 = v515 >> 1;
                  if (v514 > 7)
                    v516 = 0;
                  else
                    v516 = qword_1991505B0[v514];
                  v474 = v860;
                  JSC::MacroAssemblerARM64::store64(v473, v860, v516 | ((v472 << 8) - 256) & 0xFF00 | (v471 - 1), v467 | (v469 << 32), v463, v464, v465, v466);
                }
                goto LABEL_659;
              }
              v497 = *(_QWORD *)v8;
              if (HIBYTE(dword_1ECF4C7B0))
              {
                if (HIBYTE(word_1ECF4C79E))
                {
                  v827 = (_DWORD *)*((_QWORD *)v8 + 1);
                  v498 = *(unsigned int *)(v497 + 184);
                  goto LABEL_599;
                }
                v827 = (_DWORD *)*((_QWORD *)v8 + 1);
                v498 = *(unsigned int *)(v497 + 184);
                if (*(_BYTE *)(*(_QWORD *)(v497 + 8) + 212))
                {
LABEL_599:
                  v831 = v498;
                  *(_DWORD *)&v900[20] = 0;
                  v901 = 0;
                  *(_WORD *)&v900[8] = 519;
                  *(_QWORD *)&v900[12] = 0x1E00000001;
                  *(_QWORD *)v900 = v460;
                  v499 = (uint64_t)v460;
                  if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)
                    || (*(_QWORD *)v900 = v499 + v831,
                        *(_WORD *)&v900[8] = 519,
                        *(_QWORD *)&v900[12] = 0x2000000001,
                        *(_DWORD *)&v900[20] = 0,
                        v901 = 0,
                        JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)))
                  {
                    v505 = *(unsigned int *)v900;
                    v506 = v900[8];
                    v507 = v900[9];
                    v508 = *(_DWORD *)&v900[12];
                    v509 = v900[16];
                    v510 = v860;
                    v511 = *(_WORD *)&v900[20];
                  }
                  else
                  {
                    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v827, v499, 30, v500, v501, v502, v503, v504);
                    v899 = 0;
                    *(_WORD *)&v898[8] = 523;
                    *(_DWORD *)&v898[20] = 31;
                    *(_QWORD *)&v898[12] = 0x1E00000001;
                    *(_QWORD *)v898 = 0;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 113, 260))
                    {
                      v505 = *(unsigned int *)v898;
                      v506 = v898[8];
                      v507 = v898[9];
                      v508 = *(_DWORD *)&v898[12];
                      v509 = v898[16];
                      v510 = v860;
                      v511 = *(_WORD *)&v898[20];
                    }
                    else
                    {
                      v525 = v827[50];
                      v510 = v860;
                      if (v525 + 4 > v827[48])
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v827 + 14), v523, v524, v500, v501, v502, v503, v504);
                        v525 = v827[50];
                        v510 = v902 & 0x7F;
                      }
                      v511 = 0;
                      v505 = 0;
                      *(_DWORD *)(*((_QWORD *)v827 + 7) + v525) = -1961032738;
                      v827[50] += 4;
                      v506 = 7;
                      v508 = 1;
                      v509 = 31;
                      v507 = 2;
                    }
                  }
                  v512 = *((_QWORD *)v8 + 1);
                  v513 = v510 - 32;
                  if (v506 == 7)
                  {
                    JSC::MacroAssemblerARM64::storeVector(v512, v513, (v509 - 1) | (unint64_t)(v505 << 32), v500, v501, v502, v503, v504);
                  }
                  else
                  {
                    HIDWORD(v520) = v508;
                    LODWORD(v520) = v508 - 2;
                    v519 = v520 >> 1;
                    if (v519 > 7)
                      v521 = 0;
                    else
                      v521 = qword_1991505B0[v519];
                    JSC::MacroAssemblerARM64::storeVector(v512, v513, v521 | ((v511 << 8) - 256) & 0xFF00 | (v509 - 1), v505 | (v507 << 32), v501, v502, v503, v504);
                  }
LABEL_658:
                  v474 = v860;
LABEL_659:
                  *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * v474) = 0;
                  v228 = v869;
                  if ((v215 & 0x40) != 0)
                    goto LABEL_1056;
                  *(_QWORD *)((char *)v8 + ((v203 >> 28) & 8) + 80) |= 1 << v215;
                  v214 = (_BYTE *)(*(_QWORD *)((char *)v8 + v845) + 16 * v209 + 8);
LABEL_661:
                  v557 = v228 & 0x7F;
                  *v214 = -1;
                  LODWORD(v902) = v206;
                  v895 = v228 & 0x7F;
                  v894 = 4;
                  v558 = *(unsigned int *)(**((_QWORD **)v8 + 13) + 4 * (v228 & 0x7F));
                  v559 = v866;
                  if (!(_DWORD)v558)
                    goto LABEL_719;
                  LODWORD(v897[0]) = *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * (v228 & 0x7F));
                  v861 = v228 & 0x7F;
                  v896 = v228 & 0x7F;
                  v560 = -(int)v558;
                  if ((int)v558 <= 0)
                  {
                    v561 = 32;
                  }
                  else
                  {
                    v560 = v558;
                    v561 = 16;
                  }
                  v562 = v858;
                  if ((int)v558 <= 0)
                    v562 = v866;
                  v563 = v560;
                  v564 = *(int8x16_t **)(*(_QWORD *)(*v562 + 16 * v560) + 16);
                  v903[0] = v564;
                  if ((_BYTE)word_1ECF4C286)
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(*((_QWORD *)v8 + 1), (JSC::B3::Air::Tmp *)v897, (JSC::Reg *)&v896, v903);
                  v833 = v561;
                  v846 = v563;
                  if ((int)v558 >= 1)
                  {
                    *(_QWORD *)v828 = v558;
                    v565 = (_DWORD *)*((_QWORD *)v8 + 1);
                    v566 = *(unsigned int *)(*(_QWORD *)v8 + 184);
                    *(_DWORD *)&v900[20] = 0;
                    v901 = 0;
                    *(_WORD *)&v900[8] = 519;
                    *(_QWORD *)&v900[12] = 0x1E00000001;
                    *(_QWORD *)v900 = v564;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)
                      || (*(_QWORD *)v900 = (char *)v564 + v566,
                          *(_WORD *)&v900[8] = 519,
                          *(_QWORD *)&v900[12] = 0x2000000001,
                          *(_DWORD *)&v900[20] = 0,
                          v901 = 0,
                          JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)))
                    {
                      v572 = *(unsigned int *)v900;
                      v573 = v900[8];
                      v574 = v900[9];
                      v575 = *(_DWORD *)&v900[12];
                      v576 = v900[16];
                      v577 = *(_WORD *)&v900[20];
                      v578 = v846;
                    }
                    else
                    {
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v565, (uint64_t)v564, 30, v567, v568, v569, v570, v571);
                      v899 = 0;
                      *(_WORD *)&v898[8] = 523;
                      *(_DWORD *)&v898[20] = 31;
                      *(_QWORD *)&v898[12] = 0x1E00000001;
                      *(_QWORD *)v898 = 0;
                      v578 = v846;
                      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 90, 259))
                      {
                        v572 = *(unsigned int *)v898;
                        v573 = v898[8];
                        v574 = v898[9];
                        v575 = *(_DWORD *)&v898[12];
                        v576 = v898[16];
                        v577 = *(_WORD *)&v898[20];
                      }
                      else
                      {
                        v605 = v565[50];
                        if (v605 + 4 > v565[48])
                        {
                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v565 + 14), v600, v601, v567, v568, v569, v570, v571);
                          v605 = v565[50];
                        }
                        v577 = 0;
                        v572 = 0;
                        *(_DWORD *)(*((_QWORD *)v565 + 7) + v605) = -1961032738;
                        v565[50] += 4;
                        v573 = 7;
                        v575 = 1;
                        v576 = 31;
                        v574 = 2;
                      }
                    }
                    v558 = *(_QWORD *)v828;
                    v579 = *((_QWORD *)v8 + 1);
                    if (v573 == 7)
                    {
                      v580 = v861;
                      JSC::MacroAssemblerARM64::store64(v579, v861, (v576 - 1) | (unint64_t)(v572 << 32), v567, v568, v569, v570, v571);
                    }
                    else
                    {
                      HIDWORD(v598) = v575;
                      LODWORD(v598) = v575 - 2;
                      v597 = v598 >> 1;
                      if (v597 > 7)
                        v599 = 0;
                      else
                        v599 = qword_1991505B0[v597];
                      v580 = v861;
                      JSC::MacroAssemblerARM64::store64(v579, v861, v599 | ((v577 << 8) - 256) & 0xFF00 | (v576 - 1), v572 | (v574 << 32), v568, v569, v570, v571);
                    }
LABEL_717:
                    *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * v580) = 0;
                    if (v580 >= 0x40)
                      goto LABEL_1056;
                    *(_QWORD *)((char *)v8 + ((v558 >> 28) & 8) + 80) |= 1 << v869;
                    *(_BYTE *)(*(_QWORD *)((char *)v8 + v833) + 16 * v578 + 8) = -1;
                    LODWORD(v206) = (_DWORD)v902;
                    v557 = v895;
                    v559 = v866;
LABEL_719:
                    if ((int)v206 <= 0)
                      v629 = -(int)v206;
                    else
                      v629 = v206;
                    if ((int)v206 <= 0)
                      v630 = v559;
                    else
                      v630 = v858;
                    *(_BYTE *)(*v630 + 16 * v629 + 8) = v557;
                    v631 = v557 & 0x7F;
                    if (v631 >= 0x40)
                      goto LABEL_1056;
                    *((_QWORD *)v8 + (v206 >> 31) + 10) &= ~(1 << (v557 & 0x7F));
                    *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * (v557 & 0x7F)) = v206;
                    if (v894 <= 0xB && ((1 << v894) & 0xB30) != 0)
                    {
LABEL_777:
                      v859 = 0;
                      goto LABEL_245;
                    }
                    if ((_BYTE)word_1ECF4C286)
                      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [8],JSC::B3::Air::Arg::Role,char [2]>(*((_QWORD *)v8 + 1), (JSC::B3::Air::Tmp *)&v902, (JSC::Reg *)&v895, &v894);
                    v632 = *(_QWORD *)(*(_QWORD *)(*v630 + 16 * v629) + 16);
                    if ((v206 & 0x80000000) == 0)
                    {
                      v633 = (_DWORD *)*((_QWORD *)v8 + 1);
                      v634 = *(unsigned int *)(*(_QWORD *)v8 + 184);
                      *(_DWORD *)&v900[20] = 0;
                      v901 = 0;
                      *(_WORD *)&v900[8] = 519;
                      *(_QWORD *)&v900[12] = 0x1E00000001;
                      *(_QWORD *)v900 = v632;
                      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)
                        || (*(_QWORD *)v900 = v632 + v634,
                            *(_WORD *)&v900[8] = 519,
                            *(_QWORD *)&v900[12] = 0x2000000001,
                            *(_DWORD *)&v900[20] = 0,
                            v901 = 0,
                            JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)))
                      {
                        v640 = *(unsigned int *)v900;
                        v641 = v900[8];
                        v642 = v900[9];
                        v643 = *(_DWORD *)&v900[12];
                        v644 = v900[16];
                        v645 = *(_WORD *)&v900[20];
                      }
                      else
                      {
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v633, v632, 30, v635, v636, v637, v638, v639);
                        v899 = 0;
                        *(_WORD *)&v898[8] = 523;
                        *(_DWORD *)&v898[20] = 31;
                        *(_QWORD *)&v898[12] = 0x1E00000001;
                        *(_QWORD *)v898 = 0;
                        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 90, 259))
                        {
                          v640 = *(unsigned int *)v898;
                          v641 = v898[8];
                          v642 = v898[9];
                          v643 = *(_DWORD *)&v898[12];
                          v644 = v898[16];
                          v645 = *(_WORD *)&v898[20];
                        }
                        else
                        {
                          v670 = v633[50];
                          if (v670 + 4 > v633[48])
                          {
                            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v633 + 14), v665, v666, v635, v636, v637, v638, v639);
                            v670 = v633[50];
                          }
                          v645 = 0;
                          v640 = 0;
                          *(_DWORD *)(*((_QWORD *)v633 + 7) + v670) = -1961032738;
                          v633[50] += 4;
                          v641 = 7;
                          v643 = 1;
                          v644 = 31;
                          v642 = 2;
                        }
                      }
                      v646 = *((_QWORD *)v8 + 1);
                      if (v641 == 7)
                      {
                        JSC::MacroAssemblerARM64::load64(v646, (v644 - 1) | (unint64_t)(v640 << 32), v631, v635, v636, v637, v638, v639);
                      }
                      else
                      {
                        HIDWORD(v663) = v643;
                        LODWORD(v663) = v643 - 2;
                        v662 = v663 >> 1;
                        if (v662 > 7)
                          v664 = 0;
                        else
                          v664 = qword_1991505B0[v662];
                        JSC::MacroAssemblerARM64::load64(v646, v664 | ((v645 << 8) - 256) & 0xFF00 | (v644 - 1), v640 | (v642 << 32), v631, v636, v637, v638, v639);
                      }
                      goto LABEL_777;
                    }
                    v647 = *(_QWORD *)v8;
                    if (HIBYTE(dword_1ECF4C7B0))
                    {
                      if (HIBYTE(word_1ECF4C79E))
                      {
                        v648 = (_DWORD *)*((_QWORD *)v8 + 1);
                        v649 = *(unsigned int *)(v647 + 184);
LABEL_739:
                        *(_DWORD *)&v900[20] = 0;
                        v901 = 0;
                        *(_WORD *)&v900[8] = 519;
                        *(_QWORD *)&v900[12] = 0x1E00000001;
                        *(_QWORD *)v900 = v632;
                        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)
                          || (*(_QWORD *)v900 = v632 + v649,
                              *(_WORD *)&v900[8] = 519,
                              *(_QWORD *)&v900[12] = 0x2000000001,
                              *(_DWORD *)&v900[20] = 0,
                              v901 = 0,
                              JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)))
                        {
                          v655 = *(unsigned int *)v900;
                          v656 = v900[8];
                          v657 = v900[9];
                          v658 = *(_DWORD *)&v900[12];
                          v659 = v900[16];
                          v660 = *(_WORD *)&v900[20];
                        }
                        else
                        {
                          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v648, v632, 30, v650, v651, v652, v653, v654);
                          v899 = 0;
                          *(_WORD *)&v898[8] = 523;
                          *(_DWORD *)&v898[20] = 31;
                          *(_QWORD *)&v898[12] = 0x1E00000001;
                          *(_QWORD *)v898 = 0;
                          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 113, 260))
                          {
                            v655 = *(unsigned int *)v898;
                            v656 = v898[8];
                            v657 = v898[9];
                            v658 = *(_DWORD *)&v898[12];
                            v659 = v898[16];
                            v660 = *(_WORD *)&v898[20];
                          }
                          else
                          {
                            v673 = v648[50];
                            if (v673 + 4 > v648[48])
                            {
                              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v648 + 14), v671, v672, v650, v651, v652, v653, v654);
                              v673 = v648[50];
                            }
                            v660 = 0;
                            v655 = 0;
                            *(_DWORD *)(*((_QWORD *)v648 + 7) + v673) = -1961032738;
                            v648[50] += 4;
                            v656 = 7;
                            v658 = 1;
                            v659 = 31;
                            v657 = 2;
                          }
                        }
                        v661 = *((_QWORD *)v8 + 1);
                        if (v656 == 7)
                        {
                          JSC::MacroAssemblerARM64::loadVector(v661, (v659 - 1) | (unint64_t)(v655 << 32), (char)((v895 & 0x7F) - 32), v650, v651, v652, v653, v654);
                        }
                        else
                        {
                          HIDWORD(v668) = v658;
                          LODWORD(v668) = v658 - 2;
                          v667 = v668 >> 1;
                          if (v667 > 7)
                            v669 = 0;
                          else
                            v669 = qword_1991505B0[v667];
                          JSC::MacroAssemblerARM64::loadVector(v661, v669 | ((v660 << 8) - 256) & 0xFF00 | (v659 - 1), v655 | (v657 << 32), (char)((v895 & 0x7F) - 32), v651, v652, v653, v654);
                        }
                        goto LABEL_777;
                      }
                      v648 = (_DWORD *)*((_QWORD *)v8 + 1);
                      v649 = *(unsigned int *)(v647 + 184);
                      if (*(_BYTE *)(*(_QWORD *)(v647 + 8) + 212))
                        goto LABEL_739;
                    }
                    else
                    {
                      v648 = (_DWORD *)*((_QWORD *)v8 + 1);
                      v649 = *(unsigned int *)(v647 + 184);
                    }
                    *(_DWORD *)&v900[20] = 0;
                    v901 = 0;
                    *(_WORD *)&v900[8] = 519;
                    *(_QWORD *)&v900[12] = 0x1E00000001;
                    *(_QWORD *)v900 = v632;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)
                      || (*(_QWORD *)v900 = v632 + v649,
                          *(_WORD *)&v900[8] = 519,
                          *(_QWORD *)&v900[12] = 0x2000000001,
                          *(_DWORD *)&v900[20] = 0,
                          v901 = 0,
                          JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)))
                    {
                      v680 = *(unsigned int *)v900;
                      v681 = v900[8];
                      v682 = v900[9];
                      v683 = *(_DWORD *)&v900[12];
                      v684 = v900[16];
                      v685 = *(_WORD *)&v900[20];
                    }
                    else
                    {
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v648, v632, 30, v675, v676, v677, v678, v679);
                      v899 = 0;
                      *(_WORD *)&v898[8] = 523;
                      *(_DWORD *)&v898[20] = 31;
                      *(_QWORD *)&v898[12] = 0x1E00000001;
                      *(_QWORD *)v898 = 0;
                      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 108, 259))
                      {
                        v680 = *(unsigned int *)v898;
                        v681 = v898[8];
                        v682 = v898[9];
                        v683 = *(_DWORD *)&v898[12];
                        v684 = v898[16];
                        v685 = *(_WORD *)&v898[20];
                      }
                      else
                      {
                        v692 = v648[50];
                        if (v692 + 4 > v648[48])
                        {
                          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v648 + 14), v690, v691, v675, v676, v677, v678, v679);
                          v692 = v648[50];
                        }
                        v685 = 0;
                        v680 = 0;
                        *(_DWORD *)(*((_QWORD *)v648 + 7) + v692) = -1961032738;
                        v648[50] += 4;
                        v681 = 7;
                        v683 = 1;
                        v684 = 31;
                        v682 = 2;
                      }
                    }
                    v686 = *((_QWORD *)v8 + 1);
                    if (v681 == 7)
                    {
                      JSC::MacroAssemblerARM64::loadDouble(v686, (v684 - 1) | (unint64_t)(v680 << 32), (char)((v895 & 0x7F) - 32), v675, v676, v677, v678, v679);
                    }
                    else
                    {
                      HIDWORD(v688) = v683;
                      LODWORD(v688) = v683 - 2;
                      v687 = v688 >> 1;
                      if (v687 > 7)
                        v689 = 0;
                      else
                        v689 = qword_1991505B0[v687];
                      JSC::MacroAssemblerARM64::loadDouble(v686, v689 | ((v685 << 8) - 256) & 0xFF00 | (v684 - 1), v680 | (v682 << 32), (char)((v895 & 0x7F) - 32), v676, v677, v678, v679);
                    }
                    goto LABEL_777;
                  }
                  v581 = *(_QWORD *)v8;
                  if (HIBYTE(dword_1ECF4C7B0))
                  {
                    if (HIBYTE(word_1ECF4C79E))
                    {
                      v829 = (_DWORD *)*((_QWORD *)v8 + 1);
                      v582 = *(unsigned int *)(v581 + 184);
                      goto LABEL_678;
                    }
                    v829 = (_DWORD *)*((_QWORD *)v8 + 1);
                    v582 = *(unsigned int *)(v581 + 184);
                    if (*(_BYTE *)(*(_QWORD *)(v581 + 8) + 212))
                    {
LABEL_678:
                      *(_DWORD *)&v900[20] = 0;
                      v901 = 0;
                      *(_WORD *)&v900[8] = 519;
                      *(_QWORD *)&v900[12] = 0x1E00000001;
                      *(_QWORD *)v900 = v564;
                      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)
                        || (*(_QWORD *)v900 = (char *)v564 + v582,
                            *(_WORD *)&v900[8] = 519,
                            *(_QWORD *)&v900[12] = 0x2000000001,
                            *(_DWORD *)&v900[20] = 0,
                            v901 = 0,
                            JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)))
                      {
                        v588 = *(unsigned int *)v900;
                        v589 = v900[8];
                        v590 = v900[9];
                        v591 = *(_DWORD *)&v900[12];
                        v592 = v900[16];
                        v593 = v861;
                        v594 = *(_WORD *)&v900[20];
                      }
                      else
                      {
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v829, (uint64_t)v564, 30, v583, v584, v585, v586, v587);
                        v899 = 0;
                        *(_WORD *)&v898[8] = 523;
                        *(_DWORD *)&v898[20] = 31;
                        *(_QWORD *)&v898[12] = 0x1E00000001;
                        *(_QWORD *)v898 = 0;
                        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 113, 260))
                        {
                          v588 = *(unsigned int *)v898;
                          v589 = v898[8];
                          v590 = v898[9];
                          v591 = *(_DWORD *)&v898[12];
                          v592 = v898[16];
                          v593 = v861;
                          v594 = *(_WORD *)&v898[20];
                        }
                        else
                        {
                          v608 = v829[50];
                          v593 = v861;
                          if (v608 + 4 > v829[48])
                          {
                            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v829 + 14), v606, v607, v583, v584, v585, v586, v587);
                            v608 = v829[50];
                            v593 = v896;
                          }
                          v594 = 0;
                          v588 = 0;
                          *(_DWORD *)(*((_QWORD *)v829 + 7) + v608) = -1961032738;
                          v829[50] += 4;
                          v589 = 7;
                          v591 = 1;
                          v592 = 31;
                          v590 = 2;
                        }
                      }
                      v578 = v846;
                      v595 = *((_QWORD *)v8 + 1);
                      v596 = (char)((v593 & 0x7F) - 32);
                      if (v589 == 7)
                      {
                        JSC::MacroAssemblerARM64::storeVector(v595, v596, (v592 - 1) | (unint64_t)(v588 << 32), v583, v584, v585, v586, v587);
                      }
                      else
                      {
                        HIDWORD(v603) = v591;
                        LODWORD(v603) = v591 - 2;
                        v602 = v603 >> 1;
                        if (v602 > 7)
                          v604 = 0;
                        else
                          v604 = qword_1991505B0[v602];
                        JSC::MacroAssemblerARM64::storeVector(v595, v596, v604 | ((v594 << 8) - 256) & 0xFF00 | (v592 - 1), v588 | (v590 << 32), v584, v585, v586, v587);
                      }
LABEL_716:
                      v580 = v861;
                      goto LABEL_717;
                    }
                  }
                  else
                  {
                    v829 = (_DWORD *)*((_QWORD *)v8 + 1);
                    v582 = *(unsigned int *)(v581 + 184);
                  }
                  *(_DWORD *)&v900[20] = 0;
                  v901 = 0;
                  *(_WORD *)&v900[8] = 519;
                  *(_QWORD *)&v900[12] = 0x1E00000001;
                  *(_QWORD *)v900 = v564;
                  if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)
                    || (*(_QWORD *)v900 = (char *)v564 + v582,
                        *(_WORD *)&v900[8] = 519,
                        *(_QWORD *)&v900[12] = 0x2000000001,
                        *(_DWORD *)&v900[20] = 0,
                        v901 = 0,
                        JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)))
                  {
                    v615 = *(unsigned int *)v900;
                    v616 = v900[8];
                    v617 = v900[9];
                    v618 = *(_DWORD *)&v900[12];
                    v619 = v900[16];
                    v620 = v861;
                    v621 = *(_WORD *)&v900[20];
                  }
                  else
                  {
                    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v829, (uint64_t)v564, 30, v610, v611, v612, v613, v614);
                    v899 = 0;
                    *(_WORD *)&v898[8] = 523;
                    *(_DWORD *)&v898[20] = 31;
                    *(_QWORD *)&v898[12] = 0x1E00000001;
                    *(_QWORD *)v898 = 0;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 108, 259))
                    {
                      v615 = *(unsigned int *)v898;
                      v616 = v898[8];
                      v617 = v898[9];
                      v618 = *(_DWORD *)&v898[12];
                      v619 = v898[16];
                      v620 = v861;
                      v621 = *(_WORD *)&v898[20];
                    }
                    else
                    {
                      v674 = v829[50];
                      v620 = v861;
                      if (v674 + 4 > v829[48])
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v829 + 14), v627, v628, v610, v611, v612, v613, v614);
                        v674 = v829[50];
                        v620 = v896;
                      }
                      v621 = 0;
                      v615 = 0;
                      *(_DWORD *)(*((_QWORD *)v829 + 7) + v674) = -1961032738;
                      v829[50] += 4;
                      v616 = 7;
                      v618 = 1;
                      v619 = 31;
                      v617 = 2;
                    }
                  }
                  v578 = v846;
                  v622 = *((_QWORD *)v8 + 1);
                  v623 = (v620 & 0x7F) - 32;
                  if (v616 == 7)
                  {
                    JSC::MacroAssemblerARM64::storeDouble(v622, v623, (v619 - 1) | (unint64_t)(v615 << 32), v610, v611, v612, v613, v614);
                  }
                  else
                  {
                    HIDWORD(v625) = v618;
                    LODWORD(v625) = v618 - 2;
                    v624 = v625 >> 1;
                    if (v624 > 7)
                      v626 = 0;
                    else
                      v626 = qword_1991505B0[v624];
                    JSC::MacroAssemblerARM64::storeDouble(v622, v623, v626 | ((v621 << 8) - 256) & 0xFF00 | (v619 - 1), v615 | (v617 << 32), v611, v612, v613, v614);
                  }
                  goto LABEL_716;
                }
              }
              else
              {
                v827 = (_DWORD *)*((_QWORD *)v8 + 1);
                v498 = *(unsigned int *)(v497 + 184);
              }
              *(_DWORD *)&v900[20] = 0;
              v901 = 0;
              *(_WORD *)&v900[8] = 519;
              *(_QWORD *)&v900[12] = 0x1E00000001;
              *(_QWORD *)v900 = v460;
              v832 = (uint64_t)v460;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)
                || (*(_QWORD *)v900 = v832 + v498,
                    *(_WORD *)&v900[8] = 519,
                    *(_QWORD *)&v900[12] = 0x2000000001,
                    *(_DWORD *)&v900[20] = 0,
                    v901 = 0,
                    JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)))
              {
                v543 = *(unsigned int *)v900;
                v544 = v900[8];
                v545 = v900[9];
                v546 = *(_DWORD *)&v900[12];
                v547 = v900[16];
                v548 = v860;
                v549 = *(_WORD *)&v900[20];
              }
              else
              {
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v827, v832, 30, v538, v539, v540, v541, v542);
                v899 = 0;
                *(_WORD *)&v898[8] = 523;
                *(_DWORD *)&v898[20] = 31;
                *(_QWORD *)&v898[12] = 0x1E00000001;
                *(_QWORD *)v898 = 0;
                if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 108, 259))
                {
                  v543 = *(unsigned int *)v898;
                  v544 = v898[8];
                  v545 = v898[9];
                  v546 = *(_DWORD *)&v898[12];
                  v547 = v898[16];
                  v548 = v860;
                  v549 = *(_WORD *)&v898[20];
                }
                else
                {
                  v609 = v827[50];
                  v548 = v860;
                  if (v609 + 4 > v827[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v827 + 14), v555, v556, v538, v539, v540, v541, v542);
                    v609 = v827[50];
                    v548 = v902 & 0x7F;
                  }
                  v549 = 0;
                  v543 = 0;
                  *(_DWORD *)(*((_QWORD *)v827 + 7) + v609) = -1961032738;
                  v827[50] += 4;
                  v544 = 7;
                  v546 = 1;
                  v547 = 31;
                  v545 = 2;
                }
              }
              v550 = *((_QWORD *)v8 + 1);
              v551 = v548 - 32;
              if (v544 == 7)
              {
                JSC::MacroAssemblerARM64::storeDouble(v550, v551, (v547 - 1) | (unint64_t)(v543 << 32), v538, v539, v540, v541, v542);
              }
              else
              {
                HIDWORD(v553) = v546;
                LODWORD(v553) = v546 - 2;
                v552 = v553 >> 1;
                if (v552 > 7)
                  v554 = 0;
                else
                  v554 = qword_1991505B0[v552];
                JSC::MacroAssemblerARM64::storeDouble(v550, v551, v554 | ((v549 << 8) - 256) & 0xFF00 | (v547 - 1), v543 | (v545 << 32), v539, v540, v541, v542);
              }
              goto LABEL_658;
            }
            if (v207 != v208)
              goto LABEL_244;
            v218 = -(int)v206;
            if ((int)v206 > 0)
              v218 = v206;
            v219 = 32;
            if ((int)v206 > 0)
              v219 = 16;
            v220 = v858;
            if ((int)v206 <= 0)
              v220 = v866;
            v221 = *v220;
            v222 = *v220 + 16 * v218;
            v225 = *(_BYTE *)(v222 + 8);
            v223 = (_BYTE *)(v222 + 8);
            v224 = v225;
            v226 = v225 & 0x7F;
            if ((_DWORD)v226 != 127)
            {
              *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * v226) = 0;
              if ((v224 & 0x40) != 0)
                goto LABEL_1056;
              *(_QWORD *)((char *)v8 + ((v206 >> 28) & 8) + 80) |= 1 << v224;
              *v223 = -1;
              v221 = *(_QWORD *)((char *)v8 + v219);
            }
            v859 = 0;
            *(_BYTE *)(v221 + 16 * v218 + 8) = v215;
            *(_DWORD *)(**((_QWORD **)v8 + 13) + 4 * v217) = v206;
            *(_BYTE *)(*(_QWORD *)((char *)v8 + v210) + 16 * v209 + 8) = -1;
          }
        }
LABEL_245:
        v903[0] = (int8x16_t *)v8;
        *(_QWORD *)v898 = v903;
        v229 = v189 + (v188 << 7);
        v230 = *(__int16 *)(v229 + 120);
        v868 = (__int16 *)(v229 + 120);
        if ((v230 - 446) > 5)
        {
          v231 = *((unsigned int *)v190 + 3);
          if ((_DWORD)v231)
          {
            v232 = 0;
            v233 = 0;
            v234 = (char *)&JSC::B3::Air::g_formTable + 21 * v230 + ((unint64_t)((v231 - 1) * v231) >> 1);
            v235 = 32 * v231;
            do
            {
              if (v233 >= *((unsigned int *)v190 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x19802CE80);
              }
              if ((*v234 >> 5) - 1 >= 5u)
              {
                __break(0xC471u);
                JUMPOUT(0x19802CD80);
              }
              JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(v903[0], (uint64_t)*v190 + v232, *v234 & 0xF, ((*v234 >> 5) - 1));
              ++v233;
              ++v234;
              v232 += 32;
            }
            while (v235 != v232);
          }
        }
        else
        {
          *(_QWORD *)v900 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          *(_QWORD *)&v900[8] = v900;
          *(_QWORD *)&v900[16] = v898;
          JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v190, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v900);
        }
        *(_QWORD *)v898 = v190;
        *(_QWORD *)&v898[8] = v8;
        if ((*v868 - 446) > 5)
        {
          v237 = *((unsigned int *)v190 + 3);
          v236 = v864;
          if ((_DWORD)v237)
          {
            v238 = 0;
            v239 = (char *)&JSC::B3::Air::g_formTable + 21 * *v868 + ((unint64_t)((v237 - 1) * v237) >> 1);
            v240 = 12;
            do
            {
              if (v238 >= *((unsigned int *)v190 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x19802CE78);
              }
              v241 = v239[v238];
              if ((v241 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19802CDF0);
              }
              v242 = (char *)*v190;
              v243 = (char *)*v190 + v240;
              if (*(v243 - 4) == 1)
              {
                v244 = v241 & 0xF;
                v82 = v244 > 0xB;
                v245 = (1 << v244) & 0xFF5;
                if (v82 || v245 == 0)
                {
                  if (!*(_DWORD *)(*(_QWORD *)v898 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19802CE98);
                  }
                  v247 = *(_QWORD *)&v898[8];
                  v248 = *(_DWORD *)&v242[v240 + 4];
                  v249 = JSC::B3::Air::Inst::admitsStack(*(JSC::B3::Air::Inst **)v898, (unint64_t)&v242[v240 - **(_QWORD **)v898 - 12] >> 5);
                  v236 = v864;
                  if (v249)
                  {
                    v250 = -v248;
                    if (v248 > 0)
                      v250 = v248;
                    v251 = 32;
                    if (v248 > 0)
                      v251 = 16;
                    v252 = *(_QWORD *)(v247 + v251);
                    if ((~*(unsigned __int8 *)(v252 + 16 * v250 + 8) & 0x7F) == 0)
                    {
                      *(_QWORD *)(v243 - 12) = *(_QWORD *)(*(_QWORD *)(v252 + 16 * v250) + 16);
                      *(v243 - 4) = 7;
                      v253 = &v242[v240];
                      *(v253 - 3) = 2;
                      *(_QWORD *)v253 = 0x1E00000001;
                      *((_DWORD *)v253 + 2) = 0;
                      v253[12] = 0;
                    }
                  }
                }
              }
              ++v238;
              v240 += 32;
            }
            while (v237 != v238);
          }
        }
        else
        {
          *(_QWORD *)v900 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_9>::implFunction;
          *(_QWORD *)&v900[8] = v900;
          *(_QWORD *)&v900[16] = v898;
          JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v190, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_9>::implFunction, (uint64_t)v900);
          v236 = v864;
        }
        v144 = v858;
        v167 = v866;
        v8 = v854;
        if (*v868 == 448)
        {
          if (!*((_DWORD *)v190 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19802CEC0);
          }
          v254 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)*v190 + 72))(*(_QWORD *)*v190, v190);
          v256 = *((_QWORD *)v854 + 24) | v255;
          *((_QWORD *)v854 + 23) |= v254 | v255;
          *((_QWORD *)v854 + 24) = v256;
          if (!*((_DWORD *)v190 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19802CEC8);
          }
          v257 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)*v190 + 80))(*(_QWORD *)*v190, v190);
          v259 = v257 | *((_QWORD *)v854 + 25) | v258;
          v260 = *((_QWORD *)v854 + 26) | v258;
          v261 = *((_QWORD *)v854 + 29);
          v262 = *((_QWORD *)v854 + 30) | v261;
          v263 = *((_QWORD *)v854 + 23) & v261;
          v264 = *((_QWORD *)v854 + 24) & v262;
          *((_QWORD *)v854 + 30) = v262;
          v265 = v261 & v259;
          *((_QWORD *)v854 + 24) = v264;
          *((_QWORD *)v854 + 25) = v265;
          v266 = v262 & v260;
          v267 = v265 | *((_QWORD *)v854 + 27) | v263;
          v268 = v266 | *((_QWORD *)v854 + 28) | v264;
          v269 = *((_QWORD *)v854 + 21);
          v270 = *((_QWORD *)v854 + 22) | v269;
          *((_QWORD *)v854 + 22) = v270;
          *((_QWORD *)v854 + 23) = v263;
          *((_QWORD *)v854 + 26) = v266;
          *((_QWORD *)v854 + 27) = v267 & ~v269;
          *((_QWORD *)v854 + 28) = v268 & ~v270;
          v236 = v864;
        }
        v271 = *((_QWORD *)v854 + 18);
        if (v271)
        {
          v272 = *(_DWORD *)(v271 - 8);
          v273 = *((_QWORD *)v854 + 12);
          v274 = (v273 + ~(v273 << 32)) ^ ((unint64_t)(v273 + ~(v273 << 32)) >> 22);
          v275 = 9 * ((v274 + ~(v274 << 13)) ^ ((v274 + ~(v274 << 13)) >> 8));
          v276 = (v275 ^ (v275 >> 15)) + ~((v275 ^ (v275 >> 15)) << 27);
          v277 = v272 & ((v276 >> 31) ^ v276);
          v278 = *(_QWORD *)(v271 + 32 * v277);
          if (v278 != v273)
          {
            v279 = 1;
            while (v278)
            {
              v277 = ((_DWORD)v277 + v279) & v272;
              v278 = *(_QWORD *)(v271 + 32 * v277);
              ++v279;
              if (v278 == v273)
                goto LABEL_285;
            }
            v277 = *(unsigned int *)(v271 - 4);
          }
LABEL_285:
          if (v277 != *(_DWORD *)(v271 - 4))
          {
            v280 = v271 + 32 * v277;
            v281 = *(unsigned int *)(v280 + 20);
            if ((_DWORD)v281)
            {
              v282 = *(unsigned int **)(v280 + 8);
              v283 = 4 * v281;
              do
              {
                v284 = *v282;
                v285 = -(int)v284;
                if ((int)v284 <= 0)
                {
                  v286 = v866;
                }
                else
                {
                  v285 = *v282;
                  v286 = v858;
                }
                v287 = *v286 + 16 * v285;
                v290 = *(_BYTE *)(v287 + 8);
                v288 = (_BYTE *)(v287 + 8);
                v289 = v290;
                v291 = v290 & 0x7F;
                if ((_DWORD)v291 != 127)
                {
                  *(_DWORD *)(**((_QWORD **)v854 + 13) + 4 * v291) = 0;
                  if ((v289 & 0x40) != 0)
                    goto LABEL_1056;
                  *(_QWORD *)((char *)v854 + ((v284 >> 28) & 8) + 80) |= 1 << v289;
                  v236 |= 0x7Fu;
                  *v288 = v236;
                }
                ++v282;
                v283 -= 4;
              }
              while (v283);
            }
          }
        }
        v864 = v236;
        JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_1::operator()((uint64_t *)v854, *((_QWORD *)v854 + 24) | *((_QWORD *)v854 + 23));
        JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_1::operator()((uint64_t *)v854, *((_QWORD *)v854 + 26) | *((_QWORD *)v854 + 25));
        JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_0::operator()(v867, (uint64_t *)v854, *((_QWORD *)v854 + 19), 0);
        JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_0::operator()(v867, (uint64_t *)v854, *((_QWORD *)v854 + 21), 4);
        if (v859)
        {
          *(_QWORD *)v900 = &v900[16];
          *(_QWORD *)&v900[8] = 8;
          *(_QWORD *)&v898[8] = 8;
          v897[0] = v900;
          v897[1] = v898;
          *(_QWORD *)v898 = &v898[16];
          v902 = v897;
          if ((*v868 - 446) > 5)
          {
            v292 = *((unsigned int *)v190 + 3);
            if ((_DWORD)v292)
            {
              v293 = 0;
              v294 = 0;
              v295 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                   + 21 * *v868
                   + ((unint64_t)((v292 - 1) * v292) >> 1);
              v296 = 32 * v292;
              do
              {
                if (v294 >= *((unsigned int *)v190 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19802CE88);
                }
                v297 = *v295;
                if ((v297 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19802CE10);
                }
                JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()((char *)v897, (uint64_t)*v190 + v293, v297 & 0xF);
                ++v294;
                ++v295;
                v293 += 32;
              }
              while (v296 != v293);
            }
          }
          else
          {
            v903[0] = (int8x16_t *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
            v903[1] = (int8x16_t *)v903;
            v903[2] = (int8x16_t *)&v902;
            JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v190, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v903);
          }
          _ZZZN3JSC2B33Air28GenerateAndAllocateRegisters8generateERNS_12CCallHelpersEENK3__2clEvENKUlRT_E_clIN3WTF6VectorINSt3__14pairIPNS1_3TmpENS1_3Arg4RoleEEELm8ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEDaS7_((uint64_t *)v854, *(unsigned int ***)v900, *(unsigned int *)&v900[12]);
          v299 = v298;
          _ZZZN3JSC2B33Air28GenerateAndAllocateRegisters8generateERNS_12CCallHelpersEENK3__2clEvENKUlRT_E_clIN3WTF6VectorINSt3__14pairIPNS1_3TmpENS1_3Arg4RoleEEELm8ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEDaS7_((uint64_t *)v854, *(unsigned int ***)v898, *(unsigned int *)&v898[12]);
          v301 = v300;
          v302 = *(_QWORD *)v898;
          if (&v898[16] != *(_BYTE **)v898 && *(_QWORD *)v898)
          {
            *(_QWORD *)v898 = 0;
            *(_DWORD *)&v898[8] = 0;
            WTF::fastFree(v302, v118, v119, v120, v121, v122, v123, v124);
          }
          v303 = *(_QWORD *)v900;
          if (&v900[16] != *(_BYTE **)v900 && *(_QWORD *)v900)
          {
            *(_QWORD *)v900 = 0;
            *(_DWORD *)&v900[8] = 0;
            WTF::fastFree(v303, v118, v119, v120, v121, v122, v123, v124);
          }
          v144 = v858;
          v167 = v866;
          if ((v299 & v301 & 1) == 0)
          {
            if ((v851 & 1) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19802CC64);
            }
            if (&__src == v190)
              goto LABEL_509;
            v354 = v881;
            if (*((unsigned int *)v190 + 3) > (unint64_t)v881)
            {
              *((_DWORD *)v190 + 3) = v881;
              goto LABEL_395;
            }
            if (v881 <= (unint64_t)*((unsigned int *)v190 + 2))
            {
              v354 = *((unsigned int *)v190 + 3);
              goto LABEL_395;
            }
            if (*((_DWORD *)v190 + 2))
            {
              if (*((_DWORD *)v190 + 3))
                *((_DWORD *)v190 + 3) = 0;
              v526 = (unint64_t)*v190;
              if (v190 + 2 != *v190 && v526)
              {
                *v190 = 0;
                *((_DWORD *)v190 + 2) = 0;
                WTF::fastFree(v526, v118, v119, v120, v121, v122, v123, v124);
                if (!*v190)
                  goto LABEL_633;
LABEL_630:
                v527 = *((_DWORD *)v190 + 2);
              }
              else
              {
                if (v526)
                  goto LABEL_630;
LABEL_633:
                *v190 = v190 + 2;
                v527 = 3;
                *((_DWORD *)v190 + 2) = 3;
              }
            }
            else
            {
              v527 = 0;
            }
            v530 = v881;
            if (v527 >= v881)
            {
LABEL_635:
              v354 = *((unsigned int *)v190 + 3);
LABEL_395:
              if (v354)
              {
                memmove(*v190, __src, 32 * v354 - 7);
                v355 = *((unsigned int *)v190 + 3);
              }
              else
              {
                v355 = 0;
              }
              if (v355 != v881)
              {
                v428 = (char *)*v190 + 32 * v355;
                v429 = (__int128 *)((char *)__src + 32 * v355);
                v430 = 32 * v881 - 32 * v355;
                do
                {
                  v431 = *v429;
                  v432 = v429[1];
                  v429 += 2;
                  *v428 = v431;
                  v428[1] = v432;
                  v428 += 2;
                  v430 -= 32;
                }
                while (v430);
                LODWORD(v355) = v881;
              }
              *((_DWORD *)v190 + 3) = v355;
LABEL_509:
              v433 = v883[0];
              *(_DWORD *)(v852 + 7) = *(_DWORD *)((char *)v883 + 7);
              *(_QWORD *)v852 = v433;
              *(_QWORD *)v898 = v190;
              *(_QWORD *)&v898[8] = v8;
              if ((*v868 - 446) > 5)
              {
                v434 = *((unsigned int *)v190 + 3);
                if ((_DWORD)v434)
                {
                  v435 = 0;
                  v436 = 0;
                  v437 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                       + 21 * *v868
                       + ((unint64_t)((v434 - 1) * v434) >> 1);
                  v438 = 32 * v434;
                  do
                  {
                    if (v436 >= *((unsigned int *)v190 + 3))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19802CE90);
                    }
                    if ((*v437 >> 5) - 1 >= 5u)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19802CE50);
                    }
                    JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10::operator()((JSC::B3::Air::Inst **)v898, (uint64_t)*v190 + v435);
                    ++v436;
                    ++v437;
                    v435 += 32;
                  }
                  while (v438 != v435);
                }
              }
              else
              {
                *(_QWORD *)v900 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10>::implFunction;
                *(_QWORD *)&v900[8] = v900;
                *(_QWORD *)&v900[16] = v898;
                JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v190, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10>::implFunction, (uint64_t)v900);
              }
              LODWORD(v903[0]) = 0;
              *(_QWORD *)v898 = v190;
              *(_QWORD *)&v898[8] = v8;
              *(_QWORD *)&v898[16] = v903;
              if ((*v868 - 446) > 5)
              {
                v439 = *((unsigned int *)v190 + 3);
                v144 = v858;
                v167 = v866;
                v171 = v867;
                if ((_DWORD)v439)
                {
                  v440 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                       + 21 * *v868
                       + ((unint64_t)((v439 - 1) * v439) >> 1);
                  do
                  {
                    v441 = *v440++;
                    if ((v441 >> 5) - 1 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19802CE70);
                    }
                    --v439;
                  }
                  while (v439);
                }
              }
              else
              {
                *(_QWORD *)v900 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_11>::implFunction;
                *(_QWORD *)&v900[8] = v900;
                *(_QWORD *)&v900[16] = v898;
                JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v190, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_11>::implFunction, (uint64_t)v900);
                v144 = v858;
                v167 = v866;
                v171 = v867;
              }
              v40 = v856;
              v442 = v857 - 1;
              v851 = 1;
              goto LABEL_589;
            }
            v531 = (void **)*v190;
            v532 = *((unsigned int *)v190 + 3);
            if (v881 < 4)
            {
              v533 = v190 + 2;
              *v190 = v190 + 2;
              *((_DWORD *)v190 + 2) = 3;
              if ((_DWORD)v532)
                goto LABEL_639;
            }
            else
            {
              if (v881 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x19802CF08);
              }
              v533 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v881));
              *((_DWORD *)v190 + 2) = v530;
              *v190 = v533;
              if ((_DWORD)v532)
              {
LABEL_639:
                v534 = 32 * v532;
                v535 = v531;
                do
                {
                  v536 = *(_OWORD *)v535;
                  v537 = *((_OWORD *)v535 + 1);
                  v535 += 4;
                  *v533 = v536;
                  v533[1] = v537;
                  v533 += 2;
                  v534 -= 32;
                }
                while (v534);
              }
            }
            v8 = v854;
            if (v190 + 2 != v531 && v531)
            {
              if (*v190 == v531)
              {
                *v190 = 0;
                *((_DWORD *)v190 + 2) = 0;
              }
              WTF::fastFree((unint64_t)v531, v118, v119, v120, v121, v122, v123, v124);
              v8 = v854;
            }
            goto LABEL_635;
          }
          v851 = 0;
        }
        v304 = *(_QWORD *)v854;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v854 + 8) + 208) && *v868 == 448)
        {
          *(_QWORD *)v900 = 0;
          *(_QWORD *)&v900[8] = 0;
          v305 = *((unsigned int *)v867 + 3);
          if ((_DWORD)v305)
          {
            v306 = 0;
            v307 = 0;
            v308 = 0;
            v309 = *(char **)v867;
            do
            {
              if (*(_DWORD *)&v309[4 * v308])
              {
                if ((v308 & 0x40) != 0)
                  goto LABEL_1056;
                v310 = 1 << v308;
                if (HIBYTE(dword_1ECF4C7B0))
                {
                  if (HIBYTE(word_1ECF4C79E))
                    v311 = 1;
                  else
                    v311 = *(_BYTE *)(*(_QWORD *)(v304 + 8) + 212) != 0;
                  v307 |= v310;
                  *(_QWORD *)v900 = v307;
                  if ((v308 & 0x60) == 0x20 && v311)
                  {
                    v306 |= v310;
                    *(_QWORD *)&v900[8] = v306;
                  }
                }
                else
                {
                  v307 |= v310;
                  *(_QWORD *)v900 = v307;
                }
              }
              ++v308;
            }
            while (v305 != v308);
          }
          if (!*((_DWORD *)v190 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19802CED8);
          }
          (*(void (**)(_QWORD, void **, _BYTE *))(**(_QWORD **)*v190 + 56))(*(_QWORD *)*v190, v190, v900);
        }
        if ((JSC::B3::Air::Inst::isTerminal((JSC::B3::Air::Inst *)v190) & 1) != 0)
        {
          v313 = *((_QWORD *)v854 + 28) | *((_QWORD *)v854 + 27);
          v314 = v862;
          if (*(_OWORD *)((char *)v854 + 216) != 0)
          {
            v315 = __rbit64(v313);
            v316 = __clz(v315);
            do
            {
              v317 = **((_QWORD **)v854 + 13);
              v318 = *(unsigned int *)(v317 + 4 * v316);
              if ((_DWORD)v318)
              {
                *(_DWORD *)(v317 + 4 * v316) = 0;
                *(_QWORD *)((char *)v854 + ((v318 >> 28) & 8) + 80) |= 1 << v316;
                LOBYTE(v315) = v315 | 0x7F;
                v319 = (int)v318 <= 0;
                if ((int)v318 <= 0)
                  LODWORD(v318) = -(int)v318;
                v320 = 32;
                if (!v319)
                  v320 = 16;
                *(_BYTE *)(*(_QWORD *)((char *)v854 + v320) + 16 * v318 + 8) = v315;
              }
              if (v316 > 0x3E)
                break;
              v316 += __clz(__rbit64(v313 >> (v316 + 1))) + 1;
            }
            while (v316 < 0x40);
          }
          v321 = v862[9];
          if ((_DWORD)v321)
          {
            v322 = 0;
            v323 = 1;
            do
            {
              v324 = *(unsigned int **)(*((_QWORD *)v314 + 3) + 16 * v322);
              if (v324[21] == 1 && (v325 = *v324, *(_DWORD *)(*(_QWORD *)(v888 + 8 * v325) + 4) == -1))
              {
                if ((_DWORD)v850 != (_DWORD)v325)
                {
                  v326 = (uint64_t *)&v856[16 * v325];
                  v327 = *((unsigned int *)v867 + 3);
                  if (*((unsigned int *)v326 + 3) <= v327)
                  {
                    v328 = *((unsigned int *)v326 + 2);
                    if (v327 > v328)
                    {
                      if (*((_DWORD *)v326 + 2))
                      {
                        if (*((_DWORD *)v326 + 3))
                          *((_DWORD *)v326 + 3) = 0;
                        v329 = *v326;
                        if (*v326)
                        {
                          *v326 = 0;
                          *((_DWORD *)v326 + 2) = 0;
                          WTF::fastFree(v329, v118, v119, v120, v121, v122, v123, v124);
                          v328 = *((unsigned int *)v326 + 2);
                        }
                      }
                      v330 = *((unsigned int *)v867 + 3);
                      if (v328 < v330)
                      {
                        if (v330 >> 30)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19802CED0);
                        }
                        v331 = *v326;
                        v332 = *((unsigned int *)v326 + 3);
                        v333 = WTF::fastMalloc((WTF *)(4 * v330));
                        *((_DWORD *)v326 + 2) = v330;
                        *v326 = v333;
                        if ((_DWORD)v332)
                        {
                          v335 = 4 * v332;
                          v336 = (_DWORD *)v333;
                          v337 = (int *)v331;
                          do
                          {
                            v338 = *v337++;
                            *v336++ = v338;
                            v335 -= 4;
                          }
                          while (v335);
                        }
                        if (v331)
                        {
                          if (v333 == v331)
                          {
                            *v326 = 0;
                            *((_DWORD *)v326 + 2) = 0;
                          }
                          WTF::fastFree(v331, v334, v119, v120, v121, v122, v123, v124);
                        }
                      }
                    }
                    v327 = *((unsigned int *)v326 + 3);
                  }
                  else
                  {
                    *((_DWORD *)v326 + 3) = v327;
                  }
                  v339 = (char *)*v326;
                  v118 = *(char **)v867;
                  if (v327)
                  {
                    memmove(v339, v118, 4 * v327);
                    v340 = *((unsigned int *)v326 + 3);
                    v339 = (char *)*v326;
                    v118 = *(char **)v867;
                  }
                  else
                  {
                    v340 = 0;
                  }
                  v341 = *((unsigned int *)v867 + 3);
                  if (v340 != v341)
                  {
                    v342 = &v339[4 * v340];
                    v343 = &v118[4 * v340];
                    v344 = 4 * v341 - 4 * v340;
                    do
                    {
                      v345 = *(_DWORD *)v343;
                      v343 += 4;
                      *(_DWORD *)v342 = v345;
                      v342 += 4;
                      v344 -= 4;
                    }
                    while (v344);
                    LODWORD(v340) = *((_DWORD *)v867 + 3);
                  }
                  v314 = v862;
                  *((_DWORD *)v326 + 3) = v340;
                  v321 = v862[9];
                }
              }
              else
              {
                v323 = 0;
              }
              ++v322;
            }
            while (v322 < v321);
            v144 = v858;
            if ((v323 & 1) == 0)
            {
              v356 = (_QWORD *)*((_QWORD *)v854 + 31);
              v357 = v356[10] + 32 * *v314;
              v358 = *(unsigned int *)(v357 + 12);
              if ((_DWORD)v358)
              {
                v359 = *(unsigned int **)v357;
                v360 = 4 * v358;
                v844 = (_QWORD *)*((_QWORD *)v854 + 31);
                while (1)
                {
                  v361 = *(_DWORD *)(*v356 + 176) + 33;
                  v79 = v361 >= *v359;
                  v362 = v361 - *v359;
                  v363 = v362 != 0 && v79 ? *v359 : v362;
                  v364 = v363 - 1;
                  if (v363 <= 0xFFFFFFDF && v364 > 0x1F)
                    goto LABEL_1100;
                  if (v363 <= 0)
                    LOBYTE(v364) = 31 - v363;
                  v366 = v364 & 0x7F;
                  if (v366 >= 0x40)
                    goto LABEL_1056;
                  if (((*((_QWORD *)v854 + 29) >> v366) & 1) != 0)
                  {
LABEL_1100:
                    if (v363 <= 0)
                      v367 = -v363;
                    else
                      v367 = v363;
                    v368 = v866;
                    if (v363 > 0)
                      v368 = v144;
                    v369 = *v368;
                    v370 = *(_BYTE *)(v369 + 16 * v367 + 8);
                    if ((v370 & 0x7F) != 0x7F)
                      break;
                  }
LABEL_483:
                  ++v359;
                  v360 -= 4;
                  if (!v360)
                    goto LABEL_495;
                }
                v853 = v370 & 0x7F;
                LODWORD(v897[0]) = v363;
                LOBYTE(v902) = v370;
                v371 = *(int8x16_t **)(*(_QWORD *)(v369 + 16 * v367) + 16);
                v903[0] = v371;
                if ((_BYTE)word_1ECF4C286)
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(*((_QWORD *)v854 + 1), (JSC::B3::Air::Tmp *)v897, (JSC::Reg *)&v902, v903);
                if (v363 >= 1)
                {
                  v372 = (_DWORD *)*((_QWORD *)v854 + 1);
                  v373 = *(unsigned int *)(*(_QWORD *)v854 + 184);
                  *(_DWORD *)&v900[20] = 0;
                  v901 = 0;
                  *(_WORD *)&v900[8] = 519;
                  *(_QWORD *)&v900[12] = 0x1E00000001;
                  *(_QWORD *)v900 = v371;
                  if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)
                    || (*(_QWORD *)v900 = (char *)v371 + v373,
                        *(_WORD *)&v900[8] = 519,
                        *(_QWORD *)&v900[12] = 0x2000000001,
                        *(_DWORD *)&v900[20] = 0,
                        v901 = 0,
                        JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259)))
                  {
                    v374 = *(unsigned int *)v900;
                    v375 = v900[8];
                    v376 = v900[9];
                    v377 = *(_DWORD *)&v900[12];
                    v378 = v900[16];
                    v379 = *(_WORD *)&v900[20];
                  }
                  else
                  {
                    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v372, (uint64_t)v371, 30, v120, v121, v122, v123, v124);
                    v899 = 0;
                    *(_WORD *)&v898[8] = 523;
                    *(_DWORD *)&v898[20] = 31;
                    *(_QWORD *)&v898[12] = 0x1E00000001;
                    *(_QWORD *)v898 = 0;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 90, 259))
                    {
                      v374 = *(unsigned int *)v898;
                      v375 = v898[8];
                      v376 = v898[9];
                      v377 = *(_DWORD *)&v898[12];
                      v378 = v898[16];
                      v379 = *(_WORD *)&v898[20];
                    }
                    else
                    {
                      v396 = v372[50];
                      if (v396 + 4 > v372[48])
                      {
                        v312 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v372 + 14), (uint64_t)v118, v119, v120, v121, v122, v123, v124).n128_u64[0];
                        v396 = v372[50];
                      }
                      v374 = 0;
                      v379 = 0;
                      *(_DWORD *)(*((_QWORD *)v372 + 7) + v396) = -1961032738;
                      v372[50] += 4;
                      v378 = 31;
                      v377 = 1;
                      v375 = 7;
                      v376 = 2;
                    }
                  }
                  v144 = v858;
                  v314 = v862;
                  v389 = *((_QWORD *)v854 + 1);
                  if (v375 == 7)
                  {
                    v397 = v378 - 1;
                    if ((v374 + 256) <= 0x1FF)
                    {
                      v392 = ((v374 & 0x1FF) << 12) | v370 & 0x1F | (32 * v397) | 0xF8000000;
                      goto LABEL_442;
                    }
                    if (v374 > 0x7FF8 || (v374 & 7) != 0)
                    {
                      if (!*(_BYTE *)(v389 + 212))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19802CD60);
                      }
                      *(_DWORD *)(*(_QWORD *)(v389 + 296) + 208) &= ~*(_DWORD *)(v389 + 320);
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v389, (int)v374, *(char *)(v389 + 304), v120, v121, v122, v123, v124);
                      v314 = v862;
                      v392 = v370 & 0x1F | (32 * v397) | 0xF8316800;
                    }
                    else
                    {
                      v392 = ((_DWORD)v374 << 7) & 0x3FFC00 | 0xF9000000 | v370 & 0x1F | (32 * v397);
                    }
LABEL_465:
                    v409 = *(_DWORD *)(v389 + 200);
                    v399 = (unsigned int *)(v389 + 200);
                    v398 = v409;
                    v401 = (JSC::AssemblerBuffer *)(v399 - 36);
                    if (v409 + 4 > *(v399 - 2))
                    {
LABEL_466:
                      v312 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v401, (uint64_t)v118, v119, v120, v121, v122, v123, v124).n128_u64[0];
                      v314 = v862;
                      v398 = *v399;
                    }
LABEL_443:
                    *(_DWORD *)(*(_QWORD *)v401 + v398) = v392;
                    *v399 += 4;
LABEL_482:
                    v356 = v844;
                    goto LABEL_483;
                  }
                  HIDWORD(v403) = v377;
                  LODWORD(v403) = v377 - 2;
                  v402 = v403 >> 1;
                  if (v402 > 7)
                    v404 = 0;
                  else
                    v404 = qword_1991505B0[v402];
                  JSC::MacroAssemblerARM64::store64(*((_QWORD *)v854 + 1), v853, v404 | ((v379 << 8) - 256) & 0xFF00 | (v378 - 1), v374 | (v376 << 32), v121, v122, v123, v124);
LABEL_481:
                  v314 = v862;
                  goto LABEL_482;
                }
                v380 = *(_QWORD *)v854;
                if (HIBYTE(dword_1ECF4C7B0))
                {
                  if (HIBYTE(word_1ECF4C79E))
                  {
                    v381 = (_DWORD *)*((_QWORD *)v854 + 1);
                    v382 = *(unsigned int *)(v380 + 184);
                    goto LABEL_425;
                  }
                  v381 = (_DWORD *)*((_QWORD *)v854 + 1);
                  v382 = *(unsigned int *)(v380 + 184);
                  if (*(_BYTE *)(*(_QWORD *)(v380 + 8) + 212))
                  {
LABEL_425:
                    *(_DWORD *)&v900[20] = 0;
                    v901 = 0;
                    *(_WORD *)&v900[8] = 519;
                    *(_QWORD *)&v900[12] = 0x1E00000001;
                    *(_QWORD *)v900 = v371;
                    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)
                      || (*(_QWORD *)v900 = (char *)v371 + v382,
                          *(_WORD *)&v900[8] = 519,
                          *(_QWORD *)&v900[12] = 0x2000000001,
                          *(_DWORD *)&v900[20] = 0,
                          v901 = 0,
                          JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)))
                    {
                      v383 = *(unsigned int *)v900;
                      v384 = v900[8];
                      v385 = v900[9];
                      v386 = *(_DWORD *)&v900[12];
                      v387 = v900[16];
                      v388 = *(_WORD *)&v900[20];
                    }
                    else
                    {
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v381, (uint64_t)v371, 30, v120, v121, v122, v123, v124);
                      v899 = 0;
                      *(_WORD *)&v898[8] = 523;
                      *(_DWORD *)&v898[20] = 31;
                      *(_QWORD *)&v898[12] = 0x1E00000001;
                      *(_QWORD *)v898 = 0;
                      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 113, 260))
                      {
                        v383 = *(unsigned int *)v898;
                        v384 = v898[8];
                        v385 = v898[9];
                        v386 = *(_DWORD *)&v898[12];
                        v387 = v898[16];
                        v388 = *(_WORD *)&v898[20];
                      }
                      else
                      {
                        v408 = v381[50];
                        if (v408 + 4 > v381[48])
                        {
                          v312 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v381 + 14), (uint64_t)v118, v119, v120, v121, v122, v123, v124).n128_u64[0];
                          v408 = v381[50];
                          v853 = v902 & 0x7F;
                        }
                        v383 = 0;
                        v388 = 0;
                        *(_DWORD *)(*((_QWORD *)v381 + 7) + v408) = -1961032738;
                        v381[50] += 4;
                        v387 = 31;
                        v386 = 1;
                        v384 = 7;
                        v385 = 2;
                      }
                    }
                    v314 = v862;
                    v389 = *((_QWORD *)v854 + 1);
                    v390 = v853 - 32;
                    if (v384 != 7)
                    {
                      HIDWORD(v394) = v386;
                      LODWORD(v394) = v386 - 2;
                      v393 = v394 >> 1;
                      if (v393 > 7)
                        v395 = 0;
                      else
                        v395 = qword_1991505B0[v393];
                      JSC::MacroAssemblerARM64::storeVector(*((_QWORD *)v854 + 1), v390, v395 | ((v388 << 8) - 256) & 0xFF00 | (v387 - 1), v383 | (v385 << 32), v121, v122, v123, v124);
                      goto LABEL_481;
                    }
                    v391 = v387 - 1;
                    if ((v383 + 256) <= 0x1FF)
                    {
                      v392 = ((v383 & 0x1FF) << 12) | (32 * v391) | 0x3C800000 | v390;
                      goto LABEL_442;
                    }
                    if (v383 > 0xFFF0 || (v383 & 0xF) != 0)
                    {
                      if (!*(_BYTE *)(v389 + 212))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19802CD40);
                      }
                      *(_DWORD *)(*(_QWORD *)(v389 + 296) + 208) &= ~*(_DWORD *)(v389 + 320);
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v389, (int)v383, *(char *)(v389 + 304), v120, v121, v122, v123, v124);
                      v314 = v862;
                      v392 = v390 | (32 * v391) | 0x3CB16800;
                      goto LABEL_465;
                    }
                    v405 = v390;
                    v406 = ((_DWORD)v383 << 6) & 0x3FFC00 | (32 * v391);
                    v407 = 1031798784;
LABEL_453:
                    v392 = v406 | v407 | v405;
                    goto LABEL_465;
                  }
                }
                else
                {
                  v381 = (_DWORD *)*((_QWORD *)v854 + 1);
                  v382 = *(unsigned int *)(v380 + 184);
                }
                *(_DWORD *)&v900[20] = 0;
                v901 = 0;
                *(_WORD *)&v900[8] = 519;
                *(_QWORD *)&v900[12] = 0x1E00000001;
                *(_QWORD *)v900 = v371;
                if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)
                  || (*(_QWORD *)v900 = (char *)v371 + v382,
                      *(_WORD *)&v900[8] = 519,
                      *(_QWORD *)&v900[12] = 0x2000000001,
                      *(_DWORD *)&v900[20] = 0,
                      v901 = 0,
                      JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)))
                {
                  v410 = *(unsigned int *)v900;
                  v411 = v900[8];
                  v412 = v900[9];
                  v413 = *(_DWORD *)&v900[12];
                  v414 = v900[16];
                  v415 = *(_WORD *)&v900[20];
                }
                else
                {
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v381, (uint64_t)v371, 30, v120, v121, v122, v123, v124);
                  v899 = 0;
                  *(_WORD *)&v898[8] = 523;
                  *(_DWORD *)&v898[20] = 31;
                  *(_QWORD *)&v898[12] = 0x1E00000001;
                  *(_QWORD *)v898 = 0;
                  if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 108, 259))
                  {
                    v410 = *(unsigned int *)v898;
                    v411 = v898[8];
                    v412 = v898[9];
                    v413 = *(_DWORD *)&v898[12];
                    v414 = v898[16];
                    v415 = *(_WORD *)&v898[20];
                  }
                  else
                  {
                    v421 = v381[50];
                    if (v421 + 4 > v381[48])
                    {
                      v312 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v381 + 14), (uint64_t)v118, v119, v120, v121, v122, v123, v124).n128_u64[0];
                      v421 = v381[50];
                      v853 = v902 & 0x7F;
                    }
                    v410 = 0;
                    v415 = 0;
                    *(_DWORD *)(*((_QWORD *)v381 + 7) + v421) = -1961032738;
                    v381[50] += 4;
                    v414 = 31;
                    v413 = 1;
                    v411 = 7;
                    v412 = 2;
                  }
                }
                v314 = v862;
                v389 = *((_QWORD *)v854 + 1);
                v416 = v853 - 32;
                if (v411 != 7)
                {
                  HIDWORD(v419) = v413;
                  LODWORD(v419) = v413 - 2;
                  v418 = v419 >> 1;
                  if (v418 > 7)
                    v420 = 0;
                  else
                    v420 = qword_1991505B0[v418];
                  JSC::MacroAssemblerARM64::storeDouble(*((_QWORD *)v854 + 1), v416, v420 | ((v415 << 8) - 256) & 0xFF00 | (v414 - 1), v410 | (v412 << 32), v121, v122, v123, v124);
                  goto LABEL_481;
                }
                v417 = v414 - 1;
                if ((v410 + 256) <= 0x1FF)
                {
                  v392 = ((v410 & 0x1FF) << 12) | (32 * v417) | v416 | 0xFC000000;
LABEL_442:
                  v400 = *(_DWORD *)(v389 + 200);
                  v399 = (unsigned int *)(v389 + 200);
                  v398 = v400;
                  v401 = (JSC::AssemblerBuffer *)(v399 - 36);
                  if (v400 + 4 > *(v399 - 2))
                    goto LABEL_466;
                  goto LABEL_443;
                }
                if (v410 > 0x7FF8 || (v410 & 7) != 0)
                {
                  if (!*(_BYTE *)(v389 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19802CDD0);
                  }
                  *(_DWORD *)(*(_QWORD *)(v389 + 296) + 208) &= ~*(_DWORD *)(v389 + 320);
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v389, (int)v410, *(char *)(v389 + 304), v120, v121, v122, v123, v124);
                  v392 = v416 | (32 * v417) | 0xFC316800;
                  v422 = *(_DWORD *)(v389 + 200);
                  v399 = (unsigned int *)(v389 + 200);
                  v398 = v422;
                  v401 = (JSC::AssemblerBuffer *)(v399 - 36);
                  v314 = v862;
                  if (v422 + 4 > *(v399 - 2))
                    goto LABEL_466;
                  goto LABEL_443;
                }
                v405 = v416;
                v406 = ((_DWORD)v410 << 7) & 0x3FFC00 | (32 * v417);
                v407 = -50331648;
                goto LABEL_453;
              }
            }
          }
LABEL_495:
          v423 = *v868;
          if (v423 == 329)
          {
            if (!v314[9])
            {
              __break(0xC471u);
              JUMPOUT(0x19802CEF8);
            }
            v424 = *(_QWORD *)v854;
            v425 = *v314 + 1;
            v426 = *(unsigned int *)(*(_QWORD *)v854 + 108);
            if (v426 <= v425)
            {
              v167 = v866;
            }
            else
            {
              v167 = v866;
              while (1)
              {
                v427 = *(_QWORD *)(*(_QWORD *)(v424 + 96) + 8 * v425);
                if (v427)
                  break;
                if (v426 == ++v425)
                  goto LABEL_529;
              }
            }
            if (v425 >= v426)
              v427 = 0;
            else
              v427 = *(_QWORD *)(*(_QWORD *)(v424 + 96) + 8 * v425);
LABEL_529:
            v443 = v859;
            if (**((_QWORD **)v314 + 3) == v427)
              v443 = 0;
            v859 = v443;
          }
          else
          {
            v167 = v866;
          }
          if ((v423 - 330) > 4)
          {
            if (v859)
            {
              JSC::B3::Air::Inst::generate((uint64_t *)v898, (int **)v190, *((_QWORD *)v854 + 1), (uint64_t)&v887, v121, v122, v123, v124, v312);
              v444 = v862;
              if (*(_DWORD *)v898 != -1)
              {
                v445 = v862[9];
                if (v445 == 2)
                {
                  v875 = *(_DWORD *)v898;
                  v448 = *(_QWORD *)&v898[4];
                  v876 = *(_QWORD *)&v898[4];
                  v449 = ***((unsigned int ***)v862 + 3);
                  if (*(_DWORD *)(*(_QWORD *)(v888 + 8 * v449) + 4) == -1)
                  {
                    v455 = v884 + 40 * v449;
                    *(_DWORD *)v900 = *(_DWORD *)v898;
                    *(_QWORD *)&v900[4] = *(_QWORD *)&v898[4];
                    v456 = *(unsigned int *)(v455 + 12);
                    if ((_DWORD)v456 == *(_DWORD *)(v455 + 8))
                    {
                      v457 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v455, (void *)(v456 + 1), (unint64_t)v900, v120, v121, v122, v123, v124);
                      v458 = (_DWORD *)(*(_QWORD *)v455 + 12 * *(unsigned int *)(v455 + 12));
                      *v458 = *(_DWORD *)v457;
                      v459 = v458 + 1;
                      v448 = *(_QWORD *)(v457 + 4);
                      v444 = v862;
                    }
                    else
                    {
                      v476 = (_DWORD *)(*(_QWORD *)v455 + 12 * v456);
                      *v476 = *(_DWORD *)v898;
                      v459 = v476 + 1;
                    }
                    *v459 = v448;
                    ++*(_DWORD *)(v455 + 12);
                  }
                  else
                  {
                    *(_DWORD *)v900 = *(_DWORD *)(*(_QWORD *)(v888 + 8 * v449) + 4);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v875, (unsigned int *)v900, *((_QWORD *)v854 + 1), v120, v121, v122, v123, v124);
                    v444 = v862;
                  }
                  if (v444[9] <= 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19802CF10);
                  }
                  v477 = *(_QWORD *)v854;
                  v478 = *v444 + 1;
                  v479 = *(unsigned int *)(*(_QWORD *)v854 + 108);
                  if (v479 > v478)
                  {
                    while (1)
                    {
                      v480 = *(_QWORD *)(*(_QWORD *)(v477 + 96) + 8 * v478);
                      if (v480)
                        break;
                      if (v479 == ++v478)
                        goto LABEL_565;
                    }
                  }
                  if (v478 >= v479)
                    v480 = 0;
                  else
                    v480 = *(_QWORD *)(*(_QWORD *)(v477 + 96) + 8 * v478);
LABEL_565:
                  if (*(_QWORD *)(*((_QWORD *)v444 + 3) + 16) != v480)
                  {
                    v481 = *((_QWORD *)v854 + 1);
                    for (jj = *(_DWORD *)(v481 + 200); jj < *(_DWORD *)(v481 + 52); *(_DWORD *)(v481 + 200) = jj)
                    {
                      if ((jj + 4) > *(_DWORD *)(v481 + 192))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v481 + 56), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
                        v444 = v862;
                        jj = *(_DWORD *)(v481 + 200);
                      }
                      *(_DWORD *)(*(_QWORD *)(v481 + 56) + jj) = -721215457;
                      jj = *(_DWORD *)(v481 + 200) + 4;
                    }
                    v483 = jj;
                    if ((jj + 4) > *(_DWORD *)(v481 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v481 + 56), (uint64_t)v118, v119, v120, v121, v122, v123, v124);
                      v444 = v862;
                      v483 = *(_DWORD *)(v481 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(v481 + 56) + v483) = 335544320;
                    *(_DWORD *)(v481 + 200) += 4;
                    if (*(_BYTE *)(v481 + 328))
                      v484 = 69;
                    else
                      v484 = 65;
                    v873 = jj;
                    LODWORD(v874) = 0;
                    BYTE4(v874) = v484;
                    *(_WORD *)((char *)&v874 + 5) = 15;
                    HIBYTE(v874) = -1;
                    if (v444[9] <= 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19802CF18);
                    }
                    v485 = **(unsigned int **)(*((_QWORD *)v444 + 3) + 16);
                    if (*(_DWORD *)(*(_QWORD *)(v888 + 8 * v485) + 4) == -1)
                    {
                      *(_DWORD *)v900 = jj;
                      v486 = v874;
                      *(_QWORD *)&v900[4] = v874;
                      if (jj != -1)
                      {
                        v487 = v884 + 40 * v485;
                        v488 = *(unsigned int *)(v487 + 12);
                        if ((_DWORD)v488 == *(_DWORD *)(v487 + 8))
                        {
                          v489 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v487, (void *)(v488 + 1), (unint64_t)v900, v120, v121, v122, v123, v124);
                          v490 = (_DWORD *)(*(_QWORD *)v487 + 12 * *(unsigned int *)(v487 + 12));
                          *v490 = *(_DWORD *)v489;
                          v491 = v490 + 1;
                          v486 = *(_QWORD *)(v489 + 4);
                        }
                        else
                        {
                          v492 = (int *)(*(_QWORD *)v487 + 12 * v488);
                          *v492 = jj;
                          v491 = v492 + 1;
                        }
                        *v491 = v486;
                        ++*(_DWORD *)(v487 + 12);
                      }
                    }
                    else
                    {
                      *(_DWORD *)v900 = *(_DWORD *)(*(_QWORD *)(v888 + 8 * v485) + 4);
                      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v873, (unsigned int *)v900, *((_QWORD *)v854 + 1), v120, v121, v122, v123, v124);
                    }
                    v144 = v858;
                  }
                }
                else
                {
                  if (v445 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19802CE30);
                  }
                  v877 = *(_DWORD *)v898;
                  v446 = *(_QWORD *)&v898[4];
                  v878 = *(_QWORD *)&v898[4];
                  v447 = ***((unsigned int ***)v862 + 3);
                  if (*(_DWORD *)(*(_QWORD *)(v888 + 8 * v447) + 4) == -1)
                  {
                    v450 = v884 + 40 * v447;
                    *(_DWORD *)v900 = *(_DWORD *)v898;
                    *(_QWORD *)&v900[4] = *(_QWORD *)&v898[4];
                    v451 = *(unsigned int *)(v450 + 12);
                    if ((_DWORD)v451 == *(_DWORD *)(v450 + 8))
                    {
                      v452 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v450, (void *)(v451 + 1), (unint64_t)v900, v120, v121, v122, v123, v124);
                      v453 = (_DWORD *)(*(_QWORD *)v450 + 12 * *(unsigned int *)(v450 + 12));
                      *v453 = *(_DWORD *)v452;
                      v454 = v453 + 1;
                      v446 = *(_QWORD *)(v452 + 4);
                    }
                    else
                    {
                      v475 = (_DWORD *)(*(_QWORD *)v450 + 12 * v451);
                      *v475 = *(_DWORD *)v898;
                      v454 = v475 + 1;
                    }
                    *v454 = v446;
                    ++*(_DWORD *)(v450 + 12);
                  }
                  else
                  {
                    LODWORD(v903[0]) = *(_DWORD *)(*(_QWORD *)(v888 + 8 * v447) + 4);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v877, (unsigned int *)v903, *((_QWORD *)v854 + 1), v120, v121, v122, v123, v124);
                  }
                }
              }
            }
          }
          else
          {
            JSC::B3::Air::Code::emitEpilogue(*(JSC::B3::Air::Code **)v854, *((JSC::CCallHelpers **)v854 + 1), v119, v120, v121, v122, v123, v124);
          }
        }
        else
        {
          if (v859)
            JSC::B3::Air::Inst::generate((uint64_t *)v900, (int **)v190, *((_QWORD *)v854 + 1), (uint64_t)&v887, v121, v122, v123, v124, v312);
          v346 = *((_QWORD *)v854 + 28) | *((_QWORD *)v854 + 27);
          if (*(_OWORD *)((char *)v854 + 216) != 0)
          {
            v347 = __rbit64(v346);
            v348 = __clz(v347);
            do
            {
              v349 = **((_QWORD **)v854 + 13);
              v350 = *(unsigned int *)(v349 + 4 * v348);
              if ((_DWORD)v350)
              {
                *(_DWORD *)(v349 + 4 * v348) = 0;
                *(_QWORD *)((char *)v854 + ((v350 >> 28) & 8) + 80) |= 1 << v348;
                LOBYTE(v347) = v347 | 0x7F;
                v351 = (int)v350 <= 0;
                if ((int)v350 <= 0)
                  LODWORD(v350) = -(int)v350;
                v352 = 32;
                if (!v351)
                  v352 = 16;
                *(_BYTE *)(*(_QWORD *)((char *)v854 + v352) + 16 * v350 + 8) = v347;
              }
              if (v348 > 0x3E)
                break;
              v353 = __clz(__rbit64(v346 >> (v348 + 1))) + v348 + 1;
              v348 = v353 >= 0x40 ? 64 : v353;
            }
            while (v353 <= 0x3F);
          }
        }
        v171 = v867;
        if (v849)
        {
          v493 = *(_DWORD *)(*((_QWORD *)v854 + 1) + 200);
          *(_QWORD *)v898 = v190;
          v903[0] = (int8x16_t *)__PAIR64__(v493, v847);
          WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::add<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>((uint64_t *)v849, (uint64_t *)v898, v903, (uint64_t)v900);
          if (!v900[16])
          {
            __break(0xC471u);
            goto LABEL_1060;
          }
        }
        ++*((_QWORD *)v854 + 12);
        v40 = v856;
        v442 = v857;
LABEL_589:
        v494 = __src;
        if (v882 != __src && __src != 0)
        {
          __src = 0;
          v880 = 0;
          v496 = v442;
          WTF::fastFree((unint64_t)v494, v118, v119, v120, v121, v122, v123, v124);
          v442 = v496;
        }
        v187 = v442 + 1;
        v135 = v862;
        v186 = v862[5];
        if (v187 >= v186)
          goto LABEL_786;
      }
    }
  }
LABEL_116:
  v127 = *((_QWORD *)v8 + 32);
  if (v127)
  {
    v128 = *(unsigned int *)(v127 - 4);
    v129 = v127 + 32 * v128;
    if (*(_DWORD *)(v127 - 12))
    {
      v130 = *((_QWORD *)v8 + 32);
      if ((_DWORD)v128)
      {
        v131 = 32 * v128;
        v130 = *((_QWORD *)v8 + 32);
        while ((unint64_t)(*(_QWORD *)v130 + 1) <= 1)
        {
          v130 += 32;
          v131 -= 32;
          if (!v131)
          {
            v130 = v129;
            break;
          }
        }
      }
LABEL_123:
      v132 = v127 + 32 * *(unsigned int *)(v127 - 4);
      goto LABEL_825;
    }
    v130 = v127 + 32 * v128;
  }
  else
  {
    v130 = 0;
    v128 = 0;
  }
  v129 = v127 + 32 * v128;
  if (v127)
    goto LABEL_123;
  v132 = 0;
LABEL_825:
  if (v132 != v130)
  {
    v855 = (uint64_t *)v8;
    v863 = v132;
    v865 = v129;
    do
    {
      v701 = (_DWORD *)*((_QWORD *)v8 + 1);
      v702 = v701[50];
      v872 = v702;
      v703 = (uint64_t)v701;
      if (v702 < v701[13])
      {
        do
        {
          if ((v702 + 4) > v701[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v701 + 14), (uint64_t)v118, v703, v120, v121, v122, v123, v124);
            v702 = v701[50];
          }
          *(_DWORD *)(*((_QWORD *)v701 + 7) + v702) = -721215457;
          v702 = v701[50] + 4;
          v701[50] = v702;
        }
        while (v702 < v701[13]);
        v872 = v702;
        v703 = *((_QWORD *)v8 + 1);
      }
      v701[52] = 0;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)(v130 + 8), (unsigned int *)&v872, v703, v120, v121, v122, v123, v124);
      v711 = *(_QWORD *)(v130 + 24);
      if (v711)
      {
        v712 = *(unsigned int *)(v711 - 4);
        v713 = v711 + 16 * v712;
        if (*(_DWORD *)(v711 - 12))
        {
          v714 = *(_QWORD *)(v130 + 24);
          if ((_DWORD)v712)
          {
            v715 = 16 * v712;
            v714 = *(_QWORD *)(v130 + 24);
            while (*(_DWORD *)v714 == 0x7FFFFFFF || *(_DWORD *)v714 == 0)
            {
              v714 += 16;
              v715 -= 16;
              if (!v715)
              {
                v714 = v713;
                break;
              }
            }
          }
LABEL_839:
          v717 = v711 + 16 * *(unsigned int *)(v711 - 4);
          goto LABEL_844;
        }
        v714 = v711 + 16 * v712;
      }
      else
      {
        v714 = 0;
        v712 = 0;
      }
      v713 = v711 + 16 * v712;
      if (v711)
        goto LABEL_839;
      v717 = 0;
LABEL_844:
      if (v717 != v714)
      {
        v870 = v717;
        while (1)
        {
          v718 = *(_QWORD *)(v714 + 8);
          if (*(_BYTE *)(v718 + 8) == 1)
            break;
LABEL_918:
          v784 = v714 + 16;
          v714 = v713;
          if (v784 != v713)
          {
            v714 = v784;
            while (*(_DWORD *)v714 == 0x7FFFFFFF || *(_DWORD *)v714 == 0)
            {
              v714 += 16;
              if (v714 == v713)
              {
                v714 = v713;
                break;
              }
            }
          }
          if (v714 == v717)
            goto LABEL_933;
        }
        v719 = *(_DWORD *)v714;
        v720 = *(_DWORD *)(v718 + 16);
        if (v720 <= 0)
          v721 = 31 - v720;
        else
          v721 = v720 + 127;
        v722 = v721 & 0x7F;
        LODWORD(v903[0]) = *(_DWORD *)v714;
        LOBYTE(v897[0]) = v721 & 0x7F;
        v723 = -v719;
        if (v719 > 0)
          v723 = v719;
        v724 = 32;
        if (v719 > 0)
          v724 = 16;
        v725 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v8 + v724) + 16 * v723) + 16);
        __src = (void *)v725;
        if ((_BYTE)word_1ECF4C286)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(*((_QWORD *)v8 + 1), (JSC::B3::Air::Tmp *)v903, (JSC::Reg *)v897, &__src);
          v717 = v870;
        }
        if (v719 >= 1)
        {
          if ((v725 + 256) < 0x200
            || (v725 <= 0x7FF8 ? (v752 = (v725 & 7) == 0) : (v752 = 0), v752))
          {
            v726 = *((_QWORD *)v8 + 1);
            v727 = 30;
LABEL_859:
            v728 = v727 - 1;
            if ((v725 + 256) > 0x1FF)
            {
              if (v725 <= 0x7FF8 && (v725 & 7) == 0)
              {
                v729 = ((_DWORD)v725 << 7) & 0x3FFC00 | v721 & 0x1F | (32 * v728) | 0xF9000000;
              }
              else
              {
                if (!*(_BYTE *)(v726 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19802CC84);
                }
                *(_DWORD *)(*(_QWORD *)(v726 + 296) + 208) &= ~*(_DWORD *)(v726 + 320);
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v726, (int)v725, *(char *)(v726 + 304), v706, v707, v708, v709, v710);
                v717 = v870;
                v729 = v721 & 0x1F | (32 * v728) | 0xF8316800;
              }
            }
            else
            {
              v729 = ((v725 & 0x1FF) << 12) | v721 & 0x1F | (32 * v728) | 0xF8000000;
            }
            v732 = *(_DWORD *)(v726 + 200);
            v731 = (unsigned int *)(v726 + 200);
            v730 = v732;
            if (v732 + 4 > *(v731 - 2))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v731 - 36), v704, v705, v706, v707, v708, v709, v710);
              v717 = v870;
              v730 = *v731;
            }
            *(_DWORD *)(*((_QWORD *)v731 - 18) + v730) = v729;
            *v731 += 4;
            goto LABEL_918;
          }
          v753 = (_DWORD *)*((_QWORD *)v8 + 1);
          *(_QWORD *)v900 = v725 + *(unsigned int *)(*(_QWORD *)v8 + 184);
          *(_WORD *)&v900[8] = 519;
          *(_QWORD *)&v900[12] = 0x2000000001;
          *(_DWORD *)&v900[20] = 0;
          v901 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 90, 259))
          {
            v725 = *(unsigned int *)v900;
            v754 = v900[8];
            v755 = v900[9];
            v756 = *(_DWORD *)&v900[12];
            v727 = v900[16];
            v757 = *(_WORD *)&v900[20];
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v753, v725, 30, v706, v707, v708, v709, v710);
            v899 = 0;
            *(_WORD *)&v898[8] = 523;
            *(_DWORD *)&v898[20] = 31;
            *(_QWORD *)&v898[12] = 0x1E00000001;
            *(_QWORD *)v898 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 90, 259))
            {
              v725 = *(unsigned int *)v898;
              v754 = v898[8];
              v755 = v898[9];
              v756 = *(_DWORD *)&v898[12];
              v727 = v898[16];
              v757 = *(_WORD *)&v898[20];
            }
            else
            {
              v762 = v753[50];
              if (v762 + 4 > v753[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v753 + 14), v704, v705, v706, v707, v708, v709, v710);
                v762 = v753[50];
              }
              v725 = 0;
              v757 = 0;
              *(_DWORD *)(*((_QWORD *)v753 + 7) + v762) = -1961032738;
              v753[50] += 4;
              v727 = 31;
              v756 = 1;
              v754 = 7;
              v755 = 2;
            }
          }
          v726 = *((_QWORD *)v8 + 1);
          if (v754 == 7)
          {
            v717 = v870;
            goto LABEL_859;
          }
          HIDWORD(v764) = v756;
          LODWORD(v764) = v756 - 2;
          v763 = v764 >> 1;
          if (v763 > 7)
            v765 = 0;
          else
            v765 = qword_1991505B0[v763];
          JSC::MacroAssemblerARM64::store64(*((_QWORD *)v8 + 1), v721 & 0x7F, v765 | ((v757 << 8) - 256) & 0xFF00 | (v727 - 1), v725 | (v755 << 32), v707, v708, v709, v710);
          goto LABEL_917;
        }
        v733 = *(_QWORD *)v8;
        if (HIBYTE(dword_1ECF4C7B0))
        {
          if (HIBYTE(word_1ECF4C79E))
          {
            v734 = (_DWORD *)*((_QWORD *)v8 + 1);
            v735 = *(unsigned int *)(v733 + 184);
            goto LABEL_867;
          }
          v734 = (_DWORD *)*((_QWORD *)v8 + 1);
          v735 = *(unsigned int *)(v733 + 184);
          if (*(_BYTE *)(*(_QWORD *)(v733 + 8) + 212))
          {
LABEL_867:
            *(_DWORD *)&v900[20] = 0;
            v901 = 0;
            *(_WORD *)&v900[8] = 519;
            *(_QWORD *)&v900[12] = 0x1E00000001;
            *(_QWORD *)v900 = v725;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)
              || (*(_QWORD *)v900 = v725 + v735,
                  *(_WORD *)&v900[8] = 519,
                  *(_QWORD *)&v900[12] = 0x2000000001,
                  *(_DWORD *)&v900[20] = 0,
                  v901 = 0,
                  JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 113, 260)))
            {
              v741 = *(unsigned int *)v900;
              v742 = v900[8];
              v743 = v900[9];
              v744 = *(_DWORD *)&v900[12];
              v745 = v900[16];
              v746 = *(_WORD *)&v900[20];
            }
            else
            {
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v734, v725, 30, v736, v737, v738, v739, v740);
              v899 = 0;
              *(_WORD *)&v898[8] = 523;
              *(_DWORD *)&v898[20] = 31;
              *(_QWORD *)&v898[12] = 0x1E00000001;
              *(_QWORD *)v898 = 0;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 113, 260))
              {
                v741 = *(unsigned int *)v898;
                v742 = v898[8];
                v743 = v898[9];
                v744 = *(_DWORD *)&v898[12];
                v745 = v898[16];
                v746 = *(_WORD *)&v898[20];
              }
              else
              {
                v761 = v734[50];
                if (v761 + 4 > v734[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v734 + 14), v758, v759, v736, v737, v738, v739, v740);
                  v761 = v734[50];
                  v722 = v897[0];
                }
                v741 = 0;
                v746 = 0;
                *(_DWORD *)(*((_QWORD *)v734 + 7) + v761) = -1961032738;
                v734[50] += 4;
                v745 = 31;
                v744 = 1;
                v742 = 7;
                v743 = 2;
              }
            }
            v8 = (JSC::B3::Air::GenerateAndAllocateRegisters *)v855;
            v747 = v855[1];
            v748 = (char)((v722 & 0x7F) - 32);
            if (v742 == 7)
            {
              JSC::MacroAssemblerARM64::storeVector(v747, v748, (v745 - 1) | (unint64_t)(v741 << 32), v736, v737, v738, v739, v740);
            }
            else
            {
              HIDWORD(v750) = v744;
              LODWORD(v750) = v744 - 2;
              v749 = v750 >> 1;
              if (v749 > 7)
                v751 = 0;
              else
                v751 = qword_1991505B0[v749];
              JSC::MacroAssemblerARM64::storeVector(v747, v748, v751 | ((v746 << 8) - 256) & 0xFF00 | (v745 - 1), v741 | (v743 << 32), v737, v738, v739, v740);
            }
LABEL_917:
            v717 = v870;
            goto LABEL_918;
          }
        }
        else
        {
          v734 = (_DWORD *)*((_QWORD *)v8 + 1);
          v735 = *(unsigned int *)(v733 + 184);
        }
        *(_DWORD *)&v900[20] = 0;
        v901 = 0;
        *(_WORD *)&v900[8] = 519;
        *(_QWORD *)&v900[12] = 0x1E00000001;
        *(_QWORD *)v900 = v725;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)
          || (*(_QWORD *)v900 = v725 + v735,
              *(_WORD *)&v900[8] = 519,
              *(_QWORD *)&v900[12] = 0x2000000001,
              *(_DWORD *)&v900[20] = 0,
              v901 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)v900, 108, 259)))
        {
          v771 = *(unsigned int *)v900;
          v772 = v900[8];
          v773 = v900[9];
          v774 = *(_DWORD *)&v900[12];
          v775 = v900[16];
          v776 = *(_WORD *)&v900[20];
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v734, v725, 30, v766, v767, v768, v769, v770);
          v899 = 0;
          *(_WORD *)&v898[8] = 523;
          *(_DWORD *)&v898[20] = 31;
          *(_QWORD *)&v898[12] = 0x1E00000001;
          *(_QWORD *)v898 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)v898, 108, 259))
          {
            v771 = *(unsigned int *)v898;
            v772 = v898[8];
            v773 = v898[9];
            v774 = *(_DWORD *)&v898[12];
            v775 = v898[16];
            v776 = *(_WORD *)&v898[20];
          }
          else
          {
            v786 = v734[50];
            if (v786 + 4 > v734[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v734 + 14), v782, v783, v766, v767, v768, v769, v770);
              v786 = v734[50];
              v722 = v897[0];
            }
            v771 = 0;
            v776 = 0;
            *(_DWORD *)(*((_QWORD *)v734 + 7) + v786) = -1961032738;
            v734[50] += 4;
            v775 = 31;
            v774 = 1;
            v772 = 7;
            v773 = 2;
          }
        }
        v8 = (JSC::B3::Air::GenerateAndAllocateRegisters *)v855;
        v777 = v855[1];
        v778 = (v722 & 0x7F) - 32;
        if (v772 == 7)
        {
          JSC::MacroAssemblerARM64::storeDouble(v777, v778, (v775 - 1) | (unint64_t)(v771 << 32), v766, v767, v768, v769, v770);
        }
        else
        {
          HIDWORD(v780) = v774;
          LODWORD(v780) = v774 - 2;
          v779 = v780 >> 1;
          if (v779 > 7)
            v781 = 0;
          else
            v781 = qword_1991505B0[v779];
          JSC::MacroAssemblerARM64::storeDouble(v777, v778, v781 | ((v776 << 8) - 256) & 0xFF00 | (v775 - 1), v771 | (v773 << 32), v767, v768, v769, v770);
        }
        goto LABEL_917;
      }
LABEL_933:
      v787 = *((_QWORD *)v8 + 1);
      v788 = *(_DWORD *)(v787 + 200);
      if (v788 < *(_DWORD *)(v787 + 52))
      {
        v40 = v856;
        do
        {
          if ((v788 + 4) > *(_DWORD *)(v787 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v787 + 56), v704, v705, v706, v707, v708, v709, v710);
            v788 = *(_DWORD *)(v787 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v787 + 56) + v788) = -721215457;
          v788 = *(_DWORD *)(v787 + 200) + 4;
          *(_DWORD *)(v787 + 200) = v788;
        }
        while (v788 < *(_DWORD *)(v787 + 52));
      }
      else
      {
        v40 = v856;
      }
      v789 = v788;
      if ((v788 + 4) > *(_DWORD *)(v787 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v787 + 56), v704, v705, v706, v707, v708, v709, v710);
        v789 = *(_DWORD *)(v787 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v787 + 56) + v789) = 335544320;
      *(_DWORD *)(v787 + 200) += 4;
      if (*(_BYTE *)(v787 + 328))
        v790 = 69;
      else
        v790 = 65;
      *(_DWORD *)v900 = v788;
      *(_DWORD *)&v900[4] = 0;
      v900[8] = v790;
      *(_WORD *)&v900[9] = 15;
      v900[11] = -1;
      v871 = *(_DWORD *)(v130 + 20);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v900, &v871, *((_QWORD *)v8 + 1), v706, v707, v708, v709, v710);
      v791 = v130 + 32;
      v130 = v865;
      if (v791 != v865)
      {
        v130 = v791;
        while ((unint64_t)(*(_QWORD *)v130 + 1) <= 1)
        {
          v130 += 32;
          if (v130 == v865)
          {
            v130 = v865;
            break;
          }
        }
      }
    }
    while (v130 != v863);
  }
  v889 = 0;
  v890 = -1;
  v792 = *(_QWORD *)v8;
  v793 = *(unsigned int *)(*(_QWORD *)v8 + 252);
  if (!(_DWORD)v793)
  {
    v794 = 0;
    goto LABEL_964;
  }
  if (v793 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x19802CF38);
  }
  v794 = (void *)WTF::fastMalloc((WTF *)(4 * v793));
  memset(v794, 255, 4 * v793);
  v792 = *(_QWORD *)v8;
  v795 = *(unsigned int *)(*(_QWORD *)v8 + 252);
  if ((_DWORD)v795)
  {
    if ((int)v795 - 1 < v793)
    {
      v796 = v888;
      v797 = *(_QWORD *)(v792 + 240);
      v798 = v795 - 1;
      do
      {
        v799 = v798;
        *((_DWORD *)v794 + v798) = *(_DWORD *)(*(_QWORD *)(v796
                                                                       + 8
                                                                       * **(unsigned int **)(v797
                                                                                           + 16 * v798))
                                                           + 4);
        --v798;
      }
      while (v799);
      goto LABEL_964;
    }
    __break(0xC471u);
LABEL_1060:
    JUMPOUT(0x19802CC44);
  }
LABEL_964:
  v800 = *(_QWORD *)(v792 + 256);
  if (v800)
  {
    *(_QWORD *)(v792 + 256) = 0;
    *(_DWORD *)(v792 + 264) = 0;
    WTF::fastFree(v800, v118, v119, v120, v121, v122, v123, v124);
  }
  *(_QWORD *)(v792 + 256) = v794;
  *(_DWORD *)(v792 + 264) = v793;
  *(_DWORD *)(v792 + 268) = v793;
  if ((_DWORD)v793 != *(_DWORD *)(v792 + 284))
  {
    __break(0xC471u);
    JUMPOUT(0x19802CDB0);
  }
  if (v849)
    *(_DWORD *)(v849 + 32) = *(_DWORD *)(*((_QWORD *)v8 + 1) + 200);
  if (HIDWORD(v887))
  {
    v801 = (uint64_t *)v887;
    v802 = 8 * HIDWORD(v887);
    do
    {
      v803 = *v801++;
      (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v803 + 16))(v803, *((_QWORD *)v8 + 1), &v887);
      v802 -= 8;
    }
    while (v802);
  }
  if (v849)
    *(_DWORD *)(v849 + 36) = *(_DWORD *)(*((_QWORD *)v8 + 1) + 200);
  v804 = v884;
  if (v886)
  {
    v805 = 40 * v886;
    v806 = v884 + 16;
    do
    {
      v807 = *(_QWORD *)(v806 - 16);
      if (v806 != v807 && v807 != 0)
      {
        *(_QWORD *)(v806 - 16) = 0;
        *(_DWORD *)(v806 - 8) = 0;
        WTF::fastFree(v807, v118, v119, v120, v121, v122, v123, v124);
      }
      v806 += 40;
      v805 -= 40;
    }
    while (v805);
    v804 = v884;
  }
  if (v804)
  {
    v884 = 0;
    v885 = 0;
    WTF::fastFree(v804, v118, v119, v120, v121, v122, v123, v124);
  }
  v809 = (unsigned int **)v888;
  if (HIDWORD(v888))
  {
    v810 = (unsigned int **)(v888 + 8 * HIDWORD(v888));
    do
    {
      v811 = *v809;
      *v809 = 0;
      if (v811)
      {
        do
        {
          v812 = __ldaxr(v811);
          v813 = v812 - 1;
        }
        while (__stlxr(v813, v811));
        if (!v813)
        {
          atomic_store(1u, v811);
          WTF::fastFree((unint64_t)v811, v118, v119, v120, v121, v122, v123, v124);
        }
      }
      ++v809;
    }
    while (v809 != v810);
    v809 = (unsigned int **)v888;
  }
  if (v809)
  {
    *(_QWORD *)&v888 = 0;
    DWORD2(v888) = 0;
    WTF::fastFree((unint64_t)v809, v118, v119, v120, v121, v122, v123, v124);
  }
  v814 = (unsigned int **)v887;
  if (HIDWORD(v887))
  {
    v815 = (unsigned int **)(v887 + 8 * HIDWORD(v887));
    do
    {
      v816 = *v814;
      *v814 = 0;
      if (v816)
      {
        v817 = v816 + 2;
        do
        {
          v818 = __ldaxr(v817);
          v819 = v818 - 1;
        }
        while (__stlxr(v819, v817));
        if (!v819)
        {
          atomic_store(1u, v816 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v816 + 8))(v816);
        }
      }
      ++v814;
    }
    while (v814 != v815);
    v814 = (unsigned int **)v887;
  }
  if (v814)
  {
    *(_QWORD *)&v887 = 0;
    DWORD2(v887) = 0;
    WTF::fastFree((unint64_t)v814, v118, v119, v120, v121, v122, v123, v124);
  }
  v820 = v835;
  if (v834)
  {
    v821 = v40;
    do
    {
      v822 = *(_QWORD *)v821;
      if (*(_QWORD *)v821)
      {
        *(_QWORD *)v821 = 0;
        *((_DWORD *)v821 + 2) = 0;
        WTF::fastFree(v822, v118, v119, v120, v121, v122, v123, v124);
      }
      v821 += 16;
      v820 -= 16;
    }
    while (v820);
  }
  if (v40)
    WTF::fastFree((unint64_t)v40, v118, v119, v120, v121, v122, v123, v124);
  if (v836)
    *((_DWORD *)v837 + 52) = 0;
  *((_BYTE *)v837 + 212) = v836;
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v892);
}

void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_1::operator()(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  int v84;
  char v85;

  if (a2)
  {
    v2 = a2;
    while (1)
    {
      v4 = __clz(__rbit64(v2));
      v5 = *(unsigned int *)(*(_QWORD *)a1[13] + 4 * v4);
      if ((_DWORD)v5)
        break;
LABEL_54:
      v2 &= v2 - 1;
      if (!v2)
        return;
    }
    v6 = v4 | 0x80;
    v75 = *(_DWORD *)(*(_QWORD *)a1[13] + 4 * v4);
    v74 = v4 | 0x80;
    v7 = -(int)v5;
    if ((int)v5 <= 0)
    {
      v8 = 4;
    }
    else
    {
      v7 = v5;
      v8 = 2;
    }
    v9 = v7;
    v10 = *(_QWORD *)(*(_QWORD *)(a1[v8] + 16 * v7) + 16);
    v73 = v10;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(a1[1], (JSC::B3::Air::Tmp *)&v75, (JSC::Reg *)&v74, &v73);
    if ((int)v5 >= 1)
    {
      v11 = (_DWORD *)a1[1];
      v12 = *(unsigned int *)(*a1 + 184);
      v84 = 0;
      v85 = 0;
      v82 = 519;
      v83 = 0x1E00000001;
      v81 = v10;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 90, 259)
        || (v81 = v10 + v12,
            v82 = 519,
            v83 = 0x2000000001,
            v84 = 0,
            v85 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 90, 259)))
      {
        v18 = v81;
        v19 = v82;
        v20 = HIBYTE(v82);
        v22 = v83;
        v21 = BYTE4(v83);
        v23 = v84;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v11, v10, 30, v13, v14, v15, v16, v17);
        v80 = 0;
        v77 = 523;
        v79 = 31;
        v78 = 0x1E00000001;
        v76 = 0;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v76, 90, 259))
        {
          v18 = v76;
          v19 = v77;
          v20 = HIBYTE(v77);
          v22 = v78;
          v21 = BYTE4(v78);
          v23 = v79;
        }
        else
        {
          v49 = v11[50];
          if (v49 + 4 > v11[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), v44, v45, v13, v14, v15, v16, v17);
            v49 = v11[50];
          }
          v23 = 0;
          v18 = 0;
          *(_DWORD *)(*((_QWORD *)v11 + 7) + v49) = -1961032738;
          v11[50] += 4;
          v19 = 7;
          v22 = 1;
          v21 = 31;
          v20 = 2;
        }
      }
      v24 = a1[1];
      if (v19 == 7)
      {
        JSC::MacroAssemblerARM64::store64(v24, v4, (v21 - 1) | (unint64_t)(v18 << 32), v13, v14, v15, v16, v17);
      }
      else
      {
        HIDWORD(v42) = v22;
        LODWORD(v42) = v22 - 2;
        v41 = v42 >> 1;
        if (v41 > 7)
          v43 = 0;
        else
          v43 = qword_1991505B0[v41];
        JSC::MacroAssemblerARM64::store64(v24, v4, v43 | ((v23 << 8) - 256) & 0xFF00 | (v21 - 1), v18 | (v20 << 32), v14, v15, v16, v17);
      }
LABEL_53:
      *(_DWORD *)(*(_QWORD *)a1[13] + 4 * v4) = 0;
      *(uint64_t *)((char *)a1 + ((v5 >> 28) & 8) + 80) |= 1 << v4;
      *(_BYTE *)(a1[v8] + 16 * v9 + 8) = -1;
      goto LABEL_54;
    }
    v25 = *a1;
    v72 = v9;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (HIBYTE(word_1ECF4C79E))
      {
        v26 = (_DWORD *)a1[1];
        v27 = *(unsigned int *)(v25 + 184);
LABEL_18:
        v84 = 0;
        v85 = 0;
        v82 = 519;
        v83 = 0x1E00000001;
        v81 = v10;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 113, 260)
          || (v81 = v10 + v27,
              v82 = 519,
              v83 = 0x2000000001,
              v84 = 0,
              v85 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 113, 260)))
        {
          v33 = v81;
          v34 = v82;
          v35 = HIBYTE(v82);
          v37 = v83;
          v36 = BYTE4(v83);
          v38 = v84;
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v26, v10, 30, v28, v29, v30, v31, v32);
          v80 = 0;
          v77 = 523;
          v79 = 31;
          v78 = 0x1E00000001;
          v76 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v76, 113, 260))
          {
            v33 = v76;
            v34 = v77;
            v35 = HIBYTE(v77);
            v37 = v78;
            v36 = BYTE4(v78);
            v38 = v79;
          }
          else
          {
            v52 = v26[50];
            if (v52 + 4 > v26[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 14), v50, v51, v28, v29, v30, v31, v32);
              v52 = v26[50];
              v6 = v74;
            }
            v38 = 0;
            v33 = 0;
            *(_DWORD *)(*((_QWORD *)v26 + 7) + v52) = -1961032738;
            v26[50] += 4;
            v34 = 7;
            v37 = 1;
            v36 = 31;
            v35 = 2;
          }
        }
        v9 = v72;
        v39 = a1[1];
        v40 = (v6 & 0x7F) - 32;
        if (v34 == 7)
        {
          JSC::MacroAssemblerARM64::storeVector(v39, v40, (v36 - 1) | (unint64_t)(v33 << 32), v28, v29, v30, v31, v32);
        }
        else
        {
          HIDWORD(v47) = v37;
          LODWORD(v47) = v37 - 2;
          v46 = v47 >> 1;
          if (v46 > 7)
            v48 = 0;
          else
            v48 = qword_1991505B0[v46];
          JSC::MacroAssemblerARM64::storeVector(v39, v40, v48 | ((v38 << 8) - 256) & 0xFF00 | (v36 - 1), v33 | (v35 << 32), v29, v30, v31, v32);
        }
        goto LABEL_53;
      }
      v26 = (_DWORD *)a1[1];
      v27 = *(unsigned int *)(v25 + 184);
      if (*(_BYTE *)(*(_QWORD *)(v25 + 8) + 212))
        goto LABEL_18;
    }
    else
    {
      v26 = (_DWORD *)a1[1];
      v27 = *(unsigned int *)(v25 + 184);
    }
    v84 = 0;
    v85 = 0;
    v82 = 519;
    v83 = 0x1E00000001;
    v81 = v10;
    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 108, 259)
      || (v81 = v10 + v27,
          v82 = 519,
          v83 = 0x2000000001,
          v84 = 0,
          v85 = 0,
          JSC::B3::Air::Arg::isValidForm((unsigned int *)&v81, 108, 259)))
    {
      v58 = v81;
      v59 = v82;
      v60 = HIBYTE(v82);
      v62 = v83;
      v61 = BYTE4(v83);
      v63 = v84;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v26, v10, 30, v53, v54, v55, v56, v57);
      v80 = 0;
      v77 = 523;
      v79 = 31;
      v78 = 0x1E00000001;
      v76 = 0;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v76, 108, 259))
      {
        v58 = v76;
        v59 = v77;
        v60 = HIBYTE(v77);
        v62 = v78;
        v61 = BYTE4(v78);
        v63 = v79;
      }
      else
      {
        v71 = v26[50];
        if (v71 + 4 > v26[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 14), v69, v70, v53, v54, v55, v56, v57);
          v71 = v26[50];
          v6 = v74;
        }
        v63 = 0;
        v58 = 0;
        *(_DWORD *)(*((_QWORD *)v26 + 7) + v71) = -1961032738;
        v26[50] += 4;
        v59 = 7;
        v62 = 1;
        v61 = 31;
        v60 = 2;
      }
    }
    v9 = v72;
    v64 = a1[1];
    v65 = (v6 & 0x7F) - 32;
    if (v59 == 7)
    {
      JSC::MacroAssemblerARM64::storeDouble(v64, v65, (v61 - 1) | (unint64_t)(v58 << 32), v53, v54, v55, v56, v57);
    }
    else
    {
      HIDWORD(v67) = v62;
      LODWORD(v67) = v62 - 2;
      v66 = v67 >> 1;
      if (v66 > 7)
        v68 = 0;
      else
        v68 = qword_1991505B0[v66];
      JSC::MacroAssemblerARM64::storeDouble(v64, v65, v68 | ((v63 << 8) - 256) & 0xFF00 | (v61 - 1), v58 | (v60 << 32), v54, v55, v56, v57);
    }
    goto LABEL_53;
  }
}

void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_0::operator()(_QWORD *a1, uint64_t *a2, unint64_t a3, char a4)
{
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _QWORD *v146;
  _QWORD *v147;
  char v148;
  char v149;
  int v150;
  uint64_t v151;
  char v152;
  int v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  int v162;
  char v163;

  if (a3)
  {
    v4 = a3;
    v6 = a1;
    v147 = a2 + 2;
    v146 = a2 + 4;
    while (1)
    {
      v7 = __clz(__rbit64(v4));
      v8 = *(_DWORD *)(*v6 + 4 * v7);
      if (v8)
      {
        v9 = (char)(31 - v7);
        if ((v7 & 0x20) != 0)
          v10 = (char)(31 - v7);
        else
          v10 = v7 + 1;
        if (v8 == v10)
          goto LABEL_125;
        v11 = v7 + 1;
      }
      else
      {
        v11 = v7 + 1;
        v9 = (char)(31 - v7);
      }
      v12 = v7 | 0x80;
      v13 = (v7 & 0x20) != 0 ? v9 : v11;
      v150 = v13;
      v149 = v7 | 0x80;
      v148 = a4;
      v14 = *(unsigned int *)(*(_QWORD *)a2[13] + 4 * v7);
      if ((_DWORD)v14)
        break;
LABEL_67:
      if (v13 <= 0)
        v80 = -v13;
      else
        v80 = v13;
      if (v13 <= 0)
        v81 = v146;
      else
        v81 = v147;
      *(_BYTE *)(*v81 + 16 * v80 + 8) = v12;
      v82 = v12 & 0x7F;
      if (v82 >= 0x40)
      {
        __break(1u);
        return;
      }
      a2[(v13 >> 31) + 10] &= ~(1 << (v12 & 0x7F));
      *(_DWORD *)(*(_QWORD *)a2[13] + 4 * (v12 & 0x7F)) = v13;
      if (v148 > 0xB || ((1 << v148) & 0xB30) == 0)
      {
        if ((_BYTE)word_1ECF4C286)
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [8],JSC::B3::Air::Arg::Role,char [2]>(a2[1], (JSC::B3::Air::Tmp *)&v150, (JSC::Reg *)&v149, &v148);
        v83 = *(_QWORD *)(*(_QWORD *)(*v81 + 16 * v80) + 16);
        if (v13 < 0)
        {
          v98 = *a2;
          if (!HIBYTE(dword_1ECF4C7B0))
          {
            v99 = (_DWORD *)a2[1];
            v100 = *(unsigned int *)(v98 + 184);
LABEL_114:
            v162 = 0;
            v163 = 0;
            v160 = 519;
            v161 = 0x1E00000001;
            v159 = v83;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 108, 259)
              || (v159 = v83 + v100,
                  v160 = 519,
                  v161 = 0x2000000001,
                  v162 = 0,
                  v163 = 0,
                  JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 108, 259)))
            {
              v131 = v159;
              v132 = v160;
              v133 = HIBYTE(v160);
              v135 = v161;
              v134 = BYTE4(v161);
              v136 = v162;
            }
            else
            {
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v99, v83, 30, v126, v127, v128, v129, v130);
              v158 = 0;
              v155 = 523;
              v157 = 31;
              v156 = 0x1E00000001;
              v154 = 0;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 108, 259))
              {
                v131 = v154;
                v132 = v155;
                v133 = HIBYTE(v155);
                v135 = v156;
                v134 = BYTE4(v156);
                v136 = v157;
              }
              else
              {
                v143 = v99[50];
                if (v143 + 4 > v99[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v99 + 14), v141, v142, v126, v127, v128, v129, v130);
                  v143 = v99[50];
                }
                v136 = 0;
                v131 = 0;
                *(_DWORD *)(*((_QWORD *)v99 + 7) + v143) = -1961032738;
                v99[50] += 4;
                v132 = 7;
                v135 = 1;
                v134 = 31;
                v133 = 2;
              }
            }
            v137 = a2[1];
            if (v132 == 7)
            {
              JSC::MacroAssemblerARM64::loadDouble(v137, (v134 - 1) | (unint64_t)(v131 << 32), (char)((v149 & 0x7F) - 32), v126, v127, v128, v129, v130);
            }
            else
            {
              HIDWORD(v139) = v135;
              LODWORD(v139) = v135 - 2;
              v138 = v139 >> 1;
              if (v138 > 7)
                v140 = 0;
              else
                v140 = qword_1991505B0[v138];
              JSC::MacroAssemblerARM64::loadDouble(v137, v140 | ((v136 << 8) - 256) & 0xFF00 | (v134 - 1), v131 | (v133 << 32), (char)((v149 & 0x7F) - 32), v127, v128, v129, v130);
            }
            goto LABEL_125;
          }
          if (HIBYTE(word_1ECF4C79E))
          {
            v99 = (_DWORD *)a2[1];
            v100 = *(unsigned int *)(v98 + 184);
          }
          else
          {
            v99 = (_DWORD *)a2[1];
            v100 = *(unsigned int *)(v98 + 184);
            if (!*(_BYTE *)(*(_QWORD *)(v98 + 8) + 212))
              goto LABEL_114;
          }
          v162 = 0;
          v163 = 0;
          v160 = 519;
          v161 = 0x1E00000001;
          v159 = v83;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 113, 260)
            || (v159 = v83 + v100,
                v160 = 519,
                v161 = 0x2000000001,
                v162 = 0,
                v163 = 0,
                JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 113, 260)))
          {
            v106 = v159;
            v107 = v160;
            v108 = HIBYTE(v160);
            v110 = v161;
            v109 = BYTE4(v161);
            v111 = v162;
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v99, v83, 30, v101, v102, v103, v104, v105);
            v158 = 0;
            v155 = 523;
            v157 = 31;
            v156 = 0x1E00000001;
            v154 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 113, 260))
            {
              v106 = v154;
              v107 = v155;
              v108 = HIBYTE(v155);
              v110 = v156;
              v109 = BYTE4(v156);
              v111 = v157;
            }
            else
            {
              v124 = v99[50];
              if (v124 + 4 > v99[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v99 + 14), v122, v123, v101, v102, v103, v104, v105);
                v124 = v99[50];
              }
              v111 = 0;
              v106 = 0;
              *(_DWORD *)(*((_QWORD *)v99 + 7) + v124) = -1961032738;
              v99[50] += 4;
              v107 = 7;
              v110 = 1;
              v109 = 31;
              v108 = 2;
            }
          }
          v112 = a2[1];
          if (v107 == 7)
          {
            JSC::MacroAssemblerARM64::loadVector(v112, (v109 - 1) | (unint64_t)(v106 << 32), (char)((v149 & 0x7F) - 32), v101, v102, v103, v104, v105);
          }
          else
          {
            HIDWORD(v119) = v110;
            LODWORD(v119) = v110 - 2;
            v118 = v119 >> 1;
            if (v118 > 7)
              v120 = 0;
            else
              v120 = qword_1991505B0[v118];
            JSC::MacroAssemblerARM64::loadVector(v112, v120 | ((v111 << 8) - 256) & 0xFF00 | (v109 - 1), v106 | (v108 << 32), (char)((v149 & 0x7F) - 32), v102, v103, v104, v105);
          }
        }
        else
        {
          v84 = (_DWORD *)a2[1];
          v85 = *(unsigned int *)(*a2 + 184);
          v162 = 0;
          v163 = 0;
          v160 = 519;
          v161 = 0x1E00000001;
          v159 = v83;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 90, 259)
            || (v159 = v83 + v85,
                v160 = 519,
                v161 = 0x2000000001,
                v162 = 0,
                v163 = 0,
                JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 90, 259)))
          {
            v91 = v159;
            v92 = v160;
            v93 = HIBYTE(v160);
            v95 = v161;
            v94 = BYTE4(v161);
            v96 = v162;
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v84, v83, 30, v86, v87, v88, v89, v90);
            v158 = 0;
            v155 = 523;
            v157 = 31;
            v156 = 0x1E00000001;
            v154 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 90, 259))
            {
              v91 = v154;
              v92 = v155;
              v93 = HIBYTE(v155);
              v95 = v156;
              v94 = BYTE4(v156);
              v96 = v157;
            }
            else
            {
              v121 = v84[50];
              if (v121 + 4 > v84[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v84 + 14), v116, v117, v86, v87, v88, v89, v90);
                v121 = v84[50];
              }
              v96 = 0;
              v91 = 0;
              *(_DWORD *)(*((_QWORD *)v84 + 7) + v121) = -1961032738;
              v84[50] += 4;
              v92 = 7;
              v95 = 1;
              v94 = 31;
              v93 = 2;
            }
          }
          v97 = a2[1];
          if (v92 == 7)
          {
            JSC::MacroAssemblerARM64::load64(v97, (v94 - 1) | (unint64_t)(v91 << 32), v82, v86, v87, v88, v89, v90);
          }
          else
          {
            HIDWORD(v114) = v95;
            LODWORD(v114) = v95 - 2;
            v113 = v114 >> 1;
            if (v113 > 7)
              v115 = 0;
            else
              v115 = qword_1991505B0[v113];
            JSC::MacroAssemblerARM64::load64(v97, v115 | ((v96 << 8) - 256) & 0xFF00 | (v94 - 1), v91 | (v93 << 32), v82, v87, v88, v89, v90);
          }
        }
      }
LABEL_125:
      v4 &= v4 - 1;
      if (!v4)
        return;
    }
    v153 = *(_DWORD *)(*(_QWORD *)a2[13] + 4 * v7);
    v152 = v7 | 0x80;
    v15 = -(int)v14;
    if ((int)v14 <= 0)
    {
      v16 = 4;
    }
    else
    {
      v15 = v14;
      v16 = 2;
    }
    v17 = v147;
    if ((int)v14 <= 0)
      v17 = v146;
    v18 = v15;
    v19 = *(_QWORD *)(*(_QWORD *)(*v17 + 16 * v15) + 16);
    v151 = v19;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(a2[1], (JSC::B3::Air::Tmp *)&v153, (JSC::Reg *)&v152, &v151);
    if ((int)v14 >= 1)
    {
      v20 = (_DWORD *)a2[1];
      v21 = *(unsigned int *)(*a2 + 184);
      v162 = 0;
      v163 = 0;
      v160 = 519;
      v161 = 0x1E00000001;
      v159 = v19;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 90, 259)
        || (v159 = v19 + v21,
            v160 = 519,
            v161 = 0x2000000001,
            v162 = 0,
            v163 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 90, 259)))
      {
        v27 = v159;
        v28 = v160;
        v29 = HIBYTE(v160);
        v31 = v161;
        v30 = BYTE4(v161);
        v32 = v162;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v20, v19, 30, v22, v23, v24, v25, v26);
        v158 = 0;
        v155 = 523;
        v157 = 31;
        v156 = 0x1E00000001;
        v154 = 0;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 90, 259))
        {
          v27 = v154;
          v28 = v155;
          v29 = HIBYTE(v155);
          v31 = v156;
          v30 = BYTE4(v156);
          v32 = v157;
        }
        else
        {
          v58 = v20[50];
          if (v58 + 4 > v20[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 14), v53, v54, v22, v23, v24, v25, v26);
            v58 = v20[50];
          }
          v32 = 0;
          v27 = 0;
          *(_DWORD *)(*((_QWORD *)v20 + 7) + v58) = -1961032738;
          v20[50] += 4;
          v28 = 7;
          v31 = 1;
          v30 = 31;
          v29 = 2;
        }
      }
      v33 = a2[1];
      if (v28 == 7)
      {
        JSC::MacroAssemblerARM64::store64(v33, v7, (v30 - 1) | (unint64_t)(v27 << 32), v22, v23, v24, v25, v26);
      }
      else
      {
        HIDWORD(v51) = v31;
        LODWORD(v51) = v31 - 2;
        v50 = v51 >> 1;
        if (v50 > 7)
          v52 = 0;
        else
          v52 = qword_1991505B0[v50];
        JSC::MacroAssemblerARM64::store64(v33, v7, v52 | ((v32 << 8) - 256) & 0xFF00 | (v30 - 1), v27 | (v29 << 32), v23, v24, v25, v26);
      }
LABEL_66:
      *(_DWORD *)(*(_QWORD *)a2[13] + 4 * v7) = 0;
      *(uint64_t *)((char *)a2 + ((v14 >> 28) & 8) + 80) |= 1 << v7;
      *(_BYTE *)(a2[v16] + 16 * v18 + 8) = -1;
      v13 = v150;
      v12 = v149;
      v6 = a1;
      goto LABEL_67;
    }
    v34 = *a2;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (HIBYTE(word_1ECF4C79E))
      {
        v35 = (_DWORD *)a2[1];
        v36 = *(unsigned int *)(v34 + 184);
LABEL_31:
        v162 = 0;
        v163 = 0;
        v160 = 519;
        v161 = 0x1E00000001;
        v159 = v19;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 113, 260)
          || (v159 = v19 + v36,
              v160 = 519,
              v161 = 0x2000000001,
              v162 = 0,
              v163 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 113, 260)))
        {
          v42 = v159;
          v43 = v160;
          v44 = HIBYTE(v160);
          v46 = v161;
          v45 = BYTE4(v161);
          v47 = v162;
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v35, v19, 30, v37, v38, v39, v40, v41);
          v158 = 0;
          v155 = 523;
          v157 = 31;
          v156 = 0x1E00000001;
          v154 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 113, 260))
          {
            v42 = v154;
            v43 = v155;
            v44 = HIBYTE(v155);
            v46 = v156;
            v45 = BYTE4(v156);
            v47 = v157;
          }
          else
          {
            v61 = v35[50];
            if (v61 + 4 > v35[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v35 + 14), v59, v60, v37, v38, v39, v40, v41);
              v61 = v35[50];
              v12 = v152;
            }
            v47 = 0;
            v42 = 0;
            *(_DWORD *)(*((_QWORD *)v35 + 7) + v61) = -1961032738;
            v35[50] += 4;
            v43 = 7;
            v46 = 1;
            v45 = 31;
            v44 = 2;
          }
        }
        v48 = a2[1];
        v49 = (v12 & 0x7F) - 32;
        if (v43 == 7)
        {
          JSC::MacroAssemblerARM64::storeVector(v48, v49, (v45 - 1) | (unint64_t)(v42 << 32), v37, v38, v39, v40, v41);
        }
        else
        {
          HIDWORD(v56) = v46;
          LODWORD(v56) = v46 - 2;
          v55 = v56 >> 1;
          if (v55 > 7)
            v57 = 0;
          else
            v57 = qword_1991505B0[v55];
          JSC::MacroAssemblerARM64::storeVector(v48, v49, v57 | ((v47 << 8) - 256) & 0xFF00 | (v45 - 1), v42 | (v44 << 32), v38, v39, v40, v41);
        }
        goto LABEL_66;
      }
      v35 = (_DWORD *)a2[1];
      v36 = *(unsigned int *)(v34 + 184);
      if (*(_BYTE *)(*(_QWORD *)(v34 + 8) + 212))
        goto LABEL_31;
    }
    else
    {
      v35 = (_DWORD *)a2[1];
      v36 = *(unsigned int *)(v34 + 184);
    }
    v162 = 0;
    v163 = 0;
    v160 = 519;
    v161 = 0x1E00000001;
    v159 = v19;
    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 108, 259)
      || (v159 = v19 + v36,
          v160 = 519,
          v161 = 0x2000000001,
          v162 = 0,
          v163 = 0,
          JSC::B3::Air::Arg::isValidForm((unsigned int *)&v159, 108, 259)))
    {
      v67 = v159;
      v68 = v160;
      v69 = HIBYTE(v160);
      v71 = v161;
      v70 = BYTE4(v161);
      v72 = v162;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v35, v19, 30, v62, v63, v64, v65, v66);
      v158 = 0;
      v155 = 523;
      v157 = 31;
      v156 = 0x1E00000001;
      v154 = 0;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v154, 108, 259))
      {
        v67 = v154;
        v68 = v155;
        v69 = HIBYTE(v155);
        v71 = v156;
        v70 = BYTE4(v156);
        v72 = v157;
      }
      else
      {
        v125 = v35[50];
        if (v125 + 4 > v35[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v35 + 14), v78, v79, v62, v63, v64, v65, v66);
          v125 = v35[50];
          v12 = v152;
        }
        v72 = 0;
        v67 = 0;
        *(_DWORD *)(*((_QWORD *)v35 + 7) + v125) = -1961032738;
        v35[50] += 4;
        v68 = 7;
        v71 = 1;
        v70 = 31;
        v69 = 2;
      }
    }
    v73 = a2[1];
    v74 = (v12 & 0x7F) - 32;
    if (v68 == 7)
    {
      JSC::MacroAssemblerARM64::storeDouble(v73, v74, (v70 - 1) | (unint64_t)(v67 << 32), v62, v63, v64, v65, v66);
    }
    else
    {
      HIDWORD(v76) = v71;
      LODWORD(v76) = v71 - 2;
      v75 = v76 >> 1;
      if (v75 > 7)
        v77 = 0;
      else
        v77 = qword_1991505B0[v75];
      JSC::MacroAssemblerARM64::storeDouble(v73, v74, v77 | ((v72 << 8) - 256) & 0xFF00 | (v70 - 1), v67 | (v69 << 32), v63, v64, v65, v66);
    }
    goto LABEL_66;
  }
}

void JSC::B3::Air::allocateRegistersAndStackByLinearScan(JSC::B3::Air *this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Air *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int *v85;
  unsigned int v86;
  __n128 v87;
  JSC::B3::Air *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF **v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  WTF **v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  WTF **v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  JSC::B3::Air::Kind *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned __int8 *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::B3::Air *v139;
  uint64_t v140;
  uint64_t i;
  unsigned int v142;
  WTF **v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  WTF **v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  WTF **v158;
  WTF *v159;
  unsigned int v160;
  JSC::B3::Air *v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v164;
  char *v165;
  unsigned int v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  WTF **v174;
  WTF *v175;
  unsigned int v176;
  JSC::B3::Air *v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  char *v181;
  unsigned int v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  JSC::B3::Air *v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t j;
  unsigned int v191;
  WTF **v192;
  WTF *v193;
  _DWORD *v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  WTF **v198;
  WTF *v199;
  _DWORD *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  JSC::B3::Air *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int *v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::B3::Air *v228;
  uint64_t v229;
  uint64_t k;
  unsigned int v231;
  WTF **v232;
  uint64_t v233;
  int v234;
  unsigned int v235;
  WTF **v236;
  JSC::B3::Air *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  JSC::B3::Air::Arg *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  int v251;
  BOOL v252;
  WTF **v253;
  char v254;
  int v255;
  int *v256;
  int v257;
  int v258;
  BOOL v259;
  WTF **v260;
  char v261;
  int v262;
  int v263;
  int v264;
  BOOL v265;
  WTF **v266;
  JSC::B3::Air::Code *v267;
  JSC::B3::Air *v268;
  JSC::B3::Air::Code *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF *v283;
  unsigned int v284;
  uint64_t v285;
  WTF *v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  JSC::B3::Air *v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t m;
  unsigned int v294;
  WTF **v295;
  _DWORD *v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  WTF **v300;
  _DWORD *v301;
  unint64_t v302;
  uint64_t v303;
  WTF *v304;
  WTF *v305;
  unsigned int v306;
  WTF **v307;
  WTF *v308;
  unsigned int v309;
  char *v310;
  WTF **v311;
  WTF ***v312;
  WTF **v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  WTF *v317;
  uint64_t v318;
  int v319;
  unsigned int v320;
  BOOL v321;
  WTF **v322;
  WTF *v323;
  unint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  char *v331;
  unsigned int *v332;
  WTF *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t v338;
  WTF *v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  WTF *v343;
  WTF *v344;
  int v345;
  uint64_t v346;
  _DWORD *v347;
  int *v348;
  uint64_t v349;
  int v350;
  int *v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  int v362;
  WTF *v363;
  WTF *v364;
  WTF *v365;
  WTF *v366;
  WTF *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  WTF *v375;
  WTF *v376;
  WTF *v377;
  WTF *v378;
  WTF *v379;
  JSC::B3::Air *v380;
  WTF *v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  JSC::B3::Air::Code *v385;
  JSC::B3::Air *v386;
  JSC::B3::Air *v387;
  uint64_t v388;
  unsigned int v389;
  int v390;
  WTF::BitVector *v391;
  JSC::B3::Air *v392;
  WTF *v393[2];
  WTF *v394[2];
  __int128 v395;
  uint64_t v396;
  WTF *v397;
  int v398;
  unsigned int v399;
  WTF *v400;
  unsigned int v401;
  unsigned int v402;
  WTF *v403;
  unsigned int v404;
  unsigned int v405;
  WTF *v406;
  unsigned int v407;
  unsigned int v408;
  WTF *v409[2];
  WTF *v410[2];
  __int128 v411;
  WTF *v412[2];
  __int128 v413;
  uint64_t v414;
  char v415;
  _QWORD v416[3];
  uint64_t v417;
  WTF *v418;
  WTF **v419;
  WTF ***v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  char v424;
  uint64_t (*v425)(uint64_t, uint64_t, unsigned int);
  WTF ***v426;
  JSC::B3::Air **v427;
  unint64_t *v428;
  JSC::B3::Air **v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  WTF **v434;
  _QWORD v435[4];
  double v436;
  JSC::B3::Air ***v437;
  WTF *v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  uint64_t v442;
  char v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD v446[3];

  if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*((_QWORD *)this + 1) + 212)))
  {
    __break(0xC471u);
    JUMPOUT(0x198030060);
  }
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v416, (WTF **)this, (uint64_t)"allocateRegistersAndStackByLinearScan", 38, a5, a6, a7, a8);
  if (BYTE4(qword_1ECF4C688))
    WTF::dataLog<char [25],JSC::B3::Air::Code>(this);
  v392 = this;
  *(_OWORD *)v393 = 0u;
  *(_OWORD *)v394 = 0u;
  v395 = 0u;
  v16 = *((unsigned int *)this + 27);
  v397 = 0;
  v398 = 0;
  v396 = 0;
  v399 = v16;
  if ((_DWORD)v16)
  {
    if (v16 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198030178);
    }
    v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16));
    v398 = v16;
    v397 = v17;
    if (v399)
      bzero(v17, 8 * v399);
  }
  v18 = *((_DWORD *)this + 44);
  v400 = 0;
  v401 = 0;
  v19 = (v18 + 33);
  v402 = v19;
  if ((_DWORD)v19)
  {
    if (v19 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198030180);
    }
    v20 = 40 * v19;
    v21 = WTF::fastMalloc((WTF *)(40 * v19));
    v401 = (v20 & 0xFFFFFFF8) / 0x28;
    v400 = (WTF *)v21;
    if (v402)
    {
      v22 = v21 + 40 * v402;
      do
      {
        *(_OWORD *)v21 = 0uLL;
        *(_OWORD *)(v21 + 16) = 0uLL;
        *(_BYTE *)(v21 + 32) = 127;
        *(_DWORD *)(v21 + 33) = 0;
        *(_DWORD *)(v21 + 36) = 0;
        v21 += 40;
      }
      while (v21 != v22);
    }
  }
  v23 = *((_DWORD *)this + 45);
  v403 = 0;
  v404 = 0;
  v24 = (v23 + 33);
  v405 = v24;
  if ((_DWORD)v24)
  {
    if (v24 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198030188);
    }
    v25 = 40 * v24;
    v26 = WTF::fastMalloc((WTF *)(40 * v24));
    v404 = (v25 & 0xFFFFFFF8) / 0x28;
    v403 = (WTF *)v26;
    if (v405)
    {
      v27 = v26 + 40 * v405;
      do
      {
        *(_OWORD *)v26 = 0uLL;
        *(_OWORD *)(v26 + 16) = 0uLL;
        *(_BYTE *)(v26 + 32) = 127;
        *(_DWORD *)(v26 + 33) = 0;
        *(_DWORD *)(v26 + 36) = 0;
        v26 += 40;
      }
      while (v26 != v27);
    }
  }
  v28 = *((_DWORD *)this + 27);
  v438 = (WTF *)&v440;
  v439 = 8;
  v406 = 0;
  v407 = 0;
  v408 = v28;
  v386 = this;
  if (v28)
  {
    if (v28 >= 0x381C0F)
    {
      __break(0xC471u);
      JUMPOUT(0x198030190);
    }
    v29 = 1168 * v28;
    v30 = (WTF *)WTF::fastMalloc((WTF *)(1168 * v28));
    v407 = v29 / 0x490;
    v406 = v30;
    if (v408)
    {
      v31 = v30;
      v32 = (WTF *)((char *)v30 + 1168 * v408);
      do
      {
        v33 = HIDWORD(v439);
        v34 = (uint64_t)v31 + 16;
        *(_QWORD *)v31 = (char *)v31 + 16;
        *((_DWORD *)v31 + 2) = 8;
        *((_DWORD *)v31 + 3) = v33;
        if (v33 >= 9)
        {
          if (v33 >= 0x1C71C72)
          {
            __break(0xC471u);
            JUMPOUT(0x198030160);
          }
          v35 = 144 * v33;
          v34 = WTF::fastMalloc((WTF *)(144 * v33));
          *((_DWORD *)v31 + 2) = (v35 & 0xFFFFFFF0) / 0x90;
          *(_QWORD *)v31 = v34;
        }
        if (HIDWORD(v439))
        {
          v36 = v438;
          v37 = (WTF *)((char *)v438 + 144 * HIDWORD(v439));
          do
          {
            *(_QWORD *)v34 = *(_QWORD *)v36;
            v38 = *((unsigned int *)v36 + 5);
            v39 = (_OWORD *)(v34 + 24);
            *(_QWORD *)(v34 + 8) = v34 + 24;
            *(_DWORD *)(v34 + 16) = 3;
            *(_DWORD *)(v34 + 20) = v38;
            if (v38 >= 4)
            {
              if (v38 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x198030138);
              }
              v39 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v38));
              *(_DWORD *)(v34 + 16) = v38;
              *(_QWORD *)(v34 + 8) = v39;
            }
            v40 = *((unsigned int *)v36 + 5);
            if ((_DWORD)v40)
            {
              v41 = (__int128 *)*((_QWORD *)v36 + 1);
              v42 = 32 * v40;
              do
              {
                v43 = *v41;
                v44 = v41[1];
                v41 += 2;
                *v39 = v43;
                v39[1] = v44;
                v39 += 2;
                v42 -= 32;
              }
              while (v42);
            }
            v45 = *((_QWORD *)v36 + 15);
            *(_DWORD *)(v34 + 127) = *(_DWORD *)((char *)v36 + 127);
            *(_QWORD *)(v34 + 120) = v45;
            *(_DWORD *)(v34 + 136) = *((_DWORD *)v36 + 34);
            v34 += 144;
            v36 = (WTF *)((char *)v36 + 144);
          }
          while (v36 != v37);
        }
        v31 = (WTF *)((char *)v31 + 1168);
      }
      while (v31 != v32);
    }
    v46 = v438;
    if (HIDWORD(v439))
    {
      v47 = 144 * HIDWORD(v439);
      v48 = (char *)v438 + 24;
      do
      {
        v49 = *((_QWORD *)v48 - 2);
        v50 = v48 == (char *)v49 || v49 == 0;
        if (!v50)
        {
          *((_QWORD *)v48 - 2) = 0;
          *((_DWORD *)v48 - 2) = 0;
          WTF::fastFree(v49, v9, v10, v11, v12, v13, v14, v15);
        }
        v48 += 144;
        v47 -= 144;
      }
      while (v47);
      v46 = v438;
    }
    if (&v440 != (uint64_t *)v46 && v46 != 0)
    {
      v438 = 0;
      LODWORD(v439) = 0;
      WTF::fastFree((unint64_t)v46, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  *(_OWORD *)v409 = 0u;
  *(_OWORD *)v410 = 0u;
  v411 = 0u;
  *(_OWORD *)v412 = 0u;
  v413 = 0u;
  v414 = 0x8000000000000000;
  v415 = 0;
  JSC::B3::Air::padInterference(v392, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v58 = (WTF *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)v393, (const void **)v392 + 2, v52, v53, v54, v55, v56, v57);
  v66 = HIDWORD(v393[1]);
  if (HIDWORD(v393[1]))
  {
    v67 = v393[0];
    v68 = v395;
    do
    {
      if ((*(_BYTE *)v67 & 0x40) != 0)
        goto LABEL_574;
      v68 |= 1 << *(_BYTE *)v67;
      *(_QWORD *)&v395 = v68;
      v67 = (WTF *)((char *)v67 + 1);
      --v66;
    }
    while (v66);
  }
  v69 = v396;
  if (v396)
  {
    v70 = 0;
    do
    {
      v70 |= v69 & -v69;
      v69 &= v69 - 1;
    }
    while (v69);
  }
  else
  {
    v70 = 0;
  }
  v71 = v395;
  if ((_QWORD)v395)
  {
    v72 = 0;
    do
    {
      v72 |= v71 & -v71;
      v71 &= v71 - 1;
    }
    while (v71);
  }
  else
  {
    v72 = 0;
  }
  v396 = v72 | v70;
  v58 = (WTF *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)v394, (const void **)v392 + 4, v60, v61, v62, v63, v64, v65);
  v66 = HIDWORD(v394[1]);
  if (HIDWORD(v394[1]))
  {
    v73 = v394[0];
    v74 = *((_QWORD *)&v395 + 1);
    do
    {
      if ((*(_BYTE *)v73 & 0x40) != 0)
        goto LABEL_574;
      v74 |= 1 << *(_BYTE *)v73;
      *((_QWORD *)&v395 + 1) = v74;
      v73 = (WTF *)((char *)v73 + 1);
      --v66;
    }
    while (v66);
  }
  v75 = v396;
  if (v396)
  {
    v76 = 0;
    do
    {
      v76 |= v75 & -v75;
      v75 &= v75 - 1;
    }
    while (v75);
  }
  else
  {
    v76 = 0;
  }
  v77 = *((_QWORD *)&v395 + 1);
  if (*((_QWORD *)&v395 + 1))
  {
    v78 = 0;
    do
    {
      v78 |= v77 & -v77;
      v77 &= v77 - 1;
    }
    while (v77);
  }
  else
  {
    v78 = 0;
  }
  v396 = v78 | v76;
  v79 = v392;
  v80 = *((unsigned int *)v392 + 27);
  if ((_DWORD)v80)
  {
    v81 = 0;
    v82 = *((_QWORD *)v392 + 12);
    while (!*(_QWORD *)(v82 + 8 * v81))
    {
      if (v80 == ++v81)
        goto LABEL_94;
    }
    if ((_DWORD)v80 != (_DWORD)v81)
    {
      v83 = 0;
      v84 = v397;
      v81 = v81;
      do
      {
        if (v80 <= v81)
        {
          __break(0xC471u);
          JUMPOUT(0x198030158);
        }
        v85 = *(unsigned int **)(v82 + 8 * v81);
        *((_QWORD *)v84 + *v85) = v83;
        v86 = v85[5];
        if (v80 > ++v81)
        {
          while (!*(_QWORD *)(v82 + 8 * v81))
          {
            if (v80 == ++v81)
              goto LABEL_94;
          }
          v81 = v81;
        }
        v83 += 2 * v86;
      }
      while (v80 != v81);
    }
  }
LABEL_94:
  v435[0] = "Air";
  v435[1] = 4;
  v435[2] = "LinearScan::buildIntervals";
  v435[3] = 27;
  v436 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v382 = mach_absolute_time();
    v384 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v384 != -1)
    {
      v438 = (WTF *)&v425;
      v419 = &v438;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v419, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v383) = dword_1ECF4400C;
    v436 = (double)(v382 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v383 * 1000000000.0);
    v79 = v392;
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::Liveness((uint64_t)&v438, (uint64_t)v79);
  v88 = v392;
  v388 = *((unsigned int *)v392 + 27);
  if ((_DWORD)v388)
  {
    v89 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v392 + 12) + 8 * v89))
    {
      if (v388 == ++v89)
        goto LABEL_174;
    }
    if ((_DWORD)v388 != (_DWORD)v89)
    {
      LODWORD(v90) = *((_DWORD *)v392 + 27);
      LODWORD(v91) = v89;
      v387 = v392;
      do
      {
        v434 = 0;
        if (v90 <= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x198030140);
        }
        v390 = v91;
        v92 = *(WTF ***)(*((_QWORD *)v88 + 12) + 8 * v91);
        v433 = 0;
        v434 = v92;
        v93 = *((_QWORD *)v397 + *(unsigned int *)v92);
        v432 = 0;
        v433 = v93;
        v94 = *(unsigned int *)v92;
        v432 = *((_QWORD *)v397 + v94) + (2 * *((_DWORD *)v92 + 5));
        if (BYTE4(qword_1ECF4C688))
        {
          v419 = v92;
          WTF::dataLog<char [10],WTF::PointerDump<JSC::B3::Air::BasicBlock>,char [2]>((uint64_t *)&v419);
          WTF::dataLog<char [17],unsigned long,char [2]>("  indexOfHead = ", &v433, "\n");
          WTF::dataLog<char [17],unsigned long,char [2]>("  idnexOfTail = ", &v432, "\n");
          v92 = v434;
          v94 = *(unsigned int *)v434;
        }
        v95 = v444 + 32 * v94;
        v96 = *(unsigned int *)(v95 + 12);
        if ((_DWORD)v96)
        {
          v97 = *(int **)v95;
          v98 = *((_DWORD *)v438 + 44) + 33;
          v99 = 4 * v96;
          do
          {
            if (v98 <= *v97)
              v100 = v98 - *v97;
            else
              v100 = *v97;
            if (v100 <= 0xFFFFFFDF && (v100 - 1) >= 0x20)
            {
              v101 = v433;
              v102 = v433 + 1;
              v103 = v100 <= 0;
              if (v100 <= 0)
                v100 = -v100;
              v104 = &v400;
              if (v103)
                v104 = &v403;
              v105 = (unint64_t *)((char *)*v104 + 40 * v100);
              v106 = v105[1];
              if (*v105 != v106)
              {
                if (v433 >= *v105)
                  v101 = *v105;
                if (v106 > v102)
                  v102 = v105[1];
                if (v101 == v102)
                {
                  v101 = 0;
                  v102 = 0;
                }
              }
              *v105 = v101;
              v105[1] = v102;
            }
            ++v97;
            v99 -= 4;
          }
          while (v99);
        }
        v107 = v445 + 32 * v94;
        v108 = *(unsigned int *)(v107 + 12);
        if ((_DWORD)v108)
        {
          v109 = *(int **)v107;
          v110 = *((_DWORD *)v438 + 44) + 33;
          v111 = 4 * v108;
          do
          {
            if (v110 <= *v109)
              v112 = v110 - *v109;
            else
              v112 = *v109;
            if (v112 <= 0xFFFFFFDF && (v112 - 1) >= 0x20)
            {
              v113 = v432;
              v114 = v432 + 1;
              v115 = v112 <= 0;
              if (v112 <= 0)
                v112 = -v112;
              v116 = &v400;
              if (v115)
                v116 = &v403;
              v117 = (unint64_t *)((char *)*v116 + 40 * v112);
              v118 = v117[1];
              if (*v117 != v118)
              {
                if (v432 >= *v117)
                  v113 = *v117;
                if (v118 > v114)
                  v114 = v117[1];
                if (v113 == v114)
                {
                  v113 = 0;
                  v114 = 0;
                }
              }
              *v117 = v113;
              v117[1] = v114;
            }
            ++v109;
            v111 -= 4;
          }
          while (v111);
        }
        if (*((_DWORD *)v92 + 5))
        {
          v119 = 0;
          do
          {
            v120 = (_QWORD **)((char *)v92[1] + 128 * v119);
            v431 = v433 + (2 * v119);
            v429 = &v392;
            v430 = &v431;
            v437 = &v429;
            v121 = (JSC::B3::Air::Kind *)(v120 + 15);
            if ((*((__int16 *)v120 + 60) - 446) > 5)
            {
              v122 = *((unsigned int *)v120 + 3);
              if ((_DWORD)v122)
              {
                v123 = 0;
                v124 = 0;
                v125 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                     + 21 * *((__int16 *)v120 + 60)
                     + ((unint64_t)((v122 - 1) * v122) >> 1);
                v126 = 32 * v122;
                do
                {
                  if (v124 >= *((unsigned int *)v120 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198030120);
                  }
                  v127 = *v125;
                  if ((v127 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980300CCLL);
                  }
                  ++v124;
                  ++v125;
                  v123 += 32;
                }
                while (v126 != v123);
              }
            }
            else
            {
              v420 = &v419;
              v421 = (uint64_t)&v437;
              v446[1] = &v419;
              if (*(_WORD *)v121 == 448)
              {
                v426 = &v419;
                if (!*((_DWORD *)v120 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198030128);
                }
                if (!*((_DWORD *)v120 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198030130);
                }
                (*(void (**)(_QWORD, _QWORD **, uint64_t (**)(uint64_t, uint64_t, unsigned int)))(*(_QWORD *)**v120 + 16))(**v120, v120, &v425);
              }
              else
              {
                switch(*(_WORD *)v121)
                {
                  case 0x1BE:
                    break;
                  case 0x1BF:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v120, (uint64_t)v446);
                    break;
                  case 0x1C1:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v120, (uint64_t)v446);
                    break;
                  case 0x1C2:
                    v425 = (uint64_t (*)(uint64_t, uint64_t, unsigned int))v446;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v120, (uint64_t)&v425);
                    break;
                  case 0x1C3:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v120, (uint64_t)v446);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v121, "\n");
                    __break(0xC471u);
                    JUMPOUT(0x198030100);
                }
              }
            }
            ++v119;
            v92 = v434;
          }
          while (v119 < *((unsigned int *)v434 + 5));
        }
        JSC::B3::Air::RegLiveness::LocalCalcForUnifiedTmpLiveness::LocalCalcForUnifiedTmpLiveness(&v419, &v438, (unsigned int *)v92);
        v425 = (uint64_t (*)(uint64_t, uint64_t, unsigned int))&v419;
        v426 = &v434;
        v427 = &v392;
        v428 = &v433;
        v128 = *((_DWORD *)v434 + 5);
        if (v128)
        {
          v129 = v128 - 1;
          do
          {
            JSC::B3::Air::RegLiveness::LocalCalcForUnifiedTmpLiveness::execute((uint64_t)&v419, v129);
          }
          while (v129 != -1);
        }
        v91 = (v390 + 1);
        v88 = v387;
        v90 = *((unsigned int *)v387 + 27);
        if (v90 > v91)
        {
          while (!*(_QWORD *)(*((_QWORD *)v387 + 12) + 8 * v91))
          {
            if (v90 == ++v91)
            {
              LODWORD(v91) = *((_DWORD *)v387 + 27);
              break;
            }
          }
        }
      }
      while ((_DWORD)v388 != (_DWORD)v91);
    }
  }
LABEL_174:
  v130 = 126 - 2 * __clz(HIDWORD(v409[1]));
  if (HIDWORD(v409[1]))
    v131 = v130;
  else
    v131 = 0;
  if (BYTE4(qword_1ECF4C688))
  {
    WTF::dataLog<char [16]>("Intervals:\n");
    v139 = v392;
    v140 = *((unsigned int *)v392 + 44);
    if ((_DWORD)v140)
    {
      for (i = 0; i != v140; ++i)
      {
        v142 = i + 33;
        LODWORD(v419) = i + 33;
        if ((int)i + 33 <= 0)
          v142 = -(i + 33);
        v143 = &v400;
        if ((int)i + 33 <= 0)
          v143 = &v403;
      }
    }
    v144 = *((unsigned int *)v139 + 45);
    if ((_DWORD)v144)
    {
      v145 = -33;
      do
      {
        LODWORD(v419) = v145;
        v146 = -v145;
        if (v145 > 0)
          v146 = v145;
        v147 = &v400;
        if (v145 <= 0)
          v147 = &v403;
        --v145;
        --v144;
      }
      while (v144);
    }
    v419 = v409;
    v420 = (WTF ***)", ";
    v421 = 3;
    v422 = &str_106;
    v423 = 1;
    v424 = 0;
  }
  WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::~Liveness((uint64_t)&v438, v132, v133, v134, v135, v136, v137, v138);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v435);
  if (!BYTE5(qword_1ECF4C688))
    goto LABEL_233;
  v391 = v392;
  v155 = *((unsigned int *)v392 + 44);
  if ((_DWORD)v155)
  {
    v156 = 0;
    while (1)
    {
      v157 = v156 + 33;
      if ((int)v156 + 33 <= 0)
        v157 = -(v156 + 33);
      v158 = &v400;
      if ((int)v156 + 33 <= 0)
        v158 = &v403;
      v159 = *v158;
      v160 = v157;
      if (*((_BYTE *)*v158 + 40 * v157 + 33))
        break;
      v161 = v392;
      v162 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v162 = 8;
      *(_BYTE *)(v162 + 4) = 1;
      *(_DWORD *)(v162 + 8) = -1;
      *(_QWORD *)(v162 + 16) = 0;
      v438 = (WTF *)v162;
      v163 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add((uint64_t)v161 + 64, (uint64_t *)&v438);
      v164 = v438;
      v438 = 0;
      if (v164)
        WTF::fastFree((unint64_t)v164, v148, v149, v150, v151, v152, v153, v154);
      if (*((_BYTE *)v161 + 196))
      {
        v166 = *(_DWORD *)v163;
        v167 = 8;
        if (*(_DWORD *)v163 <= 4u)
          v167 = 4;
        v168 = v166 >= 2;
        v50 = v166 == 2;
        v169 = 2;
        if (!v50)
          v169 = v167;
        if (!v168)
          v169 = 1;
        v170 = (v169 + 0x100000007 + *((unsigned int *)v161 + 46)) & -v169;
        *(_QWORD *)(v163 + 16) = -(uint64_t)v170;
        *((_DWORD *)v161 + 46) = (v170 + 15) & 0xFFFFFFF0;
      }
      v165 = (char *)v159 + 40 * v160;
      *((_QWORD *)v165 + 2) = v163;
      v165[32] = -1;
      v415 = 1;
      if (v155 == ++v156)
        goto LABEL_213;
    }
LABEL_551:
    __break(0xC471u);
    JUMPOUT(0x19802FFA0);
  }
LABEL_213:
  v171 = *((unsigned int *)v391 + 45);
  if ((_DWORD)v171)
  {
    v172 = -33;
    while (1)
    {
      v173 = -v172;
      if (v172 > 0)
        v173 = v172;
      v174 = &v400;
      if (v172 <= 0)
        v174 = &v403;
      v175 = *v174;
      v176 = v173;
      if (*((_BYTE *)*v174 + 40 * v173 + 33))
        goto LABEL_551;
      v177 = v392;
      v178 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v178 = 8;
      *(_BYTE *)(v178 + 4) = 1;
      *(_DWORD *)(v178 + 8) = -1;
      *(_QWORD *)(v178 + 16) = 0;
      v438 = (WTF *)v178;
      v179 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add((uint64_t)v177 + 64, (uint64_t *)&v438);
      v180 = v438;
      v438 = 0;
      if (v180)
        WTF::fastFree((unint64_t)v180, v148, v149, v150, v151, v152, v153, v154);
      if (*((_BYTE *)v177 + 196))
      {
        v182 = *(_DWORD *)v179;
        v183 = 8;
        if (*(_DWORD *)v179 <= 4u)
          v183 = 4;
        v184 = v182 >= 2;
        v50 = v182 == 2;
        v185 = 2;
        if (!v50)
          v185 = v183;
        if (!v184)
          v185 = 1;
        v186 = (v185 + 0x100000007 + *((unsigned int *)v177 + 46)) & -v185;
        *(_QWORD *)(v179 + 16) = -(uint64_t)v186;
        *((_DWORD *)v177 + 46) = (v186 + 15) & 0xFFFFFFF0;
      }
      v181 = (char *)v175 + 40 * v176;
      *((_QWORD *)v181 + 2) = v179;
      v181[32] = -1;
      v415 = 1;
      --v172;
      if (!--v171)
        goto LABEL_232;
    }
  }
  do
  {
LABEL_232:
LABEL_233:
    HIDWORD(v410[1]) = 0;
    v187 = v392;
    v188 = *((unsigned int *)v392 + 44);
    if ((_DWORD)v188)
    {
      v189 = 0;
      for (j = 0; j != v188; ++j)
      {
        LODWORD(v438) = j + 33;
        if ((int)j + 33 <= 0)
          v191 = -(j + 33);
        else
          v191 = j + 33;
        v192 = &v400;
        if ((int)j + 33 <= 0)
          v192 = &v403;
        v193 = *v192;
        if (!*((_QWORD *)v193 + 5 * v191 + 2))
        {
          *((_BYTE *)v193 + 40 * v191 + 32) = -1;
          if (HIDWORD(v410[1]) == LODWORD(v410[1]))
          {
            v194 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v410, HIDWORD(v410[1]) + 1, (unint64_t)&v438);
            *((_DWORD *)v410[0] + HIDWORD(v410[1])) = *v194;
          }
          else
          {
            *((_DWORD *)v410[0] + HIDWORD(v410[1])) = j + 33;
          }
          v189 = ++HIDWORD(v410[1]);
        }
      }
    }
    else
    {
      v189 = 0;
    }
    v195 = *((unsigned int *)v187 + 45);
    if ((_DWORD)v195)
    {
      v196 = -33;
      do
      {
        LODWORD(v438) = v196;
        if (v196 <= 0)
          v197 = -v196;
        else
          v197 = v196;
        v198 = &v400;
        if (v196 <= 0)
          v198 = &v403;
        v199 = *v198;
        if (!*((_QWORD *)v199 + 5 * v197 + 2))
        {
          *((_BYTE *)v199 + 40 * v197 + 32) = -1;
          if (HIDWORD(v410[1]) == LODWORD(v410[1]))
          {
            v200 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v410, HIDWORD(v410[1]) + 1, (unint64_t)&v438);
            *((_DWORD *)v410[0] + HIDWORD(v410[1])) = *v200;
          }
          else
          {
            *((_DWORD *)v410[0] + HIDWORD(v410[1])) = v196;
          }
          v189 = ++HIDWORD(v410[1]);
        }
        --v196;
        --v195;
      }
      while (v195);
    }
    v438 = (WTF *)&v392;
    v201 = 126 - 2 * __clz(v189);
    if (v189)
      v202 = v201;
    else
      v202 = 0;
    if (BYTE4(qword_1ECF4C688))
    {
      v438 = (WTF *)v410;
      v439 = (uint64_t)", ";
      v440 = 3;
      v441 = &str_106;
      v442 = 1;
      v443 = 0;
      WTF::dataLog<char [7],WTF::ListDump<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>((uint64_t)&v438);
    }
    v415 = 0;
  }
  while (v415);
  v215 = v392;
  v216 = *((unsigned int *)v392 + 27);
  if ((_DWORD)v216)
  {
    v217 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v392 + 12) + 8 * v217))
    {
      if (v216 == ++v217)
        goto LABEL_281;
    }
    if ((_DWORD)v216 != (_DWORD)v217)
    {
      v218 = v217;
      v219 = *((unsigned int *)v392 + 27);
      do
      {
        if (v219 <= v218)
        {
          __break(0xC471u);
          JUMPOUT(0x198030148);
        }
        v220 = *(unsigned int **)(*((_QWORD *)v215 + 12) + 8 * v218);
        v221 = (unsigned int *)((char *)v406 + 1168 * *v220);
        _ZN3WTF10bubbleSortIPN3JSC2B33Air14PhaseInsertionEZNS_10bubbleSortIS5_EEvT_S7_EUlRS7_RT0_E_EEvS7_S7_RKS9_(*(_QWORD *)v221, (char *)(*(_QWORD *)v221 + 144 * v221[3]), (uint64_t)&v438, v150, v151, v152, v153, v154);
        WTF::executeInsertions<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v220 + 2), v221, v222, v223, v224, v225, v226, v227);
        ++v218;
        v219 = *((unsigned int *)v215 + 27);
        if (v219 > v218)
        {
          while (!*(_QWORD *)(*((_QWORD *)v215 + 12) + 8 * v218))
          {
            if (v219 == ++v218)
            {
              v218 = *((unsigned int *)v215 + 27);
              goto LABEL_280;
            }
          }
          v218 = v218;
        }
LABEL_280:
        ;
      }
      while (v216 != v218);
    }
  }
LABEL_281:
  if (BYTE4(qword_1ECF4C688))
  {
    WTF::dataLog<char [49]>();
    v228 = v392;
    v229 = *((unsigned int *)v392 + 44);
    if ((_DWORD)v229)
    {
      for (k = 0; k != v229; ++k)
      {
        v231 = k + 33;
        LODWORD(v438) = k + 33;
        if ((int)k + 33 <= 0)
          v231 = -(k + 33);
        v232 = &v400;
        if ((int)k + 33 <= 0)
          v232 = &v403;
      }
    }
    v233 = *((unsigned int *)v228 + 45);
    if ((_DWORD)v233)
    {
      v234 = -33;
      do
      {
        LODWORD(v438) = v234;
        v235 = -v234;
        if (v234 > 0)
          v235 = v234;
        v236 = &v400;
        if (v234 <= 0)
          v236 = &v403;
        --v234;
        --v233;
      }
      while (v233);
    }
    WTF::dataLog<char [16]>("IR:\n");
    WTF::dataLog<JSC::B3::Air::Code>(v392);
  }
  v237 = v392;
  v238 = *((unsigned int *)v392 + 27);
  if ((_DWORD)v238)
  {
    v239 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v392 + 12) + 8 * v239))
    {
      if (v238 == ++v239)
        goto LABEL_358;
    }
    if ((_DWORD)v238 == (_DWORD)v239)
      goto LABEL_358;
    v240 = *((_DWORD *)v392 + 27);
    v389 = v240;
    while (1)
    {
      if (v240 <= v239)
      {
        __break(0xC471u);
        JUMPOUT(0x198030150);
      }
      v241 = *(_QWORD *)(*((_QWORD *)v237 + 12) + 8 * v239);
      v242 = *(unsigned int *)(v241 + 20);
      if ((_DWORD)v242)
        break;
LABEL_352:
      v239 = (v239 + 1);
      if (v240 > v239)
      {
        while (!*(_QWORD *)(*((_QWORD *)v237 + 12) + 8 * v239))
        {
          if (v240 == ++v239)
          {
            LODWORD(v239) = v240;
            break;
          }
        }
      }
      if ((_DWORD)v238 == (_DWORD)v239)
      {
        v237 = v392;
        goto LABEL_358;
      }
    }
    v243 = *(_QWORD *)(v241 + 8);
    v244 = v243 + (v242 << 7);
    v245 = BYTE4(qword_1ECF4C688);
    while (1)
    {
      if (v245)
      {
        WTF::dataLog<char [5],JSC::B3::Air::Inst,char [2]>((JSC::B3::Air::Arg **)v243);
        v245 = BYTE4(qword_1ECF4C688);
      }
      v246 = *(unsigned int *)(v243 + 12);
      if ((_DWORD)v246)
        break;
LABEL_350:
      v243 += 128;
      if (v243 == v244)
      {
        v240 = *((_DWORD *)v237 + 27);
        LODWORD(v238) = v389;
        goto LABEL_352;
      }
    }
    v247 = *(JSC::B3::Air::Arg **)v243;
    v248 = 32 * v246;
    v249 = *(_QWORD *)v243 + 16;
    while (1)
    {
      v250 = *(char *)(v249 - 8);
      if (v250 <= 0xD)
      {
        if (((1 << v250) & 0x31C2) == 0)
        {
          if (v250 != 11)
            goto LABEL_326;
          v258 = *(_DWORD *)v249;
          if (*(_DWORD *)v249 <= 0xFFFFFFDF && (v258 - 1) >= 0x20)
          {
            v259 = v258 <= 0;
            if (v258 <= 0)
              v258 = -v258;
            v260 = &v400;
            if (v259)
              v260 = &v403;
            v261 = *((_BYTE *)*v260 + 40 * v258 + 32);
            v262 = v261 & 0x7F;
            if (v262 == 127)
            {
              WTF::dataLog<char [29],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)v249);
              __break(0xC471u);
              JUMPOUT(0x198030084);
            }
            if ((v261 & 0x60) != 0)
              v263 = (char)(31 - v262);
            else
              v263 = v262 + 1;
            *(_DWORD *)v249 = v263;
          }
          v256 = (int *)(v249 + 4);
          v264 = *(_DWORD *)(v249 + 4);
          if (v264 > 0xFFFFFFDF || (v264 - 1) < 0x20)
            goto LABEL_326;
          v265 = v264 <= 0;
          if (v264 <= 0)
            v264 = -v264;
          v266 = &v400;
          if (v265)
            v266 = &v403;
          v254 = *((_BYTE *)*v266 + 40 * v264 + 32);
          v255 = v254 & 0x7F;
          if (v255 == 127)
          {
            WTF::dataLog<char [29],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)(v249 + 4));
            __break(0xC471u);
            JUMPOUT(0x1980300ACLL);
          }
          goto LABEL_322;
        }
        v251 = *(_DWORD *)v249;
        if (*(_DWORD *)v249 <= 0xFFFFFFDF && (v251 - 1) >= 0x20)
        {
          v252 = v251 <= 0;
          if (v251 <= 0)
            v251 = -v251;
          v253 = &v400;
          if (v252)
            v253 = &v403;
          v254 = *((_BYTE *)*v253 + 40 * v251 + 32);
          v255 = v254 & 0x7F;
          if (v255 == 127)
          {
            WTF::dataLog<char [29],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)v249);
            __break(0xC471u);
            JUMPOUT(0x19802FFC4);
          }
          v256 = (int *)((char *)v247 + 16);
LABEL_322:
          if ((v254 & 0x60) != 0)
            v257 = (char)(31 - v255);
          else
            v257 = v255 + 1;
          *v256 = v257;
        }
      }
LABEL_326:
      v247 = (JSC::B3::Air::Arg *)((char *)v247 + 32);
      v249 += 32;
      v248 -= 32;
      if (!v248)
        goto LABEL_350;
    }
  }
LABEL_358:
  JSC::B3::Air::fixSpillsAfterTerminals(v237, (JSC::B3::Air::Code *)v148, v149, v150, v151, v152, v153, v154);
  JSC::B3::Air::handleCalleeSaves(v392, v267);
  v268 = v392;
  JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize(v392, v269, v270, v271, v272, v273, v274, v275, (uint64_t)&v438);
  v283 = v438;
  if (HIDWORD(v439))
  {
    v284 = 0;
    v285 = 8 * HIDWORD(v439);
    v286 = v438;
    do
    {
      v287 = *(_QWORD *)v286;
      v286 = (WTF *)((char *)v286 + 8);
      v288 = *(_DWORD *)(v287 + 16);
      if (v284 <= -v288)
        v284 = -v288;
      v285 -= 8;
    }
    while (v285);
    v289 = (v284 + 15) & 0xFFFFFFF0;
  }
  else
  {
    v289 = 0;
  }
  *((_DWORD *)v268 + 46) = v289;
  if (v283)
  {
    v438 = 0;
    LODWORD(v439) = 0;
    WTF::fastFree((unint64_t)v283, v276, v277, v278, v279, v280, v281, v282);
  }
  HIDWORD(v410[1]) = 0;
  v290 = v392;
  v291 = *((unsigned int *)v392 + 44);
  if ((_DWORD)v291)
  {
    v292 = 0;
    for (m = 0; m != v291; ++m)
    {
      LODWORD(v438) = m + 33;
      v294 = -(m + 33);
      if ((int)m + 33 > 0)
        v294 = m + 33;
      v295 = &v400;
      if ((int)m + 33 <= 0)
        v295 = &v403;
      if (*((_QWORD *)*v295 + 5 * v294 + 2))
      {
        if (v292 == LODWORD(v410[1]))
        {
          v296 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v410, v292 + 1, (unint64_t)&v438);
          *((_DWORD *)v410[0] + HIDWORD(v410[1])) = *v296;
        }
        else
        {
          *((_DWORD *)v410[0] + v292) = m + 33;
        }
        v292 = ++HIDWORD(v410[1]);
      }
    }
  }
  else
  {
    v292 = 0;
  }
  v297 = *((unsigned int *)v290 + 45);
  if ((_DWORD)v297)
  {
    v298 = -33;
    do
    {
      LODWORD(v438) = v298;
      v299 = -v298;
      if (v298 > 0)
        v299 = v298;
      v300 = &v400;
      if (v298 <= 0)
        v300 = &v403;
      if (*((_QWORD *)*v300 + 5 * v299 + 2))
      {
        if (v292 == LODWORD(v410[1]))
        {
          v301 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v410, v292 + 1, (unint64_t)&v438);
          *((_DWORD *)v410[0] + HIDWORD(v410[1])) = *v301;
        }
        else
        {
          *((_DWORD *)v410[0] + v292) = v298;
        }
        v292 = ++HIDWORD(v410[1]);
      }
      --v298;
      --v297;
    }
    while (v297);
  }
  v438 = (WTF *)&v392;
  v302 = 126 - 2 * __clz(v292);
  if (v292)
    v303 = v302;
  else
    v303 = 0;
  if (BYTE4(qword_1ECF4C688))
  {
    v438 = (WTF *)v410;
    v439 = (uint64_t)", ";
    v440 = 3;
    v441 = &str_106;
    v442 = 1;
    v443 = 0;
    WTF::dataLog<char [7],WTF::ListDump<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>((uint64_t)&v438);
  }
  v411 = 0uLL;
  v58 = v412[0];
  if (v412[0])
  {
    v412[0] = 0;
    LODWORD(v412[1]) = 0;
    WTF::fastFree((unint64_t)v58, v59, v60, v61, v62, v63, v64, v65);
  }
  if (v414 < 0)
    v414 = 0x8000000000000000;
  else
    bzero((void *)(2 * v414 + 8), (unint64_t)(*(_QWORD *)(2 * v414) + 7) >> 3);
  if (HIDWORD(v410[1]))
  {
    v304 = v410[0];
    v305 = (WTF *)((char *)v410[0] + 4 * HIDWORD(v410[1]));
    do
    {
      v306 = *(_DWORD *)v304;
      if (*(int *)v304 <= 0)
        v306 = -v306;
      v307 = &v400;
      if (*(int *)v304 <= 0)
        v307 = &v403;
      v308 = *v307;
      v309 = v306;
      v310 = (char *)v308 + 40 * v306;
      v313 = (WTF **)*((_QWORD *)v310 + 2);
      v312 = (WTF ***)(v310 + 16);
      v311 = v313;
      if (!v313)
        goto LABEL_477;
      v315 = *((_QWORD *)&v411 + 1);
      v314 = v411;
      if ((_QWORD)v411 != *((_QWORD *)&v411 + 1))
      {
        v316 = *((_QWORD *)v308 + 5 * v309);
        v317 = v412[0];
        v318 = LODWORD(v412[1]) - 1;
        do
        {
          v319 = *((_DWORD *)v317 + v314);
          v320 = -v319;
          v321 = v319 <= 0;
          if (v319 > 0)
            v320 = *((_DWORD *)v317 + v314);
          v322 = &v400;
          if (v321)
            v322 = &v403;
          v323 = *v322;
          v58 = (WTF *)*((_QWORD *)v323 + 5 * v320 + 1);
          if ((unint64_t)v58 > v316)
            break;
          if (v314 == v318)
            v314 = 0;
          else
            ++v314;
          *(_QWORD *)&v411 = v314;
          v58 = (WTF *)v414;
          v59 = (unint64_t *)(2 * v414);
          if (v414 < 0)
            v60 = 63;
          else
            v60 = *v59;
          v324 = *((unsigned int *)v323 + 10 * v320 + 9);
          if (v60 > v324)
          {
            v325 = (uint64_t *)(v59 + 1);
            if (v414 < 0)
              v325 = &v414;
            *(uint64_t *)((char *)v325 + ((v324 >> 3) & 0x1FFFFFF8)) &= ~(1 << v324);
            v315 = *((_QWORD *)&v411 + 1);
            v314 = v411;
          }
        }
        while (v314 != v315);
      }
      v326 = v414;
      if (v414 < 0)
      {
        v327 = __clz(__rbit64(~v414));
        if (v327 >= 0x3F)
          LODWORD(v327) = 63;
      }
      else
      {
        v327 = *(_QWORD *)(2 * v414);
        if (v327 + 63 < 0x40)
          goto LABEL_435;
        v328 = *(_QWORD *)(2 * v414 + 8);
        if (v328 != -1)
        {
          v329 = __clz(__rbit64(~v328));
          if (v329 < 0x40)
          {
            v330 = 0;
LABEL_434:
            LODWORD(v327) = v329 + (v330 << 6);
            goto LABEL_435;
          }
        }
        if ((v327 + 63) >> 6 != 1)
        {
          v355 = 0;
          while (1)
          {
            v356 = *(_QWORD *)(2 * v414 + 0x10 + 8 * v355);
            if (v356 != -1)
            {
              v329 = __clz(__rbit64(~v356));
              if (v329 <= 0x3F)
                break;
            }
            if (((v327 + 63) >> 6) - 1 == ++v355)
              goto LABEL_435;
          }
          v330 = v355 + 1;
          goto LABEL_434;
        }
      }
LABEL_435:
      v331 = (char *)v308 + 40 * v309;
      *((_DWORD *)v331 + 9) = v327;
      v332 = (unsigned int *)(v331 + 36);
      v333 = (WTF *)(-8 - (*((unsigned int *)v392 + 46) + 8 * v327));
      v438 = v333;
      if (BYTE4(qword_1ECF4C688))
      {
        v419 = v311;
        v58 = (WTF *)WTF::dataLog<char [22],long,char [11],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [6],JSC::B3::Air::Tmp,char [2]>(&v438, (uint64_t *)&v419, v304);
        v311 = *v312;
        v334 = *v332;
        v326 = v414;
      }
      else
      {
        v334 = v327;
      }
      v311[2] = v333;
      if (v326 < 0)
        v335 = 63;
      else
        v335 = *(_QWORD *)(2 * v326);
      if (v335 <= v334)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v414, v334 + 1, 0);
        v326 = v414;
      }
      v336 = (uint64_t *)(2 * v326 + 8);
      if (v326 < 0)
        v336 = &v414;
      *(uint64_t *)((char *)v336 + ((v334 >> 3) & 0x1FFFFFF8)) |= 1 << v334;
      v337 = *((_QWORD *)&v411 + 1);
      if ((_QWORD)v411)
      {
        if (*((_QWORD *)&v411 + 1) + 1 != (_QWORD)v411)
          goto LABEL_473;
        v338 = LODWORD(v412[1]);
      }
      else if (*((_QWORD *)&v411 + 1))
      {
        v338 = LODWORD(v412[1]);
        if (*((_QWORD *)&v411 + 1) != LODWORD(v412[1]) - 1)
          goto LABEL_473;
      }
      else
      {
        v338 = 0;
        if (LODWORD(v412[1]))
          goto LABEL_473;
      }
      v66 = v338 + (v338 >> 2);
      if (v66 <= 0xF)
        v66 = 15;
      if (v66 >= 0x3FFFFFFF)
      {
        __break(0xC471u);
LABEL_574:
        __break(1u);
LABEL_575:
        LODWORD(v360) = 0;
        goto LABEL_504;
      }
      v339 = v412[0];
      v340 = v66 + 1;
      v58 = (WTF *)WTF::fastMalloc((WTF *)(4 * (v66 + 1)));
      LODWORD(v412[1]) = v340;
      v412[0] = v58;
      v337 = *((_QWORD *)&v411 + 1);
      v341 = v411;
      if ((unint64_t)v411 <= *((_QWORD *)&v411 + 1))
      {
        if ((_QWORD)v411 != *((_QWORD *)&v411 + 1))
        {
          v347 = (_DWORD *)((char *)v58 + 4 * v411);
          v348 = (int *)((char *)v339 + 4 * v411);
          v349 = 4 * *((_QWORD *)&v411 + 1) - 4 * v411;
          do
          {
            v350 = *v348++;
            *v347++ = v350;
            v349 -= 4;
          }
          while (v349);
        }
        if (!v339)
          goto LABEL_473;
      }
      else
      {
        if (*((_QWORD *)&v411 + 1))
        {
          v342 = 4 * *((_QWORD *)&v411 + 1);
          v343 = v58;
          v344 = v339;
          do
          {
            v345 = *(_DWORD *)v344;
            v344 = (WTF *)((char *)v344 + 4);
            *(_DWORD *)v343 = v345;
            v343 = (WTF *)((char *)v343 + 4);
            v342 -= 4;
          }
          while (v342);
          v346 = LODWORD(v412[1]);
        }
        else
        {
          v346 = v340;
        }
        if (v341 != v338)
        {
          v351 = (int *)((char *)v339 + 4 * v341);
          v352 = 4 * v341 - 4 * v338;
          do
          {
            v353 = *v351++;
            *(_DWORD *)((char *)v58 + 4 * v346 + v352) = v353;
            v352 += 4;
          }
          while (v352);
        }
        *(_QWORD *)&v411 = v341 - v338 + v346;
        if (!v339)
          goto LABEL_473;
      }
      if (v58 == v339)
      {
        v412[0] = 0;
        LODWORD(v412[1]) = 0;
      }
      WTF::fastFree((unint64_t)v339, v59, v60, v61, v62, v63, v64, v65);
      v337 = *((_QWORD *)&v411 + 1);
LABEL_473:
      *((_DWORD *)v412[0] + v337) = *(_DWORD *)v304;
      if (v337 == LODWORD(v412[1]) - 1)
        v354 = 0;
      else
        v354 = v337 + 1;
      *((_QWORD *)&v411 + 1) = v354;
LABEL_477:
      v304 = (WTF *)((char *)v304 + 4);
    }
    while (v304 != v305);
  }
  v66 = (unint64_t)v392;
  v357 = *((unsigned int *)v392 + 19);
  if ((_DWORD)v357)
  {
    v358 = 0;
    v359 = *((_QWORD *)v392 + 8);
    v58 = v386;
    while (1)
    {
      v360 = *(_QWORD *)(v359 + 8 * v358);
      if (v360)
        break;
      if (v357 == ++v358)
        goto LABEL_504;
    }
    if ((_DWORD)v357 == (_DWORD)v358)
      goto LABEL_575;
    v361 = 0;
    do
    {
      v362 = *(_DWORD *)(*(_QWORD *)(v359 + 8 * v358) + 16);
      if (v361 <= -v362)
        v361 = -v362;
      v358 = (v358 + 1);
      if (v357 > v358)
      {
        while (!*(_QWORD *)(v359 + 8 * v358))
        {
          if (v357 == ++v358)
            goto LABEL_503;
        }
      }
    }
    while ((_DWORD)v357 != (_DWORD)v358);
LABEL_503:
    LODWORD(v360) = (v361 + 15) & 0xFFFFFFF0;
  }
  else
  {
    LODWORD(v360) = 0;
    v58 = v386;
  }
LABEL_504:
  *(_DWORD *)(v66 + 184) = v360;
  *(_BYTE *)(v66 + 196) = 1;
  if (BYTE4(qword_1ECF4C688))
    WTF::dataLog<char [24],JSC::B3::Air::Code>(v58);
  if ((v414 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v414, v59, v60, v61, v62, v63, v64, v65);
  v363 = v412[0];
  if (v412[0])
  {
    v412[0] = 0;
    LODWORD(v412[1]) = 0;
    WTF::fastFree((unint64_t)v363, v59, v60, v61, v62, v63, v64, v65);
  }
  v364 = v410[0];
  if (v410[0])
  {
    v410[0] = 0;
    LODWORD(v410[1]) = 0;
    WTF::fastFree((unint64_t)v364, v59, v60, v61, v62, v63, v64, v65);
  }
  v365 = v409[0];
  if (v409[0])
  {
    v409[0] = 0;
    LODWORD(v409[1]) = 0;
    WTF::fastFree((unint64_t)v365, v59, v60, v61, v62, v63, v64, v65);
  }
  v366 = v406;
  if (v408)
  {
    v367 = (WTF *)((char *)v406 + 1168 * v408);
    do
    {
      v368 = *((unsigned int *)v366 + 3);
      v369 = *(_QWORD *)v366;
      if ((_DWORD)v368)
      {
        v370 = 144 * v368;
        v371 = v369 + 24;
        do
        {
          v372 = *(_QWORD *)(v371 - 16);
          if (v371 != v372 && v372 != 0)
          {
            *(_QWORD *)(v371 - 16) = 0;
            *(_DWORD *)(v371 - 8) = 0;
            WTF::fastFree(v372, v59, v60, v61, v62, v63, v64, v65);
          }
          v371 += 144;
          v370 -= 144;
        }
        while (v370);
        v369 = *(_QWORD *)v366;
      }
      if ((WTF *)((char *)v366 + 16) != (WTF *)v369 && v369 != 0)
      {
        *(_QWORD *)v366 = 0;
        *((_DWORD *)v366 + 2) = 0;
        WTF::fastFree(v369, v59, v60, v61, v62, v63, v64, v65);
      }
      v366 = (WTF *)((char *)v366 + 1168);
    }
    while (v366 != v367);
    v366 = v406;
  }
  if (v366)
  {
    v406 = 0;
    v407 = 0;
    WTF::fastFree((unint64_t)v366, v59, v60, v61, v62, v63, v64, v65);
  }
  v375 = v403;
  if (v403)
  {
    v403 = 0;
    v404 = 0;
    WTF::fastFree((unint64_t)v375, v59, v60, v61, v62, v63, v64, v65);
  }
  v376 = v400;
  if (v400)
  {
    v400 = 0;
    v401 = 0;
    WTF::fastFree((unint64_t)v376, v59, v60, v61, v62, v63, v64, v65);
  }
  v377 = v397;
  if (v397)
  {
    v397 = 0;
    v398 = 0;
    WTF::fastFree((unint64_t)v377, v59, v60, v61, v62, v63, v64, v65);
  }
  v378 = v394[0];
  if (v394[0])
  {
    v394[0] = 0;
    LODWORD(v394[1]) = 0;
    WTF::fastFree((unint64_t)v378, v59, v60, v61, v62, v63, v64, v65);
  }
  v379 = v393[0];
  if (v393[0])
  {
    v393[0] = 0;
    LODWORD(v393[1]) = 0;
    WTF::fastFree((unint64_t)v379, v59, v60, v61, v62, v63, v64, v65);
  }
  v380 = (JSC::B3::Air *)v416[0];
  *(_QWORD *)(v416[0] + 304) = v416[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v418)
      v385 = (WTF *)((char *)v418 + 16);
    else
      v385 = 0;
    JSC::B3::Air::validate(v380, v385, (char *)v60, v61, v62, v63, v64, v65);
  }
  v381 = v418;
  v418 = 0;
  if (v381)
  {
    if (*(_DWORD *)v381 == 1)
      WTF::fastFree((unint64_t)v381, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v381;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v417);
}

uint64_t WTF::dataLog<char [25],JSC::B3::Air::Code>(JSC::B3::Air::Code *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Air before linear scan:\n");
  JSC::B3::Air::Code::dump(a1, v4, v5, v6, v7, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [24],JSC::B3::Air::Code>(JSC::B3::Air::Code *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Air after linear scan:\n");
  JSC::B3::Air::Code::dump(a1, v4, v5, v6, v7, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::B3::Air::allocateRegistersByGraphColoring(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Air::Inst *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  JSC::B3::Air::Inst *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  WTF *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  double v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  double v59;
  WTF *v60;
  WTF *v61;
  unsigned int *v62;
  char v63;
  unsigned int v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  WTF *v68;
  char *v69;
  float *v70;
  float v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  int64x2_t *v75;
  uint64_t v76;
  unsigned int v77;
  float v78;
  uint64_t v79;
  _QWORD *v80;
  WTF *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::Air *v96;
  int v97;
  WTF::BitVector *v98;
  int v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  __int32 *v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int32 *v123;
  __int32 v124;
  char *v125;
  uint64_t v126;
  char *v127;
  int32x2_t *v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  char *v132;
  __int32 *v133;
  __int32 v134;
  WTF::BitVector *v135;
  uint64_t v136;
  _DWORD *v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  WTF *v152;
  int i;
  JSC::B3::Air *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  WTF *v175;
  _BYTE *v176;
  char *v177;
  char v178;
  _BYTE *v179;
  uint64_t v180;
  unint64_t v181;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::B3::Air::Code *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int **v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD **v201;
  _QWORD **v202;
  _QWORD **v203;
  WTF **v204;
  WTF *v205;
  char *v206;
  uint64_t v207;
  unsigned int **v208;
  uint64_t v209;
  unsigned int *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  _DWORD *v238;
  uint64_t v239;
  _DWORD *v240;
  uint64_t v241;
  __int16 v242;
  unsigned int v243;
  unsigned __int16 v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  WTF *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  _WORD *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v285;
  uint64_t v286;
  WTF *v287;
  unint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  unint64_t v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  char v297;
  int v298;
  int v299;
  unsigned int *v300;
  unint64_t v301;
  uint64_t v302;
  int v303;
  unsigned int *v304;
  unint64_t v305;
  unsigned int *v306;
  BOOL v307;
  unsigned int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  unsigned int v315;
  unint64_t v316;
  _OWORD *v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  JSC::B3::Air::Inst *v321;
  unint64_t v322;
  unint64_t v323;
  void *v324;
  unint64_t v325;
  unint64_t v326;
  _QWORD *v327;
  unsigned int v328;
  char v329;
  int v330;
  char v331;
  int v332;
  int v333;
  char v334;
  int v335;
  int v336;
  _DWORD *v337;
  JSC::B3::Air::Inst *v338;
  _DWORD *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  BOOL v353;
  WTF *v354;
  unint64_t v355;
  unint64_t v356;
  void *v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  WTF *v364;
  WTF *v365;
  WTF *v366;
  WTF *v367;
  JSC::B3::Air *v368;
  WTF *v369;
  _QWORD *v370;
  char v371;
  int v372;
  char v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  BOOL v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  BOOL v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  WTF *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  BOOL v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  double v421;
  double v422;
  float v423;
  BOOL v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char *v433;
  JSC::B3::Air::Code *v434;
  unint64_t v435;
  _DWORD *v436;
  unsigned int *v437;
  uint64_t v438;
  __int128 *v439;
  __int128 v440;
  __int128 v441;
  unsigned int *v442;
  unint64_t v443;
  WTF::BitVector *v444;
  int v445;
  WTF::BitVector *v446;
  uint64_t v447;
  uint64_t v448;
  JSC::B3::Air *v449;
  WTF *v450[2];
  WTF *v451[2];
  WTF **v452;
  WTF *v453;
  WTF *v454;
  int64x2_t v455;
  _QWORD v456[3];
  uint64_t v457;
  WTF *v458;
  uint64_t v459;
  WTF *v460;
  uint64_t v461;
  uint64_t v462;
  __int16 v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  WTF *v467;
  int v468;
  int v469;
  _BYTE *v470;
  unsigned int v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  unsigned int v478;
  WTF *v479;
  int v480;
  unsigned int v481;
  _QWORD v482[4];
  uint64_t *v483;
  JSC::B3::Air::Code *v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  WTF *v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  WTF *v495;
  int *v496;
  WTF::BitVector *v497;
  int v498;
  uint64_t v499;
  uint64_t v500[2];
  int v501;
  JSC::B3::Air::Inst *v502;
  WTF **v503;
  _QWORD v504[2];
  uint64_t v505;
  uint64_t v506;
  int v507;
  unsigned int v508;
  uint64_t v509;
  _BYTE v510[11];

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v456, this, (uint64_t)"allocateRegistersByGraphColoring", 33, a5, a6, a7, a8);
  v453 = 0;
  v454 = 0;
  v455 = vdupq_n_s64(0x8000000000000000);
  v459 = 0x8000000000000000;
  v460 = (WTF *)&v462;
  v461 = 16;
  if (!*((_DWORD *)this + 27))
  {
    __break(0xC471u);
    JUMPOUT(0x1980324E0);
  }
  v16 = *(JSC::B3::Air::Inst **)this[12];
  v502 = v16;
  v17 = *(unsigned int *)v16;
  if (v17 < 0x3F || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v459, v17 + 1, 0), v459 < 0))
    v18 = &v459;
  else
    v18 = (uint64_t *)(2 * v459 + 8);
  v19 = (v17 >> 3) & 0x1FFFFFF8;
  v20 = *(uint64_t *)((char *)v18 + v19);
  *(uint64_t *)((char *)v18 + v19) = v20 | (1 << v17);
  v21 = HIDWORD(v461);
  if ((v20 & (1 << v17)) == 0)
  {
    if (HIDWORD(v461) == (_DWORD)v461)
    {
      v370 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v460, HIDWORD(v461) + 1, (unint64_t)&v502);
      v21 = HIDWORD(v461);
      *((_QWORD *)v460 + HIDWORD(v461)) = *v370;
    }
    else
    {
      *((_QWORD *)v460 + HIDWORD(v461)) = v16;
    }
    HIDWORD(v461) = ++v21;
  }
  while (v21)
  {
    v22 = *((_QWORD *)v460 + --v21);
    HIDWORD(v461) = v21;
    if (!v22)
      break;
    v23 = *(unsigned int *)(v22 + 36);
    if ((_DWORD)v23)
    {
      v24 = 16 * v23;
      v25 = (_BYTE *)(*(_QWORD *)(v22 + 24) + 8);
      do
      {
        if (*v25 != 1)
        {
          v26 = (JSC::B3::Air::Inst *)*((_QWORD *)v25 - 1);
          v502 = v26;
          v27 = v459;
          if (v459 < 0)
            v28 = 63;
          else
            v28 = *(_QWORD *)(2 * v459);
          v29 = *(unsigned int *)v26;
          if (v28 <= v29)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v459, v29 + 1, 0);
            v27 = v459;
          }
          if (v27 >= 0)
            v30 = (uint64_t *)(2 * v27 + 8);
          else
            v30 = &v459;
          v31 = (v29 >> 3) & 0x1FFFFFF8;
          v32 = *(uint64_t *)((char *)v30 + v31);
          *(uint64_t *)((char *)v30 + v31) = v32 | (1 << v29);
          if ((v32 & (1 << v29)) == 0)
          {
            v33 = HIDWORD(v461);
            if (HIDWORD(v461) == (_DWORD)v461)
            {
              v80 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v460, HIDWORD(v461) + 1, (unint64_t)&v502);
              v33 = HIDWORD(v461);
              *((_QWORD *)v460 + HIDWORD(v461)) = *v80;
            }
            else
            {
              *((_QWORD *)v460 + HIDWORD(v461)) = v26;
            }
            HIDWORD(v461) = v33 + 1;
          }
        }
        v25 += 16;
        v24 -= 16;
      }
      while (v24);
      v21 = HIDWORD(v461);
    }
  }
  v34 = *((_DWORD *)this + 44);
  v35 = (v34 + 33);
  if (v34 == -33)
  {
    v36 = 0;
  }
  else
  {
    v36 = WTF::fastMalloc((WTF *)(4 * v35 + 4));
    *(_DWORD *)v36 = v35;
    bzero((void *)(v36 + 4), 4 * v35);
  }
  v37 = v453;
  v453 = (WTF *)v36;
  if (v37)
    WTF::fastFree((unint64_t)v37, v9, v10, v11, v12, v13, v14, v15);
  if (v455.i64[0] < 0)
    v38 = 63;
  else
    v38 = *(_QWORD *)(2 * v455.i64[0]);
  if (v38 < v35)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v455, v35, 0);
  v39 = *((_DWORD *)this + 45);
  v40 = (v39 + 33);
  if (v39 == -33)
  {
    v41 = 0;
  }
  else
  {
    v41 = WTF::fastMalloc((WTF *)(4 * v40 + 4));
    *(_DWORD *)v41 = v40;
    bzero((void *)(v41 + 4), 4 * v40);
  }
  v42 = v454;
  v454 = (WTF *)v41;
  if (v42)
    WTF::fastFree((unint64_t)v42, v9, v10, v11, v12, v13, v14, v15);
  if (v455.i64[1] < 0)
    v43 = 63;
  else
    v43 = *(_QWORD *)(2 * v455.i64[1]);
  if (v43 < v40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v455.u64[1], v40, 0);
  v447 = *((unsigned int *)this + 27);
  if ((_DWORD)v447)
  {
    v44 = 0;
    while (!*((_QWORD *)this[12] + v44))
    {
      if (v447 == ++v44)
        goto LABEL_116;
    }
    if ((_DWORD)v447 != (_DWORD)v44)
    {
      v45 = *((_DWORD *)this + 27);
      while (1)
      {
        if (v45 <= v44)
        {
          __break(0xC471u);
          JUMPOUT(0x19803248CLL);
        }
        v46 = (unsigned int *)*((_QWORD *)this[12] + v44);
        v47 = *((double *)v46 + 13);
        *(double *)v500 = v47;
        v48 = (unint64_t *)(2 * v459);
        if (v459 < 0)
          v49 = 63;
        else
          v49 = *v48;
        v50 = *v46;
        if (v49 <= v50)
          goto LABEL_103;
        v51 = (uint64_t *)(v48 + 1);
        v52 = &v459;
        if (v459 >= 0)
          v52 = v51;
        if (((*(unint64_t *)((char *)v52 + ((v50 >> 3) & 0x1FFFFFF8)) >> v50) & 1) == 0)
LABEL_103:
          *(double *)v500 = v47 * *(double *)&qword_1ECF4C680;
        v53 = v46[5];
        if ((_DWORD)v53)
          break;
LABEL_98:
        v44 = (v44 + 1);
        if (v45 > v44)
        {
          while (!*((_QWORD *)this[12] + v44))
          {
            if (v45 == ++v44)
            {
              LODWORD(v44) = v45;
              break;
            }
          }
        }
        if ((_DWORD)v447 == (_DWORD)v44)
          goto LABEL_116;
      }
      v54 = *((_QWORD *)v46 + 1);
      v55 = v54 + (v53 << 7);
      while (1)
      {
        v449 = (JSC::B3::Air *)&v453;
        v450[0] = (WTF *)v500;
        v495 = (WTF *)&v449;
        if ((*(__int16 *)(v54 + 120) - 446) <= 5)
        {
          v502 = (JSC::B3::Air::Inst *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          v503 = &v502;
          v504[0] = &v495;
          JSC::B3::Air::Inst::forEachArgCustom(v54, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::UseCounts::UseCounts(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v502);
          v56 = *(unsigned __int16 *)(v54 + 120);
        }
        else
        {
          v56 = *(unsigned __int16 *)(v54 + 120);
          v57 = *(unsigned int *)(v54 + 12);
          if ((_DWORD)v57)
          {
            v58 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                + 21 * *(__int16 *)(v54 + 120)
                + ((unint64_t)((v57 - 1) * v57) >> 1);
            v59 = *(double *)v500;
            v60 = v453;
            v61 = v454;
            v62 = (unsigned int *)(*(_QWORD *)v54 + 16);
            do
            {
              v64 = *v58++;
              v63 = v64;
              if ((v64 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980322E4);
              }
              v65 = *((char *)v62 - 8);
              if (v65 == 1)
              {
                v66 = (v63 & 0xFu) > 0xA || ((1 << (v63 & 0xF)) & 0x4C5) == 0;
                if (v66 && (v63 & 0xFu) - 4 > 6)
                  goto LABEL_74;
                v67 = *v62;
                if ((v63 & 0x10) != 0)
                {
                  v67 = -v67;
                  v68 = v61;
                  if (*(_DWORD *)v61 <= v67)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198031F50);
                  }
                }
                else
                {
                  v68 = v60;
                  if (*(_DWORD *)v60 <= v67)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198030914);
                  }
                }
                v69 = (char *)v68 + 4 * v67;
              }
              else
              {
                if ((v65 - 6) < 3)
                {
                  v72 = *v62;
                  if (*(_DWORD *)v60 <= v72)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198031EF8);
                  }
                }
                else
                {
                  if (v65 == 11)
                  {
                    v76 = *v62;
                    v77 = *(_DWORD *)v60;
                    if (*(_DWORD *)v60 <= v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198032054);
                    }
                    v78 = v59 + *((float *)v60 + v76 + 1);
                    *((float *)v60 + v76 + 1) = v78;
                    v79 = v62[1];
                    if (v77 <= v79)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198032074);
                    }
                    v70 = (float *)((char *)v60 + 4 * v79 + 4);
                    goto LABEL_73;
                  }
                  if ((v65 - 12) >= 2)
                    goto LABEL_74;
                  v72 = *v62;
                  if (*(_DWORD *)v60 <= v72)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980308F4);
                  }
                }
                v69 = (char *)v60 + 4 * v72;
              }
              v70 = (float *)(v69 + 4);
LABEL_73:
              v71 = v59 + *v70;
              *v70 = v71;
LABEL_74:
              v62 += 8;
              --v57;
            }
            while (v57);
          }
        }
        if ((v56 | 4) == 0x5E)
        {
          v73 = *(_DWORD *)(v54 + 12);
          if (!v73)
          {
            __break(0xC471u);
            JUMPOUT(0x198032414);
          }
          v74 = *(_QWORD *)v54;
          if ((*(char *)(*(_QWORD *)v54 + 8) - 2) <= 3)
          {
            if (v73 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198032494);
            }
            if (*(_BYTE *)(v74 + 40) == 1)
            {
              LODWORD(v74) = *(_DWORD *)(v74 + 48);
              v75 = &v455;
              if ((v74 & 0x80000000) == 0)
              {
                v74 = v74;
              }
              else
              {
                v75 = (int64x2_t *)&v455.u64[1];
                v74 = -(int)v74;
              }
              if (v75->i64[0] >= 0)
                v75 = (int64x2_t *)(2 * v75->i64[0] + 8);
              *(uint64_t *)((char *)v75->i64 + ((v74 >> 3) & 0x1FFFFFF8)) |= 1 << v74;
            }
          }
        }
        v54 += 128;
        if (v54 == v55)
        {
          v45 = *((_DWORD *)this + 27);
          goto LABEL_98;
        }
      }
    }
  }
LABEL_116:
  v81 = v460;
  if (&v462 != (uint64_t *)v460 && v460 != 0)
  {
    v460 = 0;
    LODWORD(v461) = 0;
    WTF::fastFree((unint64_t)v81, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((v459 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v459, v9, v10, v11, v12, v13, v14, v15);
  v449 = (JSC::B3::Air *)this;
  *(_OWORD *)v450 = 0u;
  *(_OWORD *)v451 = 0u;
  v452 = &v453;
  JSC::B3::Air::padInterference((JSC::B3::Air *)this, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v96 = v449;
  v97 = *((_DWORD *)v449 + 45);
  LODWORD(v496) = 0;
  v495 = 0;
  v98 = (WTF::BitVector *)(v97 + 33);
  HIDWORD(v496) = v97 + 33;
  v444 = v98;
  if (v97 != -33)
  {
    if (v98 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980324E8);
    }
    v99 = v97 + 33;
    v100 = 16 * (_QWORD)v98;
    v101 = (WTF *)WTF::fastMalloc((WTF *)(16 * (_QWORD)v98));
    LODWORD(v496) = v99;
    v495 = v101;
    do
    {
      *(_OWORD *)v101 = xmmword_199150480;
      v101 = (WTF *)((char *)v101 + 16);
      v100 -= 16;
    }
    while (v100);
    v96 = v449;
  }
  LODWORD(v500[0]) = 0;
  v448 = *((unsigned int *)v96 + 27);
  if ((_DWORD)v448)
  {
    v102 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v96 + 12) + 8 * v102))
    {
      if (v448 == ++v102)
        goto LABEL_177;
    }
    if ((_DWORD)v448 != (_DWORD)v102)
    {
      v103 = 0;
      v104 = *((_DWORD *)v96 + 27);
      v446 = v96;
      while (1)
      {
        if (v104 <= v102)
        {
          __break(0xC471u);
          JUMPOUT(0x198032484);
        }
        v105 = *(_QWORD *)(*((_QWORD *)v96 + 12) + 8 * v102);
        v106 = *(unsigned int *)(v105 + 20);
        if ((_DWORD)v106)
          break;
LABEL_159:
        LODWORD(v500[0]) = ++v103;
        v102 = (v102 + 1);
        if (v104 > v102)
        {
          while (!*(_QWORD *)(*((_QWORD *)v96 + 12) + 8 * v102))
          {
            if (v104 == ++v102)
            {
              LODWORD(v102) = v104;
              break;
            }
          }
        }
        if ((_DWORD)v448 == (_DWORD)v102)
          goto LABEL_177;
      }
      v107 = *(_QWORD *)(v105 + 8);
      v108 = v107 + (v106 << 7);
      while (1)
      {
        v502 = (JSC::B3::Air::Inst *)v107;
        v503 = &v495;
        v504[0] = v500;
        if ((*(__int16 *)(v107 + 120) - 446) <= 5)
        {
          v460 = (WTF *)&v459;
          v461 = (uint64_t)&v502;
        }
        else
        {
          v109 = *(unsigned int *)(v107 + 12);
          if ((_DWORD)v109)
          {
            v110 = 0;
            v111 = (char *)&JSC::B3::Air::g_formTable
                 + 21 * *(__int16 *)(v107 + 120)
                 + ((unint64_t)((v109 - 1) * v109) >> 1);
            v112 = 16;
            do
            {
              if (v110 >= *(unsigned int *)(v107 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x198032394);
              }
              v113 = v111[v110];
              if ((v113 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x198032304);
              }
              v114 = *(_QWORD *)v107;
              v115 = *(_QWORD *)v107 + v112;
              v116 = *(unsigned __int8 *)(v115 - 8);
              if (v116 == 1)
              {
                if (!*((_DWORD *)v502 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19803240CLL);
                }
                if ((JSC::B3::Air::Inst::admitsStack(v502, (unint64_t)(v112 + v114 - *(_QWORD *)v502 - 16) >> 5) & 1) != 0)
                {
                  if ((v113 & 0x10) != 0)
                  {
                    v126 = -*(_DWORD *)(v114 + v112);
                    v127 = (char *)*v503;
                    v128 = (int32x2_t *)((char *)*v503 + 16 * v126);
                    v128[1] = vadd_s32(v128[1], (int32x2_t)0x100000001);
                    v129 = (_DWORD *)v504[0];
                    v124 = *(_DWORD *)v504[0];
                    if (*(_DWORD *)v504[0] < v128->i32[0])
                    {
                      v128->i32[0] = v124;
                      *(_DWORD *)&v127[16 * v126 + 4] = *v129;
                      goto LABEL_149;
                    }
                    v125 = &v127[16 * v126];
                    goto LABEL_158;
                  }
                  goto LABEL_149;
                }
                LOBYTE(v116) = *(_BYTE *)(v115 - 8);
              }
              v117 = (char)v116;
              if ((char)v116 <= 0xD)
              {
                v119 = (uint64_t *)v503;
                v118 = (__int32 *)v504[0];
                if (((1 << v117) & 0x31C2) != 0)
                {
                  v120 = *(_DWORD *)(v114 + v112);
                }
                else
                {
                  if (v117 != 11)
                    goto LABEL_149;
                  v130 = *(_DWORD *)(v114 + v112);
                  if (v130 <= 0)
                  {
                    v131 = -v130;
                    v132 = (char *)*v503;
                    v133 = (__int32 *)((char *)*v503 + 16 * v131);
                    ++v133[2];
                    v134 = *v118;
                    if (*v118 < *v133)
                    {
                      *v133 = v134;
                      v134 = *v118;
                    }
                    *(_DWORD *)&v132[16 * v131 + 4] = v134;
                  }
                  v120 = *(_DWORD *)(v114 + v112 + 4);
                }
                if (v120 <= 0)
                {
                  v121 = -v120;
                  v122 = *v119;
                  v123 = (__int32 *)(v122 + 16 * v121);
                  ++v123[2];
                  v124 = *v118;
                  if (*v118 < *v123)
                  {
                    *v123 = v124;
                    v124 = *v118;
                  }
                  v125 = (char *)(v122 + 16 * v121);
LABEL_158:
                  *((_DWORD *)v125 + 1) = v124;
                }
              }
LABEL_149:
              ++v110;
              v112 += 32;
            }
            while (v109 != v110);
          }
        }
        v103 = ++LODWORD(v500[0]);
        v107 += 128;
        if (v107 == v108)
        {
          v96 = v446;
          v104 = *((_DWORD *)v446 + 27);
          goto LABEL_159;
        }
      }
    }
  }
LABEL_177:
  v499 = 0x8000000000000000;
  v135 = v444;
  if (v444 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v499, (unint64_t)v444, 0);
  v136 = HIDWORD(v496);
  if (HIDWORD(v496) >= 0x22)
  {
    v137 = (_DWORD *)((char *)v495 + 540);
    v138 = 33;
    do
    {
      if ((*(v137 - 2) - *(v137 - 3)) <= 1 && *(v137 - 1) > *v137)
      {
        if (v499 >= 0)
          v139 = (uint64_t *)(2 * v499 + 8);
        else
          v139 = &v499;
        *(uint64_t *)((char *)v139 + ((v138 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v138;
      }
      ++v138;
      v137 += 4;
    }
    while (v136 != v138);
  }
  v140 = *((unsigned int *)v449 + 39);
  v141 = (_QWORD *)((char *)v449 + 160);
  if ((_DWORD)v140 != 2)
    v141 = (_QWORD *)*v141;
  v142 = 0;
  while ((_DWORD)v140 != v142)
  {
    v143 = v142;
    if (*((_DWORD *)v141 + v142++))
    {
      v145 = v143;
      goto LABEL_194;
    }
  }
  v145 = *((unsigned int *)v449 + 39);
LABEL_194:
  if ((_DWORD)v140 != (_DWORD)v145)
  {
    LODWORD(v146) = v145;
    v147 = v145 | (v140 << 32);
    do
    {
      v148 = *((unsigned int *)v141 + v147);
      if ((v148 & 0x80000000) != 0)
      {
        v150 = -v148;
        if (v499 >= 0)
          v151 = (uint64_t *)(2 * v499 + 8);
        else
          v151 = &v499;
        v151[v150 >> 6] |= 1 << v150;
      }
      if (HIDWORD(v147) <= (v146 + 1))
        v149 = (v146 + 1);
      else
        v149 = HIDWORD(v147);
      while ((_DWORD)v149 - 1 != (_DWORD)v146)
      {
        v146 = (v146 + 1);
        if (*((_DWORD *)v141 + v146))
        {
          LODWORD(v149) = v146;
          goto LABEL_203;
        }
      }
      v146 = v149;
LABEL_203:
      v147 = v146 | v147 & 0xFFFFFFFF00000000;
      LODWORD(v146) = v149;
    }
    while ((_DWORD)v140 != (_DWORD)v149);
  }
  v152 = v495;
  if (v495)
  {
    v495 = 0;
    LODWORD(v496) = 0;
    WTF::fastFree((unint64_t)v152, v135, v90, v91, v92, v93, v94, v95);
  }
  for (i = 0; ; i = v498)
  {
    v498 = i + 1;
    JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>((uint64_t)v450, (uint64_t)v449, v90, v91, v92, v93, v94, v95);
    v495 = (WTF *)&v449;
    v496 = &v498;
    v497 = (WTF::BitVector *)&v499;
    v154 = v449;
    v155 = *((_DWORD *)v449 + 45);
    if (v155 > 0x18F)
    {
      if (v155 <= 0xFFFE)
      {
        if (!BYTE6(qword_1ECF4C688) && *((unsigned __int8 *)v449 + 198) | HIBYTE(qword_1ECF4C688))
        {
          if (!v424)
            continue;
        }
        else
        {
          if (!v389)
            continue;
        }
      }
      else if (!BYTE6(qword_1ECF4C688) && *((unsigned __int8 *)v449 + 198) | HIBYTE(qword_1ECF4C688))
      {
        if (!v407)
          continue;
      }
      else
      {
        if (!v381)
          continue;
      }
      goto LABEL_516;
    }
    if (BYTE6(qword_1ECF4C688) || !(*((unsigned __int8 *)v449 + 198) | HIBYTE(qword_1ECF4C688)))
      break;
    if ((v494 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v494, v346, v347, v348, v349, v350, v351, v352);
    if ((v493 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v493, v346, v347, v348, v349, v350, v351, v352);
    v354 = v491;
    if (v491)
    {
      v491 = 0;
      v492 = 0;
      WTF::fastFree((unint64_t)v354, v346, v347, v348, v349, v350, v351, v352);
    }
    v355 = v490;
    if ((_QWORD)v490)
    {
      *(_QWORD *)&v490 = 0;
      DWORD2(v490) = 0;
      WTF::fastFree(v355, v346, v347, v348, v349, v350, v351, v352);
    }
    v356 = v489;
    if ((_QWORD)v489)
    {
      *(_QWORD *)&v489 = 0;
      DWORD2(v489) = 0;
      WTF::fastFree(v356, v346, v347, v348, v349, v350, v351, v352);
    }
    if (v488)
      WTF::fastFree(v488 - 16, v346, v347, v348, v349, v350, v351, v352);
    if (v353)
      goto LABEL_516;
LABEL_463:
    ;
  }
  v489 = 0u;
  v490 = 0u;
  v491 = (WTF *)v450;
  v162 = *((_QWORD *)v154 + 7);
  if (v162)
  {
    v163 = 0;
    do
    {
      v163 |= v162 & -v162;
      v162 &= v162 - 1;
    }
    while (v162);
    if (v163)
    {
      v164 = __clz(__rbit64(v163));
      do
      {
        LOBYTE(v500[0]) = v164 | 0x80;
        if ((v164 & 0x60) == 0x20)
        {
          LODWORD(v502) = (char)(31 - v164);
          if (v487 == v486)
          {
            v436 = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v485, (void *)(v487 + 1), (unint64_t)&v502, v157, v158, v159, v160, v161);
            *(_DWORD *)(v485 + 4 * v487) = *v436;
          }
          else
          {
            *(_DWORD *)(v485 + 4 * v487) = (char)(31 - v164);
          }
          ++v487;
          v397 = HIDWORD(v460);
          if (HIDWORD(v460) == (_DWORD)v460)
          {
            v433 = (char *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v459, (WTF *)(HIDWORD(v460) + 1), (unint64_t)v500);
            v397 = HIDWORD(v460);
            v398 = v459;
            v399 = *v433;
          }
          else
          {
            v398 = v459;
            v399 = v500[0];
          }
          *(_BYTE *)(v398 + v397) = v399;
          ++HIDWORD(v460);
        }
        if (v164 > 0x3E)
          break;
        v165 = __clz(__rbit64(v163 >> (v164 + 1))) + v164 + 1;
        v164 = v165 >= 0x40 ? 64 : v165;
      }
      while (v165 <= 0x3F);
    }
  }
  v166 = *((_DWORD *)v484 + 45) + 33;
  v463 = *((_WORD *)v484 + 90) + 33;
  if (v462 < 0)
    v167 = 63;
  else
    v167 = *(_QWORD *)(2 * v462);
  v168 = (v166 * v166);
  if (v167 < v168)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v462, v168, 0);
  v169 = (unsigned __int16)v461;
  v170 = (unsigned __int16)v461 + 1;
  v171 = v472;
  if ((unsigned __int16)v461 >= (unint64_t)v472)
  {
    v172 = (unint64_t)v470;
    if ((unsigned __int16)v461 >= (unint64_t)v471)
    {
      v173 = v471 + ((unint64_t)v471 >> 2);
      if (v173 >= 0x10)
        v174 = v173 + 1;
      else
        v174 = 16;
      if (v174 <= v170)
        v175 = (WTF *)((unsigned __int16)v461 + 1);
      else
        v175 = (WTF *)v174;
      v176 = (_BYTE *)WTF::fastMalloc(v175);
      v471 = v175;
      v470 = v176;
      if ((_DWORD)v171)
      {
        v177 = (char *)v172;
        do
        {
          v178 = *v177++;
          *v176++ = v178;
          --v171;
        }
        while (v171);
        v176 = v470;
      }
      if (v172)
      {
        if (v176 == (_BYTE *)v172)
        {
          v470 = 0;
          v471 = 0;
        }
        WTF::fastFree(v172, (void *)v168, v156, v157, v158, v159, v160, v161);
        v172 = (unint64_t)v470;
      }
      else
      {
        v172 = (unint64_t)v176;
      }
    }
    if (v172 && v170 != v472)
    {
      v179 = (_BYTE *)(v172 + v472);
      v180 = v169 - v472 + 1;
      do
      {
        *v179++ |= 0x7Fu;
        --v180;
      }
      while (v180);
    }
  }
  v472 = v170;
  if ((_WORD)v461)
  {
    v181 = 1;
    do
      v470[v181] = (v181 + 31) & 0x7F;
    while (v181++ < (unsigned __int16)v461);
  }
  if (v468)
  {
    if (v469)
      v469 = 0;
    v400 = v467;
    if (v467)
    {
      v467 = 0;
      v468 = 0;
      WTF::fastFree((unint64_t)v400, (void *)v168, v156, v157, v158, v159, v160, v161);
    }
  }
  LODWORD(v488) = 0;
  if (DWORD2(v489))
  {
    if (HIDWORD(v489))
      HIDWORD(v489) = 0;
    v252 = v489;
    if ((_QWORD)v489)
    {
      *(_QWORD *)&v489 = 0;
      DWORD2(v489) = 0;
      WTF::fastFree(v252, (void *)v168, v156, v157, v158, v159, v160, v161);
    }
  }
  if (DWORD2(v490))
  {
    if (HIDWORD(v490))
      HIDWORD(v490) = 0;
    v253 = v490;
    if ((_QWORD)v490)
    {
      *(_QWORD *)&v490 = 0;
      DWORD2(v490) = 0;
      WTF::fastFree(v253, (void *)v168, v156, v157, v158, v159, v160, v161);
    }
  }
  JSC::B3::Air::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::Liveness((uint64_t)&v502, (uint64_t)v484);
  v190 = v484;
  v191 = *((unsigned int *)v484 + 27);
  if ((_DWORD)v191)
  {
    v192 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v484 + 12) + 8 * v192))
    {
      if (v191 == ++v192)
        goto LABEL_303;
    }
    if ((_DWORD)v191 != (_DWORD)v192)
    {
      LODWORD(v193) = *((_DWORD *)v484 + 27);
      do
      {
        if (v193 <= v192)
        {
          __break(0xC471u);
          JUMPOUT(0x198032444);
        }
        v194 = *(unsigned int **)(*((_QWORD *)v190 + 12) + 8 * v192);
        v500[0] = (uint64_t)&v502;
        v500[1] = (uint64_t)v194;
        v508 = 0;
        v195 = (unsigned int **)(v509 + 32 * *v194);
        v196 = *((unsigned int *)v195 + 3);
        if ((_DWORD)v196)
        {
          v224 = *v195;
          v225 = v505;
          v226 = 4 * v196;
          do
          {
            v227 = *v224;
            v228 = *(unsigned int *)(v225 + 4 * v227);
            v229 = v508;
            if (v508 <= v228 || *(_DWORD *)(v506 + 4 * v228) != (_DWORD)v227)
            {
              v501 = *v224;
              if (v508 == v507)
              {
                v337 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v506, v508 + 1, (unint64_t)&v501);
                *(_DWORD *)(v506 + 4 * v508) = *v337;
                v225 = v505;
              }
              else
              {
                *(_DWORD *)(v506 + 4 * v508) = v227;
              }
              ++v508;
              *(_DWORD *)(v225 + 4 * v227) = v229;
            }
            ++v224;
            v226 -= 4;
          }
          while (v226);
        }
        v197 = v194[5];
        if (!(_DWORD)v197)
          goto LABEL_595;
        do
        {
          v198 = v197 - 1;
          v199 = v194[5];
          if (v199 <= (int)v197 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19803238CLL);
          }
          v200 = *((_QWORD *)v194 + 1);
          v201 = (_QWORD **)(v200 + ((unint64_t)(v197 - 1) << 7));
          v202 = (_QWORD **)(v200 + (v197 << 7));
          if (v197 >= v199)
            v203 = 0;
          else
            v203 = v202;
          v204 = v503;
          v205 = v503[2 * *v194];
          v206 = (char *)v205 + 64 * v197;
          v207 = *((unsigned int *)v206 + 11);
          if ((_DWORD)v207)
          {
            v216 = (unsigned int *)*((_QWORD *)v206 + 4);
            v217 = v508;
            v218 = 4 * v207;
            v219 = v505;
            v220 = v506;
            do
            {
              v221 = *v216;
              v222 = *(unsigned int *)(v219 + 4 * v221);
              if (v217 > v222 && *(_DWORD *)(v220 + 4 * v222) == (_DWORD)v221)
              {
                v223 = *(unsigned int *)(v220 + 4 * v217 - 4);
                *(_DWORD *)(v220 + 4 * v222) = v223;
                *(_DWORD *)(v219 + 4 * v223) = v222;
                v217 = --v508;
              }
              ++v216;
              v218 -= 4;
            }
            while (v218);
            v205 = v204[2 * *v194];
          }
          v208 = (unsigned int **)((char *)v205 + 64 * (unint64_t)(v197 - 1));
          v209 = *((unsigned int *)v208 + 3);
          if ((_DWORD)v209)
          {
            v210 = *v208;
            v211 = v505;
            v212 = 4 * v209;
            do
            {
              v213 = *v210;
              v214 = *(unsigned int *)(v211 + 4 * v213);
              v215 = v508;
              if (v508 <= v214 || *(_DWORD *)(v506 + 4 * v214) != (_DWORD)v213)
              {
                v501 = *v210;
                if (v508 == v507)
                {
                  v339 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v506, v508 + 1, (unint64_t)&v501);
                  *(_DWORD *)(v506 + 4 * v508) = *v339;
                  v211 = v505;
                }
                else
                {
                  *(_DWORD *)(v506 + 4 * v508) = v213;
                }
                ++v508;
                *(_DWORD *)(v211 + 4 * v213) = v215;
              }
              ++v210;
              v212 -= 4;
            }
            while (v212);
          }
          v197 = v198;
        }
        while ((_DWORD)v198);
        if (!v194[5])
        {
LABEL_595:
          __break(0xC471u);
          JUMPOUT(0x19803239CLL);
        }
        v192 = (v192 + 1);
        v193 = *((unsigned int *)v190 + 27);
        if (v193 > v192)
        {
          while (!*(_QWORD *)(*((_QWORD *)v190 + 12) + 8 * v192))
          {
            if (v193 == ++v192)
            {
              LODWORD(v192) = *((_DWORD *)v190 + 27);
              break;
            }
          }
        }
      }
      while ((_DWORD)v191 != (_DWORD)v192);
    }
  }
LABEL_303:
  WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)&v502, v183, v184, v185, v186, v187, v188, v189);
  v237 = (uint64_t *)v495;
  if (HIDWORD(v489))
  {
    LOBYTE(v501) = 0;
    v238 = (_DWORD *)v489;
    v502 = (JSC::B3::Air::Inst *)&v459;
    v503 = (WTF **)&v501;
    v239 = v489 + 4 * HIDWORD(v489);
    while (1)
    {
      if (*v238 != -1)
      if (++v238 == (_DWORD *)v239)
      {
        if (!(_BYTE)v501)
          break;
        LOBYTE(v501) = 0;
        v238 = (_DWORD *)v489;
        v502 = (JSC::B3::Air::Inst *)&v459;
        v503 = (WTF **)&v501;
        v239 = v489 + 4 * HIDWORD(v489);
        if (!HIDWORD(v489))
          break;
      }
    }
  }
  LOBYTE(v501) = 0;
  if (HIDWORD(v490))
  {
    v240 = (_DWORD *)v490;
    v502 = (JSC::B3::Air::Inst *)&v459;
    v503 = (WTF **)&v501;
    v241 = v490 + 4 * HIDWORD(v490);
    while (1)
    {
      if (*v240 != -1)
      if (++v240 == (_DWORD *)v241)
      {
        if (!(_BYTE)v501)
          break;
        LOBYTE(v501) = 0;
        v240 = (_DWORD *)v490;
        v502 = (JSC::B3::Air::Inst *)&v459;
        v503 = (WTF **)&v501;
        v241 = v490 + 4 * HIDWORD(v490);
        if (!HIDWORD(v490))
          break;
      }
    }
  }
  if (v480)
  {
    if (v481)
      v481 = 0;
    v250 = v479;
    if (v479)
    {
      v479 = 0;
      v480 = 0;
      WTF::fastFree((unint64_t)v250, (void *)v230, v231, v232, v233, v234, v235, v236);
    }
  }
  if ((v482[0] & 0x8000000000000000) != 0)
    v482[0] = 0x8000000000000000;
  else
    bzero((void *)(2 * v482[0] + 8), (unint64_t)(*(_QWORD *)(2 * v482[0]) + 7) >> 3);
  v242 = v461;
  v243 = HIDWORD(v460);
  while (1)
  {
    v244 = v242 + 1;
    LOWORD(v502) = v244;
    if (v466 <= v244)
      break;
    v245 = (uint64_t *)(2 * v475 + 8);
    if (v475 < 0)
      v245 = &v475;
    v246 = v244 >> 6;
    v247 = v245[v246];
    v248 = 1 << v244;
    if (((1 << v244) & v247) == 0)
    {
      v230 = v244;
      if (!*(_WORD *)(v474 + 2 * v244))
      {
        if (v243 <= *(unsigned __int16 *)(v465 + 2 * v244))
        {
          v251 = (uint64_t)v483;
          if (*v483 >= 0)
            v251 = 2 * *v483 + 8;
          if ((*(_QWORD *)(v251 + 8 * v246) & v248) == 0)
            WTF::BitVector::add((WTF::BitVector *)v482, v230);
        }
        else
        {
          v249 = v481;
          if (v481 == v480)
          {
            WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v479, (unint64_t)&v502);
          }
          else
          {
            *((_WORD *)v479 + v481) = v244;
            v481 = v249 + 1;
          }
        }
      }
    }
    v242 = (__int16)v502;
  }
  do
  {
    LOBYTE(v501) = 0;
    while (v481)
    {
      v255 = *((unsigned __int16 *)v479 + --v481);
      LOWORD(v500[0]) = v255;
      v256 = v478;
      if (v478 == v477)
      {
        WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v476, (unint64_t)v500);
        v255 = LOWORD(v500[0]);
      }
      else
      {
        *(_WORD *)(v476 + 2 * v478) = v255;
        v478 = v256 + 1;
      }
      if (v475 >= 0)
        v257 = (uint64_t *)(2 * v475 + 8);
      else
        v257 = &v475;
      *(uint64_t *)((char *)v257 + ((v255 >> 3) & 0x1FF8)) |= 1 << v255;
      v258 = v464 + 16 * v255;
      v259 = *(unsigned int *)(v258 + 12);
      if ((_DWORD)v259)
      {
        v260 = *(_WORD **)v258;
        v261 = 2 * v259;
        do
        {
          v262 = (unsigned __int16)*v260;
          v263 = (uint64_t *)(2 * v475 + 8);
          if (v475 < 0)
            v263 = &v475;
          if (((1 << v262) & v263[v262 >> 6]) == 0 && !*(_WORD *)(v474 + 2 * v262))
          {
            LOWORD(v502) = *v260;
            v264 = *(unsigned __int16 *)(v465 + 2 * v262);
            *(_WORD *)(v465 + 2 * v262) = v264 - 1;
            if (HIDWORD(v460) == v264)
            {
              v327 = v482;
              if (v482[0] >= 0)
                v327 = (_QWORD *)(2 * v482[0] + 8);
              v327[v262 >> 6] &= ~(1 << v262);
              v328 = v481;
              if (v481 == v480)
              {
                WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v479, (unint64_t)&v502);
              }
              else
              {
                *((_WORD *)v479 + v481) = v262;
                v481 = v328 + 1;
              }
            }
          }
          ++v260;
          v261 -= 2;
        }
        while (v261);
      }
    }
    if ((v482[0] & 0x8000000000000000) == 0)
    {
      v265 = 8 * ((unint64_t)(*(_QWORD *)(2 * v482[0]) + 63) >> 6);
      while (v265)
      {
        v266 = *(_QWORD *)(2 * v482[0] + v265);
        v265 -= 8;
        if (v266)
          goto LABEL_375;
      }
LABEL_353:
      v254 = v501;
      continue;
    }
    if ((v482[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_353;
LABEL_375:
    v254 = 1;
    LOBYTE(v501) = 1;
  }
  while (v254);
  LODWORD(v488) = 0;
  if (DWORD2(v489))
  {
    if (HIDWORD(v489))
      HIDWORD(v489) = 0;
    v325 = v489;
    if ((_QWORD)v489)
    {
      *(_QWORD *)&v489 = 0;
      DWORD2(v489) = 0;
      WTF::fastFree(v325, (void *)v230, v231, v232, v233, v234, v235, v236);
    }
  }
  if (DWORD2(v490))
  {
    if (HIDWORD(v490))
      HIDWORD(v490) = 0;
    v326 = v490;
    if ((_QWORD)v490)
    {
      *(_QWORD *)&v490 = 0;
      DWORD2(v490) = 0;
      WTF::fastFree(v326, (void *)v230, v231, v232, v233, v234, v235, v236);
    }
  }
  v445 = v473;
  if (v473)
  {
    goto LABEL_458;
  }
  v273 = *v237;
  v274 = *(unsigned int *)(*v237 + 108);
  v275 = 67;
  v276 = 12738;
  v277 = 31;
  if (!(_DWORD)v274)
    goto LABEL_458;
  v278 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(v273 + 96) + 8 * v278))
  {
    if (v274 == ++v278)
      goto LABEL_458;
  }
  if ((_DWORD)v274 == (_DWORD)v278)
    goto LABEL_458;
  LODWORD(v279) = *(_DWORD *)(*v237 + 108);
  while (2)
  {
    if (v279 <= v278)
    {
      __break(0xC471u);
      JUMPOUT(0x19803244CLL);
    }
    v280 = *(_QWORD *)(*(_QWORD *)(v273 + 96) + 8 * v278);
    if (!*(_DWORD *)(v280 + 20))
    {
      v308 = 0;
      v303 = 0;
      v300 = *(unsigned int **)(v280 + 8);
      v301 = (unint64_t)v300;
      v304 = v300;
      goto LABEL_426;
    }
    v281 = 0;
    while (2)
    {
      v282 = *(_QWORD *)(v280 + 8);
      v283 = v282 + (v281 << 7);
      if ((*(__int16 *)(v283 + 120) - 107) > 6 || ((1 << (*(_WORD *)(v283 + 120) - 107)) & 0x43) == 0)
      {
        v285 = *(_QWORD *)v283;
        v286 = *(unsigned int *)(v283 + 12);
      }
      else
      {
        v286 = *(unsigned int *)(v283 + 12);
        v285 = *(_QWORD *)v283;
        if ((_DWORD)v286 == 2)
        {
          if (*(_BYTE *)(v285 + 8) != 1 || *(_BYTE *)(v285 + 40) != 1)
            goto LABEL_457;
          if (*(_WORD *)(v283 + 120) != 94)
            goto LABEL_441;
          v287 = v491;
          if (v491)
          {
            v432 = *(unsigned int *)(v285 + 16);
            if ((int)v432 < 1)
            {
              v432 = -(int)v432;
              if (v432 >= *((unsigned int *)v491 + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x19803245CLL);
              }
              v287 = (WTF *)((char *)v491 + 16);
            }
            else if (v432 >= *((_DWORD *)v491 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x198032454);
            }
            v275 = 67;
            v276 = 12738;
            v277 = 31;
            if (*(unsigned __int8 *)(*(_QWORD *)v287 + 2 * v432 + 1) <= 2u)
LABEL_441:
              LODWORD(v287) = 1;
            else
LABEL_457:
              LODWORD(v287) = 0;
          }
          v288 = v285 + 64;
LABEL_396:
          v289 = v474;
          v290 = v470;
          v291 = v285;
          do
          {
            v292 = *(char *)(v291 + 8);
            if (v292 <= 0xD)
            {
              if (((1 << v292) & 0x31C2) != 0)
              {
                v293 = *(_DWORD *)(v291 + 16);
                if (v293 <= -33)
                {
                  v295 = -v293;
                  do
                  {
                    v294 = (unsigned __int16)v295;
                    v295 = *(unsigned __int16 *)(v289 + 2 * (unsigned __int16)v295);
                  }
                  while (v295);
                  if (-(int)v294 >= 0xFFFFFFE0)
                  {
                    v329 = v294 + 31;
                    v330 = (char)-(char)v294;
                    v299 = (v294 + 32);
                    if ((v329 & 0x60) != 0)
                      v299 = v330;
                  }
                  else
                  {
                    LODWORD(v502) = -(int)v294;
                    v297 = v290[v294];
                    v298 = v297 & 0x7F;
                    if (v298 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v502);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(v484);
                      __break(0xC471u);
                      JUMPOUT(0x198032180);
                    }
                    if ((v297 & 0x60) != 0)
                      v299 = (char)(31 - v298);
                    else
                      v299 = v298 + 1;
                  }
                  *(_DWORD *)(v291 + 16) = v299;
                }
              }
              else if (v292 == 11)
              {
                v313 = *(_DWORD *)(v291 + 16);
                if (v313 <= -33)
                {
                  v310 = -v313;
                  do
                  {
                    v309 = (unsigned __int16)v310;
                    v310 = *(unsigned __int16 *)(v289 + 2 * (unsigned __int16)v310);
                  }
                  while (v310);
                  if (-(int)v309 < 0xFFFFFFE0)
                  {
                    LODWORD(v502) = -(int)v309;
                    v331 = v290[v309];
                    v332 = v331 & 0x7F;
                    if (v332 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v502);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(v484);
                      __break(0xC471u);
                      JUMPOUT(0x198032338);
                    }
                    if ((v331 & 0x60) != 0)
                      v333 = (char)(31 - v332);
                    else
                      v333 = v332 + 1;
                  }
                  else
                  {
                    v371 = v309 + 31;
                    v372 = (char)-(char)v309;
                    v333 = (v309 + 32);
                    if ((v371 & 0x60) != 0)
                      v333 = v372;
                  }
                  *(_DWORD *)(v291 + 16) = v333;
                }
                v314 = *(_DWORD *)(v291 + 20);
                if (v314 <= -33)
                {
                  v312 = -v314;
                  do
                  {
                    v311 = (unsigned __int16)v312;
                    v312 = *(unsigned __int16 *)(v289 + 2 * (unsigned __int16)v312);
                  }
                  while (v312);
                  if (-(int)v311 < 0xFFFFFFE0)
                  {
                    LODWORD(v502) = -(int)v311;
                    v334 = v290[v311];
                    v335 = v334 & 0x7F;
                    if (v335 == 127)
                    {
                      WTF::dataLog<char [21],JSC::B3::Air::Tmp,char [2]>((JSC::B3::Air::Tmp *)&v502);
                      WTF::dataLog<char [7]>();
                      WTF::dataLog<JSC::B3::Air::Code>(v484);
                      __break(0xC471u);
                      JUMPOUT(0x19803236CLL);
                    }
                    if ((v334 & 0x60) != 0)
                      v336 = (char)(31 - v335);
                    else
                      v336 = v335 + 1;
                  }
                  else
                  {
                    v373 = v311 + 31;
                    v374 = (char)-(char)v311;
                    v336 = (v311 + 32);
                    if ((v373 & 0x60) != 0)
                      v336 = v374;
                  }
                  *(_DWORD *)(v291 + 20) = v336;
                }
              }
            }
            v291 += 32;
          }
          while (v291 != v288);
          if ((_DWORD)v287)
          {
            v315 = *(_DWORD *)(v283 + 12);
            if (!v315)
            {
              __break(0xC471u);
              JUMPOUT(0x198032464);
            }
            if (*(_BYTE *)(v285 + 8) == 1)
            {
              if (v315 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19803246CLL);
              }
              if (*(_BYTE *)(v285 + 40) == 1 && *(_DWORD *)(v285 + 16) == *(_DWORD *)(v285 + 48))
              {
                v502 = (JSC::B3::Air::Inst *)v504;
                v503 = (WTF **)3;
                *(_QWORD *)v510 = 0;
                *(_WORD *)&v510[8] = 0;
                v510[10] &= 0xFCu;
                v317 = (_OWORD *)(v283 + 16);
                v316 = *(_QWORD *)v283;
                if (*(_QWORD *)v283 != v283 + 16)
                {
                  if (v316)
                  {
                    *(_QWORD *)v283 = 0;
                    *(_DWORD *)(v283 + 8) = 0;
                    WTF::fastFree(v316, v267, 67, 12738, 31, v270, v271, v272);
                    v277 = 31;
                    v276 = 12738;
                    v275 = 67;
                  }
                  *(_QWORD *)v283 = v317;
                  v338 = v502;
                  if (v502 == (JSC::B3::Air::Inst *)v504)
                  {
                    if (HIDWORD(v503))
                    {
                      v438 = 32 * HIDWORD(v503);
                      v439 = (__int128 *)v504;
                      do
                      {
                        v440 = *v439;
                        v441 = v439[1];
                        v439 += 2;
                        *v317 = v440;
                        v317[1] = v441;
                        v317 += 2;
                        v438 -= 32;
                      }
                      while (v438);
                    }
                  }
                  else
                  {
                    v502 = (JSC::B3::Air::Inst *)v504;
                    *(_QWORD *)v283 = v338;
                  }
                }
                *(_DWORD *)(v283 + 8) = (_DWORD)v503;
                v318 = HIDWORD(v503);
                HIDWORD(v503) = 0;
                *(_DWORD *)(v283 + 12) = v318;
                v319 = v282 + (v281 << 7);
                v320 = *(_QWORD *)v510;
                *(_DWORD *)(v319 + 119) = *(_DWORD *)&v510[7];
                *(_QWORD *)(v319 + 112) = v320;
                v321 = v502;
                if (v504 != (_QWORD *)v502 && v502)
                {
                  v502 = 0;
                  LODWORD(v503) = 0;
                  WTF::fastFree((unint64_t)v321, v267, 67, 12738, 31, v270, v271, v272);
                  v277 = 31;
                  v276 = 12738;
                  v275 = 67;
                }
              }
            }
          }
          goto LABEL_407;
        }
      }
      if (v286)
      {
        LODWORD(v287) = 0;
        v288 = v285 + 32 * v286;
        goto LABEL_396;
      }
LABEL_407:
      ++v281;
      v296 = *(unsigned int *)(v280 + 20);
      if (v281 < v296)
        continue;
      break;
    }
    v300 = *(unsigned int **)(v280 + 8);
    v301 = (unint64_t)&v300[32 * v296];
    if ((_DWORD)v296)
    {
      v302 = 0;
      v303 = 0;
      v304 = &v300[32 * v296];
      v305 = (unint64_t)v304;
      do
      {
        v306 = &v300[v302];
        if (*(_QWORD *)&v300[v302 + 28])
          v307 = 0;
        else
          v307 = LOWORD(v300[v302 + 30]) == 0;
        if (v307 && (*((_BYTE *)v306 + 122) & 3) == 0)
        {
          v443 = v305;
          if (!v300[v302 + 3])
          {
            if (v305 == *(_QWORD *)(v280 + 8) + ((unint64_t)*(unsigned int *)(v280 + 20) << 7))
            {
              v443 = (unint64_t)&v300[v302];
            }
            else if (v306 != v304)
            {
              v442 = v304;
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v304, v306, v305, 12738, 31, v270, v271, v272);
              v443 += (char *)&v300[v302] - (char *)v442;
            }
            v435 = *(_QWORD *)&v300[v302];
            if (&v300[v302 + 4] != (unsigned int *)v435 && v435)
            {
              v437 = &v300[v302];
              *(_QWORD *)v437 = 0;
              v437[2] = 0;
              WTF::fastFree(v435, v306, v275, v276, v277, v270, v271, v272);
            }
            v304 = &v300[v302 + 32];
            ++v303;
          }
          v305 = v443;
          v275 = 67;
          v276 = 12738;
          v277 = 31;
        }
        v302 += 32;
      }
      while ((unint64_t)&v300[v302] < v301);
      v300 = *(unsigned int **)(v280 + 8);
      v308 = *(_DWORD *)(v280 + 20);
      v301 = v305;
    }
    else
    {
      v308 = 0;
      v303 = 0;
      v304 = &v300[32 * v296];
    }
LABEL_426:
    v267 = &v300[32 * (unint64_t)v308];
    if (v304 != v267)
    {
      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v304, v267, v301, 12738, 31, v270, v271, v272);
      v277 = 31;
      v276 = 12738;
      v275 = 67;
      v308 = *(_DWORD *)(v280 + 20);
    }
    *(_DWORD *)(v280 + 20) = v308 - v303;
    v278 = (v278 + 1);
    v279 = *(unsigned int *)(v273 + 108);
    if (v279 > v278)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v273 + 96) + 8 * v278))
      {
        if (v279 == ++v278)
        {
          LODWORD(v278) = *(_DWORD *)(v273 + 108);
          break;
        }
      }
    }
    if ((_DWORD)v274 != (_DWORD)v278)
      continue;
    break;
  }
LABEL_458:
  v322 = v490;
  if ((_QWORD)v490)
  {
    *(_QWORD *)&v490 = 0;
    DWORD2(v490) = 0;
    WTF::fastFree(v322, v267, v275, v276, v277, v270, v271, v272);
  }
  v323 = v489;
  if ((_QWORD)v489)
  {
    *(_QWORD *)&v489 = 0;
    DWORD2(v489) = 0;
    WTF::fastFree(v323, v267, v275, v276, v277, v270, v271, v272);
  }
  if (v445)
    goto LABEL_463;
LABEL_516:
  if ((v499 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v499, v324, v90, v91, v92, v93, v94, v95);
  JSC::B3::Air::fixSpillsAfterTerminals(v449, (JSC::B3::Air::Code *)v324, v90, v91, v92, v93, v94, v95);
  v364 = v451[0];
  if (v451[0])
  {
    v451[0] = 0;
    LODWORD(v451[1]) = 0;
    WTF::fastFree((unint64_t)v364, v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  }
  v365 = v450[0];
  if (v450[0])
  {
    v450[0] = 0;
    LODWORD(v450[1]) = 0;
    WTF::fastFree((unint64_t)v365, v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  }
  if ((v455.i64[1] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v455.i64[1], v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  if ((v455.i64[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v455.i64[0], v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  v366 = v454;
  v454 = 0;
  if (v366)
    WTF::fastFree((unint64_t)v366, v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  v367 = v453;
  v453 = 0;
  if (v367)
    WTF::fastFree((unint64_t)v367, v357, (uint64_t)v358, v359, v360, v361, v362, v363);
  v368 = (JSC::B3::Air *)v456[0];
  *(_QWORD *)(v456[0] + 304) = v456[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v458)
      v434 = (WTF *)((char *)v458 + 16);
    else
      v434 = 0;
    JSC::B3::Air::validate(v368, v434, v358, v359, v360, v361, v362, v363);
  }
  v369 = v458;
  v458 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 1)
      WTF::fastFree((unint64_t)v369, v357, (uint64_t)v358, v359, v360, v361, v362, v363);
    else
      --*(_DWORD *)v369;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v457);
}

void JSC::B3::Air::allocateStackByGraphColoring(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::Code *v9;
  JSC::B3::Air::Code *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  unint64_t i;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  WTF **v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t ***v41;
  WTF ****v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF **v57;
  int v58;
  __int16 *v59;
  __int16 v60;
  char v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  char v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unsigned int v79;
  _BYTE *v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int *v98;
  uint64_t v99;
  unint64_t v100;
  WTF *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unsigned int v109;
  unsigned int *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  WTF **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  unsigned int *v144;
  unint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  int v148;
  unsigned int *v149;
  unsigned int *v150;
  BOOL v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  WTF **v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  WTF **v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  _DWORD *v186;
  WTF *v187;
  _BYTE *v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unsigned int *v207;
  uint64_t v208;
  _DWORD *v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v212;
  WTF **v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF **v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF **v236;
  WTF *v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  unsigned int v245;
  WTF *v246;
  WTF **v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int v260;
  uint64_t **v261;
  char v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  WTF *v275;
  WTF *v276;
  unsigned int v277;
  unsigned int v278;
  __int16 v279;
  unsigned int v280;
  BOOL v282;
  uint64_t **v283;
  unsigned int v284;
  unsigned int v285;
  __int128 *v286;
  __int16 v287;
  double v288;
  uint64_t v289;
  unsigned int *v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  unint64_t v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  unint64_t v300;
  __int128 *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  __int128 *v307;
  uint64_t v308;
  uint64_t v309;
  WTF **v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  WTF *v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  WTF *v326;
  WTF *v327;
  WTF *v328;
  uint64_t v329;
  uint64_t v330;
  WTF *v331;
  uint64_t v332;
  unsigned int v333;
  int v334;
  void *v335;
  JSC::B3::Air *v336;
  WTF *v337;
  JSC::B3::Air::Code *v338;
  unint64_t v339;
  unsigned int *v340;
  unsigned int *v341;
  uint64_t v342;
  __int128 *v343;
  __int128 v344;
  __int128 v345;
  WTF **v346;
  uint64_t v347;
  int v348;
  WTF **v349;
  WTF *v350;
  int v351;
  unsigned int v352;
  __int128 v353;
  WTF *v354;
  uint64_t v355;
  void *__src;
  int v357;
  unsigned int v358;
  _QWORD v359[3];
  uint64_t v360;
  WTF *v361;
  WTF *v362;
  uint64_t v363;
  _QWORD v364[12];
  _BYTE v365[11];
  _BYTE *v366;
  unsigned int *v367;
  _BYTE v368[32];
  uint64_t v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  uint64_t v373;
  WTF **v374;
  WTF ***v375;
  WTF ***v376;
  unsigned __int8 v377[16];

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v359, this, (uint64_t)"allocateStackByGraphColoring", 29, a5, a6, a7, a8);
  JSC::B3::Air::handleCalleeSaves((JSC::B3::Air *)this, v9);
  JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize((JSC::B3::Air *)this, v10, v11, v12, v13, v14, v15, v16, (uint64_t)&__src);
  v24 = this;
  v25 = *((unsigned int *)this + 19);
  v26 = g_config;
  if (!(_DWORD)v25)
    goto LABEL_423;
  v27 = 0;
  v28 = v24[8];
  while (!*((_QWORD *)v28 + v27))
  {
    if (v25 == ++v27)
      goto LABEL_405;
  }
  if ((_DWORD)v25 != (_DWORD)v27)
  {
    while (*(_QWORD *)(*((_QWORD *)v28 + v27) + 16))
    {
      v27 = (v27 + 1);
      if (v25 > v27)
      {
        while (!*((_QWORD *)v28 + v27))
        {
          if (v25 == ++v27)
            goto LABEL_405;
        }
      }
      if ((_DWORD)v25 == (_DWORD)v27)
        goto LABEL_405;
    }
    if (v25 > 0x18F)
    {
      if (v25 > 0xFFFE)
      {
        v310 = v24;
      }
      else
      {
        v310 = v24;
      }
      v24 = v310;
      goto LABEL_405;
    }
    v346 = v24;
    v349 = v24;
    v352 = v25;
    v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v25));
    v351 = v25;
    v350 = v29;
    for (i = 0; i < v352; ++i)
      *((_DWORD *)v29 + i) = i;
    v353 = xmmword_199150490;
    v354 = 0;
    v355 = 0;
    v31 = (uint64_t)v349;
    v32 = *((_DWORD *)v349 + 19);
    WORD6(v353) = v32;
    v33 = (v32 * v32);
    if (v33 >= 0x40)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v353, v33, 0);
      v31 = (uint64_t)v349;
    }
    JSC::B3::Air::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::Liveness((uint64_t)v368, v31);
    v35 = v349;
    v347 = *((unsigned int *)v349 + 27);
    if (!(_DWORD)v347)
      goto LABEL_219;
    v36 = 0;
    while (!*((_QWORD *)v349[12] + v36))
    {
      if (v347 == ++v36)
        goto LABEL_219;
    }
    if ((_DWORD)v347 == (_DWORD)v36)
      goto LABEL_219;
    v37 = 1;
    v38 = &v366;
    v39 = 21;
    v40 = &JSC::B3::Air::g_formTable;
    v41 = (uint64_t ***)&v374;
    v42 = &v376;
    LODWORD(v43) = *((_DWORD *)v349 + 27);
LABEL_20:
    if (v43 <= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x198033F10);
    }
    v348 = v36;
    v44 = (unsigned int *)*((_QWORD *)v35[12] + v36);
    v366 = v368;
    v367 = v44;
    v372 = 0;
    v45 = v373 + 32 * *v44;
    v46 = *(unsigned int *)(v45 + 12);
    if ((_DWORD)v46)
    {
      v47 = *(_DWORD **)v45;
      v48 = v369;
      v49 = 4 * v46;
      do
      {
        v50 = *v47;
        v51 = *(unsigned int *)(v48 + 4 * v50);
        v52 = v372;
        if (v372 <= v51 || *(_DWORD *)(v370 + 4 * v51) != (_DWORD)v50)
        {
          LODWORD(v362) = *v47;
          if (v372 == v371)
          {
            v186 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v370, v372 + 1, (unint64_t)&v362);
            v42 = &v376;
            v41 = (uint64_t ***)&v374;
            v40 = &JSC::B3::Air::g_formTable;
            v39 = 21;
            v38 = &v366;
            v37 = 1;
            *(_DWORD *)(v370 + 4 * v372) = *v186;
            v48 = v369;
          }
          else
          {
            *(_DWORD *)(v370 + 4 * v372) = v50;
          }
          ++v372;
          *(_DWORD *)(v48 + 4 * v50) = v52;
        }
        ++v47;
        v49 -= 4;
      }
      while (v49);
    }
    v53 = v44[5];
    if (!(_DWORD)v53)
    {
LABEL_158:
      LODWORD(v138) = 0;
      v148 = 0;
      v144 = (unsigned int *)*((_QWORD *)v44 + 1);
      v145 = (unint64_t)v144;
      v149 = v144;
      goto LABEL_151;
    }
    while (1)
    {
      v54 = v53 - 1;
      if (v44[5] <= (int)v53 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198033E90);
      }
      v55 = (v53 - 1);
      v56 = *((_QWORD *)v44 + 1);
      v57 = (WTF **)(v56 + (v55 << 7));
      if ((*((_BYTE *)v57 + 122) & 1) == 0)
      {
        v59 = (__int16 *)(v57 + 15);
        v58 = *((__int16 *)v57 + 60);
        v60 = *((_WORD *)v57 + 60);
        switch(v60)
        {
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 326:
          case 327:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 334:
          case 445:
          case 446:
          case 449:
          case 450:
          case 451:
            break;
          case 268:
          case 269:
          case 282:
          case 283:
          case 284:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 310:
          case 311:
          case 312:
          case 313:
          case 314:
          case 315:
          case 316:
          case 317:
          case 318:
          case 319:
          case 320:
          case 321:
          case 322:
          case 323:
          case 324:
          case 325:
          case 335:
          case 336:
          case 337:
          case 338:
          case 339:
          case 340:
          case 341:
          case 342:
          case 343:
          case 344:
          case 345:
          case 346:
          case 347:
          case 348:
          case 349:
          case 350:
          case 351:
          case 352:
          case 353:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 366:
          case 367:
          case 368:
          case 369:
          case 370:
          case 371:
          case 372:
          case 373:
          case 374:
          case 375:
          case 376:
          case 377:
          case 378:
          case 379:
          case 380:
          case 381:
          case 382:
          case 383:
          case 384:
          case 385:
          case 386:
          case 387:
          case 388:
          case 389:
          case 390:
          case 391:
          case 392:
          case 393:
          case 394:
          case 395:
          case 396:
          case 397:
          case 398:
          case 399:
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
          case 405:
          case 406:
          case 407:
          case 408:
          case 409:
          case 410:
          case 411:
          case 412:
          case 413:
          case 414:
          case 415:
          case 416:
          case 417:
          case 418:
          case 419:
          case 420:
          case 421:
          case 422:
          case 423:
          case 424:
          case 425:
          case 426:
          case 427:
          case 428:
          case 429:
          case 430:
          case 431:
          case 432:
          case 433:
          case 434:
          case 435:
          case 436:
          case 437:
          case 438:
          case 439:
          case 440:
          case 441:
          case 442:
          case 443:
          case 444:
          case 447:
            goto LABEL_41;
          case 448:
            if (!*((_DWORD *)v57 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x198033F20);
            }
            v61 = (*(uint64_t (**)(_QWORD, unint64_t, WTF ***, WTF ****, void *, uint64_t, _BYTE **, uint64_t))(**(_QWORD **)*v57 + 96))(*(_QWORD *)*v57, v56 + ((unint64_t)(v53 - 1) << 7), &v374, &v376, &JSC::B3::Air::g_formTable, 21, &v366, 1);
            v37 = 1;
            v38 = &v366;
            v39 = 21;
            v40 = &JSC::B3::Air::g_formTable;
            v41 = (uint64_t ***)&v374;
            v42 = &v376;
            if ((v61 & 1) != 0)
              break;
            v58 = *v59;
            v60 = *v59;
LABEL_41:
            v377[0] = 1;
            v374 = (WTF **)v377;
            v375 = (WTF ***)&v366;
            if ((v58 - 446) <= 5)
            {
              v363 = (uint64_t)&v362;
              v364[0] = &v374;
              v42 = &v376;
              v41 = (uint64_t ***)&v374;
              v40 = &JSC::B3::Air::g_formTable;
              v39 = 21;
              v38 = &v366;
              v37 = 1;
              v67 = v377[0];
            }
            else
            {
              v63 = *((unsigned int *)v57 + 3);
              if (!(_DWORD)v63)
                goto LABEL_89;
              v64 = 0;
              v65 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                  + 21 * v60
                  + ((unint64_t)((v63 - 1) * v63) >> 1);
              v66 = 32 * v63;
              v67 = 1;
              do
              {
                v69 = *v65++;
                v68 = v69;
                if ((v69 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198033C94);
                }
                if ((v68 & 0xFu) - 8 < 3
                  || (v68 & 0xC) == 4
                  && ((v70 = (_QWORD *)((char *)*v57 + v64), *((_BYTE *)v70 + 8) != 9)
                   || (v135 = *v70, *(_BYTE *)(v135 + 4) != 1)
                   || (v136 = *(unsigned int *)(v135 + 8),
                       v137 = *(unsigned int *)(*((_QWORD *)v366 + 4) + 4 * v136),
                       *((_DWORD *)v366 + 15) > v137)
                   && *(_DWORD *)(*((_QWORD *)v366 + 6) + 4 * v137) == (_DWORD)v136))
                {
                  v67 = 0;
                  v377[0] = 0;
                }
                v64 += 32;
              }
              while (v66 != v64);
            }
            if (!v67)
              break;
LABEL_89:
            v362 = (WTF *)v364;
            v363 = 3;
            *(_QWORD *)v365 = 0;
            *(_WORD *)&v365[8] = 0;
            v365[10] &= 0xFCu;
            v101 = (WTF *)(v57 + 2);
            v100 = (unint64_t)*v57;
            if (*v57 != (WTF *)(v57 + 2))
            {
              if (v100)
              {
                *v57 = 0;
                *((_DWORD *)v57 + 2) = 0;
                WTF::fastFree(v100, (void *)v34, (uint64_t)&v374, (uint64_t)&v376, (uint64_t)&JSC::B3::Air::g_formTable, 21, (uint64_t)&v366, 1);
                v42 = &v376;
                v41 = (uint64_t ***)&v374;
                v40 = &JSC::B3::Air::g_formTable;
                v39 = 21;
                v38 = &v366;
                v37 = 1;
              }
              *v57 = v101;
              v187 = v362;
              if (v362 == (WTF *)v364)
              {
                if (HIDWORD(v363))
                {
                  v342 = 32 * HIDWORD(v363);
                  v343 = (__int128 *)v364;
                  do
                  {
                    v344 = *v343;
                    v345 = v343[1];
                    v343 += 2;
                    *(_OWORD *)v101 = v344;
                    *((_OWORD *)v101 + 1) = v345;
                    v101 = (WTF *)((char *)v101 + 32);
                    v342 -= 32;
                  }
                  while (v342);
                }
              }
              else
              {
                v362 = (WTF *)v364;
                *v57 = v187;
              }
            }
            *((_DWORD *)v57 + 2) = v363;
            v102 = HIDWORD(v363);
            HIDWORD(v363) = 0;
            *((_DWORD *)v57 + 3) = v102;
            v103 = v56 + (v55 << 7);
            v104 = *(_QWORD *)v365;
            *(_DWORD *)(v103 + 119) = *(_DWORD *)&v365[7];
            *(_QWORD *)(v103 + 112) = v104;
            v105 = v362;
            if (v364 != (_QWORD *)v362 && v362)
            {
              v362 = 0;
              LODWORD(v363) = 0;
              WTF::fastFree((unint64_t)v105, (void *)v34, (uint64_t)&v374, (uint64_t)&v376, (uint64_t)&JSC::B3::Air::g_formTable, 21, (uint64_t)&v366, 1);
              v42 = &v376;
              v41 = (uint64_t ***)&v374;
              v40 = &JSC::B3::Air::g_formTable;
              v39 = 21;
              v38 = &v366;
              v37 = 1;
            }
            break;
          default:
            v62 = (v58 - 123) > 0x12 || ((1 << (v58 - 123)) & 0x7FD55) == 0;
            if (!v62)
              break;
            goto LABEL_41;
        }
      }
      v71 = v44[5];
      if (v71 <= v54)
        v72 = 0;
      else
        v72 = *((_QWORD *)v44 + 1) + (v55 << 7);
      if (v53 >= v71)
        v73 = 0;
      else
        v73 = *((_QWORD *)v44 + 1) + (v53 << 7);
      if (!v72)
        goto LABEL_95;
      v74 = *(__int16 *)(v72 + 120);
      if (*((_BYTE *)v26 + 1688))
      {
        if (v74 > 93)
        {
          v75 = 0;
          if (v74 > 106)
          {
            switch(v74)
            {
              case 'l':
LABEL_60:
                v75 = 1;
                goto LABEL_61;
              case 'k':
                goto LABEL_61;
              case 'q':
                v75 = 2;
LABEL_61:
                v76 = *(unsigned int *)(v72 + 12);
                if ((_DWORD)v76 != 3
                  || (v183 = *(_QWORD *)v72, *(_BYTE *)(*(_QWORD *)v72 + 8) != 9)
                  || (v184 = *(_DWORD **)v183, *(_BYTE *)(*(_QWORD *)v183 + 4) != 1)
                  || *v184 != dword_1991505F0[v75]
                  || *(_BYTE *)(v183 + 40) != 9
                  || (v185 = *(_QWORD *)(v183 + 32), *(_BYTE *)(v185 + 4) != 1)
                  || *(_DWORD *)v185 != dword_1991505F0[v75])
                {
                  v374 = (WTF **)&v366;
                  v375 = &v349;
                  v376 = &v374;
                  *(_QWORD *)v377 = &v376;
                  goto LABEL_63;
                }
                v287 = *(_DWORD *)(v185 + 8);
                v288 = *((double *)v44 + 13);
                LOWORD(v362) = v184[2];
                WORD1(v362) = v287;
                *(float *)&v288 = v288;
                HIDWORD(v362) = LODWORD(v288);
                if (HIDWORD(v355) == (_DWORD)v355)
                {
                  v42 = &v376;
                  v41 = (uint64_t ***)&v374;
                  v40 = &JSC::B3::Air::g_formTable;
                  v39 = 21;
                  v38 = &v366;
                  v37 = 1;
                }
                else
                {
                  *((_QWORD *)v354 + HIDWORD(v355)) = v362;
                  ++HIDWORD(v355);
                }
                v289 = *((unsigned int *)v366 + 15);
                if ((_DWORD)v289)
                {
                  v290 = (unsigned int *)*((_QWORD *)v366 + 6);
                  v291 = *(_QWORD *)(*(_QWORD *)v366 + 64);
                  v292 = (unsigned __int16)v362;
                  v293 = WORD1(v362);
                  v294 = DWORD2(v353);
                  v295 = WORD6(v353);
                  v296 = WORD6(v353) * (unint64_t)WORD1(v362);
                  v297 = 4 * v289;
                  do
                  {
                    v298 = *(_DWORD *)(*(_QWORD *)(v291 + 8 * *v290) + 8);
                    if (v298 != v292 && (_DWORD)v293 != (unsigned __int16)v298)
                    {
                      v299 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v291 + 8 * *v290) + 8);
                      v300 = v296 + (unsigned __int16)v298;
                      if ((uint64_t)v353 >= 0)
                        v301 = (__int128 *)(2 * v353 + 8);
                      else
                        v301 = &v353;
                      v302 = (v300 >> 3) & 0x3FFFFFF8;
                      v303 = 1 << v300;
                      v304 = *(_QWORD *)((char *)v301 + v302);
                      v62 = (v304 & v303) == 0;
                      v305 = v304 | v303;
                      v41 = (uint64_t ***)&v374;
                      *(_QWORD *)((char *)v301 + v302) = v305;
                      if (v62)
                        ++v294;
                      v306 = v293 + v299 * (unint64_t)v295;
                      if ((uint64_t)v353 >= 0)
                        v307 = (__int128 *)(2 * v353 + 8);
                      else
                        v307 = &v353;
                      v42 = &v376;
                      v308 = (v306 >> 3) & 0x3FFFFFF8;
                      v309 = 1 << v306;
                      v34 = *(_QWORD *)((char *)v307 + v308);
                      *(_QWORD *)((char *)v307 + v308) = v34 | v309;
                      if ((v34 & v309) == 0)
                        ++v294;
                      DWORD2(v353) = v294;
                    }
                    ++v290;
                    v297 -= 4;
                  }
                  while (v297);
                }
LABEL_95:
                v374 = (WTF **)&v366;
                v375 = &v349;
                goto LABEL_96;
            }
          }
          else if (v74 == 94)
          {
            goto LABEL_61;
          }
        }
        else if (v74 == 90)
        {
          goto LABEL_60;
        }
      }
      v374 = (WTF **)&v366;
      v375 = &v349;
      v376 = &v374;
      *(_QWORD *)v377 = &v376;
      if ((v74 - 446) >= 6)
      {
        v76 = *(unsigned int *)(v72 + 12);
LABEL_63:
        if (v76)
        {
          v77 = 0;
          v78 = (char *)&JSC::B3::Air::g_formTable + 21 * v74 + ((unint64_t)((v76 - 1) * v76) >> 1);
          do
          {
            v79 = v78[v77];
            if ((v79 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198033CB4);
            }
            if ((v79 & 0xC) == 4)
            {
              v80 = (_BYTE *)(*(_QWORD *)v72 + 32 * v77);
              if (v80[8] == 9)
              {
                v152 = *(_QWORD *)v80;
                if (*(_BYTE *)(*(_QWORD *)v80 + 4) == 1)
                {
                  v153 = **v376;
                  v154 = *((unsigned int *)v153 + 15);
                  if ((_DWORD)v154)
                  {
                    v155 = v376[1];
                    v98 = (unsigned int *)*((_QWORD *)v153 + 6);
                    v156 = *(_QWORD *)(*(_QWORD *)v153 + 64);
                    v157 = *(unsigned __int16 *)(v152 + 8);
                    v99 = 4 * v154;
                    do
                    {
                      if ((_DWORD)v157 != (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v156 + 8 * *v98) + 8))
                      {
                        v81 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v156 + 8 * *v98) + 8);
                        v82 = *((unsigned __int16 *)v155 + 18);
                        v83 = v81 + *((unsigned __int16 *)v155 + 18) * (unint64_t)v157;
                        v84 = (uint64_t)v155[3];
                        if (v84 >= 0)
                          v85 = 2 * v84 + 8;
                        else
                          v85 = (uint64_t)(v155 + 3);
                        v86 = (v83 >> 3) & 0x3FFFFFF8;
                        v87 = *(_QWORD *)(v85 + v86);
                        v88 = 1 << v83;
                        v62 = (v88 & v87) == 0;
                        v89 = v88 | v87;
                        v39 = 21;
                        *(_QWORD *)(v85 + v86) = v89;
                        v90 = *((_DWORD *)v155 + 8);
                        if (v62)
                          ++v90;
                        v91 = v157 + v82 * (unint64_t)v81;
                        v92 = (uint64_t)v155[3];
                        if (v92 >= 0)
                          v34 = 2 * v92 + 8;
                        else
                          v34 = (uint64_t)(v155 + 3);
                        v93 = (v91 >> 3) & 0x3FFFFFF8;
                        v94 = 1 << v91;
                        v95 = *(_QWORD *)(v34 + v93);
                        v62 = (v95 & v94) == 0;
                        v96 = v95 | v94;
                        v40 = &JSC::B3::Air::g_formTable;
                        *(_QWORD *)(v34 + v93) = v96;
                        v42 = &v376;
                        if (v62)
                          v97 = v90 + 1;
                        else
                          v97 = v90;
                        v41 = (uint64_t ***)&v374;
                        *((_DWORD *)v155 + 8) = v97;
                      }
                      ++v98;
                      v99 -= 4;
                    }
                    while (v99);
                  }
                }
              }
            }
            ++v77;
          }
          while (v77 != v76);
        }
        goto LABEL_96;
      }
      v362 = (WTF *)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v363 = (uint64_t)&v362;
      v364[0] = v377;
      JSC::B3::Air::Inst::forEachArgCustom(v72, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v362);
      v42 = &v376;
      v41 = (uint64_t ***)&v374;
      v40 = &JSC::B3::Air::g_formTable;
      v39 = 21;
      v38 = &v366;
      v37 = 1;
LABEL_96:
      if (v73)
      {
        v376 = &v374;
        *(_QWORD *)v377 = &v376;
        if ((*(__int16 *)(v73 + 120) - 446) <= 5)
        {
          v362 = (WTF *)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E0_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
          v363 = (uint64_t)&v362;
          v364[0] = v377;
          JSC::B3::Air::Inst::forEachArgCustom(v73, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E0_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v362);
          v42 = &v376;
          v41 = (uint64_t ***)&v374;
          v40 = &JSC::B3::Air::g_formTable;
          v39 = 21;
          v38 = &v366;
          v37 = 1;
        }
        else
        {
          v106 = *(unsigned int *)(v73 + 12);
          if ((_DWORD)v106)
          {
            v107 = 0;
            v108 = (char *)&JSC::B3::Air::g_formTable
                 + 21 * *(__int16 *)(v73 + 120)
                 + ((unint64_t)((v106 - 1) * v106) >> 1);
            do
            {
              v109 = v108[v107];
              if ((v109 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x198033CD4);
              }
              if ((v109 & 0xF) - 8 <= 2)
              {
                v158 = (_BYTE *)(*(_QWORD *)v73 + 32 * v107);
                if (v158[8] == 9)
                {
                  v159 = *(_QWORD *)v158;
                  if (*(_BYTE *)(*(_QWORD *)v158 + 4) == 1)
                  {
                    v160 = **v376;
                    v161 = *((unsigned int *)v160 + 15);
                    if ((_DWORD)v161)
                    {
                      v162 = v376[1];
                      v163 = (unsigned int *)*((_QWORD *)v160 + 6);
                      v164 = *(_QWORD *)(*(_QWORD *)v160 + 64);
                      v165 = *(unsigned __int16 *)(v159 + 8);
                      v166 = 4 * v161;
                      do
                      {
                        if ((_DWORD)v165 != (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v164 + 8 * *v163) + 8))
                        {
                          v167 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v164 + 8 * *v163) + 8);
                          v168 = *((unsigned __int16 *)v162 + 18);
                          v169 = v167 + *((unsigned __int16 *)v162 + 18) * (unint64_t)v165;
                          v170 = (uint64_t)v162[3];
                          if (v170 >= 0)
                            v171 = 2 * v170 + 8;
                          else
                            v171 = (uint64_t)(v162 + 3);
                          v172 = (v169 >> 3) & 0x3FFFFFF8;
                          v173 = *(_QWORD *)(v171 + v172);
                          v174 = 1 << v169;
                          v62 = (v174 & v173) == 0;
                          v34 = v174 | v173;
                          v40 = &JSC::B3::Air::g_formTable;
                          *(_QWORD *)(v171 + v172) = v34;
                          LODWORD(v34) = *((_DWORD *)v162 + 8);
                          if (v62)
                            v34 = (v34 + 1);
                          else
                            v34 = v34;
                          v175 = v165 + v168 * (unint64_t)v167;
                          v176 = (uint64_t)v162[3];
                          if (v176 >= 0)
                            v177 = 2 * v176 + 8;
                          else
                            v177 = (uint64_t)(v162 + 3);
                          v178 = (v175 >> 3) & 0x3FFFFFF8;
                          v179 = 1 << v175;
                          v180 = *(_QWORD *)(v177 + v178);
                          v62 = (v180 & v179) == 0;
                          v181 = v180 | v179;
                          v42 = &v376;
                          *(_QWORD *)(v177 + v178) = v181;
                          v41 = (uint64_t ***)&v374;
                          if (v62)
                            v182 = v34 + 1;
                          else
                            v182 = v34;
                          *((_DWORD *)v162 + 8) = v182;
                        }
                        ++v163;
                        v166 -= 4;
                      }
                      while (v166);
                    }
                  }
                }
              }
              ++v107;
            }
            while (v107 != v106);
          }
        }
      }
      v111 = v366;
      v110 = v367;
      v112 = *((_QWORD *)v366 + 1);
      v113 = *(_QWORD *)(v112 + 16 * *v367);
      v114 = v113 + (v53 << 6);
      v115 = *(unsigned int *)(v114 + 44);
      if ((_DWORD)v115)
      {
        v127 = *(unsigned int **)(v114 + 32);
        v128 = *((_QWORD *)v366 + 4);
        v129 = 4 * v115;
        v130 = *((_DWORD *)v366 + 15);
        do
        {
          v131 = *v127;
          v132 = *(unsigned int *)(v128 + 4 * v131);
          if (v130 > v132)
          {
            v133 = *((_QWORD *)v111 + 6);
            if (*(_DWORD *)(v133 + 4 * v132) == (_DWORD)v131)
            {
              v134 = *(unsigned int *)(v133 + 4 * v130 - 4);
              *(_DWORD *)(v133 + 4 * v132) = v134;
              *(_DWORD *)(v128 + 4 * v134) = v132;
              v130 = *((_DWORD *)v111 + 15) - 1;
              *((_DWORD *)v111 + 15) = v130;
            }
          }
          ++v127;
          v129 -= 4;
        }
        while (v129);
        v113 = *(_QWORD *)(v112 + 16 * *v110);
      }
      v116 = v113 + (v55 << 6);
      v117 = *(unsigned int *)(v116 + 12);
      if ((_DWORD)v117)
      {
        v118 = *(_DWORD **)v116;
        v119 = v111 + 48;
        v120 = *((_QWORD *)v111 + 4);
        v121 = 4 * v117;
        do
        {
          v122 = v26;
          v123 = v35;
          v124 = *v118;
          v125 = *(unsigned int *)(v120 + 4 * v124);
          v126 = *((unsigned int *)v111 + 15);
          if (v126 <= v125 || *(_DWORD *)(*v119 + 4 * v125) != (_DWORD)v124)
          {
            LODWORD(v362) = *v118;
            if ((_DWORD)v126 == *((_DWORD *)v111 + 14))
            {
              v209 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v111 + 48), v126 + 1, (unint64_t)&v362);
              v42 = &v376;
              v41 = (uint64_t ***)&v374;
              v40 = &JSC::B3::Air::g_formTable;
              v39 = 21;
              v38 = &v366;
              v37 = 1;
              *(_DWORD *)(*((_QWORD *)v111 + 6) + 4 * *((unsigned int *)v111 + 15)) = *v209;
              v120 = *((_QWORD *)v111 + 4);
            }
            else
            {
              *(_DWORD *)(*v119 + 4 * v126) = v124;
            }
            ++*((_DWORD *)v111 + 15);
            *(_DWORD *)(v120 + 4 * v124) = v126;
          }
          ++v118;
          v121 -= 4;
          v35 = v123;
          v26 = v122;
        }
        while (v121);
      }
      v53 = v54;
      if (!(_DWORD)v54)
      {
        v138 = v44[5];
        if (!(_DWORD)v138)
          goto LABEL_158;
        v139 = *((_QWORD *)v44 + 1);
        v374 = (WTF **)&v366;
        v375 = &v349;
        if (!v139)
          goto LABEL_157;
        v376 = &v374;
        *(_QWORD *)v377 = &v376;
        if ((*(__int16 *)(v139 + 120) - 446) <= 5)
        {
          v362 = (WTF *)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E0_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
          v363 = (uint64_t)&v362;
          v364[0] = v377;
          JSC::B3::Air::Inst::forEachArgCustom(v139, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E0_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v362);
          v42 = &v376;
          v41 = (uint64_t ***)&v374;
          v40 = &JSC::B3::Air::g_formTable;
          v39 = 21;
          v38 = &v366;
          v37 = 1;
          v138 = v44[5];
          goto LABEL_140;
        }
        v140 = *(unsigned int *)(v139 + 12);
        if (!(_DWORD)v140)
        {
LABEL_157:
          v144 = (unsigned int *)*((_QWORD *)v44 + 1);
          v146 = &v144[32 * v138];
          goto LABEL_142;
        }
        v141 = 0;
        v142 = (char *)&JSC::B3::Air::g_formTable
             + 21 * *(__int16 *)(v139 + 120)
             + ((unint64_t)((v140 - 1) * v140) >> 1);
        do
        {
          v143 = v142[v141];
          if ((v143 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x198033E80);
          }
          if ((v143 & 0xF) - 8 <= 2)
          {
            v188 = (_BYTE *)(*(_QWORD *)v139 + 32 * v141);
            if (v188[8] == 9)
            {
              v210 = *(_QWORD *)v188;
              if (*(_BYTE *)(*(_QWORD *)v188 + 4) == 1)
              {
                v211 = **v376;
                v212 = *((unsigned int *)v211 + 15);
                if ((_DWORD)v212)
                {
                  v213 = v376[1];
                  v207 = (unsigned int *)*((_QWORD *)v211 + 6);
                  v214 = *(_QWORD *)(*(_QWORD *)v211 + 64);
                  v215 = *(unsigned __int16 *)(v210 + 8);
                  v208 = 4 * v212;
                  do
                  {
                    if ((_DWORD)v215 != (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v214 + 8 * *v207) + 8))
                    {
                      v189 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v214 + 8 * *v207) + 8);
                      v190 = *((unsigned __int16 *)v213 + 18);
                      v191 = v189 + *((unsigned __int16 *)v213 + 18) * (unint64_t)v215;
                      v192 = (uint64_t)v213[3];
                      if (v192 >= 0)
                        v193 = 2 * v192 + 8;
                      else
                        v193 = (uint64_t)(v213 + 3);
                      v194 = (v191 >> 3) & 0x3FFFFFF8;
                      v195 = *(_QWORD *)(v193 + v194);
                      v196 = 1 << v191;
                      v62 = (v196 & v195) == 0;
                      v197 = v196 | v195;
                      v38 = &v366;
                      *(_QWORD *)(v193 + v194) = v197;
                      v198 = *((_DWORD *)v213 + 8);
                      if (v62)
                        ++v198;
                      v199 = v215 + v190 * (unint64_t)v189;
                      v200 = (uint64_t)v213[3];
                      if (v200 >= 0)
                        v201 = 2 * v200 + 8;
                      else
                        v201 = (uint64_t)(v213 + 3);
                      v202 = (v199 >> 3) & 0x3FFFFFF8;
                      v203 = 1 << v199;
                      v204 = *(_QWORD *)(v201 + v202);
                      v62 = (v204 & v203) == 0;
                      v205 = v204 | v203;
                      v39 = 21;
                      *(_QWORD *)(v201 + v202) = v205;
                      v41 = (uint64_t ***)&v374;
                      v40 = &JSC::B3::Air::g_formTable;
                      if (v62)
                        v206 = v198 + 1;
                      else
                        v206 = v198;
                      v42 = &v376;
                      *((_DWORD *)v213 + 8) = v206;
                    }
                    ++v207;
                    v208 -= 4;
                  }
                  while (v208);
                }
              }
            }
          }
          ++v141;
        }
        while (v141 != v140);
LABEL_140:
        v144 = (unsigned int *)*((_QWORD *)v44 + 1);
        v145 = (unint64_t)&v144[32 * v138];
        if (v138)
        {
          v146 = &v144[32 * v138];
LABEL_142:
          v147 = 0;
          v148 = 0;
          v149 = v146;
          v145 = (unint64_t)v146;
          do
          {
            v150 = &v144[v147];
            if (*(_QWORD *)&v144[v147 + 28])
              v151 = 0;
            else
              v151 = LOWORD(v144[v147 + 30]) == 0;
            if (v151 && (*((_BYTE *)v150 + 122) & 3) == 0)
            {
              if (!v144[v147 + 3])
              {
                if (v145 == *((_QWORD *)v44 + 1) + ((unint64_t)v44[5] << 7))
                {
                  v145 = (unint64_t)&v144[v147];
                }
                else if (v150 != v149)
                {
                  v340 = v149;
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v149, v150, v145, (uint64_t)&v376, (uint64_t)&JSC::B3::Air::g_formTable, 21, (uint64_t)&v366, 1);
                  v145 += (char *)&v144[v147] - (char *)v340;
                }
                v339 = *(_QWORD *)&v144[v147];
                if (&v144[v147 + 4] != (unsigned int *)v339 && v339)
                {
                  v341 = &v144[v147];
                  *(_QWORD *)v341 = 0;
                  v341[2] = 0;
                  WTF::fastFree(v339, v150, (uint64_t)v41, (uint64_t)v42, (uint64_t)v40, v39, (uint64_t)v38, v37);
                }
                v149 = &v144[v147 + 32];
                ++v148;
              }
              v26 = g_config;
              v37 = 1;
              v38 = &v366;
              v39 = 21;
              v40 = &JSC::B3::Air::g_formTable;
              v41 = (uint64_t ***)&v374;
              v42 = &v376;
            }
            v147 += 32;
          }
          while (&v144[v147] < v146);
          v144 = (unsigned int *)*((_QWORD *)v44 + 1);
          LODWORD(v138) = v44[5];
        }
        else
        {
          v148 = 0;
          v149 = (unsigned int *)*((_QWORD *)v44 + 1);
        }
LABEL_151:
        v34 = (uint64_t)&v144[32 * (unint64_t)v138];
        if (v149 != (unsigned int *)v34)
        {
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v149, (unsigned int *)v34, v145, (uint64_t)&v376, (uint64_t)&JSC::B3::Air::g_formTable, 21, (uint64_t)&v366, 1);
          v42 = &v376;
          v41 = (uint64_t ***)&v374;
          v40 = &JSC::B3::Air::g_formTable;
          v39 = 21;
          v38 = &v366;
          v37 = 1;
          LODWORD(v138) = v44[5];
        }
        v44[5] = v138 - v148;
        v36 = (v348 + 1);
        v43 = *((unsigned int *)v35 + 27);
        if (v43 > v36)
        {
          while (!*((_QWORD *)v35[12] + v36))
          {
            if (v43 == ++v36)
            {
              LODWORD(v36) = *((_DWORD *)v35 + 27);
              break;
            }
          }
        }
        if ((_DWORD)v347 == (_DWORD)v36)
        {
LABEL_219:
          v216 = 126 - 2 * __clz(HIDWORD(v355));
          if (HIDWORD(v355))
            v217 = v216;
          else
            v217 = 0;
          if (HIDWORD(v355))
          {
            v275 = v354;
            v276 = (WTF *)((char *)v354 + 8 * HIDWORD(v355));
            do
            {
              v277 = *(unsigned __int16 *)v275;
              if (v352 <= v277)
              {
LABEL_457:
                __break(0xC471u);
                JUMPOUT(0x198033FA0);
              }
              while (1)
              {
                v278 = *((_DWORD *)v350 + v277);
                if (v278 == v277)
                  break;
                if (v352 <= v278)
                  goto LABEL_457;
                v277 = *((_DWORD *)v350 + v277);
              }
              v284 = *((unsigned __int16 *)v275 + 1);
              if (v352 <= v284)
              {
LABEL_458:
                __break(0xC471u);
                JUMPOUT(0x198033FA8);
              }
              while (1)
              {
                v285 = *((_DWORD *)v350 + v284);
                if (v285 == v284)
                  break;
                if (v352 <= v285)
                  goto LABEL_458;
                v284 = *((_DWORD *)v350 + v284);
              }
              if ((unsigned __int16)v277 != (unsigned __int16)v284)
              {
                v286 = &v353;
                if ((uint64_t)v353 >= 0)
                  v286 = (__int128 *)(2 * v353 + 8);
                if (((*(_QWORD *)((char *)v286
                                 + ((((unsigned __int16)v284 + WORD6(v353) * (unint64_t)(unsigned __int16)v277) >> 3) & 0x3FFFFFF8)) >> (v284 + BYTE12(v353) * v277)) & 1) == 0)
                {
                  if (v352 <= (unsigned __int16)v277)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198033FB0);
                  }
                  *((_DWORD *)v350 + (unsigned __int16)v277) = (unsigned __int16)v284;
                  WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>::operator[]((uint64_t)&v362, (unint64_t *)&v353, (unsigned __int16)v277);
                  v279 = WORD2(v363);
                  v374 = &v362;
                  v375 = (WTF ***)HIDWORD(v363);
                  v283 = (uint64_t **)&v363;
                  if (HIDWORD(v363) < LODWORD(v364[0]))
                  {
                    do
                    {
                      WTF::InterferenceBitVector<unsigned short>::Iterable::iterator::operator++((uint64_t ***)&v374);
                      v279 = (__int16)v375;
                      v280 = *((_DWORD *)v374 + 4);
                      v282 = v375 >= v280 && LODWORD(v364[0]) >= v280;
                      if ((_DWORD)v375 == LODWORD(v364[0]))
                        break;
                      v283 = (uint64_t **)(v374 + 1);
                    }
                    while (!v282);
                  }
                }
              }
              v275 = (WTF *)((char *)v275 + 8);
            }
            while (v275 != v276);
          }
          v225 = v349;
          v226 = *((unsigned int *)v349 + 27);
          if ((_DWORD)v226)
          {
            v227 = 0;
            while (!*((_QWORD *)v349[12] + v227))
            {
              if (v226 == ++v227)
                goto LABEL_274;
            }
            if ((_DWORD)v226 != (_DWORD)v227)
            {
              v228 = *((_DWORD *)v349 + 27);
              while (1)
              {
                if (v228 <= v227)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198033F18);
                }
                v229 = *((_QWORD *)v225[12] + v227);
                v230 = *(unsigned int *)(v229 + 20);
                if ((_DWORD)v230)
                  break;
LABEL_256:
                v227 = (v227 + 1);
                if (v228 > v227)
                {
                  while (!*((_QWORD *)v225[12] + v227))
                  {
                    if (v228 == ++v227)
                    {
                      LODWORD(v227) = v228;
                      break;
                    }
                  }
                }
                if ((_DWORD)v226 == (_DWORD)v227)
                  goto LABEL_274;
              }
              v231 = *(_QWORD *)(v229 + 8);
              v232 = v231 + (v230 << 7);
              while (2)
              {
                v233 = *(unsigned int *)(v231 + 12);
                if ((_DWORD)v233)
                {
                  v234 = *(_QWORD *)v231;
                  v235 = *(_QWORD *)v231 + 32 * v233;
                  v236 = v349;
                  v237 = v350;
                  do
                  {
                    if (*(_BYTE *)(v234 + 8) == 9)
                    {
                      v238 = *(unsigned int *)(*(_QWORD *)v234 + 8);
                      if (v352 <= v238)
                      {
LABEL_434:
                        __break(0xC471u);
                        JUMPOUT(0x198033E88);
                      }
                      while (1)
                      {
                        v239 = *((unsigned int *)v237 + v238);
                        if (v239 == v238)
                          break;
                        if (v352 <= v239)
                          goto LABEL_434;
                        v238 = *((unsigned int *)v237 + v238);
                      }
                      *(_QWORD *)v234 = *((_QWORD *)v236[8] + v238);
                      *(_WORD *)(v234 + 8) = 521;
                      *(_QWORD *)(v234 + 16) = 0;
                      *(_BYTE *)(v234 + 24) = 0;
                    }
                    v234 += 32;
                  }
                  while (v234 != v235);
                }
                if (*((_BYTE *)v26 + 1688))
                {
                  v240 = *(__int16 *)(v231 + 120);
                  if (v240 > 93)
                  {
                    v241 = 0;
                    if (v240 > 106)
                    {
                      if (v240 == 108)
                      {
LABEL_245:
                        v241 = 1;
                      }
                      else if (v240 != 107)
                      {
                        if (v240 != 113)
                          goto LABEL_247;
                        v241 = 2;
                      }
                    }
                    else if (v240 != 94)
                    {
                      goto LABEL_247;
                    }
                    if (*(_DWORD *)(v231 + 12) == 3)
                    {
                      v242 = *(_QWORD *)v231;
                      if (*(_BYTE *)(*(_QWORD *)v231 + 8) == 9)
                      {
                        v243 = *(_DWORD **)v242;
                        if (*(_BYTE *)(*(_QWORD *)v242 + 4) == 1
                          && *v243 == dword_1991505F0[v241]
                          && *(_BYTE *)(v242 + 40) == 9)
                        {
                          v244 = *(_QWORD *)(v242 + 32);
                          if (*(_BYTE *)(v244 + 4) == 1
                            && v243 == (_DWORD *)v244
                            && *(_DWORD *)v244 == dword_1991505F0[v241]
                            && *(_DWORD *)(v242 + 16) == *(_DWORD *)(v242 + 48)
                            && *(_DWORD *)(v242 + 20) == *(_DWORD *)(v242 + 52)
                            && *(_DWORD *)(v242 + 12) == *(_DWORD *)(v242 + 44))
                          {
                            v362 = (WTF *)v364;
                            v363 = 3;
                            *(_QWORD *)v365 = 0;
                            *(_WORD *)&v365[8] = 0;
                            v365[10] &= 0xFCu;
                            JSC::B3::Air::Inst::operator=(v231, &v362, v219, v220, v221, v222, v223, v224);
                            v318 = v362;
                            if (v364 != (_QWORD *)v362)
                            {
                              if (v362)
                              {
                                v362 = 0;
                                LODWORD(v363) = 0;
                                WTF::fastFree((unint64_t)v318, v218, v219, v220, v221, v222, v223, v224);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else if (v240 == 90)
                  {
                    goto LABEL_245;
                  }
                }
LABEL_247:
                v231 += 128;
                if (v231 == v232)
                {
                  v228 = *((_DWORD *)v225 + 27);
                  goto LABEL_256;
                }
                continue;
              }
            }
          }
LABEL_274:
          v245 = v358;
          v362 = 0;
          LODWORD(v363) = 0;
          HIDWORD(v363) = v358;
          if (v358)
          {
            if (v358 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198033F74);
            }
            v246 = (WTF *)WTF::fastMalloc((WTF *)(8 * v358));
            LODWORD(v363) = v245;
            v362 = v246;
            memcpy(v246, __src, 8 * v358);
          }
          v247 = v349;
          v248 = *((unsigned int *)v349 + 19);
          if ((_DWORD)v248)
          {
            v249 = 0;
            while (!*((_QWORD *)v349[8] + v249))
            {
              if (v248 == ++v249)
                goto LABEL_396;
            }
            if ((_DWORD)v248 != (_DWORD)v249)
            {
              v250 = *((_DWORD *)v349 + 19);
              while (1)
              {
                v251 = *((_QWORD *)v247[8] + v249);
                v252 = *(unsigned int *)(v251 + 8);
                if (v352 <= v252)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198033F58);
                }
                if (*((_DWORD *)v350 + v252) == (_DWORD)v252 && !*(_QWORD *)(v251 + 16))
                  break;
LABEL_312:
                v249 = (v249 + 1);
                if (v250 > v249)
                {
                  while (!*((_QWORD *)v247[8] + v249))
                  {
                    if (v250 == ++v249)
                    {
                      LODWORD(v249) = v250;
                      break;
                    }
                  }
                }
                if ((_DWORD)v248 == (_DWORD)v249)
                  goto LABEL_396;
              }
              v253 = v358;
              if (HIDWORD(v363) < v358 && v363 < v358)
              {
                WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v362, v358);
                LODWORD(v252) = *(_DWORD *)(v251 + 8);
              }
              HIDWORD(v363) = v253;
              v254 = (unsigned __int16)v252 * WORD6(v353);
              v255 = v353;
              if ((v353 & 0x8000000000000000) != 0)
              {
                v274 = __clz(__rbit64((unint64_t)v353 >> (v252 * BYTE12(v353)))) + v254;
                if (v274 >= 0x3F)
                  LODWORD(v256) = 63;
                else
                  LODWORD(v256) = v274;
              }
              else
              {
                v256 = *(_QWORD *)(2 * v353);
                v257 = v254 >> 6;
                if (v254 >> 6 < (unint64_t)(v256 + 63) >> 6)
                {
                  v258 = *(_QWORD *)(2 * v353 + 8 * v257 + 8);
                  if (v258)
                  {
                    v259 = __clz(__rbit64(v258 >> (v252 * BYTE12(v353))))
                         + (((unsigned __int16)v252 * WORD6(v353)) & 0x3FLL);
                    if (v259 < 0x40)
                      goto LABEL_290;
                  }
                  v271 = (unint64_t)(v256 + 63) >> 6;
                  if (v257 + 1 != v271)
                  {
                    v272 = v271 - 1;
                    while (1)
                    {
                      v273 = *(_QWORD *)(2 * v353 + 0x10 + 8 * v257);
                      if (v273)
                      {
                        v259 = __clz(__rbit64(v273));
                        if (v259 <= 0x3F)
                          break;
                      }
                      if (v272 == ++v257)
                        goto LABEL_291;
                    }
                    LODWORD(v257) = v257 + 1;
LABEL_290:
                    LODWORD(v256) = v259 + ((_DWORD)v257 << 6);
                  }
                }
              }
LABEL_291:
              v260 = (unsigned __int16)(v252 + 1) * WORD6(v353);
              do
              {
                do
                {
                  while (1)
                  {
LABEL_292:
                    if (v260 <= v256)
                    {
                      JSC::B3::Air::assign((unsigned int *)v251, (unsigned int ***)&v362);
                      v250 = *((_DWORD *)v247 + 19);
                      goto LABEL_312;
                    }
                    if (v352 <= (unsigned __int16)(v256 - v254))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198033E98);
                    }
                    if (*((_DWORD *)v350 + (unsigned __int16)(v256 - v254)) == (unsigned __int16)(v256 - v254))
                    {
                      v374 = 0;
                      v261 = (uint64_t **)*((_QWORD *)v349[8] + (unsigned __int16)(v256 - v254));
                      v374 = (WTF **)v261;
                      if (v253 == (_DWORD)v363)
                      {
                        v270 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v362, v253 + 1, (unint64_t)&v374);
                        v253 = HIDWORD(v363);
                        *((_QWORD *)v362 + HIDWORD(v363)) = *v270;
                        v255 = v353;
                      }
                      else
                      {
                        *((_QWORD *)v362 + v253) = v261;
                      }
                      HIDWORD(v363) = ++v253;
                    }
                    v262 = v256 + 1;
                    v263 = (v256 + 1);
                    if ((v255 & 0x8000000000000000) == 0)
                      break;
                    v269 = __clz(__rbit64(v255 >> (v256 + 1))) + v263;
                    if (v269 >= 0x3F)
                      LODWORD(v256) = 63;
                    else
                      LODWORD(v256) = v269;
                  }
                  v256 = *(_QWORD *)(2 * v255);
                  v264 = v256 + 63;
                  v265 = v263 >> 6;
                }
                while (v265 >= (unint64_t)(v256 + 63) >> 6);
                v266 = *(_QWORD *)(2 * v255 + 8 * v265 + 8);
                if (v266)
                {
                  v267 = __clz(__rbit64(v266 >> v262)) + (v262 & 0x3F);
                  if (v267 < 0x40)
                    goto LABEL_302;
                }
              }
              while (v265 + 1 == v264 >> 6);
              while (1)
              {
                v268 = *(_QWORD *)(2 * v255 + 0x10 + 8 * v265);
                if (v268)
                {
                  v267 = __clz(__rbit64(v268));
                  if (v267 <= 0x3F)
                    break;
                }
                if ((v264 >> 6) - 1 == ++v265)
                  goto LABEL_292;
              }
              LODWORD(v265) = v265 + 1;
LABEL_302:
              LODWORD(v256) = v267 + ((_DWORD)v265 << 6);
              goto LABEL_292;
            }
          }
LABEL_396:
          v326 = v362;
          if (v362)
          {
            v362 = 0;
            LODWORD(v363) = 0;
            WTF::fastFree((unint64_t)v326, v218, v219, v220, v221, v222, v223, v224);
          }
          WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v368, v218, v219, v220, v221, v222, v223, v224);
          v327 = v354;
          if (v354)
          {
            v354 = 0;
            LODWORD(v355) = 0;
            WTF::fastFree((unint64_t)v327, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
          }
          if ((v353 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v353, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
          v328 = v350;
          if (v350)
          {
            v350 = 0;
            v351 = 0;
            WTF::fastFree((unint64_t)v328, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
          }
          v24 = v346;
          goto LABEL_405;
        }
        goto LABEL_20;
      }
    }
  }
  v329 = *((unsigned int *)v24 + 19);
  if (!(_DWORD)v329)
    goto LABEL_423;
LABEL_405:
  v330 = 0;
  v331 = v24[8];
  do
  {
    v332 = *((_QWORD *)v331 + v330);
    if (v332)
      break;
    ++v330;
  }
  while (v329 != v330);
  if ((_DWORD)v329 != (_DWORD)v330)
  {
    v333 = 0;
    do
    {
      v334 = *(_DWORD *)(*((_QWORD *)v331 + v330) + 16);
      if (v333 <= -v334)
        v333 = -v334;
      v330 = (v330 + 1);
      if (v329 > v330)
      {
        while (!*((_QWORD *)v331 + v330))
        {
          if (v329 == ++v330)
            goto LABEL_415;
        }
      }
    }
    while ((_DWORD)v329 != (_DWORD)v330);
LABEL_415:
    LODWORD(v332) = (v333 + 15) & 0xFFFFFFF0;
  }
  else
  {
LABEL_423:
    LODWORD(v332) = 0;
  }
  *((_DWORD *)v24 + 46) = v332;
  *((_BYTE *)v24 + 196) = 1;
  v335 = __src;
  if (__src)
  {
    __src = 0;
    v357 = 0;
    WTF::fastFree((unint64_t)v335, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
  }
  v336 = (JSC::B3::Air *)v359[0];
  *(_QWORD *)(v359[0] + 304) = v359[1];
  if (*((_BYTE *)v26 + 817))
  {
    if (v361)
      v338 = (WTF *)((char *)v361 + 16);
    else
      v338 = 0;
    JSC::B3::Air::validate(v336, v338, v18, v19, v20, v21, v22, v23);
  }
  v337 = v361;
  v361 = 0;
  if (v337)
  {
    if (*(_DWORD *)v337 == 1)
      WTF::fastFree((unint64_t)v337, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v337;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v360);
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t (**v4)();
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int **v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  _QWORD *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t i;
  unsigned int v117;
  uint64_t (**v118)();
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  WTF *v137;
  uint64_t v138;
  __int16 *v139;
  __int16 v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  _BOOL4 v147;
  int v148;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _WORD *v163;
  unsigned int v164;
  unsigned int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  _WORD *v180;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  unsigned __int16 *v206;
  int v207;
  unsigned __int16 *v208;
  int v209;
  unsigned __int16 v210;
  uint64_t (*v211)();
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned __int16 *v216;
  int v217;
  unsigned __int16 *v218;
  int v219;
  uint64_t (*v220)();
  int v221;
  uint64_t (*v222)();
  int v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  BOOL v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  _DWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  _DWORD *v284;
  uint64_t v285;
  unint64_t v286;
  int v287;
  uint64_t v288;
  WTF *v289;
  _DWORD *v290;
  WTF *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  WTF *v314;
  uint64_t v315;
  __int16 *v316;
  __int16 v317;
  uint64_t v318;
  uint64_t v319;
  __int16 v320;
  _BOOL4 v321;
  int v322;
  unsigned int v324;
  unsigned int *v325;
  int v326;
  unsigned int **v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  unint64_t v338;
  WTF *v340;
  WTF *v341;
  unsigned int **v342;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 *v347;
  __int128 v348;
  __int128 v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  unsigned __int16 *v354;
  unint64_t v355;
  unint64_t v356;
  int v357;
  unint64_t v358;
  unint64_t StatusReg;
  uint64_t v360;
  uint64_t v362;
  int v363;
  uint64_t v364;
  unsigned __int16 *v365;
  unsigned int ***v366;
  _QWORD *v367;
  uint64_t v368;
  __int16 v369;
  WTF *v370;
  uint64_t v371;
  _QWORD *v372;
  __int16 v373;
  _BYTE v374[80];
  _BYTE v375[11];
  _QWORD v376[2];
  unsigned __int8 v377;
  _BYTE v378[32];
  uint64_t v379;
  uint64_t v380;
  int v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int **v384;
  unsigned int *v385;
  _QWORD v386[2];

  JSC::B3::Air::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::Liveness((uint64_t)v378, *(_QWORD *)a1);
  v13 = *(_QWORD *)a1;
  v364 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v364)
  {
    v14 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v13 + 96) + 8 * v14))
    {
      if (v364 == ++v14)
        goto LABEL_105;
    }
    if ((_DWORD)v364 != (_DWORD)v14)
    {
      v4 = (uint64_t (**)())&v372;
      v3 = (unint64_t)&v384;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v15) = v364;
      v362 = v13;
      while (1)
      {
        v386[0] = 0;
        if (v15 <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x198035FCCLL);
        }
        v16 = *(unsigned int **)(*(_QWORD *)(v13 + 96) + 8 * v14);
        v386[0] = v16;
        v384 = (unsigned int **)v378;
        v385 = v16;
        v382 = 0;
        v17 = v383 + 32 * *v16;
        v18 = *(unsigned int *)(v17 + 12);
        if ((_DWORD)v18)
        {
          v19 = *(_DWORD **)v17;
          v20 = v379;
          v21 = 4 * v18;
          do
          {
            v22 = *v19;
            v23 = *(unsigned int *)(v20 + 4 * v22);
            v24 = v382;
            if (v382 <= v23 || *(_DWORD *)(v380 + 4 * v23) != (_DWORD)v22)
            {
              LODWORD(v370) = *v19;
              if (v382 == v381)
              {
                v100 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v380, v382 + 1, (unint64_t)&v370);
                *(_DWORD *)(v380 + 4 * v382) = *v100;
                v20 = v379;
              }
              else
              {
                *(_DWORD *)(v380 + 4 * v382) = v22;
              }
              ++v382;
              *(_DWORD *)(v20 + 4 * v22) = v24;
            }
            ++v19;
            v21 -= 4;
          }
          while (v21);
          v16 = (unsigned int *)v386[0];
        }
        v366 = &v384;
        v367 = v386;
        v368 = a1;
        v25 = v16[5];
        if ((_DWORD)v25)
          break;
LABEL_56:
        v78 = v386[0];
        v79 = *(_QWORD *)(v386[0] + 8);
        v80 = *(unsigned int *)(v386[0] + 20);
        v5 = v79 + (v80 << 7);
        if ((_DWORD)v80)
        {
          v81 = 0;
          v82 = 0;
          v83 = v79 + (v80 << 7);
          v84 = v83;
          do
          {
            v77 = v79 + v81;
            if (*(_QWORD *)(v79 + v81 + 112))
              v85 = 0;
            else
              v85 = *(unsigned __int16 *)(v79 + v81 + 120) == 0;
            if (v85 && (*(_BYTE *)(v77 + 122) & 3) == 0)
            {
              v357 = v82;
              if (*(_DWORD *)(v79 + v81 + 12))
              {
                v3 = (unint64_t)&v384;
                v82 = v82;
              }
              else
              {
                if (v84 == *(_QWORD *)(v78 + 8) + ((unint64_t)*(unsigned int *)(v78 + 20) << 7))
                {
                  v84 = v79 + v81;
                }
                else if (v77 != v83)
                {
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v83, (unsigned int *)v77, v84, v8, v9, v10, v11, v12);
                  v84 += v79 + v81 - v83;
                }
                v344 = *(_QWORD *)(v79 + v81);
                if (v79 + v81 + 16 != v344 && v344)
                {
                  v345 = v79 + v81;
                  *(_QWORD *)v345 = 0;
                  *(_DWORD *)(v345 + 8) = 0;
                  WTF::fastFree(v344, (void *)v77, v7, v8, v9, v10, v11, v12);
                }
                v83 = v79 + v81 + 128;
                v82 = (v357 + 1);
                v3 = (unint64_t)&v384;
              }
            }
            v81 += 128;
          }
          while (v79 + v81 < v5);
          v79 = *(_QWORD *)(v78 + 8);
          LODWORD(v80) = *(_DWORD *)(v78 + 20);
          v5 = v84;
        }
        else
        {
          v82 = 0;
          v83 = v79 + (v80 << 7);
        }
        v2 = v79 + ((unint64_t)v80 << 7);
        if (v83 != v2)
        {
          if (v83 <= v5)
          {
            v335 = 0;
            v356 = v5 + ((v2 - v83) & 0xFFFFFFFFFFFFFF80) - 128;
            do
            {
              v336 = v82;
              v5 = v2 + v335 - 128;
              JSC::B3::Air::Inst::Inst(v356 + v335, v5);
              v338 = *(_QWORD *)v5;
              if (v2 + v335 - 112 != *(_QWORD *)v5 && v338 != 0)
              {
                *(_QWORD *)v5 = 0;
                *(_DWORD *)(v2 + v335 - 120) = 0;
                WTF::fastFree(v338, v337, v7, v8, v9, v10, v11, v12);
              }
              v335 -= 128;
              v82 = v336;
            }
            while (v2 + v335 != v83);
          }
          else
          {
            do
            {
              *(_QWORD *)v5 = v5 + 16;
              *(_QWORD *)(v5 + 8) = 3;
              v86 = v83 + 16;
              v87 = *(_QWORD *)v83;
              if (*(_QWORD *)v83 == v83 + 16)
              {
                v88 = *(unsigned int *)(v83 + 12);
                if ((_DWORD)v88)
                {
                  v89 = 0;
                  v90 = 32 * v88;
                  do
                  {
                    v91 = v5 + v89;
                    v92 = *(_OWORD *)(v87 + v89 + 16);
                    *(_OWORD *)(v91 + 16) = *(_OWORD *)(v87 + v89);
                    *(_OWORD *)(v91 + 32) = v92;
                    v89 += 32;
                  }
                  while (v90 != v89);
                }
              }
              else
              {
                *(_QWORD *)v83 = v86;
                *(_QWORD *)v5 = v87;
                v96 = *(_DWORD *)(v83 + 8);
                *(_DWORD *)(v83 + 8) = 3;
                *(_DWORD *)(v5 + 8) = v96;
              }
              v93 = *(_DWORD *)(v83 + 12);
              *(_DWORD *)(v83 + 12) = 0;
              *(_DWORD *)(v5 + 12) = v93;
              v94 = *(_QWORD *)(v83 + 112);
              *(_DWORD *)(v5 + 119) = *(_DWORD *)(v83 + 119);
              *(_QWORD *)(v5 + 112) = v94;
              v95 = *(_QWORD *)v83;
              if (v86 != *(_QWORD *)v83 && v95)
              {
                *(_QWORD *)v83 = 0;
                *(_DWORD *)(v83 + 8) = 0;
                v101 = v82;
                WTF::fastFree(v95, (void *)v77, v7, v8, v9, v10, v11, v12);
                v82 = v101;
              }
              v5 += 128;
              v83 += 128;
            }
            while (v83 != v2);
          }
          LODWORD(v80) = *(_DWORD *)(v78 + 20);
          v3 = (unint64_t)&v384;
        }
        *(_DWORD *)(v78 + 20) = v80 - v82;
        v14 = (v14 + 1);
        v13 = v362;
        v15 = *(unsigned int *)(v362 + 108);
        if (v15 > v14)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v362 + 96) + 8 * v14))
          {
            if (v15 == ++v14)
            {
              LODWORD(v14) = *(_DWORD *)(v362 + 108);
              break;
            }
          }
        }
        if ((_DWORD)v364 == (_DWORD)v14)
          goto LABEL_105;
      }
      while (1)
      {
        v26 = v25 - 1;
        if (*(_DWORD *)(v386[0] + 20) <= (v25 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x198035EE8);
        }
        v27 = (v25 - 1);
        v28 = *(_QWORD *)(v386[0] + 8);
        v29 = v28 + (v27 << 7);
        if ((JSC::B3::Air::Inst::hasNonArgEffects((JSC::B3::Air::Inst *)v29) & 1) != 0)
          goto LABEL_34;
        v377 = 1;
        v376[0] = &v377;
        v376[1] = &v384;
        if ((*(__int16 *)(v29 + 120) - 446) <= 5)
          break;
        v37 = *(unsigned int *)(v29 + 12);
        if ((_DWORD)v37)
        {
          v38 = 0;
          v39 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v29 + 120)
              + ((unint64_t)((v37 - 1) * v37) >> 1);
          v40 = 32 * v37;
          v41 = 1;
          do
          {
            v43 = *v39++;
            v42 = v43;
            if ((v43 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198035E74);
            }
            if ((v42 & 0xFu) - 8 < 3
              || (v42 & 0xC) == 4
              && ((v44 = (uint64_t *)(*(_QWORD *)v29 + v38), *((_BYTE *)v44 + 8) != 9)
               || (v45 = *v44, *(_BYTE *)(v45 + 4) != 1)
               || (v46 = *(unsigned int *)(v45 + 8), v47 = v384[4][v46], *((_DWORD *)v384 + 15) > v47)
               && v384[6][v47] == (_DWORD)v46))
            {
              v41 = 0;
              v377 = 0;
            }
            v38 += 32;
          }
          while (v40 != v38);
LABEL_33:
          if (!v41)
            goto LABEL_34;
        }
        v370 = (WTF *)&v372;
        v371 = 3;
        *(_QWORD *)v375 = 0;
        *(_WORD *)&v375[8] = 0;
        v375[10] &= 0xFCu;
        v57 = (_OWORD *)(v29 + 16);
        v56 = *(_QWORD *)v29;
        if (*(_QWORD *)v29 != v29 + 16)
        {
          if (v56)
          {
            *(_QWORD *)v29 = 0;
            *(_DWORD *)(v29 + 8) = 0;
            WTF::fastFree(v56, v30, v31, v32, v33, v34, v35, v36);
          }
          *(_QWORD *)v29 = v57;
          v99 = v370;
          if (v370 == (WTF *)&v372)
          {
            if (HIDWORD(v371))
            {
              v346 = 32 * HIDWORD(v371);
              v347 = (__int128 *)&v372;
              do
              {
                v348 = *v347;
                v349 = v347[1];
                v347 += 2;
                *v57 = v348;
                v57[1] = v349;
                v57 += 2;
                v346 -= 32;
              }
              while (v346);
            }
          }
          else
          {
            v370 = (WTF *)&v372;
            *(_QWORD *)v29 = v99;
          }
        }
        *(_DWORD *)(v29 + 8) = v371;
        v58 = HIDWORD(v371);
        HIDWORD(v371) = 0;
        *(_DWORD *)(v29 + 12) = v58;
        v59 = v28 + (v27 << 7);
        v60 = *(_QWORD *)v375;
        *(_DWORD *)(v59 + 119) = *(_DWORD *)&v375[7];
        *(_QWORD *)(v59 + 112) = v60;
        v61 = (unint64_t)v370;
        if (&v372 == (_QWORD **)v370 || !v370)
          goto LABEL_34;
        v370 = 0;
        LODWORD(v371) = 0;
        v97 = *(_QWORD *)(StatusReg + 752);
        if (v97)
        {
          if (!(v61 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v61 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v61)) & 1) != 0)
          {
LABEL_86:
            v98 = *(unsigned int *)(v97 + 8000);
            if (v98 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v97, v61, (os_unfair_lock_s *)5, v32, v33, v34, v35, v36);
            }
            else
            {
              *(_QWORD *)(v97 + 8 * v98) = v61 | 0x5000000000000;
              *(_DWORD *)(v97 + 8000) = v98 + 1;
            }
            goto LABEL_34;
          }
          if (v61 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v61 >> 24)
          {
            v32 = 0;
          }
          else
          {
            v32 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v61 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v61) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v32 == 1)
              goto LABEL_86;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v97, v61, 1, v32, v33, v34, v35, v36);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v61, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_34:
        v49 = v384;
        v48 = v385;
        v50 = v384[1];
        v51 = *(_QWORD *)&v50[4 * *v385];
        v52 = v51 + (v25 << 6);
        v53 = *(unsigned int *)(v52 + 44);
        if ((_DWORD)v53)
        {
          v69 = *(unsigned int **)(v52 + 32);
          v70 = v384[4];
          v71 = 4 * v53;
          v72 = *((_DWORD *)v384 + 15);
          do
          {
            v73 = *v69;
            v74 = v70[v73];
            if (v72 > v74)
            {
              v75 = v49[6];
              if (v75[v74] == (_DWORD)v73)
              {
                v76 = v75[v72 - 1];
                v75[v74] = v76;
                v70[v76] = v74;
                v72 = *((_DWORD *)v49 + 15) - 1;
                *((_DWORD *)v49 + 15) = v72;
              }
            }
            ++v69;
            v71 -= 4;
          }
          while (v71);
          v51 = *(_QWORD *)&v50[4 * *v48];
        }
        v54 = v51 + (v27 << 6);
        v55 = *(unsigned int *)(v54 + 12);
        if ((_DWORD)v55)
        {
          v62 = *(_DWORD **)v54;
          v63 = v49 + 6;
          v64 = v49[4];
          v65 = 4 * v55;
          do
          {
            v66 = *v62;
            v67 = v64[v66];
            v68 = *((unsigned int *)v49 + 15);
            if (v68 <= v67 || *(_DWORD *)(*v63 + 4 * v67) != (_DWORD)v66)
            {
              LODWORD(v370) = *v62;
              if ((_DWORD)v68 == *((_DWORD *)v49 + 14))
              {
                v49[6][*((unsigned int *)v49 + 15)] = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v49 + 6), v68 + 1, (unint64_t)&v370);
                v64 = v49[4];
              }
              else
              {
                *(_DWORD *)(*v63 + 4 * v68) = v66;
              }
              ++*((_DWORD *)v49 + 15);
              v64[v66] = v68;
            }
            ++v62;
            v65 -= 4;
            v3 = (unint64_t)&v384;
          }
          while (v65);
        }
        v25 = v26;
        if (!(_DWORD)v26)
          goto LABEL_56;
      }
      v371 = (uint64_t)&v370;
      v372 = v376;
      v41 = v377;
      goto LABEL_33;
    }
  }
LABEL_105:
  v109 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v109)
    goto LABEL_347;
  v110 = *(unsigned __int16 **)(a1 + 48);
  v365 = &v110[4 * v109];
  v111 = 0xFFFFFFFFLL;
  v112 = 1;
  v113 = v376;
  do
  {
    v114 = *v110;
    v115 = *(_DWORD *)(a1 + 20);
    if (v115 <= v114)
    {
LABEL_515:
      __break(0xC471u);
      JUMPOUT(0x198035ED8);
    }
    for (i = *(_QWORD *)(a1 + 8); ; v114 = *(_DWORD *)(i + 4 * v114))
    {
      v117 = *(_DWORD *)(i + 4 * v114);
      if (v117 == v114)
        break;
      if (v115 <= v117)
        goto LABEL_515;
    }
    v118 = (uint64_t (**)())v110[1];
    if (v115 <= v118)
    {
LABEL_516:
      __break(0xC471u);
      JUMPOUT(0x198035EE0);
    }
    while (1)
    {
      v119 = *(_DWORD *)(i + 4 * v118);
      if (v119 == (_DWORD)v118)
        break;
      if (v115 <= v119)
        goto LABEL_516;
      v118 = (uint64_t (**)())*(unsigned int *)(i + 4 * v118);
    }
    v103 = (unsigned __int16)v114;
    if ((unsigned __int16)v114 == (unsigned __int16)v118)
      goto LABEL_117;
    if (*(_DWORD *)(a1 + 36) <= (unsigned __int16)v114)
    {
      __break(0xC471u);
      JUMPOUT(0x198036050);
    }
    LODWORD(v120) = (unsigned __int16)v118;
    v121 = *(_QWORD *)(a1 + 24);
    v122 = v121 + 16 * (unsigned __int16)v114;
    v123 = (_DWORD *)(v122 + 8);
    if (*(_DWORD *)(v122 + 8) == -1)
    {
      v258 = *(_QWORD *)v122;
      if (*(_QWORD *)v122)
      {
        v259 = *(_DWORD *)(v258 - 8);
        v260 = 9
             * (((unsigned __int16)v118 + ~((unsigned __int16)v118 << 15)) ^ (((unsigned __int16)v118
                                                                                           + ~((unsigned __int16)v118 << 15)) >> 10));
        v261 = v259 & (((v260 ^ (v260 >> 6)) + ~((v260 ^ (v260 >> 6)) << 11)) ^ (((v260 ^ (v260 >> 6))
                                                                                + ~((v260 ^ (v260 >> 6)) << 11)) >> 16));
        v262 = *(unsigned __int16 *)(v258 + 2 * v261);
        if (v262 == (unsigned __int16)v118)
          goto LABEL_117;
        v263 = 1;
        while (1)
        {
          v102 = 0xFFFFLL;
          if ((_WORD)v262 == 0xFFFF)
            break;
          v261 = (v261 + v263) & v259;
          v262 = *(unsigned __int16 *)(v258 + 2 * v261);
          ++v263;
          if (v262 == (unsigned __int16)v118)
            goto LABEL_117;
        }
      }
    }
    else
    {
      v124 = *(unsigned __int16 *)(v121 + 16 * v103 + 12);
      if (v124 <= (unsigned __int16)v118)
      {
        v125 = (_QWORD *)(2 * *(_QWORD *)v122);
        v126 = (*(_QWORD *)v122 & 0x8000000000000000) != 0 ? 63 : *v125;
        v127 = (unsigned __int16)v118 - v124;
        if (v126 > v127)
        {
          v128 = v125 + 1;
          v129 = *(uint64_t *)v122 >= 0 ? v128 : (_QWORD *)(v121 + 16 * v103);
          if (((*(_QWORD *)((char *)v129 + ((v127 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v127) & 1) != 0)
            goto LABEL_117;
        }
      }
    }
    if (v115 <= v103)
    {
      __break(0xC471u);
      JUMPOUT(0x198036058);
    }
    *(_DWORD *)(i + 4 * v103) = (unsigned __int16)v118;
    v360 = v103;
    if (*(_DWORD *)(a1 + 36) <= v103)
    {
      __break(0xC471u);
      JUMPOUT(0x198036060);
    }
    v354 = v110;
    if (*v123 == -1)
    {
      v137 = *(WTF **)v122;
      if (*(_QWORD *)v122)
      {
        v292 = *((unsigned int *)v137 - 1);
        v132 = (unint64_t)v137 + 2 * v292;
        if (*((_DWORD *)v137 - 3))
        {
          if ((_DWORD)v292)
          {
            v264 = 2 * v292;
            while (*(unsigned __int16 *)v137 >= 0xFFFEu)
            {
              v137 = (WTF *)((char *)v137 + 2);
              v264 -= 2;
              if (!v264)
              {
                v137 = (WTF *)v132;
                goto LABEL_489;
              }
            }
          }
          goto LABEL_489;
        }
        v341 = (WTF *)((char *)v137 + 2 * v292);
      }
      else
      {
        v341 = 0;
        v292 = 0;
      }
      v132 = (unint64_t)v137 + 2 * v292;
      v137 = v341;
      v111 = 0xFFFFFFFFLL;
      v112 = 1;
      v113 = v376;
LABEL_489:
      v136 = 1;
      goto LABEL_139;
    }
    v130 = *(_QWORD *)v122;
    if ((*(_QWORD *)v122 & 0x8000000000000000) != 0)
    {
      v136 = 0;
      v132 = __clz(__rbit64(v130));
      if (v132 >= 0x3F)
        v132 = 63;
      goto LABEL_138;
    }
    v131 = 2 * v130;
    v132 = *(_QWORD *)(2 * v130);
    if (v132 + 63 < 0x40)
    {
LABEL_412:
      v136 = 0;
      goto LABEL_138;
    }
    v133 = *(_QWORD *)(v131 + 8);
    if (v133 && (v134 = __clz(__rbit64(v133)), v134 < 0x40))
    {
      v135 = 0;
    }
    else
    {
      v136 = ((v132 + 63) >> 6) - 1;
      if ((v132 + 63) >> 6 == 1)
        goto LABEL_138;
      v255 = 0;
      v256 = v131 + 16;
      while (1)
      {
        v257 = *(_QWORD *)(v256 + 8 * v255);
        if (v257)
        {
          v134 = __clz(__rbit64(v257));
          if (v134 <= 0x3F)
            break;
        }
        if (v136 == ++v255)
          goto LABEL_412;
      }
      v135 = v255 + 1;
    }
    v136 = 0;
    v132 = v134 + (v135 << 6);
LABEL_138:
    v137 = (WTF *)(v121 + 16 * v103);
LABEL_139:
    v138 = v121 + 16 * v103;
    v140 = *(_WORD *)(v138 + 12);
    v139 = (__int16 *)(v138 + 12);
    v370 = v137;
    v371 = v132;
    LODWORD(v372) = v136;
    v373 = v140;
    if (*v123 == -1)
    {
      v293 = *(_QWORD *)v122;
      if (*(_QWORD *)v122)
      {
        v294 = *(unsigned int *)(v293 - 4);
        v122 = v293 + 2 * v294;
      }
      else
      {
        v122 = 0;
        v294 = 0;
      }
      v142 = v293 + 2 * v294;
      v141 = 1;
    }
    else
    {
      v141 = 0;
      if ((*(_QWORD *)v122 & 0x8000000000000000) != 0)
        v142 = 63;
      else
        v142 = *(_QWORD *)(2 * *(_QWORD *)v122);
    }
    v143 = *v139;
    v366 = (unsigned int ***)v122;
    v367 = (_QWORD *)v142;
    LODWORD(v368) = v141;
    v369 = v143;
    v144 = 9
         * (((unsigned __int16)v118 + ~((unsigned __int16)v118 << 15)) ^ (((unsigned __int16)v118
                                                                                       + ~((unsigned __int16)v118 << 15)) >> 10));
    v145 = (v144 ^ (v144 >> 6)) + ~((v144 ^ (v144 >> 6)) << 11);
    v363 = v145 ^ HIWORD(v145);
    LODWORD(v364) = v118 & 0xFFFFFFC0;
    v146 = (unsigned __int16)v118 - (unint64_t)((unsigned __int16)v118 & 0xFFC0);
    v355 = v146 >> 6;
    v358 = v146 + 1;
    while (1)
    {
      v147 = v141 == v136;
      if (v141 == 0xFFFFFFFFLL)
        v147 = 0;
      if (v136 == 0xFFFFFFFF)
        v148 = v141 == 0xFFFFFFFFLL;
      else
        v148 = v147;
      if (v136 != 0xFFFFFFFF && v147)
      {
        v384 = (unsigned int **)v376;
        v148 = ((uint64_t (*)(unsigned int ***, WTF **, unsigned int ****))off_1E357F7E8[v141])(&v384, &v370, &v366);
      }
      if (v148 && v373 == v369)
        break;
      v376[0] = &v370;
      if ((_DWORD)v372 == -1)
        goto LABEL_484;
      v384 = (unsigned int **)v376;
      v150 = ((uint64_t (*)(unsigned int ***, WTF **))off_1E357F7F8[v372])(&v384, &v370);
      if ((_DWORD)v150 == (unsigned __int16)v118)
        goto LABEL_184;
      v3 = v150;
      if (*(_DWORD *)(a1 + 36) <= v150)
      {
        __break(0xC471u);
        JUMPOUT(0x198035EF0);
      }
      v5 = v150;
      v157 = *(_QWORD *)(a1 + 24);
      v158 = v157 + 16 * v150;
      LOWORD(v376[0]) = (_WORD)v118;
      v160 = (_DWORD *)(v158 + 8);
      v159 = *(_DWORD *)(v158 + 8);
      if (v159 == -1)
      {
        v203 = *(_QWORD *)v158;
        if (*(_QWORD *)v158
          || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v157 + 16 * v150), 0), (v203 = *(_QWORD *)v158) != 0))
        {
          v204 = *(_DWORD *)(v203 - 8);
        }
        else
        {
          v204 = 0;
        }
        v205 = v204 & v363;
        v206 = (unsigned __int16 *)(v203 + 2 * (v204 & v363));
        v207 = *v206;
        if (v207 == 0xFFFF)
        {
          v210 = (unsigned __int16)v118;
        }
        else
        {
          v208 = 0;
          v209 = 1;
          do
          {
            if ((unsigned __int16)v207 == (unsigned __int16)v118)
            {
              v171 = 0;
              goto LABEL_168;
            }
            if ((unsigned __int16)v207 == 65534)
              v208 = v206;
            v205 = (v205 + v209) & v204;
            v206 = (unsigned __int16 *)(v203 + 2 * v205);
            v207 = *v206;
            ++v209;
          }
          while (v207 != 0xFFFF);
          v210 = (unsigned __int16)v118;
          if (v208)
          {
            *v208 = -1;
            --*(_DWORD *)(*(_QWORD *)v158 - 16);
            v210 = v376[0];
            v206 = v208;
          }
        }
        *v206 = v210;
        v232 = *(_QWORD *)v158;
        if (*(_QWORD *)v158)
          v233 = *(_DWORD *)(v232 - 12) + 1;
        else
          v233 = 1;
        *(_DWORD *)(v232 - 12) = v233;
        v234 = *(_QWORD *)v158;
        if (*(_QWORD *)v158)
          v235 = *(_DWORD *)(v234 - 12);
        else
          v235 = 0;
        v236 = (*(_DWORD *)(v234 - 16) + v235);
        v237 = *(unsigned int *)(v234 - 4);
        if (v237 > 0x400)
        {
          if (v237 <= 2 * v236)
            goto LABEL_323;
        }
        else
        {
          if (3 * v237 > 4 * v236)
            goto LABEL_278;
          if ((_DWORD)v237)
LABEL_323:
            v253 = (_DWORD)v237 << (6 * *(_DWORD *)(v234 - 12) >= (2 * v237));
          else
            v253 = 8;
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v157 + 16 * v3), v253, v206);
          v234 = *(_QWORD *)v158;
        }
LABEL_278:
        v238 = LOWORD(v376[0]);
        v239 = v376[0] & 0xFFC0;
        v240 = v157 + 16 * v3;
        if (v239 >= *(unsigned __int16 *)(v240 + 12))
          v239 = *(unsigned __int16 *)(v240 + 12);
        *(_WORD *)(v240 + 12) = v239;
        if (*(unsigned __int16 *)(v240 + 14) > v238)
          v238 = *(unsigned __int16 *)(v240 + 14);
        *(_WORD *)(v240 + 14) = v238;
        if (v234)
        {
          v241 = *(_DWORD *)(v234 - 4);
          v230 = __OFSUB__(v238, v239);
          v242 = v238 - v239;
          if (v242 < 0 != v230)
            v242 += 7;
          if (2 * (v242 >> 3) < (2 * v241))
            WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v157 + 16 * v3), v151, (uint64_t)v206, v152, v153, v154, v155, v156);
        }
LABEL_287:
        v171 = 1;
        goto LABEL_168;
      }
      if (!v159)
      {
        v243 = v157 + 16 * v150;
        *(_WORD *)(v243 + 12) = v364;
        *(_WORD *)(v243 + 14) = (_WORD)v118;
        *v160 = 1;
        v244 = *(_QWORD *)v158;
        if ((*(_QWORD *)v158 & 0x8000000000000000) != 0)
          v245 = 63;
        else
          v245 = *(_QWORD *)(2 * v244);
        if (v245 < v358)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(v157 + 16 * v150), v358, 0);
          v244 = *(_QWORD *)v158;
        }
        if (v244 >= 0)
          v246 = 2 * v244 + 8;
        else
          v246 = v157 + 16 * v3;
        *(_QWORD *)(v246 + 8 * v355) |= 1 << (char)v118;
        goto LABEL_287;
      }
      v161 = v157 + 16 * v150;
      v164 = *(unsigned __int16 *)(v161 + 12);
      v163 = (_WORD *)(v161 + 12);
      v162 = v164;
      v2 = (unint64_t)(v163 + 1);
      v165 = (unsigned __int16)v163[1];
      if (v164 > (unsigned __int16)v118 || v165 < (unsigned __int16)v118)
      {
        *v160 = v159 + 1;
        if ((unsigned __int16)v364 >= v162)
          v195 = v162;
        else
          v195 = (unsigned __int16)v364;
        if (v165 <= (unsigned __int16)v118)
          v196 = (unsigned __int16)v118;
        else
          v196 = v165;
        v197 = v196 - v195;
        if (v196 < (int)v195)
          v197 = v196 - v195 + 7;
        if ((v159 + 1) > 8)
          v198 = v159 + 1;
        else
          v198 = 8;
        if (12 * v198 < (v197 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v158);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v384, (uint64_t *)v158, v376);
          *v163 = v195;
          *(_WORD *)v2 = v196;
          v171 = 1;
        }
        else
        {
          if (v162 > (unsigned __int16)v118)
          {
            WTF::BitVector::shiftRightByMultipleOf64((WTF::BitVector *)v158, (int)v162 - (int)v195);
            *v163 = v195;
            v162 = v195;
          }
          v199 = *(_QWORD *)v158;
          if ((*(_QWORD *)v158 & 0x8000000000000000) != 0)
            v200 = 63;
          else
            v200 = *(_QWORD *)(2 * v199);
          v201 = (unsigned __int16)v118 - v162;
          v151 = v201 + 1;
          if (v200 < v201 + 1)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v158, v151, 0);
            v199 = *(_QWORD *)v158;
          }
          if (v199 >= 0)
            v202 = 2 * v199 + 8;
          else
            v202 = v158;
          v171 = 1;
          *(_QWORD *)(v202 + ((v201 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v201;
          *(_WORD *)v2 = v196;
        }
        v111 = 0xFFFFFFFFLL;
        v112 = 1;
      }
      else
      {
        v166 = (unsigned __int16)v118 - v162;
        if (*(uint64_t *)v158 >= 0)
          v167 = 2 * *(_QWORD *)v158 + 8;
        else
          v167 = v158;
        v168 = (v166 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v169 = 1 << v166;
        v170 = *(_QWORD *)(v167 + v168);
        v85 = (v170 & (1 << v166)) == 0;
        v171 = v85;
        *(_QWORD *)(v167 + v168) = v170 | v169;
        if (v85)
          ++v159;
        *v160 = v159;
      }
LABEL_168:
      v172 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 40) += v171;
      if (v172 <= (unsigned __int16)v118)
      {
        __break(0xC471u);
        JUMPOUT(0x198035EF8);
      }
      v173 = *(_QWORD *)(a1 + 24);
      v4 = (uint64_t (**)())(v173 + 16 * (unsigned __int16)v118);
      LOWORD(v376[0]) = v3;
      v175 = v4 + 1;
      v174 = *((_DWORD *)v4 + 2);
      if (v174 == -1)
      {
        v211 = *v4;
        if (*v4
          || (WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v173 + 16 * (unsigned __int16)v118), 0), (v211 = *v4) != 0))
        {
          v212 = *((_DWORD *)v211 - 2);
        }
        else
        {
          v212 = 0;
        }
        v213 = 9 * ((~((_DWORD)v3 << 15) + v3) ^ ((~((_DWORD)v3 << 15) + v3) >> 10));
        v214 = (v213 ^ (v213 >> 6)) + ~((v213 ^ (v213 >> 6)) << 11);
        v215 = v212 & (v214 ^ HIWORD(v214));
        v216 = (unsigned __int16 *)((char *)v211 + 2 * v215);
        v217 = *v216;
        if (v217 != 0xFFFF)
        {
          v218 = 0;
          v219 = 1;
          do
          {
            if ((_DWORD)v3 == (unsigned __int16)v217)
            {
              v187 = 0;
              goto LABEL_182;
            }
            if ((unsigned __int16)v217 == 65534)
              v218 = v216;
            v215 = (v215 + v219) & v212;
            v216 = (unsigned __int16 *)((char *)v211 + 2 * v215);
            v217 = *v216;
            ++v219;
          }
          while (v217 != 0xFFFF);
          if (v218)
          {
            *v218 = -1;
            --*((_DWORD *)*v4 - 4);
            v3 = LOWORD(v376[0]);
            v216 = v218;
          }
        }
        *v216 = v3;
        v220 = *v4;
        if (*v4)
          v221 = *((_DWORD *)v220 - 3) + 1;
        else
          v221 = 1;
        *((_DWORD *)v220 - 3) = v221;
        v222 = *v4;
        if (*v4)
          v223 = *((_DWORD *)v222 - 3);
        else
          v223 = 0;
        v224 = (*((_DWORD *)v222 - 4) + v223);
        v225 = *((unsigned int *)v222 - 1);
        if (v225 > 0x400)
        {
          if (v225 > 2 * v224)
            goto LABEL_257;
        }
        else
        {
          if (3 * v225 > 4 * v224)
          {
LABEL_257:
            v226 = LOWORD(v376[0]);
            v227 = v376[0] & 0xFFC0;
            v228 = v173 + 16 * (unsigned __int16)v118;
            if (v227 >= *(unsigned __int16 *)(v228 + 12))
              v227 = *(unsigned __int16 *)(v228 + 12);
            *(_WORD *)(v228 + 12) = v227;
            if (*(unsigned __int16 *)(v228 + 14) > v226)
              v226 = *(unsigned __int16 *)(v228 + 14);
            *(_WORD *)(v228 + 14) = v226;
            if (v222)
            {
              v229 = *((_DWORD *)v222 - 1);
              v230 = __OFSUB__(v226, v227);
              v231 = v226 - v227;
              if (v231 < 0 != v230)
                v231 += 7;
              v113 = v376;
              if (2 * (v231 >> 3) < (2 * v229))
                WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)v4, v151, (uint64_t)v216, v152, v153, v154, v155, v156);
              v187 = 1;
              goto LABEL_183;
            }
            v187 = 1;
            goto LABEL_182;
          }
          if (!(_DWORD)v225)
          {
            v251 = 8;
LABEL_310:
            WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v173 + 16 * (unsigned __int16)v118), v251, v216);
            v222 = *v4;
            goto LABEL_257;
          }
        }
        v251 = (_DWORD)v225 << (6 * *((_DWORD *)v222 - 3) >= (2 * v225));
        goto LABEL_310;
      }
      if (!v174)
      {
        v247 = v173 + 16 * (unsigned __int16)v118;
        *(_WORD *)(v247 + 12) = v3 & 0xFFC0;
        *(_WORD *)(v247 + 14) = v3;
        *v175 = 1;
        v248 = (uint64_t)*v4;
        if (((unint64_t)*v4 & 0x8000000000000000) != 0)
          v249 = 63;
        else
          v249 = *(_QWORD *)(2 * v248);
        v113 = v376;
        v2 = v3 - (unint64_t)((unsigned __int16)v3 & 0xFFC0);
        if (v249 < v2 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v4, v2 + 1, 0);
          v248 = (uint64_t)*v4;
        }
        v250 = 2 * v248 + 8;
        if (v248 < 0)
          v250 = (uint64_t)v4;
        v187 = 1;
        *(_QWORD *)(v250 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
        goto LABEL_183;
      }
      v176 = v173 + 16 * (unsigned __int16)v118;
      v178 = *(unsigned __int16 *)(v176 + 12);
      v2 = v176 + 12;
      v177 = v178;
      v180 = (_WORD *)(v2 + 2);
      v179 = *(unsigned __int16 *)(v2 + 2);
      if (v178 <= v3 && v179 >= v3)
      {
        v182 = v3 - v177;
        if ((uint64_t)*v4 >= 0)
          v183 = 2 * (_QWORD)*v4 + 8;
        else
          v183 = (uint64_t)v4;
        v184 = (v182 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v185 = 1 << v182;
        v186 = *(_QWORD *)(v183 + v184);
        v85 = (v186 & (1 << v182)) == 0;
        v187 = v85;
        *(_QWORD *)(v183 + v184) = v186 | v185;
        if (v85)
          ++v174;
        *v175 = v174;
      }
      else
      {
        *v175 = v174 + 1;
        if ((v3 & 0xFFC0) >= v177)
          v188 = v177;
        else
          v188 = (unsigned __int16)v3 & 0xFFC0;
        if (v179 <= v3)
          v189 = v3;
        else
          v189 = v179;
        v190 = v189 - v188;
        if (v189 < (int)v188)
          v190 = v189 - v188 + 7;
        if ((v174 + 1) > 8)
          v191 = v174 + 1;
        else
          v191 = 8;
        if (12 * v191 < (v190 >> 3))
        {
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v4);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v384, (uint64_t *)v4, v376);
          *(_WORD *)v2 = v188;
          *v180 = v189;
          v187 = 1;
          v111 = 0xFFFFFFFFLL;
        }
        else
        {
          if (v177 > v3)
          {
            WTF::BitVector::shiftRightByMultipleOf64((WTF::BitVector *)v4, (int)v177 - (int)v188);
            *(_WORD *)v2 = v188;
            v177 = v188;
          }
          v111 = 0xFFFFFFFFLL;
          v192 = (uint64_t)*v4;
          if (((unint64_t)*v4 & 0x8000000000000000) != 0)
            v193 = 63;
          else
            v193 = *(_QWORD *)(2 * v192);
          v2 = v3 - v177;
          if (v193 < v2 + 1)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v4, v2 + 1, 0);
            v192 = (uint64_t)*v4;
          }
          v194 = 2 * v192 + 8;
          if (v192 < 0)
            v194 = (uint64_t)v4;
          *(_QWORD *)(v194 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
          *v180 = v189;
          v187 = 1;
        }
        v112 = 1;
      }
LABEL_182:
      v113 = v376;
LABEL_183:
      *(_DWORD *)(a1 + 40) += v187;
LABEL_184:
      if ((_DWORD)v372 == -1)
      {
LABEL_484:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_485;
      }
      v384 = (unsigned int **)v376;
      ((void (*)(unsigned int ***, WTF **))off_1E357F808[v372])(&v384, &v370);
      v136 = v372;
      v141 = v368;
    }
    v110 = v354;
    if (*(_DWORD *)(a1 + 36) <= v360)
    {
      __break(0xC471u);
      JUMPOUT(0x198036068);
    }
    v252 = *(_QWORD *)(a1 + 24) + 16 * v360;
    if (*(_DWORD *)(v252 + 8) == -1)
    {
      if (*(_QWORD *)v252)
      {
        v254 = *(_QWORD *)v252 - 16;
        goto LABEL_326;
      }
    }
    else
    {
      if ((*(_QWORD *)v252 & 0x8000000000000000) != 0)
        goto LABEL_318;
      v254 = 2 * *(_QWORD *)v252;
LABEL_326:
      WTF::fastFree(v254, (void *)v102, v103, v104, v105, v106, v107, v108);
      v110 = v354;
    }
LABEL_318:
    *(_OWORD *)v252 = xmmword_199150490;
LABEL_117:
    v110 += 4;
  }
  while (v110 != v365);
LABEL_347:
  v265 = *(_QWORD *)a1;
  v266 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v266)
  {
    v267 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v265 + 96) + 8 * v267))
    {
      if (v266 == ++v267)
        goto LABEL_414;
    }
    if ((_DWORD)v266 != (_DWORD)v267)
    {
      v268 = *(_DWORD *)(*(_QWORD *)a1 + 108);
      v269 = dword_1991505F0;
      while (1)
      {
        if (v268 <= v267)
        {
          __break(0xC471u);
          JUMPOUT(0x198035FD4);
        }
        v270 = *(_QWORD *)(*(_QWORD *)(v265 + 96) + 8 * v267);
        v271 = *(unsigned int *)(v270 + 20);
        if ((_DWORD)v271)
          break;
LABEL_380:
        v267 = (v267 + 1);
        if (v268 > v267)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v265 + 96) + 8 * v267))
          {
            if (v268 == ++v267)
            {
              LODWORD(v267) = v268;
              break;
            }
          }
        }
        if ((_DWORD)v266 == (_DWORD)v267)
          goto LABEL_414;
      }
      v272 = *(_QWORD *)(v270 + 8);
      v273 = v272 + (v271 << 7);
      while (2)
      {
        v274 = *(unsigned int *)(v272 + 12);
        if ((_DWORD)v274)
        {
          v275 = *(_QWORD *)v272;
          v276 = *(_QWORD *)v272 + 32 * v274;
          do
          {
            if (*(_BYTE *)(v275 + 8) == 9)
            {
              v277 = *(unsigned int *)(*(_QWORD *)v275 + 8);
              v278 = *(unsigned int *)(a1 + 20);
              if (v278 <= v277)
              {
LABEL_511:
                __break(0xC471u);
                JUMPOUT(0x198035EACLL);
              }
              while (1)
              {
                v279 = *(_QWORD *)(a1 + 8);
                v280 = *(unsigned int *)(v279 + 4 * v277);
                if (v280 == v277)
                  break;
                if (v278 <= v280)
                  goto LABEL_511;
                v277 = *(unsigned int *)(v279 + 4 * v277);
              }
              *(_QWORD *)v275 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * v277);
              *(_WORD *)(v275 + 8) = 521;
              *(_QWORD *)(v275 + 16) = 0;
              *(_BYTE *)(v275 + 24) = 0;
            }
            v275 += 32;
          }
          while (v275 != v276);
        }
        if ((_BYTE)word_1ECF4C698)
        {
          v281 = *(__int16 *)(v272 + 120);
          if (v281 > 93)
          {
            v282 = 0;
            if (v281 > 106)
            {
              if (v281 == 108)
              {
LABEL_369:
                v282 = 1;
              }
              else if (v281 != 107)
              {
                if (v281 != 113)
                  goto LABEL_371;
                v282 = 2;
              }
            }
            else if (v281 != 94)
            {
              goto LABEL_371;
            }
            if (*(_DWORD *)(v272 + 12) == 3)
            {
              v283 = *(_QWORD *)v272;
              if (*(_BYTE *)(*(_QWORD *)v272 + 8) == 9)
              {
                v284 = *(_DWORD **)v283;
                if (*(_BYTE *)(*(_QWORD *)v283 + 4) == 1 && *v284 == v269[v282] && *(_BYTE *)(v283 + 40) == 9)
                {
                  v285 = *(_QWORD *)(v283 + 32);
                  if (*(_BYTE *)(v285 + 4) == 1
                    && v284 == (_DWORD *)v285
                    && *(_DWORD *)v285 == v269[v282]
                    && *(_DWORD *)(v283 + 16) == *(_DWORD *)(v283 + 48)
                    && *(_DWORD *)(v283 + 20) == *(_DWORD *)(v283 + 52)
                    && *(_DWORD *)(v283 + 12) == *(_DWORD *)(v283 + 44))
                  {
                    v370 = (WTF *)&v372;
                    v371 = 3;
                    *(_QWORD *)v375 = 0;
                    *(_WORD *)&v375[8] = 0;
                    v375[10] &= 0xFCu;
                    v286 = *(_QWORD *)v272;
                    if (*(_QWORD *)v272 != v272 + 16)
                    {
                      if (v286)
                      {
                        *(_QWORD *)v272 = 0;
                        *(_DWORD *)(v272 + 8) = 0;
                        WTF::fastFree(v286, (void *)v102, v103, v104, v105, v106, v107, v108);
                        v269 = dword_1991505F0;
                      }
                      *(_QWORD *)v272 = v272 + 16;
                      v291 = v370;
                      if (v370 == (WTF *)&v372)
                      {
                        if (HIDWORD(v371))
                        {
                          v350 = 0;
                          v351 = 32 * HIDWORD(v371);
                          do
                          {
                            v352 = v272 + v350;
                            v353 = *(_OWORD *)&v374[v350];
                            *(_OWORD *)(v352 + 16) = *(_OWORD *)&(&v372)[v350 / 8];
                            *(_OWORD *)(v352 + 32) = v353;
                            v350 += 32;
                          }
                          while (v351 != v350);
                        }
                      }
                      else
                      {
                        v370 = (WTF *)&v372;
                        *(_QWORD *)v272 = v291;
                      }
                    }
                    *(_DWORD *)(v272 + 8) = v371;
                    v287 = HIDWORD(v371);
                    HIDWORD(v371) = 0;
                    *(_DWORD *)(v272 + 12) = v287;
                    v288 = *(_QWORD *)v375;
                    *(_DWORD *)(v272 + 119) = *(_DWORD *)&v375[7];
                    *(_QWORD *)(v272 + 112) = v288;
                    v289 = v370;
                    if (&v372 != (_QWORD **)v370 && v370)
                    {
                      v370 = 0;
                      LODWORD(v371) = 0;
                      v290 = v269;
                      WTF::fastFree((unint64_t)v289, (void *)v102, v103, v104, v105, v106, v107, v108);
                      v269 = v290;
                    }
                  }
                }
              }
            }
          }
          else if (v281 == 90)
          {
            goto LABEL_369;
          }
        }
LABEL_371:
        v272 += 128;
        if (v272 == v273)
        {
          v268 = *(_DWORD *)(v265 + 108);
          goto LABEL_380;
        }
        continue;
      }
    }
  }
LABEL_414:
  WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v384, a2);
  v302 = *(_QWORD *)a1;
  v365 = (unsigned __int16 *)*(unsigned int *)(*(_QWORD *)a1 + 76);
  if ((_DWORD)v365)
  {
    v120 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v302 + 64) + 8 * v120))
    {
      if (v365 == (unsigned __int16 *)++v120)
        goto LABEL_521;
    }
    if ((_DWORD)v365 != (_DWORD)v120)
    {
      v5 = 0xFFFFFFFFLL;
      v113 = v386;
      v112 = (uint64_t)off_1E357F7E8;
      v118 = off_1E357F7F8;
      v111 = (uint64_t)&v370;
      v303 = *(_DWORD *)(*(_QWORD *)a1 + 76);
      v4 = off_1E357F808;
      v364 = *(_QWORD *)a1;
      while (1)
      {
        v2 = *(_QWORD *)(*(_QWORD *)(v302 + 64) + 8 * v120);
        v304 = *(unsigned int *)(v2 + 8);
        if (*(_DWORD *)(a1 + 20) <= v304)
        {
          __break(0xC471u);
          JUMPOUT(0x198035FE8);
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v304) == (_DWORD)v304 && !*(_QWORD *)(v2 + 16))
          break;
LABEL_458:
        v120 = (v120 + 1);
        if (v303 > v120)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v302 + 64) + 8 * v120))
          {
            if (v303 == ++v120)
            {
              LODWORD(v120) = v303;
              break;
            }
          }
        }
        if ((_DWORD)v365 == (_DWORD)v120)
          goto LABEL_521;
      }
      v3 = *(unsigned int *)(a2 + 12);
      if (HIDWORD(v385) < v3)
      {
LABEL_485:
        if (v385 < v3)
        {
          WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v384, v3);
          LOWORD(v304) = *(_WORD *)(v2 + 8);
        }
      }
      HIDWORD(v385) = v3;
      if (*(_DWORD *)(a1 + 36) <= (unsigned __int16)v304)
      {
        __break(0xC471u);
        JUMPOUT(0x198035FF0);
      }
      v305 = *(_QWORD *)(a1 + 24);
      v306 = v305 + 16 * (unsigned __int16)v304;
      if (*(_DWORD *)(v306 + 8) != -1)
      {
        v307 = *(_QWORD *)v306;
        if ((*(_QWORD *)v306 & 0x8000000000000000) != 0)
        {
          v313 = 0;
          v309 = __clz(__rbit64(v307));
          if (v309 >= 0x3F)
            v309 = 63;
        }
        else
        {
          v308 = 2 * v307;
          v309 = *(_QWORD *)(2 * v307);
          if (v309 + 63 < 0x40)
          {
LABEL_483:
            v313 = 0;
          }
          else
          {
            v310 = *(_QWORD *)(v308 + 8);
            if (v310)
            {
              v311 = __clz(__rbit64(v310));
              if (v311 < 0x40)
              {
                v312 = 0;
                goto LABEL_430;
              }
            }
            v313 = ((v309 + 63) >> 6) - 1;
            if ((v309 + 63) >> 6 != 1)
            {
              v328 = 0;
              v329 = v308 + 16;
              while (1)
              {
                v330 = *(_QWORD *)(v329 + 8 * v328);
                if (v330)
                {
                  v311 = __clz(__rbit64(v330));
                  if (v311 <= 0x3F)
                    break;
                }
                if (v313 == ++v328)
                  goto LABEL_483;
              }
              v312 = v328 + 1;
LABEL_430:
              v313 = 0;
              v309 = v311 + (v312 << 6);
            }
          }
        }
        v314 = (WTF *)(v305 + 16 * (unsigned __int16)v304);
LABEL_432:
        v315 = v305 + 16 * (unsigned __int16)v304;
        v317 = *(_WORD *)(v315 + 12);
        v316 = (__int16 *)(v315 + 12);
        v370 = v314;
        v371 = v309;
        LODWORD(v372) = v313;
        v373 = v317;
        if (*(_DWORD *)(v306 + 8) == -1)
        {
          v333 = *(_QWORD *)v306;
          if (*(_QWORD *)v306)
          {
            v334 = *(unsigned int *)(v333 - 4);
            v306 = v333 + 2 * v334;
          }
          else
          {
            v306 = 0;
            v334 = 0;
          }
          v319 = v333 + 2 * v334;
          v318 = 1;
        }
        else
        {
          v318 = 0;
          if ((*(_QWORD *)v306 & 0x8000000000000000) != 0)
            v319 = 63;
          else
            v319 = *(_QWORD *)(2 * *(_QWORD *)v306);
        }
        v320 = *v316;
        v366 = (unsigned int ***)v306;
        v367 = (_QWORD *)v319;
        LODWORD(v368) = v318;
        v369 = v320;
        while (1)
        {
          v321 = v318 == v313;
          if (v318 == v5)
            v321 = 0;
          if (v313 == v5)
            v322 = v318 == v5;
          else
            v322 = v321;
          if (v313 != v5 && v321)
          {
            v376[0] = v113;
            v322 = (*(uint64_t (**)(_QWORD *, WTF **, unsigned int ****))(v112 + 8 * v318))(v376, &v370, &v366);
          }
          if (v322 && v373 == v369)
            break;
          v386[0] = v111;
          if ((_DWORD)v372 == -1)
            goto LABEL_484;
          v376[0] = v113;
          v324 = ((uint64_t (*)(_QWORD *, WTF **))v118[v372])(v376, &v370);
          if (*(_DWORD *)(a1 + 20) <= v324)
          {
            __break(0xC471u);
            JUMPOUT(0x198035ED0);
          }
          if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v324) == v324)
          {
            v376[0] = 0;
            v325 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * v324);
            v376[0] = v325;
            v326 = HIDWORD(v385);
            if (HIDWORD(v385) == (_DWORD)v385)
            {
              v327 = (unsigned int **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v384, HIDWORD(v385) + 1, (unint64_t)v376);
              v326 = HIDWORD(v385);
              v384[HIDWORD(v385)] = *v327;
            }
            else
            {
              v384[HIDWORD(v385)] = v325;
            }
            HIDWORD(v385) = v326 + 1;
          }
          if ((_DWORD)v372 == -1)
            goto LABEL_484;
          v376[0] = v113;
          ((void (*)(_QWORD *, WTF **))v4[v372])(v376, &v370);
          v313 = v372;
          v318 = v368;
        }
        JSC::B3::Air::assign((unsigned int *)v2, &v384);
        v302 = v364;
        v303 = *(_DWORD *)(v364 + 76);
        goto LABEL_458;
      }
      v314 = *(WTF **)v306;
      if (*(_QWORD *)v306)
      {
        v331 = *((unsigned int *)v314 - 1);
        v309 = (unint64_t)v314 + 2 * v331;
        if (*((_DWORD *)v314 - 3))
        {
          if ((_DWORD)v331)
          {
            v332 = 2 * v331;
            while (*(unsigned __int16 *)v314 >= 0xFFFEu)
            {
              v314 = (WTF *)((char *)v314 + 2);
              v332 -= 2;
              if (!v332)
              {
                v314 = (WTF *)v309;
                goto LABEL_481;
              }
            }
          }
          goto LABEL_481;
        }
        v340 = (WTF *)((char *)v314 + 2 * v331);
      }
      else
      {
        v340 = 0;
        v331 = 0;
      }
      v309 = (unint64_t)v314 + 2 * v331;
      v314 = v340;
LABEL_481:
      v313 = 1;
      goto LABEL_432;
    }
  }
LABEL_521:
  v342 = v384;
  if (v384)
  {
    v384 = 0;
    LODWORD(v385) = 0;
    WTF::fastFree((unint64_t)v342, v295, v296, v297, v298, v299, v300, v301);
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v378, v295, v296, v297, v298, v299, v300, v301);
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::~GraphColoringStackAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10)
    WTF::VectorTypeOperations<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>>::destruct(*(uint64_t **)(a1 + 24), *(_QWORD *)(a1 + 24) + 16 * v10, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::GraphColoringStackAllocator(uint64_t a1, JSC::B3::Air::Code *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::setMaxIndex(v3 + 24, (void *)*(unsigned int *)(*(_QWORD *)a1 + 76), v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Air::Kind *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  unsigned int *v48;
  WTF **v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  WTF *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int *v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t *v94;
  unsigned int *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int i;
  uint64_t v116;
  unsigned int j;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  int *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  int v138;
  _BOOL4 v139;
  int v140;
  unsigned int v142;
  unsigned int v143;
  unsigned __int8 v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  uint64_t *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t k;
  unint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  WTF *v178;
  uint64_t *v179;
  WTF *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  unsigned int **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int **v190;
  unsigned int v192;
  uint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  WTF *v205;
  uint64_t v206;
  uint64_t v207;
  WTF *v208;
  uint64_t v209;
  int *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  _BOOL4 v217;
  int v218;
  unsigned int v220;
  unsigned int *v221;
  int v222;
  unsigned int **v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v228;
  unsigned int *v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t *v232;
  int v233;
  uint64_t *v234;
  WTF *v235;
  WTF *v236;
  _QWORD *v237;
  unsigned int **v238;
  uint64_t v239;
  int v240;
  WTF *v241;
  uint64_t v242;
  _QWORD *v243;
  int v244;
  uint64_t v245;
  __int16 v246;
  char v247;
  _QWORD v248[2];
  unsigned __int8 v249;
  WTF **v250;
  unsigned int *v251;
  unsigned int *v252;
  _BYTE v253[32];
  uint64_t v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  _QWORD v259[2];
  unsigned int **v260;
  WTF **v261;

  JSC::B3::Air::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::Liveness((uint64_t)v253, *(_QWORD *)a1);
  v3 = *(_QWORD *)a1;
  v230 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v230)
  {
    v4 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v3 + 96) + 8 * v4))
    {
      if (v230 == ++v4)
        goto LABEL_103;
    }
    if ((_DWORD)v230 != (_DWORD)v4)
    {
      v5 = (WTF *)&v243;
      v6 = &v245;
      LODWORD(v7) = *(_DWORD *)(*(_QWORD *)a1 + 108);
      LODWORD(v8) = v4;
      v228 = *(_QWORD *)a1;
      while (1)
      {
        v252 = 0;
        if (v7 <= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x198037484);
        }
        v9 = *(unsigned int **)(*(_QWORD *)(v3 + 96) + 8 * v8);
        v251 = v9;
        v252 = v9;
        v250 = (WTF **)v253;
        v257 = 0;
        v10 = v258 + 32 * *v9;
        v11 = *(unsigned int *)(v10 + 12);
        v233 = v8;
        if ((_DWORD)v11)
        {
          v12 = *(_DWORD **)v10;
          v13 = v254;
          v14 = 4 * v11;
          do
          {
            v15 = *v12;
            v16 = *(unsigned int *)(v13 + 4 * v15);
            v17 = v257;
            if (v257 <= v16 || *(_DWORD *)(v255 + 4 * v16) != (_DWORD)v15)
            {
              LODWORD(v241) = *v12;
              if (v257 == v256)
              {
                v18 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v255, v257 + 1, (unint64_t)&v241);
                *(_DWORD *)(v255 + 4 * v257) = *v18;
                v13 = v254;
              }
              else
              {
                *(_DWORD *)(v255 + 4 * v257) = v15;
              }
              ++v257;
              *(_DWORD *)(v13 + 4 * v15) = v17;
            }
            ++v12;
            v14 -= 4;
          }
          while (v14);
          v9 = v252;
        }
        v237 = &v250;
        v238 = &v252;
        v239 = a1;
        v19 = v9[5];
        if ((_DWORD)v19)
          break;
LABEL_75:
        v84 = v252;
        v85 = *((_QWORD *)v252 + 1);
        v86 = v252[5];
        v87 = v85 + (v86 << 7);
        if ((_DWORD)v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = (unsigned int *)(v85 + (v86 << 7));
          v91 = (unint64_t)v90;
          do
          {
            v92 = v85 + v88;
            if (*(_QWORD *)(v85 + v88 + 112))
              v93 = 0;
            else
              v93 = *(unsigned __int16 *)(v85 + v88 + 120) == 0;
            if (v93 && (*(_BYTE *)(v92 + 122) & 3) == 0)
            {
              v94 = v6;
              if (!*(_DWORD *)(v85 + v88 + 12))
              {
                if (v91 == *((_QWORD *)v84 + 1) + ((unint64_t)v84[5] << 7))
                {
                  v91 = v85 + v88;
                }
                else if ((unsigned int *)v92 != v90)
                {
                  v95 = v90;
                  WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, (unsigned int *)v92, v91, v79, v80, v81, v82, v83);
                  v91 += v85 + v88 - (_QWORD)v95;
                }
                v96 = *(_QWORD *)(v85 + v88);
                if (v85 + v88 + 16 != v96 && v96)
                {
                  v97 = v85 + v88;
                  *(_QWORD *)v97 = 0;
                  *(_DWORD *)(v97 + 8) = 0;
                  WTF::fastFree(v96, (void *)v92, v78, v79, v80, v81, v82, v83);
                }
                v90 = (unsigned int *)(v85 + v88 + 128);
                ++v89;
              }
              v6 = v94;
            }
            v88 += 128;
          }
          while (v85 + v88 < v87);
          v85 = *((_QWORD *)v84 + 1);
          LODWORD(v86) = v84[5];
          v87 = v91;
        }
        else
        {
          v89 = 0;
          v90 = (unsigned int *)(v85 + (v86 << 7));
        }
        v98 = (unsigned int *)(v85 + ((unint64_t)v86 << 7));
        if (v90 != v98)
        {
          WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v90, v98, v87, v79, v80, v81, v82, v83);
          LODWORD(v86) = v84[5];
        }
        v84[5] = v86 - v89;
        v8 = (v233 + 1);
        v3 = v228;
        v7 = *(unsigned int *)(v228 + 108);
        if (v7 > v8)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v228 + 96) + 8 * v8))
          {
            if (v7 == ++v8)
            {
              LODWORD(v8) = *(_DWORD *)(v228 + 108);
              break;
            }
          }
        }
        if ((_DWORD)v230 == (_DWORD)v8)
          goto LABEL_103;
      }
      while (1)
      {
        v20 = v19 - 1;
        if (v252[5] <= (int)v19 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19803745CLL);
        }
        v21 = (v19 - 1);
        v22 = *((_QWORD *)v252 + 1);
        v23 = (WTF **)(v22 + (v21 << 7));
        if ((JSC::B3::Air::Inst::hasNonArgEffects((JSC::B3::Air::Inst *)v23) & 1) != 0)
          goto LABEL_43;
        v249 = 1;
        v248[0] = &v249;
        v248[1] = &v250;
        v30 = (JSC::B3::Air::Kind *)(v23 + 15);
        if ((*((__int16 *)v23 + 60) - 446) > 5)
        {
          v32 = *((unsigned int *)v23 + 3);
          if (!(_DWORD)v32)
            goto LABEL_39;
          v33 = 0;
          v34 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
              + 21 * *((__int16 *)v23 + 60)
              + ((unint64_t)((v32 - 1) * v32) >> 1);
          v35 = 32 * v32;
          v31 = 1;
          do
          {
            v37 = *v34++;
            v36 = v37;
            if ((v37 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198037410);
            }
            if ((v36 & 0xFu) - 8 < 3
              || (v36 & 0xC) == 4
              && ((v38 = (_QWORD *)((char *)*v23 + v33), *((_BYTE *)v38 + 8) != 9)
               || (v39 = *v38, *(_BYTE *)(v39 + 4) != 1)
               || (v40 = *(unsigned int *)(v39 + 8),
                   v41 = *((unsigned int *)v250[4] + v40),
                   *((_DWORD *)v250 + 15) > v41)
               && *((_DWORD *)v250[6] + v41) == (_DWORD)v40))
            {
              v31 = 0;
              v249 = 0;
            }
            v33 += 32;
          }
          while (v35 != v33);
        }
        else
        {
          v242 = (uint64_t)&v241;
          v243 = v248;
          v259[1] = &v241;
          if (*(_WORD *)v30 == 448)
          {
            v261 = &v241;
            if (!*((_DWORD *)v23 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x198037474);
            }
            (*(void (**)(_QWORD, unint64_t, unsigned int ***))(**(_QWORD **)*v23 + 16))(*(_QWORD *)*v23, v22 + ((unint64_t)(v19 - 1) << 7), &v260);
          }
          else
          {
            switch(*(_WORD *)v30)
            {
              case 0x1BE:
                break;
              case 0x1BF:
                JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v22 + ((unint64_t)(v19 - 1) << 7), (uint64_t)v259);
                break;
              case 0x1C1:
                JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v22 + ((unint64_t)(v19 - 1) << 7), (uint64_t)v259);
                break;
              case 0x1C2:
                v260 = (unsigned int **)v259;
                JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(v22 + ((unint64_t)(v19 - 1) << 7), (uint64_t)&v260);
                break;
              case 0x1C3:
                JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v22 + ((unint64_t)(v19 - 1) << 7), (uint64_t)v259);
                break;
              default:
                WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v30, "\n");
                __break(0xC471u);
                JUMPOUT(0x198037444);
            }
          }
          v31 = v249;
        }
        if (v31)
        {
LABEL_39:
          v241 = v5;
          v242 = 3;
          v245 = 0;
          v246 = 0;
          v247 &= 0xFCu;
          v43 = (WTF *)(v23 + 2);
          v42 = (unint64_t)*v23;
          if (*v23 != (WTF *)(v23 + 2))
          {
            if (v42)
            {
              *v23 = 0;
              *((_DWORD *)v23 + 2) = 0;
              WTF::fastFree(v42, v30, v24, v25, v26, v27, v28, v29);
            }
            *v23 = v43;
            v73 = v241;
            if (v241 == v5)
            {
              if (HIDWORD(v242))
              {
                v74 = 32 * HIDWORD(v242);
                v75 = v5;
                do
                {
                  v76 = *(_OWORD *)v75;
                  v77 = *((_OWORD *)v75 + 1);
                  v75 = (WTF *)((char *)v75 + 32);
                  *(_OWORD *)v43 = v76;
                  *((_OWORD *)v43 + 1) = v77;
                  v43 = (WTF *)((char *)v43 + 32);
                  v74 -= 32;
                }
                while (v74);
              }
            }
            else
            {
              v241 = v5;
              *v23 = v73;
            }
          }
          *((_DWORD *)v23 + 2) = v242;
          v44 = HIDWORD(v242);
          HIDWORD(v242) = 0;
          *((_DWORD *)v23 + 3) = v44;
          v45 = v22 + (v21 << 7);
          v46 = *v6;
          *(_DWORD *)(v45 + 119) = *(_DWORD *)((char *)v6 + 7);
          *(_QWORD *)(v45 + 112) = v46;
          v47 = v241;
          if (v5 != v241 && v241)
          {
            v241 = 0;
            LODWORD(v242) = 0;
            WTF::fastFree((unint64_t)v47, v30, v24, v25, v26, v27, v28, v29);
          }
        }
LABEL_43:
        v49 = v250;
        v48 = v251;
        v50 = v250[1];
        v51 = *((_QWORD *)v50 + 2 * *v251);
        v52 = v51 + (v19 << 6);
        v53 = *(unsigned int *)(v52 + 44);
        if ((_DWORD)v53)
        {
          v65 = *(unsigned int **)(v52 + 32);
          v66 = v250[4];
          v67 = 4 * v53;
          v68 = *((_DWORD *)v250 + 15);
          do
          {
            v69 = *v65;
            v70 = *((unsigned int *)v66 + v69);
            if (v68 > v70)
            {
              v71 = v49[6];
              if (*((_DWORD *)v71 + v70) == (_DWORD)v69)
              {
                v72 = *((unsigned int *)v71 + v68 - 1);
                *((_DWORD *)v71 + v70) = v72;
                *((_DWORD *)v66 + v72) = v70;
                v68 = *((_DWORD *)v49 + 15) - 1;
                *((_DWORD *)v49 + 15) = v68;
              }
            }
            ++v65;
            v67 -= 4;
          }
          while (v67);
          v51 = *((_QWORD *)v50 + 2 * *v48);
        }
        v54 = v51 + (v21 << 6);
        v55 = *(unsigned int *)(v54 + 12);
        if ((_DWORD)v55)
        {
          v56 = *(_DWORD **)v54;
          v57 = v49 + 6;
          v58 = v49[4];
          v59 = 4 * v55;
          do
          {
            v60 = v6;
            v61 = v5;
            v62 = *v56;
            v63 = *((unsigned int *)v58 + v62);
            v64 = *((unsigned int *)v49 + 15);
            if (v64 <= v63 || *(_DWORD *)(*v57 + 4 * v63) != (_DWORD)v62)
            {
              LODWORD(v241) = *v56;
              if ((_DWORD)v64 == *((_DWORD *)v49 + 14))
              {
                *((_DWORD *)v49[6] + *((unsigned int *)v49 + 15)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v49 + 6), v64 + 1, (unint64_t)&v241);
                v58 = v49[4];
              }
              else
              {
                *(_DWORD *)(*v57 + 4 * v64) = v62;
              }
              ++*((_DWORD *)v49 + 15);
              *((_DWORD *)v58 + v62) = v64;
            }
            ++v56;
            v59 -= 4;
            v5 = v61;
            v6 = v60;
          }
          while (v59);
        }
        v19 = v20;
        if (!(_DWORD)v20)
          goto LABEL_75;
      }
    }
  }
LABEL_103:
  v99 = *(unsigned int *)(a1 + 60);
  v100 = 126 - 2 * __clz(v99);
  if ((_DWORD)v99)
    v101 = v100;
  else
    v101 = 0;
  v109 = *(_DWORD *)(a1 + 60);
  if (v109)
  {
    v110 = *(unsigned int **)(a1 + 48);
    v111 = &v110[3 * v109];
    v234 = (uint64_t *)(a1 + 24);
    v229 = v111;
    do
    {
      v112 = *v110;
      v113 = *(_DWORD *)(a1 + 20);
      if (v113 <= v112)
      {
LABEL_339:
        __break(0xC471u);
        JUMPOUT(0x19803744CLL);
      }
      v114 = *(_QWORD *)(a1 + 8);
      for (i = *(_DWORD *)(v114 + 4 * v112); i != (_DWORD)v112; i = *(_DWORD *)(v114 + 4 * i))
      {
        if (v113 <= i)
          goto LABEL_339;
        LODWORD(v112) = i;
      }
      v116 = v110[1];
      if (v113 <= v116)
      {
LABEL_340:
        __break(0xC471u);
        JUMPOUT(0x198037454);
      }
      for (j = *(_DWORD *)(v114 + 4 * v116); j != (_DWORD)v116; j = *(_DWORD *)(v114 + 4 * j))
      {
        if (v113 <= j)
          goto LABEL_340;
        LODWORD(v116) = j;
      }
      if ((_DWORD)v112 == (_DWORD)v116
        || (WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>::contains((uint64_t)v234, v112, v116) & 1) != 0)
      {
        goto LABEL_176;
      }
      if (*(_DWORD *)(a1 + 20) <= v112)
      {
        __break(0xC471u);
        JUMPOUT(0x19803749CLL);
      }
      v118 = v112;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v112) = v116;
      if (*(_DWORD *)(a1 + 36) <= v112)
      {
        __break(0xC471u);
        JUMPOUT(0x1980374A4);
      }
      v119 = *v234 + 24 * v112;
      v231 = v112;
      if (*(_DWORD *)(v119 + 8) == -1)
      {
        v127 = *(WTF **)v119;
        if (*(_QWORD *)v119)
        {
          v128 = *((unsigned int *)v127 - 1);
          v122 = (unint64_t)v127 + 4 * v128;
          if (*((_DWORD *)v127 - 3))
          {
            if ((_DWORD)v128)
            {
              v129 = 4 * v128;
              while (*(_DWORD *)v127 >= 0xFFFFFFFE)
              {
                v127 = (WTF *)((char *)v127 + 4);
                v129 -= 4;
                if (!v129)
                {
                  v127 = (WTF *)v122;
                  goto LABEL_140;
                }
              }
            }
            goto LABEL_140;
          }
          v130 = (WTF *)((char *)v127 + 4 * v128);
        }
        else
        {
          v130 = 0;
          v128 = 0;
        }
        v122 = (unint64_t)v127 + 4 * v128;
        v127 = v130;
        v118 = v112;
LABEL_140:
        v126 = 1;
        goto LABEL_141;
      }
      v120 = *(_QWORD *)v119;
      if ((*(_QWORD *)v119 & 0x8000000000000000) != 0)
      {
        v126 = 0;
        v122 = __clz(__rbit64(v120));
        if (v122 >= 0x3F)
          v122 = 63;
        goto LABEL_129;
      }
      v121 = 2 * v120;
      v122 = *(_QWORD *)(2 * v120);
      if (v122 + 63 < 0x40)
      {
LABEL_184:
        v126 = 0;
        goto LABEL_129;
      }
      v123 = *(_QWORD *)(v121 + 8);
      if (v123 && (v124 = __clz(__rbit64(v123)), v124 < 0x40))
      {
        v125 = 0;
      }
      else
      {
        v126 = ((v122 + 63) >> 6) - 1;
        if ((v122 + 63) >> 6 == 1)
          goto LABEL_129;
        v150 = 0;
        v151 = v121 + 16;
        while (1)
        {
          v152 = *(_QWORD *)(v151 + 8 * v150);
          if (v152)
          {
            v124 = __clz(__rbit64(v152));
            if (v124 <= 0x3F)
              break;
          }
          if (v126 == ++v150)
            goto LABEL_184;
        }
        v125 = v150 + 1;
      }
      v126 = 0;
      v122 = v124 + (v125 << 6);
LABEL_129:
      v127 = (WTF *)(*v234 + 24 * v112);
LABEL_141:
      v131 = *v234 + 24 * v118;
      v133 = *(_DWORD *)(v131 + 12);
      v132 = (int *)(v131 + 12);
      v241 = v127;
      v242 = v122;
      LODWORD(v243) = v126;
      v244 = v133;
      if (*(_DWORD *)(v119 + 8) == -1)
      {
        v136 = *(WTF **)v119;
        if (*(_QWORD *)v119)
        {
          v137 = *((unsigned int *)v136 - 1);
          v119 = (uint64_t)v136 + 4 * v137;
        }
        else
        {
          v119 = 0;
          v137 = 0;
        }
        v135 = (uint64_t)v136 + 4 * v137;
        v134 = 1;
      }
      else
      {
        v134 = 0;
        if ((*(_QWORD *)v119 & 0x8000000000000000) != 0)
          v135 = 63;
        else
          v135 = *(_QWORD *)(2 * *(_QWORD *)v119);
      }
      v138 = *v132;
      v237 = (_QWORD *)v119;
      v238 = (unsigned int **)v135;
      LODWORD(v239) = v134;
      v240 = v138;
      while (1)
      {
        v139 = v134 == v126;
        if (v134 == 0xFFFFFFFFLL)
          v139 = 0;
        if (v126 == 0xFFFFFFFF)
          v140 = v134 == 0xFFFFFFFFLL;
        else
          v140 = v139;
        if (v126 != 0xFFFFFFFF && v139)
        {
          v260 = (unsigned int **)v259;
          v140 = ((uint64_t (*)(unsigned int ***, WTF **, _QWORD **))off_1E357F818[v134])(&v260, &v241, &v237);
        }
        if (v140 && v244 == v240)
          break;
        v259[0] = &v241;
        if ((_DWORD)v243 == -1)
          goto LABEL_335;
        v260 = (unsigned int **)v259;
        v142 = ((uint64_t (*)(unsigned int ***, WTF **))off_1E357F828[v243])(&v260, &v241);
        if (v142 != (_DWORD)v116)
        {
          v143 = v142;
          if (*(_DWORD *)(a1 + 36) <= v142)
          {
            __break(0xC471u);
            JUMPOUT(0x198037464);
          }
          v144 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(a1 + 24) + 24 * v142), v116);
          v145 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 40) += v144;
          if (v145 <= v116)
          {
            __break(0xC471u);
            JUMPOUT(0x19803746CLL);
          }
          *(_DWORD *)(a1 + 40) += WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(a1 + 24) + 24 * v116), v143);
        }
        if ((_DWORD)v243 == -1)
        {
LABEL_335:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_336:
          __break(0xC471u);
          JUMPOUT(0x1980373F0);
        }
        v260 = (unsigned int **)v259;
        ((void (*)(unsigned int ***, WTF **))off_1E357F838[v243])(&v260, &v241);
        v126 = v243;
        v134 = v239;
      }
      v146 = v112;
      if (*(_DWORD *)(a1 + 36) <= v112)
      {
        __break(0xC471u);
        JUMPOUT(0x1980374ACLL);
      }
      v147 = *v234;
      v148 = *v234 + 24 * v231;
      v111 = v229;
      if (*(_DWORD *)(v148 + 8) == -1)
      {
        if (*(_QWORD *)v148)
        {
          v149 = *(_QWORD *)v148 - 16;
          goto LABEL_174;
        }
      }
      else if ((*(_QWORD *)v148 & 0x8000000000000000) == 0)
      {
        v149 = 2 * *(_QWORD *)v148;
LABEL_174:
        WTF::fastFree(v149, v102, v103, v104, v105, v106, v107, v108);
        v146 = v231;
      }
      *(_QWORD *)v148 = 0x8000000000000000;
      *(_QWORD *)(v148 + 8) = 0;
      *(_DWORD *)(v147 + 24 * v146 + 16) = 0;
LABEL_176:
      v110 += 3;
    }
    while (v110 != v111);
  }
  v153 = *(_QWORD *)a1;
  v154 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v154)
  {
    v155 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v153 + 96) + 8 * v155))
    {
      if (v154 == ++v155)
        goto LABEL_249;
    }
    if ((_DWORD)v154 != (_DWORD)v155)
    {
      v156 = (WTF *)&v243;
      v157 = &v245;
      v158 = *(_DWORD *)(*(_QWORD *)a1 + 108);
      while (1)
      {
        if (v158 <= v155)
        {
          __break(0xC471u);
          JUMPOUT(0x19803748CLL);
        }
        v159 = *(_QWORD *)(*(_QWORD *)(v153 + 96) + 8 * v155);
        v160 = *(unsigned int *)(v159 + 20);
        if ((_DWORD)v160)
          break;
LABEL_244:
        v155 = (v155 + 1);
        if (v158 > v155)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v153 + 96) + 8 * v155))
          {
            if (v158 == ++v155)
            {
              LODWORD(v155) = v158;
              break;
            }
          }
        }
        if ((_DWORD)v154 == (_DWORD)v155)
          goto LABEL_249;
      }
      v161 = *(_QWORD *)(v159 + 8);
      v162 = v161 + (v160 << 7);
      while (1)
      {
        v163 = *(unsigned int *)(v161 + 12);
        if ((_DWORD)v163)
        {
          v164 = *(_QWORD *)v161;
          v165 = *(_QWORD *)v161 + 32 * v163;
          do
          {
            if (*(_BYTE *)(v164 + 8) == 9)
            {
              v166 = *(unsigned int *)(*(_QWORD *)v164 + 8);
              v167 = *(unsigned int *)(a1 + 20);
              if (v167 <= v166)
                goto LABEL_336;
              for (k = *(_QWORD *)(a1 + 8); ; v166 = *(unsigned int *)(k + 4 * v166))
              {
                v169 = *(unsigned int *)(k + 4 * v166);
                if (v169 == v166)
                  break;
                if (v167 <= v169)
                  goto LABEL_336;
              }
              *(_QWORD *)v164 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * v166);
              *(_WORD *)(v164 + 8) = 521;
              *(_QWORD *)(v164 + 16) = 0;
              *(_BYTE *)(v164 + 24) = 0;
            }
            v164 += 32;
          }
          while (v164 != v165);
        }
        if (!(_BYTE)word_1ECF4C698)
          goto LABEL_233;
        v170 = *(__int16 *)(v161 + 120);
        if (v170 > 93)
        {
          v171 = 0;
          if (v170 > 106)
          {
            switch(v170)
            {
              case 'l':
LABEL_212:
                v171 = 1;
LABEL_215:
                if (*(_DWORD *)(v161 + 12) == 3)
                {
                  v172 = *(_QWORD *)v161;
                  if (*(_BYTE *)(*(_QWORD *)v161 + 8) == 9)
                  {
                    v173 = *(_DWORD **)v172;
                    if (*(_BYTE *)(*(_QWORD *)v172 + 4) == 1
                      && *v173 == dword_1991505F0[v171]
                      && *(_BYTE *)(v172 + 40) == 9)
                    {
                      v174 = *(_QWORD *)(v172 + 32);
                      if (*(_BYTE *)(v174 + 4) == 1
                        && v173 == (_DWORD *)v174
                        && *(_DWORD *)v174 == dword_1991505F0[v171]
                        && *(_DWORD *)(v172 + 16) == *(_DWORD *)(v172 + 48)
                        && *(_DWORD *)(v172 + 20) == *(_DWORD *)(v172 + 52)
                        && *(_DWORD *)(v172 + 12) == *(_DWORD *)(v172 + 44))
                      {
                        v241 = v156;
                        v242 = 3;
                        v245 = 0;
                        v246 = 0;
                        v247 &= 0xFCu;
                        v175 = *(_QWORD *)v161;
                        if (*(_QWORD *)v161 != v161 + 16)
                        {
                          if (v175)
                          {
                            *(_QWORD *)v161 = 0;
                            *(_DWORD *)(v161 + 8) = 0;
                            v232 = v157;
                            v236 = v156;
                            WTF::fastFree(v175, v102, v103, v104, v105, v106, v107, v108);
                            v157 = v232;
                            v156 = v236;
                          }
                          *(_QWORD *)v161 = v161 + 16;
                          v180 = v241;
                          if (v241 == v156)
                          {
                            if (HIDWORD(v242))
                            {
                              v181 = 0;
                              v182 = 32 * HIDWORD(v242);
                              do
                              {
                                v183 = v161 + v181;
                                v184 = *(_OWORD *)((char *)v156 + v181 + 16);
                                *(_OWORD *)(v183 + 16) = *(_OWORD *)((char *)v156 + v181);
                                *(_OWORD *)(v183 + 32) = v184;
                                v181 += 32;
                              }
                              while (v182 != v181);
                            }
                          }
                          else
                          {
                            v241 = v156;
                            *(_QWORD *)v161 = v180;
                          }
                        }
                        *(_DWORD *)(v161 + 8) = v242;
                        v176 = HIDWORD(v242);
                        HIDWORD(v242) = 0;
                        *(_DWORD *)(v161 + 12) = v176;
                        v177 = *v157;
                        *(_DWORD *)(v161 + 119) = *(_DWORD *)((char *)v157 + 7);
                        *(_QWORD *)(v161 + 112) = v177;
                        v178 = v241;
                        if (v156 != v241 && v241)
                        {
                          v241 = 0;
                          LODWORD(v242) = 0;
                          v235 = v156;
                          v179 = v157;
                          WTF::fastFree((unint64_t)v178, v102, v103, v104, v105, v106, v107, v108);
                          v157 = v179;
                          v156 = v235;
                        }
                      }
                    }
                  }
                }
                break;
              case 'k':
                goto LABEL_215;
              case 'q':
                v171 = 2;
                goto LABEL_215;
            }
          }
          else if (v170 == 94)
          {
            goto LABEL_215;
          }
        }
        else if (v170 == 90)
        {
          goto LABEL_212;
        }
LABEL_233:
        v161 += 128;
        if (v161 == v162)
        {
          v158 = *(_DWORD *)(v153 + 108);
          goto LABEL_244;
        }
      }
    }
  }
LABEL_249:
  v185 = *(unsigned int *)(a2 + 12);
  v260 = 0;
  LODWORD(v261) = 0;
  HIDWORD(v261) = v185;
  if ((_DWORD)v185)
  {
    if (v185 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1980374BCLL);
    }
    v186 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v185));
    LODWORD(v261) = v185;
    v260 = v186;
    memcpy(v186, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
  }
  v187 = *(_QWORD *)a1;
  v188 = *(unsigned int *)(*(_QWORD *)a1 + 76);
  if ((_DWORD)v188)
  {
    v189 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v187 + 64) + 8 * v189))
    {
      if (v188 == ++v189)
        goto LABEL_258;
    }
    if ((_DWORD)v188 != (_DWORD)v189)
    {
      v192 = *(_DWORD *)(*(_QWORD *)a1 + 76);
      while (1)
      {
        v193 = *(_QWORD *)(*(_QWORD *)(v187 + 64) + 8 * v189);
        v194 = *(unsigned int *)(v193 + 8);
        if (*(unsigned int *)(a1 + 20) <= v194)
        {
          __break(0xC471u);
          JUMPOUT(0x198037494);
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v194) == v194 && !*(_QWORD *)(v193 + 16))
          break;
LABEL_316:
        v189 = (v189 + 1);
        if (v192 > v189)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v187 + 64) + 8 * v189))
          {
            if (v192 == ++v189)
            {
              LODWORD(v189) = v192;
              break;
            }
          }
        }
        if ((_DWORD)v188 == (_DWORD)v189)
          goto LABEL_258;
      }
      v195 = *(_DWORD *)(a2 + 12);
      if (HIDWORD(v261) < v195 && v261 < v195)
      {
        WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, *(unsigned int *)(a2 + 12));
        v194 = *(unsigned int *)(v193 + 8);
      }
      HIDWORD(v261) = v195;
      if (*(unsigned int *)(a1 + 36) <= v194)
      {
        __break(0xC471u);
        JUMPOUT(0x1980374B4);
      }
      v196 = *(_QWORD *)(a1 + 24);
      v197 = v196 + 24 * v194;
      if (*(_DWORD *)(v197 + 8) != -1)
      {
        v198 = *(_QWORD *)v197;
        if ((*(_QWORD *)v197 & 0x8000000000000000) != 0)
        {
          v204 = 0;
          v200 = __clz(__rbit64(v198));
          if (v200 >= 0x3F)
            v200 = 63;
          goto LABEL_274;
        }
        v199 = 2 * v198;
        v200 = *(_QWORD *)(2 * v198);
        if (v200 + 63 < 0x40)
        {
LABEL_328:
          v204 = 0;
          goto LABEL_274;
        }
        v201 = *(_QWORD *)(v199 + 8);
        if (v201 && (v202 = __clz(__rbit64(v201)), v202 < 0x40))
        {
          v203 = 0;
        }
        else
        {
          v204 = ((v200 + 63) >> 6) - 1;
          if ((v200 + 63) >> 6 == 1)
            goto LABEL_274;
          v224 = 0;
          v225 = v199 + 16;
          while (1)
          {
            v226 = *(_QWORD *)(v225 + 8 * v224);
            if (v226)
            {
              v202 = __clz(__rbit64(v226));
              if (v202 <= 0x3F)
                break;
            }
            if (v204 == ++v224)
              goto LABEL_328;
          }
          v203 = v224 + 1;
        }
        v204 = 0;
        v200 = v202 + (v203 << 6);
LABEL_274:
        v205 = (WTF *)(v196 + 24 * v194);
        goto LABEL_286;
      }
      v205 = *(WTF **)v197;
      if (*(_QWORD *)v197)
      {
        v206 = *((unsigned int *)v205 - 1);
        v200 = (unint64_t)v205 + 4 * v206;
        if (*((_DWORD *)v205 - 3))
        {
          if ((_DWORD)v206)
          {
            v207 = 4 * v206;
            while (*(_DWORD *)v205 >= 0xFFFFFFFE)
            {
              v205 = (WTF *)((char *)v205 + 4);
              v207 -= 4;
              if (!v207)
              {
                v205 = (WTF *)v200;
                goto LABEL_285;
              }
            }
          }
          goto LABEL_285;
        }
        v208 = (WTF *)((char *)v205 + 4 * v206);
      }
      else
      {
        v208 = 0;
        v206 = 0;
      }
      v200 = (unint64_t)v205 + 4 * v206;
      v205 = v208;
LABEL_285:
      v204 = 1;
LABEL_286:
      v209 = v196 + 24 * v194;
      v211 = *(_DWORD *)(v209 + 12);
      v210 = (int *)(v209 + 12);
      v241 = v205;
      v242 = v200;
      LODWORD(v243) = v204;
      v244 = v211;
      if (*(_DWORD *)(v197 + 8) == -1)
      {
        v214 = *(_QWORD *)v197;
        if (*(_QWORD *)v197)
        {
          v215 = *(unsigned int *)(v214 - 4);
          v197 = v214 + 4 * v215;
        }
        else
        {
          v197 = 0;
          v215 = 0;
        }
        v213 = v214 + 4 * v215;
        v212 = 1;
      }
      else
      {
        v212 = 0;
        if ((*(_QWORD *)v197 & 0x8000000000000000) != 0)
          v213 = 63;
        else
          v213 = *(_QWORD *)(2 * *(_QWORD *)v197);
      }
      v216 = *v210;
      v237 = (_QWORD *)v197;
      v238 = (unsigned int **)v213;
      LODWORD(v239) = v212;
      v240 = v216;
      while (1)
      {
        v217 = v212 == v204;
        if (v212 == 0xFFFFFFFFLL)
          v217 = 0;
        if (v204 == 0xFFFFFFFF)
          v218 = v212 == 0xFFFFFFFFLL;
        else
          v218 = v217;
        if (v204 != 0xFFFFFFFF && v217)
        {
          v259[0] = &v250;
          v218 = ((uint64_t (*)(_QWORD *, WTF **, _QWORD **))off_1E357F818[v212])(v259, &v241, &v237);
        }
        if (v218 && v244 == v240)
          break;
        v250 = &v241;
        if ((_DWORD)v243 == -1)
          goto LABEL_335;
        v259[0] = &v250;
        v220 = ((uint64_t (*)(_QWORD *, WTF **))off_1E357F828[v243])(v259, &v241);
        if (*(_DWORD *)(a1 + 20) <= v220)
        {
          __break(0xC471u);
          JUMPOUT(0x19803747CLL);
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v220) == v220)
        {
          v259[0] = 0;
          v221 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * v220);
          v259[0] = v221;
          v222 = HIDWORD(v261);
          if (HIDWORD(v261) == (_DWORD)v261)
          {
            v223 = (unsigned int **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, HIDWORD(v261) + 1, (unint64_t)v259);
            v222 = HIDWORD(v261);
            v260[HIDWORD(v261)] = *v223;
          }
          else
          {
            v260[HIDWORD(v261)] = v221;
          }
          HIDWORD(v261) = v222 + 1;
        }
        if ((_DWORD)v243 == -1)
          goto LABEL_335;
        v259[0] = &v250;
        ((void (*)(_QWORD *, WTF **))off_1E357F838[v243])(v259, &v241);
        v204 = v243;
        v212 = v239;
      }
      JSC::B3::Air::assign((unsigned int *)v193, &v260);
      v192 = *(_DWORD *)(v187 + 76);
      goto LABEL_316;
    }
  }
LABEL_258:
  v190 = v260;
  if (v260)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    WTF::fastFree((unint64_t)v190, v102, v103, v104, v105, v106, v107, v108);
  }
  return WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::~Liveness((uint64_t)v253, v102, v103, v104, v105, v106, v107, v108);
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::~GraphColoringStackAllocator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(unsigned int *)(a1 + 36);
  v11 = *(_QWORD *)(a1 + 24);
  if ((_DWORD)v10)
  {
    v12 = 24 * v10;
    while (1)
    {
      if (*(_DWORD *)(v11 + 8) == -1)
      {
        if (*(_QWORD *)v11)
        {
          v13 = *(_QWORD *)v11 - 16;
          goto LABEL_10;
        }
      }
      else if ((*(_QWORD *)v11 & 0x8000000000000000) == 0)
      {
        v13 = 2 * *(_QWORD *)v11;
LABEL_10:
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 += 24;
      v12 -= 24;
      if (!v12)
      {
        v11 = *(_QWORD *)(a1 + 24);
        break;
      }
    }
  }
  if (v11)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

BOOL JSC::B3::Air::Arg::isRepresentableAs(unint64_t *a1, int a2, int a3)
{
  unint64_t v3;
  _BOOL8 result;
  BOOL v5;
  BOOL v6;

  v3 = *a1;
  if (a3 == 1)
  {
    result = 1;
    switch(a2)
    {
      case 0:
        v5 = v3 >= 0x100;
        return !v5;
      case 1:
        v5 = v3 >= 0x10000;
        return !v5;
      case 2:
        v6 = HIDWORD(v3) == 0;
        goto LABEL_12;
      case 3:
        return result;
      default:
        goto LABEL_17;
    }
  }
  if (a3)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198037644);
  }
  result = 1;
  switch(a2)
  {
    case 0:
      v6 = v3 == (char)v3;
      goto LABEL_12;
    case 1:
      v6 = v3 == (__int16)v3;
      goto LABEL_12;
    case 2:
      v6 = v3 == (int)v3;
LABEL_12:
      result = v6;
      break;
    case 3:
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x198037664);
  }
  return result;
}

uint64_t JSC::B3::Air::Arg::isBank@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 == 1)
    {
      v5 = *(char *)(a1 + 8);
      if (v5 == 1)
      {
        a3 = *(_DWORD *)(a1 + 16) >> 31;
      }
      else
      {
        v7 = v5 > 0xD;
        v8 = (1 << v5) & 0x3FC8;
        LOBYTE(a3) = !v7 && v8 != 0;
      }
    }
  }
  else
  {
    v3 = *(char *)(a1 + 8);
    if (v3 == 1)
    {
      LOBYTE(a3) = *(_DWORD *)(a1 + 16) > 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 8))
        v6 = v3 == 21;
      else
        v6 = 1;
      LOBYTE(a3) = !v6;
    }
  }
  return a3 & 1;
}

uint64_t JSC::B3::Air::Arg::dump(JSC::B3::Air::Arg *this, WTF::PrintStream *a2)
{
  int v4;
  WTF::PrintStream *v5;
  int v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  WTF::PrintStream *v26;
  unint64_t v27;
  uint64_t v28;
  WTF::PrintStream *v29;
  unint64_t v30;
  const char *v31;
  WTF::PrintStream *v32;
  const char *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;
  WTF::PrintStream *v36;
  const char *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  int v40;
  WTF::PrintStream *v41;
  const char *v42;
  WTF::PrintStream *v43;
  WTF::PrintStream *v44;
  int v45;
  WTF::PrintStream *v46;
  int v47;
  WTF::PrintStream *v48;
  const char *v49;
  WTF::PrintStream *v50;
  WTF::PrintStream *v51;
  int v52;
  int v53;

  v4 = *((unsigned __int8 *)this + 8);
  switch(*((_BYTE *)this + 8))
  {
    case 0:
    case 0x14:
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      goto LABEL_63;
    case 1:
      v53 = *((_DWORD *)this + 4);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v53, v9);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 2:
    case 4:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v5, "%s", "$");
      WTF::PrintStream::printf(v5, "%lld");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 3:
    case 5:
      return WTF::PrintStream::printf(a2, "$0x%llx", *(_QWORD *)this);
    case 6:
      goto LABEL_42;
    case 7:
    case 8:
      if (v4 == 9)
      {
        v7 = *((_DWORD *)this + 3);
        if (!v7)
          goto LABEL_42;
      }
      else
      {
        v7 = *(_DWORD *)this;
        if (!*(_DWORD *)this)
          goto LABEL_42;
      }
      v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v35, "%d", v7);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_42:
      v53 = *((_DWORD *)this + 4);
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v36, "%s", "(");
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v53, v36);
      v37 = ")";
LABEL_67:
      WTF::PrintStream::printf(v36, "%s", v37);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 9:
      if (v4 == 9)
      {
        LODWORD(v10) = *((_DWORD *)this + 3);
        if (!(_DWORD)v10)
          goto LABEL_48;
      }
      else
      {
        v10 = *(_QWORD *)this;
        if (!*(_QWORD *)this)
          goto LABEL_49;
      }
      v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v38, "%d", v10);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_48:
      v10 = *(_QWORD *)this;
LABEL_49:
      v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v39, "%s", "(");
      if (v10)
      {
        v40 = *(unsigned __int8 *)(v10 + 4);
        v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v39 + 32))(v39);
        v42 = "stack";
        if (v40 == 1)
          v42 = "spill";
        WTF::PrintStream::printf(v41, "%s", v42);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v39 + 40))(v39);
        v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v39 + 32))(v39);
        WTF::PrintStream::printf(v43, "%u");
      }
      else
      {
        v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v39 + 32))(v39);
        WTF::PrintStream::printf(v51, "%s");
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v39 + 40))(v39);
      WTF::PrintStream::printf(v39, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 0xA:
      if (v4 == 9)
      {
        v21 = *((_DWORD *)this + 3);
        if (!v21)
          goto LABEL_62;
      }
      else
      {
        v21 = *(_DWORD *)this;
        if (!*(_DWORD *)this)
          goto LABEL_62;
      }
      v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v50, "%d", v21);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_62:
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      goto LABEL_63;
    case 0xB:
      if (v4 == 9)
      {
        v11 = *((_DWORD *)this + 3);
        if (!v11)
          goto LABEL_55;
      }
      else
      {
        v11 = *(_DWORD *)this;
        if (!*(_DWORD *)this)
          goto LABEL_55;
      }
      v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v44, "%d", v11);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_55:
      v45 = *((_DWORD *)this + 4);
      v52 = *((_DWORD *)this + 5);
      v53 = v45;
      v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v46, "%s", "(");
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v53, v46);
      WTF::PrintStream::printf(v46, "%s", ",");
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v52, v46);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v47 = *((_DWORD *)this + 3);
      if (v47 != 1)
      {
        v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v48, "%s", ",");
        WTF::PrintStream::printf(v48, "%u", v47);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
LABEL_63:
      WTF::PrintStream::printf(v8, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 0xC:
      v53 = *((_DWORD *)this + 4);
      if (v4 == 9)
        v12 = *((_DWORD *)this + 3);
      else
        v12 = *(_DWORD *)this;
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v36, "%s", "(");
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v53, v36);
      v49 = ",Pre($";
      goto LABEL_66;
    case 0xD:
      v53 = *((_DWORD *)this + 4);
      if (v4 == 9)
        v12 = *((_DWORD *)this + 3);
      else
        v12 = *(_DWORD *)this;
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v36, "%s", "(");
      JSC::B3::Air::Tmp::dump((JSC::B3::Air::Tmp *)&v53, v36);
      v49 = ",Post($";
LABEL_66:
      WTF::PrintStream::printf(v36, "%s", v49);
      WTF::PrintStream::printf(v36, "%d", v12);
      v37 = "))";
      goto LABEL_67;
    case 0xE:
      v13 = *(_QWORD *)this;
      v14 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      if (v13 >= 0xE || ((0x3F0Fu >> v13) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19803803CLL);
      }
      v15 = v14;
      goto LABEL_26;
    case 0xF:
      v16 = *(_QWORD *)this;
      v17 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      if (v16 >= 7 || ((0x77u >> v16) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19803805CLL);
      }
      v15 = v17;
      goto LABEL_26;
    case 0x10:
      v18 = *(_QWORD *)this;
      v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      if (v18 >= 0xE || ((0x3FCFu >> v18) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19803807CLL);
      }
      v15 = v19;
      goto LABEL_26;
    case 0x11:
      v22 = *(_DWORD *)this;
      v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      if (v22 > 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980380FCLL);
      }
LABEL_26:
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      goto LABEL_44;
    case 0x12:
      v23 = *(_DWORD **)this;
      v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v15 = v24;
      if (v23)
      {
        v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        WTF::PrintStream::printf(v25, "%s", "&");
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v23 + 112))(v23, v15);
        if (v23[2] == -1)
          return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
        WTF::PrintStream::printf(v26, "%u");
      }
      else
      {
        v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
LABEL_44:
        WTF::PrintStream::printf(v20, "%s");
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 0x13:
      v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      goto LABEL_44;
    case 0x15:
      v27 = *((unsigned __int8 *)this + 24);
      v28 = v27 & 0x3F;
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v29, "%s", "{ ");
      if ((v27 & 0x3F) >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1980380BCLL);
      }
      v30 = v27 >> 6;
      v31 = off_1E357F9A8[v28];
      v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 32))(v29);
      WTF::PrintStream::printf(v32, "%s", v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 40))(v29);
      WTF::PrintStream::printf(v29, "%s", ", ");
      if ((_DWORD)v30 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980380DCLL);
      }
      v33 = off_1E357F9E0[v30];
      v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 32))(v29);
      WTF::PrintStream::printf(v34, "%s", v33);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 40))(v29);
      WTF::PrintStream::printf(v29, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    default:
      __break(0xC471u);
      JUMPOUT(0x19803809CLL);
  }
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = result;
  if (*(unsigned int *)(result + 12) < a2)
  {
    if (*(unsigned int *)(result + 8) < a2)
      result = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v11 = *(unsigned int *)(v9 + 12);
      if (v11 != a2)
      {
        v12 = v10 + 16 * a2;
        v13 = v10 + 16 * v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *(_BYTE *)(v13 + 8) = 0;
          v13 += 16;
        }
        while (v13 != v12);
      }
    }
  }
  *(_DWORD *)(v9 + 12) = a2;
  return result;
}

uint64_t JSC::B3::addPredecessor<JSC::B3::Air::BasicBlock>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v9 = a2;
  v3 = (_QWORD *)(a1 + 72);
  v4 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*v3;
    v6 = *(unsigned int *)(a1 + 84);
    while (*v5 != a2)
    {
      ++v5;
      if (!--v6)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 80))
    {
      v8 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
      v4 = *(unsigned int *)(a1 + 84);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v4) = *v8;
    }
    else
    {
      *(_QWORD *)(*v3 + 8 * v4) = a2;
    }
    *(_DWORD *)(a1 + 84) = v4 + 1;
    return 1;
  }
}

uint64_t JSC::B3::replacePredecessor<JSC::B3::Air::BasicBlock>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 84);
  if (!(_DWORD)v3)
  {
LABEL_10:
    v6 = 0;
    return v6 | JSC::B3::addPredecessor<JSC::B3::Air::BasicBlock>(a1, a3);
  }
  v4 = *(_QWORD **)(a1 + 72);
  if (*v4 != a2)
  {
    v5 = 0;
    while (v3 - 1 != v5)
    {
      v8 = v4[++v5];
      if (v8 == a2)
      {
        v6 = v5 < v3;
        goto LABEL_4;
      }
    }
    goto LABEL_10;
  }
  v5 = 0;
  v6 = 1;
LABEL_4:
  v4[v5] = v4[v3 - 1];
  *(_DWORD *)(a1 + 84) = v3 - 1;
  return v6 | JSC::B3::addPredecessor<JSC::B3::Air::BasicBlock>(a1, a3);
}

uint64_t JSC::B3::Air::BasicBlock::deepDump(uint64_t ***this, WTF::PrintStream *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  uint64_t **v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;

  result = JSC::B3::Air::BasicBlock::dumpHeader((JSC::B3::Air::BasicBlock *)this, a2);
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = this[1];
    v7 = &v6[16 * v5];
    do
    {
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v8, "%s", "Air ");
      WTF::PrintStream::printf(v8, "%s", "    ");
      v11 = v6;
      v12 = ", ";
      v13 = 3;
      v14 = &str_477;
      v15 = 1;
      v16 = 0;
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      JSC::B3::Air::Kind::dump((JSC::B3::Air::Kind *)(v6 + 15), v9);
      WTF::PrintStream::printf(v9, "%s", " ");
      WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump((JSC::B3::Air::Arg ***)&v11, (uint64_t)v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      WTF::PrintStream::printf(v8, "%s", "\n");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v6 += 16;
    }
    while (v6 != v7);
  }
  if (*((_DWORD *)this + 9))
  {
    v11 = (uint64_t **)(this + 3);
    v12 = ", ";
    v13 = 3;
    v14 = &str_106;
    v15 = 1;
    v16 = 0;
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v10, "%s", "Air ");
    WTF::PrintStream::printf(v10, "%s", "  Successors: ");
    WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(&v11, (uint64_t)v10);
    WTF::PrintStream::printf(v10, "%s", "\n");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::B3::Air::BasicBlock::dumpHeader(JSC::B3::Air::BasicBlock *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t result;
  _QWORD v7[5];
  char v8;
  _QWORD v9[4];

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Air ");
  WTF::PrintStream::printf(v4, "%s", "BB");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)this);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", ": ; frequency = ");
  WTF::PrintStream::printf(v4, "%lf", *((double *)this + 13));
  WTF::PrintStream::printf(v4, "%s", "\n");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 21))
  {
    v7[0] = (char *)this + 72;
    v7[1] = ", ";
    v7[2] = 3;
    v7[3] = &str_106;
    v7[4] = 1;
    v8 = 0;
    v9[0] = JSC::B3::Air::tierName;
    v9[1] = "  Predecessors: ";
    v9[2] = v7;
    v9[3] = "\n";
    return WTF::PrintStream::atomically<void WTF::PrintStream::print<char const*,char [17],WTF::PointerListDump<WTF::Vector<JSC::B3::Air::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(char const*,char [17],WTF::PointerListDump<WTF::Vector<JSC::B3::Air::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2] const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t)v9);
  }
  return result;
}

uint64_t JSC::B3::Air::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::Liveness(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  const void *v38;
  uint64_t v39;
  int v40;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  __int16 *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int *v88;
  uint64_t v89;
  int v90;
  int v91;
  int *v92;
  unint64_t i;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t j;
  _QWORD **v99;
  unsigned int *v100;
  unsigned int **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  _QWORD **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int **v183;
  _DWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  uint64_t v193;
  unint64_t v194;
  WTF *v195;
  WTF *v197;
  WTF *v198;
  int v199;
  unsigned int v200;
  WTF *v201;
  unsigned int v202;
  WTF *v203;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  WTF *v208;
  void *v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  WTF *v232;
  unsigned int *v233;
  uint64_t v234;
  _DWORD *v235;
  uint64_t v236;
  unsigned int v237;
  unint64_t *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  unsigned int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *casual;
  WTF *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unint64_t *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  _QWORD **v275;
  WTF *v276;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  _DWORD *v282;
  WTF *v283;
  uint64_t v284;
  int v285;
  unint64_t StatusReg;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  char *__src;
  unsigned int *__srca;
  unsigned int **__srcb;
  _QWORD *v294;
  uint64_t *v295;
  _QWORD v296[4];
  double v297;
  WTF *v298;
  uint64_t v299;
  _QWORD v300[2];
  _QWORD *v301[3];
  uint64_t v302;
  _QWORD **v303;
  _QWORD v304[2];
  _QWORD v305[3];

  v3 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = a2;
  v4 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)(a1 + 8) = 0;
  v290 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19803A004);
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v6)
      bzero(v5, 16 * v6);
  }
  v8 = *(_DWORD *)(*(_QWORD *)a1 + 176);
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 180);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = v3;
  v9 = v8 + v7;
  v295 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v10 = v9 + 66;
  if (v9 != -66)
  {
    if (v10 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198039FFCLL);
    }
    v11 = WTF::fastMalloc((WTF *)(4 * (v9 + 66)));
    *(_DWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_DWORD *)(a1 + 44) = v10;
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 64, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v294 = (_QWORD *)(a1 + 80);
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 80, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v296[0] = "Air";
  v296[1] = 4;
  v296[2] = "Liveness";
  v296[3] = 9;
  v297 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v279 = mach_absolute_time();
    v281 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v281 != -1)
    {
      v298 = (WTF *)v305;
      v301[0] = &v298;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v301, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v280) = dword_1ECF4400C;
    v297 = (double)(v279 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v280 * 1000000000.0);
  }
  v19 = *(_DWORD **)a1;
  v20 = v290;
  v284 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v284)
  {
    v21 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v19 + 12) + 8 * v21))
    {
      if (v284 == ++v21)
        goto LABEL_92;
    }
    if ((_DWORD)v284 != (_DWORD)v21)
    {
      LODWORD(v22) = *(_DWORD *)(*(_QWORD *)a1 + 108);
      LODWORD(v23) = v21;
      v282 = *(_DWORD **)a1;
      while (1)
      {
        if (v22 <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x198039FECLL);
        }
        v24 = *(unsigned int **)(*((_QWORD *)v19 + 12) + 8 * v23);
        v25 = *v20 + 16 * *v24;
        v26 = v24[5] + 1;
        v27 = *(unsigned int *)(v25 + 12);
        v285 = v23;
        v287 = v26;
        if (v27 >= v26)
        {
          if ((_DWORD)v27 != (_DWORD)v26)
          {
            v51 = *(_QWORD *)v25;
            v52 = v26 << 6;
            v53 = v27 << 6;
            do
            {
              v54 = v51 + v52;
              v55 = *(_QWORD *)(v51 + v52 + 32);
              v56 = v51 + v52 + 48 == v55 || v55 == 0;
              if (!v56)
              {
                *(_QWORD *)(v54 + 32) = 0;
                *(_DWORD *)(v54 + 40) = 0;
                WTF::fastFree(v55, v12, v13, v14, v15, v16, v17, v18);
              }
              v57 = *(_QWORD *)v54;
              if (v54 + 16 != *(_QWORD *)v54 && v57 != 0)
              {
                v59 = v51 + v52;
                *(_QWORD *)v59 = 0;
                *(_DWORD *)(v59 + 8) = 0;
                WTF::fastFree(v57, v12, v13, v14, v15, v16, v17, v18);
              }
              v53 -= 64;
              v51 += 64;
            }
            while (v52 != v53);
          }
          goto LABEL_64;
        }
        v28 = *(unsigned int *)(v25 + 8);
        v29 = *(_QWORD *)v25;
        if (v28 >= v26)
          goto LABEL_60;
        v30 = v28 + (v28 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= v26)
          v32 = v24[5] + 1;
        else
          v32 = v31;
        if (v32 >> 26)
        {
          __break(0xC471u);
          JUMPOUT(0x198039FF4);
        }
        v33 = WTF::fastMalloc((WTF *)(v32 << 6));
        *(_DWORD *)(v25 + 8) = v32;
        *(_QWORD *)v25 = v33;
        if ((_DWORD)v27)
        {
          v34 = 0;
          __src = (char *)(v27 << 6);
          do
          {
            v35 = &v34[v33];
            v36 = &v34[v29];
            v37 = &v34[v33 + 16];
            *(_QWORD *)v35 = v37;
            *((_QWORD *)v35 + 1) = 4;
            v39 = (uint64_t)&v34[v29 + 16];
            v38 = *(const void **)&v34[v29];
            if ((const void *)v39 == v38)
            {
              memcpy(v37, v38, 4 * *((unsigned int *)v36 + 3));
            }
            else
            {
              *(_QWORD *)v36 = v39;
              *(_QWORD *)v35 = v38;
              v40 = *((_DWORD *)v36 + 2);
              *((_DWORD *)v36 + 2) = 4;
              *((_DWORD *)v35 + 2) = v40;
            }
            v41 = &v34[v29];
            v42 = *(_DWORD *)&v34[v29 + 12];
            *(_DWORD *)&v34[v29 + 12] = 0;
            *((_DWORD *)v35 + 3) = v42;
            v43 = &v34[v33];
            v44 = &v34[v33 + 48];
            *((_QWORD *)v43 + 4) = v44;
            *((_QWORD *)v43 + 5) = 4;
            v12 = *(WTF **)&v34[v29 + 32];
            v45 = (uint64_t)&v34[v29 + 48];
            if ((WTF *)v45 == v12)
            {
              memcpy(v44, v12, 4 * *((unsigned int *)v41 + 11));
            }
            else
            {
              *((_QWORD *)v41 + 4) = v45;
              *((_QWORD *)v43 + 4) = v12;
              v46 = *((_DWORD *)v41 + 10);
              *((_DWORD *)v41 + 10) = 4;
              *((_DWORD *)v43 + 10) = v46;
            }
            v47 = *(_DWORD *)&v34[v29 + 44];
            *(_DWORD *)&v34[v29 + 44] = 0;
            *((_DWORD *)v43 + 11) = v47;
            v48 = *((_QWORD *)v41 + 4);
            if (v45 != v48 && v48)
            {
              *((_QWORD *)v41 + 4) = 0;
              *(_DWORD *)&v34[v29 + 40] = 0;
              WTF::fastFree(v48, v12, v13, v14, v15, v16, v17, v18);
            }
            v49 = *(_QWORD *)&v34[v29];
            if (v39 != v49 && v49)
            {
              v50 = &v34[v29];
              *(_QWORD *)v50 = 0;
              *((_DWORD *)v50 + 2) = 0;
              WTF::fastFree(v49, v12, v13, v14, v15, v16, v17, v18);
            }
            v34 += 64;
          }
          while (__src != v34);
          v33 = *(_QWORD *)v25;
        }
        if (v29)
          break;
        v29 = v33;
        if (v33)
        {
LABEL_61:
          v60 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v60 != (_DWORD)v287)
          {
            v61 = v60 << 6;
            v62 = v287 << 6;
            do
            {
              v63 = (_QWORD *)(v29 + v61);
              *v63 = v29 + v61 + 16;
              v63[1] = 4;
              v63[4] = v29 + v61 + 48;
              v63[5] = 4;
              v62 -= 64;
              v29 += 64;
            }
            while (v61 != v62);
          }
        }
LABEL_64:
        *(_DWORD *)(v25 + 12) = v287;
        v64 = v24[5];
        v65 = v64 - 1;
        v302 = v64 - 1;
        if ((_DWORD)v64)
        {
          do
          {
            if (v24[5] <= v65)
            {
              __break(0xC471u);
              JUMPOUT(0x198039FACLL);
            }
            v66 = (__int16 *)(*((_QWORD *)v24 + 1) + ((unint64_t)v65 << 7));
            v301[0] = (_QWORD *)a1;
            v301[1] = (_QWORD *)v25;
            v301[2] = &v302;
            v303 = v301;
            v12 = (WTF *)(v66 + 60);
            if ((v66[60] - 446) > 5)
            {
              v67 = *((unsigned int *)v66 + 3);
              if ((_DWORD)v67)
              {
                v68 = 0;
                v69 = 0;
                v70 = (char *)&JSC::B3::Air::g_formTable + 21 * v66[60] + ((unint64_t)((v67 - 1) * v67) >> 1);
                do
                {
                  if (v69 >= *((unsigned int *)v66 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198039F9CLL);
                  }
                  if ((v70[v69] >> 5) - 1 >= 5u)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198039EE8);
                  }
                  JSC::B3::Air::Arg::forEachTmp<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((_QWORD **)(*(_QWORD *)v66 + v68), v70[v69] & 0xF, ((v70[v69] >> 5) - 1), v301);
                  ++v69;
                  v68 += 32;
                }
                while (v67 != v69);
              }
            }
            else
            {
              v298 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v299 = (uint64_t)&v298;
              v300[0] = &v303;
              v304[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v304[1] = &v298;
              if (*(_WORD *)v12 == 448)
              {
                v305[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
                v305[1] = &v298;
                if (!*((_DWORD *)v66 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198039FBCLL);
                }
                JSC::B3::Air::Arg::forEachTmp<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(*(_QWORD ***)v66, 0, 3, v301);
                if (!*((_DWORD *)v66 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198039FC4);
                }
                (*(void (**)(_QWORD, __int16 *, _QWORD *))(***(_QWORD ***)v66 + 16))(**(_QWORD **)v66, v66, v305);
              }
              else
              {
                switch(*(_WORD *)v12)
                {
                  case 0x1BE:
                    break;
                  case 0x1BF:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v66, (uint64_t)v304);
                    break;
                  case 0x1C1:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v66, (uint64_t)v304);
                    break;
                  case 0x1C2:
                    v305[0] = v304;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v66, (uint64_t)v305);
                    break;
                  case 0x1C3:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v66, (uint64_t)v304);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v12, "\n");
                    __break(0xC471u);
                    JUMPOUT(0x198039F94);
                }
              }
            }
            v71 = v302;
            v65 = --v302;
          }
          while (v71);
        }
        v23 = (v285 + 1);
        v19 = v282;
        v22 = v282[27];
        if (v22 <= v23)
        {
          v20 = v290;
        }
        else
        {
          v20 = v290;
          while (!*(_QWORD *)(*((_QWORD *)v282 + 12) + 8 * v23))
          {
            if (v22 == ++v23)
            {
              LODWORD(v23) = v282[27];
              break;
            }
          }
        }
        if ((_DWORD)v284 == (_DWORD)v23)
          goto LABEL_92;
      }
      if (v33 == v29)
      {
        *(_QWORD *)v25 = 0;
        *(_DWORD *)(v25 + 8) = 0;
      }
      WTF::fastFree(v29, v12, v13, v14, v15, v16, v17, v18);
      v29 = *(_QWORD *)v25;
LABEL_60:
      if (v29)
        goto LABEL_61;
      goto LABEL_64;
    }
  }
LABEL_92:
  v72 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 108);
  if (v72)
  {
    do
    {
      --v72;
      v73 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v73 + 108) <= v72)
      {
        __break(0xC471u);
        JUMPOUT(0x198039FE4);
      }
      v74 = *(unsigned int **)(*(_QWORD *)(v73 + 96) + 8 * v72);
      if (v74)
      {
        v75 = *v74;
        v76 = *v294 + 32 * v75;
        v77 = *(_QWORD *)(*v20 + 16 * v75) + ((unint64_t)v74[5] << 6);
        v78 = *(unsigned int *)(v77 + 12);
        if ((_DWORD)v78)
        {
          v79 = *(int **)v77;
          v80 = 4 * v78;
          do
          {
            v81 = *v79;
            LODWORD(v298) = *v79;
            v82 = *(unsigned int *)(v76 + 12);
            if ((_DWORD)v82 == *(_DWORD *)(v76 + 8))
            {
              v84 = WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v76, v82 + 1, (unint64_t)&v298);
              v82 = *(unsigned int *)(v76 + 12);
              v83 = *(char **)v76;
              v81 = *(_DWORD *)v84;
            }
            else
            {
              v83 = *(char **)v76;
            }
            *(_DWORD *)&v83[4 * v82] = v81;
            ++*(_DWORD *)(v76 + 12);
            ++v79;
            v80 -= 4;
          }
          while (v80);
        }
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v85 = *(char **)v76;
        v86 = *(unsigned int *)(v76 + 12);
        if ((_DWORD)v86)
        {
          v87 = &v85[4 * v86];
          v88 = (int *)(v85 + 4);
          v89 = 4 * v86 - 4;
          v20 = v290;
          while (v89)
          {
            v90 = *(v88 - 1);
            v91 = *v88++;
            v89 -= 4;
            if (v90 == v91)
            {
              v92 = v88 - 2;
              if (v89)
              {
                for (i = 0; i != v89; i += 4)
                {
                  v94 = v90;
                  v90 = v88[i / 4];
                  if (v94 != v90)
                  {
                    v92[1] = v90;
                    ++v92;
                  }
                }
              }
              v87 = (char *)(v92 + 1);
              break;
            }
          }
        }
        else
        {
          v87 = *(char **)v76;
          v20 = v290;
        }
        *(_DWORD *)(v76 + 12) = (unint64_t)(v87 - v85) >> 2;
      }
    }
    while (v72);
    v95 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
    v301[0] = (_QWORD *)0x8000000000000000;
    if ((_DWORD)v95)
    {
      v96 = v95 - 1;
      v97 = 0x8000000000000000;
LABEL_118:
      for (j = 63; ; j = *(_QWORD *)(2 * (uint64_t)v301[0]))
      {
        v12 = (WTF *)(v96 + 1);
        if (j < v96 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v301, (unint64_t)v12, 0);
          v20 = v290;
          v97 = (uint64_t)v301[0];
        }
        v99 = v97 >= 0 ? (_QWORD **)(2 * v97 + 8) : v301;
        *(_QWORD **)((char *)v99 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) = (_QWORD *)(*(unint64_t *)((char *)v99 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) | (1 << v96));
        if (!v96)
          break;
        v97 = (uint64_t)v301[0];
        --v96;
        if (((unint64_t)v301[0] & 0x8000000000000000) != 0)
          goto LABEL_118;
      }
    }
  }
  else
  {
    v301[0] = (_QWORD *)0x8000000000000000;
  }
  v298 = (WTF *)v300;
  v100 = (unsigned int *)(a1 + 60);
  v101 = (unsigned int **)(a1 + 48);
  v299 = 4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_129:
  v102 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
  if ((_DWORD)v102)
  {
    v103 = 0;
    while (1)
    {
      --v102;
      v104 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v104 + 108) <= v102)
      {
        __break(0xC471u);
        JUMPOUT(0x198039FA4);
      }
      v105 = *(unsigned int **)(*(_QWORD *)(v104 + 96) + 8 * v102);
      if (v105)
      {
        v106 = v301;
        if ((uint64_t)v301[0] >= 0)
          v106 = (_QWORD **)(2 * (uint64_t)v301[0] + 8);
        v107 = (v102 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v108 = *(uint64_t *)((char *)v106 + v107);
        *(_QWORD **)((char *)v106 + v107) = (_QWORD *)(v108 & ~(1 << v102));
        if ((v108 & (1 << v102)) != 0)
        {
          *v100 = 0;
          v109 = *v294 + 32 * *v105;
          v110 = *(unsigned int *)(v109 + 12);
          v288 = v103;
          if ((_DWORD)v110)
          {
            v111 = *(_DWORD **)v109;
            v112 = *v295;
            v113 = 4 * v110;
            do
            {
              v114 = *v111;
              v115 = *(unsigned int *)(v112 + 4 * v114);
              v116 = *v100;
              if (v116 <= v115 || (*v101)[v115] != (_DWORD)v114)
              {
                LODWORD(v305[0]) = *v111;
                if ((_DWORD)v116 == *(_DWORD *)(a1 + 56))
                {
                  v117 = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v116 + 1, (unint64_t)v305);
                  v103 = v288;
                  v20 = v290;
                  (*v101)[*v100] = v117;
                  v112 = *v295;
                }
                else
                {
                  (*v101)[v116] = v114;
                }
                ++*v100;
                *(_DWORD *)(v112 + 4 * v114) = v116;
              }
              ++v111;
              v113 -= 4;
            }
            while (v113);
          }
          v118 = v105[5];
          if ((_DWORD)v118)
          {
            do
            {
              v119 = *v20;
              v120 = *(_QWORD *)(*v20 + 16 * *v105);
              v121 = v120 + ((unint64_t)v118 << 6);
              v122 = *(unsigned int *)(v121 + 44);
              if ((_DWORD)v122)
              {
                v123 = *(unsigned int **)(v121 + 32);
                v124 = *v295;
                v125 = 4 * v122;
                v126 = *v100;
                do
                {
                  v127 = *v123;
                  v128 = *(unsigned int *)(v124 + 4 * v127);
                  if (v126 > v128)
                  {
                    v129 = *v101;
                    if ((*v101)[v128] == (_DWORD)v127)
                    {
                      v130 = v129[v126 - 1];
                      v129[v128] = v130;
                      *(_DWORD *)(v124 + 4 * v130) = v128;
                      v126 = *v100 - 1;
                      *v100 = v126;
                    }
                  }
                  ++v123;
                  v125 -= 4;
                }
                while (v125);
                v120 = *(_QWORD *)(v119 + 16 * *v105);
              }
              v131 = v120 + ((unint64_t)--v118 << 6);
              v132 = *(unsigned int *)(v131 + 12);
              if ((_DWORD)v132)
              {
                v133 = *(_DWORD **)v131;
                v134 = *v295;
                v135 = 4 * v132;
                do
                {
                  v136 = *v133;
                  v137 = *(unsigned int *)(v134 + 4 * v136);
                  v138 = *v100;
                  if (v138 <= v137 || (*v101)[v137] != (_DWORD)v136)
                  {
                    LODWORD(v305[0]) = *v133;
                    if ((_DWORD)v138 == *(_DWORD *)(a1 + 56))
                    {
                      v139 = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v138 + 1, (unint64_t)v305);
                      v103 = v288;
                      v20 = v290;
                      (*v101)[*v100] = v139;
                      v134 = *v295;
                    }
                    else
                    {
                      (*v101)[v138] = v136;
                    }
                    ++*v100;
                    *(_DWORD *)(v134 + 4 * v136) = v138;
                  }
                  ++v133;
                  v135 -= 4;
                }
                while (v135);
              }
            }
            while (v118);
          }
          v140 = *v105;
          v141 = *(_QWORD *)(*v20 + 16 * v140);
          v142 = *(unsigned int *)(v141 + 44);
          v143 = *v100;
          if ((_DWORD)v142)
          {
            v144 = *(unsigned int **)(v141 + 32);
            v145 = *v295;
            v146 = 4 * v142;
            do
            {
              v147 = *v144;
              v148 = *(unsigned int *)(v145 + 4 * v147);
              if (v143 > v148)
              {
                v149 = *v101;
                if ((*v101)[v148] == (_DWORD)v147)
                {
                  v150 = v149[v143 - 1];
                  v149[v148] = v150;
                  *(_DWORD *)(v145 + 4 * v150) = v148;
                  v143 = *v100 - 1;
                  *v100 = v143;
                }
              }
              ++v144;
              v146 -= 4;
            }
            while (v146);
            v140 = *v105;
          }
          v151 = *(_QWORD *)(a1 + 64) + 32 * v140;
          v152 = *(unsigned int *)(v151 + 12);
          if ((_DWORD)v152 == v143)
          {
            *v100 = 0;
            goto LABEL_343;
          }
          v153 = *(unsigned int **)v151;
          if ((_DWORD)v152)
          {
            v154 = *v295;
            v155 = 4 * v152;
            v156 = *(unsigned int **)v151;
            do
            {
              v157 = *v156;
              v158 = *(unsigned int *)(v154 + 4 * v157);
              if (v143 > v158)
              {
                v159 = *v101;
                if ((*v101)[v158] == (_DWORD)v157)
                {
                  v160 = v159[v143 - 1];
                  v159[v158] = v160;
                  *(_DWORD *)(v154 + 4 * v160) = v158;
                  v143 = *v100 - 1;
                  *v100 = v143;
                }
              }
              ++v156;
              v155 -= 4;
            }
            while (v155);
          }
          if (v143)
          {
            __srca = v153;
            v161 = *v101;
            v162 = *(unsigned int *)(v151 + 12);
            v163 = v162 + v143;
            if (v163 <= *(unsigned int *)(v151 + 8))
            {
              v172 = v153;
            }
            else
            {
              if (v163 < 5)
              {
                v164 = (void *)(v151 + 16);
                *(_QWORD *)v151 = v151 + 16;
                *(_DWORD *)(v151 + 8) = 4;
              }
              else
              {
                if (v163 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198039FD4);
                }
                v164 = (void *)WTF::fastMalloc((WTF *)(4 * v163));
                *(_DWORD *)(v151 + 8) = v163;
                *(_QWORD *)v151 = v164;
              }
              memcpy(v164, __srca, 4 * v162);
              v172 = *(unsigned int **)v151;
              if ((unsigned int *)(v151 + 16) != __srca && __srca)
              {
                if (v172 == __srca)
                {
                  *(_QWORD *)v151 = 0;
                  *(_DWORD *)(v151 + 8) = 0;
                }
                WTF::fastFree((unint64_t)__srca, v165, v166, v167, v168, v169, v170, v171);
                v172 = *(unsigned int **)v151;
              }
            }
            v173 = *(_DWORD *)(v151 + 12);
            v174 = 4 * v143;
            do
            {
              v175 = *v161++;
              v172[v173] = v175;
              v173 = *(_DWORD *)(v151 + 12) + 1;
              *(_DWORD *)(v151 + 12) = v173;
              v174 -= 4;
            }
            while (v174);
            v176 = *v100;
            v177 = 126 - 2 * __clz(v176);
            if ((_DWORD)v176)
              v178 = v177;
            else
              v178 = 0;
            std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(*v101, (char *)&(*v101)[v176], (uint64_t)v305, v178, 1);
            if (*v100)
            {
              v179 = 0;
              v180 = *v101;
              v181 = *v295;
              do
              {
                *(_DWORD *)(v181 + 4 * v180[v179]) = v179;
                ++v179;
              }
              while (v179 < *v100);
            }
            v182 = v105[21];
            v103 = v288;
            v20 = v290;
            if ((_DWORD)v182)
              break;
          }
        }
      }
LABEL_343:
      if (!v102)
      {
        if ((v103 & 1) == 0)
          goto LABEL_347;
        goto LABEL_129;
      }
    }
    v183 = (unsigned int **)*((_QWORD *)v105 + 9);
    __srcb = &v183[v182];
    while (1)
    {
      v184 = *v183;
      v185 = *v294 + 32 * **v183;
      v186 = *(unsigned int *)(v185 + 12);
      if (!(_DWORD)v186)
        break;
      v187 = *v100 + v186;
      v188 = HIDWORD(v299);
      if (v187 > HIDWORD(v299) && v187 > v299)
      {
        v205 = v299 + ((unint64_t)v299 >> 2);
        if (v205 >= 0x10)
          v206 = v205 + 1;
        else
          v206 = 16;
        if (v206 <= v187)
          v207 = v187;
        else
          v207 = v206;
        v283 = v298;
        v289 = v103;
        if (v207 < 5)
        {
          v208 = (WTF *)v300;
          v298 = (WTF *)v300;
          LODWORD(v299) = 4;
        }
        else
        {
          if (v207 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198039FDCLL);
          }
          v208 = (WTF *)WTF::fastMalloc((WTF *)(4 * v207));
          LODWORD(v299) = v207;
          v298 = v208;
        }
        memcpy(v208, v283, 4 * v188);
        v103 = v289;
        v20 = v290;
        if (v300 != (_QWORD *)v283 && v283)
        {
          if (v298 == v283)
          {
            v298 = 0;
            LODWORD(v299) = 0;
          }
          WTF::fastFree((unint64_t)v283, v209, v13, v14, v15, v16, v17, v18);
          v20 = v290;
          v103 = v289;
        }
      }
      HIDWORD(v299) = v187;
      v189 = *(WTF **)v185;
      v190 = *(unsigned int *)(v185 + 12);
      v191 = *(_QWORD *)v185 + 4 * v190;
      v192 = *v101;
      v193 = *v100;
      v194 = (unint64_t)&(*v101)[v193];
      v12 = v298;
      v56 = (_DWORD)v190 == 0;
      v195 = *(WTF **)v185;
      if (v56 || (_DWORD)v193 == 0)
      {
        v201 = v298;
      }
      else
      {
        v197 = v298;
LABEL_209:
        while (2)
        {
          v198 = v197;
          while (1)
          {
            v199 = *(_DWORD *)v195;
            v200 = *v192;
            if (*(_DWORD *)v195 < *v192)
            {
              *(_DWORD *)v198 = v199;
              v197 = (WTF *)((char *)v198 + 4);
              v195 = (WTF *)((char *)v195 + 4);
              if ((unint64_t)v195 < v191)
                goto LABEL_209;
              goto LABEL_218;
            }
            if (v199 == v200)
              break;
            v201 = (WTF *)((char *)v198 + 4);
            *(_DWORD *)v198 = v200;
            ++v192;
            v198 = (WTF *)((char *)v198 + 4);
            if ((unint64_t)v192 >= v194)
              goto LABEL_279;
          }
          *(_DWORD *)v198 = v199;
          v197 = (WTF *)((char *)v198 + 4);
          v195 = (WTF *)((char *)v195 + 4);
          ++v192;
          if ((unint64_t)v195 < v191 && (unint64_t)v192 < v194)
            continue;
          break;
        }
LABEL_218:
        v201 = (WTF *)((char *)v198 + 4);
      }
LABEL_279:
      while ((unint64_t)v195 < v191)
      {
        v242 = *(_DWORD *)v195;
        v195 = (WTF *)((char *)v195 + 4);
        *(_DWORD *)v201 = v242;
        v201 = (WTF *)((char *)v201 + 4);
      }
      while ((unint64_t)v192 < v194)
      {
        v243 = *v192++;
        *(_DWORD *)v201 = v243;
        v201 = (WTF *)((char *)v201 + 4);
      }
      v244 = ((unint64_t)(v201 - v12) >> 2);
      HIDWORD(v299) = (unint64_t)(v201 - v12) >> 2;
      v245 = *(unsigned int *)(v185 + 12);
      if (v244 == v245)
        goto LABEL_337;
      if (v244 <= v245)
      {
        __break(0xC471u);
        JUMPOUT(0x198039EACLL);
      }
      if (&v298 != (WTF **)v185)
      {
        if (v245 > v244)
        {
          *(_DWORD *)(v185 + 12) = v244;
          if (((unint64_t)(v201 - v12) >> 2))
            goto LABEL_317;
          goto LABEL_331;
        }
        if (*(unsigned int *)(v185 + 8) >= v244)
          goto LABEL_309;
        if (*(_DWORD *)(v185 + 8))
        {
          if (*(_DWORD *)(v185 + 12))
            *(_DWORD *)(v185 + 12) = 0;
          if ((WTF *)(v185 + 16) != v189 && v189)
          {
            *(_QWORD *)v185 = 0;
            *(_DWORD *)(v185 + 8) = 0;
            WTF::fastFree((unint64_t)v189, v12, v13, v14, v15, v16, v17, v18);
            v189 = *(WTF **)v185;
            if (!*(_QWORD *)v185)
              goto LABEL_297;
LABEL_295:
            v246 = *(_DWORD *)(v185 + 8);
          }
          else
          {
            if (v189)
              goto LABEL_295;
LABEL_297:
            *(_QWORD *)v185 = v185 + 16;
            v246 = 4;
            *(_DWORD *)(v185 + 8) = 4;
            v189 = (WTF *)(v185 + 16);
          }
        }
        else
        {
          v246 = 0;
        }
        v247 = HIDWORD(v299);
        if (v246 >= HIDWORD(v299))
        {
LABEL_309:
          v257 = v189;
          goto LABEL_316;
        }
        v248 = *(unsigned int *)(v185 + 12);
        if (HIDWORD(v299) < 5)
        {
          casual = (void *)(v185 + 16);
          *(_QWORD *)v185 = v185 + 16;
          *(_DWORD *)(v185 + 8) = 4;
          goto LABEL_314;
        }
        if (HIDWORD(v299) >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198039FB4);
        }
        v249 = 4 * HIDWORD(v299);
        v250 = *(_QWORD *)(StatusReg + 752);
        if (v250)
        {
          v251 = (unint64_t)(v249 + 15) >> 4;
          if (HIDWORD(v299) <= 0x68)
          {
            v252 = 23 * v251 + 7;
          }
          else
          {
            if (HIDWORD(v299) > 0x9C4)
              goto LABEL_329;
            v252 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v251 + 626);
            if (*(_DWORD *)(v250 + 8052) <= v252)
              goto LABEL_329;
          }
          v253 = v250 + 8 * v252;
          v254 = v253 + 8064;
          *(_BYTE *)(v253 + 8064) = 1;
          v255 = *(unsigned int *)(v253 + 8080);
          if ((_DWORD)v255)
          {
            *(_DWORD *)(v254 + 16) = v255 - *(_DWORD *)(v254 + 20);
            casual = (void *)(*(_QWORD *)(v254 + 8) - v255);
            goto LABEL_312;
          }
          v258 = *(_QWORD *)(v254 + 40);
          v259 = *(_QWORD *)(v254 + 24);
          if (v258)
          {
LABEL_311:
            v260 = __clz(v258);
            *(_QWORD *)(v254 + 40) = v258 & ~(0x8000000000000000 >> v260);
            casual = (void *)(v259 + 16 * v260);
LABEL_312:
            *(_BYTE *)v254 = 0;
LABEL_313:
            *(_DWORD *)(v185 + 8) = v247;
            *(_QWORD *)v185 = casual;
LABEL_314:
            memcpy(casual, v189, 4 * v248);
            v257 = *(WTF **)v185;
            if ((WTF *)(v185 + 16) != v189 && v189)
            {
              if (v257 == v189)
              {
                *(_QWORD *)v185 = 0;
                *(_DWORD *)(v185 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v189, v261, v262, v263, v264, v265, v266, v267);
              v257 = *(WTF **)v185;
            }
LABEL_316:
            v244 = *(unsigned int *)(v185 + 12);
            v12 = v298;
            v189 = v257;
            if (*(_DWORD *)(v185 + 12))
            {
LABEL_317:
              memmove(v189, v12, 4 * v244);
              v268 = *(unsigned int *)(v185 + 12);
              v189 = *(WTF **)v185;
              v12 = v298;
              goto LABEL_332;
            }
LABEL_331:
            v268 = 0;
LABEL_332:
            memcpy((char *)v189 + 4 * v268, (char *)v12 + 4 * v268, 4 * HIDWORD(v299) - 4 * v268);
            v235 = (_DWORD *)&v299 + 1;
LABEL_333:
            *(_DWORD *)(v185 + 12) = *v235;
            v20 = v290;
            goto LABEL_334;
          }
          if (*(_BYTE *)(v254 + 5) == 6)
          {
            v269 = *(unsigned int *)(v254 + 32);
            v270 = *(_DWORD *)(v254 + 36);
            if (v269 < v270)
            {
              *(_QWORD *)(v254 + 8 * v269 + 56) = 0;
              v271 = (unint64_t *)(v250 + 8128 + 8 * v252 + 8 * v269);
              v272 = v270 - 1 - v269;
              while (v272)
              {
                v259 += 1024;
                v274 = *v271++;
                v273 = v274;
                LODWORD(v269) = v269 + 1;
                --v272;
                if (v274)
                {
                  v258 = __rbit64(v273);
                  *(_DWORD *)(v254 + 32) = v269;
                  *(_QWORD *)(v254 + 24) = v259;
                  goto LABEL_311;
                }
              }
              *(_DWORD *)(v254 + 32) = v270;
            }
          }
          *(_BYTE *)v254 = 0;
        }
LABEL_329:
        casual = (void *)bmalloc_allocate_casual(v249, 1);
        goto LABEL_313;
      }
LABEL_334:
      v275 = v301;
      if ((uint64_t)v301[0] >= 0)
        v275 = (_QWORD **)(2 * (uint64_t)v301[0] + 8);
      v103 = 1;
      *(_QWORD **)((char *)v275 + (((unint64_t)*v184 >> 3) & 0x1FFFFFF8)) = (_QWORD *)((1 << *v184) | *(unint64_t *)((char *)v275 + (((unint64_t)*v184 >> 3) & 0x1FFFFFF8)));
LABEL_337:
      if (++v183 == __srcb)
        goto LABEL_343;
    }
    v202 = *(_DWORD *)(v185 + 8);
    if (*v100 <= v202)
      goto LABEL_261;
    if (!v202)
    {
LABEL_244:
      v210 = *v100;
      if (v202 < v210)
      {
        v211 = *(WTF **)v185;
        v212 = *(unsigned int *)(v185 + 12);
        if (v210 < 5)
        {
          v220 = (void *)(v185 + 16);
          *(_QWORD *)v185 = v185 + 16;
          *(_DWORD *)(v185 + 8) = 4;
          goto LABEL_259;
        }
        if (v210 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198039FCCLL);
        }
        v213 = 4 * v210;
        v214 = *(_QWORD *)(StatusReg + 752);
        if (!v214)
          goto LABEL_276;
        v215 = (unint64_t)(v213 + 15) >> 4;
        if (v210 <= 0x68)
        {
          v216 = 23 * v215 + 7;
        }
        else if (v210 > 0x9C4
               || (v216 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v215 + 626),
                   *(_DWORD *)(v214 + 8052) <= v216))
        {
LABEL_276:
          v220 = (void *)bmalloc_allocate_casual(v213, 1);
          goto LABEL_258;
        }
        v217 = v214 + 8 * v216;
        v218 = v217 + 8064;
        *(_BYTE *)(v217 + 8064) = 1;
        v219 = *(unsigned int *)(v217 + 8080);
        if ((_DWORD)v219)
        {
          *(_DWORD *)(v218 + 16) = v219 - *(_DWORD *)(v218 + 20);
          v220 = (void *)(*(_QWORD *)(v218 + 8) - v219);
        }
        else
        {
          v221 = *(_QWORD *)(v218 + 40);
          v222 = *(_QWORD *)(v218 + 24);
          if (!v221)
          {
            if (*(_BYTE *)(v218 + 5) == 6)
            {
              v236 = *(unsigned int *)(v218 + 32);
              v237 = *(_DWORD *)(v218 + 36);
              if (v236 < v237)
              {
                *(_QWORD *)(v218 + 8 * v236 + 56) = 0;
                v238 = (unint64_t *)(v214 + 8128 + 8 * v216 + 8 * v236);
                v239 = v237 - 1 - v236;
                while (v239)
                {
                  v222 += 1024;
                  v241 = *v238++;
                  v240 = v241;
                  LODWORD(v236) = v236 + 1;
                  --v239;
                  if (v241)
                  {
                    v221 = __rbit64(v240);
                    *(_DWORD *)(v218 + 32) = v236;
                    *(_QWORD *)(v218 + 24) = v222;
                    goto LABEL_256;
                  }
                }
                *(_DWORD *)(v218 + 32) = v237;
              }
            }
            *(_BYTE *)v218 = 0;
            goto LABEL_276;
          }
LABEL_256:
          v223 = __clz(v221);
          *(_QWORD *)(v218 + 40) = v221 & ~(0x8000000000000000 >> v223);
          v220 = (void *)(v222 + 16 * v223);
        }
        *(_BYTE *)v218 = 0;
LABEL_258:
        *(_DWORD *)(v185 + 8) = v210;
        *(_QWORD *)v185 = v220;
LABEL_259:
        memcpy(v220, v211, 4 * v212);
        if ((WTF *)(v185 + 16) != v211 && v211)
        {
          if (*(WTF **)v185 == v211)
          {
            *(_QWORD *)v185 = 0;
            *(_DWORD *)(v185 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v211, v224, v225, v226, v227, v228, v229, v230);
        }
      }
LABEL_261:
      v231 = *(unsigned int *)(v185 + 12);
      v232 = *(WTF **)v185;
      v233 = *v101;
      if ((_DWORD)v231)
      {
        memmove(v232, v233, 4 * v231);
        v234 = *(unsigned int *)(v185 + 12);
        v232 = *(WTF **)v185;
        v233 = *v101;
      }
      else
      {
        v234 = 0;
      }
      memcpy((char *)v232 + 4 * v234, &v233[v234], 4 * *v100 - 4 * v234);
      v235 = (_DWORD *)(a1 + 60);
      goto LABEL_333;
    }
    v203 = *(WTF **)v185;
    if (v185 + 16 == *(_QWORD *)v185 || v203 == 0)
    {
      if (!v203)
      {
LABEL_243:
        *(_QWORD *)v185 = v185 + 16;
        v202 = 4;
        *(_DWORD *)(v185 + 8) = 4;
        goto LABEL_244;
      }
    }
    else
    {
      *(_QWORD *)v185 = 0;
      *(_DWORD *)(v185 + 8) = 0;
      WTF::fastFree((unint64_t)v203, v12, v13, v14, v15, v16, v17, v18);
      if (!*(_QWORD *)v185)
        goto LABEL_243;
    }
    v202 = *(_DWORD *)(v185 + 8);
    goto LABEL_244;
  }
LABEL_347:
  v276 = v298;
  if (v300 != (_QWORD *)v298 && v298 != 0)
  {
    v298 = 0;
    LODWORD(v299) = 0;
    WTF::fastFree((unint64_t)v276, v12, v13, v14, v15, v16, v17, v18);
  }
  if (((unint64_t)v301[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (uint64_t)v301[0], v12, v13, v14, v15, v16, v17, v18);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v296);
  return a1;
}

_QWORD **WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Tmp,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, _QWORD **a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return JSC::B3::Air::Arg::forEachTmp<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(a2, a3, a5, **(_QWORD ****)(a1 + 16));
}

_QWORD **JSC::B3::Air::Arg::forEachTmp<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(_QWORD **result, unsigned int a2, uint64_t a3, _QWORD **a4)
{
  _QWORD **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  int v29;

  v5 = result;
  switch(*((_BYTE *)result + 8))
  {
    case 1:
      return JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(a4, *((_DWORD *)result + 4), a2);
    case 6:
    case 7:
    case 8:
      v6 = *((_DWORD *)result + 4);
      if (v6 <= 0)
        v6 = *(_DWORD *)(**a4 + 176) - v6 + 33;
      v27 = v6;
      v7 = *a4[1] + (*a4[2] << 6);
      v8 = *(unsigned int *)(v7 + 12);
      if (!(_DWORD)v8)
        goto LABEL_8;
      v9 = *(int **)v7;
      v10 = *(unsigned int *)(v7 + 12);
      while (1)
      {
        v11 = *v9++;
        if (v11 == v6)
          return result;
        if (!--v10)
        {
LABEL_8:
          if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
          {
            result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v27);
            v12 = (int *)(*(_QWORD *)v7 + 4 * *(unsigned int *)(v7 + 12));
            v6 = *(_DWORD *)result;
          }
          else
          {
            v12 = (int *)(*(_QWORD *)v7 + 4 * v8);
          }
          *v12 = v6;
          goto LABEL_32;
        }
      }
    case 0xB:
      v13 = *a4;
      v14 = *((_DWORD *)result + 4);
      if (v14 <= 0)
        v14 = *(_DWORD *)(*v13 + 176) - v14 + 33;
      v28 = v14;
      v15 = *a4[1] + (*a4[2] << 6);
      v16 = *(unsigned int *)(v15 + 12);
      if (!(_DWORD)v16)
        goto LABEL_20;
      v17 = *(int **)v15;
      v18 = *(unsigned int *)(v15 + 12);
      break;
    case 0xC:
    case 0xD:
      return JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(a4, *((_DWORD *)result + 4), 6u);
    default:
      return result;
  }
  while (1)
  {
    v19 = *v17++;
    if (v19 == v14)
      break;
    if (!--v18)
    {
LABEL_20:
      if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
      {
        result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
        v20 = (int *)(*(_QWORD *)v15 + 4 * *(unsigned int *)(v15 + 12));
        v14 = *(_DWORD *)result;
        v13 = *a4;
      }
      else
      {
        v20 = (int *)(*(_QWORD *)v15 + 4 * v16);
      }
      *v20 = v14;
      ++*(_DWORD *)(v15 + 12);
      break;
    }
  }
  v21 = *((_DWORD *)v5 + 5);
  if (v21 <= 0)
    v21 = *(_DWORD *)(*v13 + 176) - v21 + 33;
  v29 = v21;
  v7 = *a4[1] + (*a4[2] << 6);
  v22 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v22)
  {
    v23 = *(int **)v7;
    v24 = *(unsigned int *)(v7 + 12);
    while (1)
    {
      v25 = *v23++;
      if (v25 == v21)
        break;
      if (!--v24)
        goto LABEL_29;
    }
  }
  else
  {
LABEL_29:
    if ((_DWORD)v22 == *(_DWORD *)(v7 + 8))
    {
      result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v22 + 1, (unint64_t)&v29);
      v26 = (int *)(*(_QWORD *)v7 + 4 * *(unsigned int *)(v7 + 12));
      v21 = *(_DWORD *)result;
    }
    else
    {
      v26 = (int *)(*(_QWORD *)v7 + 4 * v22);
    }
    *v26 = v21;
LABEL_32:
    ++*(_DWORD *)(v7 + 12);
  }
  return result;
}

_QWORD **JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD **result, int a2, unsigned int a3)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;

  v4 = result;
  if (a2 <= 0)
    a2 = *(_DWORD *)(**result + 176) - a2 + 33;
  v32 = a2;
  if (a3 > 0xB || ((1 << a3) & 0xF3C) == 0)
  {
    v5 = *result[1] + (*result[2] << 6);
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(int **)v5;
      v8 = *(unsigned int *)(v5 + 12);
      while (1)
      {
        v9 = *v7++;
        if (v9 == a2)
          break;
        if (!--v8)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
      {
        result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v32);
        v10 = (int *)(*(_QWORD *)v5 + 4 * *(unsigned int *)(v5 + 12));
        a2 = *(_DWORD *)result;
      }
      else
      {
        v10 = (int *)(*(_QWORD *)v5 + 4 * v6);
      }
      *v10 = a2;
      ++*(_DWORD *)(v5 + 12);
    }
  }
  if (a3 - 8 <= 2)
  {
    v11 = *v4[1] + (*v4[2] << 6);
    v12 = v11 + 32;
    v13 = *(unsigned int *)(v11 + 44);
    if ((_DWORD)v13)
    {
      v14 = *(int **)v12;
      v15 = v13;
      while (1)
      {
        v16 = *v14++;
        if (v16 == v32)
          break;
        if (!--v15)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_17:
      if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
      {
        result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v32);
        v17 = (_DWORD *)(*(_QWORD *)v12 + 4 * *(unsigned int *)(v12 + 12));
      }
      else
      {
        v17 = (_DWORD *)(*(_QWORD *)v12 + 4 * v13);
        result = (_QWORD **)&v32;
      }
      *v17 = *(_DWORD *)result;
      ++*(_DWORD *)(v12 + 12);
    }
  }
  if (a3 >= 2 && (a3 > 0xB || ((1 << a3) & 0xBF0) == 0))
  {
    v25 = *v4[1] + (*v4[2] << 6);
    v26 = v25 + 64;
    v27 = *(unsigned int *)(v25 + 76);
    if ((_DWORD)v27)
    {
      v28 = *(int **)v26;
      v29 = v27;
      while (1)
      {
        v30 = *v28++;
        if (v30 == v32)
          break;
        if (!--v29)
          goto LABEL_36;
      }
    }
    else
    {
LABEL_36:
      if ((_DWORD)v27 == *(_DWORD *)(v26 + 8))
      {
        result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v27 + 1, (unint64_t)&v32);
        v31 = (_DWORD *)(*(_QWORD *)v26 + 4 * *(unsigned int *)(v26 + 12));
      }
      else
      {
        v31 = (_DWORD *)(*(_QWORD *)v26 + 4 * v27);
        result = (_QWORD **)&v32;
      }
      *v31 = *(_DWORD *)result;
      ++*(_DWORD *)(v26 + 12);
    }
  }
  if ((a3 & 0xFFFFFFFC) == 4)
  {
    v18 = *v4[1] + (*v4[2] << 6);
    v19 = v18 + 96;
    v20 = *(unsigned int *)(v18 + 108);
    if ((_DWORD)v20)
    {
      v21 = *(int **)v19;
      v22 = v20;
      while (1)
      {
        v23 = *v21++;
        if (v23 == v32)
          break;
        if (!--v22)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
      {
        result = (_QWORD **)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v32);
        v24 = (_DWORD *)(*(_QWORD *)v19 + 4 * *(unsigned int *)(v19 + 12));
      }
      else
      {
        v24 = (_DWORD *)(*(_QWORD *)v19 + 4 * v20);
        result = (_QWORD **)&v32;
      }
      *v24 = *(_DWORD *)result;
      ++*(_DWORD *)(v19 + 12);
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<unsigned int>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4)
  {
    v5 = *(int **)result;
    v6 = *(unsigned int *)(result + 12);
    while (1)
    {
      v7 = *v5++;
      if (v7 == *a2)
        break;
      if (!--v6)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((_DWORD)v4 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v4 + 1, (unint64_t)a2);
      v2 = (_DWORD *)result;
      v4 = *(unsigned int *)(v3 + 12);
    }
    *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = *v2;
    ++*(_DWORD *)(v3 + 12);
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 30))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 4 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 5)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v5 >> 30))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 4 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Air::decodeFormWidth(uint64_t this)
{
  if ((this >> 5) - 1 >= 5)
  {
    this = 87;
    __break(0xC471u);
  }
  return this;
}

char *WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  char *result;

  result = WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *(_DWORD *)result;
  return result;
}

char *WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v10 < 5)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 4;
        goto LABEL_13;
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_13:
        memcpy(v11, v5, 4 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19803A9C8);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    v24 = *((unsigned int *)a1 + 3);
    if (v23 < 5)
    {
      v25 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 4;
    }
    else
    {
      if (v23 >> 30)
        goto LABEL_38;
      v25 = (char *)WTF::fastMalloc((WTF *)(4 * v23));
      *((_DWORD *)a1 + 2) = v23;
      *a1 = v25;
    }
    memcpy(v25, v5, 4 * v24);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::~Liveness(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;

  v9 = *(unsigned int *)(a1 + 92);
  v10 = *(_QWORD *)(a1 + 80);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    v12 = v10 + 16;
    do
    {
      v13 = *(_QWORD *)(v12 - 16);
      if (v12 != v13 && v13 != 0)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 32;
      v11 -= 32;
    }
    while (v11);
    v10 = *(_QWORD *)(a1 + 80);
  }
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(unsigned int *)(a1 + 76);
  v16 = *(_QWORD *)(a1 + 64);
  if ((_DWORD)v15)
  {
    v17 = 32 * v15;
    v18 = v16 + 16;
    do
    {
      v19 = *(_QWORD *)(v18 - 16);
      if (v18 != v19 && v19 != 0)
      {
        *(_QWORD *)(v18 - 16) = 0;
        *(_DWORD *)(v18 - 8) = 0;
        WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 += 32;
      v17 -= 32;
    }
    while (v17);
    v16 = *(_QWORD *)(a1 + 64);
  }
  if (v16)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *(_QWORD *)(a1 + 32);
  if (v22)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<WTF::Vector<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::Actions,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::UnifiedTmpLivenessAdapter>::Actions,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = v10 + 16 * v9;
    do
    {
      v12 = *(unsigned int *)(v10 + 12);
      v13 = *(_QWORD *)v10;
      if ((_DWORD)v12)
      {
        v14 = v12 << 6;
        v15 = v13 + 48;
        do
        {
          v16 = *(_QWORD *)(v15 - 16);
          if (v15 != v16 && v16 != 0)
          {
            *(_QWORD *)(v15 - 16) = 0;
            *(_DWORD *)(v15 - 8) = 0;
            WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          }
          v18 = *(_QWORD *)(v15 - 48);
          if (v15 - 32 != v18 && v18 != 0)
          {
            *(_QWORD *)(v15 - 48) = 0;
            *(_DWORD *)(v15 - 40) = 0;
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          }
          v15 += 64;
          v14 -= 64;
        }
        while (v14);
        v13 = *(_QWORD *)v10;
      }
      if (v13)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 16;
    }
    while (v10 != v11);
    v10 = *(_QWORD *)a1;
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

char *WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19803AD50);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [8],JSC::B3::Air::Arg::Role,char [2]>(uint64_t a1, JSC::B3::Air::Tmp *a2, JSC::Reg *a3, char *a4)
{
  unint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  void (**v47)(WTF::StringPrintStream *__hidden);
  WTF *v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v47 = off_1E3572250;
    v48 = (WTF *)v50;
    v49 = xmmword_199122F80;
    v50[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", "Alloc(");
    JSC::B3::Air::Tmp::dump(a2, (WTF::PrintStream *)&v47);
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", ", ");
    JSC::Reg::dump(a3, (WTF::PrintStream *)&v47);
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", ", role=");
    v8 = *a4;
    if (v8 >= 0xC)
    {
      __break(0xC471u);
    }
    else
    {
      v9 = off_1E357FAC0[v8];
      v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v47[4])(&v47);
      WTF::PrintStream::printf(v10, "%s", v9);
      v47[5]((WTF::StringPrintStream *)&v47);
      WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", ")");
      v47[5]((WTF::StringPrintStream *)&v47);
      if (v48)
      {
        WTF::fromUTF8Impl<false>((unint64_t)v48, v49, (uint64_t *)&v44);
        v18 = v44;
      }
      else
      {
        v18 = 0;
      }
      v19 = *(_DWORD *)(a1 + 200);
      v45 = v19;
      v44 = 0;
      v46 = v18;
      v20 = *(unsigned int *)(a1 + 228);
      if ((_DWORD)v20 == *(_DWORD *)(a1 + 224))
      {
        v21 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v20 + 1, (unint64_t)&v45);
        v22 = *(unsigned int *)(a1 + 228);
        v23 = *(_QWORD *)(a1 + 216) + 16 * v22;
        *(_DWORD *)v23 = *(_DWORD *)v21;
        v24 = *(_QWORD *)(v21 + 8);
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v23 + 8) = v24;
        v25 = v46;
        *(_DWORD *)(a1 + 228) = v22 + 1;
        v46 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v11, v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 216) + 16 * v20;
        *(_DWORD *)v26 = v19;
        *(_QWORD *)(v26 + 8) = v18;
        *(_DWORD *)(a1 + 228) = v20 + 1;
      }
      v27 = v44;
      v44 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      if (v48 != (WTF *)v50)
        WTF::fastFree((unint64_t)v48, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

void JSC::MacroAssemblerARM64::loadVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) > 0x1FF)
  {
    if (HIDWORD(a2) > 0xFFF0 || (a2 & 0xF00000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v12 = v8 | (32 * v9);
      v13 = 1022453760;
    }
    else
    {
      v12 = a3 | (32 * (char)a2) | (HIDWORD(a2) << 6) & 0x3FFC00;
      v13 = 1035993088;
    }
    v11 = v12 | v13;
  }
  else
  {
    v11 = a3 | (32 * (char)a2) | ((WORD2(a2) & 0x1FF) << 12) | 0x3CC00000;
  }
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v11;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::loadVector(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (HIDWORD(a2) == 3 || HIDWORD(a2) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v26 = v8 | (32 * (char)v16) | 0x3CE00800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_1991505A0 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x19803B2E8);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x19803B318);
  }
  v17 = *(_DWORD *)((char *)&unk_1991505A0 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0xB200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = v8 | (32 * (char)v10) | 0x3CF16800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void _ZZZN3JSC2B33Air28GenerateAndAllocateRegisters8generateERNS_12CCallHelpersEENK3__2clEvENKUlRT_E_clIN3WTF6VectorINSt3__14pairIPNS1_3TmpENS1_3Arg4RoleEEELm8ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEDaS7_(uint64_t *a1, unsigned int **a2, unsigned int a3)
{
  unsigned int **v3;
  unsigned int **v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint8x8_t v10;
  __int32 v11;
  uint8x8_t v12;
  uint8x8_t v13;
  __int32 v14;
  uint8x8_t v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  __int16 v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  int v81;
  char v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint8x8_t v93;
  __int32 v94;
  uint8x8_t v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 v113;
  int v114;
  char v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  char v135;
  int v136;
  __int16 v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  char v156;
  int v157;
  __int16 v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  char v174;
  int v175;
  char v176;
  __int16 v177;
  uint64_t v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  char v194;
  int v195;
  char v196;
  __int16 v197;
  uint64_t v198;
  char v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  char v230;
  int v231;
  char v232;
  __int16 v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  char v252;
  int v253;
  char v254;
  __int16 v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t *v264;
  uint64_t v265;
  _DWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  char v276;
  int v277;
  __int16 v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int *v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  char v292;
  int v293;
  __int16 v294;
  uint64_t v295;
  unsigned int v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  char v318;
  int v319;
  __int16 v320;
  uint64_t v321;
  unsigned int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  int v330;
  unsigned int **v331;
  uint64_t v332;
  int v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  BOOL v344;
  unsigned int v345;
  char v346;
  char v347;
  unsigned int v348;
  uint64_t v349;
  char v350;
  unsigned int v351;
  uint64_t v352;
  __int16 v353;
  uint64_t v354;
  int v355;
  char v356;
  uint64_t v357;
  __int16 v358;
  uint64_t v359;
  int v360;
  char v361;

  if (!a3)
    return;
  v3 = a2;
  v5 = &a2[2 * a3];
  v6 = a1 + 2;
  v7 = a1 + 4;
  v8 = 1;
  v331 = v5;
  v334 = a1 + 4;
  v335 = a1 + 2;
  while (1)
  {
    v9 = a1[24] | a1[23];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)(*((_DWORD *)a1 + 48) | *((_DWORD *)a1 + 46)));
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.i32[0];
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v9));
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.i32[0] + v11)
    {
      v16 = 1;
    }
    else
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*((_DWORD *)a1 + 52) | *((_DWORD *)a1 + 50)));
      v13.i16[0] = vaddlv_u8(v13);
      v14 = v13.i32[0];
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)((a1[26] | (unint64_t)a1[25]) >> 32));
      v15.i16[0] = vaddlv_u8(v15);
      v16 = v15.i32[0] + v14 != 0;
    }
    v17 = *v3;
    v18 = *((char *)v3 + 8);
    v19 = **v3;
    v20 = v19 >> 31;
    if ((int)v19 <= 0)
      v21 = -(int)v19;
    else
      v21 = **v3;
    if ((int)v19 <= 0)
      v22 = 32;
    else
      v22 = 16;
    if ((int)v19 <= 0)
      v23 = v7;
    else
      v23 = v6;
    v24 = *v23;
    v25 = *(_BYTE *)(v24 + 16 * v21 + 8);
    v26 = v25 & 0x7F;
    if ((v25 & 0x7F) == 0x7F)
    {
      v344 = v16;
      v343 = *v3;
      goto LABEL_93;
    }
    if (!v16)
    {
      v27 = v18 - 4;
LABEL_37:
      v43 = (char)(31 - v26);
      if ((*(_BYTE *)(v24 + 16 * v21 + 8) & 0x60) == 0)
        v43 = v26 + 1;
      *v17 = v43;
      if (v27 <= 6)
      {
        if ((v25 & 0x7Fu) >= 0x40uLL)
          goto LABEL_358;
        *(int8x16_t *)(a1 + 27) = vandq_s8(*(int8x16_t *)(a1 + 27), (int8x16_t)vdupq_n_s64(~(1 << (v25 & 0x7F))));
      }
      if ((v25 & 0x40) != 0)
        goto LABEL_358;
      a1[19] |= 1 << v25;
      if ((v25 & 0x60) == 0x20)
        a1[20] |= 1 << v25;
      goto LABEL_347;
    }
    if (v18 <= 0xB && ((1 << v18) & 0xB30) != 0)
      goto LABEL_24;
    if ((v25 & 0x7Fu) >= 0x40uLL)
      goto LABEL_358;
    if (((v9 >> (v25 & 0x7F)) & 1) == 0)
    {
LABEL_24:
      v27 = v18 - 4;
      if (v18 - 4 > 6)
        goto LABEL_25;
      if ((v25 & 0x7Fu) >= 0x40uLL)
        goto LABEL_358;
      if ((((a1[25] | (unint64_t)a1[26]) >> (v25 & 0x7F)) & 1) == 0)
      {
LABEL_25:
        if (v18 - 2 < 4)
          goto LABEL_55;
        if ((v25 & 0x7Fu) >= 0x40uLL)
          goto LABEL_358;
        if (((v9 >> (v25 & 0x7F)) & 1) == 0)
        {
LABEL_55:
          if (v18 <= 0xB && ((1 << v18) & 0xB03) != 0)
            goto LABEL_37;
          if ((v25 & 0x7Fu) >= 0x40uLL)
            goto LABEL_358;
          if ((((a1[25] | (unint64_t)a1[26]) >> (v25 & 0x7F)) & 1) == 0)
            goto LABEL_37;
        }
      }
    }
    v351 = **v3;
    LOBYTE(v348) = v25;
    v336 = v21;
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 16 * v21) + 16);
    v349 = v28;
    v340 = v22;
    v343 = v17;
    v344 = v16;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(a1[1], (JSC::B3::Air::Tmp *)&v351, (JSC::Reg *)&v348, &v349);
    if ((int)v19 >= 1)
    {
      v29 = (_DWORD *)a1[1];
      v30 = *(unsigned int *)(*a1 + 184);
      v360 = 0;
      v361 = 0;
      v358 = 519;
      v359 = 0x1E00000001;
      v357 = v28;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)
        || (v357 = v28 + v30,
            v358 = 519,
            v359 = 0x2000000001,
            v360 = 0,
            v361 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)))
      {
        v36 = v357;
        v37 = v358;
        v38 = HIBYTE(v358);
        v40 = v359;
        v39 = BYTE4(v359);
        v41 = v360;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v29, v28, 30, v31, v32, v33, v34, v35);
        v356 = 0;
        v353 = 523;
        v355 = 31;
        v354 = 0x1E00000001;
        v352 = 0;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 90, 259))
        {
          v36 = v352;
          v37 = v353;
          v38 = HIBYTE(v353);
          v40 = v354;
          v39 = BYTE4(v354);
          v41 = v355;
        }
        else
        {
          v68 = v29[50];
          if (v68 + 4 > v29[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v29 + 14), v63, v64, v31, v32, v33, v34, v35);
            v68 = v29[50];
          }
          v41 = 0;
          v36 = 0;
          *(_DWORD *)(*((_QWORD *)v29 + 7) + v68) = -1961032738;
          v29[50] += 4;
          v37 = 7;
          v40 = 1;
          v39 = 31;
          v38 = 2;
        }
      }
      v5 = v331;
      v42 = a1[1];
      if (v37 == 7)
      {
        JSC::MacroAssemblerARM64::store64(v42, v25 & 0x7F, (v39 - 1) | (unint64_t)(v36 << 32), v31, v32, v33, v34, v35);
      }
      else
      {
        HIDWORD(v61) = v40;
        LODWORD(v61) = v40 - 2;
        v60 = v61 >> 1;
        if (v60 > 7)
          v62 = 0;
        else
          v62 = qword_1991505B0[v60];
        JSC::MacroAssemblerARM64::store64(v42, v25 & 0x7F, v62 | ((v41 << 8) - 256) & 0xFF00 | (v39 - 1), v36 | (v38 << 32), v32, v33, v34, v35);
      }
      goto LABEL_91;
    }
    v44 = *a1;
    if (!HIBYTE(dword_1ECF4C7B0))
    {
      v45 = (_DWORD *)a1[1];
      v332 = *(unsigned int *)(v44 + 184);
LABEL_79:
      v360 = 0;
      v361 = 0;
      v358 = 519;
      v359 = 0x1E00000001;
      v357 = v28;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)
        || (v357 = v28 + v332,
            v358 = 519,
            v359 = 0x2000000001,
            v360 = 0,
            v361 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)))
      {
        v77 = v357;
        v78 = v358;
        v79 = HIBYTE(v358);
        v81 = v359;
        v80 = BYTE4(v359);
        v82 = v25 & 0x7F;
        v83 = v360;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v45, v28, 30, v72, v73, v74, v75, v76);
        v356 = 0;
        v353 = 523;
        v355 = 31;
        v354 = 0x1E00000001;
        v352 = 0;
        if (!JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 108, 259))
        {
          v210 = v45[50];
          if (v210 + 4 > v45[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 14), v89, v90, v72, v73, v74, v75, v76);
            v210 = v45[50];
            v82 = v348 & 0x7F;
          }
          else
          {
            v82 = v25 & 0x7F;
          }
          v5 = v331;
          v83 = 0;
          v77 = 0;
          *(_DWORD *)(*((_QWORD *)v45 + 7) + v210) = -1961032738;
          v45[50] += 4;
          v78 = 7;
          v81 = 1;
          v80 = 31;
          v79 = 2;
          goto LABEL_83;
        }
        v77 = v352;
        v78 = v353;
        v79 = HIBYTE(v353);
        v81 = v354;
        v80 = BYTE4(v354);
        v82 = v25 & 0x7F;
        v83 = v355;
      }
      v5 = v331;
LABEL_83:
      v84 = a1[1];
      v85 = (char)(v82 - 32);
      if (v78 == 7)
      {
        JSC::MacroAssemblerARM64::storeDouble(v84, v85, (v80 - 1) | (unint64_t)(v77 << 32), v72, v73, v74, v75, v76);
      }
      else
      {
        HIDWORD(v87) = v81;
        LODWORD(v87) = v81 - 2;
        v86 = v87 >> 1;
        if (v86 > 7)
          v88 = 0;
        else
          v88 = qword_1991505B0[v86];
        JSC::MacroAssemblerARM64::storeDouble(v84, v85, v88 | ((v83 << 8) - 256) & 0xFF00 | (v80 - 1), v77 | (v79 << 32), v73, v74, v75, v76);
      }
      goto LABEL_91;
    }
    if (HIBYTE(word_1ECF4C79E))
    {
      v45 = (_DWORD *)a1[1];
      v332 = *(unsigned int *)(v44 + 184);
    }
    else
    {
      v45 = (_DWORD *)a1[1];
      v332 = *(unsigned int *)(v44 + 184);
      if (!*(_BYTE *)(*(_QWORD *)(v44 + 8) + 212))
        goto LABEL_79;
    }
    v360 = 0;
    v361 = 0;
    v358 = 519;
    v359 = 0x1E00000001;
    v357 = v28;
    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)
      || (v357 = v28 + v332,
          v358 = 519,
          v359 = 0x2000000001,
          v360 = 0,
          v361 = 0,
          JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)))
    {
      v51 = v357;
      v52 = v358;
      v53 = HIBYTE(v358);
      v55 = v359;
      v54 = BYTE4(v359);
      v56 = v25 & 0x7F;
      v57 = v360;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v45, v28, 30, v46, v47, v48, v49, v50);
      v356 = 0;
      v353 = 523;
      v355 = 31;
      v354 = 0x1E00000001;
      v352 = 0;
      if (!JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 113, 260))
      {
        v71 = v45[50];
        if (v71 + 4 > v45[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 14), v69, v70, v46, v47, v48, v49, v50);
          v71 = v45[50];
          v56 = v348 & 0x7F;
        }
        else
        {
          v56 = v25 & 0x7F;
        }
        v5 = v331;
        v57 = 0;
        v51 = 0;
        *(_DWORD *)(*((_QWORD *)v45 + 7) + v71) = -1961032738;
        v45[50] += 4;
        v52 = 7;
        v55 = 1;
        v54 = 31;
        v53 = 2;
        goto LABEL_52;
      }
      v51 = v352;
      v52 = v353;
      v53 = HIBYTE(v353);
      v55 = v354;
      v54 = BYTE4(v354);
      v56 = v25 & 0x7F;
      v57 = v355;
    }
    v5 = v331;
LABEL_52:
    v58 = a1[1];
    v59 = v56 - 32;
    if (v52 == 7)
    {
      JSC::MacroAssemblerARM64::storeVector(v58, v59, (v54 - 1) | (unint64_t)(v51 << 32), v46, v47, v48, v49, v50);
    }
    else
    {
      HIDWORD(v66) = v55;
      LODWORD(v66) = v55 - 2;
      v65 = v66 >> 1;
      v67 = v65 > 7 ? 0 : qword_1991505B0[v65];
      JSC::MacroAssemblerARM64::storeVector(v58, v59, v67 | ((v57 << 8) - 256) & 0xFF00 | (v54 - 1), v51 | (v53 << 32), v47, v48, v49, v50);
    }
LABEL_91:
    *(_DWORD *)(*(_QWORD *)a1[13] + 4 * v26) = 0;
    v7 = v334;
    v6 = v335;
    v91 = v339;
    if ((v25 & 0x40) != 0)
      goto LABEL_358;
    a1[v20 + 10] |= 1 << v25;
    v339 |= 0x7Fu;
    *(_BYTE *)(*(uint64_t *)((char *)a1 + v340) + 16 * v336 + 8) = v91 | 0x7F;
LABEL_93:
    v92 = a1[v20 + 10];
    v93 = (uint8x8_t)vcnt_s8((int8x8_t)v92);
    v93.i16[0] = vaddlv_u8(v93);
    v94 = v93.i32[0];
    v95 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v92));
    v95.i16[0] = vaddlv_u8(v95);
    v96 = &a1[2 * v20];
    v97 = (char *)v96[6];
    v98 = *((unsigned int *)v96 + 15);
    if (v95.i32[0] + v94)
      break;
LABEL_125:
    if ((_DWORD)v98)
    {
      v109 = v18 - 4;
      if (!v344)
      {
        while (1)
        {
          v110 = *v97;
          v113 = *v97 & 0x7F;
          if (v113 >= 0x40uLL)
            goto LABEL_358;
          v111 = a1[19];
          v112 = 1 << v113;
          if ((v111 & (1 << v113)) == 0 && (a1[21] & v112) == 0)
            goto LABEL_152;
          ++v97;
          if (!--v98)
            goto LABEL_151;
        }
      }
      while (1)
      {
        v110 = *v97;
        if (v18 <= 0xB && ((1 << v18) & 0xB30) != 0)
          goto LABEL_133;
        if ((v110 & 0x7Fu) > 0x3FuLL)
          goto LABEL_358;
        if ((((a1[23] | (unint64_t)a1[24]) >> (v110 & 0x7F)) & 1) == 0)
        {
LABEL_133:
          if (v109 > 6)
            goto LABEL_134;
          if ((v110 & 0x7Fu) > 0x3FuLL)
            goto LABEL_358;
          if ((((a1[25] | (unint64_t)a1[26]) >> (v110 & 0x7F)) & 1) == 0)
          {
LABEL_134:
            if (v18 - 2 < 4)
              goto LABEL_138;
            if ((v110 & 0x7Fu) > 0x3FuLL)
              goto LABEL_358;
            if ((((a1[23] | (unint64_t)a1[24]) >> (v110 & 0x7F)) & 1) == 0)
            {
LABEL_138:
              if (v18 <= 0xB && ((1 << v18) & 0xB03) != 0)
                goto LABEL_139;
              if ((v110 & 0x7Fu) > 0x3FuLL)
                goto LABEL_358;
              if ((((a1[25] | (unint64_t)a1[26]) >> (v110 & 0x7F)) & 1) == 0)
              {
LABEL_139:
                if ((v110 & 0x7Fu) > 0x3FuLL)
                  goto LABEL_358;
                v111 = a1[19];
                v112 = 1 << (v110 & 0x7F);
                if ((v111 & v112) == 0 && (a1[21] & v112) == 0)
                  break;
              }
            }
          }
        }
        ++v97;
        if (!--v98)
          goto LABEL_151;
      }
LABEL_152:
      v115 = v110;
      if (v109 <= 6)
        *(int8x16_t *)(a1 + 27) = vandq_s8(*(int8x16_t *)(a1 + 27), (int8x16_t)vdupq_n_s64(~v112));
      if ((v110 & 0x40) != 0)
        goto LABEL_358;
      a1[19] = (1 << v110) | v111;
      if ((v110 & 0x60) == 0x20)
        a1[20] |= 1 << v110;
      v116 = v343;
      v117 = *v343;
      v348 = *v343;
      v347 = v110;
      v346 = v18;
      v118 = v110 & 0x7F;
      v119 = *(unsigned int *)(*(_QWORD *)a1[13] + 4 * v118);
      v345 = v110 & 0x7F;
      if ((_DWORD)v119)
      {
        v333 = v8;
        v351 = *(_DWORD *)(*(_QWORD *)a1[13] + 4 * (v110 & 0x7F));
        v350 = v110;
        v120 = -(int)v119;
        if ((int)v119 <= 0)
        {
          v121 = 32;
        }
        else
        {
          v120 = v119;
          v121 = 16;
        }
        v341 = v121;
        if ((int)v119 <= 0)
          v122 = v7;
        else
          v122 = v6;
        v123 = v120;
        v124 = *(_QWORD *)(*(_QWORD *)(*v122 + 16 * v120) + 16);
        v349 = v124;
        if ((_BYTE)word_1ECF4C286)
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(a1[1], (JSC::B3::Air::Tmp *)&v351, (JSC::Reg *)&v350, &v349);
        if ((int)v119 >= 1)
        {
          v125 = (_DWORD *)a1[1];
          v126 = *(unsigned int *)(*a1 + 184);
          v360 = 0;
          v361 = 0;
          v358 = 519;
          v359 = 0x1E00000001;
          v357 = v124;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)
            || (v357 = v124 + v126,
                v358 = 519,
                v359 = 0x2000000001,
                v360 = 0,
                v361 = 0,
                JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)))
          {
            v132 = v357;
            v133 = v358;
            v134 = HIBYTE(v358);
            v136 = v359;
            v135 = BYTE4(v359);
            v137 = v360;
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v125, v124, 30, v127, v128, v129, v130, v131);
            v356 = 0;
            v353 = 523;
            v355 = 31;
            v354 = 0x1E00000001;
            v352 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 90, 259))
            {
              v132 = v352;
              v133 = v353;
              v134 = HIBYTE(v353);
              v136 = v354;
              v135 = BYTE4(v354);
              v137 = v355;
            }
            else
            {
              v211 = v125[50];
              if (v211 + 4 > v125[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v125 + 14), v203, v204, v127, v128, v129, v130, v131);
                v211 = v125[50];
              }
              v137 = 0;
              v132 = 0;
              *(_DWORD *)(*((_QWORD *)v125 + 7) + v211) = -1961032738;
              v125[50] += 4;
              v133 = 7;
              v136 = 1;
              v135 = 31;
              v134 = 2;
            }
          }
          v138 = v330;
          v139 = a1[1];
          if (v133 == 7)
          {
            JSC::MacroAssemblerARM64::store64(v139, v345, (v135 - 1) | (unint64_t)(v132 << 32), v127, v128, v129, v130, v131);
          }
          else
          {
            HIDWORD(v181) = v136;
            LODWORD(v181) = v136 - 2;
            v180 = v181 >> 1;
            if (v180 > 7)
              v182 = 0;
            else
              v182 = qword_1991505B0[v180];
            JSC::MacroAssemblerARM64::store64(v139, v345, v182 | ((v137 << 8) - 256) & 0xFF00 | (v135 - 1), v132 | (v134 << 32), v128, v129, v130, v131);
          }
          goto LABEL_262;
        }
        v163 = *a1;
        v337 = v123;
        if (HIBYTE(dword_1ECF4C7B0))
        {
          if (HIBYTE(word_1ECF4C79E))
          {
            v164 = (_DWORD *)a1[1];
            v165 = *(unsigned int *)(v163 + 184);
            goto LABEL_196;
          }
          v164 = (_DWORD *)a1[1];
          v165 = *(unsigned int *)(v163 + 184);
          if (*(_BYTE *)(*(_QWORD *)(v163 + 8) + 212))
          {
LABEL_196:
            v360 = 0;
            v361 = 0;
            v358 = 519;
            v359 = 0x1E00000001;
            v357 = v124;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)
              || (v357 = v124 + v165,
                  v358 = 519,
                  v359 = 0x2000000001,
                  v360 = 0,
                  v361 = 0,
                  JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)))
            {
              v171 = v357;
              v172 = v358;
              v173 = HIBYTE(v358);
              v175 = v359;
              v174 = BYTE4(v359);
              v176 = v345;
              v177 = v360;
            }
            else
            {
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v164, v124, 30, v166, v167, v168, v169, v170);
              v356 = 0;
              v353 = 523;
              v355 = 31;
              v354 = 0x1E00000001;
              v352 = 0;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 113, 260))
              {
                v171 = v352;
                v172 = v353;
                v173 = HIBYTE(v353);
                v175 = v354;
                v174 = BYTE4(v354);
                v176 = v345;
                v177 = v355;
              }
              else
              {
                v220 = v164[50];
                v176 = v345;
                if (v220 + 4 > v164[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v164 + 14), v215, v216, v166, v167, v168, v169, v170);
                  v220 = v164[50];
                  v176 = v350 & 0x7F;
                }
                v177 = 0;
                v171 = 0;
                *(_DWORD *)(*((_QWORD *)v164 + 7) + v220) = -1961032738;
                v164[50] += 4;
                v172 = 7;
                v175 = 1;
                v174 = 31;
                v173 = 2;
              }
            }
            v138 = v330;
            v123 = v337;
            v178 = a1[1];
            v179 = v176 - 32;
            if (v172 == 7)
            {
              JSC::MacroAssemblerARM64::storeVector(v178, v179, (v174 - 1) | (unint64_t)(v171 << 32), v166, v167, v168, v169, v170);
            }
            else
            {
              HIDWORD(v206) = v175;
              LODWORD(v206) = v175 - 2;
              v205 = v206 >> 1;
              if (v205 > 7)
                v207 = 0;
              else
                v207 = qword_1991505B0[v205];
              JSC::MacroAssemblerARM64::storeVector(v178, v179, v207 | ((v177 << 8) - 256) & 0xFF00 | (v174 - 1), v171 | (v173 << 32), v167, v168, v169, v170);
            }
            goto LABEL_262;
          }
        }
        else
        {
          v164 = (_DWORD *)a1[1];
          v165 = *(unsigned int *)(v163 + 184);
        }
        v360 = 0;
        v361 = 0;
        v358 = 519;
        v359 = 0x1E00000001;
        v357 = v124;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)
          || (v357 = v124 + v165,
              v358 = 519,
              v359 = 0x2000000001,
              v360 = 0,
              v361 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)))
        {
          v227 = v357;
          v228 = v358;
          v229 = HIBYTE(v358);
          v231 = v359;
          v230 = BYTE4(v359);
          v232 = v345;
          v233 = v360;
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v164, v124, 30, v222, v223, v224, v225, v226);
          v356 = 0;
          v353 = 523;
          v355 = 31;
          v354 = 0x1E00000001;
          v352 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 108, 259))
          {
            v227 = v352;
            v228 = v353;
            v229 = HIBYTE(v353);
            v231 = v354;
            v230 = BYTE4(v354);
            v232 = v345;
            v233 = v355;
          }
          else
          {
            v243 = v164[50];
            v232 = v345;
            if (v243 + 4 > v164[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v164 + 14), v239, v240, v222, v223, v224, v225, v226);
              v243 = v164[50];
              v232 = v350 & 0x7F;
            }
            v233 = 0;
            v227 = 0;
            *(_DWORD *)(*((_QWORD *)v164 + 7) + v243) = -1961032738;
            v164[50] += 4;
            v228 = 7;
            v231 = 1;
            v230 = 31;
            v229 = 2;
          }
        }
        v138 = v330;
        v123 = v337;
        v234 = a1[1];
        v235 = (char)(v232 - 32);
        if (v228 == 7)
        {
          JSC::MacroAssemblerARM64::storeDouble(v234, v235, (v230 - 1) | (unint64_t)(v227 << 32), v222, v223, v224, v225, v226);
        }
        else
        {
          HIDWORD(v237) = v231;
          LODWORD(v237) = v231 - 2;
          v236 = v237 >> 1;
          if (v236 > 7)
            v238 = 0;
          else
            v238 = qword_1991505B0[v236];
          JSC::MacroAssemblerARM64::storeDouble(v234, v235, v238 | ((v233 << 8) - 256) & 0xFF00 | (v230 - 1), v227 | (v229 << 32), v223, v224, v225, v226);
        }
LABEL_262:
        *(_DWORD *)(*(_QWORD *)a1[13] + 4 * (v115 & 0x7F)) = 0;
        v7 = v334;
        v6 = v335;
        v116 = v343;
        if ((v115 & 0x40) != 0)
          goto LABEL_358;
        *(uint64_t *)((char *)a1 + ((v119 >> 28) & 8) + 80) |= 1 << v115;
        v241 = v138 | 0x7F;
        v242 = *(uint64_t *)((char *)a1 + v341) + 16 * v123;
        v330 = v241;
LABEL_282:
        *(_BYTE *)(v242 + 8) = v241;
        v117 = v348;
        v162 = v347;
        v161 = v347 & 0x7F;
        v8 = v333;
LABEL_283:
        if ((int)v117 <= 0)
          v263 = -(int)v117;
        else
          v263 = v117;
        if ((int)v117 <= 0)
          v264 = v7;
        else
          v264 = v6;
        *(_BYTE *)(*v264 + 16 * v263 + 8) = v162;
        if (v161 >= 0x40)
          goto LABEL_358;
        *(uint64_t *)((char *)a1 + ((v117 >> 28) & 8) + 80) &= ~(1 << v161);
        *(_DWORD *)(*(_QWORD *)a1[13] + 4 * v161) = v117;
        if (v346 > 0xB || ((1 << v346) & 0xB30) == 0)
        {
          if ((_BYTE)word_1ECF4C286)
          {
            v309 = v116;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [8],JSC::B3::Air::Arg::Role,char [2]>(a1[1], (JSC::B3::Air::Tmp *)&v348, (JSC::Reg *)&v347, &v346);
            v116 = v309;
          }
          v265 = *(_QWORD *)(*(_QWORD *)(*v264 + 16 * v263) + 16);
          if ((v117 & 0x80000000) == 0)
          {
            v266 = (_DWORD *)a1[1];
            v267 = *(unsigned int *)(*a1 + 184);
            v360 = 0;
            v361 = 0;
            v358 = 519;
            v359 = 0x1E00000001;
            v357 = v265;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)
              || (v357 = v265 + v267,
                  v358 = 519,
                  v359 = 0x2000000001,
                  v360 = 0,
                  v361 = 0,
                  JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)))
            {
              v273 = v357;
              v274 = v358;
              v275 = HIBYTE(v358);
              v277 = v359;
              v276 = BYTE4(v359);
              v278 = v360;
            }
            else
            {
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v266, v265, 30, v268, v269, v270, v271, v272);
              v356 = 0;
              v353 = 523;
              v355 = 31;
              v354 = 0x1E00000001;
              v352 = 0;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 90, 259))
              {
                v273 = v352;
                v274 = v353;
                v275 = HIBYTE(v353);
                v277 = v354;
                v276 = BYTE4(v354);
                v278 = v355;
              }
              else
              {
                v304 = v266[50];
                if (v304 + 4 > v266[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v266 + 14), v299, v300, v268, v269, v270, v271, v272);
                  v304 = v266[50];
                }
                v278 = 0;
                v273 = 0;
                *(_DWORD *)(*((_QWORD *)v266 + 7) + v304) = -1961032738;
                v266[50] += 4;
                v274 = 7;
                v277 = 1;
                v276 = 31;
                v275 = 2;
              }
            }
            v279 = a1[1];
            if (v274 == 7)
            {
              JSC::MacroAssemblerARM64::load64(v279, (v276 - 1) | (unint64_t)(v273 << 32), v161, v268, v269, v270, v271, v272);
            }
            else
            {
              HIDWORD(v297) = v277;
              LODWORD(v297) = v277 - 2;
              v296 = v297 >> 1;
              if (v296 > 7)
                v298 = 0;
              else
                v298 = qword_1991505B0[v296];
              JSC::MacroAssemblerARM64::load64(v279, v298 | ((v278 << 8) - 256) & 0xFF00 | (v276 - 1), v273 | (v275 << 32), v161, v269, v270, v271, v272);
            }
            v7 = v334;
            v6 = v335;
            v116 = v343;
            goto LABEL_343;
          }
          v280 = *a1;
          if (HIBYTE(dword_1ECF4C7B0))
          {
            if (HIBYTE(word_1ECF4C79E))
            {
              v281 = v116;
              v282 = (_DWORD *)a1[1];
              v283 = *(unsigned int *)(v280 + 184);
              goto LABEL_303;
            }
            v281 = v116;
            v282 = (_DWORD *)a1[1];
            v283 = *(unsigned int *)(v280 + 184);
            if (*(_BYTE *)(*(_QWORD *)(v280 + 8) + 212))
            {
LABEL_303:
              v360 = 0;
              v361 = 0;
              v358 = 519;
              v359 = 0x1E00000001;
              v357 = v265;
              if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)
                || (v357 = v265 + v283,
                    v358 = 519,
                    v359 = 0x2000000001,
                    v360 = 0,
                    v361 = 0,
                    JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)))
              {
                v289 = v357;
                v290 = v358;
                v291 = HIBYTE(v358);
                v293 = v359;
                v292 = BYTE4(v359);
                v294 = v360;
              }
              else
              {
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v282, v265, 30, v284, v285, v286, v287, v288);
                v356 = 0;
                v353 = 523;
                v355 = 31;
                v354 = 0x1E00000001;
                v352 = 0;
                if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 113, 260))
                {
                  v289 = v352;
                  v290 = v353;
                  v291 = HIBYTE(v353);
                  v293 = v354;
                  v292 = BYTE4(v354);
                  v294 = v355;
                }
                else
                {
                  v307 = v282[50];
                  if (v307 + 4 > v282[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v282 + 14), v305, v306, v284, v285, v286, v287, v288);
                    v307 = v282[50];
                  }
                  v294 = 0;
                  v289 = 0;
                  *(_DWORD *)(*((_QWORD *)v282 + 7) + v307) = -1961032738;
                  v282[50] += 4;
                  v290 = 7;
                  v293 = 1;
                  v292 = 31;
                  v291 = 2;
                }
              }
              v295 = a1[1];
              if (v290 == 7)
              {
                JSC::MacroAssemblerARM64::loadVector(v295, (v292 - 1) | (unint64_t)(v289 << 32), (char)((v347 & 0x7F) - 32), v284, v285, v286, v287, v288);
              }
              else
              {
                HIDWORD(v302) = v293;
                LODWORD(v302) = v293 - 2;
                v301 = v302 >> 1;
                if (v301 > 7)
                  v303 = 0;
                else
                  v303 = qword_1991505B0[v301];
                JSC::MacroAssemblerARM64::loadVector(v295, v303 | ((v294 << 8) - 256) & 0xFF00 | (v292 - 1), v289 | (v291 << 32), (char)((v347 & 0x7F) - 32), v285, v286, v287, v288);
              }
LABEL_342:
              v7 = v334;
              v6 = v335;
              v116 = v281;
              goto LABEL_343;
            }
          }
          else
          {
            v281 = v116;
            v282 = (_DWORD *)a1[1];
            v283 = *(unsigned int *)(v280 + 184);
          }
          v360 = 0;
          v361 = 0;
          v358 = 519;
          v359 = 0x1E00000001;
          v357 = v265;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)
            || (v357 = v265 + v283,
                v358 = 519,
                v359 = 0x2000000001,
                v360 = 0,
                v361 = 0,
                JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)))
          {
            v315 = v357;
            v316 = v358;
            v317 = HIBYTE(v358);
            v319 = v359;
            v318 = BYTE4(v359);
            v320 = v360;
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v282, v265, 30, v310, v311, v312, v313, v314);
            v356 = 0;
            v353 = 523;
            v355 = 31;
            v354 = 0x1E00000001;
            v352 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 108, 259))
            {
              v315 = v352;
              v316 = v353;
              v317 = HIBYTE(v353);
              v319 = v354;
              v318 = BYTE4(v354);
              v320 = v355;
            }
            else
            {
              v328 = v282[50];
              if (v328 + 4 > v282[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v282 + 14), v325, v326, v310, v311, v312, v313, v314);
                v328 = v282[50];
              }
              v320 = 0;
              v315 = 0;
              *(_DWORD *)(*((_QWORD *)v282 + 7) + v328) = -1961032738;
              v282[50] += 4;
              v316 = 7;
              v319 = 1;
              v318 = 31;
              v317 = 2;
            }
          }
          v321 = a1[1];
          if (v316 == 7)
          {
            JSC::MacroAssemblerARM64::loadDouble(v321, (v318 - 1) | (unint64_t)(v315 << 32), (char)((v347 & 0x7F) - 32), v310, v311, v312, v313, v314);
          }
          else
          {
            HIDWORD(v323) = v319;
            LODWORD(v323) = v319 - 2;
            v322 = v323 >> 1;
            if (v322 > 7)
              v324 = 0;
            else
              v324 = qword_1991505B0[v322];
            JSC::MacroAssemblerARM64::loadDouble(v321, v324 | ((v320 << 8) - 256) & 0xFF00 | (v318 - 1), v315 | (v317 << 32), (char)((v347 & 0x7F) - 32), v311, v312, v313, v314);
          }
          goto LABEL_342;
        }
LABEL_343:
        if (v345 == 127)
        {
          v327 = 0;
          v5 = v331;
        }
        else
        {
          v5 = v331;
          if ((v115 & 0x60) != 0)
            v327 = (char)(31 - v345);
          else
            v327 = v345 + 1;
        }
        *v116 = v327;
LABEL_347:
        v114 = 1;
        goto LABEL_348;
      }
LABEL_192:
      v161 = v118;
      v162 = v115;
      goto LABEL_283;
    }
LABEL_151:
    v114 = 0;
LABEL_348:
    v8 &= v114;
    v3 += 2;
    if (v3 == v5)
      return;
  }
  if (!(_DWORD)v98)
    goto LABEL_151;
  v99 = v18 - 4;
  v100 = v98;
  v101 = v97;
  if (v344)
  {
    v102 = v98;
    v103 = v97;
    while (1)
    {
      v104 = *v103;
      if (v18 <= 0xB && ((1 << v18) & 0xB30) != 0)
        goto LABEL_103;
      if ((v104 & 0x7Fu) > 0x3FuLL)
        goto LABEL_358;
      if ((((a1[23] | (unint64_t)a1[24]) >> (v104 & 0x7F)) & 1) == 0)
      {
LABEL_103:
        if (v99 > 6)
          goto LABEL_104;
        if ((v104 & 0x7Fu) > 0x3FuLL)
          goto LABEL_358;
        if ((((a1[25] | (unint64_t)a1[26]) >> (v104 & 0x7F)) & 1) == 0)
        {
LABEL_104:
          if (v18 - 2 < 4)
            goto LABEL_108;
          if ((v104 & 0x7Fu) > 0x3FuLL)
            goto LABEL_358;
          if ((((a1[23] | (unint64_t)a1[24]) >> (v104 & 0x7F)) & 1) == 0)
          {
LABEL_108:
            if (v18 <= 0xB && ((1 << v18) & 0xB03) != 0)
              goto LABEL_109;
            if ((v104 & 0x7Fu) > 0x3FuLL)
              goto LABEL_358;
            if ((((a1[25] | (unint64_t)a1[26]) >> (v104 & 0x7F)) & 1) == 0)
            {
LABEL_109:
              if ((v104 & 0x7Fu) > 0x3FuLL)
                goto LABEL_358;
              v105 = a1[19];
              v106 = 1 << (v104 & 0x7F);
              if ((v105 & v106) == 0 && (v106 & v92) != 0 && (a1[21] & v106) == 0)
                break;
            }
          }
        }
      }
      ++v103;
      if (!--v102)
        goto LABEL_125;
    }
LABEL_172:
    v115 = v104;
    v116 = v343;
    if (v99 <= 6)
      *(int8x16_t *)(a1 + 27) = vandq_s8(*(int8x16_t *)(a1 + 27), (int8x16_t)vdupq_n_s64(~v106));
    if ((v104 & 0x40) != 0)
      goto LABEL_358;
    a1[19] = (1 << v104) | v105;
    if ((v104 & 0x60) == 0x20)
      a1[20] |= 1 << v104;
    v117 = *v343;
    v348 = *v343;
    v347 = v104;
    v346 = v18;
    v118 = v104 & 0x7F;
    v140 = *(unsigned int *)(*(_QWORD *)a1[13] + 4 * v118);
    v345 = v104 & 0x7F;
    if (!(_DWORD)v140)
      goto LABEL_192;
    v333 = v8;
    v351 = *(_DWORD *)(*(_QWORD *)a1[13] + 4 * (v104 & 0x7F));
    v350 = v104;
    v141 = -(int)v140;
    if ((int)v140 <= 0)
    {
      v142 = 32;
    }
    else
    {
      v141 = v140;
      v142 = 16;
    }
    v342 = v142;
    if ((int)v140 <= 0)
      v143 = v7;
    else
      v143 = v6;
    v144 = v141;
    v145 = *(_QWORD *)(*(_QWORD *)(*v143 + 16 * v141) + 16);
    v349 = v145;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(a1[1], (JSC::B3::Air::Tmp *)&v351, (JSC::Reg *)&v350, &v349);
    if ((int)v140 >= 1)
    {
      v146 = (_DWORD *)a1[1];
      v147 = *(unsigned int *)(*a1 + 184);
      v360 = 0;
      v361 = 0;
      v358 = 519;
      v359 = 0x1E00000001;
      v357 = v145;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)
        || (v357 = v145 + v147,
            v358 = 519,
            v359 = 0x2000000001,
            v360 = 0,
            v361 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 90, 259)))
      {
        v153 = v357;
        v154 = v358;
        v155 = HIBYTE(v358);
        v157 = v359;
        v156 = BYTE4(v359);
        v158 = v360;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v146, v145, 30, v148, v149, v150, v151, v152);
        v356 = 0;
        v353 = 523;
        v355 = 31;
        v354 = 0x1E00000001;
        v352 = 0;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 90, 259))
        {
          v153 = v352;
          v154 = v353;
          v155 = HIBYTE(v353);
          v157 = v354;
          v156 = BYTE4(v354);
          v158 = v355;
        }
        else
        {
          v217 = v146[50];
          if (v217 + 4 > v146[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v146 + 14), v208, v209, v148, v149, v150, v151, v152);
            v217 = v146[50];
          }
          v158 = 0;
          v153 = 0;
          *(_DWORD *)(*((_QWORD *)v146 + 7) + v217) = -1961032738;
          v146[50] += 4;
          v154 = 7;
          v157 = 1;
          v156 = 31;
          v155 = 2;
        }
      }
      v159 = v329;
      v160 = a1[1];
      if (v154 == 7)
      {
        JSC::MacroAssemblerARM64::store64(v160, v345, (v156 - 1) | (unint64_t)(v153 << 32), v148, v149, v150, v151, v152);
      }
      else
      {
        HIDWORD(v201) = v157;
        LODWORD(v201) = v157 - 2;
        v200 = v201 >> 1;
        if (v200 > 7)
          v202 = 0;
        else
          v202 = qword_1991505B0[v200];
        JSC::MacroAssemblerARM64::store64(v160, v345, v202 | ((v158 << 8) - 256) & 0xFF00 | (v156 - 1), v153 | (v155 << 32), v149, v150, v151, v152);
      }
LABEL_280:
      *(_DWORD *)(*(_QWORD *)a1[13] + 4 * (v115 & 0x7F)) = 0;
      v7 = v334;
      v6 = v335;
      v116 = v343;
      if ((v115 & 0x40) != 0)
        goto LABEL_358;
      *(uint64_t *)((char *)a1 + ((v140 >> 28) & 8) + 80) |= 1 << v115;
      v241 = v159 | 0x7F;
      v242 = *(uint64_t *)((char *)a1 + v342) + 16 * v144;
      v329 = v241;
      goto LABEL_282;
    }
    v183 = *a1;
    v338 = v144;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (HIBYTE(word_1ECF4C79E))
      {
        v184 = (_DWORD *)a1[1];
        v185 = *(unsigned int *)(v183 + 184);
LABEL_206:
        v360 = 0;
        v361 = 0;
        v358 = 519;
        v359 = 0x1E00000001;
        v357 = v145;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)
          || (v357 = v145 + v185,
              v358 = 519,
              v359 = 0x2000000001,
              v360 = 0,
              v361 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 113, 260)))
        {
          v191 = v357;
          v192 = v358;
          v193 = HIBYTE(v358);
          v195 = v359;
          v194 = BYTE4(v359);
          v196 = v345;
          v197 = v360;
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v184, v145, 30, v186, v187, v188, v189, v190);
          v356 = 0;
          v353 = 523;
          v355 = 31;
          v354 = 0x1E00000001;
          v352 = 0;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 113, 260))
          {
            v191 = v352;
            v192 = v353;
            v193 = HIBYTE(v353);
            v195 = v354;
            v194 = BYTE4(v354);
            v196 = v345;
            v197 = v355;
          }
          else
          {
            v221 = v184[50];
            v196 = v345;
            if (v221 + 4 > v184[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v184 + 14), v218, v219, v186, v187, v188, v189, v190);
              v221 = v184[50];
              v196 = v350 & 0x7F;
            }
            v197 = 0;
            v191 = 0;
            *(_DWORD *)(*((_QWORD *)v184 + 7) + v221) = -1961032738;
            v184[50] += 4;
            v192 = 7;
            v195 = 1;
            v194 = 31;
            v193 = 2;
          }
        }
        v159 = v329;
        v144 = v338;
        v198 = a1[1];
        v199 = v196 - 32;
        if (v192 == 7)
        {
          JSC::MacroAssemblerARM64::storeVector(v198, v199, (v194 - 1) | (unint64_t)(v191 << 32), v186, v187, v188, v189, v190);
        }
        else
        {
          HIDWORD(v213) = v195;
          LODWORD(v213) = v195 - 2;
          v212 = v213 >> 1;
          if (v212 > 7)
            v214 = 0;
          else
            v214 = qword_1991505B0[v212];
          JSC::MacroAssemblerARM64::storeVector(v198, v199, v214 | ((v197 << 8) - 256) & 0xFF00 | (v194 - 1), v191 | (v193 << 32), v187, v188, v189, v190);
        }
        goto LABEL_280;
      }
      v184 = (_DWORD *)a1[1];
      v185 = *(unsigned int *)(v183 + 184);
      if (*(_BYTE *)(*(_QWORD *)(v183 + 8) + 212))
        goto LABEL_206;
    }
    else
    {
      v184 = (_DWORD *)a1[1];
      v185 = *(unsigned int *)(v183 + 184);
    }
    v360 = 0;
    v361 = 0;
    v358 = 519;
    v359 = 0x1E00000001;
    v357 = v145;
    if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)
      || (v357 = v145 + v185,
          v358 = 519,
          v359 = 0x2000000001,
          v360 = 0,
          v361 = 0,
          JSC::B3::Air::Arg::isValidForm((unsigned int *)&v357, 108, 259)))
    {
      v249 = v357;
      v250 = v358;
      v251 = HIBYTE(v358);
      v253 = v359;
      v252 = BYTE4(v359);
      v254 = v345;
      v255 = v360;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v184, v145, 30, v244, v245, v246, v247, v248);
      v356 = 0;
      v353 = 523;
      v355 = 31;
      v354 = 0x1E00000001;
      v352 = 0;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v352, 108, 259))
      {
        v249 = v352;
        v250 = v353;
        v251 = HIBYTE(v353);
        v253 = v354;
        v252 = BYTE4(v354);
        v254 = v345;
        v255 = v355;
      }
      else
      {
        v308 = v184[50];
        v254 = v345;
        if (v308 + 4 > v184[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v184 + 14), v261, v262, v244, v245, v246, v247, v248);
          v308 = v184[50];
          v254 = v350 & 0x7F;
        }
        v255 = 0;
        v249 = 0;
        *(_DWORD *)(*((_QWORD *)v184 + 7) + v308) = -1961032738;
        v184[50] += 4;
        v250 = 7;
        v253 = 1;
        v252 = 31;
        v251 = 2;
      }
    }
    v159 = v329;
    v144 = v338;
    v256 = a1[1];
    v257 = v254 - 32;
    if (v250 == 7)
    {
      JSC::MacroAssemblerARM64::storeDouble(v256, v257, (v252 - 1) | (unint64_t)(v249 << 32), v244, v245, v246, v247, v248);
    }
    else
    {
      HIDWORD(v259) = v253;
      LODWORD(v259) = v253 - 2;
      v258 = v259 >> 1;
      if (v258 > 7)
        v260 = 0;
      else
        v260 = qword_1991505B0[v258];
      JSC::MacroAssemblerARM64::storeDouble(v256, v257, v260 | ((v255 << 8) - 256) & 0xFF00 | (v252 - 1), v249 | (v251 << 32), v245, v246, v247, v248);
    }
    goto LABEL_280;
  }
  while (1)
  {
    v104 = *v101;
    v107 = *v101 & 0x7F;
    if (v107 >= 0x40uLL)
      break;
    v105 = a1[19];
    v106 = 1 << v107;
    if ((v105 & (1 << v107)) == 0 && (v106 & v92) != 0 && (a1[21] & v106) == 0)
      goto LABEL_172;
    ++v101;
    if (!--v100)
      goto LABEL_125;
  }
LABEL_358:
  __break(1u);
}

char *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(**(char ***)(a1 + 16), a2, a3);
}

char *JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_2::operator() const(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(char *result, uint64_t a2, unsigned int a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;

  v4 = result;
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      if (*(_DWORD *)(a2 + 16) <= 0xFFFFFFDF && (*(_DWORD *)(a2 + 16) - 1) >= 0x20)
      {
        v9 = *(_QWORD *)result;
        if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
        {
          *(_QWORD *)&v20 = a2 + 16;
          BYTE8(v20) = a3;
          goto LABEL_26;
        }
        if (a3 - 4 <= 6)
        {
          v5 = *((_QWORD *)result + 1);
          *(_QWORD *)&v20 = a2 + 16;
          BYTE8(v20) = a3;
          goto LABEL_8;
        }
      }
      break;
    case 6:
    case 7:
    case 8:
      if (*(_DWORD *)(a2 + 16) <= 0xFFFFFFDF && (*(_DWORD *)(a2 + 16) - 1) >= 0x20)
      {
        v5 = *(_QWORD *)result;
        *(_QWORD *)&v20 = a2 + 16;
        BYTE8(v20) = 0;
        goto LABEL_8;
      }
      break;
    case 0xB:
      v10 = *(_DWORD *)(a2 + 16);
      v9 = *(_QWORD *)result;
      if (v10 <= 0xFFFFFFDF && v10 - 1 >= 0x20)
      {
        *(_QWORD *)&v20 = a2 + 16;
        BYTE8(v20) = 0;
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
        {
          result = WTF::Vector<std::pair<JSC::B3::Air::Tmp *,JSC::B3::Air::Arg::Role>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9, v11 + 1, (unint64_t)&v20);
          v11 = *(unsigned int *)(v9 + 12);
          v12 = *(char **)v9;
          v13 = *(_OWORD *)result;
        }
        else
        {
          v12 = *(char **)v9;
          v13 = v20;
        }
        *(_OWORD *)&v12[16 * v11] = v13;
        ++*(_DWORD *)(v9 + 12);
        v9 = *(_QWORD *)v4;
      }
      v16 = *(_DWORD *)(a2 + 20);
      v15 = a2 + 20;
      v14 = v16;
      if (v16 <= 0xFFFFFFDF && v14 - 1 >= 0x20)
      {
        *(_QWORD *)&v20 = v15;
        BYTE8(v20) = 0;
LABEL_26:
        v17 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v17 == *(_DWORD *)(v9 + 8))
        {
          result = WTF::Vector<std::pair<JSC::B3::Air::Tmp *,JSC::B3::Air::Arg::Role>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9, v17 + 1, (unint64_t)&v20);
          v17 = *(unsigned int *)(v9 + 12);
          v18 = *(char **)v9;
          v19 = *(_OWORD *)result;
        }
        else
        {
          v18 = *(char **)v9;
          v19 = v20;
        }
        *(_OWORD *)&v18[16 * v17] = v19;
        ++*(_DWORD *)(v9 + 12);
      }
      break;
    case 0xC:
    case 0xD:
      if (*(_DWORD *)(a2 + 16) <= 0xFFFFFFDF && (*(_DWORD *)(a2 + 16) - 1) >= 0x20)
      {
        v5 = *(_QWORD *)result;
        *(_QWORD *)&v20 = a2 + 16;
        BYTE8(v20) = 6;
LABEL_8:
        v6 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
        {
          result = WTF::Vector<std::pair<JSC::B3::Air::Tmp *,JSC::B3::Air::Arg::Role>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v6 + 1, (unint64_t)&v20);
          v6 = *(unsigned int *)(v5 + 12);
          v7 = *(char **)v5;
          v8 = *(_OWORD *)result;
        }
        else
        {
          v7 = *(char **)v5;
          v8 = v20;
        }
        *(_OWORD *)&v7[16 * v6] = v8;
        ++*(_DWORD *)(v5 + 12);
      }
      break;
    default:
      return result;
  }
  return result;
}

char *WTF::Vector<std::pair<JSC::B3::Air::Tmp *,JSC::B3::Air::Arg::Role>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[16 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (v10 < 9)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 8;
        goto LABEL_31;
      }
      if (!(v10 >> 28))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(16 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 16 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19803D68CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 9)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 8;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(16 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 16 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(uint64_t a1, JSC::B3::Air::Tmp *a2, JSC::Reg *a3, _QWORD *a4)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v44 = off_1E3572250;
    v45 = (WTF *)v47;
    v46 = xmmword_199122F80;
    v47[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "Flush(");
    JSC::B3::Air::Tmp::dump(a2, (WTF::PrintStream *)&v44);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ", ");
    JSC::Reg::dump(a3, (WTF::PrintStream *)&v44);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ", offset=");
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%ld", *a4);
    WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", ")");
    v44[5]((WTF::StringPrintStream *)&v44);
    if (v45)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v41);
      v15 = v41;
    }
    else
    {
      v15 = 0;
    }
    v16 = *(_DWORD *)(a1 + 200);
    v42 = v16;
    v41 = 0;
    v43 = v15;
    v17 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 224))
    {
      v18 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v17 + 1, (unint64_t)&v42);
      v19 = *(unsigned int *)(a1 + 228);
      v20 = *(_QWORD *)(a1 + 216) + 16 * v19;
      *(_DWORD *)v20 = *(_DWORD *)v18;
      v21 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v20 + 8) = v21;
      v22 = v43;
      *(_DWORD *)(a1 + 228) = v19 + 1;
      v43 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v15;
      *(_DWORD *)(a1 + 228) = v17 + 1;
    }
    v24 = v41;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (v45 != (WTF *)v47)
      WTF::fastFree((unint64_t)v45, v8, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::MacroAssemblerARM64::storeVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0xFFF0 || (a3 & 0xF00000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v12 = v9 | (32 * v8);
      v13 = 1018259456;
    }
    else
    {
      v12 = a2 | (32 * (char)a3) | (HIDWORD(a3) << 6) & 0x3FFC00;
      v13 = 1031798784;
    }
    v11 = v12 | v13;
  }
  else
  {
    v11 = a2 | (32 * (char)a3) | ((WORD2(a3) & 0x1FF) << 12) | 0x3C800000;
  }
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v11;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::storeVector(uint64_t a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = a3;
  v12 = HIDWORD(a3);
  if (HIDWORD(a3) == 3 || HIDWORD(a3) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v26 = a2 | (32 * (char)v16) | 0x3CA00800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_1991505A0 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x19803DBD0);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x19803DC00);
  }
  v17 = *(_DWORD *)((char *)&unk_1991505A0 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = a2 | (32 * (char)v9) | 0x3CB16800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void JSC::B3::Air::`anonymous namespace'::LinearScan::emitSpillCode(JSC::B3::Air::_anonymous_namespace_::LinearScan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::B3::Air::Kind *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42[5];
  int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t **v46;
  _QWORD v47[3];
  _QWORD v48[2];
  _QWORD v49[3];

  v8 = *(_QWORD *)this;
  v39 = *(unsigned int *)(*(_QWORD *)this + 108);
  if ((_DWORD)v39)
  {
    v10 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v10))
    {
      if (v39 == ++v10)
        return;
    }
    if ((_DWORD)v39 != (_DWORD)v10)
    {
      v11 = *(_DWORD *)(*(_QWORD *)this + 108);
      LODWORD(v12) = v10;
      v38 = *(_QWORD *)this;
      do
      {
        v45 = 0;
        if (v11 <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19803E0DCLL);
        }
        v13 = *(unsigned int **)(*(_QWORD *)(v8 + 96) + 8 * v12);
        v45 = v13;
        v41 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *v13);
        v44 = 0;
        if (v13[5])
        {
          v40 = v12;
          v14 = 0;
          do
          {
            v15 = (_QWORD **)(*((_QWORD *)v13 + 1) + ((unint64_t)v14 << 7));
            v43 = v41 + 2 * v14;
            if (*((_DWORD *)v15 + 3))
            {
              v16 = 0;
              v17 = 0;
              do
              {
                v18 = (uint64_t)*v15;
                v19 = &(*v15)[v16];
                if (*((_BYTE *)v19 + 8) == 1)
                {
                  v20 = *((_DWORD *)v19 + 4);
                  if (v20 <= 0xFFFFFFDF && (v20 - 1) >= 0x20)
                  {
                    if (v20 > 0)
                    {
                      v21 = 80;
                    }
                    else
                    {
                      v20 = -v20;
                      v21 = 96;
                    }
                    v22 = *(_QWORD *)(*(_QWORD *)((char *)this + v21) + 40 * v20 + 16);
                    if (v22)
                    {
                      if (JSC::B3::Air::Inst::admitsStack((JSC::B3::Air::Inst *)v15, v17))
                      {
                        v23 = v18 + v16 * 8;
                        *(_QWORD *)v23 = v22;
                        *(_WORD *)(v23 + 8) = 521;
                        *(_QWORD *)(v23 + 12) = 0;
                        *(_QWORD *)(v23 + 17) = 0;
                      }
                    }
                  }
                }
                ++v17;
                v24 = *((unsigned int *)v15 + 3);
                v16 += 4;
              }
              while (v17 < v24);
            }
            else
            {
              v24 = 0;
            }
            v42[0] = (uint64_t *)this;
            v42[1] = (uint64_t *)&v43;
            v42[2] = (uint64_t *)&v45;
            v42[3] = (uint64_t *)&v44;
            v42[4] = (uint64_t *)v15;
            v46 = v42;
            v25 = (JSC::B3::Air::Kind *)(v15 + 15);
            if ((*((__int16 *)v15 + 60) - 446) > 5)
            {
              if (v24)
              {
                v29 = 0;
                v30 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v15 + 60) + (((v24 - 1) * v24) >> 1);
                v31 = 16;
                do
                {
                  if (v29 >= *((unsigned int *)v15 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19803E0C4);
                  }
                  v32 = v30[v29];
                  if ((v32 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19803E088);
                  }
                  v33 = (uint64_t)*v15;
                  switch(LOBYTE((*v15)[(unint64_t)v31 / 8 - 1]))
                  {
                    case 1:
                      v35 = v32 & 0xF;
                      v36 = (v32 >> 4) & 1;
                      v34 = (int *)(v33 + v31);
                      goto LABEL_42;
                    case 6:
                    case 7:
                    case 8:
                      v34 = (int *)(v33 + v31);
                      goto LABEL_40;
                    case 0xB:
                      v37 = v33 + v31;
                      v34 = (int *)(v37 + 4);
LABEL_40:
                      v35 = 0;
                      goto LABEL_41;
                    case 0xC:
                    case 0xD:
                      v34 = (int *)(v33 + v31);
                      v35 = 6;
LABEL_41:
                      v36 = 0;
LABEL_42:
                      break;
                    default:
                      break;
                  }
                  ++v29;
                  v31 += 32;
                }
                while (v24 != v29);
              }
            }
            else
            {
              v47[1] = v47;
              v47[2] = &v46;
              v48[1] = v47;
              if (*(_WORD *)v25 == 448)
              {
                v49[1] = v47;
                if (!*((_DWORD *)v15 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19803E0CCLL);
                }
                v26 = (uint64_t)*v15;
                switch(*((_BYTE *)*v15 + 8))
                {
                  case 1:
                  case 6:
                  case 7:
                  case 8:
                    v27 = (int *)(v26 + 16);
                    goto LABEL_30;
                  case 0xB:
                    v27 = (int *)(v26 + 20);
LABEL_30:
                    v28 = 0;
                    goto LABEL_46;
                  case 0xC:
                  case 0xD:
                    v27 = (int *)(v26 + 16);
                    v28 = 6;
LABEL_46:
                    break;
                  default:
                    break;
                }
                if (!*((_DWORD *)v15 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19803E0D4);
                }
                (*(void (**)(_QWORD, _QWORD **, _QWORD *))(*(_QWORD *)**v15 + 16))(**v15, v15, v49);
              }
              else
              {
                switch(*(_WORD *)v25)
                {
                  case 0x1BE:
                    break;
                  case 0x1BF:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v15, (uint64_t)v48);
                    break;
                  case 0x1C1:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v15, (uint64_t)v48);
                    break;
                  case 0x1C2:
                    v49[0] = v48;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v15, (uint64_t)v49);
                    break;
                  case 0x1C3:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v15, (uint64_t)v48);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v25, "\n");
                    __break(0xC471u);
                    JUMPOUT(0x19803E0BCLL);
                }
              }
            }
            v14 = v44 + 1;
            v44 = v14;
            v13 = v45;
          }
          while (v14 < v45[5]);
          v8 = v38;
          v11 = *(_DWORD *)(v38 + 108);
          LODWORD(v12) = v40;
        }
        v12 = (v12 + 1);
        if (v11 > v12)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v12))
          {
            if (v11 == ++v12)
            {
              LODWORD(v12) = v11;
              break;
            }
          }
        }
      }
      while ((_DWORD)v39 != (_DWORD)v12);
    }
  }
}

const void **WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  unint64_t v34;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v34 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v13 = *((_DWORD *)a2 + 3);
        if (v12 < v13)
        {
          v14 = (unint64_t)*a1;
          v15 = *((unsigned int *)a1 + 3);
          v16 = (_BYTE *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
          *((_DWORD *)a1 + 2) = v13;
          *a1 = v16;
          if ((_DWORD)v15)
          {
            v24 = (char *)v14;
            do
            {
              v25 = *v24++;
              *v16++ = v25;
              --v15;
            }
            while (v15);
          }
          if (v14)
          {
            if (*a1 == (const void *)v14)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree(v14, v17, v18, v19, v20, v21, v22, v23);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v26 = (char *)*a1;
    if (v11)
    {
      memmove(v26, *a2, v11);
      v27 = *((_DWORD *)a1 + 3);
      v26 = (char *)*a1;
    }
    else
    {
      v27 = 0;
    }
    v28 = *((unsigned int *)a2 + 3);
    if (v27 != (_DWORD)v28)
    {
      v29 = &v26[v27];
      v30 = (char *)*a2 + v27;
      v31 = v28 - v27;
      do
      {
        v32 = *v30++;
        *v29++ = v32;
        --v31;
      }
      while (v31);
      v27 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)a1 + 3) = v27;
  }
  return a1;
}

uint64_t WTF::dataLog<char [10],WTF::PointerDump<JSC::B3::Air::BasicBlock>,char [2]>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "At block ");
  v5 = *a1;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  v7 = v6;
  if (v5)
  {
    WTF::PrintStream::printf(v6, "%s", "#");
    WTF::PrintStream::printf(v7, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v6, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [17],unsigned long,char [2]>(const char *a1, _QWORD *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%lu", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator()(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 ***v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 ***v39;
  __int128 *v40;
  __int128 v41;
  __int128 **v42;
  __int128 v43;
  __int128 ***v44;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = **(_QWORD **)(result + 8);
  v7 = a2 - 1;
  v8 = *(_DWORD *)(v6 + 20);
  if (v8 > v7)
  {
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v10 = (_QWORD **)(v9 + (v7 << 7));
      v41 = *(_OWORD *)(v5 + 8);
      v40 = &v41;
      v42 = &v40;
      if ((*((__int16 *)v10 + 60) - 446) > 5)
      {
        v11 = *((unsigned int *)v10 + 3);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = 0;
          v14 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *((__int16 *)v10 + 60)
              + ((unint64_t)((v11 - 1) * v11) >> 1);
          v15 = 32 * v11;
          do
          {
            if (v13 >= *((unsigned int *)v10 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x19803E908);
            }
            if ((*v14 >> 5) - 1 >= 5u)
              goto LABEL_48;
            ++v13;
            ++v14;
            v12 += 32;
          }
          while (v15 != v12);
        }
      }
      else
      {
        *((_QWORD *)&v43 + 1) = &v43;
        v44 = &v42;
      }
      if (*((_WORD *)v10 + 60) == 448)
      {
        if (!*((_DWORD *)v10 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19803E918);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v10 + 80))(**v10, v10);
        *(_QWORD *)&v41 = v41 | result;
        *((_QWORD *)&v41 + 1) |= v16;
      }
      v17 = *(_QWORD *)(v4 + 56);
      if (v17)
      {
        v18 = 0;
        do
        {
          v18 |= v17 & -v17;
          v17 &= v17 - 1;
        }
        while (v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = v41 & v18;
      v20 = *((_QWORD *)&v41 + 1) & v18;
      *(_QWORD *)&v41 = v19;
      *((_QWORD *)&v41 + 1) = v20;
      if (v19 | v20)
      {
        result = v4 + 128;
        *(_QWORD *)&v43 = 2 * a2 + **(_QWORD **)(v3 + 24) - 1;
        *((_QWORD *)&v43 + 1) = v20 | v19;
        v44 = (__int128 ***)v20;
        v21 = *(unsigned int *)(v4 + 140);
        if ((_DWORD)v21 == *(_DWORD *)(v4 + 136))
        {
          result = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v21 + 1, (unint64_t)&v43);
          v22 = *(_QWORD *)(v4 + 128) + 24 * *(unsigned int *)(v4 + 140);
          v23 = *(_OWORD *)result;
          v24 = *(__int128 ****)(result + 16);
        }
        else
        {
          v22 = *(_QWORD *)result + 24 * v21;
          v23 = v43;
          v24 = v44;
        }
        *(_QWORD *)(v22 + 16) = v24;
        *(_OWORD *)v22 = v23;
        ++*(_DWORD *)(v4 + 140);
      }
      v6 = **(_QWORD **)(v3 + 8);
      v8 = *(_DWORD *)(v6 + 20);
    }
  }
  if (v8 <= a2)
    return result;
  v25 = *(_QWORD *)(v6 + 8);
  if (!v25)
    return result;
  v26 = (_QWORD **)(v25 + ((unint64_t)a2 << 7));
  v41 = *(_OWORD *)(v5 + 8);
  v40 = &v41;
  v42 = &v40;
  if ((*((__int16 *)v26 + 60) - 446) > 5)
  {
    v27 = *((unsigned int *)v26 + 3);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = 0;
      v30 = (char *)&JSC::B3::Air::g_formTable
          + 21 * *((__int16 *)v26 + 60)
          + ((unint64_t)((v27 - 1) * v27) >> 1);
      v31 = 32 * v27;
      do
      {
        if (v29 >= *((unsigned int *)v26 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19803E910);
        }
        if ((*v30 >> 5) - 1 >= 5u)
        {
          __break(0xC471u);
          JUMPOUT(0x19803E900);
        }
        ++v29;
        ++v30;
        v28 += 32;
      }
      while (v31 != v28);
    }
  }
  else
  {
    *((_QWORD *)&v43 + 1) = &v43;
    v44 = &v42;
  }
  if (*((_WORD *)v26 + 60) == 448)
  {
    if (*((_DWORD *)v26 + 3))
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v26 + 72))(**v26, v26);
      v33 = result | v41 | v32;
      v34 = *((_QWORD *)&v41 + 1) | v32;
      *(_QWORD *)&v41 = v33;
      *((_QWORD *)&v41 + 1) |= v32;
      goto LABEL_37;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x19803E8E0);
  }
  v34 = *((_QWORD *)&v41 + 1);
  v33 = v41;
LABEL_37:
  v35 = v33 | v34;
  if (v35)
  {
    result = v4 + 128;
    *(_QWORD *)&v43 = **(_QWORD **)(v3 + 24) + 2 * a2;
    *((_QWORD *)&v43 + 1) = v35;
    v44 = (__int128 ***)v34;
    v36 = *(unsigned int *)(v4 + 140);
    if ((_DWORD)v36 == *(_DWORD *)(v4 + 136))
    {
      result = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::B3::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v36 + 1, (unint64_t)&v43);
      v37 = *(_QWORD *)(v4 + 128) + 24 * *(unsigned int *)(v4 + 140);
      v38 = *(_OWORD *)result;
      v39 = *(__int128 ****)(result + 16);
    }
    else
    {
      v37 = *(_QWORD *)result + 24 * v36;
      v38 = v43;
      v39 = v44;
    }
    *(_QWORD *)(v37 + 16) = v39;
    *(_OWORD *)v37 = v38;
    ++*(_DWORD *)(v4 + 140);
  }
  return result;
}

uint64_t WTF::dataLog<char [11],WTF::ListDump<WTF::Vector<JSC::B3::Air::`anonymous namespace'::Clobber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  WTF::PrintStream *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  WTF::PrintStream *v20;
  uint64_t v22;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v22 = WTF::s_file;
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  WTF::PrintStream::printf(v3, "%s", "Clobbers: ");
  if (*(_DWORD *)(*(_QWORD *)a1 + 12))
  {
    v4 = **(_QWORD ***)a1;
    do
    {
      v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 32))(v3);
      v6 = *(unsigned __int8 *)(a1 + 40);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = *(char **)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v25, v13);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v25, &str_25, 0);
          v26 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v25);
        if (v26 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = *(char **)(a1 + 24);
        v16 = *(_QWORD *)(a1 + 32);
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v25, v18);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v25, &str_25, 0);
          v26 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v25);
        if (v26 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        *(_BYTE *)(a1 + 40) = 1;
      }
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      WTF::PrintStream::printf(v20, "%lu", *v4);
      WTF::PrintStream::printf(v20, "%s", ":");
      JSC::RegisterSet::dump((JSC::RegisterSet *)(v4 + 1), v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 40))(v3);
      v4 += 3;
    }
    while (v4 != (_QWORD *)(**(_QWORD **)a1 + 24 * *(unsigned int *)(*(_QWORD *)a1 + 12)));
  }
  WTF::PrintStream::printf(v3, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  switch(*(_BYTE *)(a3 + 8))
  {
    case 1:
      v16 = *(_DWORD *)(a3 + 16);
      if (v16 > 0xFFFFFFDF || (v16 - 1) < 0x20)
        return result;
      v17 = *a2;
      if (a4 > 0xA)
        goto LABEL_71;
      if (((1 << a4) & 0x3C) != 0)
      {
        v18 = v17 + 2;
        ++v17;
      }
      else if (((1 << a4) & 0x4C0) != 0)
      {
        if (v17 + 1 >= v17)
          v28 = *a2;
        else
          v28 = v17 + 1;
        if (v17 + 1 > v17 + 2)
          v18 = v17 + 1;
        else
          v18 = v17 + 2;
        if (v28 == v18)
          v17 = 0;
        else
          v17 = v28;
        if (v28 == v18)
          v18 = 0;
      }
      else
      {
LABEL_71:
        v18 = v17 + 1;
      }
      v29 = v16 <= 0;
      if (v16 <= 0)
        v16 = -v16;
      v30 = 96;
      if (!v29)
        v30 = 80;
      v31 = (unint64_t *)(*(_QWORD *)(result + v30) + 40 * v16);
      v32 = v31[1];
      if (*v31 != v32)
      {
        if (v17 == v18)
        {
          v17 = *v31;
          v18 = v31[1];
        }
        else
        {
          if (v17 >= *v31)
            v17 = *v31;
          if (v32 > v18)
            v18 = v31[1];
          if (v17 == v18)
          {
            v17 = 0;
            v18 = 0;
          }
        }
      }
      *v31 = v17;
      v31[1] = v18;
      break;
    case 6:
    case 7:
    case 8:
      v4 = *(_DWORD *)(a3 + 16);
      goto LABEL_43;
    case 0xB:
      v19 = *(_DWORD *)(a3 + 16);
      if (v19 <= 0xFFFFFFDF && (v19 - 1) >= 0x20)
      {
        v20 = *a2;
        v21 = *a2 + 1;
        v22 = v19 <= 0;
        if (v19 <= 0)
          v19 = -v19;
        v23 = 96;
        if (!v22)
          v23 = 80;
        v24 = (unint64_t *)(*(_QWORD *)(result + v23) + 40 * v19);
        v25 = v24[1];
        if (*v24 != v25)
        {
          if (v20 >= *v24)
            v20 = *v24;
          if (v25 > v21)
            v21 = v24[1];
          if (v20 == v21)
          {
            v20 = 0;
            v21 = 0;
          }
        }
        *v24 = v20;
        v24[1] = v21;
      }
      v4 = *(_DWORD *)(a3 + 20);
LABEL_43:
      if (v4 > 0xFFFFFFDF || (v4 - 1) < 0x20)
        return result;
      v10 = *a2;
      v9 = *a2 + 1;
      v26 = v4 <= 0;
      if (v4 <= 0)
        v4 = -v4;
      v27 = 96;
      if (!v26)
        v27 = 80;
      v13 = (unint64_t *)(*(_QWORD *)(result + v27) + 40 * v4);
      v15 = *v13;
      v14 = v13[1];
      if (*v13 != v14)
        goto LABEL_50;
      goto LABEL_56;
    case 0xC:
    case 0xD:
      v5 = *(_DWORD *)(a3 + 16);
      if (v5 > 0xFFFFFFDF || (v5 - 1) < 0x20)
        return result;
      v6 = *a2;
      v7 = *a2 + 1;
      if (v7 >= *a2)
        v8 = *a2;
      else
        v8 = v6 + 1;
      if (v7 > *a2 + 2)
        v9 = v6 + 1;
      else
        v9 = *a2 + 2;
      if (v8 == v9)
        v10 = 0;
      else
        v10 = v8;
      if (v8 == v9)
        v9 = 0;
      v11 = v5 <= 0;
      if (v5 <= 0)
        v5 = -v5;
      v12 = 96;
      if (!v11)
        v12 = 80;
      v13 = (unint64_t *)(*(_QWORD *)(result + v12) + 40 * v5);
      v15 = *v13;
      v14 = v13[1];
      if (*v13 == v14)
        goto LABEL_56;
      if (v10 == v9)
      {
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
LABEL_50:
        if (v10 >= v15)
          v10 = v15;
        if (v14 > v9)
          v9 = v14;
        if (v10 == v9)
        {
          v10 = 0;
          v9 = 0;
        }
      }
LABEL_56:
      *v13 = v10;
      v13[1] = v9;
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5)
{
}

_QWORD *JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD *result, uint64_t a2, char a3, unsigned int a4)
{
  int v4;
  char v6;
  int v7;
  int v8;
  char v10;
  unsigned int v11;
  int v12;
  char v14;
  unsigned int v15;
  int v16;
  char v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v12 = *(_DWORD *)(a2 + 16);
      if (v12 > 0xFFFFFFDF || (v12 - 1) <= 0x1F)
      {
        v14 = v12 + 127;
        if (v12 <= 0)
          v14 = 31 - v12;
        v15 = v14 & 0x7F;
        if ((a3 & 0xFC) == 4)
        {
          if (v15 >= 0x40)
            goto LABEL_62;
          *result |= 1 << v15;
          if (a4 >= 4 && (v14 & 0x60) == 0x20)
            result[1] |= 1 << v15;
        }
        else if (v15 == 127)
        {
          goto LABEL_63;
        }
        if ((v14 & 0x60) == 0)
        {
          v7 = v15 + 1;
          goto LABEL_61;
        }
        LOBYTE(v7) = 31 - v15;
        goto LABEL_60;
      }
      break;
    case 6:
    case 7:
    case 8:
      v4 = *(_DWORD *)(a2 + 16);
      if (v4 > 0xFFFFFFDF || (v4 - 1) <= 0x1F)
      {
        v6 = v4 + 127;
        if (v4 <= 0)
          v6 = 31 - v4;
        v7 = v6 & 0x7F;
        if (v7 == 127)
          goto LABEL_63;
        if ((v6 & 0x60) != 0)
        {
          LOBYTE(v7) = 31 - v7;
LABEL_60:
          v7 = (char)v7;
        }
        else
        {
          ++v7;
        }
        goto LABEL_61;
      }
      break;
    case 0xB:
      v16 = *(_DWORD *)(a2 + 16);
      if (v16 > 0xFFFFFFDF || (v16 - 1) <= 0x1F)
      {
        if (v16 <= 0)
          v18 = 31 - v16;
        else
          v18 = v16 + 127;
        v19 = v18 & 0x7F;
        if (v19 == 127)
        {
          v20 = 0;
        }
        else if ((v18 & 0x60) != 0)
        {
          v20 = (char)(31 - v19);
        }
        else
        {
          v20 = v19 + 1;
        }
        *(_DWORD *)(a2 + 16) = v20;
      }
      v21 = *(_DWORD *)(a2 + 20);
      if (v21 > 0xFFFFFFDF || (v21 - 1) <= 0x1F)
      {
        v22 = v21 + 127;
        if (v21 <= 0)
          v22 = 31 - v21;
        v23 = v22 & 0x7F;
        if (v23 == 127)
        {
          v24 = 0;
        }
        else if ((v22 & 0x60) != 0)
        {
          v24 = (char)(31 - v23);
        }
        else
        {
          v24 = v23 + 1;
        }
        *(_DWORD *)(a2 + 20) = v24;
      }
      break;
    case 0xC:
    case 0xD:
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 > 0xFFFFFFDF || (v8 - 1) <= 0x1F)
      {
        v10 = v8 + 127;
        if (v8 <= 0)
          v10 = 31 - v8;
        v11 = v10 & 0x7F;
        if (v11 >= 0x40)
        {
LABEL_62:
          __break(1u);
LABEL_63:
          v7 = 0;
        }
        else
        {
          *result |= 1 << v11;
          if (a3 == 11 && a4 >= 4 && (v10 & 0x60) == 0x20)
            result[1] |= 1 << v11;
          v7 = (char)(31 - v11);
          if ((v10 & 0x60) == 0)
            v7 = v11 + 1;
        }
LABEL_61:
        *(_DWORD *)(a2 + 16) = v7;
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
}

_QWORD *JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2} const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD *result, uint64_t a2, int a3, unsigned int a4)
{
  int v4;
  char v6;
  unsigned int v7;
  int v8;
  char v10;
  int v11;
  char v13;
  int v14;
  int v15;
  int v16;
  char v18;
  int v19;
  int v20;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 > 0xFFFFFFDF || (v8 - 1) <= 0x1F)
      {
        v10 = v8 + 127;
        if (v8 <= 0)
          v10 = 31 - v8;
        v7 = v10 & 0x7F;
        if ((a3 - 8) > 2)
        {
          if (v7 == 127)
            goto LABEL_54;
        }
        else
        {
          if (v7 >= 0x40)
          {
            __break(1u);
            goto LABEL_54;
          }
          *result |= 1 << v7;
          if (a4 >= 4 && (v10 & 0x60) == 0x20)
            result[1] |= 1 << v7;
        }
        if ((v10 & 0x60) == 0)
        {
          ++v7;
          goto LABEL_11;
        }
        LOBYTE(v7) = 31 - v7;
        goto LABEL_47;
      }
      break;
    case 6:
    case 7:
    case 8:
    case 0xC:
    case 0xD:
      v4 = *(_DWORD *)(a2 + 16);
      if (v4 > 0xFFFFFFDF || (v4 - 1) <= 0x1F)
      {
        v6 = v4 + 127;
        if (v4 <= 0)
          v6 = 31 - v4;
        v7 = v6 & 0x7F;
        if (v7 == 127)
        {
LABEL_54:
          v7 = 0;
        }
        else if ((v6 & 0x60) != 0)
        {
          LOBYTE(v7) = 31 - v7;
LABEL_47:
          v7 = (char)v7;
        }
        else
        {
          ++v7;
        }
LABEL_11:
        *(_DWORD *)(a2 + 16) = v7;
      }
      break;
    case 0xB:
      v11 = *(_DWORD *)(a2 + 16);
      if (v11 > 0xFFFFFFDF || (v11 - 1) <= 0x1F)
      {
        if (v11 <= 0)
          v13 = 31 - v11;
        else
          v13 = v11 + 127;
        v14 = v13 & 0x7F;
        if (v14 == 127)
        {
          v15 = 0;
        }
        else if ((v13 & 0x60) != 0)
        {
          v15 = (char)(31 - v14);
        }
        else
        {
          v15 = v14 + 1;
        }
        *(_DWORD *)(a2 + 16) = v15;
      }
      v16 = *(_DWORD *)(a2 + 20);
      if (v16 > 0xFFFFFFDF || (v16 - 1) <= 0x1F)
      {
        v18 = v16 + 127;
        if (v16 <= 0)
          v18 = 31 - v16;
        v19 = v18 & 0x7F;
        if (v19 == 127)
        {
          v20 = 0;
        }
        else if ((v18 & 0x60) != 0)
        {
          v20 = (char)(31 - v19);
        }
        else
        {
          v20 = v19 + 1;
        }
        *(_DWORD *)(a2 + 20) = v20;
      }
      break;
    default:
      return result;
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::`anonymous namespace'::Clobber &,JSC::B3::Air::`anonymous namespace'::Clobber &)#1} &,JSC::B3::Air::`anonymous namespace'::Clobber*,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t *v9;
  __n128 *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __n128 *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __int128 v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  __n128 v66;
  __n128 *v67;
  uint64_t v68;
  __n128 *v69;
  unint64_t v70;
  __n128 *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __n128 v75;
  __n128 *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  __n128 *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __n128 v87;
  __n128 *v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  __n128 *v97;
  __n128 *v98;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v107;
  uint64_t v108;
  __n128 *v109;
  __n128 *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  BOOL v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __n128 v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  __int128 v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 *v147;
  unint64_t v148;
  uint64_t v149;
  __n128 *v150;
  __int8 *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __int128 v168;
  __int128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::`anonymous namespace'::Clobber &,JSC::B3::Air::`anonymous namespace'::Clobber &)#1} &,JSC::B3::Air::`anonymous namespace'::Clobber*>(uint64_t a1, _OWORD *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__n128 *)((char *)a2 - 24);
      if (*((_QWORD *)a2 - 3) < *(_QWORD *)a1)
        goto LABEL_6;
      return result;
    case 3uLL:
      v8 = (__n128 *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 24);
      v7 = (__n128 *)((char *)a2 - 24);
      v10 = *((_QWORD *)a2 - 3);
      if (v9 >= *(_QWORD *)a1)
      {
        if (v10 < v9)
        {
          v35 = *(_QWORD *)(a1 + 40);
          v36 = *v8;
          v37 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = v37;
          *v7 = v36;
          *((_QWORD *)a2 - 1) = v35;
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
          {
            v38 = *(_QWORD *)(a1 + 16);
            v39 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v8 = v39;
            *(_QWORD *)(a1 + 40) = v38;
          }
        }
      }
      else if (v10 >= v9)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v8 = v45;
        *(_QWORD *)(a1 + 40) = v44;
        if (v7->n128_u64[0] < *(_QWORD *)(a1 + 24))
        {
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *v8;
          v48 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = v48;
          *v7 = v47;
          *((_QWORD *)a2 - 1) = v46;
        }
      }
      else
      {
LABEL_6:
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(__n128 *)a1;
        v13 = v7[1].n128_i64[0];
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v13;
        *v7 = v12;
        v7[1].n128_u64[0] = v11;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 24);
      v22 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 72);
      v25 = *((_QWORD *)a2 - 3);
      v24 = (__n128 *)((char *)a2 - 24);
      if (v25 < *(_QWORD *)(a1 + 72))
      {
        v26 = *(_QWORD *)(a1 + 88);
        v27 = *v23;
        v28 = v24[1].n128_i64[0];
        *v23 = *v24;
        *(_QWORD *)(a1 + 88) = v28;
        *v24 = v27;
        v24[1].n128_u64[0] = v26;
        if (v23->n128_u64[0] < v22->n128_u64[0])
        {
          v29 = *(_QWORD *)(a1 + 64);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v23 = v30;
          *(_QWORD *)(a1 + 88) = v29;
          if (v22->n128_u64[0] < v21->n128_u64[0])
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v22 = v32;
            *(_QWORD *)(a1 + 64) = v31;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
            {
              v33 = *(_QWORD *)(a1 + 16);
              v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v21 = v34;
              *(_QWORD *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v14 = (__n128 *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = (__n128 *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 24);
      v18 = *(_QWORD *)a1;
      if (v17 >= *(_QWORD *)a1)
      {
        if (v15 < v17)
        {
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *v16;
          *v16 = *v14;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v14 = v41;
          *(_QWORD *)(a1 + 64) = v40;
          if (v16->n128_u64[0] < v18)
          {
            v42 = *(_QWORD *)(a1 + 16);
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v16;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v16 = v43;
            *(_QWORD *)(a1 + 40) = v42;
          }
        }
      }
      else if (v15 >= v17)
      {
        v49 = *(_QWORD *)(a1 + 16);
        v50 = *(__n128 *)a1;
        *(__n128 *)a1 = *v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v16 = v50;
        *(_QWORD *)(a1 + 40) = v49;
        if (v15 < *(_QWORD *)(a1 + 24))
        {
          v51 = *(_QWORD *)(a1 + 40);
          v52 = *v16;
          *v16 = *v14;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v14 = v52;
          *(_QWORD *)(a1 + 64) = v51;
        }
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(__n128 *)a1;
        *(__n128 *)a1 = *v14;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v14 = v20;
        *(_QWORD *)(a1 + 64) = v19;
      }
      v53 = (_OWORD *)(a1 + 72);
      if ((_OWORD *)(a1 + 72) == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = *(_QWORD *)v53;
    if (*(_QWORD *)v53 < v14->n128_u64[0])
    {
      v60 = *(_OWORD *)((char *)v53 + 8);
      v57 = v54;
      while (1)
      {
        v58 = a1 + v57;
        *(_OWORD *)(v58 + 72) = *(_OWORD *)(a1 + v57 + 48);
        *(_QWORD *)(v58 + 88) = *(_QWORD *)(a1 + v57 + 64);
        if (v57 == -48)
          break;
        v57 -= 24;
        if (v56 >= *(_QWORD *)(v58 + 24))
        {
          v59 = a1 + v57 + 72;
          goto LABEL_34;
        }
      }
      v59 = a1;
LABEL_34:
      *(_QWORD *)v59 = v56;
      *(_OWORD *)(v59 + 8) = v60;
      if (++v55 == 8)
        return (_OWORD *)((char *)v53 + 24) == a2;
    }
    v14 = (__n128 *)v53;
    v54 += 24;
    v53 = (_OWORD *)((char *)v53 + 24);
    if (v53 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::LinearScan::buildIntervals(void)::{lambda(JSC::B3::Air::`anonymous namespace'::Clobber &,JSC::B3::Air::`anonymous namespace'::Clobber &)#1} &,JSC::B3::Air::`anonymous namespace'::Clobber*>(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u64[0];
  v6 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_i64[0];
      result = *a2;
      v10 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v10;
      *(__n128 *)a3 = result;
      a3[2] = v9;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (*a3 < a2->n128_u64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    v16 = a3[2];
    result = *(__n128 *)a3;
    v17 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v17;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v16;
    if (*a3 < a2->n128_u64[0])
    {
      v18 = a2[1].n128_i64[0];
      result = *a2;
      v19 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v19;
      *(__n128 *)a3 = result;
      a3[2] = v18;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

uint64_t WTF::dataLog<char [5],JSC::B3::Air::Tmp,char [3],JSC::B3::Air::`anonymous namespace'::TmpData,char [2]>(JSC::B3::Air::Tmp *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    ");
  JSC::B3::Air::Tmp::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", ": ");
  v11 = *(char **)(a2 + 16);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "{interval = ");
  WTF::Range<unsigned long>::dump((_QWORD *)a2, (uint64_t)v7);
  WTF::PrintStream::printImpl<char [13],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [14],JSC::Reg,char [19],BOOL,char [18],JSC::ScalarRegisterSet,char [26],BOOL,char [2]>(v7, (uint64_t *)&v11, (JSC::Reg *)(a2 + 32), (_BYTE *)(a2 + 33), (uint64_t *)(a2 + 24), (_BYTE *)(a2 + 34));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::PrintStream::printImpl<char [13],WTF::PointerDump<JSC::B3::Air::StackSlot>,char [14],JSC::Reg,char [19],BOOL,char [18],JSC::ScalarRegisterSet,char [26],BOOL,char [2]>(WTF::PrintStream *a1, uint64_t *a2, JSC::Reg *a3, _BYTE *a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v12;
  int v13;
  WTF::PrintStream *v14;
  const char *v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  const char *v18;
  WTF::PrintStream *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  WTF::PrintStream *v23;
  _QWORD v25[2];

  WTF::PrintStream::printf(a1, "%s", ", spilled = ");
  v12 = *a2;
  if (v12)
  {
    v13 = *(unsigned __int8 *)(v12 + 4);
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v15 = "stack";
    if (v13 == 1)
      v15 = "spill";
    WTF::PrintStream::printf(v14, "%s", v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v16, "%u");
  }
  else
  {
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v17, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", ", assigned = ");
  JSC::Reg::dump(a3, a1);
  WTF::PrintStream::printf(a1, "%s", ", isUnspillable = ");
  if (*a4)
    v18 = "true";
  else
    v18 = "false";
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v19, "%s", v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", ", possibleRegs = ");
  v20 = *a5;
  if (*a5)
  {
    v21 = 0;
    do
    {
      v21 |= v20 & -v20;
      v20 &= v20 - 1;
    }
    while (v20);
  }
  else
  {
    v21 = 0;
  }
  v25[0] = v21;
  v25[1] = 0;
  JSC::RegisterSet::dump((JSC::RegisterSet *)v25, a1);
  WTF::PrintStream::printf(a1, "%s", ", didBuildPossibleRegs = ");
  if (*a6)
    v22 = "true";
  else
    v22 = "false";
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v23, "%s", v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return WTF::PrintStream::printf(a1, "%s", "}");
}

uint64_t WTF::Range<unsigned long>::dump(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;

  v3 = *a1;
  v4 = a1[1];
  if (*(_OWORD *)a1 == 0 || (!v3 ? (v5 = v4 == -1) : (v5 = 0), v5))
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s");
  }
  else
  {
    v7 = v3 + 1;
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%lu", *a1);
    if (v7 != v4)
    {
      WTF::PrintStream::printf(v8, "%s", "...");
      WTF::PrintStream::printf(v8, "%lu");
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::RegisterSet::dump(JSC::RegisterSet *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  uint64_t result;
  unsigned int v16;
  const char *v17;
  WTF::PrintStream *v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  char v22;
  int v23;
  int v24;
  char v25;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("[", 1uLL, (uint64_t)&v23, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = 0;
  v8 = 0;
  v9 = 0x80;
  v22 = 0x80;
  do
  {
    v10 = 1 << v8;
    if ((v10 & *(_QWORD *)this) != 0 || (*((_QWORD *)this + 1) & v10) != 0)
    {
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      if (v7)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v23, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_106, 0, (uint64_t)&v23, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
        v7 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
      JSC::Reg::dump((JSC::Reg *)&v22, v11);
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v16 = v9 & 0x7F;
      if (v16 >= 0x40)
      {
        __break(1u);
        return result;
      }
      if ((*(_QWORD *)this & (1 << v16)) != 0)
      {
        if ((v9 & 0x60) != 0x20)
          goto LABEL_19;
        v17 = "↓";
        if ((*((_QWORD *)this + 1) & (1 << v16)) != 0)
          goto LABEL_19;
      }
      else
      {
        v17 = "↑";
      }
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v18, "%s", v17);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    else
    {
      v16 = v9 & 0x7F;
    }
LABEL_19:
    if (v16 == 63)
      v9 = -1;
    else
      v9 = (v9 + 1) | 0x80;
    v22 = v9;
    v8 = v9 & 0x7F;
  }
  while ((v9 & 0x7Fu) < 0x40);
  v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  WTF::StringImpl::utf8ForCharacters("]", 1uLL, (uint64_t)&v23, v21);
  WTF::printExpectedCStringHelper(v20, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::`anonymous namespace'::LinearScan::emitSpillCode(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::emitSpillCode(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  int *v10;
  uint64_t **v11;

  v9 = **(uint64_t ****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v10 = (int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      goto LABEL_8;
    case 6:
    case 7:
    case 8:
      v10 = (int *)(a2 + 16);
      goto LABEL_6;
    case 0xB:
      v10 = (int *)(a2 + 20);
LABEL_6:
      v11 = v9;
      a3 = 0;
      goto LABEL_7;
    case 0xC:
    case 0xD:
      v10 = (int *)(a2 + 16);
      v11 = **(uint64_t ****)(a1 + 16);
      a3 = 6;
LABEL_7:
      a4 = 0;
LABEL_8:
      break;
    default:
      return;
  }
}

void JSC::B3::Air::`anonymous namespace'::LinearScan::emitSpillCode(void)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t **a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  WTF *v35;
  unint64_t v36;
  void *v37;
  WTF *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[12];
  WTF *v56[2];
  _BYTE v57[24];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  int v62;

  v9 = *a2;
  if (*a2 <= 0xFFFFFFDF && (v9 - 1) >= 0x20)
  {
    v11 = *a1;
    v12 = v9 <= 0;
    if (v9 <= 0)
      v9 = -v9;
    v13 = 12;
    if (!v12)
      v13 = 10;
    v14 = *(_QWORD *)(v11[v13] + 40 * v9 + 16);
    if (v14)
    {
      v15 = a3;
      if ((_DWORD)a4)
        v17 = 108;
      else
        v17 = 90;
      v18 = (WTF *)*(unsigned int *)a1[1];
      if (a3 <= 0xA)
      {
        if (((1 << a3) & 0x4C0) != 0 || ((1 << a3) & 0xC) != 0)
        {
          v19 = (WTF *)((char *)v18 + 2);
          goto LABEL_17;
        }
        if (((1 << a3) & 0x30) != 0)
        {
          v19 = (WTF *)((char *)v18 + 2);
          v18 = (WTF *)((char *)v18 + 1);
          goto LABEL_17;
        }
      }
      v29 = 1;
      if ((a3 - 4) < 7)
        v29 = 2;
      v19 = (WTF *)((char *)v18 + v29);
LABEL_17:
      *(_OWORD *)v57 = 0uLL;
      v57[16] = -1;
      *(_DWORD *)&v57[20] = 0;
      v56[0] = v18;
      v56[1] = v19;
      *(_WORD *)&v57[17] = 1;
      v20 = *v11;
      if ((_DWORD)a4)
      {
        if ((_DWORD)a4 != 1)
          goto LABEL_29;
        v30 = *(_DWORD *)(v20 + 180);
        *(_DWORD *)(v20 + 180) = v30 + 1;
        v8 = -33 - v30;
      }
      else
      {
        v21 = *(_DWORD *)(v20 + 176);
        *(_DWORD *)(v20 + 176) = v21 + 1;
        v8 = v21 + 33;
      }
      if (v8 >= 1)
      {
        v23 = (_DWORD *)v11 + 23;
        v22 = *((unsigned int *)v11 + 23);
        if ((_DWORD)v22 == v8)
        {
          v24 = v11 + 10;
          if (*((_DWORD *)v11 + 22) == v8)
          {
LABEL_22:
            v26 = *v24 + 40 * *v23;
            v27 = *(_QWORD *)(v25 + 32);
            v28 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v26 = *(_OWORD *)v25;
            *(_OWORD *)(v26 + 16) = v28;
            *(_QWORD *)(v26 + 32) = v27;
            goto LABEL_32;
          }
LABEL_31:
          v31 = *v24 + 40 * v22;
          v32 = *(_OWORD *)v56;
          v33 = *(_OWORD *)v57;
          *(_QWORD *)(v31 + 32) = *(_QWORD *)&v57[16];
          *(_OWORD *)v31 = v32;
          *(_OWORD *)(v31 + 16) = v33;
LABEL_32:
          ++*v23;
          *a2 = v8;
          if (v15 != 10)
          {
            if (v15 > 0xB || ((1 << v15) & 0xB30) == 0)
            {
              v34 = *(_DWORD *)*a1[2];
              v35 = (WTF *)*(unsigned int *)a1[3];
              BYTE8(v52) = 0;
              *(_QWORD *)&v52 = 0;
              *(_QWORD *)&v51 = v14;
              WORD4(v51) = 521;
              HIDWORD(v51) = 0;
              *(_QWORD *)&v53 = 0;
              WORD4(v53) = 513;
              HIDWORD(v53) = 1;
              *(_QWORD *)&v54 = v8;
              BYTE8(v54) = 0;
              *(_OWORD *)&v57[8] = v51;
              v58 = v52;
              v59 = v53;
              v36 = v11[14] + 1168 * v34;
              *(_QWORD *)v55 = a1[4][14];
              *(_DWORD *)&v55[8] = v17;
              v56[0] = v35;
              v56[1] = (WTF *)&v57[8];
              v60 = v54;
              *(_QWORD *)v57 = 0x200000003;
              v61[0] = *(_QWORD *)v55;
              *(_DWORD *)((char *)v61 + 7) = *(_DWORD *)&v55[7];
              v62 = 1;
              JSC::B3::Air::PhaseInsertionSet::appendInsertion<JSC::B3::Air::PhaseInsertion>(v36, (unint64_t)v56, a3, a4, a5, a6, a7, a8);
              v38 = v56[1];
              if (&v57[8] != (_BYTE *)v56[1])
              {
                if (v56[1])
                {
                  v56[1] = 0;
                  *(_DWORD *)v57 = 0;
                  WTF::fastFree((unint64_t)v38, v37, a3, a4, a5, a6, a7, a8);
                }
              }
            }
            if (v15 - 4 <= 6)
            {
              v39 = *(_DWORD *)*a1[2];
              v40 = *(_DWORD *)a1[3];
              BYTE8(v54) = 0;
              *(_QWORD *)&v54 = 0;
              v41 = *a2;
              *(_QWORD *)&v51 = 0;
              WORD4(v51) = 513;
              HIDWORD(v51) = 1;
              *(_QWORD *)&v52 = v41;
              BYTE8(v52) = 0;
              *(_QWORD *)&v53 = v14;
              WORD4(v53) = 521;
              HIDWORD(v53) = 0;
              *(_OWORD *)&v57[8] = v51;
              v58 = v52;
              v59 = v53;
              v42 = v11[14] + 1168 * v39;
              *(_QWORD *)v55 = a1[4][14];
              *(_DWORD *)&v55[8] = v17;
              v56[0] = (WTF *)(v40 + 1);
              v56[1] = (WTF *)&v57[8];
              v60 = v54;
              *(_QWORD *)v57 = 0x200000003;
              v61[0] = *(_QWORD *)v55;
              *(_DWORD *)((char *)v61 + 7) = *(_DWORD *)&v55[7];
              v62 = 0;
              JSC::B3::Air::PhaseInsertionSet::appendInsertion<JSC::B3::Air::PhaseInsertion>(v42, (unint64_t)v56, a3, a4, a5, a6, a7, a8);
              v50 = v56[1];
              if (&v57[8] != (_BYTE *)v56[1])
              {
                if (v56[1])
                {
                  v56[1] = 0;
                  *(_DWORD *)v57 = 0;
                  WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
                }
              }
            }
          }
          return;
        }
        goto LABEL_44;
      }
LABEL_29:
      v23 = (_DWORD *)v11 + 27;
      v22 = *((unsigned int *)v11 + 27);
      if (!((_DWORD)v22 + v8))
      {
        v24 = v11 + 12;
        if (*((_DWORD *)v11 + 26) == -v8)
          goto LABEL_22;
        goto LABEL_31;
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x1980412C4);
    }
  }
}

unint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::TmpData,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 40 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v23 = *(_QWORD *)a1;
        return v23 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (v9 < 0x6666667)
      {
        v10 = 40 * v9;
        v11 = WTF::fastMalloc((WTF *)(40 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = *(_OWORD *)(v5 + v19);
          v22 = *(_OWORD *)(v5 + v19 + 16);
          *(_QWORD *)(v20 + 32) = *(_QWORD *)(v5 + v19 + 32);
          *(_OWORD *)v20 = v21;
          *(_OWORD *)(v20 + 16) = v22;
          v19 += 40;
        }
        while (40 * v6 != v19);
        v23 = *(_QWORD *)a1;
        if (v5)
        {
          if (v23 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v23 = *(_QWORD *)a1;
        }
        return v23 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1980417ACLL);
    }
  }
  v24 = *(unsigned int *)(a1 + 8);
  v25 = v24 + (v24 >> 2);
  if (v25 >= 0x10)
    v26 = v25 + 1;
  else
    v26 = 16;
  if (v26 <= a2)
    v26 = a2;
  if (v26 > v24)
  {
    if (v26 >= 0x6666667)
      goto LABEL_33;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = 40 * v26;
    v29 = WTF::fastMalloc((WTF *)(40 * v26));
    *(_DWORD *)(a1 + 8) = (v28 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v29;
    if ((_DWORD)v27)
    {
      v37 = 40 * v27;
      v38 = v5;
      do
      {
        v39 = *(_OWORD *)v38;
        v40 = *(_OWORD *)(v38 + 16);
        *(_QWORD *)(v29 + 32) = *(_QWORD *)(v38 + 32);
        *(_OWORD *)v29 = v39;
        *(_OWORD *)(v29 + 16) = v40;
        v29 += 40;
        v38 += 40;
        v37 -= 40;
      }
      while (v37);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  return v3;
}

unint64_t JSC::B3::Air::PhaseInsertionSet::appendInsertion<JSC::B3::Air::PhaseInsertion>(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  uint64_t v27;

  v8 = a2;
  v9 = result;
  v10 = *(unsigned int *)(result + 12);
  if ((_DWORD)v10 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v10 + 1, a2, a4, a5, a6, a7, a8);
    v8 = result;
    LODWORD(v10) = *(_DWORD *)(v9 + 12);
    v11 = *(_QWORD *)v9;
    v12 = *(_QWORD *)v9 + 144 * v10;
    v13 = (_OWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 8) = v12 + 24;
    v14 = *(__int128 **)(result + 8);
    *(_QWORD *)v12 = *(_QWORD *)result;
    *(_QWORD *)(v12 + 16) = 3;
    v15 = result + 24;
    if (v14 == (__int128 *)(result + 24))
    {
      v16 = *(unsigned int *)(result + 20);
      if ((_DWORD)v16)
      {
        v17 = 32 * v16;
        do
        {
          v18 = *v14;
          v19 = v14[1];
          v14 += 2;
          *v13 = v18;
          v13[1] = v19;
          v13 += 2;
          v17 -= 32;
        }
        while (v17);
      }
      goto LABEL_13;
    }
LABEL_12:
    *(_QWORD *)(v8 + 8) = v15;
    *(_QWORD *)(v12 + 8) = v14;
    v25 = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 16) = 3;
    *(_DWORD *)(v12 + 16) = v25;
    goto LABEL_13;
  }
  v11 = *(_QWORD *)result;
  v12 = *(_QWORD *)result + 144 * v10;
  v20 = (_OWORD *)(v12 + 24);
  *(_QWORD *)(v12 + 8) = v12 + 24;
  v14 = *(__int128 **)(a2 + 8);
  *(_QWORD *)v12 = *(_QWORD *)a2;
  *(_QWORD *)(v12 + 16) = 3;
  v15 = a2 + 24;
  if (v14 != (__int128 *)(a2 + 24))
    goto LABEL_12;
  v21 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    do
    {
      v23 = *v14;
      v24 = v14[1];
      v14 += 2;
      *v20 = v23;
      v20[1] = v24;
      v20 += 2;
      v22 -= 32;
    }
    while (v22);
  }
LABEL_13:
  v26 = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v8 + 20) = 0;
  *(_DWORD *)(v12 + 20) = v26;
  v27 = *(_QWORD *)(v8 + 120);
  *(_DWORD *)(v12 + 127) = *(_DWORD *)(v8 + 127);
  *(_QWORD *)(v12 + 120) = v27;
  *(_DWORD *)(v11 + 144 * v10 + 136) = *(_DWORD *)(v8 + 136);
  ++*(_DWORD *)(v9 + 12);
  return result;
}

uint64_t JSC::B3::Air::Inst::Inst(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = (_OWORD *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 3;
  v3 = *(__int128 **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      v5 = 32 * v4;
      do
      {
        v6 = *v3;
        v7 = v3[1];
        v3 += 2;
        *v2 = v6;
        v2[1] = v7;
        v2 += 2;
        v5 -= 32;
      }
      while (v5);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)result = v3;
    v10 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 3;
    *(_DWORD *)(result + 8) = v10;
  }
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 12) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(result + 119) = *(_DWORD *)(a2 + 119);
  *(_QWORD *)(result + 112) = v9;
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 144 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v9 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(a1 + 12);
  if (a2 >= 9)
  {
    if (a2 >= 0x1C71C72)
    {
      __break(0xC471u);
      return;
    }
    v11 = 144 * a2;
    v12 = WTF::fastMalloc((WTF *)(144 * a2));
    *(_DWORD *)(a1 + 8) = (v11 & 0xFFFFFFF0) / 0x90;
    *(_QWORD *)a1 = v12;
    if (!v10)
      goto LABEL_18;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 8;
  if (v10)
  {
LABEL_7:
    v13 = v9;
    do
    {
      *(_QWORD *)(v12 + 8) = v12 + 24;
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 16) = 3;
      v15 = v13 + 24;
      if (v14 == v13 + 24)
      {
        v16 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = 32 * v16;
          do
          {
            v19 = v12 + v17;
            v20 = *(_OWORD *)(v14 + v17);
            *(_OWORD *)(v19 + 40) = *(_OWORD *)(v14 + v17 + 16);
            *(_OWORD *)(v19 + 24) = v20;
            v17 += 32;
          }
          while (v18 != v17);
        }
      }
      else
      {
        *(_QWORD *)(v13 + 8) = v15;
        *(_QWORD *)(v12 + 8) = v14;
        v24 = *(_DWORD *)(v13 + 16);
        *(_DWORD *)(v13 + 16) = 3;
        *(_DWORD *)(v12 + 16) = v24;
      }
      v21 = *(_DWORD *)(v13 + 20);
      *(_DWORD *)(v13 + 20) = 0;
      *(_DWORD *)(v12 + 20) = v21;
      v22 = *(_QWORD *)(v13 + 120);
      *(_DWORD *)(v12 + 127) = *(_DWORD *)(v13 + 127);
      *(_QWORD *)(v12 + 120) = v22;
      *(_DWORD *)(v12 + 136) = *(_DWORD *)(v13 + 136);
      v23 = *(_QWORD *)(v13 + 8);
      if (v15 != v23 && v23)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v23, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 144;
      v13 += 144;
    }
    while (v13 != v9 + 144 * v10);
  }
LABEL_18:
  if (a1 + 16 != v9 && v9)
  {
    if (*(_QWORD *)a1 == v9)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::dataLog<char [7],WTF::ListDump<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  WTF::PrintStream *v3;
  JSC::B3::Air::Tmp *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  char v22;
  char **v23;
  char *v24;
  int v25;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v21 = WTF::s_file;
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  WTF::PrintStream::printf(v3, "%s", "Tmps: ");
  if (*(_DWORD *)(*(_QWORD *)a1 + 12))
  {
    v4 = **(JSC::B3::Air::Tmp ***)a1;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 32))(v3);
      v6 = *(unsigned __int8 *)(a1 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v11 = *(char **)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        v12 = (WTF::PrintStream *)v9(v7);
        if (v11)
        {
          v14 = v10 - 1;
          if (!v10)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v11, v14, (uint64_t)&v24, v13);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v24, &str_25, 0);
          v25 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v24);
        if (v25 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v23, &v24);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v16 = *(char **)(a1 + 24);
        v15 = *(_QWORD *)(a1 + 32);
        v17 = (WTF::PrintStream *)v9(v7);
        if (v16)
        {
          v19 = v15 - 1;
          if (!v15)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v16, v19, (uint64_t)&v24, v18);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v24, &str_25, 0);
          v25 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v24);
        if (v25 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v23, &v24);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *(_BYTE *)(a1 + 40) = 1;
      }
      JSC::B3::Air::Tmp::dump(v4, v5);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 40))(v3);
      v4 = (JSC::B3::Air::Tmp *)((char *)v4 + 4);
    }
    while (v4 != (JSC::B3::Air::Tmp *)(**(_QWORD **)a1 + 4 * *(unsigned int *)(*(_QWORD *)a1 + 12)));
  }
  WTF::PrintStream::printf(v3, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervals<JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1}>(JSC::B3::Air::`anonymous namespace'::LinearScan::prepareIntervalsForScanForRegisters(void)::{lambda(JSC::B3::Air::`anonymous namespace'::TmpData &)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &)#1} &,JSC::B3::Air::Tmp*,false>(unint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  _QWORD *v39;
  int *v40;
  int *v41;
  unsigned int v42;
  int v43;
  int v44;
  _QWORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  _QWORD *v49;
  int *v50;
  int *v51;
  int *v52;
  int v53;
  unsigned int v54;
  unint64_t *v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  int *v64;
  unsigned int v65;
  int v66;
  int v67;
  _QWORD *v68;
  int *v69;
  unsigned int v70;
  _QWORD *v71;
  int *v72;
  unsigned int v73;
  int v74;
  int v75;
  _QWORD *v76;
  int v77;
  int v78;
  int *v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  int v83;
  unsigned int v84;
  _QWORD *v85;
  int *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  int *v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int *v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  _QWORD *v141;
  unint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  int *v153;
  int v154;
  int v155;
  unsigned int v156;
  _QWORD *v157;
  unint64_t v158;
  unsigned int v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  int *v190;
  unsigned int v191;
  unint64_t *v192;
  int *v193;

  v9 = (int *)result;
LABEL_2:
  v193 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v87 = *a3;
        v88 = *(a2 - 1);
        v89 = -v88;
        v90 = 96;
        if (v88 <= 0)
          v91 = 96;
        else
          v91 = 80;
        v92 = *(_QWORD *)(v87 + v91);
        if (v88 > 0)
          v89 = *(a2 - 1);
        v93 = *(_QWORD *)(v92 + 40 * v89);
        v94 = *v10;
        if (*v10 > 0)
          v90 = 80;
        v95 = *(_QWORD *)(v87 + v90);
        if (v94 <= 0)
          v96 = -v94;
        else
          v96 = *v10;
        if (v93 < *(_QWORD *)(v95 + 40 * v96))
        {
          *v10 = v88;
          *(a2 - 1) = v94;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v11 <= 95)
        {
          v97 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v98 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v99 = (_QWORD *)(v97 + 80);
                v100 = (_QWORD *)(v97 + 96);
                v101 = 4;
                v102 = v10;
                do
                {
                  v104 = *v102;
                  v103 = v102[1];
                  v102 = v98;
                  v105 = v104;
                  v106 = -v103;
                  if (v103 <= 0)
                  {
                    v107 = v100;
                  }
                  else
                  {
                    v106 = v103;
                    v107 = v99;
                  }
                  v108 = *(_QWORD *)(*v107 + 40 * v106);
                  if (v104 > 0)
                  {
                    v109 = v99;
                  }
                  else
                  {
                    v104 = -v104;
                    v109 = v100;
                  }
                  if (v108 < *(_QWORD *)(*v109 + 40 * v104))
                  {
                    v110 = v101;
                    while (1)
                    {
                      *(int *)((char *)v10 + v110) = v105;
                      v111 = v110 - 4;
                      if (v110 == 4)
                        break;
                      v105 = *(int *)((char *)v10 + v110 - 8);
                      v112 = -v105;
                      if (v105 <= 0)
                      {
                        v113 = v100;
                      }
                      else
                      {
                        v112 = v105;
                        v113 = v99;
                      }
                      result = *(_QWORD *)(*v113 + 40 * v112);
                      v110 = v111;
                      if (v108 >= result)
                      {
                        v114 = (int *)((char *)v10 + v111);
                        goto LABEL_149;
                      }
                    }
                    v114 = v10;
LABEL_149:
                    *v114 = v103;
                  }
                  v98 = v102 + 1;
                  v101 += 4;
                }
                while (v102 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v177 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v178 = 0;
              v179 = (_QWORD *)(v97 + 80);
              v180 = (_QWORD *)(v97 + 96);
              v181 = 1;
              while (1)
              {
                v182 = v10[v178];
                v178 = v181;
                v183 = *v177;
                v184 = v182;
                v185 = -*v177;
                if (*v177 <= 0)
                {
                  v186 = v180;
                }
                else
                {
                  v185 = *v177;
                  v186 = v179;
                }
                v187 = *(_QWORD *)(*v186 + 40 * v185);
                if (v182 > 0)
                {
                  v188 = v179;
                }
                else
                {
                  v182 = -v182;
                  v188 = v180;
                }
                if (v187 < *(_QWORD *)(*v188 + 40 * v182))
                  break;
LABEL_251:
                v181 = v178 + 1;
                if (++v177 == a2)
                  return result;
              }
              v189 = 0;
              while (1)
              {
                v190 = &v177[v189];
                *v190 = v184;
                if (!(v178 + v189))
                  break;
                v184 = *(v190 - 2);
                v191 = -v184;
                if (v184 <= 0)
                {
                  v192 = v180;
                }
                else
                {
                  v191 = v184;
                  v192 = v179;
                }
                result = *v192;
                --v189;
                if (v187 >= *(_QWORD *)(result + 40 * v191))
                {
                  v177[v189] = v183;
                  goto LABEL_251;
                }
              }
LABEL_253:
              __break(1u);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v115 = (v12 - 2) >> 1;
            v116 = v115;
            do
            {
              v117 = v116;
              if (v115 >= v116)
              {
                v118 = *a3;
                v119 = (2 * v116) | 1;
                v120 = &v10[v119];
                if (2 * v117 + 2 >= (uint64_t)v12)
                {
                  v121 = *v120;
                }
                else
                {
                  v121 = v120[1];
                  v122 = -*v120;
                  if (*v120 <= 0)
                  {
                    v123 = 96;
                  }
                  else
                  {
                    v122 = *v120;
                    v123 = 80;
                  }
                  v124 = *(_QWORD *)(*(_QWORD *)(v118 + v123) + 40 * v122);
                  v125 = -v121;
                  if (v121 <= 0)
                  {
                    v126 = 96;
                  }
                  else
                  {
                    v125 = v120[1];
                    v126 = 80;
                  }
                  if (v124 < *(_QWORD *)(*(_QWORD *)(v118 + v126) + 40 * v125))
                  {
                    ++v120;
                    v119 = 2 * v117 + 2;
                  }
                  else
                  {
                    v121 = *v120;
                  }
                }
                v127 = &v10[v117];
                if (v121 <= 0)
                  v128 = -v121;
                else
                  v128 = v121;
                if (v121 <= 0)
                  v129 = 96;
                else
                  v129 = 80;
                v130 = *(_QWORD *)(*(_QWORD *)(v118 + v129) + 40 * v128);
                v131 = *v127;
                v132 = -*v127;
                if (*v127 <= 0)
                  v133 = 96;
                else
                  v133 = 80;
                v134 = *(_QWORD *)(v118 + v133);
                if (v131 > 0)
                  v132 = *v127;
                v135 = *(_QWORD *)(v134 + 40 * v132);
                if (v130 >= v135)
                {
                  v136 = (_QWORD *)(v118 + 80);
                  v137 = (_QWORD *)(v118 + 96);
                  do
                  {
                    *v127 = v121;
                    v127 = v120;
                    if (v115 < v119)
                      break;
                    v138 = (2 * v119) | 1;
                    v120 = &v10[v138];
                    v119 = 2 * v119 + 2;
                    if (v119 >= (uint64_t)v12)
                    {
                      v121 = *v120;
                      v119 = v138;
                    }
                    else
                    {
                      v121 = *v120;
                      v139 = v120[1];
                      v140 = -*v120;
                      if (*v120 <= 0)
                      {
                        v141 = v137;
                      }
                      else
                      {
                        v140 = *v120;
                        v141 = v136;
                      }
                      v142 = *(_QWORD *)(*v141 + 40 * v140);
                      v143 = -v139;
                      if (v139 <= 0)
                      {
                        v144 = v137;
                      }
                      else
                      {
                        v143 = v120[1];
                        v144 = v136;
                      }
                      if (v142 >= *(_QWORD *)(*v144 + 40 * v143))
                      {
                        v119 = v138;
                      }
                      else
                      {
                        v121 = v120[1];
                        ++v120;
                      }
                    }
                    v145 = -v121;
                    if (v121 <= 0)
                    {
                      v146 = v137;
                    }
                    else
                    {
                      v145 = v121;
                      v146 = v136;
                    }
                  }
                  while (*(_QWORD *)(*v146 + 40 * v145) >= v135);
                  *v127 = v131;
                }
              }
              v116 = v117 - 1;
            }
            while (v117);
            v147 = (unint64_t)v11 >> 2;
            do
            {
              v148 = 0;
              v149 = *v10;
              v150 = *a3 + 80;
              v151 = *a3 + 96;
              v152 = v10;
              do
              {
                v153 = &v152[v148 + 1];
                result = (2 * v148) | 1;
                v148 = 2 * v148 + 2;
                if (v148 >= v147)
                {
                  v154 = *v153;
                  v148 = result;
                }
                else
                {
                  v154 = *v153;
                  v155 = v153[1];
                  v156 = -*v153;
                  if (*v153 <= 0)
                  {
                    v157 = (_QWORD *)v151;
                  }
                  else
                  {
                    v156 = *v153;
                    v157 = (_QWORD *)v150;
                  }
                  v158 = *(_QWORD *)(*v157 + 40 * v156);
                  v159 = -v155;
                  if (v155 <= 0)
                  {
                    v160 = (_QWORD *)v151;
                  }
                  else
                  {
                    v159 = v153[1];
                    v160 = (_QWORD *)v150;
                  }
                  if (v158 >= *(_QWORD *)(*v160 + 40 * v159))
                  {
                    v148 = result;
                  }
                  else
                  {
                    v154 = v153[1];
                    ++v153;
                  }
                }
                *v152 = v154;
                v152 = v153;
              }
              while (v148 <= (uint64_t)((unint64_t)(v147 - 2) >> 1));
              if (v153 == --a2)
              {
                *v153 = v149;
              }
              else
              {
                *v153 = *a2;
                *a2 = v149;
                v161 = (char *)v153 - (char *)v10 + 4;
                if (v161 >= 5)
                {
                  v162 = (unint64_t)v161 >> 2;
                  v163 = *a3;
                  v164 = (v162 - 2) >> 1;
                  v165 = (unsigned int *)&v10[v164];
                  v166 = *v165;
                  v167 = *v165;
                  if ((int)*v165 > 0)
                  {
                    v168 = 80;
                  }
                  else
                  {
                    v166 = -v166;
                    v168 = 96;
                  }
                  v169 = *(_QWORD *)(*(_QWORD *)(v163 + v168) + 40 * v166);
                  v170 = *v153;
                  v171 = -*v153;
                  if (*v153 <= 0)
                    v172 = 96;
                  else
                    v172 = 80;
                  v173 = *(_QWORD *)(v163 + v172);
                  if (v170 > 0)
                    v171 = *v153;
                  result = *(_QWORD *)(v173 + 40 * v171);
                  if (v169 < result)
                  {
                    do
                    {
                      *v153 = v167;
                      v153 = (int *)v165;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = (unsigned int *)&v10[v164];
                      v167 = *v165;
                      v174 = -*v165;
                      if ((int)*v165 <= 0)
                        v175 = 96;
                      else
                        v175 = 80;
                      v176 = *(_QWORD *)(v163 + v175);
                      if (v167 > 0)
                        v174 = *v165;
                    }
                    while (*(_QWORD *)(v176 + 40 * v174) < result);
                    *v153 = v170;
                  }
                }
              }
              v20 = v147-- <= 2;
            }
            while (!v20);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *a3;
        v18 = *v9;
        if ((a5 & 1) == 0)
        {
          v19 = *(v9 - 1);
          v20 = v19 <= 0;
          if (v19 <= 0)
            v19 = -v19;
          v21 = 96;
          if (v20)
            v22 = 96;
          else
            v22 = 80;
          v23 = *(_QWORD *)(*(_QWORD *)(v17 + v22) + 40 * v19);
          v24 = -v18;
          if (v18 > 0)
            v21 = 80;
          v25 = *(_QWORD *)(v17 + v21);
          if (v18 > 0)
            v24 = *v9;
          v26 = *(_QWORD *)(v25 + 40 * v24);
          if (v23 >= v26)
          {
            v60 = (_QWORD *)(v17 + 80);
            v61 = (_QWORD *)(v17 + 96);
            v62 = *v193;
            if (*v193 > 0)
            {
              v63 = v60;
            }
            else
            {
              v62 = -v62;
              v63 = v61;
            }
            if (v26 >= *(_QWORD *)(*v63 + 40 * v62))
            {
              v69 = v9 + 1;
              do
              {
                v10 = v69;
                if (v69 >= a2)
                  break;
                ++v69;
                v70 = *v10;
                if (*v10 > 0)
                {
                  v71 = v60;
                }
                else
                {
                  v70 = -v70;
                  v71 = v61;
                }
              }
              while (v26 >= *(_QWORD *)(*v71 + 40 * v70));
            }
            else
            {
              v64 = v9 + 1;
              do
              {
                if (v64 == a2)
                  goto LABEL_253;
                v66 = *v64++;
                v65 = v66;
                v67 = -v66;
                if (v66 > 0)
                {
                  v68 = v60;
                }
                else
                {
                  v65 = v67;
                  v68 = v61;
                }
              }
              while (v26 >= *(_QWORD *)(*v68 + 40 * v65));
              v10 = v64 - 1;
            }
            v72 = a2;
            if (v10 < a2)
            {
              v72 = a2;
              while (v72 != v9)
              {
                v74 = *--v72;
                v73 = v74;
                v75 = -v74;
                if (v74 > 0)
                {
                  v76 = v60;
                }
                else
                {
                  v73 = v75;
                  v76 = v61;
                }
                if (v26 >= *(_QWORD *)(*v76 + 40 * v73))
                  goto LABEL_94;
              }
              goto LABEL_253;
            }
LABEL_94:
            if (v10 < v72)
            {
              v77 = *v10;
              v78 = *v72;
              do
              {
                *v10 = v78;
                v79 = v10 + 1;
                *v72 = v77;
                do
                {
                  if (v79 == a2)
                    goto LABEL_253;
                  v80 = *v79++;
                  v77 = v80;
                  v81 = -v80;
                  if (v80 <= 0)
                  {
                    v82 = v61;
                  }
                  else
                  {
                    v81 = v77;
                    v82 = v60;
                  }
                }
                while (v26 >= *(_QWORD *)(*v82 + 40 * v81));
                v10 = v79 - 1;
                do
                {
                  if (v72 == v9)
                    goto LABEL_253;
                  v83 = *--v72;
                  v78 = v83;
                  v84 = -v83;
                  if (v83 <= 0)
                  {
                    v85 = v61;
                  }
                  else
                  {
                    v84 = v78;
                    v85 = v60;
                  }
                }
                while (v26 < *(_QWORD *)(*v85 + 40 * v84));
              }
              while (v10 < v72);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v18;
            continue;
          }
        }
        v27 = v9 + 1;
        if (v9 + 1 == a2)
          goto LABEL_253;
        v28 = (_QWORD *)(v17 + 80);
        v29 = (_QWORD *)(v17 + 96);
        v30 = -v18;
        if (v18 <= 0)
        {
          v31 = v29;
        }
        else
        {
          v30 = *v9;
          v31 = v28;
        }
        v32 = *v27;
        v33 = -*v27;
        if (*v27 <= 0)
        {
          v34 = v29;
        }
        else
        {
          v33 = *v27;
          v34 = v28;
        }
        v35 = *(_QWORD *)(*v31 + 40 * v30);
        if (*(_QWORD *)(*v34 + 40 * v33) < v35)
        {
          v36 = 0;
          do
          {
            v37 = &v9[v36 + 2];
            if (v37 == a2)
              goto LABEL_253;
            v32 = *v37;
            v38 = -*v37;
            if (v32 <= 0)
            {
              v39 = v29;
            }
            else
            {
              v38 = v32;
              v39 = v28;
            }
            ++v36;
          }
          while (*(_QWORD *)(*v39 + 40 * v38) < v35);
          v40 = &v9[v36];
          v27 = &v9[v36 + 1];
          v41 = a2;
          if (v36 * 4)
          {
            while (v41 != v9)
            {
              v43 = *--v41;
              v42 = v43;
              v44 = -v43;
              if (v43 > 0)
              {
                v45 = v28;
              }
              else
              {
                v42 = v44;
                v45 = v29;
              }
              if (*(_QWORD *)(*v45 + 40 * v42) < v35)
                goto LABEL_48;
            }
            goto LABEL_253;
          }
        }
        v41 = a2;
        do
        {
          if (v27 >= v41)
            break;
          v47 = *--v41;
          v46 = v47;
          v48 = -v47;
          if (v47 > 0)
          {
            v49 = v28;
          }
          else
          {
            v46 = v48;
            v49 = v29;
          }
        }
        while (*(_QWORD *)(*v49 + 40 * v46) >= v35);
        v40 = v9;
LABEL_48:
        if (v27 < v41)
        {
          result = *v41;
          v50 = v27;
          v51 = v41;
          do
          {
            *v50 = result;
            *v51 = v32;
            v52 = v50 + 1;
            do
            {
              if (v52 == a2)
                goto LABEL_253;
              v53 = *v52++;
              v32 = v53;
              v54 = -v53;
              if (v53 <= 0)
              {
                v55 = v29;
              }
              else
              {
                v54 = v32;
                v55 = v28;
              }
              result = *v55;
            }
            while (*(_QWORD *)(result + 40 * v54) < v35);
            v50 = v52 - 1;
            do
            {
              if (v51 == v9)
                goto LABEL_253;
              v56 = *--v51;
              result = v56;
              v57 = -v56;
              if (v56 <= 0)
              {
                v58 = v29;
              }
              else
              {
                v57 = result;
                v58 = v28;
              }
            }
            while (*(_QWORD *)(*v58 + 40 * v57) >= v35);
          }
          while (v50 < v51);
          v40 = v52 - 2;
        }
        if (v40 != v9)
          *v9 = *v40;
        *v40 = v18;
        if (v27 < v41)
        {
LABEL_69:
          a5 = 0;
          v10 = v40 + 1;
          continue;
        }
        v10 = v40 + 1;
        if (!(_DWORD)result)
        {
          if (v59)
            continue;
          goto LABEL_69;
        }
        a2 = v40;
        if (!v59)
          goto LABEL_2;
        return result;
    }
  }
}

